
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002998c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004df8  08029a50  08029a50  0002aa50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e848  0802e848  00030430  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802e848  0802e848  0002f848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e850  0802e850  00030430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e850  0802e850  0002f850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802e854  0802e854  0002f854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000430  20000000  0802e858  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031fc  20000430  0802ec88  00030430  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000362c  0802ec88  0003062c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036a61  00000000  00000000  00030458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009d39  00000000  00000000  00066eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d98  00000000  00000000  00070bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021f5  00000000  00000000  00073990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242f4  00000000  00000000  00075b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000463db  00000000  00000000  00099e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3116  00000000  00000000  000e0254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0018336a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bb80  00000000  00000000  0018341c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018ef9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0018f009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00191585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000430 	.word	0x20000430
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08029a34 	.word	0x08029a34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000434 	.word	0x20000434
 8000104:	08029a34 	.word	0x08029a34

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802d948 	.word	0x0802d948
 8000ec8:	0802d988 	.word	0x0802d988
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802d9c4 	.word	0x0802d9c4
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	2000045c 	.word	0x2000045c
 8003ad8:	2000048c 	.word	0x2000048c

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000458 	.word	0x20000458
 8003b38:	2000048c 	.word	0x2000048c

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000454 	.word	0x20000454

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f010 f938 	bl	8013dcc <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	20000450 	.word	0x20000450

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000458 	.word	0x20000458
 8003b98:	2000045c 	.word	0x2000045c

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f010 f90f 	bl	8013de0 <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f00f fb87 	bl	801334c <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	2000044c 	.word	0x2000044c
 8003c80:	08029a50 	.word	0x08029a50
 8003c84:	08029a5c 	.word	0x08029a5c
 8003c88:	08029a60 	.word	0x08029a60
 8003c8c:	08029a6c 	.word	0x08029a6c
 8003c90:	08029a8c 	.word	0x08029a8c
 8003c94:	2000048c 	.word	0x2000048c

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f010 f894 	bl	8013de0 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f010 f880 	bl	8013de0 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f00f fb13 	bl	801334c <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f010 f85a 	bl	8013de0 <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000494 	.word	0x20000494
 8003d40:	20000495 	.word	0x20000495
 8003d44:	2000044c 	.word	0x2000044c
 8003d48:	08029a90 	.word	0x08029a90
 8003d4c:	08029a5c 	.word	0x08029a5c
 8003d50:	08029a94 	.word	0x08029a94
 8003d54:	08029a8c 	.word	0x08029a8c

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f010 f83c 	bl	8013de0 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f010 f830 	bl	8013de0 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f00f fab5 	bl	801334c <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f00f fffc 	bl	8013de0 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	2000048c 	.word	0x2000048c
 8003e00:	2000044c 	.word	0x2000044c
 8003e04:	08029ac0 	.word	0x08029ac0
 8003e08:	08029a8c 	.word	0x08029a8c

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f00f ffc9 	bl	8013de0 <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	2000048c 	.word	0x2000048c

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f00f fa42 	bl	801334c <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f00f fa03 	bl	801334c <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	2000048c 	.word	0x2000048c
 8003f58:	08029adc 	.word	0x08029adc
 8003f5c:	08029afc 	.word	0x08029afc
 8003f60:	2000044c 	.word	0x2000044c
 8003f64:	08029b00 	.word	0x08029b00
 8003f68:	08029a8c 	.word	0x08029a8c

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f00f f9dc 	bl	801334c <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	2000044c 	.word	0x2000044c
 8003fa4:	08029b34 	.word	0x08029b34
 8003fa8:	08029a8c 	.word	0x08029a8c

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f00f f9bc 	bl	801334c <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f00f feff 	bl	8013de0 <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f00f feee 	bl	8013de0 <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	2000044c 	.word	0x2000044c
 8004094:	08029b48 	.word	0x08029b48
 8004098:	08029a8c 	.word	0x08029a8c
 800409c:	20000484 	.word	0x20000484
 80040a0:	2000048c 	.word	0x2000048c

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00f f940 	bl	801334c <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f00f fe83 	bl	8013de0 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f024 f9c3 	bl	80284c0 <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f024 f99f 	bl	80284c0 <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f024 f97b 	bl	80284c0 <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f024 f957 	bl	80284c0 <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f024 f92d 	bl	80284c0 <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f024 f909 	bl	80284c0 <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f024 f8e5 	bl	80284c0 <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f024 f8c1 	bl	80284c0 <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	2000044c 	.word	0x2000044c
 8004378:	08029b64 	.word	0x08029b64
 800437c:	08029a8c 	.word	0x08029a8c
 8004380:	20000460 	.word	0x20000460

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bc8      	ldr	r3, [pc, #800]	@ (8004780 <ENS_Upkeep+0x328>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00e ff1c 	bl	80132a0 <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc3      	ldr	r3, [pc, #780]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e21c      	b.n	80048b6 <ENS_Upkeep+0x45e>
  }
  switch(ENSState) {
 800447c:	4bc1      	ldr	r3, [pc, #772]	@ (8004784 <ENS_Upkeep+0x32c>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e200      	b.n	8004888 <ENS_Upkeep+0x430>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bbf      	ldr	r3, [pc, #764]	@ (8004788 <ENS_Upkeep+0x330>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4abe      	ldr	r2, [pc, #760]	@ (800478c <ENS_Upkeep+0x334>)
 8004492:	4bbf      	ldr	r3, [pc, #764]	@ (8004790 <ENS_Upkeep+0x338>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00e ff58 	bl	801334c <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800449c:	f00f fc96 	bl	8013dcc <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4abc      	ldr	r2, [pc, #752]	@ (8004794 <ENS_Upkeep+0x33c>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bb6      	ldr	r3, [pc, #728]	@ (8004780 <ENS_Upkeep+0x328>)
 80044a8:	601a      	str	r2, [r3, #0]
    break;
 80044aa:	e202      	b.n	80048b2 <ENS_Upkeep+0x45a>


  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044ac:	f008 ffb6 	bl	800d41c <getSensorLock>
 80044b0:	1e03      	subs	r3, r0, #0
 80044b2:	d000      	beq.n	80044b6 <ENS_Upkeep+0x5e>
 80044b4:	e1f4      	b.n	80048a0 <ENS_Upkeep+0x448>
      break;
    }
    setSensorLock(ENS160);
 80044b6:	2004      	movs	r0, #4
 80044b8:	f008 ff9c 	bl	800d3f4 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044bc:	1d3c      	adds	r4, r7, #4
 80044be:	2002      	movs	r0, #2
 80044c0:	f7ff fca4 	bl	8003e0c <ENS160_setMode>
 80044c4:	0003      	movs	r3, r0
 80044c6:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044c8:	1d3b      	adds	r3, r7, #4
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <ENS_Upkeep+0x7c>
 80044d0:	4bb1      	ldr	r3, [pc, #708]	@ (8004798 <ENS_Upkeep+0x340>)
 80044d2:	e000      	b.n	80044d6 <ENS_Upkeep+0x7e>
 80044d4:	4bb1      	ldr	r3, [pc, #708]	@ (800479c <ENS_Upkeep+0x344>)
 80044d6:	4ab2      	ldr	r2, [pc, #712]	@ (80047a0 <ENS_Upkeep+0x348>)
 80044d8:	49ad      	ldr	r1, [pc, #692]	@ (8004790 <ENS_Upkeep+0x338>)
 80044da:	2003      	movs	r0, #3
 80044dc:	f00e ff36 	bl	801334c <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044e0:	200a      	movs	r0, #10
 80044e2:	f00f fc7d 	bl	8013de0 <HAL_Delay>
    setSensorLock(FREE);
 80044e6:	2000      	movs	r0, #0
 80044e8:	f008 ff84 	bl	800d3f4 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 80044ec:	4ba5      	ldr	r3, [pc, #660]	@ (8004784 <ENS_Upkeep+0x32c>)
 80044ee:	2203      	movs	r2, #3
 80044f0:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80044f2:	f00f fc6b 	bl	8013dcc <HAL_GetTick>
 80044f6:	0003      	movs	r3, r0
 80044f8:	22fa      	movs	r2, #250	@ 0xfa
 80044fa:	0092      	lsls	r2, r2, #2
 80044fc:	189a      	adds	r2, r3, r2
 80044fe:	4ba0      	ldr	r3, [pc, #640]	@ (8004780 <ENS_Upkeep+0x328>)
 8004500:	601a      	str	r2, [r3, #0]
    break;
 8004502:	e1d6      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004504:	f008 ff8a 	bl	800d41c <getSensorLock>
 8004508:	1e03      	subs	r3, r0, #0
 800450a:	d000      	beq.n	800450e <ENS_Upkeep+0xb6>
 800450c:	e1ca      	b.n	80048a4 <ENS_Upkeep+0x44c>
      break;
    }
    setSensorLock(ENS160);
 800450e:	2004      	movs	r0, #4
 8004510:	f008 ff70 	bl	800d3f4 <setSensorLock>
    status = ENS160_readStatus();
 8004514:	1d7c      	adds	r4, r7, #5
 8004516:	f7ff fd29 	bl	8003f6c <ENS160_readStatus>
 800451a:	0003      	movs	r3, r0
 800451c:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 800451e:	200a      	movs	r0, #10
 8004520:	f00f fc5e 	bl	8013de0 <HAL_Delay>
    setSensorLock(FREE);
 8004524:	2000      	movs	r0, #0
 8004526:	f008 ff65 	bl	800d3f4 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800452a:	1d7b      	adds	r3, r7, #5
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	220c      	movs	r2, #12
 8004530:	4013      	ands	r3, r2
 8004532:	d02e      	beq.n	8004592 <ENS_Upkeep+0x13a>
      switch (status >> 2) {
 8004534:	1d7b      	adds	r3, r7, #5
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b03      	cmp	r3, #3
 800453e:	d013      	beq.n	8004568 <ENS_Upkeep+0x110>
 8004540:	dc19      	bgt.n	8004576 <ENS_Upkeep+0x11e>
 8004542:	2b01      	cmp	r3, #1
 8004544:	d002      	beq.n	800454c <ENS_Upkeep+0xf4>
 8004546:	2b02      	cmp	r3, #2
 8004548:	d007      	beq.n	800455a <ENS_Upkeep+0x102>
 800454a:	e014      	b.n	8004576 <ENS_Upkeep+0x11e>
      case 1:
        Debug("ENS160 Warm-Up phase");
 800454c:	4a95      	ldr	r2, [pc, #596]	@ (80047a4 <ENS_Upkeep+0x34c>)
 800454e:	4b90      	ldr	r3, [pc, #576]	@ (8004790 <ENS_Upkeep+0x338>)
 8004550:	0019      	movs	r1, r3
 8004552:	2003      	movs	r0, #3
 8004554:	f00e fefa 	bl	801334c <CreateLine>
        break;
 8004558:	e00d      	b.n	8004576 <ENS_Upkeep+0x11e>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800455a:	4a93      	ldr	r2, [pc, #588]	@ (80047a8 <ENS_Upkeep+0x350>)
 800455c:	4b8c      	ldr	r3, [pc, #560]	@ (8004790 <ENS_Upkeep+0x338>)
 800455e:	0019      	movs	r1, r3
 8004560:	2003      	movs	r0, #3
 8004562:	f00e fef3 	bl	801334c <CreateLine>
        break;
 8004566:	e006      	b.n	8004576 <ENS_Upkeep+0x11e>
      case 3:
        Debug("ENS160 Invalid output");
 8004568:	4a90      	ldr	r2, [pc, #576]	@ (80047ac <ENS_Upkeep+0x354>)
 800456a:	4b89      	ldr	r3, [pc, #548]	@ (8004790 <ENS_Upkeep+0x338>)
 800456c:	0019      	movs	r1, r3
 800456e:	2003      	movs	r0, #3
 8004570:	f00e feec 	bl	801334c <CreateLine>
        break;
 8004574:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 8004576:	1d7b      	adds	r3, r7, #5
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2203      	movs	r2, #3
 800457c:	4013      	ands	r3, r2
 800457e:	d108      	bne.n	8004592 <ENS_Upkeep+0x13a>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004580:	f00f fc24 	bl	8013dcc <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	22fa      	movs	r2, #250	@ 0xfa
 8004588:	0092      	lsls	r2, r2, #2
 800458a:	189a      	adds	r2, r3, r2
 800458c:	4b7c      	ldr	r3, [pc, #496]	@ (8004780 <ENS_Upkeep+0x328>)
 800458e:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 8004590:	e18f      	b.n	80048b2 <ENS_Upkeep+0x45a>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 8004592:	4b7c      	ldr	r3, [pc, #496]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004594:	2204      	movs	r2, #4
 8004596:	701a      	strb	r2, [r3, #0]
    break;
 8004598:	e18b      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 800459a:	f008 ff3f 	bl	800d41c <getSensorLock>
 800459e:	1e03      	subs	r3, r0, #0
 80045a0:	d036      	beq.n	8004610 <ENS_Upkeep+0x1b8>
 80045a2:	f008 ff3b 	bl	800d41c <getSensorLock>
 80045a6:	0003      	movs	r3, r0
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d031      	beq.n	8004610 <ENS_Upkeep+0x1b8>
      uint8_t locktype = getSensorLock();
 80045ac:	1dbc      	adds	r4, r7, #6
 80045ae:	f008 ff35 	bl	800d41c <getSensorLock>
 80045b2:	0003      	movs	r3, r0
 80045b4:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045b6:	1dbb      	adds	r3, r7, #6
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d019      	beq.n	80045f2 <ENS_Upkeep+0x19a>
 80045be:	1dbb      	adds	r3, r7, #6
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d013      	beq.n	80045ee <ENS_Upkeep+0x196>
 80045c6:	1dbb      	adds	r3, r7, #6
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	d00d      	beq.n	80045ea <ENS_Upkeep+0x192>
 80045ce:	1dbb      	adds	r3, r7, #6
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d007      	beq.n	80045e6 <ENS_Upkeep+0x18e>
 80045d6:	1dbb      	adds	r3, r7, #6
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d101      	bne.n	80045e2 <ENS_Upkeep+0x18a>
 80045de:	4b74      	ldr	r3, [pc, #464]	@ (80047b0 <ENS_Upkeep+0x358>)
 80045e0:	e008      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045e2:	4b74      	ldr	r3, [pc, #464]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80045e4:	e006      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045e6:	4b74      	ldr	r3, [pc, #464]	@ (80047b8 <ENS_Upkeep+0x360>)
 80045e8:	e004      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045ea:	4b74      	ldr	r3, [pc, #464]	@ (80047bc <ENS_Upkeep+0x364>)
 80045ec:	e002      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045ee:	4b74      	ldr	r3, [pc, #464]	@ (80047c0 <ENS_Upkeep+0x368>)
 80045f0:	e000      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045f2:	4b74      	ldr	r3, [pc, #464]	@ (80047c4 <ENS_Upkeep+0x36c>)
 80045f4:	4a74      	ldr	r2, [pc, #464]	@ (80047c8 <ENS_Upkeep+0x370>)
 80045f6:	4966      	ldr	r1, [pc, #408]	@ (8004790 <ENS_Upkeep+0x338>)
 80045f8:	2003      	movs	r0, #3
 80045fa:	f00e fea7 	bl	801334c <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 80045fe:	f00f fbe5 	bl	8013dcc <HAL_GetTick>
 8004602:	0003      	movs	r3, r0
 8004604:	334e      	adds	r3, #78	@ 0x4e
 8004606:	33ff      	adds	r3, #255	@ 0xff
 8004608:	001a      	movs	r2, r3
 800460a:	4b5d      	ldr	r3, [pc, #372]	@ (8004780 <ENS_Upkeep+0x328>)
 800460c:	601a      	str	r2, [r3, #0]
      break;
 800460e:	e150      	b.n	80048b2 <ENS_Upkeep+0x45a>
    }
    setSensorLock(ENS160);
 8004610:	2004      	movs	r0, #4
 8004612:	f008 feef 	bl	800d3f4 <setSensorLock>
    status = ENS160_readStatus();
 8004616:	1d7c      	adds	r4, r7, #5
 8004618:	f7ff fca8 	bl	8003f6c <ENS160_readStatus>
 800461c:	0003      	movs	r3, r0
 800461e:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004620:	1d7b      	adds	r3, r7, #5
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2202      	movs	r2, #2
 8004626:	4013      	ands	r3, r2
 8004628:	d10e      	bne.n	8004648 <ENS_Upkeep+0x1f0>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800462a:	f00f fbcf 	bl	8013dcc <HAL_GetTick>
 800462e:	0003      	movs	r3, r0
 8004630:	33f5      	adds	r3, #245	@ 0xf5
 8004632:	33ff      	adds	r3, #255	@ 0xff
 8004634:	001a      	movs	r2, r3
 8004636:	4b52      	ldr	r3, [pc, #328]	@ (8004780 <ENS_Upkeep+0x328>)
 8004638:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800463a:	200a      	movs	r0, #10
 800463c:	f00f fbd0 	bl	8013de0 <HAL_Delay>
      setSensorLock(FREE);
 8004640:	2000      	movs	r0, #0
 8004642:	f008 fed7 	bl	800d3f4 <setSensorLock>
      break;
 8004646:	e134      	b.n	80048b2 <ENS_Upkeep+0x45a>
    }
    ENS160_measure(false);
 8004648:	2000      	movs	r0, #0
 800464a:	f7ff fcaf 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 800464e:	200a      	movs	r0, #10
 8004650:	f00f fbc6 	bl	8013de0 <HAL_Delay>
    ENS160_measureRaw(false);
 8004654:	2000      	movs	r0, #0
 8004656:	f7ff fd25 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800465a:	200a      	movs	r0, #10
 800465c:	f00f fbc0 	bl	8013de0 <HAL_Delay>
    setSensorLock(FREE);
 8004660:	2000      	movs	r0, #0
 8004662:	f008 fec7 	bl	800d3f4 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 8004666:	4b47      	ldr	r3, [pc, #284]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004668:	2206      	movs	r2, #6
 800466a:	701a      	strb	r2, [r3, #0]
    break;
 800466c:	e121      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 800466e:	4b57      	ldr	r3, [pc, #348]	@ (80047cc <ENS_Upkeep+0x374>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d13b      	bne.n	80046ee <ENS_Upkeep+0x296>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 8004676:	4b56      	ldr	r3, [pc, #344]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	001c      	movs	r4, r3
 800467c:	4b54      	ldr	r3, [pc, #336]	@ (80047d0 <ENS_Upkeep+0x378>)
 800467e:	885b      	ldrh	r3, [r3, #2]
 8004680:	0018      	movs	r0, r3
 8004682:	4b53      	ldr	r3, [pc, #332]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004684:	889b      	ldrh	r3, [r3, #4]
 8004686:	4a53      	ldr	r2, [pc, #332]	@ (80047d4 <ENS_Upkeep+0x37c>)
 8004688:	4953      	ldr	r1, [pc, #332]	@ (80047d8 <ENS_Upkeep+0x380>)
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	9000      	str	r0, [sp, #0]
 800468e:	0023      	movs	r3, r4
 8004690:	2002      	movs	r0, #2
 8004692:	f00e fe5b 	bl	801334c <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 8004696:	4b51      	ldr	r3, [pc, #324]	@ (80047dc <ENS_Upkeep+0x384>)
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	4b50      	ldr	r3, [pc, #320]	@ (80047dc <ENS_Upkeep+0x384>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4a50      	ldr	r2, [pc, #320]	@ (80047e0 <ENS_Upkeep+0x388>)
 80046a0:	494d      	ldr	r1, [pc, #308]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	0003      	movs	r3, r0
 80046a6:	2002      	movs	r0, #2
 80046a8:	f00e fe50 	bl	801334c <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 80046ac:	4b4b      	ldr	r3, [pc, #300]	@ (80047dc <ENS_Upkeep+0x384>)
 80046ae:	6898      	ldr	r0, [r3, #8]
 80046b0:	4b4a      	ldr	r3, [pc, #296]	@ (80047dc <ENS_Upkeep+0x384>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4a4b      	ldr	r2, [pc, #300]	@ (80047e4 <ENS_Upkeep+0x38c>)
 80046b6:	4948      	ldr	r1, [pc, #288]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	0003      	movs	r3, r0
 80046bc:	2002      	movs	r0, #2
 80046be:	f00e fe45 	bl	801334c <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 80046c2:	4b46      	ldr	r3, [pc, #280]	@ (80047dc <ENS_Upkeep+0x384>)
 80046c4:	6918      	ldr	r0, [r3, #16]
 80046c6:	4b45      	ldr	r3, [pc, #276]	@ (80047dc <ENS_Upkeep+0x384>)
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	4a47      	ldr	r2, [pc, #284]	@ (80047e8 <ENS_Upkeep+0x390>)
 80046cc:	4942      	ldr	r1, [pc, #264]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	0003      	movs	r3, r0
 80046d2:	2002      	movs	r0, #2
 80046d4:	f00e fe3a 	bl	801334c <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 80046d8:	4b40      	ldr	r3, [pc, #256]	@ (80047dc <ENS_Upkeep+0x384>)
 80046da:	6998      	ldr	r0, [r3, #24]
 80046dc:	4b3f      	ldr	r3, [pc, #252]	@ (80047dc <ENS_Upkeep+0x384>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4a42      	ldr	r2, [pc, #264]	@ (80047ec <ENS_Upkeep+0x394>)
 80046e2:	493d      	ldr	r1, [pc, #244]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	0003      	movs	r3, r0
 80046e8:	2002      	movs	r0, #2
 80046ea:	f00e fe2f 	bl	801334c <CreateLine>
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 80046ee:	4b37      	ldr	r3, [pc, #220]	@ (80047cc <ENS_Upkeep+0x374>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d103      	bne.n	80046fe <ENS_Upkeep+0x2a6>
 80046f6:	4b35      	ldr	r3, [pc, #212]	@ (80047cc <ENS_Upkeep+0x374>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	e005      	b.n	800470a <ENS_Upkeep+0x2b2>
 80046fe:	4b33      	ldr	r3, [pc, #204]	@ (80047cc <ENS_Upkeep+0x374>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	b2da      	uxtb	r2, r3
 8004706:	4b31      	ldr	r3, [pc, #196]	@ (80047cc <ENS_Upkeep+0x374>)
 8004708:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800470a:	4b31      	ldr	r3, [pc, #196]	@ (80047d0 <ENS_Upkeep+0x378>)
 800470c:	7818      	ldrb	r0, [r3, #0]
 800470e:	4b30      	ldr	r3, [pc, #192]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004710:	8859      	ldrh	r1, [r3, #2]
 8004712:	4b2f      	ldr	r3, [pc, #188]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004714:	889b      	ldrh	r3, [r3, #4]
 8004716:	001a      	movs	r2, r3
 8004718:	f000 f9d8 	bl	8004acc <setENS160>
    ENSState = ENS_LOW_POWER;
 800471c:	4b19      	ldr	r3, [pc, #100]	@ (8004784 <ENS_Upkeep+0x32c>)
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
    break;
 8004722:	e0c6      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004724:	f00f fb52 	bl	8013dcc <HAL_GetTick>
 8004728:	0003      	movs	r3, r0
 800472a:	22fa      	movs	r2, #250	@ 0xfa
 800472c:	0092      	lsls	r2, r2, #2
 800472e:	189a      	adds	r2, r3, r2
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <ENS_Upkeep+0x328>)
 8004732:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 8004734:	4b2e      	ldr	r3, [pc, #184]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2201      	movs	r2, #1
 800473a:	4053      	eors	r3, r2
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d071      	beq.n	8004826 <ENS_Upkeep+0x3ce>
 8004742:	4b2c      	ldr	r3, [pc, #176]	@ (80047f4 <ENS_Upkeep+0x39c>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2201      	movs	r2, #1
 8004748:	4053      	eors	r3, r2
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d06a      	beq.n	8004826 <ENS_Upkeep+0x3ce>
 8004750:	4b1e      	ldr	r3, [pc, #120]	@ (80047cc <ENS_Upkeep+0x374>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d966      	bls.n	8004826 <ENS_Upkeep+0x3ce>
      if (getSensorLock() != FREE) {
 8004758:	f008 fe60 	bl	800d41c <getSensorLock>
 800475c:	1e03      	subs	r3, r0, #0
 800475e:	d000      	beq.n	8004762 <ENS_Upkeep+0x30a>
 8004760:	e0a2      	b.n	80048a8 <ENS_Upkeep+0x450>
        break;
      }
      setSensorLock(ENS160);
 8004762:	2004      	movs	r0, #4
 8004764:	f008 fe46 	bl	800d3f4 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004768:	1cfc      	adds	r4, r7, #3
 800476a:	2000      	movs	r0, #0
 800476c:	f7ff fb4e 	bl	8003e0c <ENS160_setMode>
 8004770:	0003      	movs	r3, r0
 8004772:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 8004774:	1cfb      	adds	r3, r7, #3
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d03d      	beq.n	80047f8 <ENS_Upkeep+0x3a0>
 800477c:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <ENS_Upkeep+0x340>)
 800477e:	e03c      	b.n	80047fa <ENS_Upkeep+0x3a2>
 8004780:	20000450 	.word	0x20000450
 8004784:	20000000 	.word	0x20000000
 8004788:	0802da04 	.word	0x0802da04
 800478c:	08029b84 	.word	0x08029b84
 8004790:	08029a8c 	.word	0x08029a8c
 8004794:	002f9b80 	.word	0x002f9b80
 8004798:	08029bb8 	.word	0x08029bb8
 800479c:	08029bc0 	.word	0x08029bc0
 80047a0:	08029bc8 	.word	0x08029bc8
 80047a4:	08029bec 	.word	0x08029bec
 80047a8:	08029c04 	.word	0x08029c04
 80047ac:	08029c24 	.word	0x08029c24
 80047b0:	08029c3c 	.word	0x08029c3c
 80047b4:	08029c44 	.word	0x08029c44
 80047b8:	08029c4c 	.word	0x08029c4c
 80047bc:	08029c54 	.word	0x08029c54
 80047c0:	08029c5c 	.word	0x08029c5c
 80047c4:	08029c64 	.word	0x08029c64
 80047c8:	08029c6c 	.word	0x08029c6c
 80047cc:	20000454 	.word	0x20000454
 80047d0:	20000484 	.word	0x20000484
 80047d4:	08029c94 	.word	0x08029c94
 80047d8:	08029afc 	.word	0x08029afc
 80047dc:	20000460 	.word	0x20000460
 80047e0:	08029cc0 	.word	0x08029cc0
 80047e4:	08029cdc 	.word	0x08029cdc
 80047e8:	08029cf8 	.word	0x08029cf8
 80047ec:	08029d14 	.word	0x08029d14
 80047f0:	20001e61 	.word	0x20001e61
 80047f4:	20001e62 	.word	0x20001e62
 80047f8:	4b31      	ldr	r3, [pc, #196]	@ (80048c0 <ENS_Upkeep+0x468>)
 80047fa:	4a32      	ldr	r2, [pc, #200]	@ (80048c4 <ENS_Upkeep+0x46c>)
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	0010      	movs	r0, r2
 8004800:	4a31      	ldr	r2, [pc, #196]	@ (80048c8 <ENS_Upkeep+0x470>)
 8004802:	4932      	ldr	r1, [pc, #200]	@ (80048cc <ENS_Upkeep+0x474>)
 8004804:	9000      	str	r0, [sp, #0]
 8004806:	2003      	movs	r0, #3
 8004808:	f00e fda0 	bl	801334c <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 800480c:	200a      	movs	r0, #10
 800480e:	f00f fae7 	bl	8013de0 <HAL_Delay>
      setSensorLock(FREE);
 8004812:	2000      	movs	r0, #0
 8004814:	f008 fdee 	bl	800d3f4 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 8004818:	f00f fad8 	bl	8013dcc <HAL_GetTick>
 800481c:	0003      	movs	r3, r0
 800481e:	4a2c      	ldr	r2, [pc, #176]	@ (80048d0 <ENS_Upkeep+0x478>)
 8004820:	189a      	adds	r2, r3, r2
 8004822:	4b2c      	ldr	r3, [pc, #176]	@ (80048d4 <ENS_Upkeep+0x47c>)
 8004824:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 8004826:	4b2c      	ldr	r3, [pc, #176]	@ (80048d8 <ENS_Upkeep+0x480>)
 8004828:	2208      	movs	r2, #8
 800482a:	701a      	strb	r2, [r3, #0]
    break;
 800482c:	e041      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 800482e:	f008 fdf5 	bl	800d41c <getSensorLock>
 8004832:	1e03      	subs	r3, r0, #0
 8004834:	d13a      	bne.n	80048ac <ENS_Upkeep+0x454>
        break;
      }
      setSensorLock(ENS160);
 8004836:	2004      	movs	r0, #4
 8004838:	f008 fddc 	bl	800d3f4 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800483c:	1cba      	adds	r2, r7, #2
 800483e:	2301      	movs	r3, #1
 8004840:	2101      	movs	r1, #1
 8004842:	2010      	movs	r0, #16
 8004844:	f7ff f94a 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004848:	1cbb      	adds	r3, r7, #2
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d111      	bne.n	8004874 <ENS_Upkeep+0x41c>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004850:	1dfc      	adds	r4, r7, #7
 8004852:	2002      	movs	r0, #2
 8004854:	f7ff fada 	bl	8003e0c <ENS160_setMode>
 8004858:	0003      	movs	r3, r0
 800485a:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 800485c:	1dfb      	adds	r3, r7, #7
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <ENS_Upkeep+0x410>
 8004864:	4b1d      	ldr	r3, [pc, #116]	@ (80048dc <ENS_Upkeep+0x484>)
 8004866:	e000      	b.n	800486a <ENS_Upkeep+0x412>
 8004868:	4b15      	ldr	r3, [pc, #84]	@ (80048c0 <ENS_Upkeep+0x468>)
 800486a:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <ENS_Upkeep+0x488>)
 800486c:	4917      	ldr	r1, [pc, #92]	@ (80048cc <ENS_Upkeep+0x474>)
 800486e:	2003      	movs	r0, #3
 8004870:	f00e fd6c 	bl	801334c <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8004874:	200a      	movs	r0, #10
 8004876:	f00f fab3 	bl	8013de0 <HAL_Delay>
      setSensorLock(FREE);
 800487a:	2000      	movs	r0, #0
 800487c:	f008 fdba 	bl	800d3f4 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 8004880:	4b15      	ldr	r3, [pc, #84]	@ (80048d8 <ENS_Upkeep+0x480>)
 8004882:	2203      	movs	r2, #3
 8004884:	701a      	strb	r2, [r3, #0]
    break;
 8004886:	e014      	b.n	80048b2 <ENS_Upkeep+0x45a>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004888:	4b13      	ldr	r3, [pc, #76]	@ (80048d8 <ENS_Upkeep+0x480>)
 800488a:	2202      	movs	r2, #2
 800488c:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 800488e:	f008 fdc5 	bl	800d41c <getSensorLock>
 8004892:	0003      	movs	r3, r0
 8004894:	2b04      	cmp	r3, #4
 8004896:	d00b      	beq.n	80048b0 <ENS_Upkeep+0x458>
      setSensorLock(FREE);
 8004898:	2000      	movs	r0, #0
 800489a:	f008 fdab 	bl	800d3f4 <setSensorLock>
    }
    break;
 800489e:	e007      	b.n	80048b0 <ENS_Upkeep+0x458>
      break;
 80048a0:	46c0      	nop			@ (mov r8, r8)
 80048a2:	e006      	b.n	80048b2 <ENS_Upkeep+0x45a>
      break;
 80048a4:	46c0      	nop			@ (mov r8, r8)
 80048a6:	e004      	b.n	80048b2 <ENS_Upkeep+0x45a>
        break;
 80048a8:	46c0      	nop			@ (mov r8, r8)
 80048aa:	e002      	b.n	80048b2 <ENS_Upkeep+0x45a>
        break;
 80048ac:	46c0      	nop			@ (mov r8, r8)
 80048ae:	e000      	b.n	80048b2 <ENS_Upkeep+0x45a>
    break;
 80048b0:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 80048b2:	4b09      	ldr	r3, [pc, #36]	@ (80048d8 <ENS_Upkeep+0x480>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b003      	add	sp, #12
 80048bc:	bd90      	pop	{r4, r7, pc}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	08029bc0 	.word	0x08029bc0
 80048c4:	20000454 	.word	0x20000454
 80048c8:	08029d30 	.word	0x08029d30
 80048cc:	08029a8c 	.word	0x08029a8c
 80048d0:	0000afc8 	.word	0x0000afc8
 80048d4:	20000450 	.word	0x20000450
 80048d8:	20000000 	.word	0x20000000
 80048dc:	08029bb8 	.word	0x08029bb8
 80048e0:	08029d68 	.word	0x08029d68

080048e4 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80048e8:	4b02      	ldr	r3, [pc, #8]	@ (80048f4 <forceNTPupdate+0x10>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20000670 	.word	0x20000670

080048f8 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 8004900:	f00f fa64 	bl	8013dcc <HAL_GetTick>
 8004904:	0002      	movs	r2, r0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	18d2      	adds	r2, r2, r3
 800490a:	4b03      	ldr	r3, [pc, #12]	@ (8004918 <setESPTimeStamp+0x20>)
 800490c:	601a      	str	r2, [r3, #0]
}
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	b002      	add	sp, #8
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	2000066c 	.word	0x2000066c

0800491c <setCharges>:

void setCharges(){
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 8004920:	f004 fbe2 	bl	80090e8 <ReadBatteryVoltage>
 8004924:	1c02      	adds	r2, r0, #0
 8004926:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <setCharges+0x3c>)
 8004928:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 800492a:	f004 fc3f 	bl	80091ac <ReadSolarVoltage>
 800492e:	0003      	movs	r3, r0
 8004930:	0018      	movs	r0, r3
 8004932:	f7fe ff5d 	bl	80037f0 <__aeabi_i2d>
 8004936:	2200      	movs	r2, #0
 8004938:	4b08      	ldr	r3, [pc, #32]	@ (800495c <setCharges+0x40>)
 800493a:	f7fd fbd1 	bl	80020e0 <__aeabi_ddiv>
 800493e:	0002      	movs	r2, r0
 8004940:	000b      	movs	r3, r1
 8004942:	0010      	movs	r0, r2
 8004944:	0019      	movs	r1, r3
 8004946:	f7fe ffed 	bl	8003924 <__aeabi_d2f>
 800494a:	1c02      	adds	r2, r0, #0
 800494c:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <setCharges+0x44>)
 800494e:	601a      	str	r2, [r3, #0]
}
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	200005c4 	.word	0x200005c4
 800495c:	408f4000 	.word	0x408f4000
 8004960:	200005c8 	.word	0x200005c8

08004964 <checkEEprom>:

bool checkEEprom(){
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <checkEEprom+0x5c>)
 800496c:	4815      	ldr	r0, [pc, #84]	@ (80049c4 <checkEEprom+0x60>)
 800496e:	220c      	movs	r2, #12
 8004970:	0019      	movs	r1, r3
 8004972:	f006 ff7f 	bl	800b874 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8004976:	1dfb      	adds	r3, r7, #7
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e00e      	b.n	800499c <checkEEprom+0x38>
    configSum += tempConfig[i];
 800497e:	1dfb      	adds	r3, r7, #7
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	4a0f      	ldr	r2, [pc, #60]	@ (80049c0 <checkEEprom+0x5c>)
 8004984:	5cd3      	ldrb	r3, [r2, r3]
 8004986:	001a      	movs	r2, r3
 8004988:	4b0f      	ldr	r3, [pc, #60]	@ (80049c8 <checkEEprom+0x64>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	18d2      	adds	r2, r2, r3
 800498e:	4b0e      	ldr	r3, [pc, #56]	@ (80049c8 <checkEEprom+0x64>)
 8004990:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8004992:	1dfb      	adds	r3, r7, #7
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	3201      	adds	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	1dfb      	adds	r3, r7, #7
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b0b      	cmp	r3, #11
 80049a2:	d9ec      	bls.n	800497e <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 80049a4:	4b08      	ldr	r3, [pc, #32]	@ (80049c8 <checkEEprom+0x64>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	425a      	negs	r2, r3
 80049aa:	4153      	adcs	r3, r2
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <checkEEprom+0x68>)
 80049b0:	701a      	strb	r2, [r3, #0]
  return test;
 80049b2:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <checkEEprom+0x68>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
}
 80049b6:	0018      	movs	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b002      	add	sp, #8
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	200006e0 	.word	0x200006e0
 80049c4:	0808000c 	.word	0x0808000c
 80049c8:	200006ec 	.word	0x200006ec
 80049cc:	200006f0 	.word	0x200006f0

080049d0 <checkName>:

bool checkName(){
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80049d6:	4b15      	ldr	r3, [pc, #84]	@ (8004a2c <checkName+0x5c>)
 80049d8:	4815      	ldr	r0, [pc, #84]	@ (8004a30 <checkName+0x60>)
 80049da:	2220      	movs	r2, #32
 80049dc:	0019      	movs	r1, r3
 80049de:	f006 ff49 	bl	800b874 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e00e      	b.n	8004a08 <checkName+0x38>
    configSum += nameConfig[i];
 80049ea:	1dfb      	adds	r3, r7, #7
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	4a0f      	ldr	r2, [pc, #60]	@ (8004a2c <checkName+0x5c>)
 80049f0:	5cd3      	ldrb	r3, [r2, r3]
 80049f2:	001a      	movs	r2, r3
 80049f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a34 <checkName+0x64>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	18d2      	adds	r2, r2, r3
 80049fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <checkName+0x64>)
 80049fc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80049fe:	1dfb      	adds	r3, r7, #7
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	1dfb      	adds	r3, r7, #7
 8004a04:	3201      	adds	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	1dfb      	adds	r3, r7, #7
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b0b      	cmp	r3, #11
 8004a0e:	d9ec      	bls.n	80049ea <checkName+0x1a>
  }
  test = (configSum != 0);
 8004a10:	4b08      	ldr	r3, [pc, #32]	@ (8004a34 <checkName+0x64>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	4193      	sbcs	r3, r2
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4b07      	ldr	r3, [pc, #28]	@ (8004a38 <checkName+0x68>)
 8004a1c:	701a      	strb	r2, [r3, #0]
  return test;
 8004a1e:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <checkName+0x68>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
}
 8004a22:	0018      	movs	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b002      	add	sp, #8
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	200006f4 	.word	0x200006f4
 8004a30:	08080090 	.word	0x08080090
 8004a34:	20000714 	.word	0x20000714
 8004a38:	20000718 	.word	0x20000718

08004a3c <setHIDS>:

void setHIDS(float temp, float humid){
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004a46:	4b05      	ldr	r3, [pc, #20]	@ (8004a5c <setHIDS+0x20>)
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <setHIDS+0x20>)
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b002      	add	sp, #8
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	2000067c 	.word	0x2000067c

08004a60 <setVOC>:

void setVOC(uint16_t voc) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	0002      	movs	r2, r0
 8004a68:	1dbb      	adds	r3, r7, #6
 8004a6a:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004a6c:	4b04      	ldr	r3, [pc, #16]	@ (8004a80 <setVOC+0x20>)
 8004a6e:	1dba      	adds	r2, r7, #6
 8004a70:	2148      	movs	r1, #72	@ 0x48
 8004a72:	8812      	ldrh	r2, [r2, #0]
 8004a74:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004a76:	46c0      	nop			@ (mov r8, r8)
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b002      	add	sp, #8
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	2000067c 	.word	0x2000067c

08004a84 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004a8e:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <setAHT2x+0x20>)
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	639a      	str	r2, [r3, #56]	@ 0x38
//  if (airhum > MeasVal.AHT2x_humiditymax) {
//    MeasVal.AHT2x_humiditymax = airhum;
//  }
  MeasVal.AHT2x_temperature = airtemp;
 8004a94:	4b03      	ldr	r3, [pc, #12]	@ (8004aa4 <setAHT2x+0x20>)
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	63da      	str	r2, [r3, #60]	@ 0x3c
//  if (airtemp > MeasVal.AHT2x_temperaturemax) {
//    MeasVal.AHT2x_temperaturemax = airtemp;
//  }
}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b002      	add	sp, #8
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	46c0      	nop			@ (mov r8, r8)
 8004aa4:	2000067c 	.word	0x2000067c

08004aa8 <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004ab2:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <setBMP280+0x20>)
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	641a      	str	r2, [r3, #64]	@ 0x40
//  if (airtemp > MeasVal.BMP280_temperaturemax) {
//    MeasVal.BMP280_temperaturemax = airtemp;
//  }
  MeasVal.BMP280_airpressure = airhpa;
 8004ab8:	4b03      	ldr	r3, [pc, #12]	@ (8004ac8 <setBMP280+0x20>)
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	645a      	str	r2, [r3, #68]	@ 0x44
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b002      	add	sp, #8
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	2000067c 	.word	0x2000067c

08004acc <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	0004      	movs	r4, r0
 8004ad4:	0008      	movs	r0, r1
 8004ad6:	0011      	movs	r1, r2
 8004ad8:	1dfb      	adds	r3, r7, #7
 8004ada:	1c22      	adds	r2, r4, #0
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	1c02      	adds	r2, r0, #0
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	1cbb      	adds	r3, r7, #2
 8004ae6:	1c0a      	adds	r2, r1, #0
 8004ae8:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004aea:	4b15      	ldr	r3, [pc, #84]	@ (8004b40 <setENS160+0x74>)
 8004aec:	1dfa      	adds	r2, r7, #7
 8004aee:	2154      	movs	r1, #84	@ 0x54
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004af4:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <setENS160+0x74>)
 8004af6:	2255      	movs	r2, #85	@ 0x55
 8004af8:	5c9b      	ldrb	r3, [r3, r2]
 8004afa:	1dfa      	adds	r2, r7, #7
 8004afc:	7812      	ldrb	r2, [r2, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d904      	bls.n	8004b0c <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004b02:	4b0f      	ldr	r3, [pc, #60]	@ (8004b40 <setENS160+0x74>)
 8004b04:	1dfa      	adds	r2, r7, #7
 8004b06:	2155      	movs	r1, #85	@ 0x55
 8004b08:	7812      	ldrb	r2, [r2, #0]
 8004b0a:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <setENS160+0x74>)
 8004b0e:	1d3a      	adds	r2, r7, #4
 8004b10:	214a      	movs	r1, #74	@ 0x4a
 8004b12:	8812      	ldrh	r2, [r2, #0]
 8004b14:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004b16:	4b0a      	ldr	r3, [pc, #40]	@ (8004b40 <setENS160+0x74>)
 8004b18:	1cba      	adds	r2, r7, #2
 8004b1a:	2150      	movs	r1, #80	@ 0x50
 8004b1c:	8812      	ldrh	r2, [r2, #0]
 8004b1e:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004b20:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <setENS160+0x74>)
 8004b22:	2252      	movs	r2, #82	@ 0x52
 8004b24:	5a9b      	ldrh	r3, [r3, r2]
 8004b26:	1cba      	adds	r2, r7, #2
 8004b28:	8812      	ldrh	r2, [r2, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d904      	bls.n	8004b38 <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004b2e:	4b04      	ldr	r3, [pc, #16]	@ (8004b40 <setENS160+0x74>)
 8004b30:	1cba      	adds	r2, r7, #2
 8004b32:	2152      	movs	r1, #82	@ 0x52
 8004b34:	8812      	ldrh	r2, [r2, #0]
 8004b36:	525a      	strh	r2, [r3, r1]
  }
}
 8004b38:	46c0      	nop			@ (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b003      	add	sp, #12
 8004b3e:	bd90      	pop	{r4, r7, pc}
 8004b40:	2000067c 	.word	0x2000067c

08004b44 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004b50:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <setMic+0x28>)
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	659a      	str	r2, [r3, #88]	@ 0x58
  MeasVal.dBApeak = dBmax;
 8004b56:	4b05      	ldr	r3, [pc, #20]	@ (8004b6c <setMic+0x28>)
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  MeasVal.dBAaverage = dBAavg;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	@ (8004b6c <setMic+0x28>)
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	661a      	str	r2, [r3, #96]	@ 0x60
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b004      	add	sp, #16
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	2000067c 	.word	0x2000067c

08004b70 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	0002      	movs	r2, r0
 8004b78:	1dbb      	adds	r3, r7, #6
 8004b7a:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004b7c:	1dbb      	adds	r3, r7, #6
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f7fc fe51 	bl	8001828 <__aeabi_i2f>
 8004b86:	1c03      	adds	r3, r0, #0
 8004b88:	490d      	ldr	r1, [pc, #52]	@ (8004bc0 <setPM1p0+0x50>)
 8004b8a:	1c18      	adds	r0, r3, #0
 8004b8c:	f7fc f88a 	bl	8000ca4 <__aeabi_fdiv>
 8004b90:	1c03      	adds	r3, r0, #0
 8004b92:	1c1a      	adds	r2, r3, #0
 8004b94:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <setPM1p0+0x54>)
 8004b96:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004b98:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc4 <setPM1p0+0x54>)
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	4b09      	ldr	r3, [pc, #36]	@ (8004bc4 <setPM1p0+0x54>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	1c19      	adds	r1, r3, #0
 8004ba2:	1c10      	adds	r0, r2, #0
 8004ba4:	f7fb fcd8 	bl	8000558 <__aeabi_fcmpgt>
 8004ba8:	1e03      	subs	r3, r0, #0
 8004baa:	d100      	bne.n	8004bae <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004bac:	e003      	b.n	8004bb6 <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004bae:	4b05      	ldr	r3, [pc, #20]	@ (8004bc4 <setPM1p0+0x54>)
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	4b04      	ldr	r3, [pc, #16]	@ (8004bc4 <setPM1p0+0x54>)
 8004bb4:	60da      	str	r2, [r3, #12]
}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b002      	add	sp, #8
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	41200000 	.word	0x41200000
 8004bc4:	2000067c 	.word	0x2000067c

08004bc8 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	0002      	movs	r2, r0
 8004bd0:	1dbb      	adds	r3, r7, #6
 8004bd2:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004bd4:	1dbb      	adds	r3, r7, #6
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f7fc fe25 	bl	8001828 <__aeabi_i2f>
 8004bde:	1c03      	adds	r3, r0, #0
 8004be0:	490d      	ldr	r1, [pc, #52]	@ (8004c18 <setPM2p5+0x50>)
 8004be2:	1c18      	adds	r0, r3, #0
 8004be4:	f7fc f85e 	bl	8000ca4 <__aeabi_fdiv>
 8004be8:	1c03      	adds	r3, r0, #0
 8004bea:	1c1a      	adds	r2, r3, #0
 8004bec:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <setPM2p5+0x54>)
 8004bee:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <setPM2p5+0x54>)
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <setPM2p5+0x54>)
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	1c19      	adds	r1, r3, #0
 8004bfa:	1c10      	adds	r0, r2, #0
 8004bfc:	f7fb fcac 	bl	8000558 <__aeabi_fcmpgt>
 8004c00:	1e03      	subs	r3, r0, #0
 8004c02:	d100      	bne.n	8004c06 <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004c04:	e003      	b.n	8004c0e <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004c06:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <setPM2p5+0x54>)
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	4b04      	ldr	r3, [pc, #16]	@ (8004c1c <setPM2p5+0x54>)
 8004c0c:	615a      	str	r2, [r3, #20]
}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b002      	add	sp, #8
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	41200000 	.word	0x41200000
 8004c1c:	2000067c 	.word	0x2000067c

08004c20 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	0002      	movs	r2, r0
 8004c28:	1dbb      	adds	r3, r7, #6
 8004c2a:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004c2c:	1dbb      	adds	r3, r7, #6
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	0018      	movs	r0, r3
 8004c32:	f7fc fdf9 	bl	8001828 <__aeabi_i2f>
 8004c36:	1c03      	adds	r3, r0, #0
 8004c38:	490d      	ldr	r1, [pc, #52]	@ (8004c70 <setPM4p0+0x50>)
 8004c3a:	1c18      	adds	r0, r3, #0
 8004c3c:	f7fc f832 	bl	8000ca4 <__aeabi_fdiv>
 8004c40:	1c03      	adds	r3, r0, #0
 8004c42:	1c1a      	adds	r2, r3, #0
 8004c44:	4b0b      	ldr	r3, [pc, #44]	@ (8004c74 <setPM4p0+0x54>)
 8004c46:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004c48:	4b0a      	ldr	r3, [pc, #40]	@ (8004c74 <setPM4p0+0x54>)
 8004c4a:	699a      	ldr	r2, [r3, #24]
 8004c4c:	4b09      	ldr	r3, [pc, #36]	@ (8004c74 <setPM4p0+0x54>)
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	1c19      	adds	r1, r3, #0
 8004c52:	1c10      	adds	r0, r2, #0
 8004c54:	f7fb fc80 	bl	8000558 <__aeabi_fcmpgt>
 8004c58:	1e03      	subs	r3, r0, #0
 8004c5a:	d100      	bne.n	8004c5e <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004c5c:	e003      	b.n	8004c66 <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004c5e:	4b05      	ldr	r3, [pc, #20]	@ (8004c74 <setPM4p0+0x54>)
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	4b04      	ldr	r3, [pc, #16]	@ (8004c74 <setPM4p0+0x54>)
 8004c64:	61da      	str	r2, [r3, #28]
}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b002      	add	sp, #8
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	46c0      	nop			@ (mov r8, r8)
 8004c70:	41200000 	.word	0x41200000
 8004c74:	2000067c 	.word	0x2000067c

08004c78 <setPM10>:

void setPM10(uint16_t PM10) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	0002      	movs	r2, r0
 8004c80:	1dbb      	adds	r3, r7, #6
 8004c82:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004c84:	1dbb      	adds	r3, r7, #6
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f7fc fdcd 	bl	8001828 <__aeabi_i2f>
 8004c8e:	1c03      	adds	r3, r0, #0
 8004c90:	490d      	ldr	r1, [pc, #52]	@ (8004cc8 <setPM10+0x50>)
 8004c92:	1c18      	adds	r0, r3, #0
 8004c94:	f7fc f806 	bl	8000ca4 <__aeabi_fdiv>
 8004c98:	1c03      	adds	r3, r0, #0
 8004c9a:	1c1a      	adds	r2, r3, #0
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ccc <setPM10+0x54>)
 8004c9e:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <setPM10+0x54>)
 8004ca2:	6a1a      	ldr	r2, [r3, #32]
 8004ca4:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <setPM10+0x54>)
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	1c19      	adds	r1, r3, #0
 8004caa:	1c10      	adds	r0, r2, #0
 8004cac:	f7fb fc54 	bl	8000558 <__aeabi_fcmpgt>
 8004cb0:	1e03      	subs	r3, r0, #0
 8004cb2:	d100      	bne.n	8004cb6 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004cb4:	e003      	b.n	8004cbe <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004cb6:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <setPM10+0x54>)
 8004cb8:	6a1a      	ldr	r2, [r3, #32]
 8004cba:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <setPM10+0x54>)
 8004cbc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004cbe:	46c0      	nop			@ (mov r8, r8)
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b002      	add	sp, #8
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			@ (mov r8, r8)
 8004cc8:	41200000 	.word	0x41200000
 8004ccc:	2000067c 	.word	0x2000067c

08004cd0 <setNOx>:

void setNOx(uint16_t nox) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	0002      	movs	r2, r0
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d08 <setNOx+0x38>)
 8004cde:	1dba      	adds	r2, r7, #6
 8004ce0:	214c      	movs	r1, #76	@ 0x4c
 8004ce2:	8812      	ldrh	r2, [r2, #0]
 8004ce4:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004ce6:	4b08      	ldr	r3, [pc, #32]	@ (8004d08 <setNOx+0x38>)
 8004ce8:	224e      	movs	r2, #78	@ 0x4e
 8004cea:	5a9b      	ldrh	r3, [r3, r2]
 8004cec:	1dba      	adds	r2, r7, #6
 8004cee:	8812      	ldrh	r2, [r2, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d904      	bls.n	8004cfe <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004cf4:	4b04      	ldr	r3, [pc, #16]	@ (8004d08 <setNOx+0x38>)
 8004cf6:	1dba      	adds	r2, r7, #6
 8004cf8:	214e      	movs	r1, #78	@ 0x4e
 8004cfa:	8812      	ldrh	r2, [r2, #0]
 8004cfc:	525a      	strh	r2, [r3, r1]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8004cfe:	46c0      	nop			@ (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b002      	add	sp, #8
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	46c0      	nop			@ (mov r8, r8)
 8004d08:	2000067c 	.word	0x2000067c

08004d0c <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004d16:	490a      	ldr	r1, [pc, #40]	@ (8004d40 <SetSEN545temphum+0x34>)
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7fb ffc3 	bl	8000ca4 <__aeabi_fdiv>
 8004d1e:	1c03      	adds	r3, r0, #0
 8004d20:	1c1a      	adds	r2, r3, #0
 8004d22:	4b08      	ldr	r3, [pc, #32]	@ (8004d44 <SetSEN545temphum+0x38>)
 8004d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004d26:	4908      	ldr	r1, [pc, #32]	@ (8004d48 <SetSEN545temphum+0x3c>)
 8004d28:	6838      	ldr	r0, [r7, #0]
 8004d2a:	f7fb ffbb 	bl	8000ca4 <__aeabi_fdiv>
 8004d2e:	1c03      	adds	r3, r0, #0
 8004d30:	1c1a      	adds	r2, r3, #0
 8004d32:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <SetSEN545temphum+0x38>)
 8004d34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d36:	46c0      	nop			@ (mov r8, r8)
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b002      	add	sp, #8
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			@ (mov r8, r8)
 8004d40:	43480000 	.word	0x43480000
 8004d44:	2000067c 	.word	0x2000067c
 8004d48:	42c80000 	.word	0x42c80000

08004d4c <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004d50:	f008 ff1a 	bl	800db88 <sen5x_Get_sen5x_enable_state>
 8004d54:	1e03      	subs	r3, r0, #0
 8004d56:	d00f      	beq.n	8004d78 <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004d58:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004d64:	4b0a      	ldr	r3, [pc, #40]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004d6a:	4b09      	ldr	r3, [pc, #36]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004d70:	4b07      	ldr	r3, [pc, #28]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d72:	224e      	movs	r2, #78	@ 0x4e
 8004d74:	2100      	movs	r1, #0
 8004d76:	5299      	strh	r1, [r3, r2]
  }
//  MeasVal.AHT2x_humiditymax = 0.0;
//  MeasVal.AHT2x_temperaturemax = 0.0;
//  MeasVal.BMP280_temperaturemax = 0.0;
//  MeasVal.BMP280_airpressuremax = 0.0;
  MeasVal.eCO2Indexmax = 0;
 8004d78:	4b05      	ldr	r3, [pc, #20]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d7a:	2252      	movs	r2, #82	@ 0x52
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004d80:	4b03      	ldr	r3, [pc, #12]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d82:	2255      	movs	r2, #85	@ 0x55
 8004d84:	2100      	movs	r1, #0
 8004d86:	5499      	strb	r1, [r3, r2]
}
 8004d88:	46c0      	nop			@ (mov r8, r8)
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	2000067c 	.word	0x2000067c

08004d94 <SetConfigMode>:

void SetConfigMode(){
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004d98:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <SetConfigMode+0x30>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	4053      	eors	r3, r2
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004da6:	4a08      	ldr	r2, [pc, #32]	@ (8004dc8 <SetConfigMode+0x34>)
 8004da8:	4b08      	ldr	r3, [pc, #32]	@ (8004dcc <SetConfigMode+0x38>)
 8004daa:	0019      	movs	r1, r3
 8004dac:	2003      	movs	r0, #3
 8004dae:	f00e facd 	bl	801334c <CreateLine>
  }
  ReconfigSet = true;
 8004db2:	4b04      	ldr	r3, [pc, #16]	@ (8004dc4 <SetConfigMode+0x30>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <SetConfigMode+0x3c>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	701a      	strb	r2, [r3, #0]
}
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	200005a3 	.word	0x200005a3
 8004dc8:	08029d98 	.word	0x08029d98
 8004dcc:	08029db8 	.word	0x08029db8
 8004dd0:	20000207 	.word	0x20000207

08004dd4 <GetReconfigMode>:

bool GetReconfigMode() {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004dd8:	4b02      	ldr	r3, [pc, #8]	@ (8004de4 <GetReconfigMode+0x10>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	200005a3 	.word	0x200005a3

08004de8 <ESP_GetUID>:

void ESP_GetUID(){
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8004dec:	f00f f838 	bl	8013e60 <HAL_GetUIDw0>
 8004df0:	0002      	movs	r2, r0
 8004df2:	4b07      	ldr	r3, [pc, #28]	@ (8004e10 <ESP_GetUID+0x28>)
 8004df4:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8004df6:	f00f f83d 	bl	8013e74 <HAL_GetUIDw1>
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	4b04      	ldr	r3, [pc, #16]	@ (8004e10 <ESP_GetUID+0x28>)
 8004dfe:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8004e00:	f00f f842 	bl	8013e88 <HAL_GetUIDw2>
 8004e04:	0002      	movs	r2, r0
 8004e06:	4b02      	ldr	r3, [pc, #8]	@ (8004e10 <ESP_GetUID+0x28>)
 8004e08:	609a      	str	r2, [r3, #8]
}
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	200005ac 	.word	0x200005ac

08004e14 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004e1c:	4b08      	ldr	r3, [pc, #32]	@ (8004e40 <ESP_Init+0x2c>)
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004e22:	4b08      	ldr	r3, [pc, #32]	@ (8004e44 <ESP_Init+0x30>)
 8004e24:	2202      	movs	r2, #2
 8004e26:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8004e28:	f7ff ffde 	bl	8004de8 <ESP_GetUID>
  beurs = checkEEprom();
 8004e2c:	f7ff fd9a 	bl	8004964 <checkEEprom>
 8004e30:	0003      	movs	r3, r0
 8004e32:	001a      	movs	r2, r3
 8004e34:	4b04      	ldr	r3, [pc, #16]	@ (8004e48 <ESP_Init+0x34>)
 8004e36:	701a      	strb	r2, [r3, #0]
}
 8004e38:	46c0      	nop			@ (mov r8, r8)
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000498 	.word	0x20000498
 8004e44:	2000002c 	.word	0x2000002c
 8004e48:	200005a6 	.word	0x200005a6

08004e4c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004e4c:	b5b0      	push	{r4, r5, r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	000a      	movs	r2, r1
 8004e56:	1cbb      	adds	r3, r7, #2
 8004e58:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004e5a:	4b11      	ldr	r3, [pc, #68]	@ (8004ea0 <ESP_Send+0x54>)
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	250f      	movs	r5, #15
 8004e60:	197c      	adds	r4, r7, r5
 8004e62:	1cbb      	adds	r3, r7, #2
 8004e64:	881a      	ldrh	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	0019      	movs	r1, r3
 8004e6a:	f017 fe03 	bl	801ca74 <HAL_UART_Transmit_DMA>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004e72:	197b      	adds	r3, r7, r5
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea4 <ESP_Send+0x58>)
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea8 <ESP_Send+0x5c>)
 8004e7e:	0019      	movs	r1, r3
 8004e80:	2001      	movs	r0, #1
 8004e82:	f00e fa63 	bl	801334c <CreateLine>
    return false;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e006      	b.n	8004e98 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4b07      	ldr	r3, [pc, #28]	@ (8004eac <ESP_Send+0x60>)
 8004e8e:	0011      	movs	r1, r2
 8004e90:	0018      	movs	r0, r3
 8004e92:	f020 fb75 	bl	8025580 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8004e96:	2301      	movs	r3, #1
}
 8004e98:	0018      	movs	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b004      	add	sp, #16
 8004e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8004ea0:	20000498 	.word	0x20000498
 8004ea4:	08029dbc 	.word	0x08029dbc
 8004ea8:	08029ddc 	.word	0x08029ddc
 8004eac:	08029de0 	.word	0x08029de0

08004eb0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	000a      	movs	r2, r1
 8004eba:	1cbb      	adds	r3, r7, #2
 8004ebc:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8005034 <ESP_Receive+0x184>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004ec4:	260f      	movs	r6, #15
 8004ec6:	19bb      	adds	r3, r7, r6
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8005038 <ESP_Receive+0x188>)
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	250d      	movs	r5, #13
 8004ed2:	197c      	adds	r4, r7, r5
 8004ed4:	1cbb      	adds	r3, r7, #2
 8004ed6:	881a      	ldrh	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	0019      	movs	r1, r3
 8004edc:	f017 fe5a 	bl	801cb94 <HAL_UART_Receive_DMA>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004ee4:	002c      	movs	r4, r5
 8004ee6:	193b      	adds	r3, r7, r4
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d100      	bne.n	8004ef0 <ESP_Receive+0x40>
 8004eee:	e09c      	b.n	800502a <ESP_Receive+0x17a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004ef0:	4b51      	ldr	r3, [pc, #324]	@ (8005038 <ESP_Receive+0x188>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2284      	movs	r2, #132	@ 0x84
 8004ef6:	589b      	ldr	r3, [r3, r2]
 8004ef8:	4a50      	ldr	r2, [pc, #320]	@ (800503c <ESP_Receive+0x18c>)
 8004efa:	4951      	ldr	r1, [pc, #324]	@ (8005040 <ESP_Receive+0x190>)
 8004efc:	2001      	movs	r0, #1
 8004efe:	f00e fa25 	bl	801334c <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8004f02:	193b      	adds	r3, r7, r4
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2201      	movs	r2, #1
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d008      	beq.n	8004f1e <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8004f0c:	4a4d      	ldr	r2, [pc, #308]	@ (8005044 <ESP_Receive+0x194>)
 8004f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8005040 <ESP_Receive+0x190>)
 8004f10:	0019      	movs	r1, r3
 8004f12:	2001      	movs	r0, #1
 8004f14:	f00e fa1a 	bl	801334c <CreateLine>
      reset = true;
 8004f18:	19bb      	adds	r3, r7, r6
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8004f1e:	230d      	movs	r3, #13
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2202      	movs	r2, #2
 8004f26:	4013      	ands	r3, r2
 8004f28:	d005      	beq.n	8004f36 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8004f2a:	4a47      	ldr	r2, [pc, #284]	@ (8005048 <ESP_Receive+0x198>)
 8004f2c:	4b44      	ldr	r3, [pc, #272]	@ (8005040 <ESP_Receive+0x190>)
 8004f2e:	0019      	movs	r1, r3
 8004f30:	2001      	movs	r0, #1
 8004f32:	f00e fa0b 	bl	801334c <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8004f36:	230d      	movs	r3, #13
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2204      	movs	r2, #4
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d005      	beq.n	8004f4e <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8004f42:	4a42      	ldr	r2, [pc, #264]	@ (800504c <ESP_Receive+0x19c>)
 8004f44:	4b3e      	ldr	r3, [pc, #248]	@ (8005040 <ESP_Receive+0x190>)
 8004f46:	0019      	movs	r1, r3
 8004f48:	2001      	movs	r0, #1
 8004f4a:	f00e f9ff 	bl	801334c <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004f4e:	230d      	movs	r3, #13
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2208      	movs	r2, #8
 8004f56:	4013      	ands	r3, r2
 8004f58:	d005      	beq.n	8004f66 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8004f5a:	4a3d      	ldr	r2, [pc, #244]	@ (8005050 <ESP_Receive+0x1a0>)
 8004f5c:	4b38      	ldr	r3, [pc, #224]	@ (8005040 <ESP_Receive+0x190>)
 8004f5e:	0019      	movs	r1, r3
 8004f60:	2001      	movs	r0, #1
 8004f62:	f00e f9f3 	bl	801334c <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004f66:	230d      	movs	r3, #13
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d005      	beq.n	8004f7e <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8004f72:	4a38      	ldr	r2, [pc, #224]	@ (8005054 <ESP_Receive+0x1a4>)
 8004f74:	4b32      	ldr	r3, [pc, #200]	@ (8005040 <ESP_Receive+0x190>)
 8004f76:	0019      	movs	r1, r3
 8004f78:	2001      	movs	r0, #1
 8004f7a:	f00e f9e7 	bl	801334c <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8004f7e:	230d      	movs	r3, #13
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2220      	movs	r2, #32
 8004f86:	4013      	ands	r3, r2
 8004f88:	d005      	beq.n	8004f96 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8004f8a:	4a33      	ldr	r2, [pc, #204]	@ (8005058 <ESP_Receive+0x1a8>)
 8004f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8005040 <ESP_Receive+0x190>)
 8004f8e:	0019      	movs	r1, r3
 8004f90:	2001      	movs	r0, #1
 8004f92:	f00e f9db 	bl	801334c <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8004f96:	230d      	movs	r3, #13
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2240      	movs	r2, #64	@ 0x40
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d005      	beq.n	8004fae <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8004fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800505c <ESP_Receive+0x1ac>)
 8004fa4:	4b26      	ldr	r3, [pc, #152]	@ (8005040 <ESP_Receive+0x190>)
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f00e f9cf 	bl	801334c <CreateLine>
    }
#endif
    if (reset) {
 8004fae:	230f      	movs	r3, #15
 8004fb0:	18fb      	adds	r3, r7, r3
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d033      	beq.n	8005020 <ESP_Receive+0x170>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004fb8:	4b29      	ldr	r3, [pc, #164]	@ (8005060 <ESP_Receive+0x1b0>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f010 f995 	bl	80152ee <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	f00e ff0b 	bl	8013de0 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004fca:	2380      	movs	r3, #128	@ 0x80
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	4825      	ldr	r0, [pc, #148]	@ (8005064 <ESP_Receive+0x1b4>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	f010 f98b 	bl	80152ee <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004fd8:	2001      	movs	r0, #1
 8004fda:	f00e ff01 	bl	8013de0 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004fde:	4b20      	ldr	r3, [pc, #128]	@ (8005060 <ESP_Receive+0x1b0>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2102      	movs	r1, #2
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f010 f982 	bl	80152ee <HAL_GPIO_WritePin>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 8004fea:	230e      	movs	r3, #14
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	e00e      	b.n	8005012 <ESP_Receive+0x162>
        SetAllREDLED();
 8004ff4:	f00d f87c 	bl	80120f0 <SetAllREDLED>
        SetLEDsOff();
 8004ff8:	f00d f85e 	bl	80120b8 <SetLEDsOff>
        HAL_Delay(500);
 8004ffc:	23fa      	movs	r3, #250	@ 0xfa
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	0018      	movs	r0, r3
 8005002:	f00e feed 	bl	8013de0 <HAL_Delay>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 8005006:	210e      	movs	r1, #14
 8005008:	187b      	adds	r3, r7, r1
 800500a:	781a      	ldrb	r2, [r3, #0]
 800500c:	187b      	adds	r3, r7, r1
 800500e:	3201      	adds	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	230e      	movs	r3, #14
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b05      	cmp	r3, #5
 800501a:	d9eb      	bls.n	8004ff4 <ESP_Receive+0x144>
      }
      HAL_NVIC_SystemReset();
 800501c:	f00f fb9f 	bl	801475e <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8005020:	4b04      	ldr	r3, [pc, #16]	@ (8005034 <ESP_Receive+0x184>)
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]
    return false;
 8005026:	2300      	movs	r3, #0
 8005028:	e000      	b.n	800502c <ESP_Receive+0x17c>
  }
  return true;
 800502a:	2301      	movs	r3, #1
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b005      	add	sp, #20
 8005032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005034:	2000049c 	.word	0x2000049c
 8005038:	20000498 	.word	0x20000498
 800503c:	08029df0 	.word	0x08029df0
 8005040:	08029ddc 	.word	0x08029ddc
 8005044:	08029e20 	.word	0x08029e20
 8005048:	08029e44 	.word	0x08029e44
 800504c:	08029e68 	.word	0x08029e68
 8005050:	08029e8c 	.word	0x08029e8c
 8005054:	08029eb0 	.word	0x08029eb0
 8005058:	08029edc 	.word	0x08029edc
 800505c:	08029f0c 	.word	0x08029f0c
 8005060:	50001c00 	.word	0x50001c00
 8005064:	50000800 	.word	0x50000800

08005068 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8005070:	4b39      	ldr	r3, [pc, #228]	@ (8005158 <HAL_UART_ErrorCallback+0xf0>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d16b      	bne.n	8005152 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2284      	movs	r2, #132	@ 0x84
 800507e:	589b      	ldr	r3, [r3, r2]
 8005080:	2b04      	cmp	r3, #4
 8005082:	d065      	beq.n	8005150 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2284      	movs	r2, #132	@ 0x84
 8005088:	589b      	ldr	r3, [r3, r2]
 800508a:	4a34      	ldr	r2, [pc, #208]	@ (800515c <HAL_UART_ErrorCallback+0xf4>)
 800508c:	4934      	ldr	r1, [pc, #208]	@ (8005160 <HAL_UART_ErrorCallback+0xf8>)
 800508e:	2003      	movs	r0, #3
 8005090:	f00e f95c 	bl	801334c <CreateLine>
    switch (huart->ErrorCode) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2284      	movs	r2, #132	@ 0x84
 8005098:	589b      	ldr	r3, [r3, r2]
 800509a:	2b0c      	cmp	r3, #12
 800509c:	d851      	bhi.n	8005142 <HAL_UART_ErrorCallback+0xda>
 800509e:	009a      	lsls	r2, r3, #2
 80050a0:	4b30      	ldr	r3, [pc, #192]	@ (8005164 <HAL_UART_ErrorCallback+0xfc>)
 80050a2:	18d3      	adds	r3, r2, r3
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 80050a8:	4a2f      	ldr	r2, [pc, #188]	@ (8005168 <HAL_UART_ErrorCallback+0x100>)
 80050aa:	4b30      	ldr	r3, [pc, #192]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 80050ac:	0019      	movs	r1, r3
 80050ae:	2001      	movs	r0, #1
 80050b0:	f00e f94c 	bl	801334c <CreateLine>
        break;
 80050b4:	e04d      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 80050b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005170 <HAL_UART_ErrorCallback+0x108>)
 80050b8:	4b2c      	ldr	r3, [pc, #176]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 80050ba:	0019      	movs	r1, r3
 80050bc:	2001      	movs	r0, #1
 80050be:	f00e f945 	bl	801334c <CreateLine>
        break;
 80050c2:	e046      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 80050c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005174 <HAL_UART_ErrorCallback+0x10c>)
 80050c6:	4b29      	ldr	r3, [pc, #164]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 80050c8:	0019      	movs	r1, r3
 80050ca:	2001      	movs	r0, #1
 80050cc:	f00e f93e 	bl	801334c <CreateLine>
        break;
 80050d0:	e03f      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 80050d2:	4a29      	ldr	r2, [pc, #164]	@ (8005178 <HAL_UART_ErrorCallback+0x110>)
 80050d4:	4b25      	ldr	r3, [pc, #148]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 80050d6:	0019      	movs	r1, r3
 80050d8:	2001      	movs	r0, #1
 80050da:	f00e f937 	bl	801334c <CreateLine>
        break;
 80050de:	e038      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 80050e0:	4a26      	ldr	r2, [pc, #152]	@ (800517c <HAL_UART_ErrorCallback+0x114>)
 80050e2:	4b22      	ldr	r3, [pc, #136]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 80050e4:	0019      	movs	r1, r3
 80050e6:	2001      	movs	r0, #1
 80050e8:	f00e f930 	bl	801334c <CreateLine>
        break;
 80050ec:	e031      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 80050ee:	4a24      	ldr	r2, [pc, #144]	@ (8005180 <HAL_UART_ErrorCallback+0x118>)
 80050f0:	4b1e      	ldr	r3, [pc, #120]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 80050f2:	0019      	movs	r1, r3
 80050f4:	2001      	movs	r0, #1
 80050f6:	f00e f929 	bl	801334c <CreateLine>
        break;
 80050fa:	e02a      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 80050fc:	4a21      	ldr	r2, [pc, #132]	@ (8005184 <HAL_UART_ErrorCallback+0x11c>)
 80050fe:	4b1b      	ldr	r3, [pc, #108]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 8005100:	0019      	movs	r1, r3
 8005102:	2001      	movs	r0, #1
 8005104:	f00e f922 	bl	801334c <CreateLine>
        break;
 8005108:	e023      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 800510a:	4a1f      	ldr	r2, [pc, #124]	@ (8005188 <HAL_UART_ErrorCallback+0x120>)
 800510c:	4b17      	ldr	r3, [pc, #92]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 800510e:	0019      	movs	r1, r3
 8005110:	2001      	movs	r0, #1
 8005112:	f00e f91b 	bl	801334c <CreateLine>
        break;
 8005116:	e01c      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8005118:	4a1c      	ldr	r2, [pc, #112]	@ (800518c <HAL_UART_ErrorCallback+0x124>)
 800511a:	4b14      	ldr	r3, [pc, #80]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 800511c:	0019      	movs	r1, r3
 800511e:	2001      	movs	r0, #1
 8005120:	f00e f914 	bl	801334c <CreateLine>
        break;
 8005124:	e015      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8005126:	4a1a      	ldr	r2, [pc, #104]	@ (8005190 <HAL_UART_ErrorCallback+0x128>)
 8005128:	4b10      	ldr	r3, [pc, #64]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 800512a:	0019      	movs	r1, r3
 800512c:	2001      	movs	r0, #1
 800512e:	f00e f90d 	bl	801334c <CreateLine>
        break;
 8005132:	e00e      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8005134:	4a17      	ldr	r2, [pc, #92]	@ (8005194 <HAL_UART_ErrorCallback+0x12c>)
 8005136:	4b0d      	ldr	r3, [pc, #52]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 8005138:	0019      	movs	r1, r3
 800513a:	2001      	movs	r0, #1
 800513c:	f00e f906 	bl	801334c <CreateLine>
        break;
 8005140:	e007      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8005142:	4a15      	ldr	r2, [pc, #84]	@ (8005198 <HAL_UART_ErrorCallback+0x130>)
 8005144:	4b09      	ldr	r3, [pc, #36]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 8005146:	0019      	movs	r1, r3
 8005148:	2001      	movs	r0, #1
 800514a:	f00e f8ff 	bl	801334c <CreateLine>
 800514e:	e000      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      return;
 8005150:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8005152:	46bd      	mov	sp, r7
 8005154:	b002      	add	sp, #8
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000498 	.word	0x20000498
 800515c:	08029f3c 	.word	0x08029f3c
 8005160:	08029db8 	.word	0x08029db8
 8005164:	0802dab4 	.word	0x0802dab4
 8005168:	08029f6c 	.word	0x08029f6c
 800516c:	08029ddc 	.word	0x08029ddc
 8005170:	08029fa0 	.word	0x08029fa0
 8005174:	08029fcc 	.word	0x08029fcc
 8005178:	0802a000 	.word	0x0802a000
 800517c:	0802a02c 	.word	0x0802a02c
 8005180:	0802a054 	.word	0x0802a054
 8005184:	0802a084 	.word	0x0802a084
 8005188:	0802a0bc 	.word	0x0802a0bc
 800518c:	0802a0f4 	.word	0x0802a0f4
 8005190:	0802a11c 	.word	0x0802a11c
 8005194:	0802a144 	.word	0x0802a144
 8005198:	0802a170 	.word	0x0802a170

0800519c <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b42      	cmp	r3, #66	@ 0x42
 80051ae:	d905      	bls.n	80051bc <isKeyValid+0x20>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2bff      	cmp	r3, #255	@ 0xff
 80051b6:	d001      	beq.n	80051bc <isKeyValid+0x20>
    return true;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e01d      	b.n	80051f8 <isKeyValid+0x5c>
  else {
    printf("Error sensor %s seems to have no stored key for %s: ", sensormodel, sensortype);
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005200 <isKeyValid+0x64>)
 80051c2:	0018      	movs	r0, r3
 80051c4:	f020 f9dc 	bl	8025580 <iprintf>
    for (int i = 0; i < 12; i++) {
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e00c      	b.n	80051e8 <isKeyValid+0x4c>
      printf("%02x", data[i]);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	18d3      	adds	r3, r2, r3
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	001a      	movs	r2, r3
 80051d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <isKeyValid+0x68>)
 80051da:	0011      	movs	r1, r2
 80051dc:	0018      	movs	r0, r3
 80051de:	f020 f9cf 	bl	8025580 <iprintf>
    for (int i = 0; i < 12; i++) {
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	3301      	adds	r3, #1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2b0b      	cmp	r3, #11
 80051ec:	ddef      	ble.n	80051ce <isKeyValid+0x32>
    }
    printf("\r\n");
 80051ee:	4b06      	ldr	r3, [pc, #24]	@ (8005208 <isKeyValid+0x6c>)
 80051f0:	0018      	movs	r0, r3
 80051f2:	f020 fa2b 	bl	802564c <puts>
    return false;
 80051f6:	2300      	movs	r3, #0
  }
}
 80051f8:	0018      	movs	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b006      	add	sp, #24
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	0802a194 	.word	0x0802a194
 8005204:	0802a1cc 	.word	0x0802a1cc
 8005208:	0802a1d4 	.word	0x0802a1d4

0800520c <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	e010      	b.n	800523e <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	001a      	movs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	1898      	adds	r0, r3, r2
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	18d3      	adds	r3, r2, r3
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	001a      	movs	r2, r3
 8005230:	4b07      	ldr	r3, [pc, #28]	@ (8005250 <uint8ArrayToString+0x44>)
 8005232:	0019      	movs	r1, r3
 8005234:	f020 fa14 	bl	8025660 <siprintf>
  for (int i = 0; i < 12; i++) {
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3301      	adds	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b0b      	cmp	r3, #11
 8005242:	ddeb      	ble.n	800521c <uint8ArrayToString+0x10>
  }
}
 8005244:	46c0      	nop			@ (mov r8, r8)
 8005246:	46c0      	nop			@ (mov r8, r8)
 8005248:	46bd      	mov	sp, r7
 800524a:	b004      	add	sp, #16
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			@ (mov r8, r8)
 8005250:	0802a1cc 	.word	0x0802a1cc

08005254 <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8005254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005256:	b089      	sub	sp, #36	@ 0x24
 8005258:	af04      	add	r7, sp, #16
 800525a:	6039      	str	r1, [r7, #0]
 800525c:	0011      	movs	r1, r2
 800525e:	1dfb      	adds	r3, r7, #7
 8005260:	1c02      	adds	r2, r0, #0
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	1dbb      	adds	r3, r7, #6
 8005266:	1c0a      	adds	r2, r1, #0
 8005268:	701a      	strb	r2, [r3, #0]
#endif
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 800526a:	f7ff fbb1 	bl	80049d0 <checkName>
 800526e:	1e03      	subs	r3, r0, #0
 8005270:	d00a      	beq.n	8005288 <CreateMessage+0x34>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8005272:	4b03      	ldr	r3, [pc, #12]	@ (8005280 <CreateMessage+0x2c>)
 8005274:	4803      	ldr	r0, [pc, #12]	@ (8005284 <CreateMessage+0x30>)
 8005276:	2220      	movs	r2, #32
 8005278:	0019      	movs	r1, r3
 800527a:	f006 fafb 	bl	800b874 <ReadUint8ArrayEEprom>
 800527e:	e009      	b.n	8005294 <CreateMessage+0x40>
 8005280:	2000071c 	.word	0x2000071c
 8005284:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8005288:	4bed      	ldr	r3, [pc, #948]	@ (8005640 <CreateMessage+0x3ec>)
 800528a:	4aee      	ldr	r2, [pc, #952]	@ (8005644 <CreateMessage+0x3f0>)
 800528c:	6811      	ldr	r1, [r2, #0]
 800528e:	6019      	str	r1, [r3, #0]
 8005290:	7912      	ldrb	r2, [r2, #4]
 8005292:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8005294:	f7ff fb42 	bl	800491c <setCharges>
  uint16_t index = 0;
 8005298:	260e      	movs	r6, #14
 800529a:	19bb      	adds	r3, r7, r6
 800529c:	2200      	movs	r2, #0
 800529e:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 80052a0:	19bb      	adds	r3, r7, r6
 80052a2:	881a      	ldrh	r2, [r3, #0]
 80052a4:	4be8      	ldr	r3, [pc, #928]	@ (8005648 <CreateMessage+0x3f4>)
 80052a6:	18d3      	adds	r3, r2, r3
 80052a8:	4ae8      	ldr	r2, [pc, #928]	@ (800564c <CreateMessage+0x3f8>)
 80052aa:	0011      	movs	r1, r2
 80052ac:	0018      	movs	r0, r3
 80052ae:	f020 f9d7 	bl	8025660 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 80052b2:	4be7      	ldr	r3, [pc, #924]	@ (8005650 <CreateMessage+0x3fc>)
 80052b4:	48e7      	ldr	r0, [pc, #924]	@ (8005654 <CreateMessage+0x400>)
 80052b6:	220c      	movs	r2, #12
 80052b8:	0019      	movs	r1, r3
 80052ba:	f006 fadb 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80052be:	4ae4      	ldr	r2, [pc, #912]	@ (8005650 <CreateMessage+0x3fc>)
 80052c0:	4be5      	ldr	r3, [pc, #916]	@ (8005658 <CreateMessage+0x404>)
 80052c2:	0011      	movs	r1, r2
 80052c4:	0018      	movs	r0, r3
 80052c6:	f7ff ffa1 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 80052ca:	4be4      	ldr	r3, [pc, #912]	@ (800565c <CreateMessage+0x408>)
 80052cc:	689c      	ldr	r4, [r3, #8]
 80052ce:	4be4      	ldr	r3, [pc, #912]	@ (8005660 <CreateMessage+0x40c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	1c18      	adds	r0, r3, #0
 80052d4:	f7fe fade 	bl	8003894 <__aeabi_f2d>
 80052d8:	0002      	movs	r2, r0
 80052da:	000b      	movs	r3, r1
 80052dc:	4dd8      	ldr	r5, [pc, #864]	@ (8005640 <CreateMessage+0x3ec>)
 80052de:	49e1      	ldr	r1, [pc, #900]	@ (8005664 <CreateMessage+0x410>)
 80052e0:	48e1      	ldr	r0, [pc, #900]	@ (8005668 <CreateMessage+0x414>)
 80052e2:	9202      	str	r2, [sp, #8]
 80052e4:	9303      	str	r3, [sp, #12]
 80052e6:	4bdc      	ldr	r3, [pc, #880]	@ (8005658 <CreateMessage+0x404>)
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	002b      	movs	r3, r5
 80052ec:	0022      	movs	r2, r4
 80052ee:	f020 f9b7 	bl	8025660 <siprintf>
#endif
index = strlen(message);
 80052f2:	4bd5      	ldr	r3, [pc, #852]	@ (8005648 <CreateMessage+0x3f4>)
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7fa ff39 	bl	800016c <strlen>
 80052fa:	0002      	movs	r2, r0
 80052fc:	19bb      	adds	r3, r7, r6
 80052fe:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005300:	1dbb      	adds	r3, r7, #6
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d019      	beq.n	800533c <CreateMessage+0xe8>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005308:	4bcf      	ldr	r3, [pc, #828]	@ (8005648 <CreateMessage+0x3f4>)
 800530a:	0018      	movs	r0, r3
 800530c:	f7fa ff2e 	bl	800016c <strlen>
 8005310:	0003      	movs	r3, r0
 8005312:	b29a      	uxth	r2, r3
 8005314:	4bcc      	ldr	r3, [pc, #816]	@ (8005648 <CreateMessage+0x3f4>)
 8005316:	0011      	movs	r1, r2
 8005318:	0018      	movs	r0, r3
 800531a:	f7ff fd97 	bl	8004e4c <ESP_Send>
 800531e:	0003      	movs	r3, r0
 8005320:	001a      	movs	r2, r3
 8005322:	4bd2      	ldr	r3, [pc, #840]	@ (800566c <CreateMessage+0x418>)
 8005324:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005326:	4bd2      	ldr	r3, [pc, #840]	@ (8005670 <CreateMessage+0x41c>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	001a      	movs	r2, r3
 800532c:	4bcf      	ldr	r3, [pc, #828]	@ (800566c <CreateMessage+0x418>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	4013      	ands	r3, r2
 8005332:	1e5a      	subs	r2, r3, #1
 8005334:	4193      	sbcs	r3, r2
 8005336:	b2da      	uxtb	r2, r3
 8005338:	4bcd      	ldr	r3, [pc, #820]	@ (8005670 <CreateMessage+0x41c>)
 800533a:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 800533c:	4bc4      	ldr	r3, [pc, #784]	@ (8005650 <CreateMessage+0x3fc>)
 800533e:	48cd      	ldr	r0, [pc, #820]	@ (8005674 <CreateMessage+0x420>)
 8005340:	220c      	movs	r2, #12
 8005342:	0019      	movs	r1, r3
 8005344:	f006 fa96 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005348:	4ac1      	ldr	r2, [pc, #772]	@ (8005650 <CreateMessage+0x3fc>)
 800534a:	4bc3      	ldr	r3, [pc, #780]	@ (8005658 <CreateMessage+0x404>)
 800534c:	0011      	movs	r1, r2
 800534e:	0018      	movs	r0, r3
 8005350:	f7ff ff5c 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8005354:	4bc1      	ldr	r3, [pc, #772]	@ (800565c <CreateMessage+0x408>)
 8005356:	689c      	ldr	r4, [r3, #8]
 8005358:	4bc1      	ldr	r3, [pc, #772]	@ (8005660 <CreateMessage+0x40c>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	1c18      	adds	r0, r3, #0
 800535e:	f7fe fa99 	bl	8003894 <__aeabi_f2d>
 8005362:	0002      	movs	r2, r0
 8005364:	000b      	movs	r3, r1
 8005366:	4db6      	ldr	r5, [pc, #728]	@ (8005640 <CreateMessage+0x3ec>)
 8005368:	49c3      	ldr	r1, [pc, #780]	@ (8005678 <CreateMessage+0x424>)
 800536a:	48b7      	ldr	r0, [pc, #732]	@ (8005648 <CreateMessage+0x3f4>)
 800536c:	9202      	str	r2, [sp, #8]
 800536e:	9303      	str	r3, [sp, #12]
 8005370:	4bb9      	ldr	r3, [pc, #740]	@ (8005658 <CreateMessage+0x404>)
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	002b      	movs	r3, r5
 8005376:	0022      	movs	r2, r4
 8005378:	f020 f972 	bl	8025660 <siprintf>
#endif
  index += strlen(message);
 800537c:	4bb2      	ldr	r3, [pc, #712]	@ (8005648 <CreateMessage+0x3f4>)
 800537e:	0018      	movs	r0, r3
 8005380:	f7fa fef4 	bl	800016c <strlen>
 8005384:	0003      	movs	r3, r0
 8005386:	b299      	uxth	r1, r3
 8005388:	220e      	movs	r2, #14
 800538a:	18bb      	adds	r3, r7, r2
 800538c:	18ba      	adds	r2, r7, r2
 800538e:	8812      	ldrh	r2, [r2, #0]
 8005390:	188a      	adds	r2, r1, r2
 8005392:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005394:	1dbb      	adds	r3, r7, #6
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d019      	beq.n	80053d0 <CreateMessage+0x17c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800539c:	4baa      	ldr	r3, [pc, #680]	@ (8005648 <CreateMessage+0x3f4>)
 800539e:	0018      	movs	r0, r3
 80053a0:	f7fa fee4 	bl	800016c <strlen>
 80053a4:	0003      	movs	r3, r0
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	4ba7      	ldr	r3, [pc, #668]	@ (8005648 <CreateMessage+0x3f4>)
 80053aa:	0011      	movs	r1, r2
 80053ac:	0018      	movs	r0, r3
 80053ae:	f7ff fd4d 	bl	8004e4c <ESP_Send>
 80053b2:	0003      	movs	r3, r0
 80053b4:	001a      	movs	r2, r3
 80053b6:	4bad      	ldr	r3, [pc, #692]	@ (800566c <CreateMessage+0x418>)
 80053b8:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80053ba:	4bad      	ldr	r3, [pc, #692]	@ (8005670 <CreateMessage+0x41c>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	001a      	movs	r2, r3
 80053c0:	4baa      	ldr	r3, [pc, #680]	@ (800566c <CreateMessage+0x418>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	4013      	ands	r3, r2
 80053c6:	1e5a      	subs	r2, r3, #1
 80053c8:	4193      	sbcs	r3, r2
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	4ba8      	ldr	r3, [pc, #672]	@ (8005670 <CreateMessage+0x41c>)
 80053ce:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 80053d0:	4b9f      	ldr	r3, [pc, #636]	@ (8005650 <CreateMessage+0x3fc>)
 80053d2:	48aa      	ldr	r0, [pc, #680]	@ (800567c <CreateMessage+0x428>)
 80053d4:	220c      	movs	r2, #12
 80053d6:	0019      	movs	r1, r3
 80053d8:	f006 fa4c 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80053dc:	4a9c      	ldr	r2, [pc, #624]	@ (8005650 <CreateMessage+0x3fc>)
 80053de:	4b9e      	ldr	r3, [pc, #632]	@ (8005658 <CreateMessage+0x404>)
 80053e0:	0011      	movs	r1, r2
 80053e2:	0018      	movs	r0, r3
 80053e4:	f7ff ff12 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
 80053e8:	4b9c      	ldr	r3, [pc, #624]	@ (800565c <CreateMessage+0x408>)
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005660 <CreateMessage+0x40c>)
 80053ee:	2148      	movs	r1, #72	@ 0x48
 80053f0:	5a5b      	ldrh	r3, [r3, r1]
 80053f2:	4c93      	ldr	r4, [pc, #588]	@ (8005640 <CreateMessage+0x3ec>)
 80053f4:	49a2      	ldr	r1, [pc, #648]	@ (8005680 <CreateMessage+0x42c>)
 80053f6:	4894      	ldr	r0, [pc, #592]	@ (8005648 <CreateMessage+0x3f4>)
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	4b97      	ldr	r3, [pc, #604]	@ (8005658 <CreateMessage+0x404>)
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	0023      	movs	r3, r4
 8005400:	f020 f92e 	bl	8025660 <siprintf>
#endif
  index += strlen(message);
 8005404:	4b90      	ldr	r3, [pc, #576]	@ (8005648 <CreateMessage+0x3f4>)
 8005406:	0018      	movs	r0, r3
 8005408:	f7fa feb0 	bl	800016c <strlen>
 800540c:	0003      	movs	r3, r0
 800540e:	b299      	uxth	r1, r3
 8005410:	220e      	movs	r2, #14
 8005412:	18bb      	adds	r3, r7, r2
 8005414:	18ba      	adds	r2, r7, r2
 8005416:	8812      	ldrh	r2, [r2, #0]
 8005418:	188a      	adds	r2, r1, r2
 800541a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800541c:	1dbb      	adds	r3, r7, #6
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d019      	beq.n	8005458 <CreateMessage+0x204>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005424:	4b88      	ldr	r3, [pc, #544]	@ (8005648 <CreateMessage+0x3f4>)
 8005426:	0018      	movs	r0, r3
 8005428:	f7fa fea0 	bl	800016c <strlen>
 800542c:	0003      	movs	r3, r0
 800542e:	b29a      	uxth	r2, r3
 8005430:	4b85      	ldr	r3, [pc, #532]	@ (8005648 <CreateMessage+0x3f4>)
 8005432:	0011      	movs	r1, r2
 8005434:	0018      	movs	r0, r3
 8005436:	f7ff fd09 	bl	8004e4c <ESP_Send>
 800543a:	0003      	movs	r3, r0
 800543c:	001a      	movs	r2, r3
 800543e:	4b8b      	ldr	r3, [pc, #556]	@ (800566c <CreateMessage+0x418>)
 8005440:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005442:	4b8b      	ldr	r3, [pc, #556]	@ (8005670 <CreateMessage+0x41c>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	001a      	movs	r2, r3
 8005448:	4b88      	ldr	r3, [pc, #544]	@ (800566c <CreateMessage+0x418>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	4013      	ands	r3, r2
 800544e:	1e5a      	subs	r2, r3, #1
 8005450:	4193      	sbcs	r3, r2
 8005452:	b2da      	uxtb	r2, r3
 8005454:	4b86      	ldr	r3, [pc, #536]	@ (8005670 <CreateMessage+0x41c>)
 8005456:	701a      	strb	r2, [r3, #0]
      retstat &= status;
    }
  }
#endif

  if (IsBMP280SensorPresent()) {
 8005458:	f007 fb60 	bl	800cb1c <IsBMP280SensorPresent>
 800545c:	1e03      	subs	r3, r0, #0
 800545e:	d100      	bne.n	8005462 <CreateMessage+0x20e>
 8005460:	e0ab      	b.n	80055ba <CreateMessage+0x366>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 8005462:	4b7b      	ldr	r3, [pc, #492]	@ (8005650 <CreateMessage+0x3fc>)
 8005464:	4887      	ldr	r0, [pc, #540]	@ (8005684 <CreateMessage+0x430>)
 8005466:	220c      	movs	r2, #12
 8005468:	0019      	movs	r1, r3
 800546a:	f006 fa03 	bl	800b874 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && MeasVal.BMP280_airpressure) {
 800546e:	4a86      	ldr	r2, [pc, #536]	@ (8005688 <CreateMessage+0x434>)
 8005470:	4986      	ldr	r1, [pc, #536]	@ (800568c <CreateMessage+0x438>)
 8005472:	4b77      	ldr	r3, [pc, #476]	@ (8005650 <CreateMessage+0x3fc>)
 8005474:	0018      	movs	r0, r3
 8005476:	f7ff fe91 	bl	800519c <isKeyValid>
 800547a:	1e03      	subs	r3, r0, #0
 800547c:	d04b      	beq.n	8005516 <CreateMessage+0x2c2>
 800547e:	4b78      	ldr	r3, [pc, #480]	@ (8005660 <CreateMessage+0x40c>)
 8005480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005482:	2100      	movs	r1, #0
 8005484:	1c18      	adds	r0, r3, #0
 8005486:	f7fb f84d 	bl	8000524 <__aeabi_fcmpeq>
 800548a:	1e03      	subs	r3, r0, #0
 800548c:	d143      	bne.n	8005516 <CreateMessage+0x2c2>
      uint8ArrayToString(Buffer, keybuffer);
 800548e:	4a70      	ldr	r2, [pc, #448]	@ (8005650 <CreateMessage+0x3fc>)
 8005490:	4b71      	ldr	r3, [pc, #452]	@ (8005658 <CreateMessage+0x404>)
 8005492:	0011      	movs	r1, r2
 8005494:	0018      	movs	r0, r3
 8005496:	f7ff feb9 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_airpressure);
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_airpressure);
 800549a:	4b70      	ldr	r3, [pc, #448]	@ (800565c <CreateMessage+0x408>)
 800549c:	689c      	ldr	r4, [r3, #8]
 800549e:	4b70      	ldr	r3, [pc, #448]	@ (8005660 <CreateMessage+0x40c>)
 80054a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a2:	1c18      	adds	r0, r3, #0
 80054a4:	f7fe f9f6 	bl	8003894 <__aeabi_f2d>
 80054a8:	0002      	movs	r2, r0
 80054aa:	000b      	movs	r3, r1
 80054ac:	4d64      	ldr	r5, [pc, #400]	@ (8005640 <CreateMessage+0x3ec>)
 80054ae:	4978      	ldr	r1, [pc, #480]	@ (8005690 <CreateMessage+0x43c>)
 80054b0:	4865      	ldr	r0, [pc, #404]	@ (8005648 <CreateMessage+0x3f4>)
 80054b2:	9202      	str	r2, [sp, #8]
 80054b4:	9303      	str	r3, [sp, #12]
 80054b6:	4b68      	ldr	r3, [pc, #416]	@ (8005658 <CreateMessage+0x404>)
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	002b      	movs	r3, r5
 80054bc:	0022      	movs	r2, r4
 80054be:	f020 f8cf 	bl	8025660 <siprintf>
#endif
      index += strlen(message);
 80054c2:	4b61      	ldr	r3, [pc, #388]	@ (8005648 <CreateMessage+0x3f4>)
 80054c4:	0018      	movs	r0, r3
 80054c6:	f7fa fe51 	bl	800016c <strlen>
 80054ca:	0003      	movs	r3, r0
 80054cc:	b299      	uxth	r1, r3
 80054ce:	220e      	movs	r2, #14
 80054d0:	18bb      	adds	r3, r7, r2
 80054d2:	18ba      	adds	r2, r7, r2
 80054d4:	8812      	ldrh	r2, [r2, #0]
 80054d6:	188a      	adds	r2, r1, r2
 80054d8:	801a      	strh	r2, [r3, #0]
      if (send) {
 80054da:	1dbb      	adds	r3, r7, #6
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d019      	beq.n	8005516 <CreateMessage+0x2c2>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80054e2:	4b59      	ldr	r3, [pc, #356]	@ (8005648 <CreateMessage+0x3f4>)
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7fa fe41 	bl	800016c <strlen>
 80054ea:	0003      	movs	r3, r0
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	4b56      	ldr	r3, [pc, #344]	@ (8005648 <CreateMessage+0x3f4>)
 80054f0:	0011      	movs	r1, r2
 80054f2:	0018      	movs	r0, r3
 80054f4:	f7ff fcaa 	bl	8004e4c <ESP_Send>
 80054f8:	0003      	movs	r3, r0
 80054fa:	001a      	movs	r2, r3
 80054fc:	4b5b      	ldr	r3, [pc, #364]	@ (800566c <CreateMessage+0x418>)
 80054fe:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005500:	4b5b      	ldr	r3, [pc, #364]	@ (8005670 <CreateMessage+0x41c>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	001a      	movs	r2, r3
 8005506:	4b59      	ldr	r3, [pc, #356]	@ (800566c <CreateMessage+0x418>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	4013      	ands	r3, r2
 800550c:	1e5a      	subs	r2, r3, #1
 800550e:	4193      	sbcs	r3, r2
 8005510:	b2da      	uxtb	r2, r3
 8005512:	4b57      	ldr	r3, [pc, #348]	@ (8005670 <CreateMessage+0x41c>)
 8005514:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 8005516:	4b4e      	ldr	r3, [pc, #312]	@ (8005650 <CreateMessage+0x3fc>)
 8005518:	485e      	ldr	r0, [pc, #376]	@ (8005694 <CreateMessage+0x440>)
 800551a:	220c      	movs	r2, #12
 800551c:	0019      	movs	r1, r3
 800551e:	f006 f9a9 	bl	800b874 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 8005522:	4a5d      	ldr	r2, [pc, #372]	@ (8005698 <CreateMessage+0x444>)
 8005524:	4959      	ldr	r1, [pc, #356]	@ (800568c <CreateMessage+0x438>)
 8005526:	4b4a      	ldr	r3, [pc, #296]	@ (8005650 <CreateMessage+0x3fc>)
 8005528:	0018      	movs	r0, r3
 800552a:	f7ff fe37 	bl	800519c <isKeyValid>
 800552e:	1e03      	subs	r3, r0, #0
 8005530:	d043      	beq.n	80055ba <CreateMessage+0x366>
      uint8ArrayToString(Buffer, keybuffer);
 8005532:	4a47      	ldr	r2, [pc, #284]	@ (8005650 <CreateMessage+0x3fc>)
 8005534:	4b48      	ldr	r3, [pc, #288]	@ (8005658 <CreateMessage+0x404>)
 8005536:	0011      	movs	r1, r2
 8005538:	0018      	movs	r0, r3
 800553a:	f7ff fe67 	bl	800520c <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperature);
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperature);
 800553e:	4b47      	ldr	r3, [pc, #284]	@ (800565c <CreateMessage+0x408>)
 8005540:	689c      	ldr	r4, [r3, #8]
 8005542:	4b47      	ldr	r3, [pc, #284]	@ (8005660 <CreateMessage+0x40c>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	1c18      	adds	r0, r3, #0
 8005548:	f7fe f9a4 	bl	8003894 <__aeabi_f2d>
 800554c:	0002      	movs	r2, r0
 800554e:	000b      	movs	r3, r1
 8005550:	4d3b      	ldr	r5, [pc, #236]	@ (8005640 <CreateMessage+0x3ec>)
 8005552:	4952      	ldr	r1, [pc, #328]	@ (800569c <CreateMessage+0x448>)
 8005554:	483c      	ldr	r0, [pc, #240]	@ (8005648 <CreateMessage+0x3f4>)
 8005556:	9202      	str	r2, [sp, #8]
 8005558:	9303      	str	r3, [sp, #12]
 800555a:	4b3f      	ldr	r3, [pc, #252]	@ (8005658 <CreateMessage+0x404>)
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	002b      	movs	r3, r5
 8005560:	0022      	movs	r2, r4
 8005562:	f020 f87d 	bl	8025660 <siprintf>
  #endif
      index += strlen(message);
 8005566:	4b38      	ldr	r3, [pc, #224]	@ (8005648 <CreateMessage+0x3f4>)
 8005568:	0018      	movs	r0, r3
 800556a:	f7fa fdff 	bl	800016c <strlen>
 800556e:	0003      	movs	r3, r0
 8005570:	b299      	uxth	r1, r3
 8005572:	220e      	movs	r2, #14
 8005574:	18bb      	adds	r3, r7, r2
 8005576:	18ba      	adds	r2, r7, r2
 8005578:	8812      	ldrh	r2, [r2, #0]
 800557a:	188a      	adds	r2, r1, r2
 800557c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800557e:	1dbb      	adds	r3, r7, #6
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d019      	beq.n	80055ba <CreateMessage+0x366>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005586:	4b30      	ldr	r3, [pc, #192]	@ (8005648 <CreateMessage+0x3f4>)
 8005588:	0018      	movs	r0, r3
 800558a:	f7fa fdef 	bl	800016c <strlen>
 800558e:	0003      	movs	r3, r0
 8005590:	b29a      	uxth	r2, r3
 8005592:	4b2d      	ldr	r3, [pc, #180]	@ (8005648 <CreateMessage+0x3f4>)
 8005594:	0011      	movs	r1, r2
 8005596:	0018      	movs	r0, r3
 8005598:	f7ff fc58 	bl	8004e4c <ESP_Send>
 800559c:	0003      	movs	r3, r0
 800559e:	001a      	movs	r2, r3
 80055a0:	4b32      	ldr	r3, [pc, #200]	@ (800566c <CreateMessage+0x418>)
 80055a2:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80055a4:	4b32      	ldr	r3, [pc, #200]	@ (8005670 <CreateMessage+0x41c>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	001a      	movs	r2, r3
 80055aa:	4b30      	ldr	r3, [pc, #192]	@ (800566c <CreateMessage+0x418>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	4013      	ands	r3, r2
 80055b0:	1e5a      	subs	r2, r3, #1
 80055b2:	4193      	sbcs	r3, r2
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005670 <CreateMessage+0x41c>)
 80055b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 80055ba:	4b25      	ldr	r3, [pc, #148]	@ (8005650 <CreateMessage+0x3fc>)
 80055bc:	4838      	ldr	r0, [pc, #224]	@ (80056a0 <CreateMessage+0x44c>)
 80055be:	220c      	movs	r2, #12
 80055c0:	0019      	movs	r1, r3
 80055c2:	f006 f957 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80055c6:	4a22      	ldr	r2, [pc, #136]	@ (8005650 <CreateMessage+0x3fc>)
 80055c8:	4b23      	ldr	r3, [pc, #140]	@ (8005658 <CreateMessage+0x404>)
 80055ca:	0011      	movs	r1, r2
 80055cc:	0018      	movs	r0, r3
 80055ce:	f7ff fe1d 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 80055d2:	4b22      	ldr	r3, [pc, #136]	@ (800565c <CreateMessage+0x408>)
 80055d4:	689c      	ldr	r4, [r3, #8]
 80055d6:	4b22      	ldr	r3, [pc, #136]	@ (8005660 <CreateMessage+0x40c>)
 80055d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055da:	1c18      	adds	r0, r3, #0
 80055dc:	f7fe f95a 	bl	8003894 <__aeabi_f2d>
 80055e0:	0002      	movs	r2, r0
 80055e2:	000b      	movs	r3, r1
 80055e4:	4d16      	ldr	r5, [pc, #88]	@ (8005640 <CreateMessage+0x3ec>)
 80055e6:	492f      	ldr	r1, [pc, #188]	@ (80056a4 <CreateMessage+0x450>)
 80055e8:	4817      	ldr	r0, [pc, #92]	@ (8005648 <CreateMessage+0x3f4>)
 80055ea:	9202      	str	r2, [sp, #8]
 80055ec:	9303      	str	r3, [sp, #12]
 80055ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005658 <CreateMessage+0x404>)
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	002b      	movs	r3, r5
 80055f4:	0022      	movs	r2, r4
 80055f6:	f020 f833 	bl	8025660 <siprintf>
#endif
  index += strlen(message);
 80055fa:	4b13      	ldr	r3, [pc, #76]	@ (8005648 <CreateMessage+0x3f4>)
 80055fc:	0018      	movs	r0, r3
 80055fe:	f7fa fdb5 	bl	800016c <strlen>
 8005602:	0003      	movs	r3, r0
 8005604:	b299      	uxth	r1, r3
 8005606:	220e      	movs	r2, #14
 8005608:	18bb      	adds	r3, r7, r2
 800560a:	18ba      	adds	r2, r7, r2
 800560c:	8812      	ldrh	r2, [r2, #0]
 800560e:	188a      	adds	r2, r1, r2
 8005610:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005612:	1dbb      	adds	r3, r7, #6
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d04e      	beq.n	80056b8 <CreateMessage+0x464>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800561a:	4b0b      	ldr	r3, [pc, #44]	@ (8005648 <CreateMessage+0x3f4>)
 800561c:	0018      	movs	r0, r3
 800561e:	f7fa fda5 	bl	800016c <strlen>
 8005622:	0003      	movs	r3, r0
 8005624:	b29a      	uxth	r2, r3
 8005626:	4b08      	ldr	r3, [pc, #32]	@ (8005648 <CreateMessage+0x3f4>)
 8005628:	0011      	movs	r1, r2
 800562a:	0018      	movs	r0, r3
 800562c:	f7ff fc0e 	bl	8004e4c <ESP_Send>
 8005630:	0003      	movs	r3, r0
 8005632:	001a      	movs	r2, r3
 8005634:	4b0d      	ldr	r3, [pc, #52]	@ (800566c <CreateMessage+0x418>)
 8005636:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005638:	4b0d      	ldr	r3, [pc, #52]	@ (8005670 <CreateMessage+0x41c>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	001a      	movs	r2, r3
 800563e:	e033      	b.n	80056a8 <CreateMessage+0x454>
 8005640:	2000071c 	.word	0x2000071c
 8005644:	0802da48 	.word	0x0802da48
 8005648:	200005cc 	.word	0x200005cc
 800564c:	0802a1d8 	.word	0x0802a1d8
 8005650:	2000073c 	.word	0x2000073c
 8005654:	0808000c 	.word	0x0808000c
 8005658:	20000748 	.word	0x20000748
 800565c:	200005ac 	.word	0x200005ac
 8005660:	2000067c 	.word	0x2000067c
 8005664:	0802a1dc 	.word	0x0802a1dc
 8005668:	200005cd 	.word	0x200005cd
 800566c:	20000761 	.word	0x20000761
 8005670:	2000002d 	.word	0x2000002d
 8005674:	08080018 	.word	0x08080018
 8005678:	0802a230 	.word	0x0802a230
 800567c:	08080030 	.word	0x08080030
 8005680:	0802a288 	.word	0x0802a288
 8005684:	0808003c 	.word	0x0808003c
 8005688:	0802a2dc 	.word	0x0802a2dc
 800568c:	0802a2e0 	.word	0x0802a2e0
 8005690:	0802a2e8 	.word	0x0802a2e8
 8005694:	080800e0 	.word	0x080800e0
 8005698:	0802a344 	.word	0x0802a344
 800569c:	0802a350 	.word	0x0802a350
 80056a0:	08080048 	.word	0x08080048
 80056a4:	0802a3ac 	.word	0x0802a3ac
 80056a8:	4be8      	ldr	r3, [pc, #928]	@ (8005a4c <CreateMessage+0x7f8>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	4013      	ands	r3, r2
 80056ae:	1e5a      	subs	r2, r3, #1
 80056b0:	4193      	sbcs	r3, r2
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	4be6      	ldr	r3, [pc, #920]	@ (8005a50 <CreateMessage+0x7fc>)
 80056b6:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 80056b8:	1dfb      	adds	r3, r7, #7
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2201      	movs	r2, #1
 80056be:	4053      	eors	r3, r2
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d100      	bne.n	80056c8 <CreateMessage+0x474>
 80056c6:	e2bd      	b.n	8005c44 <CreateMessage+0x9f0>
    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 80056c8:	4be2      	ldr	r3, [pc, #904]	@ (8005a54 <CreateMessage+0x800>)
 80056ca:	48e3      	ldr	r0, [pc, #908]	@ (8005a58 <CreateMessage+0x804>)
 80056cc:	220c      	movs	r2, #12
 80056ce:	0019      	movs	r1, r3
 80056d0:	f006 f8d0 	bl	800b874 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 80056d4:	4adf      	ldr	r2, [pc, #892]	@ (8005a54 <CreateMessage+0x800>)
 80056d6:	4be1      	ldr	r3, [pc, #900]	@ (8005a5c <CreateMessage+0x808>)
 80056d8:	0011      	movs	r1, r2
 80056da:	0018      	movs	r0, r3
 80056dc:	f7ff fd96 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 80056e0:	4bdf      	ldr	r3, [pc, #892]	@ (8005a60 <CreateMessage+0x80c>)
 80056e2:	689c      	ldr	r4, [r3, #8]
 80056e4:	4bdf      	ldr	r3, [pc, #892]	@ (8005a64 <CreateMessage+0x810>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	1c18      	adds	r0, r3, #0
 80056ea:	f7fe f8d3 	bl	8003894 <__aeabi_f2d>
 80056ee:	0002      	movs	r2, r0
 80056f0:	000b      	movs	r3, r1
 80056f2:	4ddd      	ldr	r5, [pc, #884]	@ (8005a68 <CreateMessage+0x814>)
 80056f4:	49dd      	ldr	r1, [pc, #884]	@ (8005a6c <CreateMessage+0x818>)
 80056f6:	48de      	ldr	r0, [pc, #888]	@ (8005a70 <CreateMessage+0x81c>)
 80056f8:	9202      	str	r2, [sp, #8]
 80056fa:	9303      	str	r3, [sp, #12]
 80056fc:	4bd7      	ldr	r3, [pc, #860]	@ (8005a5c <CreateMessage+0x808>)
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	002b      	movs	r3, r5
 8005702:	0022      	movs	r2, r4
 8005704:	f01f ffac 	bl	8025660 <siprintf>
#endif
    index += strlen(message);
 8005708:	4bd9      	ldr	r3, [pc, #868]	@ (8005a70 <CreateMessage+0x81c>)
 800570a:	0018      	movs	r0, r3
 800570c:	f7fa fd2e 	bl	800016c <strlen>
 8005710:	0003      	movs	r3, r0
 8005712:	b299      	uxth	r1, r3
 8005714:	220e      	movs	r2, #14
 8005716:	18bb      	adds	r3, r7, r2
 8005718:	18ba      	adds	r2, r7, r2
 800571a:	8812      	ldrh	r2, [r2, #0]
 800571c:	188a      	adds	r2, r1, r2
 800571e:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005720:	1dbb      	adds	r3, r7, #6
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d019      	beq.n	800575c <CreateMessage+0x508>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005728:	4bd1      	ldr	r3, [pc, #836]	@ (8005a70 <CreateMessage+0x81c>)
 800572a:	0018      	movs	r0, r3
 800572c:	f7fa fd1e 	bl	800016c <strlen>
 8005730:	0003      	movs	r3, r0
 8005732:	b29a      	uxth	r2, r3
 8005734:	4bce      	ldr	r3, [pc, #824]	@ (8005a70 <CreateMessage+0x81c>)
 8005736:	0011      	movs	r1, r2
 8005738:	0018      	movs	r0, r3
 800573a:	f7ff fb87 	bl	8004e4c <ESP_Send>
 800573e:	0003      	movs	r3, r0
 8005740:	001a      	movs	r2, r3
 8005742:	4bc2      	ldr	r3, [pc, #776]	@ (8005a4c <CreateMessage+0x7f8>)
 8005744:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005746:	4bc2      	ldr	r3, [pc, #776]	@ (8005a50 <CreateMessage+0x7fc>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	001a      	movs	r2, r3
 800574c:	4bbf      	ldr	r3, [pc, #764]	@ (8005a4c <CreateMessage+0x7f8>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	4013      	ands	r3, r2
 8005752:	1e5a      	subs	r2, r3, #1
 8005754:	4193      	sbcs	r3, r2
 8005756:	b2da      	uxtb	r2, r3
 8005758:	4bbd      	ldr	r3, [pc, #756]	@ (8005a50 <CreateMessage+0x7fc>)
 800575a:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 800575c:	4bc5      	ldr	r3, [pc, #788]	@ (8005a74 <CreateMessage+0x820>)
 800575e:	791b      	ldrb	r3, [r3, #4]
 8005760:	2b35      	cmp	r3, #53	@ 0x35
 8005762:	d147      	bne.n	80057f4 <CreateMessage+0x5a0>
 8005764:	f003 fd76 	bl	8009254 <Check_USB_PowerOn>
 8005768:	1e03      	subs	r3, r0, #0
 800576a:	d043      	beq.n	80057f4 <CreateMessage+0x5a0>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 800576c:	4bb9      	ldr	r3, [pc, #740]	@ (8005a54 <CreateMessage+0x800>)
 800576e:	48c2      	ldr	r0, [pc, #776]	@ (8005a78 <CreateMessage+0x824>)
 8005770:	220c      	movs	r2, #12
 8005772:	0019      	movs	r1, r3
 8005774:	f006 f87e 	bl	800b874 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005778:	4ab6      	ldr	r2, [pc, #728]	@ (8005a54 <CreateMessage+0x800>)
 800577a:	4bb8      	ldr	r3, [pc, #736]	@ (8005a5c <CreateMessage+0x808>)
 800577c:	0011      	movs	r1, r2
 800577e:	0018      	movs	r0, r3
 8005780:	f7ff fd44 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 8005784:	4bb6      	ldr	r3, [pc, #728]	@ (8005a60 <CreateMessage+0x80c>)
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	4bbc      	ldr	r3, [pc, #752]	@ (8005a7c <CreateMessage+0x828>)
 800578a:	214e      	movs	r1, #78	@ 0x4e
 800578c:	5a5b      	ldrh	r3, [r3, r1]
 800578e:	4cb6      	ldr	r4, [pc, #728]	@ (8005a68 <CreateMessage+0x814>)
 8005790:	49bb      	ldr	r1, [pc, #748]	@ (8005a80 <CreateMessage+0x82c>)
 8005792:	48b7      	ldr	r0, [pc, #732]	@ (8005a70 <CreateMessage+0x81c>)
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	4bb1      	ldr	r3, [pc, #708]	@ (8005a5c <CreateMessage+0x808>)
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	0023      	movs	r3, r4
 800579c:	f01f ff60 	bl	8025660 <siprintf>
#endif
      index += strlen(message);
 80057a0:	4bb3      	ldr	r3, [pc, #716]	@ (8005a70 <CreateMessage+0x81c>)
 80057a2:	0018      	movs	r0, r3
 80057a4:	f7fa fce2 	bl	800016c <strlen>
 80057a8:	0003      	movs	r3, r0
 80057aa:	b299      	uxth	r1, r3
 80057ac:	220e      	movs	r2, #14
 80057ae:	18bb      	adds	r3, r7, r2
 80057b0:	18ba      	adds	r2, r7, r2
 80057b2:	8812      	ldrh	r2, [r2, #0]
 80057b4:	188a      	adds	r2, r1, r2
 80057b6:	801a      	strh	r2, [r3, #0]
      if (send) {
 80057b8:	1dbb      	adds	r3, r7, #6
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d019      	beq.n	80057f4 <CreateMessage+0x5a0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80057c0:	4bab      	ldr	r3, [pc, #684]	@ (8005a70 <CreateMessage+0x81c>)
 80057c2:	0018      	movs	r0, r3
 80057c4:	f7fa fcd2 	bl	800016c <strlen>
 80057c8:	0003      	movs	r3, r0
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	4ba8      	ldr	r3, [pc, #672]	@ (8005a70 <CreateMessage+0x81c>)
 80057ce:	0011      	movs	r1, r2
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7ff fb3b 	bl	8004e4c <ESP_Send>
 80057d6:	0003      	movs	r3, r0
 80057d8:	001a      	movs	r2, r3
 80057da:	4b9c      	ldr	r3, [pc, #624]	@ (8005a4c <CreateMessage+0x7f8>)
 80057dc:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80057de:	4b9c      	ldr	r3, [pc, #624]	@ (8005a50 <CreateMessage+0x7fc>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	001a      	movs	r2, r3
 80057e4:	4b99      	ldr	r3, [pc, #612]	@ (8005a4c <CreateMessage+0x7f8>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	4013      	ands	r3, r2
 80057ea:	1e5a      	subs	r2, r3, #1
 80057ec:	4193      	sbcs	r3, r2
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	4b97      	ldr	r3, [pc, #604]	@ (8005a50 <CreateMessage+0x7fc>)
 80057f2:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 80057f4:	4b97      	ldr	r3, [pc, #604]	@ (8005a54 <CreateMessage+0x800>)
 80057f6:	48a3      	ldr	r0, [pc, #652]	@ (8005a84 <CreateMessage+0x830>)
 80057f8:	220c      	movs	r2, #12
 80057fa:	0019      	movs	r1, r3
 80057fc:	f006 f83a 	bl	800b874 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005800:	4b9c      	ldr	r3, [pc, #624]	@ (8005a74 <CreateMessage+0x820>)
 8005802:	791b      	ldrb	r3, [r3, #4]
 8005804:	2b34      	cmp	r3, #52	@ 0x34
 8005806:	d003      	beq.n	8005810 <CreateMessage+0x5bc>
 8005808:	4b9a      	ldr	r3, [pc, #616]	@ (8005a74 <CreateMessage+0x820>)
 800580a:	791b      	ldrb	r3, [r3, #4]
 800580c:	2b35      	cmp	r3, #53	@ 0x35
 800580e:	d14b      	bne.n	80058a8 <CreateMessage+0x654>
 8005810:	4a9d      	ldr	r2, [pc, #628]	@ (8005a88 <CreateMessage+0x834>)
 8005812:	499e      	ldr	r1, [pc, #632]	@ (8005a8c <CreateMessage+0x838>)
 8005814:	4b8f      	ldr	r3, [pc, #572]	@ (8005a54 <CreateMessage+0x800>)
 8005816:	0018      	movs	r0, r3
 8005818:	f7ff fcc0 	bl	800519c <isKeyValid>
 800581c:	1e03      	subs	r3, r0, #0
 800581e:	d043      	beq.n	80058a8 <CreateMessage+0x654>
      uint8ArrayToString(Buffer, keybuffer);
 8005820:	4a8c      	ldr	r2, [pc, #560]	@ (8005a54 <CreateMessage+0x800>)
 8005822:	4b8e      	ldr	r3, [pc, #568]	@ (8005a5c <CreateMessage+0x808>)
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff fcf0 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_temperature);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
 800582c:	4b8c      	ldr	r3, [pc, #560]	@ (8005a60 <CreateMessage+0x80c>)
 800582e:	689c      	ldr	r4, [r3, #8]
 8005830:	4b92      	ldr	r3, [pc, #584]	@ (8005a7c <CreateMessage+0x828>)
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	1c18      	adds	r0, r3, #0
 8005836:	f7fe f82d 	bl	8003894 <__aeabi_f2d>
 800583a:	0002      	movs	r2, r0
 800583c:	000b      	movs	r3, r1
 800583e:	4d8a      	ldr	r5, [pc, #552]	@ (8005a68 <CreateMessage+0x814>)
 8005840:	4993      	ldr	r1, [pc, #588]	@ (8005a90 <CreateMessage+0x83c>)
 8005842:	488b      	ldr	r0, [pc, #556]	@ (8005a70 <CreateMessage+0x81c>)
 8005844:	9202      	str	r2, [sp, #8]
 8005846:	9303      	str	r3, [sp, #12]
 8005848:	4b84      	ldr	r3, [pc, #528]	@ (8005a5c <CreateMessage+0x808>)
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	002b      	movs	r3, r5
 800584e:	0022      	movs	r2, r4
 8005850:	f01f ff06 	bl	8025660 <siprintf>
#endif
      index += strlen(message);
 8005854:	4b86      	ldr	r3, [pc, #536]	@ (8005a70 <CreateMessage+0x81c>)
 8005856:	0018      	movs	r0, r3
 8005858:	f7fa fc88 	bl	800016c <strlen>
 800585c:	0003      	movs	r3, r0
 800585e:	b299      	uxth	r1, r3
 8005860:	220e      	movs	r2, #14
 8005862:	18bb      	adds	r3, r7, r2
 8005864:	18ba      	adds	r2, r7, r2
 8005866:	8812      	ldrh	r2, [r2, #0]
 8005868:	188a      	adds	r2, r1, r2
 800586a:	801a      	strh	r2, [r3, #0]
      if (send) {
 800586c:	1dbb      	adds	r3, r7, #6
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d019      	beq.n	80058a8 <CreateMessage+0x654>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005874:	4b7e      	ldr	r3, [pc, #504]	@ (8005a70 <CreateMessage+0x81c>)
 8005876:	0018      	movs	r0, r3
 8005878:	f7fa fc78 	bl	800016c <strlen>
 800587c:	0003      	movs	r3, r0
 800587e:	b29a      	uxth	r2, r3
 8005880:	4b7b      	ldr	r3, [pc, #492]	@ (8005a70 <CreateMessage+0x81c>)
 8005882:	0011      	movs	r1, r2
 8005884:	0018      	movs	r0, r3
 8005886:	f7ff fae1 	bl	8004e4c <ESP_Send>
 800588a:	0003      	movs	r3, r0
 800588c:	001a      	movs	r2, r3
 800588e:	4b6f      	ldr	r3, [pc, #444]	@ (8005a4c <CreateMessage+0x7f8>)
 8005890:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005892:	4b6f      	ldr	r3, [pc, #444]	@ (8005a50 <CreateMessage+0x7fc>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	001a      	movs	r2, r3
 8005898:	4b6c      	ldr	r3, [pc, #432]	@ (8005a4c <CreateMessage+0x7f8>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	4013      	ands	r3, r2
 800589e:	1e5a      	subs	r2, r3, #1
 80058a0:	4193      	sbcs	r3, r2
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005a50 <CreateMessage+0x7fc>)
 80058a6:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 80058a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005a54 <CreateMessage+0x800>)
 80058aa:	487a      	ldr	r0, [pc, #488]	@ (8005a94 <CreateMessage+0x840>)
 80058ac:	220c      	movs	r2, #12
 80058ae:	0019      	movs	r1, r3
 80058b0:	f005 ffe0 	bl	800b874 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 80058b4:	4b6f      	ldr	r3, [pc, #444]	@ (8005a74 <CreateMessage+0x820>)
 80058b6:	791b      	ldrb	r3, [r3, #4]
 80058b8:	2b34      	cmp	r3, #52	@ 0x34
 80058ba:	d003      	beq.n	80058c4 <CreateMessage+0x670>
 80058bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005a74 <CreateMessage+0x820>)
 80058be:	791b      	ldrb	r3, [r3, #4]
 80058c0:	2b35      	cmp	r3, #53	@ 0x35
 80058c2:	d14b      	bne.n	800595c <CreateMessage+0x708>
 80058c4:	4a74      	ldr	r2, [pc, #464]	@ (8005a98 <CreateMessage+0x844>)
 80058c6:	4971      	ldr	r1, [pc, #452]	@ (8005a8c <CreateMessage+0x838>)
 80058c8:	4b62      	ldr	r3, [pc, #392]	@ (8005a54 <CreateMessage+0x800>)
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7ff fc66 	bl	800519c <isKeyValid>
 80058d0:	1e03      	subs	r3, r0, #0
 80058d2:	d043      	beq.n	800595c <CreateMessage+0x708>
      uint8ArrayToString(Buffer, keybuffer);
 80058d4:	4a5f      	ldr	r2, [pc, #380]	@ (8005a54 <CreateMessage+0x800>)
 80058d6:	4b61      	ldr	r3, [pc, #388]	@ (8005a5c <CreateMessage+0x808>)
 80058d8:	0011      	movs	r1, r2
 80058da:	0018      	movs	r0, r3
 80058dc:	f7ff fc96 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_humidity);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
 80058e0:	4b5f      	ldr	r3, [pc, #380]	@ (8005a60 <CreateMessage+0x80c>)
 80058e2:	689c      	ldr	r4, [r3, #8]
 80058e4:	4b65      	ldr	r3, [pc, #404]	@ (8005a7c <CreateMessage+0x828>)
 80058e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e8:	1c18      	adds	r0, r3, #0
 80058ea:	f7fd ffd3 	bl	8003894 <__aeabi_f2d>
 80058ee:	0002      	movs	r2, r0
 80058f0:	000b      	movs	r3, r1
 80058f2:	4d5d      	ldr	r5, [pc, #372]	@ (8005a68 <CreateMessage+0x814>)
 80058f4:	4969      	ldr	r1, [pc, #420]	@ (8005a9c <CreateMessage+0x848>)
 80058f6:	485e      	ldr	r0, [pc, #376]	@ (8005a70 <CreateMessage+0x81c>)
 80058f8:	9202      	str	r2, [sp, #8]
 80058fa:	9303      	str	r3, [sp, #12]
 80058fc:	4b57      	ldr	r3, [pc, #348]	@ (8005a5c <CreateMessage+0x808>)
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	002b      	movs	r3, r5
 8005902:	0022      	movs	r2, r4
 8005904:	f01f feac 	bl	8025660 <siprintf>
#endif
      index += strlen(message);
 8005908:	4b59      	ldr	r3, [pc, #356]	@ (8005a70 <CreateMessage+0x81c>)
 800590a:	0018      	movs	r0, r3
 800590c:	f7fa fc2e 	bl	800016c <strlen>
 8005910:	0003      	movs	r3, r0
 8005912:	b299      	uxth	r1, r3
 8005914:	220e      	movs	r2, #14
 8005916:	18bb      	adds	r3, r7, r2
 8005918:	18ba      	adds	r2, r7, r2
 800591a:	8812      	ldrh	r2, [r2, #0]
 800591c:	188a      	adds	r2, r1, r2
 800591e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005920:	1dbb      	adds	r3, r7, #6
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d019      	beq.n	800595c <CreateMessage+0x708>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005928:	4b51      	ldr	r3, [pc, #324]	@ (8005a70 <CreateMessage+0x81c>)
 800592a:	0018      	movs	r0, r3
 800592c:	f7fa fc1e 	bl	800016c <strlen>
 8005930:	0003      	movs	r3, r0
 8005932:	b29a      	uxth	r2, r3
 8005934:	4b4e      	ldr	r3, [pc, #312]	@ (8005a70 <CreateMessage+0x81c>)
 8005936:	0011      	movs	r1, r2
 8005938:	0018      	movs	r0, r3
 800593a:	f7ff fa87 	bl	8004e4c <ESP_Send>
 800593e:	0003      	movs	r3, r0
 8005940:	001a      	movs	r2, r3
 8005942:	4b42      	ldr	r3, [pc, #264]	@ (8005a4c <CreateMessage+0x7f8>)
 8005944:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005946:	4b42      	ldr	r3, [pc, #264]	@ (8005a50 <CreateMessage+0x7fc>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	001a      	movs	r2, r3
 800594c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a4c <CreateMessage+0x7f8>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	4013      	ands	r3, r2
 8005952:	1e5a      	subs	r2, r3, #1
 8005954:	4193      	sbcs	r3, r2
 8005956:	b2da      	uxtb	r2, r3
 8005958:	4b3d      	ldr	r3, [pc, #244]	@ (8005a50 <CreateMessage+0x7fc>)
 800595a:	701a      	strb	r2, [r3, #0]
      }
    }


    if (sen5x_Get_sen5x_enable_state()) {
 800595c:	f008 f914 	bl	800db88 <sen5x_Get_sen5x_enable_state>
 8005960:	1e03      	subs	r3, r0, #0
 8005962:	d100      	bne.n	8005966 <CreateMessage+0x712>
 8005964:	e16e      	b.n	8005c44 <CreateMessage+0x9f0>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005966:	4b3b      	ldr	r3, [pc, #236]	@ (8005a54 <CreateMessage+0x800>)
 8005968:	484d      	ldr	r0, [pc, #308]	@ (8005aa0 <CreateMessage+0x84c>)
 800596a:	220c      	movs	r2, #12
 800596c:	0019      	movs	r1, r3
 800596e:	f005 ff81 	bl	800b874 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005972:	4a4c      	ldr	r2, [pc, #304]	@ (8005aa4 <CreateMessage+0x850>)
 8005974:	494c      	ldr	r1, [pc, #304]	@ (8005aa8 <CreateMessage+0x854>)
 8005976:	4b37      	ldr	r3, [pc, #220]	@ (8005a54 <CreateMessage+0x800>)
 8005978:	0018      	movs	r0, r3
 800597a:	f7ff fc0f 	bl	800519c <isKeyValid>
 800597e:	1e03      	subs	r3, r0, #0
 8005980:	d043      	beq.n	8005a0a <CreateMessage+0x7b6>
        uint8ArrayToString(Buffer, keybuffer);
 8005982:	4a34      	ldr	r2, [pc, #208]	@ (8005a54 <CreateMessage+0x800>)
 8005984:	4b35      	ldr	r3, [pc, #212]	@ (8005a5c <CreateMessage+0x808>)
 8005986:	0011      	movs	r1, r2
 8005988:	0018      	movs	r0, r3
 800598a:	f7ff fc3f 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
 800598e:	4b34      	ldr	r3, [pc, #208]	@ (8005a60 <CreateMessage+0x80c>)
 8005990:	689c      	ldr	r4, [r3, #8]
 8005992:	4b3a      	ldr	r3, [pc, #232]	@ (8005a7c <CreateMessage+0x828>)
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	1c18      	adds	r0, r3, #0
 8005998:	f7fd ff7c 	bl	8003894 <__aeabi_f2d>
 800599c:	0002      	movs	r2, r0
 800599e:	000b      	movs	r3, r1
 80059a0:	4d31      	ldr	r5, [pc, #196]	@ (8005a68 <CreateMessage+0x814>)
 80059a2:	4942      	ldr	r1, [pc, #264]	@ (8005aac <CreateMessage+0x858>)
 80059a4:	4832      	ldr	r0, [pc, #200]	@ (8005a70 <CreateMessage+0x81c>)
 80059a6:	9202      	str	r2, [sp, #8]
 80059a8:	9303      	str	r3, [sp, #12]
 80059aa:	4b2c      	ldr	r3, [pc, #176]	@ (8005a5c <CreateMessage+0x808>)
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	002b      	movs	r3, r5
 80059b0:	0022      	movs	r2, r4
 80059b2:	f01f fe55 	bl	8025660 <siprintf>
#endif
        index += strlen(message);
 80059b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005a70 <CreateMessage+0x81c>)
 80059b8:	0018      	movs	r0, r3
 80059ba:	f7fa fbd7 	bl	800016c <strlen>
 80059be:	0003      	movs	r3, r0
 80059c0:	b299      	uxth	r1, r3
 80059c2:	220e      	movs	r2, #14
 80059c4:	18bb      	adds	r3, r7, r2
 80059c6:	18ba      	adds	r2, r7, r2
 80059c8:	8812      	ldrh	r2, [r2, #0]
 80059ca:	188a      	adds	r2, r1, r2
 80059cc:	801a      	strh	r2, [r3, #0]
        if (send) {
 80059ce:	1dbb      	adds	r3, r7, #6
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d019      	beq.n	8005a0a <CreateMessage+0x7b6>
          status = ESP_Send((uint8_t*)message, strlen(message));
 80059d6:	4b26      	ldr	r3, [pc, #152]	@ (8005a70 <CreateMessage+0x81c>)
 80059d8:	0018      	movs	r0, r3
 80059da:	f7fa fbc7 	bl	800016c <strlen>
 80059de:	0003      	movs	r3, r0
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	4b23      	ldr	r3, [pc, #140]	@ (8005a70 <CreateMessage+0x81c>)
 80059e4:	0011      	movs	r1, r2
 80059e6:	0018      	movs	r0, r3
 80059e8:	f7ff fa30 	bl	8004e4c <ESP_Send>
 80059ec:	0003      	movs	r3, r0
 80059ee:	001a      	movs	r2, r3
 80059f0:	4b16      	ldr	r3, [pc, #88]	@ (8005a4c <CreateMessage+0x7f8>)
 80059f2:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 80059f4:	4b16      	ldr	r3, [pc, #88]	@ (8005a50 <CreateMessage+0x7fc>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	001a      	movs	r2, r3
 80059fa:	4b14      	ldr	r3, [pc, #80]	@ (8005a4c <CreateMessage+0x7f8>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	4013      	ands	r3, r2
 8005a00:	1e5a      	subs	r2, r3, #1
 8005a02:	4193      	sbcs	r3, r2
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	4b12      	ldr	r3, [pc, #72]	@ (8005a50 <CreateMessage+0x7fc>)
 8005a08:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005a0a:	4b12      	ldr	r3, [pc, #72]	@ (8005a54 <CreateMessage+0x800>)
 8005a0c:	4828      	ldr	r0, [pc, #160]	@ (8005ab0 <CreateMessage+0x85c>)
 8005a0e:	220c      	movs	r2, #12
 8005a10:	0019      	movs	r1, r3
 8005a12:	f005 ff2f 	bl	800b874 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005a16:	4a0f      	ldr	r2, [pc, #60]	@ (8005a54 <CreateMessage+0x800>)
 8005a18:	4b10      	ldr	r3, [pc, #64]	@ (8005a5c <CreateMessage+0x808>)
 8005a1a:	0011      	movs	r1, r2
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f7ff fbf5 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 8005a22:	4b0f      	ldr	r3, [pc, #60]	@ (8005a60 <CreateMessage+0x80c>)
 8005a24:	689c      	ldr	r4, [r3, #8]
 8005a26:	4b15      	ldr	r3, [pc, #84]	@ (8005a7c <CreateMessage+0x828>)
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	1c18      	adds	r0, r3, #0
 8005a2c:	f7fd ff32 	bl	8003894 <__aeabi_f2d>
 8005a30:	0002      	movs	r2, r0
 8005a32:	000b      	movs	r3, r1
 8005a34:	4d0c      	ldr	r5, [pc, #48]	@ (8005a68 <CreateMessage+0x814>)
 8005a36:	491f      	ldr	r1, [pc, #124]	@ (8005ab4 <CreateMessage+0x860>)
 8005a38:	480d      	ldr	r0, [pc, #52]	@ (8005a70 <CreateMessage+0x81c>)
 8005a3a:	9202      	str	r2, [sp, #8]
 8005a3c:	9303      	str	r3, [sp, #12]
 8005a3e:	4b07      	ldr	r3, [pc, #28]	@ (8005a5c <CreateMessage+0x808>)
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	002b      	movs	r3, r5
 8005a44:	0022      	movs	r2, r4
 8005a46:	f01f fe0b 	bl	8025660 <siprintf>
 8005a4a:	e035      	b.n	8005ab8 <CreateMessage+0x864>
 8005a4c:	20000761 	.word	0x20000761
 8005a50:	2000002d 	.word	0x2000002d
 8005a54:	2000073c 	.word	0x2000073c
 8005a58:	08080078 	.word	0x08080078
 8005a5c:	20000748 	.word	0x20000748
 8005a60:	200005ac 	.word	0x200005ac
 8005a64:	200005c8 	.word	0x200005c8
 8005a68:	2000071c 	.word	0x2000071c
 8005a6c:	0802a408 	.word	0x0802a408
 8005a70:	200005cc 	.word	0x200005cc
 8005a74:	20000ed4 	.word	0x20000ed4
 8005a78:	08080024 	.word	0x08080024
 8005a7c:	2000067c 	.word	0x2000067c
 8005a80:	0802a468 	.word	0x0802a468
 8005a84:	08080170 	.word	0x08080170
 8005a88:	0802a4bc 	.word	0x0802a4bc
 8005a8c:	0802a4c8 	.word	0x0802a4c8
 8005a90:	0802a4d0 	.word	0x0802a4d0
 8005a94:	0808017c 	.word	0x0808017c
 8005a98:	0802a52c 	.word	0x0802a52c
 8005a9c:	0802a538 	.word	0x0802a538
 8005aa0:	080800b0 	.word	0x080800b0
 8005aa4:	0802a598 	.word	0x0802a598
 8005aa8:	0802a5a4 	.word	0x0802a5a4
 8005aac:	0802a5a8 	.word	0x0802a5a8
 8005ab0:	08080054 	.word	0x08080054
 8005ab4:	0802a600 	.word	0x0802a600
#endif
      index += strlen(message);
 8005ab8:	4beb      	ldr	r3, [pc, #940]	@ (8005e68 <CreateMessage+0xc14>)
 8005aba:	0018      	movs	r0, r3
 8005abc:	f7fa fb56 	bl	800016c <strlen>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	b299      	uxth	r1, r3
 8005ac4:	220e      	movs	r2, #14
 8005ac6:	18bb      	adds	r3, r7, r2
 8005ac8:	18ba      	adds	r2, r7, r2
 8005aca:	8812      	ldrh	r2, [r2, #0]
 8005acc:	188a      	adds	r2, r1, r2
 8005ace:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005ad0:	1dbb      	adds	r3, r7, #6
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d019      	beq.n	8005b0c <CreateMessage+0x8b8>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005ad8:	4be3      	ldr	r3, [pc, #908]	@ (8005e68 <CreateMessage+0xc14>)
 8005ada:	0018      	movs	r0, r3
 8005adc:	f7fa fb46 	bl	800016c <strlen>
 8005ae0:	0003      	movs	r3, r0
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	4be0      	ldr	r3, [pc, #896]	@ (8005e68 <CreateMessage+0xc14>)
 8005ae6:	0011      	movs	r1, r2
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7ff f9af 	bl	8004e4c <ESP_Send>
 8005aee:	0003      	movs	r3, r0
 8005af0:	001a      	movs	r2, r3
 8005af2:	4bde      	ldr	r3, [pc, #888]	@ (8005e6c <CreateMessage+0xc18>)
 8005af4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005af6:	4bde      	ldr	r3, [pc, #888]	@ (8005e70 <CreateMessage+0xc1c>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	001a      	movs	r2, r3
 8005afc:	4bdb      	ldr	r3, [pc, #876]	@ (8005e6c <CreateMessage+0xc18>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	4013      	ands	r3, r2
 8005b02:	1e5a      	subs	r2, r3, #1
 8005b04:	4193      	sbcs	r3, r2
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	4bd9      	ldr	r3, [pc, #868]	@ (8005e70 <CreateMessage+0xc1c>)
 8005b0a:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005b0c:	4bd9      	ldr	r3, [pc, #868]	@ (8005e74 <CreateMessage+0xc20>)
 8005b0e:	48da      	ldr	r0, [pc, #872]	@ (8005e78 <CreateMessage+0xc24>)
 8005b10:	220c      	movs	r2, #12
 8005b12:	0019      	movs	r1, r3
 8005b14:	f005 feae 	bl	800b874 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005b18:	4ad8      	ldr	r2, [pc, #864]	@ (8005e7c <CreateMessage+0xc28>)
 8005b1a:	49d9      	ldr	r1, [pc, #868]	@ (8005e80 <CreateMessage+0xc2c>)
 8005b1c:	4bd5      	ldr	r3, [pc, #852]	@ (8005e74 <CreateMessage+0xc20>)
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f7ff fb3c 	bl	800519c <isKeyValid>
 8005b24:	1e03      	subs	r3, r0, #0
 8005b26:	d043      	beq.n	8005bb0 <CreateMessage+0x95c>
        uint8ArrayToString(Buffer, keybuffer);
 8005b28:	4ad2      	ldr	r2, [pc, #840]	@ (8005e74 <CreateMessage+0xc20>)
 8005b2a:	4bd6      	ldr	r3, [pc, #856]	@ (8005e84 <CreateMessage+0xc30>)
 8005b2c:	0011      	movs	r1, r2
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f7ff fb6c 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
 8005b34:	4bd4      	ldr	r3, [pc, #848]	@ (8005e88 <CreateMessage+0xc34>)
 8005b36:	689c      	ldr	r4, [r3, #8]
 8005b38:	4bd4      	ldr	r3, [pc, #848]	@ (8005e8c <CreateMessage+0xc38>)
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	1c18      	adds	r0, r3, #0
 8005b3e:	f7fd fea9 	bl	8003894 <__aeabi_f2d>
 8005b42:	0002      	movs	r2, r0
 8005b44:	000b      	movs	r3, r1
 8005b46:	4dd2      	ldr	r5, [pc, #840]	@ (8005e90 <CreateMessage+0xc3c>)
 8005b48:	49d2      	ldr	r1, [pc, #840]	@ (8005e94 <CreateMessage+0xc40>)
 8005b4a:	48c7      	ldr	r0, [pc, #796]	@ (8005e68 <CreateMessage+0xc14>)
 8005b4c:	9202      	str	r2, [sp, #8]
 8005b4e:	9303      	str	r3, [sp, #12]
 8005b50:	4bcc      	ldr	r3, [pc, #816]	@ (8005e84 <CreateMessage+0xc30>)
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	002b      	movs	r3, r5
 8005b56:	0022      	movs	r2, r4
 8005b58:	f01f fd82 	bl	8025660 <siprintf>
#endif
        index += strlen(message);
 8005b5c:	4bc2      	ldr	r3, [pc, #776]	@ (8005e68 <CreateMessage+0xc14>)
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f7fa fb04 	bl	800016c <strlen>
 8005b64:	0003      	movs	r3, r0
 8005b66:	b299      	uxth	r1, r3
 8005b68:	220e      	movs	r2, #14
 8005b6a:	18bb      	adds	r3, r7, r2
 8005b6c:	18ba      	adds	r2, r7, r2
 8005b6e:	8812      	ldrh	r2, [r2, #0]
 8005b70:	188a      	adds	r2, r1, r2
 8005b72:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005b74:	1dbb      	adds	r3, r7, #6
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d019      	beq.n	8005bb0 <CreateMessage+0x95c>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005b7c:	4bba      	ldr	r3, [pc, #744]	@ (8005e68 <CreateMessage+0xc14>)
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f7fa faf4 	bl	800016c <strlen>
 8005b84:	0003      	movs	r3, r0
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	4bb7      	ldr	r3, [pc, #732]	@ (8005e68 <CreateMessage+0xc14>)
 8005b8a:	0011      	movs	r1, r2
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f7ff f95d 	bl	8004e4c <ESP_Send>
 8005b92:	0003      	movs	r3, r0
 8005b94:	001a      	movs	r2, r3
 8005b96:	4bb5      	ldr	r3, [pc, #724]	@ (8005e6c <CreateMessage+0xc18>)
 8005b98:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005b9a:	4bb5      	ldr	r3, [pc, #724]	@ (8005e70 <CreateMessage+0xc1c>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	001a      	movs	r2, r3
 8005ba0:	4bb2      	ldr	r3, [pc, #712]	@ (8005e6c <CreateMessage+0xc18>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	1e5a      	subs	r2, r3, #1
 8005ba8:	4193      	sbcs	r3, r2
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	4bb0      	ldr	r3, [pc, #704]	@ (8005e70 <CreateMessage+0xc1c>)
 8005bae:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005bb0:	4bb0      	ldr	r3, [pc, #704]	@ (8005e74 <CreateMessage+0xc20>)
 8005bb2:	48b9      	ldr	r0, [pc, #740]	@ (8005e98 <CreateMessage+0xc44>)
 8005bb4:	220c      	movs	r2, #12
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	f005 fe5c 	bl	800b874 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005bbc:	4aad      	ldr	r2, [pc, #692]	@ (8005e74 <CreateMessage+0xc20>)
 8005bbe:	4bb1      	ldr	r3, [pc, #708]	@ (8005e84 <CreateMessage+0xc30>)
 8005bc0:	0011      	movs	r1, r2
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f7ff fb22 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 8005bc8:	4baf      	ldr	r3, [pc, #700]	@ (8005e88 <CreateMessage+0xc34>)
 8005bca:	689c      	ldr	r4, [r3, #8]
 8005bcc:	4baf      	ldr	r3, [pc, #700]	@ (8005e8c <CreateMessage+0xc38>)
 8005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd0:	1c18      	adds	r0, r3, #0
 8005bd2:	f7fd fe5f 	bl	8003894 <__aeabi_f2d>
 8005bd6:	0002      	movs	r2, r0
 8005bd8:	000b      	movs	r3, r1
 8005bda:	4dad      	ldr	r5, [pc, #692]	@ (8005e90 <CreateMessage+0xc3c>)
 8005bdc:	49af      	ldr	r1, [pc, #700]	@ (8005e9c <CreateMessage+0xc48>)
 8005bde:	48a2      	ldr	r0, [pc, #648]	@ (8005e68 <CreateMessage+0xc14>)
 8005be0:	9202      	str	r2, [sp, #8]
 8005be2:	9303      	str	r3, [sp, #12]
 8005be4:	4ba7      	ldr	r3, [pc, #668]	@ (8005e84 <CreateMessage+0xc30>)
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	002b      	movs	r3, r5
 8005bea:	0022      	movs	r2, r4
 8005bec:	f01f fd38 	bl	8025660 <siprintf>
#endif
      index += strlen(message);
 8005bf0:	4b9d      	ldr	r3, [pc, #628]	@ (8005e68 <CreateMessage+0xc14>)
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f7fa faba 	bl	800016c <strlen>
 8005bf8:	0003      	movs	r3, r0
 8005bfa:	b299      	uxth	r1, r3
 8005bfc:	220e      	movs	r2, #14
 8005bfe:	18bb      	adds	r3, r7, r2
 8005c00:	18ba      	adds	r2, r7, r2
 8005c02:	8812      	ldrh	r2, [r2, #0]
 8005c04:	188a      	adds	r2, r1, r2
 8005c06:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005c08:	1dbb      	adds	r3, r7, #6
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d019      	beq.n	8005c44 <CreateMessage+0x9f0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005c10:	4b95      	ldr	r3, [pc, #596]	@ (8005e68 <CreateMessage+0xc14>)
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7fa faaa 	bl	800016c <strlen>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	4b92      	ldr	r3, [pc, #584]	@ (8005e68 <CreateMessage+0xc14>)
 8005c1e:	0011      	movs	r1, r2
 8005c20:	0018      	movs	r0, r3
 8005c22:	f7ff f913 	bl	8004e4c <ESP_Send>
 8005c26:	0003      	movs	r3, r0
 8005c28:	001a      	movs	r2, r3
 8005c2a:	4b90      	ldr	r3, [pc, #576]	@ (8005e6c <CreateMessage+0xc18>)
 8005c2c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005c2e:	4b90      	ldr	r3, [pc, #576]	@ (8005e70 <CreateMessage+0xc1c>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	001a      	movs	r2, r3
 8005c34:	4b8d      	ldr	r3, [pc, #564]	@ (8005e6c <CreateMessage+0xc18>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	1e5a      	subs	r2, r3, #1
 8005c3c:	4193      	sbcs	r3, r2
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	4b8b      	ldr	r3, [pc, #556]	@ (8005e70 <CreateMessage+0xc1c>)
 8005c42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsAHT20SensorPresent()) {
 8005c44:	f006 ff60 	bl	800cb08 <IsAHT20SensorPresent>
 8005c48:	1e03      	subs	r3, r0, #0
 8005c4a:	d100      	bne.n	8005c4e <CreateMessage+0x9fa>
 8005c4c:	e0a3      	b.n	8005d96 <CreateMessage+0xb42>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005c4e:	4b89      	ldr	r3, [pc, #548]	@ (8005e74 <CreateMessage+0xc20>)
 8005c50:	4893      	ldr	r0, [pc, #588]	@ (8005ea0 <CreateMessage+0xc4c>)
 8005c52:	220c      	movs	r2, #12
 8005c54:	0019      	movs	r1, r3
 8005c56:	f005 fe0d 	bl	800b874 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8005c5a:	4a92      	ldr	r2, [pc, #584]	@ (8005ea4 <CreateMessage+0xc50>)
 8005c5c:	4992      	ldr	r1, [pc, #584]	@ (8005ea8 <CreateMessage+0xc54>)
 8005c5e:	4b85      	ldr	r3, [pc, #532]	@ (8005e74 <CreateMessage+0xc20>)
 8005c60:	0018      	movs	r0, r3
 8005c62:	f7ff fa9b 	bl	800519c <isKeyValid>
 8005c66:	1e03      	subs	r3, r0, #0
 8005c68:	d043      	beq.n	8005cf2 <CreateMessage+0xa9e>
      uint8ArrayToString(Buffer, keybuffer);
 8005c6a:	4a82      	ldr	r2, [pc, #520]	@ (8005e74 <CreateMessage+0xc20>)
 8005c6c:	4b85      	ldr	r3, [pc, #532]	@ (8005e84 <CreateMessage+0xc30>)
 8005c6e:	0011      	movs	r1, r2
 8005c70:	0018      	movs	r0, r3
 8005c72:	f7ff facb 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperature);
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperature);
 8005c76:	4b84      	ldr	r3, [pc, #528]	@ (8005e88 <CreateMessage+0xc34>)
 8005c78:	689c      	ldr	r4, [r3, #8]
 8005c7a:	4b84      	ldr	r3, [pc, #528]	@ (8005e8c <CreateMessage+0xc38>)
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7e:	1c18      	adds	r0, r3, #0
 8005c80:	f7fd fe08 	bl	8003894 <__aeabi_f2d>
 8005c84:	0002      	movs	r2, r0
 8005c86:	000b      	movs	r3, r1
 8005c88:	4d81      	ldr	r5, [pc, #516]	@ (8005e90 <CreateMessage+0xc3c>)
 8005c8a:	4988      	ldr	r1, [pc, #544]	@ (8005eac <CreateMessage+0xc58>)
 8005c8c:	4876      	ldr	r0, [pc, #472]	@ (8005e68 <CreateMessage+0xc14>)
 8005c8e:	9202      	str	r2, [sp, #8]
 8005c90:	9303      	str	r3, [sp, #12]
 8005c92:	4b7c      	ldr	r3, [pc, #496]	@ (8005e84 <CreateMessage+0xc30>)
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	002b      	movs	r3, r5
 8005c98:	0022      	movs	r2, r4
 8005c9a:	f01f fce1 	bl	8025660 <siprintf>
#endif
      index += strlen(message);
 8005c9e:	4b72      	ldr	r3, [pc, #456]	@ (8005e68 <CreateMessage+0xc14>)
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f7fa fa63 	bl	800016c <strlen>
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	b299      	uxth	r1, r3
 8005caa:	220e      	movs	r2, #14
 8005cac:	18bb      	adds	r3, r7, r2
 8005cae:	18ba      	adds	r2, r7, r2
 8005cb0:	8812      	ldrh	r2, [r2, #0]
 8005cb2:	188a      	adds	r2, r1, r2
 8005cb4:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005cb6:	1dbb      	adds	r3, r7, #6
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d019      	beq.n	8005cf2 <CreateMessage+0xa9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8005e68 <CreateMessage+0xc14>)
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f7fa fa53 	bl	800016c <strlen>
 8005cc6:	0003      	movs	r3, r0
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	4b67      	ldr	r3, [pc, #412]	@ (8005e68 <CreateMessage+0xc14>)
 8005ccc:	0011      	movs	r1, r2
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f7ff f8bc 	bl	8004e4c <ESP_Send>
 8005cd4:	0003      	movs	r3, r0
 8005cd6:	001a      	movs	r2, r3
 8005cd8:	4b64      	ldr	r3, [pc, #400]	@ (8005e6c <CreateMessage+0xc18>)
 8005cda:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005cdc:	4b64      	ldr	r3, [pc, #400]	@ (8005e70 <CreateMessage+0xc1c>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	001a      	movs	r2, r3
 8005ce2:	4b62      	ldr	r3, [pc, #392]	@ (8005e6c <CreateMessage+0xc18>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	1e5a      	subs	r2, r3, #1
 8005cea:	4193      	sbcs	r3, r2
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	4b60      	ldr	r3, [pc, #384]	@ (8005e70 <CreateMessage+0xc1c>)
 8005cf0:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 8005cf2:	4b60      	ldr	r3, [pc, #384]	@ (8005e74 <CreateMessage+0xc20>)
 8005cf4:	486e      	ldr	r0, [pc, #440]	@ (8005eb0 <CreateMessage+0xc5c>)
 8005cf6:	220c      	movs	r2, #12
 8005cf8:	0019      	movs	r1, r3
 8005cfa:	f005 fdbb 	bl	800b874 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 8005cfe:	4a6d      	ldr	r2, [pc, #436]	@ (8005eb4 <CreateMessage+0xc60>)
 8005d00:	4969      	ldr	r1, [pc, #420]	@ (8005ea8 <CreateMessage+0xc54>)
 8005d02:	4b5c      	ldr	r3, [pc, #368]	@ (8005e74 <CreateMessage+0xc20>)
 8005d04:	0018      	movs	r0, r3
 8005d06:	f7ff fa49 	bl	800519c <isKeyValid>
 8005d0a:	1e03      	subs	r3, r0, #0
 8005d0c:	d043      	beq.n	8005d96 <CreateMessage+0xb42>
      uint8ArrayToString(Buffer, keybuffer);
 8005d0e:	4a59      	ldr	r2, [pc, #356]	@ (8005e74 <CreateMessage+0xc20>)
 8005d10:	4b5c      	ldr	r3, [pc, #368]	@ (8005e84 <CreateMessage+0xc30>)
 8005d12:	0011      	movs	r1, r2
 8005d14:	0018      	movs	r0, r3
 8005d16:	f7ff fa79 	bl	800520c <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humidity);
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humidity);
 8005d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8005e88 <CreateMessage+0xc34>)
 8005d1c:	689c      	ldr	r4, [r3, #8]
 8005d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8005e8c <CreateMessage+0xc38>)
 8005d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d22:	1c18      	adds	r0, r3, #0
 8005d24:	f7fd fdb6 	bl	8003894 <__aeabi_f2d>
 8005d28:	0002      	movs	r2, r0
 8005d2a:	000b      	movs	r3, r1
 8005d2c:	4d58      	ldr	r5, [pc, #352]	@ (8005e90 <CreateMessage+0xc3c>)
 8005d2e:	4962      	ldr	r1, [pc, #392]	@ (8005eb8 <CreateMessage+0xc64>)
 8005d30:	484d      	ldr	r0, [pc, #308]	@ (8005e68 <CreateMessage+0xc14>)
 8005d32:	9202      	str	r2, [sp, #8]
 8005d34:	9303      	str	r3, [sp, #12]
 8005d36:	4b53      	ldr	r3, [pc, #332]	@ (8005e84 <CreateMessage+0xc30>)
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	002b      	movs	r3, r5
 8005d3c:	0022      	movs	r2, r4
 8005d3e:	f01f fc8f 	bl	8025660 <siprintf>
  #endif
      index += strlen(message);
 8005d42:	4b49      	ldr	r3, [pc, #292]	@ (8005e68 <CreateMessage+0xc14>)
 8005d44:	0018      	movs	r0, r3
 8005d46:	f7fa fa11 	bl	800016c <strlen>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	b299      	uxth	r1, r3
 8005d4e:	220e      	movs	r2, #14
 8005d50:	18bb      	adds	r3, r7, r2
 8005d52:	18ba      	adds	r2, r7, r2
 8005d54:	8812      	ldrh	r2, [r2, #0]
 8005d56:	188a      	adds	r2, r1, r2
 8005d58:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005d5a:	1dbb      	adds	r3, r7, #6
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d019      	beq.n	8005d96 <CreateMessage+0xb42>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005d62:	4b41      	ldr	r3, [pc, #260]	@ (8005e68 <CreateMessage+0xc14>)
 8005d64:	0018      	movs	r0, r3
 8005d66:	f7fa fa01 	bl	800016c <strlen>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e68 <CreateMessage+0xc14>)
 8005d70:	0011      	movs	r1, r2
 8005d72:	0018      	movs	r0, r3
 8005d74:	f7ff f86a 	bl	8004e4c <ESP_Send>
 8005d78:	0003      	movs	r3, r0
 8005d7a:	001a      	movs	r2, r3
 8005d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e6c <CreateMessage+0xc18>)
 8005d7e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005d80:	4b3b      	ldr	r3, [pc, #236]	@ (8005e70 <CreateMessage+0xc1c>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	001a      	movs	r2, r3
 8005d86:	4b39      	ldr	r3, [pc, #228]	@ (8005e6c <CreateMessage+0xc18>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	1e5a      	subs	r2, r3, #1
 8005d8e:	4193      	sbcs	r3, r2
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	4b37      	ldr	r3, [pc, #220]	@ (8005e70 <CreateMessage+0xc1c>)
 8005d94:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8005d96:	f006 fecb 	bl	800cb30 <IsENS160SensorPresent>
 8005d9a:	1e03      	subs	r3, r0, #0
 8005d9c:	d100      	bne.n	8005da0 <CreateMessage+0xb4c>
 8005d9e:	e11b      	b.n	8005fd8 <CreateMessage+0xd84>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 8005da0:	4b34      	ldr	r3, [pc, #208]	@ (8005e74 <CreateMessage+0xc20>)
 8005da2:	4846      	ldr	r0, [pc, #280]	@ (8005ebc <CreateMessage+0xc68>)
 8005da4:	220c      	movs	r2, #12
 8005da6:	0019      	movs	r1, r3
 8005da8:	f005 fd64 	bl	800b874 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 8005dac:	4a44      	ldr	r2, [pc, #272]	@ (8005ec0 <CreateMessage+0xc6c>)
 8005dae:	4945      	ldr	r1, [pc, #276]	@ (8005ec4 <CreateMessage+0xc70>)
 8005db0:	4b30      	ldr	r3, [pc, #192]	@ (8005e74 <CreateMessage+0xc20>)
 8005db2:	0018      	movs	r0, r3
 8005db4:	f7ff f9f2 	bl	800519c <isKeyValid>
 8005db8:	1e03      	subs	r3, r0, #0
 8005dba:	d03d      	beq.n	8005e38 <CreateMessage+0xbe4>
      uint8ArrayToString(Buffer, keybuffer);
 8005dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8005e74 <CreateMessage+0xc20>)
 8005dbe:	4b31      	ldr	r3, [pc, #196]	@ (8005e84 <CreateMessage+0xc30>)
 8005dc0:	0011      	movs	r1, r2
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f7ff fa22 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
 8005dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8005e88 <CreateMessage+0xc34>)
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8005e8c <CreateMessage+0xc38>)
 8005dce:	2155      	movs	r1, #85	@ 0x55
 8005dd0:	5c5b      	ldrb	r3, [r3, r1]
 8005dd2:	4c2f      	ldr	r4, [pc, #188]	@ (8005e90 <CreateMessage+0xc3c>)
 8005dd4:	493c      	ldr	r1, [pc, #240]	@ (8005ec8 <CreateMessage+0xc74>)
 8005dd6:	4824      	ldr	r0, [pc, #144]	@ (8005e68 <CreateMessage+0xc14>)
 8005dd8:	9301      	str	r3, [sp, #4]
 8005dda:	4b2a      	ldr	r3, [pc, #168]	@ (8005e84 <CreateMessage+0xc30>)
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	0023      	movs	r3, r4
 8005de0:	f01f fc3e 	bl	8025660 <siprintf>
#endif
      index += strlen(message);
 8005de4:	4b20      	ldr	r3, [pc, #128]	@ (8005e68 <CreateMessage+0xc14>)
 8005de6:	0018      	movs	r0, r3
 8005de8:	f7fa f9c0 	bl	800016c <strlen>
 8005dec:	0003      	movs	r3, r0
 8005dee:	b299      	uxth	r1, r3
 8005df0:	220e      	movs	r2, #14
 8005df2:	18bb      	adds	r3, r7, r2
 8005df4:	18ba      	adds	r2, r7, r2
 8005df6:	8812      	ldrh	r2, [r2, #0]
 8005df8:	188a      	adds	r2, r1, r2
 8005dfa:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005dfc:	1dbb      	adds	r3, r7, #6
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d019      	beq.n	8005e38 <CreateMessage+0xbe4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e04:	4b18      	ldr	r3, [pc, #96]	@ (8005e68 <CreateMessage+0xc14>)
 8005e06:	0018      	movs	r0, r3
 8005e08:	f7fa f9b0 	bl	800016c <strlen>
 8005e0c:	0003      	movs	r3, r0
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	4b15      	ldr	r3, [pc, #84]	@ (8005e68 <CreateMessage+0xc14>)
 8005e12:	0011      	movs	r1, r2
 8005e14:	0018      	movs	r0, r3
 8005e16:	f7ff f819 	bl	8004e4c <ESP_Send>
 8005e1a:	0003      	movs	r3, r0
 8005e1c:	001a      	movs	r2, r3
 8005e1e:	4b13      	ldr	r3, [pc, #76]	@ (8005e6c <CreateMessage+0xc18>)
 8005e20:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e22:	4b13      	ldr	r3, [pc, #76]	@ (8005e70 <CreateMessage+0xc1c>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	001a      	movs	r2, r3
 8005e28:	4b10      	ldr	r3, [pc, #64]	@ (8005e6c <CreateMessage+0xc18>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	1e5a      	subs	r2, r3, #1
 8005e30:	4193      	sbcs	r3, r2
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	4b0e      	ldr	r3, [pc, #56]	@ (8005e70 <CreateMessage+0xc1c>)
 8005e36:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 8005e38:	4b0e      	ldr	r3, [pc, #56]	@ (8005e74 <CreateMessage+0xc20>)
 8005e3a:	4824      	ldr	r0, [pc, #144]	@ (8005ecc <CreateMessage+0xc78>)
 8005e3c:	220c      	movs	r2, #12
 8005e3e:	0019      	movs	r1, r3
 8005e40:	f005 fd18 	bl	800b874 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 8005e44:	4a22      	ldr	r2, [pc, #136]	@ (8005ed0 <CreateMessage+0xc7c>)
 8005e46:	491f      	ldr	r1, [pc, #124]	@ (8005ec4 <CreateMessage+0xc70>)
 8005e48:	4b0a      	ldr	r3, [pc, #40]	@ (8005e74 <CreateMessage+0xc20>)
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f7ff f9a6 	bl	800519c <isKeyValid>
 8005e50:	1e03      	subs	r3, r0, #0
 8005e52:	d075      	beq.n	8005f40 <CreateMessage+0xcec>
      uint8ArrayToString(Buffer, keybuffer);
 8005e54:	4a07      	ldr	r2, [pc, #28]	@ (8005e74 <CreateMessage+0xc20>)
 8005e56:	4b0b      	ldr	r3, [pc, #44]	@ (8005e84 <CreateMessage+0xc30>)
 8005e58:	0011      	movs	r1, r2
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f7ff f9d6 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
 8005e60:	4b09      	ldr	r3, [pc, #36]	@ (8005e88 <CreateMessage+0xc34>)
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	e036      	b.n	8005ed4 <CreateMessage+0xc80>
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	200005cc 	.word	0x200005cc
 8005e6c:	20000761 	.word	0x20000761
 8005e70:	2000002d 	.word	0x2000002d
 8005e74:	2000073c 	.word	0x2000073c
 8005e78:	080800bc 	.word	0x080800bc
 8005e7c:	0802a598 	.word	0x0802a598
 8005e80:	0802a65c 	.word	0x0802a65c
 8005e84:	20000748 	.word	0x20000748
 8005e88:	200005ac 	.word	0x200005ac
 8005e8c:	2000067c 	.word	0x2000067c
 8005e90:	2000071c 	.word	0x2000071c
 8005e94:	0802a660 	.word	0x0802a660
 8005e98:	08080060 	.word	0x08080060
 8005e9c:	0802a6b8 	.word	0x0802a6b8
 8005ea0:	080800c8 	.word	0x080800c8
 8005ea4:	0802a4bc 	.word	0x0802a4bc
 8005ea8:	0802a714 	.word	0x0802a714
 8005eac:	0802a71c 	.word	0x0802a71c
 8005eb0:	080800d4 	.word	0x080800d4
 8005eb4:	0802a52c 	.word	0x0802a52c
 8005eb8:	0802a778 	.word	0x0802a778
 8005ebc:	080800ec 	.word	0x080800ec
 8005ec0:	0802a7d4 	.word	0x0802a7d4
 8005ec4:	0802a7e8 	.word	0x0802a7e8
 8005ec8:	0802a7f0 	.word	0x0802a7f0
 8005ecc:	080800f8 	.word	0x080800f8
 8005ed0:	0802a848 	.word	0x0802a848
 8005ed4:	4b71      	ldr	r3, [pc, #452]	@ (800609c <CreateMessage+0xe48>)
 8005ed6:	214a      	movs	r1, #74	@ 0x4a
 8005ed8:	5a5b      	ldrh	r3, [r3, r1]
 8005eda:	4c71      	ldr	r4, [pc, #452]	@ (80060a0 <CreateMessage+0xe4c>)
 8005edc:	4971      	ldr	r1, [pc, #452]	@ (80060a4 <CreateMessage+0xe50>)
 8005ede:	4872      	ldr	r0, [pc, #456]	@ (80060a8 <CreateMessage+0xe54>)
 8005ee0:	9301      	str	r3, [sp, #4]
 8005ee2:	4b72      	ldr	r3, [pc, #456]	@ (80060ac <CreateMessage+0xe58>)
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	0023      	movs	r3, r4
 8005ee8:	f01f fbba 	bl	8025660 <siprintf>
#endif
      index += strlen(message);
 8005eec:	4b6e      	ldr	r3, [pc, #440]	@ (80060a8 <CreateMessage+0xe54>)
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f7fa f93c 	bl	800016c <strlen>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	b299      	uxth	r1, r3
 8005ef8:	220e      	movs	r2, #14
 8005efa:	18bb      	adds	r3, r7, r2
 8005efc:	18ba      	adds	r2, r7, r2
 8005efe:	8812      	ldrh	r2, [r2, #0]
 8005f00:	188a      	adds	r2, r1, r2
 8005f02:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f04:	1dbb      	adds	r3, r7, #6
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d019      	beq.n	8005f40 <CreateMessage+0xcec>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005f0c:	4b66      	ldr	r3, [pc, #408]	@ (80060a8 <CreateMessage+0xe54>)
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f7fa f92c 	bl	800016c <strlen>
 8005f14:	0003      	movs	r3, r0
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	4b63      	ldr	r3, [pc, #396]	@ (80060a8 <CreateMessage+0xe54>)
 8005f1a:	0011      	movs	r1, r2
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f7fe ff95 	bl	8004e4c <ESP_Send>
 8005f22:	0003      	movs	r3, r0
 8005f24:	001a      	movs	r2, r3
 8005f26:	4b62      	ldr	r3, [pc, #392]	@ (80060b0 <CreateMessage+0xe5c>)
 8005f28:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005f2a:	4b62      	ldr	r3, [pc, #392]	@ (80060b4 <CreateMessage+0xe60>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	001a      	movs	r2, r3
 8005f30:	4b5f      	ldr	r3, [pc, #380]	@ (80060b0 <CreateMessage+0xe5c>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	4013      	ands	r3, r2
 8005f36:	1e5a      	subs	r2, r3, #1
 8005f38:	4193      	sbcs	r3, r2
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	4b5d      	ldr	r3, [pc, #372]	@ (80060b4 <CreateMessage+0xe60>)
 8005f3e:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 8005f40:	4b5d      	ldr	r3, [pc, #372]	@ (80060b8 <CreateMessage+0xe64>)
 8005f42:	485e      	ldr	r0, [pc, #376]	@ (80060bc <CreateMessage+0xe68>)
 8005f44:	220c      	movs	r2, #12
 8005f46:	0019      	movs	r1, r3
 8005f48:	f005 fc94 	bl	800b874 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8005f4c:	4a5c      	ldr	r2, [pc, #368]	@ (80060c0 <CreateMessage+0xe6c>)
 8005f4e:	495d      	ldr	r1, [pc, #372]	@ (80060c4 <CreateMessage+0xe70>)
 8005f50:	4b59      	ldr	r3, [pc, #356]	@ (80060b8 <CreateMessage+0xe64>)
 8005f52:	0018      	movs	r0, r3
 8005f54:	f7ff f922 	bl	800519c <isKeyValid>
 8005f58:	1e03      	subs	r3, r0, #0
 8005f5a:	d03d      	beq.n	8005fd8 <CreateMessage+0xd84>
      uint8ArrayToString(Buffer, keybuffer);
 8005f5c:	4a56      	ldr	r2, [pc, #344]	@ (80060b8 <CreateMessage+0xe64>)
 8005f5e:	4b53      	ldr	r3, [pc, #332]	@ (80060ac <CreateMessage+0xe58>)
 8005f60:	0011      	movs	r1, r2
 8005f62:	0018      	movs	r0, r3
 8005f64:	f7ff f952 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
 8005f68:	4b57      	ldr	r3, [pc, #348]	@ (80060c8 <CreateMessage+0xe74>)
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800609c <CreateMessage+0xe48>)
 8005f6e:	2152      	movs	r1, #82	@ 0x52
 8005f70:	5a5b      	ldrh	r3, [r3, r1]
 8005f72:	4c4b      	ldr	r4, [pc, #300]	@ (80060a0 <CreateMessage+0xe4c>)
 8005f74:	4955      	ldr	r1, [pc, #340]	@ (80060cc <CreateMessage+0xe78>)
 8005f76:	484c      	ldr	r0, [pc, #304]	@ (80060a8 <CreateMessage+0xe54>)
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	4b4c      	ldr	r3, [pc, #304]	@ (80060ac <CreateMessage+0xe58>)
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	0023      	movs	r3, r4
 8005f80:	f01f fb6e 	bl	8025660 <siprintf>
#endif
      index += strlen(message);
 8005f84:	4b48      	ldr	r3, [pc, #288]	@ (80060a8 <CreateMessage+0xe54>)
 8005f86:	0018      	movs	r0, r3
 8005f88:	f7fa f8f0 	bl	800016c <strlen>
 8005f8c:	0003      	movs	r3, r0
 8005f8e:	b299      	uxth	r1, r3
 8005f90:	220e      	movs	r2, #14
 8005f92:	18bb      	adds	r3, r7, r2
 8005f94:	18ba      	adds	r2, r7, r2
 8005f96:	8812      	ldrh	r2, [r2, #0]
 8005f98:	188a      	adds	r2, r1, r2
 8005f9a:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f9c:	1dbb      	adds	r3, r7, #6
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d019      	beq.n	8005fd8 <CreateMessage+0xd84>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fa4:	4b40      	ldr	r3, [pc, #256]	@ (80060a8 <CreateMessage+0xe54>)
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f7fa f8e0 	bl	800016c <strlen>
 8005fac:	0003      	movs	r3, r0
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80060a8 <CreateMessage+0xe54>)
 8005fb2:	0011      	movs	r1, r2
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	f7fe ff49 	bl	8004e4c <ESP_Send>
 8005fba:	0003      	movs	r3, r0
 8005fbc:	001a      	movs	r2, r3
 8005fbe:	4b3c      	ldr	r3, [pc, #240]	@ (80060b0 <CreateMessage+0xe5c>)
 8005fc0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005fc2:	4b3c      	ldr	r3, [pc, #240]	@ (80060b4 <CreateMessage+0xe60>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	001a      	movs	r2, r3
 8005fc8:	4b39      	ldr	r3, [pc, #228]	@ (80060b0 <CreateMessage+0xe5c>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	1e5a      	subs	r2, r3, #1
 8005fd0:	4193      	sbcs	r3, r2
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	4b37      	ldr	r3, [pc, #220]	@ (80060b4 <CreateMessage+0xe60>)
 8005fd6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 8005fd8:	4b37      	ldr	r3, [pc, #220]	@ (80060b8 <CreateMessage+0xe64>)
 8005fda:	483d      	ldr	r0, [pc, #244]	@ (80060d0 <CreateMessage+0xe7c>)
 8005fdc:	220c      	movs	r2, #12
 8005fde:	0019      	movs	r1, r3
 8005fe0:	f005 fc48 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005fe4:	4a34      	ldr	r2, [pc, #208]	@ (80060b8 <CreateMessage+0xe64>)
 8005fe6:	4b31      	ldr	r3, [pc, #196]	@ (80060ac <CreateMessage+0xe58>)
 8005fe8:	0011      	movs	r1, r2
 8005fea:	0018      	movs	r0, r3
 8005fec:	f7ff f90e 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8005ff0:	4b35      	ldr	r3, [pc, #212]	@ (80060c8 <CreateMessage+0xe74>)
 8005ff2:	689c      	ldr	r4, [r3, #8]
 8005ff4:	4b37      	ldr	r3, [pc, #220]	@ (80060d4 <CreateMessage+0xe80>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	1c18      	adds	r0, r3, #0
 8005ffa:	f7fd fc4b 	bl	8003894 <__aeabi_f2d>
 8005ffe:	0002      	movs	r2, r0
 8006000:	000b      	movs	r3, r1
 8006002:	4d27      	ldr	r5, [pc, #156]	@ (80060a0 <CreateMessage+0xe4c>)
 8006004:	4934      	ldr	r1, [pc, #208]	@ (80060d8 <CreateMessage+0xe84>)
 8006006:	4828      	ldr	r0, [pc, #160]	@ (80060a8 <CreateMessage+0xe54>)
 8006008:	9202      	str	r2, [sp, #8]
 800600a:	9303      	str	r3, [sp, #12]
 800600c:	4b27      	ldr	r3, [pc, #156]	@ (80060ac <CreateMessage+0xe58>)
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	002b      	movs	r3, r5
 8006012:	0022      	movs	r2, r4
 8006014:	f01f fb24 	bl	8025660 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8006018:	4b23      	ldr	r3, [pc, #140]	@ (80060a8 <CreateMessage+0xe54>)
 800601a:	0018      	movs	r0, r3
 800601c:	f7fa f8a6 	bl	800016c <strlen>
 8006020:	0002      	movs	r2, r0
 8006022:	4b21      	ldr	r3, [pc, #132]	@ (80060a8 <CreateMessage+0xe54>)
 8006024:	18d3      	adds	r3, r2, r3
 8006026:	4a2d      	ldr	r2, [pc, #180]	@ (80060dc <CreateMessage+0xe88>)
 8006028:	0011      	movs	r1, r2
 800602a:	0018      	movs	r0, r3
 800602c:	f01f fb18 	bl	8025660 <siprintf>
  index += strlen(message);
 8006030:	4b1d      	ldr	r3, [pc, #116]	@ (80060a8 <CreateMessage+0xe54>)
 8006032:	0018      	movs	r0, r3
 8006034:	f7fa f89a 	bl	800016c <strlen>
 8006038:	0003      	movs	r3, r0
 800603a:	b299      	uxth	r1, r3
 800603c:	220e      	movs	r2, #14
 800603e:	18bb      	adds	r3, r7, r2
 8006040:	18ba      	adds	r2, r7, r2
 8006042:	8812      	ldrh	r2, [r2, #0]
 8006044:	188a      	adds	r2, r1, r2
 8006046:	801a      	strh	r2, [r3, #0]
  if (send) {
 8006048:	1dbb      	adds	r3, r7, #6
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d019      	beq.n	8006084 <CreateMessage+0xe30>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8006050:	4b15      	ldr	r3, [pc, #84]	@ (80060a8 <CreateMessage+0xe54>)
 8006052:	0018      	movs	r0, r3
 8006054:	f7fa f88a 	bl	800016c <strlen>
 8006058:	0003      	movs	r3, r0
 800605a:	b29a      	uxth	r2, r3
 800605c:	4b12      	ldr	r3, [pc, #72]	@ (80060a8 <CreateMessage+0xe54>)
 800605e:	0011      	movs	r1, r2
 8006060:	0018      	movs	r0, r3
 8006062:	f7fe fef3 	bl	8004e4c <ESP_Send>
 8006066:	0003      	movs	r3, r0
 8006068:	001a      	movs	r2, r3
 800606a:	4b11      	ldr	r3, [pc, #68]	@ (80060b0 <CreateMessage+0xe5c>)
 800606c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800606e:	4b11      	ldr	r3, [pc, #68]	@ (80060b4 <CreateMessage+0xe60>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	001a      	movs	r2, r3
 8006074:	4b0e      	ldr	r3, [pc, #56]	@ (80060b0 <CreateMessage+0xe5c>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	4013      	ands	r3, r2
 800607a:	1e5a      	subs	r2, r3, #1
 800607c:	4193      	sbcs	r3, r2
 800607e:	b2da      	uxtb	r2, r3
 8006080:	4b0c      	ldr	r3, [pc, #48]	@ (80060b4 <CreateMessage+0xe60>)
 8006082:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8006084:	4b0b      	ldr	r3, [pc, #44]	@ (80060b4 <CreateMessage+0xe60>)
 8006086:	781a      	ldrb	r2, [r3, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	701a      	strb	r2, [r3, #0]
  return index;
 800608c:	230e      	movs	r3, #14
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	881b      	ldrh	r3, [r3, #0]
}
 8006092:	0018      	movs	r0, r3
 8006094:	46bd      	mov	sp, r7
 8006096:	b005      	add	sp, #20
 8006098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800609a:	46c0      	nop			@ (mov r8, r8)
 800609c:	2000067c 	.word	0x2000067c
 80060a0:	2000071c 	.word	0x2000071c
 80060a4:	0802a850 	.word	0x0802a850
 80060a8:	200005cc 	.word	0x200005cc
 80060ac:	20000748 	.word	0x20000748
 80060b0:	20000761 	.word	0x20000761
 80060b4:	2000002d 	.word	0x2000002d
 80060b8:	2000073c 	.word	0x2000073c
 80060bc:	08080104 	.word	0x08080104
 80060c0:	0802a8ac 	.word	0x0802a8ac
 80060c4:	0802a7e8 	.word	0x0802a7e8
 80060c8:	200005ac 	.word	0x200005ac
 80060cc:	0802a8b4 	.word	0x0802a8b4
 80060d0:	0808006c 	.word	0x0808006c
 80060d4:	200005c4 	.word	0x200005c4
 80060d8:	0802a910 	.word	0x0802a910
 80060dc:	0802a968 	.word	0x0802a968

080060e0 <StartProg>:

void StartProg(){
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80060e4:	2064      	movs	r0, #100	@ 0x64
 80060e6:	f00d fe7b 	bl	8013de0 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80060ea:	4b15      	ldr	r3, [pc, #84]	@ (8006140 <StartProg+0x60>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	2101      	movs	r1, #1
 80060f0:	0018      	movs	r0, r3
 80060f2:	f00f f8fc 	bl	80152ee <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80060f6:	2064      	movs	r0, #100	@ 0x64
 80060f8:	f00d fe72 	bl	8013de0 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80060fc:	4b10      	ldr	r3, [pc, #64]	@ (8006140 <StartProg+0x60>)
 80060fe:	2200      	movs	r2, #0
 8006100:	2102      	movs	r1, #2
 8006102:	0018      	movs	r0, r3
 8006104:	f00f f8f3 	bl	80152ee <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8006108:	23fa      	movs	r3, #250	@ 0xfa
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	0018      	movs	r0, r3
 800610e:	f00d fe67 	bl	8013de0 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006112:	4b0b      	ldr	r3, [pc, #44]	@ (8006140 <StartProg+0x60>)
 8006114:	2201      	movs	r2, #1
 8006116:	2101      	movs	r1, #1
 8006118:	0018      	movs	r0, r3
 800611a:	f00f f8e8 	bl	80152ee <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800611e:	23fa      	movs	r3, #250	@ 0xfa
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	0018      	movs	r0, r3
 8006124:	f00d fe5c 	bl	8013de0 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8006128:	4b05      	ldr	r3, [pc, #20]	@ (8006140 <StartProg+0x60>)
 800612a:	2201      	movs	r2, #1
 800612c:	2102      	movs	r1, #2
 800612e:	0018      	movs	r0, r3
 8006130:	f00f f8dd 	bl	80152ee <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8006134:	2028      	movs	r0, #40	@ 0x28
 8006136:	f00d fe53 	bl	8013de0 <HAL_Delay>
}
 800613a:	46c0      	nop			@ (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	50001c00 	.word	0x50001c00

08006144 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8006144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006146:	b0d9      	sub	sp, #356	@ 0x164
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	0008      	movs	r0, r1
 800614e:	0011      	movs	r1, r2
 8006150:	4ba3      	ldr	r3, [pc, #652]	@ (80063e0 <ParseBuffer+0x29c>)
 8006152:	24b0      	movs	r4, #176	@ 0xb0
 8006154:	0064      	lsls	r4, r4, #1
 8006156:	191b      	adds	r3, r3, r4
 8006158:	19db      	adds	r3, r3, r7
 800615a:	1c02      	adds	r2, r0, #0
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	4ba1      	ldr	r3, [pc, #644]	@ (80063e4 <ParseBuffer+0x2a0>)
 8006160:	191b      	adds	r3, r3, r4
 8006162:	19db      	adds	r3, r3, r7
 8006164:	1c0a      	adds	r2, r1, #0
 8006166:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8006168:	2380      	movs	r3, #128	@ 0x80
 800616a:	005a      	lsls	r2, r3, #1
 800616c:	2348      	movs	r3, #72	@ 0x48
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	2100      	movs	r1, #0
 8006172:	0018      	movs	r0, r3
 8006174:	f01f fbde 	bl	8025934 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8006178:	2360      	movs	r3, #96	@ 0x60
 800617a:	33ff      	adds	r3, #255	@ 0xff
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	2203      	movs	r2, #3
 8006180:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8006182:	23ae      	movs	r3, #174	@ 0xae
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	18fb      	adds	r3, r7, r3
 8006188:	2200      	movs	r2, #0
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	e013      	b.n	80061b6 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 800618e:	20ae      	movs	r0, #174	@ 0xae
 8006190:	0040      	lsls	r0, r0, #1
 8006192:	183b      	adds	r3, r7, r0
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	18d2      	adds	r2, r2, r3
 800619a:	183b      	adds	r3, r7, r0
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	7811      	ldrb	r1, [r2, #0]
 80061a0:	4a91      	ldr	r2, [pc, #580]	@ (80063e8 <ParseBuffer+0x2a4>)
 80061a2:	24b0      	movs	r4, #176	@ 0xb0
 80061a4:	0064      	lsls	r4, r4, #1
 80061a6:	1912      	adds	r2, r2, r4
 80061a8:	19d2      	adds	r2, r2, r7
 80061aa:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80061ac:	183b      	adds	r3, r7, r0
 80061ae:	881a      	ldrh	r2, [r3, #0]
 80061b0:	183b      	adds	r3, r7, r0
 80061b2:	3201      	adds	r2, #1
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	23ae      	movs	r3, #174	@ 0xae
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	18fa      	adds	r2, r7, r3
 80061bc:	4b88      	ldr	r3, [pc, #544]	@ (80063e0 <ParseBuffer+0x29c>)
 80061be:	21b0      	movs	r1, #176	@ 0xb0
 80061c0:	0049      	lsls	r1, r1, #1
 80061c2:	185b      	adds	r3, r3, r1
 80061c4:	19db      	adds	r3, r3, r7
 80061c6:	8812      	ldrh	r2, [r2, #0]
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d3df      	bcc.n	800618e <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80061ce:	4b84      	ldr	r3, [pc, #528]	@ (80063e0 <ParseBuffer+0x29c>)
 80061d0:	185b      	adds	r3, r3, r1
 80061d2:	19db      	adds	r3, r3, r7
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	4a84      	ldr	r2, [pc, #528]	@ (80063e8 <ParseBuffer+0x2a4>)
 80061d8:	1852      	adds	r2, r2, r1
 80061da:	19d2      	adds	r2, r2, r7
 80061dc:	2100      	movs	r1, #0
 80061de:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80061e0:	f00d f92e 	bl	8013440 <GetVerboseLevel>
 80061e4:	0003      	movs	r3, r0
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d106      	bne.n	80061f8 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 80061ea:	2348      	movs	r3, #72	@ 0x48
 80061ec:	18fa      	adds	r2, r7, r3
 80061ee:	4b7f      	ldr	r3, [pc, #508]	@ (80063ec <ParseBuffer+0x2a8>)
 80061f0:	0011      	movs	r1, r2
 80061f2:	0018      	movs	r0, r3
 80061f4:	f01f f9c4 	bl	8025580 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	26ac      	movs	r6, #172	@ 0xac
 80061fc:	0076      	lsls	r6, r6, #1
 80061fe:	19ba      	adds	r2, r7, r6
 8006200:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8006202:	4b7b      	ldr	r3, [pc, #492]	@ (80063f0 <ParseBuffer+0x2ac>)
 8006204:	25b0      	movs	r5, #176	@ 0xb0
 8006206:	006d      	lsls	r5, r5, #1
 8006208:	195b      	adds	r3, r3, r5
 800620a:	19db      	adds	r3, r3, r7
 800620c:	4a79      	ldr	r2, [pc, #484]	@ (80063f4 <ParseBuffer+0x2b0>)
 800620e:	8811      	ldrh	r1, [r2, #0]
 8006210:	8019      	strh	r1, [r3, #0]
 8006212:	7892      	ldrb	r2, [r2, #2]
 8006214:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8006216:	4b78      	ldr	r3, [pc, #480]	@ (80063f8 <ParseBuffer+0x2b4>)
 8006218:	195b      	adds	r3, r3, r5
 800621a:	19db      	adds	r3, r3, r7
 800621c:	4a77      	ldr	r2, [pc, #476]	@ (80063fc <ParseBuffer+0x2b8>)
 800621e:	6811      	ldr	r1, [r2, #0]
 8006220:	6019      	str	r1, [r3, #0]
 8006222:	8892      	ldrh	r2, [r2, #4]
 8006224:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8006226:	4b76      	ldr	r3, [pc, #472]	@ (8006400 <ParseBuffer+0x2bc>)
 8006228:	195b      	adds	r3, r3, r5
 800622a:	19db      	adds	r3, r3, r7
 800622c:	4a75      	ldr	r2, [pc, #468]	@ (8006404 <ParseBuffer+0x2c0>)
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	2200      	movs	r2, #0
 8006232:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8006234:	4b74      	ldr	r3, [pc, #464]	@ (8006408 <ParseBuffer+0x2c4>)
 8006236:	195b      	adds	r3, r3, r5
 8006238:	19db      	adds	r3, r3, r7
 800623a:	4a74      	ldr	r2, [pc, #464]	@ (800640c <ParseBuffer+0x2c8>)
 800623c:	6811      	ldr	r1, [r2, #0]
 800623e:	6019      	str	r1, [r3, #0]
 8006240:	8892      	ldrh	r2, [r2, #4]
 8006242:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8006244:	4b72      	ldr	r3, [pc, #456]	@ (8006410 <ParseBuffer+0x2cc>)
 8006246:	195b      	adds	r3, r3, r5
 8006248:	19db      	adds	r3, r3, r7
 800624a:	223e      	movs	r2, #62	@ 0x3e
 800624c:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 800624e:	4b71      	ldr	r3, [pc, #452]	@ (8006414 <ParseBuffer+0x2d0>)
 8006250:	195b      	adds	r3, r3, r5
 8006252:	19db      	adds	r3, r3, r7
 8006254:	4a70      	ldr	r2, [pc, #448]	@ (8006418 <ParseBuffer+0x2d4>)
 8006256:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006258:	c313      	stmia	r3!, {r0, r1, r4}
 800625a:	8811      	ldrh	r1, [r2, #0]
 800625c:	8019      	strh	r1, [r3, #0]
 800625e:	7892      	ldrb	r2, [r2, #2]
 8006260:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8006262:	4b6e      	ldr	r3, [pc, #440]	@ (800641c <ParseBuffer+0x2d8>)
 8006264:	195b      	adds	r3, r3, r5
 8006266:	19db      	adds	r3, r3, r7
 8006268:	4a6d      	ldr	r2, [pc, #436]	@ (8006420 <ParseBuffer+0x2dc>)
 800626a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800626c:	c313      	stmia	r3!, {r0, r1, r4}
 800626e:	8812      	ldrh	r2, [r2, #0]
 8006270:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8006272:	4b5c      	ldr	r3, [pc, #368]	@ (80063e4 <ParseBuffer+0x2a0>)
 8006274:	195b      	adds	r3, r3, r5
 8006276:	19db      	adds	r3, r3, r7
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 800627e:	2344      	movs	r3, #68	@ 0x44
 8006280:	18fa      	adds	r2, r7, r3
 8006282:	2348      	movs	r3, #72	@ 0x48
 8006284:	18fb      	adds	r3, r7, r3
 8006286:	0011      	movs	r1, r2
 8006288:	0018      	movs	r0, r3
 800628a:	f01f fb8e 	bl	80259aa <strstr>
 800628e:	0003      	movs	r3, r0
 8006290:	19ba      	adds	r2, r7, r6
 8006292:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8006294:	4b53      	ldr	r3, [pc, #332]	@ (80063e4 <ParseBuffer+0x2a0>)
 8006296:	22b0      	movs	r2, #176	@ 0xb0
 8006298:	0052      	lsls	r2, r2, #1
 800629a:	189b      	adds	r3, r3, r2
 800629c:	19db      	adds	r3, r3, r7
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d10c      	bne.n	80062be <ParseBuffer+0x17a>
    ParsePoint = strstr(tempBuf, ready);
 80062a4:	232c      	movs	r3, #44	@ 0x2c
 80062a6:	18fa      	adds	r2, r7, r3
 80062a8:	2348      	movs	r3, #72	@ 0x48
 80062aa:	18fb      	adds	r3, r7, r3
 80062ac:	0011      	movs	r1, r2
 80062ae:	0018      	movs	r0, r3
 80062b0:	f01f fb7b 	bl	80259aa <strstr>
 80062b4:	0003      	movs	r3, r0
 80062b6:	22ac      	movs	r2, #172	@ 0xac
 80062b8:	0052      	lsls	r2, r2, #1
 80062ba:	18ba      	adds	r2, r7, r2
 80062bc:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80062be:	4b49      	ldr	r3, [pc, #292]	@ (80063e4 <ParseBuffer+0x2a0>)
 80062c0:	22b0      	movs	r2, #176	@ 0xb0
 80062c2:	0052      	lsls	r2, r2, #1
 80062c4:	189b      	adds	r3, r3, r2
 80062c6:	19db      	adds	r3, r3, r7
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d10c      	bne.n	80062e8 <ParseBuffer+0x1a4>
    ParsePoint = strstr(tempBuf, start);
 80062ce:	2328      	movs	r3, #40	@ 0x28
 80062d0:	18fa      	adds	r2, r7, r3
 80062d2:	2348      	movs	r3, #72	@ 0x48
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	0011      	movs	r1, r2
 80062d8:	0018      	movs	r0, r3
 80062da:	f01f fb66 	bl	80259aa <strstr>
 80062de:	0003      	movs	r3, r0
 80062e0:	22ac      	movs	r2, #172	@ 0xac
 80062e2:	0052      	lsls	r2, r2, #1
 80062e4:	18ba      	adds	r2, r7, r2
 80062e6:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80062e8:	4b3e      	ldr	r3, [pc, #248]	@ (80063e4 <ParseBuffer+0x2a0>)
 80062ea:	22b0      	movs	r2, #176	@ 0xb0
 80062ec:	0052      	lsls	r2, r2, #1
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	19db      	adds	r3, r3, r7
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b05      	cmp	r3, #5
 80062f6:	d10c      	bne.n	8006312 <ParseBuffer+0x1ce>
    ParsePoint = strstr(tempBuf, TIME);
 80062f8:	2308      	movs	r3, #8
 80062fa:	18fa      	adds	r2, r7, r3
 80062fc:	2348      	movs	r3, #72	@ 0x48
 80062fe:	18fb      	adds	r3, r7, r3
 8006300:	0011      	movs	r1, r2
 8006302:	0018      	movs	r0, r3
 8006304:	f01f fb51 	bl	80259aa <strstr>
 8006308:	0003      	movs	r3, r0
 800630a:	22ac      	movs	r2, #172	@ 0xac
 800630c:	0052      	lsls	r2, r2, #1
 800630e:	18ba      	adds	r2, r7, r2
 8006310:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8006312:	233c      	movs	r3, #60	@ 0x3c
 8006314:	18fa      	adds	r2, r7, r3
 8006316:	2448      	movs	r4, #72	@ 0x48
 8006318:	193b      	adds	r3, r7, r4
 800631a:	0011      	movs	r1, r2
 800631c:	0018      	movs	r0, r3
 800631e:	f01f fb44 	bl	80259aa <strstr>
 8006322:	0003      	movs	r3, r0
 8006324:	22aa      	movs	r2, #170	@ 0xaa
 8006326:	0052      	lsls	r2, r2, #1
 8006328:	18ba      	adds	r2, r7, r2
 800632a:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800632c:	2318      	movs	r3, #24
 800632e:	18fa      	adds	r2, r7, r3
 8006330:	193b      	adds	r3, r7, r4
 8006332:	0011      	movs	r1, r2
 8006334:	0018      	movs	r0, r3
 8006336:	f01f fb38 	bl	80259aa <strstr>
 800633a:	0003      	movs	r3, r0
 800633c:	22a8      	movs	r2, #168	@ 0xa8
 800633e:	0052      	lsls	r2, r2, #1
 8006340:	18ba      	adds	r2, r7, r2
 8006342:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8006344:	4a37      	ldr	r2, [pc, #220]	@ (8006424 <ParseBuffer+0x2e0>)
 8006346:	193b      	adds	r3, r7, r4
 8006348:	0011      	movs	r1, r2
 800634a:	0018      	movs	r0, r3
 800634c:	f01f fb2d 	bl	80259aa <strstr>
 8006350:	0003      	movs	r3, r0
 8006352:	22a6      	movs	r2, #166	@ 0xa6
 8006354:	0052      	lsls	r2, r2, #1
 8006356:	18ba      	adds	r2, r7, r2
 8006358:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800635a:	2334      	movs	r3, #52	@ 0x34
 800635c:	18fa      	adds	r2, r7, r3
 800635e:	193b      	adds	r3, r7, r4
 8006360:	0011      	movs	r1, r2
 8006362:	0018      	movs	r0, r3
 8006364:	f01f fb21 	bl	80259aa <strstr>
 8006368:	0003      	movs	r3, r0
 800636a:	22a4      	movs	r2, #164	@ 0xa4
 800636c:	0052      	lsls	r2, r2, #1
 800636e:	18ba      	adds	r2, r7, r2
 8006370:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8006372:	4b1b      	ldr	r3, [pc, #108]	@ (80063e0 <ParseBuffer+0x29c>)
 8006374:	21b0      	movs	r1, #176	@ 0xb0
 8006376:	0049      	lsls	r1, r1, #1
 8006378:	185b      	adds	r3, r3, r1
 800637a:	19db      	adds	r3, r3, r7
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d800      	bhi.n	8006384 <ParseBuffer+0x240>
 8006382:	e0be      	b.n	8006502 <ParseBuffer+0x3be>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8006384:	22ac      	movs	r2, #172	@ 0xac
 8006386:	0052      	lsls	r2, r2, #1
 8006388:	18bb      	adds	r3, r7, r2
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d051      	beq.n	8006434 <ParseBuffer+0x2f0>
 8006390:	18bb      	adds	r3, r7, r2
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b4f      	cmp	r3, #79	@ 0x4f
 8006398:	d14c      	bne.n	8006434 <ParseBuffer+0x2f0>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800639a:	2360      	movs	r3, #96	@ 0x60
 800639c:	33ff      	adds	r3, #255	@ 0xff
 800639e:	18fb      	adds	r3, r7, r3
 80063a0:	2200      	movs	r2, #0
 80063a2:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80063a4:	4b20      	ldr	r3, [pc, #128]	@ (8006428 <ParseBuffer+0x2e4>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b12      	cmp	r3, #18
 80063aa:	d143      	bne.n	8006434 <ParseBuffer+0x2f0>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80063ac:	4b0c      	ldr	r3, [pc, #48]	@ (80063e0 <ParseBuffer+0x29c>)
 80063ae:	185b      	adds	r3, r3, r1
 80063b0:	19db      	adds	r3, r3, r7
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	2b2b      	cmp	r3, #43	@ 0x2b
 80063b6:	d10b      	bne.n	80063d0 <ParseBuffer+0x28c>
 80063b8:	4b0b      	ldr	r3, [pc, #44]	@ (80063e8 <ParseBuffer+0x2a4>)
 80063ba:	185b      	adds	r3, r3, r1
 80063bc:	19db      	adds	r3, r3, r7
 80063be:	2221      	movs	r2, #33	@ 0x21
 80063c0:	5c9b      	ldrb	r3, [r3, r2]
 80063c2:	2b32      	cmp	r3, #50	@ 0x32
 80063c4:	d104      	bne.n	80063d0 <ParseBuffer+0x28c>
          ParseTime(tempBuf);
 80063c6:	193b      	adds	r3, r7, r4
 80063c8:	0018      	movs	r0, r3
 80063ca:	f003 f955 	bl	8009678 <ParseTime>
 80063ce:	e031      	b.n	8006434 <ParseBuffer+0x2f0>
        }
        else {
          Error("Error getting time");
 80063d0:	4a16      	ldr	r2, [pc, #88]	@ (800642c <ParseBuffer+0x2e8>)
 80063d2:	4b17      	ldr	r3, [pc, #92]	@ (8006430 <ParseBuffer+0x2ec>)
 80063d4:	0019      	movs	r1, r3
 80063d6:	2001      	movs	r0, #1
 80063d8:	f00c ffb8 	bl	801334c <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80063dc:	2306      	movs	r3, #6
 80063de:	e094      	b.n	800650a <ParseBuffer+0x3c6>
 80063e0:	fffffea2 	.word	0xfffffea2
 80063e4:	fffffea1 	.word	0xfffffea1
 80063e8:	fffffee8 	.word	0xfffffee8
 80063ec:	0802a96c 	.word	0x0802a96c
 80063f0:	fffffee4 	.word	0xfffffee4
 80063f4:	0802a998 	.word	0x0802a998
 80063f8:	fffffedc 	.word	0xfffffedc
 80063fc:	0802a99c 	.word	0x0802a99c
 8006400:	fffffed4 	.word	0xfffffed4
 8006404:	4c494146 	.word	0x4c494146
 8006408:	fffffecc 	.word	0xfffffecc
 800640c:	0802a9a4 	.word	0x0802a9a4
 8006410:	fffffec8 	.word	0xfffffec8
 8006414:	fffffeb8 	.word	0xfffffeb8
 8006418:	0802a9ac 	.word	0x0802a9ac
 800641c:	fffffea8 	.word	0xfffffea8
 8006420:	0802a9bc 	.word	0x0802a9bc
 8006424:	0802da28 	.word	0x0802da28
 8006428:	20000676 	.word	0x20000676
 800642c:	0802a984 	.word	0x0802a984
 8006430:	08029ddc 	.word	0x08029ddc
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8006434:	22ac      	movs	r2, #172	@ 0xac
 8006436:	0052      	lsls	r2, r2, #1
 8006438:	18bb      	adds	r3, r7, r2
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d009      	beq.n	8006454 <ParseBuffer+0x310>
 8006440:	18bb      	adds	r3, r7, r2
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b72      	cmp	r3, #114	@ 0x72
 8006448:	d104      	bne.n	8006454 <ParseBuffer+0x310>
      status = RECEIVE_STATUS_READY;
 800644a:	2360      	movs	r3, #96	@ 0x60
 800644c:	33ff      	adds	r3, #255	@ 0xff
 800644e:	18fb      	adds	r3, r7, r3
 8006450:	2202      	movs	r2, #2
 8006452:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8006454:	22ac      	movs	r2, #172	@ 0xac
 8006456:	0052      	lsls	r2, r2, #1
 8006458:	18bb      	adds	r3, r7, r2
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d009      	beq.n	8006474 <ParseBuffer+0x330>
 8006460:	18bb      	adds	r3, r7, r2
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b3e      	cmp	r3, #62	@ 0x3e
 8006468:	d104      	bne.n	8006474 <ParseBuffer+0x330>
      status = RECEIVE_STATUS_START;
 800646a:	2360      	movs	r3, #96	@ 0x60
 800646c:	33ff      	adds	r3, #255	@ 0xff
 800646e:	18fb      	adds	r3, r7, r3
 8006470:	2205      	movs	r2, #5
 8006472:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8006474:	22ac      	movs	r2, #172	@ 0xac
 8006476:	0052      	lsls	r2, r2, #1
 8006478:	18bb      	adds	r3, r7, r2
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <ParseBuffer+0x350>
 8006480:	18bb      	adds	r3, r7, r2
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b2b      	cmp	r3, #43	@ 0x2b
 8006488:	d104      	bne.n	8006494 <ParseBuffer+0x350>
      status = RECEIVE_STATUS_TIME;
 800648a:	2360      	movs	r3, #96	@ 0x60
 800648c:	33ff      	adds	r3, #255	@ 0xff
 800648e:	18fb      	adds	r3, r7, r3
 8006490:	220b      	movs	r2, #11
 8006492:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8006494:	22aa      	movs	r2, #170	@ 0xaa
 8006496:	0052      	lsls	r2, r2, #1
 8006498:	18bb      	adds	r3, r7, r2
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d004      	beq.n	80064aa <ParseBuffer+0x366>
 80064a0:	18bb      	adds	r3, r7, r2
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b45      	cmp	r3, #69	@ 0x45
 80064a8:	d00a      	beq.n	80064c0 <ParseBuffer+0x37c>
 80064aa:	22a4      	movs	r2, #164	@ 0xa4
 80064ac:	0052      	lsls	r2, r2, #1
 80064ae:	18bb      	adds	r3, r7, r2
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <ParseBuffer+0x386>
 80064b6:	18bb      	adds	r3, r7, r2
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b46      	cmp	r3, #70	@ 0x46
 80064be:	d104      	bne.n	80064ca <ParseBuffer+0x386>
      status = RECEIVE_STATUS_ERROR;
 80064c0:	2360      	movs	r3, #96	@ 0x60
 80064c2:	33ff      	adds	r3, #255	@ 0xff
 80064c4:	18fb      	adds	r3, r7, r3
 80064c6:	2201      	movs	r2, #1
 80064c8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80064ca:	22a8      	movs	r2, #168	@ 0xa8
 80064cc:	0052      	lsls	r2, r2, #1
 80064ce:	18bb      	adds	r3, r7, r2
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <ParseBuffer+0x3a2>
 80064d6:	18bb      	adds	r3, r7, r2
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b57      	cmp	r3, #87	@ 0x57
 80064de:	d102      	bne.n	80064e6 <ParseBuffer+0x3a2>
      ConnectionMade = true;
 80064e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006514 <ParseBuffer+0x3d0>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80064e6:	22a6      	movs	r2, #166	@ 0xa6
 80064e8:	0052      	lsls	r2, r2, #1
 80064ea:	18bb      	adds	r3, r7, r2
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d007      	beq.n	8006502 <ParseBuffer+0x3be>
 80064f2:	18bb      	adds	r3, r7, r2
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b32      	cmp	r3, #50	@ 0x32
 80064fa:	d102      	bne.n	8006502 <ParseBuffer+0x3be>
      beurs = true;
 80064fc:	4b06      	ldr	r3, [pc, #24]	@ (8006518 <ParseBuffer+0x3d4>)
 80064fe:	2201      	movs	r2, #1
 8006500:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8006502:	2360      	movs	r3, #96	@ 0x60
 8006504:	33ff      	adds	r3, #255	@ 0xff
 8006506:	18fb      	adds	r3, r7, r3
 8006508:	781b      	ldrb	r3, [r3, #0]

}
 800650a:	0018      	movs	r0, r3
 800650c:	46bd      	mov	sp, r7
 800650e:	b059      	add	sp, #356	@ 0x164
 8006510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	200005a4 	.word	0x200005a4
 8006518:	200005a6 	.word	0x200005a6

0800651c <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8006522:	4b0b      	ldr	r3, [pc, #44]	@ (8006550 <PollAwake+0x34>)
 8006524:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	0018      	movs	r0, r3
 800652a:	f7f9 fe1f 	bl	800016c <strlen>
 800652e:	0003      	movs	r3, r0
 8006530:	b29a      	uxth	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	0011      	movs	r1, r2
 8006536:	0018      	movs	r0, r3
 8006538:	f7fe fc88 	bl	8004e4c <ESP_Send>
 800653c:	1e03      	subs	r3, r0, #0
 800653e:	d001      	beq.n	8006544 <PollAwake+0x28>
    return true;
 8006540:	2301      	movs	r3, #1
 8006542:	e000      	b.n	8006546 <PollAwake+0x2a>
  }
  else{
    return false;
 8006544:	2300      	movs	r3, #0
  }
}
 8006546:	0018      	movs	r0, r3
 8006548:	46bd      	mov	sp, r7
 800654a:	b002      	add	sp, #8
 800654c:	bd80      	pop	{r7, pc}
 800654e:	46c0      	nop			@ (mov r8, r8)
 8006550:	0802a9cc 	.word	0x0802a9cc

08006554 <RFPower>:

bool RFPower(){
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800655a:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <RFPower+0x34>)
 800655c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	0018      	movs	r0, r3
 8006562:	f7f9 fe03 	bl	800016c <strlen>
 8006566:	0003      	movs	r3, r0
 8006568:	b29a      	uxth	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	0011      	movs	r1, r2
 800656e:	0018      	movs	r0, r3
 8006570:	f7fe fc6c 	bl	8004e4c <ESP_Send>
 8006574:	1e03      	subs	r3, r0, #0
 8006576:	d001      	beq.n	800657c <RFPower+0x28>
    return true;
 8006578:	2301      	movs	r3, #1
 800657a:	e000      	b.n	800657e <RFPower+0x2a>
  }
  else{
    return false;
 800657c:	2300      	movs	r3, #0
  }
}
 800657e:	0018      	movs	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	b002      	add	sp, #8
 8006584:	bd80      	pop	{r7, pc}
 8006586:	46c0      	nop			@ (mov r8, r8)
 8006588:	0802a9d4 	.word	0x0802a9d4

0800658c <CheckRFPower>:

bool CheckRFPower(){
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8006592:	4b0b      	ldr	r3, [pc, #44]	@ (80065c0 <CheckRFPower+0x34>)
 8006594:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	0018      	movs	r0, r3
 800659a:	f7f9 fde7 	bl	800016c <strlen>
 800659e:	0003      	movs	r3, r0
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	0011      	movs	r1, r2
 80065a6:	0018      	movs	r0, r3
 80065a8:	f7fe fc50 	bl	8004e4c <ESP_Send>
 80065ac:	1e03      	subs	r3, r0, #0
 80065ae:	d001      	beq.n	80065b4 <CheckRFPower+0x28>
    return true;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e000      	b.n	80065b6 <CheckRFPower+0x2a>
  }
  else{
    return false;
 80065b4:	2300      	movs	r3, #0
  }
}
 80065b6:	0018      	movs	r0, r3
 80065b8:	46bd      	mov	sp, r7
 80065ba:	b002      	add	sp, #8
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	46c0      	nop			@ (mov r8, r8)
 80065c0:	0802a9e4 	.word	0x0802a9e4

080065c4 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80065ca:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <ATRestore+0x34>)
 80065cc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7f9 fdcb 	bl	800016c <strlen>
 80065d6:	0003      	movs	r3, r0
 80065d8:	b29a      	uxth	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	0011      	movs	r1, r2
 80065de:	0018      	movs	r0, r3
 80065e0:	f7fe fc34 	bl	8004e4c <ESP_Send>
 80065e4:	1e03      	subs	r3, r0, #0
 80065e6:	d001      	beq.n	80065ec <ATRestore+0x28>
    return true;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e000      	b.n	80065ee <ATRestore+0x2a>
  }
  else{
    return false;
 80065ec:	2300      	movs	r3, #0
  }
}
 80065ee:	0018      	movs	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b002      	add	sp, #8
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	0802a9f4 	.word	0x0802a9f4

080065fc <CWINIT>:

bool CWINIT(){
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8006602:	4b0b      	ldr	r3, [pc, #44]	@ (8006630 <CWINIT+0x34>)
 8006604:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	0018      	movs	r0, r3
 800660a:	f7f9 fdaf 	bl	800016c <strlen>
 800660e:	0003      	movs	r3, r0
 8006610:	b29a      	uxth	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	0011      	movs	r1, r2
 8006616:	0018      	movs	r0, r3
 8006618:	f7fe fc18 	bl	8004e4c <ESP_Send>
 800661c:	1e03      	subs	r3, r0, #0
 800661e:	d001      	beq.n	8006624 <CWINIT+0x28>
    return true;
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <CWINIT+0x2a>
  }
  else{
    return false;
 8006624:	2300      	movs	r3, #0
  }
}
 8006626:	0018      	movs	r0, r3
 8006628:	46bd      	mov	sp, r7
 800662a:	b002      	add	sp, #8
 800662c:	bd80      	pop	{r7, pc}
 800662e:	46c0      	nop			@ (mov r8, r8)
 8006630:	0802aa04 	.word	0x0802aa04

08006634 <CWMODE1>:

bool CWMODE1(){
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800663a:	4b0b      	ldr	r3, [pc, #44]	@ (8006668 <CWMODE1+0x34>)
 800663c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	0018      	movs	r0, r3
 8006642:	f7f9 fd93 	bl	800016c <strlen>
 8006646:	0003      	movs	r3, r0
 8006648:	b29a      	uxth	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	0011      	movs	r1, r2
 800664e:	0018      	movs	r0, r3
 8006650:	f7fe fbfc 	bl	8004e4c <ESP_Send>
 8006654:	1e03      	subs	r3, r0, #0
 8006656:	d001      	beq.n	800665c <CWMODE1+0x28>
    return true;
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <CWMODE1+0x2a>
  }
  else{
    return false;
 800665c:	2300      	movs	r3, #0
  }
}
 800665e:	0018      	movs	r0, r3
 8006660:	46bd      	mov	sp, r7
 8006662:	b002      	add	sp, #8
 8006664:	bd80      	pop	{r7, pc}
 8006666:	46c0      	nop			@ (mov r8, r8)
 8006668:	0802aa14 	.word	0x0802aa14

0800666c <CWMODE2>:

bool CWMODE2(){
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8006672:	4b0b      	ldr	r3, [pc, #44]	@ (80066a0 <CWMODE2+0x34>)
 8006674:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	0018      	movs	r0, r3
 800667a:	f7f9 fd77 	bl	800016c <strlen>
 800667e:	0003      	movs	r3, r0
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	0011      	movs	r1, r2
 8006686:	0018      	movs	r0, r3
 8006688:	f7fe fbe0 	bl	8004e4c <ESP_Send>
 800668c:	1e03      	subs	r3, r0, #0
 800668e:	d001      	beq.n	8006694 <CWMODE2+0x28>
    return true;
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <CWMODE2+0x2a>
  }
  else{
    return false;
 8006694:	2300      	movs	r3, #0
  }
}
 8006696:	0018      	movs	r0, r3
 8006698:	46bd      	mov	sp, r7
 800669a:	b002      	add	sp, #8
 800669c:	bd80      	pop	{r7, pc}
 800669e:	46c0      	nop			@ (mov r8, r8)
 80066a0:	0802aa24 	.word	0x0802aa24

080066a4 <CWAUTOCONN>:

bool CWAUTOCONN(){
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80066aa:	4b0b      	ldr	r3, [pc, #44]	@ (80066d8 <CWAUTOCONN+0x34>)
 80066ac:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	0018      	movs	r0, r3
 80066b2:	f7f9 fd5b 	bl	800016c <strlen>
 80066b6:	0003      	movs	r3, r0
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	0011      	movs	r1, r2
 80066be:	0018      	movs	r0, r3
 80066c0:	f7fe fbc4 	bl	8004e4c <ESP_Send>
 80066c4:	1e03      	subs	r3, r0, #0
 80066c6:	d001      	beq.n	80066cc <CWAUTOCONN+0x28>
    return true;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e000      	b.n	80066ce <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80066cc:	2300      	movs	r3, #0
  }
}
 80066ce:	0018      	movs	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	b002      	add	sp, #8
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	46c0      	nop			@ (mov r8, r8)
 80066d8:	0802aa34 	.word	0x0802aa34

080066dc <CWJAP>:

bool CWJAP(){
 80066dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066de:	46c6      	mov	lr, r8
 80066e0:	b500      	push	{lr}
 80066e2:	b0a2      	sub	sp, #136	@ 0x88
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	466b      	mov	r3, sp
 80066e8:	4698      	mov	r8, r3
  beursTest = true;
 80066ea:	4b39      	ldr	r3, [pc, #228]	@ (80067d0 <CWJAP+0xf4>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80066f0:	2618      	movs	r6, #24
 80066f2:	19bb      	adds	r3, r7, r6
 80066f4:	2264      	movs	r2, #100	@ 0x64
 80066f6:	2100      	movs	r1, #0
 80066f8:	0018      	movs	r0, r3
 80066fa:	f01f f91b 	bl	8025934 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80066fe:	4b35      	ldr	r3, [pc, #212]	@ (80067d4 <CWJAP+0xf8>)
 8006700:	4a35      	ldr	r2, [pc, #212]	@ (80067d8 <CWJAP+0xfc>)
 8006702:	4936      	ldr	r1, [pc, #216]	@ (80067dc <CWJAP+0x100>)
 8006704:	19b8      	adds	r0, r7, r6
 8006706:	f01e ffab 	bl	8025660 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800670a:	19bb      	adds	r3, r7, r6
 800670c:	0018      	movs	r0, r3
 800670e:	f7f9 fd2d 	bl	800016c <strlen>
 8006712:	0002      	movs	r2, r0
 8006714:	216f      	movs	r1, #111	@ 0x6f
 8006716:	0030      	movs	r0, r6
 8006718:	180b      	adds	r3, r1, r0
 800671a:	19db      	adds	r3, r3, r7
 800671c:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800671e:	180b      	adds	r3, r1, r0
 8006720:	19db      	adds	r3, r3, r7
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	3301      	adds	r3, #1
 8006726:	1e5a      	subs	r2, r3, #1
 8006728:	2180      	movs	r1, #128	@ 0x80
 800672a:	1879      	adds	r1, r7, r1
 800672c:	600a      	str	r2, [r1, #0]
 800672e:	001a      	movs	r2, r3
 8006730:	60ba      	str	r2, [r7, #8]
 8006732:	2200      	movs	r2, #0
 8006734:	60fa      	str	r2, [r7, #12]
 8006736:	68b8      	ldr	r0, [r7, #8]
 8006738:	68f9      	ldr	r1, [r7, #12]
 800673a:	0002      	movs	r2, r0
 800673c:	0f52      	lsrs	r2, r2, #29
 800673e:	000e      	movs	r6, r1
 8006740:	00f6      	lsls	r6, r6, #3
 8006742:	617e      	str	r6, [r7, #20]
 8006744:	697e      	ldr	r6, [r7, #20]
 8006746:	4316      	orrs	r6, r2
 8006748:	617e      	str	r6, [r7, #20]
 800674a:	0002      	movs	r2, r0
 800674c:	00d2      	lsls	r2, r2, #3
 800674e:	613a      	str	r2, [r7, #16]
 8006750:	001a      	movs	r2, r3
 8006752:	603a      	str	r2, [r7, #0]
 8006754:	2200      	movs	r2, #0
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	6838      	ldr	r0, [r7, #0]
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	0002      	movs	r2, r0
 800675e:	0f52      	lsrs	r2, r2, #29
 8006760:	000e      	movs	r6, r1
 8006762:	00f5      	lsls	r5, r6, #3
 8006764:	4315      	orrs	r5, r2
 8006766:	0002      	movs	r2, r0
 8006768:	00d4      	lsls	r4, r2, #3
 800676a:	3307      	adds	r3, #7
 800676c:	08db      	lsrs	r3, r3, #3
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	466a      	mov	r2, sp
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	469d      	mov	sp, r3
 8006776:	466b      	mov	r3, sp
 8006778:	3300      	adds	r3, #0
 800677a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 800677c:	246f      	movs	r4, #111	@ 0x6f
 800677e:	2518      	movs	r5, #24
 8006780:	1963      	adds	r3, r4, r5
 8006782:	19db      	adds	r3, r3, r7
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	3301      	adds	r3, #1
 8006788:	001a      	movs	r2, r3
 800678a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800678c:	2100      	movs	r1, #0
 800678e:	0018      	movs	r0, r3
 8006790:	f01f f8d0 	bl	8025934 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8006794:	1963      	adds	r3, r4, r5
 8006796:	19db      	adds	r3, r3, r7
 8006798:	781a      	ldrb	r2, [r3, #0]
 800679a:	1979      	adds	r1, r7, r5
 800679c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800679e:	0018      	movs	r0, r3
 80067a0:	f01f f8ef 	bl	8025982 <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80067a4:	1963      	adds	r3, r4, r5
 80067a6:	19db      	adds	r3, r3, r7
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067ae:	0011      	movs	r1, r2
 80067b0:	0018      	movs	r0, r3
 80067b2:	f7fe fb4b 	bl	8004e4c <ESP_Send>
 80067b6:	1e03      	subs	r3, r0, #0
 80067b8:	d001      	beq.n	80067be <CWJAP+0xe2>
    return true;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e000      	b.n	80067c0 <CWJAP+0xe4>
  }
  else{
    return false;
 80067be:	2300      	movs	r3, #0
 80067c0:	46c5      	mov	sp, r8
  }
}
 80067c2:	0018      	movs	r0, r3
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b022      	add	sp, #136	@ 0x88
 80067c8:	bc80      	pop	{r7}
 80067ca:	46b8      	mov	r8, r7
 80067cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ce:	46c0      	nop			@ (mov r8, r8)
 80067d0:	200005a5 	.word	0x200005a5
 80067d4:	0802da34 	.word	0x0802da34
 80067d8:	0802da28 	.word	0x0802da28
 80067dc:	0802aa48 	.word	0x0802aa48

080067e0 <CWMODE3>:

bool CWMODE3(){
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80067e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006814 <CWMODE3+0x34>)
 80067e8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7f9 fcbd 	bl	800016c <strlen>
 80067f2:	0003      	movs	r3, r0
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	0011      	movs	r1, r2
 80067fa:	0018      	movs	r0, r3
 80067fc:	f7fe fb26 	bl	8004e4c <ESP_Send>
 8006800:	1e03      	subs	r3, r0, #0
 8006802:	d001      	beq.n	8006808 <CWMODE3+0x28>
    return true;
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <CWMODE3+0x2a>
  }
  else{
    return false;
 8006808:	2300      	movs	r3, #0
  }
}
 800680a:	0018      	movs	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	b002      	add	sp, #8
 8006810:	bd80      	pop	{r7, pc}
 8006812:	46c0      	nop			@ (mov r8, r8)
 8006814:	0802aa60 	.word	0x0802aa60

08006818 <CWSTATE>:

bool CWSTATE(){
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 800681e:	4b0b      	ldr	r3, [pc, #44]	@ (800684c <CWSTATE+0x34>)
 8006820:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0018      	movs	r0, r3
 8006826:	f7f9 fca1 	bl	800016c <strlen>
 800682a:	0003      	movs	r3, r0
 800682c:	b29a      	uxth	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	0011      	movs	r1, r2
 8006832:	0018      	movs	r0, r3
 8006834:	f7fe fb0a 	bl	8004e4c <ESP_Send>
 8006838:	1e03      	subs	r3, r0, #0
 800683a:	d001      	beq.n	8006840 <CWSTATE+0x28>
    return true;
 800683c:	2301      	movs	r3, #1
 800683e:	e000      	b.n	8006842 <CWSTATE+0x2a>
  }
  else{
    return false;
 8006840:	2300      	movs	r3, #0
  }
}
 8006842:	0018      	movs	r0, r3
 8006844:	46bd      	mov	sp, r7
 8006846:	b002      	add	sp, #8
 8006848:	bd80      	pop	{r7, pc}
 800684a:	46c0      	nop			@ (mov r8, r8)
 800684c:	0802aa70 	.word	0x0802aa70

08006850 <CWSAP>:

bool CWSAP(){
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8006856:	4b0b      	ldr	r3, [pc, #44]	@ (8006884 <CWSAP+0x34>)
 8006858:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	0018      	movs	r0, r3
 800685e:	f7f9 fc85 	bl	800016c <strlen>
 8006862:	0003      	movs	r3, r0
 8006864:	b29a      	uxth	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	0011      	movs	r1, r2
 800686a:	0018      	movs	r0, r3
 800686c:	f7fe faee 	bl	8004e4c <ESP_Send>
 8006870:	1e03      	subs	r3, r0, #0
 8006872:	d001      	beq.n	8006878 <CWSAP+0x28>
    return true;
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <CWSAP+0x2a>
  }
  else{
    return false;
 8006878:	2300      	movs	r3, #0
  }
}
 800687a:	0018      	movs	r0, r3
 800687c:	46bd      	mov	sp, r7
 800687e:	b002      	add	sp, #8
 8006880:	bd80      	pop	{r7, pc}
 8006882:	46c0      	nop			@ (mov r8, r8)
 8006884:	0802aa80 	.word	0x0802aa80

08006888 <CIPMUX>:

bool CIPMUX(){
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800688e:	4b0b      	ldr	r3, [pc, #44]	@ (80068bc <CIPMUX+0x34>)
 8006890:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	0018      	movs	r0, r3
 8006896:	f7f9 fc69 	bl	800016c <strlen>
 800689a:	0003      	movs	r3, r0
 800689c:	b29a      	uxth	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	0011      	movs	r1, r2
 80068a2:	0018      	movs	r0, r3
 80068a4:	f7fe fad2 	bl	8004e4c <ESP_Send>
 80068a8:	1e03      	subs	r3, r0, #0
 80068aa:	d001      	beq.n	80068b0 <CIPMUX+0x28>
    return true;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <CIPMUX+0x2a>
  }
  else{
    return false;
 80068b0:	2300      	movs	r3, #0
  }
}
 80068b2:	0018      	movs	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	b002      	add	sp, #8
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	46c0      	nop			@ (mov r8, r8)
 80068bc:	0802aaa4 	.word	0x0802aaa4

080068c0 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80068c6:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <WEBSERVER+0x34>)
 80068c8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	0018      	movs	r0, r3
 80068ce:	f7f9 fc4d 	bl	800016c <strlen>
 80068d2:	0003      	movs	r3, r0
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	0011      	movs	r1, r2
 80068da:	0018      	movs	r0, r3
 80068dc:	f7fe fab6 	bl	8004e4c <ESP_Send>
 80068e0:	1e03      	subs	r3, r0, #0
 80068e2:	d001      	beq.n	80068e8 <WEBSERVER+0x28>
    return true;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <WEBSERVER+0x2a>
  }
  else{
    return false;
 80068e8:	2300      	movs	r3, #0
  }
}
 80068ea:	0018      	movs	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b002      	add	sp, #8
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	0802aab4 	.word	0x0802aab4

080068f8 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 80068fe:	1cfb      	adds	r3, r7, #3
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8006904:	4b26      	ldr	r3, [pc, #152]	@ (80069a0 <HTTPCPOST+0xa8>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	1dbc      	adds	r4, r7, #6
 800690a:	1cf9      	adds	r1, r7, #3
 800690c:	2200      	movs	r2, #0
 800690e:	0018      	movs	r0, r3
 8006910:	f7fe fca0 	bl	8005254 <CreateMessage>
 8006914:	0003      	movs	r3, r0
 8006916:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8006918:	4b21      	ldr	r3, [pc, #132]	@ (80069a0 <HTTPCPOST+0xa8>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8006920:	1dbb      	adds	r3, r7, #6
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	4a1f      	ldr	r2, [pc, #124]	@ (80069a4 <HTTPCPOST+0xac>)
 8006926:	4920      	ldr	r1, [pc, #128]	@ (80069a8 <HTTPCPOST+0xb0>)
 8006928:	4820      	ldr	r0, [pc, #128]	@ (80069ac <HTTPCPOST+0xb4>)
 800692a:	f01e fe99 	bl	8025660 <siprintf>
 800692e:	e015      	b.n	800695c <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006930:	4b1f      	ldr	r3, [pc, #124]	@ (80069b0 <HTTPCPOST+0xb8>)
 8006932:	4820      	ldr	r0, [pc, #128]	@ (80069b4 <HTTPCPOST+0xbc>)
 8006934:	220c      	movs	r2, #12
 8006936:	0019      	movs	r1, r3
 8006938:	f004 ff9c 	bl	800b874 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 800693c:	4a1c      	ldr	r2, [pc, #112]	@ (80069b0 <HTTPCPOST+0xb8>)
 800693e:	4b1e      	ldr	r3, [pc, #120]	@ (80069b8 <HTTPCPOST+0xc0>)
 8006940:	0011      	movs	r1, r2
 8006942:	0018      	movs	r0, r3
 8006944:	f7fe fc62 	bl	800520c <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8006948:	1dbb      	adds	r3, r7, #6
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	4c1a      	ldr	r4, [pc, #104]	@ (80069b8 <HTTPCPOST+0xc0>)
 800694e:	4a1b      	ldr	r2, [pc, #108]	@ (80069bc <HTTPCPOST+0xc4>)
 8006950:	491b      	ldr	r1, [pc, #108]	@ (80069c0 <HTTPCPOST+0xc8>)
 8006952:	4816      	ldr	r0, [pc, #88]	@ (80069ac <HTTPCPOST+0xb4>)
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	0023      	movs	r3, r4
 8006958:	f01e fe82 	bl	8025660 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 800695c:	4b13      	ldr	r3, [pc, #76]	@ (80069ac <HTTPCPOST+0xb4>)
 800695e:	0018      	movs	r0, r3
 8006960:	f7f9 fc04 	bl	800016c <strlen>
 8006964:	0002      	movs	r2, r0
 8006966:	1d3b      	adds	r3, r7, #4
 8006968:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	8818      	ldrh	r0, [r3, #0]
 800696e:	1cfb      	adds	r3, r7, #3
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	4a14      	ldr	r2, [pc, #80]	@ (80069c4 <HTTPCPOST+0xcc>)
 8006974:	4914      	ldr	r1, [pc, #80]	@ (80069c8 <HTTPCPOST+0xd0>)
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	0003      	movs	r3, r0
 800697a:	2003      	movs	r0, #3
 800697c:	f00c fce6 	bl	801334c <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8006980:	1d3b      	adds	r3, r7, #4
 8006982:	881a      	ldrh	r2, [r3, #0]
 8006984:	4b09      	ldr	r3, [pc, #36]	@ (80069ac <HTTPCPOST+0xb4>)
 8006986:	0011      	movs	r1, r2
 8006988:	0018      	movs	r0, r3
 800698a:	f7fe fa5f 	bl	8004e4c <ESP_Send>
 800698e:	1e03      	subs	r3, r0, #0
 8006990:	d001      	beq.n	8006996 <HTTPCPOST+0x9e>
    return true;
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8006996:	2300      	movs	r3, #0
  }
}
 8006998:	0018      	movs	r0, r3
 800699a:	46bd      	mov	sp, r7
 800699c:	b003      	add	sp, #12
 800699e:	bd90      	pop	{r4, r7, pc}
 80069a0:	200005a6 	.word	0x200005a6
 80069a4:	0802da50 	.word	0x0802da50
 80069a8:	0802aacc 	.word	0x0802aacc
 80069ac:	200005cc 	.word	0x200005cc
 80069b0:	20000764 	.word	0x20000764
 80069b4:	08080000 	.word	0x08080000
 80069b8:	20000770 	.word	0x20000770
 80069bc:	0802da8c 	.word	0x0802da8c
 80069c0:	0802ab04 	.word	0x0802ab04
 80069c4:	0802ab44 	.word	0x0802ab44
 80069c8:	08029db8 	.word	0x08029db8

080069cc <SENDDATA>:

bool SENDDATA(){
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af02      	add	r7, sp, #8
  bool result = false;
 80069d2:	1dfb      	adds	r3, r7, #7
 80069d4:	2200      	movs	r2, #0
 80069d6:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 80069d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006a14 <SENDDATA+0x48>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	1df9      	adds	r1, r7, #7
 80069de:	2201      	movs	r2, #1
 80069e0:	0018      	movs	r0, r3
 80069e2:	f7fe fc37 	bl	8005254 <CreateMessage>
 80069e6:	0003      	movs	r3, r0
 80069e8:	001a      	movs	r2, r3
 80069ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006a18 <SENDDATA+0x4c>)
 80069ec:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 80069ee:	1dfb      	adds	r3, r7, #7
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	0018      	movs	r0, r3
 80069f4:	4b08      	ldr	r3, [pc, #32]	@ (8006a18 <SENDDATA+0x4c>)
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	4a08      	ldr	r2, [pc, #32]	@ (8006a1c <SENDDATA+0x50>)
 80069fa:	4909      	ldr	r1, [pc, #36]	@ (8006a20 <SENDDATA+0x54>)
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	0003      	movs	r3, r0
 8006a00:	2003      	movs	r0, #3
 8006a02:	f00c fca3 	bl	801334c <CreateLine>
  return result;
 8006a06:	1dfb      	adds	r3, r7, #7
 8006a08:	781b      	ldrb	r3, [r3, #0]
}
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	b002      	add	sp, #8
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	46c0      	nop			@ (mov r8, r8)
 8006a14:	200005a6 	.word	0x200005a6
 8006a18:	200005c0 	.word	0x200005c0
 8006a1c:	0802aba0 	.word	0x0802aba0
 8006a20:	08029db8 	.word	0x08029db8

08006a24 <SLEEP>:

bool SLEEP(){
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a58 <SLEEP+0x34>)
 8006a2c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	0018      	movs	r0, r3
 8006a32:	f7f9 fb9b 	bl	800016c <strlen>
 8006a36:	0003      	movs	r3, r0
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	0011      	movs	r1, r2
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f7fe fa04 	bl	8004e4c <ESP_Send>
 8006a44:	1e03      	subs	r3, r0, #0
 8006a46:	d001      	beq.n	8006a4c <SLEEP+0x28>
    return true;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <SLEEP+0x2a>
  }
  else{
    return false;
 8006a4c:	2300      	movs	r3, #0
  }
}
 8006a4e:	0018      	movs	r0, r3
 8006a50:	46bd      	mov	sp, r7
 8006a52:	b002      	add	sp, #8
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	46c0      	nop			@ (mov r8, r8)
 8006a58:	0802abdc 	.word	0x0802abdc

08006a5c <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006a62:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <CIPSNTPCFG+0x3c>)
 8006a64:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f7f9 fb7f 	bl	800016c <strlen>
 8006a6e:	0003      	movs	r3, r0
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	0011      	movs	r1, r2
 8006a76:	0018      	movs	r0, r3
 8006a78:	f7fe f9e8 	bl	8004e4c <ESP_Send>
 8006a7c:	1e03      	subs	r3, r0, #0
 8006a7e:	d006      	beq.n	8006a8e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006a80:	23fa      	movs	r3, #250	@ 0xfa
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	0018      	movs	r0, r3
 8006a86:	f00d f9ab 	bl	8013de0 <HAL_Delay>
    return true;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006a8e:	2300      	movs	r3, #0
  }
}
 8006a90:	0018      	movs	r0, r3
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b002      	add	sp, #8
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	0802abec 	.word	0x0802abec

08006a9c <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <CIPSNTPTIME+0x34>)
 8006aa4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	f7f9 fb5f 	bl	800016c <strlen>
 8006aae:	0003      	movs	r3, r0
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	0011      	movs	r1, r2
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	f7fe f9c8 	bl	8004e4c <ESP_Send>
 8006abc:	1e03      	subs	r3, r0, #0
 8006abe:	d001      	beq.n	8006ac4 <CIPSNTPTIME+0x28>
    return true;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006ac4:	2300      	movs	r3, #0
  }
}
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	b002      	add	sp, #8
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	46c0      	nop			@ (mov r8, r8)
 8006ad0:	0802ac3c 	.word	0x0802ac3c

08006ad4 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006ada:	4b0b      	ldr	r3, [pc, #44]	@ (8006b08 <CIPSNTPINTV+0x34>)
 8006adc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f7f9 fb43 	bl	800016c <strlen>
 8006ae6:	0003      	movs	r3, r0
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	0011      	movs	r1, r2
 8006aee:	0018      	movs	r0, r3
 8006af0:	f7fe f9ac 	bl	8004e4c <ESP_Send>
 8006af4:	1e03      	subs	r3, r0, #0
 8006af6:	d001      	beq.n	8006afc <CIPSNTPINTV+0x28>
    return true;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006afc:	2300      	movs	r3, #0
  }
}
 8006afe:	0018      	movs	r0, r3
 8006b00:	46bd      	mov	sp, r7
 8006b02:	b002      	add	sp, #8
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	46c0      	nop			@ (mov r8, r8)
 8006b08:	0802ac50 	.word	0x0802ac50

08006b0c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006b0c:	b5b0      	push	{r4, r5, r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	0002      	movs	r2, r0
 8006b14:	1dfb      	adds	r3, r7, #7
 8006b16:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006b18:	4b6c      	ldr	r3, [pc, #432]	@ (8006ccc <DMA_ProcessBuffer+0x1c0>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	200e      	movs	r0, #14
 8006b22:	183b      	adds	r3, r7, r0
 8006b24:	2180      	movs	r1, #128	@ 0x80
 8006b26:	0049      	lsls	r1, r1, #1
 8006b28:	1a8a      	subs	r2, r1, r2
 8006b2a:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006b2c:	230d      	movs	r3, #13
 8006b2e:	18fb      	adds	r3, r7, r3
 8006b30:	2203      	movs	r2, #3
 8006b32:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006b34:	183b      	adds	r3, r7, r0
 8006b36:	881a      	ldrh	r2, [r3, #0]
 8006b38:	2380      	movs	r3, #128	@ 0x80
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d903      	bls.n	8006b48 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006b40:	183b      	adds	r3, r7, r0
 8006b42:	2280      	movs	r2, #128	@ 0x80
 8006b44:	0052      	lsls	r2, r2, #1
 8006b46:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006b48:	4b61      	ldr	r3, [pc, #388]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	001a      	movs	r2, r3
 8006b50:	230e      	movs	r3, #14
 8006b52:	18fb      	adds	r3, r7, r3
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d131      	bne.n	8006bbe <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006b5a:	4b5e      	ldr	r3, [pc, #376]	@ (8006cd4 <DMA_ProcessBuffer+0x1c8>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b14      	cmp	r3, #20
 8006b60:	d91b      	bls.n	8006b9a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006b62:	4b5c      	ldr	r3, [pc, #368]	@ (8006cd4 <DMA_ProcessBuffer+0x1c8>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006b68:	4b5b      	ldr	r3, [pc, #364]	@ (8006cd8 <DMA_ProcessBuffer+0x1cc>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d107      	bne.n	8006b80 <DMA_ProcessBuffer+0x74>
 8006b70:	4b5a      	ldr	r3, [pc, #360]	@ (8006cdc <DMA_ProcessBuffer+0x1d0>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006b78:	230d      	movs	r3, #13
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	2207      	movs	r2, #7
 8006b7e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006b80:	4b55      	ldr	r3, [pc, #340]	@ (8006cd8 <DMA_ProcessBuffer+0x1cc>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d103      	bne.n	8006b90 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006b88:	4b55      	ldr	r3, [pc, #340]	@ (8006ce0 <DMA_ProcessBuffer+0x1d4>)
 8006b8a:	220b      	movs	r2, #11
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e016      	b.n	8006bbe <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006b90:	230d      	movs	r3, #13
 8006b92:	18fb      	adds	r3, r7, r3
 8006b94:	2206      	movs	r2, #6
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	e011      	b.n	8006bbe <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006b9a:	4b4e      	ldr	r3, [pc, #312]	@ (8006cd4 <DMA_ProcessBuffer+0x1c8>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	4b4c      	ldr	r3, [pc, #304]	@ (8006cd4 <DMA_ProcessBuffer+0x1c8>)
 8006ba4:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006ba6:	f00d f911 	bl	8013dcc <HAL_GetTick>
 8006baa:	0003      	movs	r3, r0
 8006bac:	33f5      	adds	r3, #245	@ 0xf5
 8006bae:	33ff      	adds	r3, #255	@ 0xff
 8006bb0:	001a      	movs	r2, r3
 8006bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8006ce4 <DMA_ProcessBuffer+0x1d8>)
 8006bb4:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006bb6:	230d      	movs	r3, #13
 8006bb8:	18fb      	adds	r3, r7, r3
 8006bba:	2204      	movs	r2, #4
 8006bbc:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006bbe:	4b44      	ldr	r3, [pc, #272]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	001a      	movs	r2, r3
 8006bc6:	210e      	movs	r1, #14
 8006bc8:	187b      	adds	r3, r7, r1
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d100      	bne.n	8006bd2 <DMA_ProcessBuffer+0xc6>
 8006bd0:	e075      	b.n	8006cbe <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006bd2:	4b40      	ldr	r3, [pc, #256]	@ (8006cd4 <DMA_ProcessBuffer+0x1c8>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006bd8:	4b43      	ldr	r3, [pc, #268]	@ (8006ce8 <DMA_ProcessBuffer+0x1dc>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	4b3c      	ldr	r3, [pc, #240]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d109      	bne.n	8006bfc <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006be8:	187b      	adds	r3, r7, r1
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	4b3e      	ldr	r3, [pc, #248]	@ (8006ce8 <DMA_ProcessBuffer+0x1dc>)
 8006bf0:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006bf2:	230d      	movs	r3, #13
 8006bf4:	18fb      	adds	r3, r7, r3
 8006bf6:	220a      	movs	r2, #10
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	e060      	b.n	8006cbe <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8006ce8 <DMA_ProcessBuffer+0x1dc>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	001a      	movs	r2, r3
 8006c04:	210e      	movs	r1, #14
 8006c06:	187b      	adds	r3, r7, r1
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d009      	beq.n	8006c22 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006c0e:	187b      	adds	r3, r7, r1
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	4b34      	ldr	r3, [pc, #208]	@ (8006ce8 <DMA_ProcessBuffer+0x1dc>)
 8006c16:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006c18:	230d      	movs	r3, #13
 8006c1a:	18fb      	adds	r3, r7, r3
 8006c1c:	220a      	movs	r2, #10
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e04d      	b.n	8006cbe <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006c22:	4b2b      	ldr	r3, [pc, #172]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	001a      	movs	r2, r3
 8006c2a:	210e      	movs	r1, #14
 8006c2c:	187b      	adds	r3, r7, r1
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d917      	bls.n	8006c64 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006c34:	4b26      	ldr	r3, [pc, #152]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	001a      	movs	r2, r3
 8006c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8006cec <DMA_ProcessBuffer+0x1e0>)
 8006c3e:	18d0      	adds	r0, r2, r3
 8006c40:	4b23      	ldr	r3, [pc, #140]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	001a      	movs	r2, r3
 8006c48:	187b      	adds	r3, r7, r1
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	b299      	uxth	r1, r3
 8006c50:	230d      	movs	r3, #13
 8006c52:	18fc      	adds	r4, r7, r3
 8006c54:	1dfb      	adds	r3, r7, #7
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	001a      	movs	r2, r3
 8006c5a:	f7ff fa73 	bl	8006144 <ParseBuffer>
 8006c5e:	0003      	movs	r3, r0
 8006c60:	7023      	strb	r3, [r4, #0]
 8006c62:	e026      	b.n	8006cb2 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8006c64:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	001a      	movs	r2, r3
 8006c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8006cec <DMA_ProcessBuffer+0x1e0>)
 8006c6e:	18d0      	adds	r0, r2, r3
 8006c70:	4b17      	ldr	r3, [pc, #92]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	001a      	movs	r2, r3
 8006c78:	2380      	movs	r3, #128	@ 0x80
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	1a9b      	subs	r3, r3, r2
 8006c7e:	b299      	uxth	r1, r3
 8006c80:	250d      	movs	r5, #13
 8006c82:	197c      	adds	r4, r7, r5
 8006c84:	1dfb      	adds	r3, r7, #7
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	001a      	movs	r2, r3
 8006c8a:	f7ff fa5b 	bl	8006144 <ParseBuffer>
 8006c8e:	0003      	movs	r3, r0
 8006c90:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8006c92:	210e      	movs	r1, #14
 8006c94:	187b      	adds	r3, r7, r1
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8006c9c:	197c      	adds	r4, r7, r5
 8006c9e:	1dfb      	adds	r3, r7, #7
 8006ca0:	781a      	ldrb	r2, [r3, #0]
 8006ca2:	187b      	adds	r3, r7, r1
 8006ca4:	8819      	ldrh	r1, [r3, #0]
 8006ca6:	4b11      	ldr	r3, [pc, #68]	@ (8006cec <DMA_ProcessBuffer+0x1e0>)
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f7ff fa4b 	bl	8006144 <ParseBuffer>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8006cb2:	230e      	movs	r3, #14
 8006cb4:	18fb      	adds	r3, r7, r3
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	4b05      	ldr	r3, [pc, #20]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006cbc:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8006cbe:	230d      	movs	r3, #13
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	781b      	ldrb	r3, [r3, #0]
}
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b004      	add	sp, #16
 8006cca:	bdb0      	pop	{r4, r5, r7, pc}
 8006ccc:	20002168 	.word	0x20002168
 8006cd0:	20000789 	.word	0x20000789
 8006cd4:	20000674 	.word	0x20000674
 8006cd8:	20000676 	.word	0x20000676
 8006cdc:	20000001 	.word	0x20000001
 8006ce0:	2000002c 	.word	0x2000002c
 8006ce4:	2000066c 	.word	0x2000066c
 8006ce8:	2000078a 	.word	0x2000078a
 8006cec:	200004a0 	.word	0x200004a0

08006cf0 <clearDMABuffer>:

void clearDMABuffer(){
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8006cf4:	2380      	movs	r3, #128	@ 0x80
 8006cf6:	005a      	lsls	r2, r3, #1
 8006cf8:	4b03      	ldr	r3, [pc, #12]	@ (8006d08 <clearDMABuffer+0x18>)
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f01e fe19 	bl	8025934 <memset>
}
 8006d02:	46c0      	nop			@ (mov r8, r8)
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	200004a0 	.word	0x200004a0

08006d0c <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	0002      	movs	r2, r0
 8006d14:	1dfb      	adds	r3, r7, #7
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	1dbb      	adds	r3, r7, #6
 8006d1a:	1c0a      	adds	r2, r1, #0
 8006d1c:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8006d1e:	210f      	movs	r1, #15
 8006d20:	187b      	adds	r3, r7, r1
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8006d26:	1dbb      	adds	r3, r7, #6
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d105      	bne.n	8006d3a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8006d2e:	187b      	adds	r3, r7, r1
 8006d30:	1dfa      	adds	r2, r7, #7
 8006d32:	7812      	ldrb	r2, [r2, #0]
 8006d34:	4251      	negs	r1, r2
 8006d36:	414a      	adcs	r2, r1
 8006d38:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8006d3a:	1dbb      	adds	r3, r7, #6
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d107      	bne.n	8006d52 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8006d42:	230f      	movs	r3, #15
 8006d44:	18fb      	adds	r3, r7, r3
 8006d46:	1dfa      	adds	r2, r7, #7
 8006d48:	7812      	ldrb	r2, [r2, #0]
 8006d4a:	3a02      	subs	r2, #2
 8006d4c:	4251      	negs	r1, r2
 8006d4e:	414a      	adcs	r2, r1
 8006d50:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8006d52:	1dbb      	adds	r3, r7, #6
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d107      	bne.n	8006d6a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8006d5a:	230f      	movs	r3, #15
 8006d5c:	18fb      	adds	r3, r7, r3
 8006d5e:	1dfa      	adds	r2, r7, #7
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	3a05      	subs	r2, #5
 8006d64:	4251      	negs	r1, r2
 8006d66:	414a      	adcs	r2, r1
 8006d68:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8006d6a:	1dbb      	adds	r3, r7, #6
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b05      	cmp	r3, #5
 8006d70:	d107      	bne.n	8006d82 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8006d72:	230f      	movs	r3, #15
 8006d74:	18fb      	adds	r3, r7, r3
 8006d76:	1dfa      	adds	r2, r7, #7
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	3a0b      	subs	r2, #11
 8006d7c:	4251      	negs	r1, r2
 8006d7e:	414a      	adcs	r2, r1
 8006d80:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8006d82:	230f      	movs	r3, #15
 8006d84:	18fb      	adds	r3, r7, r3
 8006d86:	781b      	ldrb	r3, [r3, #0]
}
 8006d88:	0018      	movs	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b004      	add	sp, #16
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <AT_Send>:

bool AT_Send(AT_Commands state){
 8006d90:	b590      	push	{r4, r7, lr}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	0002      	movs	r2, r0
 8006d98:	1dfb      	adds	r3, r7, #7
 8006d9a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8006d9c:	230f      	movs	r3, #15
 8006d9e:	18fb      	adds	r3, r7, r3
 8006da0:	2200      	movs	r2, #0
 8006da2:	701a      	strb	r2, [r3, #0]
  switch (state){
 8006da4:	1dfb      	adds	r3, r7, #7
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b14      	cmp	r3, #20
 8006daa:	d900      	bls.n	8006dae <AT_Send+0x1e>
 8006dac:	e19e      	b.n	80070ec <AT_Send+0x35c>
 8006dae:	009a      	lsls	r2, r3, #2
 8006db0:	4bd2      	ldr	r3, [pc, #840]	@ (80070fc <AT_Send+0x36c>)
 8006db2:	18d3      	adds	r3, r2, r3
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8006db8:	4bd1      	ldr	r3, [pc, #836]	@ (8007100 <AT_Send+0x370>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f00c fa6f 	bl	80132a0 <TimestampIsReached>
 8006dc2:	1e03      	subs	r3, r0, #0
 8006dc4:	d100      	bne.n	8006dc8 <AT_Send+0x38>
 8006dc6:	e190      	b.n	80070ea <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8006dc8:	4ace      	ldr	r2, [pc, #824]	@ (8007104 <AT_Send+0x374>)
 8006dca:	4bcf      	ldr	r3, [pc, #828]	@ (8007108 <AT_Send+0x378>)
 8006dcc:	0019      	movs	r1, r3
 8006dce:	2003      	movs	r0, #3
 8006dd0:	f00c fabc 	bl	801334c <CreateLine>
    ATCommandSend = PollAwake();
 8006dd4:	230f      	movs	r3, #15
 8006dd6:	18fc      	adds	r4, r7, r3
 8006dd8:	f7ff fba0 	bl	800651c <PollAwake>
 8006ddc:	0003      	movs	r3, r0
 8006dde:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006de0:	f00c fff4 	bl	8013dcc <HAL_GetTick>
 8006de4:	0003      	movs	r3, r0
 8006de6:	3332      	adds	r3, #50	@ 0x32
 8006de8:	001a      	movs	r2, r3
 8006dea:	4bc5      	ldr	r3, [pc, #788]	@ (8007100 <AT_Send+0x370>)
 8006dec:	601a      	str	r2, [r3, #0]
  }
  break;
 8006dee:	e17c      	b.n	80070ea <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8006df0:	4ac6      	ldr	r2, [pc, #792]	@ (800710c <AT_Send+0x37c>)
 8006df2:	4bc5      	ldr	r3, [pc, #788]	@ (8007108 <AT_Send+0x378>)
 8006df4:	0019      	movs	r1, r3
 8006df6:	2003      	movs	r0, #3
 8006df8:	f00c faa8 	bl	801334c <CreateLine>
    ATCommandSend = RFPower();
 8006dfc:	230f      	movs	r3, #15
 8006dfe:	18fc      	adds	r4, r7, r3
 8006e00:	f7ff fba8 	bl	8006554 <RFPower>
 8006e04:	0003      	movs	r3, r0
 8006e06:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006e08:	f00c ffe0 	bl	8013dcc <HAL_GetTick>
 8006e0c:	0003      	movs	r3, r0
 8006e0e:	330a      	adds	r3, #10
 8006e10:	001a      	movs	r2, r3
 8006e12:	4bbb      	ldr	r3, [pc, #748]	@ (8007100 <AT_Send+0x370>)
 8006e14:	601a      	str	r2, [r3, #0]
    break;
 8006e16:	e169      	b.n	80070ec <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8006e18:	4abd      	ldr	r2, [pc, #756]	@ (8007110 <AT_Send+0x380>)
 8006e1a:	4bbb      	ldr	r3, [pc, #748]	@ (8007108 <AT_Send+0x378>)
 8006e1c:	0019      	movs	r1, r3
 8006e1e:	2003      	movs	r0, #3
 8006e20:	f00c fa94 	bl	801334c <CreateLine>
    ATCommandSend = CheckRFPower();
 8006e24:	230f      	movs	r3, #15
 8006e26:	18fc      	adds	r4, r7, r3
 8006e28:	f7ff fbb0 	bl	800658c <CheckRFPower>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006e30:	f00c ffcc 	bl	8013dcc <HAL_GetTick>
 8006e34:	0003      	movs	r3, r0
 8006e36:	330a      	adds	r3, #10
 8006e38:	001a      	movs	r2, r3
 8006e3a:	4bb1      	ldr	r3, [pc, #708]	@ (8007100 <AT_Send+0x370>)
 8006e3c:	601a      	str	r2, [r3, #0]
    break;
 8006e3e:	e155      	b.n	80070ec <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8006e40:	4ab4      	ldr	r2, [pc, #720]	@ (8007114 <AT_Send+0x384>)
 8006e42:	4bb1      	ldr	r3, [pc, #708]	@ (8007108 <AT_Send+0x378>)
 8006e44:	0019      	movs	r1, r3
 8006e46:	2003      	movs	r0, #3
 8006e48:	f00c fa80 	bl	801334c <CreateLine>
    ATCommandSend = ATRestore();
 8006e4c:	230f      	movs	r3, #15
 8006e4e:	18fc      	adds	r4, r7, r3
 8006e50:	f7ff fbb8 	bl	80065c4 <ATRestore>
 8006e54:	0003      	movs	r3, r0
 8006e56:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006e58:	f00c ffb8 	bl	8013dcc <HAL_GetTick>
 8006e5c:	0003      	movs	r3, r0
 8006e5e:	3332      	adds	r3, #50	@ 0x32
 8006e60:	001a      	movs	r2, r3
 8006e62:	4ba7      	ldr	r3, [pc, #668]	@ (8007100 <AT_Send+0x370>)
 8006e64:	601a      	str	r2, [r3, #0]
    break;
 8006e66:	e141      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8006e68:	4aab      	ldr	r2, [pc, #684]	@ (8007118 <AT_Send+0x388>)
 8006e6a:	4ba7      	ldr	r3, [pc, #668]	@ (8007108 <AT_Send+0x378>)
 8006e6c:	0019      	movs	r1, r3
 8006e6e:	2003      	movs	r0, #3
 8006e70:	f00c fa6c 	bl	801334c <CreateLine>
    ATCommandSend = CWINIT();
 8006e74:	230f      	movs	r3, #15
 8006e76:	18fc      	adds	r4, r7, r3
 8006e78:	f7ff fbc0 	bl	80065fc <CWINIT>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006e80:	f00c ffa4 	bl	8013dcc <HAL_GetTick>
 8006e84:	0003      	movs	r3, r0
 8006e86:	33f5      	adds	r3, #245	@ 0xf5
 8006e88:	33ff      	adds	r3, #255	@ 0xff
 8006e8a:	001a      	movs	r2, r3
 8006e8c:	4b9c      	ldr	r3, [pc, #624]	@ (8007100 <AT_Send+0x370>)
 8006e8e:	601a      	str	r2, [r3, #0]
    break;
 8006e90:	e12c      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8006e92:	4aa2      	ldr	r2, [pc, #648]	@ (800711c <AT_Send+0x38c>)
 8006e94:	4b9c      	ldr	r3, [pc, #624]	@ (8007108 <AT_Send+0x378>)
 8006e96:	0019      	movs	r1, r3
 8006e98:	2003      	movs	r0, #3
 8006e9a:	f00c fa57 	bl	801334c <CreateLine>
    ATCommandSend = CWSTATE();
 8006e9e:	230f      	movs	r3, #15
 8006ea0:	18fc      	adds	r4, r7, r3
 8006ea2:	f7ff fcb9 	bl	8006818 <CWSTATE>
 8006ea6:	0003      	movs	r3, r0
 8006ea8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006eaa:	f00c ff8f 	bl	8013dcc <HAL_GetTick>
 8006eae:	0003      	movs	r3, r0
 8006eb0:	33f5      	adds	r3, #245	@ 0xf5
 8006eb2:	33ff      	adds	r3, #255	@ 0xff
 8006eb4:	001a      	movs	r2, r3
 8006eb6:	4b92      	ldr	r3, [pc, #584]	@ (8007100 <AT_Send+0x370>)
 8006eb8:	601a      	str	r2, [r3, #0]
    break;
 8006eba:	e117      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8006ebc:	4a98      	ldr	r2, [pc, #608]	@ (8007120 <AT_Send+0x390>)
 8006ebe:	4b92      	ldr	r3, [pc, #584]	@ (8007108 <AT_Send+0x378>)
 8006ec0:	0019      	movs	r1, r3
 8006ec2:	2003      	movs	r0, #3
 8006ec4:	f00c fa42 	bl	801334c <CreateLine>
    ATCommandSend = CWMODE1();
 8006ec8:	230f      	movs	r3, #15
 8006eca:	18fc      	adds	r4, r7, r3
 8006ecc:	f7ff fbb2 	bl	8006634 <CWMODE1>
 8006ed0:	0003      	movs	r3, r0
 8006ed2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006ed4:	f00c ff7a 	bl	8013dcc <HAL_GetTick>
 8006ed8:	0003      	movs	r3, r0
 8006eda:	330a      	adds	r3, #10
 8006edc:	001a      	movs	r2, r3
 8006ede:	4b88      	ldr	r3, [pc, #544]	@ (8007100 <AT_Send+0x370>)
 8006ee0:	601a      	str	r2, [r3, #0]
    break;
 8006ee2:	e103      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8006ee4:	4a8e      	ldr	r2, [pc, #568]	@ (8007120 <AT_Send+0x390>)
 8006ee6:	4b88      	ldr	r3, [pc, #544]	@ (8007108 <AT_Send+0x378>)
 8006ee8:	0019      	movs	r1, r3
 8006eea:	2003      	movs	r0, #3
 8006eec:	f00c fa2e 	bl	801334c <CreateLine>
    ATCommandSend = CWMODE2();
 8006ef0:	230f      	movs	r3, #15
 8006ef2:	18fc      	adds	r4, r7, r3
 8006ef4:	f7ff fbba 	bl	800666c <CWMODE2>
 8006ef8:	0003      	movs	r3, r0
 8006efa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006efc:	f00c ff66 	bl	8013dcc <HAL_GetTick>
 8006f00:	0003      	movs	r3, r0
 8006f02:	330a      	adds	r3, #10
 8006f04:	001a      	movs	r2, r3
 8006f06:	4b7e      	ldr	r3, [pc, #504]	@ (8007100 <AT_Send+0x370>)
 8006f08:	601a      	str	r2, [r3, #0]
    break;
 8006f0a:	e0ef      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8006f0c:	4a85      	ldr	r2, [pc, #532]	@ (8007124 <AT_Send+0x394>)
 8006f0e:	4b7e      	ldr	r3, [pc, #504]	@ (8007108 <AT_Send+0x378>)
 8006f10:	0019      	movs	r1, r3
 8006f12:	2003      	movs	r0, #3
 8006f14:	f00c fa1a 	bl	801334c <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8006f18:	230f      	movs	r3, #15
 8006f1a:	18fc      	adds	r4, r7, r3
 8006f1c:	f7ff fbc2 	bl	80066a4 <CWAUTOCONN>
 8006f20:	0003      	movs	r3, r0
 8006f22:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006f24:	f00c ff52 	bl	8013dcc <HAL_GetTick>
 8006f28:	0003      	movs	r3, r0
 8006f2a:	330a      	adds	r3, #10
 8006f2c:	001a      	movs	r2, r3
 8006f2e:	4b74      	ldr	r3, [pc, #464]	@ (8007100 <AT_Send+0x370>)
 8006f30:	601a      	str	r2, [r3, #0]
    break;
 8006f32:	e0db      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8006f34:	4a7c      	ldr	r2, [pc, #496]	@ (8007128 <AT_Send+0x398>)
 8006f36:	4b74      	ldr	r3, [pc, #464]	@ (8007108 <AT_Send+0x378>)
 8006f38:	0019      	movs	r1, r3
 8006f3a:	2003      	movs	r0, #3
 8006f3c:	f00c fa06 	bl	801334c <CreateLine>
    ATCommandSend = CWJAP();
 8006f40:	230f      	movs	r3, #15
 8006f42:	18fc      	adds	r4, r7, r3
 8006f44:	f7ff fbca 	bl	80066dc <CWJAP>
 8006f48:	0003      	movs	r3, r0
 8006f4a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006f4c:	f00c ff3e 	bl	8013dcc <HAL_GetTick>
 8006f50:	0003      	movs	r3, r0
 8006f52:	3332      	adds	r3, #50	@ 0x32
 8006f54:	001a      	movs	r2, r3
 8006f56:	4b6a      	ldr	r3, [pc, #424]	@ (8007100 <AT_Send+0x370>)
 8006f58:	601a      	str	r2, [r3, #0]
    break;
 8006f5a:	e0c7      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8006f5c:	4a73      	ldr	r2, [pc, #460]	@ (800712c <AT_Send+0x39c>)
 8006f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8007108 <AT_Send+0x378>)
 8006f60:	0019      	movs	r1, r3
 8006f62:	2003      	movs	r0, #3
 8006f64:	f00c f9f2 	bl	801334c <CreateLine>
    ATCommandSend = CWMODE3();
 8006f68:	230f      	movs	r3, #15
 8006f6a:	18fc      	adds	r4, r7, r3
 8006f6c:	f7ff fc38 	bl	80067e0 <CWMODE3>
 8006f70:	0003      	movs	r3, r0
 8006f72:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006f74:	f00c ff2a 	bl	8013dcc <HAL_GetTick>
 8006f78:	0003      	movs	r3, r0
 8006f7a:	330a      	adds	r3, #10
 8006f7c:	001a      	movs	r2, r3
 8006f7e:	4b60      	ldr	r3, [pc, #384]	@ (8007100 <AT_Send+0x370>)
 8006f80:	601a      	str	r2, [r3, #0]
    break;
 8006f82:	e0b3      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8006f84:	4a6a      	ldr	r2, [pc, #424]	@ (8007130 <AT_Send+0x3a0>)
 8006f86:	4b60      	ldr	r3, [pc, #384]	@ (8007108 <AT_Send+0x378>)
 8006f88:	0019      	movs	r1, r3
 8006f8a:	2003      	movs	r0, #3
 8006f8c:	f00c f9de 	bl	801334c <CreateLine>
    ATCommandSend = CWSAP();
 8006f90:	230f      	movs	r3, #15
 8006f92:	18fc      	adds	r4, r7, r3
 8006f94:	f7ff fc5c 	bl	8006850 <CWSAP>
 8006f98:	0003      	movs	r3, r0
 8006f9a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006f9c:	f00c ff16 	bl	8013dcc <HAL_GetTick>
 8006fa0:	0003      	movs	r3, r0
 8006fa2:	330a      	adds	r3, #10
 8006fa4:	001a      	movs	r2, r3
 8006fa6:	4b56      	ldr	r3, [pc, #344]	@ (8007100 <AT_Send+0x370>)
 8006fa8:	601a      	str	r2, [r3, #0]
    break;
 8006faa:	e09f      	b.n	80070ec <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 8006fac:	4a61      	ldr	r2, [pc, #388]	@ (8007134 <AT_Send+0x3a4>)
 8006fae:	4b56      	ldr	r3, [pc, #344]	@ (8007108 <AT_Send+0x378>)
 8006fb0:	0019      	movs	r1, r3
 8006fb2:	2003      	movs	r0, #3
 8006fb4:	f00c f9ca 	bl	801334c <CreateLine>
    ATCommandSend = CIPMUX();
 8006fb8:	230f      	movs	r3, #15
 8006fba:	18fc      	adds	r4, r7, r3
 8006fbc:	f7ff fc64 	bl	8006888 <CIPMUX>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006fc4:	f00c ff02 	bl	8013dcc <HAL_GetTick>
 8006fc8:	0003      	movs	r3, r0
 8006fca:	330a      	adds	r3, #10
 8006fcc:	001a      	movs	r2, r3
 8006fce:	4b4c      	ldr	r3, [pc, #304]	@ (8007100 <AT_Send+0x370>)
 8006fd0:	601a      	str	r2, [r3, #0]
    break;
 8006fd2:	e08b      	b.n	80070ec <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 8006fd4:	4a58      	ldr	r2, [pc, #352]	@ (8007138 <AT_Send+0x3a8>)
 8006fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8007108 <AT_Send+0x378>)
 8006fd8:	0019      	movs	r1, r3
 8006fda:	2003      	movs	r0, #3
 8006fdc:	f00c f9b6 	bl	801334c <CreateLine>
    ATCommandSend = WEBSERVER();
 8006fe0:	230f      	movs	r3, #15
 8006fe2:	18fc      	adds	r4, r7, r3
 8006fe4:	f7ff fc6c 	bl	80068c0 <WEBSERVER>
 8006fe8:	0003      	movs	r3, r0
 8006fea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006fec:	f00c feee 	bl	8013dcc <HAL_GetTick>
 8006ff0:	0003      	movs	r3, r0
 8006ff2:	330a      	adds	r3, #10
 8006ff4:	001a      	movs	r2, r3
 8006ff6:	4b42      	ldr	r3, [pc, #264]	@ (8007100 <AT_Send+0x370>)
 8006ff8:	601a      	str	r2, [r3, #0]
    break;
 8006ffa:	e077      	b.n	80070ec <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8006ffc:	230f      	movs	r3, #15
 8006ffe:	18fc      	adds	r4, r7, r3
 8007000:	f7ff fc7a 	bl	80068f8 <HTTPCPOST>
 8007004:	0003      	movs	r3, r0
 8007006:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007008:	f00c fee0 	bl	8013dcc <HAL_GetTick>
 800700c:	0003      	movs	r3, r0
 800700e:	33f5      	adds	r3, #245	@ 0xf5
 8007010:	33ff      	adds	r3, #255	@ 0xff
 8007012:	001a      	movs	r2, r3
 8007014:	4b3a      	ldr	r3, [pc, #232]	@ (8007100 <AT_Send+0x370>)
 8007016:	601a      	str	r2, [r3, #0]
    break;
 8007018:	e068      	b.n	80070ec <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800701a:	4a48      	ldr	r2, [pc, #288]	@ (800713c <AT_Send+0x3ac>)
 800701c:	4b3a      	ldr	r3, [pc, #232]	@ (8007108 <AT_Send+0x378>)
 800701e:	0019      	movs	r1, r3
 8007020:	2003      	movs	r0, #3
 8007022:	f00c f993 	bl	801334c <CreateLine>
    ATCommandSend = SENDDATA();
 8007026:	230f      	movs	r3, #15
 8007028:	18fc      	adds	r4, r7, r3
 800702a:	f7ff fccf 	bl	80069cc <SENDDATA>
 800702e:	0003      	movs	r3, r0
 8007030:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8007032:	f00c fecb 	bl	8013dcc <HAL_GetTick>
 8007036:	0003      	movs	r3, r0
 8007038:	33f5      	adds	r3, #245	@ 0xf5
 800703a:	33ff      	adds	r3, #255	@ 0xff
 800703c:	001a      	movs	r2, r3
 800703e:	4b30      	ldr	r3, [pc, #192]	@ (8007100 <AT_Send+0x370>)
 8007040:	601a      	str	r2, [r3, #0]
    break;
 8007042:	e053      	b.n	80070ec <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8007044:	4a3e      	ldr	r2, [pc, #248]	@ (8007140 <AT_Send+0x3b0>)
 8007046:	4b30      	ldr	r3, [pc, #192]	@ (8007108 <AT_Send+0x378>)
 8007048:	0019      	movs	r1, r3
 800704a:	2003      	movs	r0, #3
 800704c:	f00c f97e 	bl	801334c <CreateLine>
    ATCommandSend = SLEEP();
 8007050:	230f      	movs	r3, #15
 8007052:	18fc      	adds	r4, r7, r3
 8007054:	f7ff fce6 	bl	8006a24 <SLEEP>
 8007058:	0003      	movs	r3, r0
 800705a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800705c:	f00c feb6 	bl	8013dcc <HAL_GetTick>
 8007060:	0003      	movs	r3, r0
 8007062:	330a      	adds	r3, #10
 8007064:	001a      	movs	r2, r3
 8007066:	4b26      	ldr	r3, [pc, #152]	@ (8007100 <AT_Send+0x370>)
 8007068:	601a      	str	r2, [r3, #0]
    break;
 800706a:	e03f      	b.n	80070ec <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 800706c:	4a35      	ldr	r2, [pc, #212]	@ (8007144 <AT_Send+0x3b4>)
 800706e:	4b26      	ldr	r3, [pc, #152]	@ (8007108 <AT_Send+0x378>)
 8007070:	0019      	movs	r1, r3
 8007072:	2003      	movs	r0, #3
 8007074:	f00c f96a 	bl	801334c <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8007078:	230f      	movs	r3, #15
 800707a:	18fc      	adds	r4, r7, r3
 800707c:	f7ff fcee 	bl	8006a5c <CIPSNTPCFG>
 8007080:	0003      	movs	r3, r0
 8007082:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007084:	f00c fea2 	bl	8013dcc <HAL_GetTick>
 8007088:	0003      	movs	r3, r0
 800708a:	330a      	adds	r3, #10
 800708c:	001a      	movs	r2, r3
 800708e:	4b1c      	ldr	r3, [pc, #112]	@ (8007100 <AT_Send+0x370>)
 8007090:	601a      	str	r2, [r3, #0]
    break;
 8007092:	e02b      	b.n	80070ec <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8007094:	4a2c      	ldr	r2, [pc, #176]	@ (8007148 <AT_Send+0x3b8>)
 8007096:	4b1c      	ldr	r3, [pc, #112]	@ (8007108 <AT_Send+0x378>)
 8007098:	0019      	movs	r1, r3
 800709a:	2003      	movs	r0, #3
 800709c:	f00c f956 	bl	801334c <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80070a0:	230f      	movs	r3, #15
 80070a2:	18fc      	adds	r4, r7, r3
 80070a4:	f7ff fcfa 	bl	8006a9c <CIPSNTPTIME>
 80070a8:	0003      	movs	r3, r0
 80070aa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80070ac:	f00c fe8e 	bl	8013dcc <HAL_GetTick>
 80070b0:	0003      	movs	r3, r0
 80070b2:	33f5      	adds	r3, #245	@ 0xf5
 80070b4:	33ff      	adds	r3, #255	@ 0xff
 80070b6:	001a      	movs	r2, r3
 80070b8:	4b11      	ldr	r3, [pc, #68]	@ (8007100 <AT_Send+0x370>)
 80070ba:	601a      	str	r2, [r3, #0]
    break;
 80070bc:	e016      	b.n	80070ec <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80070be:	4a23      	ldr	r2, [pc, #140]	@ (800714c <AT_Send+0x3bc>)
 80070c0:	4b11      	ldr	r3, [pc, #68]	@ (8007108 <AT_Send+0x378>)
 80070c2:	0019      	movs	r1, r3
 80070c4:	2003      	movs	r0, #3
 80070c6:	f00c f941 	bl	801334c <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80070ca:	230f      	movs	r3, #15
 80070cc:	18fc      	adds	r4, r7, r3
 80070ce:	f7ff fd01 	bl	8006ad4 <CIPSNTPINTV>
 80070d2:	0003      	movs	r3, r0
 80070d4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80070d6:	f00c fe79 	bl	8013dcc <HAL_GetTick>
 80070da:	0003      	movs	r3, r0
 80070dc:	330a      	adds	r3, #10
 80070de:	001a      	movs	r2, r3
 80070e0:	4b07      	ldr	r3, [pc, #28]	@ (8007100 <AT_Send+0x370>)
 80070e2:	601a      	str	r2, [r3, #0]
    break;
 80070e4:	e002      	b.n	80070ec <AT_Send+0x35c>

  case AT_END:
    break;
 80070e6:	46c0      	nop			@ (mov r8, r8)
 80070e8:	e000      	b.n	80070ec <AT_Send+0x35c>
  break;
 80070ea:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80070ec:	230f      	movs	r3, #15
 80070ee:	18fb      	adds	r3, r7, r3
 80070f0:	781b      	ldrb	r3, [r3, #0]
}
 80070f2:	0018      	movs	r0, r3
 80070f4:	46bd      	mov	sp, r7
 80070f6:	b005      	add	sp, #20
 80070f8:	bd90      	pop	{r4, r7, pc}
 80070fa:	46c0      	nop			@ (mov r8, r8)
 80070fc:	0802dae8 	.word	0x0802dae8
 8007100:	2000066c 	.word	0x2000066c
 8007104:	0802ac68 	.word	0x0802ac68
 8007108:	08029db8 	.word	0x08029db8
 800710c:	0802ac74 	.word	0x0802ac74
 8007110:	0802ac88 	.word	0x0802ac88
 8007114:	0802ac9c 	.word	0x0802ac9c
 8007118:	0802acac 	.word	0x0802acac
 800711c:	0802acc0 	.word	0x0802acc0
 8007120:	0802acd8 	.word	0x0802acd8
 8007124:	0802acf0 	.word	0x0802acf0
 8007128:	0802ad08 	.word	0x0802ad08
 800712c:	0802ad1c 	.word	0x0802ad1c
 8007130:	0802ad38 	.word	0x0802ad38
 8007134:	0802ad54 	.word	0x0802ad54
 8007138:	0802ad70 	.word	0x0802ad70
 800713c:	0802ad8c 	.word	0x0802ad8c
 8007140:	0802ad9c 	.word	0x0802ad9c
 8007144:	0802adc0 	.word	0x0802adc0
 8007148:	0802add4 	.word	0x0802add4
 800714c:	0802adec 	.word	0x0802adec

08007150 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8007150:	b590      	push	{r4, r7, lr}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8007156:	1dfb      	adds	r3, r7, #7
 8007158:	2200      	movs	r2, #0
 800715a:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 800715c:	4b7d      	ldr	r3, [pc, #500]	@ (8007354 <ESP_WakeTest+0x204>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b05      	cmp	r3, #5
 8007162:	d900      	bls.n	8007166 <ESP_WakeTest+0x16>
 8007164:	e0d9      	b.n	800731a <ESP_WakeTest+0x1ca>
 8007166:	009a      	lsls	r2, r3, #2
 8007168:	4b7b      	ldr	r3, [pc, #492]	@ (8007358 <ESP_WakeTest+0x208>)
 800716a:	18d3      	adds	r3, r2, r3
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8007170:	4b7a      	ldr	r3, [pc, #488]	@ (800735c <ESP_WakeTest+0x20c>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2201      	movs	r2, #1
 8007176:	4053      	eors	r3, r2
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d036      	beq.n	80071ec <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800717e:	2380      	movs	r3, #128	@ 0x80
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	4877      	ldr	r0, [pc, #476]	@ (8007360 <ESP_WakeTest+0x210>)
 8007184:	2200      	movs	r2, #0
 8007186:	0019      	movs	r1, r3
 8007188:	f00e f8b1 	bl	80152ee <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800718c:	2032      	movs	r0, #50	@ 0x32
 800718e:	f00c fe27 	bl	8013de0 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007192:	2380      	movs	r3, #128	@ 0x80
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	4872      	ldr	r0, [pc, #456]	@ (8007360 <ESP_WakeTest+0x210>)
 8007198:	2201      	movs	r2, #1
 800719a:	0019      	movs	r1, r3
 800719c:	f00e f8a7 	bl	80152ee <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80071a0:	200a      	movs	r0, #10
 80071a2:	f00c fe1d 	bl	8013de0 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80071a6:	4b6f      	ldr	r3, [pc, #444]	@ (8007364 <ESP_WakeTest+0x214>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	2101      	movs	r1, #1
 80071ac:	0018      	movs	r0, r3
 80071ae:	f00e f89e 	bl	80152ee <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80071b2:	200a      	movs	r0, #10
 80071b4:	f00c fe14 	bl	8013de0 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80071b8:	4b6a      	ldr	r3, [pc, #424]	@ (8007364 <ESP_WakeTest+0x214>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	2102      	movs	r1, #2
 80071be:	0018      	movs	r0, r3
 80071c0:	f00e f895 	bl	80152ee <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80071c4:	200a      	movs	r0, #10
 80071c6:	f00c fe0b 	bl	8013de0 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80071ca:	4b66      	ldr	r3, [pc, #408]	@ (8007364 <ESP_WakeTest+0x214>)
 80071cc:	2201      	movs	r2, #1
 80071ce:	2101      	movs	r1, #1
 80071d0:	0018      	movs	r0, r3
 80071d2:	f00e f88c 	bl	80152ee <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80071d6:	f00c fdf9 	bl	8013dcc <HAL_GetTick>
 80071da:	0003      	movs	r3, r0
 80071dc:	22af      	movs	r2, #175	@ 0xaf
 80071de:	0092      	lsls	r2, r2, #2
 80071e0:	189a      	adds	r2, r3, r2
 80071e2:	4b61      	ldr	r3, [pc, #388]	@ (8007368 <ESP_WakeTest+0x218>)
 80071e4:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80071e6:	4b5d      	ldr	r3, [pc, #372]	@ (800735c <ESP_WakeTest+0x20c>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80071ec:	2380      	movs	r3, #128	@ 0x80
 80071ee:	005a      	lsls	r2, r3, #1
 80071f0:	4b5e      	ldr	r3, [pc, #376]	@ (800736c <ESP_WakeTest+0x21c>)
 80071f2:	0011      	movs	r1, r2
 80071f4:	0018      	movs	r0, r3
 80071f6:	f7fd fe5b 	bl	8004eb0 <ESP_Receive>
 80071fa:	1e03      	subs	r3, r0, #0
 80071fc:	d100      	bne.n	8007200 <ESP_WakeTest+0xb0>
 80071fe:	e09f      	b.n	8007340 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8007200:	4b54      	ldr	r3, [pc, #336]	@ (8007354 <ESP_WakeTest+0x204>)
 8007202:	2201      	movs	r2, #1
 8007204:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007206:	e09b      	b.n	8007340 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8007208:	4b57      	ldr	r3, [pc, #348]	@ (8007368 <ESP_WakeTest+0x218>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	0018      	movs	r0, r3
 800720e:	f00c f847 	bl	80132a0 <TimestampIsReached>
 8007212:	1e03      	subs	r3, r0, #0
 8007214:	d100      	bne.n	8007218 <ESP_WakeTest+0xc8>
 8007216:	e095      	b.n	8007344 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8007218:	4b55      	ldr	r3, [pc, #340]	@ (8007370 <ESP_WakeTest+0x220>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	1dfc      	adds	r4, r7, #7
 800721e:	0018      	movs	r0, r3
 8007220:	f7ff fdb6 	bl	8006d90 <AT_Send>
 8007224:	0003      	movs	r3, r0
 8007226:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007228:	1dfb      	adds	r3, r7, #7
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d100      	bne.n	8007232 <ESP_WakeTest+0xe2>
 8007230:	e088      	b.n	8007344 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8007232:	4b48      	ldr	r3, [pc, #288]	@ (8007354 <ESP_WakeTest+0x204>)
 8007234:	2202      	movs	r2, #2
 8007236:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007238:	e084      	b.n	8007344 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800723a:	4b4b      	ldr	r3, [pc, #300]	@ (8007368 <ESP_WakeTest+0x218>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	0018      	movs	r0, r3
 8007240:	f00c f82e 	bl	80132a0 <TimestampIsReached>
 8007244:	1e03      	subs	r3, r0, #0
 8007246:	d100      	bne.n	800724a <ESP_WakeTest+0xfa>
 8007248:	e07e      	b.n	8007348 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800724a:	4b4a      	ldr	r3, [pc, #296]	@ (8007374 <ESP_WakeTest+0x224>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	0018      	movs	r0, r3
 8007250:	f7ff fc5c 	bl	8006b0c <DMA_ProcessBuffer>
 8007254:	0003      	movs	r3, r0
 8007256:	001a      	movs	r2, r3
 8007258:	4b47      	ldr	r3, [pc, #284]	@ (8007378 <ESP_WakeTest+0x228>)
 800725a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800725c:	4b46      	ldr	r3, [pc, #280]	@ (8007378 <ESP_WakeTest+0x228>)
 800725e:	781a      	ldrb	r2, [r3, #0]
 8007260:	4b44      	ldr	r3, [pc, #272]	@ (8007374 <ESP_WakeTest+0x224>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	1dbc      	adds	r4, r7, #6
 8007266:	0019      	movs	r1, r3
 8007268:	0010      	movs	r0, r2
 800726a:	f7ff fd4f 	bl	8006d0c <ATCompare>
 800726e:	0003      	movs	r3, r0
 8007270:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007272:	4b41      	ldr	r3, [pc, #260]	@ (8007378 <ESP_WakeTest+0x228>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d102      	bne.n	8007280 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800727a:	4b36      	ldr	r3, [pc, #216]	@ (8007354 <ESP_WakeTest+0x204>)
 800727c:	2201      	movs	r2, #1
 800727e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8007280:	4b3d      	ldr	r3, [pc, #244]	@ (8007378 <ESP_WakeTest+0x228>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b07      	cmp	r3, #7
 8007286:	d104      	bne.n	8007292 <ESP_WakeTest+0x142>
          StartProg();
 8007288:	f7fe ff2a 	bl	80060e0 <StartProg>
          TestState = ESP_TEST_BOOT;
 800728c:	4b31      	ldr	r3, [pc, #196]	@ (8007354 <ESP_WakeTest+0x204>)
 800728e:	2205      	movs	r2, #5
 8007290:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007292:	4b39      	ldr	r3, [pc, #228]	@ (8007378 <ESP_WakeTest+0x228>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b03      	cmp	r3, #3
 8007298:	d109      	bne.n	80072ae <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800729a:	f00c fd97 	bl	8013dcc <HAL_GetTick>
 800729e:	0003      	movs	r3, r0
 80072a0:	3332      	adds	r3, #50	@ 0x32
 80072a2:	001a      	movs	r2, r3
 80072a4:	4b30      	ldr	r3, [pc, #192]	@ (8007368 <ESP_WakeTest+0x218>)
 80072a6:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80072a8:	4b2a      	ldr	r3, [pc, #168]	@ (8007354 <ESP_WakeTest+0x204>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80072ae:	1dbb      	adds	r3, r7, #6
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d048      	beq.n	8007348 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80072b6:	4b27      	ldr	r3, [pc, #156]	@ (8007354 <ESP_WakeTest+0x204>)
 80072b8:	2203      	movs	r2, #3
 80072ba:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80072bc:	e044      	b.n	8007348 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80072be:	4b2f      	ldr	r3, [pc, #188]	@ (800737c <ESP_WakeTest+0x22c>)
 80072c0:	22fa      	movs	r2, #250	@ 0xfa
 80072c2:	0112      	lsls	r2, r2, #4
 80072c4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80072c6:	f00a fcf1 	bl	8011cac <Calculate_LED_ON>
 80072ca:	0003      	movs	r3, r0
 80072cc:	001a      	movs	r2, r3
 80072ce:	4b2b      	ldr	r3, [pc, #172]	@ (800737c <ESP_WakeTest+0x22c>)
 80072d0:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80072d2:	4b2a      	ldr	r3, [pc, #168]	@ (800737c <ESP_WakeTest+0x22c>)
 80072d4:	22fa      	movs	r2, #250	@ 0xfa
 80072d6:	0112      	lsls	r2, r2, #4
 80072d8:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80072da:	4b1e      	ldr	r3, [pc, #120]	@ (8007354 <ESP_WakeTest+0x204>)
 80072dc:	2204      	movs	r2, #4
 80072de:	701a      	strb	r2, [r3, #0]

      break;
 80072e0:	e033      	b.n	800734a <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 80072e2:	4b27      	ldr	r3, [pc, #156]	@ (8007380 <ESP_WakeTest+0x230>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80072e8:	4b1c      	ldr	r3, [pc, #112]	@ (800735c <ESP_WakeTest+0x20c>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80072ee:	4b1d      	ldr	r3, [pc, #116]	@ (8007364 <ESP_WakeTest+0x214>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	2101      	movs	r1, #1
 80072f4:	0018      	movs	r0, r3
 80072f6:	f00d fffa 	bl	80152ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80072fa:	2380      	movs	r3, #128	@ 0x80
 80072fc:	011b      	lsls	r3, r3, #4
 80072fe:	4818      	ldr	r0, [pc, #96]	@ (8007360 <ESP_WakeTest+0x210>)
 8007300:	2200      	movs	r2, #0
 8007302:	0019      	movs	r1, r3
 8007304:	f00d fff3 	bl	80152ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007308:	4b16      	ldr	r3, [pc, #88]	@ (8007364 <ESP_WakeTest+0x214>)
 800730a:	2200      	movs	r2, #0
 800730c:	2102      	movs	r1, #2
 800730e:	0018      	movs	r0, r3
 8007310:	f00d ffed 	bl	80152ee <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8007314:	f005 fc7a 	bl	800cc0c <SetESPMeasurementDone>
      break;
 8007318:	e017      	b.n	800734a <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800731a:	4b0e      	ldr	r3, [pc, #56]	@ (8007354 <ESP_WakeTest+0x204>)
 800731c:	2200      	movs	r2, #0
 800731e:	701a      	strb	r2, [r3, #0]
      break;
 8007320:	e013      	b.n	800734a <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8007322:	4b16      	ldr	r3, [pc, #88]	@ (800737c <ESP_WakeTest+0x22c>)
 8007324:	22fa      	movs	r2, #250	@ 0xfa
 8007326:	0112      	lsls	r2, r2, #4
 8007328:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 800732a:	4b14      	ldr	r3, [pc, #80]	@ (800737c <ESP_WakeTest+0x22c>)
 800732c:	22fa      	movs	r2, #250	@ 0xfa
 800732e:	0112      	lsls	r2, r2, #4
 8007330:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8007332:	f00a fcbb 	bl	8011cac <Calculate_LED_ON>
 8007336:	0003      	movs	r3, r0
 8007338:	001a      	movs	r2, r3
 800733a:	4b10      	ldr	r3, [pc, #64]	@ (800737c <ESP_WakeTest+0x22c>)
 800733c:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800733e:	e004      	b.n	800734a <ESP_WakeTest+0x1fa>
      break;
 8007340:	46c0      	nop			@ (mov r8, r8)
 8007342:	e002      	b.n	800734a <ESP_WakeTest+0x1fa>
      break;
 8007344:	46c0      	nop			@ (mov r8, r8)
 8007346:	e000      	b.n	800734a <ESP_WakeTest+0x1fa>
      break;
 8007348:	46c0      	nop			@ (mov r8, r8)
  }
}
 800734a:	46c0      	nop			@ (mov r8, r8)
 800734c:	46bd      	mov	sp, r7
 800734e:	b003      	add	sp, #12
 8007350:	bd90      	pop	{r4, r7, pc}
 8007352:	46c0      	nop			@ (mov r8, r8)
 8007354:	20000678 	.word	0x20000678
 8007358:	0802db3c 	.word	0x0802db3c
 800735c:	200005a0 	.word	0x200005a0
 8007360:	50000800 	.word	0x50000800
 8007364:	50001c00 	.word	0x50001c00
 8007368:	2000066c 	.word	0x2000066c
 800736c:	200004a0 	.word	0x200004a0
 8007370:	20000676 	.word	0x20000676
 8007374:	20000675 	.word	0x20000675
 8007378:	2000002e 	.word	0x2000002e
 800737c:	40000400 	.word	0x40000400
 8007380:	20000001 	.word	0x20000001

08007384 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8007384:	b5b0      	push	{r4, r5, r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800738a:	1dfb      	adds	r3, r7, #7
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8007390:	4bdf      	ldr	r3, [pc, #892]	@ (8007710 <ESP_Upkeep+0x38c>)
 8007392:	781a      	ldrb	r2, [r3, #0]
 8007394:	4bdf      	ldr	r3, [pc, #892]	@ (8007714 <ESP_Upkeep+0x390>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d024      	beq.n	80073e6 <ESP_Upkeep+0x62>
 800739c:	f00c f850 	bl	8013440 <GetVerboseLevel>
 80073a0:	0003      	movs	r3, r0
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d11f      	bne.n	80073e6 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80073a6:	4bda      	ldr	r3, [pc, #872]	@ (8007710 <ESP_Upkeep+0x38c>)
 80073a8:	781a      	ldrb	r2, [r3, #0]
 80073aa:	4bda      	ldr	r3, [pc, #872]	@ (8007714 <ESP_Upkeep+0x390>)
 80073ac:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80073ae:	4bd9      	ldr	r3, [pc, #868]	@ (8007714 <ESP_Upkeep+0x390>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d103      	bne.n	80073be <ESP_Upkeep+0x3a>
 80073b6:	4bd8      	ldr	r3, [pc, #864]	@ (8007718 <ESP_Upkeep+0x394>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b0e      	cmp	r3, #14
 80073bc:	d013      	beq.n	80073e6 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80073be:	4bd5      	ldr	r3, [pc, #852]	@ (8007714 <ESP_Upkeep+0x390>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	001d      	movs	r5, r3
 80073c4:	4bd4      	ldr	r3, [pc, #848]	@ (8007718 <ESP_Upkeep+0x394>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	0018      	movs	r0, r3
 80073ca:	4bd4      	ldr	r3, [pc, #848]	@ (800771c <ESP_Upkeep+0x398>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	001c      	movs	r4, r3
 80073d0:	4bd3      	ldr	r3, [pc, #844]	@ (8007720 <ESP_Upkeep+0x39c>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	4ad3      	ldr	r2, [pc, #844]	@ (8007724 <ESP_Upkeep+0x3a0>)
 80073d6:	49d4      	ldr	r1, [pc, #848]	@ (8007728 <ESP_Upkeep+0x3a4>)
 80073d8:	9302      	str	r3, [sp, #8]
 80073da:	9401      	str	r4, [sp, #4]
 80073dc:	9000      	str	r0, [sp, #0]
 80073de:	002b      	movs	r3, r5
 80073e0:	2003      	movs	r0, #3
 80073e2:	f00b ffb3 	bl	801334c <CreateLine>
    }
  }
  switch (EspState) {
 80073e6:	4bca      	ldr	r3, [pc, #808]	@ (8007710 <ESP_Upkeep+0x38c>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b0f      	cmp	r3, #15
 80073ec:	d901      	bls.n	80073f2 <ESP_Upkeep+0x6e>
 80073ee:	f000 fc5e 	bl	8007cae <ESP_Upkeep+0x92a>
 80073f2:	009a      	lsls	r2, r3, #2
 80073f4:	4bcd      	ldr	r3, [pc, #820]	@ (800772c <ESP_Upkeep+0x3a8>)
 80073f6:	18d3      	adds	r3, r2, r3
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80073fc:	4bc4      	ldr	r3, [pc, #784]	@ (8007710 <ESP_Upkeep+0x38c>)
 80073fe:	2201      	movs	r2, #1
 8007400:	701a      	strb	r2, [r3, #0]
      break;
 8007402:	f000 fc6f 	bl	8007ce4 <ESP_Upkeep+0x960>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 8007406:	4bca      	ldr	r3, [pc, #808]	@ (8007730 <ESP_Upkeep+0x3ac>)
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 800740c:	f005 fe5e 	bl	800d0cc <AllDevicesReady>
 8007410:	0003      	movs	r3, r0
 8007412:	001a      	movs	r2, r3
 8007414:	2301      	movs	r3, #1
 8007416:	4053      	eors	r3, r2
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <ESP_Upkeep+0x9e>
 800741e:	f000 fc52 	bl	8007cc6 <ESP_Upkeep+0x942>
        break;
      }
      SetESPIndicator();
 8007422:	f00a fdd5 	bl	8011fd0 <SetESPIndicator>
      if(!EspTurnedOn){
 8007426:	4bc3      	ldr	r3, [pc, #780]	@ (8007734 <ESP_Upkeep+0x3b0>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2201      	movs	r2, #1
 800742c:	4053      	eors	r3, r2
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d036      	beq.n	80074a2 <ESP_Upkeep+0x11e>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007434:	2380      	movs	r3, #128	@ 0x80
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	48bf      	ldr	r0, [pc, #764]	@ (8007738 <ESP_Upkeep+0x3b4>)
 800743a:	2200      	movs	r2, #0
 800743c:	0019      	movs	r1, r3
 800743e:	f00d ff56 	bl	80152ee <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007442:	2001      	movs	r0, #1
 8007444:	f00c fccc 	bl	8013de0 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007448:	2380      	movs	r3, #128	@ 0x80
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	48ba      	ldr	r0, [pc, #744]	@ (8007738 <ESP_Upkeep+0x3b4>)
 800744e:	2201      	movs	r2, #1
 8007450:	0019      	movs	r1, r3
 8007452:	f00d ff4c 	bl	80152ee <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007456:	2001      	movs	r0, #1
 8007458:	f00c fcc2 	bl	8013de0 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800745c:	4bb7      	ldr	r3, [pc, #732]	@ (800773c <ESP_Upkeep+0x3b8>)
 800745e:	2200      	movs	r2, #0
 8007460:	2101      	movs	r1, #1
 8007462:	0018      	movs	r0, r3
 8007464:	f00d ff43 	bl	80152ee <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007468:	2001      	movs	r0, #1
 800746a:	f00c fcb9 	bl	8013de0 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800746e:	4bb3      	ldr	r3, [pc, #716]	@ (800773c <ESP_Upkeep+0x3b8>)
 8007470:	2201      	movs	r2, #1
 8007472:	2102      	movs	r1, #2
 8007474:	0018      	movs	r0, r3
 8007476:	f00d ff3a 	bl	80152ee <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800747a:	2001      	movs	r0, #1
 800747c:	f00c fcb0 	bl	8013de0 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007480:	4bae      	ldr	r3, [pc, #696]	@ (800773c <ESP_Upkeep+0x3b8>)
 8007482:	2201      	movs	r2, #1
 8007484:	2101      	movs	r1, #1
 8007486:	0018      	movs	r0, r3
 8007488:	f00d ff31 	bl	80152ee <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800748c:	f00c fc9e 	bl	8013dcc <HAL_GetTick>
 8007490:	0003      	movs	r3, r0
 8007492:	22af      	movs	r2, #175	@ 0xaf
 8007494:	0092      	lsls	r2, r2, #2
 8007496:	189a      	adds	r2, r3, r2
 8007498:	4ba9      	ldr	r3, [pc, #676]	@ (8007740 <ESP_Upkeep+0x3bc>)
 800749a:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800749c:	4ba5      	ldr	r3, [pc, #660]	@ (8007734 <ESP_Upkeep+0x3b0>)
 800749e:	2201      	movs	r2, #1
 80074a0:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80074a2:	2380      	movs	r3, #128	@ 0x80
 80074a4:	005a      	lsls	r2, r3, #1
 80074a6:	4ba7      	ldr	r3, [pc, #668]	@ (8007744 <ESP_Upkeep+0x3c0>)
 80074a8:	0011      	movs	r1, r2
 80074aa:	0018      	movs	r0, r3
 80074ac:	f7fd fd00 	bl	8004eb0 <ESP_Receive>
 80074b0:	1e03      	subs	r3, r0, #0
 80074b2:	d101      	bne.n	80074b8 <ESP_Upkeep+0x134>
 80074b4:	f000 fc09 	bl	8007cca <ESP_Upkeep+0x946>
        EspState = ESP_STATE_WAIT_AWAKE;
 80074b8:	4b95      	ldr	r3, [pc, #596]	@ (8007710 <ESP_Upkeep+0x38c>)
 80074ba:	220f      	movs	r2, #15
 80074bc:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80074be:	f00c fc85 	bl	8013dcc <HAL_GetTick>
 80074c2:	0003      	movs	r3, r0
 80074c4:	22fa      	movs	r2, #250	@ 0xfa
 80074c6:	00d2      	lsls	r2, r2, #3
 80074c8:	189a      	adds	r2, r3, r2
 80074ca:	4b9f      	ldr	r3, [pc, #636]	@ (8007748 <ESP_Upkeep+0x3c4>)
 80074cc:	601a      	str	r2, [r3, #0]
      }
      break;
 80074ce:	f000 fbfc 	bl	8007cca <ESP_Upkeep+0x946>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80074d2:	2001      	movs	r0, #1
 80074d4:	f7ff fb1a 	bl	8006b0c <DMA_ProcessBuffer>
 80074d8:	0003      	movs	r3, r0
 80074da:	001a      	movs	r2, r3
 80074dc:	4b9b      	ldr	r3, [pc, #620]	@ (800774c <ESP_Upkeep+0x3c8>)
 80074de:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80074e0:	4b9a      	ldr	r3, [pc, #616]	@ (800774c <ESP_Upkeep+0x3c8>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	1dbc      	adds	r4, r7, #6
 80074e6:	2101      	movs	r1, #1
 80074e8:	0018      	movs	r0, r3
 80074ea:	f7ff fc0f 	bl	8006d0c <ATCompare>
 80074ee:	0003      	movs	r3, r0
 80074f0:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80074f2:	1dbb      	adds	r3, r7, #6
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d108      	bne.n	800750c <ESP_Upkeep+0x188>
 80074fa:	4b93      	ldr	r3, [pc, #588]	@ (8007748 <ESP_Upkeep+0x3c4>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	0018      	movs	r0, r3
 8007500:	f00b fece 	bl	80132a0 <TimestampIsReached>
 8007504:	1e03      	subs	r3, r0, #0
 8007506:	d101      	bne.n	800750c <ESP_Upkeep+0x188>
 8007508:	f000 fbe1 	bl	8007cce <ESP_Upkeep+0x94a>
          EspState = ESP_STATE_MODE_SELECT;
 800750c:	4b80      	ldr	r3, [pc, #512]	@ (8007710 <ESP_Upkeep+0x38c>)
 800750e:	220b      	movs	r2, #11
 8007510:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007512:	f000 fbdc 	bl	8007cce <ESP_Upkeep+0x94a>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8007516:	4b8e      	ldr	r3, [pc, #568]	@ (8007750 <ESP_Upkeep+0x3cc>)
 8007518:	2209      	movs	r2, #9
 800751a:	2114      	movs	r1, #20
 800751c:	0018      	movs	r0, r3
 800751e:	f01e fa09 	bl	8025934 <memset>
      if(!InitIsDone || WifiReset){
 8007522:	4b8c      	ldr	r3, [pc, #560]	@ (8007754 <ESP_Upkeep+0x3d0>)
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	2201      	movs	r2, #1
 8007528:	4053      	eors	r3, r2
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d103      	bne.n	8007538 <ESP_Upkeep+0x1b4>
 8007530:	4b89      	ldr	r3, [pc, #548]	@ (8007758 <ESP_Upkeep+0x3d4>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01a      	beq.n	800756e <ESP_Upkeep+0x1ea>
        memcpy(ATCommandArray, AT_INIT, 7);
 8007538:	4b85      	ldr	r3, [pc, #532]	@ (8007750 <ESP_Upkeep+0x3cc>)
 800753a:	4a88      	ldr	r2, [pc, #544]	@ (800775c <ESP_Upkeep+0x3d8>)
 800753c:	6811      	ldr	r1, [r2, #0]
 800753e:	6019      	str	r1, [r3, #0]
 8007540:	8891      	ldrh	r1, [r2, #4]
 8007542:	8099      	strh	r1, [r3, #4]
 8007544:	7992      	ldrb	r2, [r2, #6]
 8007546:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8007548:	4b71      	ldr	r3, [pc, #452]	@ (8007710 <ESP_Upkeep+0x38c>)
 800754a:	2204      	movs	r2, #4
 800754c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800754e:	4b84      	ldr	r3, [pc, #528]	@ (8007760 <ESP_Upkeep+0x3dc>)
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8007554:	4b71      	ldr	r3, [pc, #452]	@ (800771c <ESP_Upkeep+0x398>)
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800755a:	4b81      	ldr	r3, [pc, #516]	@ (8007760 <ESP_Upkeep+0x3dc>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	001a      	movs	r2, r3
 8007560:	4b7b      	ldr	r3, [pc, #492]	@ (8007750 <ESP_Upkeep+0x3cc>)
 8007562:	5c9a      	ldrb	r2, [r3, r2]
 8007564:	4b6c      	ldr	r3, [pc, #432]	@ (8007718 <ESP_Upkeep+0x394>)
 8007566:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007568:	4b6d      	ldr	r3, [pc, #436]	@ (8007720 <ESP_Upkeep+0x39c>)
 800756a:	2200      	movs	r2, #0
 800756c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800756e:	4b79      	ldr	r3, [pc, #484]	@ (8007754 <ESP_Upkeep+0x3d0>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d01f      	beq.n	80075b6 <ESP_Upkeep+0x232>
 8007576:	4b7b      	ldr	r3, [pc, #492]	@ (8007764 <ESP_Upkeep+0x3e0>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2201      	movs	r2, #1
 800757c:	4053      	eors	r3, r2
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d018      	beq.n	80075b6 <ESP_Upkeep+0x232>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8007584:	4b72      	ldr	r3, [pc, #456]	@ (8007750 <ESP_Upkeep+0x3cc>)
 8007586:	4a78      	ldr	r2, [pc, #480]	@ (8007768 <ESP_Upkeep+0x3e4>)
 8007588:	6811      	ldr	r1, [r2, #0]
 800758a:	6019      	str	r1, [r3, #0]
 800758c:	8892      	ldrh	r2, [r2, #4]
 800758e:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8007590:	4b5f      	ldr	r3, [pc, #380]	@ (8007710 <ESP_Upkeep+0x38c>)
 8007592:	2204      	movs	r2, #4
 8007594:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007596:	4b72      	ldr	r3, [pc, #456]	@ (8007760 <ESP_Upkeep+0x3dc>)
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800759c:	4b5f      	ldr	r3, [pc, #380]	@ (800771c <ESP_Upkeep+0x398>)
 800759e:	2201      	movs	r2, #1
 80075a0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80075a2:	4b6f      	ldr	r3, [pc, #444]	@ (8007760 <ESP_Upkeep+0x3dc>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	001a      	movs	r2, r3
 80075a8:	4b69      	ldr	r3, [pc, #420]	@ (8007750 <ESP_Upkeep+0x3cc>)
 80075aa:	5c9a      	ldrb	r2, [r3, r2]
 80075ac:	4b5a      	ldr	r3, [pc, #360]	@ (8007718 <ESP_Upkeep+0x394>)
 80075ae:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80075b0:	4b5b      	ldr	r3, [pc, #364]	@ (8007720 <ESP_Upkeep+0x39c>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80075b6:	4b67      	ldr	r3, [pc, #412]	@ (8007754 <ESP_Upkeep+0x3d0>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d021      	beq.n	8007602 <ESP_Upkeep+0x27e>
 80075be:	4b69      	ldr	r3, [pc, #420]	@ (8007764 <ESP_Upkeep+0x3e0>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01d      	beq.n	8007602 <ESP_Upkeep+0x27e>
 80075c6:	4b69      	ldr	r3, [pc, #420]	@ (800776c <ESP_Upkeep+0x3e8>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2201      	movs	r2, #1
 80075cc:	4053      	eors	r3, r2
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d016      	beq.n	8007602 <ESP_Upkeep+0x27e>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80075d4:	4b66      	ldr	r3, [pc, #408]	@ (8007770 <ESP_Upkeep+0x3ec>)
 80075d6:	881a      	ldrh	r2, [r3, #0]
 80075d8:	4b5d      	ldr	r3, [pc, #372]	@ (8007750 <ESP_Upkeep+0x3cc>)
 80075da:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80075dc:	4b4c      	ldr	r3, [pc, #304]	@ (8007710 <ESP_Upkeep+0x38c>)
 80075de:	2204      	movs	r2, #4
 80075e0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80075e2:	4b5f      	ldr	r3, [pc, #380]	@ (8007760 <ESP_Upkeep+0x3dc>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80075e8:	4b4c      	ldr	r3, [pc, #304]	@ (800771c <ESP_Upkeep+0x398>)
 80075ea:	2204      	movs	r2, #4
 80075ec:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80075ee:	4b5c      	ldr	r3, [pc, #368]	@ (8007760 <ESP_Upkeep+0x3dc>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	001a      	movs	r2, r3
 80075f4:	4b56      	ldr	r3, [pc, #344]	@ (8007750 <ESP_Upkeep+0x3cc>)
 80075f6:	5c9a      	ldrb	r2, [r3, r2]
 80075f8:	4b47      	ldr	r3, [pc, #284]	@ (8007718 <ESP_Upkeep+0x394>)
 80075fa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80075fc:	4b48      	ldr	r3, [pc, #288]	@ (8007720 <ESP_Upkeep+0x39c>)
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8007602:	4b54      	ldr	r3, [pc, #336]	@ (8007754 <ESP_Upkeep+0x3d0>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d02c      	beq.n	8007664 <ESP_Upkeep+0x2e0>
 800760a:	4b56      	ldr	r3, [pc, #344]	@ (8007764 <ESP_Upkeep+0x3e0>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d028      	beq.n	8007664 <ESP_Upkeep+0x2e0>
 8007612:	4b56      	ldr	r3, [pc, #344]	@ (800776c <ESP_Upkeep+0x3e8>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d024      	beq.n	8007664 <ESP_Upkeep+0x2e0>
 800761a:	4b56      	ldr	r3, [pc, #344]	@ (8007774 <ESP_Upkeep+0x3f0>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2201      	movs	r2, #1
 8007620:	4053      	eors	r3, r2
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01d      	beq.n	8007664 <ESP_Upkeep+0x2e0>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007628:	4b49      	ldr	r3, [pc, #292]	@ (8007750 <ESP_Upkeep+0x3cc>)
 800762a:	4a53      	ldr	r2, [pc, #332]	@ (8007778 <ESP_Upkeep+0x3f4>)
 800762c:	8811      	ldrh	r1, [r2, #0]
 800762e:	8019      	strh	r1, [r3, #0]
 8007630:	7892      	ldrb	r2, [r2, #2]
 8007632:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8007634:	4b36      	ldr	r3, [pc, #216]	@ (8007710 <ESP_Upkeep+0x38c>)
 8007636:	2204      	movs	r2, #4
 8007638:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800763a:	4b49      	ldr	r3, [pc, #292]	@ (8007760 <ESP_Upkeep+0x3dc>)
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007640:	4b36      	ldr	r3, [pc, #216]	@ (800771c <ESP_Upkeep+0x398>)
 8007642:	2202      	movs	r2, #2
 8007644:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007646:	f00c fbc1 	bl	8013dcc <HAL_GetTick>
 800764a:	0002      	movs	r2, r0
 800764c:	4b4b      	ldr	r3, [pc, #300]	@ (800777c <ESP_Upkeep+0x3f8>)
 800764e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007650:	4b43      	ldr	r3, [pc, #268]	@ (8007760 <ESP_Upkeep+0x3dc>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	001a      	movs	r2, r3
 8007656:	4b3e      	ldr	r3, [pc, #248]	@ (8007750 <ESP_Upkeep+0x3cc>)
 8007658:	5c9a      	ldrb	r2, [r3, r2]
 800765a:	4b2f      	ldr	r3, [pc, #188]	@ (8007718 <ESP_Upkeep+0x394>)
 800765c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800765e:	4b30      	ldr	r3, [pc, #192]	@ (8007720 <ESP_Upkeep+0x39c>)
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8007664:	4b3b      	ldr	r3, [pc, #236]	@ (8007754 <ESP_Upkeep+0x3d0>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d027      	beq.n	80076bc <ESP_Upkeep+0x338>
 800766c:	4b3d      	ldr	r3, [pc, #244]	@ (8007764 <ESP_Upkeep+0x3e0>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d023      	beq.n	80076bc <ESP_Upkeep+0x338>
 8007674:	4b3d      	ldr	r3, [pc, #244]	@ (800776c <ESP_Upkeep+0x3e8>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01f      	beq.n	80076bc <ESP_Upkeep+0x338>
 800767c:	4b3d      	ldr	r3, [pc, #244]	@ (8007774 <ESP_Upkeep+0x3f0>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01b      	beq.n	80076bc <ESP_Upkeep+0x338>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8007684:	4b3e      	ldr	r3, [pc, #248]	@ (8007780 <ESP_Upkeep+0x3fc>)
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	4b31      	ldr	r3, [pc, #196]	@ (8007750 <ESP_Upkeep+0x3cc>)
 800768a:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800768c:	4b20      	ldr	r3, [pc, #128]	@ (8007710 <ESP_Upkeep+0x38c>)
 800768e:	2204      	movs	r2, #4
 8007690:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007692:	4b33      	ldr	r3, [pc, #204]	@ (8007760 <ESP_Upkeep+0x3dc>)
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8007698:	4b20      	ldr	r3, [pc, #128]	@ (800771c <ESP_Upkeep+0x398>)
 800769a:	2205      	movs	r2, #5
 800769c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800769e:	f00c fb95 	bl	8013dcc <HAL_GetTick>
 80076a2:	0002      	movs	r2, r0
 80076a4:	4b35      	ldr	r3, [pc, #212]	@ (800777c <ESP_Upkeep+0x3f8>)
 80076a6:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80076a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007760 <ESP_Upkeep+0x3dc>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	001a      	movs	r2, r3
 80076ae:	4b28      	ldr	r3, [pc, #160]	@ (8007750 <ESP_Upkeep+0x3cc>)
 80076b0:	5c9a      	ldrb	r2, [r3, r2]
 80076b2:	4b19      	ldr	r3, [pc, #100]	@ (8007718 <ESP_Upkeep+0x394>)
 80076b4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80076b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007720 <ESP_Upkeep+0x39c>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80076bc:	4b31      	ldr	r3, [pc, #196]	@ (8007784 <ESP_Upkeep+0x400>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d100      	bne.n	80076c6 <ESP_Upkeep+0x342>
 80076c4:	e305      	b.n	8007cd2 <ESP_Upkeep+0x94e>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80076c6:	4b22      	ldr	r3, [pc, #136]	@ (8007750 <ESP_Upkeep+0x3cc>)
 80076c8:	4a2f      	ldr	r2, [pc, #188]	@ (8007788 <ESP_Upkeep+0x404>)
 80076ca:	6811      	ldr	r1, [r2, #0]
 80076cc:	6019      	str	r1, [r3, #0]
 80076ce:	7912      	ldrb	r2, [r2, #4]
 80076d0:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80076d2:	4a2e      	ldr	r2, [pc, #184]	@ (800778c <ESP_Upkeep+0x408>)
 80076d4:	4b14      	ldr	r3, [pc, #80]	@ (8007728 <ESP_Upkeep+0x3a4>)
 80076d6:	0019      	movs	r1, r3
 80076d8:	2003      	movs	r0, #3
 80076da:	f00b fe37 	bl	801334c <CreateLine>
        DisableConnectedDevices();
 80076de:	f005 fe63 	bl	800d3a8 <DisableConnectedDevices>
        usblog = false;
 80076e2:	4b2b      	ldr	r3, [pc, #172]	@ (8007790 <ESP_Upkeep+0x40c>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80076e8:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <ESP_Upkeep+0x38c>)
 80076ea:	2204      	movs	r2, #4
 80076ec:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80076ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007760 <ESP_Upkeep+0x3dc>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80076f4:	4b09      	ldr	r3, [pc, #36]	@ (800771c <ESP_Upkeep+0x398>)
 80076f6:	2203      	movs	r2, #3
 80076f8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80076fa:	4b19      	ldr	r3, [pc, #100]	@ (8007760 <ESP_Upkeep+0x3dc>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	001a      	movs	r2, r3
 8007700:	4b13      	ldr	r3, [pc, #76]	@ (8007750 <ESP_Upkeep+0x3cc>)
 8007702:	5c9a      	ldrb	r2, [r3, r2]
 8007704:	4b04      	ldr	r3, [pc, #16]	@ (8007718 <ESP_Upkeep+0x394>)
 8007706:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007708:	4b05      	ldr	r3, [pc, #20]	@ (8007720 <ESP_Upkeep+0x39c>)
 800770a:	2200      	movs	r2, #0
 800770c:	701a      	strb	r2, [r3, #0]
      }
    break;
 800770e:	e2e0      	b.n	8007cd2 <ESP_Upkeep+0x94e>
 8007710:	2000002c 	.word	0x2000002c
 8007714:	20000003 	.word	0x20000003
 8007718:	20000676 	.word	0x20000676
 800771c:	20000677 	.word	0x20000677
 8007720:	20000675 	.word	0x20000675
 8007724:	0802ae0c 	.word	0x0802ae0c
 8007728:	08029db8 	.word	0x08029db8
 800772c:	0802db54 	.word	0x0802db54
 8007730:	20000e28 	.word	0x20000e28
 8007734:	200005a0 	.word	0x200005a0
 8007738:	50000800 	.word	0x50000800
 800773c:	50001c00 	.word	0x50001c00
 8007740:	2000066c 	.word	0x2000066c
 8007744:	200004a0 	.word	0x200004a0
 8007748:	2000078c 	.word	0x2000078c
 800774c:	2000002f 	.word	0x2000002f
 8007750:	2000065c 	.word	0x2000065c
 8007754:	200005a1 	.word	0x200005a1
 8007758:	200005a2 	.word	0x200005a2
 800775c:	20000004 	.word	0x20000004
 8007760:	20000666 	.word	0x20000666
 8007764:	200005a4 	.word	0x200005a4
 8007768:	20000014 	.word	0x20000014
 800776c:	200005a5 	.word	0x200005a5
 8007770:	20000010 	.word	0x20000010
 8007774:	20000002 	.word	0x20000002
 8007778:	2000000c 	.word	0x2000000c
 800777c:	200005b8 	.word	0x200005b8
 8007780:	20000024 	.word	0x20000024
 8007784:	200005a3 	.word	0x200005a3
 8007788:	2000001c 	.word	0x2000001c
 800778c:	0802ae38 	.word	0x0802ae38
 8007790:	20000207 	.word	0x20000207

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8007794:	4bdd      	ldr	r3, [pc, #884]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	1dfc      	adds	r4, r7, #7
 800779a:	0018      	movs	r0, r3
 800779c:	f7ff faf8 	bl	8006d90 <AT_Send>
 80077a0:	0003      	movs	r3, r0
 80077a2:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80077a4:	1dfb      	adds	r3, r7, #7
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d100      	bne.n	80077ae <ESP_Upkeep+0x42a>
 80077ac:	e293      	b.n	8007cd6 <ESP_Upkeep+0x952>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 80077ae:	4bd8      	ldr	r3, [pc, #864]	@ (8007b10 <ESP_Upkeep+0x78c>)
 80077b0:	2203      	movs	r2, #3
 80077b2:	701a      	strb	r2, [r3, #0]
        }
    break;
 80077b4:	e28f      	b.n	8007cd6 <ESP_Upkeep+0x952>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80077b6:	4bd7      	ldr	r3, [pc, #860]	@ (8007b14 <ESP_Upkeep+0x790>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d007      	beq.n	80077ce <ESP_Upkeep+0x44a>
 80077be:	4bd6      	ldr	r3, [pc, #856]	@ (8007b18 <ESP_Upkeep+0x794>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d003      	beq.n	80077ce <ESP_Upkeep+0x44a>
        EspState = ESP_STATE_MODE_SELECT;
 80077c6:	4bd2      	ldr	r3, [pc, #840]	@ (8007b10 <ESP_Upkeep+0x78c>)
 80077c8:	220b      	movs	r2, #11
 80077ca:	701a      	strb	r2, [r3, #0]
        break;
 80077cc:	e28a      	b.n	8007ce4 <ESP_Upkeep+0x960>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 80077ce:	4bd3      	ldr	r3, [pc, #844]	@ (8007b1c <ESP_Upkeep+0x798>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	0018      	movs	r0, r3
 80077d4:	f00b fd64 	bl	80132a0 <TimestampIsReached>
 80077d8:	1e03      	subs	r3, r0, #0
 80077da:	d100      	bne.n	80077de <ESP_Upkeep+0x45a>
 80077dc:	e27d      	b.n	8007cda <ESP_Upkeep+0x956>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80077de:	4bd0      	ldr	r3, [pc, #832]	@ (8007b20 <ESP_Upkeep+0x79c>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	0018      	movs	r0, r3
 80077e4:	f7ff f992 	bl	8006b0c <DMA_ProcessBuffer>
 80077e8:	0003      	movs	r3, r0
 80077ea:	001a      	movs	r2, r3
 80077ec:	4bcd      	ldr	r3, [pc, #820]	@ (8007b24 <ESP_Upkeep+0x7a0>)
 80077ee:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80077f0:	4bcc      	ldr	r3, [pc, #816]	@ (8007b24 <ESP_Upkeep+0x7a0>)
 80077f2:	781a      	ldrb	r2, [r3, #0]
 80077f4:	4bca      	ldr	r3, [pc, #808]	@ (8007b20 <ESP_Upkeep+0x79c>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	1d7c      	adds	r4, r7, #5
 80077fa:	0019      	movs	r1, r3
 80077fc:	0010      	movs	r0, r2
 80077fe:	f7ff fa85 	bl	8006d0c <ATCompare>
 8007802:	0003      	movs	r3, r0
 8007804:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007806:	4bc7      	ldr	r3, [pc, #796]	@ (8007b24 <ESP_Upkeep+0x7a0>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d138      	bne.n	8007880 <ESP_Upkeep+0x4fc>
          if(ATCommand == AT_SENDDATA){
 800780e:	4bbf      	ldr	r3, [pc, #764]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2b0f      	cmp	r3, #15
 8007814:	d108      	bne.n	8007828 <ESP_Upkeep+0x4a4>
            ATCommand = AT_HTTPCPOST;
 8007816:	4bbd      	ldr	r3, [pc, #756]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007818:	220e      	movs	r2, #14
 800781a:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800781c:	4bc0      	ldr	r3, [pc, #768]	@ (8007b20 <ESP_Upkeep+0x79c>)
 800781e:	2202      	movs	r2, #2
 8007820:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007822:	4bc1      	ldr	r3, [pc, #772]	@ (8007b28 <ESP_Upkeep+0x7a4>)
 8007824:	2201      	movs	r2, #1
 8007826:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007828:	4bb9      	ldr	r3, [pc, #740]	@ (8007b10 <ESP_Upkeep+0x78c>)
 800782a:	2204      	movs	r2, #4
 800782c:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 800782e:	4bbf      	ldr	r3, [pc, #764]	@ (8007b2c <ESP_Upkeep+0x7a8>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	3301      	adds	r3, #1
 8007834:	b2da      	uxtb	r2, r3
 8007836:	4bbd      	ldr	r3, [pc, #756]	@ (8007b2c <ESP_Upkeep+0x7a8>)
 8007838:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 800783a:	4bbc      	ldr	r3, [pc, #752]	@ (8007b2c <ESP_Upkeep+0x7a8>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d91e      	bls.n	8007880 <ESP_Upkeep+0x4fc>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007842:	f00c fac3 	bl	8013dcc <HAL_GetTick>
 8007846:	0003      	movs	r3, r0
 8007848:	4ab9      	ldr	r2, [pc, #740]	@ (8007b30 <ESP_Upkeep+0x7ac>)
 800784a:	189a      	adds	r2, r3, r2
 800784c:	4bb3      	ldr	r3, [pc, #716]	@ (8007b1c <ESP_Upkeep+0x798>)
 800784e:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007850:	4bb8      	ldr	r3, [pc, #736]	@ (8007b34 <ESP_Upkeep+0x7b0>)
 8007852:	2201      	movs	r2, #1
 8007854:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007856:	f7ff fa4b 	bl	8006cf0 <clearDMABuffer>
            stop = HAL_GetTick();
 800785a:	f00c fab7 	bl	8013dcc <HAL_GetTick>
 800785e:	0002      	movs	r2, r0
 8007860:	4bb5      	ldr	r3, [pc, #724]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 8007862:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007864:	4bb4      	ldr	r3, [pc, #720]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	4bb4      	ldr	r3, [pc, #720]	@ (8007b3c <ESP_Upkeep+0x7b8>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	4ab4      	ldr	r2, [pc, #720]	@ (8007b40 <ESP_Upkeep+0x7bc>)
 8007870:	49b4      	ldr	r1, [pc, #720]	@ (8007b44 <ESP_Upkeep+0x7c0>)
 8007872:	2001      	movs	r0, #1
 8007874:	f00b fd6a 	bl	801334c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007878:	4ba5      	ldr	r3, [pc, #660]	@ (8007b10 <ESP_Upkeep+0x78c>)
 800787a:	220d      	movs	r2, #13
 800787c:	701a      	strb	r2, [r3, #0]
            break;
 800787e:	e231      	b.n	8007ce4 <ESP_Upkeep+0x960>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007880:	4ba8      	ldr	r3, [pc, #672]	@ (8007b24 <ESP_Upkeep+0x7a0>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b03      	cmp	r3, #3
 8007886:	d106      	bne.n	8007896 <ESP_Upkeep+0x512>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007888:	f00c faa0 	bl	8013dcc <HAL_GetTick>
 800788c:	0003      	movs	r3, r0
 800788e:	330a      	adds	r3, #10
 8007890:	001a      	movs	r2, r3
 8007892:	4ba2      	ldr	r3, [pc, #648]	@ (8007b1c <ESP_Upkeep+0x798>)
 8007894:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8007896:	4ba3      	ldr	r3, [pc, #652]	@ (8007b24 <ESP_Upkeep+0x7a0>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b0a      	cmp	r3, #10
 800789c:	d106      	bne.n	80078ac <ESP_Upkeep+0x528>
          ESPTimeStamp = HAL_GetTick() + 10;
 800789e:	f00c fa95 	bl	8013dcc <HAL_GetTick>
 80078a2:	0003      	movs	r3, r0
 80078a4:	330a      	adds	r3, #10
 80078a6:	001a      	movs	r2, r3
 80078a8:	4b9c      	ldr	r3, [pc, #624]	@ (8007b1c <ESP_Upkeep+0x798>)
 80078aa:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80078ac:	4b9d      	ldr	r3, [pc, #628]	@ (8007b24 <ESP_Upkeep+0x7a0>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b06      	cmp	r3, #6
 80078b2:	d14b      	bne.n	800794c <ESP_Upkeep+0x5c8>
          timeoutcntr++;
 80078b4:	4ba4      	ldr	r3, [pc, #656]	@ (8007b48 <ESP_Upkeep+0x7c4>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	3301      	adds	r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	4ba2      	ldr	r3, [pc, #648]	@ (8007b48 <ESP_Upkeep+0x7c4>)
 80078be:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 80078c0:	4aa2      	ldr	r2, [pc, #648]	@ (8007b4c <ESP_Upkeep+0x7c8>)
 80078c2:	4ba0      	ldr	r3, [pc, #640]	@ (8007b44 <ESP_Upkeep+0x7c0>)
 80078c4:	0019      	movs	r1, r3
 80078c6:	2001      	movs	r0, #1
 80078c8:	f00b fd40 	bl	801334c <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 80078cc:	4b9e      	ldr	r3, [pc, #632]	@ (8007b48 <ESP_Upkeep+0x7c4>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d924      	bls.n	800791e <ESP_Upkeep+0x59a>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 80078d4:	f00c fa7a 	bl	8013dcc <HAL_GetTick>
 80078d8:	0003      	movs	r3, r0
 80078da:	4a9d      	ldr	r2, [pc, #628]	@ (8007b50 <ESP_Upkeep+0x7cc>)
 80078dc:	189a      	adds	r2, r3, r2
 80078de:	4b8f      	ldr	r3, [pc, #572]	@ (8007b1c <ESP_Upkeep+0x798>)
 80078e0:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80078e2:	4b94      	ldr	r3, [pc, #592]	@ (8007b34 <ESP_Upkeep+0x7b0>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80078e8:	f7ff fa02 	bl	8006cf0 <clearDMABuffer>
            stop = HAL_GetTick();
 80078ec:	f00c fa6e 	bl	8013dcc <HAL_GetTick>
 80078f0:	0002      	movs	r2, r0
 80078f2:	4b91      	ldr	r3, [pc, #580]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 80078f4:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 80078f6:	4b90      	ldr	r3, [pc, #576]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4b90      	ldr	r3, [pc, #576]	@ (8007b3c <ESP_Upkeep+0x7b8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	4a94      	ldr	r2, [pc, #592]	@ (8007b54 <ESP_Upkeep+0x7d0>)
 8007902:	4990      	ldr	r1, [pc, #576]	@ (8007b44 <ESP_Upkeep+0x7c0>)
 8007904:	2001      	movs	r0, #1
 8007906:	f00b fd21 	bl	801334c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800790a:	4b81      	ldr	r3, [pc, #516]	@ (8007b10 <ESP_Upkeep+0x78c>)
 800790c:	220d      	movs	r2, #13
 800790e:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007910:	4b7e      	ldr	r3, [pc, #504]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007912:	2214      	movs	r2, #20
 8007914:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007916:	4b82      	ldr	r3, [pc, #520]	@ (8007b20 <ESP_Upkeep+0x79c>)
 8007918:	2200      	movs	r2, #0
 800791a:	701a      	strb	r2, [r3, #0]
            break;
 800791c:	e1e2      	b.n	8007ce4 <ESP_Upkeep+0x960>
          }
          if(ATCommand != AT_SENDDATA){
 800791e:	4b7b      	ldr	r3, [pc, #492]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b0f      	cmp	r3, #15
 8007924:	d003      	beq.n	800792e <ESP_Upkeep+0x5aa>
            EspState = ESP_STATE_SEND;
 8007926:	4b7a      	ldr	r3, [pc, #488]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007928:	2204      	movs	r2, #4
 800792a:	701a      	strb	r2, [r3, #0]
 800792c:	e00e      	b.n	800794c <ESP_Upkeep+0x5c8>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 800792e:	4b77      	ldr	r3, [pc, #476]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007930:	220e      	movs	r2, #14
 8007932:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007934:	4b7c      	ldr	r3, [pc, #496]	@ (8007b28 <ESP_Upkeep+0x7a4>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	3b01      	subs	r3, #1
 800793a:	b2da      	uxtb	r2, r3
 800793c:	4b7a      	ldr	r3, [pc, #488]	@ (8007b28 <ESP_Upkeep+0x7a4>)
 800793e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007940:	4b77      	ldr	r3, [pc, #476]	@ (8007b20 <ESP_Upkeep+0x79c>)
 8007942:	2202      	movs	r2, #2
 8007944:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007946:	4b72      	ldr	r3, [pc, #456]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007948:	2204      	movs	r2, #4
 800794a:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 800794c:	1d7b      	adds	r3, r7, #5
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d100      	bne.n	8007956 <ESP_Upkeep+0x5d2>
 8007954:	e1c1      	b.n	8007cda <ESP_Upkeep+0x956>
          EspState = ESP_STATE_NEXT_AT;
 8007956:	4b6e      	ldr	r3, [pc, #440]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007958:	2205      	movs	r2, #5
 800795a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800795c:	e1bd      	b.n	8007cda <ESP_Upkeep+0x956>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 800795e:	4b72      	ldr	r3, [pc, #456]	@ (8007b28 <ESP_Upkeep+0x7a4>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	3301      	adds	r3, #1
 8007964:	b2da      	uxtb	r2, r3
 8007966:	4b70      	ldr	r3, [pc, #448]	@ (8007b28 <ESP_Upkeep+0x7a4>)
 8007968:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 800796a:	4b6f      	ldr	r3, [pc, #444]	@ (8007b28 <ESP_Upkeep+0x7a4>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	001a      	movs	r2, r3
 8007970:	4b79      	ldr	r3, [pc, #484]	@ (8007b58 <ESP_Upkeep+0x7d4>)
 8007972:	5c9a      	ldrb	r2, [r3, r2]
 8007974:	4b65      	ldr	r3, [pc, #404]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007976:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007978:	4b64      	ldr	r3, [pc, #400]	@ (8007b0c <ESP_Upkeep+0x788>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b03      	cmp	r3, #3
 800797e:	d102      	bne.n	8007986 <ESP_Upkeep+0x602>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007980:	4b67      	ldr	r3, [pc, #412]	@ (8007b20 <ESP_Upkeep+0x79c>)
 8007982:	2201      	movs	r2, #1
 8007984:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007986:	4b61      	ldr	r3, [pc, #388]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b0e      	cmp	r3, #14
 800798c:	d102      	bne.n	8007994 <ESP_Upkeep+0x610>
        ATExpectation = RECEIVE_EXPECTATION_START;
 800798e:	4b64      	ldr	r3, [pc, #400]	@ (8007b20 <ESP_Upkeep+0x79c>)
 8007990:	2202      	movs	r2, #2
 8007992:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007994:	4b5d      	ldr	r3, [pc, #372]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b0e      	cmp	r3, #14
 800799a:	d006      	beq.n	80079aa <ESP_Upkeep+0x626>
 800799c:	4b5b      	ldr	r3, [pc, #364]	@ (8007b0c <ESP_Upkeep+0x788>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d002      	beq.n	80079aa <ESP_Upkeep+0x626>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80079a4:	4b5e      	ldr	r3, [pc, #376]	@ (8007b20 <ESP_Upkeep+0x79c>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80079aa:	4b58      	ldr	r3, [pc, #352]	@ (8007b0c <ESP_Upkeep+0x788>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b11      	cmp	r3, #17
 80079b0:	d102      	bne.n	80079b8 <ESP_Upkeep+0x634>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80079b2:	4b5b      	ldr	r3, [pc, #364]	@ (8007b20 <ESP_Upkeep+0x79c>)
 80079b4:	2205      	movs	r2, #5
 80079b6:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80079b8:	4b55      	ldr	r3, [pc, #340]	@ (8007b10 <ESP_Upkeep+0x78c>)
 80079ba:	2204      	movs	r2, #4
 80079bc:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80079be:	4b53      	ldr	r3, [pc, #332]	@ (8007b0c <ESP_Upkeep+0x788>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b14      	cmp	r3, #20
 80079c4:	d000      	beq.n	80079c8 <ESP_Upkeep+0x644>
 80079c6:	e18a      	b.n	8007cde <ESP_Upkeep+0x95a>
        if(Mode == AT_MODE_SEND){
 80079c8:	4b53      	ldr	r3, [pc, #332]	@ (8007b18 <ESP_Upkeep+0x794>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d124      	bne.n	8007a1a <ESP_Upkeep+0x696>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80079d0:	f00c f9fc 	bl	8013dcc <HAL_GetTick>
 80079d4:	0003      	movs	r3, r0
 80079d6:	4a56      	ldr	r2, [pc, #344]	@ (8007b30 <ESP_Upkeep+0x7ac>)
 80079d8:	189a      	adds	r2, r3, r2
 80079da:	4b50      	ldr	r3, [pc, #320]	@ (8007b1c <ESP_Upkeep+0x798>)
 80079dc:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 80079de:	f7ff f987 	bl	8006cf0 <clearDMABuffer>
          stop = HAL_GetTick();
 80079e2:	f00c f9f3 	bl	8013dcc <HAL_GetTick>
 80079e6:	0002      	movs	r2, r0
 80079e8:	4b53      	ldr	r3, [pc, #332]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 80079ea:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 80079ec:	4b52      	ldr	r3, [pc, #328]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	4b52      	ldr	r3, [pc, #328]	@ (8007b3c <ESP_Upkeep+0x7b8>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	4a59      	ldr	r2, [pc, #356]	@ (8007b5c <ESP_Upkeep+0x7d8>)
 80079f8:	4959      	ldr	r1, [pc, #356]	@ (8007b60 <ESP_Upkeep+0x7dc>)
 80079fa:	2002      	movs	r0, #2
 80079fc:	f00b fca6 	bl	801334c <CreateLine>
          ResetdBAmax();
 8007a00:	f005 fd5a 	bl	800d4b8 <ResetdBAmax>
          resetMaxMeasurementValues();
 8007a04:	f7fd f9a2 	bl	8004d4c <resetMaxMeasurementValues>
          showTime();
 8007a08:	f001 fcb2 	bl	8009370 <showTime>
          ESPTransmitDone = true;
 8007a0c:	4b49      	ldr	r3, [pc, #292]	@ (8007b34 <ESP_Upkeep+0x7b0>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007a12:	4b3f      	ldr	r3, [pc, #252]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007a14:	220d      	movs	r2, #13
 8007a16:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007a18:	e161      	b.n	8007cde <ESP_Upkeep+0x95a>
        else if (Mode == AT_MODE_GETTIME) {
 8007a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8007b18 <ESP_Upkeep+0x794>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d13a      	bne.n	8007a98 <ESP_Upkeep+0x714>
            setTime = false;
 8007a22:	4b50      	ldr	r3, [pc, #320]	@ (8007b64 <ESP_Upkeep+0x7e0>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007a28:	f001 fd28 	bl	800947c <calculateNextNTPTime>
 8007a2c:	0002      	movs	r2, r0
 8007a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8007b68 <ESP_Upkeep+0x7e4>)
 8007a30:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007a32:	4b4d      	ldr	r3, [pc, #308]	@ (8007b68 <ESP_Upkeep+0x7e4>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a4d      	ldr	r2, [pc, #308]	@ (8007b6c <ESP_Upkeep+0x7e8>)
 8007a38:	189a      	adds	r2, r3, r2
 8007a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b68 <ESP_Upkeep+0x7e4>)
 8007a3c:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8007b6c <ESP_Upkeep+0x7e8>)
 8007a40:	4a4b      	ldr	r2, [pc, #300]	@ (8007b70 <ESP_Upkeep+0x7ec>)
 8007a42:	4947      	ldr	r1, [pc, #284]	@ (8007b60 <ESP_Upkeep+0x7dc>)
 8007a44:	2002      	movs	r0, #2
 8007a46:	f00b fc81 	bl	801334c <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8007b74 <ESP_Upkeep+0x7f0>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b33      	ldr	r3, [pc, #204]	@ (8007b1c <ESP_Upkeep+0x798>)
 8007a50:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007a52:	f7ff f94d 	bl	8006cf0 <clearDMABuffer>
            stop = HAL_GetTick();
 8007a56:	f00c f9b9 	bl	8013dcc <HAL_GetTick>
 8007a5a:	0002      	movs	r2, r0
 8007a5c:	4b36      	ldr	r3, [pc, #216]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 8007a5e:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007a60:	4b35      	ldr	r3, [pc, #212]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4b35      	ldr	r3, [pc, #212]	@ (8007b3c <ESP_Upkeep+0x7b8>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	4a43      	ldr	r2, [pc, #268]	@ (8007b78 <ESP_Upkeep+0x7f4>)
 8007a6c:	493c      	ldr	r1, [pc, #240]	@ (8007b60 <ESP_Upkeep+0x7dc>)
 8007a6e:	2002      	movs	r0, #2
 8007a70:	f00b fc6c 	bl	801334c <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007a74:	f00c f9aa 	bl	8013dcc <HAL_GetTick>
 8007a78:	0003      	movs	r3, r0
 8007a7a:	4a40      	ldr	r2, [pc, #256]	@ (8007b7c <ESP_Upkeep+0x7f8>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d804      	bhi.n	8007a8a <ESP_Upkeep+0x706>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007a80:	4b3f      	ldr	r3, [pc, #252]	@ (8007b80 <ESP_Upkeep+0x7fc>)
 8007a82:	4a40      	ldr	r2, [pc, #256]	@ (8007b84 <ESP_Upkeep+0x800>)
 8007a84:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007a86:	f005 fc37 	bl	800d2f8 <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007a8a:	4b21      	ldr	r3, [pc, #132]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007a8c:	220d      	movs	r2, #13
 8007a8e:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007a90:	4b21      	ldr	r3, [pc, #132]	@ (8007b18 <ESP_Upkeep+0x794>)
 8007a92:	2202      	movs	r2, #2
 8007a94:	701a      	strb	r2, [r3, #0]
    break;
 8007a96:	e122      	b.n	8007cde <ESP_Upkeep+0x95a>
          EspState = ESP_STATE_RESET;
 8007a98:	4b1d      	ldr	r3, [pc, #116]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007a9a:	2209      	movs	r2, #9
 8007a9c:	701a      	strb	r2, [r3, #0]
    break;
 8007a9e:	e11e      	b.n	8007cde <ESP_Upkeep+0x95a>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007aa0:	4b39      	ldr	r3, [pc, #228]	@ (8007b88 <ESP_Upkeep+0x804>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007aa6:	4b39      	ldr	r3, [pc, #228]	@ (8007b8c <ESP_Upkeep+0x808>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2101      	movs	r1, #1
 8007aac:	0018      	movs	r0, r3
 8007aae:	f00d fc1e 	bl	80152ee <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007ab2:	2001      	movs	r0, #1
 8007ab4:	f00c f994 	bl	8013de0 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007ab8:	2380      	movs	r3, #128	@ 0x80
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	4834      	ldr	r0, [pc, #208]	@ (8007b90 <ESP_Upkeep+0x80c>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	0019      	movs	r1, r3
 8007ac2:	f00d fc14 	bl	80152ee <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007ac6:	2001      	movs	r0, #1
 8007ac8:	f00c f98a 	bl	8013de0 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007acc:	4b2f      	ldr	r3, [pc, #188]	@ (8007b8c <ESP_Upkeep+0x808>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	f00d fc0b 	bl	80152ee <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007ada:	2209      	movs	r2, #9
 8007adc:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007ade:	2001      	movs	r0, #1
 8007ae0:	f00c f97e 	bl	8013de0 <HAL_Delay>
      ResetESPIndicator();
 8007ae4:	f00a fa8c 	bl	8012000 <ResetESPIndicator>
      if (Check_USB_PowerOn() || userToggle) {
 8007ae8:	f001 fbb4 	bl	8009254 <Check_USB_PowerOn>
 8007aec:	1e03      	subs	r3, r0, #0
 8007aee:	d103      	bne.n	8007af8 <ESP_Upkeep+0x774>
 8007af0:	4b28      	ldr	r3, [pc, #160]	@ (8007b94 <ESP_Upkeep+0x810>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <ESP_Upkeep+0x778>
        EnabledConnectedDevices();
 8007af8:	f005 fbfe 	bl	800d2f8 <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007afc:	4b0b      	ldr	r3, [pc, #44]	@ (8007b2c <ESP_Upkeep+0x7a8>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007b02:	4b11      	ldr	r3, [pc, #68]	@ (8007b48 <ESP_Upkeep+0x7c4>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
      break;
 8007b08:	e0ec      	b.n	8007ce4 <ESP_Upkeep+0x960>
 8007b0a:	46c0      	nop			@ (mov r8, r8)
 8007b0c:	20000676 	.word	0x20000676
 8007b10:	2000002c 	.word	0x2000002c
 8007b14:	200005a3 	.word	0x200005a3
 8007b18:	20000677 	.word	0x20000677
 8007b1c:	2000066c 	.word	0x2000066c
 8007b20:	20000675 	.word	0x20000675
 8007b24:	2000002f 	.word	0x2000002f
 8007b28:	20000666 	.word	0x20000666
 8007b2c:	20000667 	.word	0x20000667
 8007b30:	0003a980 	.word	0x0003a980
 8007b34:	200005a8 	.word	0x200005a8
 8007b38:	200005bc 	.word	0x200005bc
 8007b3c:	200005b8 	.word	0x200005b8
 8007b40:	0802ae68 	.word	0x0802ae68
 8007b44:	08029ddc 	.word	0x08029ddc
 8007b48:	20000668 	.word	0x20000668
 8007b4c:	0802ae9c 	.word	0x0802ae9c
 8007b50:	0000c350 	.word	0x0000c350
 8007b54:	0802aed8 	.word	0x0802aed8
 8007b58:	2000065c 	.word	0x2000065c
 8007b5c:	0802af08 	.word	0x0802af08
 8007b60:	0802af20 	.word	0x0802af20
 8007b64:	20000002 	.word	0x20000002
 8007b68:	20000670 	.word	0x20000670
 8007b6c:	00012686 	.word	0x00012686
 8007b70:	0802af24 	.word	0x0802af24
 8007b74:	20000028 	.word	0x20000028
 8007b78:	0802af68 	.word	0x0802af68
 8007b7c:	000061a7 	.word	0x000061a7
 8007b80:	20000e28 	.word	0x20000e28
 8007b84:	000061a8 	.word	0x000061a8
 8007b88:	200005a0 	.word	0x200005a0
 8007b8c:	50001c00 	.word	0x50001c00
 8007b90:	50000800 	.word	0x50000800
 8007b94:	20001e62 	.word	0x20001e62

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007b98:	4b55      	ldr	r3, [pc, #340]	@ (8007cf0 <ESP_Upkeep+0x96c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f00b fb7f 	bl	80132a0 <TimestampIsReached>
 8007ba2:	1e03      	subs	r3, r0, #0
 8007ba4:	d103      	bne.n	8007bae <ESP_Upkeep+0x82a>
 8007ba6:	4b53      	ldr	r3, [pc, #332]	@ (8007cf4 <ESP_Upkeep+0x970>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d043      	beq.n	8007c36 <ESP_Upkeep+0x8b2>
        ESPTransmitDone = false;
 8007bae:	4b52      	ldr	r3, [pc, #328]	@ (8007cf8 <ESP_Upkeep+0x974>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8007bb4:	4b51      	ldr	r3, [pc, #324]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d105      	bne.n	8007bc8 <ESP_Upkeep+0x844>
          InitIsDone = true;
 8007bbc:	4b50      	ldr	r3, [pc, #320]	@ (8007d00 <ESP_Upkeep+0x97c>)
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007bc2:	4b50      	ldr	r3, [pc, #320]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007bc4:	220b      	movs	r2, #11
 8007bc6:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8007bc8:	4b4c      	ldr	r3, [pc, #304]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d108      	bne.n	8007be2 <ESP_Upkeep+0x85e>
          ConnectionMade = true;
 8007bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8007d08 <ESP_Upkeep+0x984>)
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8007bd6:	4b4d      	ldr	r3, [pc, #308]	@ (8007d0c <ESP_Upkeep+0x988>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007bdc:	4b49      	ldr	r3, [pc, #292]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007bde:	220b      	movs	r2, #11
 8007be0:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8007be2:	4b46      	ldr	r3, [pc, #280]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d102      	bne.n	8007bf0 <ESP_Upkeep+0x86c>
          EspState = ESP_STATE_INIT;
 8007bea:	4b46      	ldr	r3, [pc, #280]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007bec:	2202      	movs	r2, #2
 8007bee:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8007bf0:	4b42      	ldr	r3, [pc, #264]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d108      	bne.n	8007c0a <ESP_Upkeep+0x886>
          EspState = ESP_STATE_CONFIG;
 8007bf8:	4b42      	ldr	r3, [pc, #264]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007bfa:	220e      	movs	r2, #14
 8007bfc:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8007bfe:	4a44      	ldr	r2, [pc, #272]	@ (8007d10 <ESP_Upkeep+0x98c>)
 8007c00:	4b44      	ldr	r3, [pc, #272]	@ (8007d14 <ESP_Upkeep+0x990>)
 8007c02:	0019      	movs	r1, r3
 8007c04:	2002      	movs	r0, #2
 8007c06:	f00b fba1 	bl	801334c <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8007c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d105      	bne.n	8007c1e <ESP_Upkeep+0x89a>
          EspState = ESP_STATE_MODE_SELECT;
 8007c12:	4b3c      	ldr	r3, [pc, #240]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007c14:	220b      	movs	r2, #11
 8007c16:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8007c18:	4b3f      	ldr	r3, [pc, #252]	@ (8007d18 <ESP_Upkeep+0x994>)
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007c1e:	4b35      	ldr	r3, [pc, #212]	@ (8007cf4 <ESP_Upkeep+0x970>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d020      	beq.n	8007c68 <ESP_Upkeep+0x8e4>
 8007c26:	4b35      	ldr	r3, [pc, #212]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d01c      	beq.n	8007c68 <ESP_Upkeep+0x8e4>
          EspState = ESP_STATE_INIT;
 8007c2e:	4b35      	ldr	r3, [pc, #212]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007c30:	2202      	movs	r2, #2
 8007c32:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007c34:	e018      	b.n	8007c68 <ESP_Upkeep+0x8e4>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8007c36:	f001 fc21 	bl	800947c <calculateNextNTPTime>
 8007c3a:	0002      	movs	r2, r0
 8007c3c:	4b37      	ldr	r3, [pc, #220]	@ (8007d1c <ESP_Upkeep+0x998>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d94e      	bls.n	8007ce2 <ESP_Upkeep+0x95e>
        if(Mode == AT_MODE_SEND ) {
 8007c44:	4b2d      	ldr	r3, [pc, #180]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d14a      	bne.n	8007ce2 <ESP_Upkeep+0x95e>
           Mode = AT_MODE_GETTIME;
 8007c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007c4e:	2205      	movs	r2, #5
 8007c50:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8007c52:	4b2c      	ldr	r3, [pc, #176]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007c54:	2202      	movs	r2, #2
 8007c56:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8007c58:	4b25      	ldr	r3, [pc, #148]	@ (8007cf0 <ESP_Upkeep+0x96c>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	4b30      	ldr	r3, [pc, #192]	@ (8007d20 <ESP_Upkeep+0x99c>)
 8007c5e:	601a      	str	r2, [r3, #0]
           setTime = true;
 8007c60:	4b30      	ldr	r3, [pc, #192]	@ (8007d24 <ESP_Upkeep+0x9a0>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007c66:	e03c      	b.n	8007ce2 <ESP_Upkeep+0x95e>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007c68:	46c0      	nop			@ (mov r8, r8)
      break;
 8007c6a:	e03a      	b.n	8007ce2 <ESP_Upkeep+0x95e>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8007c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8007d28 <ESP_Upkeep+0x9a4>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2201      	movs	r2, #1
 8007c72:	4053      	eors	r3, r2
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d008      	beq.n	8007c8c <ESP_Upkeep+0x908>
        Info("Do nothing until reset");
 8007c7a:	4a25      	ldr	r2, [pc, #148]	@ (8007d10 <ESP_Upkeep+0x98c>)
 8007c7c:	4b25      	ldr	r3, [pc, #148]	@ (8007d14 <ESP_Upkeep+0x990>)
 8007c7e:	0019      	movs	r1, r3
 8007c80:	2002      	movs	r0, #2
 8007c82:	f00b fb63 	bl	801334c <CreateLine>
        msgdone = true;
 8007c86:	4b28      	ldr	r3, [pc, #160]	@ (8007d28 <ESP_Upkeep+0x9a4>)
 8007c88:	2201      	movs	r2, #1
 8007c8a:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8007c8c:	f01a fc0a 	bl	80224a4 <GetUsbRxPointer>
 8007c90:	0003      	movs	r3, r0
 8007c92:	0018      	movs	r0, r3
 8007c94:	f000 f980 	bl	8007f98 <Process_PC_Config>
      break;
 8007c98:	e024      	b.n	8007ce4 <ESP_Upkeep+0x960>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8007c9a:	4a24      	ldr	r2, [pc, #144]	@ (8007d2c <ESP_Upkeep+0x9a8>)
 8007c9c:	4b24      	ldr	r3, [pc, #144]	@ (8007d30 <ESP_Upkeep+0x9ac>)
 8007c9e:	0019      	movs	r1, r3
 8007ca0:	2001      	movs	r0, #1
 8007ca2:	f00b fb53 	bl	801334c <CreateLine>
      EspState = ESP_STATE_INIT;
 8007ca6:	4b17      	ldr	r3, [pc, #92]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007ca8:	2202      	movs	r2, #2
 8007caa:	701a      	strb	r2, [r3, #0]
      break;
 8007cac:	e01a      	b.n	8007ce4 <ESP_Upkeep+0x960>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8007cae:	4a21      	ldr	r2, [pc, #132]	@ (8007d34 <ESP_Upkeep+0x9b0>)
 8007cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8007d30 <ESP_Upkeep+0x9ac>)
 8007cb2:	0019      	movs	r1, r3
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	f00b fb49 	bl	801334c <CreateLine>
      EspState = ESP_STATE_ERROR;
 8007cba:	4b12      	ldr	r3, [pc, #72]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007cbc:	2207      	movs	r2, #7
 8007cbe:	701a      	strb	r2, [r3, #0]
      break;
 8007cc0:	e010      	b.n	8007ce4 <ESP_Upkeep+0x960>
      break;
 8007cc2:	46c0      	nop			@ (mov r8, r8)
 8007cc4:	e00e      	b.n	8007ce4 <ESP_Upkeep+0x960>
        break;
 8007cc6:	46c0      	nop			@ (mov r8, r8)
 8007cc8:	e00c      	b.n	8007ce4 <ESP_Upkeep+0x960>
      break;
 8007cca:	46c0      	nop			@ (mov r8, r8)
 8007ccc:	e00a      	b.n	8007ce4 <ESP_Upkeep+0x960>
        break;
 8007cce:	46c0      	nop			@ (mov r8, r8)
 8007cd0:	e008      	b.n	8007ce4 <ESP_Upkeep+0x960>
    break;
 8007cd2:	46c0      	nop			@ (mov r8, r8)
 8007cd4:	e006      	b.n	8007ce4 <ESP_Upkeep+0x960>
    break;
 8007cd6:	46c0      	nop			@ (mov r8, r8)
 8007cd8:	e004      	b.n	8007ce4 <ESP_Upkeep+0x960>
      break;
 8007cda:	46c0      	nop			@ (mov r8, r8)
 8007cdc:	e002      	b.n	8007ce4 <ESP_Upkeep+0x960>
    break;
 8007cde:	46c0      	nop			@ (mov r8, r8)
 8007ce0:	e000      	b.n	8007ce4 <ESP_Upkeep+0x960>
      break;
 8007ce2:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8007ce4:	4b07      	ldr	r3, [pc, #28]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
}
 8007ce8:	0018      	movs	r0, r3
 8007cea:	46bd      	mov	sp, r7
 8007cec:	b002      	add	sp, #8
 8007cee:	bdb0      	pop	{r4, r5, r7, pc}
 8007cf0:	2000066c 	.word	0x2000066c
 8007cf4:	200005a3 	.word	0x200005a3
 8007cf8:	200005a8 	.word	0x200005a8
 8007cfc:	20000677 	.word	0x20000677
 8007d00:	200005a1 	.word	0x200005a1
 8007d04:	2000002c 	.word	0x2000002c
 8007d08:	200005a4 	.word	0x200005a4
 8007d0c:	200005a6 	.word	0x200005a6
 8007d10:	0802af88 	.word	0x0802af88
 8007d14:	0802af20 	.word	0x0802af20
 8007d18:	200005a5 	.word	0x200005a5
 8007d1c:	20000670 	.word	0x20000670
 8007d20:	20000028 	.word	0x20000028
 8007d24:	20000002 	.word	0x20000002
 8007d28:	200005a7 	.word	0x200005a7
 8007d2c:	0802afa0 	.word	0x0802afa0
 8007d30:	08029ddc 	.word	0x08029ddc
 8007d34:	0802afb4 	.word	0x0802afb4

08007d38 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8007d40:	4b12      	ldr	r3, [pc, #72]	@ (8007d8c <I2CSensors_Init+0x54>)
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 8007d46:	4a12      	ldr	r2, [pc, #72]	@ (8007d90 <I2CSensors_Init+0x58>)
 8007d48:	4b12      	ldr	r3, [pc, #72]	@ (8007d94 <I2CSensors_Init+0x5c>)
 8007d4a:	0011      	movs	r1, r2
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f00b fcfb 	bl	8013748 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 8007d52:	4a0f      	ldr	r2, [pc, #60]	@ (8007d90 <I2CSensors_Init+0x58>)
 8007d54:	4b0f      	ldr	r3, [pc, #60]	@ (8007d94 <I2CSensors_Init+0x5c>)
 8007d56:	0011      	movs	r1, r2
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f008 fb13 	bl	8010384 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 8007d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8007d98 <I2CSensors_Init+0x60>)
 8007d60:	490b      	ldr	r1, [pc, #44]	@ (8007d90 <I2CSensors_Init+0x58>)
 8007d62:	4b0c      	ldr	r3, [pc, #48]	@ (8007d94 <I2CSensors_Init+0x5c>)
 8007d64:	0018      	movs	r0, r3
 8007d66:	f002 fb37 	bl	800a3d8 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8007d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8007d9c <I2CSensors_Init+0x64>)
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007da0 <I2CSensors_Init+0x68>)
 8007d6e:	0011      	movs	r1, r2
 8007d70:	0018      	movs	r0, r3
 8007d72:	f003 f905 	bl	800af80 <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 8007d76:	4a09      	ldr	r2, [pc, #36]	@ (8007d9c <I2CSensors_Init+0x64>)
 8007d78:	4b09      	ldr	r3, [pc, #36]	@ (8007da0 <I2CSensors_Init+0x68>)
 8007d7a:	0011      	movs	r1, r2
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f7fb fef9 	bl	8003b74 <ENS_Init>
}
 8007d82:	46c0      	nop			@ (mov r8, r8)
 8007d84:	46bd      	mov	sp, r7
 8007d86:	b002      	add	sp, #8
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	46c0      	nop			@ (mov r8, r8)
 8007d8c:	20000790 	.word	0x20000790
 8007d90:	08007e51 	.word	0x08007e51
 8007d94:	08007dfd 	.word	0x08007dfd
 8007d98:	08007da5 	.word	0x08007da5
 8007d9c:	08007f21 	.word	0x08007f21
 8007da0:	08007ea5 	.word	0x08007ea5

08007da4 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	6039      	str	r1, [r7, #0]
 8007dac:	0011      	movs	r1, r2
 8007dae:	1dfb      	adds	r3, r7, #7
 8007db0:	1c02      	adds	r2, r0, #0
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	1dbb      	adds	r3, r7, #6
 8007db6:	1c0a      	adds	r2, r1, #0
 8007db8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 8007dba:	4b0f      	ldr	r3, [pc, #60]	@ (8007df8 <ReadI2CDirect+0x54>)
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	1dfb      	adds	r3, r7, #7
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	18db      	adds	r3, r3, r3
 8007dc6:	b299      	uxth	r1, r3
 8007dc8:	1dbb      	adds	r3, r7, #6
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	260f      	movs	r6, #15
 8007dd0:	19bc      	adds	r4, r7, r6
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	25fa      	movs	r5, #250	@ 0xfa
 8007dd6:	9500      	str	r5, [sp, #0]
 8007dd8:	f00d fc60 	bl	801569c <HAL_I2C_Master_Receive>
 8007ddc:	0003      	movs	r3, r0
 8007dde:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007de0:	19bb      	adds	r3, r7, r6
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <ReadI2CDirect+0x48>
        return false;
 8007de8:	2300      	movs	r3, #0
 8007dea:	e000      	b.n	8007dee <ReadI2CDirect+0x4a>
    }
    return true;
 8007dec:	2301      	movs	r3, #1
}
 8007dee:	0018      	movs	r0, r3
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b005      	add	sp, #20
 8007df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007df6:	46c0      	nop			@ (mov r8, r8)
 8007df8:	20000790 	.word	0x20000790

08007dfc <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007dfc:	b5b0      	push	{r4, r5, r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6039      	str	r1, [r7, #0]
 8007e04:	0011      	movs	r1, r2
 8007e06:	1dfb      	adds	r3, r7, #7
 8007e08:	1c02      	adds	r2, r0, #0
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	1dbb      	adds	r3, r7, #6
 8007e0e:	1c0a      	adds	r2, r1, #0
 8007e10:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007e12:	4b0e      	ldr	r3, [pc, #56]	@ (8007e4c <ReadI2C+0x50>)
 8007e14:	6818      	ldr	r0, [r3, #0]
 8007e16:	1dfb      	adds	r3, r7, #7
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	18db      	adds	r3, r3, r3
 8007e1e:	b299      	uxth	r1, r3
 8007e20:	1dbb      	adds	r3, r7, #6
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	250f      	movs	r5, #15
 8007e28:	197c      	adds	r4, r7, r5
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	f00d fe44 	bl	8015ab8 <HAL_I2C_Master_Receive_DMA>
 8007e30:	0003      	movs	r3, r0
 8007e32:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007e34:	197b      	adds	r3, r7, r5
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <ReadI2C+0x44>
        return false;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	e000      	b.n	8007e42 <ReadI2C+0x46>
    }
    return true;
 8007e40:	2301      	movs	r3, #1
}
 8007e42:	0018      	movs	r0, r3
 8007e44:	46bd      	mov	sp, r7
 8007e46:	b004      	add	sp, #16
 8007e48:	bdb0      	pop	{r4, r5, r7, pc}
 8007e4a:	46c0      	nop			@ (mov r8, r8)
 8007e4c:	20000790 	.word	0x20000790

08007e50 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007e50:	b5b0      	push	{r4, r5, r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6039      	str	r1, [r7, #0]
 8007e58:	0011      	movs	r1, r2
 8007e5a:	1dfb      	adds	r3, r7, #7
 8007e5c:	1c02      	adds	r2, r0, #0
 8007e5e:	701a      	strb	r2, [r3, #0]
 8007e60:	1dbb      	adds	r3, r7, #6
 8007e62:	1c0a      	adds	r2, r1, #0
 8007e64:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007e66:	4b0e      	ldr	r3, [pc, #56]	@ (8007ea0 <WriteI2C+0x50>)
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	1dfb      	adds	r3, r7, #7
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	18db      	adds	r3, r3, r3
 8007e72:	b299      	uxth	r1, r3
 8007e74:	1dbb      	adds	r3, r7, #6
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	250f      	movs	r5, #15
 8007e7c:	197c      	adds	r4, r7, r5
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	f00d fd14 	bl	80158ac <HAL_I2C_Master_Transmit_DMA>
 8007e84:	0003      	movs	r3, r0
 8007e86:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007e88:	197b      	adds	r3, r7, r5
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <WriteI2C+0x44>
        return false;
 8007e90:	2300      	movs	r3, #0
 8007e92:	e000      	b.n	8007e96 <WriteI2C+0x46>
    }
    return true;
 8007e94:	2301      	movs	r3, #1
}
 8007e96:	0018      	movs	r0, r3
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b004      	add	sp, #16
 8007e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e9e:	46c0      	nop			@ (mov r8, r8)
 8007ea0:	20000790 	.word	0x20000790

08007ea4 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea6:	b08b      	sub	sp, #44	@ 0x2c
 8007ea8:	af04      	add	r7, sp, #16
 8007eaa:	0004      	movs	r4, r0
 8007eac:	0008      	movs	r0, r1
 8007eae:	0011      	movs	r1, r2
 8007eb0:	607b      	str	r3, [r7, #4]
 8007eb2:	250f      	movs	r5, #15
 8007eb4:	197b      	adds	r3, r7, r5
 8007eb6:	1c22      	adds	r2, r4, #0
 8007eb8:	701a      	strb	r2, [r3, #0]
 8007eba:	260c      	movs	r6, #12
 8007ebc:	19bb      	adds	r3, r7, r6
 8007ebe:	1c02      	adds	r2, r0, #0
 8007ec0:	801a      	strh	r2, [r3, #0]
 8007ec2:	230a      	movs	r3, #10
 8007ec4:	18fb      	adds	r3, r7, r3
 8007ec6:	1c0a      	adds	r2, r1, #0
 8007ec8:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 8007eca:	4b14      	ldr	r3, [pc, #80]	@ (8007f1c <ReadI2CMem+0x78>)
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	197b      	adds	r3, r7, r5
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	18db      	adds	r3, r3, r3
 8007ed6:	b299      	uxth	r1, r3
 8007ed8:	2217      	movs	r2, #23
 8007eda:	18bc      	adds	r4, r7, r2
 8007edc:	230a      	movs	r3, #10
 8007ede:	18fb      	adds	r3, r7, r3
 8007ee0:	881d      	ldrh	r5, [r3, #0]
 8007ee2:	19bb      	adds	r3, r7, r6
 8007ee4:	881a      	ldrh	r2, [r3, #0]
 8007ee6:	2364      	movs	r3, #100	@ 0x64
 8007ee8:	9302      	str	r3, [sp, #8]
 8007eea:	2328      	movs	r3, #40	@ 0x28
 8007eec:	2608      	movs	r6, #8
 8007eee:	199b      	adds	r3, r3, r6
 8007ef0:	19db      	adds	r3, r3, r7
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	002b      	movs	r3, r5
 8007efc:	f00d fee2 	bl	8015cc4 <HAL_I2C_Mem_Read>
 8007f00:	0003      	movs	r3, r0
 8007f02:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007f04:	2217      	movs	r2, #23
 8007f06:	18bb      	adds	r3, r7, r2
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <ReadI2CMem+0x6e>
     return false;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	e000      	b.n	8007f14 <ReadI2CMem+0x70>
   }
   return true;
 8007f12:	2301      	movs	r3, #1
}
 8007f14:	0018      	movs	r0, r3
 8007f16:	46bd      	mov	sp, r7
 8007f18:	b007      	add	sp, #28
 8007f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f1c:	20000790 	.word	0x20000790

08007f20 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f22:	b089      	sub	sp, #36	@ 0x24
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	0004      	movs	r4, r0
 8007f28:	0008      	movs	r0, r1
 8007f2a:	0011      	movs	r1, r2
 8007f2c:	607b      	str	r3, [r7, #4]
 8007f2e:	250f      	movs	r5, #15
 8007f30:	197b      	adds	r3, r7, r5
 8007f32:	1c22      	adds	r2, r4, #0
 8007f34:	701a      	strb	r2, [r3, #0]
 8007f36:	260c      	movs	r6, #12
 8007f38:	19bb      	adds	r3, r7, r6
 8007f3a:	1c02      	adds	r2, r0, #0
 8007f3c:	801a      	strh	r2, [r3, #0]
 8007f3e:	230a      	movs	r3, #10
 8007f40:	18fb      	adds	r3, r7, r3
 8007f42:	1c0a      	adds	r2, r1, #0
 8007f44:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 8007f46:	4b13      	ldr	r3, [pc, #76]	@ (8007f94 <WriteI2CMem+0x74>)
 8007f48:	6818      	ldr	r0, [r3, #0]
 8007f4a:	197b      	adds	r3, r7, r5
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	18db      	adds	r3, r3, r3
 8007f52:	b299      	uxth	r1, r3
 8007f54:	2217      	movs	r2, #23
 8007f56:	18bc      	adds	r4, r7, r2
 8007f58:	230a      	movs	r3, #10
 8007f5a:	18fb      	adds	r3, r7, r3
 8007f5c:	881d      	ldrh	r5, [r3, #0]
 8007f5e:	19bb      	adds	r3, r7, r6
 8007f60:	881a      	ldrh	r2, [r3, #0]
 8007f62:	2328      	movs	r3, #40	@ 0x28
 8007f64:	2608      	movs	r6, #8
 8007f66:	199b      	adds	r3, r3, r6
 8007f68:	19db      	adds	r3, r3, r7
 8007f6a:	881b      	ldrh	r3, [r3, #0]
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	002b      	movs	r3, r5
 8007f74:	f00d ffda 	bl	8015f2c <HAL_I2C_Mem_Write_DMA>
 8007f78:	0003      	movs	r3, r0
 8007f7a:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007f7c:	2217      	movs	r2, #23
 8007f7e:	18bb      	adds	r3, r7, r2
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <WriteI2CMem+0x6a>
     return false;
 8007f86:	2300      	movs	r3, #0
 8007f88:	e000      	b.n	8007f8c <WriteI2CMem+0x6c>
   }
   return true;
 8007f8a:	2301      	movs	r3, #1
}
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	b007      	add	sp, #28
 8007f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f94:	20000790 	.word	0x20000790

08007f98 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8007f98:	b590      	push	{r4, r7, lr}
 8007f9a:	b0c3      	sub	sp, #268	@ 0x10c
 8007f9c:	af3e      	add	r7, sp, #248	@ 0xf8
 8007f9e:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8007fa0:	f01a faa0 	bl	80224e4 <GetUsbRxDataSize>
 8007fa4:	0003      	movs	r3, r0
 8007fa6:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b05      	cmp	r3, #5
 8007fac:	d972      	bls.n	8008094 <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2123      	movs	r1, #35	@ 0x23
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f01d fcc6 	bl	8025944 <strchr>
 8007fb8:	0003      	movs	r3, r0
 8007fba:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d066      	beq.n	8008090 <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	785a      	ldrb	r2, [r3, #1]
 8007fc6:	4b35      	ldr	r3, [pc, #212]	@ (800809c <Process_PC_Config+0x104>)
 8007fc8:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	789a      	ldrb	r2, [r3, #2]
 8007fce:	4b33      	ldr	r3, [pc, #204]	@ (800809c <Process_PC_Config+0x104>)
 8007fd0:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8007fd2:	4b32      	ldr	r3, [pc, #200]	@ (800809c <Process_PC_Config+0x104>)
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	3305      	adds	r3, #5
 8007fd8:	001a      	movs	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d352      	bcc.n	8008086 <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	1cd9      	adds	r1, r3, #3
 8007fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800809c <Process_PC_Config+0x104>)
 8007fe6:	785b      	ldrb	r3, [r3, #1]
 8007fe8:	001a      	movs	r2, r3
 8007fea:	4b2d      	ldr	r3, [pc, #180]	@ (80080a0 <Process_PC_Config+0x108>)
 8007fec:	0018      	movs	r0, r3
 8007fee:	f01d fd7d 	bl	8025aec <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8007ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800809c <Process_PC_Config+0x104>)
 8007ff4:	785b      	ldrb	r3, [r3, #1]
 8007ff6:	3303      	adds	r3, #3
 8007ff8:	001a      	movs	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	189b      	adds	r3, r3, r2
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	b21b      	sxth	r3, r3
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	b21a      	sxth	r2, r3
 8008006:	4b25      	ldr	r3, [pc, #148]	@ (800809c <Process_PC_Config+0x104>)
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	3304      	adds	r3, #4
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	18cb      	adds	r3, r1, r3
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	b21b      	sxth	r3, r3
 8008014:	4313      	orrs	r3, r2
 8008016:	b21b      	sxth	r3, r3
 8008018:	b299      	uxth	r1, r3
 800801a:	4a20      	ldr	r2, [pc, #128]	@ (800809c <Process_PC_Config+0x104>)
 800801c:	2381      	movs	r3, #129	@ 0x81
 800801e:	005b      	lsls	r3, r3, #1
 8008020:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8008022:	4a1e      	ldr	r2, [pc, #120]	@ (800809c <Process_PC_Config+0x104>)
 8008024:	2381      	movs	r3, #129	@ 0x81
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	5ad4      	ldrh	r4, [r2, r3]
 800802a:	4b1c      	ldr	r3, [pc, #112]	@ (800809c <Process_PC_Config+0x104>)
 800802c:	785b      	ldrb	r3, [r3, #1]
 800802e:	3303      	adds	r3, #3
 8008030:	b29a      	uxth	r2, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	0011      	movs	r1, r2
 8008036:	0018      	movs	r0, r3
 8008038:	f000 fa14 	bl	8008464 <CRC16_ARC>
 800803c:	0003      	movs	r3, r0
 800803e:	429c      	cmp	r4, r3
 8008040:	d007      	beq.n	8008052 <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8008042:	4b16      	ldr	r3, [pc, #88]	@ (800809c <Process_PC_Config+0x104>)
 8008044:	785a      	ldrb	r2, [r3, #1]
 8008046:	4b16      	ldr	r3, [pc, #88]	@ (80080a0 <Process_PC_Config+0x108>)
 8008048:	0019      	movs	r1, r3
 800804a:	2001      	movs	r0, #1
 800804c:	f000 f9b8 	bl	80083c0 <Create_Message>
 8008050:	e016      	b.n	8008080 <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8008052:	4c12      	ldr	r4, [pc, #72]	@ (800809c <Process_PC_Config+0x104>)
 8008054:	466b      	mov	r3, sp
 8008056:	0018      	movs	r0, r3
 8008058:	0023      	movs	r3, r4
 800805a:	3310      	adds	r3, #16
 800805c:	22f4      	movs	r2, #244	@ 0xf4
 800805e:	0019      	movs	r1, r3
 8008060:	f01d fd44 	bl	8025aec <memcpy>
 8008064:	6820      	ldr	r0, [r4, #0]
 8008066:	6861      	ldr	r1, [r4, #4]
 8008068:	68a2      	ldr	r2, [r4, #8]
 800806a:	68e3      	ldr	r3, [r4, #12]
 800806c:	f000 f81a 	bl	80080a4 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8008070:	4b0a      	ldr	r3, [pc, #40]	@ (800809c <Process_PC_Config+0x104>)
 8008072:	7818      	ldrb	r0, [r3, #0]
 8008074:	4b09      	ldr	r3, [pc, #36]	@ (800809c <Process_PC_Config+0x104>)
 8008076:	785a      	ldrb	r2, [r3, #1]
 8008078:	4b09      	ldr	r3, [pc, #36]	@ (80080a0 <Process_PC_Config+0x108>)
 800807a:	0019      	movs	r1, r3
 800807c:	f000 f9a0 	bl	80083c0 <Create_Message>
                }
                ResetUsbRxDataSize();
 8008080:	f01a fa18 	bl	80224b4 <ResetUsbRxDataSize>
                return;
 8008084:	e006      	b.n	8008094 <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	0018      	movs	r0, r3
 800808a:	f01a fa35 	bl	80224f8 <GetUsbRxNextChunk>
 800808e:	e001      	b.n	8008094 <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 8008090:	f01a fa10 	bl	80224b4 <ResetUsbRxDataSize>
        }
    }
}
 8008094:	46bd      	mov	sp, r7
 8008096:	b005      	add	sp, #20
 8008098:	bd90      	pop	{r4, r7, pc}
 800809a:	46c0      	nop			@ (mov r8, r8)
 800809c:	20000794 	.word	0x20000794
 80080a0:	20000796 	.word	0x20000796

080080a4 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80080a4:	b084      	sub	sp, #16
 80080a6:	b5b0      	push	{r4, r5, r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	2518      	movs	r5, #24
 80080ae:	197c      	adds	r4, r7, r5
 80080b0:	6020      	str	r0, [r4, #0]
 80080b2:	6061      	str	r1, [r4, #4]
 80080b4:	60a2      	str	r2, [r4, #8]
 80080b6:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 80080b8:	197b      	adds	r3, r7, r5
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80080be:	d100      	bne.n	80080c2 <ProcessCmd+0x1e>
 80080c0:	e122      	b.n	8008308 <ProcessCmd+0x264>
 80080c2:	dd00      	ble.n	80080c6 <ProcessCmd+0x22>
 80080c4:	e143      	b.n	800834e <ProcessCmd+0x2aa>
 80080c6:	2b18      	cmp	r3, #24
 80080c8:	dc0a      	bgt.n	80080e0 <ProcessCmd+0x3c>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	da00      	bge.n	80080d0 <ProcessCmd+0x2c>
 80080ce:	e13e      	b.n	800834e <ProcessCmd+0x2aa>
 80080d0:	2b18      	cmp	r3, #24
 80080d2:	d900      	bls.n	80080d6 <ProcessCmd+0x32>
 80080d4:	e13b      	b.n	800834e <ProcessCmd+0x2aa>
 80080d6:	009a      	lsls	r2, r3, #2
 80080d8:	4ba0      	ldr	r3, [pc, #640]	@ (800835c <ProcessCmd+0x2b8>)
 80080da:	18d3      	adds	r3, r2, r3
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	469f      	mov	pc, r3
 80080e0:	2bfd      	cmp	r3, #253	@ 0xfd
 80080e2:	d100      	bne.n	80080e6 <ProcessCmd+0x42>
 80080e4:	e108      	b.n	80082f8 <ProcessCmd+0x254>
            }
            break;
        }
    }

}
 80080e6:	e132      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80080e8:	2118      	movs	r1, #24
 80080ea:	187b      	adds	r3, r7, r1
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	001a      	movs	r2, r3
 80080f0:	187b      	adds	r3, r7, r1
 80080f2:	1c99      	adds	r1, r3, #2
 80080f4:	489a      	ldr	r0, [pc, #616]	@ (8008360 <ProcessCmd+0x2bc>)
 80080f6:	230c      	movs	r3, #12
 80080f8:	f003 fba0 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 80080fc:	e127      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80080fe:	2118      	movs	r1, #24
 8008100:	187b      	adds	r3, r7, r1
 8008102:	785b      	ldrb	r3, [r3, #1]
 8008104:	001a      	movs	r2, r3
 8008106:	187b      	adds	r3, r7, r1
 8008108:	1c99      	adds	r1, r3, #2
 800810a:	4896      	ldr	r0, [pc, #600]	@ (8008364 <ProcessCmd+0x2c0>)
 800810c:	230c      	movs	r3, #12
 800810e:	f003 fb95 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 8008112:	e11c      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008114:	2118      	movs	r1, #24
 8008116:	187b      	adds	r3, r7, r1
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	001a      	movs	r2, r3
 800811c:	187b      	adds	r3, r7, r1
 800811e:	1c99      	adds	r1, r3, #2
 8008120:	4891      	ldr	r0, [pc, #580]	@ (8008368 <ProcessCmd+0x2c4>)
 8008122:	230c      	movs	r3, #12
 8008124:	f003 fb8a 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 8008128:	e111      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800812a:	2118      	movs	r1, #24
 800812c:	187b      	adds	r3, r7, r1
 800812e:	785b      	ldrb	r3, [r3, #1]
 8008130:	001a      	movs	r2, r3
 8008132:	187b      	adds	r3, r7, r1
 8008134:	1c99      	adds	r1, r3, #2
 8008136:	488d      	ldr	r0, [pc, #564]	@ (800836c <ProcessCmd+0x2c8>)
 8008138:	230c      	movs	r3, #12
 800813a:	f003 fb7f 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 800813e:	e106      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008140:	2118      	movs	r1, #24
 8008142:	187b      	adds	r3, r7, r1
 8008144:	785b      	ldrb	r3, [r3, #1]
 8008146:	001a      	movs	r2, r3
 8008148:	187b      	adds	r3, r7, r1
 800814a:	1c99      	adds	r1, r3, #2
 800814c:	4888      	ldr	r0, [pc, #544]	@ (8008370 <ProcessCmd+0x2cc>)
 800814e:	230c      	movs	r3, #12
 8008150:	f003 fb74 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 8008154:	e0fb      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008156:	2118      	movs	r1, #24
 8008158:	187b      	adds	r3, r7, r1
 800815a:	785b      	ldrb	r3, [r3, #1]
 800815c:	001a      	movs	r2, r3
 800815e:	187b      	adds	r3, r7, r1
 8008160:	1c99      	adds	r1, r3, #2
 8008162:	4884      	ldr	r0, [pc, #528]	@ (8008374 <ProcessCmd+0x2d0>)
 8008164:	230c      	movs	r3, #12
 8008166:	f003 fb69 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 800816a:	e0f0      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800816c:	2118      	movs	r1, #24
 800816e:	187b      	adds	r3, r7, r1
 8008170:	785b      	ldrb	r3, [r3, #1]
 8008172:	001a      	movs	r2, r3
 8008174:	187b      	adds	r3, r7, r1
 8008176:	1c99      	adds	r1, r3, #2
 8008178:	487f      	ldr	r0, [pc, #508]	@ (8008378 <ProcessCmd+0x2d4>)
 800817a:	230c      	movs	r3, #12
 800817c:	f003 fb5e 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 8008180:	e0e5      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008182:	2118      	movs	r1, #24
 8008184:	187b      	adds	r3, r7, r1
 8008186:	785b      	ldrb	r3, [r3, #1]
 8008188:	001a      	movs	r2, r3
 800818a:	187b      	adds	r3, r7, r1
 800818c:	1c99      	adds	r1, r3, #2
 800818e:	487b      	ldr	r0, [pc, #492]	@ (800837c <ProcessCmd+0x2d8>)
 8008190:	230c      	movs	r3, #12
 8008192:	f003 fb53 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 8008196:	e0da      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008198:	2118      	movs	r1, #24
 800819a:	187b      	adds	r3, r7, r1
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	001a      	movs	r2, r3
 80081a0:	187b      	adds	r3, r7, r1
 80081a2:	1c99      	adds	r1, r3, #2
 80081a4:	4876      	ldr	r0, [pc, #472]	@ (8008380 <ProcessCmd+0x2dc>)
 80081a6:	230c      	movs	r3, #12
 80081a8:	f003 fb48 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 80081ac:	e0cf      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081ae:	2118      	movs	r1, #24
 80081b0:	187b      	adds	r3, r7, r1
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	001a      	movs	r2, r3
 80081b6:	187b      	adds	r3, r7, r1
 80081b8:	1c99      	adds	r1, r3, #2
 80081ba:	4872      	ldr	r0, [pc, #456]	@ (8008384 <ProcessCmd+0x2e0>)
 80081bc:	230c      	movs	r3, #12
 80081be:	f003 fb3d 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 80081c2:	e0c4      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081c4:	2118      	movs	r1, #24
 80081c6:	187b      	adds	r3, r7, r1
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	001a      	movs	r2, r3
 80081cc:	187b      	adds	r3, r7, r1
 80081ce:	1c99      	adds	r1, r3, #2
 80081d0:	486d      	ldr	r0, [pc, #436]	@ (8008388 <ProcessCmd+0x2e4>)
 80081d2:	230c      	movs	r3, #12
 80081d4:	f003 fb32 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 80081d8:	e0b9      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80081da:	2118      	movs	r1, #24
 80081dc:	187b      	adds	r3, r7, r1
 80081de:	785b      	ldrb	r3, [r3, #1]
 80081e0:	001a      	movs	r2, r3
 80081e2:	187b      	adds	r3, r7, r1
 80081e4:	1c99      	adds	r1, r3, #2
 80081e6:	4869      	ldr	r0, [pc, #420]	@ (800838c <ProcessCmd+0x2e8>)
 80081e8:	2320      	movs	r3, #32
 80081ea:	f003 fb27 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 80081ee:	e0ae      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081f0:	2118      	movs	r1, #24
 80081f2:	187b      	adds	r3, r7, r1
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	001a      	movs	r2, r3
 80081f8:	187b      	adds	r3, r7, r1
 80081fa:	1c99      	adds	r1, r3, #2
 80081fc:	4864      	ldr	r0, [pc, #400]	@ (8008390 <ProcessCmd+0x2ec>)
 80081fe:	230c      	movs	r3, #12
 8008200:	f003 fb1c 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 8008204:	e0a3      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008206:	2118      	movs	r1, #24
 8008208:	187b      	adds	r3, r7, r1
 800820a:	785b      	ldrb	r3, [r3, #1]
 800820c:	001a      	movs	r2, r3
 800820e:	187b      	adds	r3, r7, r1
 8008210:	1c99      	adds	r1, r3, #2
 8008212:	4860      	ldr	r0, [pc, #384]	@ (8008394 <ProcessCmd+0x2f0>)
 8008214:	230c      	movs	r3, #12
 8008216:	f003 fb11 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 800821a:	e098      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800821c:	2118      	movs	r1, #24
 800821e:	187b      	adds	r3, r7, r1
 8008220:	785b      	ldrb	r3, [r3, #1]
 8008222:	001a      	movs	r2, r3
 8008224:	187b      	adds	r3, r7, r1
 8008226:	1c99      	adds	r1, r3, #2
 8008228:	485b      	ldr	r0, [pc, #364]	@ (8008398 <ProcessCmd+0x2f4>)
 800822a:	230c      	movs	r3, #12
 800822c:	f003 fb06 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 8008230:	e08d      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008232:	2118      	movs	r1, #24
 8008234:	187b      	adds	r3, r7, r1
 8008236:	785b      	ldrb	r3, [r3, #1]
 8008238:	001a      	movs	r2, r3
 800823a:	187b      	adds	r3, r7, r1
 800823c:	1c99      	adds	r1, r3, #2
 800823e:	4857      	ldr	r0, [pc, #348]	@ (800839c <ProcessCmd+0x2f8>)
 8008240:	230c      	movs	r3, #12
 8008242:	f003 fafb 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 8008246:	e082      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008248:	2118      	movs	r1, #24
 800824a:	187b      	adds	r3, r7, r1
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	001a      	movs	r2, r3
 8008250:	187b      	adds	r3, r7, r1
 8008252:	1c99      	adds	r1, r3, #2
 8008254:	4852      	ldr	r0, [pc, #328]	@ (80083a0 <ProcessCmd+0x2fc>)
 8008256:	230c      	movs	r3, #12
 8008258:	f003 faf0 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 800825c:	e077      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800825e:	2118      	movs	r1, #24
 8008260:	187b      	adds	r3, r7, r1
 8008262:	785b      	ldrb	r3, [r3, #1]
 8008264:	001a      	movs	r2, r3
 8008266:	187b      	adds	r3, r7, r1
 8008268:	1c99      	adds	r1, r3, #2
 800826a:	484e      	ldr	r0, [pc, #312]	@ (80083a4 <ProcessCmd+0x300>)
 800826c:	230c      	movs	r3, #12
 800826e:	f003 fae5 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 8008272:	e06c      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008274:	2118      	movs	r1, #24
 8008276:	187b      	adds	r3, r7, r1
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	001a      	movs	r2, r3
 800827c:	187b      	adds	r3, r7, r1
 800827e:	1c99      	adds	r1, r3, #2
 8008280:	4849      	ldr	r0, [pc, #292]	@ (80083a8 <ProcessCmd+0x304>)
 8008282:	230c      	movs	r3, #12
 8008284:	f003 fada 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 8008288:	e061      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800828a:	2118      	movs	r1, #24
 800828c:	187b      	adds	r3, r7, r1
 800828e:	785b      	ldrb	r3, [r3, #1]
 8008290:	001a      	movs	r2, r3
 8008292:	187b      	adds	r3, r7, r1
 8008294:	1c99      	adds	r1, r3, #2
 8008296:	4845      	ldr	r0, [pc, #276]	@ (80083ac <ProcessCmd+0x308>)
 8008298:	230c      	movs	r3, #12
 800829a:	f003 facf 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 800829e:	e056      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082a0:	2118      	movs	r1, #24
 80082a2:	187b      	adds	r3, r7, r1
 80082a4:	785b      	ldrb	r3, [r3, #1]
 80082a6:	001a      	movs	r2, r3
 80082a8:	187b      	adds	r3, r7, r1
 80082aa:	1c99      	adds	r1, r3, #2
 80082ac:	4840      	ldr	r0, [pc, #256]	@ (80083b0 <ProcessCmd+0x30c>)
 80082ae:	230c      	movs	r3, #12
 80082b0:	f003 fac4 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 80082b4:	e04b      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082b6:	2118      	movs	r1, #24
 80082b8:	187b      	adds	r3, r7, r1
 80082ba:	785b      	ldrb	r3, [r3, #1]
 80082bc:	001a      	movs	r2, r3
 80082be:	187b      	adds	r3, r7, r1
 80082c0:	1c99      	adds	r1, r3, #2
 80082c2:	483c      	ldr	r0, [pc, #240]	@ (80083b4 <ProcessCmd+0x310>)
 80082c4:	230c      	movs	r3, #12
 80082c6:	f003 fab9 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 80082ca:	e040      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082cc:	2118      	movs	r1, #24
 80082ce:	187b      	adds	r3, r7, r1
 80082d0:	785b      	ldrb	r3, [r3, #1]
 80082d2:	001a      	movs	r2, r3
 80082d4:	187b      	adds	r3, r7, r1
 80082d6:	1c99      	adds	r1, r3, #2
 80082d8:	4837      	ldr	r0, [pc, #220]	@ (80083b8 <ProcessCmd+0x314>)
 80082da:	230c      	movs	r3, #12
 80082dc:	f003 faae 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 80082e0:	e035      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082e2:	2118      	movs	r1, #24
 80082e4:	187b      	adds	r3, r7, r1
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	001a      	movs	r2, r3
 80082ea:	187b      	adds	r3, r7, r1
 80082ec:	1c99      	adds	r1, r3, #2
 80082ee:	4833      	ldr	r0, [pc, #204]	@ (80083bc <ProcessCmd+0x318>)
 80082f0:	230c      	movs	r3, #12
 80082f2:	f003 faa3 	bl	800b83c <WriteUint8ArrayEepromSafe>
        break;
 80082f6:	e02a      	b.n	800834e <ProcessCmd+0x2aa>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 80082f8:	23ca      	movs	r3, #202	@ 0xca
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	4a18      	ldr	r2, [pc, #96]	@ (8008360 <ProcessCmd+0x2bc>)
 80082fe:	0019      	movs	r1, r3
 8008300:	0010      	movs	r0, r2
 8008302:	f003 fae0 	bl	800b8c6 <ClearEEprom>
        break;
 8008306:	e022      	b.n	800834e <ProcessCmd+0x2aa>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8008308:	2118      	movs	r1, #24
 800830a:	187b      	adds	r3, r7, r1
 800830c:	789b      	ldrb	r3, [r3, #2]
 800830e:	b21b      	sxth	r3, r3
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	b21a      	sxth	r2, r3
 8008314:	187b      	adds	r3, r7, r1
 8008316:	78db      	ldrb	r3, [r3, #3]
 8008318:	b21b      	sxth	r3, r3
 800831a:	4313      	orrs	r3, r2
 800831c:	b21a      	sxth	r2, r3
 800831e:	1dbb      	adds	r3, r7, #6
 8008320:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8008322:	1dbb      	adds	r3, r7, #6
 8008324:	881a      	ldrh	r2, [r3, #0]
 8008326:	23c0      	movs	r3, #192	@ 0xc0
 8008328:	015b      	lsls	r3, r3, #5
 800832a:	429a      	cmp	r2, r3
 800832c:	d207      	bcs.n	800833e <ProcessCmd+0x29a>
                ClearEEprom(EEPromStartAddr, size);
 800832e:	1dbb      	adds	r3, r7, #6
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	4a0b      	ldr	r2, [pc, #44]	@ (8008360 <ProcessCmd+0x2bc>)
 8008334:	0019      	movs	r1, r3
 8008336:	0010      	movs	r0, r2
 8008338:	f003 fac5 	bl	800b8c6 <ClearEEprom>
            break;
 800833c:	e006      	b.n	800834c <ProcessCmd+0x2a8>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 800833e:	23c0      	movs	r3, #192	@ 0xc0
 8008340:	015b      	lsls	r3, r3, #5
 8008342:	4a07      	ldr	r2, [pc, #28]	@ (8008360 <ProcessCmd+0x2bc>)
 8008344:	0019      	movs	r1, r3
 8008346:	0010      	movs	r0, r2
 8008348:	f003 fabd 	bl	800b8c6 <ClearEEprom>
            break;
 800834c:	46c0      	nop			@ (mov r8, r8)
}
 800834e:	46c0      	nop			@ (mov r8, r8)
 8008350:	46bd      	mov	sp, r7
 8008352:	b002      	add	sp, #8
 8008354:	bcb0      	pop	{r4, r5, r7}
 8008356:	bc08      	pop	{r3}
 8008358:	b004      	add	sp, #16
 800835a:	4718      	bx	r3
 800835c:	0802db94 	.word	0x0802db94
 8008360:	08080000 	.word	0x08080000
 8008364:	0808000c 	.word	0x0808000c
 8008368:	08080018 	.word	0x08080018
 800836c:	08080024 	.word	0x08080024
 8008370:	08080030 	.word	0x08080030
 8008374:	0808003c 	.word	0x0808003c
 8008378:	08080048 	.word	0x08080048
 800837c:	08080054 	.word	0x08080054
 8008380:	08080060 	.word	0x08080060
 8008384:	0808006c 	.word	0x0808006c
 8008388:	08080078 	.word	0x08080078
 800838c:	08080090 	.word	0x08080090
 8008390:	080800b0 	.word	0x080800b0
 8008394:	080800bc 	.word	0x080800bc
 8008398:	080800c8 	.word	0x080800c8
 800839c:	080800d4 	.word	0x080800d4
 80083a0:	080800e0 	.word	0x080800e0
 80083a4:	080800ec 	.word	0x080800ec
 80083a8:	080800f8 	.word	0x080800f8
 80083ac:	08080104 	.word	0x08080104
 80083b0:	08080110 	.word	0x08080110
 80083b4:	08080130 	.word	0x08080130
 80083b8:	08080170 	.word	0x08080170
 80083bc:	0808017c 	.word	0x0808017c

080083c0 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80083c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6039      	str	r1, [r7, #0]
 80083c8:	0011      	movs	r1, r2
 80083ca:	1dfb      	adds	r3, r7, #7
 80083cc:	1c02      	adds	r2, r0, #0
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	1dbb      	adds	r3, r7, #6
 80083d2:	1c0a      	adds	r2, r1, #0
 80083d4:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80083d6:	2223      	movs	r2, #35	@ 0x23
 80083d8:	4b20      	ldr	r3, [pc, #128]	@ (800845c <Create_Message+0x9c>)
 80083da:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80083dc:	4b1f      	ldr	r3, [pc, #124]	@ (800845c <Create_Message+0x9c>)
 80083de:	1dfa      	adds	r2, r7, #7
 80083e0:	7812      	ldrb	r2, [r2, #0]
 80083e2:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80083e4:	4b1d      	ldr	r3, [pc, #116]	@ (800845c <Create_Message+0x9c>)
 80083e6:	1dba      	adds	r2, r7, #6
 80083e8:	7812      	ldrb	r2, [r2, #0]
 80083ea:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80083ec:	1dbb      	adds	r3, r7, #6
 80083ee:	781a      	ldrb	r2, [r3, #0]
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008460 <Create_Message+0xa0>)
 80083f4:	0018      	movs	r0, r3
 80083f6:	f01d fb79 	bl	8025aec <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80083fa:	1dbb      	adds	r3, r7, #6
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	b29a      	uxth	r2, r3
 8008400:	250e      	movs	r5, #14
 8008402:	197b      	adds	r3, r7, r5
 8008404:	3203      	adds	r2, #3
 8008406:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8008408:	260c      	movs	r6, #12
 800840a:	19bc      	adds	r4, r7, r6
 800840c:	197b      	adds	r3, r7, r5
 800840e:	881a      	ldrh	r2, [r3, #0]
 8008410:	4b12      	ldr	r3, [pc, #72]	@ (800845c <Create_Message+0x9c>)
 8008412:	0011      	movs	r1, r2
 8008414:	0018      	movs	r0, r3
 8008416:	f000 f825 	bl	8008464 <CRC16_ARC>
 800841a:	0003      	movs	r3, r0
 800841c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800841e:	0030      	movs	r0, r6
 8008420:	183b      	adds	r3, r7, r0
 8008422:	881b      	ldrh	r3, [r3, #0]
 8008424:	0a1b      	lsrs	r3, r3, #8
 8008426:	b29a      	uxth	r2, r3
 8008428:	197b      	adds	r3, r7, r5
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b2d1      	uxtb	r1, r2
 800842e:	4a0b      	ldr	r2, [pc, #44]	@ (800845c <Create_Message+0x9c>)
 8008430:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8008432:	197b      	adds	r3, r7, r5
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	3301      	adds	r3, #1
 8008438:	183a      	adds	r2, r7, r0
 800843a:	8812      	ldrh	r2, [r2, #0]
 800843c:	b2d1      	uxtb	r1, r2
 800843e:	4a07      	ldr	r2, [pc, #28]	@ (800845c <Create_Message+0x9c>)
 8008440:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8008442:	197b      	adds	r3, r7, r5
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	3302      	adds	r3, #2
 8008448:	b29a      	uxth	r2, r3
 800844a:	4b04      	ldr	r3, [pc, #16]	@ (800845c <Create_Message+0x9c>)
 800844c:	0011      	movs	r1, r2
 800844e:	0018      	movs	r0, r3
 8008450:	f019 ffee 	bl	8022430 <CDC_Transmit_FS>
}
 8008454:	46c0      	nop			@ (mov r8, r8)
 8008456:	46bd      	mov	sp, r7
 8008458:	b005      	add	sp, #20
 800845a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800845c:	200008a0 	.word	0x200008a0
 8008460:	200008a3 	.word	0x200008a3

08008464 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	000a      	movs	r2, r1
 800846e:	1cbb      	adds	r3, r7, #2
 8008470:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8008472:	2316      	movs	r3, #22
 8008474:	18fb      	adds	r3, r7, r3
 8008476:	2200      	movs	r2, #0
 8008478:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800847a:	2300      	movs	r3, #0
 800847c:	613b      	str	r3, [r7, #16]
 800847e:	e02e      	b.n	80084de <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	18d3      	adds	r3, r2, r3
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	0019      	movs	r1, r3
 800848a:	2216      	movs	r2, #22
 800848c:	18bb      	adds	r3, r7, r2
 800848e:	18ba      	adds	r2, r7, r2
 8008490:	8812      	ldrh	r2, [r2, #0]
 8008492:	404a      	eors	r2, r1
 8008494:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008496:	2300      	movs	r3, #0
 8008498:	60fb      	str	r3, [r7, #12]
 800849a:	e01a      	b.n	80084d2 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 800849c:	2116      	movs	r1, #22
 800849e:	187b      	adds	r3, r7, r1
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	2201      	movs	r2, #1
 80084a4:	4013      	ands	r3, r2
 80084a6:	d00b      	beq.n	80084c0 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80084a8:	187b      	adds	r3, r7, r1
 80084aa:	187a      	adds	r2, r7, r1
 80084ac:	8812      	ldrh	r2, [r2, #0]
 80084ae:	0852      	lsrs	r2, r2, #1
 80084b0:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80084b2:	187b      	adds	r3, r7, r1
 80084b4:	187a      	adds	r2, r7, r1
 80084b6:	8812      	ldrh	r2, [r2, #0]
 80084b8:	490f      	ldr	r1, [pc, #60]	@ (80084f8 <CRC16_ARC+0x94>)
 80084ba:	404a      	eors	r2, r1
 80084bc:	801a      	strh	r2, [r3, #0]
 80084be:	e005      	b.n	80084cc <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80084c0:	2216      	movs	r2, #22
 80084c2:	18bb      	adds	r3, r7, r2
 80084c4:	18ba      	adds	r2, r7, r2
 80084c6:	8812      	ldrh	r2, [r2, #0]
 80084c8:	0852      	lsrs	r2, r2, #1
 80084ca:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3301      	adds	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b07      	cmp	r3, #7
 80084d6:	dde1      	ble.n	800849c <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	3301      	adds	r3, #1
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	1cbb      	adds	r3, r7, #2
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	dbcb      	blt.n	8008480 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80084e8:	2316      	movs	r3, #22
 80084ea:	18fb      	adds	r3, r7, r3
 80084ec:	881b      	ldrh	r3, [r3, #0]
}
 80084ee:	0018      	movs	r0, r3
 80084f0:	46bd      	mov	sp, r7
 80084f2:	b006      	add	sp, #24
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	46c0      	nop			@ (mov r8, r8)
 80084f8:	ffffa001 	.word	0xffffa001

080084fc <printf_USB>:

void printf_USB(const char* message, ...)
{
 80084fc:	b40f      	push	{r0, r1, r2, r3}
 80084fe:	b590      	push	{r4, r7, lr}
 8008500:	b0a9      	sub	sp, #164	@ 0xa4
 8008502:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8008504:	23ac      	movs	r3, #172	@ 0xac
 8008506:	2108      	movs	r1, #8
 8008508:	185b      	adds	r3, r3, r1
 800850a:	19db      	adds	r3, r3, r7
 800850c:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	23a8      	movs	r3, #168	@ 0xa8
 8008512:	185b      	adds	r3, r3, r1
 8008514:	19db      	adds	r3, r3, r7
 8008516:	6819      	ldr	r1, [r3, #0]
 8008518:	2408      	movs	r4, #8
 800851a:	193b      	adds	r3, r7, r4
 800851c:	0018      	movs	r0, r3
 800851e:	f01d f95d 	bl	80257dc <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008522:	193b      	adds	r3, r7, r4
 8008524:	0018      	movs	r0, r3
 8008526:	f7f7 fe21 	bl	800016c <strlen>
 800852a:	0003      	movs	r3, r0
 800852c:	b29a      	uxth	r2, r3
 800852e:	193b      	adds	r3, r7, r4
 8008530:	0011      	movs	r1, r2
 8008532:	0018      	movs	r0, r3
 8008534:	f019 ff7c 	bl	8022430 <CDC_Transmit_FS>
}
 8008538:	46c0      	nop			@ (mov r8, r8)
 800853a:	46bd      	mov	sp, r7
 800853c:	b029      	add	sp, #164	@ 0xa4
 800853e:	bc90      	pop	{r4, r7}
 8008540:	bc08      	pop	{r3}
 8008542:	b004      	add	sp, #16
 8008544:	4718      	bx	r3

08008546 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	000a      	movs	r2, r1
 8008550:	1cfb      	adds	r3, r7, #3
 8008552:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008554:	1cfb      	adds	r3, r7, #3
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d003      	beq.n	8008564 <PC_selectout+0x1e>
    printf_USB(msg);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	0018      	movs	r0, r3
 8008560:	f7ff ffcc 	bl	80084fc <printf_USB>
  }
//  else {
    printf(msg);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	0018      	movs	r0, r3
 8008568:	f01d f80a 	bl	8025580 <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 800856c:	200a      	movs	r0, #10
 800856e:	f00b fc37 	bl	8013de0 <HAL_Delay>
}
 8008572:	46c0      	nop			@ (mov r8, r8)
 8008574:	46bd      	mov	sp, r7
 8008576:	b002      	add	sp, #8
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <PC_show_Keys>:

void PC_show_Keys() {
 800857c:	b580      	push	{r7, lr}
 800857e:	af00      	add	r7, sp, #0
  static uint8_t UptimeConfig[IdSize];            // 25
#endif

  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8008580:	f000 fe68 	bl	8009254 <Check_USB_PowerOn>
 8008584:	1e03      	subs	r3, r0, #0
 8008586:	d005      	beq.n	8008594 <PC_show_Keys+0x18>
    usb_out = true;
 8008588:	4b01      	ldr	r3, [pc, #4]	@ (8008590 <PC_show_Keys+0x14>)
 800858a:	2201      	movs	r2, #1
 800858c:	701a      	strb	r2, [r3, #0]
 800858e:	e004      	b.n	800859a <PC_show_Keys+0x1e>
 8008590:	200009a5 	.word	0x200009a5
  }
  else {
    usb_out = false;
 8008594:	4bfd      	ldr	r3, [pc, #1012]	@ (800898c <PC_show_Keys+0x410>)
 8008596:	2200      	movs	r2, #0
 8008598:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 800859a:	4afd      	ldr	r2, [pc, #1012]	@ (8008990 <PC_show_Keys+0x414>)
 800859c:	4bfd      	ldr	r3, [pc, #1012]	@ (8008994 <PC_show_Keys+0x418>)
 800859e:	0011      	movs	r1, r2
 80085a0:	0018      	movs	r0, r3
 80085a2:	f01d f85d 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80085a6:	4bf9      	ldr	r3, [pc, #996]	@ (800898c <PC_show_Keys+0x410>)
 80085a8:	781a      	ldrb	r2, [r3, #0]
 80085aa:	4bfa      	ldr	r3, [pc, #1000]	@ (8008994 <PC_show_Keys+0x418>)
 80085ac:	0011      	movs	r1, r2
 80085ae:	0018      	movs	r0, r3
 80085b0:	f7ff ffc9 	bl	8008546 <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80085b4:	4bf8      	ldr	r3, [pc, #992]	@ (8008998 <PC_show_Keys+0x41c>)
 80085b6:	48f9      	ldr	r0, [pc, #996]	@ (800899c <PC_show_Keys+0x420>)
 80085b8:	220c      	movs	r2, #12
 80085ba:	0019      	movs	r1, r3
 80085bc:	f003 f95a 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 80085c0:	4af5      	ldr	r2, [pc, #980]	@ (8008998 <PC_show_Keys+0x41c>)
 80085c2:	4bf7      	ldr	r3, [pc, #988]	@ (80089a0 <PC_show_Keys+0x424>)
 80085c4:	0011      	movs	r1, r2
 80085c6:	0018      	movs	r0, r3
 80085c8:	f7fc fe20 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "Box id -----------------------------: %s\r\n", Buffer);
 80085cc:	4af4      	ldr	r2, [pc, #976]	@ (80089a0 <PC_show_Keys+0x424>)
 80085ce:	49f5      	ldr	r1, [pc, #980]	@ (80089a4 <PC_show_Keys+0x428>)
 80085d0:	4bf0      	ldr	r3, [pc, #960]	@ (8008994 <PC_show_Keys+0x418>)
 80085d2:	0018      	movs	r0, r3
 80085d4:	f01d f844 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80085d8:	4bec      	ldr	r3, [pc, #944]	@ (800898c <PC_show_Keys+0x410>)
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	4bed      	ldr	r3, [pc, #948]	@ (8008994 <PC_show_Keys+0x418>)
 80085de:	0011      	movs	r1, r2
 80085e0:	0018      	movs	r0, r3
 80085e2:	f7ff ffb0 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80085e6:	4bf0      	ldr	r3, [pc, #960]	@ (80089a8 <PC_show_Keys+0x42c>)
 80085e8:	48f0      	ldr	r0, [pc, #960]	@ (80089ac <PC_show_Keys+0x430>)
 80085ea:	220c      	movs	r2, #12
 80085ec:	0019      	movs	r1, r3
 80085ee:	f003 f941 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 80085f2:	4aed      	ldr	r2, [pc, #948]	@ (80089a8 <PC_show_Keys+0x42c>)
 80085f4:	4bea      	ldr	r3, [pc, #936]	@ (80089a0 <PC_show_Keys+0x424>)
 80085f6:	0011      	movs	r1, r2
 80085f8:	0018      	movs	r0, r3
 80085fa:	f7fc fe07 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "01 - Temperature sensor id: --------: %s\r\n", Buffer);
 80085fe:	4ae8      	ldr	r2, [pc, #928]	@ (80089a0 <PC_show_Keys+0x424>)
 8008600:	49eb      	ldr	r1, [pc, #940]	@ (80089b0 <PC_show_Keys+0x434>)
 8008602:	4be4      	ldr	r3, [pc, #912]	@ (8008994 <PC_show_Keys+0x418>)
 8008604:	0018      	movs	r0, r3
 8008606:	f01d f82b 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800860a:	4be0      	ldr	r3, [pc, #896]	@ (800898c <PC_show_Keys+0x410>)
 800860c:	781a      	ldrb	r2, [r3, #0]
 800860e:	4be1      	ldr	r3, [pc, #900]	@ (8008994 <PC_show_Keys+0x418>)
 8008610:	0011      	movs	r1, r2
 8008612:	0018      	movs	r0, r3
 8008614:	f7ff ff97 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008618:	4be6      	ldr	r3, [pc, #920]	@ (80089b4 <PC_show_Keys+0x438>)
 800861a:	48e7      	ldr	r0, [pc, #924]	@ (80089b8 <PC_show_Keys+0x43c>)
 800861c:	220c      	movs	r2, #12
 800861e:	0019      	movs	r1, r3
 8008620:	f003 f928 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008624:	4ae3      	ldr	r2, [pc, #908]	@ (80089b4 <PC_show_Keys+0x438>)
 8008626:	4bde      	ldr	r3, [pc, #888]	@ (80089a0 <PC_show_Keys+0x424>)
 8008628:	0011      	movs	r1, r2
 800862a:	0018      	movs	r0, r3
 800862c:	f7fc fdee 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "02 - Humidity sensor id ------------: %s\r\n", Buffer);
 8008630:	4adb      	ldr	r2, [pc, #876]	@ (80089a0 <PC_show_Keys+0x424>)
 8008632:	49e2      	ldr	r1, [pc, #904]	@ (80089bc <PC_show_Keys+0x440>)
 8008634:	4bd7      	ldr	r3, [pc, #860]	@ (8008994 <PC_show_Keys+0x418>)
 8008636:	0018      	movs	r0, r3
 8008638:	f01d f812 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800863c:	4bd3      	ldr	r3, [pc, #844]	@ (800898c <PC_show_Keys+0x410>)
 800863e:	781a      	ldrb	r2, [r3, #0]
 8008640:	4bd4      	ldr	r3, [pc, #848]	@ (8008994 <PC_show_Keys+0x418>)
 8008642:	0011      	movs	r1, r2
 8008644:	0018      	movs	r0, r3
 8008646:	f7ff ff7e 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 800864a:	4bdd      	ldr	r3, [pc, #884]	@ (80089c0 <PC_show_Keys+0x444>)
 800864c:	48dd      	ldr	r0, [pc, #884]	@ (80089c4 <PC_show_Keys+0x448>)
 800864e:	220c      	movs	r2, #12
 8008650:	0019      	movs	r1, r3
 8008652:	f003 f90f 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008656:	4ada      	ldr	r2, [pc, #872]	@ (80089c0 <PC_show_Keys+0x444>)
 8008658:	4bd1      	ldr	r3, [pc, #836]	@ (80089a0 <PC_show_Keys+0x424>)
 800865a:	0011      	movs	r1, r2
 800865c:	0018      	movs	r0, r3
 800865e:	f7fc fdd5 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "03 - NOx sensor id -----------------: %s\r\n", Buffer);
 8008662:	4acf      	ldr	r2, [pc, #828]	@ (80089a0 <PC_show_Keys+0x424>)
 8008664:	49d8      	ldr	r1, [pc, #864]	@ (80089c8 <PC_show_Keys+0x44c>)
 8008666:	4bcb      	ldr	r3, [pc, #812]	@ (8008994 <PC_show_Keys+0x418>)
 8008668:	0018      	movs	r0, r3
 800866a:	f01c fff9 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800866e:	4bc7      	ldr	r3, [pc, #796]	@ (800898c <PC_show_Keys+0x410>)
 8008670:	781a      	ldrb	r2, [r3, #0]
 8008672:	4bc8      	ldr	r3, [pc, #800]	@ (8008994 <PC_show_Keys+0x418>)
 8008674:	0011      	movs	r1, r2
 8008676:	0018      	movs	r0, r3
 8008678:	f7ff ff65 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 800867c:	4bd3      	ldr	r3, [pc, #844]	@ (80089cc <PC_show_Keys+0x450>)
 800867e:	48d4      	ldr	r0, [pc, #848]	@ (80089d0 <PC_show_Keys+0x454>)
 8008680:	220c      	movs	r2, #12
 8008682:	0019      	movs	r1, r3
 8008684:	f003 f8f6 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008688:	4ad0      	ldr	r2, [pc, #832]	@ (80089cc <PC_show_Keys+0x450>)
 800868a:	4bc5      	ldr	r3, [pc, #788]	@ (80089a0 <PC_show_Keys+0x424>)
 800868c:	0011      	movs	r1, r2
 800868e:	0018      	movs	r0, r3
 8008690:	f7fc fdbc 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "04 - VOC sensor id -----------------: %s\r\n", Buffer);
 8008694:	4ac2      	ldr	r2, [pc, #776]	@ (80089a0 <PC_show_Keys+0x424>)
 8008696:	49cf      	ldr	r1, [pc, #828]	@ (80089d4 <PC_show_Keys+0x458>)
 8008698:	4bbe      	ldr	r3, [pc, #760]	@ (8008994 <PC_show_Keys+0x418>)
 800869a:	0018      	movs	r0, r3
 800869c:	f01c ffe0 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80086a0:	4bba      	ldr	r3, [pc, #744]	@ (800898c <PC_show_Keys+0x410>)
 80086a2:	781a      	ldrb	r2, [r3, #0]
 80086a4:	4bbb      	ldr	r3, [pc, #748]	@ (8008994 <PC_show_Keys+0x418>)
 80086a6:	0011      	movs	r1, r2
 80086a8:	0018      	movs	r0, r3
 80086aa:	f7ff ff4c 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 80086ae:	4bca      	ldr	r3, [pc, #808]	@ (80089d8 <PC_show_Keys+0x45c>)
 80086b0:	48ca      	ldr	r0, [pc, #808]	@ (80089dc <PC_show_Keys+0x460>)
 80086b2:	220c      	movs	r2, #12
 80086b4:	0019      	movs	r1, r3
 80086b6:	f003 f8dd 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 80086ba:	4ac7      	ldr	r2, [pc, #796]	@ (80089d8 <PC_show_Keys+0x45c>)
 80086bc:	4bb8      	ldr	r3, [pc, #736]	@ (80089a0 <PC_show_Keys+0x424>)
 80086be:	0011      	movs	r1, r2
 80086c0:	0018      	movs	r0, r3
 80086c2:	f7fc fda3 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "05 is former dBa unused\r\n");
 80086c6:	4ac6      	ldr	r2, [pc, #792]	@ (80089e0 <PC_show_Keys+0x464>)
 80086c8:	4bb2      	ldr	r3, [pc, #712]	@ (8008994 <PC_show_Keys+0x418>)
 80086ca:	0011      	movs	r1, r2
 80086cc:	0018      	movs	r0, r3
 80086ce:	f01c ffc7 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80086d2:	4bae      	ldr	r3, [pc, #696]	@ (800898c <PC_show_Keys+0x410>)
 80086d4:	781a      	ldrb	r2, [r3, #0]
 80086d6:	4baf      	ldr	r3, [pc, #700]	@ (8008994 <PC_show_Keys+0x418>)
 80086d8:	0011      	movs	r1, r2
 80086da:	0018      	movs	r0, r3
 80086dc:	f7ff ff33 	bl	8008546 <PC_selectout>
  sprintf(msg, "05 - Air pressure sensor id --------: %s\r\n", Buffer);
 80086e0:	4aaf      	ldr	r2, [pc, #700]	@ (80089a0 <PC_show_Keys+0x424>)
 80086e2:	49c0      	ldr	r1, [pc, #768]	@ (80089e4 <PC_show_Keys+0x468>)
 80086e4:	4bab      	ldr	r3, [pc, #684]	@ (8008994 <PC_show_Keys+0x418>)
 80086e6:	0018      	movs	r0, r3
 80086e8:	f01c ffba 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80086ec:	4ba7      	ldr	r3, [pc, #668]	@ (800898c <PC_show_Keys+0x410>)
 80086ee:	781a      	ldrb	r2, [r3, #0]
 80086f0:	4ba8      	ldr	r3, [pc, #672]	@ (8008994 <PC_show_Keys+0x418>)
 80086f2:	0011      	movs	r1, r2
 80086f4:	0018      	movs	r0, r3
 80086f6:	f7ff ff26 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 80086fa:	4bbb      	ldr	r3, [pc, #748]	@ (80089e8 <PC_show_Keys+0x46c>)
 80086fc:	48bb      	ldr	r0, [pc, #748]	@ (80089ec <PC_show_Keys+0x470>)
 80086fe:	220c      	movs	r2, #12
 8008700:	0019      	movs	r1, r3
 8008702:	f003 f8b7 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008706:	4ab8      	ldr	r2, [pc, #736]	@ (80089e8 <PC_show_Keys+0x46c>)
 8008708:	4ba5      	ldr	r3, [pc, #660]	@ (80089a0 <PC_show_Keys+0x424>)
 800870a:	0011      	movs	r1, r2
 800870c:	0018      	movs	r0, r3
 800870e:	f7fc fd7d 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "06 is former dBc\r\n");
 8008712:	4ab7      	ldr	r2, [pc, #732]	@ (80089f0 <PC_show_Keys+0x474>)
 8008714:	4b9f      	ldr	r3, [pc, #636]	@ (8008994 <PC_show_Keys+0x418>)
 8008716:	0011      	movs	r1, r2
 8008718:	0018      	movs	r0, r3
 800871a:	f01c ffa1 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800871e:	4b9b      	ldr	r3, [pc, #620]	@ (800898c <PC_show_Keys+0x410>)
 8008720:	781a      	ldrb	r2, [r3, #0]
 8008722:	4b9c      	ldr	r3, [pc, #624]	@ (8008994 <PC_show_Keys+0x418>)
 8008724:	0011      	movs	r1, r2
 8008726:	0018      	movs	r0, r3
 8008728:	f7ff ff0d 	bl	8008546 <PC_selectout>
  sprintf(msg, "06 - Sound dBA sensor id -----------: %s\r\n", Buffer);
 800872c:	4a9c      	ldr	r2, [pc, #624]	@ (80089a0 <PC_show_Keys+0x424>)
 800872e:	49b1      	ldr	r1, [pc, #708]	@ (80089f4 <PC_show_Keys+0x478>)
 8008730:	4b98      	ldr	r3, [pc, #608]	@ (8008994 <PC_show_Keys+0x418>)
 8008732:	0018      	movs	r0, r3
 8008734:	f01c ff94 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008738:	4b94      	ldr	r3, [pc, #592]	@ (800898c <PC_show_Keys+0x410>)
 800873a:	781a      	ldrb	r2, [r3, #0]
 800873c:	4b95      	ldr	r3, [pc, #596]	@ (8008994 <PC_show_Keys+0x418>)
 800873e:	0011      	movs	r1, r2
 8008740:	0018      	movs	r0, r3
 8008742:	f7ff ff00 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008746:	4bac      	ldr	r3, [pc, #688]	@ (80089f8 <PC_show_Keys+0x47c>)
 8008748:	48ac      	ldr	r0, [pc, #688]	@ (80089fc <PC_show_Keys+0x480>)
 800874a:	220c      	movs	r2, #12
 800874c:	0019      	movs	r1, r3
 800874e:	f003 f891 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008752:	4aa9      	ldr	r2, [pc, #676]	@ (80089f8 <PC_show_Keys+0x47c>)
 8008754:	4b92      	ldr	r3, [pc, #584]	@ (80089a0 <PC_show_Keys+0x424>)
 8008756:	0011      	movs	r1, r2
 8008758:	0018      	movs	r0, r3
 800875a:	f7fc fd57 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "07 - PM2p5 sensor id ---------------: %s\r\n", Buffer);
 800875e:	4a90      	ldr	r2, [pc, #576]	@ (80089a0 <PC_show_Keys+0x424>)
 8008760:	49a7      	ldr	r1, [pc, #668]	@ (8008a00 <PC_show_Keys+0x484>)
 8008762:	4b8c      	ldr	r3, [pc, #560]	@ (8008994 <PC_show_Keys+0x418>)
 8008764:	0018      	movs	r0, r3
 8008766:	f01c ff7b 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800876a:	4b88      	ldr	r3, [pc, #544]	@ (800898c <PC_show_Keys+0x410>)
 800876c:	781a      	ldrb	r2, [r3, #0]
 800876e:	4b89      	ldr	r3, [pc, #548]	@ (8008994 <PC_show_Keys+0x418>)
 8008770:	0011      	movs	r1, r2
 8008772:	0018      	movs	r0, r3
 8008774:	f7ff fee7 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008778:	4ba2      	ldr	r3, [pc, #648]	@ (8008a04 <PC_show_Keys+0x488>)
 800877a:	48a3      	ldr	r0, [pc, #652]	@ (8008a08 <PC_show_Keys+0x48c>)
 800877c:	220c      	movs	r2, #12
 800877e:	0019      	movs	r1, r3
 8008780:	f003 f878 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8008784:	4a9f      	ldr	r2, [pc, #636]	@ (8008a04 <PC_show_Keys+0x488>)
 8008786:	4b86      	ldr	r3, [pc, #536]	@ (80089a0 <PC_show_Keys+0x424>)
 8008788:	0011      	movs	r1, r2
 800878a:	0018      	movs	r0, r3
 800878c:	f7fc fd3e 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "08 - PM10 sensor id ----------------: %s\r\n", Buffer);
 8008790:	4a83      	ldr	r2, [pc, #524]	@ (80089a0 <PC_show_Keys+0x424>)
 8008792:	499e      	ldr	r1, [pc, #632]	@ (8008a0c <PC_show_Keys+0x490>)
 8008794:	4b7f      	ldr	r3, [pc, #508]	@ (8008994 <PC_show_Keys+0x418>)
 8008796:	0018      	movs	r0, r3
 8008798:	f01c ff62 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800879c:	4b7b      	ldr	r3, [pc, #492]	@ (800898c <PC_show_Keys+0x410>)
 800879e:	781a      	ldrb	r2, [r3, #0]
 80087a0:	4b7c      	ldr	r3, [pc, #496]	@ (8008994 <PC_show_Keys+0x418>)
 80087a2:	0011      	movs	r1, r2
 80087a4:	0018      	movs	r0, r3
 80087a6:	f7ff fece 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 80087aa:	4b99      	ldr	r3, [pc, #612]	@ (8008a10 <PC_show_Keys+0x494>)
 80087ac:	4899      	ldr	r0, [pc, #612]	@ (8008a14 <PC_show_Keys+0x498>)
 80087ae:	220c      	movs	r2, #12
 80087b0:	0019      	movs	r1, r3
 80087b2:	f003 f85f 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 80087b6:	4a96      	ldr	r2, [pc, #600]	@ (8008a10 <PC_show_Keys+0x494>)
 80087b8:	4b79      	ldr	r3, [pc, #484]	@ (80089a0 <PC_show_Keys+0x424>)
 80087ba:	0011      	movs	r1, r2
 80087bc:	0018      	movs	r0, r3
 80087be:	f7fc fd25 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "09 - Battery voltage sensor id -----: %s\r\n", Buffer);
 80087c2:	4a77      	ldr	r2, [pc, #476]	@ (80089a0 <PC_show_Keys+0x424>)
 80087c4:	4994      	ldr	r1, [pc, #592]	@ (8008a18 <PC_show_Keys+0x49c>)
 80087c6:	4b73      	ldr	r3, [pc, #460]	@ (8008994 <PC_show_Keys+0x418>)
 80087c8:	0018      	movs	r0, r3
 80087ca:	f01c ff49 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80087ce:	4b6f      	ldr	r3, [pc, #444]	@ (800898c <PC_show_Keys+0x410>)
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	4b70      	ldr	r3, [pc, #448]	@ (8008994 <PC_show_Keys+0x418>)
 80087d4:	0011      	movs	r1, r2
 80087d6:	0018      	movs	r0, r3
 80087d8:	f7ff feb5 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 80087dc:	4b8f      	ldr	r3, [pc, #572]	@ (8008a1c <PC_show_Keys+0x4a0>)
 80087de:	4890      	ldr	r0, [pc, #576]	@ (8008a20 <PC_show_Keys+0x4a4>)
 80087e0:	220c      	movs	r2, #12
 80087e2:	0019      	movs	r1, r3
 80087e4:	f003 f846 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 80087e8:	4a8c      	ldr	r2, [pc, #560]	@ (8008a1c <PC_show_Keys+0x4a0>)
 80087ea:	4b6d      	ldr	r3, [pc, #436]	@ (80089a0 <PC_show_Keys+0x424>)
 80087ec:	0011      	movs	r1, r2
 80087ee:	0018      	movs	r0, r3
 80087f0:	f7fc fd0c 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "10 - Solar voltage sensor id -------: %s\r\n", Buffer);
 80087f4:	4a6a      	ldr	r2, [pc, #424]	@ (80089a0 <PC_show_Keys+0x424>)
 80087f6:	498b      	ldr	r1, [pc, #556]	@ (8008a24 <PC_show_Keys+0x4a8>)
 80087f8:	4b66      	ldr	r3, [pc, #408]	@ (8008994 <PC_show_Keys+0x418>)
 80087fa:	0018      	movs	r0, r3
 80087fc:	f01c ff30 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008800:	4b62      	ldr	r3, [pc, #392]	@ (800898c <PC_show_Keys+0x410>)
 8008802:	781a      	ldrb	r2, [r3, #0]
 8008804:	4b63      	ldr	r3, [pc, #396]	@ (8008994 <PC_show_Keys+0x418>)
 8008806:	0011      	movs	r1, r2
 8008808:	0018      	movs	r0, r3
 800880a:	f7ff fe9c 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 800880e:	4b86      	ldr	r3, [pc, #536]	@ (8008a28 <PC_show_Keys+0x4ac>)
 8008810:	4886      	ldr	r0, [pc, #536]	@ (8008a2c <PC_show_Keys+0x4b0>)
 8008812:	220c      	movs	r2, #12
 8008814:	0019      	movs	r1, r3
 8008816:	f003 f82d 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 800881a:	4a83      	ldr	r2, [pc, #524]	@ (8008a28 <PC_show_Keys+0x4ac>)
 800881c:	4b60      	ldr	r3, [pc, #384]	@ (80089a0 <PC_show_Keys+0x424>)
 800881e:	0011      	movs	r1, r2
 8008820:	0018      	movs	r0, r3
 8008822:	f7fc fcf3 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "11 - Charger status (not used) -----: %s\r\n", Buffer);
 8008826:	4a5e      	ldr	r2, [pc, #376]	@ (80089a0 <PC_show_Keys+0x424>)
 8008828:	4981      	ldr	r1, [pc, #516]	@ (8008a30 <PC_show_Keys+0x4b4>)
 800882a:	4b5a      	ldr	r3, [pc, #360]	@ (8008994 <PC_show_Keys+0x418>)
 800882c:	0018      	movs	r0, r3
 800882e:	f01c ff17 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008832:	4b56      	ldr	r3, [pc, #344]	@ (800898c <PC_show_Keys+0x410>)
 8008834:	781a      	ldrb	r2, [r3, #0]
 8008836:	4b57      	ldr	r3, [pc, #348]	@ (8008994 <PC_show_Keys+0x418>)
 8008838:	0011      	movs	r1, r2
 800883a:	0018      	movs	r0, r3
 800883c:	f7ff fe83 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008840:	4b7c      	ldr	r3, [pc, #496]	@ (8008a34 <PC_show_Keys+0x4b8>)
 8008842:	487d      	ldr	r0, [pc, #500]	@ (8008a38 <PC_show_Keys+0x4bc>)
 8008844:	2220      	movs	r2, #32
 8008846:	0019      	movs	r1, r3
 8008848:	f003 f814 	bl	800b874 <ReadUint8ArrayEEprom>
  sprintf(msg, "12 - Stored name -------------------: ");
 800884c:	4a7b      	ldr	r2, [pc, #492]	@ (8008a3c <PC_show_Keys+0x4c0>)
 800884e:	4b51      	ldr	r3, [pc, #324]	@ (8008994 <PC_show_Keys+0x418>)
 8008850:	0011      	movs	r1, r2
 8008852:	0018      	movs	r0, r3
 8008854:	f01c ff04 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008858:	4b4c      	ldr	r3, [pc, #304]	@ (800898c <PC_show_Keys+0x410>)
 800885a:	781a      	ldrb	r2, [r3, #0]
 800885c:	4b4d      	ldr	r3, [pc, #308]	@ (8008994 <PC_show_Keys+0x418>)
 800885e:	0011      	movs	r1, r2
 8008860:	0018      	movs	r0, r3
 8008862:	f7ff fe70 	bl	8008546 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008866:	4a73      	ldr	r2, [pc, #460]	@ (8008a34 <PC_show_Keys+0x4b8>)
 8008868:	4975      	ldr	r1, [pc, #468]	@ (8008a40 <PC_show_Keys+0x4c4>)
 800886a:	4b4a      	ldr	r3, [pc, #296]	@ (8008994 <PC_show_Keys+0x418>)
 800886c:	0018      	movs	r0, r3
 800886e:	f01c fef7 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008872:	4b46      	ldr	r3, [pc, #280]	@ (800898c <PC_show_Keys+0x410>)
 8008874:	781a      	ldrb	r2, [r3, #0]
 8008876:	4b47      	ldr	r3, [pc, #284]	@ (8008994 <PC_show_Keys+0x418>)
 8008878:	0011      	movs	r1, r2
 800887a:	0018      	movs	r0, r3
 800887c:	f7ff fe63 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 8008880:	4b70      	ldr	r3, [pc, #448]	@ (8008a44 <PC_show_Keys+0x4c8>)
 8008882:	4871      	ldr	r0, [pc, #452]	@ (8008a48 <PC_show_Keys+0x4cc>)
 8008884:	220c      	movs	r2, #12
 8008886:	0019      	movs	r1, r3
 8008888:	f002 fff4 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 800888c:	4a6d      	ldr	r2, [pc, #436]	@ (8008a44 <PC_show_Keys+0x4c8>)
 800888e:	4b44      	ldr	r3, [pc, #272]	@ (80089a0 <PC_show_Keys+0x424>)
 8008890:	0011      	movs	r1, r2
 8008892:	0018      	movs	r0, r3
 8008894:	f7fc fcba 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "13 - PM1p0 sensor id ---------------: %s\r\n", Buffer);
 8008898:	4a41      	ldr	r2, [pc, #260]	@ (80089a0 <PC_show_Keys+0x424>)
 800889a:	496c      	ldr	r1, [pc, #432]	@ (8008a4c <PC_show_Keys+0x4d0>)
 800889c:	4b3d      	ldr	r3, [pc, #244]	@ (8008994 <PC_show_Keys+0x418>)
 800889e:	0018      	movs	r0, r3
 80088a0:	f01c fede 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80088a4:	4b39      	ldr	r3, [pc, #228]	@ (800898c <PC_show_Keys+0x410>)
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	4b3a      	ldr	r3, [pc, #232]	@ (8008994 <PC_show_Keys+0x418>)
 80088aa:	0011      	movs	r1, r2
 80088ac:	0018      	movs	r0, r3
 80088ae:	f7ff fe4a 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 80088b2:	4b67      	ldr	r3, [pc, #412]	@ (8008a50 <PC_show_Keys+0x4d4>)
 80088b4:	4867      	ldr	r0, [pc, #412]	@ (8008a54 <PC_show_Keys+0x4d8>)
 80088b6:	220c      	movs	r2, #12
 80088b8:	0019      	movs	r1, r3
 80088ba:	f002 ffdb 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 80088be:	4a64      	ldr	r2, [pc, #400]	@ (8008a50 <PC_show_Keys+0x4d4>)
 80088c0:	4b37      	ldr	r3, [pc, #220]	@ (80089a0 <PC_show_Keys+0x424>)
 80088c2:	0011      	movs	r1, r2
 80088c4:	0018      	movs	r0, r3
 80088c6:	f7fc fca1 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "14 - PM4p0 sensor id ---------------: %s\r\n", Buffer);
 80088ca:	4a35      	ldr	r2, [pc, #212]	@ (80089a0 <PC_show_Keys+0x424>)
 80088cc:	4962      	ldr	r1, [pc, #392]	@ (8008a58 <PC_show_Keys+0x4dc>)
 80088ce:	4b31      	ldr	r3, [pc, #196]	@ (8008994 <PC_show_Keys+0x418>)
 80088d0:	0018      	movs	r0, r3
 80088d2:	f01c fec5 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80088d6:	4b2d      	ldr	r3, [pc, #180]	@ (800898c <PC_show_Keys+0x410>)
 80088d8:	781a      	ldrb	r2, [r3, #0]
 80088da:	4b2e      	ldr	r3, [pc, #184]	@ (8008994 <PC_show_Keys+0x418>)
 80088dc:	0011      	movs	r1, r2
 80088de:	0018      	movs	r0, r3
 80088e0:	f7ff fe31 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 80088e4:	4b5d      	ldr	r3, [pc, #372]	@ (8008a5c <PC_show_Keys+0x4e0>)
 80088e6:	485e      	ldr	r0, [pc, #376]	@ (8008a60 <PC_show_Keys+0x4e4>)
 80088e8:	220c      	movs	r2, #12
 80088ea:	0019      	movs	r1, r3
 80088ec:	f002 ffc2 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 80088f0:	4a5a      	ldr	r2, [pc, #360]	@ (8008a5c <PC_show_Keys+0x4e0>)
 80088f2:	4b2b      	ldr	r3, [pc, #172]	@ (80089a0 <PC_show_Keys+0x424>)
 80088f4:	0011      	movs	r1, r2
 80088f6:	0018      	movs	r0, r3
 80088f8:	f7fc fc88 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "15 - AHT2x Temperature sensor id ---: %s\r\n", Buffer);
 80088fc:	4a28      	ldr	r2, [pc, #160]	@ (80089a0 <PC_show_Keys+0x424>)
 80088fe:	4959      	ldr	r1, [pc, #356]	@ (8008a64 <PC_show_Keys+0x4e8>)
 8008900:	4b24      	ldr	r3, [pc, #144]	@ (8008994 <PC_show_Keys+0x418>)
 8008902:	0018      	movs	r0, r3
 8008904:	f01c feac 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008908:	4b20      	ldr	r3, [pc, #128]	@ (800898c <PC_show_Keys+0x410>)
 800890a:	781a      	ldrb	r2, [r3, #0]
 800890c:	4b21      	ldr	r3, [pc, #132]	@ (8008994 <PC_show_Keys+0x418>)
 800890e:	0011      	movs	r1, r2
 8008910:	0018      	movs	r0, r3
 8008912:	f7ff fe18 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008916:	4b54      	ldr	r3, [pc, #336]	@ (8008a68 <PC_show_Keys+0x4ec>)
 8008918:	4854      	ldr	r0, [pc, #336]	@ (8008a6c <PC_show_Keys+0x4f0>)
 800891a:	220c      	movs	r2, #12
 800891c:	0019      	movs	r1, r3
 800891e:	f002 ffa9 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008922:	4a51      	ldr	r2, [pc, #324]	@ (8008a68 <PC_show_Keys+0x4ec>)
 8008924:	4b1e      	ldr	r3, [pc, #120]	@ (80089a0 <PC_show_Keys+0x424>)
 8008926:	0011      	movs	r1, r2
 8008928:	0018      	movs	r0, r3
 800892a:	f7fc fc6f 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "16 - AHT2x Humidity sensor id ------: %s\r\n", Buffer);
 800892e:	4a1c      	ldr	r2, [pc, #112]	@ (80089a0 <PC_show_Keys+0x424>)
 8008930:	494f      	ldr	r1, [pc, #316]	@ (8008a70 <PC_show_Keys+0x4f4>)
 8008932:	4b18      	ldr	r3, [pc, #96]	@ (8008994 <PC_show_Keys+0x418>)
 8008934:	0018      	movs	r0, r3
 8008936:	f01c fe93 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800893a:	4b14      	ldr	r3, [pc, #80]	@ (800898c <PC_show_Keys+0x410>)
 800893c:	781a      	ldrb	r2, [r3, #0]
 800893e:	4b15      	ldr	r3, [pc, #84]	@ (8008994 <PC_show_Keys+0x418>)
 8008940:	0011      	movs	r1, r2
 8008942:	0018      	movs	r0, r3
 8008944:	f7ff fdff 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008948:	4b4a      	ldr	r3, [pc, #296]	@ (8008a74 <PC_show_Keys+0x4f8>)
 800894a:	484b      	ldr	r0, [pc, #300]	@ (8008a78 <PC_show_Keys+0x4fc>)
 800894c:	220c      	movs	r2, #12
 800894e:	0019      	movs	r1, r3
 8008950:	f002 ff90 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008954:	4a47      	ldr	r2, [pc, #284]	@ (8008a74 <PC_show_Keys+0x4f8>)
 8008956:	4b12      	ldr	r3, [pc, #72]	@ (80089a0 <PC_show_Keys+0x424>)
 8008958:	0011      	movs	r1, r2
 800895a:	0018      	movs	r0, r3
 800895c:	f7fc fc56 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "17 - BMP280 Temperature sensor id --: %s\r\n", Buffer);
 8008960:	4a0f      	ldr	r2, [pc, #60]	@ (80089a0 <PC_show_Keys+0x424>)
 8008962:	4946      	ldr	r1, [pc, #280]	@ (8008a7c <PC_show_Keys+0x500>)
 8008964:	4b0b      	ldr	r3, [pc, #44]	@ (8008994 <PC_show_Keys+0x418>)
 8008966:	0018      	movs	r0, r3
 8008968:	f01c fe7a 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800896c:	4b07      	ldr	r3, [pc, #28]	@ (800898c <PC_show_Keys+0x410>)
 800896e:	781a      	ldrb	r2, [r3, #0]
 8008970:	4b08      	ldr	r3, [pc, #32]	@ (8008994 <PC_show_Keys+0x418>)
 8008972:	0011      	movs	r1, r2
 8008974:	0018      	movs	r0, r3
 8008976:	f7ff fde6 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 800897a:	4b41      	ldr	r3, [pc, #260]	@ (8008a80 <PC_show_Keys+0x504>)
 800897c:	4841      	ldr	r0, [pc, #260]	@ (8008a84 <PC_show_Keys+0x508>)
 800897e:	220c      	movs	r2, #12
 8008980:	0019      	movs	r1, r3
 8008982:	f002 ff77 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008986:	4a3e      	ldr	r2, [pc, #248]	@ (8008a80 <PC_show_Keys+0x504>)
 8008988:	e07e      	b.n	8008a88 <PC_show_Keys+0x50c>
 800898a:	46c0      	nop			@ (mov r8, r8)
 800898c:	200009a5 	.word	0x200009a5
 8008990:	0802afe4 	.word	0x0802afe4
 8008994:	200009a8 	.word	0x200009a8
 8008998:	200009f0 	.word	0x200009f0
 800899c:	08080000 	.word	0x08080000
 80089a0:	200009fc 	.word	0x200009fc
 80089a4:	0802b000 	.word	0x0802b000
 80089a8:	20000a18 	.word	0x20000a18
 80089ac:	0808000c 	.word	0x0808000c
 80089b0:	0802b02c 	.word	0x0802b02c
 80089b4:	20000a24 	.word	0x20000a24
 80089b8:	08080018 	.word	0x08080018
 80089bc:	0802b058 	.word	0x0802b058
 80089c0:	20000a30 	.word	0x20000a30
 80089c4:	08080024 	.word	0x08080024
 80089c8:	0802b084 	.word	0x0802b084
 80089cc:	20000a3c 	.word	0x20000a3c
 80089d0:	08080030 	.word	0x08080030
 80089d4:	0802b0b0 	.word	0x0802b0b0
 80089d8:	20000a48 	.word	0x20000a48
 80089dc:	0808003c 	.word	0x0808003c
 80089e0:	0802b0dc 	.word	0x0802b0dc
 80089e4:	0802b0f8 	.word	0x0802b0f8
 80089e8:	20000a54 	.word	0x20000a54
 80089ec:	08080048 	.word	0x08080048
 80089f0:	0802b124 	.word	0x0802b124
 80089f4:	0802b138 	.word	0x0802b138
 80089f8:	20000a60 	.word	0x20000a60
 80089fc:	08080054 	.word	0x08080054
 8008a00:	0802b164 	.word	0x0802b164
 8008a04:	20000a6c 	.word	0x20000a6c
 8008a08:	08080060 	.word	0x08080060
 8008a0c:	0802b190 	.word	0x0802b190
 8008a10:	20000a78 	.word	0x20000a78
 8008a14:	0808006c 	.word	0x0808006c
 8008a18:	0802b1bc 	.word	0x0802b1bc
 8008a1c:	20000a84 	.word	0x20000a84
 8008a20:	08080078 	.word	0x08080078
 8008a24:	0802b1e8 	.word	0x0802b1e8
 8008a28:	20000a90 	.word	0x20000a90
 8008a2c:	08080084 	.word	0x08080084
 8008a30:	0802b214 	.word	0x0802b214
 8008a34:	20000a9c 	.word	0x20000a9c
 8008a38:	08080090 	.word	0x08080090
 8008a3c:	0802b240 	.word	0x0802b240
 8008a40:	0802b268 	.word	0x0802b268
 8008a44:	20000abc 	.word	0x20000abc
 8008a48:	080800b0 	.word	0x080800b0
 8008a4c:	0802b270 	.word	0x0802b270
 8008a50:	20000ac8 	.word	0x20000ac8
 8008a54:	080800bc 	.word	0x080800bc
 8008a58:	0802b29c 	.word	0x0802b29c
 8008a5c:	20000ad4 	.word	0x20000ad4
 8008a60:	080800c8 	.word	0x080800c8
 8008a64:	0802b2c8 	.word	0x0802b2c8
 8008a68:	20000ae0 	.word	0x20000ae0
 8008a6c:	080800d4 	.word	0x080800d4
 8008a70:	0802b2f4 	.word	0x0802b2f4
 8008a74:	20000aec 	.word	0x20000aec
 8008a78:	080800e0 	.word	0x080800e0
 8008a7c:	0802b320 	.word	0x0802b320
 8008a80:	20000af8 	.word	0x20000af8
 8008a84:	080800ec 	.word	0x080800ec
 8008a88:	4b5d      	ldr	r3, [pc, #372]	@ (8008c00 <PC_show_Keys+0x684>)
 8008a8a:	0011      	movs	r1, r2
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	f7fc fbbd 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "18 - ENS160 AQI sensor id ----------: %s\r\n", Buffer);
 8008a92:	4a5b      	ldr	r2, [pc, #364]	@ (8008c00 <PC_show_Keys+0x684>)
 8008a94:	495b      	ldr	r1, [pc, #364]	@ (8008c04 <PC_show_Keys+0x688>)
 8008a96:	4b5c      	ldr	r3, [pc, #368]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f01c fde1 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8008c0c <PC_show_Keys+0x690>)
 8008aa0:	781a      	ldrb	r2, [r3, #0]
 8008aa2:	4b59      	ldr	r3, [pc, #356]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008aa4:	0011      	movs	r1, r2
 8008aa6:	0018      	movs	r0, r3
 8008aa8:	f7ff fd4d 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 8008aac:	4b58      	ldr	r3, [pc, #352]	@ (8008c10 <PC_show_Keys+0x694>)
 8008aae:	4859      	ldr	r0, [pc, #356]	@ (8008c14 <PC_show_Keys+0x698>)
 8008ab0:	220c      	movs	r2, #12
 8008ab2:	0019      	movs	r1, r3
 8008ab4:	f002 fede 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8008ab8:	4a55      	ldr	r2, [pc, #340]	@ (8008c10 <PC_show_Keys+0x694>)
 8008aba:	4b51      	ldr	r3, [pc, #324]	@ (8008c00 <PC_show_Keys+0x684>)
 8008abc:	0011      	movs	r1, r2
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f7fc fba4 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "19 - ENS160 TVOC sensor id ---------: %s\r\n", Buffer);
 8008ac4:	4a4e      	ldr	r2, [pc, #312]	@ (8008c00 <PC_show_Keys+0x684>)
 8008ac6:	4954      	ldr	r1, [pc, #336]	@ (8008c18 <PC_show_Keys+0x69c>)
 8008ac8:	4b4f      	ldr	r3, [pc, #316]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008aca:	0018      	movs	r0, r3
 8008acc:	f01c fdc8 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ad0:	4b4e      	ldr	r3, [pc, #312]	@ (8008c0c <PC_show_Keys+0x690>)
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	4b4c      	ldr	r3, [pc, #304]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008ad6:	0011      	movs	r1, r2
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f7ff fd34 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 8008ade:	4b4f      	ldr	r3, [pc, #316]	@ (8008c1c <PC_show_Keys+0x6a0>)
 8008ae0:	484f      	ldr	r0, [pc, #316]	@ (8008c20 <PC_show_Keys+0x6a4>)
 8008ae2:	220c      	movs	r2, #12
 8008ae4:	0019      	movs	r1, r3
 8008ae6:	f002 fec5 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 8008aea:	4a4c      	ldr	r2, [pc, #304]	@ (8008c1c <PC_show_Keys+0x6a0>)
 8008aec:	4b44      	ldr	r3, [pc, #272]	@ (8008c00 <PC_show_Keys+0x684>)
 8008aee:	0011      	movs	r1, r2
 8008af0:	0018      	movs	r0, r3
 8008af2:	f7fc fb8b 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "20 - ENS160 eCO2 sensor id ---------: %s\r\n", Buffer);
 8008af6:	4a42      	ldr	r2, [pc, #264]	@ (8008c00 <PC_show_Keys+0x684>)
 8008af8:	494a      	ldr	r1, [pc, #296]	@ (8008c24 <PC_show_Keys+0x6a8>)
 8008afa:	4b43      	ldr	r3, [pc, #268]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008afc:	0018      	movs	r0, r3
 8008afe:	f01c fdaf 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b02:	4b42      	ldr	r3, [pc, #264]	@ (8008c0c <PC_show_Keys+0x690>)
 8008b04:	781a      	ldrb	r2, [r3, #0]
 8008b06:	4b40      	ldr	r3, [pc, #256]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008b08:	0011      	movs	r1, r2
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f7ff fd1b 	bl	8008546 <PC_selectout>

  sprintf(msg, "21 & 22 - Are interactive not supported\r\n");
 8008b10:	4a45      	ldr	r2, [pc, #276]	@ (8008c28 <PC_show_Keys+0x6ac>)
 8008b12:	4b3d      	ldr	r3, [pc, #244]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008b14:	0011      	movs	r1, r2
 8008b16:	0018      	movs	r0, r3
 8008b18:	f01c fda2 	bl	8025660 <siprintf>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 8008b1c:	4b43      	ldr	r3, [pc, #268]	@ (8008c2c <PC_show_Keys+0x6b0>)
 8008b1e:	4844      	ldr	r0, [pc, #272]	@ (8008c30 <PC_show_Keys+0x6b4>)
 8008b20:	220c      	movs	r2, #12
 8008b22:	0019      	movs	r1, r3
 8008b24:	f002 fea6 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 8008b28:	4a40      	ldr	r2, [pc, #256]	@ (8008c2c <PC_show_Keys+0x6b0>)
 8008b2a:	4b35      	ldr	r3, [pc, #212]	@ (8008c00 <PC_show_Keys+0x684>)
 8008b2c:	0011      	movs	r1, r2
 8008b2e:	0018      	movs	r0, r3
 8008b30:	f7fc fb6c 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "23 - SEN54/55 Temperature sensor id : %s\r\n", Buffer);
 8008b34:	4a32      	ldr	r2, [pc, #200]	@ (8008c00 <PC_show_Keys+0x684>)
 8008b36:	493f      	ldr	r1, [pc, #252]	@ (8008c34 <PC_show_Keys+0x6b8>)
 8008b38:	4b33      	ldr	r3, [pc, #204]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f01c fd90 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b40:	4b32      	ldr	r3, [pc, #200]	@ (8008c0c <PC_show_Keys+0x690>)
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	4b30      	ldr	r3, [pc, #192]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008b46:	0011      	movs	r1, r2
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f7ff fcfc 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 8008b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8008c38 <PC_show_Keys+0x6bc>)
 8008b50:	483a      	ldr	r0, [pc, #232]	@ (8008c3c <PC_show_Keys+0x6c0>)
 8008b52:	220c      	movs	r2, #12
 8008b54:	0019      	movs	r1, r3
 8008b56:	f002 fe8d 	bl	800b874 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 8008b5a:	4a37      	ldr	r2, [pc, #220]	@ (8008c38 <PC_show_Keys+0x6bc>)
 8008b5c:	4b28      	ldr	r3, [pc, #160]	@ (8008c00 <PC_show_Keys+0x684>)
 8008b5e:	0011      	movs	r1, r2
 8008b60:	0018      	movs	r0, r3
 8008b62:	f7fc fb53 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "24 - SEN54/55 Humidity sensor id ---: %s\r\n", Buffer);
 8008b66:	4a26      	ldr	r2, [pc, #152]	@ (8008c00 <PC_show_Keys+0x684>)
 8008b68:	4935      	ldr	r1, [pc, #212]	@ (8008c40 <PC_show_Keys+0x6c4>)
 8008b6a:	4b27      	ldr	r3, [pc, #156]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008b6c:	0018      	movs	r0, r3
 8008b6e:	f01c fd77 	bl	8025660 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b72:	4b26      	ldr	r3, [pc, #152]	@ (8008c0c <PC_show_Keys+0x690>)
 8008b74:	781a      	ldrb	r2, [r3, #0]
 8008b76:	4b24      	ldr	r3, [pc, #144]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008b78:	0011      	movs	r1, r2
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	f7ff fce3 	bl	8008546 <PC_selectout>
  uint8ArrayToString(Buffer, UptimeConfig);
  sprintf(msg, "25 - Uptime sensor id --------------: %s\r\n", Buffer);
  PC_selectout(&msg[0], usb_out);
#endif

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 8008b80:	4b30      	ldr	r3, [pc, #192]	@ (8008c44 <PC_show_Keys+0x6c8>)
 8008b82:	0018      	movs	r0, r3
 8008b84:	f7ff fcba 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008b88:	200a      	movs	r0, #10
 8008b8a:	f00b f929 	bl	8013de0 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 8008b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8008c48 <PC_show_Keys+0x6cc>)
 8008b90:	0018      	movs	r0, r3
 8008b92:	f7ff fcb3 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008b96:	200a      	movs	r0, #10
 8008b98:	f00b f922 	bl	8013de0 <HAL_Delay>
  printf_USB(" command example for air pressure => #05,6a\r\n");
 8008b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8008c4c <PC_show_Keys+0x6d0>)
 8008b9e:	0018      	movs	r0, r3
 8008ba0:	f7ff fcac 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008ba4:	200a      	movs	r0, #10
 8008ba6:	f00b f91b 	bl	8013de0 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 8008baa:	4b29      	ldr	r3, [pc, #164]	@ (8008c50 <PC_show_Keys+0x6d4>)
 8008bac:	0018      	movs	r0, r3
 8008bae:	f7ff fca5 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008bb2:	200a      	movs	r0, #10
 8008bb4:	f00b f914 	bl	8013de0 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 8008bb8:	4b26      	ldr	r3, [pc, #152]	@ (8008c54 <PC_show_Keys+0x6d8>)
 8008bba:	0018      	movs	r0, r3
 8008bbc:	f7ff fc9e 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008bc0:	200a      	movs	r0, #10
 8008bc2:	f00b f90d 	bl	8013de0 <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 8008bc6:	4b24      	ldr	r3, [pc, #144]	@ (8008c58 <PC_show_Keys+0x6dc>)
 8008bc8:	0018      	movs	r0, r3
 8008bca:	f7ff fc97 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008bce:	200a      	movs	r0, #10
 8008bd0:	f00b f906 	bl	8013de0 <HAL_Delay>
  printf_USB(" $05,67af09374cdef30007b35055\r\n");
 8008bd4:	4b21      	ldr	r3, [pc, #132]	@ (8008c5c <PC_show_Keys+0x6e0>)
 8008bd6:	0018      	movs	r0, r3
 8008bd8:	f7ff fc90 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008bdc:	200a      	movs	r0, #10
 8008bde:	f00b f8ff 	bl	8013de0 <HAL_Delay>
  if (!usb_out) {
 8008be2:	4b0a      	ldr	r3, [pc, #40]	@ (8008c0c <PC_show_Keys+0x690>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2201      	movs	r2, #1
 8008be8:	4053      	eors	r3, r2
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <PC_show_Keys+0x67c>
    printf("A key can only be changed by USB input or the by configuration programm.\r\n");
 8008bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8008c60 <PC_show_Keys+0x6e4>)
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f01c fd2a 	bl	802564c <puts>
  }
}
 8008bf8:	46c0      	nop			@ (mov r8, r8)
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	46c0      	nop			@ (mov r8, r8)
 8008c00:	200009fc 	.word	0x200009fc
 8008c04:	0802b34c 	.word	0x0802b34c
 8008c08:	200009a8 	.word	0x200009a8
 8008c0c:	200009a5 	.word	0x200009a5
 8008c10:	20000b04 	.word	0x20000b04
 8008c14:	080800f8 	.word	0x080800f8
 8008c18:	0802b378 	.word	0x0802b378
 8008c1c:	20000b10 	.word	0x20000b10
 8008c20:	08080104 	.word	0x08080104
 8008c24:	0802b3a4 	.word	0x0802b3a4
 8008c28:	0802b3d0 	.word	0x0802b3d0
 8008c2c:	20000b1c 	.word	0x20000b1c
 8008c30:	08080170 	.word	0x08080170
 8008c34:	0802b3fc 	.word	0x0802b3fc
 8008c38:	20000b28 	.word	0x20000b28
 8008c3c:	0808017c 	.word	0x0808017c
 8008c40:	0802b428 	.word	0x0802b428
 8008c44:	0802b454 	.word	0x0802b454
 8008c48:	0802b46c 	.word	0x0802b46c
 8008c4c:	0802b498 	.word	0x0802b498
 8008c50:	0802b4c8 	.word	0x0802b4c8
 8008c54:	0802b504 	.word	0x0802b504
 8008c58:	0802b53c 	.word	0x0802b53c
 8008c5c:	0802b570 	.word	0x0802b570
 8008c60:	0802b590 	.word	0x0802b590

08008c64 <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	4b20      	ldr	r3, [pc, #128]	@ (8008cf4 <ascii_to_uint8+0x90>)
 8008c74:	18d3      	adds	r3, r2, r3
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	001a      	movs	r2, r3
 8008c7a:	2304      	movs	r3, #4
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	d00a      	beq.n	8008c96 <ascii_to_uint8+0x32>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3301      	adds	r3, #1
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	4b1a      	ldr	r3, [pc, #104]	@ (8008cf4 <ascii_to_uint8+0x90>)
 8008c8a:	18d3      	adds	r3, r2, r3
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	001a      	movs	r2, r3
 8008c90:	2304      	movs	r3, #4
 8008c92:	4013      	ands	r3, r2
 8008c94:	d105      	bne.n	8008ca2 <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 8008c96:	4b18      	ldr	r3, [pc, #96]	@ (8008cf8 <ascii_to_uint8+0x94>)
 8008c98:	0018      	movs	r0, r3
 8008c9a:	f7ff fc2f 	bl	80084fc <printf_USB>
    return 100;
 8008c9e:	2364      	movs	r3, #100	@ 0x64
 8008ca0:	e024      	b.n	8008cec <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	1c1a      	adds	r2, r3, #0
 8008ca8:	0092      	lsls	r2, r2, #2
 8008caa:	18d3      	adds	r3, r2, r3
 8008cac:	18db      	adds	r3, r3, r3
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	18d3      	adds	r3, r2, r3
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	210f      	movs	r1, #15
 8008cbc:	187b      	adds	r3, r7, r1
 8008cbe:	3a10      	subs	r2, #16
 8008cc0:	701a      	strb	r2, [r3, #0]
#ifndef PUBLIC
  if (value > 25 || value == 21 || value == 22) {
#else
  if (value > 24 || value == 21 || value == 22) {
 8008cc2:	187b      	adds	r3, r7, r1
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b18      	cmp	r3, #24
 8008cc8:	d807      	bhi.n	8008cda <ascii_to_uint8+0x76>
 8008cca:	187b      	adds	r3, r7, r1
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	2b15      	cmp	r3, #21
 8008cd0:	d003      	beq.n	8008cda <ascii_to_uint8+0x76>
 8008cd2:	187b      	adds	r3, r7, r1
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b16      	cmp	r3, #22
 8008cd8:	d105      	bne.n	8008ce6 <ascii_to_uint8+0x82>
#endif
    printf_USB("Error: value out of range\r\n");
 8008cda:	4b08      	ldr	r3, [pc, #32]	@ (8008cfc <ascii_to_uint8+0x98>)
 8008cdc:	0018      	movs	r0, r3
 8008cde:	f7ff fc0d 	bl	80084fc <printf_USB>
    return 100;
 8008ce2:	2364      	movs	r3, #100	@ 0x64
 8008ce4:	e002      	b.n	8008cec <ascii_to_uint8+0x88>
  }
  return (uint8_t)value;
 8008ce6:	230f      	movs	r3, #15
 8008ce8:	18fb      	adds	r3, r7, r3
 8008cea:	781b      	ldrb	r3, [r3, #0]
}
 8008cec:	0018      	movs	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	b004      	add	sp, #16
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	0802e5e8 	.word	0x0802e5e8
 8008cf8:	0802b5dc 	.word	0x0802b5dc
 8008cfc:	0802b604 	.word	0x0802b604

08008d00 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8008d00:	b590      	push	{r4, r7, lr}
 8008d02:	b0d1      	sub	sp, #324	@ 0x144
 8008d04:	af3e      	add	r7, sp, #248	@ 0xf8
 8008d06:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 8008d08:	f019 fbec 	bl	80224e4 <GetUsbRxDataSize>
 8008d0c:	0003      	movs	r3, r0
 8008d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t r = 0;
 8008d10:	2347      	movs	r3, #71	@ 0x47
 8008d12:	18fb      	adds	r3, r7, r3
 8008d14:	2200      	movs	r2, #0
 8008d16:	701a      	strb	r2, [r3, #0]
  char Buffer[25];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2124      	movs	r1, #36	@ 0x24
 8008d1c:	0018      	movs	r0, r3
 8008d1e:	f01c fe11 	bl	8025944 <strchr>
 8008d22:	0003      	movs	r3, r0
 8008d24:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((length == 1) && (message != NULL) && (len != 28)){
 8008d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d10f      	bne.n	8008d4c <Process_USB_input+0x4c>
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00c      	beq.n	8008d4c <Process_USB_input+0x4c>
 8008d32:	4bdb      	ldr	r3, [pc, #876]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b1c      	cmp	r3, #28
 8008d38:	d008      	beq.n	8008d4c <Process_USB_input+0x4c>
      Debug("Switching to input length of 28 for full opensensemap keylength");
 8008d3a:	4ada      	ldr	r2, [pc, #872]	@ (80090a4 <Process_USB_input+0x3a4>)
 8008d3c:	4bda      	ldr	r3, [pc, #872]	@ (80090a8 <Process_USB_input+0x3a8>)
 8008d3e:	0019      	movs	r1, r3
 8008d40:	2003      	movs	r0, #3
 8008d42:	f00a fb03 	bl	801334c <CreateLine>
      len = 28;
 8008d46:	4bd6      	ldr	r3, [pc, #856]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008d48:	221c      	movs	r2, #28
 8008d4a:	601a      	str	r2, [r3, #0]
  }
  if (length >= len) {
 8008d4c:	4bd4      	ldr	r3, [pc, #848]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d200      	bcs.n	8008d58 <Process_USB_input+0x58>
 8008d56:	e18c      	b.n	8009072 <Process_USB_input+0x372>
//    HAL_Delay(20);
    printf_USB("minimum required USB input reached: %s\r\n", (const char*)data);
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	4bd4      	ldr	r3, [pc, #848]	@ (80090ac <Process_USB_input+0x3ac>)
 8008d5c:	0011      	movs	r1, r2
 8008d5e:	0018      	movs	r0, r3
 8008d60:	f7ff fbcc 	bl	80084fc <printf_USB>
    printf_USB("USB input: %s\r\n", (const char*)data);
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	4bd2      	ldr	r3, [pc, #840]	@ (80090b0 <Process_USB_input+0x3b0>)
 8008d68:	0011      	movs	r1, r2
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f7ff fbc6 	bl	80084fc <printf_USB>
//    message = (unsigned char*)data;
//    message = data;
    if (data[0] == '$') {
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2b24      	cmp	r3, #36	@ 0x24
 8008d76:	d102      	bne.n	8008d7e <Process_USB_input+0x7e>
      len = 28;
 8008d78:	4bc9      	ldr	r3, [pc, #804]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008d7a:	221c      	movs	r2, #28
 8008d7c:	601a      	str	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$')) {
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b23      	cmp	r3, #35	@ 0x23
 8008d84:	d004      	beq.n	8008d90 <Process_USB_input+0x90>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b24      	cmp	r3, #36	@ 0x24
 8008d8c:	d000      	beq.n	8008d90 <Process_USB_input+0x90>
 8008d8e:	e153      	b.n	8009038 <Process_USB_input+0x338>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3301      	adds	r3, #1
 8008d94:	0018      	movs	r0, r3
 8008d96:	f7ff ff65 	bl	8008c64 <ascii_to_uint8>
 8008d9a:	0003      	movs	r3, r0
 8008d9c:	001a      	movs	r2, r3
 8008d9e:	4bc5      	ldr	r3, [pc, #788]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008da0:	701a      	strb	r2, [r3, #0]
      if (received.Command == 100) {
 8008da2:	4bc4      	ldr	r3, [pc, #784]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b64      	cmp	r3, #100	@ 0x64
 8008da8:	d101      	bne.n	8008dae <Process_USB_input+0xae>
        return false; // value out of range
 8008daa:	2300      	movs	r3, #0
 8008dac:	e174      	b.n	8009098 <Process_USB_input+0x398>
      }
      if (data[3] == ',') {
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	3303      	adds	r3, #3
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b2c      	cmp	r3, #44	@ 0x2c
 8008db6:	d000      	beq.n	8008dba <Process_USB_input+0xba>
 8008db8:	e122      	b.n	8009000 <Process_USB_input+0x300>
        for (uint8_t i=4; i < len; i++) {
 8008dba:	2346      	movs	r3, #70	@ 0x46
 8008dbc:	18fb      	adds	r3, r7, r3
 8008dbe:	2204      	movs	r2, #4
 8008dc0:	701a      	strb	r2, [r3, #0]
 8008dc2:	e0aa      	b.n	8008f1a <Process_USB_input+0x21a>
//          printf_USB("handling character %c as nr: %d for pos: %d\r\n", data[i], i, r);
          HAL_Delay(10);
 8008dc4:	200a      	movs	r0, #10
 8008dc6:	f00b f80b 	bl	8013de0 <HAL_Delay>
          if (isxdigit(data[i])) {
 8008dca:	2146      	movs	r1, #70	@ 0x46
 8008dcc:	187b      	adds	r3, r7, r1
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	18d3      	adds	r3, r2, r3
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	4bb7      	ldr	r3, [pc, #732]	@ (80090b8 <Process_USB_input+0x3b8>)
 8008dda:	18d3      	adds	r3, r2, r3
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	001a      	movs	r2, r3
 8008de0:	2344      	movs	r3, #68	@ 0x44
 8008de2:	4013      	ands	r3, r2
 8008de4:	d06a      	beq.n	8008ebc <Process_USB_input+0x1bc>
            result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 8008de6:	4bb5      	ldr	r3, [pc, #724]	@ (80090bc <Process_USB_input+0x3bc>)
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	b25b      	sxtb	r3, r3
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	b25a      	sxtb	r2, r3
 8008df0:	0008      	movs	r0, r1
 8008df2:	187b      	adds	r3, r7, r1
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	18cb      	adds	r3, r1, r3
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	1c59      	adds	r1, r3, #1
 8008dfe:	4bae      	ldr	r3, [pc, #696]	@ (80090b8 <Process_USB_input+0x3b8>)
 8008e00:	18cb      	adds	r3, r1, r3
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	0019      	movs	r1, r3
 8008e06:	2304      	movs	r3, #4
 8008e08:	400b      	ands	r3, r1
 8008e0a:	d008      	beq.n	8008e1e <Process_USB_input+0x11e>
 8008e0c:	183b      	adds	r3, r7, r0
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	18cb      	adds	r3, r1, r3
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	3b30      	subs	r3, #48	@ 0x30
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	b25b      	sxtb	r3, r3
 8008e1c:	e01e      	b.n	8008e5c <Process_USB_input+0x15c>
 8008e1e:	2346      	movs	r3, #70	@ 0x46
 8008e20:	18fb      	adds	r3, r7, r3
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	6879      	ldr	r1, [r7, #4]
 8008e26:	18c9      	adds	r1, r1, r3
 8008e28:	2037      	movs	r0, #55	@ 0x37
 8008e2a:	183b      	adds	r3, r7, r0
 8008e2c:	7809      	ldrb	r1, [r1, #0]
 8008e2e:	7019      	strb	r1, [r3, #0]
 8008e30:	183b      	adds	r3, r7, r0
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	1c59      	adds	r1, r3, #1
 8008e36:	4ba0      	ldr	r3, [pc, #640]	@ (80090b8 <Process_USB_input+0x3b8>)
 8008e38:	18cb      	adds	r3, r1, r3
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	0019      	movs	r1, r3
 8008e3e:	2303      	movs	r3, #3
 8008e40:	400b      	ands	r3, r1
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d103      	bne.n	8008e4e <Process_USB_input+0x14e>
 8008e46:	183b      	adds	r3, r7, r0
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	3b20      	subs	r3, #32
 8008e4c:	e002      	b.n	8008e54 <Process_USB_input+0x154>
 8008e4e:	2337      	movs	r3, #55	@ 0x37
 8008e50:	18fb      	adds	r3, r7, r3
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	3b37      	subs	r3, #55	@ 0x37
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	b25b      	sxtb	r3, r3
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	b25b      	sxtb	r3, r3
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	4b96      	ldr	r3, [pc, #600]	@ (80090bc <Process_USB_input+0x3bc>)
 8008e64:	701a      	strb	r2, [r3, #0]
//            printf_USB("Result is 0x%02X\r\n", result);
            HAL_Delay(10);
 8008e66:	200a      	movs	r0, #10
 8008e68:	f00a ffba 	bl	8013de0 <HAL_Delay>
            if (len == 28) {
 8008e6c:	4b8c      	ldr	r3, [pc, #560]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b1c      	cmp	r3, #28
 8008e72:	d14c      	bne.n	8008f0e <Process_USB_input+0x20e>
              if ((i % 2) == 1) {
 8008e74:	2346      	movs	r3, #70	@ 0x46
 8008e76:	18fb      	adds	r3, r7, r3
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d044      	beq.n	8008f0e <Process_USB_input+0x20e>
                data[r] = result;
 8008e84:	2447      	movs	r4, #71	@ 0x47
 8008e86:	193b      	adds	r3, r7, r4
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	18d3      	adds	r3, r2, r3
 8008e8e:	4a8b      	ldr	r2, [pc, #556]	@ (80090bc <Process_USB_input+0x3bc>)
 8008e90:	7812      	ldrb	r2, [r2, #0]
 8008e92:	701a      	strb	r2, [r3, #0]
                Debug("data[%d] = 0x%02X",r, data[r]);
 8008e94:	193b      	adds	r3, r7, r4
 8008e96:	7818      	ldrb	r0, [r3, #0]
 8008e98:	193b      	adds	r3, r7, r4
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	18d3      	adds	r3, r2, r3
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	4a87      	ldr	r2, [pc, #540]	@ (80090c0 <Process_USB_input+0x3c0>)
 8008ea4:	4980      	ldr	r1, [pc, #512]	@ (80090a8 <Process_USB_input+0x3a8>)
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	0003      	movs	r3, r0
 8008eaa:	2003      	movs	r0, #3
 8008eac:	f00a fa4e 	bl	801334c <CreateLine>
                r++;
 8008eb0:	193b      	adds	r3, r7, r4
 8008eb2:	781a      	ldrb	r2, [r3, #0]
 8008eb4:	193b      	adds	r3, r7, r4
 8008eb6:	3201      	adds	r2, #1
 8008eb8:	701a      	strb	r2, [r3, #0]
 8008eba:	e028      	b.n	8008f0e <Process_USB_input+0x20e>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", data[i], i);
 8008ebc:	2046      	movs	r0, #70	@ 0x46
 8008ebe:	183b      	adds	r3, r7, r0
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	18d3      	adds	r3, r2, r3
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	0019      	movs	r1, r3
 8008eca:	183b      	adds	r3, r7, r0
 8008ecc:	781a      	ldrb	r2, [r3, #0]
 8008ece:	4b7d      	ldr	r3, [pc, #500]	@ (80090c4 <Process_USB_input+0x3c4>)
 8008ed0:	0018      	movs	r0, r3
 8008ed2:	f7ff fb13 	bl	80084fc <printf_USB>
            ResetUsbRxDataSize();
 8008ed6:	f019 faed 	bl	80224b4 <ResetUsbRxDataSize>
            PC_show_Keys();
 8008eda:	f7ff fb4f 	bl	800857c <PC_show_Keys>
            for (uint8_t i=0; i < 32; i++) {
 8008ede:	2345      	movs	r3, #69	@ 0x45
 8008ee0:	18fb      	adds	r3, r7, r3
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	701a      	strb	r2, [r3, #0]
 8008ee6:	e00b      	b.n	8008f00 <Process_USB_input+0x200>
              data[i] = '\0';
 8008ee8:	2145      	movs	r1, #69	@ 0x45
 8008eea:	187b      	adds	r3, r7, r1
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	18d3      	adds	r3, r2, r3
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	701a      	strb	r2, [r3, #0]
            for (uint8_t i=0; i < 32; i++) {
 8008ef6:	187b      	adds	r3, r7, r1
 8008ef8:	781a      	ldrb	r2, [r3, #0]
 8008efa:	187b      	adds	r3, r7, r1
 8008efc:	3201      	adds	r2, #1
 8008efe:	701a      	strb	r2, [r3, #0]
 8008f00:	2345      	movs	r3, #69	@ 0x45
 8008f02:	18fb      	adds	r3, r7, r3
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2b1f      	cmp	r3, #31
 8008f08:	d9ee      	bls.n	8008ee8 <Process_USB_input+0x1e8>
            }
            return false; // Of een andere foutwaarde
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e0c4      	b.n	8009098 <Process_USB_input+0x398>
        for (uint8_t i=4; i < len; i++) {
 8008f0e:	2146      	movs	r1, #70	@ 0x46
 8008f10:	187b      	adds	r3, r7, r1
 8008f12:	781a      	ldrb	r2, [r3, #0]
 8008f14:	187b      	adds	r3, r7, r1
 8008f16:	3201      	adds	r2, #1
 8008f18:	701a      	strb	r2, [r3, #0]
 8008f1a:	2346      	movs	r3, #70	@ 0x46
 8008f1c:	18fb      	adds	r3, r7, r3
 8008f1e:	781a      	ldrb	r2, [r3, #0]
 8008f20:	4b5f      	ldr	r3, [pc, #380]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d200      	bcs.n	8008f2a <Process_USB_input+0x22a>
 8008f28:	e74c      	b.n	8008dc4 <Process_USB_input+0xc4>
          }
        }
        if (len == 6) {
 8008f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b06      	cmp	r3, #6
 8008f30:	d114      	bne.n	8008f5c <Process_USB_input+0x25c>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008f32:	2428      	movs	r4, #40	@ 0x28
 8008f34:	193b      	adds	r3, r7, r4
 8008f36:	4864      	ldr	r0, [pc, #400]	@ (80090c8 <Process_USB_input+0x3c8>)
 8008f38:	220c      	movs	r2, #12
 8008f3a:	0019      	movs	r1, r3
 8008f3c:	f002 fc9a 	bl	800b874 <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte of the key
 8008f40:	4b5e      	ldr	r3, [pc, #376]	@ (80090bc <Process_USB_input+0x3bc>)
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	0021      	movs	r1, r4
 8008f46:	187b      	adds	r3, r7, r1
 8008f48:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 8008f4a:	4b5a      	ldr	r3, [pc, #360]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	1879      	adds	r1, r7, r1
 8008f50:	189b      	adds	r3, r3, r2
 8008f52:	220c      	movs	r2, #12
 8008f54:	0018      	movs	r0, r3
 8008f56:	f01c fdc9 	bl	8025aec <memcpy>
 8008f5a:	e005      	b.n	8008f68 <Process_USB_input+0x268>
        }
        else {
          memcpy(received.Payload, data, IdSize);
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	4b5b      	ldr	r3, [pc, #364]	@ (80090cc <Process_USB_input+0x3cc>)
 8008f60:	220c      	movs	r2, #12
 8008f62:	0018      	movs	r0, r3
 8008f64:	f01c fdc2 	bl	8025aec <memcpy>
        }
        received.Payload[12] = '\0';
 8008f68:	4b52      	ldr	r3, [pc, #328]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	739a      	strb	r2, [r3, #14]
        received.PayloadLength = IdSize;
 8008f6e:	4b51      	ldr	r3, [pc, #324]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008f70:	220c      	movs	r2, #12
 8008f72:	705a      	strb	r2, [r3, #1]
        Debug("first char of payload before conversion: %c", received.Payload[0]);
 8008f74:	4b4f      	ldr	r3, [pc, #316]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008f76:	789b      	ldrb	r3, [r3, #2]
 8008f78:	4a55      	ldr	r2, [pc, #340]	@ (80090d0 <Process_USB_input+0x3d0>)
 8008f7a:	494b      	ldr	r1, [pc, #300]	@ (80090a8 <Process_USB_input+0x3a8>)
 8008f7c:	2003      	movs	r0, #3
 8008f7e:	f00a f9e5 	bl	801334c <CreateLine>
        uint8ArrayToString(Buffer, received.Payload);
 8008f82:	4a52      	ldr	r2, [pc, #328]	@ (80090cc <Process_USB_input+0x3cc>)
 8008f84:	240c      	movs	r4, #12
 8008f86:	193b      	adds	r3, r7, r4
 8008f88:	0011      	movs	r1, r2
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f7fc f93e 	bl	800520c <uint8ArrayToString>
        Debug("received Payload to write key %s", Buffer);
 8008f90:	193b      	adds	r3, r7, r4
 8008f92:	4a50      	ldr	r2, [pc, #320]	@ (80090d4 <Process_USB_input+0x3d4>)
 8008f94:	4944      	ldr	r1, [pc, #272]	@ (80090a8 <Process_USB_input+0x3a8>)
 8008f96:	2003      	movs	r0, #3
 8008f98:	f00a f9d8 	bl	801334c <CreateLine>
        Debug("first char of payload after conversion: %c", received.Payload[0]);
 8008f9c:	4b45      	ldr	r3, [pc, #276]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008f9e:	789b      	ldrb	r3, [r3, #2]
 8008fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80090d8 <Process_USB_input+0x3d8>)
 8008fa2:	4941      	ldr	r1, [pc, #260]	@ (80090a8 <Process_USB_input+0x3a8>)
 8008fa4:	2003      	movs	r0, #3
 8008fa6:	f00a f9d1 	bl	801334c <CreateLine>
        ProcessCmd(received);
 8008faa:	4c42      	ldr	r4, [pc, #264]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008fac:	466b      	mov	r3, sp
 8008fae:	0018      	movs	r0, r3
 8008fb0:	0023      	movs	r3, r4
 8008fb2:	3310      	adds	r3, #16
 8008fb4:	22f4      	movs	r2, #244	@ 0xf4
 8008fb6:	0019      	movs	r1, r3
 8008fb8:	f01c fd98 	bl	8025aec <memcpy>
 8008fbc:	6820      	ldr	r0, [r4, #0]
 8008fbe:	6861      	ldr	r1, [r4, #4]
 8008fc0:	68a2      	ldr	r2, [r4, #8]
 8008fc2:	68e3      	ldr	r3, [r4, #12]
 8008fc4:	f7ff f86e 	bl	80080a4 <ProcessCmd>
        ResetUsbRxDataSize();
 8008fc8:	f019 fa74 	bl	80224b4 <ResetUsbRxDataSize>
        PC_show_Keys();
 8008fcc:	f7ff fad6 	bl	800857c <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8008fd0:	2344      	movs	r3, #68	@ 0x44
 8008fd2:	18fb      	adds	r3, r7, r3
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	701a      	strb	r2, [r3, #0]
 8008fd8:	e00b      	b.n	8008ff2 <Process_USB_input+0x2f2>
          data[i] = '\0';
 8008fda:	2144      	movs	r1, #68	@ 0x44
 8008fdc:	187b      	adds	r3, r7, r1
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	18d3      	adds	r3, r2, r3
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8008fe8:	187b      	adds	r3, r7, r1
 8008fea:	781a      	ldrb	r2, [r3, #0]
 8008fec:	187b      	adds	r3, r7, r1
 8008fee:	3201      	adds	r2, #1
 8008ff0:	701a      	strb	r2, [r3, #0]
 8008ff2:	2344      	movs	r3, #68	@ 0x44
 8008ff4:	18fb      	adds	r3, r7, r3
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b1f      	cmp	r3, #31
 8008ffa:	d9ee      	bls.n	8008fda <Process_USB_input+0x2da>
        }
        return true;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e04b      	b.n	8009098 <Process_USB_input+0x398>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8009000:	4b36      	ldr	r3, [pc, #216]	@ (80090dc <Process_USB_input+0x3dc>)
 8009002:	0018      	movs	r0, r3
 8009004:	f7ff fa7a 	bl	80084fc <printf_USB>
        ResetUsbRxDataSize();
 8009008:	f019 fa54 	bl	80224b4 <ResetUsbRxDataSize>
        for (uint8_t i=0; i < 32; i++) {
 800900c:	2343      	movs	r3, #67	@ 0x43
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]
 8009014:	e00b      	b.n	800902e <Process_USB_input+0x32e>
          data[i] = '\0';
 8009016:	2143      	movs	r1, #67	@ 0x43
 8009018:	187b      	adds	r3, r7, r1
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	18d3      	adds	r3, r2, r3
 8009020:	2200      	movs	r2, #0
 8009022:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8009024:	187b      	adds	r3, r7, r1
 8009026:	781a      	ldrb	r2, [r3, #0]
 8009028:	187b      	adds	r3, r7, r1
 800902a:	3201      	adds	r2, #1
 800902c:	701a      	strb	r2, [r3, #0]
 800902e:	2343      	movs	r3, #67	@ 0x43
 8009030:	18fb      	adds	r3, r7, r3
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b1f      	cmp	r3, #31
 8009036:	d9ee      	bls.n	8009016 <Process_USB_input+0x316>
        }
      }
    }
//    else {
    len = 6;
 8009038:	4b19      	ldr	r3, [pc, #100]	@ (80090a0 <Process_USB_input+0x3a0>)
 800903a:	2206      	movs	r2, #6
 800903c:	601a      	str	r2, [r3, #0]
    PC_show_Keys();
 800903e:	f7ff fa9d 	bl	800857c <PC_show_Keys>
    ResetUsbRxDataSize();
 8009042:	f019 fa37 	bl	80224b4 <ResetUsbRxDataSize>
//    }
    for (uint8_t i=0; i < 32; i++) {
 8009046:	2342      	movs	r3, #66	@ 0x42
 8009048:	18fb      	adds	r3, r7, r3
 800904a:	2200      	movs	r2, #0
 800904c:	701a      	strb	r2, [r3, #0]
 800904e:	e00b      	b.n	8009068 <Process_USB_input+0x368>
      data[i] = '\0';
 8009050:	2142      	movs	r1, #66	@ 0x42
 8009052:	187b      	adds	r3, r7, r1
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	18d3      	adds	r3, r2, r3
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 32; i++) {
 800905e:	187b      	adds	r3, r7, r1
 8009060:	781a      	ldrb	r2, [r3, #0]
 8009062:	187b      	adds	r3, r7, r1
 8009064:	3201      	adds	r2, #1
 8009066:	701a      	strb	r2, [r3, #0]
 8009068:	2342      	movs	r3, #66	@ 0x42
 800906a:	18fb      	adds	r3, r7, r3
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b1f      	cmp	r3, #31
 8009070:	d9ee      	bls.n	8009050 <Process_USB_input+0x350>
    }
  }
  if (formerlength != length) {
 8009072:	4b1b      	ldr	r3, [pc, #108]	@ (80090e0 <Process_USB_input+0x3e0>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009078:	429a      	cmp	r2, r3
 800907a:	d008      	beq.n	800908e <Process_USB_input+0x38e>
    printf_USB("USB input: %s\r", (const char*)data);
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	4b19      	ldr	r3, [pc, #100]	@ (80090e4 <Process_USB_input+0x3e4>)
 8009080:	0011      	movs	r1, r2
 8009082:	0018      	movs	r0, r3
 8009084:	f7ff fa3a 	bl	80084fc <printf_USB>
    formerlength = length;
 8009088:	4b15      	ldr	r3, [pc, #84]	@ (80090e0 <Process_USB_input+0x3e0>)
 800908a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800908c:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 800908e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009090:	0018      	movs	r0, r3
 8009092:	f019 fa31 	bl	80224f8 <GetUsbRxNextChunk>

  return false;
 8009096:	2300      	movs	r3, #0
}
 8009098:	0018      	movs	r0, r3
 800909a:	46bd      	mov	sp, r7
 800909c:	b013      	add	sp, #76	@ 0x4c
 800909e:	bd90      	pop	{r4, r7, pc}
 80090a0:	20000030 	.word	0x20000030
 80090a4:	0802b620 	.word	0x0802b620
 80090a8:	0802b660 	.word	0x0802b660
 80090ac:	0802b664 	.word	0x0802b664
 80090b0:	0802b690 	.word	0x0802b690
 80090b4:	20000794 	.word	0x20000794
 80090b8:	0802e5e8 	.word	0x0802e5e8
 80090bc:	20000898 	.word	0x20000898
 80090c0:	0802b6a0 	.word	0x0802b6a0
 80090c4:	0802b6b4 	.word	0x0802b6b4
 80090c8:	08080000 	.word	0x08080000
 80090cc:	20000796 	.word	0x20000796
 80090d0:	0802b6ec 	.word	0x0802b6ec
 80090d4:	0802b718 	.word	0x0802b718
 80090d8:	0802b73c 	.word	0x0802b73c
 80090dc:	0802b768 	.word	0x0802b768
 80090e0:	2000089c 	.word	0x2000089c
 80090e4:	0802b794 	.word	0x0802b794

080090e8 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 80090ec:	4b26      	ldr	r3, [pc, #152]	@ (8009188 <ReadBatteryVoltage+0xa0>)
 80090ee:	4a27      	ldr	r2, [pc, #156]	@ (800918c <ReadBatteryVoltage+0xa4>)
 80090f0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80090f2:	4b25      	ldr	r3, [pc, #148]	@ (8009188 <ReadBatteryVoltage+0xa0>)
 80090f4:	2280      	movs	r2, #128	@ 0x80
 80090f6:	0152      	lsls	r2, r2, #5
 80090f8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80090fa:	4a23      	ldr	r2, [pc, #140]	@ (8009188 <ReadBatteryVoltage+0xa0>)
 80090fc:	4b24      	ldr	r3, [pc, #144]	@ (8009190 <ReadBatteryVoltage+0xa8>)
 80090fe:	0011      	movs	r1, r2
 8009100:	0018      	movs	r0, r3
 8009102:	f00b f93b 	bl	801437c <HAL_ADC_ConfigChannel>
 8009106:	1e03      	subs	r3, r0, #0
 8009108:	d001      	beq.n	800910e <ReadBatteryVoltage+0x26>
    Error_Handler();
 800910a:	f003 fc97 	bl	800ca3c <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800910e:	4b20      	ldr	r3, [pc, #128]	@ (8009190 <ReadBatteryVoltage+0xa8>)
 8009110:	0018      	movs	r0, r3
 8009112:	f00b f837 	bl	8014184 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009116:	4b1e      	ldr	r3, [pc, #120]	@ (8009190 <ReadBatteryVoltage+0xa8>)
 8009118:	2101      	movs	r1, #1
 800911a:	0018      	movs	r0, r3
 800911c:	f00b f886 	bl	801422c <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8009120:	4b1b      	ldr	r3, [pc, #108]	@ (8009190 <ReadBatteryVoltage+0xa8>)
 8009122:	0018      	movs	r0, r3
 8009124:	f00b f91e 	bl	8014364 <HAL_ADC_GetValue>
 8009128:	0002      	movs	r2, r0
 800912a:	4b1a      	ldr	r3, [pc, #104]	@ (8009194 <ReadBatteryVoltage+0xac>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4353      	muls	r3, r2
 8009130:	005b      	lsls	r3, r3, #1
 8009132:	4919      	ldr	r1, [pc, #100]	@ (8009198 <ReadBatteryVoltage+0xb0>)
 8009134:	0018      	movs	r0, r3
 8009136:	f7f7 f835 	bl	80001a4 <__udivsi3>
 800913a:	0003      	movs	r3, r0
 800913c:	001a      	movs	r2, r3
 800913e:	4b17      	ldr	r3, [pc, #92]	@ (800919c <ReadBatteryVoltage+0xb4>)
 8009140:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8009142:	4b16      	ldr	r3, [pc, #88]	@ (800919c <ReadBatteryVoltage+0xb4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	0018      	movs	r0, r3
 8009148:	f7f8 fbbe 	bl	80018c8 <__aeabi_ui2f>
 800914c:	1c03      	adds	r3, r0, #0
 800914e:	4914      	ldr	r1, [pc, #80]	@ (80091a0 <ReadBatteryVoltage+0xb8>)
 8009150:	1c18      	adds	r0, r3, #0
 8009152:	f7f7 fda7 	bl	8000ca4 <__aeabi_fdiv>
 8009156:	1c03      	adds	r3, r0, #0
 8009158:	1c1a      	adds	r2, r3, #0
 800915a:	4b12      	ldr	r3, [pc, #72]	@ (80091a4 <ReadBatteryVoltage+0xbc>)
 800915c:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 800915e:	4b0a      	ldr	r3, [pc, #40]	@ (8009188 <ReadBatteryVoltage+0xa0>)
 8009160:	4a0a      	ldr	r2, [pc, #40]	@ (800918c <ReadBatteryVoltage+0xa4>)
 8009162:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009164:	4b08      	ldr	r3, [pc, #32]	@ (8009188 <ReadBatteryVoltage+0xa0>)
 8009166:	4a10      	ldr	r2, [pc, #64]	@ (80091a8 <ReadBatteryVoltage+0xc0>)
 8009168:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800916a:	4a07      	ldr	r2, [pc, #28]	@ (8009188 <ReadBatteryVoltage+0xa0>)
 800916c:	4b08      	ldr	r3, [pc, #32]	@ (8009190 <ReadBatteryVoltage+0xa8>)
 800916e:	0011      	movs	r1, r2
 8009170:	0018      	movs	r0, r3
 8009172:	f00b f903 	bl	801437c <HAL_ADC_ConfigChannel>
 8009176:	1e03      	subs	r3, r0, #0
 8009178:	d001      	beq.n	800917e <ReadBatteryVoltage+0x96>
    Error_Handler();
 800917a:	f003 fc5f 	bl	800ca3c <Error_Handler>
  }
  return trueValue;
 800917e:	4b09      	ldr	r3, [pc, #36]	@ (80091a4 <ReadBatteryVoltage+0xbc>)
 8009180:	681b      	ldr	r3, [r3, #0]
 }
 8009182:	1c18      	adds	r0, r3, #0
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	20000b34 	.word	0x20000b34
 800918c:	38004000 	.word	0x38004000
 8009190:	20000b88 	.word	0x20000b88
 8009194:	20000034 	.word	0x20000034
 8009198:	00000fff 	.word	0x00000fff
 800919c:	20000b50 	.word	0x20000b50
 80091a0:	447a0000 	.word	0x447a0000
 80091a4:	20000b54 	.word	0x20000b54
 80091a8:	00001001 	.word	0x00001001

080091ac <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80091b0:	4b21      	ldr	r3, [pc, #132]	@ (8009238 <ReadSolarVoltage+0x8c>)
 80091b2:	4a22      	ldr	r2, [pc, #136]	@ (800923c <ReadSolarVoltage+0x90>)
 80091b4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80091b6:	4b20      	ldr	r3, [pc, #128]	@ (8009238 <ReadSolarVoltage+0x8c>)
 80091b8:	2280      	movs	r2, #128	@ 0x80
 80091ba:	0152      	lsls	r2, r2, #5
 80091bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80091be:	4a1e      	ldr	r2, [pc, #120]	@ (8009238 <ReadSolarVoltage+0x8c>)
 80091c0:	4b1f      	ldr	r3, [pc, #124]	@ (8009240 <ReadSolarVoltage+0x94>)
 80091c2:	0011      	movs	r1, r2
 80091c4:	0018      	movs	r0, r3
 80091c6:	f00b f8d9 	bl	801437c <HAL_ADC_ConfigChannel>
 80091ca:	1e03      	subs	r3, r0, #0
 80091cc:	d001      	beq.n	80091d2 <ReadSolarVoltage+0x26>
    Error_Handler();
 80091ce:	f003 fc35 	bl	800ca3c <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80091d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009240 <ReadSolarVoltage+0x94>)
 80091d4:	0018      	movs	r0, r3
 80091d6:	f00a ffd5 	bl	8014184 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80091da:	4b19      	ldr	r3, [pc, #100]	@ (8009240 <ReadSolarVoltage+0x94>)
 80091dc:	2101      	movs	r1, #1
 80091de:	0018      	movs	r0, r3
 80091e0:	f00b f824 	bl	801422c <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80091e4:	4b16      	ldr	r3, [pc, #88]	@ (8009240 <ReadSolarVoltage+0x94>)
 80091e6:	0018      	movs	r0, r3
 80091e8:	f00b f8bc 	bl	8014364 <HAL_ADC_GetValue>
 80091ec:	0002      	movs	r2, r0
 80091ee:	4b15      	ldr	r3, [pc, #84]	@ (8009244 <ReadSolarVoltage+0x98>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	435a      	muls	r2, r3
 80091f4:	0013      	movs	r3, r2
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	189b      	adds	r3, r3, r2
 80091fa:	4913      	ldr	r1, [pc, #76]	@ (8009248 <ReadSolarVoltage+0x9c>)
 80091fc:	0018      	movs	r0, r3
 80091fe:	f7f6 ffd1 	bl	80001a4 <__udivsi3>
 8009202:	0003      	movs	r3, r0
 8009204:	001a      	movs	r2, r3
 8009206:	4b11      	ldr	r3, [pc, #68]	@ (800924c <ReadSolarVoltage+0xa0>)
 8009208:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 800920a:	4b0b      	ldr	r3, [pc, #44]	@ (8009238 <ReadSolarVoltage+0x8c>)
 800920c:	4a0b      	ldr	r2, [pc, #44]	@ (800923c <ReadSolarVoltage+0x90>)
 800920e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009210:	4b09      	ldr	r3, [pc, #36]	@ (8009238 <ReadSolarVoltage+0x8c>)
 8009212:	4a0f      	ldr	r2, [pc, #60]	@ (8009250 <ReadSolarVoltage+0xa4>)
 8009214:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009216:	4a08      	ldr	r2, [pc, #32]	@ (8009238 <ReadSolarVoltage+0x8c>)
 8009218:	4b09      	ldr	r3, [pc, #36]	@ (8009240 <ReadSolarVoltage+0x94>)
 800921a:	0011      	movs	r1, r2
 800921c:	0018      	movs	r0, r3
 800921e:	f00b f8ad 	bl	801437c <HAL_ADC_ConfigChannel>
 8009222:	1e03      	subs	r3, r0, #0
 8009224:	d001      	beq.n	800922a <ReadSolarVoltage+0x7e>
    Error_Handler();
 8009226:	f003 fc09 	bl	800ca3c <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 800922a:	4b08      	ldr	r3, [pc, #32]	@ (800924c <ReadSolarVoltage+0xa0>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	b29b      	uxth	r3, r3
 }
 8009230:	0018      	movs	r0, r3
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	46c0      	nop			@ (mov r8, r8)
 8009238:	20000b34 	.word	0x20000b34
 800923c:	3c008000 	.word	0x3c008000
 8009240:	20000b88 	.word	0x20000b88
 8009244:	20000034 	.word	0x20000034
 8009248:	00000fff 	.word	0x00000fff
 800924c:	20000b58 	.word	0x20000b58
 8009250:	00001001 	.word	0x00001001

08009254 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8009258:	23a0      	movs	r3, #160	@ 0xa0
 800925a:	05db      	lsls	r3, r3, #23
 800925c:	2180      	movs	r1, #128	@ 0x80
 800925e:	0018      	movs	r0, r3
 8009260:	f00c f828 	bl	80152b4 <HAL_GPIO_ReadPin>
 8009264:	0003      	movs	r3, r0
 8009266:	1e5a      	subs	r2, r3, #1
 8009268:	4193      	sbcs	r3, r2
 800926a:	b2db      	uxtb	r3, r3
}
 800926c:	0018      	movs	r0, r3
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
	...

08009274 <Read_Charge_Status>:
//  CHARGING_OFF  = 0
//  CHARGING_ON   = 1
//  CHARGING_FULL = 2
//  Function returns Chargestatus

ChargeStatus Read_Charge_Status(void){
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
  bool PulledUpStatus   = true  ;
 800927a:	1dfb      	adds	r3, r7, #7
 800927c:	2201      	movs	r2, #1
 800927e:	701a      	strb	r2, [r3, #0]
  bool PulledDownStatus = false ;
 8009280:	1dbb      	adds	r3, r7, #6
 8009282:	2200      	movs	r2, #0
 8009284:	701a      	strb	r2, [r3, #0]
  //Read with Pull Up
  //Charge_Pin_Up();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009286:	4b27      	ldr	r3, [pc, #156]	@ (8009324 <Read_Charge_Status+0xb0>)
 8009288:	2280      	movs	r2, #128	@ 0x80
 800928a:	0092      	lsls	r2, r2, #2
 800928c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800928e:	4b25      	ldr	r3, [pc, #148]	@ (8009324 <Read_Charge_Status+0xb0>)
 8009290:	2200      	movs	r2, #0
 8009292:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009294:	4b23      	ldr	r3, [pc, #140]	@ (8009324 <Read_Charge_Status+0xb0>)
 8009296:	2201      	movs	r2, #1
 8009298:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800929a:	4b22      	ldr	r3, [pc, #136]	@ (8009324 <Read_Charge_Status+0xb0>)
 800929c:	4a22      	ldr	r2, [pc, #136]	@ (8009328 <Read_Charge_Status+0xb4>)
 800929e:	0019      	movs	r1, r3
 80092a0:	0010      	movs	r0, r2
 80092a2:	f00b fe89 	bl	8014fb8 <HAL_GPIO_Init>

  PulledUpStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 80092a6:	2380      	movs	r3, #128	@ 0x80
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009328 <Read_Charge_Status+0xb4>)
 80092ac:	0019      	movs	r1, r3
 80092ae:	0010      	movs	r0, r2
 80092b0:	f00c f800 	bl	80152b4 <HAL_GPIO_ReadPin>
 80092b4:	0003      	movs	r3, r0
 80092b6:	001a      	movs	r2, r3
 80092b8:	1dfb      	adds	r3, r7, #7
 80092ba:	1e51      	subs	r1, r2, #1
 80092bc:	418a      	sbcs	r2, r1
 80092be:	701a      	strb	r2, [r3, #0]

  //Read with Pull Down
  // Charge_Pin_Down();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80092c0:	4b18      	ldr	r3, [pc, #96]	@ (8009324 <Read_Charge_Status+0xb0>)
 80092c2:	2280      	movs	r2, #128	@ 0x80
 80092c4:	0092      	lsls	r2, r2, #2
 80092c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092c8:	4b16      	ldr	r3, [pc, #88]	@ (8009324 <Read_Charge_Status+0xb0>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80092ce:	4b15      	ldr	r3, [pc, #84]	@ (8009324 <Read_Charge_Status+0xb0>)
 80092d0:	2202      	movs	r2, #2
 80092d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80092d4:	4b13      	ldr	r3, [pc, #76]	@ (8009324 <Read_Charge_Status+0xb0>)
 80092d6:	4a14      	ldr	r2, [pc, #80]	@ (8009328 <Read_Charge_Status+0xb4>)
 80092d8:	0019      	movs	r1, r3
 80092da:	0010      	movs	r0, r2
 80092dc:	f00b fe6c 	bl	8014fb8 <HAL_GPIO_Init>

  PulledDownStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 80092e0:	2380      	movs	r3, #128	@ 0x80
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4a10      	ldr	r2, [pc, #64]	@ (8009328 <Read_Charge_Status+0xb4>)
 80092e6:	0019      	movs	r1, r3
 80092e8:	0010      	movs	r0, r2
 80092ea:	f00b ffe3 	bl	80152b4 <HAL_GPIO_ReadPin>
 80092ee:	0003      	movs	r3, r0
 80092f0:	001a      	movs	r2, r3
 80092f2:	1dbb      	adds	r3, r7, #6
 80092f4:	1e51      	subs	r1, r2, #1
 80092f6:	418a      	sbcs	r2, r1
 80092f8:	701a      	strb	r2, [r3, #0]

  if (PulledUpStatus==false) {
 80092fa:	1dfb      	adds	r3, r7, #7
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	2201      	movs	r2, #1
 8009300:	4053      	eors	r3, r2
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <Read_Charge_Status+0x98>
    return CHARGING_ON;
 8009308:	2301      	movs	r3, #1
 800930a:	e006      	b.n	800931a <Read_Charge_Status+0xa6>
  }
  if (PulledDownStatus==true){
 800930c:	1dbb      	adds	r3, r7, #6
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <Read_Charge_Status+0xa4>
    return CHARGING_FULL;
 8009314:	2302      	movs	r3, #2
 8009316:	e000      	b.n	800931a <Read_Charge_Status+0xa6>
  }
  return CHARGING_OFF;
 8009318:	2300      	movs	r3, #0
}
 800931a:	0018      	movs	r0, r3
 800931c:	46bd      	mov	sp, r7
 800931e:	b002      	add	sp, #8
 8009320:	bd80      	pop	{r7, pc}
 8009322:	46c0      	nop			@ (mov r8, r8)
 8009324:	20000b3c 	.word	0x20000b3c
 8009328:	50000800 	.word	0x50000800

0800932c <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800932c:	b580      	push	{r7, lr}
 800932e:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8009330:	2380      	movs	r3, #128	@ 0x80
 8009332:	021a      	lsls	r2, r3, #8
 8009334:	23a0      	movs	r3, #160	@ 0xa0
 8009336:	05db      	lsls	r3, r3, #23
 8009338:	0011      	movs	r1, r2
 800933a:	0018      	movs	r0, r3
 800933c:	f00b ffba 	bl	80152b4 <HAL_GPIO_ReadPin>
 8009340:	0003      	movs	r3, r0
 8009342:	1e5a      	subs	r2, r3, #1
 8009344:	4193      	sbcs	r3, r2
 8009346:	b2db      	uxtb	r3, r3
}
 8009348:	0018      	movs	r0, r3
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009354:	4b05      	ldr	r3, [pc, #20]	@ (800936c <UserButton_Pressed+0x1c>)
 8009356:	2104      	movs	r1, #4
 8009358:	0018      	movs	r0, r3
 800935a:	f00b ffab 	bl	80152b4 <HAL_GPIO_ReadPin>
 800935e:	0003      	movs	r3, r0
 8009360:	425a      	negs	r2, r3
 8009362:	4153      	adcs	r3, r2
 8009364:	b2db      	uxtb	r3, r3
}
 8009366:	0018      	movs	r0, r3
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	50000c00 	.word	0x50000c00

08009370 <showTime>:
void getUptime(char* uptbuffer) {
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
}
#endif

void showTime() {
 8009370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009372:	46d6      	mov	lr, sl
 8009374:	464f      	mov	r7, r9
 8009376:	4646      	mov	r6, r8
 8009378:	b5c0      	push	{r6, r7, lr}
 800937a:	b08e      	sub	sp, #56	@ 0x38
 800937c:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 800937e:	4b38      	ldr	r3, [pc, #224]	@ (8009460 <showTime+0xf0>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d063      	beq.n	800944e <showTime+0xde>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009386:	003a      	movs	r2, r7
 8009388:	1d3b      	adds	r3, r7, #4
 800938a:	0011      	movs	r1, r2
 800938c:	0018      	movs	r0, r3
 800938e:	f000 faeb 	bl	8009968 <RTC_GetTime>
  lasthour = currentTime.Hours;
 8009392:	1d3b      	adds	r3, r7, #4
 8009394:	781a      	ldrb	r2, [r3, #0]
 8009396:	4b33      	ldr	r3, [pc, #204]	@ (8009464 <showTime+0xf4>)
 8009398:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 800939a:	003b      	movs	r3, r7
 800939c:	781a      	ldrb	r2, [r3, #0]
 800939e:	4b32      	ldr	r3, [pc, #200]	@ (8009468 <showTime+0xf8>)
 80093a0:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 80093a2:	f000 f87f 	bl	80094a4 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093a6:	003b      	movs	r3, r7
 80093a8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093aa:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093ac:	003b      	movs	r3, r7
 80093ae:	785b      	ldrb	r3, [r3, #1]
 80093b0:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093b2:	4b2e      	ldr	r3, [pc, #184]	@ (800946c <showTime+0xfc>)
 80093b4:	0092      	lsls	r2, r2, #2
 80093b6:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093b8:	003b      	movs	r3, r7
 80093ba:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093bc:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093be:	1d3b      	adds	r3, r7, #4
 80093c0:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093c2:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093c4:	1d3b      	adds	r3, r7, #4
 80093c6:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093c8:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093ca:	1d3b      	adds	r3, r7, #4
 80093cc:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093ce:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093d0:	4b27      	ldr	r3, [pc, #156]	@ (8009470 <showTime+0x100>)
 80093d2:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093d4:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093d6:	4b26      	ldr	r3, [pc, #152]	@ (8009470 <showTime+0x100>)
 80093d8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093da:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093dc:	4b24      	ldr	r3, [pc, #144]	@ (8009470 <showTime+0x100>)
 80093de:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093e0:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093e2:	4b23      	ldr	r3, [pc, #140]	@ (8009470 <showTime+0x100>)
 80093e4:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093e6:	4823      	ldr	r0, [pc, #140]	@ (8009474 <showTime+0x104>)
 80093e8:	9306      	str	r3, [sp, #24]
 80093ea:	4643      	mov	r3, r8
 80093ec:	9305      	str	r3, [sp, #20]
 80093ee:	4663      	mov	r3, ip
 80093f0:	9304      	str	r3, [sp, #16]
 80093f2:	9603      	str	r6, [sp, #12]
 80093f4:	9502      	str	r5, [sp, #8]
 80093f6:	9401      	str	r4, [sp, #4]
 80093f8:	9100      	str	r1, [sp, #0]
 80093fa:	4653      	mov	r3, sl
 80093fc:	4649      	mov	r1, r9
 80093fe:	f01c f8bf 	bl	8025580 <iprintf>
  if ((weekday == 7) && (lasthour == 3) && (currentTime.Minutes < 17) && !dstchkd && (currentDate.Date > 24) && ((currentDate.Month == 3) || (currentDate.Month == 10))) {
 8009402:	4b19      	ldr	r3, [pc, #100]	@ (8009468 <showTime+0xf8>)
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	2b07      	cmp	r3, #7
 8009408:	d122      	bne.n	8009450 <showTime+0xe0>
 800940a:	4b16      	ldr	r3, [pc, #88]	@ (8009464 <showTime+0xf4>)
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b03      	cmp	r3, #3
 8009410:	d11e      	bne.n	8009450 <showTime+0xe0>
 8009412:	1d3b      	adds	r3, r7, #4
 8009414:	785b      	ldrb	r3, [r3, #1]
 8009416:	2b10      	cmp	r3, #16
 8009418:	d81a      	bhi.n	8009450 <showTime+0xe0>
 800941a:	4b17      	ldr	r3, [pc, #92]	@ (8009478 <showTime+0x108>)
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	2201      	movs	r2, #1
 8009420:	4053      	eors	r3, r2
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b00      	cmp	r3, #0
 8009426:	d013      	beq.n	8009450 <showTime+0xe0>
 8009428:	003b      	movs	r3, r7
 800942a:	789b      	ldrb	r3, [r3, #2]
 800942c:	2b18      	cmp	r3, #24
 800942e:	d90f      	bls.n	8009450 <showTime+0xe0>
 8009430:	003b      	movs	r3, r7
 8009432:	785b      	ldrb	r3, [r3, #1]
 8009434:	2b03      	cmp	r3, #3
 8009436:	d003      	beq.n	8009440 <showTime+0xd0>
 8009438:	003b      	movs	r3, r7
 800943a:	785b      	ldrb	r3, [r3, #1]
 800943c:	2b0a      	cmp	r3, #10
 800943e:	d107      	bne.n	8009450 <showTime+0xe0>
    dstchkd = true;
 8009440:	4b0d      	ldr	r3, [pc, #52]	@ (8009478 <showTime+0x108>)
 8009442:	2201      	movs	r2, #1
 8009444:	701a      	strb	r2, [r3, #0]
    setESPTimeStamp(0); // check for summer/wintertime
 8009446:	2000      	movs	r0, #0
 8009448:	f7fb fa56 	bl	80048f8 <setESPTimeStamp>
 800944c:	e000      	b.n	8009450 <showTime+0xe0>
    return;
 800944e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009450:	46bd      	mov	sp, r7
 8009452:	b006      	add	sp, #24
 8009454:	bce0      	pop	{r5, r6, r7}
 8009456:	46ba      	mov	sl, r7
 8009458:	46b1      	mov	r9, r6
 800945a:	46a8      	mov	r8, r5
 800945c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800945e:	46c0      	nop			@ (mov r8, r8)
 8009460:	20000b6c 	.word	0x20000b6c
 8009464:	20000b5d 	.word	0x20000b5d
 8009468:	20000b5e 	.word	0x20000b5e
 800946c:	20000054 	.word	0x20000054
 8009470:	20000b60 	.word	0x20000b60
 8009474:	0802b7f0 	.word	0x0802b7f0
 8009478:	20000b5c 	.word	0x20000b5c

0800947c <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009482:	003a      	movs	r2, r7
 8009484:	1d3b      	adds	r3, r7, #4
 8009486:	0011      	movs	r1, r2
 8009488:	0018      	movs	r0, r3
 800948a:	f000 fa6d 	bl	8009968 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800948e:	1d3a      	adds	r2, r7, #4
 8009490:	003b      	movs	r3, r7
 8009492:	0011      	movs	r1, r2
 8009494:	0018      	movs	r0, r3
 8009496:	f000 fc31 	bl	8009cfc <makeTime>
 800949a:	0003      	movs	r3, r0
}
 800949c:	0018      	movs	r0, r3
 800949e:	46bd      	mov	sp, r7
 80094a0:	b006      	add	sp, #24
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b088      	sub	sp, #32
 80094a8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 80094aa:	003a      	movs	r2, r7
 80094ac:	1d3b      	adds	r3, r7, #4
 80094ae:	0011      	movs	r1, r2
 80094b0:	0018      	movs	r0, r3
 80094b2:	f000 fa59 	bl	8009968 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 80094b6:	1d3a      	adds	r2, r7, #4
 80094b8:	003b      	movs	r3, r7
 80094ba:	0011      	movs	r1, r2
 80094bc:	0018      	movs	r0, r3
 80094be:	f000 fc1d 	bl	8009cfc <makeTime>
 80094c2:	0002      	movs	r2, r0
 80094c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009540 <UpdateSystemUptime+0x9c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	213c      	movs	r1, #60	@ 0x3c
 80094d4:	0018      	movs	r0, r3
 80094d6:	f7f6 feeb 	bl	80002b0 <__aeabi_uidivmod>
 80094da:	000b      	movs	r3, r1
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	4b19      	ldr	r3, [pc, #100]	@ (8009544 <UpdateSystemUptime+0xa0>)
 80094e0:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	213c      	movs	r1, #60	@ 0x3c
 80094e6:	0018      	movs	r0, r3
 80094e8:	f7f6 fe5c 	bl	80001a4 <__udivsi3>
 80094ec:	0003      	movs	r3, r0
 80094ee:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	213c      	movs	r1, #60	@ 0x3c
 80094f4:	0018      	movs	r0, r3
 80094f6:	f7f6 fedb 	bl	80002b0 <__aeabi_uidivmod>
 80094fa:	000b      	movs	r3, r1
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	4b11      	ldr	r3, [pc, #68]	@ (8009544 <UpdateSystemUptime+0xa0>)
 8009500:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	213c      	movs	r1, #60	@ 0x3c
 8009506:	0018      	movs	r0, r3
 8009508:	f7f6 fe4c 	bl	80001a4 <__udivsi3>
 800950c:	0003      	movs	r3, r0
 800950e:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	2118      	movs	r1, #24
 8009514:	0018      	movs	r0, r3
 8009516:	f7f6 fecb 	bl	80002b0 <__aeabi_uidivmod>
 800951a:	000b      	movs	r3, r1
 800951c:	b2da      	uxtb	r2, r3
 800951e:	4b09      	ldr	r3, [pc, #36]	@ (8009544 <UpdateSystemUptime+0xa0>)
 8009520:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	2118      	movs	r1, #24
 8009526:	0018      	movs	r0, r3
 8009528:	f7f6 fe3c 	bl	80001a4 <__udivsi3>
 800952c:	0003      	movs	r3, r0
 800952e:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	b29a      	uxth	r2, r3
 8009534:	4b03      	ldr	r3, [pc, #12]	@ (8009544 <UpdateSystemUptime+0xa0>)
 8009536:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8009538:	46c0      	nop			@ (mov r8, r8)
 800953a:	46bd      	mov	sp, r7
 800953c:	b008      	add	sp, #32
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20000b6c 	.word	0x20000b6c
 8009544:	20000b60 	.word	0x20000b60

08009548 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8009548:	b590      	push	{r4, r7, lr}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	0008      	movs	r0, r1
 8009552:	0011      	movs	r1, r2
 8009554:	1cfb      	adds	r3, r7, #3
 8009556:	1c02      	adds	r2, r0, #0
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	1cbb      	adds	r3, r7, #2
 800955c:	1c0a      	adds	r2, r1, #0
 800955e:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8009560:	230e      	movs	r3, #14
 8009562:	18fb      	adds	r3, r7, r3
 8009564:	2200      	movs	r2, #0
 8009566:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8009568:	230f      	movs	r3, #15
 800956a:	18fb      	adds	r3, r7, r3
 800956c:	1cfa      	adds	r2, r7, #3
 800956e:	7812      	ldrb	r2, [r2, #0]
 8009570:	701a      	strb	r2, [r3, #0]
 8009572:	e015      	b.n	80095a0 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8009574:	200f      	movs	r0, #15
 8009576:	183b      	adds	r3, r7, r0
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	18d2      	adds	r2, r2, r3
 800957e:	240e      	movs	r4, #14
 8009580:	193b      	adds	r3, r7, r4
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	7811      	ldrb	r1, [r2, #0]
 8009586:	2208      	movs	r2, #8
 8009588:	18ba      	adds	r2, r7, r2
 800958a:	54d1      	strb	r1, [r2, r3]
    pos++;
 800958c:	193b      	adds	r3, r7, r4
 800958e:	781a      	ldrb	r2, [r3, #0]
 8009590:	193b      	adds	r3, r7, r4
 8009592:	3201      	adds	r2, #1
 8009594:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8009596:	183b      	adds	r3, r7, r0
 8009598:	781a      	ldrb	r2, [r3, #0]
 800959a:	183b      	adds	r3, r7, r0
 800959c:	3201      	adds	r2, #1
 800959e:	701a      	strb	r2, [r3, #0]
 80095a0:	200f      	movs	r0, #15
 80095a2:	183a      	adds	r2, r7, r0
 80095a4:	1cbb      	adds	r3, r7, #2
 80095a6:	7812      	ldrb	r2, [r2, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d9e2      	bls.n	8009574 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 80095ae:	230e      	movs	r3, #14
 80095b0:	18fb      	adds	r3, r7, r3
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2208      	movs	r2, #8
 80095b6:	18ba      	adds	r2, r7, r2
 80095b8:	2100      	movs	r1, #0
 80095ba:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 80095bc:	1cfb      	adds	r3, r7, #3
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	2b13      	cmp	r3, #19
 80095c2:	d849      	bhi.n	8009658 <aBuff2int+0x110>
    if (start == 17) { //month
 80095c4:	1cfb      	adds	r3, r7, #3
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	2b11      	cmp	r3, #17
 80095ca:	d122      	bne.n	8009612 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80095cc:	183b      	adds	r3, r7, r0
 80095ce:	2200      	movs	r2, #0
 80095d0:	701a      	strb	r2, [r3, #0]
 80095d2:	e018      	b.n	8009606 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80095d4:	240f      	movs	r4, #15
 80095d6:	193b      	adds	r3, r7, r4
 80095d8:	781a      	ldrb	r2, [r3, #0]
 80095da:	4b25      	ldr	r3, [pc, #148]	@ (8009670 <aBuff2int+0x128>)
 80095dc:	0092      	lsls	r2, r2, #2
 80095de:	58d2      	ldr	r2, [r2, r3]
 80095e0:	2308      	movs	r3, #8
 80095e2:	18fb      	adds	r3, r7, r3
 80095e4:	0011      	movs	r1, r2
 80095e6:	0018      	movs	r0, r3
 80095e8:	f7f6 fdb6 	bl	8000158 <strcmp>
 80095ec:	1e03      	subs	r3, r0, #0
 80095ee:	d104      	bne.n	80095fa <aBuff2int+0xb2>
          return i+1;
 80095f0:	193b      	adds	r3, r7, r4
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	3301      	adds	r3, #1
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	e035      	b.n	8009666 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80095fa:	210f      	movs	r1, #15
 80095fc:	187b      	adds	r3, r7, r1
 80095fe:	781a      	ldrb	r2, [r3, #0]
 8009600:	187b      	adds	r3, r7, r1
 8009602:	3201      	adds	r2, #1
 8009604:	701a      	strb	r2, [r3, #0]
 8009606:	230f      	movs	r3, #15
 8009608:	18fb      	adds	r3, r7, r3
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	2b0b      	cmp	r3, #11
 800960e:	d9e1      	bls.n	80095d4 <aBuff2int+0x8c>
 8009610:	e022      	b.n	8009658 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8009612:	230f      	movs	r3, #15
 8009614:	18fb      	adds	r3, r7, r3
 8009616:	2200      	movs	r2, #0
 8009618:	701a      	strb	r2, [r3, #0]
 800961a:	e018      	b.n	800964e <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 800961c:	240f      	movs	r4, #15
 800961e:	193b      	adds	r3, r7, r4
 8009620:	781a      	ldrb	r2, [r3, #0]
 8009622:	4b14      	ldr	r3, [pc, #80]	@ (8009674 <aBuff2int+0x12c>)
 8009624:	0092      	lsls	r2, r2, #2
 8009626:	58d2      	ldr	r2, [r2, r3]
 8009628:	2308      	movs	r3, #8
 800962a:	18fb      	adds	r3, r7, r3
 800962c:	0011      	movs	r1, r2
 800962e:	0018      	movs	r0, r3
 8009630:	f7f6 fd92 	bl	8000158 <strcmp>
 8009634:	1e03      	subs	r3, r0, #0
 8009636:	d104      	bne.n	8009642 <aBuff2int+0xfa>
          return i+1;
 8009638:	193b      	adds	r3, r7, r4
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	3301      	adds	r3, #1
 800963e:	b2db      	uxtb	r3, r3
 8009640:	e011      	b.n	8009666 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8009642:	210f      	movs	r1, #15
 8009644:	187b      	adds	r3, r7, r1
 8009646:	781a      	ldrb	r2, [r3, #0]
 8009648:	187b      	adds	r3, r7, r1
 800964a:	3201      	adds	r2, #1
 800964c:	701a      	strb	r2, [r3, #0]
 800964e:	230f      	movs	r3, #15
 8009650:	18fb      	adds	r3, r7, r3
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b06      	cmp	r3, #6
 8009656:	d9e1      	bls.n	800961c <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8009658:	2308      	movs	r3, #8
 800965a:	18fb      	adds	r3, r7, r3
 800965c:	0018      	movs	r0, r3
 800965e:	f01a fbaa 	bl	8023db6 <atoi>
 8009662:	0003      	movs	r3, r0
 8009664:	b2db      	uxtb	r3, r3
}
 8009666:	0018      	movs	r0, r3
 8009668:	46bd      	mov	sp, r7
 800966a:	b005      	add	sp, #20
 800966c:	bd90      	pop	{r4, r7, pc}
 800966e:	46c0      	nop			@ (mov r8, r8)
 8009670:	20000054 	.word	0x20000054
 8009674:	20000038 	.word	0x20000038

08009678 <ParseTime>:

void ParseTime(char* buffer) {
 8009678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800967a:	b08d      	sub	sp, #52	@ 0x34
 800967c:	af02      	add	r7, sp, #8
 800967e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009680:	2408      	movs	r4, #8
 8009682:	193a      	adds	r2, r7, r4
 8009684:	260c      	movs	r6, #12
 8009686:	19bb      	adds	r3, r7, r6
 8009688:	0011      	movs	r1, r2
 800968a:	0018      	movs	r0, r3
 800968c:	f000 f96c 	bl	8009968 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2219      	movs	r2, #25
 8009694:	2118      	movs	r1, #24
 8009696:	0018      	movs	r0, r3
 8009698:	f7ff ff56 	bl	8009548 <aBuff2int>
 800969c:	0003      	movs	r3, r0
 800969e:	001a      	movs	r2, r3
 80096a0:	19bb      	adds	r3, r7, r6
 80096a2:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	221c      	movs	r2, #28
 80096a8:	211b      	movs	r1, #27
 80096aa:	0018      	movs	r0, r3
 80096ac:	f7ff ff4c 	bl	8009548 <aBuff2int>
 80096b0:	0003      	movs	r3, r0
 80096b2:	001a      	movs	r2, r3
 80096b4:	19bb      	adds	r3, r7, r6
 80096b6:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	221f      	movs	r2, #31
 80096bc:	211e      	movs	r1, #30
 80096be:	0018      	movs	r0, r3
 80096c0:	f7ff ff42 	bl	8009548 <aBuff2int>
 80096c4:	0003      	movs	r3, r0
 80096c6:	001a      	movs	r2, r3
 80096c8:	19bb      	adds	r3, r7, r6
 80096ca:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2224      	movs	r2, #36	@ 0x24
 80096d0:	2123      	movs	r1, #35	@ 0x23
 80096d2:	0018      	movs	r0, r3
 80096d4:	f7ff ff38 	bl	8009548 <aBuff2int>
 80096d8:	0003      	movs	r3, r0
 80096da:	001a      	movs	r2, r3
 80096dc:	0025      	movs	r5, r4
 80096de:	197b      	adds	r3, r7, r5
 80096e0:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2213      	movs	r2, #19
 80096e6:	2111      	movs	r1, #17
 80096e8:	0018      	movs	r0, r3
 80096ea:	f7ff ff2d 	bl	8009548 <aBuff2int>
 80096ee:	0003      	movs	r3, r0
 80096f0:	001a      	movs	r2, r3
 80096f2:	197b      	adds	r3, r7, r5
 80096f4:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2216      	movs	r2, #22
 80096fa:	2115      	movs	r1, #21
 80096fc:	0018      	movs	r0, r3
 80096fe:	f7ff ff23 	bl	8009548 <aBuff2int>
 8009702:	0003      	movs	r3, r0
 8009704:	001a      	movs	r2, r3
 8009706:	197b      	adds	r3, r7, r5
 8009708:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	220f      	movs	r2, #15
 800970e:	210d      	movs	r1, #13
 8009710:	0018      	movs	r0, r3
 8009712:	f7ff ff19 	bl	8009548 <aBuff2int>
 8009716:	0003      	movs	r3, r0
 8009718:	001a      	movs	r2, r3
 800971a:	197b      	adds	r3, r7, r5
 800971c:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800971e:	19bb      	adds	r3, r7, r6
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	001c      	movs	r4, r3
 8009724:	19bb      	adds	r3, r7, r6
 8009726:	785b      	ldrb	r3, [r3, #1]
 8009728:	0018      	movs	r0, r3
 800972a:	19bb      	adds	r3, r7, r6
 800972c:	789b      	ldrb	r3, [r3, #2]
 800972e:	4a53      	ldr	r2, [pc, #332]	@ (800987c <ParseTime+0x204>)
 8009730:	4953      	ldr	r1, [pc, #332]	@ (8009880 <ParseTime+0x208>)
 8009732:	9301      	str	r3, [sp, #4]
 8009734:	9000      	str	r0, [sp, #0]
 8009736:	0023      	movs	r3, r4
 8009738:	2003      	movs	r0, #3
 800973a:	f009 fe07 	bl	801334c <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800973e:	197b      	adds	r3, r7, r5
 8009740:	789b      	ldrb	r3, [r3, #2]
 8009742:	001c      	movs	r4, r3
 8009744:	197b      	adds	r3, r7, r5
 8009746:	785b      	ldrb	r3, [r3, #1]
 8009748:	0018      	movs	r0, r3
 800974a:	197b      	adds	r3, r7, r5
 800974c:	78db      	ldrb	r3, [r3, #3]
 800974e:	4a4d      	ldr	r2, [pc, #308]	@ (8009884 <ParseTime+0x20c>)
 8009750:	494b      	ldr	r1, [pc, #300]	@ (8009880 <ParseTime+0x208>)
 8009752:	9301      	str	r3, [sp, #4]
 8009754:	9000      	str	r0, [sp, #0]
 8009756:	0023      	movs	r3, r4
 8009758:	2003      	movs	r0, #3
 800975a:	f009 fdf7 	bl	801334c <CreateLine>
  RTC_SetTime(&currentTime);
 800975e:	19bb      	adds	r3, r7, r6
 8009760:	0018      	movs	r0, r3
 8009762:	f000 f89d 	bl	80098a0 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8009766:	197b      	adds	r3, r7, r5
 8009768:	0018      	movs	r0, r3
 800976a:	f000 f8bf 	bl	80098ec <RTC_SetDate>
/* DST insert === */
  // DST == DaySavingTime == Zomertijd
  bool dst = false;
 800976e:	2327      	movs	r3, #39	@ 0x27
 8009770:	18fb      	adds	r3, r7, r3
 8009772:	2200      	movs	r2, #0
 8009774:	701a      	strb	r2, [r3, #0]

  int mnd = currentDate.Month;
 8009776:	197b      	adds	r3, r7, r5
 8009778:	785b      	ldrb	r3, [r3, #1]
 800977a:	623b      	str	r3, [r7, #32]
  dst = !((mnd < 3) || (mnd > 10)); // between october and march
 800977c:	6a3b      	ldr	r3, [r7, #32]
 800977e:	2b02      	cmp	r3, #2
 8009780:	dd04      	ble.n	800978c <ParseTime+0x114>
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	2b0a      	cmp	r3, #10
 8009786:	dc01      	bgt.n	800978c <ParseTime+0x114>
 8009788:	2201      	movs	r2, #1
 800978a:	e000      	b.n	800978e <ParseTime+0x116>
 800978c:	2200      	movs	r2, #0
 800978e:	2027      	movs	r0, #39	@ 0x27
 8009790:	183b      	adds	r3, r7, r0
 8009792:	701a      	strb	r2, [r3, #0]
 8009794:	781a      	ldrb	r2, [r3, #0]
 8009796:	2101      	movs	r1, #1
 8009798:	400a      	ands	r2, r1
 800979a:	701a      	strb	r2, [r3, #0]
  if (dst)
 800979c:	0002      	movs	r2, r0
 800979e:	18bb      	adds	r3, r7, r2
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d01f      	beq.n	80097e6 <ParseTime+0x16e>
  {
    if ((mnd == 3) && (currentDate.WeekDay == 7) && (currentDate.Date < 25)) {
 80097a6:	6a3b      	ldr	r3, [r7, #32]
 80097a8:	2b03      	cmp	r3, #3
 80097aa:	d10c      	bne.n	80097c6 <ParseTime+0x14e>
 80097ac:	2108      	movs	r1, #8
 80097ae:	187b      	adds	r3, r7, r1
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	2b07      	cmp	r3, #7
 80097b4:	d107      	bne.n	80097c6 <ParseTime+0x14e>
 80097b6:	187b      	adds	r3, r7, r1
 80097b8:	789b      	ldrb	r3, [r3, #2]
 80097ba:	2b18      	cmp	r3, #24
 80097bc:	d803      	bhi.n	80097c6 <ParseTime+0x14e>
      // starts last sunday of march
      // weekday -> sunday returns 7
        dst = false;
 80097be:	18bb      	adds	r3, r7, r2
 80097c0:	2200      	movs	r2, #0
 80097c2:	701a      	strb	r2, [r3, #0]
 80097c4:	e00f      	b.n	80097e6 <ParseTime+0x16e>
    }
    else if ((mnd == 10) && (currentDate.WeekDay == 7) && (currentDate.Date < 25))
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	2b0a      	cmp	r3, #10
 80097ca:	d10c      	bne.n	80097e6 <ParseTime+0x16e>
 80097cc:	2208      	movs	r2, #8
 80097ce:	18bb      	adds	r3, r7, r2
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	2b07      	cmp	r3, #7
 80097d4:	d107      	bne.n	80097e6 <ParseTime+0x16e>
 80097d6:	18bb      	adds	r3, r7, r2
 80097d8:	789b      	ldrb	r3, [r3, #2]
 80097da:	2b18      	cmp	r3, #24
 80097dc:	d803      	bhi.n	80097e6 <ParseTime+0x16e>
    {
        dst = false;
 80097de:	2327      	movs	r3, #39	@ 0x27
 80097e0:	18fb      	adds	r3, r7, r3
 80097e2:	2200      	movs	r2, #0
 80097e4:	701a      	strb	r2, [r3, #0]
    }
  }
  if (dst) {
 80097e6:	2327      	movs	r3, #39	@ 0x27
 80097e8:	18fb      	adds	r3, r7, r3
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d028      	beq.n	8009842 <ParseTime+0x1ca>
    Info("Daylight Saving Time active");
 80097f0:	4a25      	ldr	r2, [pc, #148]	@ (8009888 <ParseTime+0x210>)
 80097f2:	4b26      	ldr	r3, [pc, #152]	@ (800988c <ParseTime+0x214>)
 80097f4:	0019      	movs	r1, r3
 80097f6:	2002      	movs	r0, #2
 80097f8:	f009 fda8 	bl	801334c <CreateLine>
    HAL_RTC_DST_Add1Hour(RealTime_Handle); // CEST or CET
 80097fc:	4b24      	ldr	r3, [pc, #144]	@ (8009890 <ParseTime+0x218>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	0018      	movs	r0, r3
 8009802:	f012 f923 	bl	801ba4c <HAL_RTC_DST_Add1Hour>
    HAL_Delay(500);
 8009806:	23fa      	movs	r3, #250	@ 0xfa
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	0018      	movs	r0, r3
 800980c:	f00a fae8 	bl	8013de0 <HAL_Delay>
    RTC_GetTime(&currentTime, &currentDate);
 8009810:	2308      	movs	r3, #8
 8009812:	18fa      	adds	r2, r7, r3
 8009814:	240c      	movs	r4, #12
 8009816:	193b      	adds	r3, r7, r4
 8009818:	0011      	movs	r1, r2
 800981a:	0018      	movs	r0, r3
 800981c:	f000 f8a4 	bl	8009968 <RTC_GetTime>
    Debug("Current RTC time after update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8009820:	0022      	movs	r2, r4
 8009822:	18bb      	adds	r3, r7, r2
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	001c      	movs	r4, r3
 8009828:	18bb      	adds	r3, r7, r2
 800982a:	785b      	ldrb	r3, [r3, #1]
 800982c:	0018      	movs	r0, r3
 800982e:	18bb      	adds	r3, r7, r2
 8009830:	789b      	ldrb	r3, [r3, #2]
 8009832:	4a18      	ldr	r2, [pc, #96]	@ (8009894 <ParseTime+0x21c>)
 8009834:	4912      	ldr	r1, [pc, #72]	@ (8009880 <ParseTime+0x208>)
 8009836:	9301      	str	r3, [sp, #4]
 8009838:	9000      	str	r0, [sp, #0]
 800983a:	0023      	movs	r3, r4
 800983c:	2003      	movs	r0, #3
 800983e:	f009 fd85 	bl	801334c <CreateLine>
  }

//=================
  if (currentDate.WeekDay == 2) {
 8009842:	2308      	movs	r3, #8
 8009844:	18fb      	adds	r3, r7, r3
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b02      	cmp	r3, #2
 800984a:	d104      	bne.n	8009856 <ParseTime+0x1de>
    reset_fanCleaningDone(); // reset the cleaning flag done
 800984c:	f004 fa90 	bl	800dd70 <reset_fanCleaningDone>
    dstchkd = false; // reset the dst flag done
 8009850:	4b11      	ldr	r3, [pc, #68]	@ (8009898 <ParseTime+0x220>)
 8009852:	2200      	movs	r2, #0
 8009854:	701a      	strb	r2, [r3, #0]
  }
  if (posixBootTime == 0) {
 8009856:	4b11      	ldr	r3, [pc, #68]	@ (800989c <ParseTime+0x224>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10a      	bne.n	8009874 <ParseTime+0x1fc>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800985e:	230c      	movs	r3, #12
 8009860:	18fa      	adds	r2, r7, r3
 8009862:	2308      	movs	r3, #8
 8009864:	18fb      	adds	r3, r7, r3
 8009866:	0011      	movs	r1, r2
 8009868:	0018      	movs	r0, r3
 800986a:	f000 fa47 	bl	8009cfc <makeTime>
 800986e:	0002      	movs	r2, r0
 8009870:	4b0a      	ldr	r3, [pc, #40]	@ (800989c <ParseTime+0x224>)
 8009872:	601a      	str	r2, [r3, #0]
  }
}
 8009874:	46c0      	nop			@ (mov r8, r8)
 8009876:	46bd      	mov	sp, r7
 8009878:	b00b      	add	sp, #44	@ 0x2c
 800987a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800987c:	0802b848 	.word	0x0802b848
 8009880:	0802b880 	.word	0x0802b880
 8009884:	0802b884 	.word	0x0802b884
 8009888:	0802b8b8 	.word	0x0802b8b8
 800988c:	0802b8d4 	.word	0x0802b8d4
 8009890:	20000b68 	.word	0x20000b68
 8009894:	0802b8d8 	.word	0x0802b8d8
 8009898:	20000b5c 	.word	0x20000b5c
 800989c:	20000b6c 	.word	0x20000b6c

080098a0 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80098ba:	4b09      	ldr	r3, [pc, #36]	@ (80098e0 <RTC_SetTime+0x40>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	0018      	movs	r0, r3
 80098c4:	f011 feae 	bl	801b624 <HAL_RTC_SetTime>
 80098c8:	1e03      	subs	r3, r0, #0
 80098ca:	d005      	beq.n	80098d8 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 80098cc:	4a05      	ldr	r2, [pc, #20]	@ (80098e4 <RTC_SetTime+0x44>)
 80098ce:	4b06      	ldr	r3, [pc, #24]	@ (80098e8 <RTC_SetTime+0x48>)
 80098d0:	0019      	movs	r1, r3
 80098d2:	2001      	movs	r0, #1
 80098d4:	f009 fd3a 	bl	801334c <CreateLine>
    }
}
 80098d8:	46c0      	nop			@ (mov r8, r8)
 80098da:	46bd      	mov	sp, r7
 80098dc:	b002      	add	sp, #8
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	20000b68 	.word	0x20000b68
 80098e4:	0802b90c 	.word	0x0802b90c
 80098e8:	0802b928 	.word	0x0802b928

080098ec <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80098f4:	4b16      	ldr	r3, [pc, #88]	@ (8009950 <RTC_SetDate+0x64>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	0018      	movs	r0, r3
 80098fe:	f011 ff99 	bl	801b834 <HAL_RTC_SetDate>
 8009902:	1e03      	subs	r3, r0, #0
 8009904:	d005      	beq.n	8009912 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 8009906:	4a13      	ldr	r2, [pc, #76]	@ (8009954 <RTC_SetDate+0x68>)
 8009908:	4b13      	ldr	r3, [pc, #76]	@ (8009958 <RTC_SetDate+0x6c>)
 800990a:	0019      	movs	r1, r3
 800990c:	2001      	movs	r0, #1
 800990e:	f009 fd1d 	bl	801334c <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8009912:	4b0f      	ldr	r3, [pc, #60]	@ (8009950 <RTC_SetDate+0x64>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2101      	movs	r1, #1
 8009918:	0018      	movs	r0, r3
 800991a:	f012 faef 	bl	801befc <HAL_RTCEx_BKUPRead>
 800991e:	0003      	movs	r3, r0
 8009920:	4a0e      	ldr	r2, [pc, #56]	@ (800995c <RTC_SetDate+0x70>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d010      	beq.n	8009948 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 8009926:	4a0e      	ldr	r2, [pc, #56]	@ (8009960 <RTC_SetDate+0x74>)
 8009928:	4b0e      	ldr	r3, [pc, #56]	@ (8009964 <RTC_SetDate+0x78>)
 800992a:	0019      	movs	r1, r3
 800992c:	2003      	movs	r0, #3
 800992e:	f009 fd0d 	bl	801334c <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8009932:	f010 fdf7 	bl	801a524 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 8009936:	4b06      	ldr	r3, [pc, #24]	@ (8009950 <RTC_SetDate+0x64>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a08      	ldr	r2, [pc, #32]	@ (800995c <RTC_SetDate+0x70>)
 800993c:	2101      	movs	r1, #1
 800993e:	0018      	movs	r0, r3
 8009940:	f012 fac4 	bl	801becc <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8009944:	f010 fdfc 	bl	801a540 <HAL_PWR_DisableBkUpAccess>
    }
}
 8009948:	46c0      	nop			@ (mov r8, r8)
 800994a:	46bd      	mov	sp, r7
 800994c:	b002      	add	sp, #8
 800994e:	bd80      	pop	{r7, pc}
 8009950:	20000b68 	.word	0x20000b68
 8009954:	0802b92c 	.word	0x0802b92c
 8009958:	0802b928 	.word	0x0802b928
 800995c:	0000bebe 	.word	0x0000bebe
 8009960:	0802b948 	.word	0x0802b948
 8009964:	0802b880 	.word	0x0802b880

08009968 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8009968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8009972:	250f      	movs	r5, #15
 8009974:	197b      	adds	r3, r7, r5
 8009976:	2201      	movs	r2, #1
 8009978:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800997a:	230e      	movs	r3, #14
 800997c:	18fb      	adds	r3, r7, r3
 800997e:	2200      	movs	r2, #0
 8009980:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8009982:	260c      	movs	r6, #12
 8009984:	19bc      	adds	r4, r7, r6
 8009986:	f008 fd35 	bl	80123f4 <powerCheck>
 800998a:	0003      	movs	r3, r0
 800998c:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 800998e:	19bb      	adds	r3, r7, r6
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d104      	bne.n	80099a0 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8009996:	197b      	adds	r3, r7, r5
 8009998:	781a      	ldrb	r2, [r3, #0]
 800999a:	197b      	adds	r3, r7, r5
 800999c:	3201      	adds	r2, #1
 800999e:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 80099a0:	230d      	movs	r3, #13
 80099a2:	18fb      	adds	r3, r7, r3
 80099a4:	2200      	movs	r2, #0
 80099a6:	701a      	strb	r2, [r3, #0]
 80099a8:	e039      	b.n	8009a1e <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80099aa:	4b23      	ldr	r3, [pc, #140]	@ (8009a38 <RTC_GetTime+0xd0>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6879      	ldr	r1, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	0018      	movs	r0, r3
 80099b4:	f011 fee0 	bl	801b778 <HAL_RTC_GetTime>
 80099b8:	1e03      	subs	r3, r0, #0
 80099ba:	d005      	beq.n	80099c8 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 80099bc:	4a1f      	ldr	r2, [pc, #124]	@ (8009a3c <RTC_GetTime+0xd4>)
 80099be:	4b20      	ldr	r3, [pc, #128]	@ (8009a40 <RTC_GetTime+0xd8>)
 80099c0:	0019      	movs	r1, r3
 80099c2:	2001      	movs	r0, #1
 80099c4:	f009 fcc2 	bl	801334c <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80099c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009a38 <RTC_GetTime+0xd0>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	2200      	movs	r2, #0
 80099d0:	0018      	movs	r0, r3
 80099d2:	f011 ffc3 	bl	801b95c <HAL_RTC_GetDate>
 80099d6:	1e03      	subs	r3, r0, #0
 80099d8:	d005      	beq.n	80099e6 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80099da:	4a1a      	ldr	r2, [pc, #104]	@ (8009a44 <RTC_GetTime+0xdc>)
 80099dc:	4b18      	ldr	r3, [pc, #96]	@ (8009a40 <RTC_GetTime+0xd8>)
 80099de:	0019      	movs	r1, r3
 80099e0:	2001      	movs	r0, #1
 80099e2:	f009 fcb3 	bl	801334c <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80099e6:	230c      	movs	r3, #12
 80099e8:	18fb      	adds	r3, r7, r3
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d110      	bne.n	8009a12 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	210e      	movs	r1, #14
 80099f6:	187a      	adds	r2, r7, r1
 80099f8:	7812      	ldrb	r2, [r2, #0]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d018      	beq.n	8009a30 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80099fe:	187b      	adds	r3, r7, r1
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	7812      	ldrb	r2, [r2, #0]
 8009a04:	701a      	strb	r2, [r3, #0]
        t++;
 8009a06:	210f      	movs	r1, #15
 8009a08:	187b      	adds	r3, r7, r1
 8009a0a:	781a      	ldrb	r2, [r3, #0]
 8009a0c:	187b      	adds	r3, r7, r1
 8009a0e:	3201      	adds	r2, #1
 8009a10:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8009a12:	210d      	movs	r1, #13
 8009a14:	187b      	adds	r3, r7, r1
 8009a16:	781a      	ldrb	r2, [r3, #0]
 8009a18:	187b      	adds	r3, r7, r1
 8009a1a:	3201      	adds	r2, #1
 8009a1c:	701a      	strb	r2, [r3, #0]
 8009a1e:	230d      	movs	r3, #13
 8009a20:	18fa      	adds	r2, r7, r3
 8009a22:	230f      	movs	r3, #15
 8009a24:	18fb      	adds	r3, r7, r3
 8009a26:	7812      	ldrb	r2, [r2, #0]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d3bd      	bcc.n	80099aa <RTC_GetTime+0x42>
 8009a2e:	e000      	b.n	8009a32 <RTC_GetTime+0xca>
      }
      else {
        return;
 8009a30:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8009a32:	46bd      	mov	sp, r7
 8009a34:	b005      	add	sp, #20
 8009a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a38:	20000b68 	.word	0x20000b68
 8009a3c:	0802b960 	.word	0x0802b960
 8009a40:	0802b928 	.word	0x0802b928
 8009a44:	0802b97c 	.word	0x0802b97c

08009a48 <getPosixTime>:

uint32_t getPosixTime(void) {
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009a4e:	003a      	movs	r2, r7
 8009a50:	1d3b      	adds	r3, r7, #4
 8009a52:	0011      	movs	r1, r2
 8009a54:	0018      	movs	r0, r3
 8009a56:	f7ff ff87 	bl	8009968 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8009a5a:	1d3a      	adds	r2, r7, #4
 8009a5c:	003b      	movs	r3, r7
 8009a5e:	0011      	movs	r1, r2
 8009a60:	0018      	movs	r0, r3
 8009a62:	f000 f94b 	bl	8009cfc <makeTime>
 8009a66:	0003      	movs	r3, r0
}
 8009a68:	0018      	movs	r0, r3
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	b006      	add	sp, #24
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8009a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a72:	b08d      	sub	sp, #52	@ 0x34
 8009a74:	af04      	add	r7, sp, #16
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8009a7a:	240c      	movs	r4, #12
 8009a7c:	193a      	adds	r2, r7, r4
 8009a7e:	2508      	movs	r5, #8
 8009a80:	1979      	adds	r1, r7, r5
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	0018      	movs	r0, r3
 8009a86:	f000 fa03 	bl	8009e90 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009a8a:	002a      	movs	r2, r5
 8009a8c:	18bb      	adds	r3, r7, r2
 8009a8e:	789b      	ldrb	r3, [r3, #2]
 8009a90:	001e      	movs	r6, r3
 8009a92:	18bb      	adds	r3, r7, r2
 8009a94:	785b      	ldrb	r3, [r3, #1]
 8009a96:	469c      	mov	ip, r3
 8009a98:	18bb      	adds	r3, r7, r2
 8009a9a:	78db      	ldrb	r3, [r3, #3]
 8009a9c:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009a9e:	0021      	movs	r1, r4
 8009aa0:	187b      	adds	r3, r7, r1
 8009aa2:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009aa4:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009aa6:	187b      	adds	r3, r7, r1
 8009aa8:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009aaa:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009aac:	187b      	adds	r3, r7, r1
 8009aae:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009ab0:	4906      	ldr	r1, [pc, #24]	@ (8009acc <getUTCfromPosixTime+0x5c>)
 8009ab2:	6838      	ldr	r0, [r7, #0]
 8009ab4:	9303      	str	r3, [sp, #12]
 8009ab6:	9502      	str	r5, [sp, #8]
 8009ab8:	9401      	str	r4, [sp, #4]
 8009aba:	9200      	str	r2, [sp, #0]
 8009abc:	4663      	mov	r3, ip
 8009abe:	0032      	movs	r2, r6
 8009ac0:	f01b fdce 	bl	8025660 <siprintf>
}
 8009ac4:	46c0      	nop			@ (mov r8, r8)
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	b009      	add	sp, #36	@ 0x24
 8009aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009acc:	0802b998 	.word	0x0802b998

08009ad0 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8009ad8:	4b10      	ldr	r3, [pc, #64]	@ (8009b1c <RTC_SetWakeUpTimer+0x4c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	0018      	movs	r0, r3
 8009ade:	f012 f959 	bl	801bd94 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8009ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8009b1c <RTC_SetWakeUpTimer+0x4c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	22ff      	movs	r2, #255	@ 0xff
 8009aec:	401a      	ands	r2, r3
 8009aee:	4b0b      	ldr	r3, [pc, #44]	@ (8009b1c <RTC_SetWakeUpTimer+0x4c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	490a      	ldr	r1, [pc, #40]	@ (8009b20 <RTC_SetWakeUpTimer+0x50>)
 8009af6:	430a      	orrs	r2, r1
 8009af8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8009afa:	4b0a      	ldr	r3, [pc, #40]	@ (8009b24 <RTC_SetWakeUpTimer+0x54>)
 8009afc:	2280      	movs	r2, #128	@ 0x80
 8009afe:	0352      	lsls	r2, r2, #13
 8009b00:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8009b02:	4b06      	ldr	r3, [pc, #24]	@ (8009b1c <RTC_SetWakeUpTimer+0x4c>)
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	2204      	movs	r2, #4
 8009b0c:	0019      	movs	r1, r3
 8009b0e:	f012 f869 	bl	801bbe4 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8009b12:	46c0      	nop			@ (mov r8, r8)
 8009b14:	46bd      	mov	sp, r7
 8009b16:	b002      	add	sp, #8
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	46c0      	nop			@ (mov r8, r8)
 8009b1c:	20000b68 	.word	0x20000b68
 8009b20:	fffffb7f 	.word	0xfffffb7f
 8009b24:	40010400 	.word	0x40010400

08009b28 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8009b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8009b5c <Enter_Standby_Mode+0x34>)
 8009b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b60 <Enter_Standby_Mode+0x38>)
 8009b30:	0019      	movs	r1, r3
 8009b32:	2003      	movs	r0, #3
 8009b34:	f009 fc0a 	bl	801334c <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8009b38:	2064      	movs	r0, #100	@ 0x64
 8009b3a:	f00a f951 	bl	8013de0 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8009b3e:	4b09      	ldr	r3, [pc, #36]	@ (8009b64 <Enter_Standby_Mode+0x3c>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	0018      	movs	r0, r3
 8009b44:	f012 f926 	bl	801bd94 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8009b48:	f002 f96e 	bl	800be28 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8009b4c:	f00a f96c 	bl	8013e28 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8009b50:	f010 fd62 	bl	801a618 <HAL_PWR_EnterSTANDBYMode>
}
 8009b54:	46c0      	nop			@ (mov r8, r8)
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	46c0      	nop			@ (mov r8, r8)
 8009b5c:	0802b9ec 	.word	0x0802b9ec
 8009b60:	0802b880 	.word	0x0802b880
 8009b64:	20000b68 	.word	0x20000b68

08009b68 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af02      	add	r7, sp, #8
 8009b6e:	0002      	movs	r2, r0
 8009b70:	1dbb      	adds	r3, r7, #6
 8009b72:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8009b74:	4b4f      	ldr	r3, [pc, #316]	@ (8009cb4 <Enter_Stop_Mode+0x14c>)
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d001      	beq.n	8009b80 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8009b7c:	f004 f8cc 	bl	800dd18 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8009b80:	f7ff fab2 	bl	80090e8 <ReadBatteryVoltage>
 8009b84:	1c03      	adds	r3, r0, #0
 8009b86:	1c18      	adds	r0, r3, #0
 8009b88:	f7f9 fe84 	bl	8003894 <__aeabi_f2d>
 8009b8c:	0002      	movs	r2, r0
 8009b8e:	000b      	movs	r3, r1
 8009b90:	4849      	ldr	r0, [pc, #292]	@ (8009cb8 <Enter_Stop_Mode+0x150>)
 8009b92:	494a      	ldr	r1, [pc, #296]	@ (8009cbc <Enter_Stop_Mode+0x154>)
 8009b94:	9200      	str	r2, [sp, #0]
 8009b96:	9301      	str	r3, [sp, #4]
 8009b98:	0002      	movs	r2, r0
 8009b9a:	2002      	movs	r0, #2
 8009b9c:	f009 fbd6 	bl	801334c <CreateLine>
  powerDisplay(powerCheck());
 8009ba0:	f008 fc28 	bl	80123f4 <powerCheck>
 8009ba4:	0003      	movs	r3, r0
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	f008 fc40 	bl	801242c <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8009bac:	1dbb      	adds	r3, r7, #6
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	4a43      	ldr	r2, [pc, #268]	@ (8009cc0 <Enter_Stop_Mode+0x158>)
 8009bb2:	4944      	ldr	r1, [pc, #272]	@ (8009cc4 <Enter_Stop_Mode+0x15c>)
 8009bb4:	2003      	movs	r0, #3
 8009bb6:	f009 fbc9 	bl	801334c <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8009bba:	f7ff ff45 	bl	8009a48 <getPosixTime>
 8009bbe:	0002      	movs	r2, r0
 8009bc0:	1dbb      	adds	r3, r7, #6
 8009bc2:	881b      	ldrh	r3, [r3, #0]
 8009bc4:	18d3      	adds	r3, r2, r3
 8009bc6:	4a40      	ldr	r2, [pc, #256]	@ (8009cc8 <Enter_Stop_Mode+0x160>)
 8009bc8:	0011      	movs	r1, r2
 8009bca:	0018      	movs	r0, r3
 8009bcc:	f7ff ff50 	bl	8009a70 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8009bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8009cc8 <Enter_Stop_Mode+0x160>)
 8009bd2:	4a3e      	ldr	r2, [pc, #248]	@ (8009ccc <Enter_Stop_Mode+0x164>)
 8009bd4:	4939      	ldr	r1, [pc, #228]	@ (8009cbc <Enter_Stop_Mode+0x154>)
 8009bd6:	2002      	movs	r0, #2
 8009bd8:	f009 fbb8 	bl	801334c <CreateLine>
  HAL_Delay(100);
 8009bdc:	2064      	movs	r0, #100	@ 0x64
 8009bde:	f00a f8ff 	bl	8013de0 <HAL_Delay>
  HAL_SuspendTick();
 8009be2:	f00a f921 	bl	8013e28 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8009be6:	1dbb      	adds	r3, r7, #6
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	0018      	movs	r0, r3
 8009bec:	f7ff ff70 	bl	8009ad0 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	2001      	movs	r0, #1
 8009bf4:	f010 fcb4 	bl	801a560 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8009bf8:	f002 fdc6 	bl	800c788 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8009bfc:	f00a f922 	bl	8013e44 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8009c00:	1dbb      	adds	r3, r7, #6
 8009c02:	881b      	ldrh	r3, [r3, #0]
 8009c04:	0018      	movs	r0, r3
 8009c06:	f003 fffb 	bl	800dc00 <sen5x_enable>
 8009c0a:	1e03      	subs	r3, r0, #0
 8009c0c:	d01e      	beq.n	8009c4c <Enter_Stop_Mode+0xe4>
    showTime();
 8009c0e:	f7ff fbaf 	bl	8009370 <showTime>
    set_light_on_state();
 8009c12:	f004 fd35 	bl	800e680 <set_light_on_state>
    if (!userToggle) {
 8009c16:	4b2e      	ldr	r3, [pc, #184]	@ (8009cd0 <Enter_Stop_Mode+0x168>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	4053      	eors	r3, r2
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d013      	beq.n	8009c4c <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 8009c24:	201c      	movs	r0, #28
 8009c26:	f7ff ff53 	bl	8009ad0 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8009c2a:	4a25      	ldr	r2, [pc, #148]	@ (8009cc0 <Enter_Stop_Mode+0x158>)
 8009c2c:	4925      	ldr	r1, [pc, #148]	@ (8009cc4 <Enter_Stop_Mode+0x15c>)
 8009c2e:	231c      	movs	r3, #28
 8009c30:	2003      	movs	r0, #3
 8009c32:	f009 fb8b 	bl	801334c <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009c36:	2101      	movs	r1, #1
 8009c38:	2001      	movs	r0, #1
 8009c3a:	f010 fc91 	bl	801a560 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8009c3e:	f002 fda3 	bl	800c788 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 8009c42:	f00a f8ff 	bl	8013e44 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 8009c46:	2000      	movs	r0, #0
 8009c48:	f003 ffb8 	bl	800dbbc <setsen5xReadTimer>
    }
  }
  showTime();
 8009c4c:	f7ff fb90 	bl	8009370 <showTime>
  EnabledConnectedDevices();
 8009c50:	f003 fb52 	bl	800d2f8 <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 8009c54:	f003 fc4c 	bl	800d4f0 <ResetDBACalculator>
  ResetBMP280samplecounter();
 8009c58:	f000 ff68 	bl	800ab2c <ResetBMP280samplecounter>
  ResetSGP40samplecounter();
 8009c5c:	f006 fb88 	bl	8010370 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 8009c60:	f7f9 ff6c 	bl	8003b3c <ResetENS160samplecounter>
  setsen5xSamplecounter(0);
 8009c64:	2000      	movs	r0, #0
 8009c66:	f003 ffbb 	bl	800dbe0 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 8009c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8009cd4 <Enter_Stop_Mode+0x16c>)
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	f7fa fe43 	bl	80048f8 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 8009c72:	201e      	movs	r0, #30
 8009c74:	f006 fb6a 	bl	801034c <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 8009c78:	205a      	movs	r0, #90	@ 0x5a
 8009c7a:	f009 fdc5 	bl	8013808 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 8009c7e:	203c      	movs	r0, #60	@ 0x3c
 8009c80:	f000 fb98 	bl	800a3b4 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 8009c84:	205a      	movs	r0, #90	@ 0x5a
 8009c86:	f000 ff3f 	bl	800ab08 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	f7f9 ff60 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 8009c90:	2000      	movs	r0, #0
 8009c92:	f003 fc1b 	bl	800d4cc <setMICTimeStamp>
  ESPTransmitDone = false;
 8009c96:	4b10      	ldr	r3, [pc, #64]	@ (8009cd8 <Enter_Stop_Mode+0x170>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 8009c9c:	f00a f896 	bl	8013dcc <HAL_GetTick>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8009cd4 <Enter_Stop_Mode+0x16c>)
 8009ca4:	189a      	adds	r2, r3, r2
 8009ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8009cdc <Enter_Stop_Mode+0x174>)
 8009ca8:	601a      	str	r2, [r3, #0]
}
 8009caa:	46c0      	nop			@ (mov r8, r8)
 8009cac:	46bd      	mov	sp, r7
 8009cae:	b002      	add	sp, #8
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	46c0      	nop			@ (mov r8, r8)
 8009cb4:	20000ed1 	.word	0x20000ed1
 8009cb8:	0802ba10 	.word	0x0802ba10
 8009cbc:	0802b8d4 	.word	0x0802b8d4
 8009cc0:	0802ba28 	.word	0x0802ba28
 8009cc4:	0802b880 	.word	0x0802b880
 8009cc8:	20000b70 	.word	0x20000b70
 8009ccc:	0802ba4c 	.word	0x0802ba4c
 8009cd0:	20001e62 	.word	0x20001e62
 8009cd4:	00001194 	.word	0x00001194
 8009cd8:	200005a8 	.word	0x200005a8
 8009cdc:	20000e28 	.word	0x20000e28

08009ce0 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8009ce8:	4b03      	ldr	r3, [pc, #12]	@ (8009cf8 <InitClock+0x18>)
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	601a      	str	r2, [r3, #0]
}
 8009cee:	46c0      	nop			@ (mov r8, r8)
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	b002      	add	sp, #8
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	46c0      	nop			@ (mov r8, r8)
 8009cf8:	20000b68 	.word	0x20000b68

08009cfc <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	78db      	ldrb	r3, [r3, #3]
 8009d0a:	001a      	movs	r2, r3
 8009d0c:	0013      	movs	r3, r2
 8009d0e:	025b      	lsls	r3, r3, #9
 8009d10:	189b      	adds	r3, r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	189b      	adds	r3, r3, r2
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	189b      	adds	r3, r3, r2
 8009d1a:	011a      	lsls	r2, r3, #4
 8009d1c:	1ad2      	subs	r2, r2, r3
 8009d1e:	01d3      	lsls	r3, r2, #7
 8009d20:	001a      	movs	r2, r3
 8009d22:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8009d24:	2300      	movs	r3, #0
 8009d26:	60fb      	str	r3, [r7, #12]
 8009d28:	e028      	b.n	8009d7c <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4a53      	ldr	r2, [pc, #332]	@ (8009e7c <makeTime+0x180>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	db21      	blt.n	8009d76 <makeTime+0x7a>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	4a52      	ldr	r2, [pc, #328]	@ (8009e80 <makeTime+0x184>)
 8009d36:	4694      	mov	ip, r2
 8009d38:	4463      	add	r3, ip
 8009d3a:	001a      	movs	r2, r3
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	4013      	ands	r3, r2
 8009d40:	d119      	bne.n	8009d76 <makeTime+0x7a>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	4a4e      	ldr	r2, [pc, #312]	@ (8009e80 <makeTime+0x184>)
 8009d46:	4694      	mov	ip, r2
 8009d48:	4463      	add	r3, ip
 8009d4a:	2164      	movs	r1, #100	@ 0x64
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f7f6 fb99 	bl	8000484 <__aeabi_idivmod>
 8009d52:	1e0b      	subs	r3, r1, #0
 8009d54:	d10a      	bne.n	8009d6c <makeTime+0x70>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	4a49      	ldr	r2, [pc, #292]	@ (8009e80 <makeTime+0x184>)
 8009d5a:	4694      	mov	ip, r2
 8009d5c:	4463      	add	r3, ip
 8009d5e:	22c8      	movs	r2, #200	@ 0xc8
 8009d60:	0051      	lsls	r1, r2, #1
 8009d62:	0018      	movs	r0, r3
 8009d64:	f7f6 fb8e 	bl	8000484 <__aeabi_idivmod>
 8009d68:	1e0b      	subs	r3, r1, #0
 8009d6a:	d104      	bne.n	8009d76 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	4a45      	ldr	r2, [pc, #276]	@ (8009e84 <makeTime+0x188>)
 8009d70:	4694      	mov	ip, r2
 8009d72:	4463      	add	r3, ip
 8009d74:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	60fb      	str	r3, [r7, #12]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	78db      	ldrb	r3, [r3, #3]
 8009d80:	001a      	movs	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4293      	cmp	r3, r2
 8009d86:	dbd0      	blt.n	8009d2a <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8009d88:	2301      	movs	r3, #1
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	e03c      	b.n	8009e08 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d125      	bne.n	8009de0 <makeTime+0xe4>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	78db      	ldrb	r3, [r3, #3]
 8009d98:	4a39      	ldr	r2, [pc, #228]	@ (8009e80 <makeTime+0x184>)
 8009d9a:	4694      	mov	ip, r2
 8009d9c:	4463      	add	r3, ip
 8009d9e:	001a      	movs	r2, r3
 8009da0:	2303      	movs	r3, #3
 8009da2:	4013      	ands	r3, r2
 8009da4:	d11c      	bne.n	8009de0 <makeTime+0xe4>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	78db      	ldrb	r3, [r3, #3]
 8009daa:	4a35      	ldr	r2, [pc, #212]	@ (8009e80 <makeTime+0x184>)
 8009dac:	4694      	mov	ip, r2
 8009dae:	4463      	add	r3, ip
 8009db0:	2164      	movs	r1, #100	@ 0x64
 8009db2:	0018      	movs	r0, r3
 8009db4:	f7f6 fb66 	bl	8000484 <__aeabi_idivmod>
 8009db8:	1e0b      	subs	r3, r1, #0
 8009dba:	d10b      	bne.n	8009dd4 <makeTime+0xd8>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	78db      	ldrb	r3, [r3, #3]
 8009dc0:	4a2f      	ldr	r2, [pc, #188]	@ (8009e80 <makeTime+0x184>)
 8009dc2:	4694      	mov	ip, r2
 8009dc4:	4463      	add	r3, ip
 8009dc6:	22c8      	movs	r2, #200	@ 0xc8
 8009dc8:	0051      	lsls	r1, r2, #1
 8009dca:	0018      	movs	r0, r3
 8009dcc:	f7f6 fb5a 	bl	8000484 <__aeabi_idivmod>
 8009dd0:	1e0b      	subs	r3, r1, #0
 8009dd2:	d105      	bne.n	8009de0 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8009e88 <makeTime+0x18c>)
 8009dd8:	4694      	mov	ip, r2
 8009dda:	4463      	add	r3, ip
 8009ddc:	60bb      	str	r3, [r7, #8]
 8009dde:	e010      	b.n	8009e02 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	3b01      	subs	r3, #1
 8009de4:	4a29      	ldr	r2, [pc, #164]	@ (8009e8c <makeTime+0x190>)
 8009de6:	5cd3      	ldrb	r3, [r2, r3]
 8009de8:	001a      	movs	r2, r3
 8009dea:	0013      	movs	r3, r2
 8009dec:	005b      	lsls	r3, r3, #1
 8009dee:	189b      	adds	r3, r3, r2
 8009df0:	011a      	lsls	r2, r3, #4
 8009df2:	1ad2      	subs	r2, r2, r3
 8009df4:	0113      	lsls	r3, r2, #4
 8009df6:	1a9b      	subs	r3, r3, r2
 8009df8:	01db      	lsls	r3, r3, #7
 8009dfa:	001a      	movs	r2, r3
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	189b      	adds	r3, r3, r2
 8009e00:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3301      	adds	r3, #1
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	785b      	ldrb	r3, [r3, #1]
 8009e0c:	001a      	movs	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	4293      	cmp	r3, r2
 8009e12:	dbbc      	blt.n	8009d8e <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	789b      	ldrb	r3, [r3, #2]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	001a      	movs	r2, r3
 8009e1c:	0013      	movs	r3, r2
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	189b      	adds	r3, r3, r2
 8009e22:	011a      	lsls	r2, r3, #4
 8009e24:	1ad2      	subs	r2, r2, r3
 8009e26:	0113      	lsls	r3, r2, #4
 8009e28:	1a9b      	subs	r3, r3, r2
 8009e2a:	01db      	lsls	r3, r3, #7
 8009e2c:	001a      	movs	r2, r3
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	189b      	adds	r3, r3, r2
 8009e32:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	001a      	movs	r2, r3
 8009e3a:	0013      	movs	r3, r2
 8009e3c:	011b      	lsls	r3, r3, #4
 8009e3e:	1a9b      	subs	r3, r3, r2
 8009e40:	011a      	lsls	r2, r3, #4
 8009e42:	1ad2      	subs	r2, r2, r3
 8009e44:	0113      	lsls	r3, r2, #4
 8009e46:	001a      	movs	r2, r3
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	189b      	adds	r3, r3, r2
 8009e4c:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	785b      	ldrb	r3, [r3, #1]
 8009e52:	001a      	movs	r2, r3
 8009e54:	0013      	movs	r3, r2
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	1a9b      	subs	r3, r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	001a      	movs	r2, r3
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	189b      	adds	r3, r3, r2
 8009e62:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	789b      	ldrb	r3, [r3, #2]
 8009e68:	001a      	movs	r2, r3
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	189b      	adds	r3, r3, r2
 8009e6e:	60bb      	str	r3, [r7, #8]
  return seconds;
 8009e70:	68bb      	ldr	r3, [r7, #8]
}
 8009e72:	0018      	movs	r0, r3
 8009e74:	46bd      	mov	sp, r7
 8009e76:	b004      	add	sp, #16
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	46c0      	nop			@ (mov r8, r8)
 8009e7c:	fffff84f 	.word	0xfffff84f
 8009e80:	000007b2 	.word	0x000007b2
 8009e84:	00015180 	.word	0x00015180
 8009e88:	00263b80 	.word	0x00263b80
 8009e8c:	0802dbf8 	.word	0x0802dbf8

08009e90 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8009e90:	b590      	push	{r4, r7, lr}
 8009e92:	b089      	sub	sp, #36	@ 0x24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	213c      	movs	r1, #60	@ 0x3c
 8009ea4:	0018      	movs	r0, r3
 8009ea6:	f7f6 fa03 	bl	80002b0 <__aeabi_uidivmod>
 8009eaa:	000b      	movs	r3, r1
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	213c      	movs	r1, #60	@ 0x3c
 8009eb6:	0018      	movs	r0, r3
 8009eb8:	f7f6 f974 	bl	80001a4 <__udivsi3>
 8009ebc:	0003      	movs	r3, r0
 8009ebe:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	213c      	movs	r1, #60	@ 0x3c
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	f7f6 f9f3 	bl	80002b0 <__aeabi_uidivmod>
 8009eca:	000b      	movs	r3, r1
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	213c      	movs	r1, #60	@ 0x3c
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f7f6 f964 	bl	80001a4 <__udivsi3>
 8009edc:	0003      	movs	r3, r0
 8009ede:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	2118      	movs	r1, #24
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	f7f6 f9e3 	bl	80002b0 <__aeabi_uidivmod>
 8009eea:	000b      	movs	r3, r1
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	2118      	movs	r1, #24
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	f7f6 f954 	bl	80001a4 <__udivsi3>
 8009efc:	0003      	movs	r3, r0
 8009efe:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	3b01      	subs	r3, #1
 8009f04:	2107      	movs	r1, #7
 8009f06:	0018      	movs	r0, r3
 8009f08:	f7f6 f9d2 	bl	80002b0 <__aeabi_uidivmod>
 8009f0c:	000b      	movs	r3, r1
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	3301      	adds	r3, #1
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	701a      	strb	r2, [r3, #0]
  year = 0;
 8009f18:	231f      	movs	r3, #31
 8009f1a:	18fb      	adds	r3, r7, r3
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	701a      	strb	r2, [r3, #0]
  days = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8009f24:	e005      	b.n	8009f32 <breakPosixTime+0xa2>
    year++;
 8009f26:	211f      	movs	r1, #31
 8009f28:	187b      	adds	r3, r7, r1
 8009f2a:	781a      	ldrb	r2, [r3, #0]
 8009f2c:	187b      	adds	r3, r7, r1
 8009f2e:	3201      	adds	r2, #1
 8009f30:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8009f32:	241f      	movs	r4, #31
 8009f34:	193b      	adds	r3, r7, r4
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	4a64      	ldr	r2, [pc, #400]	@ (800a0cc <breakPosixTime+0x23c>)
 8009f3a:	4694      	mov	ip, r2
 8009f3c:	4463      	add	r3, ip
 8009f3e:	001a      	movs	r2, r3
 8009f40:	2303      	movs	r3, #3
 8009f42:	4013      	ands	r3, r2
 8009f44:	d119      	bne.n	8009f7a <breakPosixTime+0xea>
 8009f46:	193b      	adds	r3, r7, r4
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	4a60      	ldr	r2, [pc, #384]	@ (800a0cc <breakPosixTime+0x23c>)
 8009f4c:	4694      	mov	ip, r2
 8009f4e:	4463      	add	r3, ip
 8009f50:	2164      	movs	r1, #100	@ 0x64
 8009f52:	0018      	movs	r0, r3
 8009f54:	f7f6 fa96 	bl	8000484 <__aeabi_idivmod>
 8009f58:	1e0b      	subs	r3, r1, #0
 8009f5a:	d10b      	bne.n	8009f74 <breakPosixTime+0xe4>
 8009f5c:	193b      	adds	r3, r7, r4
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	4a5a      	ldr	r2, [pc, #360]	@ (800a0cc <breakPosixTime+0x23c>)
 8009f62:	4694      	mov	ip, r2
 8009f64:	4463      	add	r3, ip
 8009f66:	22c8      	movs	r2, #200	@ 0xc8
 8009f68:	0051      	lsls	r1, r2, #1
 8009f6a:	0018      	movs	r0, r3
 8009f6c:	f7f6 fa8a 	bl	8000484 <__aeabi_idivmod>
 8009f70:	1e0b      	subs	r3, r1, #0
 8009f72:	d102      	bne.n	8009f7a <breakPosixTime+0xea>
 8009f74:	23b7      	movs	r3, #183	@ 0xb7
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	e001      	b.n	8009f7e <breakPosixTime+0xee>
 8009f7a:	236e      	movs	r3, #110	@ 0x6e
 8009f7c:	33ff      	adds	r3, #255	@ 0xff
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	18d3      	adds	r3, r2, r3
 8009f82:	617b      	str	r3, [r7, #20]
 8009f84:	697a      	ldr	r2, [r7, #20]
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d9cc      	bls.n	8009f26 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	241f      	movs	r4, #31
 8009f90:	193a      	adds	r2, r7, r4
 8009f92:	7812      	ldrb	r2, [r2, #0]
 8009f94:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8009f96:	193b      	adds	r3, r7, r4
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	4a4c      	ldr	r2, [pc, #304]	@ (800a0cc <breakPosixTime+0x23c>)
 8009f9c:	4694      	mov	ip, r2
 8009f9e:	4463      	add	r3, ip
 8009fa0:	001a      	movs	r2, r3
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	d119      	bne.n	8009fdc <breakPosixTime+0x14c>
 8009fa8:	193b      	adds	r3, r7, r4
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	4a47      	ldr	r2, [pc, #284]	@ (800a0cc <breakPosixTime+0x23c>)
 8009fae:	4694      	mov	ip, r2
 8009fb0:	4463      	add	r3, ip
 8009fb2:	2164      	movs	r1, #100	@ 0x64
 8009fb4:	0018      	movs	r0, r3
 8009fb6:	f7f6 fa65 	bl	8000484 <__aeabi_idivmod>
 8009fba:	1e0b      	subs	r3, r1, #0
 8009fbc:	d10b      	bne.n	8009fd6 <breakPosixTime+0x146>
 8009fbe:	193b      	adds	r3, r7, r4
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	4a42      	ldr	r2, [pc, #264]	@ (800a0cc <breakPosixTime+0x23c>)
 8009fc4:	4694      	mov	ip, r2
 8009fc6:	4463      	add	r3, ip
 8009fc8:	22c8      	movs	r2, #200	@ 0xc8
 8009fca:	0051      	lsls	r1, r2, #1
 8009fcc:	0018      	movs	r0, r3
 8009fce:	f7f6 fa59 	bl	8000484 <__aeabi_idivmod>
 8009fd2:	1e0b      	subs	r3, r1, #0
 8009fd4:	d102      	bne.n	8009fdc <breakPosixTime+0x14c>
 8009fd6:	23b7      	movs	r3, #183	@ 0xb7
 8009fd8:	005b      	lsls	r3, r3, #1
 8009fda:	e001      	b.n	8009fe0 <breakPosixTime+0x150>
 8009fdc:	236e      	movs	r3, #110	@ 0x6e
 8009fde:	33ff      	adds	r3, #255	@ 0xff
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8009fe6:	69ba      	ldr	r2, [r7, #24]
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	61bb      	str	r3, [r7, #24]

  days=0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	617b      	str	r3, [r7, #20]
  month=0;
 8009ff2:	211e      	movs	r1, #30
 8009ff4:	187b      	adds	r3, r7, r1
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8009ffa:	231d      	movs	r3, #29
 8009ffc:	18fb      	adds	r3, r7, r3
 8009ffe:	2200      	movs	r2, #0
 800a000:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800a002:	187b      	adds	r3, r7, r1
 800a004:	2200      	movs	r2, #0
 800a006:	701a      	strb	r2, [r3, #0]
 800a008:	e048      	b.n	800a09c <breakPosixTime+0x20c>
    if (month==1) { // february
 800a00a:	231e      	movs	r3, #30
 800a00c:	18fb      	adds	r3, r7, r3
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d12a      	bne.n	800a06a <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 800a014:	241f      	movs	r4, #31
 800a016:	193b      	adds	r3, r7, r4
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	4a2c      	ldr	r2, [pc, #176]	@ (800a0cc <breakPosixTime+0x23c>)
 800a01c:	4694      	mov	ip, r2
 800a01e:	4463      	add	r3, ip
 800a020:	001a      	movs	r2, r3
 800a022:	2303      	movs	r3, #3
 800a024:	4013      	ands	r3, r2
 800a026:	d11b      	bne.n	800a060 <breakPosixTime+0x1d0>
 800a028:	193b      	adds	r3, r7, r4
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	4a27      	ldr	r2, [pc, #156]	@ (800a0cc <breakPosixTime+0x23c>)
 800a02e:	4694      	mov	ip, r2
 800a030:	4463      	add	r3, ip
 800a032:	2164      	movs	r1, #100	@ 0x64
 800a034:	0018      	movs	r0, r3
 800a036:	f7f6 fa25 	bl	8000484 <__aeabi_idivmod>
 800a03a:	1e0b      	subs	r3, r1, #0
 800a03c:	d10b      	bne.n	800a056 <breakPosixTime+0x1c6>
 800a03e:	193b      	adds	r3, r7, r4
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	4a22      	ldr	r2, [pc, #136]	@ (800a0cc <breakPosixTime+0x23c>)
 800a044:	4694      	mov	ip, r2
 800a046:	4463      	add	r3, ip
 800a048:	22c8      	movs	r2, #200	@ 0xc8
 800a04a:	0051      	lsls	r1, r2, #1
 800a04c:	0018      	movs	r0, r3
 800a04e:	f7f6 fa19 	bl	8000484 <__aeabi_idivmod>
 800a052:	1e0b      	subs	r3, r1, #0
 800a054:	d104      	bne.n	800a060 <breakPosixTime+0x1d0>
        monthLength=29;
 800a056:	231d      	movs	r3, #29
 800a058:	18fb      	adds	r3, r7, r3
 800a05a:	221d      	movs	r2, #29
 800a05c:	701a      	strb	r2, [r3, #0]
 800a05e:	e00c      	b.n	800a07a <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800a060:	231d      	movs	r3, #29
 800a062:	18fb      	adds	r3, r7, r3
 800a064:	221c      	movs	r2, #28
 800a066:	701a      	strb	r2, [r3, #0]
 800a068:	e007      	b.n	800a07a <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800a06a:	231e      	movs	r3, #30
 800a06c:	18fb      	adds	r3, r7, r3
 800a06e:	781a      	ldrb	r2, [r3, #0]
 800a070:	231d      	movs	r3, #29
 800a072:	18fb      	adds	r3, r7, r3
 800a074:	4916      	ldr	r1, [pc, #88]	@ (800a0d0 <breakPosixTime+0x240>)
 800a076:	5c8a      	ldrb	r2, [r1, r2]
 800a078:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800a07a:	211d      	movs	r1, #29
 800a07c:	187b      	adds	r3, r7, r1
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	69ba      	ldr	r2, [r7, #24]
 800a082:	429a      	cmp	r2, r3
 800a084:	d310      	bcc.n	800a0a8 <breakPosixTime+0x218>
      time -= monthLength;
 800a086:	187b      	adds	r3, r7, r1
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	69ba      	ldr	r2, [r7, #24]
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800a090:	211e      	movs	r1, #30
 800a092:	187b      	adds	r3, r7, r1
 800a094:	781a      	ldrb	r2, [r3, #0]
 800a096:	187b      	adds	r3, r7, r1
 800a098:	3201      	adds	r2, #1
 800a09a:	701a      	strb	r2, [r3, #0]
 800a09c:	231e      	movs	r3, #30
 800a09e:	18fb      	adds	r3, r7, r3
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	2b0b      	cmp	r3, #11
 800a0a4:	d9b1      	bls.n	800a00a <breakPosixTime+0x17a>
 800a0a6:	e000      	b.n	800a0aa <breakPosixTime+0x21a>
    } else {
        break;
 800a0a8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800a0aa:	231e      	movs	r3, #30
 800a0ac:	18fb      	adds	r3, r7, r3
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	3301      	adds	r3, #1
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	709a      	strb	r2, [r3, #2]
}
 800a0c4:	46c0      	nop			@ (mov r8, r8)
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	b009      	add	sp, #36	@ 0x24
 800a0ca:	bd90      	pop	{r4, r7, pc}
 800a0cc:	000007b2 	.word	0x000007b2
 800a0d0:	0802dbf8 	.word	0x0802dbf8

0800a0d4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a0da:	003b      	movs	r3, r7
 800a0dc:	0018      	movs	r0, r3
 800a0de:	2308      	movs	r3, #8
 800a0e0:	001a      	movs	r2, r3
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	f01b fc26 	bl	8025934 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800a0e8:	4b30      	ldr	r3, [pc, #192]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a0ea:	4a31      	ldr	r2, [pc, #196]	@ (800a1b0 <MX_ADC_Init+0xdc>)
 800a0ec:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800a0ee:	4b2f      	ldr	r3, [pc, #188]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800a0f4:	4b2d      	ldr	r3, [pc, #180]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a0f6:	22c0      	movs	r2, #192	@ 0xc0
 800a0f8:	0612      	lsls	r2, r2, #24
 800a0fa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800a0fc:	4b2b      	ldr	r3, [pc, #172]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800a102:	4b2a      	ldr	r3, [pc, #168]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a104:	2200      	movs	r2, #0
 800a106:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800a108:	4b28      	ldr	r3, [pc, #160]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a10a:	2201      	movs	r2, #1
 800a10c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a10e:	4b27      	ldr	r3, [pc, #156]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a110:	2200      	movs	r2, #0
 800a112:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800a114:	4b25      	ldr	r3, [pc, #148]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a116:	2220      	movs	r2, #32
 800a118:	2100      	movs	r1, #0
 800a11a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800a11c:	4b23      	ldr	r3, [pc, #140]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a11e:	2221      	movs	r2, #33	@ 0x21
 800a120:	2101      	movs	r1, #1
 800a122:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a124:	4b21      	ldr	r3, [pc, #132]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a126:	2200      	movs	r2, #0
 800a128:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a12a:	4b20      	ldr	r3, [pc, #128]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a12c:	22c2      	movs	r2, #194	@ 0xc2
 800a12e:	32ff      	adds	r2, #255	@ 0xff
 800a130:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800a132:	4b1e      	ldr	r3, [pc, #120]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a134:	222c      	movs	r2, #44	@ 0x2c
 800a136:	2100      	movs	r1, #0
 800a138:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a13a:	4b1c      	ldr	r3, [pc, #112]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a13c:	2204      	movs	r2, #4
 800a13e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a140:	4b1a      	ldr	r3, [pc, #104]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a142:	2200      	movs	r2, #0
 800a144:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800a146:	4b19      	ldr	r3, [pc, #100]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a148:	2200      	movs	r2, #0
 800a14a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800a14c:	4b17      	ldr	r3, [pc, #92]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a14e:	2200      	movs	r2, #0
 800a150:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800a152:	4b16      	ldr	r3, [pc, #88]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a154:	2200      	movs	r2, #0
 800a156:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800a158:	4b14      	ldr	r3, [pc, #80]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a15a:	0018      	movs	r0, r3
 800a15c:	f009 fe9e 	bl	8013e9c <HAL_ADC_Init>
 800a160:	1e03      	subs	r3, r0, #0
 800a162:	d001      	beq.n	800a168 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800a164:	f002 fc6a 	bl	800ca3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800a168:	003b      	movs	r3, r7
 800a16a:	4a12      	ldr	r2, [pc, #72]	@ (800a1b4 <MX_ADC_Init+0xe0>)
 800a16c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a16e:	003b      	movs	r3, r7
 800a170:	2280      	movs	r2, #128	@ 0x80
 800a172:	0152      	lsls	r2, r2, #5
 800a174:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800a176:	003a      	movs	r2, r7
 800a178:	4b0c      	ldr	r3, [pc, #48]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a17a:	0011      	movs	r1, r2
 800a17c:	0018      	movs	r0, r3
 800a17e:	f00a f8fd 	bl	801437c <HAL_ADC_ConfigChannel>
 800a182:	1e03      	subs	r3, r0, #0
 800a184:	d001      	beq.n	800a18a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800a186:	f002 fc59 	bl	800ca3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800a18a:	003b      	movs	r3, r7
 800a18c:	4a0a      	ldr	r2, [pc, #40]	@ (800a1b8 <MX_ADC_Init+0xe4>)
 800a18e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800a190:	003a      	movs	r2, r7
 800a192:	4b06      	ldr	r3, [pc, #24]	@ (800a1ac <MX_ADC_Init+0xd8>)
 800a194:	0011      	movs	r1, r2
 800a196:	0018      	movs	r0, r3
 800a198:	f00a f8f0 	bl	801437c <HAL_ADC_ConfigChannel>
 800a19c:	1e03      	subs	r3, r0, #0
 800a19e:	d001      	beq.n	800a1a4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800a1a0:	f002 fc4c 	bl	800ca3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800a1a4:	46c0      	nop			@ (mov r8, r8)
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	b002      	add	sp, #8
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	20000b88 	.word	0x20000b88
 800a1b0:	40012400 	.word	0x40012400
 800a1b4:	38004000 	.word	0x38004000
 800a1b8:	3c008000 	.word	0x3c008000

0800a1bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800a1bc:	b590      	push	{r4, r7, lr}
 800a1be:	b089      	sub	sp, #36	@ 0x24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1c4:	240c      	movs	r4, #12
 800a1c6:	193b      	adds	r3, r7, r4
 800a1c8:	0018      	movs	r0, r3
 800a1ca:	2314      	movs	r3, #20
 800a1cc:	001a      	movs	r2, r3
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	f01b fbb0 	bl	8025934 <memset>
  if(adcHandle->Instance==ADC1)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a14      	ldr	r2, [pc, #80]	@ (800a22c <HAL_ADC_MspInit+0x70>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d121      	bne.n	800a222 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a1de:	4b14      	ldr	r3, [pc, #80]	@ (800a230 <HAL_ADC_MspInit+0x74>)
 800a1e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1e2:	4b13      	ldr	r3, [pc, #76]	@ (800a230 <HAL_ADC_MspInit+0x74>)
 800a1e4:	2180      	movs	r1, #128	@ 0x80
 800a1e6:	0089      	lsls	r1, r1, #2
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1ec:	4b10      	ldr	r3, [pc, #64]	@ (800a230 <HAL_ADC_MspInit+0x74>)
 800a1ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a230 <HAL_ADC_MspInit+0x74>)
 800a1f2:	2104      	movs	r1, #4
 800a1f4:	430a      	orrs	r2, r1
 800a1f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a1f8:	4b0d      	ldr	r3, [pc, #52]	@ (800a230 <HAL_ADC_MspInit+0x74>)
 800a1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1fc:	2204      	movs	r2, #4
 800a1fe:	4013      	ands	r3, r2
 800a200:	60bb      	str	r3, [r7, #8]
 800a202:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800a204:	193b      	adds	r3, r7, r4
 800a206:	2230      	movs	r2, #48	@ 0x30
 800a208:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a20a:	193b      	adds	r3, r7, r4
 800a20c:	2203      	movs	r2, #3
 800a20e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a210:	193b      	adds	r3, r7, r4
 800a212:	2200      	movs	r2, #0
 800a214:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a216:	193b      	adds	r3, r7, r4
 800a218:	4a06      	ldr	r2, [pc, #24]	@ (800a234 <HAL_ADC_MspInit+0x78>)
 800a21a:	0019      	movs	r1, r3
 800a21c:	0010      	movs	r0, r2
 800a21e:	f00a fecb 	bl	8014fb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800a222:	46c0      	nop			@ (mov r8, r8)
 800a224:	46bd      	mov	sp, r7
 800a226:	b009      	add	sp, #36	@ 0x24
 800a228:	bd90      	pop	{r4, r7, pc}
 800a22a:	46c0      	nop			@ (mov r8, r8)
 800a22c:	40012400 	.word	0x40012400
 800a230:	40021000 	.word	0x40021000
 800a234:	50000800 	.word	0x50000800

0800a238 <ReadDirRegister>:
static uint8_t AHTerrors = 0;
AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a238:	b590      	push	{r4, r7, lr}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6039      	str	r1, [r7, #0]
 800a240:	0011      	movs	r1, r2
 800a242:	1dfb      	adds	r3, r7, #7
 800a244:	1c02      	adds	r2, r0, #0
 800a246:	701a      	strb	r2, [r3, #0]
 800a248:	1dbb      	adds	r3, r7, #6
 800a24a:	1c0a      	adds	r2, r1, #0
 800a24c:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800a24e:	4b0a      	ldr	r3, [pc, #40]	@ (800a278 <ReadDirRegister+0x40>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00a      	beq.n	800a26c <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800a256:	4b08      	ldr	r3, [pc, #32]	@ (800a278 <ReadDirRegister+0x40>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	1dba      	adds	r2, r7, #6
 800a25c:	7814      	ldrb	r4, [r2, #0]
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	1dfa      	adds	r2, r7, #7
 800a262:	7810      	ldrb	r0, [r2, #0]
 800a264:	0022      	movs	r2, r4
 800a266:	4798      	blx	r3
 800a268:	0003      	movs	r3, r0
 800a26a:	e000      	b.n	800a26e <ReadDirRegister+0x36>
  }
  return false;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	0018      	movs	r0, r3
 800a270:	46bd      	mov	sp, r7
 800a272:	b003      	add	sp, #12
 800a274:	bd90      	pop	{r4, r7, pc}
 800a276:	46c0      	nop			@ (mov r8, r8)
 800a278:	20000bf0 	.word	0x20000bf0

0800a27c <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a27c:	b590      	push	{r4, r7, lr}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6039      	str	r1, [r7, #0]
 800a284:	0011      	movs	r1, r2
 800a286:	1dfb      	adds	r3, r7, #7
 800a288:	1c02      	adds	r2, r0, #0
 800a28a:	701a      	strb	r2, [r3, #0]
 800a28c:	1dbb      	adds	r3, r7, #6
 800a28e:	1c0a      	adds	r2, r1, #0
 800a290:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800a292:	4b0a      	ldr	r3, [pc, #40]	@ (800a2bc <ReadRegister+0x40>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00a      	beq.n	800a2b0 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800a29a:	4b08      	ldr	r3, [pc, #32]	@ (800a2bc <ReadRegister+0x40>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	1dba      	adds	r2, r7, #6
 800a2a0:	7814      	ldrb	r4, [r2, #0]
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	1dfa      	adds	r2, r7, #7
 800a2a6:	7810      	ldrb	r0, [r2, #0]
 800a2a8:	0022      	movs	r2, r4
 800a2aa:	4798      	blx	r3
 800a2ac:	0003      	movs	r3, r0
 800a2ae:	e000      	b.n	800a2b2 <ReadRegister+0x36>
  }
  return false;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	0018      	movs	r0, r3
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	b003      	add	sp, #12
 800a2b8:	bd90      	pop	{r4, r7, pc}
 800a2ba:	46c0      	nop			@ (mov r8, r8)
 800a2bc:	20000be8 	.word	0x20000be8

0800a2c0 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a2c0:	b590      	push	{r4, r7, lr}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6039      	str	r1, [r7, #0]
 800a2c8:	0011      	movs	r1, r2
 800a2ca:	1dfb      	adds	r3, r7, #7
 800a2cc:	1c02      	adds	r2, r0, #0
 800a2ce:	701a      	strb	r2, [r3, #0]
 800a2d0:	1dbb      	adds	r3, r7, #6
 800a2d2:	1c0a      	adds	r2, r1, #0
 800a2d4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800a2d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a300 <WriteRegister+0x40>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00a      	beq.n	800a2f4 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800a2de:	4b08      	ldr	r3, [pc, #32]	@ (800a300 <WriteRegister+0x40>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	1dba      	adds	r2, r7, #6
 800a2e4:	7814      	ldrb	r4, [r2, #0]
 800a2e6:	6839      	ldr	r1, [r7, #0]
 800a2e8:	1dfa      	adds	r2, r7, #7
 800a2ea:	7810      	ldrb	r0, [r2, #0]
 800a2ec:	0022      	movs	r2, r4
 800a2ee:	4798      	blx	r3
 800a2f0:	0003      	movs	r3, r0
 800a2f2:	e000      	b.n	800a2f6 <WriteRegister+0x36>
  }
  return false;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	b003      	add	sp, #12
 800a2fc:	bd90      	pop	{r4, r7, pc}
 800a2fe:	46c0      	nop			@ (mov r8, r8)
 800a300:	20000bec 	.word	0x20000bec

0800a304 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	000a      	movs	r2, r1
 800a30e:	1cfb      	adds	r3, r7, #3
 800a310:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800a312:	230f      	movs	r3, #15
 800a314:	18fb      	adds	r3, r7, r3
 800a316:	22ff      	movs	r2, #255	@ 0xff
 800a318:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800a31a:	230e      	movs	r3, #14
 800a31c:	18fb      	adds	r3, r7, r3
 800a31e:	2200      	movs	r2, #0
 800a320:	701a      	strb	r2, [r3, #0]
 800a322:	e038      	b.n	800a396 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800a324:	230e      	movs	r3, #14
 800a326:	18fb      	adds	r3, r7, r3
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	18d3      	adds	r3, r2, r3
 800a32e:	7819      	ldrb	r1, [r3, #0]
 800a330:	220f      	movs	r2, #15
 800a332:	18bb      	adds	r3, r7, r2
 800a334:	18ba      	adds	r2, r7, r2
 800a336:	7812      	ldrb	r2, [r2, #0]
 800a338:	404a      	eors	r2, r1
 800a33a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800a33c:	230d      	movs	r3, #13
 800a33e:	18fb      	adds	r3, r7, r3
 800a340:	2200      	movs	r2, #0
 800a342:	701a      	strb	r2, [r3, #0]
 800a344:	e01c      	b.n	800a380 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800a346:	210f      	movs	r1, #15
 800a348:	187b      	adds	r3, r7, r1
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	b25b      	sxtb	r3, r3
 800a34e:	2b00      	cmp	r3, #0
 800a350:	da0a      	bge.n	800a368 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800a352:	187b      	adds	r3, r7, r1
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	b25b      	sxtb	r3, r3
 800a358:	18db      	adds	r3, r3, r3
 800a35a:	b25b      	sxtb	r3, r3
 800a35c:	2231      	movs	r2, #49	@ 0x31
 800a35e:	4053      	eors	r3, r2
 800a360:	b25a      	sxtb	r2, r3
 800a362:	187b      	adds	r3, r7, r1
 800a364:	701a      	strb	r2, [r3, #0]
 800a366:	e005      	b.n	800a374 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800a368:	230f      	movs	r3, #15
 800a36a:	18fa      	adds	r2, r7, r3
 800a36c:	18fb      	adds	r3, r7, r3
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	18db      	adds	r3, r3, r3
 800a372:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800a374:	210d      	movs	r1, #13
 800a376:	187b      	adds	r3, r7, r1
 800a378:	781a      	ldrb	r2, [r3, #0]
 800a37a:	187b      	adds	r3, r7, r1
 800a37c:	3201      	adds	r2, #1
 800a37e:	701a      	strb	r2, [r3, #0]
 800a380:	230d      	movs	r3, #13
 800a382:	18fb      	adds	r3, r7, r3
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	2b07      	cmp	r3, #7
 800a388:	d9dd      	bls.n	800a346 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800a38a:	210e      	movs	r1, #14
 800a38c:	187b      	adds	r3, r7, r1
 800a38e:	781a      	ldrb	r2, [r3, #0]
 800a390:	187b      	adds	r3, r7, r1
 800a392:	3201      	adds	r2, #1
 800a394:	701a      	strb	r2, [r3, #0]
 800a396:	230e      	movs	r3, #14
 800a398:	18fa      	adds	r2, r7, r3
 800a39a:	1cfb      	adds	r3, r7, #3
 800a39c:	7812      	ldrb	r2, [r2, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d3bf      	bcc.n	800a324 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800a3a4:	230f      	movs	r3, #15
 800a3a6:	18fb      	adds	r3, r7, r3
 800a3a8:	781b      	ldrb	r3, [r3, #0]
}
 800a3aa:	0018      	movs	r0, r3
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	b004      	add	sp, #16
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800a3bc:	f009 fd06 	bl	8013dcc <HAL_GetTick>
 800a3c0:	0002      	movs	r2, r0
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	18d2      	adds	r2, r2, r3
 800a3c6:	4b03      	ldr	r3, [pc, #12]	@ (800a3d4 <setAHT20TimeStamp+0x20>)
 800a3c8:	601a      	str	r2, [r3, #0]
}
 800a3ca:	46c0      	nop			@ (mov r8, r8)
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	b002      	add	sp, #8
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	46c0      	nop			@ (mov r8, r8)
 800a3d4:	20000be4 	.word	0x20000be4

0800a3d8 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800a3e4:	4b06      	ldr	r3, [pc, #24]	@ (800a400 <AHT_Init+0x28>)
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800a3ea:	4b06      	ldr	r3, [pc, #24]	@ (800a404 <AHT_Init+0x2c>)
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800a3f0:	4b05      	ldr	r3, [pc, #20]	@ (800a408 <AHT_Init+0x30>)
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	601a      	str	r2, [r3, #0]
}
 800a3f6:	46c0      	nop			@ (mov r8, r8)
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	b004      	add	sp, #16
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	46c0      	nop			@ (mov r8, r8)
 800a400:	20000bf0 	.word	0x20000bf0
 800a404:	20000be8 	.word	0x20000be8
 800a408:	20000bec 	.word	0x20000bec

0800a40c <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af02      	add	r7, sp, #8
 800a412:	0002      	movs	r2, r0
 800a414:	1dfb      	adds	r3, r7, #7
 800a416:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800a418:	4b18      	ldr	r3, [pc, #96]	@ (800a47c <AHT20_register_reset+0x70>)
 800a41a:	1dfa      	adds	r2, r7, #7
 800a41c:	7812      	ldrb	r2, [r2, #0]
 800a41e:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800a420:	4b16      	ldr	r3, [pc, #88]	@ (800a47c <AHT20_register_reset+0x70>)
 800a422:	2203      	movs	r2, #3
 800a424:	0019      	movs	r1, r3
 800a426:	2038      	movs	r0, #56	@ 0x38
 800a428:	f7ff ff4a 	bl	800a2c0 <WriteRegister>
  HAL_Delay(15);
 800a42c:	200f      	movs	r0, #15
 800a42e:	f009 fcd7 	bl	8013de0 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800a432:	4b13      	ldr	r3, [pc, #76]	@ (800a480 <AHT20_register_reset+0x74>)
 800a434:	2203      	movs	r2, #3
 800a436:	0019      	movs	r1, r3
 800a438:	2038      	movs	r0, #56	@ 0x38
 800a43a:	f7ff ff1f 	bl	800a27c <ReadRegister>
  HAL_Delay(15);
 800a43e:	200f      	movs	r0, #15
 800a440:	f009 fcce 	bl	8013de0 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800a444:	4b0e      	ldr	r3, [pc, #56]	@ (800a480 <AHT20_register_reset+0x74>)
 800a446:	22b0      	movs	r2, #176	@ 0xb0
 800a448:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800a44a:	4b0d      	ldr	r3, [pc, #52]	@ (800a480 <AHT20_register_reset+0x74>)
 800a44c:	789b      	ldrb	r3, [r3, #2]
 800a44e:	0018      	movs	r0, r3
 800a450:	4b0b      	ldr	r3, [pc, #44]	@ (800a480 <AHT20_register_reset+0x74>)
 800a452:	78db      	ldrb	r3, [r3, #3]
 800a454:	4a0b      	ldr	r2, [pc, #44]	@ (800a484 <AHT20_register_reset+0x78>)
 800a456:	490c      	ldr	r1, [pc, #48]	@ (800a488 <AHT20_register_reset+0x7c>)
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	0003      	movs	r3, r0
 800a45c:	2003      	movs	r0, #3
 800a45e:	f008 ff75 	bl	801334c <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800a462:	4b07      	ldr	r3, [pc, #28]	@ (800a480 <AHT20_register_reset+0x74>)
 800a464:	2203      	movs	r2, #3
 800a466:	0019      	movs	r1, r3
 800a468:	2038      	movs	r0, #56	@ 0x38
 800a46a:	f7ff ff29 	bl	800a2c0 <WriteRegister>
  HAL_Delay(15);
 800a46e:	200f      	movs	r0, #15
 800a470:	f009 fcb6 	bl	8013de0 <HAL_Delay>
}
 800a474:	46c0      	nop			@ (mov r8, r8)
 800a476:	46bd      	mov	sp, r7
 800a478:	b002      	add	sp, #8
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	20000090 	.word	0x20000090
 800a480:	20000bf4 	.word	0x20000bf4
 800a484:	0802ba6c 	.word	0x0802ba6c
 800a488:	0802babc 	.word	0x0802babc

0800a48c <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800a490:	201b      	movs	r0, #27
 800a492:	f7ff ffbb 	bl	800a40c <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800a496:	201c      	movs	r0, #28
 800a498:	f7ff ffb8 	bl	800a40c <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800a49c:	201e      	movs	r0, #30
 800a49e:	f7ff ffb5 	bl	800a40c <AHT20_register_reset>
}
 800a4a2:	46c0      	nop			@ (mov r8, r8)
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800a4ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e0 <AHT20_read_status+0x38>)
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	0019      	movs	r1, r3
 800a4b2:	2038      	movs	r0, #56	@ 0x38
 800a4b4:	f7ff ff04 	bl	800a2c0 <WriteRegister>
  HAL_Delay(10);
 800a4b8:	200a      	movs	r0, #10
 800a4ba:	f009 fc91 	bl	8013de0 <HAL_Delay>
  airtemphumraw[0] = 0;
 800a4be:	4b09      	ldr	r3, [pc, #36]	@ (800a4e4 <AHT20_read_status+0x3c>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800a4c4:	4b07      	ldr	r3, [pc, #28]	@ (800a4e4 <AHT20_read_status+0x3c>)
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	0019      	movs	r1, r3
 800a4ca:	2038      	movs	r0, #56	@ 0x38
 800a4cc:	f7ff fed6 	bl	800a27c <ReadRegister>
  HAL_Delay(10);
 800a4d0:	200a      	movs	r0, #10
 800a4d2:	f009 fc85 	bl	8013de0 <HAL_Delay>
  return airtemphumraw[0];
 800a4d6:	4b03      	ldr	r3, [pc, #12]	@ (800a4e4 <AHT20_read_status+0x3c>)
 800a4d8:	781b      	ldrb	r3, [r3, #0]
}
 800a4da:	0018      	movs	r0, r3
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	2000008c 	.word	0x2000008c
 800a4e4:	20000bf4 	.word	0x20000bf4

0800a4e8 <AHT20_init>:

bool AHT20_init(void) {
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800a4ee:	f009 fc6d 	bl	8013dcc <HAL_GetTick>
 800a4f2:	0003      	movs	r3, r0
 800a4f4:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b77      	cmp	r3, #119	@ 0x77
 800a4fa:	d805      	bhi.n	800a508 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2278      	movs	r2, #120	@ 0x78
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	0018      	movs	r0, r3
 800a504:	f009 fc6c 	bl	8013de0 <HAL_Delay>
  }
  AHT20_read_status();
 800a508:	f7ff ffce 	bl	800a4a8 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800a50c:	4b0e      	ldr	r3, [pc, #56]	@ (800a548 <AHT20_init+0x60>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	4a0e      	ldr	r2, [pc, #56]	@ (800a54c <AHT20_init+0x64>)
 800a512:	490f      	ldr	r1, [pc, #60]	@ (800a550 <AHT20_init+0x68>)
 800a514:	2003      	movs	r0, #3
 800a516:	f008 ff19 	bl	801334c <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800a51a:	4b0b      	ldr	r3, [pc, #44]	@ (800a548 <AHT20_init+0x60>)
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	001a      	movs	r2, r3
 800a520:	2318      	movs	r3, #24
 800a522:	4013      	ands	r3, r2
 800a524:	2b18      	cmp	r3, #24
 800a526:	d00a      	beq.n	800a53e <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800a528:	4b0a      	ldr	r3, [pc, #40]	@ (800a554 <AHT20_init+0x6c>)
 800a52a:	2203      	movs	r2, #3
 800a52c:	0019      	movs	r1, r3
 800a52e:	2038      	movs	r0, #56	@ 0x38
 800a530:	f7ff fec6 	bl	800a2c0 <WriteRegister>
    HAL_Delay(10);
 800a534:	200a      	movs	r0, #10
 800a536:	f009 fc53 	bl	8013de0 <HAL_Delay>
    AHT20_Start_Init();
 800a53a:	f7ff ffa7 	bl	800a48c <AHT20_Start_Init>
  }
  return true;
 800a53e:	2301      	movs	r3, #1
}
 800a540:	0018      	movs	r0, r3
 800a542:	46bd      	mov	sp, r7
 800a544:	b002      	add	sp, #8
 800a546:	bd80      	pop	{r7, pc}
 800a548:	20000bf4 	.word	0x20000bf4
 800a54c:	0802bac0 	.word	0x0802bac0
 800a550:	0802babc 	.word	0x0802babc
 800a554:	20000084 	.word	0x20000084

0800a558 <AHT20_calibrate>:


bool AHT20_calibrate() {
 800a558:	b590      	push	{r4, r7, lr}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800a55e:	1dfc      	adds	r4, r7, #7
 800a560:	4b10      	ldr	r3, [pc, #64]	@ (800a5a4 <AHT20_calibrate+0x4c>)
 800a562:	2201      	movs	r2, #1
 800a564:	0019      	movs	r1, r3
 800a566:	2038      	movs	r0, #56	@ 0x38
 800a568:	f7ff feaa 	bl	800a2c0 <WriteRegister>
 800a56c:	0003      	movs	r3, r0
 800a56e:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800a570:	1dfb      	adds	r3, r7, #7
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	2201      	movs	r2, #1
 800a576:	4053      	eors	r3, r2
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d005      	beq.n	800a58a <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800a57e:	4a0a      	ldr	r2, [pc, #40]	@ (800a5a8 <AHT20_calibrate+0x50>)
 800a580:	4b0a      	ldr	r3, [pc, #40]	@ (800a5ac <AHT20_calibrate+0x54>)
 800a582:	0019      	movs	r1, r3
 800a584:	2001      	movs	r0, #1
 800a586:	f008 fee1 	bl	801334c <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800a58a:	f009 fc1f 	bl	8013dcc <HAL_GetTick>
 800a58e:	0003      	movs	r3, r0
 800a590:	3332      	adds	r3, #50	@ 0x32
 800a592:	001a      	movs	r2, r3
 800a594:	4b06      	ldr	r3, [pc, #24]	@ (800a5b0 <AHT20_calibrate+0x58>)
 800a596:	601a      	str	r2, [r3, #0]
  return response;
 800a598:	1dfb      	adds	r3, r7, #7
 800a59a:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800a59c:	0018      	movs	r0, r3
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	b003      	add	sp, #12
 800a5a2:	bd90      	pop	{r4, r7, pc}
 800a5a4:	2000008c 	.word	0x2000008c
 800a5a8:	0802bae8 	.word	0x0802bae8
 800a5ac:	0802bb20 	.word	0x0802bb20
 800a5b0:	20000be4 	.word	0x20000be4

0800a5b4 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800a5b8:	4a0a      	ldr	r2, [pc, #40]	@ (800a5e4 <AHT20_DeviceConnected+0x30>)
 800a5ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e8 <AHT20_DeviceConnected+0x34>)
 800a5bc:	0019      	movs	r1, r3
 800a5be:	2003      	movs	r0, #3
 800a5c0:	f008 fec4 	bl	801334c <CreateLine>
   AHT20_init();
 800a5c4:	f7ff ff90 	bl	800a4e8 <AHT20_init>
   HAL_Delay(10);
 800a5c8:	200a      	movs	r0, #10
 800a5ca:	f009 fc09 	bl	8013de0 <HAL_Delay>
   AHT20_calibrate();
 800a5ce:	f7ff ffc3 	bl	800a558 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800a5d2:	f7ff ff69 	bl	800a4a8 <AHT20_read_status>
 800a5d6:	0003      	movs	r3, r0
 800a5d8:	1e5a      	subs	r2, r3, #1
 800a5da:	4193      	sbcs	r3, r2
 800a5dc:	b2db      	uxtb	r3, r3
 }
 800a5de:	0018      	movs	r0, r3
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	0802bb24 	.word	0x0802bb24
 800a5e8:	0802babc 	.word	0x0802babc

0800a5ec <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800a5ec:	b590      	push	{r4, r7, lr}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800a5f2:	1dfc      	adds	r4, r7, #7
 800a5f4:	4b10      	ldr	r3, [pc, #64]	@ (800a638 <AHT20_StartMeasurement+0x4c>)
 800a5f6:	2203      	movs	r2, #3
 800a5f8:	0019      	movs	r1, r3
 800a5fa:	2038      	movs	r0, #56	@ 0x38
 800a5fc:	f7ff fe60 	bl	800a2c0 <WriteRegister>
 800a600:	0003      	movs	r3, r0
 800a602:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800a604:	1dfb      	adds	r3, r7, #7
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	2201      	movs	r2, #1
 800a60a:	4053      	eors	r3, r2
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d005      	beq.n	800a61e <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800a612:	4a0a      	ldr	r2, [pc, #40]	@ (800a63c <AHT20_StartMeasurement+0x50>)
 800a614:	4b0a      	ldr	r3, [pc, #40]	@ (800a640 <AHT20_StartMeasurement+0x54>)
 800a616:	0019      	movs	r1, r3
 800a618:	2001      	movs	r0, #1
 800a61a:	f008 fe97 	bl	801334c <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800a61e:	f009 fbd5 	bl	8013dcc <HAL_GetTick>
 800a622:	0003      	movs	r3, r0
 800a624:	33fa      	adds	r3, #250	@ 0xfa
 800a626:	001a      	movs	r2, r3
 800a628:	4b06      	ldr	r3, [pc, #24]	@ (800a644 <AHT20_StartMeasurement+0x58>)
 800a62a:	601a      	str	r2, [r3, #0]
  return response;
 800a62c:	1dfb      	adds	r3, r7, #7
 800a62e:	781b      	ldrb	r3, [r3, #0]
}
 800a630:	0018      	movs	r0, r3
 800a632:	46bd      	mov	sp, r7
 800a634:	b003      	add	sp, #12
 800a636:	bd90      	pop	{r4, r7, pc}
 800a638:	20000088 	.word	0x20000088
 800a63c:	0802bb3c 	.word	0x0802bb3c
 800a640:	0802bb20 	.word	0x0802bb20
 800a644:	20000be4 	.word	0x20000be4

0800a648 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800a648:	b590      	push	{r4, r7, lr}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800a64e:	f009 fbbd 	bl	8013dcc <HAL_GetTick>
 800a652:	0003      	movs	r3, r0
 800a654:	22fa      	movs	r2, #250	@ 0xfa
 800a656:	0092      	lsls	r2, r2, #2
 800a658:	189a      	adds	r2, r3, r2
 800a65a:	4b2c      	ldr	r3, [pc, #176]	@ (800a70c <AHT20_GetMeasurementValues+0xc4>)
 800a65c:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a65e:	e01f      	b.n	800a6a0 <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 800a660:	4a2b      	ldr	r2, [pc, #172]	@ (800a710 <AHT20_GetMeasurementValues+0xc8>)
 800a662:	4b2c      	ldr	r3, [pc, #176]	@ (800a714 <AHT20_GetMeasurementValues+0xcc>)
 800a664:	0019      	movs	r1, r3
 800a666:	2002      	movs	r0, #2
 800a668:	f008 fe70 	bl	801334c <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 800a66c:	4b27      	ldr	r3, [pc, #156]	@ (800a70c <AHT20_GetMeasurementValues+0xc4>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	0018      	movs	r0, r3
 800a672:	f008 fe15 	bl	80132a0 <TimestampIsReached>
 800a676:	1e03      	subs	r3, r0, #0
 800a678:	d00f      	beq.n	800a69a <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 800a67a:	4a27      	ldr	r2, [pc, #156]	@ (800a718 <AHT20_GetMeasurementValues+0xd0>)
 800a67c:	4b27      	ldr	r3, [pc, #156]	@ (800a71c <AHT20_GetMeasurementValues+0xd4>)
 800a67e:	0019      	movs	r1, r3
 800a680:	2001      	movs	r0, #1
 800a682:	f008 fe63 	bl	801334c <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800a686:	f009 fba1 	bl	8013dcc <HAL_GetTick>
 800a68a:	0003      	movs	r3, r0
 800a68c:	22fa      	movs	r2, #250	@ 0xfa
 800a68e:	00d2      	lsls	r2, r2, #3
 800a690:	189a      	adds	r2, r3, r2
 800a692:	4b1e      	ldr	r3, [pc, #120]	@ (800a70c <AHT20_GetMeasurementValues+0xc4>)
 800a694:	601a      	str	r2, [r3, #0]
      return false;
 800a696:	2300      	movs	r3, #0
 800a698:	e034      	b.n	800a704 <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 800a69a:	200a      	movs	r0, #10
 800a69c:	f009 fba0 	bl	8013de0 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a6a0:	f7ff ff02 	bl	800a4a8 <AHT20_read_status>
 800a6a4:	0003      	movs	r3, r0
 800a6a6:	001a      	movs	r2, r3
 800a6a8:	2380      	movs	r3, #128	@ 0x80
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	2b80      	cmp	r3, #128	@ 0x80
 800a6ae:	d0d7      	beq.n	800a660 <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800a6b0:	200a      	movs	r0, #10
 800a6b2:	f009 fb95 	bl	8013de0 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800a6b6:	1dfb      	adds	r3, r7, #7
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	701a      	strb	r2, [r3, #0]
 800a6bc:	e009      	b.n	800a6d2 <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 800a6be:	1dfb      	adds	r3, r7, #7
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	4a17      	ldr	r2, [pc, #92]	@ (800a720 <AHT20_GetMeasurementValues+0xd8>)
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800a6c8:	1dfb      	adds	r3, r7, #7
 800a6ca:	781a      	ldrb	r2, [r3, #0]
 800a6cc:	1dfb      	adds	r3, r7, #7
 800a6ce:	3201      	adds	r2, #1
 800a6d0:	701a      	strb	r2, [r3, #0]
 800a6d2:	1dfb      	adds	r3, r7, #7
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	2b06      	cmp	r3, #6
 800a6d8:	d9f1      	bls.n	800a6be <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800a6da:	1dbc      	adds	r4, r7, #6
 800a6dc:	4b10      	ldr	r3, [pc, #64]	@ (800a720 <AHT20_GetMeasurementValues+0xd8>)
 800a6de:	2207      	movs	r2, #7
 800a6e0:	0019      	movs	r1, r3
 800a6e2:	2038      	movs	r0, #56	@ 0x38
 800a6e4:	f7ff fda8 	bl	800a238 <ReadDirRegister>
 800a6e8:	0003      	movs	r3, r0
 800a6ea:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800a6ec:	200a      	movs	r0, #10
 800a6ee:	f009 fb77 	bl	8013de0 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800a6f2:	f009 fb6b 	bl	8013dcc <HAL_GetTick>
 800a6f6:	0003      	movs	r3, r0
 800a6f8:	3364      	adds	r3, #100	@ 0x64
 800a6fa:	001a      	movs	r2, r3
 800a6fc:	4b03      	ldr	r3, [pc, #12]	@ (800a70c <AHT20_GetMeasurementValues+0xc4>)
 800a6fe:	601a      	str	r2, [r3, #0]
  return response;
 800a700:	1dbb      	adds	r3, r7, #6
 800a702:	781b      	ldrb	r3, [r3, #0]
}
 800a704:	0018      	movs	r0, r3
 800a706:	46bd      	mov	sp, r7
 800a708:	b003      	add	sp, #12
 800a70a:	bd90      	pop	{r4, r7, pc}
 800a70c:	20000be4 	.word	0x20000be4
 800a710:	0802bb68 	.word	0x0802bb68
 800a714:	0802bb90 	.word	0x0802bb90
 800a718:	0802bb94 	.word	0x0802bb94
 800a71c:	0802bb20 	.word	0x0802bb20
 800a720:	20000bf4 	.word	0x20000bf4

0800a724 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800a724:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a726:	46c6      	mov	lr, r8
 800a728:	b500      	push	{lr}
 800a72a:	b08a      	sub	sp, #40	@ 0x28
 800a72c:	af06      	add	r7, sp, #24
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800a732:	4b5a      	ldr	r3, [pc, #360]	@ (800a89c <AHT20_Calculate+0x178>)
 800a734:	799c      	ldrb	r4, [r3, #6]
 800a736:	4b59      	ldr	r3, [pc, #356]	@ (800a89c <AHT20_Calculate+0x178>)
 800a738:	2106      	movs	r1, #6
 800a73a:	0018      	movs	r0, r3
 800a73c:	f7ff fde2 	bl	800a304 <CalculateCRC>
 800a740:	0003      	movs	r3, r0
 800a742:	429c      	cmp	r4, r3
 800a744:	d044      	beq.n	800a7d0 <AHT20_Calculate+0xac>
 800a746:	4b55      	ldr	r3, [pc, #340]	@ (800a89c <AHT20_Calculate+0x178>)
 800a748:	799b      	ldrb	r3, [r3, #6]
 800a74a:	2bff      	cmp	r3, #255	@ 0xff
 800a74c:	d040      	beq.n	800a7d0 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800a74e:	4b53      	ldr	r3, [pc, #332]	@ (800a89c <AHT20_Calculate+0x178>)
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	4698      	mov	r8, r3
 800a754:	4b51      	ldr	r3, [pc, #324]	@ (800a89c <AHT20_Calculate+0x178>)
 800a756:	785b      	ldrb	r3, [r3, #1]
 800a758:	0018      	movs	r0, r3
 800a75a:	4b50      	ldr	r3, [pc, #320]	@ (800a89c <AHT20_Calculate+0x178>)
 800a75c:	789b      	ldrb	r3, [r3, #2]
 800a75e:	001c      	movs	r4, r3
 800a760:	4b4e      	ldr	r3, [pc, #312]	@ (800a89c <AHT20_Calculate+0x178>)
 800a762:	78db      	ldrb	r3, [r3, #3]
 800a764:	001d      	movs	r5, r3
 800a766:	4b4d      	ldr	r3, [pc, #308]	@ (800a89c <AHT20_Calculate+0x178>)
 800a768:	791b      	ldrb	r3, [r3, #4]
 800a76a:	001e      	movs	r6, r3
 800a76c:	4b4b      	ldr	r3, [pc, #300]	@ (800a89c <AHT20_Calculate+0x178>)
 800a76e:	795b      	ldrb	r3, [r3, #5]
 800a770:	469c      	mov	ip, r3
 800a772:	4b4a      	ldr	r3, [pc, #296]	@ (800a89c <AHT20_Calculate+0x178>)
 800a774:	799b      	ldrb	r3, [r3, #6]
 800a776:	4a4a      	ldr	r2, [pc, #296]	@ (800a8a0 <AHT20_Calculate+0x17c>)
 800a778:	494a      	ldr	r1, [pc, #296]	@ (800a8a4 <AHT20_Calculate+0x180>)
 800a77a:	9305      	str	r3, [sp, #20]
 800a77c:	4663      	mov	r3, ip
 800a77e:	9304      	str	r3, [sp, #16]
 800a780:	9603      	str	r6, [sp, #12]
 800a782:	9502      	str	r5, [sp, #8]
 800a784:	9401      	str	r4, [sp, #4]
 800a786:	9000      	str	r0, [sp, #0]
 800a788:	4643      	mov	r3, r8
 800a78a:	2003      	movs	r0, #3
 800a78c:	f008 fdde 	bl	801334c <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800a790:	4b42      	ldr	r3, [pc, #264]	@ (800a89c <AHT20_Calculate+0x178>)
 800a792:	799b      	ldrb	r3, [r3, #6]
 800a794:	001c      	movs	r4, r3
 800a796:	4b41      	ldr	r3, [pc, #260]	@ (800a89c <AHT20_Calculate+0x178>)
 800a798:	2106      	movs	r1, #6
 800a79a:	0018      	movs	r0, r3
 800a79c:	f7ff fdb2 	bl	800a304 <CalculateCRC>
 800a7a0:	0003      	movs	r3, r0
 800a7a2:	4a41      	ldr	r2, [pc, #260]	@ (800a8a8 <AHT20_Calculate+0x184>)
 800a7a4:	4941      	ldr	r1, [pc, #260]	@ (800a8ac <AHT20_Calculate+0x188>)
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	0023      	movs	r3, r4
 800a7aa:	2001      	movs	r0, #1
 800a7ac:	f008 fdce 	bl	801334c <CreateLine>
    *airtemp = 0.0;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800a7bc:	f009 fb06 	bl	8013dcc <HAL_GetTick>
 800a7c0:	0003      	movs	r3, r0
 800a7c2:	22fa      	movs	r2, #250	@ 0xfa
 800a7c4:	00d2      	lsls	r2, r2, #3
 800a7c6:	189a      	adds	r2, r3, r2
 800a7c8:	4b39      	ldr	r3, [pc, #228]	@ (800a8b0 <AHT20_Calculate+0x18c>)
 800a7ca:	601a      	str	r2, [r3, #0]
    return false;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	e05f      	b.n	800a890 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800a7d0:	4b38      	ldr	r3, [pc, #224]	@ (800a8b4 <AHT20_Calculate+0x190>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800a7d6:	4b31      	ldr	r3, [pc, #196]	@ (800a89c <AHT20_Calculate+0x178>)
 800a7d8:	78db      	ldrb	r3, [r3, #3]
 800a7da:	041a      	lsls	r2, r3, #16
 800a7dc:	23f0      	movs	r3, #240	@ 0xf0
 800a7de:	031b      	lsls	r3, r3, #12
 800a7e0:	401a      	ands	r2, r3
 800a7e2:	4b2e      	ldr	r3, [pc, #184]	@ (800a89c <AHT20_Calculate+0x178>)
 800a7e4:	791b      	ldrb	r3, [r3, #4]
 800a7e6:	021b      	lsls	r3, r3, #8
 800a7e8:	18d3      	adds	r3, r2, r3
 800a7ea:	4a2c      	ldr	r2, [pc, #176]	@ (800a89c <AHT20_Calculate+0x178>)
 800a7ec:	7952      	ldrb	r2, [r2, #5]
 800a7ee:	189b      	adds	r3, r3, r2
 800a7f0:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f7f7 f868 	bl	80018c8 <__aeabi_ui2f>
 800a7f8:	1c03      	adds	r3, r0, #0
 800a7fa:	2193      	movs	r1, #147	@ 0x93
 800a7fc:	05c9      	lsls	r1, r1, #23
 800a7fe:	1c18      	adds	r0, r3, #0
 800a800:	f7f6 fa50 	bl	8000ca4 <__aeabi_fdiv>
 800a804:	1c03      	adds	r3, r0, #0
 800a806:	492c      	ldr	r1, [pc, #176]	@ (800a8b8 <AHT20_Calculate+0x194>)
 800a808:	1c18      	adds	r0, r3, #0
 800a80a:	f7f6 fc19 	bl	8001040 <__aeabi_fmul>
 800a80e:	1c03      	adds	r3, r0, #0
 800a810:	492a      	ldr	r1, [pc, #168]	@ (800a8bc <AHT20_Calculate+0x198>)
 800a812:	1c18      	adds	r0, r3, #0
 800a814:	f7f6 fd6e 	bl	80012f4 <__aeabi_fsub>
 800a818:	1c03      	adds	r3, r0, #0
 800a81a:	1c1a      	adds	r2, r3, #0
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800a820:	4b1e      	ldr	r3, [pc, #120]	@ (800a89c <AHT20_Calculate+0x178>)
 800a822:	785b      	ldrb	r3, [r3, #1]
 800a824:	031a      	lsls	r2, r3, #12
 800a826:	4b1d      	ldr	r3, [pc, #116]	@ (800a89c <AHT20_Calculate+0x178>)
 800a828:	789b      	ldrb	r3, [r3, #2]
 800a82a:	011b      	lsls	r3, r3, #4
 800a82c:	18d3      	adds	r3, r2, r3
 800a82e:	4a1b      	ldr	r2, [pc, #108]	@ (800a89c <AHT20_Calculate+0x178>)
 800a830:	78d2      	ldrb	r2, [r2, #3]
 800a832:	0912      	lsrs	r2, r2, #4
 800a834:	b2d2      	uxtb	r2, r2
 800a836:	189b      	adds	r3, r3, r2
 800a838:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800a83a:	68b8      	ldr	r0, [r7, #8]
 800a83c:	f7f7 f844 	bl	80018c8 <__aeabi_ui2f>
 800a840:	1c03      	adds	r3, r0, #0
 800a842:	2193      	movs	r1, #147	@ 0x93
 800a844:	05c9      	lsls	r1, r1, #23
 800a846:	1c18      	adds	r0, r3, #0
 800a848:	f7f6 fa2c 	bl	8000ca4 <__aeabi_fdiv>
 800a84c:	1c03      	adds	r3, r0, #0
 800a84e:	491c      	ldr	r1, [pc, #112]	@ (800a8c0 <AHT20_Calculate+0x19c>)
 800a850:	1c18      	adds	r0, r3, #0
 800a852:	f7f6 fbf5 	bl	8001040 <__aeabi_fmul>
 800a856:	1c03      	adds	r3, r0, #0
 800a858:	1c1a      	adds	r2, r3, #0
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	1c18      	adds	r0, r3, #0
 800a864:	f7f9 f816 	bl	8003894 <__aeabi_f2d>
 800a868:	0004      	movs	r4, r0
 800a86a:	000d      	movs	r5, r1
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	1c18      	adds	r0, r3, #0
 800a872:	f7f9 f80f 	bl	8003894 <__aeabi_f2d>
 800a876:	0002      	movs	r2, r0
 800a878:	000b      	movs	r3, r1
 800a87a:	4812      	ldr	r0, [pc, #72]	@ (800a8c4 <AHT20_Calculate+0x1a0>)
 800a87c:	4909      	ldr	r1, [pc, #36]	@ (800a8a4 <AHT20_Calculate+0x180>)
 800a87e:	9202      	str	r2, [sp, #8]
 800a880:	9303      	str	r3, [sp, #12]
 800a882:	9400      	str	r4, [sp, #0]
 800a884:	9501      	str	r5, [sp, #4]
 800a886:	0002      	movs	r2, r0
 800a888:	2003      	movs	r0, #3
 800a88a:	f008 fd5f 	bl	801334c <CreateLine>
  return true;
 800a88e:	2301      	movs	r3, #1
}
 800a890:	0018      	movs	r0, r3
 800a892:	46bd      	mov	sp, r7
 800a894:	b004      	add	sp, #16
 800a896:	bc80      	pop	{r7}
 800a898:	46b8      	mov	r8, r7
 800a89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a89c:	20000bf4 	.word	0x20000bf4
 800a8a0:	0802bbb8 	.word	0x0802bbb8
 800a8a4:	0802babc 	.word	0x0802babc
 800a8a8:	0802bc38 	.word	0x0802bc38
 800a8ac:	0802bb20 	.word	0x0802bb20
 800a8b0:	20000be4 	.word	0x20000be4
 800a8b4:	20000bfb 	.word	0x20000bfb
 800a8b8:	43480000 	.word	0x43480000
 800a8bc:	42480000 	.word	0x42480000
 800a8c0:	42c80000 	.word	0x42c80000
 800a8c4:	0802bc60 	.word	0x0802bc60

0800a8c8 <AHT_Upkeep>:
  AHT20TimeStamp = HAL_GetTick() + 50;
  calibrated = false;
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
}

AHT20State AHT_Upkeep(void) {
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800a8ce:	4b54      	ldr	r3, [pc, #336]	@ (800aa20 <AHT_Upkeep+0x158>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	0018      	movs	r0, r3
 800a8d4:	f008 fce4 	bl	80132a0 <TimestampIsReached>
 800a8d8:	0003      	movs	r3, r0
 800a8da:	001a      	movs	r2, r3
 800a8dc:	2301      	movs	r3, #1
 800a8de:	4053      	eors	r3, r2
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d002      	beq.n	800a8ec <AHT_Upkeep+0x24>
    return AHTState;
 800a8e6:	4b4f      	ldr	r3, [pc, #316]	@ (800aa24 <AHT_Upkeep+0x15c>)
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	e094      	b.n	800aa16 <AHT_Upkeep+0x14e>
  }
  switch(AHTState) {
 800a8ec:	4b4d      	ldr	r3, [pc, #308]	@ (800aa24 <AHT_Upkeep+0x15c>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	2b05      	cmp	r3, #5
 800a8f2:	d86a      	bhi.n	800a9ca <AHT_Upkeep+0x102>
 800a8f4:	009a      	lsls	r2, r3, #2
 800a8f6:	4b4c      	ldr	r3, [pc, #304]	@ (800aa28 <AHT_Upkeep+0x160>)
 800a8f8:	18d3      	adds	r3, r2, r3
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800a8fe:	4a4b      	ldr	r2, [pc, #300]	@ (800aa2c <AHT_Upkeep+0x164>)
 800a900:	4b4b      	ldr	r3, [pc, #300]	@ (800aa30 <AHT_Upkeep+0x168>)
 800a902:	0019      	movs	r1, r3
 800a904:	2003      	movs	r0, #3
 800a906:	f008 fd21 	bl	801334c <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800a90a:	f009 fa5f 	bl	8013dcc <HAL_GetTick>
 800a90e:	0003      	movs	r3, r0
 800a910:	4a48      	ldr	r2, [pc, #288]	@ (800aa34 <AHT_Upkeep+0x16c>)
 800a912:	189a      	adds	r2, r3, r2
 800a914:	4b42      	ldr	r3, [pc, #264]	@ (800aa20 <AHT_Upkeep+0x158>)
 800a916:	601a      	str	r2, [r3, #0]
    break;
 800a918:	e07b      	b.n	800aa12 <AHT_Upkeep+0x14a>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800a91a:	f002 fd7f 	bl	800d41c <getSensorLock>
 800a91e:	1e03      	subs	r3, r0, #0
 800a920:	d000      	beq.n	800a924 <AHT_Upkeep+0x5c>
 800a922:	e071      	b.n	800aa08 <AHT_Upkeep+0x140>
      break;
    }
    setSensorLock(AHT20);
 800a924:	2002      	movs	r0, #2
 800a926:	f002 fd65 	bl	800d3f4 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800a92a:	f7ff fe5f 	bl	800a5ec <AHT20_StartMeasurement>
 800a92e:	0003      	movs	r3, r0
 800a930:	001a      	movs	r2, r3
 800a932:	2301      	movs	r3, #1
 800a934:	4053      	eors	r3, r2
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d003      	beq.n	800a944 <AHT_Upkeep+0x7c>
      AHTState = AHT20_ERROR;
 800a93c:	4b39      	ldr	r3, [pc, #228]	@ (800aa24 <AHT_Upkeep+0x15c>)
 800a93e:	22ff      	movs	r2, #255	@ 0xff
 800a940:	701a      	strb	r2, [r3, #0]
 800a942:	e002      	b.n	800a94a <AHT_Upkeep+0x82>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800a944:	4b37      	ldr	r3, [pc, #220]	@ (800aa24 <AHT_Upkeep+0x15c>)
 800a946:	2202      	movs	r2, #2
 800a948:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800a94a:	200a      	movs	r0, #10
 800a94c:	f009 fa48 	bl	8013de0 <HAL_Delay>
    break;
 800a950:	e05f      	b.n	800aa12 <AHT_Upkeep+0x14a>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800a952:	f7ff fe79 	bl	800a648 <AHT20_GetMeasurementValues>
 800a956:	1e03      	subs	r3, r0, #0
 800a958:	d058      	beq.n	800aa0c <AHT_Upkeep+0x144>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800a95a:	200a      	movs	r0, #10
 800a95c:	f009 fa40 	bl	8013de0 <HAL_Delay>
      setSensorLock(FREE);
 800a960:	2000      	movs	r0, #0
 800a962:	f002 fd47 	bl	800d3f4 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800a966:	4b2f      	ldr	r3, [pc, #188]	@ (800aa24 <AHT_Upkeep+0x15c>)
 800a968:	2203      	movs	r2, #3
 800a96a:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800a96c:	e04e      	b.n	800aa0c <AHT_Upkeep+0x144>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800a96e:	003a      	movs	r2, r7
 800a970:	1d3b      	adds	r3, r7, #4
 800a972:	0011      	movs	r1, r2
 800a974:	0018      	movs	r0, r3
 800a976:	f7ff fed5 	bl	800a724 <AHT20_Calculate>
 800a97a:	0003      	movs	r3, r0
 800a97c:	001a      	movs	r2, r3
 800a97e:	2301      	movs	r3, #1
 800a980:	4053      	eors	r3, r2
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b00      	cmp	r3, #0
 800a986:	d005      	beq.n	800a994 <AHT_Upkeep+0xcc>
      AHTState = AHT20_ERROR;
 800a988:	4b26      	ldr	r3, [pc, #152]	@ (800aa24 <AHT_Upkeep+0x15c>)
 800a98a:	22ff      	movs	r2, #255	@ 0xff
 800a98c:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800a98e:	4b25      	ldr	r3, [pc, #148]	@ (800aa24 <AHT_Upkeep+0x15c>)
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	e040      	b.n	800aa16 <AHT_Upkeep+0x14e>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	1c11      	adds	r1, r2, #0
 800a99a:	1c18      	adds	r0, r3, #0
 800a99c:	f7fa f872 	bl	8004a84 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	1c11      	adds	r1, r2, #0
 800a9a6:	1c18      	adds	r0, r3, #0
 800a9a8:	f7f9 fd22 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800a9ac:	4b1d      	ldr	r3, [pc, #116]	@ (800aa24 <AHT_Upkeep+0x15c>)
 800a9ae:	2205      	movs	r2, #5
 800a9b0:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800a9b2:	f009 fa0b 	bl	8013dcc <HAL_GetTick>
 800a9b6:	0003      	movs	r3, r0
 800a9b8:	4a1f      	ldr	r2, [pc, #124]	@ (800aa38 <AHT_Upkeep+0x170>)
 800a9ba:	189a      	adds	r2, r3, r2
 800a9bc:	4b18      	ldr	r3, [pc, #96]	@ (800aa20 <AHT_Upkeep+0x158>)
 800a9be:	601a      	str	r2, [r3, #0]
    break;
 800a9c0:	e027      	b.n	800aa12 <AHT_Upkeep+0x14a>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a9c2:	4b18      	ldr	r3, [pc, #96]	@ (800aa24 <AHT_Upkeep+0x15c>)
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	701a      	strb	r2, [r3, #0]
  break;
 800a9c8:	e023      	b.n	800aa12 <AHT_Upkeep+0x14a>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a9ca:	4b16      	ldr	r3, [pc, #88]	@ (800aa24 <AHT_Upkeep+0x15c>)
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800a9d0:	f002 fd24 	bl	800d41c <getSensorLock>
 800a9d4:	0003      	movs	r3, r0
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d102      	bne.n	800a9e0 <AHT_Upkeep+0x118>
      setSensorLock(FREE);
 800a9da:	2000      	movs	r0, #0
 800a9dc:	f002 fd0a 	bl	800d3f4 <setSensorLock>
    }
    AHTerrors++;
 800a9e0:	4b16      	ldr	r3, [pc, #88]	@ (800aa3c <AHT_Upkeep+0x174>)
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	4b14      	ldr	r3, [pc, #80]	@ (800aa3c <AHT_Upkeep+0x174>)
 800a9ea:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800a9ec:	4b13      	ldr	r3, [pc, #76]	@ (800aa3c <AHT_Upkeep+0x174>)
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	2b19      	cmp	r3, #25
 800a9f2:	d90d      	bls.n	800aa10 <AHT_Upkeep+0x148>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800a9f4:	4a12      	ldr	r2, [pc, #72]	@ (800aa40 <AHT_Upkeep+0x178>)
 800a9f6:	4b13      	ldr	r3, [pc, #76]	@ (800aa44 <AHT_Upkeep+0x17c>)
 800a9f8:	0019      	movs	r1, r3
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	f008 fca6 	bl	801334c <CreateLine>
      AHTState = AHT_STATE_OFF;
 800aa00:	4b08      	ldr	r3, [pc, #32]	@ (800aa24 <AHT_Upkeep+0x15c>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	701a      	strb	r2, [r3, #0]
    }
    break;
 800aa06:	e003      	b.n	800aa10 <AHT_Upkeep+0x148>
      break;
 800aa08:	46c0      	nop			@ (mov r8, r8)
 800aa0a:	e002      	b.n	800aa12 <AHT_Upkeep+0x14a>
    break;
 800aa0c:	46c0      	nop			@ (mov r8, r8)
 800aa0e:	e000      	b.n	800aa12 <AHT_Upkeep+0x14a>
    break;
 800aa10:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800aa12:	4b04      	ldr	r3, [pc, #16]	@ (800aa24 <AHT_Upkeep+0x15c>)
 800aa14:	781b      	ldrb	r3, [r3, #0]
}
 800aa16:	0018      	movs	r0, r3
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	b002      	add	sp, #8
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	46c0      	nop			@ (mov r8, r8)
 800aa20:	20000be4 	.word	0x20000be4
 800aa24:	20000093 	.word	0x20000093
 800aa28:	0802dc04 	.word	0x0802dc04
 800aa2c:	0802bc94 	.word	0x0802bc94
 800aa30:	0802babc 	.word	0x0802babc
 800aa34:	000dbba0 	.word	0x000dbba0
 800aa38:	0000ea60 	.word	0x0000ea60
 800aa3c:	20000bfb 	.word	0x20000bfb
 800aa40:	0802bcbc 	.word	0x0802bcbc
 800aa44:	0802bb20 	.word	0x0802bb20

0800aa48 <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800aa48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa4a:	b087      	sub	sp, #28
 800aa4c:	af02      	add	r7, sp, #8
 800aa4e:	0004      	movs	r4, r0
 800aa50:	0008      	movs	r0, r1
 800aa52:	60ba      	str	r2, [r7, #8]
 800aa54:	0019      	movs	r1, r3
 800aa56:	260e      	movs	r6, #14
 800aa58:	19bb      	adds	r3, r7, r6
 800aa5a:	1c22      	adds	r2, r4, #0
 800aa5c:	801a      	strh	r2, [r3, #0]
 800aa5e:	230c      	movs	r3, #12
 800aa60:	18fb      	adds	r3, r7, r3
 800aa62:	1c02      	adds	r2, r0, #0
 800aa64:	801a      	strh	r2, [r3, #0]
 800aa66:	1dbb      	adds	r3, r7, #6
 800aa68:	1c0a      	adds	r2, r1, #0
 800aa6a:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800aa6c:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa0 <WriteMemRegister+0x58>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d010      	beq.n	800aa96 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800aa74:	4b0a      	ldr	r3, [pc, #40]	@ (800aaa0 <WriteMemRegister+0x58>)
 800aa76:	681c      	ldr	r4, [r3, #0]
 800aa78:	4b0a      	ldr	r3, [pc, #40]	@ (800aaa4 <WriteMemRegister+0x5c>)
 800aa7a:	7818      	ldrb	r0, [r3, #0]
 800aa7c:	68bd      	ldr	r5, [r7, #8]
 800aa7e:	230c      	movs	r3, #12
 800aa80:	18fb      	adds	r3, r7, r3
 800aa82:	881a      	ldrh	r2, [r3, #0]
 800aa84:	19bb      	adds	r3, r7, r6
 800aa86:	8819      	ldrh	r1, [r3, #0]
 800aa88:	1dbb      	adds	r3, r7, #6
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	002b      	movs	r3, r5
 800aa90:	47a0      	blx	r4
 800aa92:	0003      	movs	r3, r0
 800aa94:	e000      	b.n	800aa98 <WriteMemRegister+0x50>
  }
  return false;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	0018      	movs	r0, r3
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	b005      	add	sp, #20
 800aa9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaa0:	20000bfc 	.word	0x20000bfc
 800aaa4:	20000094 	.word	0x20000094

0800aaa8 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800aaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	0004      	movs	r4, r0
 800aab0:	0008      	movs	r0, r1
 800aab2:	60ba      	str	r2, [r7, #8]
 800aab4:	0019      	movs	r1, r3
 800aab6:	260e      	movs	r6, #14
 800aab8:	19bb      	adds	r3, r7, r6
 800aaba:	1c22      	adds	r2, r4, #0
 800aabc:	801a      	strh	r2, [r3, #0]
 800aabe:	230c      	movs	r3, #12
 800aac0:	18fb      	adds	r3, r7, r3
 800aac2:	1c02      	adds	r2, r0, #0
 800aac4:	801a      	strh	r2, [r3, #0]
 800aac6:	1dbb      	adds	r3, r7, #6
 800aac8:	1c0a      	adds	r2, r1, #0
 800aaca:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800aacc:	4b0c      	ldr	r3, [pc, #48]	@ (800ab00 <ReadMemRegister+0x58>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d010      	beq.n	800aaf6 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800aad4:	4b0a      	ldr	r3, [pc, #40]	@ (800ab00 <ReadMemRegister+0x58>)
 800aad6:	681c      	ldr	r4, [r3, #0]
 800aad8:	4b0a      	ldr	r3, [pc, #40]	@ (800ab04 <ReadMemRegister+0x5c>)
 800aada:	7818      	ldrb	r0, [r3, #0]
 800aadc:	68bd      	ldr	r5, [r7, #8]
 800aade:	230c      	movs	r3, #12
 800aae0:	18fb      	adds	r3, r7, r3
 800aae2:	881a      	ldrh	r2, [r3, #0]
 800aae4:	19bb      	adds	r3, r7, r6
 800aae6:	8819      	ldrh	r1, [r3, #0]
 800aae8:	1dbb      	adds	r3, r7, #6
 800aaea:	881b      	ldrh	r3, [r3, #0]
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	002b      	movs	r3, r5
 800aaf0:	47a0      	blx	r4
 800aaf2:	0003      	movs	r3, r0
 800aaf4:	e000      	b.n	800aaf8 <ReadMemRegister+0x50>
  }
  return false;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	0018      	movs	r0, r3
 800aafa:	46bd      	mov	sp, r7
 800aafc:	b005      	add	sp, #20
 800aafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab00:	20000c00 	.word	0x20000c00
 800ab04:	20000094 	.word	0x20000094

0800ab08 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800ab10:	f009 f95c 	bl	8013dcc <HAL_GetTick>
 800ab14:	0002      	movs	r2, r0
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	18d2      	adds	r2, r2, r3
 800ab1a:	4b03      	ldr	r3, [pc, #12]	@ (800ab28 <setBMP280TimeStamp+0x20>)
 800ab1c:	601a      	str	r2, [r3, #0]
}
 800ab1e:	46c0      	nop			@ (mov r8, r8)
 800ab20:	46bd      	mov	sp, r7
 800ab22:	b002      	add	sp, #8
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	46c0      	nop			@ (mov r8, r8)
 800ab28:	20000c2c 	.word	0x20000c2c

0800ab2c <ResetBMP280samplecounter>:

void ResetBMP280samplecounter() {
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	af00      	add	r7, sp, #0
  bmp280samplecounter = 0;
 800ab30:	4b02      	ldr	r3, [pc, #8]	@ (800ab3c <ResetBMP280samplecounter+0x10>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	701a      	strb	r2, [r3, #0]
}
 800ab36:	46c0      	nop			@ (mov r8, r8)
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	20000c1c 	.word	0x20000c1c

0800ab40 <BMP280_reset>:


static void BMP280_reset() {
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800ab46:	1dfb      	adds	r3, r7, #7
 800ab48:	22b6      	movs	r2, #182	@ 0xb6
 800ab4a:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800ab4c:	1dfa      	adds	r2, r7, #7
 800ab4e:	2301      	movs	r3, #1
 800ab50:	2101      	movs	r1, #1
 800ab52:	20e0      	movs	r0, #224	@ 0xe0
 800ab54:	f7ff ff78 	bl	800aa48 <WriteMemRegister>
  Info("BMP280 has been reset");
 800ab58:	4a06      	ldr	r2, [pc, #24]	@ (800ab74 <BMP280_reset+0x34>)
 800ab5a:	4b07      	ldr	r3, [pc, #28]	@ (800ab78 <BMP280_reset+0x38>)
 800ab5c:	0019      	movs	r1, r3
 800ab5e:	2002      	movs	r0, #2
 800ab60:	f008 fbf4 	bl	801334c <CreateLine>
  HAL_Delay(100);
 800ab64:	2064      	movs	r0, #100	@ 0x64
 800ab66:	f009 f93b 	bl	8013de0 <HAL_Delay>
}
 800ab6a:	46c0      	nop			@ (mov r8, r8)
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	b002      	add	sp, #8
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	46c0      	nop			@ (mov r8, r8)
 800ab74:	0802bd00 	.word	0x0802bd00
 800ab78:	0802bd18 	.word	0x0802bd18

0800ab7c <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800ab7c:	b590      	push	{r4, r7, lr}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800ab82:	4aae      	ldr	r2, [pc, #696]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ab84:	231a      	movs	r3, #26
 800ab86:	2101      	movs	r1, #1
 800ab88:	2088      	movs	r0, #136	@ 0x88
 800ab8a:	f7ff ff8d 	bl	800aaa8 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 800ab8e:	4bab      	ldr	r3, [pc, #684]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ab90:	785b      	ldrb	r3, [r3, #1]
 800ab92:	021b      	lsls	r3, r3, #8
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	4aa9      	ldr	r2, [pc, #676]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ab98:	7812      	ldrb	r2, [r2, #0]
 800ab9a:	189b      	adds	r3, r3, r2
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	4ba8      	ldr	r3, [pc, #672]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800aba0:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800aba2:	4ba6      	ldr	r3, [pc, #664]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800aba4:	78db      	ldrb	r3, [r3, #3]
 800aba6:	021b      	lsls	r3, r3, #8
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	4aa4      	ldr	r2, [pc, #656]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800abac:	7892      	ldrb	r2, [r2, #2]
 800abae:	189b      	adds	r3, r3, r2
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	b21a      	sxth	r2, r3
 800abb4:	4ba2      	ldr	r3, [pc, #648]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800abb6:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 800abb8:	4ba0      	ldr	r3, [pc, #640]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800abba:	795b      	ldrb	r3, [r3, #5]
 800abbc:	021b      	lsls	r3, r3, #8
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	4a9e      	ldr	r2, [pc, #632]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800abc2:	7912      	ldrb	r2, [r2, #4]
 800abc4:	189b      	adds	r3, r3, r2
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	b21a      	sxth	r2, r3
 800abca:	4b9d      	ldr	r3, [pc, #628]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800abcc:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 800abce:	4b9b      	ldr	r3, [pc, #620]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800abd0:	79db      	ldrb	r3, [r3, #7]
 800abd2:	021b      	lsls	r3, r3, #8
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	4a99      	ldr	r2, [pc, #612]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800abd8:	7992      	ldrb	r2, [r2, #6]
 800abda:	189b      	adds	r3, r3, r2
 800abdc:	b29a      	uxth	r2, r3
 800abde:	4b98      	ldr	r3, [pc, #608]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800abe0:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 800abe2:	4b96      	ldr	r3, [pc, #600]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800abe4:	7a5b      	ldrb	r3, [r3, #9]
 800abe6:	021b      	lsls	r3, r3, #8
 800abe8:	b29b      	uxth	r3, r3
 800abea:	4a94      	ldr	r2, [pc, #592]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800abec:	7a12      	ldrb	r2, [r2, #8]
 800abee:	189b      	adds	r3, r3, r2
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	b21a      	sxth	r2, r3
 800abf4:	4b92      	ldr	r3, [pc, #584]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800abf6:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 800abf8:	4b90      	ldr	r3, [pc, #576]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800abfa:	7adb      	ldrb	r3, [r3, #11]
 800abfc:	021b      	lsls	r3, r3, #8
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	4a8e      	ldr	r2, [pc, #568]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ac02:	7a92      	ldrb	r2, [r2, #10]
 800ac04:	189b      	adds	r3, r3, r2
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	b21a      	sxth	r2, r3
 800ac0a:	4b8d      	ldr	r3, [pc, #564]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800ac0c:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 800ac0e:	4b8b      	ldr	r3, [pc, #556]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ac10:	7b5b      	ldrb	r3, [r3, #13]
 800ac12:	021b      	lsls	r3, r3, #8
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	4a89      	ldr	r2, [pc, #548]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ac18:	7b12      	ldrb	r2, [r2, #12]
 800ac1a:	189b      	adds	r3, r3, r2
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	b21a      	sxth	r2, r3
 800ac20:	4b87      	ldr	r3, [pc, #540]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800ac22:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 800ac24:	4b85      	ldr	r3, [pc, #532]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ac26:	7bdb      	ldrb	r3, [r3, #15]
 800ac28:	021b      	lsls	r3, r3, #8
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	4a83      	ldr	r2, [pc, #524]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ac2e:	7b92      	ldrb	r2, [r2, #14]
 800ac30:	189b      	adds	r3, r3, r2
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	b21a      	sxth	r2, r3
 800ac36:	4b82      	ldr	r3, [pc, #520]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800ac38:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 800ac3a:	4b80      	ldr	r3, [pc, #512]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ac3c:	7c5b      	ldrb	r3, [r3, #17]
 800ac3e:	021b      	lsls	r3, r3, #8
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	4a7e      	ldr	r2, [pc, #504]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ac44:	7c12      	ldrb	r2, [r2, #16]
 800ac46:	189b      	adds	r3, r3, r2
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	b21a      	sxth	r2, r3
 800ac4c:	4b7c      	ldr	r3, [pc, #496]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800ac4e:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 800ac50:	4b7a      	ldr	r3, [pc, #488]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ac52:	7cdb      	ldrb	r3, [r3, #19]
 800ac54:	021b      	lsls	r3, r3, #8
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	4a78      	ldr	r2, [pc, #480]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ac5a:	7c92      	ldrb	r2, [r2, #18]
 800ac5c:	189b      	adds	r3, r3, r2
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	b21a      	sxth	r2, r3
 800ac62:	4b77      	ldr	r3, [pc, #476]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800ac64:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800ac66:	4b75      	ldr	r3, [pc, #468]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ac68:	7d5b      	ldrb	r3, [r3, #21]
 800ac6a:	021b      	lsls	r3, r3, #8
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	4a73      	ldr	r2, [pc, #460]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ac70:	7d12      	ldrb	r2, [r2, #20]
 800ac72:	189b      	adds	r3, r3, r2
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	b21a      	sxth	r2, r3
 800ac78:	4b71      	ldr	r3, [pc, #452]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800ac7a:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 800ac7c:	4b6f      	ldr	r3, [pc, #444]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ac7e:	7ddb      	ldrb	r3, [r3, #23]
 800ac80:	021b      	lsls	r3, r3, #8
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	4a6d      	ldr	r2, [pc, #436]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ac86:	7d92      	ldrb	r2, [r2, #22]
 800ac88:	189b      	adds	r3, r3, r2
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	b21a      	sxth	r2, r3
 800ac8e:	4b6c      	ldr	r3, [pc, #432]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800ac90:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 800ac92:	4a6c      	ldr	r2, [pc, #432]	@ (800ae44 <BMP280_get_calibration+0x2c8>)
 800ac94:	4b6c      	ldr	r3, [pc, #432]	@ (800ae48 <BMP280_get_calibration+0x2cc>)
 800ac96:	0019      	movs	r1, r3
 800ac98:	2003      	movs	r0, #3
 800ac9a:	f008 fb57 	bl	801334c <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800ac9e:	4b67      	ldr	r3, [pc, #412]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800aca0:	785b      	ldrb	r3, [r3, #1]
 800aca2:	001c      	movs	r4, r3
 800aca4:	4b65      	ldr	r3, [pc, #404]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	0018      	movs	r0, r3
 800acaa:	4b65      	ldr	r3, [pc, #404]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	4a67      	ldr	r2, [pc, #412]	@ (800ae4c <BMP280_get_calibration+0x2d0>)
 800acb0:	4965      	ldr	r1, [pc, #404]	@ (800ae48 <BMP280_get_calibration+0x2cc>)
 800acb2:	9301      	str	r3, [sp, #4]
 800acb4:	9000      	str	r0, [sp, #0]
 800acb6:	0023      	movs	r3, r4
 800acb8:	2003      	movs	r0, #3
 800acba:	f008 fb47 	bl	801334c <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 800acbe:	4b5f      	ldr	r3, [pc, #380]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800acc0:	78db      	ldrb	r3, [r3, #3]
 800acc2:	001c      	movs	r4, r3
 800acc4:	4b5d      	ldr	r3, [pc, #372]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800acc6:	789b      	ldrb	r3, [r3, #2]
 800acc8:	0018      	movs	r0, r3
 800acca:	4b5d      	ldr	r3, [pc, #372]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800accc:	2202      	movs	r2, #2
 800acce:	5e9b      	ldrsh	r3, [r3, r2]
 800acd0:	4a5f      	ldr	r2, [pc, #380]	@ (800ae50 <BMP280_get_calibration+0x2d4>)
 800acd2:	495d      	ldr	r1, [pc, #372]	@ (800ae48 <BMP280_get_calibration+0x2cc>)
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	9000      	str	r0, [sp, #0]
 800acd8:	0023      	movs	r3, r4
 800acda:	2003      	movs	r0, #3
 800acdc:	f008 fb36 	bl	801334c <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 800ace0:	4b56      	ldr	r3, [pc, #344]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ace2:	795b      	ldrb	r3, [r3, #5]
 800ace4:	001c      	movs	r4, r3
 800ace6:	4b55      	ldr	r3, [pc, #340]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ace8:	791b      	ldrb	r3, [r3, #4]
 800acea:	0018      	movs	r0, r3
 800acec:	4b54      	ldr	r3, [pc, #336]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800acee:	2204      	movs	r2, #4
 800acf0:	5e9b      	ldrsh	r3, [r3, r2]
 800acf2:	4a58      	ldr	r2, [pc, #352]	@ (800ae54 <BMP280_get_calibration+0x2d8>)
 800acf4:	4954      	ldr	r1, [pc, #336]	@ (800ae48 <BMP280_get_calibration+0x2cc>)
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	9000      	str	r0, [sp, #0]
 800acfa:	0023      	movs	r3, r4
 800acfc:	2003      	movs	r0, #3
 800acfe:	f008 fb25 	bl	801334c <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 800ad02:	4b4e      	ldr	r3, [pc, #312]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ad04:	79db      	ldrb	r3, [r3, #7]
 800ad06:	001c      	movs	r4, r3
 800ad08:	4b4c      	ldr	r3, [pc, #304]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ad0a:	799b      	ldrb	r3, [r3, #6]
 800ad0c:	0018      	movs	r0, r3
 800ad0e:	4b4c      	ldr	r3, [pc, #304]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800ad10:	88db      	ldrh	r3, [r3, #6]
 800ad12:	4a51      	ldr	r2, [pc, #324]	@ (800ae58 <BMP280_get_calibration+0x2dc>)
 800ad14:	494c      	ldr	r1, [pc, #304]	@ (800ae48 <BMP280_get_calibration+0x2cc>)
 800ad16:	9301      	str	r3, [sp, #4]
 800ad18:	9000      	str	r0, [sp, #0]
 800ad1a:	0023      	movs	r3, r4
 800ad1c:	2003      	movs	r0, #3
 800ad1e:	f008 fb15 	bl	801334c <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 800ad22:	4b46      	ldr	r3, [pc, #280]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ad24:	7a5b      	ldrb	r3, [r3, #9]
 800ad26:	001c      	movs	r4, r3
 800ad28:	4b44      	ldr	r3, [pc, #272]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ad2a:	7a1b      	ldrb	r3, [r3, #8]
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	4b44      	ldr	r3, [pc, #272]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800ad30:	2208      	movs	r2, #8
 800ad32:	5e9b      	ldrsh	r3, [r3, r2]
 800ad34:	4a49      	ldr	r2, [pc, #292]	@ (800ae5c <BMP280_get_calibration+0x2e0>)
 800ad36:	4944      	ldr	r1, [pc, #272]	@ (800ae48 <BMP280_get_calibration+0x2cc>)
 800ad38:	9301      	str	r3, [sp, #4]
 800ad3a:	9000      	str	r0, [sp, #0]
 800ad3c:	0023      	movs	r3, r4
 800ad3e:	2003      	movs	r0, #3
 800ad40:	f008 fb04 	bl	801334c <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 800ad44:	4b3d      	ldr	r3, [pc, #244]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ad46:	7adb      	ldrb	r3, [r3, #11]
 800ad48:	001c      	movs	r4, r3
 800ad4a:	4b3c      	ldr	r3, [pc, #240]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ad4c:	7a9b      	ldrb	r3, [r3, #10]
 800ad4e:	0018      	movs	r0, r3
 800ad50:	4b3b      	ldr	r3, [pc, #236]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800ad52:	220a      	movs	r2, #10
 800ad54:	5e9b      	ldrsh	r3, [r3, r2]
 800ad56:	4a42      	ldr	r2, [pc, #264]	@ (800ae60 <BMP280_get_calibration+0x2e4>)
 800ad58:	493b      	ldr	r1, [pc, #236]	@ (800ae48 <BMP280_get_calibration+0x2cc>)
 800ad5a:	9301      	str	r3, [sp, #4]
 800ad5c:	9000      	str	r0, [sp, #0]
 800ad5e:	0023      	movs	r3, r4
 800ad60:	2003      	movs	r0, #3
 800ad62:	f008 faf3 	bl	801334c <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800ad66:	4b35      	ldr	r3, [pc, #212]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ad68:	7b5b      	ldrb	r3, [r3, #13]
 800ad6a:	001c      	movs	r4, r3
 800ad6c:	4b33      	ldr	r3, [pc, #204]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ad6e:	7b1b      	ldrb	r3, [r3, #12]
 800ad70:	0018      	movs	r0, r3
 800ad72:	4b33      	ldr	r3, [pc, #204]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800ad74:	220c      	movs	r2, #12
 800ad76:	5e9b      	ldrsh	r3, [r3, r2]
 800ad78:	4a3a      	ldr	r2, [pc, #232]	@ (800ae64 <BMP280_get_calibration+0x2e8>)
 800ad7a:	4933      	ldr	r1, [pc, #204]	@ (800ae48 <BMP280_get_calibration+0x2cc>)
 800ad7c:	9301      	str	r3, [sp, #4]
 800ad7e:	9000      	str	r0, [sp, #0]
 800ad80:	0023      	movs	r3, r4
 800ad82:	2003      	movs	r0, #3
 800ad84:	f008 fae2 	bl	801334c <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 800ad88:	4b2c      	ldr	r3, [pc, #176]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ad8a:	7bdb      	ldrb	r3, [r3, #15]
 800ad8c:	001c      	movs	r4, r3
 800ad8e:	4b2b      	ldr	r3, [pc, #172]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ad90:	7b9b      	ldrb	r3, [r3, #14]
 800ad92:	0018      	movs	r0, r3
 800ad94:	4b2a      	ldr	r3, [pc, #168]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800ad96:	220e      	movs	r2, #14
 800ad98:	5e9b      	ldrsh	r3, [r3, r2]
 800ad9a:	4a33      	ldr	r2, [pc, #204]	@ (800ae68 <BMP280_get_calibration+0x2ec>)
 800ad9c:	492a      	ldr	r1, [pc, #168]	@ (800ae48 <BMP280_get_calibration+0x2cc>)
 800ad9e:	9301      	str	r3, [sp, #4]
 800ada0:	9000      	str	r0, [sp, #0]
 800ada2:	0023      	movs	r3, r4
 800ada4:	2003      	movs	r0, #3
 800ada6:	f008 fad1 	bl	801334c <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800adaa:	4b24      	ldr	r3, [pc, #144]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800adac:	7c5b      	ldrb	r3, [r3, #17]
 800adae:	001c      	movs	r4, r3
 800adb0:	4b22      	ldr	r3, [pc, #136]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800adb2:	7c1b      	ldrb	r3, [r3, #16]
 800adb4:	0018      	movs	r0, r3
 800adb6:	4b22      	ldr	r3, [pc, #136]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800adb8:	2210      	movs	r2, #16
 800adba:	5e9b      	ldrsh	r3, [r3, r2]
 800adbc:	4a2b      	ldr	r2, [pc, #172]	@ (800ae6c <BMP280_get_calibration+0x2f0>)
 800adbe:	4922      	ldr	r1, [pc, #136]	@ (800ae48 <BMP280_get_calibration+0x2cc>)
 800adc0:	9301      	str	r3, [sp, #4]
 800adc2:	9000      	str	r0, [sp, #0]
 800adc4:	0023      	movs	r3, r4
 800adc6:	2003      	movs	r0, #3
 800adc8:	f008 fac0 	bl	801334c <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 800adcc:	4b1b      	ldr	r3, [pc, #108]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800adce:	7cdb      	ldrb	r3, [r3, #19]
 800add0:	001c      	movs	r4, r3
 800add2:	4b1a      	ldr	r3, [pc, #104]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800add4:	7c9b      	ldrb	r3, [r3, #18]
 800add6:	0018      	movs	r0, r3
 800add8:	4b19      	ldr	r3, [pc, #100]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800adda:	2212      	movs	r2, #18
 800addc:	5e9b      	ldrsh	r3, [r3, r2]
 800adde:	4a24      	ldr	r2, [pc, #144]	@ (800ae70 <BMP280_get_calibration+0x2f4>)
 800ade0:	4919      	ldr	r1, [pc, #100]	@ (800ae48 <BMP280_get_calibration+0x2cc>)
 800ade2:	9301      	str	r3, [sp, #4]
 800ade4:	9000      	str	r0, [sp, #0]
 800ade6:	0023      	movs	r3, r4
 800ade8:	2003      	movs	r0, #3
 800adea:	f008 faaf 	bl	801334c <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 800adee:	4b13      	ldr	r3, [pc, #76]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800adf0:	7d5b      	ldrb	r3, [r3, #21]
 800adf2:	001c      	movs	r4, r3
 800adf4:	4b11      	ldr	r3, [pc, #68]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800adf6:	7d1b      	ldrb	r3, [r3, #20]
 800adf8:	0018      	movs	r0, r3
 800adfa:	4b11      	ldr	r3, [pc, #68]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800adfc:	2214      	movs	r2, #20
 800adfe:	5e9b      	ldrsh	r3, [r3, r2]
 800ae00:	4a1c      	ldr	r2, [pc, #112]	@ (800ae74 <BMP280_get_calibration+0x2f8>)
 800ae02:	4911      	ldr	r1, [pc, #68]	@ (800ae48 <BMP280_get_calibration+0x2cc>)
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	9000      	str	r0, [sp, #0]
 800ae08:	0023      	movs	r3, r4
 800ae0a:	2003      	movs	r0, #3
 800ae0c:	f008 fa9e 	bl	801334c <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 800ae10:	4b0a      	ldr	r3, [pc, #40]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ae12:	7ddb      	ldrb	r3, [r3, #23]
 800ae14:	001c      	movs	r4, r3
 800ae16:	4b09      	ldr	r3, [pc, #36]	@ (800ae3c <BMP280_get_calibration+0x2c0>)
 800ae18:	7d9b      	ldrb	r3, [r3, #22]
 800ae1a:	0018      	movs	r0, r3
 800ae1c:	4b08      	ldr	r3, [pc, #32]	@ (800ae40 <BMP280_get_calibration+0x2c4>)
 800ae1e:	2216      	movs	r2, #22
 800ae20:	5e9b      	ldrsh	r3, [r3, r2]
 800ae22:	4a15      	ldr	r2, [pc, #84]	@ (800ae78 <BMP280_get_calibration+0x2fc>)
 800ae24:	4908      	ldr	r1, [pc, #32]	@ (800ae48 <BMP280_get_calibration+0x2cc>)
 800ae26:	9301      	str	r3, [sp, #4]
 800ae28:	9000      	str	r0, [sp, #0]
 800ae2a:	0023      	movs	r3, r4
 800ae2c:	2003      	movs	r0, #3
 800ae2e:	f008 fa8d 	bl	801334c <CreateLine>
}
 800ae32:	46c0      	nop			@ (mov r8, r8)
 800ae34:	46bd      	mov	sp, r7
 800ae36:	b001      	add	sp, #4
 800ae38:	bd90      	pop	{r4, r7, pc}
 800ae3a:	46c0      	nop			@ (mov r8, r8)
 800ae3c:	20000c30 	.word	0x20000c30
 800ae40:	20000c04 	.word	0x20000c04
 800ae44:	0802bd1c 	.word	0x0802bd1c
 800ae48:	0802bd38 	.word	0x0802bd38
 800ae4c:	0802bd3c 	.word	0x0802bd3c
 800ae50:	0802bd70 	.word	0x0802bd70
 800ae54:	0802bda4 	.word	0x0802bda4
 800ae58:	0802bdd8 	.word	0x0802bdd8
 800ae5c:	0802be0c 	.word	0x0802be0c
 800ae60:	0802be40 	.word	0x0802be40
 800ae64:	0802be74 	.word	0x0802be74
 800ae68:	0802bea8 	.word	0x0802bea8
 800ae6c:	0802bedc 	.word	0x0802bedc
 800ae70:	0802bf10 	.word	0x0802bf10
 800ae74:	0802bf44 	.word	0x0802bf44
 800ae78:	0802bf78 	.word	0x0802bf78

0800ae7c <BMP280_probe>:

static bool BMP280_probe() {
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800ae82:	4b34      	ldr	r3, [pc, #208]	@ (800af54 <BMP280_probe+0xd8>)
 800ae84:	2276      	movs	r2, #118	@ 0x76
 800ae86:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800ae88:	1dba      	adds	r2, r7, #6
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	20d0      	movs	r0, #208	@ 0xd0
 800ae90:	f7ff fe0a 	bl	800aaa8 <ReadMemRegister>
 800ae94:	0003      	movs	r3, r0
 800ae96:	001a      	movs	r2, r3
 800ae98:	1dfb      	adds	r3, r7, #7
 800ae9a:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 800ae9c:	1dfb      	adds	r3, r7, #7
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	b25b      	sxtb	r3, r3
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00a      	beq.n	800aebc <BMP280_probe+0x40>
 800aea6:	1dbb      	adds	r3, r7, #6
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d006      	beq.n	800aebc <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800aeae:	1dbb      	adds	r3, r7, #6
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	4a29      	ldr	r2, [pc, #164]	@ (800af58 <BMP280_probe+0xdc>)
 800aeb4:	4929      	ldr	r1, [pc, #164]	@ (800af5c <BMP280_probe+0xe0>)
 800aeb6:	2003      	movs	r0, #3
 800aeb8:	f008 fa48 	bl	801334c <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 800aebc:	1dbb      	adds	r3, r7, #6
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2b58      	cmp	r3, #88	@ 0x58
 800aec2:	d01f      	beq.n	800af04 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 800aec4:	4b23      	ldr	r3, [pc, #140]	@ (800af54 <BMP280_probe+0xd8>)
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	3301      	adds	r3, #1
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	4b21      	ldr	r3, [pc, #132]	@ (800af54 <BMP280_probe+0xd8>)
 800aece:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800aed0:	1dba      	adds	r2, r7, #6
 800aed2:	2301      	movs	r3, #1
 800aed4:	2101      	movs	r1, #1
 800aed6:	20d0      	movs	r0, #208	@ 0xd0
 800aed8:	f7ff fde6 	bl	800aaa8 <ReadMemRegister>
 800aedc:	0003      	movs	r3, r0
 800aede:	001a      	movs	r2, r3
 800aee0:	1dfb      	adds	r3, r7, #7
 800aee2:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 800aee4:	1dfb      	adds	r3, r7, #7
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	b25b      	sxtb	r3, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00a      	beq.n	800af04 <BMP280_probe+0x88>
 800aeee:	1dbb      	adds	r3, r7, #6
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d006      	beq.n	800af04 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800aef6:	1dbb      	adds	r3, r7, #6
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	4a17      	ldr	r2, [pc, #92]	@ (800af58 <BMP280_probe+0xdc>)
 800aefc:	4917      	ldr	r1, [pc, #92]	@ (800af5c <BMP280_probe+0xe0>)
 800aefe:	2003      	movs	r0, #3
 800af00:	f008 fa24 	bl	801334c <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 800af04:	1dbb      	adds	r3, r7, #6
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	2b58      	cmp	r3, #88	@ 0x58
 800af0a:	d110      	bne.n	800af2e <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800af0c:	1dbb      	adds	r3, r7, #6
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	0018      	movs	r0, r3
 800af12:	4b10      	ldr	r3, [pc, #64]	@ (800af54 <BMP280_probe+0xd8>)
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	4a12      	ldr	r2, [pc, #72]	@ (800af60 <BMP280_probe+0xe4>)
 800af18:	4912      	ldr	r1, [pc, #72]	@ (800af64 <BMP280_probe+0xe8>)
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	0003      	movs	r3, r0
 800af1e:	2002      	movs	r0, #2
 800af20:	f008 fa14 	bl	801334c <CreateLine>
      BMP280_reset(); // get an initial state
 800af24:	f7ff fe0c 	bl	800ab40 <BMP280_reset>
      BMP280_get_calibration();
 800af28:	f7ff fe28 	bl	800ab7c <BMP280_get_calibration>
 800af2c:	e008      	b.n	800af40 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 800af2e:	4b09      	ldr	r3, [pc, #36]	@ (800af54 <BMP280_probe+0xd8>)
 800af30:	2200      	movs	r2, #0
 800af32:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800af34:	4a0c      	ldr	r2, [pc, #48]	@ (800af68 <BMP280_probe+0xec>)
 800af36:	4b0d      	ldr	r3, [pc, #52]	@ (800af6c <BMP280_probe+0xf0>)
 800af38:	0019      	movs	r1, r3
 800af3a:	2001      	movs	r0, #1
 800af3c:	f008 fa06 	bl	801334c <CreateLine>
    }
    return bmp280I2Caddr;
 800af40:	4b04      	ldr	r3, [pc, #16]	@ (800af54 <BMP280_probe+0xd8>)
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	1e5a      	subs	r2, r3, #1
 800af46:	4193      	sbcs	r3, r2
 800af48:	b2db      	uxtb	r3, r3
}
 800af4a:	0018      	movs	r0, r3
 800af4c:	46bd      	mov	sp, r7
 800af4e:	b002      	add	sp, #8
 800af50:	bd80      	pop	{r7, pc}
 800af52:	46c0      	nop			@ (mov r8, r8)
 800af54:	20000094 	.word	0x20000094
 800af58:	0802bfac 	.word	0x0802bfac
 800af5c:	0802bd38 	.word	0x0802bd38
 800af60:	0802bfdc 	.word	0x0802bfdc
 800af64:	0802bd18 	.word	0x0802bd18
 800af68:	0802c014 	.word	0x0802c014
 800af6c:	0802c028 	.word	0x0802c028

0800af70 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 800af70:	b580      	push	{r7, lr}
 800af72:	af00      	add	r7, sp, #0
  return BMP280_probe();
 800af74:	f7ff ff82 	bl	800ae7c <BMP280_probe>
 800af78:	0003      	movs	r3, r0
}
 800af7a:	0018      	movs	r0, r3
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800af8a:	4b05      	ldr	r3, [pc, #20]	@ (800afa0 <BMP_Init+0x20>)
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800af90:	4b04      	ldr	r3, [pc, #16]	@ (800afa4 <BMP_Init+0x24>)
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	601a      	str	r2, [r3, #0]
}
 800af96:	46c0      	nop			@ (mov r8, r8)
 800af98:	46bd      	mov	sp, r7
 800af9a:	b002      	add	sp, #8
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	46c0      	nop			@ (mov r8, r8)
 800afa0:	20000c00 	.word	0x20000c00
 800afa4:	20000bfc 	.word	0x20000bfc

0800afa8 <BMP280_set_config>:


static bool BMP280_set_config() {
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 800afae:	1dbb      	adds	r3, r7, #6
 800afb0:	228c      	movs	r2, #140	@ 0x8c
 800afb2:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800afb4:	1dba      	adds	r2, r7, #6
 800afb6:	2301      	movs	r3, #1
 800afb8:	2101      	movs	r1, #1
 800afba:	20f5      	movs	r0, #245	@ 0xf5
 800afbc:	f7ff fd44 	bl	800aa48 <WriteMemRegister>
 800afc0:	0003      	movs	r3, r0
 800afc2:	001a      	movs	r2, r3
 800afc4:	1dfb      	adds	r3, r7, #7
 800afc6:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800afc8:	f008 ff00 	bl	8013dcc <HAL_GetTick>
 800afcc:	0003      	movs	r3, r0
 800afce:	330a      	adds	r3, #10
 800afd0:	001a      	movs	r2, r3
 800afd2:	4b06      	ldr	r3, [pc, #24]	@ (800afec <BMP280_set_config+0x44>)
 800afd4:	601a      	str	r2, [r3, #0]
  return rslt;
 800afd6:	1dfb      	adds	r3, r7, #7
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	b25b      	sxtb	r3, r3
 800afdc:	1e5a      	subs	r2, r3, #1
 800afde:	4193      	sbcs	r3, r2
 800afe0:	b2db      	uxtb	r3, r3
}
 800afe2:	0018      	movs	r0, r3
 800afe4:	46bd      	mov	sp, r7
 800afe6:	b002      	add	sp, #8
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	46c0      	nop			@ (mov r8, r8)
 800afec:	20000c2c 	.word	0x20000c2c

0800aff0 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 800aff6:	1dbb      	adds	r3, r7, #6
 800aff8:	2208      	movs	r2, #8
 800affa:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 800affc:	4b22      	ldr	r3, [pc, #136]	@ (800b088 <BMP280_set_mode+0x98>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	224c      	movs	r2, #76	@ 0x4c
 800b002:	4313      	orrs	r3, r2
 800b004:	b2da      	uxtb	r2, r3
 800b006:	1d7b      	adds	r3, r7, #5
 800b008:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800b00a:	1d7a      	adds	r2, r7, #5
 800b00c:	2301      	movs	r3, #1
 800b00e:	2101      	movs	r1, #1
 800b010:	20f4      	movs	r0, #244	@ 0xf4
 800b012:	f7ff fd19 	bl	800aa48 <WriteMemRegister>
 800b016:	0003      	movs	r3, r0
 800b018:	001a      	movs	r2, r3
 800b01a:	1dfb      	adds	r3, r7, #7
 800b01c:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 800b01e:	f008 fed5 	bl	8013dcc <HAL_GetTick>
 800b022:	0003      	movs	r3, r0
 800b024:	22fa      	movs	r2, #250	@ 0xfa
 800b026:	0092      	lsls	r2, r2, #2
 800b028:	189a      	adds	r2, r3, r2
 800b02a:	4b18      	ldr	r3, [pc, #96]	@ (800b08c <BMP280_set_mode+0x9c>)
 800b02c:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 800b02e:	e016      	b.n	800b05e <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 800b030:	1dba      	adds	r2, r7, #6
 800b032:	2301      	movs	r3, #1
 800b034:	2101      	movs	r1, #1
 800b036:	20f3      	movs	r0, #243	@ 0xf3
 800b038:	f7ff fd36 	bl	800aaa8 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 800b03c:	4b13      	ldr	r3, [pc, #76]	@ (800b08c <BMP280_set_mode+0x9c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	0018      	movs	r0, r3
 800b042:	f008 f92d 	bl	80132a0 <TimestampIsReached>
 800b046:	1e03      	subs	r3, r0, #0
 800b048:	d006      	beq.n	800b058 <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 800b04a:	4a11      	ldr	r2, [pc, #68]	@ (800b090 <BMP280_set_mode+0xa0>)
 800b04c:	4b11      	ldr	r3, [pc, #68]	@ (800b094 <BMP280_set_mode+0xa4>)
 800b04e:	0019      	movs	r1, r3
 800b050:	2001      	movs	r0, #1
 800b052:	f008 f97b 	bl	801334c <CreateLine>
      break;
 800b056:	e008      	b.n	800b06a <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 800b058:	2001      	movs	r0, #1
 800b05a:	f008 fec1 	bl	8013de0 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 800b05e:	1dbb      	adds	r3, r7, #6
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	001a      	movs	r2, r3
 800b064:	2308      	movs	r3, #8
 800b066:	4013      	ands	r3, r2
 800b068:	d1e2      	bne.n	800b030 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 800b06a:	f008 feaf 	bl	8013dcc <HAL_GetTick>
 800b06e:	0002      	movs	r2, r0
 800b070:	4b06      	ldr	r3, [pc, #24]	@ (800b08c <BMP280_set_mode+0x9c>)
 800b072:	601a      	str	r2, [r3, #0]
  return rslt;
 800b074:	1dfb      	adds	r3, r7, #7
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	b25b      	sxtb	r3, r3
 800b07a:	1e5a      	subs	r2, r3, #1
 800b07c:	4193      	sbcs	r3, r2
 800b07e:	b2db      	uxtb	r3, r3
}
 800b080:	0018      	movs	r0, r3
 800b082:	46bd      	mov	sp, r7
 800b084:	b002      	add	sp, #8
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20000095 	.word	0x20000095
 800b08c:	20000c2c 	.word	0x20000c2c
 800b090:	0802c02c 	.word	0x0802c02c
 800b094:	0802c028 	.word	0x0802c028

0800b098 <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800b09e:	1dba      	adds	r2, r7, #6
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	20f4      	movs	r0, #244	@ 0xf4
 800b0a6:	f7ff fcff 	bl	800aaa8 <ReadMemRegister>
 800b0aa:	0003      	movs	r3, r0
 800b0ac:	001a      	movs	r2, r3
 800b0ae:	1dfb      	adds	r3, r7, #7
 800b0b0:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800b0b2:	1dbb      	adds	r3, r7, #6
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	2203      	movs	r2, #3
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	1dbb      	adds	r3, r7, #6
 800b0be:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800b0c0:	f008 fe84 	bl	8013dcc <HAL_GetTick>
 800b0c4:	0003      	movs	r3, r0
 800b0c6:	330a      	adds	r3, #10
 800b0c8:	001a      	movs	r2, r3
 800b0ca:	4b08      	ldr	r3, [pc, #32]	@ (800b0ec <BMP280_get_mode+0x54>)
 800b0cc:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 800b0ce:	1dfb      	adds	r3, r7, #7
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	b25b      	sxtb	r3, r3
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d102      	bne.n	800b0de <BMP280_get_mode+0x46>
    bmpData = 255;
 800b0d8:	1dbb      	adds	r3, r7, #6
 800b0da:	22ff      	movs	r2, #255	@ 0xff
 800b0dc:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800b0de:	1dbb      	adds	r3, r7, #6
 800b0e0:	781b      	ldrb	r3, [r3, #0]
}
 800b0e2:	0018      	movs	r0, r3
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	b002      	add	sp, #8
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	46c0      	nop			@ (mov r8, r8)
 800b0ec:	20000c2c 	.word	0x20000c2c

0800b0f0 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 800b0f0:	b5b0      	push	{r4, r5, r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 800b0f6:	1d3a      	adds	r2, r7, #4
 800b0f8:	2306      	movs	r3, #6
 800b0fa:	2101      	movs	r1, #1
 800b0fc:	20f7      	movs	r0, #247	@ 0xf7
 800b0fe:	f7ff fcd3 	bl	800aaa8 <ReadMemRegister>
 800b102:	0003      	movs	r3, r0
 800b104:	001a      	movs	r2, r3
 800b106:	230f      	movs	r3, #15
 800b108:	18fb      	adds	r3, r7, r3
 800b10a:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 800b10c:	1d3b      	adds	r3, r7, #4
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	2b80      	cmp	r3, #128	@ 0x80
 800b112:	d013      	beq.n	800b13c <BMP280_get_measurement_values+0x4c>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800b114:	1d3b      	adds	r3, r7, #4
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	031a      	lsls	r2, r3, #12
 800b11a:	1d3b      	adds	r3, r7, #4
 800b11c:	785b      	ldrb	r3, [r3, #1]
 800b11e:	011b      	lsls	r3, r3, #4
 800b120:	18d3      	adds	r3, r2, r3
 800b122:	1d3a      	adds	r2, r7, #4
 800b124:	7892      	ldrb	r2, [r2, #2]
 800b126:	0912      	lsrs	r2, r2, #4
 800b128:	b2d2      	uxtb	r2, r2
 800b12a:	189b      	adds	r3, r3, r2
 800b12c:	001a      	movs	r2, r3
 800b12e:	4b2e      	ldr	r3, [pc, #184]	@ (800b1e8 <BMP280_get_measurement_values+0xf8>)
 800b130:	601a      	str	r2, [r3, #0]
    Error("BMP280 Invalid read of barometric pressure.");
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
    SetAllBlueLED();
    return false;
  }
  if (bmpData[3] != 0x80) {
 800b132:	1d3b      	adds	r3, r7, #4
 800b134:	78db      	ldrb	r3, [r3, #3]
 800b136:	2b80      	cmp	r3, #128	@ 0x80
 800b138:	d035      	beq.n	800b1a6 <BMP280_get_measurement_values+0xb6>
 800b13a:	e01d      	b.n	800b178 <BMP280_get_measurement_values+0x88>
    Error("BMP280 Invalid read of barometric pressure.");
 800b13c:	4a2b      	ldr	r2, [pc, #172]	@ (800b1ec <BMP280_get_measurement_values+0xfc>)
 800b13e:	4b2c      	ldr	r3, [pc, #176]	@ (800b1f0 <BMP280_get_measurement_values+0x100>)
 800b140:	0019      	movs	r1, r3
 800b142:	2001      	movs	r0, #1
 800b144:	f008 f902 	bl	801334c <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800b148:	1d3b      	adds	r3, r7, #4
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	001d      	movs	r5, r3
 800b14e:	1d3b      	adds	r3, r7, #4
 800b150:	785b      	ldrb	r3, [r3, #1]
 800b152:	0018      	movs	r0, r3
 800b154:	1d3b      	adds	r3, r7, #4
 800b156:	789b      	ldrb	r3, [r3, #2]
 800b158:	001c      	movs	r4, r3
 800b15a:	4b23      	ldr	r3, [pc, #140]	@ (800b1e8 <BMP280_get_measurement_values+0xf8>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a25      	ldr	r2, [pc, #148]	@ (800b1f4 <BMP280_get_measurement_values+0x104>)
 800b160:	4925      	ldr	r1, [pc, #148]	@ (800b1f8 <BMP280_get_measurement_values+0x108>)
 800b162:	9302      	str	r3, [sp, #8]
 800b164:	9401      	str	r4, [sp, #4]
 800b166:	9000      	str	r0, [sp, #0]
 800b168:	002b      	movs	r3, r5
 800b16a:	2003      	movs	r0, #3
 800b16c:	f008 f8ee 	bl	801334c <CreateLine>
    SetAllBlueLED();
 800b170:	f006 fffc 	bl	801216c <SetAllBlueLED>
    return false;
 800b174:	2300      	movs	r3, #0
 800b176:	e033      	b.n	800b1e0 <BMP280_get_measurement_values+0xf0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800b178:	1d3b      	adds	r3, r7, #4
 800b17a:	78db      	ldrb	r3, [r3, #3]
 800b17c:	031a      	lsls	r2, r3, #12
 800b17e:	1d3b      	adds	r3, r7, #4
 800b180:	791b      	ldrb	r3, [r3, #4]
 800b182:	011b      	lsls	r3, r3, #4
 800b184:	18d3      	adds	r3, r2, r3
 800b186:	1d3a      	adds	r2, r7, #4
 800b188:	7952      	ldrb	r2, [r2, #5]
 800b18a:	0912      	lsrs	r2, r2, #4
 800b18c:	b2d2      	uxtb	r2, r2
 800b18e:	189b      	adds	r3, r3, r2
 800b190:	001a      	movs	r2, r3
 800b192:	4b1a      	ldr	r3, [pc, #104]	@ (800b1fc <BMP280_get_measurement_values+0x10c>)
 800b194:	601a      	str	r2, [r3, #0]
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
    SetAllBlueLED();
    return false;
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 800b196:	230f      	movs	r3, #15
 800b198:	18fb      	adds	r3, r7, r3
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	b25b      	sxtb	r3, r3
 800b19e:	1e5a      	subs	r2, r3, #1
 800b1a0:	4193      	sbcs	r3, r2
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	e01c      	b.n	800b1e0 <BMP280_get_measurement_values+0xf0>
    Error("BMP280 Invalid read of temperature.");
 800b1a6:	4a16      	ldr	r2, [pc, #88]	@ (800b200 <BMP280_get_measurement_values+0x110>)
 800b1a8:	4b11      	ldr	r3, [pc, #68]	@ (800b1f0 <BMP280_get_measurement_values+0x100>)
 800b1aa:	0019      	movs	r1, r3
 800b1ac:	2001      	movs	r0, #1
 800b1ae:	f008 f8cd 	bl	801334c <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800b1b2:	1d3b      	adds	r3, r7, #4
 800b1b4:	78db      	ldrb	r3, [r3, #3]
 800b1b6:	001d      	movs	r5, r3
 800b1b8:	1d3b      	adds	r3, r7, #4
 800b1ba:	791b      	ldrb	r3, [r3, #4]
 800b1bc:	0018      	movs	r0, r3
 800b1be:	1d3b      	adds	r3, r7, #4
 800b1c0:	795b      	ldrb	r3, [r3, #5]
 800b1c2:	001c      	movs	r4, r3
 800b1c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b1fc <BMP280_get_measurement_values+0x10c>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a0e      	ldr	r2, [pc, #56]	@ (800b204 <BMP280_get_measurement_values+0x114>)
 800b1ca:	490b      	ldr	r1, [pc, #44]	@ (800b1f8 <BMP280_get_measurement_values+0x108>)
 800b1cc:	9302      	str	r3, [sp, #8]
 800b1ce:	9401      	str	r4, [sp, #4]
 800b1d0:	9000      	str	r0, [sp, #0]
 800b1d2:	002b      	movs	r3, r5
 800b1d4:	2003      	movs	r0, #3
 800b1d6:	f008 f8b9 	bl	801334c <CreateLine>
    SetAllBlueLED();
 800b1da:	f006 ffc7 	bl	801216c <SetAllBlueLED>
    return false;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	b004      	add	sp, #16
 800b1e6:	bdb0      	pop	{r4, r5, r7, pc}
 800b1e8:	20000c28 	.word	0x20000c28
 800b1ec:	0802c058 	.word	0x0802c058
 800b1f0:	0802c028 	.word	0x0802c028
 800b1f4:	0802c084 	.word	0x0802c084
 800b1f8:	0802bd38 	.word	0x0802bd38
 800b1fc:	20000c24 	.word	0x20000c24
 800b200:	0802c0cc 	.word	0x0802c0cc
 800b204:	0802c0f0 	.word	0x0802c0f0

0800b208 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800b20e:	4b1e      	ldr	r3, [pc, #120]	@ (800b288 <BMP280_calc_temperature+0x80>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	10da      	asrs	r2, r3, #3
 800b218:	4b1c      	ldr	r3, [pc, #112]	@ (800b28c <BMP280_calc_temperature+0x84>)
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	4a1a      	ldr	r2, [pc, #104]	@ (800b28c <BMP280_calc_temperature+0x84>)
 800b222:	2102      	movs	r1, #2
 800b224:	5e52      	ldrsh	r2, [r2, r1]
 800b226:	4353      	muls	r3, r2
 800b228:	12db      	asrs	r3, r3, #11
 800b22a:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	111b      	asrs	r3, r3, #4
 800b230:	4a16      	ldr	r2, [pc, #88]	@ (800b28c <BMP280_calc_temperature+0x84>)
 800b232:	8812      	ldrh	r2, [r2, #0]
 800b234:	1a9b      	subs	r3, r3, r2
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	1112      	asrs	r2, r2, #4
 800b23a:	4914      	ldr	r1, [pc, #80]	@ (800b28c <BMP280_calc_temperature+0x84>)
 800b23c:	8809      	ldrh	r1, [r1, #0]
 800b23e:	1a52      	subs	r2, r2, r1
 800b240:	4353      	muls	r3, r2
 800b242:	131b      	asrs	r3, r3, #12
 800b244:	4a11      	ldr	r2, [pc, #68]	@ (800b28c <BMP280_calc_temperature+0x84>)
 800b246:	2104      	movs	r1, #4
 800b248:	5e52      	ldrsh	r2, [r2, r1]
 800b24a:	4353      	muls	r3, r2
 800b24c:	139b      	asrs	r3, r3, #14
 800b24e:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	18d2      	adds	r2, r2, r3
 800b256:	4b0e      	ldr	r3, [pc, #56]	@ (800b290 <BMP280_calc_temperature+0x88>)
 800b258:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800b25a:	4b0d      	ldr	r3, [pc, #52]	@ (800b290 <BMP280_calc_temperature+0x88>)
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	0013      	movs	r3, r2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	189b      	adds	r3, r3, r2
 800b264:	3380      	adds	r3, #128	@ 0x80
 800b266:	121b      	asrs	r3, r3, #8
 800b268:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800b26a:	68b8      	ldr	r0, [r7, #8]
 800b26c:	f7f6 fadc 	bl	8001828 <__aeabi_i2f>
 800b270:	1c03      	adds	r3, r0, #0
 800b272:	4908      	ldr	r1, [pc, #32]	@ (800b294 <BMP280_calc_temperature+0x8c>)
 800b274:	1c18      	adds	r0, r3, #0
 800b276:	f7f5 fd15 	bl	8000ca4 <__aeabi_fdiv>
 800b27a:	1c03      	adds	r3, r0, #0
 800b27c:	607b      	str	r3, [r7, #4]
  return airTemp;
 800b27e:	687b      	ldr	r3, [r7, #4]
}
 800b280:	1c18      	adds	r0, r3, #0
 800b282:	46bd      	mov	sp, r7
 800b284:	b006      	add	sp, #24
 800b286:	bd80      	pop	{r7, pc}
 800b288:	20000c24 	.word	0x20000c24
 800b28c:	20000c04 	.word	0x20000c04
 800b290:	20000c20 	.word	0x20000c20
 800b294:	42c80000 	.word	0x42c80000

0800b298 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800b29e:	4b4e      	ldr	r3, [pc, #312]	@ (800b3d8 <BMP280_calc_pressure+0x140>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800b2a4:	4b4d      	ldr	r3, [pc, #308]	@ (800b3dc <BMP280_calc_pressure+0x144>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	105b      	asrs	r3, r3, #1
 800b2aa:	4a4d      	ldr	r2, [pc, #308]	@ (800b3e0 <BMP280_calc_pressure+0x148>)
 800b2ac:	4694      	mov	ip, r2
 800b2ae:	4463      	add	r3, ip
 800b2b0:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	109b      	asrs	r3, r3, #2
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	1092      	asrs	r2, r2, #2
 800b2ba:	4353      	muls	r3, r2
 800b2bc:	12db      	asrs	r3, r3, #11
 800b2be:	4a49      	ldr	r2, [pc, #292]	@ (800b3e4 <BMP280_calc_pressure+0x14c>)
 800b2c0:	2110      	movs	r1, #16
 800b2c2:	5e52      	ldrsh	r2, [r2, r1]
 800b2c4:	4353      	muls	r3, r2
 800b2c6:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800b2c8:	4b46      	ldr	r3, [pc, #280]	@ (800b3e4 <BMP280_calc_pressure+0x14c>)
 800b2ca:	220e      	movs	r2, #14
 800b2cc:	5e9b      	ldrsh	r3, [r3, r2]
 800b2ce:	001a      	movs	r2, r3
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	4353      	muls	r3, r2
 800b2d4:	005b      	lsls	r3, r3, #1
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	18d3      	adds	r3, r2, r3
 800b2da:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	109a      	asrs	r2, r3, #2
 800b2e0:	4b40      	ldr	r3, [pc, #256]	@ (800b3e4 <BMP280_calc_pressure+0x14c>)
 800b2e2:	210c      	movs	r1, #12
 800b2e4:	5e5b      	ldrsh	r3, [r3, r1]
 800b2e6:	041b      	lsls	r3, r3, #16
 800b2e8:	18d3      	adds	r3, r2, r3
 800b2ea:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800b2ec:	4b3d      	ldr	r3, [pc, #244]	@ (800b3e4 <BMP280_calc_pressure+0x14c>)
 800b2ee:	220a      	movs	r2, #10
 800b2f0:	5e9b      	ldrsh	r3, [r3, r2]
 800b2f2:	0019      	movs	r1, r3
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	109b      	asrs	r3, r3, #2
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	1092      	asrs	r2, r2, #2
 800b2fc:	4353      	muls	r3, r2
 800b2fe:	135b      	asrs	r3, r3, #13
 800b300:	434b      	muls	r3, r1
 800b302:	10da      	asrs	r2, r3, #3
 800b304:	4b37      	ldr	r3, [pc, #220]	@ (800b3e4 <BMP280_calc_pressure+0x14c>)
 800b306:	2108      	movs	r1, #8
 800b308:	5e5b      	ldrsh	r3, [r3, r1]
 800b30a:	0019      	movs	r1, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	434b      	muls	r3, r1
 800b310:	105b      	asrs	r3, r3, #1
 800b312:	18d3      	adds	r3, r2, r3
 800b314:	149b      	asrs	r3, r3, #18
 800b316:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2280      	movs	r2, #128	@ 0x80
 800b31c:	0212      	lsls	r2, r2, #8
 800b31e:	4694      	mov	ip, r2
 800b320:	4463      	add	r3, ip
 800b322:	4a30      	ldr	r2, [pc, #192]	@ (800b3e4 <BMP280_calc_pressure+0x14c>)
 800b324:	88d2      	ldrh	r2, [r2, #6]
 800b326:	4353      	muls	r3, r2
 800b328:	13db      	asrs	r3, r3, #15
 800b32a:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d101      	bne.n	800b336 <BMP280_calc_pressure+0x9e>
    return 0;
 800b332:	2300      	movs	r3, #0
 800b334:	e04b      	b.n	800b3ce <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	2280      	movs	r2, #128	@ 0x80
 800b33a:	0352      	lsls	r2, r2, #13
 800b33c:	1ad2      	subs	r2, r2, r3
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	131b      	asrs	r3, r3, #12
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	001a      	movs	r2, r3
 800b346:	4b28      	ldr	r3, [pc, #160]	@ (800b3e8 <BMP280_calc_pressure+0x150>)
 800b348:	4353      	muls	r3, r2
 800b34a:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	db09      	blt.n	800b366 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	005b      	lsls	r3, r3, #1
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	0011      	movs	r1, r2
 800b35a:	0018      	movs	r0, r3
 800b35c:	f7f4 ff22 	bl	80001a4 <__udivsi3>
 800b360:	0003      	movs	r3, r0
 800b362:	617b      	str	r3, [r7, #20]
 800b364:	e007      	b.n	800b376 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	0019      	movs	r1, r3
 800b36a:	6978      	ldr	r0, [r7, #20]
 800b36c:	f7f4 ff1a 	bl	80001a4 <__udivsi3>
 800b370:	0003      	movs	r3, r0
 800b372:	005b      	lsls	r3, r3, #1
 800b374:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800b376:	4b1b      	ldr	r3, [pc, #108]	@ (800b3e4 <BMP280_calc_pressure+0x14c>)
 800b378:	2216      	movs	r2, #22
 800b37a:	5e9b      	ldrsh	r3, [r3, r2]
 800b37c:	0019      	movs	r1, r3
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	08db      	lsrs	r3, r3, #3
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	08d2      	lsrs	r2, r2, #3
 800b386:	4353      	muls	r3, r2
 800b388:	0b5b      	lsrs	r3, r3, #13
 800b38a:	434b      	muls	r3, r1
 800b38c:	131b      	asrs	r3, r3, #12
 800b38e:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	089b      	lsrs	r3, r3, #2
 800b394:	001a      	movs	r2, r3
 800b396:	4b13      	ldr	r3, [pc, #76]	@ (800b3e4 <BMP280_calc_pressure+0x14c>)
 800b398:	2114      	movs	r1, #20
 800b39a:	5e5b      	ldrsh	r3, [r3, r1]
 800b39c:	4353      	muls	r3, r2
 800b39e:	135b      	asrs	r3, r3, #13
 800b3a0:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	18d3      	adds	r3, r2, r3
 800b3a8:	4a0e      	ldr	r2, [pc, #56]	@ (800b3e4 <BMP280_calc_pressure+0x14c>)
 800b3aa:	2112      	movs	r1, #18
 800b3ac:	5e52      	ldrsh	r2, [r2, r1]
 800b3ae:	189b      	adds	r3, r3, r2
 800b3b0:	111a      	asrs	r2, r3, #4
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	18d3      	adds	r3, r2, r3
 800b3b6:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800b3b8:	6978      	ldr	r0, [r7, #20]
 800b3ba:	f7f6 fa85 	bl	80018c8 <__aeabi_ui2f>
 800b3be:	1c03      	adds	r3, r0, #0
 800b3c0:	490a      	ldr	r1, [pc, #40]	@ (800b3ec <BMP280_calc_pressure+0x154>)
 800b3c2:	1c18      	adds	r0, r3, #0
 800b3c4:	f7f5 fc6e 	bl	8000ca4 <__aeabi_fdiv>
 800b3c8:	1c03      	adds	r3, r0, #0
 800b3ca:	607b      	str	r3, [r7, #4]
  return airhPa;
 800b3cc:	687b      	ldr	r3, [r7, #4]
}
 800b3ce:	1c18      	adds	r0, r3, #0
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	b006      	add	sp, #24
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	46c0      	nop			@ (mov r8, r8)
 800b3d8:	20000c28 	.word	0x20000c28
 800b3dc:	20000c20 	.word	0x20000c20
 800b3e0:	ffff0600 	.word	0xffff0600
 800b3e4:	20000c04 	.word	0x20000c04
 800b3e8:	00000c35 	.word	0x00000c35
 800b3ec:	42c80000 	.word	0x42c80000

0800b3f0 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800b3f0:	b5b0      	push	{r4, r5, r7, lr}
 800b3f2:	b088      	sub	sp, #32
 800b3f4:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800b3f6:	4bc9      	ldr	r3, [pc, #804]	@ (800b71c <BMP_Upkeep+0x32c>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	0018      	movs	r0, r3
 800b3fc:	f007 ff50 	bl	80132a0 <TimestampIsReached>
 800b400:	0003      	movs	r3, r0
 800b402:	001a      	movs	r2, r3
 800b404:	2301      	movs	r3, #1
 800b406:	4053      	eors	r3, r2
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d002      	beq.n	800b414 <BMP_Upkeep+0x24>
    return BMPState;
 800b40e:	4bc4      	ldr	r3, [pc, #784]	@ (800b720 <BMP_Upkeep+0x330>)
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	e17f      	b.n	800b714 <BMP_Upkeep+0x324>
  }
  switch(BMPState) {
 800b414:	4bc2      	ldr	r3, [pc, #776]	@ (800b720 <BMP_Upkeep+0x330>)
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	2b09      	cmp	r3, #9
 800b41a:	d900      	bls.n	800b41e <BMP_Upkeep+0x2e>
 800b41c:	e163      	b.n	800b6e6 <BMP_Upkeep+0x2f6>
 800b41e:	009a      	lsls	r2, r3, #2
 800b420:	4bc0      	ldr	r3, [pc, #768]	@ (800b724 <BMP_Upkeep+0x334>)
 800b422:	18d3      	adds	r3, r2, r3
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 800b428:	4abf      	ldr	r2, [pc, #764]	@ (800b728 <BMP_Upkeep+0x338>)
 800b42a:	4bc0      	ldr	r3, [pc, #768]	@ (800b72c <BMP_Upkeep+0x33c>)
 800b42c:	0019      	movs	r1, r3
 800b42e:	2003      	movs	r0, #3
 800b430:	f007 ff8c 	bl	801334c <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800b434:	f008 fcca 	bl	8013dcc <HAL_GetTick>
 800b438:	0003      	movs	r3, r0
 800b43a:	4abd      	ldr	r2, [pc, #756]	@ (800b730 <BMP_Upkeep+0x340>)
 800b43c:	189a      	adds	r2, r3, r2
 800b43e:	4bb7      	ldr	r3, [pc, #732]	@ (800b71c <BMP_Upkeep+0x32c>)
 800b440:	601a      	str	r2, [r3, #0]
    break;
 800b442:	e165      	b.n	800b710 <BMP_Upkeep+0x320>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 800b444:	f001 ffea 	bl	800d41c <getSensorLock>
 800b448:	1e03      	subs	r3, r0, #0
 800b44a:	d000      	beq.n	800b44e <BMP_Upkeep+0x5e>
 800b44c:	e157      	b.n	800b6fe <BMP_Upkeep+0x30e>
      break;
    }
    setSensorLock(BMP280);
 800b44e:	2003      	movs	r0, #3
 800b450:	f001 ffd0 	bl	800d3f4 <setSensorLock>
    BMP280_reset();
 800b454:	f7ff fb74 	bl	800ab40 <BMP280_reset>
    HAL_Delay(10); // wait for deferred DMA transfers
 800b458:	200a      	movs	r0, #10
 800b45a:	f008 fcc1 	bl	8013de0 <HAL_Delay>
    setSensorLock(FREE);
 800b45e:	2000      	movs	r0, #0
 800b460:	f001 ffc8 	bl	800d3f4 <setSensorLock>
    BMPState = BMP_SET_CONFIG;
 800b464:	4bae      	ldr	r3, [pc, #696]	@ (800b720 <BMP_Upkeep+0x330>)
 800b466:	2201      	movs	r2, #1
 800b468:	701a      	strb	r2, [r3, #0]
    break;
 800b46a:	e151      	b.n	800b710 <BMP_Upkeep+0x320>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 800b46c:	f001 ffd6 	bl	800d41c <getSensorLock>
 800b470:	1e03      	subs	r3, r0, #0
 800b472:	d000      	beq.n	800b476 <BMP_Upkeep+0x86>
 800b474:	e145      	b.n	800b702 <BMP_Upkeep+0x312>
      break;
    }
    setSensorLock(BMP280);
 800b476:	2003      	movs	r0, #3
 800b478:	f001 ffbc 	bl	800d3f4 <setSensorLock>
    if (BMP280_set_config()) {
 800b47c:	f7ff fd94 	bl	800afa8 <BMP280_set_config>
 800b480:	1e03      	subs	r3, r0, #0
 800b482:	d003      	beq.n	800b48c <BMP_Upkeep+0x9c>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800b484:	4ba6      	ldr	r3, [pc, #664]	@ (800b720 <BMP_Upkeep+0x330>)
 800b486:	2202      	movs	r2, #2
 800b488:	701a      	strb	r2, [r3, #0]
 800b48a:	e00f      	b.n	800b4ac <BMP_Upkeep+0xbc>
    }
    else {
      Error("Error while configuring BMP280");
 800b48c:	4aa9      	ldr	r2, [pc, #676]	@ (800b734 <BMP_Upkeep+0x344>)
 800b48e:	4baa      	ldr	r3, [pc, #680]	@ (800b738 <BMP_Upkeep+0x348>)
 800b490:	0019      	movs	r1, r3
 800b492:	2001      	movs	r0, #1
 800b494:	f007 ff5a 	bl	801334c <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b498:	f008 fc98 	bl	8013dcc <HAL_GetTick>
 800b49c:	0003      	movs	r3, r0
 800b49e:	4aa7      	ldr	r2, [pc, #668]	@ (800b73c <BMP_Upkeep+0x34c>)
 800b4a0:	189a      	adds	r2, r3, r2
 800b4a2:	4b9e      	ldr	r3, [pc, #632]	@ (800b71c <BMP_Upkeep+0x32c>)
 800b4a4:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b4a6:	4b9e      	ldr	r3, [pc, #632]	@ (800b720 <BMP_Upkeep+0x330>)
 800b4a8:	2208      	movs	r2, #8
 800b4aa:	701a      	strb	r2, [r3, #0]
     }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b4ac:	200a      	movs	r0, #10
 800b4ae:	f008 fc97 	bl	8013de0 <HAL_Delay>
    setSensorLock(FREE);
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	f001 ff9e 	bl	800d3f4 <setSensorLock>
  break;
 800b4b8:	e12a      	b.n	800b710 <BMP_Upkeep+0x320>

  case BMP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b4ba:	f001 ffaf 	bl	800d41c <getSensorLock>
 800b4be:	1e03      	subs	r3, r0, #0
 800b4c0:	d030      	beq.n	800b524 <BMP_Upkeep+0x134>
      uint8_t locktype = getSensorLock();
 800b4c2:	1dfc      	adds	r4, r7, #7
 800b4c4:	f001 ffaa 	bl	800d41c <getSensorLock>
 800b4c8:	0003      	movs	r3, r0
 800b4ca:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 800b4cc:	1dfb      	adds	r3, r7, #7
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d019      	beq.n	800b508 <BMP_Upkeep+0x118>
 800b4d4:	1dfb      	adds	r3, r7, #7
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d013      	beq.n	800b504 <BMP_Upkeep+0x114>
 800b4dc:	1dfb      	adds	r3, r7, #7
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	2b05      	cmp	r3, #5
 800b4e2:	d00d      	beq.n	800b500 <BMP_Upkeep+0x110>
 800b4e4:	1dfb      	adds	r3, r7, #7
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d007      	beq.n	800b4fc <BMP_Upkeep+0x10c>
 800b4ec:	1dfb      	adds	r3, r7, #7
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	2b03      	cmp	r3, #3
 800b4f2:	d101      	bne.n	800b4f8 <BMP_Upkeep+0x108>
 800b4f4:	4b92      	ldr	r3, [pc, #584]	@ (800b740 <BMP_Upkeep+0x350>)
 800b4f6:	e008      	b.n	800b50a <BMP_Upkeep+0x11a>
 800b4f8:	4b92      	ldr	r3, [pc, #584]	@ (800b744 <BMP_Upkeep+0x354>)
 800b4fa:	e006      	b.n	800b50a <BMP_Upkeep+0x11a>
 800b4fc:	4b92      	ldr	r3, [pc, #584]	@ (800b748 <BMP_Upkeep+0x358>)
 800b4fe:	e004      	b.n	800b50a <BMP_Upkeep+0x11a>
 800b500:	4b92      	ldr	r3, [pc, #584]	@ (800b74c <BMP_Upkeep+0x35c>)
 800b502:	e002      	b.n	800b50a <BMP_Upkeep+0x11a>
 800b504:	4b92      	ldr	r3, [pc, #584]	@ (800b750 <BMP_Upkeep+0x360>)
 800b506:	e000      	b.n	800b50a <BMP_Upkeep+0x11a>
 800b508:	4b92      	ldr	r3, [pc, #584]	@ (800b754 <BMP_Upkeep+0x364>)
 800b50a:	4a93      	ldr	r2, [pc, #588]	@ (800b758 <BMP_Upkeep+0x368>)
 800b50c:	4987      	ldr	r1, [pc, #540]	@ (800b72c <BMP_Upkeep+0x33c>)
 800b50e:	2003      	movs	r0, #3
 800b510:	f007 ff1c 	bl	801334c <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 800b514:	f008 fc5a 	bl	8013dcc <HAL_GetTick>
 800b518:	0003      	movs	r3, r0
 800b51a:	3361      	adds	r3, #97	@ 0x61
 800b51c:	001a      	movs	r2, r3
 800b51e:	4b7f      	ldr	r3, [pc, #508]	@ (800b71c <BMP_Upkeep+0x32c>)
 800b520:	601a      	str	r2, [r3, #0]
      break;
 800b522:	e0f5      	b.n	800b710 <BMP_Upkeep+0x320>
    }
    if (getSensorLock() == FREE) {
 800b524:	f001 ff7a 	bl	800d41c <getSensorLock>
 800b528:	1e03      	subs	r3, r0, #0
 800b52a:	d105      	bne.n	800b538 <BMP_Upkeep+0x148>
      HAL_Delay(10);
 800b52c:	200a      	movs	r0, #10
 800b52e:	f008 fc57 	bl	8013de0 <HAL_Delay>
      setSensorLock(BMP280);
 800b532:	2003      	movs	r0, #3
 800b534:	f001 ff5e 	bl	800d3f4 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 800b538:	f7ff fd5a 	bl	800aff0 <BMP280_set_mode>
 800b53c:	1e03      	subs	r3, r0, #0
 800b53e:	d003      	beq.n	800b548 <BMP_Upkeep+0x158>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800b540:	4b77      	ldr	r3, [pc, #476]	@ (800b720 <BMP_Upkeep+0x330>)
 800b542:	2205      	movs	r2, #5
 800b544:	701a      	strb	r2, [r3, #0]
 800b546:	e00f      	b.n	800b568 <BMP_Upkeep+0x178>
    }
    else {
      Error("Error while setting BMP280 to forced mode");
 800b548:	4a84      	ldr	r2, [pc, #528]	@ (800b75c <BMP_Upkeep+0x36c>)
 800b54a:	4b7b      	ldr	r3, [pc, #492]	@ (800b738 <BMP_Upkeep+0x348>)
 800b54c:	0019      	movs	r1, r3
 800b54e:	2001      	movs	r0, #1
 800b550:	f007 fefc 	bl	801334c <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b554:	f008 fc3a 	bl	8013dcc <HAL_GetTick>
 800b558:	0003      	movs	r3, r0
 800b55a:	4a78      	ldr	r2, [pc, #480]	@ (800b73c <BMP_Upkeep+0x34c>)
 800b55c:	189a      	adds	r2, r3, r2
 800b55e:	4b6f      	ldr	r3, [pc, #444]	@ (800b71c <BMP_Upkeep+0x32c>)
 800b560:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b562:	4b6f      	ldr	r3, [pc, #444]	@ (800b720 <BMP_Upkeep+0x330>)
 800b564:	2208      	movs	r2, #8
 800b566:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b568:	200a      	movs	r0, #10
 800b56a:	f008 fc39 	bl	8013de0 <HAL_Delay>
    setSensorLock(FREE);
 800b56e:	2000      	movs	r0, #0
 800b570:	f001 ff40 	bl	800d3f4 <setSensorLock>
    break;
 800b574:	e0cc      	b.n	800b710 <BMP_Upkeep+0x320>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (getSensorLock() != FREE) {
 800b576:	f001 ff51 	bl	800d41c <getSensorLock>
 800b57a:	1e03      	subs	r3, r0, #0
 800b57c:	d000      	beq.n	800b580 <BMP_Upkeep+0x190>
 800b57e:	e0c2      	b.n	800b706 <BMP_Upkeep+0x316>
      break;
    }
    HAL_Delay(10);
 800b580:	200a      	movs	r0, #10
 800b582:	f008 fc2d 	bl	8013de0 <HAL_Delay>
    setSensorLock(BMP280);
 800b586:	2003      	movs	r0, #3
 800b588:	f001 ff34 	bl	800d3f4 <setSensorLock>
    if (BMP280_get_measurement_values()) {
 800b58c:	f7ff fdb0 	bl	800b0f0 <BMP280_get_measurement_values>
 800b590:	1e03      	subs	r3, r0, #0
 800b592:	d003      	beq.n	800b59c <BMP_Upkeep+0x1ac>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 800b594:	4b62      	ldr	r3, [pc, #392]	@ (800b720 <BMP_Upkeep+0x330>)
 800b596:	2203      	movs	r2, #3
 800b598:	701a      	strb	r2, [r3, #0]
 800b59a:	e00f      	b.n	800b5bc <BMP_Upkeep+0x1cc>
    }
    else {
      Error("BMP280 Error during reading measurement results array");
 800b59c:	4a70      	ldr	r2, [pc, #448]	@ (800b760 <BMP_Upkeep+0x370>)
 800b59e:	4b66      	ldr	r3, [pc, #408]	@ (800b738 <BMP_Upkeep+0x348>)
 800b5a0:	0019      	movs	r1, r3
 800b5a2:	2001      	movs	r0, #1
 800b5a4:	f007 fed2 	bl	801334c <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b5a8:	f008 fc10 	bl	8013dcc <HAL_GetTick>
 800b5ac:	0003      	movs	r3, r0
 800b5ae:	4a63      	ldr	r2, [pc, #396]	@ (800b73c <BMP_Upkeep+0x34c>)
 800b5b0:	189a      	adds	r2, r3, r2
 800b5b2:	4b5a      	ldr	r3, [pc, #360]	@ (800b71c <BMP_Upkeep+0x32c>)
 800b5b4:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b5b6:	4b5a      	ldr	r3, [pc, #360]	@ (800b720 <BMP_Upkeep+0x330>)
 800b5b8:	2208      	movs	r2, #8
 800b5ba:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b5bc:	200a      	movs	r0, #10
 800b5be:	f008 fc0f 	bl	8013de0 <HAL_Delay>
    setSensorLock(FREE);
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	f001 ff16 	bl	800d3f4 <setSensorLock>
  break;
 800b5c8:	e0a2      	b.n	800b710 <BMP_Upkeep+0x320>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800b5ca:	f7ff fe1d 	bl	800b208 <BMP280_calc_temperature>
 800b5ce:	1c03      	adds	r3, r0, #0
 800b5d0:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 800b5d2:	f7ff fe61 	bl	800b298 <BMP280_calc_pressure>
 800b5d6:	1c03      	adds	r3, r0, #0
 800b5d8:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800b5da:	4962      	ldr	r1, [pc, #392]	@ (800b764 <BMP_Upkeep+0x374>)
 800b5dc:	68b8      	ldr	r0, [r7, #8]
 800b5de:	f7f4 ffbb 	bl	8000558 <__aeabi_fcmpgt>
 800b5e2:	1e03      	subs	r3, r0, #0
 800b5e4:	d049      	beq.n	800b67a <BMP_Upkeep+0x28a>
 800b5e6:	4960      	ldr	r1, [pc, #384]	@ (800b768 <BMP_Upkeep+0x378>)
 800b5e8:	68b8      	ldr	r0, [r7, #8]
 800b5ea:	f7f4 ffa1 	bl	8000530 <__aeabi_fcmplt>
 800b5ee:	1e03      	subs	r3, r0, #0
 800b5f0:	d043      	beq.n	800b67a <BMP_Upkeep+0x28a>
      bmp280samplecounter++;
 800b5f2:	4b5e      	ldr	r3, [pc, #376]	@ (800b76c <BMP_Upkeep+0x37c>)
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	b2da      	uxtb	r2, r3
 800b5fa:	4b5c      	ldr	r3, [pc, #368]	@ (800b76c <BMP_Upkeep+0x37c>)
 800b5fc:	701a      	strb	r2, [r3, #0]
      if (bmp280samplecounter == 2) {
 800b5fe:	4b5b      	ldr	r3, [pc, #364]	@ (800b76c <BMP_Upkeep+0x37c>)
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b02      	cmp	r3, #2
 800b604:	d114      	bne.n	800b630 <BMP_Upkeep+0x240>
        Info("BMP280 barometric value: %.2fhPa  airtemperature: %2.2fC", airhpa, airtemp);
 800b606:	68b8      	ldr	r0, [r7, #8]
 800b608:	f7f8 f944 	bl	8003894 <__aeabi_f2d>
 800b60c:	0004      	movs	r4, r0
 800b60e:	000d      	movs	r5, r1
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f7f8 f93f 	bl	8003894 <__aeabi_f2d>
 800b616:	0002      	movs	r2, r0
 800b618:	000b      	movs	r3, r1
 800b61a:	4855      	ldr	r0, [pc, #340]	@ (800b770 <BMP_Upkeep+0x380>)
 800b61c:	4955      	ldr	r1, [pc, #340]	@ (800b774 <BMP_Upkeep+0x384>)
 800b61e:	9202      	str	r2, [sp, #8]
 800b620:	9303      	str	r3, [sp, #12]
 800b622:	9400      	str	r4, [sp, #0]
 800b624:	9501      	str	r5, [sp, #4]
 800b626:	0002      	movs	r2, r0
 800b628:	2002      	movs	r0, #2
 800b62a:	f007 fe8f 	bl	801334c <CreateLine>
 800b62e:	e006      	b.n	800b63e <BMP_Upkeep+0x24e>
      }
      else {
        if (bmp280samplecounter == 11) {
 800b630:	4b4e      	ldr	r3, [pc, #312]	@ (800b76c <BMP_Upkeep+0x37c>)
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	2b0b      	cmp	r3, #11
 800b636:	d102      	bne.n	800b63e <BMP_Upkeep+0x24e>
          bmp280samplecounter = 0;
 800b638:	4b4c      	ldr	r3, [pc, #304]	@ (800b76c <BMP_Upkeep+0x37c>)
 800b63a:	2200      	movs	r2, #0
 800b63c:	701a      	strb	r2, [r3, #0]
        }
      }


      setBMP280(airtemp, airhpa);
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	1c11      	adds	r1, r2, #0
 800b644:	1c18      	adds	r0, r3, #0
 800b646:	f7f9 fa2f 	bl	8004aa8 <setBMP280>
      if (Check_USB_PowerOn()) {
 800b64a:	f7fd fe03 	bl	8009254 <Check_USB_PowerOn>
 800b64e:	1e03      	subs	r3, r0, #0
 800b650:	d00a      	beq.n	800b668 <BMP_Upkeep+0x278>
        BMP280TimeStamp = HAL_GetTick() + 60000;
 800b652:	f008 fbbb 	bl	8013dcc <HAL_GetTick>
 800b656:	0003      	movs	r3, r0
 800b658:	4a47      	ldr	r2, [pc, #284]	@ (800b778 <BMP_Upkeep+0x388>)
 800b65a:	189a      	adds	r2, r3, r2
 800b65c:	4b2f      	ldr	r3, [pc, #188]	@ (800b71c <BMP_Upkeep+0x32c>)
 800b65e:	601a      	str	r2, [r3, #0]
        bmp280samplecounter = 1;
 800b660:	4b42      	ldr	r3, [pc, #264]	@ (800b76c <BMP_Upkeep+0x37c>)
 800b662:	2201      	movs	r2, #1
 800b664:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800b666:	e015      	b.n	800b694 <BMP_Upkeep+0x2a4>
      }
      else {
        BMP280TimeStamp = HAL_GetTick() + 1000;
 800b668:	f008 fbb0 	bl	8013dcc <HAL_GetTick>
 800b66c:	0003      	movs	r3, r0
 800b66e:	22fa      	movs	r2, #250	@ 0xfa
 800b670:	0092      	lsls	r2, r2, #2
 800b672:	189a      	adds	r2, r3, r2
 800b674:	4b29      	ldr	r3, [pc, #164]	@ (800b71c <BMP_Upkeep+0x32c>)
 800b676:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800b678:	e00c      	b.n	800b694 <BMP_Upkeep+0x2a4>
      }
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800b67a:	4a40      	ldr	r2, [pc, #256]	@ (800b77c <BMP_Upkeep+0x38c>)
 800b67c:	4b2e      	ldr	r3, [pc, #184]	@ (800b738 <BMP_Upkeep+0x348>)
 800b67e:	0019      	movs	r1, r3
 800b680:	2001      	movs	r0, #1
 800b682:	f007 fe63 	bl	801334c <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b686:	f008 fba1 	bl	8013dcc <HAL_GetTick>
 800b68a:	0003      	movs	r3, r0
 800b68c:	4a2b      	ldr	r2, [pc, #172]	@ (800b73c <BMP_Upkeep+0x34c>)
 800b68e:	189a      	adds	r2, r3, r2
 800b690:	4b22      	ldr	r3, [pc, #136]	@ (800b71c <BMP_Upkeep+0x32c>)
 800b692:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800b694:	4b22      	ldr	r3, [pc, #136]	@ (800b720 <BMP_Upkeep+0x330>)
 800b696:	2208      	movs	r2, #8
 800b698:	701a      	strb	r2, [r3, #0]
    break;
 800b69a:	e039      	b.n	800b710 <BMP_Upkeep+0x320>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 800b69c:	4b20      	ldr	r3, [pc, #128]	@ (800b720 <BMP_Upkeep+0x330>)
 800b69e:	2209      	movs	r2, #9
 800b6a0:	701a      	strb	r2, [r3, #0]
    break;
 800b6a2:	e035      	b.n	800b710 <BMP_Upkeep+0x320>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 800b6a4:	f001 feba 	bl	800d41c <getSensorLock>
 800b6a8:	1e03      	subs	r3, r0, #0
 800b6aa:	d12e      	bne.n	800b70a <BMP_Upkeep+0x31a>
      break;
    }
    setSensorLock(BMP280);
 800b6ac:	2003      	movs	r0, #3
 800b6ae:	f001 fea1 	bl	800d3f4 <setSensorLock>
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 800b6b2:	f7ff fcf1 	bl	800b098 <BMP280_get_mode>
 800b6b6:	0003      	movs	r3, r0
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	d103      	bne.n	800b6c4 <BMP_Upkeep+0x2d4>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800b6bc:	4b18      	ldr	r3, [pc, #96]	@ (800b720 <BMP_Upkeep+0x330>)
 800b6be:	2205      	movs	r2, #5
 800b6c0:	701a      	strb	r2, [r3, #0]
 800b6c2:	e002      	b.n	800b6ca <BMP_Upkeep+0x2da>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800b6c4:	4b16      	ldr	r3, [pc, #88]	@ (800b720 <BMP_Upkeep+0x330>)
 800b6c6:	2202      	movs	r2, #2
 800b6c8:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b6ca:	200a      	movs	r0, #10
 800b6cc:	f008 fb88 	bl	8013de0 <HAL_Delay>
    setSensorLock(FREE);
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	f001 fe8f 	bl	800d3f4 <setSensorLock>
    BMP280TimeStamp = HAL_GetTick() + 23;
 800b6d6:	f008 fb79 	bl	8013dcc <HAL_GetTick>
 800b6da:	0003      	movs	r3, r0
 800b6dc:	3317      	adds	r3, #23
 800b6de:	001a      	movs	r2, r3
 800b6e0:	4b0e      	ldr	r3, [pc, #56]	@ (800b71c <BMP_Upkeep+0x32c>)
 800b6e2:	601a      	str	r2, [r3, #0]
    break;
 800b6e4:	e014      	b.n	800b710 <BMP_Upkeep+0x320>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 800b6e6:	4b0e      	ldr	r3, [pc, #56]	@ (800b720 <BMP_Upkeep+0x330>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800b6ec:	f001 fe96 	bl	800d41c <getSensorLock>
 800b6f0:	0003      	movs	r3, r0
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	d10b      	bne.n	800b70e <BMP_Upkeep+0x31e>
      setSensorLock(FREE);
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	f001 fe7c 	bl	800d3f4 <setSensorLock>
    }
    break;
 800b6fc:	e007      	b.n	800b70e <BMP_Upkeep+0x31e>
      break;
 800b6fe:	46c0      	nop			@ (mov r8, r8)
 800b700:	e006      	b.n	800b710 <BMP_Upkeep+0x320>
      break;
 800b702:	46c0      	nop			@ (mov r8, r8)
 800b704:	e004      	b.n	800b710 <BMP_Upkeep+0x320>
      break;
 800b706:	46c0      	nop			@ (mov r8, r8)
 800b708:	e002      	b.n	800b710 <BMP_Upkeep+0x320>
      break;
 800b70a:	46c0      	nop			@ (mov r8, r8)
 800b70c:	e000      	b.n	800b710 <BMP_Upkeep+0x320>
    break;
 800b70e:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800b710:	4b03      	ldr	r3, [pc, #12]	@ (800b720 <BMP_Upkeep+0x330>)
 800b712:	781b      	ldrb	r3, [r3, #0]
}
 800b714:	0018      	movs	r0, r3
 800b716:	46bd      	mov	sp, r7
 800b718:	b004      	add	sp, #16
 800b71a:	bdb0      	pop	{r4, r5, r7, pc}
 800b71c:	20000c2c 	.word	0x20000c2c
 800b720:	20000096 	.word	0x20000096
 800b724:	0802dc1c 	.word	0x0802dc1c
 800b728:	0802c138 	.word	0x0802c138
 800b72c:	0802bd38 	.word	0x0802bd38
 800b730:	002f9b80 	.word	0x002f9b80
 800b734:	0802c174 	.word	0x0802c174
 800b738:	0802c028 	.word	0x0802c028
 800b73c:	00002710 	.word	0x00002710
 800b740:	0802c194 	.word	0x0802c194
 800b744:	0802c19c 	.word	0x0802c19c
 800b748:	0802c1a4 	.word	0x0802c1a4
 800b74c:	0802c1ac 	.word	0x0802c1ac
 800b750:	0802c1b4 	.word	0x0802c1b4
 800b754:	0802c1bc 	.word	0x0802c1bc
 800b758:	0802c1c4 	.word	0x0802c1c4
 800b75c:	0802c1ec 	.word	0x0802c1ec
 800b760:	0802c218 	.word	0x0802c218
 800b764:	44548000 	.word	0x44548000
 800b768:	44898000 	.word	0x44898000
 800b76c:	20000c1c 	.word	0x20000c1c
 800b770:	0802c250 	.word	0x0802c250
 800b774:	0802bd18 	.word	0x0802bd18
 800b778:	0000ea60 	.word	0x0000ea60
 800b77c:	0802c28c 	.word	0x0802c28c

0800b780 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b786:	4b10      	ldr	r3, [pc, #64]	@ (800b7c8 <MX_DMA_Init+0x48>)
 800b788:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b78a:	4b0f      	ldr	r3, [pc, #60]	@ (800b7c8 <MX_DMA_Init+0x48>)
 800b78c:	2101      	movs	r1, #1
 800b78e:	430a      	orrs	r2, r1
 800b790:	631a      	str	r2, [r3, #48]	@ 0x30
 800b792:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c8 <MX_DMA_Init+0x48>)
 800b794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b796:	2201      	movs	r2, #1
 800b798:	4013      	ands	r3, r2
 800b79a:	607b      	str	r3, [r7, #4]
 800b79c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	200a      	movs	r0, #10
 800b7a4:	f008 ffb6 	bl	8014714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800b7a8:	200a      	movs	r0, #10
 800b7aa:	f008 ffc8 	bl	801473e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	2103      	movs	r1, #3
 800b7b2:	200b      	movs	r0, #11
 800b7b4:	f008 ffae 	bl	8014714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800b7b8:	200b      	movs	r0, #11
 800b7ba:	f008 ffc0 	bl	801473e <HAL_NVIC_EnableIRQ>

}
 800b7be:	46c0      	nop			@ (mov r8, r8)
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	b002      	add	sp, #8
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	46c0      	nop			@ (mov r8, r8)
 800b7c8:	40021000 	.word	0x40021000

0800b7cc <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b7cc:	b590      	push	{r4, r7, lr}
 800b7ce:	b087      	sub	sp, #28
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	1dbb      	adds	r3, r7, #6
 800b7d8:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800b7da:	4b17      	ldr	r3, [pc, #92]	@ (800b838 <WriteUint8ArrayEeprom+0x6c>)
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b7e0:	f009 fb2a 	bl	8014e38 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800b7e4:	2316      	movs	r3, #22
 800b7e6:	18fb      	adds	r3, r7, r3
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	801a      	strh	r2, [r3, #0]
 800b7ec:	e015      	b.n	800b81a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800b7ee:	4b12      	ldr	r3, [pc, #72]	@ (800b838 <WriteUint8ArrayEeprom+0x6c>)
 800b7f0:	6819      	ldr	r1, [r3, #0]
 800b7f2:	2416      	movs	r4, #22
 800b7f4:	193b      	adds	r3, r7, r4
 800b7f6:	881b      	ldrh	r3, [r3, #0]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	18d3      	adds	r3, r2, r3
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	001a      	movs	r2, r3
 800b800:	2000      	movs	r0, #0
 800b802:	f009 fb81 	bl	8014f08 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800b806:	4b0c      	ldr	r3, [pc, #48]	@ (800b838 <WriteUint8ArrayEeprom+0x6c>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	1c5a      	adds	r2, r3, #1
 800b80c:	4b0a      	ldr	r3, [pc, #40]	@ (800b838 <WriteUint8ArrayEeprom+0x6c>)
 800b80e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b810:	193b      	adds	r3, r7, r4
 800b812:	881a      	ldrh	r2, [r3, #0]
 800b814:	193b      	adds	r3, r7, r4
 800b816:	3201      	adds	r2, #1
 800b818:	801a      	strh	r2, [r3, #0]
 800b81a:	2316      	movs	r3, #22
 800b81c:	18fa      	adds	r2, r7, r3
 800b81e:	1dbb      	adds	r3, r7, #6
 800b820:	8812      	ldrh	r2, [r2, #0]
 800b822:	881b      	ldrh	r3, [r3, #0]
 800b824:	429a      	cmp	r2, r3
 800b826:	d3e2      	bcc.n	800b7ee <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b828:	f009 fb34 	bl	8014e94 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800b82c:	4b02      	ldr	r3, [pc, #8]	@ (800b838 <WriteUint8ArrayEeprom+0x6c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
}
 800b830:	0018      	movs	r0, r3
 800b832:	46bd      	mov	sp, r7
 800b834:	b007      	add	sp, #28
 800b836:	bd90      	pop	{r4, r7, pc}
 800b838:	20000c50 	.word	0x20000c50

0800b83c <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	0019      	movs	r1, r3
 800b848:	1dbb      	adds	r3, r7, #6
 800b84a:	801a      	strh	r2, [r3, #0]
 800b84c:	1d3b      	adds	r3, r7, #4
 800b84e:	1c0a      	adds	r2, r1, #0
 800b850:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800b852:	1dba      	adds	r2, r7, #6
 800b854:	1d3b      	adds	r3, r7, #4
 800b856:	8812      	ldrh	r2, [r2, #0]
 800b858:	881b      	ldrh	r3, [r3, #0]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d806      	bhi.n	800b86c <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800b85e:	1dbb      	adds	r3, r7, #6
 800b860:	881a      	ldrh	r2, [r3, #0]
 800b862:	68b9      	ldr	r1, [r7, #8]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	0018      	movs	r0, r3
 800b868:	f7ff ffb0 	bl	800b7cc <WriteUint8ArrayEeprom>
    }
}
 800b86c:	46c0      	nop			@ (mov r8, r8)
 800b86e:	46bd      	mov	sp, r7
 800b870:	b004      	add	sp, #16
 800b872:	bd80      	pop	{r7, pc}

0800b874 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	1dbb      	adds	r3, r7, #6
 800b880:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b882:	2316      	movs	r3, #22
 800b884:	18fb      	adds	r3, r7, r3
 800b886:	2200      	movs	r2, #0
 800b888:	801a      	strh	r2, [r3, #0]
 800b88a:	e010      	b.n	800b8ae <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800b88c:	2016      	movs	r0, #22
 800b88e:	183b      	adds	r3, r7, r0
 800b890:	881a      	ldrh	r2, [r3, #0]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	18d3      	adds	r3, r2, r3
 800b896:	0019      	movs	r1, r3
 800b898:	183b      	adds	r3, r7, r0
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	18d3      	adds	r3, r2, r3
 800b8a0:	780a      	ldrb	r2, [r1, #0]
 800b8a2:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b8a4:	183b      	adds	r3, r7, r0
 800b8a6:	881a      	ldrh	r2, [r3, #0]
 800b8a8:	183b      	adds	r3, r7, r0
 800b8aa:	3201      	adds	r2, #1
 800b8ac:	801a      	strh	r2, [r3, #0]
 800b8ae:	2316      	movs	r3, #22
 800b8b0:	18fa      	adds	r2, r7, r3
 800b8b2:	1dbb      	adds	r3, r7, #6
 800b8b4:	8812      	ldrh	r2, [r2, #0]
 800b8b6:	881b      	ldrh	r3, [r3, #0]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d3e7      	bcc.n	800b88c <ReadUint8ArrayEEprom+0x18>
    }
}
 800b8bc:	46c0      	nop			@ (mov r8, r8)
 800b8be:	46c0      	nop			@ (mov r8, r8)
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	b006      	add	sp, #24
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800b8c6:	b590      	push	{r4, r7, lr}
 800b8c8:	b085      	sub	sp, #20
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
 800b8ce:	000a      	movs	r2, r1
 800b8d0:	1cbb      	adds	r3, r7, #2
 800b8d2:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b8d4:	f009 fab0 	bl	8014e38 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800b8d8:	230e      	movs	r3, #14
 800b8da:	18fb      	adds	r3, r7, r3
 800b8dc:	2200      	movs	r2, #0
 800b8de:	801a      	strh	r2, [r3, #0]
 800b8e0:	e00c      	b.n	800b8fc <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800b8e2:	240e      	movs	r4, #14
 800b8e4:	193b      	adds	r3, r7, r4
 800b8e6:	881a      	ldrh	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	18d3      	adds	r3, r2, r3
 800b8ec:	0018      	movs	r0, r3
 800b8ee:	f009 fadf 	bl	8014eb0 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800b8f2:	193b      	adds	r3, r7, r4
 800b8f4:	193a      	adds	r2, r7, r4
 800b8f6:	8812      	ldrh	r2, [r2, #0]
 800b8f8:	3204      	adds	r2, #4
 800b8fa:	801a      	strh	r2, [r3, #0]
 800b8fc:	230e      	movs	r3, #14
 800b8fe:	18fa      	adds	r2, r7, r3
 800b900:	1cbb      	adds	r3, r7, #2
 800b902:	8812      	ldrh	r2, [r2, #0]
 800b904:	881b      	ldrh	r3, [r3, #0]
 800b906:	429a      	cmp	r2, r3
 800b908:	d3eb      	bcc.n	800b8e2 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b90a:	f009 fac3 	bl	8014e94 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800b90e:	46c0      	nop			@ (mov r8, r8)
 800b910:	46bd      	mov	sp, r7
 800b912:	b005      	add	sp, #20
 800b914:	bd90      	pop	{r4, r7, pc}
	...

0800b918 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2b7f      	cmp	r3, #127	@ 0x7f
 800b928:	d901      	bls.n	800b92e <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800b92a:	237f      	movs	r3, #127	@ 0x7f
 800b92c:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800b92e:	2017      	movs	r0, #23
 800b930:	183b      	adds	r3, r7, r0
 800b932:	490d      	ldr	r1, [pc, #52]	@ (800b968 <accessLUT10log10+0x50>)
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	188a      	adds	r2, r1, r2
 800b938:	7812      	ldrb	r2, [r2, #0]
 800b93a:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800b93c:	0001      	movs	r1, r0
 800b93e:	187b      	adds	r3, r7, r1
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	2206      	movs	r2, #6
 800b944:	4113      	asrs	r3, r2
 800b946:	001a      	movs	r2, r3
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800b94c:	187b      	adds	r3, r7, r1
 800b94e:	781a      	ldrb	r2, [r3, #0]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2106      	movs	r1, #6
 800b956:	408b      	lsls	r3, r1
 800b958:	1ad2      	subs	r2, r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	601a      	str	r2, [r3, #0]
}
 800b95e:	46c0      	nop			@ (mov r8, r8)
 800b960:	46bd      	mov	sp, r7
 800b962:	b006      	add	sp, #24
 800b964:	bd80      	pop	{r7, pc}
 800b966:	46c0      	nop			@ (mov r8, r8)
 800b968:	0802dc44 	.word	0x0802dc44

0800b96c <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800b96c:	b5b0      	push	{r4, r5, r7, lr}
 800b96e:	b090      	sub	sp, #64	@ 0x40
 800b970:	af00      	add	r7, sp, #0
 800b972:	6138      	str	r0, [r7, #16]
 800b974:	6179      	str	r1, [r7, #20]
 800b976:	60fa      	str	r2, [r7, #12]
 800b978:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800b97a:	2308      	movs	r3, #8
 800b97c:	001a      	movs	r2, r3
 800b97e:	3a20      	subs	r2, #32
 800b980:	2a00      	cmp	r2, #0
 800b982:	db03      	blt.n	800b98c <efficient10log10+0x20>
 800b984:	2101      	movs	r1, #1
 800b986:	4091      	lsls	r1, r2
 800b988:	000d      	movs	r5, r1
 800b98a:	e008      	b.n	800b99e <efficient10log10+0x32>
 800b98c:	2220      	movs	r2, #32
 800b98e:	1ad2      	subs	r2, r2, r3
 800b990:	2101      	movs	r1, #1
 800b992:	40d1      	lsrs	r1, r2
 800b994:	000a      	movs	r2, r1
 800b996:	2100      	movs	r1, #0
 800b998:	4099      	lsls	r1, r3
 800b99a:	000d      	movs	r5, r1
 800b99c:	4315      	orrs	r5, r2
 800b99e:	2201      	movs	r2, #1
 800b9a0:	409a      	lsls	r2, r3
 800b9a2:	0014      	movs	r4, r2
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	4252      	negs	r2, r2
 800b9a8:	17d3      	asrs	r3, r2, #31
 800b9aa:	1912      	adds	r2, r2, r4
 800b9ac:	416b      	adcs	r3, r5
 800b9ae:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9b0:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800b9b2:	2336      	movs	r3, #54	@ 0x36
 800b9b4:	2208      	movs	r2, #8
 800b9b6:	189b      	adds	r3, r3, r2
 800b9b8:	19db      	adds	r3, r3, r7
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800b9be:	e017      	b.n	800b9f0 <efficient10log10+0x84>
    {
        P = P >> 1;
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	07db      	lsls	r3, r3, #31
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	0852      	lsrs	r2, r2, #1
 800b9c8:	603a      	str	r2, [r7, #0]
 800b9ca:	683a      	ldr	r2, [r7, #0]
 800b9cc:	431a      	orrs	r2, r3
 800b9ce:	603a      	str	r2, [r7, #0]
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	085b      	lsrs	r3, r3, #1
 800b9d4:	607b      	str	r3, [r7, #4]
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	687c      	ldr	r4, [r7, #4]
 800b9da:	613b      	str	r3, [r7, #16]
 800b9dc:	617c      	str	r4, [r7, #20]
        bShift++;
 800b9de:	2136      	movs	r1, #54	@ 0x36
 800b9e0:	2008      	movs	r0, #8
 800b9e2:	180b      	adds	r3, r1, r0
 800b9e4:	19db      	adds	r3, r3, r7
 800b9e6:	881a      	ldrh	r2, [r3, #0]
 800b9e8:	180b      	adds	r3, r1, r0
 800b9ea:	19db      	adds	r3, r3, r7
 800b9ec:	3201      	adds	r2, #1
 800b9ee:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800b9f0:	697a      	ldr	r2, [r7, #20]
 800b9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d8e3      	bhi.n	800b9c0 <efficient10log10+0x54>
 800b9f8:	697a      	ldr	r2, [r7, #20]
 800b9fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d103      	bne.n	800ba08 <efficient10log10+0x9c>
 800ba00:	693a      	ldr	r2, [r7, #16]
 800ba02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d8db      	bhi.n	800b9c0 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800ba08:	693a      	ldr	r2, [r7, #16]
 800ba0a:	2308      	movs	r3, #8
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	2101      	movs	r1, #1
 800ba10:	4099      	lsls	r1, r3
 800ba12:	000b      	movs	r3, r1
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800ba20:	231c      	movs	r3, #28
 800ba22:	2408      	movs	r4, #8
 800ba24:	191b      	adds	r3, r3, r4
 800ba26:	19da      	adds	r2, r3, r7
 800ba28:	2320      	movs	r3, #32
 800ba2a:	191b      	adds	r3, r3, r4
 800ba2c:	19d9      	adds	r1, r3, r7
 800ba2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba30:	0018      	movs	r0, r3
 800ba32:	f7ff ff71 	bl	800b918 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800ba36:	2215      	movs	r2, #21
 800ba38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3a:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800ba3c:	2036      	movs	r0, #54	@ 0x36
 800ba3e:	1902      	adds	r2, r0, r4
 800ba40:	19d2      	adds	r2, r2, r7
 800ba42:	8812      	ldrh	r2, [r2, #0]
 800ba44:	2103      	movs	r1, #3
 800ba46:	434a      	muls	r2, r1
 800ba48:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800ba4a:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800ba4c:	0021      	movs	r1, r4
 800ba4e:	1843      	adds	r3, r0, r1
 800ba50:	19db      	adds	r3, r3, r7
 800ba52:	881b      	ldrh	r3, [r3, #0]
 800ba54:	2201      	movs	r2, #1
 800ba56:	4353      	muls	r3, r2
 800ba58:	2203      	movs	r2, #3
 800ba5a:	4113      	asrs	r3, r2
 800ba5c:	001a      	movs	r2, r3
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba60:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800ba62:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800ba64:	2314      	movs	r3, #20
 800ba66:	185b      	adds	r3, r3, r1
 800ba68:	19da      	adds	r2, r3, r7
 800ba6a:	2318      	movs	r3, #24
 800ba6c:	185b      	adds	r3, r3, r1
 800ba6e:	19db      	adds	r3, r3, r7
 800ba70:	0011      	movs	r1, r2
 800ba72:	0018      	movs	r0, r3
 800ba74:	f000 f80a 	bl	800ba8c <correctIntFracNumber>
    integerPart[0] = intPart;
 800ba78:	6a3a      	ldr	r2, [r7, #32]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800ba7e:	69fa      	ldr	r2, [r7, #28]
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	601a      	str	r2, [r3, #0]
}
 800ba84:	46c0      	nop			@ (mov r8, r8)
 800ba86:	46bd      	mov	sp, r7
 800ba88:	b010      	add	sp, #64	@ 0x40
 800ba8a:	bdb0      	pop	{r4, r5, r7, pc}

0800ba8c <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800ba96:	e00a      	b.n	800baae <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	1c5a      	adds	r2, r3, #1
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3b0a      	subs	r3, #10
 800baa8:	001a      	movs	r2, r3
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b09      	cmp	r3, #9
 800bab4:	dcf0      	bgt.n	800ba98 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800bab6:	e00a      	b.n	800bace <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	1e5a      	subs	r2, r3, #1
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	330a      	adds	r3, #10
 800bac8:	001a      	movs	r2, r3
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3309      	adds	r3, #9
 800bad4:	dbf0      	blt.n	800bab8 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	da0f      	bge.n	800bafe <correctIntFracNumber+0x72>
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	dd0b      	ble.n	800bafe <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	1c5a      	adds	r2, r3, #1
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3b0a      	subs	r3, #10
 800baf6:	001a      	movs	r2, r3
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800bafc:	e012      	b.n	800bb24 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	dd0e      	ble.n	800bb24 <correctIntFracNumber+0x98>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	da0a      	bge.n	800bb24 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	1e5a      	subs	r2, r3, #1
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	330a      	adds	r3, #10
 800bb1e:	001a      	movs	r2, r3
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	601a      	str	r2, [r3, #0]
}
 800bb24:	46c0      	nop			@ (mov r8, r8)
 800bb26:	46bd      	mov	sp, r7
 800bb28:	b002      	add	sp, #8
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800bb2c:	b590      	push	{r4, r7, lr}
 800bb2e:	b08b      	sub	sp, #44	@ 0x2c
 800bb30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb32:	2414      	movs	r4, #20
 800bb34:	193b      	adds	r3, r7, r4
 800bb36:	0018      	movs	r0, r3
 800bb38:	2314      	movs	r3, #20
 800bb3a:	001a      	movs	r2, r3
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	f019 fef9 	bl	8025934 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bb42:	4b8a      	ldr	r3, [pc, #552]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bb44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb46:	4b89      	ldr	r3, [pc, #548]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bb48:	2104      	movs	r1, #4
 800bb4a:	430a      	orrs	r2, r1
 800bb4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bb4e:	4b87      	ldr	r3, [pc, #540]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bb50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb52:	2204      	movs	r2, #4
 800bb54:	4013      	ands	r3, r2
 800bb56:	613b      	str	r3, [r7, #16]
 800bb58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bb5a:	4b84      	ldr	r3, [pc, #528]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bb5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb5e:	4b83      	ldr	r3, [pc, #524]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bb60:	2180      	movs	r1, #128	@ 0x80
 800bb62:	430a      	orrs	r2, r1
 800bb64:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bb66:	4b81      	ldr	r3, [pc, #516]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bb68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb6a:	2280      	movs	r2, #128	@ 0x80
 800bb6c:	4013      	ands	r3, r2
 800bb6e:	60fb      	str	r3, [r7, #12]
 800bb70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb72:	4b7e      	ldr	r3, [pc, #504]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bb74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb76:	4b7d      	ldr	r3, [pc, #500]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bb78:	2101      	movs	r1, #1
 800bb7a:	430a      	orrs	r2, r1
 800bb7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bb7e:	4b7b      	ldr	r3, [pc, #492]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bb80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb82:	2201      	movs	r2, #1
 800bb84:	4013      	ands	r3, r2
 800bb86:	60bb      	str	r3, [r7, #8]
 800bb88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bb8a:	4b78      	ldr	r3, [pc, #480]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bb8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb8e:	4b77      	ldr	r3, [pc, #476]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bb90:	2102      	movs	r1, #2
 800bb92:	430a      	orrs	r2, r1
 800bb94:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bb96:	4b75      	ldr	r3, [pc, #468]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bb98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	607b      	str	r3, [r7, #4]
 800bba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bba2:	4b72      	ldr	r3, [pc, #456]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bba6:	4b71      	ldr	r3, [pc, #452]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bba8:	2108      	movs	r1, #8
 800bbaa:	430a      	orrs	r2, r1
 800bbac:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bbae:	4b6f      	ldr	r3, [pc, #444]	@ (800bd6c <MX_GPIO_Init+0x240>)
 800bbb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbb2:	2208      	movs	r2, #8
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	603b      	str	r3, [r7, #0]
 800bbb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800bbba:	4b6d      	ldr	r3, [pc, #436]	@ (800bd70 <MX_GPIO_Init+0x244>)
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	2101      	movs	r1, #1
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	f009 fb94 	bl	80152ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800bbc6:	4b6a      	ldr	r3, [pc, #424]	@ (800bd70 <MX_GPIO_Init+0x244>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	2102      	movs	r1, #2
 800bbcc:	0018      	movs	r0, r3
 800bbce:	f009 fb8e 	bl	80152ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800bbd2:	4968      	ldr	r1, [pc, #416]	@ (800bd74 <MX_GPIO_Init+0x248>)
 800bbd4:	4b68      	ldr	r3, [pc, #416]	@ (800bd78 <MX_GPIO_Init+0x24c>)
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	0018      	movs	r0, r3
 800bbda:	f009 fb88 	bl	80152ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800bbde:	2380      	movs	r3, #128	@ 0x80
 800bbe0:	011b      	lsls	r3, r3, #4
 800bbe2:	4866      	ldr	r0, [pc, #408]	@ (800bd7c <MX_GPIO_Init+0x250>)
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	0019      	movs	r1, r3
 800bbe8:	f009 fb81 	bl	80152ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800bbec:	2380      	movs	r3, #128	@ 0x80
 800bbee:	015b      	lsls	r3, r3, #5
 800bbf0:	4862      	ldr	r0, [pc, #392]	@ (800bd7c <MX_GPIO_Init+0x250>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	0019      	movs	r1, r3
 800bbf6:	f009 fb7a 	bl	80152ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800bbfa:	193b      	adds	r3, r7, r4
 800bbfc:	4a60      	ldr	r2, [pc, #384]	@ (800bd80 <MX_GPIO_Init+0x254>)
 800bbfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bc00:	193b      	adds	r3, r7, r4
 800bc02:	2203      	movs	r2, #3
 800bc04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc06:	193b      	adds	r3, r7, r4
 800bc08:	2200      	movs	r2, #0
 800bc0a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bc0c:	193b      	adds	r3, r7, r4
 800bc0e:	4a5b      	ldr	r2, [pc, #364]	@ (800bd7c <MX_GPIO_Init+0x250>)
 800bc10:	0019      	movs	r1, r3
 800bc12:	0010      	movs	r0, r2
 800bc14:	f009 f9d0 	bl	8014fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800bc18:	193b      	adds	r3, r7, r4
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc1e:	193b      	adds	r3, r7, r4
 800bc20:	2201      	movs	r2, #1
 800bc22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc24:	193b      	adds	r3, r7, r4
 800bc26:	2200      	movs	r2, #0
 800bc28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc2a:	193b      	adds	r3, r7, r4
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bc30:	193b      	adds	r3, r7, r4
 800bc32:	4a4f      	ldr	r2, [pc, #316]	@ (800bd70 <MX_GPIO_Init+0x244>)
 800bc34:	0019      	movs	r1, r3
 800bc36:	0010      	movs	r0, r2
 800bc38:	f009 f9be 	bl	8014fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800bc3c:	193b      	adds	r3, r7, r4
 800bc3e:	2270      	movs	r2, #112	@ 0x70
 800bc40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bc42:	193b      	adds	r3, r7, r4
 800bc44:	2203      	movs	r2, #3
 800bc46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc48:	193b      	adds	r3, r7, r4
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc4e:	193a      	adds	r2, r7, r4
 800bc50:	23a0      	movs	r3, #160	@ 0xa0
 800bc52:	05db      	lsls	r3, r3, #23
 800bc54:	0011      	movs	r1, r2
 800bc56:	0018      	movs	r0, r3
 800bc58:	f009 f9ae 	bl	8014fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800bc5c:	193b      	adds	r3, r7, r4
 800bc5e:	22c0      	movs	r2, #192	@ 0xc0
 800bc60:	0052      	lsls	r2, r2, #1
 800bc62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc64:	193b      	adds	r3, r7, r4
 800bc66:	2200      	movs	r2, #0
 800bc68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc6a:	193b      	adds	r3, r7, r4
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc70:	193a      	adds	r2, r7, r4
 800bc72:	23a0      	movs	r3, #160	@ 0xa0
 800bc74:	05db      	lsls	r3, r3, #23
 800bc76:	0011      	movs	r1, r2
 800bc78:	0018      	movs	r0, r3
 800bc7a:	f009 f99d 	bl	8014fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800bc7e:	193b      	adds	r3, r7, r4
 800bc80:	4a3c      	ldr	r2, [pc, #240]	@ (800bd74 <MX_GPIO_Init+0x248>)
 800bc82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc84:	193b      	adds	r3, r7, r4
 800bc86:	2201      	movs	r2, #1
 800bc88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc8a:	193b      	adds	r3, r7, r4
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc90:	193b      	adds	r3, r7, r4
 800bc92:	2200      	movs	r2, #0
 800bc94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc96:	193b      	adds	r3, r7, r4
 800bc98:	4a37      	ldr	r2, [pc, #220]	@ (800bd78 <MX_GPIO_Init+0x24c>)
 800bc9a:	0019      	movs	r1, r3
 800bc9c:	0010      	movs	r0, r2
 800bc9e:	f009 f98b 	bl	8014fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800bca2:	193b      	adds	r3, r7, r4
 800bca4:	4a37      	ldr	r2, [pc, #220]	@ (800bd84 <MX_GPIO_Init+0x258>)
 800bca6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bca8:	193b      	adds	r3, r7, r4
 800bcaa:	2203      	movs	r2, #3
 800bcac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcae:	193b      	adds	r3, r7, r4
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bcb4:	193b      	adds	r3, r7, r4
 800bcb6:	4a30      	ldr	r2, [pc, #192]	@ (800bd78 <MX_GPIO_Init+0x24c>)
 800bcb8:	0019      	movs	r1, r3
 800bcba:	0010      	movs	r0, r2
 800bcbc:	f009 f97c 	bl	8014fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800bcc0:	0021      	movs	r1, r4
 800bcc2:	187b      	adds	r3, r7, r1
 800bcc4:	2280      	movs	r2, #128	@ 0x80
 800bcc6:	0092      	lsls	r2, r2, #2
 800bcc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bcca:	000c      	movs	r4, r1
 800bccc:	193b      	adds	r3, r7, r4
 800bcce:	2200      	movs	r2, #0
 800bcd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcd2:	193b      	adds	r3, r7, r4
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800bcd8:	193b      	adds	r3, r7, r4
 800bcda:	4a28      	ldr	r2, [pc, #160]	@ (800bd7c <MX_GPIO_Init+0x250>)
 800bcdc:	0019      	movs	r1, r3
 800bcde:	0010      	movs	r0, r2
 800bce0:	f009 f96a 	bl	8014fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800bce4:	193b      	adds	r3, r7, r4
 800bce6:	2280      	movs	r2, #128	@ 0x80
 800bce8:	0212      	lsls	r2, r2, #8
 800bcea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bcec:	193b      	adds	r3, r7, r4
 800bcee:	2288      	movs	r2, #136	@ 0x88
 800bcf0:	0352      	lsls	r2, r2, #13
 800bcf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcf4:	193b      	adds	r3, r7, r4
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800bcfa:	193a      	adds	r2, r7, r4
 800bcfc:	23a0      	movs	r3, #160	@ 0xa0
 800bcfe:	05db      	lsls	r3, r3, #23
 800bd00:	0011      	movs	r1, r2
 800bd02:	0018      	movs	r0, r3
 800bd04:	f009 f958 	bl	8014fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800bd08:	0021      	movs	r1, r4
 800bd0a:	187b      	adds	r3, r7, r1
 800bd0c:	22c0      	movs	r2, #192	@ 0xc0
 800bd0e:	0152      	lsls	r2, r2, #5
 800bd10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd12:	000c      	movs	r4, r1
 800bd14:	193b      	adds	r3, r7, r4
 800bd16:	2201      	movs	r2, #1
 800bd18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd1a:	193b      	adds	r3, r7, r4
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd20:	193b      	adds	r3, r7, r4
 800bd22:	2200      	movs	r2, #0
 800bd24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd26:	193b      	adds	r3, r7, r4
 800bd28:	4a14      	ldr	r2, [pc, #80]	@ (800bd7c <MX_GPIO_Init+0x250>)
 800bd2a:	0019      	movs	r1, r3
 800bd2c:	0010      	movs	r0, r2
 800bd2e:	f009 f943 	bl	8014fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800bd32:	0021      	movs	r1, r4
 800bd34:	187b      	adds	r3, r7, r1
 800bd36:	2204      	movs	r2, #4
 800bd38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd3a:	187b      	adds	r3, r7, r1
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bd40:	187b      	adds	r3, r7, r1
 800bd42:	2201      	movs	r2, #1
 800bd44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800bd46:	187b      	adds	r3, r7, r1
 800bd48:	4a0f      	ldr	r2, [pc, #60]	@ (800bd88 <MX_GPIO_Init+0x25c>)
 800bd4a:	0019      	movs	r1, r3
 800bd4c:	0010      	movs	r0, r2
 800bd4e:	f009 f933 	bl	8014fb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800bd52:	2200      	movs	r2, #0
 800bd54:	2100      	movs	r1, #0
 800bd56:	2007      	movs	r0, #7
 800bd58:	f008 fcdc 	bl	8014714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800bd5c:	2007      	movs	r0, #7
 800bd5e:	f008 fcee 	bl	801473e <HAL_NVIC_EnableIRQ>

}
 800bd62:	46c0      	nop			@ (mov r8, r8)
 800bd64:	46bd      	mov	sp, r7
 800bd66:	b00b      	add	sp, #44	@ 0x2c
 800bd68:	bd90      	pop	{r4, r7, pc}
 800bd6a:	46c0      	nop			@ (mov r8, r8)
 800bd6c:	40021000 	.word	0x40021000
 800bd70:	50001c00 	.word	0x50001c00
 800bd74:	00000301 	.word	0x00000301
 800bd78:	50000400 	.word	0x50000400
 800bd7c:	50000800 	.word	0x50000800
 800bd80:	0000200c 	.word	0x0000200c
 800bd84:	0000403e 	.word	0x0000403e
 800bd88:	50000c00 	.word	0x50000c00

0800bd8c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2100      	movs	r1, #0
 800bd9a:	0018      	movs	r0, r3
 800bd9c:	f010 f9ac 	bl	801c0f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2108      	movs	r1, #8
 800bda4:	0018      	movs	r0, r3
 800bda6:	f010 f9a7 	bl	801c0f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	210c      	movs	r1, #12
 800bdae:	0018      	movs	r0, r3
 800bdb0:	f010 f9a2 	bl	801c0f8 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800bdb4:	2380      	movs	r3, #128	@ 0x80
 800bdb6:	05db      	lsls	r3, r3, #23
 800bdb8:	22fa      	movs	r2, #250	@ 0xfa
 800bdba:	0112      	lsls	r2, r2, #4
 800bdbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800bdbe:	2380      	movs	r3, #128	@ 0x80
 800bdc0:	05db      	lsls	r3, r3, #23
 800bdc2:	22fa      	movs	r2, #250	@ 0xfa
 800bdc4:	0112      	lsls	r2, r2, #4
 800bdc6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800bdc8:	2380      	movs	r3, #128	@ 0x80
 800bdca:	05db      	lsls	r3, r3, #23
 800bdcc:	22fa      	movs	r2, #250	@ 0xfa
 800bdce:	0112      	lsls	r2, r2, #4
 800bdd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800bdd2:	2380      	movs	r3, #128	@ 0x80
 800bdd4:	05db      	lsls	r3, r3, #23
 800bdd6:	22fa      	movs	r2, #250	@ 0xfa
 800bdd8:	0112      	lsls	r2, r2, #4
 800bdda:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	2100      	movs	r1, #0
 800bde0:	0018      	movs	r0, r3
 800bde2:	f010 f989 	bl	801c0f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	2104      	movs	r1, #4
 800bdea:	0018      	movs	r0, r3
 800bdec:	f010 f984 	bl	801c0f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	2108      	movs	r1, #8
 800bdf4:	0018      	movs	r0, r3
 800bdf6:	f010 f97f 	bl	801c0f8 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800bdfa:	4b0a      	ldr	r3, [pc, #40]	@ (800be24 <GPIO_InitPWMLEDs+0x98>)
 800bdfc:	22fa      	movs	r2, #250	@ 0xfa
 800bdfe:	0112      	lsls	r2, r2, #4
 800be00:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800be02:	4b08      	ldr	r3, [pc, #32]	@ (800be24 <GPIO_InitPWMLEDs+0x98>)
 800be04:	22fa      	movs	r2, #250	@ 0xfa
 800be06:	0112      	lsls	r2, r2, #4
 800be08:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800be0a:	4b06      	ldr	r3, [pc, #24]	@ (800be24 <GPIO_InitPWMLEDs+0x98>)
 800be0c:	22fa      	movs	r2, #250	@ 0xfa
 800be0e:	0112      	lsls	r2, r2, #4
 800be10:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800be12:	4b04      	ldr	r3, [pc, #16]	@ (800be24 <GPIO_InitPWMLEDs+0x98>)
 800be14:	22fa      	movs	r2, #250	@ 0xfa
 800be16:	0112      	lsls	r2, r2, #4
 800be18:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800be1a:	46c0      	nop			@ (mov r8, r8)
 800be1c:	46bd      	mov	sp, r7
 800be1e:	b002      	add	sp, #8
 800be20:	bd80      	pop	{r7, pc}
 800be22:	46c0      	nop			@ (mov r8, r8)
 800be24:	40000400 	.word	0x40000400

0800be28 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be2e:	1d3b      	adds	r3, r7, #4
 800be30:	0018      	movs	r0, r3
 800be32:	2314      	movs	r3, #20
 800be34:	001a      	movs	r2, r3
 800be36:	2100      	movs	r1, #0
 800be38:	f019 fd7c 	bl	8025934 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800be3c:	1d3b      	adds	r3, r7, #4
 800be3e:	2205      	movs	r2, #5
 800be40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800be42:	1d3b      	adds	r3, r7, #4
 800be44:	2203      	movs	r2, #3
 800be46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be48:	1d3b      	adds	r3, r7, #4
 800be4a:	2200      	movs	r2, #0
 800be4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be4e:	1d3a      	adds	r2, r7, #4
 800be50:	23a0      	movs	r3, #160	@ 0xa0
 800be52:	05db      	lsls	r3, r3, #23
 800be54:	0011      	movs	r1, r2
 800be56:	0018      	movs	r0, r3
 800be58:	f009 f8ae 	bl	8014fb8 <HAL_GPIO_Init>
}
 800be5c:	46c0      	nop			@ (mov r8, r8)
 800be5e:	46bd      	mov	sp, r7
 800be60:	b006      	add	sp, #24
 800be62:	bd80      	pop	{r7, pc}

0800be64 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800be68:	4b1b      	ldr	r3, [pc, #108]	@ (800bed8 <MX_I2C1_Init+0x74>)
 800be6a:	4a1c      	ldr	r2, [pc, #112]	@ (800bedc <MX_I2C1_Init+0x78>)
 800be6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800be6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bed8 <MX_I2C1_Init+0x74>)
 800be70:	4a1b      	ldr	r2, [pc, #108]	@ (800bee0 <MX_I2C1_Init+0x7c>)
 800be72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800be74:	4b18      	ldr	r3, [pc, #96]	@ (800bed8 <MX_I2C1_Init+0x74>)
 800be76:	2200      	movs	r2, #0
 800be78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800be7a:	4b17      	ldr	r3, [pc, #92]	@ (800bed8 <MX_I2C1_Init+0x74>)
 800be7c:	2201      	movs	r2, #1
 800be7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800be80:	4b15      	ldr	r3, [pc, #84]	@ (800bed8 <MX_I2C1_Init+0x74>)
 800be82:	2200      	movs	r2, #0
 800be84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800be86:	4b14      	ldr	r3, [pc, #80]	@ (800bed8 <MX_I2C1_Init+0x74>)
 800be88:	2200      	movs	r2, #0
 800be8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800be8c:	4b12      	ldr	r3, [pc, #72]	@ (800bed8 <MX_I2C1_Init+0x74>)
 800be8e:	2200      	movs	r2, #0
 800be90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800be92:	4b11      	ldr	r3, [pc, #68]	@ (800bed8 <MX_I2C1_Init+0x74>)
 800be94:	2200      	movs	r2, #0
 800be96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800be98:	4b0f      	ldr	r3, [pc, #60]	@ (800bed8 <MX_I2C1_Init+0x74>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800be9e:	4b0e      	ldr	r3, [pc, #56]	@ (800bed8 <MX_I2C1_Init+0x74>)
 800bea0:	0018      	movs	r0, r3
 800bea2:	f009 fa5d 	bl	8015360 <HAL_I2C_Init>
 800bea6:	1e03      	subs	r3, r0, #0
 800bea8:	d001      	beq.n	800beae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800beaa:	f000 fdc7 	bl	800ca3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800beae:	4b0a      	ldr	r3, [pc, #40]	@ (800bed8 <MX_I2C1_Init+0x74>)
 800beb0:	2100      	movs	r1, #0
 800beb2:	0018      	movs	r0, r3
 800beb4:	f00c f93a 	bl	801812c <HAL_I2CEx_ConfigAnalogFilter>
 800beb8:	1e03      	subs	r3, r0, #0
 800beba:	d001      	beq.n	800bec0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800bebc:	f000 fdbe 	bl	800ca3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800bec0:	4b05      	ldr	r3, [pc, #20]	@ (800bed8 <MX_I2C1_Init+0x74>)
 800bec2:	2100      	movs	r1, #0
 800bec4:	0018      	movs	r0, r3
 800bec6:	f00c f97d 	bl	80181c4 <HAL_I2CEx_ConfigDigitalFilter>
 800beca:	1e03      	subs	r3, r0, #0
 800becc:	d001      	beq.n	800bed2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800bece:	f000 fdb5 	bl	800ca3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800bed2:	46c0      	nop			@ (mov r8, r8)
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	20000c54 	.word	0x20000c54
 800bedc:	40005400 	.word	0x40005400
 800bee0:	00503d58 	.word	0x00503d58

0800bee4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800bee8:	4b1b      	ldr	r3, [pc, #108]	@ (800bf58 <MX_I2C2_Init+0x74>)
 800beea:	4a1c      	ldr	r2, [pc, #112]	@ (800bf5c <MX_I2C2_Init+0x78>)
 800beec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800beee:	4b1a      	ldr	r3, [pc, #104]	@ (800bf58 <MX_I2C2_Init+0x74>)
 800bef0:	4a1b      	ldr	r2, [pc, #108]	@ (800bf60 <MX_I2C2_Init+0x7c>)
 800bef2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800bef4:	4b18      	ldr	r3, [pc, #96]	@ (800bf58 <MX_I2C2_Init+0x74>)
 800bef6:	2200      	movs	r2, #0
 800bef8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800befa:	4b17      	ldr	r3, [pc, #92]	@ (800bf58 <MX_I2C2_Init+0x74>)
 800befc:	2201      	movs	r2, #1
 800befe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bf00:	4b15      	ldr	r3, [pc, #84]	@ (800bf58 <MX_I2C2_Init+0x74>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800bf06:	4b14      	ldr	r3, [pc, #80]	@ (800bf58 <MX_I2C2_Init+0x74>)
 800bf08:	2200      	movs	r2, #0
 800bf0a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bf0c:	4b12      	ldr	r3, [pc, #72]	@ (800bf58 <MX_I2C2_Init+0x74>)
 800bf0e:	2200      	movs	r2, #0
 800bf10:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bf12:	4b11      	ldr	r3, [pc, #68]	@ (800bf58 <MX_I2C2_Init+0x74>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bf18:	4b0f      	ldr	r3, [pc, #60]	@ (800bf58 <MX_I2C2_Init+0x74>)
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800bf1e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf58 <MX_I2C2_Init+0x74>)
 800bf20:	0018      	movs	r0, r3
 800bf22:	f009 fa1d 	bl	8015360 <HAL_I2C_Init>
 800bf26:	1e03      	subs	r3, r0, #0
 800bf28:	d001      	beq.n	800bf2e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800bf2a:	f000 fd87 	bl	800ca3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bf2e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf58 <MX_I2C2_Init+0x74>)
 800bf30:	2100      	movs	r1, #0
 800bf32:	0018      	movs	r0, r3
 800bf34:	f00c f8fa 	bl	801812c <HAL_I2CEx_ConfigAnalogFilter>
 800bf38:	1e03      	subs	r3, r0, #0
 800bf3a:	d001      	beq.n	800bf40 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800bf3c:	f000 fd7e 	bl	800ca3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800bf40:	4b05      	ldr	r3, [pc, #20]	@ (800bf58 <MX_I2C2_Init+0x74>)
 800bf42:	2100      	movs	r1, #0
 800bf44:	0018      	movs	r0, r3
 800bf46:	f00c f93d 	bl	80181c4 <HAL_I2CEx_ConfigDigitalFilter>
 800bf4a:	1e03      	subs	r3, r0, #0
 800bf4c:	d001      	beq.n	800bf52 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800bf4e:	f000 fd75 	bl	800ca3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800bf52:	46c0      	nop			@ (mov r8, r8)
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	20000ca8 	.word	0x20000ca8
 800bf5c:	40005800 	.word	0x40005800
 800bf60:	00503d58 	.word	0x00503d58

0800bf64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800bf64:	b590      	push	{r4, r7, lr}
 800bf66:	b08b      	sub	sp, #44	@ 0x2c
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf6c:	2414      	movs	r4, #20
 800bf6e:	193b      	adds	r3, r7, r4
 800bf70:	0018      	movs	r0, r3
 800bf72:	2314      	movs	r3, #20
 800bf74:	001a      	movs	r2, r3
 800bf76:	2100      	movs	r1, #0
 800bf78:	f019 fcdc 	bl	8025934 <memset>
  if(i2cHandle->Instance==I2C1)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a5d      	ldr	r2, [pc, #372]	@ (800c0f8 <HAL_I2C_MspInit+0x194>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d000      	beq.n	800bf88 <HAL_I2C_MspInit+0x24>
 800bf86:	e083      	b.n	800c090 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf88:	4b5c      	ldr	r3, [pc, #368]	@ (800c0fc <HAL_I2C_MspInit+0x198>)
 800bf8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf8c:	4b5b      	ldr	r3, [pc, #364]	@ (800c0fc <HAL_I2C_MspInit+0x198>)
 800bf8e:	2102      	movs	r1, #2
 800bf90:	430a      	orrs	r2, r1
 800bf92:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bf94:	4b59      	ldr	r3, [pc, #356]	@ (800c0fc <HAL_I2C_MspInit+0x198>)
 800bf96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf98:	2202      	movs	r2, #2
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	613b      	str	r3, [r7, #16]
 800bf9e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bfa0:	0021      	movs	r1, r4
 800bfa2:	187b      	adds	r3, r7, r1
 800bfa4:	22c0      	movs	r2, #192	@ 0xc0
 800bfa6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bfa8:	187b      	adds	r3, r7, r1
 800bfaa:	2212      	movs	r2, #18
 800bfac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfae:	187b      	adds	r3, r7, r1
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfb4:	187b      	adds	r3, r7, r1
 800bfb6:	2203      	movs	r2, #3
 800bfb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800bfba:	187b      	adds	r3, r7, r1
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfc0:	187b      	adds	r3, r7, r1
 800bfc2:	4a4f      	ldr	r2, [pc, #316]	@ (800c100 <HAL_I2C_MspInit+0x19c>)
 800bfc4:	0019      	movs	r1, r3
 800bfc6:	0010      	movs	r0, r2
 800bfc8:	f008 fff6 	bl	8014fb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800bfcc:	4b4b      	ldr	r3, [pc, #300]	@ (800c0fc <HAL_I2C_MspInit+0x198>)
 800bfce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfd0:	4b4a      	ldr	r3, [pc, #296]	@ (800c0fc <HAL_I2C_MspInit+0x198>)
 800bfd2:	2180      	movs	r1, #128	@ 0x80
 800bfd4:	0389      	lsls	r1, r1, #14
 800bfd6:	430a      	orrs	r2, r1
 800bfd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800bfda:	4b4a      	ldr	r3, [pc, #296]	@ (800c104 <HAL_I2C_MspInit+0x1a0>)
 800bfdc:	4a4a      	ldr	r2, [pc, #296]	@ (800c108 <HAL_I2C_MspInit+0x1a4>)
 800bfde:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800bfe0:	4b48      	ldr	r3, [pc, #288]	@ (800c104 <HAL_I2C_MspInit+0x1a0>)
 800bfe2:	2206      	movs	r2, #6
 800bfe4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bfe6:	4b47      	ldr	r3, [pc, #284]	@ (800c104 <HAL_I2C_MspInit+0x1a0>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bfec:	4b45      	ldr	r3, [pc, #276]	@ (800c104 <HAL_I2C_MspInit+0x1a0>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800bff2:	4b44      	ldr	r3, [pc, #272]	@ (800c104 <HAL_I2C_MspInit+0x1a0>)
 800bff4:	2280      	movs	r2, #128	@ 0x80
 800bff6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bff8:	4b42      	ldr	r3, [pc, #264]	@ (800c104 <HAL_I2C_MspInit+0x1a0>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bffe:	4b41      	ldr	r3, [pc, #260]	@ (800c104 <HAL_I2C_MspInit+0x1a0>)
 800c000:	2200      	movs	r2, #0
 800c002:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c004:	4b3f      	ldr	r3, [pc, #252]	@ (800c104 <HAL_I2C_MspInit+0x1a0>)
 800c006:	2200      	movs	r2, #0
 800c008:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c00a:	4b3e      	ldr	r3, [pc, #248]	@ (800c104 <HAL_I2C_MspInit+0x1a0>)
 800c00c:	2200      	movs	r2, #0
 800c00e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800c010:	4b3c      	ldr	r3, [pc, #240]	@ (800c104 <HAL_I2C_MspInit+0x1a0>)
 800c012:	0018      	movs	r0, r3
 800c014:	f008 fbb4 	bl	8014780 <HAL_DMA_Init>
 800c018:	1e03      	subs	r3, r0, #0
 800c01a:	d001      	beq.n	800c020 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800c01c:	f000 fd0e 	bl	800ca3c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a38      	ldr	r2, [pc, #224]	@ (800c104 <HAL_I2C_MspInit+0x1a0>)
 800c024:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c026:	4b37      	ldr	r3, [pc, #220]	@ (800c104 <HAL_I2C_MspInit+0x1a0>)
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800c02c:	4b37      	ldr	r3, [pc, #220]	@ (800c10c <HAL_I2C_MspInit+0x1a8>)
 800c02e:	4a38      	ldr	r2, [pc, #224]	@ (800c110 <HAL_I2C_MspInit+0x1ac>)
 800c030:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800c032:	4b36      	ldr	r3, [pc, #216]	@ (800c10c <HAL_I2C_MspInit+0x1a8>)
 800c034:	2206      	movs	r2, #6
 800c036:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c038:	4b34      	ldr	r3, [pc, #208]	@ (800c10c <HAL_I2C_MspInit+0x1a8>)
 800c03a:	2210      	movs	r2, #16
 800c03c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c03e:	4b33      	ldr	r3, [pc, #204]	@ (800c10c <HAL_I2C_MspInit+0x1a8>)
 800c040:	2200      	movs	r2, #0
 800c042:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c044:	4b31      	ldr	r3, [pc, #196]	@ (800c10c <HAL_I2C_MspInit+0x1a8>)
 800c046:	2280      	movs	r2, #128	@ 0x80
 800c048:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c04a:	4b30      	ldr	r3, [pc, #192]	@ (800c10c <HAL_I2C_MspInit+0x1a8>)
 800c04c:	2200      	movs	r2, #0
 800c04e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c050:	4b2e      	ldr	r3, [pc, #184]	@ (800c10c <HAL_I2C_MspInit+0x1a8>)
 800c052:	2200      	movs	r2, #0
 800c054:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c056:	4b2d      	ldr	r3, [pc, #180]	@ (800c10c <HAL_I2C_MspInit+0x1a8>)
 800c058:	2200      	movs	r2, #0
 800c05a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c05c:	4b2b      	ldr	r3, [pc, #172]	@ (800c10c <HAL_I2C_MspInit+0x1a8>)
 800c05e:	2200      	movs	r2, #0
 800c060:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c062:	4b2a      	ldr	r3, [pc, #168]	@ (800c10c <HAL_I2C_MspInit+0x1a8>)
 800c064:	0018      	movs	r0, r3
 800c066:	f008 fb8b 	bl	8014780 <HAL_DMA_Init>
 800c06a:	1e03      	subs	r3, r0, #0
 800c06c:	d001      	beq.n	800c072 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800c06e:	f000 fce5 	bl	800ca3c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4a25      	ldr	r2, [pc, #148]	@ (800c10c <HAL_I2C_MspInit+0x1a8>)
 800c076:	639a      	str	r2, [r3, #56]	@ 0x38
 800c078:	4b24      	ldr	r3, [pc, #144]	@ (800c10c <HAL_I2C_MspInit+0x1a8>)
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c07e:	2200      	movs	r2, #0
 800c080:	2100      	movs	r1, #0
 800c082:	2017      	movs	r0, #23
 800c084:	f008 fb46 	bl	8014714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c088:	2017      	movs	r0, #23
 800c08a:	f008 fb58 	bl	801473e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800c08e:	e02e      	b.n	800c0ee <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a1f      	ldr	r2, [pc, #124]	@ (800c114 <HAL_I2C_MspInit+0x1b0>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d129      	bne.n	800c0ee <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c09a:	4b18      	ldr	r3, [pc, #96]	@ (800c0fc <HAL_I2C_MspInit+0x198>)
 800c09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c09e:	4b17      	ldr	r3, [pc, #92]	@ (800c0fc <HAL_I2C_MspInit+0x198>)
 800c0a0:	2102      	movs	r1, #2
 800c0a2:	430a      	orrs	r2, r1
 800c0a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c0a6:	4b15      	ldr	r3, [pc, #84]	@ (800c0fc <HAL_I2C_MspInit+0x198>)
 800c0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0aa:	2202      	movs	r2, #2
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c0b2:	2114      	movs	r1, #20
 800c0b4:	187b      	adds	r3, r7, r1
 800c0b6:	22c0      	movs	r2, #192	@ 0xc0
 800c0b8:	0112      	lsls	r2, r2, #4
 800c0ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c0bc:	187b      	adds	r3, r7, r1
 800c0be:	2212      	movs	r2, #18
 800c0c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0c2:	187b      	adds	r3, r7, r1
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0c8:	187b      	adds	r3, r7, r1
 800c0ca:	2203      	movs	r2, #3
 800c0cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800c0ce:	187b      	adds	r3, r7, r1
 800c0d0:	2206      	movs	r2, #6
 800c0d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c0d4:	187b      	adds	r3, r7, r1
 800c0d6:	4a0a      	ldr	r2, [pc, #40]	@ (800c100 <HAL_I2C_MspInit+0x19c>)
 800c0d8:	0019      	movs	r1, r3
 800c0da:	0010      	movs	r0, r2
 800c0dc:	f008 ff6c 	bl	8014fb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c0e0:	4b06      	ldr	r3, [pc, #24]	@ (800c0fc <HAL_I2C_MspInit+0x198>)
 800c0e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0e4:	4b05      	ldr	r3, [pc, #20]	@ (800c0fc <HAL_I2C_MspInit+0x198>)
 800c0e6:	2180      	movs	r1, #128	@ 0x80
 800c0e8:	03c9      	lsls	r1, r1, #15
 800c0ea:	430a      	orrs	r2, r1
 800c0ec:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c0ee:	46c0      	nop			@ (mov r8, r8)
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	b00b      	add	sp, #44	@ 0x2c
 800c0f4:	bd90      	pop	{r4, r7, pc}
 800c0f6:	46c0      	nop			@ (mov r8, r8)
 800c0f8:	40005400 	.word	0x40005400
 800c0fc:	40021000 	.word	0x40021000
 800c100:	50000400 	.word	0x50000400
 800c104:	20000cfc 	.word	0x20000cfc
 800c108:	40020030 	.word	0x40020030
 800c10c:	20000d44 	.word	0x20000d44
 800c110:	4002001c 	.word	0x4002001c
 800c114:	40005800 	.word	0x40005800

0800c118 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800c11c:	4b10      	ldr	r3, [pc, #64]	@ (800c160 <MX_I2S2_Init+0x48>)
 800c11e:	4a11      	ldr	r2, [pc, #68]	@ (800c164 <MX_I2S2_Init+0x4c>)
 800c120:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800c122:	4b0f      	ldr	r3, [pc, #60]	@ (800c160 <MX_I2S2_Init+0x48>)
 800c124:	22c0      	movs	r2, #192	@ 0xc0
 800c126:	0092      	lsls	r2, r2, #2
 800c128:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800c12a:	4b0d      	ldr	r3, [pc, #52]	@ (800c160 <MX_I2S2_Init+0x48>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800c130:	4b0b      	ldr	r3, [pc, #44]	@ (800c160 <MX_I2S2_Init+0x48>)
 800c132:	2203      	movs	r2, #3
 800c134:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800c136:	4b0a      	ldr	r3, [pc, #40]	@ (800c160 <MX_I2S2_Init+0x48>)
 800c138:	2200      	movs	r2, #0
 800c13a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800c13c:	4b08      	ldr	r3, [pc, #32]	@ (800c160 <MX_I2S2_Init+0x48>)
 800c13e:	22fa      	movs	r2, #250	@ 0xfa
 800c140:	0192      	lsls	r2, r2, #6
 800c142:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800c144:	4b06      	ldr	r3, [pc, #24]	@ (800c160 <MX_I2S2_Init+0x48>)
 800c146:	2200      	movs	r2, #0
 800c148:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800c14a:	4b05      	ldr	r3, [pc, #20]	@ (800c160 <MX_I2S2_Init+0x48>)
 800c14c:	0018      	movs	r0, r3
 800c14e:	f00c f885 	bl	801825c <HAL_I2S_Init>
 800c152:	1e03      	subs	r3, r0, #0
 800c154:	d001      	beq.n	800c15a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800c156:	f000 fc71 	bl	800ca3c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800c15a:	46c0      	nop			@ (mov r8, r8)
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	20000d8c 	.word	0x20000d8c
 800c164:	40003800 	.word	0x40003800

0800c168 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800c168:	b590      	push	{r4, r7, lr}
 800c16a:	b089      	sub	sp, #36	@ 0x24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c170:	240c      	movs	r4, #12
 800c172:	193b      	adds	r3, r7, r4
 800c174:	0018      	movs	r0, r3
 800c176:	2314      	movs	r3, #20
 800c178:	001a      	movs	r2, r3
 800c17a:	2100      	movs	r1, #0
 800c17c:	f019 fbda 	bl	8025934 <memset>
  if(i2sHandle->Instance==SPI2)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a2d      	ldr	r2, [pc, #180]	@ (800c23c <HAL_I2S_MspInit+0xd4>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d154      	bne.n	800c234 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c18a:	4b2d      	ldr	r3, [pc, #180]	@ (800c240 <HAL_I2S_MspInit+0xd8>)
 800c18c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c18e:	4b2c      	ldr	r3, [pc, #176]	@ (800c240 <HAL_I2S_MspInit+0xd8>)
 800c190:	2180      	movs	r1, #128	@ 0x80
 800c192:	01c9      	lsls	r1, r1, #7
 800c194:	430a      	orrs	r2, r1
 800c196:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c198:	4b29      	ldr	r3, [pc, #164]	@ (800c240 <HAL_I2S_MspInit+0xd8>)
 800c19a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c19c:	4b28      	ldr	r3, [pc, #160]	@ (800c240 <HAL_I2S_MspInit+0xd8>)
 800c19e:	2102      	movs	r1, #2
 800c1a0:	430a      	orrs	r2, r1
 800c1a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c1a4:	4b26      	ldr	r3, [pc, #152]	@ (800c240 <HAL_I2S_MspInit+0xd8>)
 800c1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a8:	2202      	movs	r2, #2
 800c1aa:	4013      	ands	r3, r2
 800c1ac:	60bb      	str	r3, [r7, #8]
 800c1ae:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800c1b0:	193b      	adds	r3, r7, r4
 800c1b2:	22b0      	movs	r2, #176	@ 0xb0
 800c1b4:	0212      	lsls	r2, r2, #8
 800c1b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1b8:	0021      	movs	r1, r4
 800c1ba:	187b      	adds	r3, r7, r1
 800c1bc:	2202      	movs	r2, #2
 800c1be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1c0:	187b      	adds	r3, r7, r1
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1c6:	187b      	adds	r3, r7, r1
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800c1cc:	187b      	adds	r3, r7, r1
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c1d2:	187b      	adds	r3, r7, r1
 800c1d4:	4a1b      	ldr	r2, [pc, #108]	@ (800c244 <HAL_I2S_MspInit+0xdc>)
 800c1d6:	0019      	movs	r1, r3
 800c1d8:	0010      	movs	r0, r2
 800c1da:	f008 feed 	bl	8014fb8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800c1de:	4b1a      	ldr	r3, [pc, #104]	@ (800c248 <HAL_I2S_MspInit+0xe0>)
 800c1e0:	4a1a      	ldr	r2, [pc, #104]	@ (800c24c <HAL_I2S_MspInit+0xe4>)
 800c1e2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800c1e4:	4b18      	ldr	r3, [pc, #96]	@ (800c248 <HAL_I2S_MspInit+0xe0>)
 800c1e6:	2202      	movs	r2, #2
 800c1e8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c1ea:	4b17      	ldr	r3, [pc, #92]	@ (800c248 <HAL_I2S_MspInit+0xe0>)
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c1f0:	4b15      	ldr	r3, [pc, #84]	@ (800c248 <HAL_I2S_MspInit+0xe0>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c1f6:	4b14      	ldr	r3, [pc, #80]	@ (800c248 <HAL_I2S_MspInit+0xe0>)
 800c1f8:	2280      	movs	r2, #128	@ 0x80
 800c1fa:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c1fc:	4b12      	ldr	r3, [pc, #72]	@ (800c248 <HAL_I2S_MspInit+0xe0>)
 800c1fe:	2280      	movs	r2, #128	@ 0x80
 800c200:	0052      	lsls	r2, r2, #1
 800c202:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c204:	4b10      	ldr	r3, [pc, #64]	@ (800c248 <HAL_I2S_MspInit+0xe0>)
 800c206:	2280      	movs	r2, #128	@ 0x80
 800c208:	00d2      	lsls	r2, r2, #3
 800c20a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800c20c:	4b0e      	ldr	r3, [pc, #56]	@ (800c248 <HAL_I2S_MspInit+0xe0>)
 800c20e:	2220      	movs	r2, #32
 800c210:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c212:	4b0d      	ldr	r3, [pc, #52]	@ (800c248 <HAL_I2S_MspInit+0xe0>)
 800c214:	2200      	movs	r2, #0
 800c216:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800c218:	4b0b      	ldr	r3, [pc, #44]	@ (800c248 <HAL_I2S_MspInit+0xe0>)
 800c21a:	0018      	movs	r0, r3
 800c21c:	f008 fab0 	bl	8014780 <HAL_DMA_Init>
 800c220:	1e03      	subs	r3, r0, #0
 800c222:	d001      	beq.n	800c228 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800c224:	f000 fc0a 	bl	800ca3c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a07      	ldr	r2, [pc, #28]	@ (800c248 <HAL_I2S_MspInit+0xe0>)
 800c22c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c22e:	4b06      	ldr	r3, [pc, #24]	@ (800c248 <HAL_I2S_MspInit+0xe0>)
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800c234:	46c0      	nop			@ (mov r8, r8)
 800c236:	46bd      	mov	sp, r7
 800c238:	b009      	add	sp, #36	@ 0x24
 800c23a:	bd90      	pop	{r4, r7, pc}
 800c23c:	40003800 	.word	0x40003800
 800c240:	40021000 	.word	0x40021000
 800c244:	50000400 	.word	0x50000400
 800c248:	20000dc8 	.word	0x20000dc8
 800c24c:	40020044 	.word	0x40020044

0800c250 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800c250:	b580      	push	{r7, lr}
 800c252:	af00      	add	r7, sp, #0
  testDone = true;
 800c254:	4b14      	ldr	r3, [pc, #80]	@ (800c2a8 <SetTestDone+0x58>)
 800c256:	2201      	movs	r2, #1
 800c258:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800c25a:	23fa      	movs	r3, #250	@ 0xfa
 800c25c:	005b      	lsls	r3, r3, #1
 800c25e:	0018      	movs	r0, r3
 800c260:	f007 fdbe 	bl	8013de0 <HAL_Delay>
  SetDBLED(false, false, true);
 800c264:	2201      	movs	r2, #1
 800c266:	2100      	movs	r1, #0
 800c268:	2000      	movs	r0, #0
 800c26a:	f005 fd9b 	bl	8011da4 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800c26e:	4a0f      	ldr	r2, [pc, #60]	@ (800c2ac <SetTestDone+0x5c>)
 800c270:	23fa      	movs	r3, #250	@ 0xfa
 800c272:	0119      	lsls	r1, r3, #4
 800c274:	23fa      	movs	r3, #250	@ 0xfa
 800c276:	011b      	lsls	r3, r3, #4
 800c278:	0018      	movs	r0, r3
 800c27a:	f005 fd5f 	bl	8011d3c <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800c27e:	4a0b      	ldr	r2, [pc, #44]	@ (800c2ac <SetTestDone+0x5c>)
 800c280:	23fa      	movs	r3, #250	@ 0xfa
 800c282:	0119      	lsls	r1, r3, #4
 800c284:	23fa      	movs	r3, #250	@ 0xfa
 800c286:	011b      	lsls	r3, r3, #4
 800c288:	0018      	movs	r0, r3
 800c28a:	f005 fdd5 	bl	8011e38 <SetVocLED>
  HAL_Delay(500);
 800c28e:	23fa      	movs	r3, #250	@ 0xfa
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	0018      	movs	r0, r3
 800c294:	f007 fda4 	bl	8013de0 <HAL_Delay>
  SetLEDsOff();
 800c298:	f005 ff0e 	bl	80120b8 <SetLEDsOff>
  InitDone();
 800c29c:	f005 fca2 	bl	8011be4 <InitDone>
}
 800c2a0:	46c0      	nop			@ (mov r8, r8)
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	46c0      	nop			@ (mov r8, r8)
 800c2a8:	20000e10 	.word	0x20000e10
 800c2ac:	00000bb8 	.word	0x00000bb8

0800c2b0 <FlashLEDs>:

void FlashLEDs(){
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 800c2b6:	1dfb      	adds	r3, r7, #7
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	701a      	strb	r2, [r3, #0]
 800c2bc:	e021      	b.n	800c302 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800c2be:	2201      	movs	r2, #1
 800c2c0:	2101      	movs	r1, #1
 800c2c2:	2001      	movs	r0, #1
 800c2c4:	f005 fd6e 	bl	8011da4 <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800c2c8:	4a12      	ldr	r2, [pc, #72]	@ (800c314 <FlashLEDs+0x64>)
 800c2ca:	23fa      	movs	r3, #250	@ 0xfa
 800c2cc:	0119      	lsls	r1, r3, #4
 800c2ce:	23fa      	movs	r3, #250	@ 0xfa
 800c2d0:	011b      	lsls	r3, r3, #4
 800c2d2:	0018      	movs	r0, r3
 800c2d4:	f005 fd32 	bl	8011d3c <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800c2d8:	4a0e      	ldr	r2, [pc, #56]	@ (800c314 <FlashLEDs+0x64>)
 800c2da:	23fa      	movs	r3, #250	@ 0xfa
 800c2dc:	0119      	lsls	r1, r3, #4
 800c2de:	23fa      	movs	r3, #250	@ 0xfa
 800c2e0:	011b      	lsls	r3, r3, #4
 800c2e2:	0018      	movs	r0, r3
 800c2e4:	f005 fda8 	bl	8011e38 <SetVocLED>
    HAL_Delay(250);
 800c2e8:	20fa      	movs	r0, #250	@ 0xfa
 800c2ea:	f007 fd79 	bl	8013de0 <HAL_Delay>
    SetLEDsOff();
 800c2ee:	f005 fee3 	bl	80120b8 <SetLEDsOff>
    HAL_Delay(250);
 800c2f2:	20fa      	movs	r0, #250	@ 0xfa
 800c2f4:	f007 fd74 	bl	8013de0 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 800c2f8:	1dfb      	adds	r3, r7, #7
 800c2fa:	781a      	ldrb	r2, [r3, #0]
 800c2fc:	1dfb      	adds	r3, r7, #7
 800c2fe:	3201      	adds	r2, #1
 800c300:	701a      	strb	r2, [r3, #0]
 800c302:	1dfb      	adds	r3, r7, #7
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	2b04      	cmp	r3, #4
 800c308:	d9d9      	bls.n	800c2be <FlashLEDs+0xe>
  }
}
 800c30a:	46c0      	nop			@ (mov r8, r8)
 800c30c:	46c0      	nop			@ (mov r8, r8)
 800c30e:	46bd      	mov	sp, r7
 800c310:	b002      	add	sp, #8
 800c312:	bd80      	pop	{r7, pc}
 800c314:	00000bb8 	.word	0x00000bb8

0800c318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c31e:	f007 fcef 	bl	8013d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c322:	f000 fa31 	bl	800c788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c326:	f7ff fc01 	bl	800bb2c <MX_GPIO_Init>
  MX_DMA_Init();
 800c32a:	f7ff fa29 	bl	800b780 <MX_DMA_Init>
  MX_I2C1_Init();
 800c32e:	f7ff fd99 	bl	800be64 <MX_I2C1_Init>
  MX_I2S2_Init();
 800c332:	f7ff fef1 	bl	800c118 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800c336:	f006 fe1b 	bl	8012f70 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800c33a:	f7ff fdd3 	bl	800bee4 <MX_I2C2_Init>
  MX_TIM2_Init();
 800c33e:	f006 fc0f 	bl	8012b60 <MX_TIM2_Init>
  MX_TIM3_Init();
 800c342:	f006 fc81 	bl	8012c48 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800c346:	f006 fe43 	bl	8012fd0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800c34a:	f7fd fec3 	bl	800a0d4 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800c34e:	f015 ffcf 	bl	80222f0 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800c352:	f001 fb8b 	bl	800da6c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800c356:	f006 fdd5 	bl	8012f04 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800c35a:	f006 fcf3 	bl	8012d44 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800c35e:	4ad0      	ldr	r2, [pc, #832]	@ (800c6a0 <main+0x388>)
 800c360:	4bd0      	ldr	r3, [pc, #832]	@ (800c6a4 <main+0x38c>)
 800c362:	0011      	movs	r1, r2
 800c364:	0018      	movs	r0, r3
 800c366:	f7ff fd11 	bl	800bd8c <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 800c36a:	f007 f873 	bl	8013454 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 800c36e:	f006 fa7f 	bl	8012870 <Battery_Upkeep>
 800c372:	0003      	movs	r3, r0
 800c374:	001a      	movs	r2, r3
 800c376:	4bcc      	ldr	r3, [pc, #816]	@ (800c6a8 <main+0x390>)
 800c378:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800c37a:	4bcb      	ldr	r3, [pc, #812]	@ (800c6a8 <main+0x390>)
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d113      	bne.n	800c3aa <main+0x92>
    SetAllREDLED();
 800c382:	f005 feb5 	bl	80120f0 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800c386:	f7fc feaf 	bl	80090e8 <ReadBatteryVoltage>
 800c38a:	1c03      	adds	r3, r0, #0
 800c38c:	1c18      	adds	r0, r3, #0
 800c38e:	f7f7 fa81 	bl	8003894 <__aeabi_f2d>
 800c392:	0002      	movs	r2, r0
 800c394:	000b      	movs	r3, r1
 800c396:	48c5      	ldr	r0, [pc, #788]	@ (800c6ac <main+0x394>)
 800c398:	49c5      	ldr	r1, [pc, #788]	@ (800c6b0 <main+0x398>)
 800c39a:	9200      	str	r2, [sp, #0]
 800c39c:	9301      	str	r3, [sp, #4]
 800c39e:	0002      	movs	r2, r0
 800c3a0:	2002      	movs	r0, #2
 800c3a2:	f006 ffd3 	bl	801334c <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800c3a6:	f7fd fbbf 	bl	8009b28 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800c3aa:	f7fc ffd1 	bl	8009350 <UserButton_Pressed>
 800c3ae:	1e03      	subs	r3, r0, #0
 800c3b0:	d004      	beq.n	800c3bc <main+0xa4>
    EnableESPProg();
 800c3b2:	f016 f86d 	bl	8022490 <EnableESPProg>
    ESP_Programming = true;
 800c3b6:	4bbf      	ldr	r3, [pc, #764]	@ (800c6b4 <main+0x39c>)
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800c3bc:	2003      	movs	r0, #3
 800c3be:	f007 f82f 	bl	8013420 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800c3c2:	49bd      	ldr	r1, [pc, #756]	@ (800c6b8 <main+0x3a0>)
 800c3c4:	4bbd      	ldr	r3, [pc, #756]	@ (800c6bc <main+0x3a4>)
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	0018      	movs	r0, r3
 800c3ca:	f010 faf5 	bl	801c9b8 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800c3ce:	4bbc      	ldr	r3, [pc, #752]	@ (800c6c0 <main+0x3a8>)
 800c3d0:	0018      	movs	r0, r3
 800c3d2:	f7fd fc85 	bl	8009ce0 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800c3d6:	4abb      	ldr	r2, [pc, #748]	@ (800c6c4 <main+0x3ac>)
 800c3d8:	49bb      	ldr	r1, [pc, #748]	@ (800c6c8 <main+0x3b0>)
 800c3da:	48bc      	ldr	r0, [pc, #752]	@ (800c6cc <main+0x3b4>)
 800c3dc:	230b      	movs	r3, #11
 800c3de:	f004 fd77 	bl	8010ed0 <soundInit>
 800c3e2:	0003      	movs	r3, r0
 800c3e4:	001a      	movs	r2, r3
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	4053      	eors	r3, r2
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d005      	beq.n	800c3fc <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800c3f0:	4ab7      	ldr	r2, [pc, #732]	@ (800c6d0 <main+0x3b8>)
 800c3f2:	4bb8      	ldr	r3, [pc, #736]	@ (800c6d4 <main+0x3bc>)
 800c3f4:	21f9      	movs	r1, #249	@ 0xf9
 800c3f6:	0018      	movs	r0, r3
 800c3f8:	f007 f860 	bl	80134bc <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800c3fc:	4bb6      	ldr	r3, [pc, #728]	@ (800c6d8 <main+0x3c0>)
 800c3fe:	4ab7      	ldr	r2, [pc, #732]	@ (800c6dc <main+0x3c4>)
 800c400:	49b1      	ldr	r1, [pc, #708]	@ (800c6c8 <main+0x3b0>)
 800c402:	48b7      	ldr	r0, [pc, #732]	@ (800c6e0 <main+0x3c8>)
 800c404:	f000 fc0c 	bl	800cc20 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800c408:	f007 fce0 	bl	8013dcc <HAL_GetTick>
 800c40c:	0003      	movs	r3, r0
 800c40e:	4ab5      	ldr	r2, [pc, #724]	@ (800c6e4 <main+0x3cc>)
 800c410:	189a      	adds	r2, r3, r2
 800c412:	4bb5      	ldr	r3, [pc, #724]	@ (800c6e8 <main+0x3d0>)
 800c414:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800c416:	f7fc ff1d 	bl	8009254 <Check_USB_PowerOn>
 800c41a:	0003      	movs	r3, r0
 800c41c:	1e5a      	subs	r2, r3, #1
 800c41e:	4193      	sbcs	r3, r2
 800c420:	b2db      	uxtb	r3, r3
 800c422:	2201      	movs	r2, #1
 800c424:	4053      	eors	r3, r2
 800c426:	b2db      	uxtb	r3, r3
 800c428:	1c1a      	adds	r2, r3, #0
 800c42a:	2301      	movs	r3, #1
 800c42c:	4013      	ands	r3, r2
 800c42e:	b2da      	uxtb	r2, r3
 800c430:	4bae      	ldr	r3, [pc, #696]	@ (800c6ec <main+0x3d4>)
 800c432:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800c434:	f7fc ff0e 	bl	8009254 <Check_USB_PowerOn>
 800c438:	1e03      	subs	r3, r0, #0
 800c43a:	d003      	beq.n	800c444 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800c43c:	4bac      	ldr	r3, [pc, #688]	@ (800c6f0 <main+0x3d8>)
 800c43e:	0018      	movs	r0, r3
 800c440:	f7fc f85c 	bl	80084fc <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800c444:	4bab      	ldr	r3, [pc, #684]	@ (800c6f4 <main+0x3dc>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	0018      	movs	r0, r3
 800c44a:	f006 ff29 	bl	80132a0 <TimestampIsReached>
 800c44e:	1e03      	subs	r3, r0, #0
 800c450:	d00e      	beq.n	800c470 <main+0x158>
      charge = Battery_Upkeep();
 800c452:	f006 fa0d 	bl	8012870 <Battery_Upkeep>
 800c456:	0003      	movs	r3, r0
 800c458:	001a      	movs	r2, r3
 800c45a:	4b93      	ldr	r3, [pc, #588]	@ (800c6a8 <main+0x390>)
 800c45c:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800c45e:	f007 fcb5 	bl	8013dcc <HAL_GetTick>
 800c462:	0003      	movs	r3, r0
 800c464:	4aa4      	ldr	r2, [pc, #656]	@ (800c6f8 <main+0x3e0>)
 800c466:	189a      	adds	r2, r3, r2
 800c468:	4ba2      	ldr	r3, [pc, #648]	@ (800c6f4 <main+0x3dc>)
 800c46a:	601a      	str	r2, [r3, #0]
      showTime();
 800c46c:	f7fc ff80 	bl	8009370 <showTime>

    }
    configCheck();
 800c470:	f006 f85a 	bl	8012528 <configCheck>
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800c474:	4ba1      	ldr	r3, [pc, #644]	@ (800c6fc <main+0x3e4>)
 800c476:	2200      	movs	r2, #0
 800c478:	701a      	strb	r2, [r3, #0]
    if (charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800c47a:	4b8b      	ldr	r3, [pc, #556]	@ (800c6a8 <main+0x390>)
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d003      	beq.n	800c48a <main+0x172>
 800c482:	4b89      	ldr	r3, [pc, #548]	@ (800c6a8 <main+0x390>)
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d104      	bne.n	800c494 <main+0x17c>
      FlashLEDs();
 800c48a:	f7ff ff11 	bl	800c2b0 <FlashLEDs>
      Sensor.PM_measurementEnabled = false;
 800c48e:	4b9c      	ldr	r3, [pc, #624]	@ (800c700 <main+0x3e8>)
 800c490:	2200      	movs	r2, #0
 800c492:	709a      	strb	r2, [r3, #2]
    }
    if (charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800c494:	4b84      	ldr	r3, [pc, #528]	@ (800c6a8 <main+0x390>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d109      	bne.n	800c4b0 <main+0x198>
 800c49c:	4b99      	ldr	r3, [pc, #612]	@ (800c704 <main+0x3ec>)
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	2b09      	cmp	r3, #9
 800c4a2:	d105      	bne.n	800c4b0 <main+0x198>
       batteryEmpty = true;
 800c4a4:	4b98      	ldr	r3, [pc, #608]	@ (800c708 <main+0x3f0>)
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	701a      	strb	r2, [r3, #0]
       Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 800c4aa:	f7fd fb3d 	bl	8009b28 <Enter_Standby_Mode>
 800c4ae:	e002      	b.n	800c4b6 <main+0x19e>
    }
    else{
      batteryEmpty = false;
 800c4b0:	4b95      	ldr	r3, [pc, #596]	@ (800c708 <main+0x3f0>)
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800c4b6:	4b95      	ldr	r3, [pc, #596]	@ (800c70c <main+0x3f4>)
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d100      	bne.n	800c4c0 <main+0x1a8>
 800c4be:	e0a2      	b.n	800c606 <main+0x2ee>
 800c4c0:	4b7c      	ldr	r3, [pc, #496]	@ (800c6b4 <main+0x39c>)
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	4053      	eors	r3, r2
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d100      	bne.n	800c4d0 <main+0x1b8>
 800c4ce:	e09a      	b.n	800c606 <main+0x2ee>
 800c4d0:	4b8d      	ldr	r3, [pc, #564]	@ (800c708 <main+0x3f0>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	4053      	eors	r3, r2
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d100      	bne.n	800c4e0 <main+0x1c8>
 800c4de:	e092      	b.n	800c606 <main+0x2ee>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800c4e0:	4b82      	ldr	r3, [pc, #520]	@ (800c6ec <main+0x3d4>)
 800c4e2:	781a      	ldrb	r2, [r3, #0]
 800c4e4:	4b8a      	ldr	r3, [pc, #552]	@ (800c710 <main+0x3f8>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d03a      	beq.n	800c562 <main+0x24a>
        if (IsSGPPresent() && !usbPluggedIn) {
 800c4ec:	f000 fb2a 	bl	800cb44 <IsSGPPresent>
 800c4f0:	1e03      	subs	r3, r0, #0
 800c4f2:	d009      	beq.n	800c508 <main+0x1f0>
 800c4f4:	4b86      	ldr	r3, [pc, #536]	@ (800c710 <main+0x3f8>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	4053      	eors	r3, r2
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d002      	beq.n	800c508 <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 800c502:	2001      	movs	r0, #1
 800c504:	f000 fb28 	bl	800cb58 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800c508:	4b82      	ldr	r3, [pc, #520]	@ (800c714 <main+0x3fc>)
 800c50a:	791b      	ldrb	r3, [r3, #4]
 800c50c:	2b34      	cmp	r3, #52	@ 0x34
 800c50e:	d003      	beq.n	800c518 <main+0x200>
 800c510:	4b80      	ldr	r3, [pc, #512]	@ (800c714 <main+0x3fc>)
 800c512:	791b      	ldrb	r3, [r3, #4]
 800c514:	2b35      	cmp	r3, #53	@ 0x35
 800c516:	d106      	bne.n	800c526 <main+0x20e>
 800c518:	4b7d      	ldr	r3, [pc, #500]	@ (800c710 <main+0x3f8>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d002      	beq.n	800c526 <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 800c520:	2000      	movs	r0, #0
 800c522:	f000 fb19 	bl	800cb58 <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800c526:	4b7a      	ldr	r3, [pc, #488]	@ (800c710 <main+0x3f8>)
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	2201      	movs	r2, #1
 800c52c:	4053      	eors	r3, r2
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b00      	cmp	r3, #0
 800c532:	d012      	beq.n	800c55a <main+0x242>
 800c534:	f007 fc4a 	bl	8013dcc <HAL_GetTick>
 800c538:	0003      	movs	r3, r0
 800c53a:	4a6a      	ldr	r2, [pc, #424]	@ (800c6e4 <main+0x3cc>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d90c      	bls.n	800c55a <main+0x242>
          Debug("Device time out set in main due to powerstatus shift");
 800c540:	4a75      	ldr	r2, [pc, #468]	@ (800c718 <main+0x400>)
 800c542:	4b76      	ldr	r3, [pc, #472]	@ (800c71c <main+0x404>)
 800c544:	0019      	movs	r1, r3
 800c546:	2003      	movs	r0, #3
 800c548:	f006 ff00 	bl	801334c <CreateLine>
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800c54c:	f007 fc3e 	bl	8013dcc <HAL_GetTick>
 800c550:	0003      	movs	r3, r0
 800c552:	4a73      	ldr	r2, [pc, #460]	@ (800c720 <main+0x408>)
 800c554:	189a      	adds	r2, r3, r2
 800c556:	4b64      	ldr	r3, [pc, #400]	@ (800c6e8 <main+0x3d0>)
 800c558:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800c55a:	4b6d      	ldr	r3, [pc, #436]	@ (800c710 <main+0x3f8>)
 800c55c:	781a      	ldrb	r2, [r3, #0]
 800c55e:	4b63      	ldr	r3, [pc, #396]	@ (800c6ec <main+0x3d4>)
 800c560:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800c562:	f000 ff65 	bl	800d430 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800c566:	4b66      	ldr	r3, [pc, #408]	@ (800c700 <main+0x3e8>)
 800c568:	78db      	ldrb	r3, [r3, #3]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d005      	beq.n	800c57a <main+0x262>
        MICstate = Mic_Upkeep();
 800c56e:	f001 f969 	bl	800d844 <Mic_Upkeep>
 800c572:	0003      	movs	r3, r0
 800c574:	001a      	movs	r2, r3
 800c576:	4b6b      	ldr	r3, [pc, #428]	@ (800c724 <main+0x40c>)
 800c578:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800c57a:	4b4b      	ldr	r3, [pc, #300]	@ (800c6a8 <main+0x390>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d803      	bhi.n	800c58a <main+0x272>
 800c582:	4b5e      	ldr	r3, [pc, #376]	@ (800c6fc <main+0x3e4>)
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d016      	beq.n	800c5b8 <main+0x2a0>
 800c58a:	4b5d      	ldr	r3, [pc, #372]	@ (800c700 <main+0x3e8>)
 800c58c:	789b      	ldrb	r3, [r3, #2]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d012      	beq.n	800c5b8 <main+0x2a0>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800c592:	f001 faf9 	bl	800db88 <sen5x_Get_sen5x_enable_state>
 800c596:	0003      	movs	r3, r0
 800c598:	001a      	movs	r2, r3
 800c59a:	2301      	movs	r3, #1
 800c59c:	4053      	eors	r3, r2
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d006      	beq.n	800c5b2 <main+0x29a>
 800c5a4:	4b5a      	ldr	r3, [pc, #360]	@ (800c710 <main+0x3f8>)
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d002      	beq.n	800c5b2 <main+0x29a>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	f001 fb27 	bl	800dc00 <sen5x_enable>
        }
        sen5x_statemachine();
 800c5b2:	f002 f8a3 	bl	800e6fc <sen5x_statemachine>
 800c5b6:	e020      	b.n	800c5fa <main+0x2e2>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800c5b8:	4b3b      	ldr	r3, [pc, #236]	@ (800c6a8 <main+0x390>)
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d81c      	bhi.n	800c5fa <main+0x2e2>
 800c5c0:	4b4e      	ldr	r3, [pc, #312]	@ (800c6fc <main+0x3e4>)
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	4053      	eors	r3, r2
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d015      	beq.n	800c5fa <main+0x2e2>
 800c5ce:	4b4c      	ldr	r3, [pc, #304]	@ (800c700 <main+0x3e8>)
 800c5d0:	789b      	ldrb	r3, [r3, #2]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d011      	beq.n	800c5fa <main+0x2e2>
        Info("Battery level insufficient for sen5x operation");
 800c5d6:	4a54      	ldr	r2, [pc, #336]	@ (800c728 <main+0x410>)
 800c5d8:	4b35      	ldr	r3, [pc, #212]	@ (800c6b0 <main+0x398>)
 800c5da:	0019      	movs	r1, r3
 800c5dc:	2002      	movs	r0, #2
 800c5de:	f006 feb5 	bl	801334c <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800c5e2:	4b47      	ldr	r3, [pc, #284]	@ (800c700 <main+0x3e8>)
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800c5e8:	4b50      	ldr	r3, [pc, #320]	@ (800c72c <main+0x414>)
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800c5ee:	4b50      	ldr	r3, [pc, #320]	@ (800c730 <main+0x418>)
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d001      	beq.n	800c5fa <main+0x2e2>
          sen5x_Power_Off();
 800c5f6:	f001 fb8f 	bl	800dd18 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800c5fa:	f7fa fec3 	bl	8007384 <ESP_Upkeep>
 800c5fe:	0003      	movs	r3, r0
 800c600:	001a      	movs	r2, r3
 800c602:	4b40      	ldr	r3, [pc, #256]	@ (800c704 <main+0x3ec>)
 800c604:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800c606:	4b41      	ldr	r3, [pc, #260]	@ (800c70c <main+0x3f4>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	2201      	movs	r2, #1
 800c60c:	4053      	eors	r3, r2
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00f      	beq.n	800c634 <main+0x31c>
 800c614:	4b27      	ldr	r3, [pc, #156]	@ (800c6b4 <main+0x39c>)
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	2201      	movs	r2, #1
 800c61a:	4053      	eors	r3, r2
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d008      	beq.n	800c634 <main+0x31c>
 800c622:	4b39      	ldr	r3, [pc, #228]	@ (800c708 <main+0x3f0>)
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	2201      	movs	r2, #1
 800c628:	4053      	eors	r3, r2
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <main+0x31c>
      Device_Test();  // for device with startup time
 800c630:	f000 fcce 	bl	800cfd0 <Device_Test>
    }
    if (!usbPluggedIn) {
 800c634:	4b36      	ldr	r3, [pc, #216]	@ (800c710 <main+0x3f8>)
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	2201      	movs	r2, #1
 800c63a:	4053      	eors	r3, r2
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d100      	bne.n	800c644 <main+0x32c>
 800c642:	e082      	b.n	800c74a <main+0x432>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800c644:	4b3b      	ldr	r3, [pc, #236]	@ (800c734 <main+0x41c>)
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	2201      	movs	r2, #1
 800c64a:	4053      	eors	r3, r2
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d100      	bne.n	800c654 <main+0x33c>
 800c652:	e07a      	b.n	800c74a <main+0x432>
 800c654:	f000 fd3a 	bl	800d0cc <AllDevicesReady>
 800c658:	1e03      	subs	r3, r0, #0
 800c65a:	d100      	bne.n	800c65e <main+0x346>
 800c65c:	e075      	b.n	800c74a <main+0x432>
 800c65e:	4b36      	ldr	r3, [pc, #216]	@ (800c738 <main+0x420>)
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d071      	beq.n	800c74a <main+0x432>
        EnabledConnectedDevices();
 800c666:	f000 fe47 	bl	800d2f8 <EnabledConnectedDevices>
        if (ReadSolarVoltage() > 4500) {  // if battery is fully charged and sun is shining wake-up about every 5 minutes
 800c66a:	f7fc fd9f 	bl	80091ac <ReadSolarVoltage>
 800c66e:	0003      	movs	r3, r0
 800c670:	001a      	movs	r2, r3
 800c672:	4b2b      	ldr	r3, [pc, #172]	@ (800c720 <main+0x408>)
 800c674:	429a      	cmp	r2, r3
 800c676:	d90c      	bls.n	800c692 <main+0x37a>
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM_SUN:WAIT_WITHOUT_PM_SUN);
 800c678:	4b30      	ldr	r3, [pc, #192]	@ (800c73c <main+0x424>)
 800c67a:	795b      	ldrb	r3, [r3, #5]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <main+0x36e>
 800c680:	2382      	movs	r3, #130	@ 0x82
 800c682:	005b      	lsls	r3, r3, #1
 800c684:	e001      	b.n	800c68a <main+0x372>
 800c686:	238c      	movs	r3, #140	@ 0x8c
 800c688:	005b      	lsls	r3, r3, #1
 800c68a:	0018      	movs	r0, r3
 800c68c:	f7fd fa6c 	bl	8009b68 <Enter_Stop_Mode>
 800c690:	e05b      	b.n	800c74a <main+0x432>
        }
        else {
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800c692:	4b2a      	ldr	r3, [pc, #168]	@ (800c73c <main+0x424>)
 800c694:	795b      	ldrb	r3, [r3, #5]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d052      	beq.n	800c740 <main+0x428>
 800c69a:	23d7      	movs	r3, #215	@ 0xd7
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	e051      	b.n	800c744 <main+0x42c>
 800c6a0:	20001ec0 	.word	0x20001ec0
 800c6a4:	20001e80 	.word	0x20001e80
 800c6a8:	20000e2c 	.word	0x20000e2c
 800c6ac:	0802c2c0 	.word	0x0802c2c0
 800c6b0:	0802c2e4 	.word	0x0802c2e4
 800c6b4:	20000e11 	.word	0x20000e11
 800c6b8:	20000e18 	.word	0x20000e18
 800c6bc:	20001ff8 	.word	0x20001ff8
 800c6c0:	20000eac 	.word	0x20000eac
 800c6c4:	20001f00 	.word	0x20001f00
 800c6c8:	20000d8c 	.word	0x20000d8c
 800c6cc:	20000dc8 	.word	0x20000dc8
 800c6d0:	0802c2e8 	.word	0x0802c2e8
 800c6d4:	0802dd1c 	.word	0x0802dd1c
 800c6d8:	200020b0 	.word	0x200020b0
 800c6dc:	20000b88 	.word	0x20000b88
 800c6e0:	20000c54 	.word	0x20000c54
 800c6e4:	000061a8 	.word	0x000061a8
 800c6e8:	20000e28 	.word	0x20000e28
 800c6ec:	20000e13 	.word	0x20000e13
 800c6f0:	0802c2fc 	.word	0x0802c2fc
 800c6f4:	20000098 	.word	0x20000098
 800c6f8:	0000c350 	.word	0x0000c350
 800c6fc:	20000097 	.word	0x20000097
 800c700:	20000e30 	.word	0x20000e30
 800c704:	20000e15 	.word	0x20000e15
 800c708:	20000e12 	.word	0x20000e12
 800c70c:	20000e10 	.word	0x20000e10
 800c710:	20001e61 	.word	0x20001e61
 800c714:	20000ed4 	.word	0x20000ed4
 800c718:	0802c330 	.word	0x0802c330
 800c71c:	0802c368 	.word	0x0802c368
 800c720:	00001194 	.word	0x00001194
 800c724:	20000e14 	.word	0x20000e14
 800c728:	0802c36c 	.word	0x0802c36c
 800c72c:	20000ed2 	.word	0x20000ed2
 800c730:	20000ed1 	.word	0x20000ed1
 800c734:	20001e62 	.word	0x20001e62
 800c738:	200005a8 	.word	0x200005a8
 800c73c:	20000e38 	.word	0x20000e38
 800c740:	23dc      	movs	r3, #220	@ 0xdc
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	0018      	movs	r0, r3
 800c746:	f7fd fa0f 	bl	8009b68 <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 800c74a:	4b0d      	ldr	r3, [pc, #52]	@ (800c780 <main+0x468>)
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <main+0x43e>
      check_cli_command();
 800c752:	f000 f8a3 	bl	800c89c <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800c756:	f7fc fd7d 	bl	8009254 <Check_USB_PowerOn>
 800c75a:	1e03      	subs	r3, r0, #0
 800c75c:	d100      	bne.n	800c760 <main+0x448>
 800c75e:	e671      	b.n	800c444 <main+0x12c>
 800c760:	4b08      	ldr	r3, [pc, #32]	@ (800c784 <main+0x46c>)
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	2201      	movs	r2, #1
 800c766:	4053      	eors	r3, r2
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d100      	bne.n	800c770 <main+0x458>
 800c76e:	e669      	b.n	800c444 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 800c770:	f015 fe98 	bl	80224a4 <GetUsbRxPointer>
 800c774:	0003      	movs	r3, r0
 800c776:	0018      	movs	r0, r3
 800c778:	f7fc fac2 	bl	8008d00 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800c77c:	e662      	b.n	800c444 <main+0x12c>
 800c77e:	46c0      	nop			@ (mov r8, r8)
 800c780:	20000e18 	.word	0x20000e18
 800c784:	200005a3 	.word	0x200005a3

0800c788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c788:	b590      	push	{r4, r7, lr}
 800c78a:	b09d      	sub	sp, #116	@ 0x74
 800c78c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c78e:	2438      	movs	r4, #56	@ 0x38
 800c790:	193b      	adds	r3, r7, r4
 800c792:	0018      	movs	r0, r3
 800c794:	2338      	movs	r3, #56	@ 0x38
 800c796:	001a      	movs	r2, r3
 800c798:	2100      	movs	r1, #0
 800c79a:	f019 f8cb 	bl	8025934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c79e:	2324      	movs	r3, #36	@ 0x24
 800c7a0:	18fb      	adds	r3, r7, r3
 800c7a2:	0018      	movs	r0, r3
 800c7a4:	2314      	movs	r3, #20
 800c7a6:	001a      	movs	r2, r3
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	f019 f8c3 	bl	8025934 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c7ae:	003b      	movs	r3, r7
 800c7b0:	0018      	movs	r0, r3
 800c7b2:	2324      	movs	r3, #36	@ 0x24
 800c7b4:	001a      	movs	r2, r3
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	f019 f8bc 	bl	8025934 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c7bc:	4b34      	ldr	r3, [pc, #208]	@ (800c890 <SystemClock_Config+0x108>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a34      	ldr	r2, [pc, #208]	@ (800c894 <SystemClock_Config+0x10c>)
 800c7c2:	401a      	ands	r2, r3
 800c7c4:	4b32      	ldr	r3, [pc, #200]	@ (800c890 <SystemClock_Config+0x108>)
 800c7c6:	2180      	movs	r1, #128	@ 0x80
 800c7c8:	0109      	lsls	r1, r1, #4
 800c7ca:	430a      	orrs	r2, r1
 800c7cc:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800c7ce:	f00d fea9 	bl	801a524 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800c7d2:	4b31      	ldr	r3, [pc, #196]	@ (800c898 <SystemClock_Config+0x110>)
 800c7d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7d6:	4a2f      	ldr	r2, [pc, #188]	@ (800c894 <SystemClock_Config+0x10c>)
 800c7d8:	401a      	ands	r2, r3
 800c7da:	4b2f      	ldr	r3, [pc, #188]	@ (800c898 <SystemClock_Config+0x110>)
 800c7dc:	2180      	movs	r1, #128	@ 0x80
 800c7de:	0149      	lsls	r1, r1, #5
 800c7e0:	430a      	orrs	r2, r1
 800c7e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800c7e4:	193b      	adds	r3, r7, r4
 800c7e6:	2226      	movs	r2, #38	@ 0x26
 800c7e8:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c7ea:	193b      	adds	r3, r7, r4
 800c7ec:	2280      	movs	r2, #128	@ 0x80
 800c7ee:	0052      	lsls	r2, r2, #1
 800c7f0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c7f2:	0021      	movs	r1, r4
 800c7f4:	187b      	adds	r3, r7, r1
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c7fa:	187b      	adds	r3, r7, r1
 800c7fc:	2210      	movs	r2, #16
 800c7fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c800:	187b      	adds	r3, r7, r1
 800c802:	2201      	movs	r2, #1
 800c804:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c806:	187b      	adds	r3, r7, r1
 800c808:	2200      	movs	r2, #0
 800c80a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c80c:	187b      	adds	r3, r7, r1
 800c80e:	0018      	movs	r0, r3
 800c810:	f00d ff18 	bl	801a644 <HAL_RCC_OscConfig>
 800c814:	1e03      	subs	r3, r0, #0
 800c816:	d001      	beq.n	800c81c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800c818:	f000 f910 	bl	800ca3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c81c:	2124      	movs	r1, #36	@ 0x24
 800c81e:	187b      	adds	r3, r7, r1
 800c820:	220f      	movs	r2, #15
 800c822:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800c824:	187b      	adds	r3, r7, r1
 800c826:	2201      	movs	r2, #1
 800c828:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c82a:	187b      	adds	r3, r7, r1
 800c82c:	2200      	movs	r2, #0
 800c82e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c830:	187b      	adds	r3, r7, r1
 800c832:	2200      	movs	r2, #0
 800c834:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c836:	187b      	adds	r3, r7, r1
 800c838:	2200      	movs	r2, #0
 800c83a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800c83c:	187b      	adds	r3, r7, r1
 800c83e:	2100      	movs	r1, #0
 800c840:	0018      	movs	r0, r3
 800c842:	f00e fad3 	bl	801adec <HAL_RCC_ClockConfig>
 800c846:	1e03      	subs	r3, r0, #0
 800c848:	d001      	beq.n	800c84e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800c84a:	f000 f8f7 	bl	800ca3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800c84e:	003b      	movs	r3, r7
 800c850:	226d      	movs	r2, #109	@ 0x6d
 800c852:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800c854:	003b      	movs	r3, r7
 800c856:	2200      	movs	r2, #0
 800c858:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800c85a:	003b      	movs	r3, r7
 800c85c:	2200      	movs	r2, #0
 800c85e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c860:	003b      	movs	r3, r7
 800c862:	2200      	movs	r2, #0
 800c864:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c866:	003b      	movs	r3, r7
 800c868:	2280      	movs	r2, #128	@ 0x80
 800c86a:	0252      	lsls	r2, r2, #9
 800c86c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c86e:	003b      	movs	r3, r7
 800c870:	2280      	movs	r2, #128	@ 0x80
 800c872:	04d2      	lsls	r2, r2, #19
 800c874:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c876:	003b      	movs	r3, r7
 800c878:	0018      	movs	r0, r3
 800c87a:	f00e fcdb 	bl	801b234 <HAL_RCCEx_PeriphCLKConfig>
 800c87e:	1e03      	subs	r3, r0, #0
 800c880:	d001      	beq.n	800c886 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800c882:	f000 f8db 	bl	800ca3c <Error_Handler>
  }
}
 800c886:	46c0      	nop			@ (mov r8, r8)
 800c888:	46bd      	mov	sp, r7
 800c88a:	b01d      	add	sp, #116	@ 0x74
 800c88c:	bd90      	pop	{r4, r7, pc}
 800c88e:	46c0      	nop			@ (mov r8, r8)
 800c890:	40007000 	.word	0x40007000
 800c894:	ffffe7ff 	.word	0xffffe7ff
 800c898:	40021000 	.word	0x40021000

0800c89c <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800c89c:	b580      	push	{r7, lr}
 800c89e:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800c8a0:	4b38      	ldr	r3, [pc, #224]	@ (800c984 <check_cli_command+0xe8>)
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	3b61      	subs	r3, #97	@ 0x61
 800c8a6:	2b15      	cmp	r3, #21
 800c8a8:	d836      	bhi.n	800c918 <check_cli_command+0x7c>
 800c8aa:	009a      	lsls	r2, r3, #2
 800c8ac:	4b36      	ldr	r3, [pc, #216]	@ (800c988 <check_cli_command+0xec>)
 800c8ae:	18d3      	adds	r3, r2, r3
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800c8b4:	4b35      	ldr	r3, [pc, #212]	@ (800c98c <check_cli_command+0xf0>)
 800c8b6:	0018      	movs	r0, r3
 800c8b8:	f018 fec8 	bl	802564c <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800c8bc:	2003      	movs	r0, #3
 800c8be:	f006 fdaf 	bl	8013420 <SetVerboseLevel>
      break;
 800c8c2:	e058      	b.n	800c976 <check_cli_command+0xda>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800c8c4:	f7fb fe5a 	bl	800857c <PC_show_Keys>
    break;
 800c8c8:	e055      	b.n	800c976 <check_cli_command+0xda>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800c8ca:	f7f8 f80b 	bl	80048e4 <forceNTPupdate>
    break;
 800c8ce:	e052      	b.n	800c976 <check_cli_command+0xda>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800c8d0:	4b2f      	ldr	r3, [pc, #188]	@ (800c990 <check_cli_command+0xf4>)
 800c8d2:	0018      	movs	r0, r3
 800c8d4:	f018 feba 	bl	802564c <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800c8d8:	2002      	movs	r0, #2
 800c8da:	f006 fda1 	bl	8013420 <SetVerboseLevel>
      break;
 800c8de:	e04a      	b.n	800c976 <check_cli_command+0xda>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800c8e0:	4b2c      	ldr	r3, [pc, #176]	@ (800c994 <check_cli_command+0xf8>)
 800c8e2:	0018      	movs	r0, r3
 800c8e4:	f018 feb2 	bl	802564c <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800c8e8:	2001      	movs	r0, #1
 800c8ea:	f006 fd99 	bl	8013420 <SetVerboseLevel>
      break;
 800c8ee:	e042      	b.n	800c976 <check_cli_command+0xda>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800c8f0:	4b29      	ldr	r3, [pc, #164]	@ (800c998 <check_cli_command+0xfc>)
 800c8f2:	0018      	movs	r0, r3
 800c8f4:	f018 feaa 	bl	802564c <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	f006 fd91 	bl	8013420 <SetVerboseLevel>
      break;
 800c8fe:	e03a      	b.n	800c976 <check_cli_command+0xda>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800c900:	f007 fa64 	bl	8013dcc <HAL_GetTick>
 800c904:	0002      	movs	r2, r0
 800c906:	4b25      	ldr	r3, [pc, #148]	@ (800c99c <check_cli_command+0x100>)
 800c908:	601a      	str	r2, [r3, #0]
      break;
 800c90a:	e034      	b.n	800c976 <check_cli_command+0xda>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800c90c:	f7fc fd30 	bl	8009370 <showTime>
      break;
 800c910:	e031      	b.n	800c976 <check_cli_command+0xda>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    case (uint8_t)'v':
      BinaryReleaseInfo(); // show me the build
 800c912:	f006 fd9f 	bl	8013454 <BinaryReleaseInfo>
      break;
 800c916:	e02e      	b.n	800c976 <check_cli_command+0xda>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800c918:	4a21      	ldr	r2, [pc, #132]	@ (800c9a0 <check_cli_command+0x104>)
 800c91a:	4b22      	ldr	r3, [pc, #136]	@ (800c9a4 <check_cli_command+0x108>)
 800c91c:	0019      	movs	r1, r3
 800c91e:	2001      	movs	r0, #1
 800c920:	f006 fd14 	bl	801334c <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800c924:	4b20      	ldr	r3, [pc, #128]	@ (800c9a8 <check_cli_command+0x10c>)
 800c926:	0018      	movs	r0, r3
 800c928:	f018 fe90 	bl	802564c <puts>
      printf("a - VerboseLevel set to all\r\n");
 800c92c:	4b1f      	ldr	r3, [pc, #124]	@ (800c9ac <check_cli_command+0x110>)
 800c92e:	0018      	movs	r0, r3
 800c930:	f018 fe8c 	bl	802564c <puts>
      printf("e - show EEPROM\r\n");
 800c934:	4b1e      	ldr	r3, [pc, #120]	@ (800c9b0 <check_cli_command+0x114>)
 800c936:	0018      	movs	r0, r3
 800c938:	f018 fe88 	bl	802564c <puts>
      printf("f - Force NTP time synchronization\r\n");
 800c93c:	4b1d      	ldr	r3, [pc, #116]	@ (800c9b4 <check_cli_command+0x118>)
 800c93e:	0018      	movs	r0, r3
 800c940:	f018 fe84 	bl	802564c <puts>
      printf("i - VerboseLevel set to info\r\n");
 800c944:	4b1c      	ldr	r3, [pc, #112]	@ (800c9b8 <check_cli_command+0x11c>)
 800c946:	0018      	movs	r0, r3
 800c948:	f018 fe80 	bl	802564c <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800c94c:	4b1b      	ldr	r3, [pc, #108]	@ (800c9bc <check_cli_command+0x120>)
 800c94e:	0018      	movs	r0, r3
 800c950:	f018 fe7c 	bl	802564c <puts>
      printf("n - VerboseLevel set to none\r\n");
 800c954:	4b1a      	ldr	r3, [pc, #104]	@ (800c9c0 <check_cli_command+0x124>)
 800c956:	0018      	movs	r0, r3
 800c958:	f018 fe78 	bl	802564c <puts>
      printf("s - Start particle measurement\r\n");
 800c95c:	4b19      	ldr	r3, [pc, #100]	@ (800c9c4 <check_cli_command+0x128>)
 800c95e:	0018      	movs	r0, r3
 800c960:	f018 fe74 	bl	802564c <puts>
      printf("t - Show actual system time\r\n");
 800c964:	4b18      	ldr	r3, [pc, #96]	@ (800c9c8 <check_cli_command+0x12c>)
 800c966:	0018      	movs	r0, r3
 800c968:	f018 fe70 	bl	802564c <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
      printf("v - Show system version\r\n");
 800c96c:	4b17      	ldr	r3, [pc, #92]	@ (800c9cc <check_cli_command+0x130>)
 800c96e:	0018      	movs	r0, r3
 800c970:	f018 fe6c 	bl	802564c <puts>
  break;
 800c974:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800c976:	4b03      	ldr	r3, [pc, #12]	@ (800c984 <check_cli_command+0xe8>)
 800c978:	2200      	movs	r2, #0
 800c97a:	701a      	strb	r2, [r3, #0]
}
 800c97c:	46c0      	nop			@ (mov r8, r8)
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	46c0      	nop			@ (mov r8, r8)
 800c984:	20000e18 	.word	0x20000e18
 800c988:	0802dcc4 	.word	0x0802dcc4
 800c98c:	0802c39c 	.word	0x0802c39c
 800c990:	0802c3b8 	.word	0x0802c3b8
 800c994:	0802c3d4 	.word	0x0802c3d4
 800c998:	0802c3f4 	.word	0x0802c3f4
 800c99c:	20000ee0 	.word	0x20000ee0
 800c9a0:	0802c410 	.word	0x0802c410
 800c9a4:	0802c440 	.word	0x0802c440
 800c9a8:	0802c444 	.word	0x0802c444
 800c9ac:	0802c45c 	.word	0x0802c45c
 800c9b0:	0802c47c 	.word	0x0802c47c
 800c9b4:	0802c490 	.word	0x0802c490
 800c9b8:	0802c4b4 	.word	0x0802c4b4
 800c9bc:	0802c4d4 	.word	0x0802c4d4
 800c9c0:	0802c4f8 	.word	0x0802c4f8
 800c9c4:	0802c518 	.word	0x0802c518
 800c9c8:	0802c538 	.word	0x0802c538
 800c9cc:	0802c558 	.word	0x0802c558

0800c9d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800c9d8:	4907      	ldr	r1, [pc, #28]	@ (800c9f8 <HAL_UART_RxCpltCallback+0x28>)
 800c9da:	4b08      	ldr	r3, [pc, #32]	@ (800c9fc <HAL_UART_RxCpltCallback+0x2c>)
 800c9dc:	2201      	movs	r2, #1
 800c9de:	0018      	movs	r0, r3
 800c9e0:	f00f ffea 	bl	801c9b8 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800c9e4:	4904      	ldr	r1, [pc, #16]	@ (800c9f8 <HAL_UART_RxCpltCallback+0x28>)
 800c9e6:	4b05      	ldr	r3, [pc, #20]	@ (800c9fc <HAL_UART_RxCpltCallback+0x2c>)
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	0018      	movs	r0, r3
 800c9ec:	f00f ffe4 	bl	801c9b8 <HAL_UART_Receive_IT>
}
 800c9f0:	46c0      	nop			@ (mov r8, r8)
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	b002      	add	sp, #8
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	20000e18 	.word	0x20000e18
 800c9fc:	20001ff8 	.word	0x20001ff8

0800ca00 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	0002      	movs	r2, r0
 800ca08:	1dbb      	adds	r3, r7, #6
 800ca0a:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800ca0c:	1dbb      	adds	r3, r7, #6
 800ca0e:	881a      	ldrh	r2, [r3, #0]
 800ca10:	2380      	movs	r3, #128	@ 0x80
 800ca12:	021b      	lsls	r3, r3, #8
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d10b      	bne.n	800ca30 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800ca18:	f005 ff3e 	bl	8012898 <setuserToggle>
    if (GetPMSensorPresence()) {
 800ca1c:	f000 f860 	bl	800cae0 <GetPMSensorPresence>
 800ca20:	1e03      	subs	r3, r0, #0
 800ca22:	d005      	beq.n	800ca30 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800ca24:	4b04      	ldr	r3, [pc, #16]	@ (800ca38 <HAL_GPIO_EXTI_Callback+0x38>)
 800ca26:	2201      	movs	r2, #1
 800ca28:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	f001 f8b6 	bl	800db9c <sen5x_Set_sen5x_state>
    }
  }
}
 800ca30:	46c0      	nop			@ (mov r8, r8)
 800ca32:	46bd      	mov	sp, r7
 800ca34:	b002      	add	sp, #8
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	20000e30 	.word	0x20000e30

0800ca3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800ca40:	f005 fb56 	bl	80120f0 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ca44:	b672      	cpsid	i
}
 800ca46:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800ca48:	4a05      	ldr	r2, [pc, #20]	@ (800ca60 <Error_Handler+0x24>)
 800ca4a:	4b06      	ldr	r3, [pc, #24]	@ (800ca64 <Error_Handler+0x28>)
 800ca4c:	0019      	movs	r1, r3
 800ca4e:	2001      	movs	r0, #1
 800ca50:	f006 fc7c 	bl	801334c <CreateLine>

    HAL_Delay(2500);
 800ca54:	4b04      	ldr	r3, [pc, #16]	@ (800ca68 <Error_Handler+0x2c>)
 800ca56:	0018      	movs	r0, r3
 800ca58:	f007 f9c2 	bl	8013de0 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800ca5c:	46c0      	nop			@ (mov r8, r8)
 800ca5e:	e7f3      	b.n	800ca48 <Error_Handler+0xc>
 800ca60:	0802c574 	.word	0x0802c574
 800ca64:	0802c440 	.word	0x0802c440
 800ca68:	000009c4 	.word	0x000009c4

0800ca6c <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800ca70:	4b19      	ldr	r3, [pc, #100]	@ (800cad8 <testInit+0x6c>)
 800ca72:	2200      	movs	r2, #0
 800ca74:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800ca76:	4b18      	ldr	r3, [pc, #96]	@ (800cad8 <testInit+0x6c>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800ca7c:	4b16      	ldr	r3, [pc, #88]	@ (800cad8 <testInit+0x6c>)
 800ca7e:	2200      	movs	r2, #0
 800ca80:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800ca82:	4b15      	ldr	r3, [pc, #84]	@ (800cad8 <testInit+0x6c>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800ca88:	4b13      	ldr	r3, [pc, #76]	@ (800cad8 <testInit+0x6c>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800ca8e:	4b12      	ldr	r3, [pc, #72]	@ (800cad8 <testInit+0x6c>)
 800ca90:	2200      	movs	r2, #0
 800ca92:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800ca94:	4b10      	ldr	r3, [pc, #64]	@ (800cad8 <testInit+0x6c>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800ca9a:	4b0f      	ldr	r3, [pc, #60]	@ (800cad8 <testInit+0x6c>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800caa0:	4b0d      	ldr	r3, [pc, #52]	@ (800cad8 <testInit+0x6c>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800caa6:	4b0d      	ldr	r3, [pc, #52]	@ (800cadc <testInit+0x70>)
 800caa8:	2201      	movs	r2, #1
 800caaa:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800caac:	4b0b      	ldr	r3, [pc, #44]	@ (800cadc <testInit+0x70>)
 800caae:	2201      	movs	r2, #1
 800cab0:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800cab2:	4b0a      	ldr	r3, [pc, #40]	@ (800cadc <testInit+0x70>)
 800cab4:	2201      	movs	r2, #1
 800cab6:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800cab8:	4b08      	ldr	r3, [pc, #32]	@ (800cadc <testInit+0x70>)
 800caba:	2201      	movs	r2, #1
 800cabc:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800cabe:	4b07      	ldr	r3, [pc, #28]	@ (800cadc <testInit+0x70>)
 800cac0:	2201      	movs	r2, #1
 800cac2:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800cac4:	4b05      	ldr	r3, [pc, #20]	@ (800cadc <testInit+0x70>)
 800cac6:	2201      	movs	r2, #1
 800cac8:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800caca:	4b04      	ldr	r3, [pc, #16]	@ (800cadc <testInit+0x70>)
 800cacc:	2201      	movs	r2, #1
 800cace:	719a      	strb	r2, [r3, #6]
}
 800cad0:	46c0      	nop			@ (mov r8, r8)
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	46c0      	nop			@ (mov r8, r8)
 800cad8:	20000e38 	.word	0x20000e38
 800cadc:	20000e30 	.word	0x20000e30

0800cae0 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800cae0:	b580      	push	{r7, lr}
 800cae2:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800cae4:	4b02      	ldr	r3, [pc, #8]	@ (800caf0 <GetPMSensorPresence+0x10>)
 800cae6:	795b      	ldrb	r3, [r3, #5]
}
 800cae8:	0018      	movs	r0, r3
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	46c0      	nop			@ (mov r8, r8)
 800caf0:	20000e38 	.word	0x20000e38

0800caf4 <DisablePMSensor>:

void DisablePMSensor() {
 800caf4:	b580      	push	{r7, lr}
 800caf6:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800caf8:	4b02      	ldr	r3, [pc, #8]	@ (800cb04 <DisablePMSensor+0x10>)
 800cafa:	2200      	movs	r2, #0
 800cafc:	715a      	strb	r2, [r3, #5]
}
 800cafe:	46c0      	nop			@ (mov r8, r8)
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	20000e38 	.word	0x20000e38

0800cb08 <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800cb0c:	4b02      	ldr	r3, [pc, #8]	@ (800cb18 <IsAHT20SensorPresent+0x10>)
 800cb0e:	789b      	ldrb	r3, [r3, #2]
}
 800cb10:	0018      	movs	r0, r3
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	46c0      	nop			@ (mov r8, r8)
 800cb18:	20000e38 	.word	0x20000e38

0800cb1c <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800cb20:	4b02      	ldr	r3, [pc, #8]	@ (800cb2c <IsBMP280SensorPresent+0x10>)
 800cb22:	791b      	ldrb	r3, [r3, #4]
}
 800cb24:	0018      	movs	r0, r3
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	46c0      	nop			@ (mov r8, r8)
 800cb2c:	20000e38 	.word	0x20000e38

0800cb30 <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800cb30:	b580      	push	{r7, lr}
 800cb32:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800cb34:	4b02      	ldr	r3, [pc, #8]	@ (800cb40 <IsENS160SensorPresent+0x10>)
 800cb36:	78db      	ldrb	r3, [r3, #3]
}
 800cb38:	0018      	movs	r0, r3
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	46c0      	nop			@ (mov r8, r8)
 800cb40:	20000e38 	.word	0x20000e38

0800cb44 <IsSGPPresent>:

bool IsSGPPresent() {
 800cb44:	b580      	push	{r7, lr}
 800cb46:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800cb48:	4b02      	ldr	r3, [pc, #8]	@ (800cb54 <IsSGPPresent+0x10>)
 800cb4a:	785b      	ldrb	r3, [r3, #1]
}
 800cb4c:	0018      	movs	r0, r3
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	46c0      	nop			@ (mov r8, r8)
 800cb54:	20000e38 	.word	0x20000e38

0800cb58 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	0002      	movs	r2, r0
 800cb60:	1dfb      	adds	r3, r7, #7
 800cb62:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800cb64:	4b0b      	ldr	r3, [pc, #44]	@ (800cb94 <SetVOCSensorDIS_ENA+0x3c>)
 800cb66:	1dfa      	adds	r2, r7, #7
 800cb68:	7812      	ldrb	r2, [r2, #0]
 800cb6a:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800cb6c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb98 <SetVOCSensorDIS_ENA+0x40>)
 800cb6e:	1dfa      	adds	r2, r7, #7
 800cb70:	7812      	ldrb	r2, [r2, #0]
 800cb72:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800cb74:	1dfb      	adds	r3, r7, #7
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <SetVOCSensorDIS_ENA+0x28>
 800cb7c:	4b07      	ldr	r3, [pc, #28]	@ (800cb9c <SetVOCSensorDIS_ENA+0x44>)
 800cb7e:	e000      	b.n	800cb82 <SetVOCSensorDIS_ENA+0x2a>
 800cb80:	4b07      	ldr	r3, [pc, #28]	@ (800cba0 <SetVOCSensorDIS_ENA+0x48>)
 800cb82:	4a08      	ldr	r2, [pc, #32]	@ (800cba4 <SetVOCSensorDIS_ENA+0x4c>)
 800cb84:	4908      	ldr	r1, [pc, #32]	@ (800cba8 <SetVOCSensorDIS_ENA+0x50>)
 800cb86:	2003      	movs	r0, #3
 800cb88:	f006 fbe0 	bl	801334c <CreateLine>
}
 800cb8c:	46c0      	nop			@ (mov r8, r8)
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	b002      	add	sp, #8
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	20000e38 	.word	0x20000e38
 800cb98:	20000e30 	.word	0x20000e30
 800cb9c:	0802c5a0 	.word	0x0802c5a0
 800cba0:	0802c5a8 	.word	0x0802c5a8
 800cba4:	0802c5b4 	.word	0x0802c5b4
 800cba8:	0802c5c8 	.word	0x0802c5c8

0800cbac <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800cbac:	b580      	push	{r7, lr}
 800cbae:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800cbb0:	4b02      	ldr	r3, [pc, #8]	@ (800cbbc <IsPMSensorEnabled+0x10>)
 800cbb2:	789b      	ldrb	r3, [r3, #2]
}
 800cbb4:	0018      	movs	r0, r3
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	46c0      	nop			@ (mov r8, r8)
 800cbbc:	20000e30 	.word	0x20000e30

0800cbc0 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	0002      	movs	r2, r0
 800cbc8:	1dfb      	adds	r3, r7, #7
 800cbca:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800cbcc:	4b05      	ldr	r3, [pc, #20]	@ (800cbe4 <SetVOCSensorStatus+0x24>)
 800cbce:	7a1b      	ldrb	r3, [r3, #8]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d003      	beq.n	800cbdc <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800cbd4:	4b04      	ldr	r3, [pc, #16]	@ (800cbe8 <SetVOCSensorStatus+0x28>)
 800cbd6:	1dfa      	adds	r2, r7, #7
 800cbd8:	7812      	ldrb	r2, [r2, #0]
 800cbda:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800cbdc:	46c0      	nop			@ (mov r8, r8)
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	b002      	add	sp, #8
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	20000e38 	.word	0x20000e38
 800cbe8:	20000e30 	.word	0x20000e30

0800cbec <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	0002      	movs	r2, r0
 800cbf4:	1dfb      	adds	r3, r7, #7
 800cbf6:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800cbf8:	4b03      	ldr	r3, [pc, #12]	@ (800cc08 <SetPMSensorStatus+0x1c>)
 800cbfa:	1dfa      	adds	r2, r7, #7
 800cbfc:	7812      	ldrb	r2, [r2, #0]
 800cbfe:	709a      	strb	r2, [r3, #2]
}
 800cc00:	46c0      	nop			@ (mov r8, r8)
 800cc02:	46bd      	mov	sp, r7
 800cc04:	b002      	add	sp, #8
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	20000e30 	.word	0x20000e30

0800cc0c <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800cc10:	4b02      	ldr	r3, [pc, #8]	@ (800cc1c <SetESPMeasurementDone+0x10>)
 800cc12:	2201      	movs	r2, #1
 800cc14:	71da      	strb	r2, [r3, #7]
}
 800cc16:	46c0      	nop			@ (mov r8, r8)
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	20000e38 	.word	0x20000e38

0800cc20 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
 800cc2c:	603b      	str	r3, [r7, #0]
  testInit();
 800cc2e:	f7ff ff1d 	bl	800ca6c <testInit>
  I2CSensors_Init(sensorI2C);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	0018      	movs	r0, r3
 800cc36:	f7fb f87f 	bl	8007d38 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800cc3a:	f006 fe53 	bl	80138e4 <HIDS_DeviceConnected>
 800cc3e:	0003      	movs	r3, r0
 800cc40:	001a      	movs	r2, r3
 800cc42:	2301      	movs	r3, #1
 800cc44:	4053      	eors	r3, r2
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00c      	beq.n	800cc66 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800cc4c:	4abf      	ldr	r2, [pc, #764]	@ (800cf4c <Device_Init+0x32c>)
 800cc4e:	4bc0      	ldr	r3, [pc, #768]	@ (800cf50 <Device_Init+0x330>)
 800cc50:	0019      	movs	r1, r3
 800cc52:	2001      	movs	r0, #1
 800cc54:	f006 fb7a 	bl	801334c <CreateLine>
     SensorProbe.HT_Present = false;
 800cc58:	4bbe      	ldr	r3, [pc, #760]	@ (800cf54 <Device_Init+0x334>)
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800cc5e:	4bbe      	ldr	r3, [pc, #760]	@ (800cf58 <Device_Init+0x338>)
 800cc60:	2200      	movs	r2, #0
 800cc62:	701a      	strb	r2, [r3, #0]
 800cc64:	e008      	b.n	800cc78 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800cc66:	4bbb      	ldr	r3, [pc, #748]	@ (800cf54 <Device_Init+0x334>)
 800cc68:	2201      	movs	r2, #1
 800cc6a:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800cc6c:	4abb      	ldr	r2, [pc, #748]	@ (800cf5c <Device_Init+0x33c>)
 800cc6e:	4bbc      	ldr	r3, [pc, #752]	@ (800cf60 <Device_Init+0x340>)
 800cc70:	0019      	movs	r1, r3
 800cc72:	2003      	movs	r0, #3
 800cc74:	f006 fb6a 	bl	801334c <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800cc78:	f7fe f97a 	bl	800af70 <BMP280_DeviceConnected>
 800cc7c:	0003      	movs	r3, r0
 800cc7e:	001a      	movs	r2, r3
 800cc80:	2301      	movs	r3, #1
 800cc82:	4053      	eors	r3, r2
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d00c      	beq.n	800cca4 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800cc8a:	4ab6      	ldr	r2, [pc, #728]	@ (800cf64 <Device_Init+0x344>)
 800cc8c:	4bb0      	ldr	r3, [pc, #704]	@ (800cf50 <Device_Init+0x330>)
 800cc8e:	0019      	movs	r1, r3
 800cc90:	2001      	movs	r0, #1
 800cc92:	f006 fb5b 	bl	801334c <CreateLine>
     SensorProbe.BMP280_Present = false;
 800cc96:	4baf      	ldr	r3, [pc, #700]	@ (800cf54 <Device_Init+0x334>)
 800cc98:	2200      	movs	r2, #0
 800cc9a:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800cc9c:	4bae      	ldr	r3, [pc, #696]	@ (800cf58 <Device_Init+0x338>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	715a      	strb	r2, [r3, #5]
 800cca2:	e008      	b.n	800ccb6 <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800cca4:	4bab      	ldr	r3, [pc, #684]	@ (800cf54 <Device_Init+0x334>)
 800cca6:	2201      	movs	r2, #1
 800cca8:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800ccaa:	4aaf      	ldr	r2, [pc, #700]	@ (800cf68 <Device_Init+0x348>)
 800ccac:	4bac      	ldr	r3, [pc, #688]	@ (800cf60 <Device_Init+0x340>)
 800ccae:	0019      	movs	r1, r3
 800ccb0:	2003      	movs	r0, #3
 800ccb2:	f006 fb4b 	bl	801334c <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800ccb6:	f003 fd3d 	bl	8010734 <SGP_DeviceConnected>
 800ccba:	0003      	movs	r3, r0
 800ccbc:	001a      	movs	r2, r3
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	4053      	eors	r3, r2
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00c      	beq.n	800cce2 <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800ccc8:	4ba2      	ldr	r3, [pc, #648]	@ (800cf54 <Device_Init+0x334>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800ccce:	4aa7      	ldr	r2, [pc, #668]	@ (800cf6c <Device_Init+0x34c>)
 800ccd0:	4b9f      	ldr	r3, [pc, #636]	@ (800cf50 <Device_Init+0x330>)
 800ccd2:	0019      	movs	r1, r3
 800ccd4:	2001      	movs	r0, #1
 800ccd6:	f006 fb39 	bl	801334c <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800ccda:	4b9f      	ldr	r3, [pc, #636]	@ (800cf58 <Device_Init+0x338>)
 800ccdc:	2200      	movs	r2, #0
 800ccde:	705a      	strb	r2, [r3, #1]
 800cce0:	e00b      	b.n	800ccfa <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800cce2:	4b9c      	ldr	r3, [pc, #624]	@ (800cf54 <Device_Init+0x334>)
 800cce4:	2201      	movs	r2, #1
 800cce6:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800cce8:	4b9a      	ldr	r3, [pc, #616]	@ (800cf54 <Device_Init+0x334>)
 800ccea:	2201      	movs	r2, #1
 800ccec:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800ccee:	4aa0      	ldr	r2, [pc, #640]	@ (800cf70 <Device_Init+0x350>)
 800ccf0:	4b9b      	ldr	r3, [pc, #620]	@ (800cf60 <Device_Init+0x340>)
 800ccf2:	0019      	movs	r1, r3
 800ccf4:	2003      	movs	r0, #3
 800ccf6:	f006 fb29 	bl	801334c <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800ccfa:	f7f7 f8b5 	bl	8003e68 <ENS_DeviceConnected>
 800ccfe:	0003      	movs	r3, r0
 800cd00:	001a      	movs	r2, r3
 800cd02:	2301      	movs	r3, #1
 800cd04:	4053      	eors	r3, r2
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00c      	beq.n	800cd26 <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800cd0c:	4b91      	ldr	r3, [pc, #580]	@ (800cf54 <Device_Init+0x334>)
 800cd0e:	2200      	movs	r2, #0
 800cd10:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800cd12:	4a98      	ldr	r2, [pc, #608]	@ (800cf74 <Device_Init+0x354>)
 800cd14:	4b8e      	ldr	r3, [pc, #568]	@ (800cf50 <Device_Init+0x330>)
 800cd16:	0019      	movs	r1, r3
 800cd18:	2001      	movs	r0, #1
 800cd1a:	f006 fb17 	bl	801334c <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800cd1e:	4b8e      	ldr	r3, [pc, #568]	@ (800cf58 <Device_Init+0x338>)
 800cd20:	2200      	movs	r2, #0
 800cd22:	719a      	strb	r2, [r3, #6]
 800cd24:	e008      	b.n	800cd38 <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800cd26:	4b8b      	ldr	r3, [pc, #556]	@ (800cf54 <Device_Init+0x334>)
 800cd28:	2201      	movs	r2, #1
 800cd2a:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800cd2c:	4a92      	ldr	r2, [pc, #584]	@ (800cf78 <Device_Init+0x358>)
 800cd2e:	4b8c      	ldr	r3, [pc, #560]	@ (800cf60 <Device_Init+0x340>)
 800cd30:	0019      	movs	r1, r3
 800cd32:	2003      	movs	r0, #3
 800cd34:	f006 fb0a 	bl	801334c <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800cd38:	f7fd fc3c 	bl	800a5b4 <AHT20_DeviceConnected>
 800cd3c:	0003      	movs	r3, r0
 800cd3e:	001a      	movs	r2, r3
 800cd40:	2301      	movs	r3, #1
 800cd42:	4053      	eors	r3, r2
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00c      	beq.n	800cd64 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800cd4a:	4a8c      	ldr	r2, [pc, #560]	@ (800cf7c <Device_Init+0x35c>)
 800cd4c:	4b80      	ldr	r3, [pc, #512]	@ (800cf50 <Device_Init+0x330>)
 800cd4e:	0019      	movs	r1, r3
 800cd50:	2001      	movs	r0, #1
 800cd52:	f006 fafb 	bl	801334c <CreateLine>
     SensorProbe.AHT20_Present = false;
 800cd56:	4b7f      	ldr	r3, [pc, #508]	@ (800cf54 <Device_Init+0x334>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800cd5c:	4b7e      	ldr	r3, [pc, #504]	@ (800cf58 <Device_Init+0x338>)
 800cd5e:	2200      	movs	r2, #0
 800cd60:	711a      	strb	r2, [r3, #4]
 800cd62:	e008      	b.n	800cd76 <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800cd64:	4b7b      	ldr	r3, [pc, #492]	@ (800cf54 <Device_Init+0x334>)
 800cd66:	2201      	movs	r2, #1
 800cd68:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800cd6a:	4a85      	ldr	r2, [pc, #532]	@ (800cf80 <Device_Init+0x360>)
 800cd6c:	4b7c      	ldr	r3, [pc, #496]	@ (800cf60 <Device_Init+0x340>)
 800cd6e:	0019      	movs	r1, r3
 800cd70:	2003      	movs	r0, #3
 800cd72:	f006 faeb 	bl	801334c <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800cd76:	4b77      	ldr	r3, [pc, #476]	@ (800cf54 <Device_Init+0x334>)
 800cd78:	785b      	ldrb	r3, [r3, #1]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d009      	beq.n	800cd92 <Device_Init+0x172>
 800cd7e:	4b75      	ldr	r3, [pc, #468]	@ (800cf54 <Device_Init+0x334>)
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d005      	beq.n	800cd92 <Device_Init+0x172>
    SetDBLED(false, true, false);
 800cd86:	2200      	movs	r2, #0
 800cd88:	2101      	movs	r1, #1
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	f005 f80a 	bl	8011da4 <SetDBLED>
 800cd90:	e018      	b.n	800cdc4 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800cd92:	2200      	movs	r2, #0
 800cd94:	2100      	movs	r1, #0
 800cd96:	2001      	movs	r0, #1
 800cd98:	f005 f804 	bl	8011da4 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800cd9c:	4b79      	ldr	r3, [pc, #484]	@ (800cf84 <Device_Init+0x364>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	2101      	movs	r1, #1
 800cda2:	0018      	movs	r0, r3
 800cda4:	f008 faa3 	bl	80152ee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800cda8:	2380      	movs	r3, #128	@ 0x80
 800cdaa:	005b      	lsls	r3, r3, #1
 800cdac:	4875      	ldr	r0, [pc, #468]	@ (800cf84 <Device_Init+0x364>)
 800cdae:	2201      	movs	r2, #1
 800cdb0:	0019      	movs	r1, r3
 800cdb2:	f008 fa9c 	bl	80152ee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800cdb6:	2380      	movs	r3, #128	@ 0x80
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4872      	ldr	r0, [pc, #456]	@ (800cf84 <Device_Init+0x364>)
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	0019      	movs	r1, r3
 800cdc0:	f008 fa95 	bl	80152ee <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800cdc4:	4b64      	ldr	r3, [pc, #400]	@ (800cf58 <Device_Init+0x338>)
 800cdc6:	78db      	ldrb	r3, [r3, #3]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d028      	beq.n	800ce1e <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800cdcc:	4a6e      	ldr	r2, [pc, #440]	@ (800cf88 <Device_Init+0x368>)
 800cdce:	4b6f      	ldr	r3, [pc, #444]	@ (800cf8c <Device_Init+0x36c>)
 800cdd0:	0019      	movs	r1, r3
 800cdd2:	2002      	movs	r0, #2
 800cdd4:	f006 faba 	bl	801334c <CreateLine>
    if (!enableMicrophone(true)) {
 800cdd8:	2001      	movs	r0, #1
 800cdda:	f004 f8e1 	bl	8010fa0 <enableMicrophone>
 800cdde:	0003      	movs	r3, r0
 800cde0:	001a      	movs	r2, r3
 800cde2:	2301      	movs	r3, #1
 800cde4:	4053      	eors	r3, r2
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00c      	beq.n	800ce06 <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800cdec:	4a68      	ldr	r2, [pc, #416]	@ (800cf90 <Device_Init+0x370>)
 800cdee:	4b58      	ldr	r3, [pc, #352]	@ (800cf50 <Device_Init+0x330>)
 800cdf0:	0019      	movs	r1, r3
 800cdf2:	2001      	movs	r0, #1
 800cdf4:	f006 faaa 	bl	801334c <CreateLine>
      SensorProbe.MIC_Present = false;
 800cdf8:	4b56      	ldr	r3, [pc, #344]	@ (800cf54 <Device_Init+0x334>)
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800cdfe:	4b56      	ldr	r3, [pc, #344]	@ (800cf58 <Device_Init+0x338>)
 800ce00:	2200      	movs	r2, #0
 800ce02:	70da      	strb	r2, [r3, #3]
 800ce04:	e00b      	b.n	800ce1e <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800ce06:	4b53      	ldr	r3, [pc, #332]	@ (800cf54 <Device_Init+0x334>)
 800ce08:	2201      	movs	r2, #1
 800ce0a:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800ce0c:	4b52      	ldr	r3, [pc, #328]	@ (800cf58 <Device_Init+0x338>)
 800ce0e:	2201      	movs	r2, #1
 800ce10:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800ce12:	4a60      	ldr	r2, [pc, #384]	@ (800cf94 <Device_Init+0x374>)
 800ce14:	4b52      	ldr	r3, [pc, #328]	@ (800cf60 <Device_Init+0x340>)
 800ce16:	0019      	movs	r1, r3
 800ce18:	2003      	movs	r0, #3
 800ce1a:	f006 fa97 	bl	801334c <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800ce1e:	f000 ffb1 	bl	800dd84 <probe_sen5x>
 800ce22:	1e03      	subs	r3, r0, #0
 800ce24:	d122      	bne.n	800ce6c <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800ce26:	4a5c      	ldr	r2, [pc, #368]	@ (800cf98 <Device_Init+0x378>)
 800ce28:	4b4d      	ldr	r3, [pc, #308]	@ (800cf60 <Device_Init+0x340>)
 800ce2a:	0019      	movs	r1, r3
 800ce2c:	2003      	movs	r0, #3
 800ce2e:	f006 fa8d 	bl	801334c <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800ce32:	4b48      	ldr	r3, [pc, #288]	@ (800cf54 <Device_Init+0x334>)
 800ce34:	2201      	movs	r2, #1
 800ce36:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800ce38:	4b47      	ldr	r3, [pc, #284]	@ (800cf58 <Device_Init+0x338>)
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800ce3e:	4b57      	ldr	r3, [pc, #348]	@ (800cf9c <Device_Init+0x37c>)
 800ce40:	791b      	ldrb	r3, [r3, #4]
 800ce42:	2b34      	cmp	r3, #52	@ 0x34
 800ce44:	d003      	beq.n	800ce4e <Device_Init+0x22e>
 800ce46:	4b55      	ldr	r3, [pc, #340]	@ (800cf9c <Device_Init+0x37c>)
 800ce48:	791b      	ldrb	r3, [r3, #4]
 800ce4a:	2b35      	cmp	r3, #53	@ 0x35
 800ce4c:	d11c      	bne.n	800ce88 <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800ce4e:	4a54      	ldr	r2, [pc, #336]	@ (800cfa0 <Device_Init+0x380>)
 800ce50:	4b4e      	ldr	r3, [pc, #312]	@ (800cf8c <Device_Init+0x36c>)
 800ce52:	0019      	movs	r1, r3
 800ce54:	2002      	movs	r0, #2
 800ce56:	f006 fa79 	bl	801334c <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800ce5a:	4b3f      	ldr	r3, [pc, #252]	@ (800cf58 <Device_Init+0x338>)
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800ce60:	4b3c      	ldr	r3, [pc, #240]	@ (800cf54 <Device_Init+0x334>)
 800ce62:	2200      	movs	r2, #0
 800ce64:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800ce66:	f003 fe4b 	bl	8010b00 <SGP_SoftReset>
 800ce6a:	e00d      	b.n	800ce88 <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800ce6c:	f000 ff54 	bl	800dd18 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800ce70:	4a4c      	ldr	r2, [pc, #304]	@ (800cfa4 <Device_Init+0x384>)
 800ce72:	4b3b      	ldr	r3, [pc, #236]	@ (800cf60 <Device_Init+0x340>)
 800ce74:	0019      	movs	r1, r3
 800ce76:	2003      	movs	r0, #3
 800ce78:	f006 fa68 	bl	801334c <CreateLine>
    SensorProbe.PM_Present = false;
 800ce7c:	4b35      	ldr	r3, [pc, #212]	@ (800cf54 <Device_Init+0x334>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800ce82:	4b35      	ldr	r3, [pc, #212]	@ (800cf58 <Device_Init+0x338>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800ce88:	4b32      	ldr	r3, [pc, #200]	@ (800cf54 <Device_Init+0x334>)
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <Device_Init+0x274>
 800ce90:	4b45      	ldr	r3, [pc, #276]	@ (800cfa8 <Device_Init+0x388>)
 800ce92:	e000      	b.n	800ce96 <Device_Init+0x276>
 800ce94:	4b45      	ldr	r3, [pc, #276]	@ (800cfac <Device_Init+0x38c>)
 800ce96:	4a46      	ldr	r2, [pc, #280]	@ (800cfb0 <Device_Init+0x390>)
 800ce98:	493c      	ldr	r1, [pc, #240]	@ (800cf8c <Device_Init+0x36c>)
 800ce9a:	2002      	movs	r0, #2
 800ce9c:	f006 fa56 	bl	801334c <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800cea0:	4b2c      	ldr	r3, [pc, #176]	@ (800cf54 <Device_Init+0x334>)
 800cea2:	785b      	ldrb	r3, [r3, #1]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d001      	beq.n	800ceac <Device_Init+0x28c>
 800cea8:	4b3f      	ldr	r3, [pc, #252]	@ (800cfa8 <Device_Init+0x388>)
 800ceaa:	e000      	b.n	800ceae <Device_Init+0x28e>
 800ceac:	4b3f      	ldr	r3, [pc, #252]	@ (800cfac <Device_Init+0x38c>)
 800ceae:	4a41      	ldr	r2, [pc, #260]	@ (800cfb4 <Device_Init+0x394>)
 800ceb0:	4936      	ldr	r1, [pc, #216]	@ (800cf8c <Device_Init+0x36c>)
 800ceb2:	2002      	movs	r0, #2
 800ceb4:	f006 fa4a 	bl	801334c <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800ceb8:	4b26      	ldr	r3, [pc, #152]	@ (800cf54 <Device_Init+0x334>)
 800ceba:	789b      	ldrb	r3, [r3, #2]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d001      	beq.n	800cec4 <Device_Init+0x2a4>
 800cec0:	4b39      	ldr	r3, [pc, #228]	@ (800cfa8 <Device_Init+0x388>)
 800cec2:	e000      	b.n	800cec6 <Device_Init+0x2a6>
 800cec4:	4b39      	ldr	r3, [pc, #228]	@ (800cfac <Device_Init+0x38c>)
 800cec6:	4a3c      	ldr	r2, [pc, #240]	@ (800cfb8 <Device_Init+0x398>)
 800cec8:	4930      	ldr	r1, [pc, #192]	@ (800cf8c <Device_Init+0x36c>)
 800ceca:	2002      	movs	r0, #2
 800cecc:	f006 fa3e 	bl	801334c <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800ced0:	4b20      	ldr	r3, [pc, #128]	@ (800cf54 <Device_Init+0x334>)
 800ced2:	791b      	ldrb	r3, [r3, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d001      	beq.n	800cedc <Device_Init+0x2bc>
 800ced8:	4b33      	ldr	r3, [pc, #204]	@ (800cfa8 <Device_Init+0x388>)
 800ceda:	e000      	b.n	800cede <Device_Init+0x2be>
 800cedc:	4b33      	ldr	r3, [pc, #204]	@ (800cfac <Device_Init+0x38c>)
 800cede:	4a37      	ldr	r2, [pc, #220]	@ (800cfbc <Device_Init+0x39c>)
 800cee0:	492a      	ldr	r1, [pc, #168]	@ (800cf8c <Device_Init+0x36c>)
 800cee2:	2002      	movs	r0, #2
 800cee4:	f006 fa32 	bl	801334c <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800cee8:	4b1a      	ldr	r3, [pc, #104]	@ (800cf54 <Device_Init+0x334>)
 800ceea:	78db      	ldrb	r3, [r3, #3]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d001      	beq.n	800cef4 <Device_Init+0x2d4>
 800cef0:	4b2d      	ldr	r3, [pc, #180]	@ (800cfa8 <Device_Init+0x388>)
 800cef2:	e000      	b.n	800cef6 <Device_Init+0x2d6>
 800cef4:	4b2d      	ldr	r3, [pc, #180]	@ (800cfac <Device_Init+0x38c>)
 800cef6:	4a32      	ldr	r2, [pc, #200]	@ (800cfc0 <Device_Init+0x3a0>)
 800cef8:	4924      	ldr	r1, [pc, #144]	@ (800cf8c <Device_Init+0x36c>)
 800cefa:	2002      	movs	r0, #2
 800cefc:	f006 fa26 	bl	801334c <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800cf00:	4b14      	ldr	r3, [pc, #80]	@ (800cf54 <Device_Init+0x334>)
 800cf02:	795b      	ldrb	r3, [r3, #5]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d001      	beq.n	800cf0c <Device_Init+0x2ec>
 800cf08:	4b27      	ldr	r3, [pc, #156]	@ (800cfa8 <Device_Init+0x388>)
 800cf0a:	e000      	b.n	800cf0e <Device_Init+0x2ee>
 800cf0c:	4b27      	ldr	r3, [pc, #156]	@ (800cfac <Device_Init+0x38c>)
 800cf0e:	4a2d      	ldr	r2, [pc, #180]	@ (800cfc4 <Device_Init+0x3a4>)
 800cf10:	491e      	ldr	r1, [pc, #120]	@ (800cf8c <Device_Init+0x36c>)
 800cf12:	2002      	movs	r0, #2
 800cf14:	f006 fa1a 	bl	801334c <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800cf18:	4b0e      	ldr	r3, [pc, #56]	@ (800cf54 <Device_Init+0x334>)
 800cf1a:	799b      	ldrb	r3, [r3, #6]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d001      	beq.n	800cf24 <Device_Init+0x304>
 800cf20:	4b21      	ldr	r3, [pc, #132]	@ (800cfa8 <Device_Init+0x388>)
 800cf22:	e000      	b.n	800cf26 <Device_Init+0x306>
 800cf24:	4b21      	ldr	r3, [pc, #132]	@ (800cfac <Device_Init+0x38c>)
 800cf26:	4a28      	ldr	r2, [pc, #160]	@ (800cfc8 <Device_Init+0x3a8>)
 800cf28:	4918      	ldr	r1, [pc, #96]	@ (800cf8c <Device_Init+0x36c>)
 800cf2a:	2002      	movs	r0, #2
 800cf2c:	f006 fa0e 	bl	801334c <CreateLine>
  ESP_Init(espUart);
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	0018      	movs	r0, r3
 800cf34:	f7f7 ff6e 	bl	8004e14 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800cf38:	4a24      	ldr	r2, [pc, #144]	@ (800cfcc <Device_Init+0x3ac>)
 800cf3a:	4b09      	ldr	r3, [pc, #36]	@ (800cf60 <Device_Init+0x340>)
 800cf3c:	0019      	movs	r1, r3
 800cf3e:	2003      	movs	r0, #3
 800cf40:	f006 fa04 	bl	801334c <CreateLine>
}
 800cf44:	46c0      	nop			@ (mov r8, r8)
 800cf46:	46bd      	mov	sp, r7
 800cf48:	b004      	add	sp, #16
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	0802c5cc 	.word	0x0802c5cc
 800cf50:	0802c5fc 	.word	0x0802c5fc
 800cf54:	20000e38 	.word	0x20000e38
 800cf58:	20000e30 	.word	0x20000e30
 800cf5c:	0802c600 	.word	0x0802c600
 800cf60:	0802c5c8 	.word	0x0802c5c8
 800cf64:	0802c62c 	.word	0x0802c62c
 800cf68:	0802c660 	.word	0x0802c660
 800cf6c:	0802c690 	.word	0x0802c690
 800cf70:	0802c6ac 	.word	0x0802c6ac
 800cf74:	0802c6c4 	.word	0x0802c6c4
 800cf78:	0802c6e0 	.word	0x0802c6e0
 800cf7c:	0802c6f8 	.word	0x0802c6f8
 800cf80:	0802c72c 	.word	0x0802c72c
 800cf84:	50000400 	.word	0x50000400
 800cf88:	0802c760 	.word	0x0802c760
 800cf8c:	0802c784 	.word	0x0802c784
 800cf90:	0802c788 	.word	0x0802c788
 800cf94:	0802c7b4 	.word	0x0802c7b4
 800cf98:	0802c7e0 	.word	0x0802c7e0
 800cf9c:	20000ed4 	.word	0x20000ed4
 800cfa0:	0802c7f8 	.word	0x0802c7f8
 800cfa4:	0802c848 	.word	0x0802c848
 800cfa8:	0802c86c 	.word	0x0802c86c
 800cfac:	0802c870 	.word	0x0802c870
 800cfb0:	0802c874 	.word	0x0802c874
 800cfb4:	0802c890 	.word	0x0802c890
 800cfb8:	0802c8ac 	.word	0x0802c8ac
 800cfbc:	0802c8cc 	.word	0x0802c8cc
 800cfc0:	0802c8ec 	.word	0x0802c8ec
 800cfc4:	0802c90c 	.word	0x0802c90c
 800cfc8:	0802c928 	.word	0x0802c928
 800cfcc:	0802c944 	.word	0x0802c944

0800cfd0 <Device_Test>:

void Device_Test(){
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800cfd4:	4b34      	ldr	r3, [pc, #208]	@ (800d0a8 <Device_Test+0xd8>)
 800cfd6:	799b      	ldrb	r3, [r3, #6]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	4053      	eors	r3, r2
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d027      	beq.n	800d032 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800cfe2:	f000 fbff 	bl	800d7e4 <MIC_TestMeasurementDone>
 800cfe6:	1e03      	subs	r3, r0, #0
 800cfe8:	d011      	beq.n	800d00e <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800cfea:	4b2f      	ldr	r3, [pc, #188]	@ (800d0a8 <Device_Test+0xd8>)
 800cfec:	2201      	movs	r2, #1
 800cfee:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800cff0:	4b2e      	ldr	r3, [pc, #184]	@ (800d0ac <Device_Test+0xdc>)
 800cff2:	2201      	movs	r2, #1
 800cff4:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800cff6:	f004 fe59 	bl	8011cac <Calculate_LED_ON>
 800cffa:	0003      	movs	r3, r0
 800cffc:	0019      	movs	r1, r3
 800cffe:	23fa      	movs	r3, #250	@ 0xfa
 800d000:	011a      	lsls	r2, r3, #4
 800d002:	23fa      	movs	r3, #250	@ 0xfa
 800d004:	011b      	lsls	r3, r3, #4
 800d006:	0018      	movs	r0, r3
 800d008:	f004 fe98 	bl	8011d3c <SetStatusLED>
 800d00c:	e011      	b.n	800d032 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800d00e:	f003 ffa3 	bl	8010f58 <micSettlingComplete>
 800d012:	1e03      	subs	r3, r0, #0
 800d014:	d00d      	beq.n	800d032 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800d016:	4b25      	ldr	r3, [pc, #148]	@ (800d0ac <Device_Test+0xdc>)
 800d018:	2201      	movs	r2, #1
 800d01a:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800d01c:	f004 fe46 	bl	8011cac <Calculate_LED_ON>
 800d020:	0003      	movs	r3, r0
 800d022:	0018      	movs	r0, r3
 800d024:	23fa      	movs	r3, #250	@ 0xfa
 800d026:	011a      	lsls	r2, r3, #4
 800d028:	23fa      	movs	r3, #250	@ 0xfa
 800d02a:	011b      	lsls	r3, r3, #4
 800d02c:	0019      	movs	r1, r3
 800d02e:	f004 fe85 	bl	8011d3c <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800d032:	4b1d      	ldr	r3, [pc, #116]	@ (800d0a8 <Device_Test+0xd8>)
 800d034:	79db      	ldrb	r3, [r3, #7]
 800d036:	2201      	movs	r2, #1
 800d038:	4053      	eors	r3, r2
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800d040:	f7fa f886 	bl	8007150 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800d044:	4b18      	ldr	r3, [pc, #96]	@ (800d0a8 <Device_Test+0xd8>)
 800d046:	79db      	ldrb	r3, [r3, #7]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d003      	beq.n	800d054 <Device_Test+0x84>
 800d04c:	4b16      	ldr	r3, [pc, #88]	@ (800d0a8 <Device_Test+0xd8>)
 800d04e:	799b      	ldrb	r3, [r3, #6]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d106      	bne.n	800d062 <Device_Test+0x92>
 800d054:	4b16      	ldr	r3, [pc, #88]	@ (800d0b0 <Device_Test+0xe0>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	0018      	movs	r0, r3
 800d05a:	f006 f921 	bl	80132a0 <TimestampIsReached>
 800d05e:	1e03      	subs	r3, r0, #0
 800d060:	d01f      	beq.n	800d0a2 <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800d062:	4b11      	ldr	r3, [pc, #68]	@ (800d0a8 <Device_Test+0xd8>)
 800d064:	79db      	ldrb	r3, [r3, #7]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <Device_Test+0x9e>
 800d06a:	4b12      	ldr	r3, [pc, #72]	@ (800d0b4 <Device_Test+0xe4>)
 800d06c:	e000      	b.n	800d070 <Device_Test+0xa0>
 800d06e:	4b12      	ldr	r3, [pc, #72]	@ (800d0b8 <Device_Test+0xe8>)
 800d070:	4a12      	ldr	r2, [pc, #72]	@ (800d0bc <Device_Test+0xec>)
 800d072:	4913      	ldr	r1, [pc, #76]	@ (800d0c0 <Device_Test+0xf0>)
 800d074:	2002      	movs	r0, #2
 800d076:	f006 f969 	bl	801334c <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800d07a:	4b0b      	ldr	r3, [pc, #44]	@ (800d0a8 <Device_Test+0xd8>)
 800d07c:	799b      	ldrb	r3, [r3, #6]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <Device_Test+0xb6>
 800d082:	4b0c      	ldr	r3, [pc, #48]	@ (800d0b4 <Device_Test+0xe4>)
 800d084:	e000      	b.n	800d088 <Device_Test+0xb8>
 800d086:	4b0c      	ldr	r3, [pc, #48]	@ (800d0b8 <Device_Test+0xe8>)
 800d088:	4a0e      	ldr	r2, [pc, #56]	@ (800d0c4 <Device_Test+0xf4>)
 800d08a:	490d      	ldr	r1, [pc, #52]	@ (800d0c0 <Device_Test+0xf0>)
 800d08c:	2002      	movs	r0, #2
 800d08e:	f006 f95d 	bl	801334c <CreateLine>
    Info("Test completed");
 800d092:	4a0d      	ldr	r2, [pc, #52]	@ (800d0c8 <Device_Test+0xf8>)
 800d094:	4b0a      	ldr	r3, [pc, #40]	@ (800d0c0 <Device_Test+0xf0>)
 800d096:	0019      	movs	r1, r3
 800d098:	2002      	movs	r0, #2
 800d09a:	f006 f957 	bl	801334c <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800d09e:	f7ff f8d7 	bl	800c250 <SetTestDone>
  }
}
 800d0a2:	46c0      	nop			@ (mov r8, r8)
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	20000e38 	.word	0x20000e38
 800d0ac:	20000e30 	.word	0x20000e30
 800d0b0:	20000e28 	.word	0x20000e28
 800d0b4:	0802c968 	.word	0x0802c968
 800d0b8:	0802c970 	.word	0x0802c970
 800d0bc:	0802c978 	.word	0x0802c978
 800d0c0:	0802c784 	.word	0x0802c784
 800d0c4:	0802c98c 	.word	0x0802c98c
 800d0c8:	0802c9a0 	.word	0x0802c9a0

0800d0cc <AllDevicesReady>:

bool AllDevicesReady() {
 800d0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ce:	46de      	mov	lr, fp
 800d0d0:	4657      	mov	r7, sl
 800d0d2:	464e      	mov	r6, r9
 800d0d4:	4645      	mov	r5, r8
 800d0d6:	b5e0      	push	{r5, r6, r7, lr}
 800d0d8:	b08b      	sub	sp, #44	@ 0x2c
 800d0da:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  if (TimestampIsReached(deviceTimeOut)) {
 800d0dc:	4b75      	ldr	r3, [pc, #468]	@ (800d2b4 <AllDevicesReady+0x1e8>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	0018      	movs	r0, r3
 800d0e2:	f006 f8dd 	bl	80132a0 <TimestampIsReached>
 800d0e6:	1e03      	subs	r3, r0, #0
 800d0e8:	d100      	bne.n	800d0ec <AllDevicesReady+0x20>
 800d0ea:	e0d9      	b.n	800d2a0 <AllDevicesReady+0x1d4>
    if (!sensorsdisablereq) {
 800d0ec:	4b72      	ldr	r3, [pc, #456]	@ (800d2b8 <AllDevicesReady+0x1ec>)
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	4053      	eors	r3, r2
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d008      	beq.n	800d10c <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800d0fa:	4a70      	ldr	r2, [pc, #448]	@ (800d2bc <AllDevicesReady+0x1f0>)
 800d0fc:	4b70      	ldr	r3, [pc, #448]	@ (800d2c0 <AllDevicesReady+0x1f4>)
 800d0fe:	0019      	movs	r1, r3
 800d100:	2003      	movs	r0, #3
 800d102:	f006 f923 	bl	801334c <CreateLine>
      sensorsdisablereq = true;
 800d106:	4b6c      	ldr	r3, [pc, #432]	@ (800d2b8 <AllDevicesReady+0x1ec>)
 800d108:	2201      	movs	r2, #1
 800d10a:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800d10c:	4b6d      	ldr	r3, [pc, #436]	@ (800d2c4 <AllDevicesReady+0x1f8>)
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	2b06      	cmp	r3, #6
 800d112:	d102      	bne.n	800d11a <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800d114:	4b6c      	ldr	r3, [pc, #432]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d116:	2200      	movs	r2, #0
 800d118:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800d11a:	4b6c      	ldr	r3, [pc, #432]	@ (800d2cc <AllDevicesReady+0x200>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	2b05      	cmp	r3, #5
 800d120:	d006      	beq.n	800d130 <AllDevicesReady+0x64>
 800d122:	4b6b      	ldr	r3, [pc, #428]	@ (800d2d0 <AllDevicesReady+0x204>)
 800d124:	789b      	ldrb	r3, [r3, #2]
 800d126:	2201      	movs	r2, #1
 800d128:	4053      	eors	r3, r2
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d002      	beq.n	800d136 <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800d130:	4b65      	ldr	r3, [pc, #404]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d132:	2200      	movs	r2, #0
 800d134:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800d136:	4b67      	ldr	r3, [pc, #412]	@ (800d2d4 <AllDevicesReady+0x208>)
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	2b08      	cmp	r3, #8
 800d13c:	d006      	beq.n	800d14c <AllDevicesReady+0x80>
 800d13e:	4b64      	ldr	r3, [pc, #400]	@ (800d2d0 <AllDevicesReady+0x204>)
 800d140:	791b      	ldrb	r3, [r3, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	4053      	eors	r3, r2
 800d146:	b2db      	uxtb	r3, r3
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d002      	beq.n	800d152 <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800d14c:	4b5e      	ldr	r3, [pc, #376]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d14e:	2200      	movs	r2, #0
 800d150:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800d152:	4b61      	ldr	r3, [pc, #388]	@ (800d2d8 <AllDevicesReady+0x20c>)
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	2b08      	cmp	r3, #8
 800d158:	d006      	beq.n	800d168 <AllDevicesReady+0x9c>
 800d15a:	4b5d      	ldr	r3, [pc, #372]	@ (800d2d0 <AllDevicesReady+0x204>)
 800d15c:	78db      	ldrb	r3, [r3, #3]
 800d15e:	2201      	movs	r2, #1
 800d160:	4053      	eors	r3, r2
 800d162:	b2db      	uxtb	r3, r3
 800d164:	2b00      	cmp	r3, #0
 800d166:	d002      	beq.n	800d16e <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800d168:	4b57      	ldr	r3, [pc, #348]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800d16e:	4b5b      	ldr	r3, [pc, #364]	@ (800d2dc <AllDevicesReady+0x210>)
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	2b07      	cmp	r3, #7
 800d174:	d006      	beq.n	800d184 <AllDevicesReady+0xb8>
 800d176:	4b56      	ldr	r3, [pc, #344]	@ (800d2d0 <AllDevicesReady+0x204>)
 800d178:	7a1b      	ldrb	r3, [r3, #8]
 800d17a:	2201      	movs	r2, #1
 800d17c:	4053      	eors	r3, r2
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	2b00      	cmp	r3, #0
 800d182:	d002      	beq.n	800d18a <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800d184:	4b50      	ldr	r3, [pc, #320]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d186:	2200      	movs	r2, #0
 800d188:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X)) {
 800d18a:	4b55      	ldr	r3, [pc, #340]	@ (800d2e0 <AllDevicesReady+0x214>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	2b01      	cmp	r3, #1
 800d190:	d003      	beq.n	800d19a <AllDevicesReady+0xce>
 800d192:	4b53      	ldr	r3, [pc, #332]	@ (800d2e0 <AllDevicesReady+0x214>)
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	2b03      	cmp	r3, #3
 800d198:	d102      	bne.n	800d1a0 <AllDevicesReady+0xd4>
      Sensor.PM_measurementEnabled = false;
 800d19a:	4b4b      	ldr	r3, [pc, #300]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800d1a0:	4b50      	ldr	r3, [pc, #320]	@ (800d2e4 <AllDevicesReady+0x218>)
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	2b03      	cmp	r3, #3
 800d1a6:	d102      	bne.n	800d1ae <AllDevicesReady+0xe2>
      Sensor.MIC_measurementEnabled = false;
 800d1a8:	4b47      	ldr	r3, [pc, #284]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800d1ae:	4b4e      	ldr	r3, [pc, #312]	@ (800d2e8 <AllDevicesReady+0x21c>)
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	2b09      	cmp	r3, #9
 800d1b4:	d003      	beq.n	800d1be <AllDevicesReady+0xf2>
 800d1b6:	4b4c      	ldr	r3, [pc, #304]	@ (800d2e8 <AllDevicesReady+0x21c>)
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	2b02      	cmp	r3, #2
 800d1bc:	d170      	bne.n	800d2a0 <AllDevicesReady+0x1d4>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d1be:	4b42      	ldr	r3, [pc, #264]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d1c0:	781a      	ldrb	r2, [r3, #0]
 800d1c2:	4b41      	ldr	r3, [pc, #260]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d1c4:	785b      	ldrb	r3, [r3, #1]
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	b2da      	uxtb	r2, r3
 800d1ca:	4b3f      	ldr	r3, [pc, #252]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d1cc:	791b      	ldrb	r3, [r3, #4]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	b2da      	uxtb	r2, r3
 800d1d2:	4b3d      	ldr	r3, [pc, #244]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d1d4:	795b      	ldrb	r3, [r3, #5]
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800d1da:	4b3b      	ldr	r3, [pc, #236]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d1dc:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800d1e2:	4b39      	ldr	r3, [pc, #228]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d1e4:	789b      	ldrb	r3, [r3, #2]
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	4b37      	ldr	r3, [pc, #220]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d1ec:	78db      	ldrb	r3, [r3, #3]
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	1e5a      	subs	r2, r3, #1
 800d1f4:	4193      	sbcs	r3, r2
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	4053      	eors	r3, r2
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d200:	1dfb      	adds	r3, r7, #7
 800d202:	701a      	strb	r2, [r3, #0]
 800d204:	781a      	ldrb	r2, [r3, #0]
 800d206:	2101      	movs	r1, #1
 800d208:	400a      	ands	r2, r1
 800d20a:	701a      	strb	r2, [r3, #0]
      if (!status && (prevstatus != status)) {
 800d20c:	1dfb      	adds	r3, r7, #7
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	2201      	movs	r2, #1
 800d212:	4053      	eors	r3, r2
 800d214:	b2db      	uxtb	r3, r3
 800d216:	2b00      	cmp	r3, #0
 800d218:	d031      	beq.n	800d27e <AllDevicesReady+0x1b2>
 800d21a:	4b34      	ldr	r3, [pc, #208]	@ (800d2ec <AllDevicesReady+0x220>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	1dfa      	adds	r2, r7, #7
 800d220:	7812      	ldrb	r2, [r2, #0]
 800d222:	429a      	cmp	r2, r3
 800d224:	d02b      	beq.n	800d27e <AllDevicesReady+0x1b2>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800d226:	4b28      	ldr	r3, [pc, #160]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	469b      	mov	fp, r3
 800d22c:	4b26      	ldr	r3, [pc, #152]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d22e:	791b      	ldrb	r3, [r3, #4]
 800d230:	001c      	movs	r4, r3
 800d232:	4b25      	ldr	r3, [pc, #148]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d234:	795b      	ldrb	r3, [r3, #5]
 800d236:	001d      	movs	r5, r3
 800d238:	4b23      	ldr	r3, [pc, #140]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d23a:	799b      	ldrb	r3, [r3, #6]
 800d23c:	001e      	movs	r6, r3
 800d23e:	4b22      	ldr	r3, [pc, #136]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d240:	785b      	ldrb	r3, [r3, #1]
 800d242:	4698      	mov	r8, r3
 800d244:	4b20      	ldr	r3, [pc, #128]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d246:	789b      	ldrb	r3, [r3, #2]
 800d248:	4699      	mov	r9, r3
 800d24a:	4b1f      	ldr	r3, [pc, #124]	@ (800d2c8 <AllDevicesReady+0x1fc>)
 800d24c:	78db      	ldrb	r3, [r3, #3]
 800d24e:	469a      	mov	sl, r3
 800d250:	f000 f8e4 	bl	800d41c <getSensorLock>
 800d254:	0003      	movs	r3, r0
 800d256:	4a26      	ldr	r2, [pc, #152]	@ (800d2f0 <AllDevicesReady+0x224>)
 800d258:	4919      	ldr	r1, [pc, #100]	@ (800d2c0 <AllDevicesReady+0x1f4>)
 800d25a:	9306      	str	r3, [sp, #24]
 800d25c:	4653      	mov	r3, sl
 800d25e:	9305      	str	r3, [sp, #20]
 800d260:	464b      	mov	r3, r9
 800d262:	9304      	str	r3, [sp, #16]
 800d264:	4643      	mov	r3, r8
 800d266:	9303      	str	r3, [sp, #12]
 800d268:	9602      	str	r6, [sp, #8]
 800d26a:	9501      	str	r5, [sp, #4]
 800d26c:	9400      	str	r4, [sp, #0]
 800d26e:	465b      	mov	r3, fp
 800d270:	2003      	movs	r0, #3
 800d272:	f006 f86b 	bl	801334c <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800d276:	4b1d      	ldr	r3, [pc, #116]	@ (800d2ec <AllDevicesReady+0x220>)
 800d278:	1dfa      	adds	r2, r7, #7
 800d27a:	7812      	ldrb	r2, [r2, #0]
 800d27c:	701a      	strb	r2, [r3, #0]
      }
      if (status) {
 800d27e:	1dfb      	adds	r3, r7, #7
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d009      	beq.n	800d29a <AllDevicesReady+0x1ce>
        Debug("All sensors in wait");
 800d286:	4a1b      	ldr	r2, [pc, #108]	@ (800d2f4 <AllDevicesReady+0x228>)
 800d288:	4b0d      	ldr	r3, [pc, #52]	@ (800d2c0 <AllDevicesReady+0x1f4>)
 800d28a:	0019      	movs	r1, r3
 800d28c:	2003      	movs	r0, #3
 800d28e:	f006 f85d 	bl	801334c <CreateLine>
        prevstatus = status;
 800d292:	4b16      	ldr	r3, [pc, #88]	@ (800d2ec <AllDevicesReady+0x220>)
 800d294:	1dfa      	adds	r2, r7, #7
 800d296:	7812      	ldrb	r2, [r2, #0]
 800d298:	701a      	strb	r2, [r3, #0]
      }
      return status;
 800d29a:	1dfb      	adds	r3, r7, #7
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	e000      	b.n	800d2a2 <AllDevicesReady+0x1d6>
    }
  }
  return false;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	0018      	movs	r0, r3
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	b003      	add	sp, #12
 800d2a8:	bcf0      	pop	{r4, r5, r6, r7}
 800d2aa:	46bb      	mov	fp, r7
 800d2ac:	46b2      	mov	sl, r6
 800d2ae:	46a9      	mov	r9, r5
 800d2b0:	46a0      	mov	r8, r4
 800d2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2b4:	20000e28 	.word	0x20000e28
 800d2b8:	20000e47 	.word	0x20000e47
 800d2bc:	0802c9b0 	.word	0x0802c9b0
 800d2c0:	0802c5c8 	.word	0x0802c5c8
 800d2c4:	20000e43 	.word	0x20000e43
 800d2c8:	20000e30 	.word	0x20000e30
 800d2cc:	20000e44 	.word	0x20000e44
 800d2d0:	20000e38 	.word	0x20000e38
 800d2d4:	20000e45 	.word	0x20000e45
 800d2d8:	20000e46 	.word	0x20000e46
 800d2dc:	20000e42 	.word	0x20000e42
 800d2e0:	2000009e 	.word	0x2000009e
 800d2e4:	20000e14 	.word	0x20000e14
 800d2e8:	20000e15 	.word	0x20000e15
 800d2ec:	2000009c 	.word	0x2000009c
 800d2f0:	0802c9d0 	.word	0x0802c9d0
 800d2f4:	0802ca34 	.word	0x0802ca34

0800d2f8 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800d2fc:	4b23      	ldr	r3, [pc, #140]	@ (800d38c <EnabledConnectedDevices+0x94>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d002      	beq.n	800d30a <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800d304:	4b22      	ldr	r3, [pc, #136]	@ (800d390 <EnabledConnectedDevices+0x98>)
 800d306:	2201      	movs	r2, #1
 800d308:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800d30a:	4b20      	ldr	r3, [pc, #128]	@ (800d38c <EnabledConnectedDevices+0x94>)
 800d30c:	789b      	ldrb	r3, [r3, #2]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d002      	beq.n	800d318 <EnabledConnectedDevices+0x20>
    Sensor.AHT_measurementEnabled = true;
 800d312:	4b1f      	ldr	r3, [pc, #124]	@ (800d390 <EnabledConnectedDevices+0x98>)
 800d314:	2201      	movs	r2, #1
 800d316:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800d318:	4b1c      	ldr	r3, [pc, #112]	@ (800d38c <EnabledConnectedDevices+0x94>)
 800d31a:	791b      	ldrb	r3, [r3, #4]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d002      	beq.n	800d326 <EnabledConnectedDevices+0x2e>
    Sensor.BMP_measurementEnabled = true;
 800d320:	4b1b      	ldr	r3, [pc, #108]	@ (800d390 <EnabledConnectedDevices+0x98>)
 800d322:	2201      	movs	r2, #1
 800d324:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800d326:	4b19      	ldr	r3, [pc, #100]	@ (800d38c <EnabledConnectedDevices+0x94>)
 800d328:	78db      	ldrb	r3, [r3, #3]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d002      	beq.n	800d334 <EnabledConnectedDevices+0x3c>
    Sensor.ENS_measurementEnabled = true;
 800d32e:	4b18      	ldr	r3, [pc, #96]	@ (800d390 <EnabledConnectedDevices+0x98>)
 800d330:	2201      	movs	r2, #1
 800d332:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800d334:	4b15      	ldr	r3, [pc, #84]	@ (800d38c <EnabledConnectedDevices+0x94>)
 800d336:	785b      	ldrb	r3, [r3, #1]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d006      	beq.n	800d34a <EnabledConnectedDevices+0x52>
 800d33c:	4b13      	ldr	r3, [pc, #76]	@ (800d38c <EnabledConnectedDevices+0x94>)
 800d33e:	7a1b      	ldrb	r3, [r3, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d002      	beq.n	800d34a <EnabledConnectedDevices+0x52>
    Sensor.VOC_measurementEnabled = true;
 800d344:	4b12      	ldr	r3, [pc, #72]	@ (800d390 <EnabledConnectedDevices+0x98>)
 800d346:	2201      	movs	r2, #1
 800d348:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800d34a:	4b10      	ldr	r3, [pc, #64]	@ (800d38c <EnabledConnectedDevices+0x94>)
 800d34c:	795b      	ldrb	r3, [r3, #5]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d002      	beq.n	800d358 <EnabledConnectedDevices+0x60>
    Sensor.PM_measurementEnabled = true;
 800d352:	4b0f      	ldr	r3, [pc, #60]	@ (800d390 <EnabledConnectedDevices+0x98>)
 800d354:	2201      	movs	r2, #1
 800d356:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800d358:	4b0c      	ldr	r3, [pc, #48]	@ (800d38c <EnabledConnectedDevices+0x94>)
 800d35a:	799b      	ldrb	r3, [r3, #6]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d002      	beq.n	800d366 <EnabledConnectedDevices+0x6e>
    Sensor.MIC_measurementEnabled = true;
 800d360:	4b0b      	ldr	r3, [pc, #44]	@ (800d390 <EnabledConnectedDevices+0x98>)
 800d362:	2201      	movs	r2, #1
 800d364:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800d366:	f006 fd31 	bl	8013dcc <HAL_GetTick>
 800d36a:	0003      	movs	r3, r0
 800d36c:	4a09      	ldr	r2, [pc, #36]	@ (800d394 <EnabledConnectedDevices+0x9c>)
 800d36e:	189a      	adds	r2, r3, r2
 800d370:	4b09      	ldr	r3, [pc, #36]	@ (800d398 <EnabledConnectedDevices+0xa0>)
 800d372:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800d374:	4b09      	ldr	r3, [pc, #36]	@ (800d39c <EnabledConnectedDevices+0xa4>)
 800d376:	2200      	movs	r2, #0
 800d378:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800d37a:	4a09      	ldr	r2, [pc, #36]	@ (800d3a0 <EnabledConnectedDevices+0xa8>)
 800d37c:	4b09      	ldr	r3, [pc, #36]	@ (800d3a4 <EnabledConnectedDevices+0xac>)
 800d37e:	0019      	movs	r1, r3
 800d380:	2003      	movs	r0, #3
 800d382:	f005 ffe3 	bl	801334c <CreateLine>
}
 800d386:	46c0      	nop			@ (mov r8, r8)
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	20000e38 	.word	0x20000e38
 800d390:	20000e30 	.word	0x20000e30
 800d394:	00124f80 	.word	0x00124f80
 800d398:	20000e28 	.word	0x20000e28
 800d39c:	20000e47 	.word	0x20000e47
 800d3a0:	0802ca48 	.word	0x0802ca48
 800d3a4:	0802c5c8 	.word	0x0802c5c8

0800d3a8 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800d3ac:	4b0e      	ldr	r3, [pc, #56]	@ (800d3e8 <DisableConnectedDevices+0x40>)
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800d3b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d3e8 <DisableConnectedDevices+0x40>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800d3b8:	4b0b      	ldr	r3, [pc, #44]	@ (800d3e8 <DisableConnectedDevices+0x40>)
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800d3be:	4b0a      	ldr	r3, [pc, #40]	@ (800d3e8 <DisableConnectedDevices+0x40>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800d3c4:	4b08      	ldr	r3, [pc, #32]	@ (800d3e8 <DisableConnectedDevices+0x40>)
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800d3ca:	4b07      	ldr	r3, [pc, #28]	@ (800d3e8 <DisableConnectedDevices+0x40>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800d3d0:	4b05      	ldr	r3, [pc, #20]	@ (800d3e8 <DisableConnectedDevices+0x40>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800d3d6:	4a05      	ldr	r2, [pc, #20]	@ (800d3ec <DisableConnectedDevices+0x44>)
 800d3d8:	4b05      	ldr	r3, [pc, #20]	@ (800d3f0 <DisableConnectedDevices+0x48>)
 800d3da:	0019      	movs	r1, r3
 800d3dc:	2003      	movs	r0, #3
 800d3de:	f005 ffb5 	bl	801334c <CreateLine>
}
 800d3e2:	46c0      	nop			@ (mov r8, r8)
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	20000e30 	.word	0x20000e30
 800d3ec:	0802ca58 	.word	0x0802ca58
 800d3f0:	0802c5c8 	.word	0x0802c5c8

0800d3f4 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	0002      	movs	r2, r0
 800d3fc:	1dfb      	adds	r3, r7, #7
 800d3fe:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800d400:	4b05      	ldr	r3, [pc, #20]	@ (800d418 <setSensorLock+0x24>)
 800d402:	1dfa      	adds	r2, r7, #7
 800d404:	7812      	ldrb	r2, [r2, #0]
 800d406:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800d408:	200a      	movs	r0, #10
 800d40a:	f006 fce9 	bl	8013de0 <HAL_Delay>
}
 800d40e:	46c0      	nop			@ (mov r8, r8)
 800d410:	46bd      	mov	sp, r7
 800d412:	b002      	add	sp, #8
 800d414:	bd80      	pop	{r7, pc}
 800d416:	46c0      	nop			@ (mov r8, r8)
 800d418:	20000e41 	.word	0x20000e41

0800d41c <getSensorLock>:

uint8_t getSensorLock() {
 800d41c:	b580      	push	{r7, lr}
 800d41e:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800d420:	4b02      	ldr	r3, [pc, #8]	@ (800d42c <getSensorLock+0x10>)
 800d422:	781b      	ldrb	r3, [r3, #0]
}
 800d424:	0018      	movs	r0, r3
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	46c0      	nop			@ (mov r8, r8)
 800d42c:	20000e41 	.word	0x20000e41

0800d430 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800d430:	b580      	push	{r7, lr}
 800d432:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800d434:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a0 <UpkeepI2Csensors+0x70>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d005      	beq.n	800d448 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800d43c:	f006 fb44 	bl	8013ac8 <HIDS_Upkeep>
 800d440:	0003      	movs	r3, r0
 800d442:	001a      	movs	r2, r3
 800d444:	4b17      	ldr	r3, [pc, #92]	@ (800d4a4 <UpkeepI2Csensors+0x74>)
 800d446:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800d448:	4b15      	ldr	r3, [pc, #84]	@ (800d4a0 <UpkeepI2Csensors+0x70>)
 800d44a:	785b      	ldrb	r3, [r3, #1]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d005      	beq.n	800d45c <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800d450:	f003 fb7c 	bl	8010b4c <SGP_Upkeep>
 800d454:	0003      	movs	r3, r0
 800d456:	001a      	movs	r2, r3
 800d458:	4b13      	ldr	r3, [pc, #76]	@ (800d4a8 <UpkeepI2Csensors+0x78>)
 800d45a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800d45c:	4b10      	ldr	r3, [pc, #64]	@ (800d4a0 <UpkeepI2Csensors+0x70>)
 800d45e:	791b      	ldrb	r3, [r3, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d005      	beq.n	800d470 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800d464:	f7fd fa30 	bl	800a8c8 <AHT_Upkeep>
 800d468:	0003      	movs	r3, r0
 800d46a:	001a      	movs	r2, r3
 800d46c:	4b0f      	ldr	r3, [pc, #60]	@ (800d4ac <UpkeepI2Csensors+0x7c>)
 800d46e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800d470:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a0 <UpkeepI2Csensors+0x70>)
 800d472:	795b      	ldrb	r3, [r3, #5]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d005      	beq.n	800d484 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800d478:	f7fd ffba 	bl	800b3f0 <BMP_Upkeep>
 800d47c:	0003      	movs	r3, r0
 800d47e:	001a      	movs	r2, r3
 800d480:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b0 <UpkeepI2Csensors+0x80>)
 800d482:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800d484:	4b06      	ldr	r3, [pc, #24]	@ (800d4a0 <UpkeepI2Csensors+0x70>)
 800d486:	799b      	ldrb	r3, [r3, #6]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d005      	beq.n	800d498 <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800d48c:	f7f6 ffe4 	bl	8004458 <ENS_Upkeep>
 800d490:	0003      	movs	r3, r0
 800d492:	001a      	movs	r2, r3
 800d494:	4b07      	ldr	r3, [pc, #28]	@ (800d4b4 <UpkeepI2Csensors+0x84>)
 800d496:	701a      	strb	r2, [r3, #0]
  }
}
 800d498:	46c0      	nop			@ (mov r8, r8)
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	46c0      	nop			@ (mov r8, r8)
 800d4a0:	20000e30 	.word	0x20000e30
 800d4a4:	20000e43 	.word	0x20000e43
 800d4a8:	20000e42 	.word	0x20000e42
 800d4ac:	20000e44 	.word	0x20000e44
 800d4b0:	20000e45 	.word	0x20000e45
 800d4b4:	20000e46 	.word	0x20000e46

0800d4b8 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800d4bc:	4b02      	ldr	r3, [pc, #8]	@ (800d4c8 <ResetdBAmax+0x10>)
 800d4be:	2200      	movs	r2, #0
 800d4c0:	601a      	str	r2, [r3, #0]
}
 800d4c2:	46c0      	nop			@ (mov r8, r8)
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	20000e8c 	.word	0x20000e8c

0800d4cc <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800d4d4:	f006 fc7a 	bl	8013dcc <HAL_GetTick>
 800d4d8:	0002      	movs	r2, r0
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	18d2      	adds	r2, r2, r3
 800d4de:	4b03      	ldr	r3, [pc, #12]	@ (800d4ec <setMICTimeStamp+0x20>)
 800d4e0:	601a      	str	r2, [r3, #0]
}
 800d4e2:	46c0      	nop			@ (mov r8, r8)
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	b002      	add	sp, #8
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	46c0      	nop			@ (mov r8, r8)
 800d4ec:	20000e94 	.word	0x20000e94

0800d4f0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	af00      	add	r7, sp, #0
  counter = 0;
 800d4f4:	4b05      	ldr	r3, [pc, #20]	@ (800d50c <ResetDBACalculator+0x1c>)
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800d4fa:	4b05      	ldr	r3, [pc, #20]	@ (800d510 <ResetDBACalculator+0x20>)
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800d500:	4b04      	ldr	r3, [pc, #16]	@ (800d514 <ResetDBACalculator+0x24>)
 800d502:	2200      	movs	r2, #0
 800d504:	701a      	strb	r2, [r3, #0]
}
 800d506:	46c0      	nop			@ (mov r8, r8)
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	20000e90 	.word	0x20000e90
 800d510:	2000009d 	.word	0x2000009d
 800d514:	20000e91 	.word	0x20000e91

0800d518 <MIC_Print>:

void MIC_Print(void) {
 800d518:	b5b0      	push	{r4, r5, r7, lr}
 800d51a:	b08a      	sub	sp, #40	@ 0x28
 800d51c:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800d51e:	4b9f      	ldr	r3, [pc, #636]	@ (800d79c <MIC_Print+0x284>)
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	4b9f      	ldr	r3, [pc, #636]	@ (800d7a0 <MIC_Print+0x288>)
 800d524:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800d526:	4b9f      	ldr	r3, [pc, #636]	@ (800d7a4 <MIC_Print+0x28c>)
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	001a      	movs	r2, r3
 800d52c:	4b9c      	ldr	r3, [pc, #624]	@ (800d7a0 <MIC_Print+0x288>)
 800d52e:	6819      	ldr	r1, [r3, #0]
 800d530:	4b9d      	ldr	r3, [pc, #628]	@ (800d7a8 <MIC_Print+0x290>)
 800d532:	0092      	lsls	r2, r2, #2
 800d534:	50d1      	str	r1, [r2, r3]
  counter++;
 800d536:	4b9b      	ldr	r3, [pc, #620]	@ (800d7a4 <MIC_Print+0x28c>)
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	3301      	adds	r3, #1
 800d53c:	b2da      	uxtb	r2, r3
 800d53e:	4b99      	ldr	r3, [pc, #612]	@ (800d7a4 <MIC_Print+0x28c>)
 800d540:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800d542:	4b98      	ldr	r3, [pc, #608]	@ (800d7a4 <MIC_Print+0x28c>)
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	2b09      	cmp	r3, #9
 800d548:	d80b      	bhi.n	800d562 <MIC_Print+0x4a>
 800d54a:	4b98      	ldr	r3, [pc, #608]	@ (800d7ac <MIC_Print+0x294>)
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	2201      	movs	r2, #1
 800d550:	4053      	eors	r3, r2
 800d552:	b2db      	uxtb	r3, r3
 800d554:	2b00      	cmp	r3, #0
 800d556:	d004      	beq.n	800d562 <MIC_Print+0x4a>
    denominator = counter;
 800d558:	4b92      	ldr	r3, [pc, #584]	@ (800d7a4 <MIC_Print+0x28c>)
 800d55a:	781a      	ldrb	r2, [r3, #0]
 800d55c:	4b94      	ldr	r3, [pc, #592]	@ (800d7b0 <MIC_Print+0x298>)
 800d55e:	701a      	strb	r2, [r3, #0]
 800d560:	e005      	b.n	800d56e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800d562:	4b93      	ldr	r3, [pc, #588]	@ (800d7b0 <MIC_Print+0x298>)
 800d564:	220a      	movs	r2, #10
 800d566:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800d568:	4b90      	ldr	r3, [pc, #576]	@ (800d7ac <MIC_Print+0x294>)
 800d56a:	2201      	movs	r2, #1
 800d56c:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800d56e:	4b91      	ldr	r3, [pc, #580]	@ (800d7b4 <MIC_Print+0x29c>)
 800d570:	2200      	movs	r2, #0
 800d572:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800d574:	230f      	movs	r3, #15
 800d576:	18fb      	adds	r3, r7, r3
 800d578:	2200      	movs	r2, #0
 800d57a:	701a      	strb	r2, [r3, #0]
 800d57c:	e042      	b.n	800d604 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800d57e:	240f      	movs	r4, #15
 800d580:	193b      	adds	r3, r7, r4
 800d582:	781a      	ldrb	r2, [r3, #0]
 800d584:	4b88      	ldr	r3, [pc, #544]	@ (800d7a8 <MIC_Print+0x290>)
 800d586:	0092      	lsls	r2, r2, #2
 800d588:	58d2      	ldr	r2, [r2, r3]
 800d58a:	4b8a      	ldr	r3, [pc, #552]	@ (800d7b4 <MIC_Print+0x29c>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	1c19      	adds	r1, r3, #0
 800d590:	1c10      	adds	r0, r2, #0
 800d592:	f7f3 f995 	bl	80008c0 <__aeabi_fadd>
 800d596:	1c03      	adds	r3, r0, #0
 800d598:	1c1a      	adds	r2, r3, #0
 800d59a:	4b86      	ldr	r3, [pc, #536]	@ (800d7b4 <MIC_Print+0x29c>)
 800d59c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800d59e:	193b      	adds	r3, r7, r4
 800d5a0:	781a      	ldrb	r2, [r3, #0]
 800d5a2:	4b81      	ldr	r3, [pc, #516]	@ (800d7a8 <MIC_Print+0x290>)
 800d5a4:	0092      	lsls	r2, r2, #2
 800d5a6:	58d2      	ldr	r2, [r2, r3]
 800d5a8:	4b83      	ldr	r3, [pc, #524]	@ (800d7b8 <MIC_Print+0x2a0>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	1c19      	adds	r1, r3, #0
 800d5ae:	1c10      	adds	r0, r2, #0
 800d5b0:	f7f2 ffd2 	bl	8000558 <__aeabi_fcmpgt>
 800d5b4:	1e03      	subs	r3, r0, #0
 800d5b6:	d006      	beq.n	800d5c6 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800d5b8:	193b      	adds	r3, r7, r4
 800d5ba:	781a      	ldrb	r2, [r3, #0]
 800d5bc:	4b7a      	ldr	r3, [pc, #488]	@ (800d7a8 <MIC_Print+0x290>)
 800d5be:	0092      	lsls	r2, r2, #2
 800d5c0:	58d2      	ldr	r2, [r2, r3]
 800d5c2:	4b7d      	ldr	r3, [pc, #500]	@ (800d7b8 <MIC_Print+0x2a0>)
 800d5c4:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800d5c6:	4b7b      	ldr	r3, [pc, #492]	@ (800d7b4 <MIC_Print+0x29c>)
 800d5c8:	681c      	ldr	r4, [r3, #0]
 800d5ca:	4b79      	ldr	r3, [pc, #484]	@ (800d7b0 <MIC_Print+0x298>)
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	0018      	movs	r0, r3
 800d5d0:	f7f4 f97a 	bl	80018c8 <__aeabi_ui2f>
 800d5d4:	1c03      	adds	r3, r0, #0
 800d5d6:	1c19      	adds	r1, r3, #0
 800d5d8:	1c20      	adds	r0, r4, #0
 800d5da:	f7f3 fb63 	bl	8000ca4 <__aeabi_fdiv>
 800d5de:	1c03      	adds	r3, r0, #0
 800d5e0:	1c1a      	adds	r2, r3, #0
 800d5e2:	4b76      	ldr	r3, [pc, #472]	@ (800d7bc <MIC_Print+0x2a4>)
 800d5e4:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800d5e6:	4b6e      	ldr	r3, [pc, #440]	@ (800d7a0 <MIC_Print+0x288>)
 800d5e8:	6818      	ldr	r0, [r3, #0]
 800d5ea:	4b73      	ldr	r3, [pc, #460]	@ (800d7b8 <MIC_Print+0x2a0>)
 800d5ec:	6819      	ldr	r1, [r3, #0]
 800d5ee:	4b73      	ldr	r3, [pc, #460]	@ (800d7bc <MIC_Print+0x2a4>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	1c1a      	adds	r2, r3, #0
 800d5f4:	f7f7 faa6 	bl	8004b44 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800d5f8:	210f      	movs	r1, #15
 800d5fa:	187b      	adds	r3, r7, r1
 800d5fc:	781a      	ldrb	r2, [r3, #0]
 800d5fe:	187b      	adds	r3, r7, r1
 800d600:	3201      	adds	r2, #1
 800d602:	701a      	strb	r2, [r3, #0]
 800d604:	4b6a      	ldr	r3, [pc, #424]	@ (800d7b0 <MIC_Print+0x298>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	220f      	movs	r2, #15
 800d60a:	18ba      	adds	r2, r7, r2
 800d60c:	7812      	ldrb	r2, [r2, #0]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d3b5      	bcc.n	800d57e <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800d612:	4b63      	ldr	r3, [pc, #396]	@ (800d7a0 <MIC_Print+0x288>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	1c18      	adds	r0, r3, #0
 800d618:	f7f6 f93c 	bl	8003894 <__aeabi_f2d>
 800d61c:	6038      	str	r0, [r7, #0]
 800d61e:	6079      	str	r1, [r7, #4]
 800d620:	4b65      	ldr	r3, [pc, #404]	@ (800d7b8 <MIC_Print+0x2a0>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	1c18      	adds	r0, r3, #0
 800d626:	f7f6 f935 	bl	8003894 <__aeabi_f2d>
 800d62a:	0004      	movs	r4, r0
 800d62c:	000d      	movs	r5, r1
 800d62e:	4b63      	ldr	r3, [pc, #396]	@ (800d7bc <MIC_Print+0x2a4>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	1c18      	adds	r0, r3, #0
 800d634:	f7f6 f92e 	bl	8003894 <__aeabi_f2d>
 800d638:	0002      	movs	r2, r0
 800d63a:	000b      	movs	r3, r1
 800d63c:	4960      	ldr	r1, [pc, #384]	@ (800d7c0 <MIC_Print+0x2a8>)
 800d63e:	9204      	str	r2, [sp, #16]
 800d640:	9305      	str	r3, [sp, #20]
 800d642:	9402      	str	r4, [sp, #8]
 800d644:	9503      	str	r5, [sp, #12]
 800d646:	4b5f      	ldr	r3, [pc, #380]	@ (800d7c4 <MIC_Print+0x2ac>)
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	683a      	ldr	r2, [r7, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	0008      	movs	r0, r1
 800d650:	f017 ff96 	bl	8025580 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800d654:	4b53      	ldr	r3, [pc, #332]	@ (800d7a4 <MIC_Print+0x28c>)
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	2b0a      	cmp	r3, #10
 800d65a:	d902      	bls.n	800d662 <MIC_Print+0x14a>
    counter = 0;
 800d65c:	4b51      	ldr	r3, [pc, #324]	@ (800d7a4 <MIC_Print+0x28c>)
 800d65e:	2200      	movs	r2, #0
 800d660:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800d662:	4b4f      	ldr	r3, [pc, #316]	@ (800d7a0 <MIC_Print+0x288>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4958      	ldr	r1, [pc, #352]	@ (800d7c8 <MIC_Print+0x2b0>)
 800d668:	1c18      	adds	r0, r3, #0
 800d66a:	f7f2 ff7f 	bl	800056c <__aeabi_fcmpge>
 800d66e:	1e03      	subs	r3, r0, #0
 800d670:	d004      	beq.n	800d67c <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800d672:	2201      	movs	r2, #1
 800d674:	2101      	movs	r1, #1
 800d676:	2001      	movs	r0, #1
 800d678:	f004 fb94 	bl	8011da4 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800d67c:	4b48      	ldr	r3, [pc, #288]	@ (800d7a0 <MIC_Print+0x288>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4952      	ldr	r1, [pc, #328]	@ (800d7cc <MIC_Print+0x2b4>)
 800d682:	1c18      	adds	r0, r3, #0
 800d684:	f7f2 ff72 	bl	800056c <__aeabi_fcmpge>
 800d688:	1e03      	subs	r3, r0, #0
 800d68a:	d00c      	beq.n	800d6a6 <MIC_Print+0x18e>
 800d68c:	4b44      	ldr	r3, [pc, #272]	@ (800d7a0 <MIC_Print+0x288>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	494d      	ldr	r1, [pc, #308]	@ (800d7c8 <MIC_Print+0x2b0>)
 800d692:	1c18      	adds	r0, r3, #0
 800d694:	f7f2 ff4c 	bl	8000530 <__aeabi_fcmplt>
 800d698:	1e03      	subs	r3, r0, #0
 800d69a:	d004      	beq.n	800d6a6 <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800d69c:	2200      	movs	r2, #0
 800d69e:	2100      	movs	r1, #0
 800d6a0:	2001      	movs	r0, #1
 800d6a2:	f004 fb7f 	bl	8011da4 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800d6a6:	4b3e      	ldr	r3, [pc, #248]	@ (800d7a0 <MIC_Print+0x288>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4949      	ldr	r1, [pc, #292]	@ (800d7d0 <MIC_Print+0x2b8>)
 800d6ac:	1c18      	adds	r0, r3, #0
 800d6ae:	f7f2 ff5d 	bl	800056c <__aeabi_fcmpge>
 800d6b2:	1e03      	subs	r3, r0, #0
 800d6b4:	d00c      	beq.n	800d6d0 <MIC_Print+0x1b8>
 800d6b6:	4b3a      	ldr	r3, [pc, #232]	@ (800d7a0 <MIC_Print+0x288>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4944      	ldr	r1, [pc, #272]	@ (800d7cc <MIC_Print+0x2b4>)
 800d6bc:	1c18      	adds	r0, r3, #0
 800d6be:	f7f2 ff37 	bl	8000530 <__aeabi_fcmplt>
 800d6c2:	1e03      	subs	r3, r0, #0
 800d6c4:	d004      	beq.n	800d6d0 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	2101      	movs	r1, #1
 800d6ca:	2001      	movs	r0, #1
 800d6cc:	f004 fb6a 	bl	8011da4 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800d6d0:	4b33      	ldr	r3, [pc, #204]	@ (800d7a0 <MIC_Print+0x288>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	493f      	ldr	r1, [pc, #252]	@ (800d7d4 <MIC_Print+0x2bc>)
 800d6d6:	1c18      	adds	r0, r3, #0
 800d6d8:	f7f2 ff48 	bl	800056c <__aeabi_fcmpge>
 800d6dc:	1e03      	subs	r3, r0, #0
 800d6de:	d00c      	beq.n	800d6fa <MIC_Print+0x1e2>
 800d6e0:	4b2f      	ldr	r3, [pc, #188]	@ (800d7a0 <MIC_Print+0x288>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	493a      	ldr	r1, [pc, #232]	@ (800d7d0 <MIC_Print+0x2b8>)
 800d6e6:	1c18      	adds	r0, r3, #0
 800d6e8:	f7f2 ff22 	bl	8000530 <__aeabi_fcmplt>
 800d6ec:	1e03      	subs	r3, r0, #0
 800d6ee:	d004      	beq.n	800d6fa <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	2101      	movs	r1, #1
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	f004 fb55 	bl	8011da4 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800d6fa:	4b29      	ldr	r3, [pc, #164]	@ (800d7a0 <MIC_Print+0x288>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4936      	ldr	r1, [pc, #216]	@ (800d7d8 <MIC_Print+0x2c0>)
 800d700:	1c18      	adds	r0, r3, #0
 800d702:	f7f2 ff33 	bl	800056c <__aeabi_fcmpge>
 800d706:	1e03      	subs	r3, r0, #0
 800d708:	d00c      	beq.n	800d724 <MIC_Print+0x20c>
 800d70a:	4b25      	ldr	r3, [pc, #148]	@ (800d7a0 <MIC_Print+0x288>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4931      	ldr	r1, [pc, #196]	@ (800d7d4 <MIC_Print+0x2bc>)
 800d710:	1c18      	adds	r0, r3, #0
 800d712:	f7f2 ff0d 	bl	8000530 <__aeabi_fcmplt>
 800d716:	1e03      	subs	r3, r0, #0
 800d718:	d004      	beq.n	800d724 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800d71a:	2201      	movs	r2, #1
 800d71c:	2101      	movs	r1, #1
 800d71e:	2000      	movs	r0, #0
 800d720:	f004 fb40 	bl	8011da4 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800d724:	4b1e      	ldr	r3, [pc, #120]	@ (800d7a0 <MIC_Print+0x288>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	492c      	ldr	r1, [pc, #176]	@ (800d7dc <MIC_Print+0x2c4>)
 800d72a:	1c18      	adds	r0, r3, #0
 800d72c:	f7f2 ff1e 	bl	800056c <__aeabi_fcmpge>
 800d730:	1e03      	subs	r3, r0, #0
 800d732:	d00c      	beq.n	800d74e <MIC_Print+0x236>
 800d734:	4b1a      	ldr	r3, [pc, #104]	@ (800d7a0 <MIC_Print+0x288>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4927      	ldr	r1, [pc, #156]	@ (800d7d8 <MIC_Print+0x2c0>)
 800d73a:	1c18      	adds	r0, r3, #0
 800d73c:	f7f2 fef8 	bl	8000530 <__aeabi_fcmplt>
 800d740:	1e03      	subs	r3, r0, #0
 800d742:	d004      	beq.n	800d74e <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800d744:	2201      	movs	r2, #1
 800d746:	2100      	movs	r1, #0
 800d748:	2000      	movs	r0, #0
 800d74a:	f004 fb2b 	bl	8011da4 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800d74e:	4b14      	ldr	r3, [pc, #80]	@ (800d7a0 <MIC_Print+0x288>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	4923      	ldr	r1, [pc, #140]	@ (800d7e0 <MIC_Print+0x2c8>)
 800d754:	1c18      	adds	r0, r3, #0
 800d756:	f7f2 ff09 	bl	800056c <__aeabi_fcmpge>
 800d75a:	1e03      	subs	r3, r0, #0
 800d75c:	d00c      	beq.n	800d778 <MIC_Print+0x260>
 800d75e:	4b10      	ldr	r3, [pc, #64]	@ (800d7a0 <MIC_Print+0x288>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	491e      	ldr	r1, [pc, #120]	@ (800d7dc <MIC_Print+0x2c4>)
 800d764:	1c18      	adds	r0, r3, #0
 800d766:	f7f2 fee3 	bl	8000530 <__aeabi_fcmplt>
 800d76a:	1e03      	subs	r3, r0, #0
 800d76c:	d004      	beq.n	800d778 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800d76e:	2201      	movs	r2, #1
 800d770:	2100      	movs	r1, #0
 800d772:	2001      	movs	r0, #1
 800d774:	f004 fb16 	bl	8011da4 <SetDBLED>
  }
  if(dBA < 35){//off
 800d778:	4b09      	ldr	r3, [pc, #36]	@ (800d7a0 <MIC_Print+0x288>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4918      	ldr	r1, [pc, #96]	@ (800d7e0 <MIC_Print+0x2c8>)
 800d77e:	1c18      	adds	r0, r3, #0
 800d780:	f7f2 fed6 	bl	8000530 <__aeabi_fcmplt>
 800d784:	1e03      	subs	r3, r0, #0
 800d786:	d100      	bne.n	800d78a <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800d788:	e004      	b.n	800d794 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800d78a:	2200      	movs	r2, #0
 800d78c:	2100      	movs	r1, #0
 800d78e:	2000      	movs	r0, #0
 800d790:	f004 fb08 	bl	8011da4 <SetDBLED>
}
 800d794:	46c0      	nop			@ (mov r8, r8)
 800d796:	46bd      	mov	sp, r7
 800d798:	b004      	add	sp, #16
 800d79a:	bdb0      	pop	{r4, r5, r7, pc}
 800d79c:	20000e88 	.word	0x20000e88
 800d7a0:	20000e54 	.word	0x20000e54
 800d7a4:	20000e90 	.word	0x20000e90
 800d7a8:	20000e58 	.word	0x20000e58
 800d7ac:	20000e91 	.word	0x20000e91
 800d7b0:	2000009d 	.word	0x2000009d
 800d7b4:	20000e84 	.word	0x20000e84
 800d7b8:	20000e8c 	.word	0x20000e8c
 800d7bc:	20000e80 	.word	0x20000e80
 800d7c0:	0802ca6c 	.word	0x0802ca6c
 800d7c4:	20000e48 	.word	0x20000e48
 800d7c8:	42b40000 	.word	0x42b40000
 800d7cc:	42a00000 	.word	0x42a00000
 800d7d0:	428c0000 	.word	0x428c0000
 800d7d4:	42700000 	.word	0x42700000
 800d7d8:	42480000 	.word	0x42480000
 800d7dc:	42200000 	.word	0x42200000
 800d7e0:	420c0000 	.word	0x420c0000

0800d7e4 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800d7ea:	4b11      	ldr	r3, [pc, #68]	@ (800d830 <MIC_TestMeasurementDone+0x4c>)
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	4a10      	ldr	r2, [pc, #64]	@ (800d834 <MIC_TestMeasurementDone+0x50>)
 800d7f2:	4911      	ldr	r1, [pc, #68]	@ (800d838 <MIC_TestMeasurementDone+0x54>)
 800d7f4:	2002      	movs	r0, #2
 800d7f6:	f005 fda9 	bl	801334c <CreateLine>
  if(DataReady) {
 800d7fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d830 <MIC_TestMeasurementDone+0x4c>)
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	2b00      	cmp	r3, #0
 800d802:	d010      	beq.n	800d826 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800d804:	1dfb      	adds	r3, r7, #7
 800d806:	4a0d      	ldr	r2, [pc, #52]	@ (800d83c <MIC_TestMeasurementDone+0x58>)
 800d808:	7812      	ldrb	r2, [r2, #0]
 800d80a:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800d80c:	4b0b      	ldr	r3, [pc, #44]	@ (800d83c <MIC_TestMeasurementDone+0x58>)
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	b2db      	uxtb	r3, r3
 800d812:	4a0b      	ldr	r2, [pc, #44]	@ (800d840 <MIC_TestMeasurementDone+0x5c>)
 800d814:	4908      	ldr	r1, [pc, #32]	@ (800d838 <MIC_TestMeasurementDone+0x54>)
 800d816:	2002      	movs	r0, #2
 800d818:	f005 fd98 	bl	801334c <CreateLine>
    ResetMICIndicator();
 800d81c:	f004 fbb0 	bl	8011f80 <ResetMICIndicator>
    return Check;
 800d820:	1dfb      	adds	r3, r7, #7
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	e000      	b.n	800d828 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800d826:	2300      	movs	r3, #0
}
 800d828:	0018      	movs	r0, r3
 800d82a:	46bd      	mov	sp, r7
 800d82c:	b002      	add	sp, #8
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	20000fc5 	.word	0x20000fc5
 800d834:	0802cab4 	.word	0x0802cab4
 800d838:	0802cae0 	.word	0x0802cae0
 800d83c:	20000fc6 	.word	0x20000fc6
 800d840:	0802cae4 	.word	0x0802cae4

0800d844 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800d84a:	4b78      	ldr	r3, [pc, #480]	@ (800da2c <Mic_Upkeep+0x1e8>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	2b03      	cmp	r3, #3
 800d850:	d100      	bne.n	800d854 <Mic_Upkeep+0x10>
 800d852:	e0b8      	b.n	800d9c6 <Mic_Upkeep+0x182>
 800d854:	dd00      	ble.n	800d858 <Mic_Upkeep+0x14>
 800d856:	e0d3      	b.n	800da00 <Mic_Upkeep+0x1bc>
 800d858:	2b02      	cmp	r3, #2
 800d85a:	d037      	beq.n	800d8cc <Mic_Upkeep+0x88>
 800d85c:	dd00      	ble.n	800d860 <Mic_Upkeep+0x1c>
 800d85e:	e0cf      	b.n	800da00 <Mic_Upkeep+0x1bc>
 800d860:	2b00      	cmp	r3, #0
 800d862:	d002      	beq.n	800d86a <Mic_Upkeep+0x26>
 800d864:	2b01      	cmp	r3, #1
 800d866:	d014      	beq.n	800d892 <Mic_Upkeep+0x4e>
 800d868:	e0ca      	b.n	800da00 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800d86a:	2001      	movs	r0, #1
 800d86c:	f003 fb98 	bl	8010fa0 <enableMicrophone>
 800d870:	0003      	movs	r3, r0
 800d872:	001a      	movs	r2, r3
 800d874:	2301      	movs	r3, #1
 800d876:	4053      	eors	r3, r2
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d005      	beq.n	800d88a <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800d87e:	4a6c      	ldr	r2, [pc, #432]	@ (800da30 <Mic_Upkeep+0x1ec>)
 800d880:	4b6c      	ldr	r3, [pc, #432]	@ (800da34 <Mic_Upkeep+0x1f0>)
 800d882:	217f      	movs	r1, #127	@ 0x7f
 800d884:	0018      	movs	r0, r3
 800d886:	f005 fe19 	bl	80134bc <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800d88a:	4b68      	ldr	r3, [pc, #416]	@ (800da2c <Mic_Upkeep+0x1e8>)
 800d88c:	2201      	movs	r2, #1
 800d88e:	701a      	strb	r2, [r3, #0]
    break;
 800d890:	e0c5      	b.n	800da1e <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800d892:	f003 fb61 	bl	8010f58 <micSettlingComplete>
 800d896:	1e03      	subs	r3, r0, #0
 800d898:	d105      	bne.n	800d8a6 <Mic_Upkeep+0x62>
 800d89a:	4b67      	ldr	r3, [pc, #412]	@ (800da38 <Mic_Upkeep+0x1f4>)
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d100      	bne.n	800d8a6 <Mic_Upkeep+0x62>
 800d8a4:	e0b6      	b.n	800da14 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800d8a6:	f003 fbe5 	bl	8011074 <startSPLcalculation>
 800d8aa:	0003      	movs	r3, r0
 800d8ac:	001a      	movs	r2, r3
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	4053      	eors	r3, r2
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d005      	beq.n	800d8c4 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800d8b8:	4a5d      	ldr	r2, [pc, #372]	@ (800da30 <Mic_Upkeep+0x1ec>)
 800d8ba:	4b5e      	ldr	r3, [pc, #376]	@ (800da34 <Mic_Upkeep+0x1f0>)
 800d8bc:	2188      	movs	r1, #136	@ 0x88
 800d8be:	0018      	movs	r0, r3
 800d8c0:	f005 fdfc 	bl	80134bc <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800d8c4:	4b59      	ldr	r3, [pc, #356]	@ (800da2c <Mic_Upkeep+0x1e8>)
 800d8c6:	2202      	movs	r2, #2
 800d8c8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d8ca:	e0a3      	b.n	800da14 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800d8cc:	4b5b      	ldr	r3, [pc, #364]	@ (800da3c <Mic_Upkeep+0x1f8>)
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	2101      	movs	r1, #1
 800d8d2:	0018      	movs	r0, r3
 800d8d4:	f003 fa22 	bl	8010d1c <getSoundData>
 800d8d8:	1e03      	subs	r3, r0, #0
 800d8da:	d100      	bne.n	800d8de <Mic_Upkeep+0x9a>
 800d8dc:	e09c      	b.n	800da18 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800d8de:	f003 fb1b 	bl	8010f18 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800d8e2:	4b56      	ldr	r3, [pc, #344]	@ (800da3c <Mic_Upkeep+0x1f8>)
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	001a      	movs	r2, r3
 800d8e8:	4b54      	ldr	r3, [pc, #336]	@ (800da3c <Mic_Upkeep+0x1f8>)
 800d8ea:	785b      	ldrb	r3, [r3, #1]
 800d8ec:	4954      	ldr	r1, [pc, #336]	@ (800da40 <Mic_Upkeep+0x1fc>)
 800d8ee:	0038      	movs	r0, r7
 800d8f0:	f017 feb6 	bl	8025660 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800d8f4:	4b51      	ldr	r3, [pc, #324]	@ (800da3c <Mic_Upkeep+0x1f8>)
 800d8f6:	89db      	ldrh	r3, [r3, #14]
 800d8f8:	001a      	movs	r2, r3
 800d8fa:	4b50      	ldr	r3, [pc, #320]	@ (800da3c <Mic_Upkeep+0x1f8>)
 800d8fc:	7c1b      	ldrb	r3, [r3, #16]
 800d8fe:	4951      	ldr	r1, [pc, #324]	@ (800da44 <Mic_Upkeep+0x200>)
 800d900:	4851      	ldr	r0, [pc, #324]	@ (800da48 <Mic_Upkeep+0x204>)
 800d902:	f017 fead 	bl	8025660 <siprintf>
      dBValue = atof(dBbuffer);
 800d906:	003b      	movs	r3, r7
 800d908:	0018      	movs	r0, r3
 800d90a:	f016 fa4f 	bl	8023dac <atof>
 800d90e:	0002      	movs	r2, r0
 800d910:	000b      	movs	r3, r1
 800d912:	0010      	movs	r0, r2
 800d914:	0019      	movs	r1, r3
 800d916:	f7f6 f805 	bl	8003924 <__aeabi_d2f>
 800d91a:	1c02      	adds	r2, r0, #0
 800d91c:	4b4b      	ldr	r3, [pc, #300]	@ (800da4c <Mic_Upkeep+0x208>)
 800d91e:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800d920:	4b4a      	ldr	r3, [pc, #296]	@ (800da4c <Mic_Upkeep+0x208>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	494a      	ldr	r1, [pc, #296]	@ (800da50 <Mic_Upkeep+0x20c>)
 800d926:	1c18      	adds	r0, r3, #0
 800d928:	f7f3 fb8a 	bl	8001040 <__aeabi_fmul>
 800d92c:	1c03      	adds	r3, r0, #0
 800d92e:	1c18      	adds	r0, r3, #0
 800d930:	f7f5 ffb0 	bl	8003894 <__aeabi_f2d>
 800d934:	2200      	movs	r2, #0
 800d936:	4b47      	ldr	r3, [pc, #284]	@ (800da54 <Mic_Upkeep+0x210>)
 800d938:	f7f4 f80c 	bl	8001954 <__aeabi_dadd>
 800d93c:	0002      	movs	r2, r0
 800d93e:	000b      	movs	r3, r1
 800d940:	0010      	movs	r0, r2
 800d942:	0019      	movs	r1, r3
 800d944:	f7f5 ff18 	bl	8003778 <__aeabi_d2iz>
 800d948:	0003      	movs	r3, r0
 800d94a:	0018      	movs	r0, r3
 800d94c:	f7f5 ff50 	bl	80037f0 <__aeabi_i2d>
 800d950:	2200      	movs	r2, #0
 800d952:	4b41      	ldr	r3, [pc, #260]	@ (800da58 <Mic_Upkeep+0x214>)
 800d954:	f7f4 fbc4 	bl	80020e0 <__aeabi_ddiv>
 800d958:	0002      	movs	r2, r0
 800d95a:	000b      	movs	r3, r1
 800d95c:	0010      	movs	r0, r2
 800d95e:	0019      	movs	r1, r3
 800d960:	f7f5 ffe0 	bl	8003924 <__aeabi_d2f>
 800d964:	1c02      	adds	r2, r0, #0
 800d966:	4b39      	ldr	r3, [pc, #228]	@ (800da4c <Mic_Upkeep+0x208>)
 800d968:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800d96a:	f7ff fdd5 	bl	800d518 <MIC_Print>
      if (!startSPLcalculation()) {
 800d96e:	f003 fb81 	bl	8011074 <startSPLcalculation>
 800d972:	0003      	movs	r3, r0
 800d974:	001a      	movs	r2, r3
 800d976:	2301      	movs	r3, #1
 800d978:	4053      	eors	r3, r2
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d005      	beq.n	800d98c <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800d980:	4a2b      	ldr	r2, [pc, #172]	@ (800da30 <Mic_Upkeep+0x1ec>)
 800d982:	4b2c      	ldr	r3, [pc, #176]	@ (800da34 <Mic_Upkeep+0x1f0>)
 800d984:	2198      	movs	r1, #152	@ 0x98
 800d986:	0018      	movs	r0, r3
 800d988:	f005 fd98 	bl	80134bc <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800d98c:	2000      	movs	r0, #0
 800d98e:	f003 fb07 	bl	8010fa0 <enableMicrophone>
 800d992:	0003      	movs	r3, r0
 800d994:	001a      	movs	r2, r3
 800d996:	2301      	movs	r3, #1
 800d998:	4053      	eors	r3, r2
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d005      	beq.n	800d9ac <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800d9a0:	4a23      	ldr	r2, [pc, #140]	@ (800da30 <Mic_Upkeep+0x1ec>)
 800d9a2:	4b24      	ldr	r3, [pc, #144]	@ (800da34 <Mic_Upkeep+0x1f0>)
 800d9a4:	219b      	movs	r1, #155	@ 0x9b
 800d9a6:	0018      	movs	r0, r3
 800d9a8:	f005 fd88 	bl	80134bc <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800d9ac:	f006 fa0e 	bl	8013dcc <HAL_GetTick>
 800d9b0:	0003      	movs	r3, r0
 800d9b2:	4a2a      	ldr	r2, [pc, #168]	@ (800da5c <Mic_Upkeep+0x218>)
 800d9b4:	189a      	adds	r2, r3, r2
 800d9b6:	4b2a      	ldr	r3, [pc, #168]	@ (800da60 <Mic_Upkeep+0x21c>)
 800d9b8:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800d9ba:	4b1c      	ldr	r3, [pc, #112]	@ (800da2c <Mic_Upkeep+0x1e8>)
 800d9bc:	2203      	movs	r2, #3
 800d9be:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800d9c0:	f004 fade 	bl	8011f80 <ResetMICIndicator>
    }
    break;
 800d9c4:	e028      	b.n	800da18 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800d9c6:	4b26      	ldr	r3, [pc, #152]	@ (800da60 <Mic_Upkeep+0x21c>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	0018      	movs	r0, r3
 800d9cc:	f005 fc68 	bl	80132a0 <TimestampIsReached>
 800d9d0:	1e03      	subs	r3, r0, #0
 800d9d2:	d023      	beq.n	800da1c <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800d9d4:	2001      	movs	r0, #1
 800d9d6:	f003 fae3 	bl	8010fa0 <enableMicrophone>
 800d9da:	0003      	movs	r3, r0
 800d9dc:	001a      	movs	r2, r3
 800d9de:	2301      	movs	r3, #1
 800d9e0:	4053      	eors	r3, r2
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d005      	beq.n	800d9f4 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800d9e8:	4a11      	ldr	r2, [pc, #68]	@ (800da30 <Mic_Upkeep+0x1ec>)
 800d9ea:	4b12      	ldr	r3, [pc, #72]	@ (800da34 <Mic_Upkeep+0x1f0>)
 800d9ec:	21a6      	movs	r1, #166	@ 0xa6
 800d9ee:	0018      	movs	r0, r3
 800d9f0:	f005 fd64 	bl	80134bc <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800d9f4:	4b0d      	ldr	r3, [pc, #52]	@ (800da2c <Mic_Upkeep+0x1e8>)
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800d9fa:	f004 fa7f 	bl	8011efc <SetMICIndicator>
    }
    break;
 800d9fe:	e00d      	b.n	800da1c <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800da00:	4a18      	ldr	r2, [pc, #96]	@ (800da64 <Mic_Upkeep+0x220>)
 800da02:	4b19      	ldr	r3, [pc, #100]	@ (800da68 <Mic_Upkeep+0x224>)
 800da04:	0019      	movs	r1, r3
 800da06:	2003      	movs	r0, #3
 800da08:	f005 fca0 	bl	801334c <CreateLine>
    MicState = MIC_STATE_INIT;
 800da0c:	4b07      	ldr	r3, [pc, #28]	@ (800da2c <Mic_Upkeep+0x1e8>)
 800da0e:	2200      	movs	r2, #0
 800da10:	701a      	strb	r2, [r3, #0]
    break;
 800da12:	e004      	b.n	800da1e <Mic_Upkeep+0x1da>
    break;
 800da14:	46c0      	nop			@ (mov r8, r8)
 800da16:	e002      	b.n	800da1e <Mic_Upkeep+0x1da>
    break;
 800da18:	46c0      	nop			@ (mov r8, r8)
 800da1a:	e000      	b.n	800da1e <Mic_Upkeep+0x1da>
    break;
 800da1c:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800da1e:	4b03      	ldr	r3, [pc, #12]	@ (800da2c <Mic_Upkeep+0x1e8>)
 800da20:	781b      	ldrb	r3, [r3, #0]
}
 800da22:	0018      	movs	r0, r3
 800da24:	46bd      	mov	sp, r7
 800da26:	b002      	add	sp, #8
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	46c0      	nop			@ (mov r8, r8)
 800da2c:	20000eaa 	.word	0x20000eaa
 800da30:	0802cafc 	.word	0x0802cafc
 800da34:	0802dd24 	.word	0x0802dd24
 800da38:	20000fc5 	.word	0x20000fc5
 800da3c:	20000e98 	.word	0x20000e98
 800da40:	0802cb18 	.word	0x0802cb18
 800da44:	0802cb20 	.word	0x0802cb20
 800da48:	20000e48 	.word	0x20000e48
 800da4c:	20000e88 	.word	0x20000e88
 800da50:	42c80000 	.word	0x42c80000
 800da54:	3fe00000 	.word	0x3fe00000
 800da58:	40590000 	.word	0x40590000
 800da5c:	000002f3 	.word	0x000002f3
 800da60:	20000e94 	.word	0x20000e94
 800da64:	0802cb28 	.word	0x0802cb28
 800da68:	0802cb48 	.word	0x0802cb48

0800da6c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b086      	sub	sp, #24
 800da70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800da72:	1d3b      	adds	r3, r7, #4
 800da74:	0018      	movs	r0, r3
 800da76:	2314      	movs	r3, #20
 800da78:	001a      	movs	r2, r3
 800da7a:	2100      	movs	r1, #0
 800da7c:	f017 ff5a 	bl	8025934 <memset>
  RTC_DateTypeDef sDate = {0};
 800da80:	003b      	movs	r3, r7
 800da82:	2200      	movs	r2, #0
 800da84:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800da86:	4b2e      	ldr	r3, [pc, #184]	@ (800db40 <MX_RTC_Init+0xd4>)
 800da88:	4a2e      	ldr	r2, [pc, #184]	@ (800db44 <MX_RTC_Init+0xd8>)
 800da8a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800da8c:	4b2c      	ldr	r3, [pc, #176]	@ (800db40 <MX_RTC_Init+0xd4>)
 800da8e:	2200      	movs	r2, #0
 800da90:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800da92:	4b2b      	ldr	r3, [pc, #172]	@ (800db40 <MX_RTC_Init+0xd4>)
 800da94:	227f      	movs	r2, #127	@ 0x7f
 800da96:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800da98:	4b29      	ldr	r3, [pc, #164]	@ (800db40 <MX_RTC_Init+0xd4>)
 800da9a:	22ff      	movs	r2, #255	@ 0xff
 800da9c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800da9e:	4b28      	ldr	r3, [pc, #160]	@ (800db40 <MX_RTC_Init+0xd4>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800daa4:	4b26      	ldr	r3, [pc, #152]	@ (800db40 <MX_RTC_Init+0xd4>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800daaa:	4b25      	ldr	r3, [pc, #148]	@ (800db40 <MX_RTC_Init+0xd4>)
 800daac:	2200      	movs	r2, #0
 800daae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800dab0:	4b23      	ldr	r3, [pc, #140]	@ (800db40 <MX_RTC_Init+0xd4>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800dab6:	4b22      	ldr	r3, [pc, #136]	@ (800db40 <MX_RTC_Init+0xd4>)
 800dab8:	0018      	movs	r0, r3
 800daba:	f00d fd17 	bl	801b4ec <HAL_RTC_Init>
 800dabe:	1e03      	subs	r3, r0, #0
 800dac0:	d001      	beq.n	800dac6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800dac2:	f7fe ffbb 	bl	800ca3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800dac6:	1d3b      	adds	r3, r7, #4
 800dac8:	220d      	movs	r2, #13
 800daca:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800dacc:	1d3b      	adds	r3, r7, #4
 800dace:	2200      	movs	r2, #0
 800dad0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800dad2:	1d3b      	adds	r3, r7, #4
 800dad4:	2200      	movs	r2, #0
 800dad6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800dad8:	1d3b      	adds	r3, r7, #4
 800dada:	2200      	movs	r2, #0
 800dadc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800dade:	1d3b      	adds	r3, r7, #4
 800dae0:	2200      	movs	r2, #0
 800dae2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800dae4:	1d39      	adds	r1, r7, #4
 800dae6:	4b16      	ldr	r3, [pc, #88]	@ (800db40 <MX_RTC_Init+0xd4>)
 800dae8:	2200      	movs	r2, #0
 800daea:	0018      	movs	r0, r3
 800daec:	f00d fd9a 	bl	801b624 <HAL_RTC_SetTime>
 800daf0:	1e03      	subs	r3, r0, #0
 800daf2:	d001      	beq.n	800daf8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800daf4:	f7fe ffa2 	bl	800ca3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800daf8:	003b      	movs	r3, r7
 800dafa:	2206      	movs	r2, #6
 800dafc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800dafe:	003b      	movs	r3, r7
 800db00:	2211      	movs	r2, #17
 800db02:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800db04:	003b      	movs	r3, r7
 800db06:	2217      	movs	r2, #23
 800db08:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800db0a:	003b      	movs	r3, r7
 800db0c:	2218      	movs	r2, #24
 800db0e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800db10:	0039      	movs	r1, r7
 800db12:	4b0b      	ldr	r3, [pc, #44]	@ (800db40 <MX_RTC_Init+0xd4>)
 800db14:	2200      	movs	r2, #0
 800db16:	0018      	movs	r0, r3
 800db18:	f00d fe8c 	bl	801b834 <HAL_RTC_SetDate>
 800db1c:	1e03      	subs	r3, r0, #0
 800db1e:	d001      	beq.n	800db24 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800db20:	f7fe ff8c 	bl	800ca3c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800db24:	4b06      	ldr	r3, [pc, #24]	@ (800db40 <MX_RTC_Init+0xd4>)
 800db26:	2200      	movs	r2, #0
 800db28:	2100      	movs	r1, #0
 800db2a:	0018      	movs	r0, r3
 800db2c:	f00e f85a 	bl	801bbe4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800db30:	1e03      	subs	r3, r0, #0
 800db32:	d001      	beq.n	800db38 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800db34:	f7fe ff82 	bl	800ca3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800db38:	46c0      	nop			@ (mov r8, r8)
 800db3a:	46bd      	mov	sp, r7
 800db3c:	b006      	add	sp, #24
 800db3e:	bd80      	pop	{r7, pc}
 800db40:	20000eac 	.word	0x20000eac
 800db44:	40002800 	.word	0x40002800

0800db48 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4a0a      	ldr	r2, [pc, #40]	@ (800db80 <HAL_RTC_MspInit+0x38>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d10e      	bne.n	800db78 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800db5a:	4b0a      	ldr	r3, [pc, #40]	@ (800db84 <HAL_RTC_MspInit+0x3c>)
 800db5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800db5e:	4b09      	ldr	r3, [pc, #36]	@ (800db84 <HAL_RTC_MspInit+0x3c>)
 800db60:	2180      	movs	r1, #128	@ 0x80
 800db62:	02c9      	lsls	r1, r1, #11
 800db64:	430a      	orrs	r2, r1
 800db66:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800db68:	2200      	movs	r2, #0
 800db6a:	2100      	movs	r1, #0
 800db6c:	2002      	movs	r0, #2
 800db6e:	f006 fdd1 	bl	8014714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800db72:	2002      	movs	r0, #2
 800db74:	f006 fde3 	bl	801473e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800db78:	46c0      	nop			@ (mov r8, r8)
 800db7a:	46bd      	mov	sp, r7
 800db7c:	b002      	add	sp, #8
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	40002800 	.word	0x40002800
 800db84:	40021000 	.word	0x40021000

0800db88 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800db88:	b580      	push	{r7, lr}
 800db8a:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800db8c:	4b02      	ldr	r3, [pc, #8]	@ (800db98 <sen5x_Get_sen5x_enable_state+0x10>)
 800db8e:	781b      	ldrb	r3, [r3, #0]
}
 800db90:	0018      	movs	r0, r3
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	46c0      	nop			@ (mov r8, r8)
 800db98:	20000ed3 	.word	0x20000ed3

0800db9c <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	0002      	movs	r2, r0
 800dba4:	1dfb      	adds	r3, r7, #7
 800dba6:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800dba8:	4b03      	ldr	r3, [pc, #12]	@ (800dbb8 <sen5x_Set_sen5x_state+0x1c>)
 800dbaa:	1dfa      	adds	r2, r7, #7
 800dbac:	7812      	ldrb	r2, [r2, #0]
 800dbae:	701a      	strb	r2, [r3, #0]
}
 800dbb0:	46c0      	nop			@ (mov r8, r8)
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	b002      	add	sp, #8
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	20000ed3 	.word	0x20000ed3

0800dbbc <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b082      	sub	sp, #8
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800dbc4:	f006 f902 	bl	8013dcc <HAL_GetTick>
 800dbc8:	0002      	movs	r2, r0
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	18d2      	adds	r2, r2, r3
 800dbce:	4b03      	ldr	r3, [pc, #12]	@ (800dbdc <setsen5xReadTimer+0x20>)
 800dbd0:	601a      	str	r2, [r3, #0]
}
 800dbd2:	46c0      	nop			@ (mov r8, r8)
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	b002      	add	sp, #8
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	46c0      	nop			@ (mov r8, r8)
 800dbdc:	20000ee0 	.word	0x20000ee0

0800dbe0 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	0002      	movs	r2, r0
 800dbe8:	1dfb      	adds	r3, r7, #7
 800dbea:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800dbec:	4b03      	ldr	r3, [pc, #12]	@ (800dbfc <setsen5xSamplecounter+0x1c>)
 800dbee:	2200      	movs	r2, #0
 800dbf0:	701a      	strb	r2, [r3, #0]
}
 800dbf2:	46c0      	nop			@ (mov r8, r8)
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	b002      	add	sp, #8
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	46c0      	nop			@ (mov r8, r8)
 800dbfc:	20000edc 	.word	0x20000edc

0800dc00 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800dc08:	f7fe ffd0 	bl	800cbac <IsPMSensorEnabled>
 800dc0c:	1e03      	subs	r3, r0, #0
 800dc0e:	d035      	beq.n	800dc7c <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800dc10:	f003 fff2 	bl	8011bf8 <batteryChargeCheck>
 800dc14:	0003      	movs	r3, r0
 800dc16:	2b03      	cmp	r3, #3
 800dc18:	d103      	bne.n	800dc22 <sen5x_enable+0x22>
      sen5x_Enable = true;
 800dc1a:	4b20      	ldr	r3, [pc, #128]	@ (800dc9c <sen5x_enable+0x9c>)
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	701a      	strb	r2, [r3, #0]
 800dc20:	e00d      	b.n	800dc3e <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800dc22:	4b1e      	ldr	r3, [pc, #120]	@ (800dc9c <sen5x_enable+0x9c>)
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	1e5a      	subs	r2, r3, #1
 800dc28:	4193      	sbcs	r3, r2
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	4053      	eors	r3, r2
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	1c1a      	adds	r2, r3, #0
 800dc34:	2301      	movs	r3, #1
 800dc36:	4013      	ands	r3, r2
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	4b18      	ldr	r3, [pc, #96]	@ (800dc9c <sen5x_enable+0x9c>)
 800dc3c:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800dc3e:	4b17      	ldr	r3, [pc, #92]	@ (800dc9c <sen5x_enable+0x9c>)
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d003      	beq.n	800dc4e <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800dc46:	2000      	movs	r0, #0
 800dc48:	f7ff ffb8 	bl	800dbbc <setsen5xReadTimer>
 800dc4c:	e009      	b.n	800dc62 <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800dc4e:	f006 f8bd 	bl	8013dcc <HAL_GetTick>
 800dc52:	0002      	movs	r2, r0
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2164      	movs	r1, #100	@ 0x64
 800dc58:	434b      	muls	r3, r1
 800dc5a:	18d3      	adds	r3, r2, r3
 800dc5c:	0018      	movs	r0, r3
 800dc5e:	f7ff ffad 	bl	800dbbc <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800dc62:	4b0e      	ldr	r3, [pc, #56]	@ (800dc9c <sen5x_enable+0x9c>)
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d001      	beq.n	800dc6e <sen5x_enable+0x6e>
 800dc6a:	4b0d      	ldr	r3, [pc, #52]	@ (800dca0 <sen5x_enable+0xa0>)
 800dc6c:	e000      	b.n	800dc70 <sen5x_enable+0x70>
 800dc6e:	4b0d      	ldr	r3, [pc, #52]	@ (800dca4 <sen5x_enable+0xa4>)
 800dc70:	4a0d      	ldr	r2, [pc, #52]	@ (800dca8 <sen5x_enable+0xa8>)
 800dc72:	490e      	ldr	r1, [pc, #56]	@ (800dcac <sen5x_enable+0xac>)
 800dc74:	2002      	movs	r0, #2
 800dc76:	f005 fb69 	bl	801334c <CreateLine>
 800dc7a:	e005      	b.n	800dc88 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800dc7c:	4a0c      	ldr	r2, [pc, #48]	@ (800dcb0 <sen5x_enable+0xb0>)
 800dc7e:	4b0b      	ldr	r3, [pc, #44]	@ (800dcac <sen5x_enable+0xac>)
 800dc80:	0019      	movs	r1, r3
 800dc82:	2002      	movs	r0, #2
 800dc84:	f005 fb62 	bl	801334c <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800dc88:	4b0a      	ldr	r3, [pc, #40]	@ (800dcb4 <sen5x_enable+0xb4>)
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800dc8e:	4b03      	ldr	r3, [pc, #12]	@ (800dc9c <sen5x_enable+0x9c>)
 800dc90:	781b      	ldrb	r3, [r3, #0]
}
 800dc92:	0018      	movs	r0, r3
 800dc94:	46bd      	mov	sp, r7
 800dc96:	b002      	add	sp, #8
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	46c0      	nop			@ (mov r8, r8)
 800dc9c:	20000ed3 	.word	0x20000ed3
 800dca0:	0802cb4c 	.word	0x0802cb4c
 800dca4:	0802cb54 	.word	0x0802cb54
 800dca8:	0802cb60 	.word	0x0802cb60
 800dcac:	0802cb7c 	.word	0x0802cb7c
 800dcb0:	0802cb80 	.word	0x0802cb80
 800dcb4:	2000009e 	.word	0x2000009e

0800dcb8 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800dcbc:	2380      	movs	r3, #128	@ 0x80
 800dcbe:	015b      	lsls	r3, r3, #5
 800dcc0:	480f      	ldr	r0, [pc, #60]	@ (800dd00 <sen5x_Power_On+0x48>)
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	0019      	movs	r1, r3
 800dcc6:	f007 fb12 	bl	80152ee <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800dcca:	4a0e      	ldr	r2, [pc, #56]	@ (800dd04 <sen5x_Power_On+0x4c>)
 800dccc:	4b0e      	ldr	r3, [pc, #56]	@ (800dd08 <sen5x_Power_On+0x50>)
 800dcce:	0019      	movs	r1, r3
 800dcd0:	2003      	movs	r0, #3
 800dcd2:	f005 fb3b 	bl	801334c <CreateLine>
  HAL_Delay(150);
 800dcd6:	2096      	movs	r0, #150	@ 0x96
 800dcd8:	f006 f882 	bl	8013de0 <HAL_Delay>
  if (sen5x_device_reset()) {
 800dcdc:	f001 f9da 	bl	800f094 <sen5x_device_reset>
 800dce0:	1e03      	subs	r3, r0, #0
 800dce2:	d006      	beq.n	800dcf2 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800dce4:	4a09      	ldr	r2, [pc, #36]	@ (800dd0c <sen5x_Power_On+0x54>)
 800dce6:	4b0a      	ldr	r3, [pc, #40]	@ (800dd10 <sen5x_Power_On+0x58>)
 800dce8:	0019      	movs	r1, r3
 800dcea:	2001      	movs	r0, #1
 800dcec:	f005 fb2e 	bl	801334c <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800dcf0:	e002      	b.n	800dcf8 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800dcf2:	4b08      	ldr	r3, [pc, #32]	@ (800dd14 <sen5x_Power_On+0x5c>)
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	701a      	strb	r2, [r3, #0]
}
 800dcf8:	46c0      	nop			@ (mov r8, r8)
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	46c0      	nop			@ (mov r8, r8)
 800dd00:	50000800 	.word	0x50000800
 800dd04:	0802cba0 	.word	0x0802cba0
 800dd08:	0802cbbc 	.word	0x0802cbbc
 800dd0c:	0802cbc0 	.word	0x0802cbc0
 800dd10:	0802cbe8 	.word	0x0802cbe8
 800dd14:	20000ed1 	.word	0x20000ed1

0800dd18 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800dd1c:	4b0e      	ldr	r3, [pc, #56]	@ (800dd58 <sen5x_Power_Off+0x40>)
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d006      	beq.n	800dd32 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800dd24:	4a0d      	ldr	r2, [pc, #52]	@ (800dd5c <sen5x_Power_Off+0x44>)
 800dd26:	4b0e      	ldr	r3, [pc, #56]	@ (800dd60 <sen5x_Power_Off+0x48>)
 800dd28:	0019      	movs	r1, r3
 800dd2a:	2003      	movs	r0, #3
 800dd2c:	f005 fb0e 	bl	801334c <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800dd30:	e00f      	b.n	800dd52 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800dd32:	4a0c      	ldr	r2, [pc, #48]	@ (800dd64 <sen5x_Power_Off+0x4c>)
 800dd34:	4b0a      	ldr	r3, [pc, #40]	@ (800dd60 <sen5x_Power_Off+0x48>)
 800dd36:	0019      	movs	r1, r3
 800dd38:	2003      	movs	r0, #3
 800dd3a:	f005 fb07 	bl	801334c <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800dd3e:	2380      	movs	r3, #128	@ 0x80
 800dd40:	015b      	lsls	r3, r3, #5
 800dd42:	4809      	ldr	r0, [pc, #36]	@ (800dd68 <sen5x_Power_Off+0x50>)
 800dd44:	2200      	movs	r2, #0
 800dd46:	0019      	movs	r1, r3
 800dd48:	f007 fad1 	bl	80152ee <HAL_GPIO_WritePin>
      sen5x_On = false;
 800dd4c:	4b07      	ldr	r3, [pc, #28]	@ (800dd6c <sen5x_Power_Off+0x54>)
 800dd4e:	2200      	movs	r2, #0
 800dd50:	701a      	strb	r2, [r3, #0]
}
 800dd52:	46c0      	nop			@ (mov r8, r8)
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	20000ed2 	.word	0x20000ed2
 800dd5c:	0802cbec 	.word	0x0802cbec
 800dd60:	0802cbbc 	.word	0x0802cbbc
 800dd64:	0802cc1c 	.word	0x0802cc1c
 800dd68:	50000800 	.word	0x50000800
 800dd6c:	20000ed1 	.word	0x20000ed1

0800dd70 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800dd70:	b580      	push	{r7, lr}
 800dd72:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800dd74:	4b02      	ldr	r3, [pc, #8]	@ (800dd80 <reset_fanCleaningDone+0x10>)
 800dd76:	2200      	movs	r2, #0
 800dd78:	701a      	strb	r2, [r3, #0]
}
 800dd7a:	46c0      	nop			@ (mov r8, r8)
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	20000ed0 	.word	0x20000ed0

0800dd84 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800dd84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd86:	b093      	sub	sp, #76	@ 0x4c
 800dd88:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800dd8a:	2436      	movs	r4, #54	@ 0x36
 800dd8c:	193b      	adds	r3, r7, r4
 800dd8e:	2200      	movs	r2, #0
 800dd90:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800dd92:	2335      	movs	r3, #53	@ 0x35
 800dd94:	18fb      	adds	r3, r7, r3
 800dd96:	2220      	movs	r2, #32
 800dd98:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800dd9a:	2334      	movs	r3, #52	@ 0x34
 800dd9c:	18fb      	adds	r3, r7, r3
 800dd9e:	2220      	movs	r2, #32
 800dda0:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800dda2:	f7ff ff89 	bl	800dcb8 <sen5x_Power_On>
  error = sen5x_device_reset();
 800dda6:	0025      	movs	r5, r4
 800dda8:	193c      	adds	r4, r7, r4
 800ddaa:	f001 f973 	bl	800f094 <sen5x_device_reset>
 800ddae:	0003      	movs	r3, r0
 800ddb0:	8023      	strh	r3, [r4, #0]
  if (error) {
 800ddb2:	002c      	movs	r4, r5
 800ddb4:	193b      	adds	r3, r7, r4
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	5e9b      	ldrsh	r3, [r3, r2]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00b      	beq.n	800ddd6 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800ddbe:	193b      	adds	r3, r7, r4
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	5e9b      	ldrsh	r3, [r3, r2]
 800ddc4:	4a75      	ldr	r2, [pc, #468]	@ (800df9c <probe_sen5x+0x218>)
 800ddc6:	4976      	ldr	r1, [pc, #472]	@ (800dfa0 <probe_sen5x+0x21c>)
 800ddc8:	2001      	movs	r0, #1
 800ddca:	f005 fabf 	bl	801334c <CreateLine>
      return error;
 800ddce:	193b      	adds	r3, r7, r4
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	5e9b      	ldrsh	r3, [r3, r2]
 800ddd4:	e0de      	b.n	800df94 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800ddd6:	2536      	movs	r5, #54	@ 0x36
 800ddd8:	197c      	adds	r4, r7, r5
 800ddda:	2335      	movs	r3, #53	@ 0x35
 800dddc:	18fb      	adds	r3, r7, r3
 800ddde:	781a      	ldrb	r2, [r3, #0]
 800dde0:	230c      	movs	r3, #12
 800dde2:	18fb      	adds	r3, r7, r3
 800dde4:	0011      	movs	r1, r2
 800dde6:	0018      	movs	r0, r3
 800dde8:	f001 f840 	bl	800ee6c <sen5x_get_serial_number>
 800ddec:	0003      	movs	r3, r0
 800ddee:	8023      	strh	r3, [r4, #0]
  if (error) {
 800ddf0:	197b      	adds	r3, r7, r5
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	5e9b      	ldrsh	r3, [r3, r2]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d00b      	beq.n	800de12 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800ddfa:	197b      	adds	r3, r7, r5
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	5e9a      	ldrsh	r2, [r3, r2]
 800de00:	4b68      	ldr	r3, [pc, #416]	@ (800dfa4 <probe_sen5x+0x220>)
 800de02:	0011      	movs	r1, r2
 800de04:	0018      	movs	r0, r3
 800de06:	f017 fbbb 	bl	8025580 <iprintf>
      return error;
 800de0a:	197b      	adds	r3, r7, r5
 800de0c:	2200      	movs	r2, #0
 800de0e:	5e9b      	ldrsh	r3, [r3, r2]
 800de10:	e0c0      	b.n	800df94 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800de12:	230c      	movs	r3, #12
 800de14:	18fa      	adds	r2, r7, r3
 800de16:	4b64      	ldr	r3, [pc, #400]	@ (800dfa8 <probe_sen5x+0x224>)
 800de18:	0011      	movs	r1, r2
 800de1a:	0018      	movs	r0, r3
 800de1c:	f017 fbb0 	bl	8025580 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800de20:	2536      	movs	r5, #54	@ 0x36
 800de22:	197c      	adds	r4, r7, r5
 800de24:	2334      	movs	r3, #52	@ 0x34
 800de26:	18fb      	adds	r3, r7, r3
 800de28:	781a      	ldrb	r2, [r3, #0]
 800de2a:	4b60      	ldr	r3, [pc, #384]	@ (800dfac <probe_sen5x+0x228>)
 800de2c:	0011      	movs	r1, r2
 800de2e:	0018      	movs	r0, r3
 800de30:	f000 ffc6 	bl	800edc0 <sen5x_get_product_name>
 800de34:	0003      	movs	r3, r0
 800de36:	8023      	strh	r3, [r4, #0]
  if (error) {
 800de38:	197b      	adds	r3, r7, r5
 800de3a:	2200      	movs	r2, #0
 800de3c:	5e9b      	ldrsh	r3, [r3, r2]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d00b      	beq.n	800de5a <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800de42:	197b      	adds	r3, r7, r5
 800de44:	2200      	movs	r2, #0
 800de46:	5e9a      	ldrsh	r2, [r3, r2]
 800de48:	4b59      	ldr	r3, [pc, #356]	@ (800dfb0 <probe_sen5x+0x22c>)
 800de4a:	0011      	movs	r1, r2
 800de4c:	0018      	movs	r0, r3
 800de4e:	f017 fb97 	bl	8025580 <iprintf>
      return error;
 800de52:	197b      	adds	r3, r7, r5
 800de54:	2200      	movs	r2, #0
 800de56:	5e9b      	ldrsh	r3, [r3, r2]
 800de58:	e09c      	b.n	800df94 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800de5a:	4a54      	ldr	r2, [pc, #336]	@ (800dfac <probe_sen5x+0x228>)
 800de5c:	4b55      	ldr	r3, [pc, #340]	@ (800dfb4 <probe_sen5x+0x230>)
 800de5e:	0011      	movs	r1, r2
 800de60:	0018      	movs	r0, r3
 800de62:	f017 fb8d 	bl	8025580 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800de66:	2636      	movs	r6, #54	@ 0x36
 800de68:	19bc      	adds	r4, r7, r6
 800de6a:	2308      	movs	r3, #8
 800de6c:	18fd      	adds	r5, r7, r3
 800de6e:	2309      	movs	r3, #9
 800de70:	18fa      	adds	r2, r7, r3
 800de72:	230a      	movs	r3, #10
 800de74:	18f9      	adds	r1, r7, r3
 800de76:	230b      	movs	r3, #11
 800de78:	18f8      	adds	r0, r7, r3
 800de7a:	1d7b      	adds	r3, r7, #5
 800de7c:	9302      	str	r3, [sp, #8]
 800de7e:	1dbb      	adds	r3, r7, #6
 800de80:	9301      	str	r3, [sp, #4]
 800de82:	1dfb      	adds	r3, r7, #7
 800de84:	9300      	str	r3, [sp, #0]
 800de86:	002b      	movs	r3, r5
 800de88:	f001 f846 	bl	800ef18 <sen5x_get_version>
 800de8c:	0003      	movs	r3, r0
 800de8e:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800de90:	19bb      	adds	r3, r7, r6
 800de92:	2200      	movs	r2, #0
 800de94:	5e9b      	ldrsh	r3, [r3, r2]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00b      	beq.n	800deb2 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800de9a:	19bb      	adds	r3, r7, r6
 800de9c:	2200      	movs	r2, #0
 800de9e:	5e9a      	ldrsh	r2, [r3, r2]
 800dea0:	4b45      	ldr	r3, [pc, #276]	@ (800dfb8 <probe_sen5x+0x234>)
 800dea2:	0011      	movs	r1, r2
 800dea4:	0018      	movs	r0, r3
 800dea6:	f017 fb6b 	bl	8025580 <iprintf>
      return error;
 800deaa:	19bb      	adds	r3, r7, r6
 800deac:	2200      	movs	r2, #0
 800deae:	5e9b      	ldrsh	r3, [r3, r2]
 800deb0:	e070      	b.n	800df94 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800deb2:	230b      	movs	r3, #11
 800deb4:	18fb      	adds	r3, r7, r3
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	0019      	movs	r1, r3
 800deba:	230a      	movs	r3, #10
 800debc:	18fb      	adds	r3, r7, r3
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	001a      	movs	r2, r3
 800dec2:	2308      	movs	r3, #8
 800dec4:	18fb      	adds	r3, r7, r3
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	001c      	movs	r4, r3
 800deca:	1dfb      	adds	r3, r7, #7
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	483b      	ldr	r0, [pc, #236]	@ (800dfbc <probe_sen5x+0x238>)
 800ded0:	9300      	str	r3, [sp, #0]
 800ded2:	0023      	movs	r3, r4
 800ded4:	f017 fb54 	bl	8025580 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800ded8:	2300      	movs	r3, #0
 800deda:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800dedc:	262e      	movs	r6, #46	@ 0x2e
 800dede:	19bb      	adds	r3, r7, r6
 800dee0:	2200      	movs	r2, #0
 800dee2:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800dee4:	232c      	movs	r3, #44	@ 0x2c
 800dee6:	18fb      	adds	r3, r7, r3
 800dee8:	2200      	movs	r2, #0
 800deea:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800deec:	4934      	ldr	r1, [pc, #208]	@ (800dfc0 <probe_sen5x+0x23c>)
 800deee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800def0:	f7f3 f8a6 	bl	8001040 <__aeabi_fmul>
 800def4:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800def6:	1c18      	adds	r0, r3, #0
 800def8:	f7f3 fc76 	bl	80017e8 <__aeabi_f2iz>
 800defc:	0003      	movs	r3, r0
 800defe:	b218      	sxth	r0, r3
 800df00:	2536      	movs	r5, #54	@ 0x36
 800df02:	197c      	adds	r4, r7, r5
 800df04:	232c      	movs	r3, #44	@ 0x2c
 800df06:	18fb      	adds	r3, r7, r3
 800df08:	881a      	ldrh	r2, [r3, #0]
 800df0a:	19bb      	adds	r3, r7, r6
 800df0c:	2100      	movs	r1, #0
 800df0e:	5e5b      	ldrsh	r3, [r3, r1]
 800df10:	0019      	movs	r1, r3
 800df12:	f000 fef1 	bl	800ecf8 <sen5x_set_temperature_offset_parameters>
 800df16:	0003      	movs	r3, r0
 800df18:	8023      	strh	r3, [r4, #0]
  if (error) {
 800df1a:	197b      	adds	r3, r7, r5
 800df1c:	2200      	movs	r2, #0
 800df1e:	5e9b      	ldrsh	r3, [r3, r2]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d00b      	beq.n	800df3c <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800df24:	197b      	adds	r3, r7, r5
 800df26:	2200      	movs	r2, #0
 800df28:	5e9b      	ldrsh	r3, [r3, r2]
 800df2a:	4a26      	ldr	r2, [pc, #152]	@ (800dfc4 <probe_sen5x+0x240>)
 800df2c:	491c      	ldr	r1, [pc, #112]	@ (800dfa0 <probe_sen5x+0x21c>)
 800df2e:	2001      	movs	r0, #1
 800df30:	f005 fa0c 	bl	801334c <CreateLine>
      return error;
 800df34:	197b      	adds	r3, r7, r5
 800df36:	2200      	movs	r2, #0
 800df38:	5e9b      	ldrsh	r3, [r3, r2]
 800df3a:	e02b      	b.n	800df94 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800df3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df3e:	f7f5 fca9 	bl	8003894 <__aeabi_f2d>
 800df42:	0002      	movs	r2, r0
 800df44:	000b      	movs	r3, r1
 800df46:	4820      	ldr	r0, [pc, #128]	@ (800dfc8 <probe_sen5x+0x244>)
 800df48:	4920      	ldr	r1, [pc, #128]	@ (800dfcc <probe_sen5x+0x248>)
 800df4a:	9200      	str	r2, [sp, #0]
 800df4c:	9301      	str	r3, [sp, #4]
 800df4e:	0002      	movs	r2, r0
 800df50:	2002      	movs	r0, #2
 800df52:	f005 f9fb 	bl	801334c <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800df56:	f7fb f97d 	bl	8009254 <Check_USB_PowerOn>
 800df5a:	0003      	movs	r3, r0
 800df5c:	001a      	movs	r2, r3
 800df5e:	2301      	movs	r3, #1
 800df60:	4053      	eors	r3, r2
 800df62:	b2db      	uxtb	r3, r3
 800df64:	2b00      	cmp	r3, #0
 800df66:	d00a      	beq.n	800df7e <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800df68:	f7ff fed6 	bl	800dd18 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800df6c:	f005 ff2e 	bl	8013dcc <HAL_GetTick>
 800df70:	0003      	movs	r3, r0
 800df72:	22fa      	movs	r2, #250	@ 0xfa
 800df74:	00d2      	lsls	r2, r2, #3
 800df76:	189a      	adds	r2, r3, r2
 800df78:	4b15      	ldr	r3, [pc, #84]	@ (800dfd0 <probe_sen5x+0x24c>)
 800df7a:	601a      	str	r2, [r3, #0]
 800df7c:	e006      	b.n	800df8c <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800df7e:	f005 ff25 	bl	8013dcc <HAL_GetTick>
 800df82:	0003      	movs	r3, r0
 800df84:	4a13      	ldr	r2, [pc, #76]	@ (800dfd4 <probe_sen5x+0x250>)
 800df86:	189a      	adds	r2, r3, r2
 800df88:	4b11      	ldr	r3, [pc, #68]	@ (800dfd0 <probe_sen5x+0x24c>)
 800df8a:	601a      	str	r2, [r3, #0]
  }
  return error;
 800df8c:	2336      	movs	r3, #54	@ 0x36
 800df8e:	18fb      	adds	r3, r7, r3
 800df90:	2200      	movs	r2, #0
 800df92:	5e9b      	ldrsh	r3, [r3, r2]
}
 800df94:	0018      	movs	r0, r3
 800df96:	46bd      	mov	sp, r7
 800df98:	b00f      	add	sp, #60	@ 0x3c
 800df9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df9c:	0802cc38 	.word	0x0802cc38
 800dfa0:	0802cbe8 	.word	0x0802cbe8
 800dfa4:	0802cc64 	.word	0x0802cc64
 800dfa8:	0802cc94 	.word	0x0802cc94
 800dfac:	20000ed4 	.word	0x20000ed4
 800dfb0:	0802cca8 	.word	0x0802cca8
 800dfb4:	0802ccd8 	.word	0x0802ccd8
 800dfb8:	0802ccec 	.word	0x0802ccec
 800dfbc:	0802cd18 	.word	0x0802cd18
 800dfc0:	43480000 	.word	0x43480000
 800dfc4:	0802cd3c 	.word	0x0802cd3c
 800dfc8:	0802cd7c 	.word	0x0802cd7c
 800dfcc:	0802cb7c 	.word	0x0802cb7c
 800dfd0:	20000ee0 	.word	0x20000ee0
 800dfd4:	00006d60 	.word	0x00006d60

0800dfd8 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800dfd8:	b590      	push	{r4, r7, lr}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800dfde:	1dbb      	adds	r3, r7, #6
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800dfe4:	4b1b      	ldr	r3, [pc, #108]	@ (800e054 <sen5x_lightup_measurement+0x7c>)
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00b      	beq.n	800e004 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800dfec:	4a1a      	ldr	r2, [pc, #104]	@ (800e058 <sen5x_lightup_measurement+0x80>)
 800dfee:	4b1b      	ldr	r3, [pc, #108]	@ (800e05c <sen5x_lightup_measurement+0x84>)
 800dff0:	0019      	movs	r1, r3
 800dff2:	2002      	movs	r0, #2
 800dff4:	f005 f9aa 	bl	801334c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800dff8:	1dbc      	adds	r4, r7, #6
 800dffa:	f000 fd09 	bl	800ea10 <sen5x_start_measurement_without_pm>
 800dffe:	0003      	movs	r3, r0
 800e000:	8023      	strh	r3, [r4, #0]
 800e002:	e00a      	b.n	800e01a <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800e004:	4a16      	ldr	r2, [pc, #88]	@ (800e060 <sen5x_lightup_measurement+0x88>)
 800e006:	4b15      	ldr	r3, [pc, #84]	@ (800e05c <sen5x_lightup_measurement+0x84>)
 800e008:	0019      	movs	r1, r3
 800e00a:	2002      	movs	r0, #2
 800e00c:	f005 f99e 	bl	801334c <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800e010:	1dbc      	adds	r4, r7, #6
 800e012:	f000 fccf 	bl	800e9b4 <sen5x_start_measurement>
 800e016:	0003      	movs	r3, r0
 800e018:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800e01a:	1dbb      	adds	r3, r7, #6
 800e01c:	2200      	movs	r2, #0
 800e01e:	5e9b      	ldrsh	r3, [r3, r2]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d008      	beq.n	800e036 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800e024:	1dbb      	adds	r3, r7, #6
 800e026:	2200      	movs	r2, #0
 800e028:	5e9b      	ldrsh	r3, [r3, r2]
 800e02a:	4a0e      	ldr	r2, [pc, #56]	@ (800e064 <sen5x_lightup_measurement+0x8c>)
 800e02c:	490e      	ldr	r1, [pc, #56]	@ (800e068 <sen5x_lightup_measurement+0x90>)
 800e02e:	2001      	movs	r0, #1
 800e030:	f005 f98c 	bl	801334c <CreateLine>
 800e034:	e007      	b.n	800e046 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800e036:	f7fb f99b 	bl	8009370 <showTime>
    Info("sen5x_start_measurement executed");
 800e03a:	4a0c      	ldr	r2, [pc, #48]	@ (800e06c <sen5x_lightup_measurement+0x94>)
 800e03c:	4b07      	ldr	r3, [pc, #28]	@ (800e05c <sen5x_lightup_measurement+0x84>)
 800e03e:	0019      	movs	r1, r3
 800e040:	2002      	movs	r0, #2
 800e042:	f005 f983 	bl	801334c <CreateLine>
  }
  return error;
 800e046:	1dbb      	adds	r3, r7, #6
 800e048:	2200      	movs	r2, #0
 800e04a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e04c:	0018      	movs	r0, r3
 800e04e:	46bd      	mov	sp, r7
 800e050:	b003      	add	sp, #12
 800e052:	bd90      	pop	{r4, r7, pc}
 800e054:	20000ed2 	.word	0x20000ed2
 800e058:	0802cdb4 	.word	0x0802cdb4
 800e05c:	0802cb7c 	.word	0x0802cb7c
 800e060:	0802cde0 	.word	0x0802cde0
 800e064:	0802ce00 	.word	0x0802ce00
 800e068:	0802cbe8 	.word	0x0802cbe8
 800e06c:	0802ce30 	.word	0x0802ce30

0800e070 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800e070:	b590      	push	{r4, r7, lr}
 800e072:	b083      	sub	sp, #12
 800e074:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800e076:	1dbb      	adds	r3, r7, #6
 800e078:	2200      	movs	r2, #0
 800e07a:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800e07c:	4b21      	ldr	r3, [pc, #132]	@ (800e104 <sen5x_extinguish_measurement+0x94>)
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d01e      	beq.n	800e0c2 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800e084:	4a20      	ldr	r2, [pc, #128]	@ (800e108 <sen5x_extinguish_measurement+0x98>)
 800e086:	4b21      	ldr	r3, [pc, #132]	@ (800e10c <sen5x_extinguish_measurement+0x9c>)
 800e088:	0019      	movs	r1, r3
 800e08a:	2002      	movs	r0, #2
 800e08c:	f005 f95e 	bl	801334c <CreateLine>
    Info("PM measurement is disabled");
 800e090:	4a1f      	ldr	r2, [pc, #124]	@ (800e110 <sen5x_extinguish_measurement+0xa0>)
 800e092:	4b1e      	ldr	r3, [pc, #120]	@ (800e10c <sen5x_extinguish_measurement+0x9c>)
 800e094:	0019      	movs	r1, r3
 800e096:	2002      	movs	r0, #2
 800e098:	f005 f958 	bl	801334c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800e09c:	1dbc      	adds	r4, r7, #6
 800e09e:	f000 fcb7 	bl	800ea10 <sen5x_start_measurement_without_pm>
 800e0a2:	0003      	movs	r3, r0
 800e0a4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e0a6:	1dbb      	adds	r3, r7, #6
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	5e9b      	ldrsh	r3, [r3, r2]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d022      	beq.n	800e0f6 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800e0b0:	1dbb      	adds	r3, r7, #6
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	5e9b      	ldrsh	r3, [r3, r2]
 800e0b6:	4a17      	ldr	r2, [pc, #92]	@ (800e114 <sen5x_extinguish_measurement+0xa4>)
 800e0b8:	4917      	ldr	r1, [pc, #92]	@ (800e118 <sen5x_extinguish_measurement+0xa8>)
 800e0ba:	2001      	movs	r0, #1
 800e0bc:	f005 f946 	bl	801334c <CreateLine>
 800e0c0:	e019      	b.n	800e0f6 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800e0c2:	1dbc      	adds	r4, r7, #6
 800e0c4:	f000 fcd2 	bl	800ea6c <sen5x_stop_measurement>
 800e0c8:	0003      	movs	r3, r0
 800e0ca:	8023      	strh	r3, [r4, #0]
    showTime();
 800e0cc:	f7fb f950 	bl	8009370 <showTime>
    Info("sen5x_stop_measurement executed");
 800e0d0:	4a12      	ldr	r2, [pc, #72]	@ (800e11c <sen5x_extinguish_measurement+0xac>)
 800e0d2:	4b0e      	ldr	r3, [pc, #56]	@ (800e10c <sen5x_extinguish_measurement+0x9c>)
 800e0d4:	0019      	movs	r1, r3
 800e0d6:	2002      	movs	r0, #2
 800e0d8:	f005 f938 	bl	801334c <CreateLine>
    if (error) {
 800e0dc:	1dbb      	adds	r3, r7, #6
 800e0de:	2200      	movs	r2, #0
 800e0e0:	5e9b      	ldrsh	r3, [r3, r2]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d007      	beq.n	800e0f6 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800e0e6:	1dbb      	adds	r3, r7, #6
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	5e9b      	ldrsh	r3, [r3, r2]
 800e0ec:	4a0c      	ldr	r2, [pc, #48]	@ (800e120 <sen5x_extinguish_measurement+0xb0>)
 800e0ee:	490a      	ldr	r1, [pc, #40]	@ (800e118 <sen5x_extinguish_measurement+0xa8>)
 800e0f0:	2001      	movs	r0, #1
 800e0f2:	f005 f92b 	bl	801334c <CreateLine>
    }
  }
  return error;
 800e0f6:	1dbb      	adds	r3, r7, #6
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e0fc:	0018      	movs	r0, r3
 800e0fe:	46bd      	mov	sp, r7
 800e100:	b003      	add	sp, #12
 800e102:	bd90      	pop	{r4, r7, pc}
 800e104:	20000ed2 	.word	0x20000ed2
 800e108:	0802ce54 	.word	0x0802ce54
 800e10c:	0802cb7c 	.word	0x0802cb7c
 800e110:	0802ce8c 	.word	0x0802ce8c
 800e114:	0802cea8 	.word	0x0802cea8
 800e118:	0802cbe8 	.word	0x0802cbe8
 800e11c:	0802cee8 	.word	0x0802cee8
 800e120:	0802cf08 	.word	0x0802cf08

0800e124 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800e124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e126:	b08d      	sub	sp, #52	@ 0x34
 800e128:	af04      	add	r7, sp, #16
 800e12a:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800e12c:	261e      	movs	r6, #30
 800e12e:	19bb      	adds	r3, r7, r6
 800e130:	2200      	movs	r2, #0
 800e132:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800e134:	19bc      	adds	r4, r7, r6
 800e136:	2316      	movs	r3, #22
 800e138:	18fd      	adds	r5, r7, r3
 800e13a:	2318      	movs	r3, #24
 800e13c:	18fa      	adds	r2, r7, r3
 800e13e:	231a      	movs	r3, #26
 800e140:	18f9      	adds	r1, r7, r3
 800e142:	231c      	movs	r3, #28
 800e144:	18f8      	adds	r0, r7, r3
 800e146:	230e      	movs	r3, #14
 800e148:	18fb      	adds	r3, r7, r3
 800e14a:	9303      	str	r3, [sp, #12]
 800e14c:	2310      	movs	r3, #16
 800e14e:	18fb      	adds	r3, r7, r3
 800e150:	9302      	str	r3, [sp, #8]
 800e152:	2312      	movs	r3, #18
 800e154:	18fb      	adds	r3, r7, r3
 800e156:	9301      	str	r3, [sp, #4]
 800e158:	2314      	movs	r3, #20
 800e15a:	18fb      	adds	r3, r7, r3
 800e15c:	9300      	str	r3, [sp, #0]
 800e15e:	002b      	movs	r3, r5
 800e160:	f000 fd06 	bl	800eb70 <sen5x_read_measured_values>
 800e164:	0003      	movs	r3, r0
 800e166:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800e168:	19bb      	adds	r3, r7, r6
 800e16a:	2200      	movs	r2, #0
 800e16c:	5e9b      	ldrsh	r3, [r3, r2]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d003      	beq.n	800e17a <sen5x_read_measurement+0x56>
    return error;
 800e172:	19bb      	adds	r3, r7, r6
 800e174:	2200      	movs	r2, #0
 800e176:	5e9b      	ldrsh	r3, [r3, r2]
 800e178:	e02c      	b.n	800e1d4 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800e17a:	231c      	movs	r3, #28
 800e17c:	18fb      	adds	r3, r7, r3
 800e17e:	881a      	ldrh	r2, [r3, #0]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800e184:	231a      	movs	r3, #26
 800e186:	18fb      	adds	r3, r7, r3
 800e188:	881a      	ldrh	r2, [r3, #0]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800e18e:	2318      	movs	r3, #24
 800e190:	18fb      	adds	r3, r7, r3
 800e192:	881a      	ldrh	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800e198:	2316      	movs	r3, #22
 800e19a:	18fb      	adds	r3, r7, r3
 800e19c:	881a      	ldrh	r2, [r3, #0]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800e1a2:	2314      	movs	r3, #20
 800e1a4:	18fb      	adds	r3, r7, r3
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	5e9a      	ldrsh	r2, [r3, r2]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800e1ae:	2312      	movs	r3, #18
 800e1b0:	18fb      	adds	r3, r7, r3
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	5e9a      	ldrsh	r2, [r3, r2]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800e1ba:	2310      	movs	r3, #16
 800e1bc:	18fb      	adds	r3, r7, r3
 800e1be:	2200      	movs	r2, #0
 800e1c0:	5e9a      	ldrsh	r2, [r3, r2]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800e1c6:	230e      	movs	r3, #14
 800e1c8:	18fb      	adds	r3, r7, r3
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	5e9a      	ldrsh	r2, [r3, r2]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	81da      	strh	r2, [r3, #14]
  return 0;
 800e1d2:	2300      	movs	r3, #0
}
 800e1d4:	0018      	movs	r0, r3
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	b009      	add	sp, #36	@ 0x24
 800e1da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e1dc <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800e1e0:	4b63      	ldr	r3, [pc, #396]	@ (800e370 <sen5x_printvalues+0x194>)
 800e1e2:	881b      	ldrh	r3, [r3, #0]
 800e1e4:	4a63      	ldr	r2, [pc, #396]	@ (800e374 <sen5x_printvalues+0x198>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d013      	beq.n	800e212 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800e1ea:	4b61      	ldr	r3, [pc, #388]	@ (800e370 <sen5x_printvalues+0x194>)
 800e1ec:	881b      	ldrh	r3, [r3, #0]
 800e1ee:	0018      	movs	r0, r3
 800e1f0:	f7f3 fb1a 	bl	8001828 <__aeabi_i2f>
 800e1f4:	1c03      	adds	r3, r0, #0
 800e1f6:	4960      	ldr	r1, [pc, #384]	@ (800e378 <sen5x_printvalues+0x19c>)
 800e1f8:	1c18      	adds	r0, r3, #0
 800e1fa:	f7f2 fd53 	bl	8000ca4 <__aeabi_fdiv>
 800e1fe:	1c03      	adds	r3, r0, #0
 800e200:	1c18      	adds	r0, r3, #0
 800e202:	f7f5 fb47 	bl	8003894 <__aeabi_f2d>
 800e206:	0002      	movs	r2, r0
 800e208:	000b      	movs	r3, r1
 800e20a:	495c      	ldr	r1, [pc, #368]	@ (800e37c <sen5x_printvalues+0x1a0>)
 800e20c:	0008      	movs	r0, r1
 800e20e:	f017 f9b7 	bl	8025580 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800e212:	4b57      	ldr	r3, [pc, #348]	@ (800e370 <sen5x_printvalues+0x194>)
 800e214:	885b      	ldrh	r3, [r3, #2]
 800e216:	4a57      	ldr	r2, [pc, #348]	@ (800e374 <sen5x_printvalues+0x198>)
 800e218:	4293      	cmp	r3, r2
 800e21a:	d013      	beq.n	800e244 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800e21c:	4b54      	ldr	r3, [pc, #336]	@ (800e370 <sen5x_printvalues+0x194>)
 800e21e:	885b      	ldrh	r3, [r3, #2]
 800e220:	0018      	movs	r0, r3
 800e222:	f7f3 fb01 	bl	8001828 <__aeabi_i2f>
 800e226:	1c03      	adds	r3, r0, #0
 800e228:	4953      	ldr	r1, [pc, #332]	@ (800e378 <sen5x_printvalues+0x19c>)
 800e22a:	1c18      	adds	r0, r3, #0
 800e22c:	f7f2 fd3a 	bl	8000ca4 <__aeabi_fdiv>
 800e230:	1c03      	adds	r3, r0, #0
 800e232:	1c18      	adds	r0, r3, #0
 800e234:	f7f5 fb2e 	bl	8003894 <__aeabi_f2d>
 800e238:	0002      	movs	r2, r0
 800e23a:	000b      	movs	r3, r1
 800e23c:	4950      	ldr	r1, [pc, #320]	@ (800e380 <sen5x_printvalues+0x1a4>)
 800e23e:	0008      	movs	r0, r1
 800e240:	f017 f99e 	bl	8025580 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800e244:	4b4a      	ldr	r3, [pc, #296]	@ (800e370 <sen5x_printvalues+0x194>)
 800e246:	889b      	ldrh	r3, [r3, #4]
 800e248:	4a4a      	ldr	r2, [pc, #296]	@ (800e374 <sen5x_printvalues+0x198>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d013      	beq.n	800e276 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800e24e:	4b48      	ldr	r3, [pc, #288]	@ (800e370 <sen5x_printvalues+0x194>)
 800e250:	889b      	ldrh	r3, [r3, #4]
 800e252:	0018      	movs	r0, r3
 800e254:	f7f3 fae8 	bl	8001828 <__aeabi_i2f>
 800e258:	1c03      	adds	r3, r0, #0
 800e25a:	4947      	ldr	r1, [pc, #284]	@ (800e378 <sen5x_printvalues+0x19c>)
 800e25c:	1c18      	adds	r0, r3, #0
 800e25e:	f7f2 fd21 	bl	8000ca4 <__aeabi_fdiv>
 800e262:	1c03      	adds	r3, r0, #0
 800e264:	1c18      	adds	r0, r3, #0
 800e266:	f7f5 fb15 	bl	8003894 <__aeabi_f2d>
 800e26a:	0002      	movs	r2, r0
 800e26c:	000b      	movs	r3, r1
 800e26e:	4945      	ldr	r1, [pc, #276]	@ (800e384 <sen5x_printvalues+0x1a8>)
 800e270:	0008      	movs	r0, r1
 800e272:	f017 f985 	bl	8025580 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800e276:	4b3e      	ldr	r3, [pc, #248]	@ (800e370 <sen5x_printvalues+0x194>)
 800e278:	88db      	ldrh	r3, [r3, #6]
 800e27a:	4a3e      	ldr	r2, [pc, #248]	@ (800e374 <sen5x_printvalues+0x198>)
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d013      	beq.n	800e2a8 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800e280:	4b3b      	ldr	r3, [pc, #236]	@ (800e370 <sen5x_printvalues+0x194>)
 800e282:	88db      	ldrh	r3, [r3, #6]
 800e284:	0018      	movs	r0, r3
 800e286:	f7f3 facf 	bl	8001828 <__aeabi_i2f>
 800e28a:	1c03      	adds	r3, r0, #0
 800e28c:	493a      	ldr	r1, [pc, #232]	@ (800e378 <sen5x_printvalues+0x19c>)
 800e28e:	1c18      	adds	r0, r3, #0
 800e290:	f7f2 fd08 	bl	8000ca4 <__aeabi_fdiv>
 800e294:	1c03      	adds	r3, r0, #0
 800e296:	1c18      	adds	r0, r3, #0
 800e298:	f7f5 fafc 	bl	8003894 <__aeabi_f2d>
 800e29c:	0002      	movs	r2, r0
 800e29e:	000b      	movs	r3, r1
 800e2a0:	4939      	ldr	r1, [pc, #228]	@ (800e388 <sen5x_printvalues+0x1ac>)
 800e2a2:	0008      	movs	r0, r1
 800e2a4:	f017 f96c 	bl	8025580 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800e2a8:	4b31      	ldr	r3, [pc, #196]	@ (800e370 <sen5x_printvalues+0x194>)
 800e2aa:	2208      	movs	r2, #8
 800e2ac:	5e9b      	ldrsh	r3, [r3, r2]
 800e2ae:	4a37      	ldr	r2, [pc, #220]	@ (800e38c <sen5x_printvalues+0x1b0>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d014      	beq.n	800e2de <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800e2b4:	4b2e      	ldr	r3, [pc, #184]	@ (800e370 <sen5x_printvalues+0x194>)
 800e2b6:	2208      	movs	r2, #8
 800e2b8:	5e9b      	ldrsh	r3, [r3, r2]
 800e2ba:	0018      	movs	r0, r3
 800e2bc:	f7f3 fab4 	bl	8001828 <__aeabi_i2f>
 800e2c0:	1c03      	adds	r3, r0, #0
 800e2c2:	4933      	ldr	r1, [pc, #204]	@ (800e390 <sen5x_printvalues+0x1b4>)
 800e2c4:	1c18      	adds	r0, r3, #0
 800e2c6:	f7f2 fced 	bl	8000ca4 <__aeabi_fdiv>
 800e2ca:	1c03      	adds	r3, r0, #0
 800e2cc:	1c18      	adds	r0, r3, #0
 800e2ce:	f7f5 fae1 	bl	8003894 <__aeabi_f2d>
 800e2d2:	0002      	movs	r2, r0
 800e2d4:	000b      	movs	r3, r1
 800e2d6:	492f      	ldr	r1, [pc, #188]	@ (800e394 <sen5x_printvalues+0x1b8>)
 800e2d8:	0008      	movs	r0, r1
 800e2da:	f017 f951 	bl	8025580 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800e2de:	4b24      	ldr	r3, [pc, #144]	@ (800e370 <sen5x_printvalues+0x194>)
 800e2e0:	220a      	movs	r2, #10
 800e2e2:	5e9b      	ldrsh	r3, [r3, r2]
 800e2e4:	4a29      	ldr	r2, [pc, #164]	@ (800e38c <sen5x_printvalues+0x1b0>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d014      	beq.n	800e314 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800e2ea:	4b21      	ldr	r3, [pc, #132]	@ (800e370 <sen5x_printvalues+0x194>)
 800e2ec:	220a      	movs	r2, #10
 800e2ee:	5e9b      	ldrsh	r3, [r3, r2]
 800e2f0:	0018      	movs	r0, r3
 800e2f2:	f7f3 fa99 	bl	8001828 <__aeabi_i2f>
 800e2f6:	1c03      	adds	r3, r0, #0
 800e2f8:	4927      	ldr	r1, [pc, #156]	@ (800e398 <sen5x_printvalues+0x1bc>)
 800e2fa:	1c18      	adds	r0, r3, #0
 800e2fc:	f7f2 fcd2 	bl	8000ca4 <__aeabi_fdiv>
 800e300:	1c03      	adds	r3, r0, #0
 800e302:	1c18      	adds	r0, r3, #0
 800e304:	f7f5 fac6 	bl	8003894 <__aeabi_f2d>
 800e308:	0002      	movs	r2, r0
 800e30a:	000b      	movs	r3, r1
 800e30c:	4923      	ldr	r1, [pc, #140]	@ (800e39c <sen5x_printvalues+0x1c0>)
 800e30e:	0008      	movs	r0, r1
 800e310:	f017 f936 	bl	8025580 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800e314:	4b16      	ldr	r3, [pc, #88]	@ (800e370 <sen5x_printvalues+0x194>)
 800e316:	220c      	movs	r2, #12
 800e318:	5e9b      	ldrsh	r3, [r3, r2]
 800e31a:	4a1c      	ldr	r2, [pc, #112]	@ (800e38c <sen5x_printvalues+0x1b0>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d00e      	beq.n	800e33e <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800e320:	4b13      	ldr	r3, [pc, #76]	@ (800e370 <sen5x_printvalues+0x194>)
 800e322:	220c      	movs	r2, #12
 800e324:	5e9b      	ldrsh	r3, [r3, r2]
 800e326:	210a      	movs	r1, #10
 800e328:	0018      	movs	r0, r3
 800e32a:	f7f1 ffc5 	bl	80002b8 <__divsi3>
 800e32e:	0003      	movs	r3, r0
 800e330:	b21b      	sxth	r3, r3
 800e332:	001a      	movs	r2, r3
 800e334:	4b1a      	ldr	r3, [pc, #104]	@ (800e3a0 <sen5x_printvalues+0x1c4>)
 800e336:	0011      	movs	r1, r2
 800e338:	0018      	movs	r0, r3
 800e33a:	f017 f921 	bl	8025580 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800e33e:	4b0c      	ldr	r3, [pc, #48]	@ (800e370 <sen5x_printvalues+0x194>)
 800e340:	220e      	movs	r2, #14
 800e342:	5e9b      	ldrsh	r3, [r3, r2]
 800e344:	4a11      	ldr	r2, [pc, #68]	@ (800e38c <sen5x_printvalues+0x1b0>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d00e      	beq.n	800e368 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800e34a:	4b09      	ldr	r3, [pc, #36]	@ (800e370 <sen5x_printvalues+0x194>)
 800e34c:	220e      	movs	r2, #14
 800e34e:	5e9b      	ldrsh	r3, [r3, r2]
 800e350:	210a      	movs	r1, #10
 800e352:	0018      	movs	r0, r3
 800e354:	f7f1 ffb0 	bl	80002b8 <__divsi3>
 800e358:	0003      	movs	r3, r0
 800e35a:	b21b      	sxth	r3, r3
 800e35c:	001a      	movs	r2, r3
 800e35e:	4b11      	ldr	r3, [pc, #68]	@ (800e3a4 <sen5x_printvalues+0x1c8>)
 800e360:	0011      	movs	r1, r2
 800e362:	0018      	movs	r0, r3
 800e364:	f017 f90c 	bl	8025580 <iprintf>
  }
}
 800e368:	46c0      	nop			@ (mov r8, r8)
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	46c0      	nop			@ (mov r8, r8)
 800e370:	20000ee4 	.word	0x20000ee4
 800e374:	0000ffff 	.word	0x0000ffff
 800e378:	41200000 	.word	0x41200000
 800e37c:	0802cf38 	.word	0x0802cf38
 800e380:	0802cf64 	.word	0x0802cf64
 800e384:	0802cf90 	.word	0x0802cf90
 800e388:	0802cfbc 	.word	0x0802cfbc
 800e38c:	00007fff 	.word	0x00007fff
 800e390:	42c80000 	.word	0x42c80000
 800e394:	0802cfe8 	.word	0x0802cfe8
 800e398:	43480000 	.word	0x43480000
 800e39c:	0802d00c 	.word	0x0802d00c
 800e3a0:	0802d034 	.word	0x0802d034
 800e3a4:	0802d04c 	.word	0x0802d04c

0800e3a8 <sen5xStore>:

void sen5xStore() {
 800e3a8:	b5b0      	push	{r4, r5, r7, lr}
 800e3aa:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800e3ac:	4b41      	ldr	r3, [pc, #260]	@ (800e4b4 <sen5xStore+0x10c>)
 800e3ae:	881b      	ldrh	r3, [r3, #0]
 800e3b0:	4a41      	ldr	r2, [pc, #260]	@ (800e4b8 <sen5xStore+0x110>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d004      	beq.n	800e3c0 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800e3b6:	4b3f      	ldr	r3, [pc, #252]	@ (800e4b4 <sen5xStore+0x10c>)
 800e3b8:	881b      	ldrh	r3, [r3, #0]
 800e3ba:	0018      	movs	r0, r3
 800e3bc:	f7f6 fbd8 	bl	8004b70 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800e3c0:	4b3c      	ldr	r3, [pc, #240]	@ (800e4b4 <sen5xStore+0x10c>)
 800e3c2:	885b      	ldrh	r3, [r3, #2]
 800e3c4:	4a3c      	ldr	r2, [pc, #240]	@ (800e4b8 <sen5xStore+0x110>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d004      	beq.n	800e3d4 <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800e3ca:	4b3a      	ldr	r3, [pc, #232]	@ (800e4b4 <sen5xStore+0x10c>)
 800e3cc:	885b      	ldrh	r3, [r3, #2]
 800e3ce:	0018      	movs	r0, r3
 800e3d0:	f7f6 fbfa 	bl	8004bc8 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800e3d4:	4b37      	ldr	r3, [pc, #220]	@ (800e4b4 <sen5xStore+0x10c>)
 800e3d6:	889b      	ldrh	r3, [r3, #4]
 800e3d8:	4a37      	ldr	r2, [pc, #220]	@ (800e4b8 <sen5xStore+0x110>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d004      	beq.n	800e3e8 <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800e3de:	4b35      	ldr	r3, [pc, #212]	@ (800e4b4 <sen5xStore+0x10c>)
 800e3e0:	889b      	ldrh	r3, [r3, #4]
 800e3e2:	0018      	movs	r0, r3
 800e3e4:	f7f6 fc1c 	bl	8004c20 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800e3e8:	4b32      	ldr	r3, [pc, #200]	@ (800e4b4 <sen5xStore+0x10c>)
 800e3ea:	88db      	ldrh	r3, [r3, #6]
 800e3ec:	4a32      	ldr	r2, [pc, #200]	@ (800e4b8 <sen5xStore+0x110>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d004      	beq.n	800e3fc <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800e3f2:	4b30      	ldr	r3, [pc, #192]	@ (800e4b4 <sen5xStore+0x10c>)
 800e3f4:	88db      	ldrh	r3, [r3, #6]
 800e3f6:	0018      	movs	r0, r3
 800e3f8:	f7f6 fc3e 	bl	8004c78 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800e3fc:	4b2f      	ldr	r3, [pc, #188]	@ (800e4bc <sen5xStore+0x114>)
 800e3fe:	791b      	ldrb	r3, [r3, #4]
 800e400:	2b34      	cmp	r3, #52	@ 0x34
 800e402:	d003      	beq.n	800e40c <sen5xStore+0x64>
 800e404:	4b2d      	ldr	r3, [pc, #180]	@ (800e4bc <sen5xStore+0x114>)
 800e406:	791b      	ldrb	r3, [r3, #4]
 800e408:	2b35      	cmp	r3, #53	@ 0x35
 800e40a:	d14f      	bne.n	800e4ac <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800e40c:	4b29      	ldr	r3, [pc, #164]	@ (800e4b4 <sen5xStore+0x10c>)
 800e40e:	220a      	movs	r2, #10
 800e410:	5e9b      	ldrsh	r3, [r3, r2]
 800e412:	0018      	movs	r0, r3
 800e414:	f7f3 fa08 	bl	8001828 <__aeabi_i2f>
 800e418:	1c04      	adds	r4, r0, #0
 800e41a:	4b26      	ldr	r3, [pc, #152]	@ (800e4b4 <sen5xStore+0x10c>)
 800e41c:	2208      	movs	r2, #8
 800e41e:	5e9b      	ldrsh	r3, [r3, r2]
 800e420:	0018      	movs	r0, r3
 800e422:	f7f3 fa01 	bl	8001828 <__aeabi_i2f>
 800e426:	1c03      	adds	r3, r0, #0
 800e428:	1c19      	adds	r1, r3, #0
 800e42a:	1c20      	adds	r0, r4, #0
 800e42c:	f7f6 fc6e 	bl	8004d0c <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800e430:	4b23      	ldr	r3, [pc, #140]	@ (800e4c0 <sen5xStore+0x118>)
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	2201      	movs	r2, #1
 800e436:	4053      	eors	r3, r2
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d103      	bne.n	800e446 <sen5xStore+0x9e>
 800e43e:	4b21      	ldr	r3, [pc, #132]	@ (800e4c4 <sen5xStore+0x11c>)
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d032      	beq.n	800e4ac <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800e446:	4b1b      	ldr	r3, [pc, #108]	@ (800e4b4 <sen5xStore+0x10c>)
 800e448:	220c      	movs	r2, #12
 800e44a:	5e9b      	ldrsh	r3, [r3, r2]
 800e44c:	4a1e      	ldr	r2, [pc, #120]	@ (800e4c8 <sen5xStore+0x120>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d019      	beq.n	800e486 <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800e452:	4b18      	ldr	r3, [pc, #96]	@ (800e4b4 <sen5xStore+0x10c>)
 800e454:	220c      	movs	r2, #12
 800e456:	5e9b      	ldrsh	r3, [r3, r2]
 800e458:	210a      	movs	r1, #10
 800e45a:	0018      	movs	r0, r3
 800e45c:	f7f1 ff2c 	bl	80002b8 <__divsi3>
 800e460:	0003      	movs	r3, r0
 800e462:	b21b      	sxth	r3, r3
 800e464:	b29b      	uxth	r3, r3
 800e466:	0018      	movs	r0, r3
 800e468:	f003 fee2 	bl	8012230 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800e46c:	4b11      	ldr	r3, [pc, #68]	@ (800e4b4 <sen5xStore+0x10c>)
 800e46e:	220c      	movs	r2, #12
 800e470:	5e9b      	ldrsh	r3, [r3, r2]
 800e472:	210a      	movs	r1, #10
 800e474:	0018      	movs	r0, r3
 800e476:	f7f1 ff1f 	bl	80002b8 <__divsi3>
 800e47a:	0003      	movs	r3, r0
 800e47c:	b21b      	sxth	r3, r3
 800e47e:	b29b      	uxth	r3, r3
 800e480:	0018      	movs	r0, r3
 800e482:	f7f6 faed 	bl	8004a60 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800e486:	4b0b      	ldr	r3, [pc, #44]	@ (800e4b4 <sen5xStore+0x10c>)
 800e488:	220e      	movs	r2, #14
 800e48a:	5e9b      	ldrsh	r3, [r3, r2]
 800e48c:	4a0e      	ldr	r2, [pc, #56]	@ (800e4c8 <sen5xStore+0x120>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d00c      	beq.n	800e4ac <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800e492:	4b08      	ldr	r3, [pc, #32]	@ (800e4b4 <sen5xStore+0x10c>)
 800e494:	220e      	movs	r2, #14
 800e496:	5e9b      	ldrsh	r3, [r3, r2]
 800e498:	210a      	movs	r1, #10
 800e49a:	0018      	movs	r0, r3
 800e49c:	f7f1 ff0c 	bl	80002b8 <__divsi3>
 800e4a0:	0003      	movs	r3, r0
 800e4a2:	b21b      	sxth	r3, r3
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	0018      	movs	r0, r3
 800e4a8:	f7f6 fc12 	bl	8004cd0 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800e4ac:	46c0      	nop			@ (mov r8, r8)
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bdb0      	pop	{r4, r5, r7, pc}
 800e4b2:	46c0      	nop			@ (mov r8, r8)
 800e4b4:	20000ee4 	.word	0x20000ee4
 800e4b8:	0000ffff 	.word	0x0000ffff
 800e4bc:	20000ed4 	.word	0x20000ed4
 800e4c0:	20000ed2 	.word	0x20000ed2
 800e4c4:	20001e61 	.word	0x20001e61
 800e4c8:	00007fff 	.word	0x00007fff

0800e4cc <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800e4cc:	b590      	push	{r4, r7, lr}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af02      	add	r7, sp, #8
 800e4d2:	6039      	str	r1, [r7, #0]
 800e4d4:	0011      	movs	r1, r2
 800e4d6:	1dfb      	adds	r3, r7, #7
 800e4d8:	1c02      	adds	r2, r0, #0
 800e4da:	701a      	strb	r2, [r3, #0]
 800e4dc:	1d3b      	adds	r3, r7, #4
 800e4de:	1c0a      	adds	r2, r1, #0
 800e4e0:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800e4e2:	1dfb      	adds	r3, r7, #7
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	18db      	adds	r3, r3, r3
 800e4ea:	b299      	uxth	r1, r3
 800e4ec:	1d3b      	adds	r3, r7, #4
 800e4ee:	881b      	ldrh	r3, [r3, #0]
 800e4f0:	683a      	ldr	r2, [r7, #0]
 800e4f2:	4805      	ldr	r0, [pc, #20]	@ (800e508 <sensirion_i2c_hal_read+0x3c>)
 800e4f4:	2464      	movs	r4, #100	@ 0x64
 800e4f6:	9400      	str	r4, [sp, #0]
 800e4f8:	f007 f8d0 	bl	801569c <HAL_I2C_Master_Receive>
 800e4fc:	0003      	movs	r3, r0
 800e4fe:	b25b      	sxtb	r3, r3
}
 800e500:	0018      	movs	r0, r3
 800e502:	46bd      	mov	sp, r7
 800e504:	b003      	add	sp, #12
 800e506:	bd90      	pop	{r4, r7, pc}
 800e508:	20000ca8 	.word	0x20000ca8

0800e50c <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800e50c:	b590      	push	{r4, r7, lr}
 800e50e:	b085      	sub	sp, #20
 800e510:	af02      	add	r7, sp, #8
 800e512:	6039      	str	r1, [r7, #0]
 800e514:	0011      	movs	r1, r2
 800e516:	1dfb      	adds	r3, r7, #7
 800e518:	1c02      	adds	r2, r0, #0
 800e51a:	701a      	strb	r2, [r3, #0]
 800e51c:	1d3b      	adds	r3, r7, #4
 800e51e:	1c0a      	adds	r2, r1, #0
 800e520:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800e522:	1dfb      	adds	r3, r7, #7
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	b29b      	uxth	r3, r3
 800e528:	18db      	adds	r3, r3, r3
 800e52a:	b299      	uxth	r1, r3
 800e52c:	1d3b      	adds	r3, r7, #4
 800e52e:	881b      	ldrh	r3, [r3, #0]
 800e530:	683a      	ldr	r2, [r7, #0]
 800e532:	4805      	ldr	r0, [pc, #20]	@ (800e548 <sensirion_i2c_hal_write+0x3c>)
 800e534:	2464      	movs	r4, #100	@ 0x64
 800e536:	9400      	str	r4, [sp, #0]
 800e538:	f006 ffa8 	bl	801548c <HAL_I2C_Master_Transmit>
 800e53c:	0003      	movs	r3, r0
 800e53e:	b25b      	sxtb	r3, r3
}
 800e540:	0018      	movs	r0, r3
 800e542:	46bd      	mov	sp, r7
 800e544:	b003      	add	sp, #12
 800e546:	bd90      	pop	{r4, r7, pc}
 800e548:	20000ca8 	.word	0x20000ca8

0800e54c <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b084      	sub	sp, #16
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	22fa      	movs	r2, #250	@ 0xfa
 800e558:	0091      	lsls	r1, r2, #2
 800e55a:	0018      	movs	r0, r3
 800e55c:	f7f1 fe22 	bl	80001a4 <__udivsi3>
 800e560:	0003      	movs	r3, r0
 800e562:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	22fa      	movs	r2, #250	@ 0xfa
 800e568:	0091      	lsls	r1, r2, #2
 800e56a:	0018      	movs	r0, r3
 800e56c:	f7f1 fea0 	bl	80002b0 <__aeabi_uidivmod>
 800e570:	1e0b      	subs	r3, r1, #0
 800e572:	d002      	beq.n	800e57a <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	3301      	adds	r3, #1
 800e578:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	0018      	movs	r0, r3
 800e57e:	f005 fc2f 	bl	8013de0 <HAL_Delay>
}
 800e582:	46c0      	nop			@ (mov r8, r8)
 800e584:	46bd      	mov	sp, r7
 800e586:	b004      	add	sp, #16
 800e588:	bd80      	pop	{r7, pc}
	...

0800e58c <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800e592:	1d3b      	adds	r3, r7, #4
 800e594:	0018      	movs	r0, r3
 800e596:	f000 fd2b 	bl	800eff0 <sen5x_read_device_status>
 800e59a:	0003      	movs	r3, r0
 800e59c:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4a2c      	ldr	r2, [pc, #176]	@ (800e654 <sen5x_check_for_errors+0xc8>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d107      	bne.n	800e5b6 <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800e5a6:	4a2c      	ldr	r2, [pc, #176]	@ (800e658 <sen5x_check_for_errors+0xcc>)
 800e5a8:	4b2c      	ldr	r3, [pc, #176]	@ (800e65c <sen5x_check_for_errors+0xd0>)
 800e5aa:	0019      	movs	r1, r3
 800e5ac:	2001      	movs	r0, #1
 800e5ae:	f004 fecd 	bl	801334c <CreateLine>
    return true;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e049      	b.n	800e64a <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d101      	bne.n	800e5c0 <sen5x_check_for_errors+0x34>
    return false;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	e044      	b.n	800e64a <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	2380      	movs	r3, #128	@ 0x80
 800e5c4:	039b      	lsls	r3, r3, #14
 800e5c6:	4013      	ands	r3, r2
 800e5c8:	d005      	beq.n	800e5d6 <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800e5ca:	4a25      	ldr	r2, [pc, #148]	@ (800e660 <sen5x_check_for_errors+0xd4>)
 800e5cc:	4b25      	ldr	r3, [pc, #148]	@ (800e664 <sen5x_check_for_errors+0xd8>)
 800e5ce:	0019      	movs	r1, r3
 800e5d0:	2003      	movs	r0, #3
 800e5d2:	f004 febb 	bl	801334c <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	2380      	movs	r3, #128	@ 0x80
 800e5da:	031b      	lsls	r3, r3, #12
 800e5dc:	4013      	ands	r3, r2
 800e5de:	d005      	beq.n	800e5ec <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800e5e0:	4a21      	ldr	r2, [pc, #132]	@ (800e668 <sen5x_check_for_errors+0xdc>)
 800e5e2:	4b20      	ldr	r3, [pc, #128]	@ (800e664 <sen5x_check_for_errors+0xd8>)
 800e5e4:	0019      	movs	r1, r3
 800e5e6:	2003      	movs	r0, #3
 800e5e8:	f004 feb0 	bl	801334c <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2280      	movs	r2, #128	@ 0x80
 800e5f0:	4013      	ands	r3, r2
 800e5f2:	d005      	beq.n	800e600 <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800e5f4:	4a1d      	ldr	r2, [pc, #116]	@ (800e66c <sen5x_check_for_errors+0xe0>)
 800e5f6:	4b1b      	ldr	r3, [pc, #108]	@ (800e664 <sen5x_check_for_errors+0xd8>)
 800e5f8:	0019      	movs	r1, r3
 800e5fa:	2003      	movs	r0, #3
 800e5fc:	f004 fea6 	bl	801334c <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2240      	movs	r2, #64	@ 0x40
 800e604:	4013      	ands	r3, r2
 800e606:	d005      	beq.n	800e614 <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800e608:	4a19      	ldr	r2, [pc, #100]	@ (800e670 <sen5x_check_for_errors+0xe4>)
 800e60a:	4b16      	ldr	r3, [pc, #88]	@ (800e664 <sen5x_check_for_errors+0xd8>)
 800e60c:	0019      	movs	r1, r3
 800e60e:	2003      	movs	r0, #3
 800e610:	f004 fe9c 	bl	801334c <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2220      	movs	r2, #32
 800e618:	4013      	ands	r3, r2
 800e61a:	d005      	beq.n	800e628 <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800e61c:	4a15      	ldr	r2, [pc, #84]	@ (800e674 <sen5x_check_for_errors+0xe8>)
 800e61e:	4b11      	ldr	r3, [pc, #68]	@ (800e664 <sen5x_check_for_errors+0xd8>)
 800e620:	0019      	movs	r1, r3
 800e622:	2003      	movs	r0, #3
 800e624:	f004 fe92 	bl	801334c <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2210      	movs	r2, #16
 800e62c:	4013      	ands	r3, r2
 800e62e:	d005      	beq.n	800e63c <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800e630:	4a11      	ldr	r2, [pc, #68]	@ (800e678 <sen5x_check_for_errors+0xec>)
 800e632:	4b0c      	ldr	r3, [pc, #48]	@ (800e664 <sen5x_check_for_errors+0xd8>)
 800e634:	0019      	movs	r1, r3
 800e636:	2003      	movs	r0, #3
 800e638:	f004 fe88 	bl	801334c <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4a0f      	ldr	r2, [pc, #60]	@ (800e67c <sen5x_check_for_errors+0xf0>)
 800e640:	4908      	ldr	r1, [pc, #32]	@ (800e664 <sen5x_check_for_errors+0xd8>)
 800e642:	2003      	movs	r0, #3
 800e644:	f004 fe82 	bl	801334c <CreateLine>
  return true;
 800e648:	2301      	movs	r3, #1
}
 800e64a:	0018      	movs	r0, r3
 800e64c:	46bd      	mov	sp, r7
 800e64e:	b002      	add	sp, #8
 800e650:	bd80      	pop	{r7, pc}
 800e652:	46c0      	nop			@ (mov r8, r8)
 800e654:	0000d206 	.word	0x0000d206
 800e658:	0802d064 	.word	0x0802d064
 800e65c:	0802cbe8 	.word	0x0802cbe8
 800e660:	0802d0a4 	.word	0x0802d0a4
 800e664:	0802cbbc 	.word	0x0802cbbc
 800e668:	0802d0c4 	.word	0x0802d0c4
 800e66c:	0802d0e0 	.word	0x0802d0e0
 800e670:	0802d104 	.word	0x0802d104
 800e674:	0802d124 	.word	0x0802d124
 800e678:	0802d138 	.word	0x0802d138
 800e67c:	0802d174 	.word	0x0802d174

0800e680 <set_light_on_state>:

void set_light_on_state(void) {
 800e680:	b580      	push	{r7, lr}
 800e682:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800e684:	4b15      	ldr	r3, [pc, #84]	@ (800e6dc <set_light_on_state+0x5c>)
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	2201      	movs	r2, #1
 800e68a:	4053      	eors	r3, r2
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d008      	beq.n	800e6a4 <set_light_on_state+0x24>
    sen5x_Power_On();
 800e692:	f7ff fb11 	bl	800dcb8 <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800e696:	4a12      	ldr	r2, [pc, #72]	@ (800e6e0 <set_light_on_state+0x60>)
 800e698:	4b12      	ldr	r3, [pc, #72]	@ (800e6e4 <set_light_on_state+0x64>)
 800e69a:	0019      	movs	r1, r3
 800e69c:	2003      	movs	r0, #3
 800e69e:	f004 fe55 	bl	801334c <CreateLine>
 800e6a2:	e00a      	b.n	800e6ba <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800e6a4:	f005 fb92 	bl	8013dcc <HAL_GetTick>
 800e6a8:	0002      	movs	r2, r0
 800e6aa:	4b0f      	ldr	r3, [pc, #60]	@ (800e6e8 <set_light_on_state+0x68>)
 800e6ac:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800e6ae:	4a0f      	ldr	r2, [pc, #60]	@ (800e6ec <set_light_on_state+0x6c>)
 800e6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800e6e4 <set_light_on_state+0x64>)
 800e6b2:	0019      	movs	r1, r3
 800e6b4:	2003      	movs	r0, #3
 800e6b6:	f004 fe49 	bl	801334c <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800e6ba:	f7ff fc8d 	bl	800dfd8 <sen5x_lightup_measurement>
 800e6be:	1e03      	subs	r3, r0, #0
 800e6c0:	d005      	beq.n	800e6ce <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800e6c2:	4a0b      	ldr	r2, [pc, #44]	@ (800e6f0 <set_light_on_state+0x70>)
 800e6c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e6f4 <set_light_on_state+0x74>)
 800e6c6:	0019      	movs	r1, r3
 800e6c8:	2001      	movs	r0, #1
 800e6ca:	f004 fe3f 	bl	801334c <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800e6ce:	4b0a      	ldr	r3, [pc, #40]	@ (800e6f8 <set_light_on_state+0x78>)
 800e6d0:	2203      	movs	r2, #3
 800e6d2:	701a      	strb	r2, [r3, #0]
}
 800e6d4:	46c0      	nop			@ (mov r8, r8)
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	46c0      	nop			@ (mov r8, r8)
 800e6dc:	20000ed1 	.word	0x20000ed1
 800e6e0:	0802d1a4 	.word	0x0802d1a4
 800e6e4:	0802cbbc 	.word	0x0802cbbc
 800e6e8:	20000ee0 	.word	0x20000ee0
 800e6ec:	0802d1c4 	.word	0x0802d1c4
 800e6f0:	0802d1dc 	.word	0x0802d1dc
 800e6f4:	0802cbe8 	.word	0x0802cbe8
 800e6f8:	2000009e 	.word	0x2000009e

0800e6fc <sen5x_statemachine>:

void sen5x_statemachine() {
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b082      	sub	sp, #8
 800e700:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800e702:	1dfb      	adds	r3, r7, #7
 800e704:	2200      	movs	r2, #0
 800e706:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800e708:	4b92      	ldr	r3, [pc, #584]	@ (800e954 <sen5x_statemachine+0x258>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	0018      	movs	r0, r3
 800e70e:	f004 fdc7 	bl	80132a0 <TimestampIsReached>
 800e712:	1e03      	subs	r3, r0, #0
 800e714:	d100      	bne.n	800e718 <sen5x_statemachine+0x1c>
 800e716:	e118      	b.n	800e94a <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800e718:	4b8f      	ldr	r3, [pc, #572]	@ (800e958 <sen5x_statemachine+0x25c>)
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	2b05      	cmp	r3, #5
 800e71e:	d900      	bls.n	800e722 <sen5x_statemachine+0x26>
 800e720:	e113      	b.n	800e94a <sen5x_statemachine+0x24e>
 800e722:	009a      	lsls	r2, r3, #2
 800e724:	4b8d      	ldr	r3, [pc, #564]	@ (800e95c <sen5x_statemachine+0x260>)
 800e726:	18d3      	adds	r3, r2, r3
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800e72c:	4a8c      	ldr	r2, [pc, #560]	@ (800e960 <sen5x_statemachine+0x264>)
 800e72e:	4b8d      	ldr	r3, [pc, #564]	@ (800e964 <sen5x_statemachine+0x268>)
 800e730:	0019      	movs	r1, r3
 800e732:	2001      	movs	r0, #1
 800e734:	f004 fe0a 	bl	801334c <CreateLine>
      SetPMSensorStatus(false);
 800e738:	2000      	movs	r0, #0
 800e73a:	f7fe fa57 	bl	800cbec <SetPMSensorStatus>
      DisablePMSensor();
 800e73e:	f7fe f9d9 	bl	800caf4 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800e742:	f005 fb43 	bl	8013dcc <HAL_GetTick>
 800e746:	0003      	movs	r3, r0
 800e748:	4a87      	ldr	r2, [pc, #540]	@ (800e968 <sen5x_statemachine+0x26c>)
 800e74a:	189a      	adds	r2, r3, r2
 800e74c:	4b81      	ldr	r3, [pc, #516]	@ (800e954 <sen5x_statemachine+0x258>)
 800e74e:	601a      	str	r2, [r3, #0]
      break;
 800e750:	e0fb      	b.n	800e94a <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e752:	f005 fb3b 	bl	8013dcc <HAL_GetTick>
 800e756:	0003      	movs	r3, r0
 800e758:	4a84      	ldr	r2, [pc, #528]	@ (800e96c <sen5x_statemachine+0x270>)
 800e75a:	189a      	adds	r2, r3, r2
 800e75c:	4b7d      	ldr	r3, [pc, #500]	@ (800e954 <sen5x_statemachine+0x258>)
 800e75e:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800e760:	f7ff ff8e 	bl	800e680 <set_light_on_state>
      break;
 800e764:	e0f1      	b.n	800e94a <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800e766:	4b7c      	ldr	r3, [pc, #496]	@ (800e958 <sen5x_statemachine+0x25c>)
 800e768:	2202      	movs	r2, #2
 800e76a:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800e76c:	4b80      	ldr	r3, [pc, #512]	@ (800e970 <sen5x_statemachine+0x274>)
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	2b05      	cmp	r3, #5
 800e772:	d905      	bls.n	800e780 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800e774:	4b78      	ldr	r3, [pc, #480]	@ (800e958 <sen5x_statemachine+0x25c>)
 800e776:	2200      	movs	r2, #0
 800e778:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800e77a:	f7ff facd 	bl	800dd18 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800e77e:	e0e1      	b.n	800e944 <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800e780:	f7ff ff04 	bl	800e58c <sen5x_check_for_errors>
 800e784:	1e03      	subs	r3, r0, #0
 800e786:	d028      	beq.n	800e7da <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800e788:	f000 fc84 	bl	800f094 <sen5x_device_reset>
 800e78c:	1e03      	subs	r3, r0, #0
 800e78e:	d018      	beq.n	800e7c2 <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800e790:	4a78      	ldr	r2, [pc, #480]	@ (800e974 <sen5x_statemachine+0x278>)
 800e792:	4b74      	ldr	r3, [pc, #464]	@ (800e964 <sen5x_statemachine+0x268>)
 800e794:	0019      	movs	r1, r3
 800e796:	2001      	movs	r0, #1
 800e798:	f004 fdd8 	bl	801334c <CreateLine>
            sen5xErrors++;
 800e79c:	4b74      	ldr	r3, [pc, #464]	@ (800e970 <sen5x_statemachine+0x274>)
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	b2da      	uxtb	r2, r3
 800e7a4:	4b72      	ldr	r3, [pc, #456]	@ (800e970 <sen5x_statemachine+0x274>)
 800e7a6:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800e7a8:	f7ff fab6 	bl	800dd18 <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e7ac:	f005 fb0e 	bl	8013dcc <HAL_GetTick>
 800e7b0:	0003      	movs	r3, r0
 800e7b2:	4a6e      	ldr	r2, [pc, #440]	@ (800e96c <sen5x_statemachine+0x270>)
 800e7b4:	189a      	adds	r2, r3, r2
 800e7b6:	4b67      	ldr	r3, [pc, #412]	@ (800e954 <sen5x_statemachine+0x258>)
 800e7b8:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800e7ba:	4b67      	ldr	r3, [pc, #412]	@ (800e958 <sen5x_statemachine+0x25c>)
 800e7bc:	2205      	movs	r2, #5
 800e7be:	701a      	strb	r2, [r3, #0]
 800e7c0:	e005      	b.n	800e7ce <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800e7c2:	4a6d      	ldr	r2, [pc, #436]	@ (800e978 <sen5x_statemachine+0x27c>)
 800e7c4:	4b6d      	ldr	r3, [pc, #436]	@ (800e97c <sen5x_statemachine+0x280>)
 800e7c6:	0019      	movs	r1, r3
 800e7c8:	2002      	movs	r0, #2
 800e7ca:	f004 fdbf 	bl	801334c <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800e7ce:	f005 fafd 	bl	8013dcc <HAL_GetTick>
 800e7d2:	0002      	movs	r2, r0
 800e7d4:	4b5f      	ldr	r3, [pc, #380]	@ (800e954 <sen5x_statemachine+0x258>)
 800e7d6:	601a      	str	r2, [r3, #0]
      break;
 800e7d8:	e0b4      	b.n	800e944 <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800e7da:	4b65      	ldr	r3, [pc, #404]	@ (800e970 <sen5x_statemachine+0x274>)
 800e7dc:	781b      	ldrb	r3, [r3, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d100      	bne.n	800e7e4 <sen5x_statemachine+0xe8>
 800e7e2:	e0af      	b.n	800e944 <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800e7e4:	4b62      	ldr	r3, [pc, #392]	@ (800e970 <sen5x_statemachine+0x274>)
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800e7ea:	4a65      	ldr	r2, [pc, #404]	@ (800e980 <sen5x_statemachine+0x284>)
 800e7ec:	4b65      	ldr	r3, [pc, #404]	@ (800e984 <sen5x_statemachine+0x288>)
 800e7ee:	0019      	movs	r1, r3
 800e7f0:	2003      	movs	r0, #3
 800e7f2:	f004 fdab 	bl	801334c <CreateLine>
      break;
 800e7f6:	e0a5      	b.n	800e944 <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800e7f8:	1dfb      	adds	r3, r7, #7
 800e7fa:	0018      	movs	r0, r3
 800e7fc:	f000 f966 	bl	800eacc <sen5x_read_data_ready>
      if (data_ready) {
 800e800:	1dfb      	adds	r3, r7, #7
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d038      	beq.n	800e87a <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800e808:	f003 fc10 	bl	801202c <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800e80c:	4b5e      	ldr	r3, [pc, #376]	@ (800e988 <sen5x_statemachine+0x28c>)
 800e80e:	0018      	movs	r0, r3
 800e810:	f7ff fc88 	bl	800e124 <sen5x_read_measurement>
 800e814:	1e03      	subs	r3, r0, #0
 800e816:	d017      	beq.n	800e848 <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800e818:	4a5c      	ldr	r2, [pc, #368]	@ (800e98c <sen5x_statemachine+0x290>)
 800e81a:	4b52      	ldr	r3, [pc, #328]	@ (800e964 <sen5x_statemachine+0x268>)
 800e81c:	0019      	movs	r1, r3
 800e81e:	2001      	movs	r0, #1
 800e820:	f004 fd94 	bl	801334c <CreateLine>
          sen5xErrors++;
 800e824:	4b52      	ldr	r3, [pc, #328]	@ (800e970 <sen5x_statemachine+0x274>)
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	3301      	adds	r3, #1
 800e82a:	b2da      	uxtb	r2, r3
 800e82c:	4b50      	ldr	r3, [pc, #320]	@ (800e970 <sen5x_statemachine+0x274>)
 800e82e:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800e830:	f7ff fa72 	bl	800dd18 <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e834:	f005 faca 	bl	8013dcc <HAL_GetTick>
 800e838:	0003      	movs	r3, r0
 800e83a:	4a4c      	ldr	r2, [pc, #304]	@ (800e96c <sen5x_statemachine+0x270>)
 800e83c:	189a      	adds	r2, r3, r2
 800e83e:	4b45      	ldr	r3, [pc, #276]	@ (800e954 <sen5x_statemachine+0x258>)
 800e840:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800e842:	4b45      	ldr	r3, [pc, #276]	@ (800e958 <sen5x_statemachine+0x25c>)
 800e844:	2205      	movs	r2, #5
 800e846:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800e848:	4b51      	ldr	r3, [pc, #324]	@ (800e990 <sen5x_statemachine+0x294>)
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	3301      	adds	r3, #1
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	4b4f      	ldr	r3, [pc, #316]	@ (800e990 <sen5x_statemachine+0x294>)
 800e852:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800e854:	4b4e      	ldr	r3, [pc, #312]	@ (800e990 <sen5x_statemachine+0x294>)
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	2b1f      	cmp	r3, #31
 800e85a:	d102      	bne.n	800e862 <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800e85c:	4b4c      	ldr	r3, [pc, #304]	@ (800e990 <sen5x_statemachine+0x294>)
 800e85e:	2200      	movs	r2, #0
 800e860:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800e862:	4b4b      	ldr	r3, [pc, #300]	@ (800e990 <sen5x_statemachine+0x294>)
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	2b01      	cmp	r3, #1
 800e868:	d901      	bls.n	800e86e <sen5x_statemachine+0x172>
          sen5xStore();
 800e86a:	f7ff fd9d 	bl	800e3a8 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800e86e:	4b48      	ldr	r3, [pc, #288]	@ (800e990 <sen5x_statemachine+0x294>)
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	2b02      	cmp	r3, #2
 800e874:	d101      	bne.n	800e87a <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800e876:	f7ff fcb1 	bl	800e1dc <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800e87a:	4b46      	ldr	r3, [pc, #280]	@ (800e994 <sen5x_statemachine+0x298>)
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d103      	bne.n	800e88a <sen5x_statemachine+0x18e>
 800e882:	4b43      	ldr	r3, [pc, #268]	@ (800e990 <sen5x_statemachine+0x294>)
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	2b01      	cmp	r3, #1
 800e888:	d95e      	bls.n	800e948 <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800e88a:	4b33      	ldr	r3, [pc, #204]	@ (800e958 <sen5x_statemachine+0x25c>)
 800e88c:	2204      	movs	r2, #4
 800e88e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e890:	e05a      	b.n	800e948 <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800e892:	4b41      	ldr	r3, [pc, #260]	@ (800e998 <sen5x_statemachine+0x29c>)
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	2b01      	cmp	r3, #1
 800e898:	d11e      	bne.n	800e8d8 <sen5x_statemachine+0x1dc>
 800e89a:	4b40      	ldr	r3, [pc, #256]	@ (800e99c <sen5x_statemachine+0x2a0>)
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d11a      	bne.n	800e8d8 <sen5x_statemachine+0x1dc>
 800e8a2:	4b3f      	ldr	r3, [pc, #252]	@ (800e9a0 <sen5x_statemachine+0x2a4>)
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	4053      	eors	r3, r2
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d013      	beq.n	800e8d8 <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800e8b0:	f000 f9f2 	bl	800ec98 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800e8b4:	4a3b      	ldr	r2, [pc, #236]	@ (800e9a4 <sen5x_statemachine+0x2a8>)
 800e8b6:	4b31      	ldr	r3, [pc, #196]	@ (800e97c <sen5x_statemachine+0x280>)
 800e8b8:	0019      	movs	r1, r3
 800e8ba:	2002      	movs	r0, #2
 800e8bc:	f004 fd46 	bl	801334c <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800e8c0:	f005 fa84 	bl	8013dcc <HAL_GetTick>
 800e8c4:	0003      	movs	r3, r0
 800e8c6:	4a38      	ldr	r2, [pc, #224]	@ (800e9a8 <sen5x_statemachine+0x2ac>)
 800e8c8:	189a      	adds	r2, r3, r2
 800e8ca:	4b22      	ldr	r3, [pc, #136]	@ (800e954 <sen5x_statemachine+0x258>)
 800e8cc:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800e8ce:	4b34      	ldr	r3, [pc, #208]	@ (800e9a0 <sen5x_statemachine+0x2a4>)
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800e8d4:	f7ff fb80 	bl	800dfd8 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800e8d8:	4b1f      	ldr	r3, [pc, #124]	@ (800e958 <sen5x_statemachine+0x25c>)
 800e8da:	2205      	movs	r2, #5
 800e8dc:	701a      	strb	r2, [r3, #0]
      break;
 800e8de:	e034      	b.n	800e94a <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800e8e0:	4b2c      	ldr	r3, [pc, #176]	@ (800e994 <sen5x_statemachine+0x298>)
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	4053      	eors	r3, r2
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d01c      	beq.n	800e928 <sen5x_statemachine+0x22c>
 800e8ee:	4b2f      	ldr	r3, [pc, #188]	@ (800e9ac <sen5x_statemachine+0x2b0>)
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	4053      	eors	r3, r2
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d015      	beq.n	800e928 <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800e8fc:	f7ff fbb8 	bl	800e070 <sen5x_extinguish_measurement>
 800e900:	1e03      	subs	r3, r0, #0
 800e902:	d005      	beq.n	800e910 <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800e904:	4a2a      	ldr	r2, [pc, #168]	@ (800e9b0 <sen5x_statemachine+0x2b4>)
 800e906:	4b17      	ldr	r3, [pc, #92]	@ (800e964 <sen5x_statemachine+0x268>)
 800e908:	0019      	movs	r1, r3
 800e90a:	2001      	movs	r0, #1
 800e90c:	f004 fd1e 	bl	801334c <CreateLine>
        }
        sen5xSamples = 0;
 800e910:	4b1f      	ldr	r3, [pc, #124]	@ (800e990 <sen5x_statemachine+0x294>)
 800e912:	2200      	movs	r2, #0
 800e914:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800e916:	f7ff f9ff 	bl	800dd18 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800e91a:	2000      	movs	r0, #0
 800e91c:	f7fe f966 	bl	800cbec <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800e920:	4b0d      	ldr	r3, [pc, #52]	@ (800e958 <sen5x_statemachine+0x25c>)
 800e922:	2201      	movs	r2, #1
 800e924:	701a      	strb	r2, [r3, #0]
 800e926:	e002      	b.n	800e92e <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800e928:	4b0b      	ldr	r3, [pc, #44]	@ (800e958 <sen5x_statemachine+0x25c>)
 800e92a:	2203      	movs	r2, #3
 800e92c:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800e92e:	f003 fba3 	bl	8012078 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800e932:	f005 fa4b 	bl	8013dcc <HAL_GetTick>
 800e936:	0003      	movs	r3, r0
 800e938:	22fa      	movs	r2, #250	@ 0xfa
 800e93a:	0092      	lsls	r2, r2, #2
 800e93c:	189a      	adds	r2, r3, r2
 800e93e:	4b05      	ldr	r3, [pc, #20]	@ (800e954 <sen5x_statemachine+0x258>)
 800e940:	601a      	str	r2, [r3, #0]
    }
  }
}
 800e942:	e002      	b.n	800e94a <sen5x_statemachine+0x24e>
      break;
 800e944:	46c0      	nop			@ (mov r8, r8)
 800e946:	e000      	b.n	800e94a <sen5x_statemachine+0x24e>
      break;
 800e948:	46c0      	nop			@ (mov r8, r8)
}
 800e94a:	46c0      	nop			@ (mov r8, r8)
 800e94c:	46bd      	mov	sp, r7
 800e94e:	b002      	add	sp, #8
 800e950:	bd80      	pop	{r7, pc}
 800e952:	46c0      	nop			@ (mov r8, r8)
 800e954:	20000ee0 	.word	0x20000ee0
 800e958:	2000009e 	.word	0x2000009e
 800e95c:	0802dd30 	.word	0x0802dd30
 800e960:	0802d208 	.word	0x0802d208
 800e964:	0802cbe8 	.word	0x0802cbe8
 800e968:	002fefd8 	.word	0x002fefd8
 800e96c:	00005910 	.word	0x00005910
 800e970:	20000edd 	.word	0x20000edd
 800e974:	0802d238 	.word	0x0802d238
 800e978:	0802d250 	.word	0x0802d250
 800e97c:	0802cb7c 	.word	0x0802cb7c
 800e980:	0802d268 	.word	0x0802d268
 800e984:	0802cbbc 	.word	0x0802cbbc
 800e988:	20000ee4 	.word	0x20000ee4
 800e98c:	0802d27c 	.word	0x0802d27c
 800e990:	20000edc 	.word	0x20000edc
 800e994:	20001e61 	.word	0x20001e61
 800e998:	20000b5e 	.word	0x20000b5e
 800e99c:	20000b5d 	.word	0x20000b5d
 800e9a0:	20000ed0 	.word	0x20000ed0
 800e9a4:	0802d2ac 	.word	0x0802d2ac
 800e9a8:	00002710 	.word	0x00002710
 800e9ac:	20001e62 	.word	0x20001e62
 800e9b0:	0802d2c4 	.word	0x0802d2c4

0800e9b4 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800e9b4:	b590      	push	{r4, r7, lr}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e9ba:	1dbb      	adds	r3, r7, #6
 800e9bc:	2200      	movs	r2, #0
 800e9be:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800e9c0:	1dbc      	adds	r4, r7, #6
 800e9c2:	1dbb      	adds	r3, r7, #6
 800e9c4:	8819      	ldrh	r1, [r3, #0]
 800e9c6:	003b      	movs	r3, r7
 800e9c8:	2221      	movs	r2, #33	@ 0x21
 800e9ca:	0018      	movs	r0, r3
 800e9cc:	f001 fb57 	bl	801007e <sensirion_i2c_add_command_to_buffer>
 800e9d0:	0003      	movs	r3, r0
 800e9d2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e9d4:	1d3c      	adds	r4, r7, #4
 800e9d6:	1dbb      	adds	r3, r7, #6
 800e9d8:	881a      	ldrh	r2, [r3, #0]
 800e9da:	003b      	movs	r3, r7
 800e9dc:	0019      	movs	r1, r3
 800e9de:	2069      	movs	r0, #105	@ 0x69
 800e9e0:	f001 fbd1 	bl	8010186 <sensirion_i2c_write_data>
 800e9e4:	0003      	movs	r3, r0
 800e9e6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e9e8:	1d3b      	adds	r3, r7, #4
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	5e9b      	ldrsh	r3, [r3, r2]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d003      	beq.n	800e9fa <sen5x_start_measurement+0x46>
        return error;
 800e9f2:	1d3b      	adds	r3, r7, #4
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	5e9b      	ldrsh	r3, [r3, r2]
 800e9f8:	e004      	b.n	800ea04 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800e9fa:	4b04      	ldr	r3, [pc, #16]	@ (800ea0c <sen5x_start_measurement+0x58>)
 800e9fc:	0018      	movs	r0, r3
 800e9fe:	f7ff fda5 	bl	800e54c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ea02:	2300      	movs	r3, #0
}
 800ea04:	0018      	movs	r0, r3
 800ea06:	46bd      	mov	sp, r7
 800ea08:	b003      	add	sp, #12
 800ea0a:	bd90      	pop	{r4, r7, pc}
 800ea0c:	0000c350 	.word	0x0000c350

0800ea10 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800ea10:	b590      	push	{r4, r7, lr}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800ea16:	1dbb      	adds	r3, r7, #6
 800ea18:	2200      	movs	r2, #0
 800ea1a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800ea1c:	1dbc      	adds	r4, r7, #6
 800ea1e:	1dbb      	adds	r3, r7, #6
 800ea20:	8819      	ldrh	r1, [r3, #0]
 800ea22:	003b      	movs	r3, r7
 800ea24:	2237      	movs	r2, #55	@ 0x37
 800ea26:	0018      	movs	r0, r3
 800ea28:	f001 fb29 	bl	801007e <sensirion_i2c_add_command_to_buffer>
 800ea2c:	0003      	movs	r3, r0
 800ea2e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ea30:	1d3c      	adds	r4, r7, #4
 800ea32:	1dbb      	adds	r3, r7, #6
 800ea34:	881a      	ldrh	r2, [r3, #0]
 800ea36:	003b      	movs	r3, r7
 800ea38:	0019      	movs	r1, r3
 800ea3a:	2069      	movs	r0, #105	@ 0x69
 800ea3c:	f001 fba3 	bl	8010186 <sensirion_i2c_write_data>
 800ea40:	0003      	movs	r3, r0
 800ea42:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ea44:	1d3b      	adds	r3, r7, #4
 800ea46:	2200      	movs	r2, #0
 800ea48:	5e9b      	ldrsh	r3, [r3, r2]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d003      	beq.n	800ea56 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800ea4e:	1d3b      	adds	r3, r7, #4
 800ea50:	2200      	movs	r2, #0
 800ea52:	5e9b      	ldrsh	r3, [r3, r2]
 800ea54:	e004      	b.n	800ea60 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800ea56:	4b04      	ldr	r3, [pc, #16]	@ (800ea68 <sen5x_start_measurement_without_pm+0x58>)
 800ea58:	0018      	movs	r0, r3
 800ea5a:	f7ff fd77 	bl	800e54c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ea5e:	2300      	movs	r3, #0
}
 800ea60:	0018      	movs	r0, r3
 800ea62:	46bd      	mov	sp, r7
 800ea64:	b003      	add	sp, #12
 800ea66:	bd90      	pop	{r4, r7, pc}
 800ea68:	0000c350 	.word	0x0000c350

0800ea6c <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800ea6c:	b590      	push	{r4, r7, lr}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800ea72:	1dbb      	adds	r3, r7, #6
 800ea74:	2200      	movs	r2, #0
 800ea76:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800ea78:	1dbc      	adds	r4, r7, #6
 800ea7a:	2382      	movs	r3, #130	@ 0x82
 800ea7c:	005a      	lsls	r2, r3, #1
 800ea7e:	1dbb      	adds	r3, r7, #6
 800ea80:	8819      	ldrh	r1, [r3, #0]
 800ea82:	003b      	movs	r3, r7
 800ea84:	0018      	movs	r0, r3
 800ea86:	f001 fafa 	bl	801007e <sensirion_i2c_add_command_to_buffer>
 800ea8a:	0003      	movs	r3, r0
 800ea8c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ea8e:	1d3c      	adds	r4, r7, #4
 800ea90:	1dbb      	adds	r3, r7, #6
 800ea92:	881a      	ldrh	r2, [r3, #0]
 800ea94:	003b      	movs	r3, r7
 800ea96:	0019      	movs	r1, r3
 800ea98:	2069      	movs	r0, #105	@ 0x69
 800ea9a:	f001 fb74 	bl	8010186 <sensirion_i2c_write_data>
 800ea9e:	0003      	movs	r3, r0
 800eaa0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eaa2:	1d3b      	adds	r3, r7, #4
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	5e9b      	ldrsh	r3, [r3, r2]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d003      	beq.n	800eab4 <sen5x_stop_measurement+0x48>
        return error;
 800eaac:	1d3b      	adds	r3, r7, #4
 800eaae:	2200      	movs	r2, #0
 800eab0:	5e9b      	ldrsh	r3, [r3, r2]
 800eab2:	e004      	b.n	800eabe <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800eab4:	4b04      	ldr	r3, [pc, #16]	@ (800eac8 <sen5x_stop_measurement+0x5c>)
 800eab6:	0018      	movs	r0, r3
 800eab8:	f7ff fd48 	bl	800e54c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800eabc:	2300      	movs	r3, #0
}
 800eabe:	0018      	movs	r0, r3
 800eac0:	46bd      	mov	sp, r7
 800eac2:	b003      	add	sp, #12
 800eac4:	bd90      	pop	{r4, r7, pc}
 800eac6:	46c0      	nop			@ (mov r8, r8)
 800eac8:	00030d40 	.word	0x00030d40

0800eacc <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800eacc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eace:	b085      	sub	sp, #20
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800ead4:	250e      	movs	r5, #14
 800ead6:	197b      	adds	r3, r7, r5
 800ead8:	2200      	movs	r2, #0
 800eada:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800eadc:	197c      	adds	r4, r7, r5
 800eade:	4a22      	ldr	r2, [pc, #136]	@ (800eb68 <sen5x_read_data_ready+0x9c>)
 800eae0:	197b      	adds	r3, r7, r5
 800eae2:	8819      	ldrh	r1, [r3, #0]
 800eae4:	2308      	movs	r3, #8
 800eae6:	18fb      	adds	r3, r7, r3
 800eae8:	0018      	movs	r0, r3
 800eaea:	f001 fac8 	bl	801007e <sensirion_i2c_add_command_to_buffer>
 800eaee:	0003      	movs	r3, r0
 800eaf0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800eaf2:	260c      	movs	r6, #12
 800eaf4:	19bc      	adds	r4, r7, r6
 800eaf6:	197b      	adds	r3, r7, r5
 800eaf8:	881a      	ldrh	r2, [r3, #0]
 800eafa:	2308      	movs	r3, #8
 800eafc:	18fb      	adds	r3, r7, r3
 800eafe:	0019      	movs	r1, r3
 800eb00:	2069      	movs	r0, #105	@ 0x69
 800eb02:	f001 fb40 	bl	8010186 <sensirion_i2c_write_data>
 800eb06:	0003      	movs	r3, r0
 800eb08:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eb0a:	19bb      	adds	r3, r7, r6
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	5e9b      	ldrsh	r3, [r3, r2]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d003      	beq.n	800eb1c <sen5x_read_data_ready+0x50>
        return error;
 800eb14:	19bb      	adds	r3, r7, r6
 800eb16:	2200      	movs	r2, #0
 800eb18:	5e9b      	ldrsh	r3, [r3, r2]
 800eb1a:	e020      	b.n	800eb5e <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800eb1c:	4b13      	ldr	r3, [pc, #76]	@ (800eb6c <sen5x_read_data_ready+0xa0>)
 800eb1e:	0018      	movs	r0, r3
 800eb20:	f7ff fd14 	bl	800e54c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800eb24:	250c      	movs	r5, #12
 800eb26:	197c      	adds	r4, r7, r5
 800eb28:	2308      	movs	r3, #8
 800eb2a:	18fb      	adds	r3, r7, r3
 800eb2c:	2202      	movs	r2, #2
 800eb2e:	0019      	movs	r1, r3
 800eb30:	2069      	movs	r0, #105	@ 0x69
 800eb32:	f001 fb40 	bl	80101b6 <sensirion_i2c_read_data_inplace>
 800eb36:	0003      	movs	r3, r0
 800eb38:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eb3a:	197b      	adds	r3, r7, r5
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	5e9b      	ldrsh	r3, [r3, r2]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d003      	beq.n	800eb4c <sen5x_read_data_ready+0x80>
        return error;
 800eb44:	197b      	adds	r3, r7, r5
 800eb46:	2200      	movs	r2, #0
 800eb48:	5e9b      	ldrsh	r3, [r3, r2]
 800eb4a:	e008      	b.n	800eb5e <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800eb4c:	2308      	movs	r3, #8
 800eb4e:	18fb      	adds	r3, r7, r3
 800eb50:	785b      	ldrb	r3, [r3, #1]
 800eb52:	1e5a      	subs	r2, r3, #1
 800eb54:	4193      	sbcs	r3, r2
 800eb56:	b2da      	uxtb	r2, r3
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	0018      	movs	r0, r3
 800eb60:	46bd      	mov	sp, r7
 800eb62:	b005      	add	sp, #20
 800eb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb66:	46c0      	nop			@ (mov r8, r8)
 800eb68:	00000202 	.word	0x00000202
 800eb6c:	00004e20 	.word	0x00004e20

0800eb70 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800eb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb72:	b08d      	sub	sp, #52	@ 0x34
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	60b9      	str	r1, [r7, #8]
 800eb7a:	607a      	str	r2, [r7, #4]
 800eb7c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800eb7e:	252e      	movs	r5, #46	@ 0x2e
 800eb80:	197b      	adds	r3, r7, r5
 800eb82:	2200      	movs	r2, #0
 800eb84:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800eb86:	197c      	adds	r4, r7, r5
 800eb88:	23f1      	movs	r3, #241	@ 0xf1
 800eb8a:	009a      	lsls	r2, r3, #2
 800eb8c:	197b      	adds	r3, r7, r5
 800eb8e:	8819      	ldrh	r1, [r3, #0]
 800eb90:	2314      	movs	r3, #20
 800eb92:	18fb      	adds	r3, r7, r3
 800eb94:	0018      	movs	r0, r3
 800eb96:	f001 fa72 	bl	801007e <sensirion_i2c_add_command_to_buffer>
 800eb9a:	0003      	movs	r3, r0
 800eb9c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800eb9e:	262c      	movs	r6, #44	@ 0x2c
 800eba0:	19bc      	adds	r4, r7, r6
 800eba2:	197b      	adds	r3, r7, r5
 800eba4:	881a      	ldrh	r2, [r3, #0]
 800eba6:	2314      	movs	r3, #20
 800eba8:	18fb      	adds	r3, r7, r3
 800ebaa:	0019      	movs	r1, r3
 800ebac:	2069      	movs	r0, #105	@ 0x69
 800ebae:	f001 faea 	bl	8010186 <sensirion_i2c_write_data>
 800ebb2:	0003      	movs	r3, r0
 800ebb4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ebb6:	19bb      	adds	r3, r7, r6
 800ebb8:	2200      	movs	r2, #0
 800ebba:	5e9b      	ldrsh	r3, [r3, r2]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d003      	beq.n	800ebc8 <sen5x_read_measured_values+0x58>
        return error;
 800ebc0:	19bb      	adds	r3, r7, r6
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	5e9b      	ldrsh	r3, [r3, r2]
 800ebc6:	e060      	b.n	800ec8a <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800ebc8:	4b32      	ldr	r3, [pc, #200]	@ (800ec94 <sen5x_read_measured_values+0x124>)
 800ebca:	0018      	movs	r0, r3
 800ebcc:	f7ff fcbe 	bl	800e54c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800ebd0:	252c      	movs	r5, #44	@ 0x2c
 800ebd2:	197c      	adds	r4, r7, r5
 800ebd4:	2314      	movs	r3, #20
 800ebd6:	18fb      	adds	r3, r7, r3
 800ebd8:	2210      	movs	r2, #16
 800ebda:	0019      	movs	r1, r3
 800ebdc:	2069      	movs	r0, #105	@ 0x69
 800ebde:	f001 faea 	bl	80101b6 <sensirion_i2c_read_data_inplace>
 800ebe2:	0003      	movs	r3, r0
 800ebe4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ebe6:	197b      	adds	r3, r7, r5
 800ebe8:	2200      	movs	r2, #0
 800ebea:	5e9b      	ldrsh	r3, [r3, r2]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d003      	beq.n	800ebf8 <sen5x_read_measured_values+0x88>
        return error;
 800ebf0:	197b      	adds	r3, r7, r5
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	5e9b      	ldrsh	r3, [r3, r2]
 800ebf6:	e048      	b.n	800ec8a <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800ebf8:	2414      	movs	r4, #20
 800ebfa:	193b      	adds	r3, r7, r4
 800ebfc:	0018      	movs	r0, r3
 800ebfe:	f000 fa79 	bl	800f0f4 <sensirion_common_bytes_to_uint16_t>
 800ec02:	0003      	movs	r3, r0
 800ec04:	001a      	movs	r2, r3
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800ec0a:	193b      	adds	r3, r7, r4
 800ec0c:	3302      	adds	r3, #2
 800ec0e:	0018      	movs	r0, r3
 800ec10:	f000 fa70 	bl	800f0f4 <sensirion_common_bytes_to_uint16_t>
 800ec14:	0003      	movs	r3, r0
 800ec16:	001a      	movs	r2, r3
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800ec1c:	193b      	adds	r3, r7, r4
 800ec1e:	3304      	adds	r3, #4
 800ec20:	0018      	movs	r0, r3
 800ec22:	f000 fa67 	bl	800f0f4 <sensirion_common_bytes_to_uint16_t>
 800ec26:	0003      	movs	r3, r0
 800ec28:	001a      	movs	r2, r3
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800ec2e:	193b      	adds	r3, r7, r4
 800ec30:	3306      	adds	r3, #6
 800ec32:	0018      	movs	r0, r3
 800ec34:	f000 fa5e 	bl	800f0f4 <sensirion_common_bytes_to_uint16_t>
 800ec38:	0003      	movs	r3, r0
 800ec3a:	001a      	movs	r2, r3
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800ec40:	193b      	adds	r3, r7, r4
 800ec42:	3308      	adds	r3, #8
 800ec44:	0018      	movs	r0, r3
 800ec46:	f000 fa82 	bl	800f14e <sensirion_common_bytes_to_int16_t>
 800ec4a:	0003      	movs	r3, r0
 800ec4c:	001a      	movs	r2, r3
 800ec4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec50:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800ec52:	193b      	adds	r3, r7, r4
 800ec54:	330a      	adds	r3, #10
 800ec56:	0018      	movs	r0, r3
 800ec58:	f000 fa79 	bl	800f14e <sensirion_common_bytes_to_int16_t>
 800ec5c:	0003      	movs	r3, r0
 800ec5e:	001a      	movs	r2, r3
 800ec60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec62:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800ec64:	193b      	adds	r3, r7, r4
 800ec66:	330c      	adds	r3, #12
 800ec68:	0018      	movs	r0, r3
 800ec6a:	f000 fa70 	bl	800f14e <sensirion_common_bytes_to_int16_t>
 800ec6e:	0003      	movs	r3, r0
 800ec70:	001a      	movs	r2, r3
 800ec72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec74:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800ec76:	193b      	adds	r3, r7, r4
 800ec78:	330e      	adds	r3, #14
 800ec7a:	0018      	movs	r0, r3
 800ec7c:	f000 fa67 	bl	800f14e <sensirion_common_bytes_to_int16_t>
 800ec80:	0003      	movs	r3, r0
 800ec82:	001a      	movs	r2, r3
 800ec84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec86:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800ec88:	2300      	movs	r3, #0
}
 800ec8a:	0018      	movs	r0, r3
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	b00d      	add	sp, #52	@ 0x34
 800ec90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec92:	46c0      	nop			@ (mov r8, r8)
 800ec94:	00004e20 	.word	0x00004e20

0800ec98 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800ec98:	b590      	push	{r4, r7, lr}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800ec9e:	1dbb      	adds	r3, r7, #6
 800eca0:	2200      	movs	r2, #0
 800eca2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800eca4:	1dbc      	adds	r4, r7, #6
 800eca6:	4a12      	ldr	r2, [pc, #72]	@ (800ecf0 <sen5x_start_fan_cleaning+0x58>)
 800eca8:	1dbb      	adds	r3, r7, #6
 800ecaa:	8819      	ldrh	r1, [r3, #0]
 800ecac:	003b      	movs	r3, r7
 800ecae:	0018      	movs	r0, r3
 800ecb0:	f001 f9e5 	bl	801007e <sensirion_i2c_add_command_to_buffer>
 800ecb4:	0003      	movs	r3, r0
 800ecb6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ecb8:	1d3c      	adds	r4, r7, #4
 800ecba:	1dbb      	adds	r3, r7, #6
 800ecbc:	881a      	ldrh	r2, [r3, #0]
 800ecbe:	003b      	movs	r3, r7
 800ecc0:	0019      	movs	r1, r3
 800ecc2:	2069      	movs	r0, #105	@ 0x69
 800ecc4:	f001 fa5f 	bl	8010186 <sensirion_i2c_write_data>
 800ecc8:	0003      	movs	r3, r0
 800ecca:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eccc:	1d3b      	adds	r3, r7, #4
 800ecce:	2200      	movs	r2, #0
 800ecd0:	5e9b      	ldrsh	r3, [r3, r2]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d003      	beq.n	800ecde <sen5x_start_fan_cleaning+0x46>
        return error;
 800ecd6:	1d3b      	adds	r3, r7, #4
 800ecd8:	2200      	movs	r2, #0
 800ecda:	5e9b      	ldrsh	r3, [r3, r2]
 800ecdc:	e004      	b.n	800ece8 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800ecde:	4b05      	ldr	r3, [pc, #20]	@ (800ecf4 <sen5x_start_fan_cleaning+0x5c>)
 800ece0:	0018      	movs	r0, r3
 800ece2:	f7ff fc33 	bl	800e54c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ece6:	2300      	movs	r3, #0
}
 800ece8:	0018      	movs	r0, r3
 800ecea:	46bd      	mov	sp, r7
 800ecec:	b003      	add	sp, #12
 800ecee:	bd90      	pop	{r4, r7, pc}
 800ecf0:	00005607 	.word	0x00005607
 800ecf4:	00004e20 	.word	0x00004e20

0800ecf8 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800ecf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecfa:	b087      	sub	sp, #28
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	0004      	movs	r4, r0
 800ed00:	0008      	movs	r0, r1
 800ed02:	0011      	movs	r1, r2
 800ed04:	1dbb      	adds	r3, r7, #6
 800ed06:	1c22      	adds	r2, r4, #0
 800ed08:	801a      	strh	r2, [r3, #0]
 800ed0a:	1d3b      	adds	r3, r7, #4
 800ed0c:	1c02      	adds	r2, r0, #0
 800ed0e:	801a      	strh	r2, [r3, #0]
 800ed10:	1cbb      	adds	r3, r7, #2
 800ed12:	1c0a      	adds	r2, r1, #0
 800ed14:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800ed16:	2516      	movs	r5, #22
 800ed18:	197b      	adds	r3, r7, r5
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800ed1e:	197c      	adds	r4, r7, r5
 800ed20:	4a25      	ldr	r2, [pc, #148]	@ (800edb8 <sen5x_set_temperature_offset_parameters+0xc0>)
 800ed22:	197b      	adds	r3, r7, r5
 800ed24:	8819      	ldrh	r1, [r3, #0]
 800ed26:	2608      	movs	r6, #8
 800ed28:	19bb      	adds	r3, r7, r6
 800ed2a:	0018      	movs	r0, r3
 800ed2c:	f001 f9a7 	bl	801007e <sensirion_i2c_add_command_to_buffer>
 800ed30:	0003      	movs	r3, r0
 800ed32:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800ed34:	197c      	adds	r4, r7, r5
 800ed36:	1dbb      	adds	r3, r7, #6
 800ed38:	2200      	movs	r2, #0
 800ed3a:	5e9a      	ldrsh	r2, [r3, r2]
 800ed3c:	197b      	adds	r3, r7, r5
 800ed3e:	8819      	ldrh	r1, [r3, #0]
 800ed40:	19bb      	adds	r3, r7, r6
 800ed42:	0018      	movs	r0, r3
 800ed44:	f001 fa06 	bl	8010154 <sensirion_i2c_add_int16_t_to_buffer>
 800ed48:	0003      	movs	r3, r0
 800ed4a:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800ed4c:	197c      	adds	r4, r7, r5
 800ed4e:	1d3b      	adds	r3, r7, #4
 800ed50:	2200      	movs	r2, #0
 800ed52:	5e9a      	ldrsh	r2, [r3, r2]
 800ed54:	197b      	adds	r3, r7, r5
 800ed56:	8819      	ldrh	r1, [r3, #0]
 800ed58:	19bb      	adds	r3, r7, r6
 800ed5a:	0018      	movs	r0, r3
 800ed5c:	f001 f9fa 	bl	8010154 <sensirion_i2c_add_int16_t_to_buffer>
 800ed60:	0003      	movs	r3, r0
 800ed62:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800ed64:	197c      	adds	r4, r7, r5
 800ed66:	1cbb      	adds	r3, r7, #2
 800ed68:	881a      	ldrh	r2, [r3, #0]
 800ed6a:	197b      	adds	r3, r7, r5
 800ed6c:	8819      	ldrh	r1, [r3, #0]
 800ed6e:	19bb      	adds	r3, r7, r6
 800ed70:	0018      	movs	r0, r3
 800ed72:	f001 f9b0 	bl	80100d6 <sensirion_i2c_add_uint16_t_to_buffer>
 800ed76:	0003      	movs	r3, r0
 800ed78:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ed7a:	2214      	movs	r2, #20
 800ed7c:	18bc      	adds	r4, r7, r2
 800ed7e:	197b      	adds	r3, r7, r5
 800ed80:	881a      	ldrh	r2, [r3, #0]
 800ed82:	19bb      	adds	r3, r7, r6
 800ed84:	0019      	movs	r1, r3
 800ed86:	2069      	movs	r0, #105	@ 0x69
 800ed88:	f001 f9fd 	bl	8010186 <sensirion_i2c_write_data>
 800ed8c:	0003      	movs	r3, r0
 800ed8e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ed90:	2214      	movs	r2, #20
 800ed92:	18bb      	adds	r3, r7, r2
 800ed94:	2100      	movs	r1, #0
 800ed96:	5e5b      	ldrsh	r3, [r3, r1]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d003      	beq.n	800eda4 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800ed9c:	18bb      	adds	r3, r7, r2
 800ed9e:	2200      	movs	r2, #0
 800eda0:	5e9b      	ldrsh	r3, [r3, r2]
 800eda2:	e004      	b.n	800edae <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800eda4:	4b05      	ldr	r3, [pc, #20]	@ (800edbc <sen5x_set_temperature_offset_parameters+0xc4>)
 800eda6:	0018      	movs	r0, r3
 800eda8:	f7ff fbd0 	bl	800e54c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800edac:	2300      	movs	r3, #0
}
 800edae:	0018      	movs	r0, r3
 800edb0:	46bd      	mov	sp, r7
 800edb2:	b007      	add	sp, #28
 800edb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edb6:	46c0      	nop			@ (mov r8, r8)
 800edb8:	000060b2 	.word	0x000060b2
 800edbc:	00004e20 	.word	0x00004e20

0800edc0 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800edc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edc2:	b091      	sub	sp, #68	@ 0x44
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	000a      	movs	r2, r1
 800edca:	1cfb      	adds	r3, r7, #3
 800edcc:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800edce:	253e      	movs	r5, #62	@ 0x3e
 800edd0:	197b      	adds	r3, r7, r5
 800edd2:	2200      	movs	r2, #0
 800edd4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800edd6:	197c      	adds	r4, r7, r5
 800edd8:	4a22      	ldr	r2, [pc, #136]	@ (800ee64 <sen5x_get_product_name+0xa4>)
 800edda:	197b      	adds	r3, r7, r5
 800eddc:	8819      	ldrh	r1, [r3, #0]
 800edde:	230c      	movs	r3, #12
 800ede0:	18fb      	adds	r3, r7, r3
 800ede2:	0018      	movs	r0, r3
 800ede4:	f001 f94b 	bl	801007e <sensirion_i2c_add_command_to_buffer>
 800ede8:	0003      	movs	r3, r0
 800edea:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800edec:	263c      	movs	r6, #60	@ 0x3c
 800edee:	19bc      	adds	r4, r7, r6
 800edf0:	197b      	adds	r3, r7, r5
 800edf2:	881a      	ldrh	r2, [r3, #0]
 800edf4:	230c      	movs	r3, #12
 800edf6:	18fb      	adds	r3, r7, r3
 800edf8:	0019      	movs	r1, r3
 800edfa:	2069      	movs	r0, #105	@ 0x69
 800edfc:	f001 f9c3 	bl	8010186 <sensirion_i2c_write_data>
 800ee00:	0003      	movs	r3, r0
 800ee02:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ee04:	19bb      	adds	r3, r7, r6
 800ee06:	2200      	movs	r2, #0
 800ee08:	5e9b      	ldrsh	r3, [r3, r2]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d003      	beq.n	800ee16 <sen5x_get_product_name+0x56>
        return error;
 800ee0e:	19bb      	adds	r3, r7, r6
 800ee10:	2200      	movs	r2, #0
 800ee12:	5e9b      	ldrsh	r3, [r3, r2]
 800ee14:	e021      	b.n	800ee5a <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800ee16:	4b14      	ldr	r3, [pc, #80]	@ (800ee68 <sen5x_get_product_name+0xa8>)
 800ee18:	0018      	movs	r0, r3
 800ee1a:	f7ff fb97 	bl	800e54c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800ee1e:	253c      	movs	r5, #60	@ 0x3c
 800ee20:	197c      	adds	r4, r7, r5
 800ee22:	230c      	movs	r3, #12
 800ee24:	18fb      	adds	r3, r7, r3
 800ee26:	2220      	movs	r2, #32
 800ee28:	0019      	movs	r1, r3
 800ee2a:	2069      	movs	r0, #105	@ 0x69
 800ee2c:	f001 f9c3 	bl	80101b6 <sensirion_i2c_read_data_inplace>
 800ee30:	0003      	movs	r3, r0
 800ee32:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ee34:	197b      	adds	r3, r7, r5
 800ee36:	2200      	movs	r2, #0
 800ee38:	5e9b      	ldrsh	r3, [r3, r2]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d003      	beq.n	800ee46 <sen5x_get_product_name+0x86>
        return error;
 800ee3e:	197b      	adds	r3, r7, r5
 800ee40:	2200      	movs	r2, #0
 800ee42:	5e9b      	ldrsh	r3, [r3, r2]
 800ee44:	e009      	b.n	800ee5a <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800ee46:	1cfb      	adds	r3, r7, #3
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	b29a      	uxth	r2, r3
 800ee4c:	6879      	ldr	r1, [r7, #4]
 800ee4e:	230c      	movs	r3, #12
 800ee50:	18fb      	adds	r3, r7, r3
 800ee52:	0018      	movs	r0, r3
 800ee54:	f000 f989 	bl	800f16a <sensirion_common_copy_bytes>
    return NO_ERROR;
 800ee58:	2300      	movs	r3, #0
}
 800ee5a:	0018      	movs	r0, r3
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	b011      	add	sp, #68	@ 0x44
 800ee60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee62:	46c0      	nop			@ (mov r8, r8)
 800ee64:	0000d014 	.word	0x0000d014
 800ee68:	0000c350 	.word	0x0000c350

0800ee6c <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800ee6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee6e:	b091      	sub	sp, #68	@ 0x44
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	000a      	movs	r2, r1
 800ee76:	1cfb      	adds	r3, r7, #3
 800ee78:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800ee7a:	253e      	movs	r5, #62	@ 0x3e
 800ee7c:	197b      	adds	r3, r7, r5
 800ee7e:	2200      	movs	r2, #0
 800ee80:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800ee82:	197c      	adds	r4, r7, r5
 800ee84:	4a22      	ldr	r2, [pc, #136]	@ (800ef10 <sen5x_get_serial_number+0xa4>)
 800ee86:	197b      	adds	r3, r7, r5
 800ee88:	8819      	ldrh	r1, [r3, #0]
 800ee8a:	230c      	movs	r3, #12
 800ee8c:	18fb      	adds	r3, r7, r3
 800ee8e:	0018      	movs	r0, r3
 800ee90:	f001 f8f5 	bl	801007e <sensirion_i2c_add_command_to_buffer>
 800ee94:	0003      	movs	r3, r0
 800ee96:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ee98:	263c      	movs	r6, #60	@ 0x3c
 800ee9a:	19bc      	adds	r4, r7, r6
 800ee9c:	197b      	adds	r3, r7, r5
 800ee9e:	881a      	ldrh	r2, [r3, #0]
 800eea0:	230c      	movs	r3, #12
 800eea2:	18fb      	adds	r3, r7, r3
 800eea4:	0019      	movs	r1, r3
 800eea6:	2069      	movs	r0, #105	@ 0x69
 800eea8:	f001 f96d 	bl	8010186 <sensirion_i2c_write_data>
 800eeac:	0003      	movs	r3, r0
 800eeae:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eeb0:	19bb      	adds	r3, r7, r6
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	5e9b      	ldrsh	r3, [r3, r2]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d003      	beq.n	800eec2 <sen5x_get_serial_number+0x56>
        return error;
 800eeba:	19bb      	adds	r3, r7, r6
 800eebc:	2200      	movs	r2, #0
 800eebe:	5e9b      	ldrsh	r3, [r3, r2]
 800eec0:	e021      	b.n	800ef06 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800eec2:	4b14      	ldr	r3, [pc, #80]	@ (800ef14 <sen5x_get_serial_number+0xa8>)
 800eec4:	0018      	movs	r0, r3
 800eec6:	f7ff fb41 	bl	800e54c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800eeca:	253c      	movs	r5, #60	@ 0x3c
 800eecc:	197c      	adds	r4, r7, r5
 800eece:	230c      	movs	r3, #12
 800eed0:	18fb      	adds	r3, r7, r3
 800eed2:	2220      	movs	r2, #32
 800eed4:	0019      	movs	r1, r3
 800eed6:	2069      	movs	r0, #105	@ 0x69
 800eed8:	f001 f96d 	bl	80101b6 <sensirion_i2c_read_data_inplace>
 800eedc:	0003      	movs	r3, r0
 800eede:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eee0:	197b      	adds	r3, r7, r5
 800eee2:	2200      	movs	r2, #0
 800eee4:	5e9b      	ldrsh	r3, [r3, r2]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d003      	beq.n	800eef2 <sen5x_get_serial_number+0x86>
        return error;
 800eeea:	197b      	adds	r3, r7, r5
 800eeec:	2200      	movs	r2, #0
 800eeee:	5e9b      	ldrsh	r3, [r3, r2]
 800eef0:	e009      	b.n	800ef06 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800eef2:	1cfb      	adds	r3, r7, #3
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	6879      	ldr	r1, [r7, #4]
 800eefa:	230c      	movs	r3, #12
 800eefc:	18fb      	adds	r3, r7, r3
 800eefe:	0018      	movs	r0, r3
 800ef00:	f000 f933 	bl	800f16a <sensirion_common_copy_bytes>
    return NO_ERROR;
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	0018      	movs	r0, r3
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	b011      	add	sp, #68	@ 0x44
 800ef0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef0e:	46c0      	nop			@ (mov r8, r8)
 800ef10:	0000d033 	.word	0x0000d033
 800ef14:	0000c350 	.word	0x0000c350

0800ef18 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800ef18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef1a:	b089      	sub	sp, #36	@ 0x24
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	607a      	str	r2, [r7, #4]
 800ef24:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800ef26:	251e      	movs	r5, #30
 800ef28:	197b      	adds	r3, r7, r5
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800ef2e:	197c      	adds	r4, r7, r5
 800ef30:	23d1      	movs	r3, #209	@ 0xd1
 800ef32:	021a      	lsls	r2, r3, #8
 800ef34:	197b      	adds	r3, r7, r5
 800ef36:	8819      	ldrh	r1, [r3, #0]
 800ef38:	2310      	movs	r3, #16
 800ef3a:	18fb      	adds	r3, r7, r3
 800ef3c:	0018      	movs	r0, r3
 800ef3e:	f001 f89e 	bl	801007e <sensirion_i2c_add_command_to_buffer>
 800ef42:	0003      	movs	r3, r0
 800ef44:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ef46:	261c      	movs	r6, #28
 800ef48:	19bc      	adds	r4, r7, r6
 800ef4a:	197b      	adds	r3, r7, r5
 800ef4c:	881a      	ldrh	r2, [r3, #0]
 800ef4e:	2310      	movs	r3, #16
 800ef50:	18fb      	adds	r3, r7, r3
 800ef52:	0019      	movs	r1, r3
 800ef54:	2069      	movs	r0, #105	@ 0x69
 800ef56:	f001 f916 	bl	8010186 <sensirion_i2c_write_data>
 800ef5a:	0003      	movs	r3, r0
 800ef5c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ef5e:	19bb      	adds	r3, r7, r6
 800ef60:	2200      	movs	r2, #0
 800ef62:	5e9b      	ldrsh	r3, [r3, r2]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d003      	beq.n	800ef70 <sen5x_get_version+0x58>
        return error;
 800ef68:	19bb      	adds	r3, r7, r6
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	5e9b      	ldrsh	r3, [r3, r2]
 800ef6e:	e038      	b.n	800efe2 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800ef70:	4b1e      	ldr	r3, [pc, #120]	@ (800efec <sen5x_get_version+0xd4>)
 800ef72:	0018      	movs	r0, r3
 800ef74:	f7ff faea 	bl	800e54c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800ef78:	251c      	movs	r5, #28
 800ef7a:	197c      	adds	r4, r7, r5
 800ef7c:	2310      	movs	r3, #16
 800ef7e:	18fb      	adds	r3, r7, r3
 800ef80:	2208      	movs	r2, #8
 800ef82:	0019      	movs	r1, r3
 800ef84:	2069      	movs	r0, #105	@ 0x69
 800ef86:	f001 f916 	bl	80101b6 <sensirion_i2c_read_data_inplace>
 800ef8a:	0003      	movs	r3, r0
 800ef8c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ef8e:	197b      	adds	r3, r7, r5
 800ef90:	2200      	movs	r2, #0
 800ef92:	5e9b      	ldrsh	r3, [r3, r2]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d003      	beq.n	800efa0 <sen5x_get_version+0x88>
        return error;
 800ef98:	197b      	adds	r3, r7, r5
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	5e9b      	ldrsh	r3, [r3, r2]
 800ef9e:	e020      	b.n	800efe2 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800efa0:	2110      	movs	r1, #16
 800efa2:	187b      	adds	r3, r7, r1
 800efa4:	781a      	ldrb	r2, [r3, #0]
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800efaa:	187b      	adds	r3, r7, r1
 800efac:	785a      	ldrb	r2, [r3, #1]
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800efb2:	187b      	adds	r3, r7, r1
 800efb4:	789b      	ldrb	r3, [r3, #2]
 800efb6:	1e5a      	subs	r2, r3, #1
 800efb8:	4193      	sbcs	r3, r2
 800efba:	b2da      	uxtb	r2, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800efc0:	187b      	adds	r3, r7, r1
 800efc2:	78da      	ldrb	r2, [r3, #3]
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800efc8:	187b      	adds	r3, r7, r1
 800efca:	791a      	ldrb	r2, [r3, #4]
 800efcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efce:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800efd0:	187b      	adds	r3, r7, r1
 800efd2:	795a      	ldrb	r2, [r3, #5]
 800efd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efd6:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800efd8:	187b      	adds	r3, r7, r1
 800efda:	799a      	ldrb	r2, [r3, #6]
 800efdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efde:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800efe0:	2300      	movs	r3, #0
}
 800efe2:	0018      	movs	r0, r3
 800efe4:	46bd      	mov	sp, r7
 800efe6:	b009      	add	sp, #36	@ 0x24
 800efe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efea:	46c0      	nop			@ (mov r8, r8)
 800efec:	00004e20 	.word	0x00004e20

0800eff0 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800eff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eff2:	b087      	sub	sp, #28
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800eff8:	2516      	movs	r5, #22
 800effa:	197b      	adds	r3, r7, r5
 800effc:	2200      	movs	r2, #0
 800effe:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800f000:	197c      	adds	r4, r7, r5
 800f002:	4a21      	ldr	r2, [pc, #132]	@ (800f088 <sen5x_read_device_status+0x98>)
 800f004:	197b      	adds	r3, r7, r5
 800f006:	8819      	ldrh	r1, [r3, #0]
 800f008:	260c      	movs	r6, #12
 800f00a:	19bb      	adds	r3, r7, r6
 800f00c:	0018      	movs	r0, r3
 800f00e:	f001 f836 	bl	801007e <sensirion_i2c_add_command_to_buffer>
 800f012:	0003      	movs	r3, r0
 800f014:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f016:	2314      	movs	r3, #20
 800f018:	18fc      	adds	r4, r7, r3
 800f01a:	197b      	adds	r3, r7, r5
 800f01c:	881a      	ldrh	r2, [r3, #0]
 800f01e:	19bb      	adds	r3, r7, r6
 800f020:	0019      	movs	r1, r3
 800f022:	2069      	movs	r0, #105	@ 0x69
 800f024:	f001 f8af 	bl	8010186 <sensirion_i2c_write_data>
 800f028:	0003      	movs	r3, r0
 800f02a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f02c:	2314      	movs	r3, #20
 800f02e:	18fb      	adds	r3, r7, r3
 800f030:	2200      	movs	r2, #0
 800f032:	5e9b      	ldrsh	r3, [r3, r2]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d001      	beq.n	800f03c <sen5x_read_device_status+0x4c>
        return 0xD206;
 800f038:	4b14      	ldr	r3, [pc, #80]	@ (800f08c <sen5x_read_device_status+0x9c>)
 800f03a:	e020      	b.n	800f07e <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f03c:	4b14      	ldr	r3, [pc, #80]	@ (800f090 <sen5x_read_device_status+0xa0>)
 800f03e:	0018      	movs	r0, r3
 800f040:	f7ff fa84 	bl	800e54c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800f044:	2514      	movs	r5, #20
 800f046:	197c      	adds	r4, r7, r5
 800f048:	230c      	movs	r3, #12
 800f04a:	18fb      	adds	r3, r7, r3
 800f04c:	2204      	movs	r2, #4
 800f04e:	0019      	movs	r1, r3
 800f050:	2069      	movs	r0, #105	@ 0x69
 800f052:	f001 f8b0 	bl	80101b6 <sensirion_i2c_read_data_inplace>
 800f056:	0003      	movs	r3, r0
 800f058:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f05a:	197b      	adds	r3, r7, r5
 800f05c:	2200      	movs	r2, #0
 800f05e:	5e9b      	ldrsh	r3, [r3, r2]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d003      	beq.n	800f06c <sen5x_read_device_status+0x7c>
        return error;
 800f064:	197b      	adds	r3, r7, r5
 800f066:	2200      	movs	r2, #0
 800f068:	5e9b      	ldrsh	r3, [r3, r2]
 800f06a:	e008      	b.n	800f07e <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800f06c:	230c      	movs	r3, #12
 800f06e:	18fb      	adds	r3, r7, r3
 800f070:	0018      	movs	r0, r3
 800f072:	f000 f853 	bl	800f11c <sensirion_common_bytes_to_uint32_t>
 800f076:	0002      	movs	r2, r0
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	0018      	movs	r0, r3
 800f080:	46bd      	mov	sp, r7
 800f082:	b007      	add	sp, #28
 800f084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f086:	46c0      	nop			@ (mov r8, r8)
 800f088:	0000d206 	.word	0x0000d206
 800f08c:	ffffd206 	.word	0xffffd206
 800f090:	00004e20 	.word	0x00004e20

0800f094 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800f094:	b590      	push	{r4, r7, lr}
 800f096:	b083      	sub	sp, #12
 800f098:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f09a:	1dbb      	adds	r3, r7, #6
 800f09c:	2200      	movs	r2, #0
 800f09e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800f0a0:	1dbc      	adds	r4, r7, #6
 800f0a2:	4a12      	ldr	r2, [pc, #72]	@ (800f0ec <sen5x_device_reset+0x58>)
 800f0a4:	1dbb      	adds	r3, r7, #6
 800f0a6:	8819      	ldrh	r1, [r3, #0]
 800f0a8:	003b      	movs	r3, r7
 800f0aa:	0018      	movs	r0, r3
 800f0ac:	f000 ffe7 	bl	801007e <sensirion_i2c_add_command_to_buffer>
 800f0b0:	0003      	movs	r3, r0
 800f0b2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f0b4:	1d3c      	adds	r4, r7, #4
 800f0b6:	1dbb      	adds	r3, r7, #6
 800f0b8:	881a      	ldrh	r2, [r3, #0]
 800f0ba:	003b      	movs	r3, r7
 800f0bc:	0019      	movs	r1, r3
 800f0be:	2069      	movs	r0, #105	@ 0x69
 800f0c0:	f001 f861 	bl	8010186 <sensirion_i2c_write_data>
 800f0c4:	0003      	movs	r3, r0
 800f0c6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f0c8:	1d3b      	adds	r3, r7, #4
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	5e9b      	ldrsh	r3, [r3, r2]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d003      	beq.n	800f0da <sen5x_device_reset+0x46>
        return error;
 800f0d2:	1d3b      	adds	r3, r7, #4
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	5e9b      	ldrsh	r3, [r3, r2]
 800f0d8:	e004      	b.n	800f0e4 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800f0da:	4b05      	ldr	r3, [pc, #20]	@ (800f0f0 <sen5x_device_reset+0x5c>)
 800f0dc:	0018      	movs	r0, r3
 800f0de:	f7ff fa35 	bl	800e54c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f0e2:	2300      	movs	r3, #0
}
 800f0e4:	0018      	movs	r0, r3
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	b003      	add	sp, #12
 800f0ea:	bd90      	pop	{r4, r7, pc}
 800f0ec:	0000d304 	.word	0x0000d304
 800f0f0:	00030d40 	.word	0x00030d40

0800f0f4 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	b21b      	sxth	r3, r3
 800f102:	021b      	lsls	r3, r3, #8
 800f104:	b21a      	sxth	r2, r3
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	3301      	adds	r3, #1
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	b21b      	sxth	r3, r3
 800f10e:	4313      	orrs	r3, r2
 800f110:	b21b      	sxth	r3, r3
 800f112:	b29b      	uxth	r3, r3
}
 800f114:	0018      	movs	r0, r3
 800f116:	46bd      	mov	sp, r7
 800f118:	b002      	add	sp, #8
 800f11a:	bd80      	pop	{r7, pc}

0800f11c <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	061a      	lsls	r2, r3, #24
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	3301      	adds	r3, #1
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	041b      	lsls	r3, r3, #16
 800f132:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	3302      	adds	r3, #2
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800f13c:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	3203      	adds	r2, #3
 800f142:	7812      	ldrb	r2, [r2, #0]
 800f144:	4313      	orrs	r3, r2
}
 800f146:	0018      	movs	r0, r3
 800f148:	46bd      	mov	sp, r7
 800f14a:	b002      	add	sp, #8
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800f14e:	b580      	push	{r7, lr}
 800f150:	b082      	sub	sp, #8
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	0018      	movs	r0, r3
 800f15a:	f7ff ffcb 	bl	800f0f4 <sensirion_common_bytes_to_uint16_t>
 800f15e:	0003      	movs	r3, r0
 800f160:	b21b      	sxth	r3, r3
}
 800f162:	0018      	movs	r0, r3
 800f164:	46bd      	mov	sp, r7
 800f166:	b002      	add	sp, #8
 800f168:	bd80      	pop	{r7, pc}

0800f16a <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800f16a:	b580      	push	{r7, lr}
 800f16c:	b086      	sub	sp, #24
 800f16e:	af00      	add	r7, sp, #0
 800f170:	60f8      	str	r0, [r7, #12]
 800f172:	60b9      	str	r1, [r7, #8]
 800f174:	1dbb      	adds	r3, r7, #6
 800f176:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800f178:	2316      	movs	r3, #22
 800f17a:	18fb      	adds	r3, r7, r3
 800f17c:	2200      	movs	r2, #0
 800f17e:	801a      	strh	r2, [r3, #0]
 800f180:	e00f      	b.n	800f1a2 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800f182:	2016      	movs	r0, #22
 800f184:	183b      	adds	r3, r7, r0
 800f186:	881b      	ldrh	r3, [r3, #0]
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	18d2      	adds	r2, r2, r3
 800f18c:	183b      	adds	r3, r7, r0
 800f18e:	881b      	ldrh	r3, [r3, #0]
 800f190:	68b9      	ldr	r1, [r7, #8]
 800f192:	18cb      	adds	r3, r1, r3
 800f194:	7812      	ldrb	r2, [r2, #0]
 800f196:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800f198:	183b      	adds	r3, r7, r0
 800f19a:	881a      	ldrh	r2, [r3, #0]
 800f19c:	183b      	adds	r3, r7, r0
 800f19e:	3201      	adds	r2, #1
 800f1a0:	801a      	strh	r2, [r3, #0]
 800f1a2:	2316      	movs	r3, #22
 800f1a4:	18fa      	adds	r2, r7, r3
 800f1a6:	1dbb      	adds	r3, r7, #6
 800f1a8:	8812      	ldrh	r2, [r2, #0]
 800f1aa:	881b      	ldrh	r3, [r3, #0]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d3e8      	bcc.n	800f182 <sensirion_common_copy_bytes+0x18>
    }
}
 800f1b0:	46c0      	nop			@ (mov r8, r8)
 800f1b2:	46c0      	nop			@ (mov r8, r8)
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	b006      	add	sp, #24
 800f1b8:	bd80      	pop	{r7, pc}
	...

0800f1bc <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	68ba      	ldr	r2, [r7, #8]
 800f1cc:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d113      	bne.n	800f202 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	22fe      	movs	r2, #254	@ 0xfe
 800f1de:	0592      	lsls	r2, r2, #22
 800f1e0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	4a1a      	ldr	r2, [pc, #104]	@ (800f250 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800f1e6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	4a1a      	ldr	r2, [pc, #104]	@ (800f254 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800f1ec:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	4a19      	ldr	r2, [pc, #100]	@ (800f258 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800f1f2:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	4a19      	ldr	r2, [pc, #100]	@ (800f25c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800f1f8:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	4a18      	ldr	r2, [pc, #96]	@ (800f260 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800f1fe:	61da      	str	r2, [r3, #28]
 800f200:	e011      	b.n	800f226 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	4a17      	ldr	r2, [pc, #92]	@ (800f264 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800f206:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	4a17      	ldr	r2, [pc, #92]	@ (800f268 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800f20c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	4a16      	ldr	r2, [pc, #88]	@ (800f26c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800f212:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	4a16      	ldr	r2, [pc, #88]	@ (800f270 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800f218:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	4a15      	ldr	r2, [pc, #84]	@ (800f274 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800f21e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	4a15      	ldr	r2, [pc, #84]	@ (800f278 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800f224:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	4a14      	ldr	r2, [pc, #80]	@ (800f27c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800f22a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	4a14      	ldr	r2, [pc, #80]	@ (800f280 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800f230:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	4a12      	ldr	r2, [pc, #72]	@ (800f280 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800f236:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	4a12      	ldr	r2, [pc, #72]	@ (800f284 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800f23c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	0018      	movs	r0, r3
 800f242:	f000 f831 	bl	800f2a8 <GasIndexAlgorithm_reset>
}
 800f246:	46c0      	nop			@ (mov r8, r8)
 800f248:	46bd      	mov	sp, r7
 800f24a:	b004      	add	sp, #16
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	46c0      	nop			@ (mov r8, r8)
 800f250:	00002710 	.word	0x00002710
 800f254:	44340000 	.word	0x44340000
 800f258:	46859800 	.word	0x46859800
 800f25c:	46a05000 	.word	0x46a05000
 800f260:	41f00000 	.word	0x41f00000
 800f264:	42c80000 	.word	0x42c80000
 800f268:	00004e20 	.word	0x00004e20
 800f26c:	43340000 	.word	0x43340000
 800f270:	4528c000 	.word	0x4528c000
 800f274:	45a32000 	.word	0x45a32000
 800f278:	43aa0000 	.word	0x43aa0000
 800f27c:	43660000 	.word	0x43660000
 800f280:	41400000 	.word	0x41400000
 800f284:	42480000 	.word	0x42480000

0800f288 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800f292:	22fe      	movs	r2, #254	@ 0xfe
 800f294:	0592      	lsls	r2, r2, #22
 800f296:	6839      	ldr	r1, [r7, #0]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	0018      	movs	r0, r3
 800f29c:	f7ff ff8e 	bl	800f1bc <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800f2a0:	46c0      	nop			@ (mov r8, r8)
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	b002      	add	sp, #8
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	0018      	movs	r0, r3
 800f2c6:	f000 f805 	bl	800f2d4 <GasIndexAlgorithm__init_instances>
}
 800f2ca:	46c0      	nop			@ (mov r8, r8)
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	b002      	add	sp, #8
 800f2d0:	bd80      	pop	{r7, pc}
	...

0800f2d4 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800f2d4:	b590      	push	{r4, r7, lr}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	0018      	movs	r0, r3
 800f2e0:	f000 f8e8 	bl	800f4b4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	0018      	movs	r0, r3
 800f2e8:	f000 f9a6 	bl	800f638 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800f2ec:	1c04      	adds	r4, r0, #0
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	0018      	movs	r0, r3
 800f2f2:	f000 f9ab 	bl	800f64c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800f2f6:	1c02      	adds	r2, r0, #0
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	1c21      	adds	r1, r4, #0
 800f2fc:	0018      	movs	r0, r3
 800f2fe:	f000 fc3b 	bl	800fb78 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	2b01      	cmp	r3, #1
 800f308:	d107      	bne.n	800f31a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800f30a:	23fe      	movs	r3, #254	@ 0xfe
 800f30c:	059b      	lsls	r3, r3, #22
 800f30e:	4a0a      	ldr	r2, [pc, #40]	@ (800f338 <GasIndexAlgorithm__init_instances+0x64>)
 800f310:	490a      	ldr	r1, [pc, #40]	@ (800f33c <GasIndexAlgorithm__init_instances+0x68>)
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 fc86 	bl	800fc24 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800f318:	e005      	b.n	800f326 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800f31a:	4b09      	ldr	r3, [pc, #36]	@ (800f340 <GasIndexAlgorithm__init_instances+0x6c>)
 800f31c:	4a09      	ldr	r2, [pc, #36]	@ (800f344 <GasIndexAlgorithm__init_instances+0x70>)
 800f31e:	490a      	ldr	r1, [pc, #40]	@ (800f348 <GasIndexAlgorithm__init_instances+0x74>)
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 fc7f 	bl	800fc24 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	0018      	movs	r0, r3
 800f32a:	f000 fd35 	bl	800fd98 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800f32e:	46c0      	nop			@ (mov r8, r8)
 800f330:	46bd      	mov	sp, r7
 800f332:	b003      	add	sp, #12
 800f334:	bd90      	pop	{r4, r7, pc}
 800f336:	46c0      	nop			@ (mov r8, r8)
 800f338:	bc257a78 	.word	0xbc257a78
 800f33c:	44198000 	.word	0x44198000
 800f340:	42c80000 	.word	0x42c80000
 800f344:	bbd4fdf4 	.word	0xbbd4fdf4
 800f348:	43550000 	.word	0x43550000

0800f34c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800f34c:	b590      	push	{r4, r7, lr}
 800f34e:	b085      	sub	sp, #20
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f35c:	4952      	ldr	r1, [pc, #328]	@ (800f4a8 <GasIndexAlgorithm_process+0x15c>)
 800f35e:	1c18      	adds	r0, r3, #0
 800f360:	f7f1 f8f0 	bl	8000544 <__aeabi_fcmple>
 800f364:	1e03      	subs	r3, r0, #0
 800f366:	d00c      	beq.n	800f382 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	1c19      	adds	r1, r3, #0
 800f372:	1c10      	adds	r0, r2, #0
 800f374:	f7f1 faa4 	bl	80008c0 <__aeabi_fadd>
 800f378:	1c03      	adds	r3, r0, #0
 800f37a:	1c1a      	adds	r2, r3, #0
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	631a      	str	r2, [r3, #48]	@ 0x30
 800f380:	e080      	b.n	800f484 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	2b00      	cmp	r3, #0
 800f386:	dd25      	ble.n	800f3d4 <GasIndexAlgorithm_process+0x88>
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	4a48      	ldr	r2, [pc, #288]	@ (800f4ac <GasIndexAlgorithm_process+0x160>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	dc21      	bgt.n	800f3d4 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	68ba      	ldr	r2, [r7, #8]
 800f396:	429a      	cmp	r2, r3
 800f398:	dc04      	bgt.n	800f3a4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	3301      	adds	r3, #1
 800f3a0:	60bb      	str	r3, [r7, #8]
 800f3a2:	e00d      	b.n	800f3c0 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	4a41      	ldr	r2, [pc, #260]	@ (800f4b0 <GasIndexAlgorithm_process+0x164>)
 800f3aa:	4694      	mov	ip, r2
 800f3ac:	4463      	add	r3, ip
 800f3ae:	68ba      	ldr	r2, [r7, #8]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	dd05      	ble.n	800f3c0 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	4a3d      	ldr	r2, [pc, #244]	@ (800f4b0 <GasIndexAlgorithm_process+0x164>)
 800f3ba:	4694      	mov	ip, r2
 800f3bc:	4463      	add	r3, ip
 800f3be:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	68db      	ldr	r3, [r3, #12]
 800f3c4:	68ba      	ldr	r2, [r7, #8]
 800f3c6:	1ad3      	subs	r3, r2, r3
 800f3c8:	0018      	movs	r0, r3
 800f3ca:	f7f2 fa2d 	bl	8001828 <__aeabi_i2f>
 800f3ce:	1c02      	adds	r2, r0, #0
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d005      	beq.n	800f3e8 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	0018      	movs	r0, r3
 800f3e0:	f000 f945 	bl	800f66e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800f3e4:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800f3e6:	d014      	beq.n	800f412 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	1c11      	adds	r1, r2, #0
 800f3f0:	0018      	movs	r0, r3
 800f3f2:	f000 fbd1 	bl	800fb98 <GasIndexAlgorithm__mox_model__process>
 800f3f6:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	1c11      	adds	r1, r2, #0
 800f404:	0018      	movs	r0, r3
 800f406:	f000 fc25 	bl	800fc54 <GasIndexAlgorithm__sigmoid_scaled__process>
 800f40a:	1c02      	adds	r2, r0, #0
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	639a      	str	r2, [r3, #56]	@ 0x38
 800f410:	e003      	b.n	800f41a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	689a      	ldr	r2, [r3, #8]
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	1c11      	adds	r1, r2, #0
 800f422:	0018      	movs	r0, r3
 800f424:	f000 fcec 	bl	800fe00 <GasIndexAlgorithm__adaptive_lowpass__process>
 800f428:	1c02      	adds	r2, r0, #0
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f432:	21fc      	movs	r1, #252	@ 0xfc
 800f434:	0589      	lsls	r1, r1, #22
 800f436:	1c18      	adds	r0, r3, #0
 800f438:	f7f1 f87a 	bl	8000530 <__aeabi_fcmplt>
 800f43c:	1e03      	subs	r3, r0, #0
 800f43e:	d003      	beq.n	800f448 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	22fc      	movs	r2, #252	@ 0xfc
 800f444:	0592      	lsls	r2, r2, #22
 800f446:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f44c:	2100      	movs	r1, #0
 800f44e:	1c18      	adds	r0, r3, #0
 800f450:	f7f1 f882 	bl	8000558 <__aeabi_fcmpgt>
 800f454:	1e03      	subs	r3, r0, #0
 800f456:	d015      	beq.n	800f484 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	1c11      	adds	r1, r2, #0
 800f460:	0018      	movs	r0, r3
 800f462:	f000 fa4f 	bl	800f904 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	0018      	movs	r0, r3
 800f46a:	f000 f8e5 	bl	800f638 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800f46e:	1c04      	adds	r4, r0, #0
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	0018      	movs	r0, r3
 800f474:	f000 f8ea 	bl	800f64c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800f478:	1c02      	adds	r2, r0, #0
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	1c21      	adds	r1, r4, #0
 800f47e:	0018      	movs	r0, r3
 800f480:	f000 fb7a 	bl	800fb78 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f488:	21fc      	movs	r1, #252	@ 0xfc
 800f48a:	0589      	lsls	r1, r1, #22
 800f48c:	1c18      	adds	r0, r3, #0
 800f48e:	f7f1 fa17 	bl	80008c0 <__aeabi_fadd>
 800f492:	1c03      	adds	r3, r0, #0
 800f494:	1c18      	adds	r0, r3, #0
 800f496:	f7f2 f9a7 	bl	80017e8 <__aeabi_f2iz>
 800f49a:	0002      	movs	r2, r0
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	601a      	str	r2, [r3, #0]
    return;
 800f4a0:	46c0      	nop			@ (mov r8, r8)
}
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	b005      	add	sp, #20
 800f4a6:	bd90      	pop	{r4, r7, pc}
 800f4a8:	42340000 	.word	0x42340000
 800f4ac:	0000fde7 	.word	0x0000fde7
 800f4b0:	00007fff 	.word	0x00007fff

0800f4b4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800f4b4:	b5b0      	push	{r4, r5, r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	223c      	movs	r2, #60	@ 0x3c
 800f4c0:	2100      	movs	r1, #0
 800f4c2:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	4952      	ldr	r1, [pc, #328]	@ (800f628 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f4de:	1c18      	adds	r0, r3, #0
 800f4e0:	f7f1 fbe0 	bl	8000ca4 <__aeabi_fdiv>
 800f4e4:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f4e6:	2188      	movs	r1, #136	@ 0x88
 800f4e8:	05c9      	lsls	r1, r1, #23
 800f4ea:	1c18      	adds	r0, r3, #0
 800f4ec:	f7f1 fda8 	bl	8001040 <__aeabi_fmul>
 800f4f0:	1c03      	adds	r3, r0, #0
 800f4f2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	494a      	ldr	r1, [pc, #296]	@ (800f628 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f4fe:	1c18      	adds	r0, r3, #0
 800f500:	f7f1 fbd0 	bl	8000ca4 <__aeabi_fdiv>
 800f504:	1c03      	adds	r3, r0, #0
 800f506:	1c19      	adds	r1, r3, #0
 800f508:	1c20      	adds	r0, r4, #0
 800f50a:	f7f1 f9d9 	bl	80008c0 <__aeabi_fadd>
 800f50e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800f510:	1c19      	adds	r1, r3, #0
 800f512:	1c28      	adds	r0, r5, #0
 800f514:	f7f1 fbc6 	bl	8000ca4 <__aeabi_fdiv>
 800f518:	1c03      	adds	r3, r0, #0
 800f51a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	4940      	ldr	r1, [pc, #256]	@ (800f628 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f526:	1c18      	adds	r0, r3, #0
 800f528:	f7f1 fbbc 	bl	8000ca4 <__aeabi_fdiv>
 800f52c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f52e:	2185      	movs	r1, #133	@ 0x85
 800f530:	05c9      	lsls	r1, r1, #23
 800f532:	1c18      	adds	r0, r3, #0
 800f534:	f7f1 fd84 	bl	8001040 <__aeabi_fmul>
 800f538:	1c03      	adds	r3, r0, #0
 800f53a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	4938      	ldr	r1, [pc, #224]	@ (800f628 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f546:	1c18      	adds	r0, r3, #0
 800f548:	f7f1 fbac 	bl	8000ca4 <__aeabi_fdiv>
 800f54c:	1c03      	adds	r3, r0, #0
 800f54e:	1c19      	adds	r1, r3, #0
 800f550:	1c20      	adds	r0, r4, #0
 800f552:	f7f1 f9b5 	bl	80008c0 <__aeabi_fadd>
 800f556:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800f558:	1c19      	adds	r1, r3, #0
 800f55a:	1c28      	adds	r0, r5, #0
 800f55c:	f7f1 fba2 	bl	8000ca4 <__aeabi_fdiv>
 800f560:	1c03      	adds	r3, r0, #0
 800f562:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d118      	bne.n	800f5a2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f574:	2188      	movs	r1, #136	@ 0x88
 800f576:	05c9      	lsls	r1, r1, #23
 800f578:	1c18      	adds	r0, r3, #0
 800f57a:	f7f1 fd61 	bl	8001040 <__aeabi_fmul>
 800f57e:	1c03      	adds	r3, r0, #0
 800f580:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800f586:	4929      	ldr	r1, [pc, #164]	@ (800f62c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800f588:	1c18      	adds	r0, r3, #0
 800f58a:	f7f1 f999 	bl	80008c0 <__aeabi_fadd>
 800f58e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800f590:	1c19      	adds	r1, r3, #0
 800f592:	1c20      	adds	r0, r4, #0
 800f594:	f7f1 fb86 	bl	8000ca4 <__aeabi_fdiv>
 800f598:	1c03      	adds	r3, r0, #0
 800f59a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	655a      	str	r2, [r3, #84]	@ 0x54
 800f5a0:	e017      	b.n	800f5d2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f5a6:	2188      	movs	r1, #136	@ 0x88
 800f5a8:	05c9      	lsls	r1, r1, #23
 800f5aa:	1c18      	adds	r0, r3, #0
 800f5ac:	f7f1 fd48 	bl	8001040 <__aeabi_fmul>
 800f5b0:	1c03      	adds	r3, r0, #0
 800f5b2:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800f5b8:	491d      	ldr	r1, [pc, #116]	@ (800f630 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800f5ba:	1c18      	adds	r0, r3, #0
 800f5bc:	f7f1 f980 	bl	80008c0 <__aeabi_fadd>
 800f5c0:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800f5c2:	1c19      	adds	r1, r3, #0
 800f5c4:	1c20      	adds	r0, r4, #0
 800f5c6:	f7f1 fb6d 	bl	8000ca4 <__aeabi_fdiv>
 800f5ca:	1c03      	adds	r3, r0, #0
 800f5cc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f5d6:	2185      	movs	r1, #133	@ 0x85
 800f5d8:	05c9      	lsls	r1, r1, #23
 800f5da:	1c18      	adds	r0, r3, #0
 800f5dc:	f7f1 fd30 	bl	8001040 <__aeabi_fmul>
 800f5e0:	1c03      	adds	r3, r0, #0
 800f5e2:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	4912      	ldr	r1, [pc, #72]	@ (800f634 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800f5ea:	1c18      	adds	r0, r3, #0
 800f5ec:	f7f1 f968 	bl	80008c0 <__aeabi_fadd>
 800f5f0:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800f5f2:	1c19      	adds	r1, r3, #0
 800f5f4:	1c20      	adds	r0, r4, #0
 800f5f6:	f7f1 fb55 	bl	8000ca4 <__aeabi_fdiv>
 800f5fa:	1c03      	adds	r3, r0, #0
 800f5fc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2200      	movs	r2, #0
 800f606:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2200      	movs	r2, #0
 800f612:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800f620:	46c0      	nop			@ (mov r8, r8)
 800f622:	46bd      	mov	sp, r7
 800f624:	b002      	add	sp, #8
 800f626:	bdb0      	pop	{r4, r5, r7, pc}
 800f628:	45610000 	.word	0x45610000
 800f62c:	44960000 	.word	0x44960000
 800f630:	41a00000 	.word	0x41a00000
 800f634:	451c4000 	.word	0x451c4000

0800f638 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800f644:	1c18      	adds	r0, r3, #0
 800f646:	46bd      	mov	sp, r7
 800f648:	b002      	add	sp, #8
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800f65c:	1c19      	adds	r1, r3, #0
 800f65e:	1c10      	adds	r0, r2, #0
 800f660:	f7f1 f92e 	bl	80008c0 <__aeabi_fadd>
 800f664:	1c03      	adds	r3, r0, #0
}
 800f666:	1c18      	adds	r0, r3, #0
 800f668:	46bd      	mov	sp, r7
 800f66a:	b002      	add	sp, #8
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800f66e:	b580      	push	{r7, lr}
 800f670:	b082      	sub	sp, #8
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	223c      	movs	r2, #60	@ 0x3c
 800f67a:	5c9b      	ldrb	r3, [r3, r2]
}
 800f67c:	0018      	movs	r0, r3
 800f67e:	46bd      	mov	sp, r7
 800f680:	b002      	add	sp, #8
 800f682:	bd80      	pop	{r7, pc}

0800f684 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800f684:	b5b0      	push	{r4, r5, r7, lr}
 800f686:	b08c      	sub	sp, #48	@ 0x30
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800f690:	1c19      	adds	r1, r3, #0
 800f692:	4895      	ldr	r0, [pc, #596]	@ (800f8e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800f694:	f7f1 fe2e 	bl	80012f4 <__aeabi_fsub>
 800f698:	1c03      	adds	r3, r0, #0
 800f69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6a0:	1c19      	adds	r1, r3, #0
 800f6a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f6a4:	f7f0 ff58 	bl	8000558 <__aeabi_fcmpgt>
 800f6a8:	1e03      	subs	r3, r0, #0
 800f6aa:	d00b      	beq.n	800f6c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800f6b4:	1c19      	adds	r1, r3, #0
 800f6b6:	1c10      	adds	r0, r2, #0
 800f6b8:	f7f1 f902 	bl	80008c0 <__aeabi_fadd>
 800f6bc:	1c03      	adds	r3, r0, #0
 800f6be:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f6c8:	1c19      	adds	r1, r3, #0
 800f6ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f6cc:	f7f0 ff44 	bl	8000558 <__aeabi_fcmpgt>
 800f6d0:	1e03      	subs	r3, r0, #0
 800f6d2:	d00b      	beq.n	800f6ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800f6dc:	1c19      	adds	r1, r3, #0
 800f6de:	1c10      	adds	r0, r2, #0
 800f6e0:	f7f1 f8ee 	bl	80008c0 <__aeabi_fadd>
 800f6e4:	1c03      	adds	r3, r0, #0
 800f6e6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6959      	ldr	r1, [r3, #20]
 800f6f0:	4a7e      	ldr	r2, [pc, #504]	@ (800f8ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	0018      	movs	r0, r3
 800f6f6:	f000 f9f1 	bl	800fadc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	1c11      	adds	r1, r2, #0
 800f702:	0018      	movs	r0, r3
 800f704:	f000 f9fa 	bl	800fafc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f708:	1c03      	adds	r3, r0, #0
 800f70a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800f718:	1c19      	adds	r1, r3, #0
 800f71a:	1c10      	adds	r0, r2, #0
 800f71c:	f7f1 fdea 	bl	80012f4 <__aeabi_fsub>
 800f720:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800f722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f724:	1c18      	adds	r0, r3, #0
 800f726:	f7f1 fc8b 	bl	8001040 <__aeabi_fmul>
 800f72a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800f72c:	1c19      	adds	r1, r3, #0
 800f72e:	1c20      	adds	r0, r4, #0
 800f730:	f7f1 f8c6 	bl	80008c0 <__aeabi_fadd>
 800f734:	1c03      	adds	r3, r0, #0
 800f736:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800f740:	1c19      	adds	r1, r3, #0
 800f742:	486b      	ldr	r0, [pc, #428]	@ (800f8f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800f744:	f7f1 fdd6 	bl	80012f4 <__aeabi_fsub>
 800f748:	1c03      	adds	r3, r0, #0
 800f74a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	1c11      	adds	r1, r2, #0
 800f754:	0018      	movs	r0, r3
 800f756:	f000 f9d1 	bl	800fafc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f75a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800f75c:	1c19      	adds	r1, r3, #0
 800f75e:	1c28      	adds	r0, r5, #0
 800f760:	f7f1 fc6e 	bl	8001040 <__aeabi_fmul>
 800f764:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800f766:	1c19      	adds	r1, r3, #0
 800f768:	1c20      	adds	r0, r4, #0
 800f76a:	f7f1 f8a9 	bl	80008c0 <__aeabi_fadd>
 800f76e:	1c03      	adds	r3, r0, #0
 800f770:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f772:	4a60      	ldr	r2, [pc, #384]	@ (800f8f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800f774:	6a39      	ldr	r1, [r7, #32]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	0018      	movs	r0, r3
 800f77a:	f000 f9af 	bl	800fadc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	1c11      	adds	r1, r2, #0
 800f786:	0018      	movs	r0, r3
 800f788:	f000 f9b8 	bl	800fafc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f78c:	1c03      	adds	r3, r0, #0
 800f78e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800f790:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f792:	69f8      	ldr	r0, [r7, #28]
 800f794:	f7f1 fc54 	bl	8001040 <__aeabi_fmul>
 800f798:	1c03      	adds	r3, r0, #0
 800f79a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6999      	ldr	r1, [r3, #24]
 800f7a4:	4a51      	ldr	r2, [pc, #324]	@ (800f8ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	0018      	movs	r0, r3
 800f7aa:	f000 f997 	bl	800fadc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	1c11      	adds	r1, r2, #0
 800f7b6:	0018      	movs	r0, r3
 800f7b8:	f000 f9a0 	bl	800fafc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f7bc:	1c03      	adds	r3, r0, #0
 800f7be:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800f7cc:	1c19      	adds	r1, r3, #0
 800f7ce:	1c10      	adds	r0, r2, #0
 800f7d0:	f7f1 fd90 	bl	80012f4 <__aeabi_fsub>
 800f7d4:	1c03      	adds	r3, r0, #0
 800f7d6:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800f7d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f7da:	69b8      	ldr	r0, [r7, #24]
 800f7dc:	f7f1 fd8a 	bl	80012f4 <__aeabi_fsub>
 800f7e0:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800f7e2:	1c19      	adds	r1, r3, #0
 800f7e4:	1c28      	adds	r0, r5, #0
 800f7e6:	f7f1 fc2b 	bl	8001040 <__aeabi_fmul>
 800f7ea:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800f7ec:	1c19      	adds	r1, r3, #0
 800f7ee:	1c20      	adds	r0, r4, #0
 800f7f0:	f7f1 f866 	bl	80008c0 <__aeabi_fadd>
 800f7f4:	1c03      	adds	r3, r0, #0
 800f7f6:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800f800:	1c19      	adds	r1, r3, #0
 800f802:	483b      	ldr	r0, [pc, #236]	@ (800f8f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800f804:	f7f1 fd76 	bl	80012f4 <__aeabi_fsub>
 800f808:	1c03      	adds	r3, r0, #0
 800f80a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	1c11      	adds	r1, r2, #0
 800f814:	0018      	movs	r0, r3
 800f816:	f000 f971 	bl	800fafc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f81a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800f81c:	1c19      	adds	r1, r3, #0
 800f81e:	1c28      	adds	r0, r5, #0
 800f820:	f7f1 fc0e 	bl	8001040 <__aeabi_fmul>
 800f824:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800f826:	1c19      	adds	r1, r3, #0
 800f828:	1c20      	adds	r0, r4, #0
 800f82a:	f7f1 f849 	bl	80008c0 <__aeabi_fadd>
 800f82e:	1c03      	adds	r3, r0, #0
 800f830:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f832:	4a30      	ldr	r2, [pc, #192]	@ (800f8f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800f834:	6939      	ldr	r1, [r7, #16]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	0018      	movs	r0, r3
 800f83a:	f000 f94f 	bl	800fadc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	1c11      	adds	r1, r2, #0
 800f846:	0018      	movs	r0, r3
 800f848:	f000 f958 	bl	800fafc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f84c:	1c03      	adds	r3, r0, #0
 800f84e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800f850:	6979      	ldr	r1, [r7, #20]
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f7f1 fbf4 	bl	8001040 <__aeabi_fmul>
 800f858:	1c03      	adds	r3, r0, #0
 800f85a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	4923      	ldr	r1, [pc, #140]	@ (800f8f8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800f86a:	1c18      	adds	r0, r3, #0
 800f86c:	f7f1 fa1a 	bl	8000ca4 <__aeabi_fdiv>
 800f870:	1c03      	adds	r3, r0, #0
 800f872:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800f874:	69f9      	ldr	r1, [r7, #28]
 800f876:	20fe      	movs	r0, #254	@ 0xfe
 800f878:	0580      	lsls	r0, r0, #22
 800f87a:	f7f1 fd3b 	bl	80012f4 <__aeabi_fsub>
 800f87e:	1c03      	adds	r3, r0, #0
 800f880:	491e      	ldr	r1, [pc, #120]	@ (800f8fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800f882:	1c18      	adds	r0, r3, #0
 800f884:	f7f1 fbdc 	bl	8001040 <__aeabi_fmul>
 800f888:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800f88a:	491d      	ldr	r1, [pc, #116]	@ (800f900 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800f88c:	1c18      	adds	r0, r3, #0
 800f88e:	f7f1 fd31 	bl	80012f4 <__aeabi_fsub>
 800f892:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800f894:	1c19      	adds	r1, r3, #0
 800f896:	1c28      	adds	r0, r5, #0
 800f898:	f7f1 fbd2 	bl	8001040 <__aeabi_fmul>
 800f89c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f89e:	1c19      	adds	r1, r3, #0
 800f8a0:	1c20      	adds	r0, r4, #0
 800f8a2:	f7f1 f80d 	bl	80008c0 <__aeabi_fadd>
 800f8a6:	1c03      	adds	r3, r0, #0
 800f8a8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8b2:	2100      	movs	r1, #0
 800f8b4:	1c18      	adds	r0, r3, #0
 800f8b6:	f7f0 fe3b 	bl	8000530 <__aeabi_fcmplt>
 800f8ba:	1e03      	subs	r3, r0, #0
 800f8bc:	d002      	beq.n	800f8c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f8cc:	1c19      	adds	r1, r3, #0
 800f8ce:	1c10      	adds	r0, r2, #0
 800f8d0:	f7f0 fe42 	bl	8000558 <__aeabi_fcmpgt>
 800f8d4:	1e03      	subs	r3, r0, #0
 800f8d6:	d100      	bne.n	800f8da <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800f8d8:	e002      	b.n	800f8e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f8e0:	46c0      	nop			@ (mov r8, r8)
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	b00c      	add	sp, #48	@ 0x30
 800f8e6:	bdb0      	pop	{r4, r5, r7, pc}
 800f8e8:	46fffe00 	.word	0x46fffe00
 800f8ec:	3c23d70a 	.word	0x3c23d70a
 800f8f0:	43ff0000 	.word	0x43ff0000
 800f8f4:	3db851ec 	.word	0x3db851ec
 800f8f8:	42700000 	.word	0x42700000
 800f8fc:	3fa66666 	.word	0x3fa66666
 800f900:	3e99999a 	.word	0x3e99999a

0800f904 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800f904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f906:	b087      	sub	sp, #28
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	223c      	movs	r2, #60	@ 0x3c
 800f912:	5c9b      	ldrb	r3, [r3, r2]
 800f914:	2201      	movs	r2, #1
 800f916:	4053      	eors	r3, r2
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00a      	beq.n	800f934 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	223c      	movs	r2, #60	@ 0x3c
 800f922:	2101      	movs	r1, #1
 800f924:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	683a      	ldr	r2, [r7, #0]
 800f92a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800f932:	e0c8      	b.n	800fac6 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f938:	4965      	ldr	r1, [pc, #404]	@ (800fad0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800f93a:	1c18      	adds	r0, r3, #0
 800f93c:	f7f0 fe16 	bl	800056c <__aeabi_fcmpge>
 800f940:	1e03      	subs	r3, r0, #0
 800f942:	d107      	bne.n	800f954 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800f948:	4962      	ldr	r1, [pc, #392]	@ (800fad4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800f94a:	1c18      	adds	r0, r3, #0
 800f94c:	f7f0 fdfa 	bl	8000544 <__aeabi_fcmple>
 800f950:	1e03      	subs	r3, r0, #0
 800f952:	d00e      	beq.n	800f972 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800f95c:	1c19      	adds	r1, r3, #0
 800f95e:	1c10      	adds	r0, r2, #0
 800f960:	f7f0 ffae 	bl	80008c0 <__aeabi_fadd>
 800f964:	1c03      	adds	r3, r0, #0
 800f966:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2200      	movs	r2, #0
 800f970:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f976:	1c19      	adds	r1, r3, #0
 800f978:	6838      	ldr	r0, [r7, #0]
 800f97a:	f7f1 fcbb 	bl	80012f4 <__aeabi_fsub>
 800f97e:	1c03      	adds	r3, r0, #0
 800f980:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	0018      	movs	r0, r3
 800f986:	f7ff fe7d 	bl	800f684 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f98e:	1c19      	adds	r1, r3, #0
 800f990:	6838      	ldr	r0, [r7, #0]
 800f992:	f7f1 fcaf 	bl	80012f4 <__aeabi_fsub>
 800f996:	1c03      	adds	r3, r0, #0
 800f998:	2185      	movs	r1, #133	@ 0x85
 800f99a:	05c9      	lsls	r1, r1, #23
 800f99c:	1c18      	adds	r0, r3, #0
 800f99e:	f7f1 f981 	bl	8000ca4 <__aeabi_fdiv>
 800f9a2:	1c03      	adds	r3, r0, #0
 800f9a4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f7f0 fdc1 	bl	8000530 <__aeabi_fcmplt>
 800f9ae:	1e03      	subs	r3, r0, #0
 800f9b0:	d008      	beq.n	800f9c4 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f9b6:	68f9      	ldr	r1, [r7, #12]
 800f9b8:	1c18      	adds	r0, r3, #0
 800f9ba:	f7f1 fc9b 	bl	80012f4 <__aeabi_fsub>
 800f9be:	1c03      	adds	r3, r0, #0
 800f9c0:	617b      	str	r3, [r7, #20]
 800f9c2:	e007      	b.n	800f9d4 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f9c8:	1c19      	adds	r1, r3, #0
 800f9ca:	68f8      	ldr	r0, [r7, #12]
 800f9cc:	f7f0 ff78 	bl	80008c0 <__aeabi_fadd>
 800f9d0:	1c03      	adds	r3, r0, #0
 800f9d2:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800f9d4:	23fe      	movs	r3, #254	@ 0xfe
 800f9d6:	059b      	lsls	r3, r3, #22
 800f9d8:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800f9da:	493f      	ldr	r1, [pc, #252]	@ (800fad8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f9dc:	6978      	ldr	r0, [r7, #20]
 800f9de:	f7f0 fdbb 	bl	8000558 <__aeabi_fcmpgt>
 800f9e2:	1e03      	subs	r3, r0, #0
 800f9e4:	d010      	beq.n	800fa08 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800f9e6:	493c      	ldr	r1, [pc, #240]	@ (800fad8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f9e8:	6978      	ldr	r0, [r7, #20]
 800f9ea:	f7f1 f95b 	bl	8000ca4 <__aeabi_fdiv>
 800f9ee:	1c03      	adds	r3, r0, #0
 800f9f0:	1c1c      	adds	r4, r3, #0
 800f9f2:	4939      	ldr	r1, [pc, #228]	@ (800fad8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f9f4:	6978      	ldr	r0, [r7, #20]
 800f9f6:	f7f1 f955 	bl	8000ca4 <__aeabi_fdiv>
 800f9fa:	1c03      	adds	r3, r0, #0
 800f9fc:	1c19      	adds	r1, r3, #0
 800f9fe:	1c20      	adds	r0, r4, #0
 800fa00:	f7f1 fb1e 	bl	8001040 <__aeabi_fmul>
 800fa04:	1c03      	adds	r3, r0, #0
 800fa06:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800fa0c:	1c19      	adds	r1, r3, #0
 800fa0e:	2085      	movs	r0, #133	@ 0x85
 800fa10:	05c0      	lsls	r0, r0, #23
 800fa12:	f7f1 fc6f 	bl	80012f4 <__aeabi_fsub>
 800fa16:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800fa18:	6939      	ldr	r1, [r7, #16]
 800fa1a:	1c18      	adds	r0, r3, #0
 800fa1c:	f7f1 fb10 	bl	8001040 <__aeabi_fmul>
 800fa20:	1c03      	adds	r3, r0, #0
 800fa22:	1c18      	adds	r0, r3, #0
 800fa24:	f018 fde2 	bl	80285ec <sqrtf>
 800fa28:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800fa32:	2185      	movs	r1, #133	@ 0x85
 800fa34:	05c9      	lsls	r1, r1, #23
 800fa36:	6938      	ldr	r0, [r7, #16]
 800fa38:	f7f1 fb02 	bl	8001040 <__aeabi_fmul>
 800fa3c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800fa3e:	1c19      	adds	r1, r3, #0
 800fa40:	1c28      	adds	r0, r5, #0
 800fa42:	f7f1 f92f 	bl	8000ca4 <__aeabi_fdiv>
 800fa46:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800fa48:	1c19      	adds	r1, r3, #0
 800fa4a:	1c20      	adds	r0, r4, #0
 800fa4c:	f7f1 faf8 	bl	8001040 <__aeabi_fmul>
 800fa50:	1c03      	adds	r3, r0, #0
 800fa52:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fa58:	68f9      	ldr	r1, [r7, #12]
 800fa5a:	1c18      	adds	r0, r3, #0
 800fa5c:	f7f1 faf0 	bl	8001040 <__aeabi_fmul>
 800fa60:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800fa62:	6939      	ldr	r1, [r7, #16]
 800fa64:	1c18      	adds	r0, r3, #0
 800fa66:	f7f1 f91d 	bl	8000ca4 <__aeabi_fdiv>
 800fa6a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800fa6c:	68f9      	ldr	r1, [r7, #12]
 800fa6e:	1c18      	adds	r0, r3, #0
 800fa70:	f7f1 fae6 	bl	8001040 <__aeabi_fmul>
 800fa74:	1c03      	adds	r3, r0, #0
             sqrtf(
 800fa76:	1c19      	adds	r1, r3, #0
 800fa78:	1c20      	adds	r0, r4, #0
 800fa7a:	f7f0 ff21 	bl	80008c0 <__aeabi_fadd>
 800fa7e:	1c03      	adds	r3, r0, #0
 800fa80:	1c18      	adds	r0, r3, #0
 800fa82:	f018 fdb3 	bl	80285ec <sqrtf>
 800fa86:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800fa88:	1c19      	adds	r1, r3, #0
 800fa8a:	1c30      	adds	r0, r6, #0
 800fa8c:	f7f1 fad8 	bl	8001040 <__aeabi_fmul>
 800fa90:	1c03      	adds	r3, r0, #0
 800fa92:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800faa0:	68f9      	ldr	r1, [r7, #12]
 800faa2:	1c18      	adds	r0, r3, #0
 800faa4:	f7f1 facc 	bl	8001040 <__aeabi_fmul>
 800faa8:	1c03      	adds	r3, r0, #0
 800faaa:	2182      	movs	r1, #130	@ 0x82
 800faac:	05c9      	lsls	r1, r1, #23
 800faae:	1c18      	adds	r0, r3, #0
 800fab0:	f7f1 f8f8 	bl	8000ca4 <__aeabi_fdiv>
 800fab4:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800fab6:	1c19      	adds	r1, r3, #0
 800fab8:	1c20      	adds	r0, r4, #0
 800faba:	f7f0 ff01 	bl	80008c0 <__aeabi_fadd>
 800fabe:	1c03      	adds	r3, r0, #0
 800fac0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800fac6:	46c0      	nop			@ (mov r8, r8)
 800fac8:	46bd      	mov	sp, r7
 800faca:	b007      	add	sp, #28
 800facc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800face:	46c0      	nop			@ (mov r8, r8)
 800fad0:	42c80000 	.word	0x42c80000
 800fad4:	c2c80000 	.word	0xc2c80000
 800fad8:	44b40000 	.word	0x44b40000

0800fadc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	68ba      	ldr	r2, [r7, #8]
 800faf2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800faf4:	46c0      	nop			@ (mov r8, r8)
 800faf6:	46bd      	mov	sp, r7
 800faf8:	b004      	add	sp, #16
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800fafc:	b590      	push	{r4, r7, lr}
 800fafe:	b085      	sub	sp, #20
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb0e:	1c19      	adds	r1, r3, #0
 800fb10:	6838      	ldr	r0, [r7, #0]
 800fb12:	f7f1 fbef 	bl	80012f4 <__aeabi_fsub>
 800fb16:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800fb18:	1c19      	adds	r1, r3, #0
 800fb1a:	1c20      	adds	r0, r4, #0
 800fb1c:	f7f1 fa90 	bl	8001040 <__aeabi_fmul>
 800fb20:	1c03      	adds	r3, r0, #0
 800fb22:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800fb24:	4912      	ldr	r1, [pc, #72]	@ (800fb70 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800fb26:	68f8      	ldr	r0, [r7, #12]
 800fb28:	f7f0 fd02 	bl	8000530 <__aeabi_fcmplt>
 800fb2c:	1e03      	subs	r3, r0, #0
 800fb2e:	d002      	beq.n	800fb36 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800fb30:	23fe      	movs	r3, #254	@ 0xfe
 800fb32:	059b      	lsls	r3, r3, #22
 800fb34:	e018      	b.n	800fb68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800fb36:	490f      	ldr	r1, [pc, #60]	@ (800fb74 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800fb38:	68f8      	ldr	r0, [r7, #12]
 800fb3a:	f7f0 fd0d 	bl	8000558 <__aeabi_fcmpgt>
 800fb3e:	1e03      	subs	r3, r0, #0
 800fb40:	d001      	beq.n	800fb46 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800fb42:	2300      	movs	r3, #0
 800fb44:	e010      	b.n	800fb68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	1c18      	adds	r0, r3, #0
 800fb4a:	f018 fd27 	bl	802859c <expf>
 800fb4e:	1c03      	adds	r3, r0, #0
 800fb50:	21fe      	movs	r1, #254	@ 0xfe
 800fb52:	0589      	lsls	r1, r1, #22
 800fb54:	1c18      	adds	r0, r3, #0
 800fb56:	f7f0 feb3 	bl	80008c0 <__aeabi_fadd>
 800fb5a:	1c03      	adds	r3, r0, #0
 800fb5c:	1c19      	adds	r1, r3, #0
 800fb5e:	20fe      	movs	r0, #254	@ 0xfe
 800fb60:	0580      	lsls	r0, r0, #22
 800fb62:	f7f1 f89f 	bl	8000ca4 <__aeabi_fdiv>
 800fb66:	1c03      	adds	r3, r0, #0
    }
}
 800fb68:	1c18      	adds	r0, r3, #0
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	b005      	add	sp, #20
 800fb6e:	bd90      	pop	{r4, r7, pc}
 800fb70:	c2480000 	.word	0xc2480000
 800fb74:	42480000 	.word	0x42480000

0800fb78 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	68ba      	ldr	r2, [r7, #8]
 800fb88:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800fb90:	46c0      	nop			@ (mov r8, r8)
 800fb92:	46bd      	mov	sp, r7
 800fb94:	b004      	add	sp, #16
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800fb98:	b590      	push	{r4, r7, lr}
 800fb9a:	b083      	sub	sp, #12
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d114      	bne.n	800fbd4 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fbae:	1c19      	adds	r1, r3, #0
 800fbb0:	6838      	ldr	r0, [r7, #0]
 800fbb2:	f7f1 fb9f 	bl	80012f4 <__aeabi_fsub>
 800fbb6:	1c03      	adds	r3, r0, #0
 800fbb8:	4918      	ldr	r1, [pc, #96]	@ (800fc1c <GasIndexAlgorithm__mox_model__process+0x84>)
 800fbba:	1c18      	adds	r0, r3, #0
 800fbbc:	f7f1 f872 	bl	8000ca4 <__aeabi_fdiv>
 800fbc0:	1c03      	adds	r3, r0, #0
 800fbc2:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800fbc8:	1c19      	adds	r1, r3, #0
 800fbca:	1c10      	adds	r0, r2, #0
 800fbcc:	f7f1 fa38 	bl	8001040 <__aeabi_fmul>
 800fbd0:	1c03      	adds	r3, r0, #0
 800fbd2:	e01f      	b.n	800fc14 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fbd8:	1c19      	adds	r1, r3, #0
 800fbda:	6838      	ldr	r0, [r7, #0]
 800fbdc:	f7f1 fb8a 	bl	80012f4 <__aeabi_fsub>
 800fbe0:	1c03      	adds	r3, r0, #0
 800fbe2:	1c1a      	adds	r2, r3, #0
 800fbe4:	2380      	movs	r3, #128	@ 0x80
 800fbe6:	061b      	lsls	r3, r3, #24
 800fbe8:	4053      	eors	r3, r2
 800fbea:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbf0:	490b      	ldr	r1, [pc, #44]	@ (800fc20 <GasIndexAlgorithm__mox_model__process+0x88>)
 800fbf2:	1c18      	adds	r0, r3, #0
 800fbf4:	f7f0 fe64 	bl	80008c0 <__aeabi_fadd>
 800fbf8:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800fbfa:	1c19      	adds	r1, r3, #0
 800fbfc:	1c20      	adds	r0, r4, #0
 800fbfe:	f7f1 f851 	bl	8000ca4 <__aeabi_fdiv>
 800fc02:	1c03      	adds	r3, r0, #0
 800fc04:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800fc0a:	1c19      	adds	r1, r3, #0
 800fc0c:	1c10      	adds	r0, r2, #0
 800fc0e:	f7f1 fa17 	bl	8001040 <__aeabi_fmul>
 800fc12:	1c03      	adds	r3, r0, #0
    }
}
 800fc14:	1c18      	adds	r0, r3, #0
 800fc16:	46bd      	mov	sp, r7
 800fc18:	b003      	add	sp, #12
 800fc1a:	bd90      	pop	{r4, r7, pc}
 800fc1c:	44fa0000 	.word	0x44fa0000
 800fc20:	435c0000 	.word	0x435c0000

0800fc24 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b084      	sub	sp, #16
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	607a      	str	r2, [r7, #4]
 800fc30:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2180      	movs	r1, #128	@ 0x80
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2184      	movs	r1, #132	@ 0x84
 800fc3e:	68ba      	ldr	r2, [r7, #8]
 800fc40:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2188      	movs	r1, #136	@ 0x88
 800fc46:	683a      	ldr	r2, [r7, #0]
 800fc48:	505a      	str	r2, [r3, r1]
}
 800fc4a:	46c0      	nop			@ (mov r8, r8)
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	b004      	add	sp, #16
 800fc50:	bd80      	pop	{r7, pc}
	...

0800fc54 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800fc54:	b590      	push	{r4, r7, lr}
 800fc56:	b085      	sub	sp, #20
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2280      	movs	r2, #128	@ 0x80
 800fc62:	589c      	ldr	r4, [r3, r2]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2284      	movs	r2, #132	@ 0x84
 800fc68:	589b      	ldr	r3, [r3, r2]
 800fc6a:	1c19      	adds	r1, r3, #0
 800fc6c:	6838      	ldr	r0, [r7, #0]
 800fc6e:	f7f1 fb41 	bl	80012f4 <__aeabi_fsub>
 800fc72:	1c03      	adds	r3, r0, #0
 800fc74:	1c19      	adds	r1, r3, #0
 800fc76:	1c20      	adds	r0, r4, #0
 800fc78:	f7f1 f9e2 	bl	8001040 <__aeabi_fmul>
 800fc7c:	1c03      	adds	r3, r0, #0
 800fc7e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800fc80:	4940      	ldr	r1, [pc, #256]	@ (800fd84 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800fc82:	68b8      	ldr	r0, [r7, #8]
 800fc84:	f7f0 fc54 	bl	8000530 <__aeabi_fcmplt>
 800fc88:	1e03      	subs	r3, r0, #0
 800fc8a:	d001      	beq.n	800fc90 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800fc8c:	4b3e      	ldr	r3, [pc, #248]	@ (800fd88 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fc8e:	e075      	b.n	800fd7c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800fc90:	493e      	ldr	r1, [pc, #248]	@ (800fd8c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800fc92:	68b8      	ldr	r0, [r7, #8]
 800fc94:	f7f0 fc60 	bl	8000558 <__aeabi_fcmpgt>
 800fc98:	1e03      	subs	r3, r0, #0
 800fc9a:	d001      	beq.n	800fca0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	e06d      	b.n	800fd7c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800fca0:	2100      	movs	r1, #0
 800fca2:	6838      	ldr	r0, [r7, #0]
 800fca4:	f7f0 fc62 	bl	800056c <__aeabi_fcmpge>
 800fca8:	1e03      	subs	r3, r0, #0
 800fcaa:	d047      	beq.n	800fd3c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2288      	movs	r2, #136	@ 0x88
 800fcb0:	589b      	ldr	r3, [r3, r2]
 800fcb2:	21fe      	movs	r1, #254	@ 0xfe
 800fcb4:	0589      	lsls	r1, r1, #22
 800fcb6:	1c18      	adds	r0, r3, #0
 800fcb8:	f7f0 fc34 	bl	8000524 <__aeabi_fcmpeq>
 800fcbc:	1e03      	subs	r3, r0, #0
 800fcbe:	d00e      	beq.n	800fcde <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	689b      	ldr	r3, [r3, #8]
 800fcc4:	1c19      	adds	r1, r3, #0
 800fcc6:	20fe      	movs	r0, #254	@ 0xfe
 800fcc8:	0580      	lsls	r0, r0, #22
 800fcca:	f7f1 fb13 	bl	80012f4 <__aeabi_fsub>
 800fcce:	1c03      	adds	r3, r0, #0
 800fcd0:	492f      	ldr	r1, [pc, #188]	@ (800fd90 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800fcd2:	1c18      	adds	r0, r3, #0
 800fcd4:	f7f1 f9b4 	bl	8001040 <__aeabi_fmul>
 800fcd8:	1c03      	adds	r3, r0, #0
 800fcda:	60fb      	str	r3, [r7, #12]
 800fcdc:	e012      	b.n	800fd04 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	689b      	ldr	r3, [r3, #8]
 800fce2:	492c      	ldr	r1, [pc, #176]	@ (800fd94 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800fce4:	1c18      	adds	r0, r3, #0
 800fce6:	f7f1 f9ab 	bl	8001040 <__aeabi_fmul>
 800fcea:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800fcec:	1c19      	adds	r1, r3, #0
 800fcee:	4826      	ldr	r0, [pc, #152]	@ (800fd88 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fcf0:	f7f1 fb00 	bl	80012f4 <__aeabi_fsub>
 800fcf4:	1c03      	adds	r3, r0, #0
 800fcf6:	2181      	movs	r1, #129	@ 0x81
 800fcf8:	05c9      	lsls	r1, r1, #23
 800fcfa:	1c18      	adds	r0, r3, #0
 800fcfc:	f7f0 ffd2 	bl	8000ca4 <__aeabi_fdiv>
 800fd00:	1c03      	adds	r3, r0, #0
 800fd02:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800fd04:	4920      	ldr	r1, [pc, #128]	@ (800fd88 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fd06:	68f8      	ldr	r0, [r7, #12]
 800fd08:	f7f0 fdda 	bl	80008c0 <__aeabi_fadd>
 800fd0c:	1c03      	adds	r3, r0, #0
 800fd0e:	1c1c      	adds	r4, r3, #0
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	1c18      	adds	r0, r3, #0
 800fd14:	f018 fc42 	bl	802859c <expf>
 800fd18:	1c03      	adds	r3, r0, #0
 800fd1a:	21fe      	movs	r1, #254	@ 0xfe
 800fd1c:	0589      	lsls	r1, r1, #22
 800fd1e:	1c18      	adds	r0, r3, #0
 800fd20:	f7f0 fdce 	bl	80008c0 <__aeabi_fadd>
 800fd24:	1c03      	adds	r3, r0, #0
 800fd26:	1c19      	adds	r1, r3, #0
 800fd28:	1c20      	adds	r0, r4, #0
 800fd2a:	f7f0 ffbb 	bl	8000ca4 <__aeabi_fdiv>
 800fd2e:	1c03      	adds	r3, r0, #0
 800fd30:	68f9      	ldr	r1, [r7, #12]
 800fd32:	1c18      	adds	r0, r3, #0
 800fd34:	f7f1 fade 	bl	80012f4 <__aeabi_fsub>
 800fd38:	1c03      	adds	r3, r0, #0
 800fd3a:	e01f      	b.n	800fd7c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2188      	movs	r1, #136	@ 0x88
 800fd44:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800fd46:	1c19      	adds	r1, r3, #0
 800fd48:	1c10      	adds	r0, r2, #0
 800fd4a:	f7f0 ffab 	bl	8000ca4 <__aeabi_fdiv>
 800fd4e:	1c03      	adds	r3, r0, #0
 800fd50:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	1c18      	adds	r0, r3, #0
 800fd56:	f018 fc21 	bl	802859c <expf>
 800fd5a:	1c03      	adds	r3, r0, #0
 800fd5c:	21fe      	movs	r1, #254	@ 0xfe
 800fd5e:	0589      	lsls	r1, r1, #22
 800fd60:	1c18      	adds	r0, r3, #0
 800fd62:	f7f0 fdad 	bl	80008c0 <__aeabi_fadd>
 800fd66:	1c03      	adds	r3, r0, #0
 800fd68:	1c19      	adds	r1, r3, #0
 800fd6a:	4807      	ldr	r0, [pc, #28]	@ (800fd88 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fd6c:	f7f0 ff9a 	bl	8000ca4 <__aeabi_fdiv>
 800fd70:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800fd72:	1c19      	adds	r1, r3, #0
 800fd74:	1c20      	adds	r0, r4, #0
 800fd76:	f7f1 f963 	bl	8001040 <__aeabi_fmul>
 800fd7a:	1c03      	adds	r3, r0, #0
        }
    }
}
 800fd7c:	1c18      	adds	r0, r3, #0
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	b005      	add	sp, #20
 800fd82:	bd90      	pop	{r4, r7, pc}
 800fd84:	c2480000 	.word	0xc2480000
 800fd88:	43fa0000 	.word	0x43fa0000
 800fd8c:	42480000 	.word	0x42480000
 800fd90:	3f8041ab 	.word	0x3f8041ab
 800fd94:	40a00000 	.word	0x40a00000

0800fd98 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800fd98:	b590      	push	{r4, r7, lr}
 800fd9a:	b083      	sub	sp, #12
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	685b      	ldr	r3, [r3, #4]
 800fda8:	4913      	ldr	r1, [pc, #76]	@ (800fdf8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800fdaa:	1c18      	adds	r0, r3, #0
 800fdac:	f7f0 fd88 	bl	80008c0 <__aeabi_fadd>
 800fdb0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800fdb2:	1c19      	adds	r1, r3, #0
 800fdb4:	1c20      	adds	r0, r4, #0
 800fdb6:	f7f0 ff75 	bl	8000ca4 <__aeabi_fdiv>
 800fdba:	1c03      	adds	r3, r0, #0
 800fdbc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	228c      	movs	r2, #140	@ 0x8c
 800fdc2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	490b      	ldr	r1, [pc, #44]	@ (800fdfc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800fdce:	1c18      	adds	r0, r3, #0
 800fdd0:	f7f0 fd76 	bl	80008c0 <__aeabi_fadd>
 800fdd4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800fdd6:	1c19      	adds	r1, r3, #0
 800fdd8:	1c20      	adds	r0, r4, #0
 800fdda:	f7f0 ff63 	bl	8000ca4 <__aeabi_fdiv>
 800fdde:	1c03      	adds	r3, r0, #0
 800fde0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2290      	movs	r2, #144	@ 0x90
 800fde6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2294      	movs	r2, #148	@ 0x94
 800fdec:	2100      	movs	r1, #0
 800fdee:	5499      	strb	r1, [r3, r2]
}
 800fdf0:	46c0      	nop			@ (mov r8, r8)
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	b003      	add	sp, #12
 800fdf6:	bd90      	pop	{r4, r7, pc}
 800fdf8:	41a00000 	.word	0x41a00000
 800fdfc:	43fa0000 	.word	0x43fa0000

0800fe00 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800fe00:	b590      	push	{r4, r7, lr}
 800fe02:	b087      	sub	sp, #28
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2294      	movs	r2, #148	@ 0x94
 800fe0e:	5c9b      	ldrb	r3, [r3, r2]
 800fe10:	2201      	movs	r2, #1
 800fe12:	4053      	eors	r3, r2
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d00f      	beq.n	800fe3a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2198      	movs	r1, #152	@ 0x98
 800fe1e:	683a      	ldr	r2, [r7, #0]
 800fe20:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	219c      	movs	r1, #156	@ 0x9c
 800fe26:	683a      	ldr	r2, [r7, #0]
 800fe28:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	21a0      	movs	r1, #160	@ 0xa0
 800fe2e:	683a      	ldr	r2, [r7, #0]
 800fe30:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2294      	movs	r2, #148	@ 0x94
 800fe36:	2101      	movs	r1, #1
 800fe38:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	228c      	movs	r2, #140	@ 0x8c
 800fe3e:	589b      	ldr	r3, [r3, r2]
 800fe40:	1c19      	adds	r1, r3, #0
 800fe42:	20fe      	movs	r0, #254	@ 0xfe
 800fe44:	0580      	lsls	r0, r0, #22
 800fe46:	f7f1 fa55 	bl	80012f4 <__aeabi_fsub>
 800fe4a:	1c03      	adds	r3, r0, #0
 800fe4c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2298      	movs	r2, #152	@ 0x98
 800fe52:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800fe54:	1c19      	adds	r1, r3, #0
 800fe56:	f7f1 f8f3 	bl	8001040 <__aeabi_fmul>
 800fe5a:	1c03      	adds	r3, r0, #0
 800fe5c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	228c      	movs	r2, #140	@ 0x8c
 800fe62:	589b      	ldr	r3, [r3, r2]
 800fe64:	6839      	ldr	r1, [r7, #0]
 800fe66:	1c18      	adds	r0, r3, #0
 800fe68:	f7f1 f8ea 	bl	8001040 <__aeabi_fmul>
 800fe6c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800fe6e:	1c19      	adds	r1, r3, #0
 800fe70:	1c20      	adds	r0, r4, #0
 800fe72:	f7f0 fd25 	bl	80008c0 <__aeabi_fadd>
 800fe76:	1c03      	adds	r3, r0, #0
 800fe78:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2298      	movs	r2, #152	@ 0x98
 800fe7e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2290      	movs	r2, #144	@ 0x90
 800fe84:	589b      	ldr	r3, [r3, r2]
 800fe86:	1c19      	adds	r1, r3, #0
 800fe88:	20fe      	movs	r0, #254	@ 0xfe
 800fe8a:	0580      	lsls	r0, r0, #22
 800fe8c:	f7f1 fa32 	bl	80012f4 <__aeabi_fsub>
 800fe90:	1c03      	adds	r3, r0, #0
 800fe92:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	229c      	movs	r2, #156	@ 0x9c
 800fe98:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800fe9a:	1c19      	adds	r1, r3, #0
 800fe9c:	f7f1 f8d0 	bl	8001040 <__aeabi_fmul>
 800fea0:	1c03      	adds	r3, r0, #0
 800fea2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2290      	movs	r2, #144	@ 0x90
 800fea8:	589b      	ldr	r3, [r3, r2]
 800feaa:	6839      	ldr	r1, [r7, #0]
 800feac:	1c18      	adds	r0, r3, #0
 800feae:	f7f1 f8c7 	bl	8001040 <__aeabi_fmul>
 800feb2:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800feb4:	1c19      	adds	r1, r3, #0
 800feb6:	1c20      	adds	r0, r4, #0
 800feb8:	f7f0 fd02 	bl	80008c0 <__aeabi_fadd>
 800febc:	1c03      	adds	r3, r0, #0
 800febe:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	229c      	movs	r2, #156	@ 0x9c
 800fec4:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2298      	movs	r2, #152	@ 0x98
 800feca:	589a      	ldr	r2, [r3, r2]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	219c      	movs	r1, #156	@ 0x9c
 800fed0:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800fed2:	1c19      	adds	r1, r3, #0
 800fed4:	1c10      	adds	r0, r2, #0
 800fed6:	f7f1 fa0d 	bl	80012f4 <__aeabi_fsub>
 800feda:	1c03      	adds	r3, r0, #0
 800fedc:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800fede:	2100      	movs	r1, #0
 800fee0:	6978      	ldr	r0, [r7, #20]
 800fee2:	f7f0 fb25 	bl	8000530 <__aeabi_fcmplt>
 800fee6:	1e03      	subs	r3, r0, #0
 800fee8:	d004      	beq.n	800fef4 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	2280      	movs	r2, #128	@ 0x80
 800feee:	0612      	lsls	r2, r2, #24
 800fef0:	4053      	eors	r3, r2
 800fef2:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800fef4:	4923      	ldr	r1, [pc, #140]	@ (800ff84 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800fef6:	6978      	ldr	r0, [r7, #20]
 800fef8:	f7f1 f8a2 	bl	8001040 <__aeabi_fmul>
 800fefc:	1c03      	adds	r3, r0, #0
 800fefe:	1c18      	adds	r0, r3, #0
 800ff00:	f018 fb4c 	bl	802859c <expf>
 800ff04:	1c03      	adds	r3, r0, #0
 800ff06:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800ff08:	491f      	ldr	r1, [pc, #124]	@ (800ff88 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800ff0a:	6938      	ldr	r0, [r7, #16]
 800ff0c:	f7f1 f898 	bl	8001040 <__aeabi_fmul>
 800ff10:	1c03      	adds	r3, r0, #0
 800ff12:	491e      	ldr	r1, [pc, #120]	@ (800ff8c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800ff14:	1c18      	adds	r0, r3, #0
 800ff16:	f7f0 fcd3 	bl	80008c0 <__aeabi_fadd>
 800ff1a:	1c03      	adds	r3, r0, #0
 800ff1c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	685c      	ldr	r4, [r3, #4]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	68f9      	ldr	r1, [r7, #12]
 800ff28:	1c18      	adds	r0, r3, #0
 800ff2a:	f7f0 fcc9 	bl	80008c0 <__aeabi_fadd>
 800ff2e:	1c03      	adds	r3, r0, #0
 800ff30:	1c19      	adds	r1, r3, #0
 800ff32:	1c20      	adds	r0, r4, #0
 800ff34:	f7f0 feb6 	bl	8000ca4 <__aeabi_fdiv>
 800ff38:	1c03      	adds	r3, r0, #0
 800ff3a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800ff3c:	68b9      	ldr	r1, [r7, #8]
 800ff3e:	20fe      	movs	r0, #254	@ 0xfe
 800ff40:	0580      	lsls	r0, r0, #22
 800ff42:	f7f1 f9d7 	bl	80012f4 <__aeabi_fsub>
 800ff46:	1c03      	adds	r3, r0, #0
 800ff48:	1c18      	adds	r0, r3, #0
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	22a0      	movs	r2, #160	@ 0xa0
 800ff4e:	589b      	ldr	r3, [r3, r2]
 800ff50:	1c19      	adds	r1, r3, #0
 800ff52:	f7f1 f875 	bl	8001040 <__aeabi_fmul>
 800ff56:	1c03      	adds	r3, r0, #0
 800ff58:	1c1c      	adds	r4, r3, #0
 800ff5a:	6839      	ldr	r1, [r7, #0]
 800ff5c:	68b8      	ldr	r0, [r7, #8]
 800ff5e:	f7f1 f86f 	bl	8001040 <__aeabi_fmul>
 800ff62:	1c03      	adds	r3, r0, #0
 800ff64:	1c19      	adds	r1, r3, #0
 800ff66:	1c20      	adds	r0, r4, #0
 800ff68:	f7f0 fcaa 	bl	80008c0 <__aeabi_fadd>
 800ff6c:	1c03      	adds	r3, r0, #0
 800ff6e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	22a0      	movs	r2, #160	@ 0xa0
 800ff74:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	22a0      	movs	r2, #160	@ 0xa0
 800ff7a:	589b      	ldr	r3, [r3, r2]
}
 800ff7c:	1c18      	adds	r0, r3, #0
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	b007      	add	sp, #28
 800ff82:	bd90      	pop	{r4, r7, pc}
 800ff84:	be4ccccd 	.word	0xbe4ccccd
 800ff88:	43f00000 	.word	0x43f00000
 800ff8c:	41a00000 	.word	0x41a00000

0800ff90 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	000a      	movs	r2, r1
 800ff9a:	1cbb      	adds	r3, r7, #2
 800ff9c:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800ff9e:	230d      	movs	r3, #13
 800ffa0:	18fb      	adds	r3, r7, r3
 800ffa2:	22ff      	movs	r2, #255	@ 0xff
 800ffa4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800ffa6:	230e      	movs	r3, #14
 800ffa8:	18fb      	adds	r3, r7, r3
 800ffaa:	2200      	movs	r2, #0
 800ffac:	801a      	strh	r2, [r3, #0]
 800ffae:	e038      	b.n	8010022 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 800ffb0:	230e      	movs	r3, #14
 800ffb2:	18fb      	adds	r3, r7, r3
 800ffb4:	881b      	ldrh	r3, [r3, #0]
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	18d3      	adds	r3, r2, r3
 800ffba:	7819      	ldrb	r1, [r3, #0]
 800ffbc:	220d      	movs	r2, #13
 800ffbe:	18bb      	adds	r3, r7, r2
 800ffc0:	18ba      	adds	r2, r7, r2
 800ffc2:	7812      	ldrb	r2, [r2, #0]
 800ffc4:	404a      	eors	r2, r1
 800ffc6:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800ffc8:	230c      	movs	r3, #12
 800ffca:	18fb      	adds	r3, r7, r3
 800ffcc:	2208      	movs	r2, #8
 800ffce:	701a      	strb	r2, [r3, #0]
 800ffd0:	e01c      	b.n	801000c <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 800ffd2:	210d      	movs	r1, #13
 800ffd4:	187b      	adds	r3, r7, r1
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	b25b      	sxtb	r3, r3
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	da0a      	bge.n	800fff4 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800ffde:	187b      	adds	r3, r7, r1
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	b25b      	sxtb	r3, r3
 800ffe4:	18db      	adds	r3, r3, r3
 800ffe6:	b25b      	sxtb	r3, r3
 800ffe8:	2231      	movs	r2, #49	@ 0x31
 800ffea:	4053      	eors	r3, r2
 800ffec:	b25a      	sxtb	r2, r3
 800ffee:	187b      	adds	r3, r7, r1
 800fff0:	701a      	strb	r2, [r3, #0]
 800fff2:	e005      	b.n	8010000 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 800fff4:	230d      	movs	r3, #13
 800fff6:	18fa      	adds	r2, r7, r3
 800fff8:	18fb      	adds	r3, r7, r3
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	18db      	adds	r3, r3, r3
 800fffe:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010000:	220c      	movs	r2, #12
 8010002:	18bb      	adds	r3, r7, r2
 8010004:	18ba      	adds	r2, r7, r2
 8010006:	7812      	ldrb	r2, [r2, #0]
 8010008:	3a01      	subs	r2, #1
 801000a:	701a      	strb	r2, [r3, #0]
 801000c:	230c      	movs	r3, #12
 801000e:	18fb      	adds	r3, r7, r3
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d1dd      	bne.n	800ffd2 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010016:	220e      	movs	r2, #14
 8010018:	18bb      	adds	r3, r7, r2
 801001a:	18ba      	adds	r2, r7, r2
 801001c:	8812      	ldrh	r2, [r2, #0]
 801001e:	3201      	adds	r2, #1
 8010020:	801a      	strh	r2, [r3, #0]
 8010022:	230e      	movs	r3, #14
 8010024:	18fa      	adds	r2, r7, r3
 8010026:	1cbb      	adds	r3, r7, #2
 8010028:	8812      	ldrh	r2, [r2, #0]
 801002a:	881b      	ldrh	r3, [r3, #0]
 801002c:	429a      	cmp	r2, r3
 801002e:	d3bf      	bcc.n	800ffb0 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8010030:	230d      	movs	r3, #13
 8010032:	18fb      	adds	r3, r7, r3
 8010034:	781b      	ldrb	r3, [r3, #0]
}
 8010036:	0018      	movs	r0, r3
 8010038:	46bd      	mov	sp, r7
 801003a:	b004      	add	sp, #16
 801003c:	bd80      	pop	{r7, pc}

0801003e <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 801003e:	b580      	push	{r7, lr}
 8010040:	b082      	sub	sp, #8
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
 8010046:	0008      	movs	r0, r1
 8010048:	0011      	movs	r1, r2
 801004a:	1cbb      	adds	r3, r7, #2
 801004c:	1c02      	adds	r2, r0, #0
 801004e:	801a      	strh	r2, [r3, #0]
 8010050:	1c7b      	adds	r3, r7, #1
 8010052:	1c0a      	adds	r2, r1, #0
 8010054:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8010056:	1cbb      	adds	r3, r7, #2
 8010058:	881a      	ldrh	r2, [r3, #0]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	0011      	movs	r1, r2
 801005e:	0018      	movs	r0, r3
 8010060:	f7ff ff96 	bl	800ff90 <sensirion_i2c_generate_crc>
 8010064:	0003      	movs	r3, r0
 8010066:	001a      	movs	r2, r3
 8010068:	1c7b      	adds	r3, r7, #1
 801006a:	781b      	ldrb	r3, [r3, #0]
 801006c:	4293      	cmp	r3, r2
 801006e:	d001      	beq.n	8010074 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8010070:	2301      	movs	r3, #1
 8010072:	e000      	b.n	8010076 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8010074:	2300      	movs	r3, #0
}
 8010076:	0018      	movs	r0, r3
 8010078:	46bd      	mov	sp, r7
 801007a:	b002      	add	sp, #8
 801007c:	bd80      	pop	{r7, pc}

0801007e <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 801007e:	b580      	push	{r7, lr}
 8010080:	b082      	sub	sp, #8
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
 8010086:	0008      	movs	r0, r1
 8010088:	0011      	movs	r1, r2
 801008a:	1cbb      	adds	r3, r7, #2
 801008c:	1c02      	adds	r2, r0, #0
 801008e:	801a      	strh	r2, [r3, #0]
 8010090:	003b      	movs	r3, r7
 8010092:	1c0a      	adds	r2, r1, #0
 8010094:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8010096:	003b      	movs	r3, r7
 8010098:	881b      	ldrh	r3, [r3, #0]
 801009a:	0a1b      	lsrs	r3, r3, #8
 801009c:	b299      	uxth	r1, r3
 801009e:	1cbb      	adds	r3, r7, #2
 80100a0:	881b      	ldrh	r3, [r3, #0]
 80100a2:	1cba      	adds	r2, r7, #2
 80100a4:	1c58      	adds	r0, r3, #1
 80100a6:	8010      	strh	r0, [r2, #0]
 80100a8:	001a      	movs	r2, r3
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	189b      	adds	r3, r3, r2
 80100ae:	b2ca      	uxtb	r2, r1
 80100b0:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 80100b2:	1cbb      	adds	r3, r7, #2
 80100b4:	881b      	ldrh	r3, [r3, #0]
 80100b6:	1cba      	adds	r2, r7, #2
 80100b8:	1c59      	adds	r1, r3, #1
 80100ba:	8011      	strh	r1, [r2, #0]
 80100bc:	001a      	movs	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	189b      	adds	r3, r3, r2
 80100c2:	003a      	movs	r2, r7
 80100c4:	8812      	ldrh	r2, [r2, #0]
 80100c6:	b2d2      	uxtb	r2, r2
 80100c8:	701a      	strb	r2, [r3, #0]
    return offset;
 80100ca:	1cbb      	adds	r3, r7, #2
 80100cc:	881b      	ldrh	r3, [r3, #0]
}
 80100ce:	0018      	movs	r0, r3
 80100d0:	46bd      	mov	sp, r7
 80100d2:	b002      	add	sp, #8
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 80100d6:	b590      	push	{r4, r7, lr}
 80100d8:	b083      	sub	sp, #12
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
 80100de:	0008      	movs	r0, r1
 80100e0:	0011      	movs	r1, r2
 80100e2:	1cbb      	adds	r3, r7, #2
 80100e4:	1c02      	adds	r2, r0, #0
 80100e6:	801a      	strh	r2, [r3, #0]
 80100e8:	003b      	movs	r3, r7
 80100ea:	1c0a      	adds	r2, r1, #0
 80100ec:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 80100ee:	003b      	movs	r3, r7
 80100f0:	881b      	ldrh	r3, [r3, #0]
 80100f2:	0a1b      	lsrs	r3, r3, #8
 80100f4:	b299      	uxth	r1, r3
 80100f6:	1cbb      	adds	r3, r7, #2
 80100f8:	881b      	ldrh	r3, [r3, #0]
 80100fa:	1cba      	adds	r2, r7, #2
 80100fc:	1c58      	adds	r0, r3, #1
 80100fe:	8010      	strh	r0, [r2, #0]
 8010100:	001a      	movs	r2, r3
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	189b      	adds	r3, r3, r2
 8010106:	b2ca      	uxtb	r2, r1
 8010108:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 801010a:	1cbb      	adds	r3, r7, #2
 801010c:	881b      	ldrh	r3, [r3, #0]
 801010e:	1cba      	adds	r2, r7, #2
 8010110:	1c59      	adds	r1, r3, #1
 8010112:	8011      	strh	r1, [r2, #0]
 8010114:	001a      	movs	r2, r3
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	189b      	adds	r3, r3, r2
 801011a:	003a      	movs	r2, r7
 801011c:	8812      	ldrh	r2, [r2, #0]
 801011e:	b2d2      	uxtb	r2, r2
 8010120:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8010122:	1cbb      	adds	r3, r7, #2
 8010124:	881b      	ldrh	r3, [r3, #0]
 8010126:	3b02      	subs	r3, #2
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 801012c:	1cbb      	adds	r3, r7, #2
 801012e:	881b      	ldrh	r3, [r3, #0]
 8010130:	687a      	ldr	r2, [r7, #4]
 8010132:	18d4      	adds	r4, r2, r3
 8010134:	2102      	movs	r1, #2
 8010136:	f7ff ff2b 	bl	800ff90 <sensirion_i2c_generate_crc>
 801013a:	0003      	movs	r3, r0
 801013c:	7023      	strb	r3, [r4, #0]
    offset++;
 801013e:	1cbb      	adds	r3, r7, #2
 8010140:	881a      	ldrh	r2, [r3, #0]
 8010142:	1cbb      	adds	r3, r7, #2
 8010144:	3201      	adds	r2, #1
 8010146:	801a      	strh	r2, [r3, #0]

    return offset;
 8010148:	1cbb      	adds	r3, r7, #2
 801014a:	881b      	ldrh	r3, [r3, #0]
}
 801014c:	0018      	movs	r0, r3
 801014e:	46bd      	mov	sp, r7
 8010150:	b003      	add	sp, #12
 8010152:	bd90      	pop	{r4, r7, pc}

08010154 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	0008      	movs	r0, r1
 801015e:	0011      	movs	r1, r2
 8010160:	1cbb      	adds	r3, r7, #2
 8010162:	1c02      	adds	r2, r0, #0
 8010164:	801a      	strh	r2, [r3, #0]
 8010166:	003b      	movs	r3, r7
 8010168:	1c0a      	adds	r2, r1, #0
 801016a:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 801016c:	003b      	movs	r3, r7
 801016e:	881a      	ldrh	r2, [r3, #0]
 8010170:	1cbb      	adds	r3, r7, #2
 8010172:	8819      	ldrh	r1, [r3, #0]
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	0018      	movs	r0, r3
 8010178:	f7ff ffad 	bl	80100d6 <sensirion_i2c_add_uint16_t_to_buffer>
 801017c:	0003      	movs	r3, r0
}
 801017e:	0018      	movs	r0, r3
 8010180:	46bd      	mov	sp, r7
 8010182:	b002      	add	sp, #8
 8010184:	bd80      	pop	{r7, pc}

08010186 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8010186:	b580      	push	{r7, lr}
 8010188:	b082      	sub	sp, #8
 801018a:	af00      	add	r7, sp, #0
 801018c:	6039      	str	r1, [r7, #0]
 801018e:	0011      	movs	r1, r2
 8010190:	1dfb      	adds	r3, r7, #7
 8010192:	1c02      	adds	r2, r0, #0
 8010194:	701a      	strb	r2, [r3, #0]
 8010196:	1d3b      	adds	r3, r7, #4
 8010198:	1c0a      	adds	r2, r1, #0
 801019a:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 801019c:	1d3b      	adds	r3, r7, #4
 801019e:	881a      	ldrh	r2, [r3, #0]
 80101a0:	6839      	ldr	r1, [r7, #0]
 80101a2:	1dfb      	adds	r3, r7, #7
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	0018      	movs	r0, r3
 80101a8:	f7fe f9b0 	bl	800e50c <sensirion_i2c_hal_write>
 80101ac:	0003      	movs	r3, r0
}
 80101ae:	0018      	movs	r0, r3
 80101b0:	46bd      	mov	sp, r7
 80101b2:	b002      	add	sp, #8
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 80101b6:	b5b0      	push	{r4, r5, r7, lr}
 80101b8:	b084      	sub	sp, #16
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6039      	str	r1, [r7, #0]
 80101be:	0011      	movs	r1, r2
 80101c0:	1dfb      	adds	r3, r7, #7
 80101c2:	1c02      	adds	r2, r0, #0
 80101c4:	701a      	strb	r2, [r3, #0]
 80101c6:	1d3b      	adds	r3, r7, #4
 80101c8:	1c0a      	adds	r2, r1, #0
 80101ca:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 80101cc:	1d3b      	adds	r3, r7, #4
 80101ce:	881b      	ldrh	r3, [r3, #0]
 80101d0:	085b      	lsrs	r3, r3, #1
 80101d2:	b29b      	uxth	r3, r3
 80101d4:	220a      	movs	r2, #10
 80101d6:	18ba      	adds	r2, r7, r2
 80101d8:	1c19      	adds	r1, r3, #0
 80101da:	1c0b      	adds	r3, r1, #0
 80101dc:	18db      	adds	r3, r3, r3
 80101de:	185b      	adds	r3, r3, r1
 80101e0:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 80101e2:	1d3b      	adds	r3, r7, #4
 80101e4:	881b      	ldrh	r3, [r3, #0]
 80101e6:	2201      	movs	r2, #1
 80101e8:	4013      	ands	r3, r2
 80101ea:	b29b      	uxth	r3, r3
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d001      	beq.n	80101f4 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 80101f0:	2304      	movs	r3, #4
 80101f2:	e06b      	b.n	80102cc <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 80101f4:	230a      	movs	r3, #10
 80101f6:	18fb      	adds	r3, r7, r3
 80101f8:	881a      	ldrh	r2, [r3, #0]
 80101fa:	6839      	ldr	r1, [r7, #0]
 80101fc:	1dfb      	adds	r3, r7, #7
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	0018      	movs	r0, r3
 8010202:	f7fe f963 	bl	800e4cc <sensirion_i2c_hal_read>
 8010206:	0003      	movs	r3, r0
 8010208:	001a      	movs	r2, r3
 801020a:	2108      	movs	r1, #8
 801020c:	187b      	adds	r3, r7, r1
 801020e:	801a      	strh	r2, [r3, #0]
    if (error) {
 8010210:	000a      	movs	r2, r1
 8010212:	18bb      	adds	r3, r7, r2
 8010214:	2100      	movs	r1, #0
 8010216:	5e5b      	ldrsh	r3, [r3, r1]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d003      	beq.n	8010224 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 801021c:	18bb      	adds	r3, r7, r2
 801021e:	2200      	movs	r2, #0
 8010220:	5e9b      	ldrsh	r3, [r3, r2]
 8010222:	e053      	b.n	80102cc <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010224:	230e      	movs	r3, #14
 8010226:	18fb      	adds	r3, r7, r3
 8010228:	2200      	movs	r2, #0
 801022a:	801a      	strh	r2, [r3, #0]
 801022c:	230c      	movs	r3, #12
 801022e:	18fb      	adds	r3, r7, r3
 8010230:	2200      	movs	r2, #0
 8010232:	801a      	strh	r2, [r3, #0]
 8010234:	e041      	b.n	80102ba <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010236:	210e      	movs	r1, #14
 8010238:	187b      	adds	r3, r7, r1
 801023a:	881b      	ldrh	r3, [r3, #0]
 801023c:	683a      	ldr	r2, [r7, #0]
 801023e:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8010240:	187b      	adds	r3, r7, r1
 8010242:	881b      	ldrh	r3, [r3, #0]
 8010244:	3302      	adds	r3, #2
 8010246:	683a      	ldr	r2, [r7, #0]
 8010248:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	001a      	movs	r2, r3
 801024e:	2102      	movs	r1, #2
 8010250:	f7ff fef5 	bl	801003e <sensirion_i2c_check_crc>
 8010254:	0003      	movs	r3, r0
 8010256:	001a      	movs	r2, r3
 8010258:	2108      	movs	r1, #8
 801025a:	187b      	adds	r3, r7, r1
 801025c:	801a      	strh	r2, [r3, #0]
        if (error) {
 801025e:	000a      	movs	r2, r1
 8010260:	18bb      	adds	r3, r7, r2
 8010262:	2100      	movs	r1, #0
 8010264:	5e5b      	ldrsh	r3, [r3, r1]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d003      	beq.n	8010272 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 801026a:	18bb      	adds	r3, r7, r2
 801026c:	2200      	movs	r2, #0
 801026e:	5e9b      	ldrsh	r3, [r3, r2]
 8010270:	e02c      	b.n	80102cc <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 8010272:	240e      	movs	r4, #14
 8010274:	193b      	adds	r3, r7, r4
 8010276:	881b      	ldrh	r3, [r3, #0]
 8010278:	683a      	ldr	r2, [r7, #0]
 801027a:	18d2      	adds	r2, r2, r3
 801027c:	250c      	movs	r5, #12
 801027e:	197b      	adds	r3, r7, r5
 8010280:	881b      	ldrh	r3, [r3, #0]
 8010282:	1979      	adds	r1, r7, r5
 8010284:	1c58      	adds	r0, r3, #1
 8010286:	8008      	strh	r0, [r1, #0]
 8010288:	0019      	movs	r1, r3
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	185b      	adds	r3, r3, r1
 801028e:	7812      	ldrb	r2, [r2, #0]
 8010290:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8010292:	193b      	adds	r3, r7, r4
 8010294:	881b      	ldrh	r3, [r3, #0]
 8010296:	3301      	adds	r3, #1
 8010298:	683a      	ldr	r2, [r7, #0]
 801029a:	18d2      	adds	r2, r2, r3
 801029c:	197b      	adds	r3, r7, r5
 801029e:	881b      	ldrh	r3, [r3, #0]
 80102a0:	1979      	adds	r1, r7, r5
 80102a2:	1c58      	adds	r0, r3, #1
 80102a4:	8008      	strh	r0, [r1, #0]
 80102a6:	0019      	movs	r1, r3
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	185b      	adds	r3, r3, r1
 80102ac:	7812      	ldrb	r2, [r2, #0]
 80102ae:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80102b0:	193b      	adds	r3, r7, r4
 80102b2:	193a      	adds	r2, r7, r4
 80102b4:	8812      	ldrh	r2, [r2, #0]
 80102b6:	3203      	adds	r2, #3
 80102b8:	801a      	strh	r2, [r3, #0]
 80102ba:	230e      	movs	r3, #14
 80102bc:	18fa      	adds	r2, r7, r3
 80102be:	230a      	movs	r3, #10
 80102c0:	18fb      	adds	r3, r7, r3
 80102c2:	8812      	ldrh	r2, [r2, #0]
 80102c4:	881b      	ldrh	r3, [r3, #0]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d3b5      	bcc.n	8010236 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 80102ca:	2300      	movs	r3, #0
}
 80102cc:	0018      	movs	r0, r3
 80102ce:	46bd      	mov	sp, r7
 80102d0:	b004      	add	sp, #16
 80102d2:	bdb0      	pop	{r4, r5, r7, pc}

080102d4 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80102d4:	b590      	push	{r4, r7, lr}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6039      	str	r1, [r7, #0]
 80102dc:	0011      	movs	r1, r2
 80102de:	1dfb      	adds	r3, r7, #7
 80102e0:	1c02      	adds	r2, r0, #0
 80102e2:	701a      	strb	r2, [r3, #0]
 80102e4:	1dbb      	adds	r3, r7, #6
 80102e6:	1c0a      	adds	r2, r1, #0
 80102e8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80102ea:	4b08      	ldr	r3, [pc, #32]	@ (801030c <ReadRegister+0x38>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d008      	beq.n	8010304 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 80102f2:	4b06      	ldr	r3, [pc, #24]	@ (801030c <ReadRegister+0x38>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	1dba      	adds	r2, r7, #6
 80102f8:	7814      	ldrb	r4, [r2, #0]
 80102fa:	6839      	ldr	r1, [r7, #0]
 80102fc:	1dfa      	adds	r2, r7, #7
 80102fe:	7810      	ldrb	r0, [r2, #0]
 8010300:	0022      	movs	r2, r4
 8010302:	4798      	blx	r3
  }
}
 8010304:	46c0      	nop			@ (mov r8, r8)
 8010306:	46bd      	mov	sp, r7
 8010308:	b003      	add	sp, #12
 801030a:	bd90      	pop	{r4, r7, pc}
 801030c:	20000ef8 	.word	0x20000ef8

08010310 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010310:	b590      	push	{r4, r7, lr}
 8010312:	b083      	sub	sp, #12
 8010314:	af00      	add	r7, sp, #0
 8010316:	6039      	str	r1, [r7, #0]
 8010318:	0011      	movs	r1, r2
 801031a:	1dfb      	adds	r3, r7, #7
 801031c:	1c02      	adds	r2, r0, #0
 801031e:	701a      	strb	r2, [r3, #0]
 8010320:	1dbb      	adds	r3, r7, #6
 8010322:	1c0a      	adds	r2, r1, #0
 8010324:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8010326:	4b08      	ldr	r3, [pc, #32]	@ (8010348 <WriteRegister+0x38>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d008      	beq.n	8010340 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 801032e:	4b06      	ldr	r3, [pc, #24]	@ (8010348 <WriteRegister+0x38>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	1dba      	adds	r2, r7, #6
 8010334:	7814      	ldrb	r4, [r2, #0]
 8010336:	6839      	ldr	r1, [r7, #0]
 8010338:	1dfa      	adds	r2, r7, #7
 801033a:	7810      	ldrb	r0, [r2, #0]
 801033c:	0022      	movs	r2, r4
 801033e:	4798      	blx	r3
  }
}
 8010340:	46c0      	nop			@ (mov r8, r8)
 8010342:	46bd      	mov	sp, r7
 8010344:	b003      	add	sp, #12
 8010346:	bd90      	pop	{r4, r7, pc}
 8010348:	20000efc 	.word	0x20000efc

0801034c <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 8010354:	f003 fd3a 	bl	8013dcc <HAL_GetTick>
 8010358:	0002      	movs	r2, r0
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	18d2      	adds	r2, r2, r3
 801035e:	4b03      	ldr	r3, [pc, #12]	@ (801036c <setSGP40TimeStamp+0x20>)
 8010360:	601a      	str	r2, [r3, #0]
}
 8010362:	46c0      	nop			@ (mov r8, r8)
 8010364:	46bd      	mov	sp, r7
 8010366:	b002      	add	sp, #8
 8010368:	bd80      	pop	{r7, pc}
 801036a:	46c0      	nop			@ (mov r8, r8)
 801036c:	20000f0c 	.word	0x20000f0c

08010370 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8010370:	b580      	push	{r7, lr}
 8010372:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 8010374:	4b02      	ldr	r3, [pc, #8]	@ (8010380 <ResetSGP40samplecounter+0x10>)
 8010376:	2200      	movs	r2, #0
 8010378:	701a      	strb	r2, [r3, #0]
}
 801037a:	46c0      	nop			@ (mov r8, r8)
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}
 8010380:	20000f0a 	.word	0x20000f0a

08010384 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010384:	b580      	push	{r7, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 801038e:	4b07      	ldr	r3, [pc, #28]	@ (80103ac <SGP_Init+0x28>)
 8010390:	687a      	ldr	r2, [r7, #4]
 8010392:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8010394:	4b06      	ldr	r3, [pc, #24]	@ (80103b0 <SGP_Init+0x2c>)
 8010396:	683a      	ldr	r2, [r7, #0]
 8010398:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 801039a:	4b06      	ldr	r3, [pc, #24]	@ (80103b4 <SGP_Init+0x30>)
 801039c:	2100      	movs	r1, #0
 801039e:	0018      	movs	r0, r3
 80103a0:	f7fe ff72 	bl	800f288 <GasIndexAlgorithm_init>
}
 80103a4:	46c0      	nop			@ (mov r8, r8)
 80103a6:	46bd      	mov	sp, r7
 80103a8:	b002      	add	sp, #8
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	20000ef8 	.word	0x20000ef8
 80103b0:	20000efc 	.word	0x20000efc
 80103b4:	20000f14 	.word	0x20000f14

080103b8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 80103b8:	b580      	push	{r7, lr}
 80103ba:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 80103bc:	4b07      	ldr	r3, [pc, #28]	@ (80103dc <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d004      	beq.n	80103ce <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 80103c4:	4b06      	ldr	r3, [pc, #24]	@ (80103e0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 80103c6:	22fe      	movs	r2, #254	@ 0xfe
 80103c8:	0592      	lsls	r2, r2, #22
 80103ca:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 80103cc:	e002      	b.n	80103d4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 80103ce:	4b04      	ldr	r3, [pc, #16]	@ (80103e0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 80103d0:	4a04      	ldr	r2, [pc, #16]	@ (80103e4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 80103d2:	605a      	str	r2, [r3, #4]
}
 80103d4:	46c0      	nop			@ (mov r8, r8)
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}
 80103da:	46c0      	nop			@ (mov r8, r8)
 80103dc:	20001e61 	.word	0x20001e61
 80103e0:	20000f14 	.word	0x20000f14
 80103e4:	44610000 	.word	0x44610000

080103e8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80103e8:	b580      	push	{r7, lr}
 80103ea:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 80103ec:	4b13      	ldr	r3, [pc, #76]	@ (801043c <SGP_StartMeasurement+0x54>)
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d00d      	beq.n	8010410 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80103f4:	4b12      	ldr	r3, [pc, #72]	@ (8010440 <SGP_StartMeasurement+0x58>)
 80103f6:	2208      	movs	r2, #8
 80103f8:	0019      	movs	r1, r3
 80103fa:	2059      	movs	r0, #89	@ 0x59
 80103fc:	f7ff ff88 	bl	8010310 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010400:	f003 fce4 	bl	8013dcc <HAL_GetTick>
 8010404:	0003      	movs	r3, r0
 8010406:	331e      	adds	r3, #30
 8010408:	001a      	movs	r2, r3
 801040a:	4b0e      	ldr	r3, [pc, #56]	@ (8010444 <SGP_StartMeasurement+0x5c>)
 801040c:	601a      	str	r2, [r3, #0]
 801040e:	e00c      	b.n	801042a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010410:	4b0d      	ldr	r3, [pc, #52]	@ (8010448 <SGP_StartMeasurement+0x60>)
 8010412:	2208      	movs	r2, #8
 8010414:	0019      	movs	r1, r3
 8010416:	2059      	movs	r0, #89	@ 0x59
 8010418:	f7ff ff7a 	bl	8010310 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 801041c:	f003 fcd6 	bl	8013dcc <HAL_GetTick>
 8010420:	0003      	movs	r3, r0
 8010422:	33aa      	adds	r3, #170	@ 0xaa
 8010424:	001a      	movs	r2, r3
 8010426:	4b09      	ldr	r3, [pc, #36]	@ (801044c <SGP_StartMeasurement+0x64>)
 8010428:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 801042a:	4b09      	ldr	r3, [pc, #36]	@ (8010450 <SGP_StartMeasurement+0x68>)
 801042c:	2200      	movs	r2, #0
 801042e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8010430:	4b08      	ldr	r3, [pc, #32]	@ (8010454 <SGP_StartMeasurement+0x6c>)
 8010432:	2200      	movs	r2, #0
 8010434:	701a      	strb	r2, [r3, #0]
}
 8010436:	46c0      	nop			@ (mov r8, r8)
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}
 801043c:	20000fbc 	.word	0x20000fbc
 8010440:	200000b0 	.word	0x200000b0
 8010444:	200000c4 	.word	0x200000c4
 8010448:	200000a8 	.word	0x200000a8
 801044c:	200000bc 	.word	0x200000bc
 8010450:	20000f10 	.word	0x20000f10
 8010454:	20000f11 	.word	0x20000f11

08010458 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 8010458:	b580      	push	{r7, lr}
 801045a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 801045c:	4b04      	ldr	r3, [pc, #16]	@ (8010470 <SGP_HeatedUp+0x18>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	0018      	movs	r0, r3
 8010462:	f002 ff1d 	bl	80132a0 <TimestampIsReached>
 8010466:	0003      	movs	r3, r0
}
 8010468:	0018      	movs	r0, r3
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	46c0      	nop			@ (mov r8, r8)
 8010470:	200000bc 	.word	0x200000bc

08010474 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8010474:	b580      	push	{r7, lr}
 8010476:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8010478:	4b04      	ldr	r3, [pc, #16]	@ (801048c <SGP_MeasurementReady+0x18>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	0018      	movs	r0, r3
 801047e:	f002 ff0f 	bl	80132a0 <TimestampIsReached>
 8010482:	0003      	movs	r3, r0
}
 8010484:	0018      	movs	r0, r3
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}
 801048a:	46c0      	nop			@ (mov r8, r8)
 801048c:	200000c4 	.word	0x200000c4

08010490 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8010490:	b580      	push	{r7, lr}
 8010492:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8010494:	4b04      	ldr	r3, [pc, #16]	@ (80104a8 <SGP_MeasurementDone+0x18>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	0018      	movs	r0, r3
 801049a:	f002 ff01 	bl	80132a0 <TimestampIsReached>
 801049e:	0003      	movs	r3, r0
}
 80104a0:	0018      	movs	r0, r3
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	46c0      	nop			@ (mov r8, r8)
 80104a8:	200000c0 	.word	0x200000c0

080104ac <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80104ac:	b580      	push	{r7, lr}
 80104ae:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80104b0:	4b04      	ldr	r3, [pc, #16]	@ (80104c4 <SGP_TurnHeaterOff+0x18>)
 80104b2:	2202      	movs	r2, #2
 80104b4:	0019      	movs	r1, r3
 80104b6:	2059      	movs	r0, #89	@ 0x59
 80104b8:	f7ff ff2a 	bl	8010310 <WriteRegister>
}
 80104bc:	46c0      	nop			@ (mov r8, r8)
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}
 80104c2:	46c0      	nop			@ (mov r8, r8)
 80104c4:	200000a0 	.word	0x200000a0

080104c8 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80104c8:	b590      	push	{r4, r7, lr}
 80104ca:	b087      	sub	sp, #28
 80104cc:	af02      	add	r7, sp, #8
 80104ce:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80104d0:	f7ff ffc2 	bl	8010458 <SGP_HeatedUp>
 80104d4:	1e03      	subs	r3, r0, #0
 80104d6:	d032      	beq.n	801053e <SGP_GetMeasurementValues+0x76>
 80104d8:	4b80      	ldr	r3, [pc, #512]	@ (80106dc <SGP_GetMeasurementValues+0x214>)
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	2201      	movs	r2, #1
 80104de:	4053      	eors	r3, r2
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d02b      	beq.n	801053e <SGP_GetMeasurementValues+0x76>
 80104e6:	4b7e      	ldr	r3, [pc, #504]	@ (80106e0 <SGP_GetMeasurementValues+0x218>)
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	2201      	movs	r2, #1
 80104ec:	4053      	eors	r3, r2
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d024      	beq.n	801053e <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 80104f4:	4b79      	ldr	r3, [pc, #484]	@ (80106dc <SGP_GetMeasurementValues+0x214>)
 80104f6:	2201      	movs	r2, #1
 80104f8:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80104fa:	4b7a      	ldr	r3, [pc, #488]	@ (80106e4 <SGP_GetMeasurementValues+0x21c>)
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d00d      	beq.n	801051e <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010502:	4b79      	ldr	r3, [pc, #484]	@ (80106e8 <SGP_GetMeasurementValues+0x220>)
 8010504:	2208      	movs	r2, #8
 8010506:	0019      	movs	r1, r3
 8010508:	2059      	movs	r0, #89	@ 0x59
 801050a:	f7ff ff01 	bl	8010310 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 801050e:	f003 fc5d 	bl	8013dcc <HAL_GetTick>
 8010512:	0003      	movs	r3, r0
 8010514:	331e      	adds	r3, #30
 8010516:	001a      	movs	r2, r3
 8010518:	4b74      	ldr	r3, [pc, #464]	@ (80106ec <SGP_GetMeasurementValues+0x224>)
 801051a:	601a      	str	r2, [r3, #0]
 801051c:	e00c      	b.n	8010538 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 801051e:	4b74      	ldr	r3, [pc, #464]	@ (80106f0 <SGP_GetMeasurementValues+0x228>)
 8010520:	2208      	movs	r2, #8
 8010522:	0019      	movs	r1, r3
 8010524:	2059      	movs	r0, #89	@ 0x59
 8010526:	f7ff fef3 	bl	8010310 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 801052a:	f003 fc4f 	bl	8013dcc <HAL_GetTick>
 801052e:	0003      	movs	r3, r0
 8010530:	331e      	adds	r3, #30
 8010532:	001a      	movs	r2, r3
 8010534:	4b6d      	ldr	r3, [pc, #436]	@ (80106ec <SGP_GetMeasurementValues+0x224>)
 8010536:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8010538:	4b69      	ldr	r3, [pc, #420]	@ (80106e0 <SGP_GetMeasurementValues+0x218>)
 801053a:	2201      	movs	r2, #1
 801053c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 801053e:	4b67      	ldr	r3, [pc, #412]	@ (80106dc <SGP_GetMeasurementValues+0x214>)
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d100      	bne.n	8010548 <SGP_GetMeasurementValues+0x80>
 8010546:	e0ac      	b.n	80106a2 <SGP_GetMeasurementValues+0x1da>
 8010548:	f7ff ff94 	bl	8010474 <SGP_MeasurementReady>
 801054c:	1e03      	subs	r3, r0, #0
 801054e:	d100      	bne.n	8010552 <SGP_GetMeasurementValues+0x8a>
 8010550:	e0a7      	b.n	80106a2 <SGP_GetMeasurementValues+0x1da>
 8010552:	4b68      	ldr	r3, [pc, #416]	@ (80106f4 <SGP_GetMeasurementValues+0x22c>)
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	2201      	movs	r2, #1
 8010558:	4053      	eors	r3, r2
 801055a:	b2db      	uxtb	r3, r3
 801055c:	2b00      	cmp	r3, #0
 801055e:	d100      	bne.n	8010562 <SGP_GetMeasurementValues+0x9a>
 8010560:	e09f      	b.n	80106a2 <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 8010562:	4b64      	ldr	r3, [pc, #400]	@ (80106f4 <SGP_GetMeasurementValues+0x22c>)
 8010564:	2201      	movs	r2, #1
 8010566:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8010568:	4b63      	ldr	r3, [pc, #396]	@ (80106f8 <SGP_GetMeasurementValues+0x230>)
 801056a:	2203      	movs	r2, #3
 801056c:	0019      	movs	r1, r3
 801056e:	2059      	movs	r0, #89	@ 0x59
 8010570:	f7ff feb0 	bl	80102d4 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8010574:	4b60      	ldr	r3, [pc, #384]	@ (80106f8 <SGP_GetMeasurementValues+0x230>)
 8010576:	2203      	movs	r2, #3
 8010578:	2103      	movs	r1, #3
 801057a:	0018      	movs	r0, r3
 801057c:	f000 f91a 	bl	80107b4 <CheckCRC>
 8010580:	0003      	movs	r3, r0
 8010582:	001a      	movs	r2, r3
 8010584:	2301      	movs	r3, #1
 8010586:	4053      	eors	r3, r2
 8010588:	b2db      	uxtb	r3, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	d02a      	beq.n	80105e4 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 801058e:	4a5b      	ldr	r2, [pc, #364]	@ (80106fc <SGP_GetMeasurementValues+0x234>)
 8010590:	4b5b      	ldr	r3, [pc, #364]	@ (8010700 <SGP_GetMeasurementValues+0x238>)
 8010592:	0019      	movs	r1, r3
 8010594:	2001      	movs	r0, #1
 8010596:	f002 fed9 	bl	801334c <CreateLine>
      Info("SGP_Measure buffer structure:");
 801059a:	4a5a      	ldr	r2, [pc, #360]	@ (8010704 <SGP_GetMeasurementValues+0x23c>)
 801059c:	4b5a      	ldr	r3, [pc, #360]	@ (8010708 <SGP_GetMeasurementValues+0x240>)
 801059e:	0019      	movs	r1, r3
 80105a0:	2002      	movs	r0, #2
 80105a2:	f002 fed3 	bl	801334c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80105a6:	230f      	movs	r3, #15
 80105a8:	18fb      	adds	r3, r7, r3
 80105aa:	2200      	movs	r2, #0
 80105ac:	701a      	strb	r2, [r3, #0]
 80105ae:	e012      	b.n	80105d6 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 80105b0:	240f      	movs	r4, #15
 80105b2:	193b      	adds	r3, r7, r4
 80105b4:	7818      	ldrb	r0, [r3, #0]
 80105b6:	193b      	adds	r3, r7, r4
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	4a4f      	ldr	r2, [pc, #316]	@ (80106f8 <SGP_GetMeasurementValues+0x230>)
 80105bc:	5cd3      	ldrb	r3, [r2, r3]
 80105be:	4a53      	ldr	r2, [pc, #332]	@ (801070c <SGP_GetMeasurementValues+0x244>)
 80105c0:	4953      	ldr	r1, [pc, #332]	@ (8010710 <SGP_GetMeasurementValues+0x248>)
 80105c2:	9300      	str	r3, [sp, #0]
 80105c4:	0003      	movs	r3, r0
 80105c6:	2003      	movs	r0, #3
 80105c8:	f002 fec0 	bl	801334c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80105cc:	193b      	adds	r3, r7, r4
 80105ce:	781a      	ldrb	r2, [r3, #0]
 80105d0:	193b      	adds	r3, r7, r4
 80105d2:	3201      	adds	r2, #1
 80105d4:	701a      	strb	r2, [r3, #0]
 80105d6:	230f      	movs	r3, #15
 80105d8:	18fb      	adds	r3, r7, r3
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	2b02      	cmp	r3, #2
 80105de:	d9e7      	bls.n	80105b0 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 80105e0:	2300      	movs	r3, #0
 80105e2:	e076      	b.n	80106d2 <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 80105e4:	f003 fbf2 	bl	8013dcc <HAL_GetTick>
 80105e8:	0003      	movs	r3, r0
 80105ea:	22fa      	movs	r2, #250	@ 0xfa
 80105ec:	0092      	lsls	r2, r2, #2
 80105ee:	189a      	adds	r2, r3, r2
 80105f0:	4b48      	ldr	r3, [pc, #288]	@ (8010714 <SGP_GetMeasurementValues+0x24c>)
 80105f2:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80105f4:	f7ff ff5a 	bl	80104ac <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 80105f8:	4b47      	ldr	r3, [pc, #284]	@ (8010718 <SGP_GetMeasurementValues+0x250>)
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	3301      	adds	r3, #1
 80105fe:	b2da      	uxtb	r2, r3
 8010600:	4b45      	ldr	r3, [pc, #276]	@ (8010718 <SGP_GetMeasurementValues+0x250>)
 8010602:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8010604:	4b44      	ldr	r3, [pc, #272]	@ (8010718 <SGP_GetMeasurementValues+0x250>)
 8010606:	781a      	ldrb	r2, [r3, #0]
 8010608:	4b44      	ldr	r3, [pc, #272]	@ (801071c <SGP_GetMeasurementValues+0x254>)
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	429a      	cmp	r2, r3
 801060e:	d348      	bcc.n	80106a2 <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8010610:	4b39      	ldr	r3, [pc, #228]	@ (80106f8 <SGP_GetMeasurementValues+0x230>)
 8010612:	785b      	ldrb	r3, [r3, #1]
 8010614:	b21b      	sxth	r3, r3
 8010616:	021b      	lsls	r3, r3, #8
 8010618:	b21a      	sxth	r2, r3
 801061a:	4b37      	ldr	r3, [pc, #220]	@ (80106f8 <SGP_GetMeasurementValues+0x230>)
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	b21b      	sxth	r3, r3
 8010620:	4313      	orrs	r3, r2
 8010622:	b21a      	sxth	r2, r3
 8010624:	240c      	movs	r4, #12
 8010626:	193b      	adds	r3, r7, r4
 8010628:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 801062a:	2300      	movs	r3, #0
 801062c:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 801062e:	193b      	adds	r3, r7, r4
 8010630:	8819      	ldrh	r1, [r3, #0]
 8010632:	2308      	movs	r3, #8
 8010634:	18fa      	adds	r2, r7, r3
 8010636:	4b3a      	ldr	r3, [pc, #232]	@ (8010720 <SGP_GetMeasurementValues+0x258>)
 8010638:	0018      	movs	r0, r3
 801063a:	f7fe fe87 	bl	800f34c <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 801063e:	68ba      	ldr	r2, [r7, #8]
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 8010644:	4b37      	ldr	r3, [pc, #220]	@ (8010724 <SGP_GetMeasurementValues+0x25c>)
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	3301      	adds	r3, #1
 801064a:	b2da      	uxtb	r2, r3
 801064c:	4b35      	ldr	r3, [pc, #212]	@ (8010724 <SGP_GetMeasurementValues+0x25c>)
 801064e:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 8010650:	4b34      	ldr	r3, [pc, #208]	@ (8010724 <SGP_GetMeasurementValues+0x25c>)
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	2b01      	cmp	r3, #1
 8010656:	d10d      	bne.n	8010674 <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 8010658:	193b      	adds	r3, r7, r4
 801065a:	881b      	ldrh	r3, [r3, #0]
 801065c:	4a32      	ldr	r2, [pc, #200]	@ (8010728 <SGP_GetMeasurementValues+0x260>)
 801065e:	492c      	ldr	r1, [pc, #176]	@ (8010710 <SGP_GetMeasurementValues+0x248>)
 8010660:	2003      	movs	r0, #3
 8010662:	f002 fe73 	bl	801334c <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	4a30      	ldr	r2, [pc, #192]	@ (801072c <SGP_GetMeasurementValues+0x264>)
 801066a:	4929      	ldr	r1, [pc, #164]	@ (8010710 <SGP_GetMeasurementValues+0x248>)
 801066c:	2003      	movs	r0, #3
 801066e:	f002 fe6d 	bl	801334c <CreateLine>
 8010672:	e006      	b.n	8010682 <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 8010674:	4b2b      	ldr	r3, [pc, #172]	@ (8010724 <SGP_GetMeasurementValues+0x25c>)
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	2b0b      	cmp	r3, #11
 801067a:	d102      	bne.n	8010682 <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 801067c:	4b29      	ldr	r3, [pc, #164]	@ (8010724 <SGP_GetMeasurementValues+0x25c>)
 801067e:	2200      	movs	r2, #0
 8010680:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	b29b      	uxth	r3, r3
 8010686:	0018      	movs	r0, r3
 8010688:	f001 fdd2 	bl	8012230 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 801068c:	4b22      	ldr	r3, [pc, #136]	@ (8010718 <SGP_GetMeasurementValues+0x250>)
 801068e:	2200      	movs	r2, #0
 8010690:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 8010692:	4b14      	ldr	r3, [pc, #80]	@ (80106e4 <SGP_GetMeasurementValues+0x21c>)
 8010694:	2200      	movs	r2, #0
 8010696:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8010698:	4b11      	ldr	r3, [pc, #68]	@ (80106e0 <SGP_GetMeasurementValues+0x218>)
 801069a:	2200      	movs	r2, #0
 801069c:	701a      	strb	r2, [r3, #0]
      return true;
 801069e:	2301      	movs	r3, #1
 80106a0:	e017      	b.n	80106d2 <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80106a2:	f7ff fef5 	bl	8010490 <SGP_MeasurementDone>
 80106a6:	1e03      	subs	r3, r0, #0
 80106a8:	d012      	beq.n	80106d0 <SGP_GetMeasurementValues+0x208>
 80106aa:	4b0c      	ldr	r3, [pc, #48]	@ (80106dc <SGP_GetMeasurementValues+0x214>)
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d00e      	beq.n	80106d0 <SGP_GetMeasurementValues+0x208>
 80106b2:	4b10      	ldr	r3, [pc, #64]	@ (80106f4 <SGP_GetMeasurementValues+0x22c>)
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d00a      	beq.n	80106d0 <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80106ba:	4a1d      	ldr	r2, [pc, #116]	@ (8010730 <SGP_GetMeasurementValues+0x268>)
 80106bc:	4b14      	ldr	r3, [pc, #80]	@ (8010710 <SGP_GetMeasurementValues+0x248>)
 80106be:	0019      	movs	r1, r3
 80106c0:	2003      	movs	r0, #3
 80106c2:	f002 fe43 	bl	801334c <CreateLine>
    SGP_StartMeasurement();
 80106c6:	f7ff fe8f 	bl	80103e8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80106ca:	4b05      	ldr	r3, [pc, #20]	@ (80106e0 <SGP_GetMeasurementValues+0x218>)
 80106cc:	2200      	movs	r2, #0
 80106ce:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80106d0:	2300      	movs	r3, #0
}
 80106d2:	0018      	movs	r0, r3
 80106d4:	46bd      	mov	sp, r7
 80106d6:	b005      	add	sp, #20
 80106d8:	bd90      	pop	{r4, r7, pc}
 80106da:	46c0      	nop			@ (mov r8, r8)
 80106dc:	20000f10 	.word	0x20000f10
 80106e0:	20000fbd 	.word	0x20000fbd
 80106e4:	20000fbc 	.word	0x20000fbc
 80106e8:	200000b0 	.word	0x200000b0
 80106ec:	200000c4 	.word	0x200000c4
 80106f0:	200000a8 	.word	0x200000a8
 80106f4:	20000f11 	.word	0x20000f11
 80106f8:	20000f00 	.word	0x20000f00
 80106fc:	0802d2f4 	.word	0x0802d2f4
 8010700:	0802d31c 	.word	0x0802d31c
 8010704:	0802d320 	.word	0x0802d320
 8010708:	0802d340 	.word	0x0802d340
 801070c:	0802d344 	.word	0x0802d344
 8010710:	0802d364 	.word	0x0802d364
 8010714:	200000c0 	.word	0x200000c0
 8010718:	20000f09 	.word	0x20000f09
 801071c:	200000ba 	.word	0x200000ba
 8010720:	20000f14 	.word	0x20000f14
 8010724:	20000f0a 	.word	0x20000f0a
 8010728:	0802d368 	.word	0x0802d368
 801072c:	0802d384 	.word	0x0802d384
 8010730:	0802d3a0 	.word	0x0802d3a0

08010734 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 801073a:	4b1a      	ldr	r3, [pc, #104]	@ (80107a4 <SGP_DeviceConnected+0x70>)
 801073c:	2202      	movs	r2, #2
 801073e:	0019      	movs	r1, r3
 8010740:	2059      	movs	r0, #89	@ 0x59
 8010742:	f7ff fde5 	bl	8010310 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8010746:	2001      	movs	r0, #1
 8010748:	f003 fb4a 	bl	8013de0 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 801074c:	4b16      	ldr	r3, [pc, #88]	@ (80107a8 <SGP_DeviceConnected+0x74>)
 801074e:	2209      	movs	r2, #9
 8010750:	0019      	movs	r1, r3
 8010752:	2059      	movs	r0, #89	@ 0x59
 8010754:	f7ff fdbe 	bl	80102d4 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8010758:	1dfb      	adds	r3, r7, #7
 801075a:	2200      	movs	r2, #0
 801075c:	701a      	strb	r2, [r3, #0]
 801075e:	e011      	b.n	8010784 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8010760:	1dfb      	adds	r3, r7, #7
 8010762:	7818      	ldrb	r0, [r3, #0]
 8010764:	1dfb      	adds	r3, r7, #7
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	4a0f      	ldr	r2, [pc, #60]	@ (80107a8 <SGP_DeviceConnected+0x74>)
 801076a:	5cd3      	ldrb	r3, [r2, r3]
 801076c:	4a0f      	ldr	r2, [pc, #60]	@ (80107ac <SGP_DeviceConnected+0x78>)
 801076e:	4910      	ldr	r1, [pc, #64]	@ (80107b0 <SGP_DeviceConnected+0x7c>)
 8010770:	9300      	str	r3, [sp, #0]
 8010772:	0003      	movs	r3, r0
 8010774:	2002      	movs	r0, #2
 8010776:	f002 fde9 	bl	801334c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 801077a:	1dfb      	adds	r3, r7, #7
 801077c:	781a      	ldrb	r2, [r3, #0]
 801077e:	1dfb      	adds	r3, r7, #7
 8010780:	3201      	adds	r2, #1
 8010782:	701a      	strb	r2, [r3, #0]
 8010784:	1dfb      	adds	r3, r7, #7
 8010786:	781b      	ldrb	r3, [r3, #0]
 8010788:	2b08      	cmp	r3, #8
 801078a:	d9e9      	bls.n	8010760 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 801078c:	4b06      	ldr	r3, [pc, #24]	@ (80107a8 <SGP_DeviceConnected+0x74>)
 801078e:	2203      	movs	r2, #3
 8010790:	2109      	movs	r1, #9
 8010792:	0018      	movs	r0, r3
 8010794:	f000 f80e 	bl	80107b4 <CheckCRC>
 8010798:	0003      	movs	r3, r0
}
 801079a:	0018      	movs	r0, r3
 801079c:	46bd      	mov	sp, r7
 801079e:	b002      	add	sp, #8
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	46c0      	nop			@ (mov r8, r8)
 80107a4:	200000a4 	.word	0x200000a4
 80107a8:	20000f00 	.word	0x20000f00
 80107ac:	0802d3c0 	.word	0x0802d3c0
 80107b0:	0802d340 	.word	0x0802d340

080107b4 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80107b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107b6:	b08f      	sub	sp, #60	@ 0x3c
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6278      	str	r0, [r7, #36]	@ 0x24
 80107bc:	0008      	movs	r0, r1
 80107be:	0011      	movs	r1, r2
 80107c0:	2323      	movs	r3, #35	@ 0x23
 80107c2:	18fb      	adds	r3, r7, r3
 80107c4:	1c02      	adds	r2, r0, #0
 80107c6:	701a      	strb	r2, [r3, #0]
 80107c8:	2322      	movs	r3, #34	@ 0x22
 80107ca:	18fb      	adds	r3, r7, r3
 80107cc:	1c0a      	adds	r2, r1, #0
 80107ce:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80107d0:	2317      	movs	r3, #23
 80107d2:	2220      	movs	r2, #32
 80107d4:	189b      	adds	r3, r3, r2
 80107d6:	19db      	adds	r3, r3, r7
 80107d8:	2200      	movs	r2, #0
 80107da:	701a      	strb	r2, [r3, #0]
 80107dc:	e09f      	b.n	801091e <CheckCRC+0x16a>
 80107de:	466b      	mov	r3, sp
 80107e0:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80107e2:	2322      	movs	r3, #34	@ 0x22
 80107e4:	18fb      	adds	r3, r7, r3
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	001a      	movs	r2, r3
 80107ea:	3a01      	subs	r2, #1
 80107ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80107ee:	60bb      	str	r3, [r7, #8]
 80107f0:	2200      	movs	r2, #0
 80107f2:	60fa      	str	r2, [r7, #12]
 80107f4:	68b8      	ldr	r0, [r7, #8]
 80107f6:	68f9      	ldr	r1, [r7, #12]
 80107f8:	0002      	movs	r2, r0
 80107fa:	0f52      	lsrs	r2, r2, #29
 80107fc:	000c      	movs	r4, r1
 80107fe:	00e4      	lsls	r4, r4, #3
 8010800:	61fc      	str	r4, [r7, #28]
 8010802:	69fc      	ldr	r4, [r7, #28]
 8010804:	4314      	orrs	r4, r2
 8010806:	61fc      	str	r4, [r7, #28]
 8010808:	0002      	movs	r2, r0
 801080a:	00d2      	lsls	r2, r2, #3
 801080c:	61ba      	str	r2, [r7, #24]
 801080e:	603b      	str	r3, [r7, #0]
 8010810:	2200      	movs	r2, #0
 8010812:	607a      	str	r2, [r7, #4]
 8010814:	6838      	ldr	r0, [r7, #0]
 8010816:	6879      	ldr	r1, [r7, #4]
 8010818:	0002      	movs	r2, r0
 801081a:	0f52      	lsrs	r2, r2, #29
 801081c:	000c      	movs	r4, r1
 801081e:	00e4      	lsls	r4, r4, #3
 8010820:	617c      	str	r4, [r7, #20]
 8010822:	697c      	ldr	r4, [r7, #20]
 8010824:	4314      	orrs	r4, r2
 8010826:	617c      	str	r4, [r7, #20]
 8010828:	0002      	movs	r2, r0
 801082a:	00d2      	lsls	r2, r2, #3
 801082c:	613a      	str	r2, [r7, #16]
 801082e:	3307      	adds	r3, #7
 8010830:	08db      	lsrs	r3, r3, #3
 8010832:	00db      	lsls	r3, r3, #3
 8010834:	466a      	mov	r2, sp
 8010836:	1ad3      	subs	r3, r2, r3
 8010838:	469d      	mov	sp, r3
 801083a:	466b      	mov	r3, sp
 801083c:	3300      	adds	r3, #0
 801083e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8010840:	2316      	movs	r3, #22
 8010842:	2220      	movs	r2, #32
 8010844:	189b      	adds	r3, r3, r2
 8010846:	19db      	adds	r3, r3, r7
 8010848:	2200      	movs	r2, #0
 801084a:	701a      	strb	r2, [r3, #0]
 801084c:	e01e      	b.n	801088c <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 801084e:	2317      	movs	r3, #23
 8010850:	2220      	movs	r2, #32
 8010852:	189b      	adds	r3, r3, r2
 8010854:	19db      	adds	r3, r3, r7
 8010856:	781a      	ldrb	r2, [r3, #0]
 8010858:	2116      	movs	r1, #22
 801085a:	2320      	movs	r3, #32
 801085c:	18cb      	adds	r3, r1, r3
 801085e:	19db      	adds	r3, r3, r7
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	18d3      	adds	r3, r2, r3
 8010864:	001a      	movs	r2, r3
 8010866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010868:	189a      	adds	r2, r3, r2
 801086a:	0008      	movs	r0, r1
 801086c:	2320      	movs	r3, #32
 801086e:	18cb      	adds	r3, r1, r3
 8010870:	19db      	adds	r3, r3, r7
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	7811      	ldrb	r1, [r2, #0]
 8010876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010878:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 801087a:	2320      	movs	r3, #32
 801087c:	18c3      	adds	r3, r0, r3
 801087e:	19db      	adds	r3, r3, r7
 8010880:	781a      	ldrb	r2, [r3, #0]
 8010882:	2320      	movs	r3, #32
 8010884:	18c3      	adds	r3, r0, r3
 8010886:	19db      	adds	r3, r3, r7
 8010888:	3201      	adds	r2, #1
 801088a:	701a      	strb	r2, [r3, #0]
 801088c:	2316      	movs	r3, #22
 801088e:	2220      	movs	r2, #32
 8010890:	189b      	adds	r3, r3, r2
 8010892:	19da      	adds	r2, r3, r7
 8010894:	2322      	movs	r3, #34	@ 0x22
 8010896:	18fb      	adds	r3, r7, r3
 8010898:	7812      	ldrb	r2, [r2, #0]
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	429a      	cmp	r2, r3
 801089e:	d3d6      	bcc.n	801084e <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80108a0:	2417      	movs	r4, #23
 80108a2:	2320      	movs	r3, #32
 80108a4:	18e3      	adds	r3, r4, r3
 80108a6:	19db      	adds	r3, r3, r7
 80108a8:	781a      	ldrb	r2, [r3, #0]
 80108aa:	2322      	movs	r3, #34	@ 0x22
 80108ac:	18fb      	adds	r3, r7, r3
 80108ae:	781b      	ldrb	r3, [r3, #0]
 80108b0:	18d3      	adds	r3, r2, r3
 80108b2:	3b01      	subs	r3, #1
 80108b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80108b6:	18d2      	adds	r2, r2, r3
 80108b8:	250b      	movs	r5, #11
 80108ba:	2320      	movs	r3, #32
 80108bc:	18eb      	adds	r3, r5, r3
 80108be:	19db      	adds	r3, r3, r7
 80108c0:	7812      	ldrb	r2, [r2, #0]
 80108c2:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80108c4:	2322      	movs	r3, #34	@ 0x22
 80108c6:	18fb      	adds	r3, r7, r3
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	3b01      	subs	r3, #1
 80108cc:	b2da      	uxtb	r2, r3
 80108ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d0:	0011      	movs	r1, r2
 80108d2:	0018      	movs	r0, r3
 80108d4:	f000 f838 	bl	8010948 <CalculateCRC>
 80108d8:	0003      	movs	r3, r0
 80108da:	001a      	movs	r2, r3
 80108dc:	2320      	movs	r3, #32
 80108de:	18eb      	adds	r3, r5, r3
 80108e0:	19db      	adds	r3, r3, r7
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d00c      	beq.n	8010902 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 80108e8:	2320      	movs	r3, #32
 80108ea:	18e3      	adds	r3, r4, r3
 80108ec:	19db      	adds	r3, r3, r7
 80108ee:	781b      	ldrb	r3, [r3, #0]
 80108f0:	3301      	adds	r3, #1
 80108f2:	4a13      	ldr	r2, [pc, #76]	@ (8010940 <CheckCRC+0x18c>)
 80108f4:	4913      	ldr	r1, [pc, #76]	@ (8010944 <CheckCRC+0x190>)
 80108f6:	2001      	movs	r0, #1
 80108f8:	f002 fd28 	bl	801334c <CreateLine>
      return false;
 80108fc:	2300      	movs	r3, #0
 80108fe:	46b5      	mov	sp, r6
 8010900:	e019      	b.n	8010936 <CheckCRC+0x182>
 8010902:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8010904:	2217      	movs	r2, #23
 8010906:	2320      	movs	r3, #32
 8010908:	18d3      	adds	r3, r2, r3
 801090a:	19db      	adds	r3, r3, r7
 801090c:	2120      	movs	r1, #32
 801090e:	1852      	adds	r2, r2, r1
 8010910:	19d1      	adds	r1, r2, r7
 8010912:	2222      	movs	r2, #34	@ 0x22
 8010914:	18ba      	adds	r2, r7, r2
 8010916:	7809      	ldrb	r1, [r1, #0]
 8010918:	7812      	ldrb	r2, [r2, #0]
 801091a:	188a      	adds	r2, r1, r2
 801091c:	701a      	strb	r2, [r3, #0]
 801091e:	2317      	movs	r3, #23
 8010920:	2220      	movs	r2, #32
 8010922:	189b      	adds	r3, r3, r2
 8010924:	19da      	adds	r2, r3, r7
 8010926:	2323      	movs	r3, #35	@ 0x23
 8010928:	18fb      	adds	r3, r7, r3
 801092a:	7812      	ldrb	r2, [r2, #0]
 801092c:	781b      	ldrb	r3, [r3, #0]
 801092e:	429a      	cmp	r2, r3
 8010930:	d200      	bcs.n	8010934 <CheckCRC+0x180>
 8010932:	e754      	b.n	80107de <CheckCRC+0x2a>
    }
  }
  return true;
 8010934:	2301      	movs	r3, #1
}
 8010936:	0018      	movs	r0, r3
 8010938:	46bd      	mov	sp, r7
 801093a:	b00f      	add	sp, #60	@ 0x3c
 801093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801093e:	46c0      	nop			@ (mov r8, r8)
 8010940:	0802d3e0 	.word	0x0802d3e0
 8010944:	0802d31c 	.word	0x0802d31c

08010948 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8010948:	b580      	push	{r7, lr}
 801094a:	b084      	sub	sp, #16
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	000a      	movs	r2, r1
 8010952:	1cfb      	adds	r3, r7, #3
 8010954:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8010956:	230f      	movs	r3, #15
 8010958:	18fb      	adds	r3, r7, r3
 801095a:	22ff      	movs	r2, #255	@ 0xff
 801095c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 801095e:	230e      	movs	r3, #14
 8010960:	18fb      	adds	r3, r7, r3
 8010962:	2200      	movs	r2, #0
 8010964:	701a      	strb	r2, [r3, #0]
 8010966:	e038      	b.n	80109da <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8010968:	230e      	movs	r3, #14
 801096a:	18fb      	adds	r3, r7, r3
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	687a      	ldr	r2, [r7, #4]
 8010970:	18d3      	adds	r3, r2, r3
 8010972:	7819      	ldrb	r1, [r3, #0]
 8010974:	220f      	movs	r2, #15
 8010976:	18bb      	adds	r3, r7, r2
 8010978:	18ba      	adds	r2, r7, r2
 801097a:	7812      	ldrb	r2, [r2, #0]
 801097c:	404a      	eors	r2, r1
 801097e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8010980:	230d      	movs	r3, #13
 8010982:	18fb      	adds	r3, r7, r3
 8010984:	2200      	movs	r2, #0
 8010986:	701a      	strb	r2, [r3, #0]
 8010988:	e01c      	b.n	80109c4 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 801098a:	210f      	movs	r1, #15
 801098c:	187b      	adds	r3, r7, r1
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	b25b      	sxtb	r3, r3
 8010992:	2b00      	cmp	r3, #0
 8010994:	da0a      	bge.n	80109ac <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8010996:	187b      	adds	r3, r7, r1
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	b25b      	sxtb	r3, r3
 801099c:	18db      	adds	r3, r3, r3
 801099e:	b25b      	sxtb	r3, r3
 80109a0:	2231      	movs	r2, #49	@ 0x31
 80109a2:	4053      	eors	r3, r2
 80109a4:	b25a      	sxtb	r2, r3
 80109a6:	187b      	adds	r3, r7, r1
 80109a8:	701a      	strb	r2, [r3, #0]
 80109aa:	e005      	b.n	80109b8 <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 80109ac:	230f      	movs	r3, #15
 80109ae:	18fa      	adds	r2, r7, r3
 80109b0:	18fb      	adds	r3, r7, r3
 80109b2:	781b      	ldrb	r3, [r3, #0]
 80109b4:	18db      	adds	r3, r3, r3
 80109b6:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80109b8:	210d      	movs	r1, #13
 80109ba:	187b      	adds	r3, r7, r1
 80109bc:	781a      	ldrb	r2, [r3, #0]
 80109be:	187b      	adds	r3, r7, r1
 80109c0:	3201      	adds	r2, #1
 80109c2:	701a      	strb	r2, [r3, #0]
 80109c4:	230d      	movs	r3, #13
 80109c6:	18fb      	adds	r3, r7, r3
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	2b07      	cmp	r3, #7
 80109cc:	d9dd      	bls.n	801098a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80109ce:	210e      	movs	r1, #14
 80109d0:	187b      	adds	r3, r7, r1
 80109d2:	781a      	ldrb	r2, [r3, #0]
 80109d4:	187b      	adds	r3, r7, r1
 80109d6:	3201      	adds	r2, #1
 80109d8:	701a      	strb	r2, [r3, #0]
 80109da:	230e      	movs	r3, #14
 80109dc:	18fa      	adds	r2, r7, r3
 80109de:	1cfb      	adds	r3, r7, #3
 80109e0:	7812      	ldrb	r2, [r2, #0]
 80109e2:	781b      	ldrb	r3, [r3, #0]
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d3bf      	bcc.n	8010968 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80109e8:	230f      	movs	r3, #15
 80109ea:	18fb      	adds	r3, r7, r3
 80109ec:	781b      	ldrb	r3, [r3, #0]
}
 80109ee:	0018      	movs	r0, r3
 80109f0:	46bd      	mov	sp, r7
 80109f2:	b004      	add	sp, #16
 80109f4:	bd80      	pop	{r7, pc}
	...

080109f8 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b084      	sub	sp, #16
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	4936      	ldr	r1, [pc, #216]	@ (8010ae0 <SGP_SetHT+0xe8>)
 8010a08:	1c18      	adds	r0, r3, #0
 8010a0a:	f7ef ff59 	bl	80008c0 <__aeabi_fadd>
 8010a0e:	1c03      	adds	r3, r0, #0
 8010a10:	4934      	ldr	r1, [pc, #208]	@ (8010ae4 <SGP_SetHT+0xec>)
 8010a12:	1c18      	adds	r0, r3, #0
 8010a14:	f7f0 f946 	bl	8000ca4 <__aeabi_fdiv>
 8010a18:	1c03      	adds	r3, r0, #0
 8010a1a:	4933      	ldr	r1, [pc, #204]	@ (8010ae8 <SGP_SetHT+0xf0>)
 8010a1c:	1c18      	adds	r0, r3, #0
 8010a1e:	f7f0 fb0f 	bl	8001040 <__aeabi_fmul>
 8010a22:	1c03      	adds	r3, r0, #0
 8010a24:	1c18      	adds	r0, r3, #0
 8010a26:	f7ef fdf9 	bl	800061c <__aeabi_f2uiz>
 8010a2a:	0003      	movs	r3, r0
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8010aec <SGP_SetHT+0xf4>)
 8010a30:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	492e      	ldr	r1, [pc, #184]	@ (8010af0 <SGP_SetHT+0xf8>)
 8010a38:	1c18      	adds	r0, r3, #0
 8010a3a:	f7f0 f933 	bl	8000ca4 <__aeabi_fdiv>
 8010a3e:	1c03      	adds	r3, r0, #0
 8010a40:	4929      	ldr	r1, [pc, #164]	@ (8010ae8 <SGP_SetHT+0xf0>)
 8010a42:	1c18      	adds	r0, r3, #0
 8010a44:	f7f0 fafc 	bl	8001040 <__aeabi_fmul>
 8010a48:	1c03      	adds	r3, r0, #0
 8010a4a:	1c18      	adds	r0, r3, #0
 8010a4c:	f7ef fde6 	bl	800061c <__aeabi_f2uiz>
 8010a50:	0003      	movs	r3, r0
 8010a52:	b29a      	uxth	r2, r3
 8010a54:	4b27      	ldr	r3, [pc, #156]	@ (8010af4 <SGP_SetHT+0xfc>)
 8010a56:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8010a58:	4b26      	ldr	r3, [pc, #152]	@ (8010af4 <SGP_SetHT+0xfc>)
 8010a5a:	881b      	ldrh	r3, [r3, #0]
 8010a5c:	0a1b      	lsrs	r3, r3, #8
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	b2da      	uxtb	r2, r3
 8010a62:	4b25      	ldr	r3, [pc, #148]	@ (8010af8 <SGP_SetHT+0x100>)
 8010a64:	709a      	strb	r2, [r3, #2]
 8010a66:	4b24      	ldr	r3, [pc, #144]	@ (8010af8 <SGP_SetHT+0x100>)
 8010a68:	789a      	ldrb	r2, [r3, #2]
 8010a6a:	210c      	movs	r1, #12
 8010a6c:	187b      	adds	r3, r7, r1
 8010a6e:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8010a70:	4b20      	ldr	r3, [pc, #128]	@ (8010af4 <SGP_SetHT+0xfc>)
 8010a72:	881b      	ldrh	r3, [r3, #0]
 8010a74:	b2da      	uxtb	r2, r3
 8010a76:	4b20      	ldr	r3, [pc, #128]	@ (8010af8 <SGP_SetHT+0x100>)
 8010a78:	70da      	strb	r2, [r3, #3]
 8010a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8010af8 <SGP_SetHT+0x100>)
 8010a7c:	78da      	ldrb	r2, [r3, #3]
 8010a7e:	187b      	adds	r3, r7, r1
 8010a80:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8010a82:	187b      	adds	r3, r7, r1
 8010a84:	2102      	movs	r1, #2
 8010a86:	0018      	movs	r0, r3
 8010a88:	f7ff ff5e 	bl	8010948 <CalculateCRC>
 8010a8c:	0003      	movs	r3, r0
 8010a8e:	001a      	movs	r2, r3
 8010a90:	4b19      	ldr	r3, [pc, #100]	@ (8010af8 <SGP_SetHT+0x100>)
 8010a92:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8010a94:	4b15      	ldr	r3, [pc, #84]	@ (8010aec <SGP_SetHT+0xf4>)
 8010a96:	881b      	ldrh	r3, [r3, #0]
 8010a98:	0a1b      	lsrs	r3, r3, #8
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	b2da      	uxtb	r2, r3
 8010a9e:	4b16      	ldr	r3, [pc, #88]	@ (8010af8 <SGP_SetHT+0x100>)
 8010aa0:	715a      	strb	r2, [r3, #5]
 8010aa2:	4b15      	ldr	r3, [pc, #84]	@ (8010af8 <SGP_SetHT+0x100>)
 8010aa4:	795a      	ldrb	r2, [r3, #5]
 8010aa6:	2108      	movs	r1, #8
 8010aa8:	187b      	adds	r3, r7, r1
 8010aaa:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8010aac:	4b0f      	ldr	r3, [pc, #60]	@ (8010aec <SGP_SetHT+0xf4>)
 8010aae:	881b      	ldrh	r3, [r3, #0]
 8010ab0:	b2da      	uxtb	r2, r3
 8010ab2:	4b11      	ldr	r3, [pc, #68]	@ (8010af8 <SGP_SetHT+0x100>)
 8010ab4:	719a      	strb	r2, [r3, #6]
 8010ab6:	4b10      	ldr	r3, [pc, #64]	@ (8010af8 <SGP_SetHT+0x100>)
 8010ab8:	799a      	ldrb	r2, [r3, #6]
 8010aba:	187b      	adds	r3, r7, r1
 8010abc:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8010abe:	187b      	adds	r3, r7, r1
 8010ac0:	2102      	movs	r1, #2
 8010ac2:	0018      	movs	r0, r3
 8010ac4:	f7ff ff40 	bl	8010948 <CalculateCRC>
 8010ac8:	0003      	movs	r3, r0
 8010aca:	001a      	movs	r2, r3
 8010acc:	4b0a      	ldr	r3, [pc, #40]	@ (8010af8 <SGP_SetHT+0x100>)
 8010ace:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8010ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8010afc <SGP_SetHT+0x104>)
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	701a      	strb	r2, [r3, #0]
}
 8010ad6:	46c0      	nop			@ (mov r8, r8)
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	b004      	add	sp, #16
 8010adc:	bd80      	pop	{r7, pc}
 8010ade:	46c0      	nop			@ (mov r8, r8)
 8010ae0:	42340000 	.word	0x42340000
 8010ae4:	432f0000 	.word	0x432f0000
 8010ae8:	477fff00 	.word	0x477fff00
 8010aec:	20000fba 	.word	0x20000fba
 8010af0:	42c80000 	.word	0x42c80000
 8010af4:	20000fb8 	.word	0x20000fb8
 8010af8:	200000b0 	.word	0x200000b0
 8010afc:	20000fbc 	.word	0x20000fbc

08010b00 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 8010b00:	b580      	push	{r7, lr}
 8010b02:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 8010b04:	4a09      	ldr	r2, [pc, #36]	@ (8010b2c <SGP_SoftReset+0x2c>)
 8010b06:	4b0a      	ldr	r3, [pc, #40]	@ (8010b30 <SGP_SoftReset+0x30>)
 8010b08:	0019      	movs	r1, r3
 8010b0a:	2003      	movs	r0, #3
 8010b0c:	f002 fc1e 	bl	801334c <CreateLine>
  SGP_TurnHeaterOff();
 8010b10:	f7ff fccc 	bl	80104ac <SGP_TurnHeaterOff>
  HAL_Delay(10);
 8010b14:	200a      	movs	r0, #10
 8010b16:	f003 f963 	bl	8013de0 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010b1a:	4b06      	ldr	r3, [pc, #24]	@ (8010b34 <SGP_SoftReset+0x34>)
 8010b1c:	2202      	movs	r2, #2
 8010b1e:	0019      	movs	r1, r3
 8010b20:	2059      	movs	r0, #89	@ 0x59
 8010b22:	f7ff fbf5 	bl	8010310 <WriteRegister>
}
 8010b26:	46c0      	nop			@ (mov r8, r8)
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}
 8010b2c:	0802d488 	.word	0x0802d488
 8010b30:	0802d364 	.word	0x0802d364
 8010b34:	200000b8 	.word	0x200000b8

08010b38 <ResetVOCresult>:

void ResetVOCresult(void) {
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	af00      	add	r7, sp, #0
  vocIndex = 0;
 8010b3c:	4b02      	ldr	r3, [pc, #8]	@ (8010b48 <ResetVOCresult+0x10>)
 8010b3e:	2200      	movs	r2, #0
 8010b40:	601a      	str	r2, [r3, #0]
}
 8010b42:	46c0      	nop			@ (mov r8, r8)
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	20000fc0 	.word	0x20000fc0

08010b4c <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 8010b50:	4b4b      	ldr	r3, [pc, #300]	@ (8010c80 <SGP_Upkeep+0x134>)
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	2b07      	cmp	r3, #7
 8010b56:	d900      	bls.n	8010b5a <SGP_Upkeep+0xe>
 8010b58:	e07a      	b.n	8010c50 <SGP_Upkeep+0x104>
 8010b5a:	009a      	lsls	r2, r3, #2
 8010b5c:	4b49      	ldr	r3, [pc, #292]	@ (8010c84 <SGP_Upkeep+0x138>)
 8010b5e:	18d3      	adds	r3, r2, r3
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 8010b64:	4a48      	ldr	r2, [pc, #288]	@ (8010c88 <SGP_Upkeep+0x13c>)
 8010b66:	4b49      	ldr	r3, [pc, #292]	@ (8010c8c <SGP_Upkeep+0x140>)
 8010b68:	0019      	movs	r1, r3
 8010b6a:	2003      	movs	r0, #3
 8010b6c:	f002 fbee 	bl	801334c <CreateLine>
    break;
 8010b70:	e081      	b.n	8010c76 <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 8010b72:	f7ff ffe1 	bl	8010b38 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 8010b76:	4b42      	ldr	r3, [pc, #264]	@ (8010c80 <SGP_Upkeep+0x134>)
 8010b78:	2201      	movs	r2, #1
 8010b7a:	701a      	strb	r2, [r3, #0]
    break;
 8010b7c:	e07b      	b.n	8010c76 <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 8010b7e:	f7fc fc4d 	bl	800d41c <getSensorLock>
 8010b82:	1e03      	subs	r3, r0, #0
 8010b84:	d000      	beq.n	8010b88 <SGP_Upkeep+0x3c>
 8010b86:	e06f      	b.n	8010c68 <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 8010b88:	2005      	movs	r0, #5
 8010b8a:	f7fc fc33 	bl	800d3f4 <setSensorLock>
    SetMeasurementIndicator();
 8010b8e:	f001 f987 	bl	8011ea0 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 8010b92:	f7ff fc29 	bl	80103e8 <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 8010b96:	200a      	movs	r0, #10
 8010b98:	f003 f922 	bl	8013de0 <HAL_Delay>
    setSensorLock(FREE);
 8010b9c:	2000      	movs	r0, #0
 8010b9e:	f7fc fc29 	bl	800d3f4 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 8010ba2:	4b37      	ldr	r3, [pc, #220]	@ (8010c80 <SGP_Upkeep+0x134>)
 8010ba4:	2202      	movs	r2, #2
 8010ba6:	701a      	strb	r2, [r3, #0]
    break;
 8010ba8:	e065      	b.n	8010c76 <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 8010baa:	f7fc fc37 	bl	800d41c <getSensorLock>
 8010bae:	1e03      	subs	r3, r0, #0
 8010bb0:	d15c      	bne.n	8010c6c <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 8010bb2:	2005      	movs	r0, #5
 8010bb4:	f7fc fc1e 	bl	800d3f4 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 8010bb8:	4b35      	ldr	r3, [pc, #212]	@ (8010c90 <SGP_Upkeep+0x144>)
 8010bba:	0018      	movs	r0, r3
 8010bbc:	f7ff fc84 	bl	80104c8 <SGP_GetMeasurementValues>
 8010bc0:	1e03      	subs	r3, r0, #0
 8010bc2:	d002      	beq.n	8010bca <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 8010bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8010c80 <SGP_Upkeep+0x134>)
 8010bc6:	2203      	movs	r2, #3
 8010bc8:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 8010bca:	200a      	movs	r0, #10
 8010bcc:	f003 f908 	bl	8013de0 <HAL_Delay>
    setSensorLock(FREE);
 8010bd0:	2000      	movs	r0, #0
 8010bd2:	f7fc fc0f 	bl	800d3f4 <setSensorLock>
    break;
 8010bd6:	e04e      	b.n	8010c76 <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 8010bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8010c90 <SGP_Upkeep+0x144>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	0018      	movs	r0, r3
 8010be0:	f7f3 ff3e 	bl	8004a60 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 8010be4:	4b26      	ldr	r3, [pc, #152]	@ (8010c80 <SGP_Upkeep+0x134>)
 8010be6:	2206      	movs	r2, #6
 8010be8:	701a      	strb	r2, [r3, #0]
    break;
 8010bea:	e044      	b.n	8010c76 <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 8010bec:	4b24      	ldr	r3, [pc, #144]	@ (8010c80 <SGP_Upkeep+0x134>)
 8010bee:	2207      	movs	r2, #7
 8010bf0:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 8010bf2:	4b28      	ldr	r3, [pc, #160]	@ (8010c94 <SGP_Upkeep+0x148>)
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	2b03      	cmp	r3, #3
 8010bf8:	d912      	bls.n	8010c20 <SGP_Upkeep+0xd4>
 8010bfa:	4b27      	ldr	r3, [pc, #156]	@ (8010c98 <SGP_Upkeep+0x14c>)
 8010bfc:	781b      	ldrb	r3, [r3, #0]
 8010bfe:	2201      	movs	r2, #1
 8010c00:	4053      	eors	r3, r2
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d00b      	beq.n	8010c20 <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 8010c08:	4b24      	ldr	r3, [pc, #144]	@ (8010c9c <SGP_Upkeep+0x150>)
 8010c0a:	781b      	ldrb	r3, [r3, #0]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d004      	beq.n	8010c1a <SGP_Upkeep+0xce>
        SGP_SoftReset();
 8010c10:	f7ff ff76 	bl	8010b00 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 8010c14:	2000      	movs	r0, #0
 8010c16:	f7fb ffd3 	bl	800cbc0 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 8010c1a:	4b20      	ldr	r3, [pc, #128]	@ (8010c9c <SGP_Upkeep+0x150>)
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 8010c20:	f003 f8d4 	bl	8013dcc <HAL_GetTick>
 8010c24:	0003      	movs	r3, r0
 8010c26:	22c8      	movs	r2, #200	@ 0xc8
 8010c28:	0092      	lsls	r2, r2, #2
 8010c2a:	189a      	adds	r2, r3, r2
 8010c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8010ca0 <SGP_Upkeep+0x154>)
 8010c2e:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 8010c30:	f001 f94e 	bl	8011ed0 <ResetMeasurementIndicator>
  break;
 8010c34:	e01f      	b.n	8010c76 <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 8010c36:	4b1a      	ldr	r3, [pc, #104]	@ (8010ca0 <SGP_Upkeep+0x154>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	0018      	movs	r0, r3
 8010c3c:	f002 fb30 	bl	80132a0 <TimestampIsReached>
 8010c40:	1e03      	subs	r3, r0, #0
 8010c42:	d015      	beq.n	8010c70 <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8010c44:	f7ff fbb8 	bl	80103b8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8010c48:	4b0d      	ldr	r3, [pc, #52]	@ (8010c80 <SGP_Upkeep+0x134>)
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	701a      	strb	r2, [r3, #0]
    }
    break;
 8010c4e:	e00f      	b.n	8010c70 <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 8010c50:	4b0b      	ldr	r3, [pc, #44]	@ (8010c80 <SGP_Upkeep+0x134>)
 8010c52:	2200      	movs	r2, #0
 8010c54:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 8010c56:	f7fc fbe1 	bl	800d41c <getSensorLock>
 8010c5a:	0003      	movs	r3, r0
 8010c5c:	2b05      	cmp	r3, #5
 8010c5e:	d109      	bne.n	8010c74 <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 8010c60:	2000      	movs	r0, #0
 8010c62:	f7fc fbc7 	bl	800d3f4 <setSensorLock>
    }
    break;
 8010c66:	e005      	b.n	8010c74 <SGP_Upkeep+0x128>
      break;
 8010c68:	46c0      	nop			@ (mov r8, r8)
 8010c6a:	e004      	b.n	8010c76 <SGP_Upkeep+0x12a>
      break;
 8010c6c:	46c0      	nop			@ (mov r8, r8)
 8010c6e:	e002      	b.n	8010c76 <SGP_Upkeep+0x12a>
    break;
 8010c70:	46c0      	nop			@ (mov r8, r8)
 8010c72:	e000      	b.n	8010c76 <SGP_Upkeep+0x12a>
    break;
 8010c74:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 8010c76:	4b02      	ldr	r3, [pc, #8]	@ (8010c80 <SGP_Upkeep+0x134>)
 8010c78:	781b      	ldrb	r3, [r3, #0]
}
 8010c7a:	0018      	movs	r0, r3
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	20000fc4 	.word	0x20000fc4
 8010c84:	0802dd48 	.word	0x0802dd48
 8010c88:	0802d4a0 	.word	0x0802d4a0
 8010c8c:	0802d364 	.word	0x0802d364
 8010c90:	20000fc0 	.word	0x20000fc0
 8010c94:	20000f0a 	.word	0x20000f0a
 8010c98:	20001e61 	.word	0x20001e61
 8010c9c:	20000ef4 	.word	0x20000ef4
 8010ca0:	20000f0c 	.word	0x20000f0c

08010ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	0002      	movs	r2, r0
 8010cac:	1dfb      	adds	r3, r7, #7
 8010cae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010cb0:	1dfb      	adds	r3, r7, #7
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8010cb6:	d809      	bhi.n	8010ccc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010cb8:	1dfb      	adds	r3, r7, #7
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	001a      	movs	r2, r3
 8010cbe:	231f      	movs	r3, #31
 8010cc0:	401a      	ands	r2, r3
 8010cc2:	4b04      	ldr	r3, [pc, #16]	@ (8010cd4 <__NVIC_EnableIRQ+0x30>)
 8010cc4:	2101      	movs	r1, #1
 8010cc6:	4091      	lsls	r1, r2
 8010cc8:	000a      	movs	r2, r1
 8010cca:	601a      	str	r2, [r3, #0]
  }
}
 8010ccc:	46c0      	nop			@ (mov r8, r8)
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	b002      	add	sp, #8
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	e000e100 	.word	0xe000e100

08010cd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	0002      	movs	r2, r0
 8010ce0:	1dfb      	adds	r3, r7, #7
 8010ce2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010ce4:	1dfb      	adds	r3, r7, #7
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	2b7f      	cmp	r3, #127	@ 0x7f
 8010cea:	d810      	bhi.n	8010d0e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010cec:	1dfb      	adds	r3, r7, #7
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	001a      	movs	r2, r3
 8010cf2:	231f      	movs	r3, #31
 8010cf4:	4013      	ands	r3, r2
 8010cf6:	4908      	ldr	r1, [pc, #32]	@ (8010d18 <__NVIC_DisableIRQ+0x40>)
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	409a      	lsls	r2, r3
 8010cfc:	0013      	movs	r3, r2
 8010cfe:	2280      	movs	r2, #128	@ 0x80
 8010d00:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010d02:	f3bf 8f4f 	dsb	sy
}
 8010d06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010d08:	f3bf 8f6f 	isb	sy
}
 8010d0c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8010d0e:	46c0      	nop			@ (mov r8, r8)
 8010d10:	46bd      	mov	sp, r7
 8010d12:	b002      	add	sp, #8
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	46c0      	nop			@ (mov r8, r8)
 8010d18:	e000e100 	.word	0xe000e100

08010d1c <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8010d1c:	b5b0      	push	{r4, r5, r7, lr}
 8010d1e:	b088      	sub	sp, #32
 8010d20:	af02      	add	r7, sp, #8
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	0008      	movs	r0, r1
 8010d26:	0011      	movs	r1, r2
 8010d28:	1cfb      	adds	r3, r7, #3
 8010d2a:	1c02      	adds	r2, r0, #0
 8010d2c:	701a      	strb	r2, [r3, #0]
 8010d2e:	1cbb      	adds	r3, r7, #2
 8010d30:	1c0a      	adds	r2, r1, #0
 8010d32:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8010d34:	4b5b      	ldr	r3, [pc, #364]	@ (8010ea4 <getSoundData+0x188>)
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	b2db      	uxtb	r3, r3
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	4053      	eors	r3, r2
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d107      	bne.n	8010d54 <getSoundData+0x38>
 8010d44:	4b58      	ldr	r3, [pc, #352]	@ (8010ea8 <getSoundData+0x18c>)
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	2201      	movs	r2, #1
 8010d4c:	4053      	eors	r3, r2
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d001      	beq.n	8010d58 <getSoundData+0x3c>
    {
        return false;
 8010d54:	2300      	movs	r3, #0
 8010d56:	e0a0      	b.n	8010e9a <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8010d58:	4b54      	ldr	r3, [pc, #336]	@ (8010eac <getSoundData+0x190>)
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	b2db      	uxtb	r3, r3
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d005      	beq.n	8010d6e <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8010d62:	4b53      	ldr	r3, [pc, #332]	@ (8010eb0 <getSoundData+0x194>)
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	b25b      	sxtb	r3, r3
 8010d68:	0018      	movs	r0, r3
 8010d6a:	f7ff ffb5 	bl	8010cd8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8010d6e:	f3bf 8f4f 	dsb	sy
}
 8010d72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010d74:	f3bf 8f6f 	isb	sy
}
 8010d78:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8010d7a:	1cfb      	adds	r3, r7, #3
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d04c      	beq.n	8010e1c <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8010d82:	4b4c      	ldr	r3, [pc, #304]	@ (8010eb4 <getSoundData+0x198>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d11b      	bne.n	8010dc2 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2200      	movs	r2, #0
 8010d94:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010d96:	2300      	movs	r3, #0
 8010d98:	617b      	str	r3, [r7, #20]
 8010d9a:	e00e      	b.n	8010dba <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	18d3      	adds	r3, r2, r3
 8010da2:	3302      	adds	r3, #2
 8010da4:	2200      	movs	r2, #0
 8010da6:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	18d3      	adds	r3, r2, r3
 8010dae:	3308      	adds	r3, #8
 8010db0:	2200      	movs	r2, #0
 8010db2:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	3301      	adds	r3, #1
 8010db8:	617b      	str	r3, [r7, #20]
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	2b05      	cmp	r3, #5
 8010dbe:	d9ed      	bls.n	8010d9c <getSoundData+0x80>
 8010dc0:	e02c      	b.n	8010e1c <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	1c59      	adds	r1, r3, #1
 8010dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8010eb8 <getSoundData+0x19c>)
 8010dca:	681a      	ldr	r2, [r3, #0]
 8010dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8010ebc <getSoundData+0x1a0>)
 8010dce:	681c      	ldr	r4, [r3, #0]
 8010dd0:	4b38      	ldr	r3, [pc, #224]	@ (8010eb4 <getSoundData+0x198>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	9300      	str	r3, [sp, #0]
 8010dd6:	0023      	movs	r3, r4
 8010dd8:	f000 fde8 	bl	80119ac <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010ddc:	2300      	movs	r3, #0
 8010dde:	613b      	str	r3, [r7, #16]
 8010de0:	e019      	b.n	8010e16 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8010de2:	687a      	ldr	r2, [r7, #4]
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	18d3      	adds	r3, r2, r3
 8010de8:	1c98      	adds	r0, r3, #2
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	3308      	adds	r3, #8
 8010dee:	687a      	ldr	r2, [r7, #4]
 8010df0:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8010df2:	4b33      	ldr	r3, [pc, #204]	@ (8010ec0 <getSoundData+0x1a4>)
 8010df4:	693a      	ldr	r2, [r7, #16]
 8010df6:	0092      	lsls	r2, r2, #2
 8010df8:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 8010dfa:	4b32      	ldr	r3, [pc, #200]	@ (8010ec4 <getSoundData+0x1a8>)
 8010dfc:	693a      	ldr	r2, [r7, #16]
 8010dfe:	0092      	lsls	r2, r2, #2
 8010e00:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8010e02:	4b2c      	ldr	r3, [pc, #176]	@ (8010eb4 <getSoundData+0x198>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	9300      	str	r3, [sp, #0]
 8010e08:	0013      	movs	r3, r2
 8010e0a:	0022      	movs	r2, r4
 8010e0c:	f000 fdce 	bl	80119ac <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	3301      	adds	r3, #1
 8010e14:	613b      	str	r3, [r7, #16]
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	2b05      	cmp	r3, #5
 8010e1a:	d9e2      	bls.n	8010de2 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8010e1c:	1cbb      	adds	r3, r7, #2
 8010e1e:	781b      	ldrb	r3, [r3, #0]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d028      	beq.n	8010e76 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8010e24:	240e      	movs	r4, #14
 8010e26:	193b      	adds	r3, r7, r4
 8010e28:	2200      	movs	r2, #0
 8010e2a:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8010e2c:	250d      	movs	r5, #13
 8010e2e:	197b      	adds	r3, r7, r5
 8010e30:	2200      	movs	r2, #0
 8010e32:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8010e34:	4b24      	ldr	r3, [pc, #144]	@ (8010ec8 <getSoundData+0x1ac>)
 8010e36:	6818      	ldr	r0, [r3, #0]
 8010e38:	4924      	ldr	r1, [pc, #144]	@ (8010ecc <getSoundData+0x1b0>)
 8010e3a:	197b      	adds	r3, r7, r5
 8010e3c:	193a      	adds	r2, r7, r4
 8010e3e:	f000 fe59 	bl	8011af4 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8010e42:	193b      	adds	r3, r7, r4
 8010e44:	881a      	ldrh	r2, [r3, #0]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	21ff      	movs	r1, #255	@ 0xff
 8010e4a:	4011      	ands	r1, r2
 8010e4c:	000c      	movs	r4, r1
 8010e4e:	7b99      	ldrb	r1, [r3, #14]
 8010e50:	2000      	movs	r0, #0
 8010e52:	4001      	ands	r1, r0
 8010e54:	1c08      	adds	r0, r1, #0
 8010e56:	1c21      	adds	r1, r4, #0
 8010e58:	4301      	orrs	r1, r0
 8010e5a:	7399      	strb	r1, [r3, #14]
 8010e5c:	0a12      	lsrs	r2, r2, #8
 8010e5e:	b290      	uxth	r0, r2
 8010e60:	7bda      	ldrb	r2, [r3, #15]
 8010e62:	2100      	movs	r1, #0
 8010e64:	400a      	ands	r2, r1
 8010e66:	1c11      	adds	r1, r2, #0
 8010e68:	1c02      	adds	r2, r0, #0
 8010e6a:	430a      	orrs	r2, r1
 8010e6c:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8010e6e:	197b      	adds	r3, r7, r5
 8010e70:	781a      	ldrb	r2, [r3, #0]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8010e76:	f000 f86f 	bl	8010f58 <micSettlingComplete>
 8010e7a:	0003      	movs	r3, r0
 8010e7c:	001a      	movs	r2, r3
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8010e82:	4b0a      	ldr	r3, [pc, #40]	@ (8010eac <getSoundData+0x190>)
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d005      	beq.n	8010e98 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8010e8c:	4b08      	ldr	r3, [pc, #32]	@ (8010eb0 <getSoundData+0x194>)
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	b25b      	sxtb	r3, r3
 8010e92:	0018      	movs	r0, r3
 8010e94:	f7ff ff06 	bl	8010ca4 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8010e98:	2301      	movs	r3, #1
}
 8010e9a:	0018      	movs	r0, r3
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	b006      	add	sp, #24
 8010ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8010ea2:	46c0      	nop			@ (mov r8, r8)
 8010ea4:	20000fc6 	.word	0x20000fc6
 8010ea8:	20000fc9 	.word	0x20000fc9
 8010eac:	20000fc8 	.word	0x20000fc8
 8010eb0:	20001a18 	.word	0x20001a18
 8010eb4:	20001a54 	.word	0x20001a54
 8010eb8:	20001a1c 	.word	0x20001a1c
 8010ebc:	20001a20 	.word	0x20001a20
 8010ec0:	20001a24 	.word	0x20001a24
 8010ec4:	20001a3c 	.word	0x20001a3c
 8010ec8:	20000fd0 	.word	0x20000fd0
 8010ecc:	3b5c7333 	.word	0x3b5c7333

08010ed0 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b084      	sub	sp, #16
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	60f8      	str	r0, [r7, #12]
 8010ed8:	60b9      	str	r1, [r7, #8]
 8010eda:	607a      	str	r2, [r7, #4]
 8010edc:	001a      	movs	r2, r3
 8010ede:	1cfb      	adds	r3, r7, #3
 8010ee0:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8010ee2:	4b09      	ldr	r3, [pc, #36]	@ (8010f08 <soundInit+0x38>)
 8010ee4:	68ba      	ldr	r2, [r7, #8]
 8010ee6:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 8010ee8:	4b08      	ldr	r3, [pc, #32]	@ (8010f0c <soundInit+0x3c>)
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8010eee:	4b08      	ldr	r3, [pc, #32]	@ (8010f10 <soundInit+0x40>)
 8010ef0:	68fa      	ldr	r2, [r7, #12]
 8010ef2:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8010ef4:	4b07      	ldr	r3, [pc, #28]	@ (8010f14 <soundInit+0x44>)
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	569a      	ldrsb	r2, [r3, r2]
 8010efa:	4b06      	ldr	r3, [pc, #24]	@ (8010f14 <soundInit+0x44>)
 8010efc:	701a      	strb	r2, [r3, #0]

    return true;
 8010efe:	2301      	movs	r3, #1
}
 8010f00:	0018      	movs	r0, r3
 8010f02:	46bd      	mov	sp, r7
 8010f04:	b004      	add	sp, #16
 8010f06:	bd80      	pop	{r7, pc}
 8010f08:	20001a10 	.word	0x20001a10
 8010f0c:	20001a0c 	.word	0x20001a0c
 8010f10:	20001a14 	.word	0x20001a14
 8010f14:	20001a18 	.word	0x20001a18

08010f18 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8010f1c:	4b02      	ldr	r3, [pc, #8]	@ (8010f28 <clearMaximumAmplitude+0x10>)
 8010f1e:	2200      	movs	r2, #0
 8010f20:	601a      	str	r2, [r3, #0]
}
 8010f22:	46c0      	nop			@ (mov r8, r8)
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	20000fd0 	.word	0x20000fd0

08010f2c <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8010f30:	4b08      	ldr	r3, [pc, #32]	@ (8010f54 <startMicSettlingPeriod+0x28>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2200      	movs	r2, #0
 8010f38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8010f3a:	4b06      	ldr	r3, [pc, #24]	@ (8010f54 <startMicSettlingPeriod+0x28>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	0018      	movs	r0, r3
 8010f40:	f00b f832 	bl	801bfa8 <HAL_TIM_Base_Start>
 8010f44:	1e03      	subs	r3, r0, #0
 8010f46:	d001      	beq.n	8010f4c <startMicSettlingPeriod+0x20>
    {
        return false;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	e000      	b.n	8010f4e <startMicSettlingPeriod+0x22>
    }
    return true;
 8010f4c:	2301      	movs	r3, #1
}
 8010f4e:	0018      	movs	r0, r3
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}
 8010f54:	20001a0c 	.word	0x20001a0c

08010f58 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8010f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8010f98 <micSettlingComplete+0x40>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	2201      	movs	r2, #1
 8010f68:	401a      	ands	r2, r3
 8010f6a:	1dfb      	adds	r3, r7, #7
 8010f6c:	3a01      	subs	r2, #1
 8010f6e:	4251      	negs	r1, r2
 8010f70:	414a      	adcs	r2, r1
 8010f72:	701a      	strb	r2, [r3, #0]
    if (complete)
 8010f74:	1dfb      	adds	r3, r7, #7
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d007      	beq.n	8010f8c <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8010f7c:	4b06      	ldr	r3, [pc, #24]	@ (8010f98 <micSettlingComplete+0x40>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	0018      	movs	r0, r3
 8010f82:	f00b f85b 	bl	801c03c <HAL_TIM_Base_Stop>
      DataReady = true;
 8010f86:	4b05      	ldr	r3, [pc, #20]	@ (8010f9c <micSettlingComplete+0x44>)
 8010f88:	2201      	movs	r2, #1
 8010f8a:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8010f8c:	1dfb      	adds	r3, r7, #7
 8010f8e:	781b      	ldrb	r3, [r3, #0]
}
 8010f90:	0018      	movs	r0, r3
 8010f92:	46bd      	mov	sp, r7
 8010f94:	b002      	add	sp, #8
 8010f96:	bd80      	pop	{r7, pc}
 8010f98:	20001a0c 	.word	0x20001a0c
 8010f9c:	20000fc5 	.word	0x20000fc5

08010fa0 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	0002      	movs	r2, r0
 8010fa8:	1dfb      	adds	r3, r7, #7
 8010faa:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8010fac:	4b29      	ldr	r3, [pc, #164]	@ (8011054 <enableMicrophone+0xb4>)
 8010fae:	781b      	ldrb	r3, [r3, #0]
 8010fb0:	b2db      	uxtb	r3, r3
 8010fb2:	1dfa      	adds	r2, r7, #7
 8010fb4:	7812      	ldrb	r2, [r2, #0]
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	d101      	bne.n	8010fbe <enableMicrophone+0x1e>
    {
        return true;
 8010fba:	2301      	movs	r3, #1
 8010fbc:	e045      	b.n	801104a <enableMicrophone+0xaa>
    }
    if (bEnable)
 8010fbe:	1dfb      	adds	r3, r7, #7
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d025      	beq.n	8011012 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8010fc6:	f7ff ffb1 	bl	8010f2c <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8010fca:	4b23      	ldr	r3, [pc, #140]	@ (8011058 <enableMicrophone+0xb8>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2280      	movs	r2, #128	@ 0x80
 8010fd0:	0092      	lsls	r2, r2, #2
 8010fd2:	4922      	ldr	r1, [pc, #136]	@ (801105c <enableMicrophone+0xbc>)
 8010fd4:	0018      	movs	r0, r3
 8010fd6:	f007 fa33 	bl	8018440 <HAL_I2S_Receive_DMA>
 8010fda:	1e03      	subs	r3, r0, #0
 8010fdc:	d001      	beq.n	8010fe2 <enableMicrophone+0x42>
        {
            return false;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	e033      	b.n	801104a <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8010fe2:	f7ff ff99 	bl	8010f18 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8010fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8011060 <enableMicrophone+0xc0>)
 8010fe8:	2200      	movs	r2, #0
 8010fea:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8010fec:	4b1d      	ldr	r3, [pc, #116]	@ (8011064 <enableMicrophone+0xc4>)
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	b25b      	sxtb	r3, r3
 8010ff2:	0018      	movs	r0, r3
 8010ff4:	f7ff fe56 	bl	8010ca4 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8010ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8011068 <enableMicrophone+0xc8>)
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8010ffe:	4b15      	ldr	r3, [pc, #84]	@ (8011054 <enableMicrophone+0xb4>)
 8011000:	2201      	movs	r2, #1
 8011002:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011004:	4b19      	ldr	r3, [pc, #100]	@ (801106c <enableMicrophone+0xcc>)
 8011006:	2200      	movs	r2, #0
 8011008:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 801100a:	4b19      	ldr	r3, [pc, #100]	@ (8011070 <enableMicrophone+0xd0>)
 801100c:	2200      	movs	r2, #0
 801100e:	701a      	strb	r2, [r3, #0]
 8011010:	e01a      	b.n	8011048 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011012:	4b14      	ldr	r3, [pc, #80]	@ (8011064 <enableMicrophone+0xc4>)
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	b25b      	sxtb	r3, r3
 8011018:	0018      	movs	r0, r3
 801101a:	f7ff fe5d 	bl	8010cd8 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 801101e:	4b12      	ldr	r3, [pc, #72]	@ (8011068 <enableMicrophone+0xc8>)
 8011020:	2200      	movs	r2, #0
 8011022:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011024:	4b11      	ldr	r3, [pc, #68]	@ (801106c <enableMicrophone+0xcc>)
 8011026:	2200      	movs	r2, #0
 8011028:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 801102a:	4b11      	ldr	r3, [pc, #68]	@ (8011070 <enableMicrophone+0xd0>)
 801102c:	2200      	movs	r2, #0
 801102e:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8011030:	4b09      	ldr	r3, [pc, #36]	@ (8011058 <enableMicrophone+0xb8>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	0018      	movs	r0, r3
 8011036:	f007 fac5 	bl	80185c4 <HAL_I2S_DMAStop>
 801103a:	1e03      	subs	r3, r0, #0
 801103c:	d001      	beq.n	8011042 <enableMicrophone+0xa2>
        {
            return false;
 801103e:	2300      	movs	r3, #0
 8011040:	e003      	b.n	801104a <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8011042:	4b04      	ldr	r3, [pc, #16]	@ (8011054 <enableMicrophone+0xb4>)
 8011044:	2200      	movs	r2, #0
 8011046:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8011048:	2301      	movs	r3, #1
}
 801104a:	0018      	movs	r0, r3
 801104c:	46bd      	mov	sp, r7
 801104e:	b002      	add	sp, #8
 8011050:	bd80      	pop	{r7, pc}
 8011052:	46c0      	nop			@ (mov r8, r8)
 8011054:	20000fc6 	.word	0x20000fc6
 8011058:	20001a10 	.word	0x20001a10
 801105c:	2000100c 	.word	0x2000100c
 8011060:	20000fcc 	.word	0x20000fcc
 8011064:	20001a18 	.word	0x20001a18
 8011068:	20000fc8 	.word	0x20000fc8
 801106c:	20000fc7 	.word	0x20000fc7
 8011070:	20000fc9 	.word	0x20000fc9

08011074 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8011078:	4b0c      	ldr	r3, [pc, #48]	@ (80110ac <startSPLcalculation+0x38>)
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	b2db      	uxtb	r3, r3
 801107e:	2201      	movs	r2, #1
 8011080:	4053      	eors	r3, r2
 8011082:	b2db      	uxtb	r3, r3
 8011084:	2b00      	cmp	r3, #0
 8011086:	d001      	beq.n	801108c <startSPLcalculation+0x18>
    {
        return false;
 8011088:	2300      	movs	r3, #0
 801108a:	e00c      	b.n	80110a6 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 801108c:	4b08      	ldr	r3, [pc, #32]	@ (80110b0 <startSPLcalculation+0x3c>)
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	b2db      	uxtb	r3, r3
 8011092:	2b00      	cmp	r3, #0
 8011094:	d001      	beq.n	801109a <startSPLcalculation+0x26>
    {
        return true;
 8011096:	2301      	movs	r3, #1
 8011098:	e005      	b.n	80110a6 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 801109a:	f000 fb63 	bl	8011764 <resetSPLstate>
    SPLcalcEnabled = true;
 801109e:	4b04      	ldr	r3, [pc, #16]	@ (80110b0 <startSPLcalculation+0x3c>)
 80110a0:	2201      	movs	r2, #1
 80110a2:	701a      	strb	r2, [r3, #0]
    return true;
 80110a4:	2301      	movs	r3, #1
}
 80110a6:	0018      	movs	r0, r3
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	20000fc6 	.word	0x20000fc6
 80110b0:	20000fc7 	.word	0x20000fc7

080110b4 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b082      	sub	sp, #8
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 80110bc:	4b05      	ldr	r3, [pc, #20]	@ (80110d4 <HAL_I2S_RxHalfCpltCallback+0x20>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d102      	bne.n	80110cc <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 80110c6:	2000      	movs	r0, #0
 80110c8:	f000 f81a 	bl	8011100 <processHalfDMAbuffer>
  }
}
 80110cc:	46c0      	nop			@ (mov r8, r8)
 80110ce:	46bd      	mov	sp, r7
 80110d0:	b002      	add	sp, #8
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	20001a10 	.word	0x20001a10

080110d8 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 80110e0:	4b06      	ldr	r3, [pc, #24]	@ (80110fc <HAL_I2S_RxCpltCallback+0x24>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	687a      	ldr	r2, [r7, #4]
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d104      	bne.n	80110f4 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 80110ea:	2380      	movs	r3, #128	@ 0x80
 80110ec:	009b      	lsls	r3, r3, #2
 80110ee:	0018      	movs	r0, r3
 80110f0:	f000 f806 	bl	8011100 <processHalfDMAbuffer>
  }
}
 80110f4:	46c0      	nop			@ (mov r8, r8)
 80110f6:	46bd      	mov	sp, r7
 80110f8:	b002      	add	sp, #8
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	20001a10 	.word	0x20001a10

08011100 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	005a      	lsls	r2, r3, #1
 801110c:	4b15      	ldr	r3, [pc, #84]	@ (8011164 <processHalfDMAbuffer+0x64>)
 801110e:	18d3      	adds	r3, r2, r3
 8011110:	4a15      	ldr	r2, [pc, #84]	@ (8011168 <processHalfDMAbuffer+0x68>)
 8011112:	2180      	movs	r1, #128	@ 0x80
 8011114:	0089      	lsls	r1, r1, #2
 8011116:	0018      	movs	r0, r3
 8011118:	f000 fd35 	bl	8011b86 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 801111c:	4b13      	ldr	r3, [pc, #76]	@ (801116c <processHalfDMAbuffer+0x6c>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	425a      	negs	r2, r3
 8011122:	4153      	adcs	r3, r2
 8011124:	b2da      	uxtb	r2, r3
 8011126:	4b11      	ldr	r3, [pc, #68]	@ (801116c <processHalfDMAbuffer+0x6c>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	2109      	movs	r1, #9
 801112c:	4299      	cmp	r1, r3
 801112e:	419b      	sbcs	r3, r3
 8011130:	425b      	negs	r3, r3
 8011132:	b2db      	uxtb	r3, r3
 8011134:	480c      	ldr	r0, [pc, #48]	@ (8011168 <processHalfDMAbuffer+0x68>)
 8011136:	2180      	movs	r1, #128	@ 0x80
 8011138:	f000 fb46 	bl	80117c8 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 801113c:	4b0b      	ldr	r3, [pc, #44]	@ (801116c <processHalfDMAbuffer+0x6c>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	2b09      	cmp	r3, #9
 8011142:	d804      	bhi.n	801114e <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8011144:	4b09      	ldr	r3, [pc, #36]	@ (801116c <processHalfDMAbuffer+0x6c>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	1c5a      	adds	r2, r3, #1
 801114a:	4b08      	ldr	r3, [pc, #32]	@ (801116c <processHalfDMAbuffer+0x6c>)
 801114c:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 801114e:	4b08      	ldr	r3, [pc, #32]	@ (8011170 <processHalfDMAbuffer+0x70>)
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	b2db      	uxtb	r3, r3
 8011154:	2b00      	cmp	r3, #0
 8011156:	d001      	beq.n	801115c <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8011158:	f000 f826 	bl	80111a8 <calculateSPLQ31>
    }
}
 801115c:	46c0      	nop			@ (mov r8, r8)
 801115e:	46bd      	mov	sp, r7
 8011160:	b002      	add	sp, #8
 8011162:	bd80      	pop	{r7, pc}
 8011164:	2000100c 	.word	0x2000100c
 8011168:	2000180c 	.word	0x2000180c
 801116c:	20000fcc 	.word	0x20000fcc
 8011170:	20000fc7 	.word	0x20000fc7

08011174 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 801117c:	4b07      	ldr	r3, [pc, #28]	@ (801119c <HAL_I2S_ErrorCallback+0x28>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	687a      	ldr	r2, [r7, #4]
 8011182:	429a      	cmp	r2, r3
 8011184:	d106      	bne.n	8011194 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8011186:	4a06      	ldr	r2, [pc, #24]	@ (80111a0 <HAL_I2S_ErrorCallback+0x2c>)
 8011188:	239e      	movs	r3, #158	@ 0x9e
 801118a:	0059      	lsls	r1, r3, #1
 801118c:	4b05      	ldr	r3, [pc, #20]	@ (80111a4 <HAL_I2S_ErrorCallback+0x30>)
 801118e:	0018      	movs	r0, r3
 8011190:	f002 f994 	bl	80134bc <errorHandler>
  }
}
 8011194:	46c0      	nop			@ (mov r8, r8)
 8011196:	46bd      	mov	sp, r7
 8011198:	b002      	add	sp, #8
 801119a:	bd80      	pop	{r7, pc}
 801119c:	20001a10 	.word	0x20001a10
 80111a0:	0802d4c8 	.word	0x0802d4c8
 80111a4:	0802de38 	.word	0x0802de38

080111a8 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 80111a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111aa:	b0b3      	sub	sp, #204	@ 0xcc
 80111ac:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 80111ae:	4ae2      	ldr	r2, [pc, #904]	@ (8011538 <calculateSPLQ31+0x390>)
 80111b0:	2338      	movs	r3, #56	@ 0x38
 80111b2:	2030      	movs	r0, #48	@ 0x30
 80111b4:	181b      	adds	r3, r3, r0
 80111b6:	19d9      	adds	r1, r3, r7
 80111b8:	2334      	movs	r3, #52	@ 0x34
 80111ba:	181b      	adds	r3, r3, r0
 80111bc:	19d8      	adds	r0, r3, r7
 80111be:	2380      	movs	r3, #128	@ 0x80
 80111c0:	f000 fc36 	bl	8011a30 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 80111c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	da00      	bge.n	80111cc <calculateSPLQ31+0x24>
 80111ca:	3301      	adds	r3, #1
 80111cc:	105b      	asrs	r3, r3, #1
 80111ce:	001a      	movs	r2, r3
 80111d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	da00      	bge.n	80111d8 <calculateSPLQ31+0x30>
 80111d6:	3301      	adds	r3, #1
 80111d8:	105b      	asrs	r3, r3, #1
 80111da:	18d3      	adds	r3, r2, r3
 80111dc:	2188      	movs	r1, #136	@ 0x88
 80111de:	187a      	adds	r2, r7, r1
 80111e0:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 80111e2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80111e4:	187b      	adds	r3, r7, r1
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	3304      	adds	r3, #4
 80111ec:	2284      	movs	r2, #132	@ 0x84
 80111ee:	18b9      	adds	r1, r7, r2
 80111f0:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 80111f2:	18bb      	adds	r3, r7, r2
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	4ad1      	ldr	r2, [pc, #836]	@ (801153c <calculateSPLQ31+0x394>)
 80111f8:	0019      	movs	r1, r3
 80111fa:	0010      	movs	r0, r2
 80111fc:	f000 fc58 	bl	8011ab0 <getPo2factor>
 8011200:	0003      	movs	r3, r0
 8011202:	2280      	movs	r2, #128	@ 0x80
 8011204:	18ba      	adds	r2, r7, r2
 8011206:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8011208:	2300      	movs	r3, #0
 801120a:	2284      	movs	r2, #132	@ 0x84
 801120c:	2130      	movs	r1, #48	@ 0x30
 801120e:	1852      	adds	r2, r2, r1
 8011210:	19d2      	adds	r2, r2, r7
 8011212:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011214:	2300      	movs	r3, #0
 8011216:	2280      	movs	r2, #128	@ 0x80
 8011218:	1852      	adds	r2, r2, r1
 801121a:	19d2      	adds	r2, r2, r7
 801121c:	6013      	str	r3, [r2, #0]
 801121e:	e032      	b.n	8011286 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8011220:	4ac5      	ldr	r2, [pc, #788]	@ (8011538 <calculateSPLQ31+0x390>)
 8011222:	2680      	movs	r6, #128	@ 0x80
 8011224:	2330      	movs	r3, #48	@ 0x30
 8011226:	18f1      	adds	r1, r6, r3
 8011228:	19cb      	adds	r3, r1, r7
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	009b      	lsls	r3, r3, #2
 801122e:	589a      	ldr	r2, [r3, r2]
 8011230:	2188      	movs	r1, #136	@ 0x88
 8011232:	1879      	adds	r1, r7, r1
 8011234:	680b      	ldr	r3, [r1, #0]
 8011236:	1ad2      	subs	r2, r2, r3
 8011238:	2180      	movs	r1, #128	@ 0x80
 801123a:	1879      	adds	r1, r7, r1
 801123c:	680b      	ldr	r3, [r1, #0]
 801123e:	409a      	lsls	r2, r3
 8011240:	0011      	movs	r1, r2
 8011242:	4abf      	ldr	r2, [pc, #764]	@ (8011540 <calculateSPLQ31+0x398>)
 8011244:	2084      	movs	r0, #132	@ 0x84
 8011246:	2330      	movs	r3, #48	@ 0x30
 8011248:	18c3      	adds	r3, r0, r3
 801124a:	19db      	adds	r3, r3, r7
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8011252:	2230      	movs	r2, #48	@ 0x30
 8011254:	1883      	adds	r3, r0, r2
 8011256:	19db      	adds	r3, r3, r7
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	3301      	adds	r3, #1
 801125c:	49b8      	ldr	r1, [pc, #736]	@ (8011540 <calculateSPLQ31+0x398>)
 801125e:	009a      	lsls	r2, r3, #2
 8011260:	2300      	movs	r3, #0
 8011262:	5053      	str	r3, [r2, r1]
        count += 2;
 8011264:	2230      	movs	r2, #48	@ 0x30
 8011266:	1883      	adds	r3, r0, r2
 8011268:	19db      	adds	r3, r3, r7
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	3302      	adds	r3, #2
 801126e:	0011      	movs	r1, r2
 8011270:	1882      	adds	r2, r0, r2
 8011272:	19d2      	adds	r2, r2, r7
 8011274:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011276:	000a      	movs	r2, r1
 8011278:	18b3      	adds	r3, r6, r2
 801127a:	19db      	adds	r3, r3, r7
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	3301      	adds	r3, #1
 8011280:	18b2      	adds	r2, r6, r2
 8011282:	19d2      	adds	r2, r2, r7
 8011284:	6013      	str	r3, [r2, #0]
 8011286:	2380      	movs	r3, #128	@ 0x80
 8011288:	2630      	movs	r6, #48	@ 0x30
 801128a:	199b      	adds	r3, r3, r6
 801128c:	19db      	adds	r3, r3, r7
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	2b7f      	cmp	r3, #127	@ 0x7f
 8011292:	d9c5      	bls.n	8011220 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8011294:	4bab      	ldr	r3, [pc, #684]	@ (8011544 <calculateSPLQ31+0x39c>)
 8011296:	6818      	ldr	r0, [r3, #0]
 8011298:	49a9      	ldr	r1, [pc, #676]	@ (8011540 <calculateSPLQ31+0x398>)
 801129a:	2301      	movs	r3, #1
 801129c:	2200      	movs	r2, #0
 801129e:	f011 ff4b 	bl	8023138 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 80112a2:	4aa9      	ldr	r2, [pc, #676]	@ (8011548 <calculateSPLQ31+0x3a0>)
 80112a4:	2338      	movs	r3, #56	@ 0x38
 80112a6:	199b      	adds	r3, r3, r6
 80112a8:	19d9      	adds	r1, r3, r7
 80112aa:	2334      	movs	r3, #52	@ 0x34
 80112ac:	199b      	adds	r3, r3, r6
 80112ae:	19d8      	adds	r0, r3, r7
 80112b0:	237e      	movs	r3, #126	@ 0x7e
 80112b2:	f000 fbbd 	bl	8011a30 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 80112b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80112b8:	2380      	movs	r3, #128	@ 0x80
 80112ba:	061b      	lsls	r3, r3, #24
 80112bc:	429a      	cmp	r2, r3
 80112be:	d101      	bne.n	80112c4 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 80112c0:	4b9e      	ldr	r3, [pc, #632]	@ (801153c <calculateSPLQ31+0x394>)
 80112c2:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 80112c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80112c6:	2380      	movs	r3, #128	@ 0x80
 80112c8:	061b      	lsls	r3, r3, #24
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d101      	bne.n	80112d2 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 80112ce:	4b9b      	ldr	r3, [pc, #620]	@ (801153c <calculateSPLQ31+0x394>)
 80112d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 80112d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80112d4:	17da      	asrs	r2, r3, #31
 80112d6:	189b      	adds	r3, r3, r2
 80112d8:	4053      	eors	r3, r2
 80112da:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 80112dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80112de:	17da      	asrs	r2, r3, #31
 80112e0:	189b      	adds	r3, r3, r2
 80112e2:	4053      	eors	r3, r2
 80112e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 80112e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80112e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80112ea:	429a      	cmp	r2, r3
 80112ec:	dd01      	ble.n	80112f2 <calculateSPLQ31+0x14a>
    {
        max = min;
 80112ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80112f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 80112f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80112f4:	3304      	adds	r3, #4
 80112f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 80112f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80112fa:	4a90      	ldr	r2, [pc, #576]	@ (801153c <calculateSPLQ31+0x394>)
 80112fc:	0019      	movs	r1, r3
 80112fe:	0010      	movs	r0, r2
 8011300:	f000 fbd6 	bl	8011ab0 <getPo2factor>
 8011304:	0003      	movs	r3, r0
 8011306:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8011308:	2302      	movs	r3, #2
 801130a:	22ac      	movs	r2, #172	@ 0xac
 801130c:	18ba      	adds	r2, r7, r2
 801130e:	6013      	str	r3, [r2, #0]
 8011310:	e012      	b.n	8011338 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8011312:	4a8b      	ldr	r2, [pc, #556]	@ (8011540 <calculateSPLQ31+0x398>)
 8011314:	20ac      	movs	r0, #172	@ 0xac
 8011316:	183b      	adds	r3, r7, r0
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	009b      	lsls	r3, r3, #2
 801131c:	589a      	ldr	r2, [r3, r2]
 801131e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011320:	409a      	lsls	r2, r3
 8011322:	0011      	movs	r1, r2
 8011324:	4a86      	ldr	r2, [pc, #536]	@ (8011540 <calculateSPLQ31+0x398>)
 8011326:	183b      	adds	r3, r7, r0
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	009b      	lsls	r3, r3, #2
 801132c:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 801132e:	183b      	adds	r3, r7, r0
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	3301      	adds	r3, #1
 8011334:	183a      	adds	r2, r7, r0
 8011336:	6013      	str	r3, [r2, #0]
 8011338:	23ac      	movs	r3, #172	@ 0xac
 801133a:	18fb      	adds	r3, r7, r3
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	2b7f      	cmp	r3, #127	@ 0x7f
 8011340:	d9e7      	bls.n	8011312 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8011342:	4b7d      	ldr	r3, [pc, #500]	@ (8011538 <calculateSPLQ31+0x390>)
 8011344:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8011346:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8011348:	4b7d      	ldr	r3, [pc, #500]	@ (8011540 <calculateSPLQ31+0x398>)
 801134a:	2240      	movs	r2, #64	@ 0x40
 801134c:	0018      	movs	r0, r3
 801134e:	f012 fc9d 	bl	8023c8c <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8011352:	2330      	movs	r3, #48	@ 0x30
 8011354:	18fb      	adds	r3, r7, r3
 8011356:	0018      	movs	r0, r3
 8011358:	2330      	movs	r3, #48	@ 0x30
 801135a:	001a      	movs	r2, r3
 801135c:	2100      	movs	r1, #0
 801135e:	f014 fae9 	bl	8025934 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8011362:	2200      	movs	r2, #0
 8011364:	2300      	movs	r3, #0
 8011366:	21a0      	movs	r1, #160	@ 0xa0
 8011368:	1879      	adds	r1, r7, r1
 801136a:	600a      	str	r2, [r1, #0]
 801136c:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 801136e:	2301      	movs	r3, #1
 8011370:	229c      	movs	r2, #156	@ 0x9c
 8011372:	18ba      	adds	r2, r7, r2
 8011374:	6013      	str	r3, [r2, #0]
 8011376:	e05b      	b.n	8011430 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8011378:	269c      	movs	r6, #156	@ 0x9c
 801137a:	19bb      	adds	r3, r7, r6
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	009a      	lsls	r2, r3, #2
 8011380:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011382:	189b      	adds	r3, r3, r2
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	613b      	str	r3, [r7, #16]
 8011388:	17db      	asrs	r3, r3, #31
 801138a:	617b      	str	r3, [r7, #20]
 801138c:	4b6f      	ldr	r3, [pc, #444]	@ (801154c <calculateSPLQ31+0x3a4>)
 801138e:	681a      	ldr	r2, [r3, #0]
 8011390:	19bb      	adds	r3, r7, r6
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	005b      	lsls	r3, r3, #1
 8011396:	18d3      	adds	r3, r2, r3
 8011398:	881b      	ldrh	r3, [r3, #0]
 801139a:	60bb      	str	r3, [r7, #8]
 801139c:	2300      	movs	r3, #0
 801139e:	60fb      	str	r3, [r7, #12]
 80113a0:	68ba      	ldr	r2, [r7, #8]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	6938      	ldr	r0, [r7, #16]
 80113a6:	6979      	ldr	r1, [r7, #20]
 80113a8:	f7ef f90a 	bl	80005c0 <__aeabi_lmul>
 80113ac:	0002      	movs	r2, r0
 80113ae:	000b      	movs	r3, r1
 80113b0:	0010      	movs	r0, r2
 80113b2:	0019      	movs	r1, r3
 80113b4:	23a0      	movs	r3, #160	@ 0xa0
 80113b6:	18fa      	adds	r2, r7, r3
 80113b8:	6853      	ldr	r3, [r2, #4]
 80113ba:	6812      	ldr	r2, [r2, #0]
 80113bc:	1812      	adds	r2, r2, r0
 80113be:	414b      	adcs	r3, r1
 80113c0:	21a0      	movs	r1, #160	@ 0xa0
 80113c2:	1879      	adds	r1, r7, r1
 80113c4:	600a      	str	r2, [r1, #0]
 80113c6:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 80113c8:	4b61      	ldr	r3, [pc, #388]	@ (8011550 <calculateSPLQ31+0x3a8>)
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	19bb      	adds	r3, r7, r6
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	18d3      	adds	r3, r2, r3
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	2b06      	cmp	r3, #6
 80113d6:	d025      	beq.n	8011424 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 80113d8:	4b5d      	ldr	r3, [pc, #372]	@ (8011550 <calculateSPLQ31+0x3a8>)
 80113da:	681a      	ldr	r2, [r3, #0]
 80113dc:	19bb      	adds	r3, r7, r6
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	18d3      	adds	r3, r2, r3
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	2230      	movs	r2, #48	@ 0x30
 80113e6:	18ba      	adds	r2, r7, r2
 80113e8:	00db      	lsls	r3, r3, #3
 80113ea:	18d3      	adds	r3, r2, r3
 80113ec:	6818      	ldr	r0, [r3, #0]
 80113ee:	6859      	ldr	r1, [r3, #4]
 80113f0:	19bb      	adds	r3, r7, r6
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	009a      	lsls	r2, r3, #2
 80113f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80113f8:	189b      	adds	r3, r3, r2
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	603b      	str	r3, [r7, #0]
 80113fe:	17db      	asrs	r3, r3, #31
 8011400:	607b      	str	r3, [r7, #4]
 8011402:	4b53      	ldr	r3, [pc, #332]	@ (8011550 <calculateSPLQ31+0x3a8>)
 8011404:	681a      	ldr	r2, [r3, #0]
 8011406:	19be      	adds	r6, r7, r6
 8011408:	6833      	ldr	r3, [r6, #0]
 801140a:	18d3      	adds	r3, r2, r3
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	001e      	movs	r6, r3
 8011410:	683a      	ldr	r2, [r7, #0]
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	1880      	adds	r0, r0, r2
 8011416:	4159      	adcs	r1, r3
 8011418:	2330      	movs	r3, #48	@ 0x30
 801141a:	18fa      	adds	r2, r7, r3
 801141c:	00f3      	lsls	r3, r6, #3
 801141e:	18d3      	adds	r3, r2, r3
 8011420:	6018      	str	r0, [r3, #0]
 8011422:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011424:	229c      	movs	r2, #156	@ 0x9c
 8011426:	18bb      	adds	r3, r7, r2
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	3301      	adds	r3, #1
 801142c:	18ba      	adds	r2, r7, r2
 801142e:	6013      	str	r3, [r2, #0]
 8011430:	239c      	movs	r3, #156	@ 0x9c
 8011432:	18fb      	adds	r3, r7, r3
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	2b3f      	cmp	r3, #63	@ 0x3f
 8011438:	d99e      	bls.n	8011378 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 801143a:	2380      	movs	r3, #128	@ 0x80
 801143c:	18fb      	adds	r3, r7, r3
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	005b      	lsls	r3, r3, #1
 8011442:	001a      	movs	r2, r3
 8011444:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011446:	005b      	lsls	r3, r3, #1
 8011448:	18d3      	adds	r3, r2, r3
 801144a:	3b22      	subs	r3, #34	@ 0x22
 801144c:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 801144e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011450:	17da      	asrs	r2, r3, #31
 8011452:	189b      	adds	r3, r3, r2
 8011454:	4053      	eors	r3, r2
 8011456:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8011458:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801145a:	2b00      	cmp	r3, #0
 801145c:	da62      	bge.n	8011524 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 801145e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011460:	3b20      	subs	r3, #32
 8011462:	2b00      	cmp	r3, #0
 8011464:	db05      	blt.n	8011472 <calculateSPLQ31+0x2ca>
 8011466:	22a0      	movs	r2, #160	@ 0xa0
 8011468:	18ba      	adds	r2, r7, r2
 801146a:	6812      	ldr	r2, [r2, #0]
 801146c:	409a      	lsls	r2, r3
 801146e:	627a      	str	r2, [r7, #36]	@ 0x24
 8011470:	e010      	b.n	8011494 <calculateSPLQ31+0x2ec>
 8011472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011474:	2220      	movs	r2, #32
 8011476:	1ad3      	subs	r3, r2, r3
 8011478:	22a0      	movs	r2, #160	@ 0xa0
 801147a:	18ba      	adds	r2, r7, r2
 801147c:	6812      	ldr	r2, [r2, #0]
 801147e:	40da      	lsrs	r2, r3
 8011480:	0013      	movs	r3, r2
 8011482:	22a4      	movs	r2, #164	@ 0xa4
 8011484:	18ba      	adds	r2, r7, r2
 8011486:	6811      	ldr	r1, [r2, #0]
 8011488:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801148a:	4091      	lsls	r1, r2
 801148c:	6279      	str	r1, [r7, #36]	@ 0x24
 801148e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011490:	431a      	orrs	r2, r3
 8011492:	627a      	str	r2, [r7, #36]	@ 0x24
 8011494:	21a0      	movs	r1, #160	@ 0xa0
 8011496:	187b      	adds	r3, r7, r1
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801149c:	409a      	lsls	r2, r3
 801149e:	623a      	str	r2, [r7, #32]
 80114a0:	6a3b      	ldr	r3, [r7, #32]
 80114a2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80114a4:	187a      	adds	r2, r7, r1
 80114a6:	6013      	str	r3, [r2, #0]
 80114a8:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80114aa:	2300      	movs	r3, #0
 80114ac:	2298      	movs	r2, #152	@ 0x98
 80114ae:	18ba      	adds	r2, r7, r2
 80114b0:	6013      	str	r3, [r2, #0]
 80114b2:	e031      	b.n	8011518 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 80114b4:	2330      	movs	r3, #48	@ 0x30
 80114b6:	18fa      	adds	r2, r7, r3
 80114b8:	2398      	movs	r3, #152	@ 0x98
 80114ba:	18fb      	adds	r3, r7, r3
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	00db      	lsls	r3, r3, #3
 80114c0:	18d3      	adds	r3, r2, r3
 80114c2:	681a      	ldr	r2, [r3, #0]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80114c8:	3920      	subs	r1, #32
 80114ca:	2900      	cmp	r1, #0
 80114cc:	db03      	blt.n	80114d6 <calculateSPLQ31+0x32e>
 80114ce:	0010      	movs	r0, r2
 80114d0:	4088      	lsls	r0, r1
 80114d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80114d4:	e00c      	b.n	80114f0 <calculateSPLQ31+0x348>
 80114d6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80114d8:	2020      	movs	r0, #32
 80114da:	1a41      	subs	r1, r0, r1
 80114dc:	0010      	movs	r0, r2
 80114de:	40c8      	lsrs	r0, r1
 80114e0:	0001      	movs	r1, r0
 80114e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80114e4:	001c      	movs	r4, r3
 80114e6:	4084      	lsls	r4, r0
 80114e8:	62fc      	str	r4, [r7, #44]	@ 0x2c
 80114ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80114ec:	4308      	orrs	r0, r1
 80114ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80114f0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80114f2:	0013      	movs	r3, r2
 80114f4:	408b      	lsls	r3, r1
 80114f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80114f8:	2330      	movs	r3, #48	@ 0x30
 80114fa:	18fa      	adds	r2, r7, r3
 80114fc:	2098      	movs	r0, #152	@ 0x98
 80114fe:	183b      	adds	r3, r7, r0
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	00db      	lsls	r3, r3, #3
 8011504:	18d3      	adds	r3, r2, r3
 8011506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801150a:	6019      	str	r1, [r3, #0]
 801150c:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801150e:	183b      	adds	r3, r7, r0
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	3301      	adds	r3, #1
 8011514:	183a      	adds	r2, r7, r0
 8011516:	6013      	str	r3, [r2, #0]
 8011518:	2398      	movs	r3, #152	@ 0x98
 801151a:	18fb      	adds	r3, r7, r3
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2b05      	cmp	r3, #5
 8011520:	d9c8      	bls.n	80114b4 <calculateSPLQ31+0x30c>
 8011522:	e06b      	b.n	80115fc <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8011524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011526:	3b20      	subs	r3, #32
 8011528:	2b00      	cmp	r3, #0
 801152a:	db13      	blt.n	8011554 <calculateSPLQ31+0x3ac>
 801152c:	22a4      	movs	r2, #164	@ 0xa4
 801152e:	18ba      	adds	r2, r7, r2
 8011530:	6812      	ldr	r2, [r2, #0]
 8011532:	40da      	lsrs	r2, r3
 8011534:	61ba      	str	r2, [r7, #24]
 8011536:	e01e      	b.n	8011576 <calculateSPLQ31+0x3ce>
 8011538:	2000180c 	.word	0x2000180c
 801153c:	7fffffff 	.word	0x7fffffff
 8011540:	20001a58 	.word	0x20001a58
 8011544:	200000c8 	.word	0x200000c8
 8011548:	20001a60 	.word	0x20001a60
 801154c:	200000cc 	.word	0x200000cc
 8011550:	200000d8 	.word	0x200000d8
 8011554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011556:	2220      	movs	r2, #32
 8011558:	1ad3      	subs	r3, r2, r3
 801155a:	22a4      	movs	r2, #164	@ 0xa4
 801155c:	18ba      	adds	r2, r7, r2
 801155e:	6812      	ldr	r2, [r2, #0]
 8011560:	409a      	lsls	r2, r3
 8011562:	0013      	movs	r3, r2
 8011564:	22a0      	movs	r2, #160	@ 0xa0
 8011566:	18ba      	adds	r2, r7, r2
 8011568:	6811      	ldr	r1, [r2, #0]
 801156a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801156c:	40d1      	lsrs	r1, r2
 801156e:	61b9      	str	r1, [r7, #24]
 8011570:	69ba      	ldr	r2, [r7, #24]
 8011572:	431a      	orrs	r2, r3
 8011574:	61ba      	str	r2, [r7, #24]
 8011576:	23a4      	movs	r3, #164	@ 0xa4
 8011578:	18fb      	adds	r3, r7, r3
 801157a:	681a      	ldr	r2, [r3, #0]
 801157c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801157e:	40da      	lsrs	r2, r3
 8011580:	61fa      	str	r2, [r7, #28]
 8011582:	69ba      	ldr	r2, [r7, #24]
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	21a0      	movs	r1, #160	@ 0xa0
 8011588:	1879      	adds	r1, r7, r1
 801158a:	600a      	str	r2, [r1, #0]
 801158c:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801158e:	2300      	movs	r3, #0
 8011590:	2294      	movs	r2, #148	@ 0x94
 8011592:	18ba      	adds	r2, r7, r2
 8011594:	6013      	str	r3, [r2, #0]
 8011596:	e02c      	b.n	80115f2 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8011598:	2330      	movs	r3, #48	@ 0x30
 801159a:	18fa      	adds	r2, r7, r3
 801159c:	2394      	movs	r3, #148	@ 0x94
 801159e:	18fb      	adds	r3, r7, r3
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	00db      	lsls	r3, r3, #3
 80115a4:	18d3      	adds	r3, r2, r3
 80115a6:	681a      	ldr	r2, [r3, #0]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80115ac:	3920      	subs	r1, #32
 80115ae:	2900      	cmp	r1, #0
 80115b0:	db03      	blt.n	80115ba <calculateSPLQ31+0x412>
 80115b2:	0018      	movs	r0, r3
 80115b4:	40c8      	lsrs	r0, r1
 80115b6:	0004      	movs	r4, r0
 80115b8:	e00a      	b.n	80115d0 <calculateSPLQ31+0x428>
 80115ba:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80115bc:	2020      	movs	r0, #32
 80115be:	1a41      	subs	r1, r0, r1
 80115c0:	0018      	movs	r0, r3
 80115c2:	4088      	lsls	r0, r1
 80115c4:	0001      	movs	r1, r0
 80115c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80115c8:	0016      	movs	r6, r2
 80115ca:	40c6      	lsrs	r6, r0
 80115cc:	0034      	movs	r4, r6
 80115ce:	430c      	orrs	r4, r1
 80115d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80115d2:	40cb      	lsrs	r3, r1
 80115d4:	001d      	movs	r5, r3
 80115d6:	2330      	movs	r3, #48	@ 0x30
 80115d8:	18fa      	adds	r2, r7, r3
 80115da:	2194      	movs	r1, #148	@ 0x94
 80115dc:	187b      	adds	r3, r7, r1
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	00db      	lsls	r3, r3, #3
 80115e2:	18d3      	adds	r3, r2, r3
 80115e4:	601c      	str	r4, [r3, #0]
 80115e6:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80115e8:	187b      	adds	r3, r7, r1
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	3301      	adds	r3, #1
 80115ee:	187a      	adds	r2, r7, r1
 80115f0:	6013      	str	r3, [r2, #0]
 80115f2:	2394      	movs	r3, #148	@ 0x94
 80115f4:	18fb      	adds	r3, r7, r3
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	2b05      	cmp	r3, #5
 80115fa:	d9cd      	bls.n	8011598 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 80115fc:	230f      	movs	r3, #15
 80115fe:	425d      	negs	r5, r3
 8011600:	2305      	movs	r3, #5
 8011602:	425e      	negs	r6, r3
 8011604:	4b4a      	ldr	r3, [pc, #296]	@ (8011730 <calculateSPLQ31+0x588>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	681a      	ldr	r2, [r3, #0]
 801160a:	4b4a      	ldr	r3, [pc, #296]	@ (8011734 <calculateSPLQ31+0x58c>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	21a0      	movs	r1, #160	@ 0xa0
 8011612:	1879      	adds	r1, r7, r1
 8011614:	6808      	ldr	r0, [r1, #0]
 8011616:	6849      	ldr	r1, [r1, #4]
 8011618:	4c47      	ldr	r4, [pc, #284]	@ (8011738 <calculateSPLQ31+0x590>)
 801161a:	9403      	str	r4, [sp, #12]
 801161c:	4c47      	ldr	r4, [pc, #284]	@ (801173c <calculateSPLQ31+0x594>)
 801161e:	9402      	str	r4, [sp, #8]
 8011620:	9301      	str	r3, [sp, #4]
 8011622:	9200      	str	r2, [sp, #0]
 8011624:	0033      	movs	r3, r6
 8011626:	002a      	movs	r2, r5
 8011628:	f000 fa86 	bl	8011b38 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 801162c:	2300      	movs	r3, #0
 801162e:	2290      	movs	r2, #144	@ 0x90
 8011630:	18ba      	adds	r2, r7, r2
 8011632:	6013      	str	r3, [r2, #0]
 8011634:	e026      	b.n	8011684 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8011636:	2330      	movs	r3, #48	@ 0x30
 8011638:	18fa      	adds	r2, r7, r3
 801163a:	2490      	movs	r4, #144	@ 0x90
 801163c:	193b      	adds	r3, r7, r4
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	00db      	lsls	r3, r3, #3
 8011642:	18d3      	adds	r3, r2, r3
 8011644:	6818      	ldr	r0, [r3, #0]
 8011646:	6859      	ldr	r1, [r3, #4]
 8011648:	230f      	movs	r3, #15
 801164a:	425d      	negs	r5, r3
 801164c:	2305      	movs	r3, #5
 801164e:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8011650:	193b      	adds	r3, r7, r4
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	009a      	lsls	r2, r3, #2
 8011656:	4b3a      	ldr	r3, [pc, #232]	@ (8011740 <calculateSPLQ31+0x598>)
 8011658:	18d3      	adds	r3, r2, r3
 801165a:	193a      	adds	r2, r7, r4
 801165c:	6812      	ldr	r2, [r2, #0]
 801165e:	0094      	lsls	r4, r2, #2
 8011660:	4a38      	ldr	r2, [pc, #224]	@ (8011744 <calculateSPLQ31+0x59c>)
 8011662:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8011664:	9203      	str	r2, [sp, #12]
 8011666:	9302      	str	r3, [sp, #8]
 8011668:	2300      	movs	r3, #0
 801166a:	9301      	str	r3, [sp, #4]
 801166c:	2300      	movs	r3, #0
 801166e:	9300      	str	r3, [sp, #0]
 8011670:	0033      	movs	r3, r6
 8011672:	002a      	movs	r2, r5
 8011674:	f000 fa60 	bl	8011b38 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011678:	2490      	movs	r4, #144	@ 0x90
 801167a:	193b      	adds	r3, r7, r4
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	3301      	adds	r3, #1
 8011680:	193a      	adds	r2, r7, r4
 8011682:	6013      	str	r3, [r2, #0]
 8011684:	2390      	movs	r3, #144	@ 0x90
 8011686:	18fb      	adds	r3, r7, r3
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	2b05      	cmp	r3, #5
 801168c:	d9d3      	bls.n	8011636 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 801168e:	4b2b      	ldr	r3, [pc, #172]	@ (801173c <calculateSPLQ31+0x594>)
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	4b2d      	ldr	r3, [pc, #180]	@ (8011748 <calculateSPLQ31+0x5a0>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	18d2      	adds	r2, r2, r3
 8011698:	4b2b      	ldr	r3, [pc, #172]	@ (8011748 <calculateSPLQ31+0x5a0>)
 801169a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 801169c:	4b26      	ldr	r3, [pc, #152]	@ (8011738 <calculateSPLQ31+0x590>)
 801169e:	681a      	ldr	r2, [r3, #0]
 80116a0:	4b2a      	ldr	r3, [pc, #168]	@ (801174c <calculateSPLQ31+0x5a4>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	18d2      	adds	r2, r2, r3
 80116a6:	4b29      	ldr	r3, [pc, #164]	@ (801174c <calculateSPLQ31+0x5a4>)
 80116a8:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80116aa:	2300      	movs	r3, #0
 80116ac:	228c      	movs	r2, #140	@ 0x8c
 80116ae:	18ba      	adds	r2, r7, r2
 80116b0:	6013      	str	r3, [r2, #0]
 80116b2:	e025      	b.n	8011700 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 80116b4:	4b22      	ldr	r3, [pc, #136]	@ (8011740 <calculateSPLQ31+0x598>)
 80116b6:	208c      	movs	r0, #140	@ 0x8c
 80116b8:	183a      	adds	r2, r7, r0
 80116ba:	6812      	ldr	r2, [r2, #0]
 80116bc:	0092      	lsls	r2, r2, #2
 80116be:	58d2      	ldr	r2, [r2, r3]
 80116c0:	4b23      	ldr	r3, [pc, #140]	@ (8011750 <calculateSPLQ31+0x5a8>)
 80116c2:	1839      	adds	r1, r7, r0
 80116c4:	6809      	ldr	r1, [r1, #0]
 80116c6:	0089      	lsls	r1, r1, #2
 80116c8:	58cb      	ldr	r3, [r1, r3]
 80116ca:	18d1      	adds	r1, r2, r3
 80116cc:	4b20      	ldr	r3, [pc, #128]	@ (8011750 <calculateSPLQ31+0x5a8>)
 80116ce:	183a      	adds	r2, r7, r0
 80116d0:	6812      	ldr	r2, [r2, #0]
 80116d2:	0092      	lsls	r2, r2, #2
 80116d4:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 80116d6:	4b1b      	ldr	r3, [pc, #108]	@ (8011744 <calculateSPLQ31+0x59c>)
 80116d8:	183a      	adds	r2, r7, r0
 80116da:	6812      	ldr	r2, [r2, #0]
 80116dc:	0092      	lsls	r2, r2, #2
 80116de:	58d2      	ldr	r2, [r2, r3]
 80116e0:	4b1c      	ldr	r3, [pc, #112]	@ (8011754 <calculateSPLQ31+0x5ac>)
 80116e2:	1839      	adds	r1, r7, r0
 80116e4:	6809      	ldr	r1, [r1, #0]
 80116e6:	0089      	lsls	r1, r1, #2
 80116e8:	58cb      	ldr	r3, [r1, r3]
 80116ea:	18d1      	adds	r1, r2, r3
 80116ec:	4b19      	ldr	r3, [pc, #100]	@ (8011754 <calculateSPLQ31+0x5ac>)
 80116ee:	183a      	adds	r2, r7, r0
 80116f0:	6812      	ldr	r2, [r2, #0]
 80116f2:	0092      	lsls	r2, r2, #2
 80116f4:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80116f6:	183b      	adds	r3, r7, r0
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	3301      	adds	r3, #1
 80116fc:	183a      	adds	r2, r7, r0
 80116fe:	6013      	str	r3, [r2, #0]
 8011700:	238c      	movs	r3, #140	@ 0x8c
 8011702:	18fb      	adds	r3, r7, r3
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	2b05      	cmp	r3, #5
 8011708:	d9d4      	bls.n	80116b4 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 801170a:	4b13      	ldr	r3, [pc, #76]	@ (8011758 <calculateSPLQ31+0x5b0>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	1c5a      	adds	r2, r3, #1
 8011710:	4b11      	ldr	r3, [pc, #68]	@ (8011758 <calculateSPLQ31+0x5b0>)
 8011712:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 8011714:	4b10      	ldr	r3, [pc, #64]	@ (8011758 <calculateSPLQ31+0x5b0>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2b0f      	cmp	r3, #15
 801171a:	d905      	bls.n	8011728 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 801171c:	4b0f      	ldr	r3, [pc, #60]	@ (801175c <calculateSPLQ31+0x5b4>)
 801171e:	2201      	movs	r2, #1
 8011720:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011722:	4b0f      	ldr	r3, [pc, #60]	@ (8011760 <calculateSPLQ31+0x5b8>)
 8011724:	2200      	movs	r2, #0
 8011726:	701a      	strb	r2, [r3, #0]
    }
}
 8011728:	46c0      	nop			@ (mov r8, r8)
 801172a:	46bd      	mov	sp, r7
 801172c:	b02f      	add	sp, #188	@ 0xbc
 801172e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011730:	200000d0 	.word	0x200000d0
 8011734:	200000d4 	.word	0x200000d4
 8011738:	20000fd8 	.word	0x20000fd8
 801173c:	20000fd4 	.word	0x20000fd4
 8011740:	20000fdc 	.word	0x20000fdc
 8011744:	20000ff4 	.word	0x20000ff4
 8011748:	20001a1c 	.word	0x20001a1c
 801174c:	20001a20 	.word	0x20001a20
 8011750:	20001a24 	.word	0x20001a24
 8011754:	20001a3c 	.word	0x20001a3c
 8011758:	20001a54 	.word	0x20001a54
 801175c:	20000fc9 	.word	0x20000fc9
 8011760:	20000fc7 	.word	0x20000fc7

08011764 <resetSPLstate>:

static void resetSPLstate(void)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 801176a:	4b11      	ldr	r3, [pc, #68]	@ (80117b0 <resetSPLstate+0x4c>)
 801176c:	2200      	movs	r2, #0
 801176e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8011770:	4b10      	ldr	r3, [pc, #64]	@ (80117b4 <resetSPLstate+0x50>)
 8011772:	2200      	movs	r2, #0
 8011774:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 8011776:	4b10      	ldr	r3, [pc, #64]	@ (80117b8 <resetSPLstate+0x54>)
 8011778:	2200      	movs	r2, #0
 801177a:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 801177c:	2300      	movs	r3, #0
 801177e:	607b      	str	r3, [r7, #4]
 8011780:	e00c      	b.n	801179c <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 8011782:	4b0e      	ldr	r3, [pc, #56]	@ (80117bc <resetSPLstate+0x58>)
 8011784:	687a      	ldr	r2, [r7, #4]
 8011786:	0092      	lsls	r2, r2, #2
 8011788:	2100      	movs	r1, #0
 801178a:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 801178c:	4b0c      	ldr	r3, [pc, #48]	@ (80117c0 <resetSPLstate+0x5c>)
 801178e:	687a      	ldr	r2, [r7, #4]
 8011790:	0092      	lsls	r2, r2, #2
 8011792:	2100      	movs	r1, #0
 8011794:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	3301      	adds	r3, #1
 801179a:	607b      	str	r3, [r7, #4]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2b05      	cmp	r3, #5
 80117a0:	d9ef      	bls.n	8011782 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 80117a2:	4b08      	ldr	r3, [pc, #32]	@ (80117c4 <resetSPLstate+0x60>)
 80117a4:	2200      	movs	r2, #0
 80117a6:	701a      	strb	r2, [r3, #0]
}
 80117a8:	46c0      	nop			@ (mov r8, r8)
 80117aa:	46bd      	mov	sp, r7
 80117ac:	b002      	add	sp, #8
 80117ae:	bd80      	pop	{r7, pc}
 80117b0:	20001a1c 	.word	0x20001a1c
 80117b4:	20001a20 	.word	0x20001a20
 80117b8:	20001a54 	.word	0x20001a54
 80117bc:	20001a24 	.word	0x20001a24
 80117c0:	20001a3c 	.word	0x20001a3c
 80117c4:	20000fc9 	.word	0x20000fc9

080117c8 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 80117c8:	b5b0      	push	{r4, r5, r7, lr}
 80117ca:	b090      	sub	sp, #64	@ 0x40
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	60f8      	str	r0, [r7, #12]
 80117d0:	60b9      	str	r1, [r7, #8]
 80117d2:	0019      	movs	r1, r3
 80117d4:	1dfb      	adds	r3, r7, #7
 80117d6:	701a      	strb	r2, [r3, #0]
 80117d8:	1dbb      	adds	r3, r7, #6
 80117da:	1c0a      	adds	r2, r1, #0
 80117dc:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 80117de:	1dfb      	adds	r3, r7, #7
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d005      	beq.n	80117f2 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 80117e6:	4b3b      	ldr	r3, [pc, #236]	@ (80118d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 80117e8:	2200      	movs	r2, #0
 80117ea:	601a      	str	r2, [r3, #0]
        lastData = 0;
 80117ec:	4b3a      	ldr	r3, [pc, #232]	@ (80118d8 <getFilteredMaxAmplitudeQ31+0x110>)
 80117ee:	2200      	movs	r2, #0
 80117f0:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 80117f2:	2300      	movs	r3, #0
 80117f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 80117f6:	2300      	movs	r3, #0
 80117f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 80117fa:	2305      	movs	r3, #5
 80117fc:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 80117fe:	2300      	movs	r3, #0
 8011800:	637b      	str	r3, [r7, #52]	@ 0x34
 8011802:	e040      	b.n	8011886 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 8011804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011806:	009b      	lsls	r3, r3, #2
 8011808:	68fa      	ldr	r2, [r7, #12]
 801180a:	18d3      	adds	r3, r2, r3
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011810:	409a      	lsls	r2, r3
 8011812:	0013      	movs	r3, r2
 8011814:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 8011816:	4b30      	ldr	r3, [pc, #192]	@ (80118d8 <getFilteredMaxAmplitudeQ31+0x110>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	425a      	negs	r2, r3
 801181c:	4b2e      	ldr	r3, [pc, #184]	@ (80118d8 <getFilteredMaxAmplitudeQ31+0x110>)
 801181e:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 8011820:	2418      	movs	r4, #24
 8011822:	193a      	adds	r2, r7, r4
 8011824:	492c      	ldr	r1, [pc, #176]	@ (80118d8 <getFilteredMaxAmplitudeQ31+0x110>)
 8011826:	231c      	movs	r3, #28
 8011828:	18f8      	adds	r0, r7, r3
 801182a:	2301      	movs	r3, #1
 801182c:	f012 fa86 	bl	8023d3c <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8011830:	2514      	movs	r5, #20
 8011832:	197a      	adds	r2, r7, r5
 8011834:	1939      	adds	r1, r7, r4
 8011836:	4829      	ldr	r0, [pc, #164]	@ (80118dc <getFilteredMaxAmplitudeQ31+0x114>)
 8011838:	2301      	movs	r3, #1
 801183a:	f012 fa4d 	bl	8023cd8 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 801183e:	2410      	movs	r4, #16
 8011840:	193a      	adds	r2, r7, r4
 8011842:	4924      	ldr	r1, [pc, #144]	@ (80118d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011844:	4826      	ldr	r0, [pc, #152]	@ (80118e0 <getFilteredMaxAmplitudeQ31+0x118>)
 8011846:	2301      	movs	r3, #1
 8011848:	f012 fa46 	bl	8023cd8 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 801184c:	4a21      	ldr	r2, [pc, #132]	@ (80118d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 801184e:	1939      	adds	r1, r7, r4
 8011850:	1978      	adds	r0, r7, r5
 8011852:	2301      	movs	r3, #1
 8011854:	f012 fa72 	bl	8023d3c <arm_add_q31>

        lastData = fx;
 8011858:	69fa      	ldr	r2, [r7, #28]
 801185a:	4b1f      	ldr	r3, [pc, #124]	@ (80118d8 <getFilteredMaxAmplitudeQ31+0x110>)
 801185c:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 801185e:	4b1d      	ldr	r3, [pc, #116]	@ (80118d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011864:	429a      	cmp	r2, r3
 8011866:	da03      	bge.n	8011870 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 8011868:	4b1a      	ldr	r3, [pc, #104]	@ (80118d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801186e:	e007      	b.n	8011880 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8011870:	4b18      	ldr	r3, [pc, #96]	@ (80118d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011876:	429a      	cmp	r2, r3
 8011878:	dd02      	ble.n	8011880 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 801187a:	4b16      	ldr	r3, [pc, #88]	@ (80118d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 8011880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011882:	3301      	adds	r3, #1
 8011884:	637b      	str	r3, [r7, #52]	@ 0x34
 8011886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	429a      	cmp	r2, r3
 801188c:	d3ba      	bcc.n	8011804 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 801188e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011890:	17da      	asrs	r2, r3, #31
 8011892:	189b      	adds	r3, r3, r2
 8011894:	4053      	eors	r3, r2
 8011896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 8011898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801189a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 801189c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801189e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118a0:	4293      	cmp	r3, r2
 80118a2:	d200      	bcs.n	80118a6 <getFilteredMaxAmplitudeQ31+0xde>
 80118a4:	0013      	movs	r3, r2
 80118a6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 80118a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118ac:	40da      	lsrs	r2, r3
 80118ae:	0013      	movs	r3, r2
 80118b0:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 80118b2:	1dbb      	adds	r3, r7, #6
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d007      	beq.n	80118ca <getFilteredMaxAmplitudeQ31+0x102>
 80118ba:	4b0a      	ldr	r3, [pc, #40]	@ (80118e4 <getFilteredMaxAmplitudeQ31+0x11c>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	6a3a      	ldr	r2, [r7, #32]
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d902      	bls.n	80118ca <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 80118c4:	4b07      	ldr	r3, [pc, #28]	@ (80118e4 <getFilteredMaxAmplitudeQ31+0x11c>)
 80118c6:	6a3a      	ldr	r2, [r7, #32]
 80118c8:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 80118ca:	6a3b      	ldr	r3, [r7, #32]
}
 80118cc:	0018      	movs	r0, r3
 80118ce:	46bd      	mov	sp, r7
 80118d0:	b010      	add	sp, #64	@ 0x40
 80118d2:	bdb0      	pop	{r4, r5, r7, pc}
 80118d4:	20001e58 	.word	0x20001e58
 80118d8:	20001e5c 	.word	0x20001e5c
 80118dc:	0802de30 	.word	0x0802de30
 80118e0:	0802de34 	.word	0x0802de34
 80118e4:	20000fd0 	.word	0x20000fd0

080118e8 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b086      	sub	sp, #24
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	60f8      	str	r0, [r7, #12]
 80118f0:	60b9      	str	r1, [r7, #8]
 80118f2:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 80118f4:	4913      	ldr	r1, [pc, #76]	@ (8011944 <floatToIntAndFrac2dp+0x5c>)
 80118f6:	68f8      	ldr	r0, [r7, #12]
 80118f8:	f7ef fba2 	bl	8001040 <__aeabi_fmul>
 80118fc:	1c03      	adds	r3, r0, #0
 80118fe:	1c18      	adds	r0, r3, #0
 8011900:	f016 ff16 	bl	8028730 <roundf>
 8011904:	1c03      	adds	r3, r0, #0
 8011906:	1c18      	adds	r0, r3, #0
 8011908:	f7ee fe88 	bl	800061c <__aeabi_f2uiz>
 801190c:	0003      	movs	r3, r0
 801190e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	2164      	movs	r1, #100	@ 0x64
 8011914:	0018      	movs	r0, r3
 8011916:	f7ee fc45 	bl	80001a4 <__udivsi3>
 801191a:	0003      	movs	r3, r0
 801191c:	001a      	movs	r2, r3
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	b2da      	uxtb	r2, r3
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	b2db      	uxtb	r3, r3
 801192c:	2164      	movs	r1, #100	@ 0x64
 801192e:	434b      	muls	r3, r1
 8011930:	b2db      	uxtb	r3, r3
 8011932:	1ad3      	subs	r3, r2, r3
 8011934:	b2da      	uxtb	r2, r3
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	701a      	strb	r2, [r3, #0]
}
 801193a:	46c0      	nop			@ (mov r8, r8)
 801193c:	46bd      	mov	sp, r7
 801193e:	b006      	add	sp, #24
 8011940:	bd80      	pop	{r7, pc}
 8011942:	46c0      	nop			@ (mov r8, r8)
 8011944:	42c80000 	.word	0x42c80000

08011948 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b086      	sub	sp, #24
 801194c:	af00      	add	r7, sp, #0
 801194e:	60f8      	str	r0, [r7, #12]
 8011950:	60b9      	str	r1, [r7, #8]
 8011952:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 8011954:	4914      	ldr	r1, [pc, #80]	@ (80119a8 <floatToIntAndFrac1dp+0x60>)
 8011956:	68f8      	ldr	r0, [r7, #12]
 8011958:	f7ef fb72 	bl	8001040 <__aeabi_fmul>
 801195c:	1c03      	adds	r3, r0, #0
 801195e:	1c18      	adds	r0, r3, #0
 8011960:	f016 fee6 	bl	8028730 <roundf>
 8011964:	1c03      	adds	r3, r0, #0
 8011966:	1c18      	adds	r0, r3, #0
 8011968:	f7ee fe58 	bl	800061c <__aeabi_f2uiz>
 801196c:	0003      	movs	r3, r0
 801196e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	210a      	movs	r1, #10
 8011974:	0018      	movs	r0, r3
 8011976:	f7ee fc15 	bl	80001a4 <__udivsi3>
 801197a:	0003      	movs	r3, r0
 801197c:	001a      	movs	r2, r3
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	b2da      	uxtb	r2, r3
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	b2db      	uxtb	r3, r3
 801198c:	1c19      	adds	r1, r3, #0
 801198e:	0089      	lsls	r1, r1, #2
 8011990:	18cb      	adds	r3, r1, r3
 8011992:	18db      	adds	r3, r3, r3
 8011994:	b2db      	uxtb	r3, r3
 8011996:	1ad3      	subs	r3, r2, r3
 8011998:	b2da      	uxtb	r2, r3
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	701a      	strb	r2, [r3, #0]
}
 801199e:	46c0      	nop			@ (mov r8, r8)
 80119a0:	46bd      	mov	sp, r7
 80119a2:	b006      	add	sp, #24
 80119a4:	bd80      	pop	{r7, pc}
 80119a6:	46c0      	nop			@ (mov r8, r8)
 80119a8:	41200000 	.word	0x41200000

080119ac <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 80119ac:	b590      	push	{r4, r7, lr}
 80119ae:	b087      	sub	sp, #28
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	60f8      	str	r0, [r7, #12]
 80119b4:	60b9      	str	r1, [r7, #8]
 80119b6:	607a      	str	r2, [r7, #4]
 80119b8:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f7ef ff34 	bl	8001828 <__aeabi_i2f>
 80119c0:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80119c2:	6838      	ldr	r0, [r7, #0]
 80119c4:	f7ef ff30 	bl	8001828 <__aeabi_i2f>
 80119c8:	1c03      	adds	r3, r0, #0
 80119ca:	4918      	ldr	r1, [pc, #96]	@ (8011a2c <sumToIntAverage+0x80>)
 80119cc:	1c18      	adds	r0, r3, #0
 80119ce:	f7ef f969 	bl	8000ca4 <__aeabi_fdiv>
 80119d2:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80119d4:	1c19      	adds	r1, r3, #0
 80119d6:	1c20      	adds	r0, r4, #0
 80119d8:	f7ee ff72 	bl	80008c0 <__aeabi_fadd>
 80119dc:	1c03      	adds	r3, r0, #0
 80119de:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80119e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80119e2:	f7ef ff71 	bl	80018c8 <__aeabi_ui2f>
 80119e6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80119e8:	1c19      	adds	r1, r3, #0
 80119ea:	1c20      	adds	r0, r4, #0
 80119ec:	f7ef f95a 	bl	8000ca4 <__aeabi_fdiv>
 80119f0:	1c03      	adds	r3, r0, #0
 80119f2:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 80119f4:	2300      	movs	r3, #0
 80119f6:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 80119f8:	68ba      	ldr	r2, [r7, #8]
 80119fa:	2310      	movs	r3, #16
 80119fc:	18f9      	adds	r1, r7, r3
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	1c18      	adds	r0, r3, #0
 8011a02:	f7ff ffa1 	bl	8011948 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	2bff      	cmp	r3, #255	@ 0xff
 8011a0a:	d906      	bls.n	8011a1a <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	22ff      	movs	r2, #255	@ 0xff
 8011a10:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	2209      	movs	r2, #9
 8011a16:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 8011a18:	e003      	b.n	8011a22 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	b2da      	uxtb	r2, r3
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	701a      	strb	r2, [r3, #0]
}
 8011a22:	46c0      	nop			@ (mov r8, r8)
 8011a24:	46bd      	mov	sp, r7
 8011a26:	b007      	add	sp, #28
 8011a28:	bd90      	pop	{r4, r7, pc}
 8011a2a:	46c0      	nop			@ (mov r8, r8)
 8011a2c:	41200000 	.word	0x41200000

08011a30 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b086      	sub	sp, #24
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	60f8      	str	r0, [r7, #12]
 8011a38:	60b9      	str	r1, [r7, #8]
 8011a3a:	607a      	str	r2, [r7, #4]
 8011a3c:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	2280      	movs	r2, #128	@ 0x80
 8011a42:	0612      	lsls	r2, r2, #24
 8011a44:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	4a18      	ldr	r2, [pc, #96]	@ (8011aac <findMinMax+0x7c>)
 8011a4a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	617b      	str	r3, [r7, #20]
 8011a50:	e022      	b.n	8011a98 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	009b      	lsls	r3, r3, #2
 8011a56:	687a      	ldr	r2, [r7, #4]
 8011a58:	18d3      	adds	r3, r2, r3
 8011a5a:	681a      	ldr	r2, [r3, #0]
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	da06      	bge.n	8011a72 <findMinMax+0x42>
        {
            min[0] = array[i];
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	009b      	lsls	r3, r3, #2
 8011a68:	687a      	ldr	r2, [r7, #4]
 8011a6a:	18d3      	adds	r3, r2, r3
 8011a6c:	681a      	ldr	r2, [r3, #0]
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	18d3      	adds	r3, r2, r3
 8011a7a:	681a      	ldr	r2, [r3, #0]
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	dd06      	ble.n	8011a92 <findMinMax+0x62>
        {
            max[0] = array[i];
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	009b      	lsls	r3, r3, #2
 8011a88:	687a      	ldr	r2, [r7, #4]
 8011a8a:	18d3      	adds	r3, r2, r3
 8011a8c:	681a      	ldr	r2, [r3, #0]
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	3301      	adds	r3, #1
 8011a96:	617b      	str	r3, [r7, #20]
 8011a98:	697a      	ldr	r2, [r7, #20]
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	d3d8      	bcc.n	8011a52 <findMinMax+0x22>
        }
    }
}
 8011aa0:	46c0      	nop			@ (mov r8, r8)
 8011aa2:	46c0      	nop			@ (mov r8, r8)
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	b006      	add	sp, #24
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	46c0      	nop			@ (mov r8, r8)
 8011aac:	7fffffff 	.word	0x7fffffff

08011ab0 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b084      	sub	sp, #16
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 8011aba:	2300      	movs	r3, #0
 8011abc:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 8011abe:	687a      	ldr	r2, [r7, #4]
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d302      	bcc.n	8011acc <getPo2factor+0x1c>
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d107      	bne.n	8011adc <getPo2factor+0x2c>
    {
        return 0;
 8011acc:	2300      	movs	r3, #0
 8011ace:	e00d      	b.n	8011aec <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	085b      	lsrs	r3, r3, #1
 8011ad4:	607b      	str	r3, [r7, #4]
        bitShift++;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	3301      	adds	r3, #1
 8011ada:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 8011adc:	687a      	ldr	r2, [r7, #4]
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d2f5      	bcs.n	8011ad0 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	3b01      	subs	r3, #1
 8011ae8:	60fb      	str	r3, [r7, #12]
    return bitShift;
 8011aea:	68fb      	ldr	r3, [r7, #12]
}
 8011aec:	0018      	movs	r0, r3
 8011aee:	46bd      	mov	sp, r7
 8011af0:	b004      	add	sp, #16
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b086      	sub	sp, #24
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	60f8      	str	r0, [r7, #12]
 8011afc:	60b9      	str	r1, [r7, #8]
 8011afe:	607a      	str	r2, [r7, #4]
 8011b00:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 8011b02:	68f8      	ldr	r0, [r7, #12]
 8011b04:	f7ef fee0 	bl	80018c8 <__aeabi_ui2f>
 8011b08:	1c03      	adds	r3, r0, #0
 8011b0a:	1c19      	adds	r1, r3, #0
 8011b0c:	68b8      	ldr	r0, [r7, #8]
 8011b0e:	f7ef fa97 	bl	8001040 <__aeabi_fmul>
 8011b12:	1c03      	adds	r3, r0, #0
 8011b14:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 8011b16:	2300      	movs	r3, #0
 8011b18:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 8011b1a:	683a      	ldr	r2, [r7, #0]
 8011b1c:	2310      	movs	r3, #16
 8011b1e:	18f9      	adds	r1, r7, r3
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	1c18      	adds	r0, r3, #0
 8011b24:	f7ff fee0 	bl	80118e8 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	b29a      	uxth	r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	801a      	strh	r2, [r3, #0]
}
 8011b30:	46c0      	nop			@ (mov r8, r8)
 8011b32:	46bd      	mov	sp, r7
 8011b34:	b006      	add	sp, #24
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b084      	sub	sp, #16
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	60b8      	str	r0, [r7, #8]
 8011b40:	60f9      	str	r1, [r7, #12]
 8011b42:	607a      	str	r2, [r7, #4]
 8011b44:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 8011b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b48:	6a3a      	ldr	r2, [r7, #32]
 8011b4a:	68b8      	ldr	r0, [r7, #8]
 8011b4c:	68f9      	ldr	r1, [r7, #12]
 8011b4e:	f7f9 ff0d 	bl	800b96c <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 8011b52:	6a3b      	ldr	r3, [r7, #32]
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	18d2      	adds	r2, r2, r3
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	18d2      	adds	r2, r2, r3
 8011b5e:	6a3b      	ldr	r3, [r7, #32]
 8011b60:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 8011b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b64:	681a      	ldr	r2, [r3, #0]
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	18d2      	adds	r2, r2, r3
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	18d2      	adds	r2, r2, r3
 8011b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b70:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 8011b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b74:	6a3b      	ldr	r3, [r7, #32]
 8011b76:	0011      	movs	r1, r2
 8011b78:	0018      	movs	r0, r3
 8011b7a:	f7f9 ff87 	bl	800ba8c <correctIntFracNumber>
}
 8011b7e:	46c0      	nop			@ (mov r8, r8)
 8011b80:	46bd      	mov	sp, r7
 8011b82:	b004      	add	sp, #16
 8011b84:	bd80      	pop	{r7, pc}

08011b86 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 8011b86:	b580      	push	{r7, lr}
 8011b88:	b086      	sub	sp, #24
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	60f8      	str	r0, [r7, #12]
 8011b8e:	60b9      	str	r1, [r7, #8]
 8011b90:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 8011b92:	2300      	movs	r3, #0
 8011b94:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8011b96:	2300      	movs	r3, #0
 8011b98:	613b      	str	r3, [r7, #16]
 8011b9a:	e019      	b.n	8011bd0 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	005b      	lsls	r3, r3, #1
 8011ba0:	68fa      	ldr	r2, [r7, #12]
 8011ba2:	18d3      	adds	r3, r2, r3
 8011ba4:	881b      	ldrh	r3, [r3, #0]
 8011ba6:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8011ba8:	693a      	ldr	r2, [r7, #16]
 8011baa:	3201      	adds	r2, #1
 8011bac:	0052      	lsls	r2, r2, #1
 8011bae:	68f9      	ldr	r1, [r7, #12]
 8011bb0:	188a      	adds	r2, r1, r2
 8011bb2:	8812      	ldrh	r2, [r2, #0]
 8011bb4:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8011bb6:	0019      	movs	r1, r3
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	009b      	lsls	r3, r3, #2
 8011bbc:	687a      	ldr	r2, [r7, #4]
 8011bbe:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8011bc0:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8011bc2:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	3301      	adds	r3, #1
 8011bc8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	3304      	adds	r3, #4
 8011bce:	613b      	str	r3, [r7, #16]
 8011bd0:	693a      	ldr	r2, [r7, #16]
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d3e1      	bcc.n	8011b9c <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 8011bd8:	46c0      	nop			@ (mov r8, r8)
 8011bda:	46c0      	nop			@ (mov r8, r8)
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	b006      	add	sp, #24
 8011be0:	bd80      	pop	{r7, pc}
	...

08011be4 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 8011be4:	b580      	push	{r7, lr}
 8011be6:	af00      	add	r7, sp, #0
  init = false;
 8011be8:	4b02      	ldr	r3, [pc, #8]	@ (8011bf4 <InitDone+0x10>)
 8011bea:	2200      	movs	r2, #0
 8011bec:	701a      	strb	r2, [r3, #0]
}
 8011bee:	46c0      	nop			@ (mov r8, r8)
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}
 8011bf4:	200000dc 	.word	0x200000dc

08011bf8 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 8011bfe:	f7f7 fa73 	bl	80090e8 <ReadBatteryVoltage>
 8011c02:	1c02      	adds	r2, r0, #0
 8011c04:	4b25      	ldr	r3, [pc, #148]	@ (8011c9c <batteryChargeCheck+0xa4>)
 8011c06:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 8011c08:	4b24      	ldr	r3, [pc, #144]	@ (8011c9c <batteryChargeCheck+0xa4>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	4924      	ldr	r1, [pc, #144]	@ (8011ca0 <batteryChargeCheck+0xa8>)
 8011c0e:	1c18      	adds	r0, r3, #0
 8011c10:	f7ee fc8e 	bl	8000530 <__aeabi_fcmplt>
 8011c14:	1e03      	subs	r3, r0, #0
 8011c16:	d002      	beq.n	8011c1e <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 8011c18:	1dfb      	adds	r3, r7, #7
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 8011c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8011c9c <batteryChargeCheck+0xa4>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	491f      	ldr	r1, [pc, #124]	@ (8011ca0 <batteryChargeCheck+0xa8>)
 8011c24:	1c18      	adds	r0, r3, #0
 8011c26:	f7ee fca1 	bl	800056c <__aeabi_fcmpge>
 8011c2a:	1e03      	subs	r3, r0, #0
 8011c2c:	d00d      	beq.n	8011c4a <batteryChargeCheck+0x52>
 8011c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8011c9c <batteryChargeCheck+0xa4>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	1c18      	adds	r0, r3, #0
 8011c34:	f7f1 fe2e 	bl	8003894 <__aeabi_f2d>
 8011c38:	4a1a      	ldr	r2, [pc, #104]	@ (8011ca4 <batteryChargeCheck+0xac>)
 8011c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8011ca8 <batteryChargeCheck+0xb0>)
 8011c3c:	f7ee fc3e 	bl	80004bc <__aeabi_dcmplt>
 8011c40:	1e03      	subs	r3, r0, #0
 8011c42:	d002      	beq.n	8011c4a <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 8011c44:	1dfb      	adds	r3, r7, #7
 8011c46:	2201      	movs	r2, #1
 8011c48:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 8011c4a:	4b14      	ldr	r3, [pc, #80]	@ (8011c9c <batteryChargeCheck+0xa4>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	1c18      	adds	r0, r3, #0
 8011c50:	f7f1 fe20 	bl	8003894 <__aeabi_f2d>
 8011c54:	4a13      	ldr	r2, [pc, #76]	@ (8011ca4 <batteryChargeCheck+0xac>)
 8011c56:	4b14      	ldr	r3, [pc, #80]	@ (8011ca8 <batteryChargeCheck+0xb0>)
 8011c58:	f7ee fc4e 	bl	80004f8 <__aeabi_dcmpge>
 8011c5c:	1e03      	subs	r3, r0, #0
 8011c5e:	d00b      	beq.n	8011c78 <batteryChargeCheck+0x80>
 8011c60:	4b0e      	ldr	r3, [pc, #56]	@ (8011c9c <batteryChargeCheck+0xa4>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	2181      	movs	r1, #129	@ 0x81
 8011c66:	05c9      	lsls	r1, r1, #23
 8011c68:	1c18      	adds	r0, r3, #0
 8011c6a:	f7ee fc61 	bl	8000530 <__aeabi_fcmplt>
 8011c6e:	1e03      	subs	r3, r0, #0
 8011c70:	d002      	beq.n	8011c78 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 8011c72:	1dfb      	adds	r3, r7, #7
 8011c74:	2202      	movs	r2, #2
 8011c76:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 8011c78:	4b08      	ldr	r3, [pc, #32]	@ (8011c9c <batteryChargeCheck+0xa4>)
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	2181      	movs	r1, #129	@ 0x81
 8011c7e:	05c9      	lsls	r1, r1, #23
 8011c80:	1c18      	adds	r0, r3, #0
 8011c82:	f7ee fc73 	bl	800056c <__aeabi_fcmpge>
 8011c86:	1e03      	subs	r3, r0, #0
 8011c88:	d002      	beq.n	8011c90 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 8011c8a:	1dfb      	adds	r3, r7, #7
 8011c8c:	2203      	movs	r2, #3
 8011c8e:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8011c90:	1dfb      	adds	r3, r7, #7
 8011c92:	781b      	ldrb	r3, [r3, #0]
}
 8011c94:	0018      	movs	r0, r3
 8011c96:	46bd      	mov	sp, r7
 8011c98:	b002      	add	sp, #8
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	20001e70 	.word	0x20001e70
 8011ca0:	40600000 	.word	0x40600000
 8011ca4:	9999999a 	.word	0x9999999a
 8011ca8:	400d9999 	.word	0x400d9999

08011cac <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 8011cac:	b5b0      	push	{r4, r5, r7, lr}
 8011cae:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 8011cb0:	f7f7 fa7c 	bl	80091ac <ReadSolarVoltage>
 8011cb4:	0003      	movs	r3, r0
 8011cb6:	001a      	movs	r2, r3
 8011cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8011d24 <Calculate_LED_ON+0x78>)
 8011cba:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 8011cbc:	4b19      	ldr	r3, [pc, #100]	@ (8011d24 <Calculate_LED_ON+0x78>)
 8011cbe:	881b      	ldrh	r3, [r3, #0]
 8011cc0:	4a19      	ldr	r2, [pc, #100]	@ (8011d28 <Calculate_LED_ON+0x7c>)
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	d802      	bhi.n	8011ccc <Calculate_LED_ON+0x20>
    solmV = 2900;
 8011cc6:	4b17      	ldr	r3, [pc, #92]	@ (8011d24 <Calculate_LED_ON+0x78>)
 8011cc8:	4a18      	ldr	r2, [pc, #96]	@ (8011d2c <Calculate_LED_ON+0x80>)
 8011cca:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8011ccc:	4b15      	ldr	r3, [pc, #84]	@ (8011d24 <Calculate_LED_ON+0x78>)
 8011cce:	881b      	ldrh	r3, [r3, #0]
 8011cd0:	4a17      	ldr	r2, [pc, #92]	@ (8011d30 <Calculate_LED_ON+0x84>)
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d902      	bls.n	8011cdc <Calculate_LED_ON+0x30>
    solmV = 4700;
 8011cd6:	4b13      	ldr	r3, [pc, #76]	@ (8011d24 <Calculate_LED_ON+0x78>)
 8011cd8:	4a15      	ldr	r2, [pc, #84]	@ (8011d30 <Calculate_LED_ON+0x84>)
 8011cda:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8011cdc:	4b11      	ldr	r3, [pc, #68]	@ (8011d24 <Calculate_LED_ON+0x78>)
 8011cde:	881b      	ldrh	r3, [r3, #0]
 8011ce0:	0018      	movs	r0, r3
 8011ce2:	f7f1 fd85 	bl	80037f0 <__aeabi_i2d>
 8011ce6:	0004      	movs	r4, r0
 8011ce8:	000d      	movs	r5, r1
 8011cea:	4b0e      	ldr	r3, [pc, #56]	@ (8011d24 <Calculate_LED_ON+0x78>)
 8011cec:	881b      	ldrh	r3, [r3, #0]
 8011cee:	001a      	movs	r2, r3
 8011cf0:	4b10      	ldr	r3, [pc, #64]	@ (8011d34 <Calculate_LED_ON+0x88>)
 8011cf2:	1a9b      	subs	r3, r3, r2
 8011cf4:	0018      	movs	r0, r3
 8011cf6:	f7f1 fd7b 	bl	80037f0 <__aeabi_i2d>
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8011d38 <Calculate_LED_ON+0x8c>)
 8011cfe:	f7f0 fe29 	bl	8002954 <__aeabi_dmul>
 8011d02:	0002      	movs	r2, r0
 8011d04:	000b      	movs	r3, r1
 8011d06:	0020      	movs	r0, r4
 8011d08:	0029      	movs	r1, r5
 8011d0a:	f7ef fe23 	bl	8001954 <__aeabi_dadd>
 8011d0e:	0002      	movs	r2, r0
 8011d10:	000b      	movs	r3, r1
 8011d12:	0010      	movs	r0, r2
 8011d14:	0019      	movs	r1, r3
 8011d16:	f7ee fc99 	bl	800064c <__aeabi_d2uiz>
 8011d1a:	0003      	movs	r3, r0
 8011d1c:	b29b      	uxth	r3, r3
}
 8011d1e:	0018      	movs	r0, r3
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bdb0      	pop	{r4, r5, r7, pc}
 8011d24:	20001e74 	.word	0x20001e74
 8011d28:	00000b53 	.word	0x00000b53
 8011d2c:	00000b54 	.word	0x00000b54
 8011d30:	0000125c 	.word	0x0000125c
 8011d34:	00000dee 	.word	0x00000dee
 8011d38:	3ff80000 	.word	0x3ff80000

08011d3c <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8011d3c:	b590      	push	{r4, r7, lr}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	0004      	movs	r4, r0
 8011d44:	0008      	movs	r0, r1
 8011d46:	0011      	movs	r1, r2
 8011d48:	1dbb      	adds	r3, r7, #6
 8011d4a:	1c22      	adds	r2, r4, #0
 8011d4c:	801a      	strh	r2, [r3, #0]
 8011d4e:	1d3b      	adds	r3, r7, #4
 8011d50:	1c02      	adds	r2, r0, #0
 8011d52:	801a      	strh	r2, [r3, #0]
 8011d54:	1cbb      	adds	r3, r7, #2
 8011d56:	1c0a      	adds	r2, r1, #0
 8011d58:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8011d98 <SetStatusLED+0x5c>)
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d107      	bne.n	8011d72 <SetStatusLED+0x36>
 8011d62:	4b0e      	ldr	r3, [pc, #56]	@ (8011d9c <SetStatusLED+0x60>)
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d103      	bne.n	8011d72 <SetStatusLED+0x36>
 8011d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8011da0 <SetStatusLED+0x64>)
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d00e      	beq.n	8011d90 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8011d72:	2380      	movs	r3, #128	@ 0x80
 8011d74:	05db      	lsls	r3, r3, #23
 8011d76:	1dba      	adds	r2, r7, #6
 8011d78:	8812      	ldrh	r2, [r2, #0]
 8011d7a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8011d7c:	2380      	movs	r3, #128	@ 0x80
 8011d7e:	05db      	lsls	r3, r3, #23
 8011d80:	1d3a      	adds	r2, r7, #4
 8011d82:	8812      	ldrh	r2, [r2, #0]
 8011d84:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8011d86:	2380      	movs	r3, #128	@ 0x80
 8011d88:	05db      	lsls	r3, r3, #23
 8011d8a:	1cba      	adds	r2, r7, #2
 8011d8c:	8812      	ldrh	r2, [r2, #0]
 8011d8e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011d90:	46c0      	nop			@ (mov r8, r8)
 8011d92:	46bd      	mov	sp, r7
 8011d94:	b003      	add	sp, #12
 8011d96:	bd90      	pop	{r4, r7, pc}
 8011d98:	20001e61 	.word	0x20001e61
 8011d9c:	200000dc 	.word	0x200000dc
 8011da0:	20001e62 	.word	0x20001e62

08011da4 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8011da4:	b590      	push	{r4, r7, lr}
 8011da6:	b083      	sub	sp, #12
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	0004      	movs	r4, r0
 8011dac:	0008      	movs	r0, r1
 8011dae:	0011      	movs	r1, r2
 8011db0:	1dfb      	adds	r3, r7, #7
 8011db2:	1c22      	adds	r2, r4, #0
 8011db4:	701a      	strb	r2, [r3, #0]
 8011db6:	1dbb      	adds	r3, r7, #6
 8011db8:	1c02      	adds	r2, r0, #0
 8011dba:	701a      	strb	r2, [r3, #0]
 8011dbc:	1d7b      	adds	r3, r7, #5
 8011dbe:	1c0a      	adds	r2, r1, #0
 8011dc0:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8011dc2:	4b19      	ldr	r3, [pc, #100]	@ (8011e28 <SetDBLED+0x84>)
 8011dc4:	781b      	ldrb	r3, [r3, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d107      	bne.n	8011dda <SetDBLED+0x36>
 8011dca:	4b18      	ldr	r3, [pc, #96]	@ (8011e2c <SetDBLED+0x88>)
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d103      	bne.n	8011dda <SetDBLED+0x36>
 8011dd2:	4b17      	ldr	r3, [pc, #92]	@ (8011e30 <SetDBLED+0x8c>)
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d022      	beq.n	8011e20 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8011dda:	1dfb      	adds	r3, r7, #7
 8011ddc:	781b      	ldrb	r3, [r3, #0]
 8011dde:	2201      	movs	r2, #1
 8011de0:	4053      	eors	r3, r2
 8011de2:	b2db      	uxtb	r3, r3
 8011de4:	001a      	movs	r2, r3
 8011de6:	4b13      	ldr	r3, [pc, #76]	@ (8011e34 <SetDBLED+0x90>)
 8011de8:	2101      	movs	r1, #1
 8011dea:	0018      	movs	r0, r3
 8011dec:	f003 fa7f 	bl	80152ee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8011df0:	1dbb      	adds	r3, r7, #6
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	2201      	movs	r2, #1
 8011df6:	4053      	eors	r3, r2
 8011df8:	b2db      	uxtb	r3, r3
 8011dfa:	001a      	movs	r2, r3
 8011dfc:	2380      	movs	r3, #128	@ 0x80
 8011dfe:	005b      	lsls	r3, r3, #1
 8011e00:	480c      	ldr	r0, [pc, #48]	@ (8011e34 <SetDBLED+0x90>)
 8011e02:	0019      	movs	r1, r3
 8011e04:	f003 fa73 	bl	80152ee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8011e08:	1d7b      	adds	r3, r7, #5
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	4053      	eors	r3, r2
 8011e10:	b2db      	uxtb	r3, r3
 8011e12:	001a      	movs	r2, r3
 8011e14:	2380      	movs	r3, #128	@ 0x80
 8011e16:	009b      	lsls	r3, r3, #2
 8011e18:	4806      	ldr	r0, [pc, #24]	@ (8011e34 <SetDBLED+0x90>)
 8011e1a:	0019      	movs	r1, r3
 8011e1c:	f003 fa67 	bl	80152ee <HAL_GPIO_WritePin>
  }
}
 8011e20:	46c0      	nop			@ (mov r8, r8)
 8011e22:	46bd      	mov	sp, r7
 8011e24:	b003      	add	sp, #12
 8011e26:	bd90      	pop	{r4, r7, pc}
 8011e28:	20001e61 	.word	0x20001e61
 8011e2c:	200000dc 	.word	0x200000dc
 8011e30:	20001e62 	.word	0x20001e62
 8011e34:	50000400 	.word	0x50000400

08011e38 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8011e38:	b590      	push	{r4, r7, lr}
 8011e3a:	b083      	sub	sp, #12
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	0004      	movs	r4, r0
 8011e40:	0008      	movs	r0, r1
 8011e42:	0011      	movs	r1, r2
 8011e44:	1dbb      	adds	r3, r7, #6
 8011e46:	1c22      	adds	r2, r4, #0
 8011e48:	801a      	strh	r2, [r3, #0]
 8011e4a:	1d3b      	adds	r3, r7, #4
 8011e4c:	1c02      	adds	r2, r0, #0
 8011e4e:	801a      	strh	r2, [r3, #0]
 8011e50:	1cbb      	adds	r3, r7, #2
 8011e52:	1c0a      	adds	r2, r1, #0
 8011e54:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011e56:	4b0e      	ldr	r3, [pc, #56]	@ (8011e90 <SetVocLED+0x58>)
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d107      	bne.n	8011e6e <SetVocLED+0x36>
 8011e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8011e94 <SetVocLED+0x5c>)
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d103      	bne.n	8011e6e <SetVocLED+0x36>
 8011e66:	4b0c      	ldr	r3, [pc, #48]	@ (8011e98 <SetVocLED+0x60>)
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d00b      	beq.n	8011e86 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8011e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8011e9c <SetVocLED+0x64>)
 8011e70:	1dba      	adds	r2, r7, #6
 8011e72:	8812      	ldrh	r2, [r2, #0]
 8011e74:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8011e76:	4b09      	ldr	r3, [pc, #36]	@ (8011e9c <SetVocLED+0x64>)
 8011e78:	1d3a      	adds	r2, r7, #4
 8011e7a:	8812      	ldrh	r2, [r2, #0]
 8011e7c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8011e7e:	4b07      	ldr	r3, [pc, #28]	@ (8011e9c <SetVocLED+0x64>)
 8011e80:	1cba      	adds	r2, r7, #2
 8011e82:	8812      	ldrh	r2, [r2, #0]
 8011e84:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011e86:	46c0      	nop			@ (mov r8, r8)
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	b003      	add	sp, #12
 8011e8c:	bd90      	pop	{r4, r7, pc}
 8011e8e:	46c0      	nop			@ (mov r8, r8)
 8011e90:	20001e61 	.word	0x20001e61
 8011e94:	200000dc 	.word	0x200000dc
 8011e98:	20001e62 	.word	0x20001e62
 8011e9c:	40000400 	.word	0x40000400

08011ea0 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011ea4:	4b08      	ldr	r3, [pc, #32]	@ (8011ec8 <SetMeasurementIndicator+0x28>)
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d103      	bne.n	8011eb4 <SetMeasurementIndicator+0x14>
 8011eac:	4b07      	ldr	r3, [pc, #28]	@ (8011ecc <SetMeasurementIndicator+0x2c>)
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d006      	beq.n	8011ec2 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 8011eb4:	f7ff fefa 	bl	8011cac <Calculate_LED_ON>
 8011eb8:	0003      	movs	r3, r0
 8011eba:	001a      	movs	r2, r3
 8011ebc:	2380      	movs	r3, #128	@ 0x80
 8011ebe:	05db      	lsls	r3, r3, #23
 8011ec0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011ec2:	46c0      	nop			@ (mov r8, r8)
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	20001e61 	.word	0x20001e61
 8011ecc:	20001e62 	.word	0x20001e62

08011ed0 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011ed4:	4b07      	ldr	r3, [pc, #28]	@ (8011ef4 <ResetMeasurementIndicator+0x24>)
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d103      	bne.n	8011ee4 <ResetMeasurementIndicator+0x14>
 8011edc:	4b06      	ldr	r3, [pc, #24]	@ (8011ef8 <ResetMeasurementIndicator+0x28>)
 8011ede:	781b      	ldrb	r3, [r3, #0]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d004      	beq.n	8011eee <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 8011ee4:	2380      	movs	r3, #128	@ 0x80
 8011ee6:	05db      	lsls	r3, r3, #23
 8011ee8:	22fa      	movs	r2, #250	@ 0xfa
 8011eea:	0112      	lsls	r2, r2, #4
 8011eec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011eee:	46c0      	nop			@ (mov r8, r8)
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}
 8011ef4:	20001e61 	.word	0x20001e61
 8011ef8:	20001e62 	.word	0x20001e62

08011efc <SetMICIndicator>:
void SetMICIndicator(){
 8011efc:	b580      	push	{r7, lr}
 8011efe:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011f00:	4b19      	ldr	r3, [pc, #100]	@ (8011f68 <SetMICIndicator+0x6c>)
 8011f02:	781b      	ldrb	r3, [r3, #0]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d103      	bne.n	8011f10 <SetMICIndicator+0x14>
 8011f08:	4b18      	ldr	r3, [pc, #96]	@ (8011f6c <SetMICIndicator+0x70>)
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d007      	beq.n	8011f20 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 8011f10:	f7ff fecc 	bl	8011cac <Calculate_LED_ON>
 8011f14:	0003      	movs	r3, r0
 8011f16:	001a      	movs	r2, r3
 8011f18:	2380      	movs	r3, #128	@ 0x80
 8011f1a:	05db      	lsls	r3, r3, #23
 8011f1c:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 8011f1e:	e01f      	b.n	8011f60 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 8011f20:	4b13      	ldr	r3, [pc, #76]	@ (8011f70 <SetMICIndicator+0x74>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	1c18      	adds	r0, r3, #0
 8011f26:	f7f1 fcb5 	bl	8003894 <__aeabi_f2d>
 8011f2a:	4a12      	ldr	r2, [pc, #72]	@ (8011f74 <SetMICIndicator+0x78>)
 8011f2c:	4b12      	ldr	r3, [pc, #72]	@ (8011f78 <SetMICIndicator+0x7c>)
 8011f2e:	f7ee fad9 	bl	80004e4 <__aeabi_dcmpgt>
 8011f32:	1e03      	subs	r3, r0, #0
 8011f34:	d00a      	beq.n	8011f4c <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 8011f36:	f7ff feb9 	bl	8011cac <Calculate_LED_ON>
 8011f3a:	0003      	movs	r3, r0
 8011f3c:	001a      	movs	r2, r3
 8011f3e:	2380      	movs	r3, #128	@ 0x80
 8011f40:	05db      	lsls	r3, r3, #23
 8011f42:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8011f44:	4b0d      	ldr	r3, [pc, #52]	@ (8011f7c <SetMICIndicator+0x80>)
 8011f46:	2202      	movs	r2, #2
 8011f48:	701a      	strb	r2, [r3, #0]
}
 8011f4a:	e009      	b.n	8011f60 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 8011f4c:	f7ff feae 	bl	8011cac <Calculate_LED_ON>
 8011f50:	0003      	movs	r3, r0
 8011f52:	001a      	movs	r2, r3
 8011f54:	2380      	movs	r3, #128	@ 0x80
 8011f56:	05db      	lsls	r3, r3, #23
 8011f58:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 8011f5a:	4b08      	ldr	r3, [pc, #32]	@ (8011f7c <SetMICIndicator+0x80>)
 8011f5c:	2201      	movs	r2, #1
 8011f5e:	701a      	strb	r2, [r3, #0]
}
 8011f60:	46c0      	nop			@ (mov r8, r8)
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	46c0      	nop			@ (mov r8, r8)
 8011f68:	20001e61 	.word	0x20001e61
 8011f6c:	20001e62 	.word	0x20001e62
 8011f70:	20001e70 	.word	0x20001e70
 8011f74:	9999999a 	.word	0x9999999a
 8011f78:	400d9999 	.word	0x400d9999
 8011f7c:	20001e64 	.word	0x20001e64

08011f80 <ResetMICIndicator>:
void ResetMICIndicator(){
 8011f80:	b580      	push	{r7, lr}
 8011f82:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011f84:	4b0f      	ldr	r3, [pc, #60]	@ (8011fc4 <ResetMICIndicator+0x44>)
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d103      	bne.n	8011f94 <ResetMICIndicator+0x14>
 8011f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8011fc8 <ResetMICIndicator+0x48>)
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d005      	beq.n	8011fa0 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 8011f94:	2380      	movs	r3, #128	@ 0x80
 8011f96:	05db      	lsls	r3, r3, #23
 8011f98:	22fa      	movs	r2, #250	@ 0xfa
 8011f9a:	0112      	lsls	r2, r2, #4
 8011f9c:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 8011f9e:	e00e      	b.n	8011fbe <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 8011fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8011fcc <ResetMICIndicator+0x4c>)
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	2b02      	cmp	r3, #2
 8011fa6:	d105      	bne.n	8011fb4 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 8011fa8:	2380      	movs	r3, #128	@ 0x80
 8011faa:	05db      	lsls	r3, r3, #23
 8011fac:	22fa      	movs	r2, #250	@ 0xfa
 8011fae:	0112      	lsls	r2, r2, #4
 8011fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8011fb2:	e004      	b.n	8011fbe <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 8011fb4:	2380      	movs	r3, #128	@ 0x80
 8011fb6:	05db      	lsls	r3, r3, #23
 8011fb8:	22fa      	movs	r2, #250	@ 0xfa
 8011fba:	0112      	lsls	r2, r2, #4
 8011fbc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8011fbe:	46c0      	nop			@ (mov r8, r8)
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	20001e61 	.word	0x20001e61
 8011fc8:	20001e62 	.word	0x20001e62
 8011fcc:	20001e64 	.word	0x20001e64

08011fd0 <SetESPIndicator>:
void SetESPIndicator(){
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011fd4:	4b08      	ldr	r3, [pc, #32]	@ (8011ff8 <SetESPIndicator+0x28>)
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d103      	bne.n	8011fe4 <SetESPIndicator+0x14>
 8011fdc:	4b07      	ldr	r3, [pc, #28]	@ (8011ffc <SetESPIndicator+0x2c>)
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d006      	beq.n	8011ff2 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8011fe4:	f7ff fe62 	bl	8011cac <Calculate_LED_ON>
 8011fe8:	0003      	movs	r3, r0
 8011fea:	001a      	movs	r2, r3
 8011fec:	2380      	movs	r3, #128	@ 0x80
 8011fee:	05db      	lsls	r3, r3, #23
 8011ff0:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011ff2:	46c0      	nop			@ (mov r8, r8)
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}
 8011ff8:	20001e61 	.word	0x20001e61
 8011ffc:	20001e62 	.word	0x20001e62

08012000 <ResetESPIndicator>:
void ResetESPIndicator(){
 8012000:	b580      	push	{r7, lr}
 8012002:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012004:	4b07      	ldr	r3, [pc, #28]	@ (8012024 <ResetESPIndicator+0x24>)
 8012006:	781b      	ldrb	r3, [r3, #0]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d103      	bne.n	8012014 <ResetESPIndicator+0x14>
 801200c:	4b06      	ldr	r3, [pc, #24]	@ (8012028 <ResetESPIndicator+0x28>)
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d004      	beq.n	801201e <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8012014:	2380      	movs	r3, #128	@ 0x80
 8012016:	05db      	lsls	r3, r3, #23
 8012018:	22fa      	movs	r2, #250	@ 0xfa
 801201a:	0112      	lsls	r2, r2, #4
 801201c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 801201e:	46c0      	nop			@ (mov r8, r8)
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	20001e61 	.word	0x20001e61
 8012028:	20001e62 	.word	0x20001e62

0801202c <SetPMIndicator>:

void SetPMIndicator() {
 801202c:	b580      	push	{r7, lr}
 801202e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012030:	4b0f      	ldr	r3, [pc, #60]	@ (8012070 <SetPMIndicator+0x44>)
 8012032:	781b      	ldrb	r3, [r3, #0]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d103      	bne.n	8012040 <SetPMIndicator+0x14>
 8012038:	4b0e      	ldr	r3, [pc, #56]	@ (8012074 <SetPMIndicator+0x48>)
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d014      	beq.n	801206a <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012040:	f7ff fe34 	bl	8011cac <Calculate_LED_ON>
 8012044:	0003      	movs	r3, r0
 8012046:	001a      	movs	r2, r3
 8012048:	2380      	movs	r3, #128	@ 0x80
 801204a:	05db      	lsls	r3, r3, #23
 801204c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 801204e:	f7ff fe2d 	bl	8011cac <Calculate_LED_ON>
 8012052:	0003      	movs	r3, r0
 8012054:	001a      	movs	r2, r3
 8012056:	2380      	movs	r3, #128	@ 0x80
 8012058:	05db      	lsls	r3, r3, #23
 801205a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 801205c:	f7ff fe26 	bl	8011cac <Calculate_LED_ON>
 8012060:	0003      	movs	r3, r0
 8012062:	001a      	movs	r2, r3
 8012064:	2380      	movs	r3, #128	@ 0x80
 8012066:	05db      	lsls	r3, r3, #23
 8012068:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801206a:	46c0      	nop			@ (mov r8, r8)
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}
 8012070:	20001e61 	.word	0x20001e61
 8012074:	20001e62 	.word	0x20001e62

08012078 <ResetPMIndicator>:

void ResetPMIndicator() {
 8012078:	b580      	push	{r7, lr}
 801207a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 801207c:	4b0c      	ldr	r3, [pc, #48]	@ (80120b0 <ResetPMIndicator+0x38>)
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d103      	bne.n	801208c <ResetPMIndicator+0x14>
 8012084:	4b0b      	ldr	r3, [pc, #44]	@ (80120b4 <ResetPMIndicator+0x3c>)
 8012086:	781b      	ldrb	r3, [r3, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d00e      	beq.n	80120aa <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 801208c:	2380      	movs	r3, #128	@ 0x80
 801208e:	05db      	lsls	r3, r3, #23
 8012090:	22fa      	movs	r2, #250	@ 0xfa
 8012092:	0112      	lsls	r2, r2, #4
 8012094:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8012096:	2380      	movs	r3, #128	@ 0x80
 8012098:	05db      	lsls	r3, r3, #23
 801209a:	22fa      	movs	r2, #250	@ 0xfa
 801209c:	0112      	lsls	r2, r2, #4
 801209e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 80120a0:	2380      	movs	r3, #128	@ 0x80
 80120a2:	05db      	lsls	r3, r3, #23
 80120a4:	22fa      	movs	r2, #250	@ 0xfa
 80120a6:	0112      	lsls	r2, r2, #4
 80120a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80120aa:	46c0      	nop			@ (mov r8, r8)
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	20001e61 	.word	0x20001e61
 80120b4:	20001e62 	.word	0x20001e62

080120b8 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 80120b8:	b580      	push	{r7, lr}
 80120ba:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 80120bc:	23fa      	movs	r3, #250	@ 0xfa
 80120be:	011a      	lsls	r2, r3, #4
 80120c0:	23fa      	movs	r3, #250	@ 0xfa
 80120c2:	0119      	lsls	r1, r3, #4
 80120c4:	23fa      	movs	r3, #250	@ 0xfa
 80120c6:	011b      	lsls	r3, r3, #4
 80120c8:	0018      	movs	r0, r3
 80120ca:	f7ff fe37 	bl	8011d3c <SetStatusLED>
  SetDBLED(false,false,false);
 80120ce:	2200      	movs	r2, #0
 80120d0:	2100      	movs	r1, #0
 80120d2:	2000      	movs	r0, #0
 80120d4:	f7ff fe66 	bl	8011da4 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 80120d8:	23fa      	movs	r3, #250	@ 0xfa
 80120da:	011a      	lsls	r2, r3, #4
 80120dc:	23fa      	movs	r3, #250	@ 0xfa
 80120de:	0119      	lsls	r1, r3, #4
 80120e0:	23fa      	movs	r3, #250	@ 0xfa
 80120e2:	011b      	lsls	r3, r3, #4
 80120e4:	0018      	movs	r0, r3
 80120e6:	f7ff fea7 	bl	8011e38 <SetVocLED>
return;
 80120ea:	46c0      	nop			@ (mov r8, r8)
}
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}

080120f0 <SetAllREDLED>:

void SetAllREDLED() {
 80120f0:	b580      	push	{r7, lr}
 80120f2:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 80120f4:	2380      	movs	r3, #128	@ 0x80
 80120f6:	05db      	lsls	r3, r3, #23
 80120f8:	4a19      	ldr	r2, [pc, #100]	@ (8012160 <SetAllREDLED+0x70>)
 80120fa:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 80120fc:	2380      	movs	r3, #128	@ 0x80
 80120fe:	05db      	lsls	r3, r3, #23
 8012100:	22fa      	movs	r2, #250	@ 0xfa
 8012102:	0112      	lsls	r2, r2, #4
 8012104:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012106:	2380      	movs	r3, #128	@ 0x80
 8012108:	05db      	lsls	r3, r3, #23
 801210a:	22fa      	movs	r2, #250	@ 0xfa
 801210c:	0112      	lsls	r2, r2, #4
 801210e:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8012110:	4b14      	ldr	r3, [pc, #80]	@ (8012164 <SetAllREDLED+0x74>)
 8012112:	4a13      	ldr	r2, [pc, #76]	@ (8012160 <SetAllREDLED+0x70>)
 8012114:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012116:	4b13      	ldr	r3, [pc, #76]	@ (8012164 <SetAllREDLED+0x74>)
 8012118:	22fa      	movs	r2, #250	@ 0xfa
 801211a:	0112      	lsls	r2, r2, #4
 801211c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 801211e:	4b11      	ldr	r3, [pc, #68]	@ (8012164 <SetAllREDLED+0x74>)
 8012120:	22fa      	movs	r2, #250	@ 0xfa
 8012122:	0112      	lsls	r2, r2, #4
 8012124:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012126:	4b10      	ldr	r3, [pc, #64]	@ (8012168 <SetAllREDLED+0x78>)
 8012128:	2200      	movs	r2, #0
 801212a:	2101      	movs	r1, #1
 801212c:	0018      	movs	r0, r3
 801212e:	f003 f8de 	bl	80152ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012132:	2380      	movs	r3, #128	@ 0x80
 8012134:	005b      	lsls	r3, r3, #1
 8012136:	480c      	ldr	r0, [pc, #48]	@ (8012168 <SetAllREDLED+0x78>)
 8012138:	2201      	movs	r2, #1
 801213a:	0019      	movs	r1, r3
 801213c:	f003 f8d7 	bl	80152ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012140:	2380      	movs	r3, #128	@ 0x80
 8012142:	009b      	lsls	r3, r3, #2
 8012144:	4808      	ldr	r0, [pc, #32]	@ (8012168 <SetAllREDLED+0x78>)
 8012146:	2201      	movs	r2, #1
 8012148:	0019      	movs	r1, r3
 801214a:	f003 f8d0 	bl	80152ee <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 801214e:	23fa      	movs	r3, #250	@ 0xfa
 8012150:	009b      	lsls	r3, r3, #2
 8012152:	0018      	movs	r0, r3
 8012154:	f001 fe44 	bl	8013de0 <HAL_Delay>
}
 8012158:	46c0      	nop			@ (mov r8, r8)
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	46c0      	nop			@ (mov r8, r8)
 8012160:	00000bb8 	.word	0x00000bb8
 8012164:	40000400 	.word	0x40000400
 8012168:	50000400 	.word	0x50000400

0801216c <SetAllBlueLED>:

void SetAllBlueLED() {
 801216c:	b580      	push	{r7, lr}
 801216e:	b082      	sub	sp, #8
 8012170:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012172:	1dfb      	adds	r3, r7, #7
 8012174:	2200      	movs	r2, #0
 8012176:	701a      	strb	r2, [r3, #0]
 8012178:	e04b      	b.n	8012212 <SetAllBlueLED+0xa6>
    TIM2 -> CCR1 = LED_OFF;
 801217a:	2380      	movs	r3, #128	@ 0x80
 801217c:	05db      	lsls	r3, r3, #23
 801217e:	22fa      	movs	r2, #250	@ 0xfa
 8012180:	0112      	lsls	r2, r2, #4
 8012182:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012184:	2380      	movs	r3, #128	@ 0x80
 8012186:	05db      	lsls	r3, r3, #23
 8012188:	22fa      	movs	r2, #250	@ 0xfa
 801218a:	0112      	lsls	r2, r2, #4
 801218c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 801218e:	2380      	movs	r3, #128	@ 0x80
 8012190:	05db      	lsls	r3, r3, #23
 8012192:	4a24      	ldr	r2, [pc, #144]	@ (8012224 <SetAllBlueLED+0xb8>)
 8012194:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8012196:	4b24      	ldr	r3, [pc, #144]	@ (8012228 <SetAllBlueLED+0xbc>)
 8012198:	22fa      	movs	r2, #250	@ 0xfa
 801219a:	0112      	lsls	r2, r2, #4
 801219c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 801219e:	4b22      	ldr	r3, [pc, #136]	@ (8012228 <SetAllBlueLED+0xbc>)
 80121a0:	22fa      	movs	r2, #250	@ 0xfa
 80121a2:	0112      	lsls	r2, r2, #4
 80121a4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 80121a6:	4b20      	ldr	r3, [pc, #128]	@ (8012228 <SetAllBlueLED+0xbc>)
 80121a8:	4a1e      	ldr	r2, [pc, #120]	@ (8012224 <SetAllBlueLED+0xb8>)
 80121aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 80121ac:	4b1f      	ldr	r3, [pc, #124]	@ (801222c <SetAllBlueLED+0xc0>)
 80121ae:	2201      	movs	r2, #1
 80121b0:	2101      	movs	r1, #1
 80121b2:	0018      	movs	r0, r3
 80121b4:	f003 f89b 	bl	80152ee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 80121b8:	2380      	movs	r3, #128	@ 0x80
 80121ba:	005b      	lsls	r3, r3, #1
 80121bc:	481b      	ldr	r0, [pc, #108]	@ (801222c <SetAllBlueLED+0xc0>)
 80121be:	2201      	movs	r2, #1
 80121c0:	0019      	movs	r1, r3
 80121c2:	f003 f894 	bl	80152ee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 80121c6:	2380      	movs	r3, #128	@ 0x80
 80121c8:	009b      	lsls	r3, r3, #2
 80121ca:	4818      	ldr	r0, [pc, #96]	@ (801222c <SetAllBlueLED+0xc0>)
 80121cc:	2200      	movs	r2, #0
 80121ce:	0019      	movs	r1, r3
 80121d0:	f003 f88d 	bl	80152ee <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80121d4:	23fa      	movs	r3, #250	@ 0xfa
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	0018      	movs	r0, r3
 80121da:	f001 fe01 	bl	8013de0 <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 80121de:	2380      	movs	r3, #128	@ 0x80
 80121e0:	05db      	lsls	r3, r3, #23
 80121e2:	22fa      	movs	r2, #250	@ 0xfa
 80121e4:	0112      	lsls	r2, r2, #4
 80121e6:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR3 = LED_OFF;
 80121e8:	4b0f      	ldr	r3, [pc, #60]	@ (8012228 <SetAllBlueLED+0xbc>)
 80121ea:	22fa      	movs	r2, #250	@ 0xfa
 80121ec:	0112      	lsls	r2, r2, #4
 80121ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 80121f0:	2380      	movs	r3, #128	@ 0x80
 80121f2:	009b      	lsls	r3, r3, #2
 80121f4:	480d      	ldr	r0, [pc, #52]	@ (801222c <SetAllBlueLED+0xc0>)
 80121f6:	2201      	movs	r2, #1
 80121f8:	0019      	movs	r1, r3
 80121fa:	f003 f878 	bl	80152ee <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80121fe:	23fa      	movs	r3, #250	@ 0xfa
 8012200:	005b      	lsls	r3, r3, #1
 8012202:	0018      	movs	r0, r3
 8012204:	f001 fdec 	bl	8013de0 <HAL_Delay>
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012208:	1dfb      	adds	r3, r7, #7
 801220a:	781a      	ldrb	r2, [r3, #0]
 801220c:	1dfb      	adds	r3, r7, #7
 801220e:	3201      	adds	r2, #1
 8012210:	701a      	strb	r2, [r3, #0]
 8012212:	1dfb      	adds	r3, r7, #7
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	2b02      	cmp	r3, #2
 8012218:	d9af      	bls.n	801217a <SetAllBlueLED+0xe>
  }
}
 801221a:	46c0      	nop			@ (mov r8, r8)
 801221c:	46c0      	nop			@ (mov r8, r8)
 801221e:	46bd      	mov	sp, r7
 8012220:	b002      	add	sp, #8
 8012222:	bd80      	pop	{r7, pc}
 8012224:	00000bb8 	.word	0x00000bb8
 8012228:	40000400 	.word	0x40000400
 801222c:	50000400 	.word	0x50000400

08012230 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8012230:	b5b0      	push	{r4, r5, r7, lr}
 8012232:	b082      	sub	sp, #8
 8012234:	af00      	add	r7, sp, #0
 8012236:	0002      	movs	r2, r0
 8012238:	1dbb      	adds	r3, r7, #6
 801223a:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 801223c:	1dbb      	adds	r3, r7, #6
 801223e:	881b      	ldrh	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d05a      	beq.n	80122fa <SetVOCindicator+0xca>
 8012244:	1dbb      	adds	r3, r7, #6
 8012246:	881b      	ldrh	r3, [r3, #0]
 8012248:	2b64      	cmp	r3, #100	@ 0x64
 801224a:	d856      	bhi.n	80122fa <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 801224c:	1dbb      	adds	r3, r7, #6
 801224e:	881b      	ldrh	r3, [r3, #0]
 8012250:	0018      	movs	r0, r3
 8012252:	f7f1 facd 	bl	80037f0 <__aeabi_i2d>
 8012256:	2200      	movs	r2, #0
 8012258:	4b5f      	ldr	r3, [pc, #380]	@ (80123d8 <SetVOCindicator+0x1a8>)
 801225a:	f7ef ff41 	bl	80020e0 <__aeabi_ddiv>
 801225e:	0002      	movs	r2, r0
 8012260:	000b      	movs	r3, r1
 8012262:	2000      	movs	r0, #0
 8012264:	495d      	ldr	r1, [pc, #372]	@ (80123dc <SetVOCindicator+0x1ac>)
 8012266:	f7f0 fe5b 	bl	8002f20 <__aeabi_dsub>
 801226a:	0002      	movs	r2, r0
 801226c:	000b      	movs	r3, r1
 801226e:	0014      	movs	r4, r2
 8012270:	001d      	movs	r5, r3
 8012272:	4b5b      	ldr	r3, [pc, #364]	@ (80123e0 <SetVOCindicator+0x1b0>)
 8012274:	881b      	ldrh	r3, [r3, #0]
 8012276:	0018      	movs	r0, r3
 8012278:	f7f1 faba 	bl	80037f0 <__aeabi_i2d>
 801227c:	0002      	movs	r2, r0
 801227e:	000b      	movs	r3, r1
 8012280:	0020      	movs	r0, r4
 8012282:	0029      	movs	r1, r5
 8012284:	f7f0 fb66 	bl	8002954 <__aeabi_dmul>
 8012288:	0002      	movs	r2, r0
 801228a:	000b      	movs	r3, r1
 801228c:	0010      	movs	r0, r2
 801228e:	0019      	movs	r1, r3
 8012290:	f7ee f9dc 	bl	800064c <__aeabi_d2uiz>
 8012294:	0003      	movs	r3, r0
 8012296:	b29a      	uxth	r2, r3
 8012298:	4b52      	ldr	r3, [pc, #328]	@ (80123e4 <SetVOCindicator+0x1b4>)
 801229a:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 801229c:	1dbb      	adds	r3, r7, #6
 801229e:	881b      	ldrh	r3, [r3, #0]
 80122a0:	0018      	movs	r0, r3
 80122a2:	f7f1 faa5 	bl	80037f0 <__aeabi_i2d>
 80122a6:	2200      	movs	r2, #0
 80122a8:	4b4b      	ldr	r3, [pc, #300]	@ (80123d8 <SetVOCindicator+0x1a8>)
 80122aa:	f7ef ff19 	bl	80020e0 <__aeabi_ddiv>
 80122ae:	0002      	movs	r2, r0
 80122b0:	000b      	movs	r3, r1
 80122b2:	0014      	movs	r4, r2
 80122b4:	001d      	movs	r5, r3
 80122b6:	4b4a      	ldr	r3, [pc, #296]	@ (80123e0 <SetVOCindicator+0x1b0>)
 80122b8:	881b      	ldrh	r3, [r3, #0]
 80122ba:	0018      	movs	r0, r3
 80122bc:	f7f1 fa98 	bl	80037f0 <__aeabi_i2d>
 80122c0:	0002      	movs	r2, r0
 80122c2:	000b      	movs	r3, r1
 80122c4:	0020      	movs	r0, r4
 80122c6:	0029      	movs	r1, r5
 80122c8:	f7f0 fb44 	bl	8002954 <__aeabi_dmul>
 80122cc:	0002      	movs	r2, r0
 80122ce:	000b      	movs	r3, r1
 80122d0:	0010      	movs	r0, r2
 80122d2:	0019      	movs	r1, r3
 80122d4:	f7ee f9ba 	bl	800064c <__aeabi_d2uiz>
 80122d8:	0003      	movs	r3, r0
 80122da:	b29a      	uxth	r2, r3
 80122dc:	4b42      	ldr	r3, [pc, #264]	@ (80123e8 <SetVOCindicator+0x1b8>)
 80122de:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 80122e0:	4b3f      	ldr	r3, [pc, #252]	@ (80123e0 <SetVOCindicator+0x1b0>)
 80122e2:	881a      	ldrh	r2, [r3, #0]
 80122e4:	4b41      	ldr	r3, [pc, #260]	@ (80123ec <SetVOCindicator+0x1bc>)
 80122e6:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 80122e8:	4b40      	ldr	r3, [pc, #256]	@ (80123ec <SetVOCindicator+0x1bc>)
 80122ea:	8818      	ldrh	r0, [r3, #0]
 80122ec:	4b3d      	ldr	r3, [pc, #244]	@ (80123e4 <SetVOCindicator+0x1b4>)
 80122ee:	8819      	ldrh	r1, [r3, #0]
 80122f0:	4b3d      	ldr	r3, [pc, #244]	@ (80123e8 <SetVOCindicator+0x1b8>)
 80122f2:	881b      	ldrh	r3, [r3, #0]
 80122f4:	001a      	movs	r2, r3
 80122f6:	f7ff fd9f 	bl	8011e38 <SetVocLED>
  }
  if(VOCi > 100){
 80122fa:	1dbb      	adds	r3, r7, #6
 80122fc:	881b      	ldrh	r3, [r3, #0]
 80122fe:	2b64      	cmp	r3, #100	@ 0x64
 8012300:	d966      	bls.n	80123d0 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8012302:	1dbb      	adds	r3, r7, #6
 8012304:	881b      	ldrh	r3, [r3, #0]
 8012306:	0018      	movs	r0, r3
 8012308:	f7f1 fa72 	bl	80037f0 <__aeabi_i2d>
 801230c:	2200      	movs	r2, #0
 801230e:	4b32      	ldr	r3, [pc, #200]	@ (80123d8 <SetVOCindicator+0x1a8>)
 8012310:	f7f0 fe06 	bl	8002f20 <__aeabi_dsub>
 8012314:	0002      	movs	r2, r0
 8012316:	000b      	movs	r3, r1
 8012318:	0010      	movs	r0, r2
 801231a:	0019      	movs	r1, r3
 801231c:	2200      	movs	r2, #0
 801231e:	4b34      	ldr	r3, [pc, #208]	@ (80123f0 <SetVOCindicator+0x1c0>)
 8012320:	f7ef fede 	bl	80020e0 <__aeabi_ddiv>
 8012324:	0002      	movs	r2, r0
 8012326:	000b      	movs	r3, r1
 8012328:	0014      	movs	r4, r2
 801232a:	001d      	movs	r5, r3
 801232c:	4b2c      	ldr	r3, [pc, #176]	@ (80123e0 <SetVOCindicator+0x1b0>)
 801232e:	881b      	ldrh	r3, [r3, #0]
 8012330:	0018      	movs	r0, r3
 8012332:	f7f1 fa5d 	bl	80037f0 <__aeabi_i2d>
 8012336:	0002      	movs	r2, r0
 8012338:	000b      	movs	r3, r1
 801233a:	0020      	movs	r0, r4
 801233c:	0029      	movs	r1, r5
 801233e:	f7f0 fb09 	bl	8002954 <__aeabi_dmul>
 8012342:	0002      	movs	r2, r0
 8012344:	000b      	movs	r3, r1
 8012346:	0010      	movs	r0, r2
 8012348:	0019      	movs	r1, r3
 801234a:	f7ee f97f 	bl	800064c <__aeabi_d2uiz>
 801234e:	0003      	movs	r3, r0
 8012350:	b29a      	uxth	r2, r3
 8012352:	4b24      	ldr	r3, [pc, #144]	@ (80123e4 <SetVOCindicator+0x1b4>)
 8012354:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 8012356:	1dbb      	adds	r3, r7, #6
 8012358:	881b      	ldrh	r3, [r3, #0]
 801235a:	0018      	movs	r0, r3
 801235c:	f7f1 fa48 	bl	80037f0 <__aeabi_i2d>
 8012360:	2200      	movs	r2, #0
 8012362:	4b1d      	ldr	r3, [pc, #116]	@ (80123d8 <SetVOCindicator+0x1a8>)
 8012364:	f7f0 fddc 	bl	8002f20 <__aeabi_dsub>
 8012368:	0002      	movs	r2, r0
 801236a:	000b      	movs	r3, r1
 801236c:	0010      	movs	r0, r2
 801236e:	0019      	movs	r1, r3
 8012370:	2200      	movs	r2, #0
 8012372:	4b1f      	ldr	r3, [pc, #124]	@ (80123f0 <SetVOCindicator+0x1c0>)
 8012374:	f7ef feb4 	bl	80020e0 <__aeabi_ddiv>
 8012378:	0002      	movs	r2, r0
 801237a:	000b      	movs	r3, r1
 801237c:	2000      	movs	r0, #0
 801237e:	4917      	ldr	r1, [pc, #92]	@ (80123dc <SetVOCindicator+0x1ac>)
 8012380:	f7f0 fdce 	bl	8002f20 <__aeabi_dsub>
 8012384:	0002      	movs	r2, r0
 8012386:	000b      	movs	r3, r1
 8012388:	0014      	movs	r4, r2
 801238a:	001d      	movs	r5, r3
 801238c:	4b14      	ldr	r3, [pc, #80]	@ (80123e0 <SetVOCindicator+0x1b0>)
 801238e:	881b      	ldrh	r3, [r3, #0]
 8012390:	0018      	movs	r0, r3
 8012392:	f7f1 fa2d 	bl	80037f0 <__aeabi_i2d>
 8012396:	0002      	movs	r2, r0
 8012398:	000b      	movs	r3, r1
 801239a:	0020      	movs	r0, r4
 801239c:	0029      	movs	r1, r5
 801239e:	f7f0 fad9 	bl	8002954 <__aeabi_dmul>
 80123a2:	0002      	movs	r2, r0
 80123a4:	000b      	movs	r3, r1
 80123a6:	0010      	movs	r0, r2
 80123a8:	0019      	movs	r1, r3
 80123aa:	f7ee f94f 	bl	800064c <__aeabi_d2uiz>
 80123ae:	0003      	movs	r3, r0
 80123b0:	b29a      	uxth	r2, r3
 80123b2:	4b0e      	ldr	r3, [pc, #56]	@ (80123ec <SetVOCindicator+0x1bc>)
 80123b4:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 80123b6:	4b0a      	ldr	r3, [pc, #40]	@ (80123e0 <SetVOCindicator+0x1b0>)
 80123b8:	881a      	ldrh	r2, [r3, #0]
 80123ba:	4b0b      	ldr	r3, [pc, #44]	@ (80123e8 <SetVOCindicator+0x1b8>)
 80123bc:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 80123be:	4b0b      	ldr	r3, [pc, #44]	@ (80123ec <SetVOCindicator+0x1bc>)
 80123c0:	8818      	ldrh	r0, [r3, #0]
 80123c2:	4b08      	ldr	r3, [pc, #32]	@ (80123e4 <SetVOCindicator+0x1b4>)
 80123c4:	8819      	ldrh	r1, [r3, #0]
 80123c6:	4b08      	ldr	r3, [pc, #32]	@ (80123e8 <SetVOCindicator+0x1b8>)
 80123c8:	881b      	ldrh	r3, [r3, #0]
 80123ca:	001a      	movs	r2, r3
 80123cc:	f7ff fd34 	bl	8011e38 <SetVocLED>
  }

}
 80123d0:	46c0      	nop			@ (mov r8, r8)
 80123d2:	46bd      	mov	sp, r7
 80123d4:	b002      	add	sp, #8
 80123d6:	bdb0      	pop	{r4, r5, r7, pc}
 80123d8:	40590000 	.word	0x40590000
 80123dc:	3ff00000 	.word	0x3ff00000
 80123e0:	200000de 	.word	0x200000de
 80123e4:	20001e76 	.word	0x20001e76
 80123e8:	20001e78 	.word	0x20001e78
 80123ec:	20001e7a 	.word	0x20001e7a
 80123f0:	40790000 	.word	0x40790000

080123f4 <powerCheck>:

Battery_Status powerCheck(){
 80123f4:	b590      	push	{r4, r7, lr}
 80123f6:	b083      	sub	sp, #12
 80123f8:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 80123fa:	f7f6 ff2b 	bl	8009254 <Check_USB_PowerOn>
 80123fe:	0003      	movs	r3, r0
 8012400:	001a      	movs	r2, r3
 8012402:	2301      	movs	r3, #1
 8012404:	4053      	eors	r3, r2
 8012406:	b2db      	uxtb	r3, r3
 8012408:	2b00      	cmp	r3, #0
 801240a:	d005      	beq.n	8012418 <powerCheck+0x24>
    status = batteryChargeCheck();
 801240c:	1dfc      	adds	r4, r7, #7
 801240e:	f7ff fbf3 	bl	8011bf8 <batteryChargeCheck>
 8012412:	0003      	movs	r3, r0
 8012414:	7023      	strb	r3, [r4, #0]
 8012416:	e002      	b.n	801241e <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 8012418:	1dfb      	adds	r3, r7, #7
 801241a:	2204      	movs	r2, #4
 801241c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801241e:	1dfb      	adds	r3, r7, #7
 8012420:	781b      	ldrb	r3, [r3, #0]
}
 8012422:	0018      	movs	r0, r3
 8012424:	46bd      	mov	sp, r7
 8012426:	b003      	add	sp, #12
 8012428:	bd90      	pop	{r4, r7, pc}
	...

0801242c <powerDisplay>:

void powerDisplay(Battery_Status status){
 801242c:	b5b0      	push	{r4, r5, r7, lr}
 801242e:	b086      	sub	sp, #24
 8012430:	af04      	add	r7, sp, #16
 8012432:	0002      	movs	r2, r0
 8012434:	1dfb      	adds	r3, r7, #7
 8012436:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8012438:	1dfb      	adds	r3, r7, #7
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	2b04      	cmp	r3, #4
 801243e:	d114      	bne.n	801246a <powerDisplay+0x3e>
    Debug("USB power detected, LED's are okay, battery: %fV, solar %dmV", ReadBatteryVoltage(), ReadSolarVoltage());
 8012440:	f7f6 fe52 	bl	80090e8 <ReadBatteryVoltage>
 8012444:	1c03      	adds	r3, r0, #0
 8012446:	1c18      	adds	r0, r3, #0
 8012448:	f7f1 fa24 	bl	8003894 <__aeabi_f2d>
 801244c:	0004      	movs	r4, r0
 801244e:	000d      	movs	r5, r1
 8012450:	f7f6 feac 	bl	80091ac <ReadSolarVoltage>
 8012454:	0003      	movs	r3, r0
 8012456:	0019      	movs	r1, r3
 8012458:	4a2a      	ldr	r2, [pc, #168]	@ (8012504 <powerDisplay+0xd8>)
 801245a:	4b2b      	ldr	r3, [pc, #172]	@ (8012508 <powerDisplay+0xdc>)
 801245c:	9102      	str	r1, [sp, #8]
 801245e:	9400      	str	r4, [sp, #0]
 8012460:	9501      	str	r5, [sp, #4]
 8012462:	0019      	movs	r1, r3
 8012464:	2003      	movs	r0, #3
 8012466:	f000 ff71 	bl	801334c <CreateLine>
  }
  if(status == BATTERY_FULL){
 801246a:	1dfb      	adds	r3, r7, #7
 801246c:	781b      	ldrb	r3, [r3, #0]
 801246e:	2b03      	cmp	r3, #3
 8012470:	d105      	bne.n	801247e <powerDisplay+0x52>
    Debug("Battery fully charged");
 8012472:	4a26      	ldr	r2, [pc, #152]	@ (801250c <powerDisplay+0xe0>)
 8012474:	4b24      	ldr	r3, [pc, #144]	@ (8012508 <powerDisplay+0xdc>)
 8012476:	0019      	movs	r1, r3
 8012478:	2003      	movs	r0, #3
 801247a:	f000 ff67 	bl	801334c <CreateLine>
  }
  if(status == BATTERY_GOOD){
 801247e:	1dfb      	adds	r3, r7, #7
 8012480:	781b      	ldrb	r3, [r3, #0]
 8012482:	2b02      	cmp	r3, #2
 8012484:	d105      	bne.n	8012492 <powerDisplay+0x66>
    Debug("Battery charge is doing well");
 8012486:	4a22      	ldr	r2, [pc, #136]	@ (8012510 <powerDisplay+0xe4>)
 8012488:	4b1f      	ldr	r3, [pc, #124]	@ (8012508 <powerDisplay+0xdc>)
 801248a:	0019      	movs	r1, r3
 801248c:	2003      	movs	r0, #3
 801248e:	f000 ff5d 	bl	801334c <CreateLine>
  }
  if(status == BATTERY_LOW){
 8012492:	1dfb      	adds	r3, r7, #7
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	2b01      	cmp	r3, #1
 8012498:	d105      	bne.n	80124a6 <powerDisplay+0x7a>
    Debug("Battery is getting low");
 801249a:	4a1e      	ldr	r2, [pc, #120]	@ (8012514 <powerDisplay+0xe8>)
 801249c:	4b1a      	ldr	r3, [pc, #104]	@ (8012508 <powerDisplay+0xdc>)
 801249e:	0019      	movs	r1, r3
 80124a0:	2003      	movs	r0, #3
 80124a2:	f000 ff53 	bl	801334c <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 80124a6:	1dfb      	adds	r3, r7, #7
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d105      	bne.n	80124ba <powerDisplay+0x8e>
    Debug("Battery is critical, stop processes");
 80124ae:	4a1a      	ldr	r2, [pc, #104]	@ (8012518 <powerDisplay+0xec>)
 80124b0:	4b15      	ldr	r3, [pc, #84]	@ (8012508 <powerDisplay+0xdc>)
 80124b2:	0019      	movs	r1, r3
 80124b4:	2003      	movs	r0, #3
 80124b6:	f000 ff49 	bl	801334c <CreateLine>
  }
  switch (Read_Charge_Status()) {
 80124ba:	f7f6 fedb 	bl	8009274 <Read_Charge_Status>
 80124be:	0003      	movs	r3, r0
 80124c0:	2b02      	cmp	r3, #2
 80124c2:	d013      	beq.n	80124ec <powerDisplay+0xc0>
 80124c4:	dc19      	bgt.n	80124fa <powerDisplay+0xce>
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d002      	beq.n	80124d0 <powerDisplay+0xa4>
 80124ca:	2b01      	cmp	r3, #1
 80124cc:	d007      	beq.n	80124de <powerDisplay+0xb2>
  case CHARGING_FULL:
    Debug("Battery full, charging off");
    break;
  }

}
 80124ce:	e014      	b.n	80124fa <powerDisplay+0xce>
    Debug("Battery charging off");
 80124d0:	4a12      	ldr	r2, [pc, #72]	@ (801251c <powerDisplay+0xf0>)
 80124d2:	4b0d      	ldr	r3, [pc, #52]	@ (8012508 <powerDisplay+0xdc>)
 80124d4:	0019      	movs	r1, r3
 80124d6:	2003      	movs	r0, #3
 80124d8:	f000 ff38 	bl	801334c <CreateLine>
    break;
 80124dc:	e00d      	b.n	80124fa <powerDisplay+0xce>
    Debug("Battery is charging");
 80124de:	4a10      	ldr	r2, [pc, #64]	@ (8012520 <powerDisplay+0xf4>)
 80124e0:	4b09      	ldr	r3, [pc, #36]	@ (8012508 <powerDisplay+0xdc>)
 80124e2:	0019      	movs	r1, r3
 80124e4:	2003      	movs	r0, #3
 80124e6:	f000 ff31 	bl	801334c <CreateLine>
    break;
 80124ea:	e006      	b.n	80124fa <powerDisplay+0xce>
    Debug("Battery full, charging off");
 80124ec:	4a0d      	ldr	r2, [pc, #52]	@ (8012524 <powerDisplay+0xf8>)
 80124ee:	4b06      	ldr	r3, [pc, #24]	@ (8012508 <powerDisplay+0xdc>)
 80124f0:	0019      	movs	r1, r3
 80124f2:	2003      	movs	r0, #3
 80124f4:	f000 ff2a 	bl	801334c <CreateLine>
    break;
 80124f8:	46c0      	nop			@ (mov r8, r8)
}
 80124fa:	46c0      	nop			@ (mov r8, r8)
 80124fc:	46bd      	mov	sp, r7
 80124fe:	b002      	add	sp, #8
 8012500:	bdb0      	pop	{r4, r5, r7, pc}
 8012502:	46c0      	nop			@ (mov r8, r8)
 8012504:	0802d4e8 	.word	0x0802d4e8
 8012508:	0802d528 	.word	0x0802d528
 801250c:	0802d52c 	.word	0x0802d52c
 8012510:	0802d544 	.word	0x0802d544
 8012514:	0802d564 	.word	0x0802d564
 8012518:	0802d57c 	.word	0x0802d57c
 801251c:	0802d5a0 	.word	0x0802d5a0
 8012520:	0802d5b8 	.word	0x0802d5b8
 8012524:	0802d5cc 	.word	0x0802d5cc

08012528 <configCheck>:

void configCheck(){
 8012528:	b590      	push	{r4, r7, lr}
 801252a:	b083      	sub	sp, #12
 801252c:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 801252e:	f7f6 fefd 	bl	800932c <BootButton_Pressed>
 8012532:	1e03      	subs	r3, r0, #0
 8012534:	d007      	beq.n	8012546 <configCheck+0x1e>
 8012536:	f7f6 ff0b 	bl	8009350 <UserButton_Pressed>
 801253a:	1e03      	subs	r3, r0, #0
 801253c:	d003      	beq.n	8012546 <configCheck+0x1e>
    configSet = true;
 801253e:	4bb5      	ldr	r3, [pc, #724]	@ (8012814 <configCheck+0x2ec>)
 8012540:	2201      	movs	r2, #1
 8012542:	701a      	strb	r2, [r3, #0]
 8012544:	e00a      	b.n	801255c <configCheck+0x34>
  }
  else{
    configSet = false;
 8012546:	4bb3      	ldr	r3, [pc, #716]	@ (8012814 <configCheck+0x2ec>)
 8012548:	2200      	movs	r2, #0
 801254a:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 801254c:	f001 fc3e 	bl	8013dcc <HAL_GetTick>
 8012550:	0003      	movs	r3, r0
 8012552:	22fa      	movs	r2, #250	@ 0xfa
 8012554:	00d2      	lsls	r2, r2, #3
 8012556:	189a      	adds	r2, r3, r2
 8012558:	4baf      	ldr	r3, [pc, #700]	@ (8012818 <configCheck+0x2f0>)
 801255a:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 801255c:	4bad      	ldr	r3, [pc, #692]	@ (8012814 <configCheck+0x2ec>)
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d00d      	beq.n	8012580 <configCheck+0x58>
 8012564:	4bac      	ldr	r3, [pc, #688]	@ (8012818 <configCheck+0x2f0>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	0018      	movs	r0, r3
 801256a:	f000 fe99 	bl	80132a0 <TimestampIsReached>
 801256e:	1e03      	subs	r3, r0, #0
 8012570:	d006      	beq.n	8012580 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 8012572:	f7f2 fc0f 	bl	8004d94 <SetConfigMode>
    SetDBLED(true, true, true);
 8012576:	2201      	movs	r2, #1
 8012578:	2101      	movs	r1, #1
 801257a:	2001      	movs	r0, #1
 801257c:	f7ff fc12 	bl	8011da4 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8012580:	f7f6 fed4 	bl	800932c <BootButton_Pressed>
 8012584:	0003      	movs	r3, r0
 8012586:	001a      	movs	r2, r3
 8012588:	2301      	movs	r3, #1
 801258a:	4053      	eors	r3, r2
 801258c:	b2db      	uxtb	r3, r3
 801258e:	2b00      	cmp	r3, #0
 8012590:	d05a      	beq.n	8012648 <configCheck+0x120>
 8012592:	f7f6 fedd 	bl	8009350 <UserButton_Pressed>
 8012596:	1e03      	subs	r3, r0, #0
 8012598:	d056      	beq.n	8012648 <configCheck+0x120>
 801259a:	4ba0      	ldr	r3, [pc, #640]	@ (801281c <configCheck+0x2f4>)
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	2201      	movs	r2, #1
 80125a0:	4053      	eors	r3, r2
 80125a2:	b2db      	uxtb	r3, r3
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d04f      	beq.n	8012648 <configCheck+0x120>
 80125a8:	f7f2 fc14 	bl	8004dd4 <GetReconfigMode>
 80125ac:	0003      	movs	r3, r0
 80125ae:	001a      	movs	r2, r3
 80125b0:	2301      	movs	r3, #1
 80125b2:	4053      	eors	r3, r2
 80125b4:	b2db      	uxtb	r3, r3
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d046      	beq.n	8012648 <configCheck+0x120>
    SetLEDsOff();
 80125ba:	f7ff fd7d 	bl	80120b8 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 80125be:	4a98      	ldr	r2, [pc, #608]	@ (8012820 <configCheck+0x2f8>)
 80125c0:	4997      	ldr	r1, [pc, #604]	@ (8012820 <configCheck+0x2f8>)
 80125c2:	4b97      	ldr	r3, [pc, #604]	@ (8012820 <configCheck+0x2f8>)
 80125c4:	0018      	movs	r0, r3
 80125c6:	f7ff fc37 	bl	8011e38 <SetVocLED>
    HAL_Delay(1500);
 80125ca:	4b96      	ldr	r3, [pc, #600]	@ (8012824 <configCheck+0x2fc>)
 80125cc:	0018      	movs	r0, r3
 80125ce:	f001 fc07 	bl	8013de0 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 80125d2:	23fa      	movs	r3, #250	@ 0xfa
 80125d4:	011a      	lsls	r2, r3, #4
 80125d6:	23fa      	movs	r3, #250	@ 0xfa
 80125d8:	0119      	lsls	r1, r3, #4
 80125da:	23fa      	movs	r3, #250	@ 0xfa
 80125dc:	011b      	lsls	r3, r3, #4
 80125de:	0018      	movs	r0, r3
 80125e0:	f7ff fc2a 	bl	8011e38 <SetVocLED>
    userToggle = !userToggle;
 80125e4:	4b90      	ldr	r3, [pc, #576]	@ (8012828 <configCheck+0x300>)
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	1e5a      	subs	r2, r3, #1
 80125ea:	4193      	sbcs	r3, r2
 80125ec:	b2db      	uxtb	r3, r3
 80125ee:	2201      	movs	r2, #1
 80125f0:	4053      	eors	r3, r2
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	1c1a      	adds	r2, r3, #0
 80125f6:	2301      	movs	r3, #1
 80125f8:	4013      	ands	r3, r2
 80125fa:	b2da      	uxtb	r2, r3
 80125fc:	4b8a      	ldr	r3, [pc, #552]	@ (8012828 <configCheck+0x300>)
 80125fe:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8012600:	4b89      	ldr	r3, [pc, #548]	@ (8012828 <configCheck+0x300>)
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d002      	beq.n	801260e <configCheck+0xe6>
      EnabledConnectedDevices();
 8012608:	f7fa fe76 	bl	800d2f8 <EnabledConnectedDevices>
 801260c:	e004      	b.n	8012618 <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 801260e:	f001 fbdd 	bl	8013dcc <HAL_GetTick>
 8012612:	0002      	movs	r2, r0
 8012614:	4b85      	ldr	r3, [pc, #532]	@ (801282c <configCheck+0x304>)
 8012616:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8012618:	4b83      	ldr	r3, [pc, #524]	@ (8012828 <configCheck+0x300>)
 801261a:	781b      	ldrb	r3, [r3, #0]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d001      	beq.n	8012624 <configCheck+0xfc>
 8012620:	4b83      	ldr	r3, [pc, #524]	@ (8012830 <configCheck+0x308>)
 8012622:	e000      	b.n	8012626 <configCheck+0xfe>
 8012624:	4b83      	ldr	r3, [pc, #524]	@ (8012834 <configCheck+0x30c>)
 8012626:	4a84      	ldr	r2, [pc, #528]	@ (8012838 <configCheck+0x310>)
 8012628:	4984      	ldr	r1, [pc, #528]	@ (801283c <configCheck+0x314>)
 801262a:	2003      	movs	r0, #3
 801262c:	f000 fe8e 	bl	801334c <CreateLine>
    userbuttonHeld = true;
 8012630:	4b7a      	ldr	r3, [pc, #488]	@ (801281c <configCheck+0x2f4>)
 8012632:	2201      	movs	r2, #1
 8012634:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 8012636:	f001 fbc9 	bl	8013dcc <HAL_GetTick>
 801263a:	0003      	movs	r3, r0
 801263c:	22fa      	movs	r2, #250	@ 0xfa
 801263e:	00d2      	lsls	r2, r2, #3
 8012640:	189a      	adds	r2, r3, r2
 8012642:	4b7f      	ldr	r3, [pc, #508]	@ (8012840 <configCheck+0x318>)
 8012644:	601a      	str	r2, [r3, #0]
 8012646:	e002      	b.n	801264e <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 8012648:	4b74      	ldr	r3, [pc, #464]	@ (801281c <configCheck+0x2f4>)
 801264a:	2200      	movs	r2, #0
 801264c:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 801264e:	f7f6 fe6d 	bl	800932c <BootButton_Pressed>
 8012652:	0003      	movs	r3, r0
 8012654:	001a      	movs	r2, r3
 8012656:	2301      	movs	r3, #1
 8012658:	4053      	eors	r3, r2
 801265a:	b2db      	uxtb	r3, r3
 801265c:	2b00      	cmp	r3, #0
 801265e:	d100      	bne.n	8012662 <configCheck+0x13a>
 8012660:	e0a4      	b.n	80127ac <configCheck+0x284>
 8012662:	4b6e      	ldr	r3, [pc, #440]	@ (801281c <configCheck+0x2f4>)
 8012664:	781b      	ldrb	r3, [r3, #0]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d100      	bne.n	801266c <configCheck+0x144>
 801266a:	e09f      	b.n	80127ac <configCheck+0x284>
 801266c:	4b74      	ldr	r3, [pc, #464]	@ (8012840 <configCheck+0x318>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	0018      	movs	r0, r3
 8012672:	f000 fe15 	bl	80132a0 <TimestampIsReached>
 8012676:	1e03      	subs	r3, r0, #0
 8012678:	d100      	bne.n	801267c <configCheck+0x154>
 801267a:	e097      	b.n	80127ac <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 801267c:	f7fa fa30 	bl	800cae0 <GetPMSensorPresence>
 8012680:	1e03      	subs	r3, r0, #0
 8012682:	d100      	bne.n	8012686 <configCheck+0x15e>
 8012684:	e082      	b.n	801278c <configCheck+0x264>
 8012686:	4b6f      	ldr	r3, [pc, #444]	@ (8012844 <configCheck+0x31c>)
 8012688:	791b      	ldrb	r3, [r3, #4]
 801268a:	2b34      	cmp	r3, #52	@ 0x34
 801268c:	d004      	beq.n	8012698 <configCheck+0x170>
 801268e:	4b6d      	ldr	r3, [pc, #436]	@ (8012844 <configCheck+0x31c>)
 8012690:	791b      	ldrb	r3, [r3, #4]
 8012692:	2b35      	cmp	r3, #53	@ 0x35
 8012694:	d000      	beq.n	8012698 <configCheck+0x170>
 8012696:	e079      	b.n	801278c <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 8012698:	4b6b      	ldr	r3, [pc, #428]	@ (8012848 <configCheck+0x320>)
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	1e5a      	subs	r2, r3, #1
 801269e:	4193      	sbcs	r3, r2
 80126a0:	b2db      	uxtb	r3, r3
 80126a2:	2201      	movs	r2, #1
 80126a4:	4053      	eors	r3, r2
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	1c1a      	adds	r2, r3, #0
 80126aa:	2301      	movs	r3, #1
 80126ac:	4013      	ands	r3, r2
 80126ae:	b2da      	uxtb	r2, r3
 80126b0:	4b65      	ldr	r3, [pc, #404]	@ (8012848 <configCheck+0x320>)
 80126b2:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 80126b4:	4b64      	ldr	r3, [pc, #400]	@ (8012848 <configCheck+0x320>)
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d005      	beq.n	80126c8 <configCheck+0x1a0>
 80126bc:	1dbc      	adds	r4, r7, #6
 80126be:	f7ff faf5 	bl	8011cac <Calculate_LED_ON>
 80126c2:	0003      	movs	r3, r0
 80126c4:	8023      	strh	r3, [r4, #0]
 80126c6:	e003      	b.n	80126d0 <configCheck+0x1a8>
        else color = 4000;
 80126c8:	1dbb      	adds	r3, r7, #6
 80126ca:	22fa      	movs	r2, #250	@ 0xfa
 80126cc:	0112      	lsls	r2, r2, #4
 80126ce:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 80126d0:	4b5d      	ldr	r3, [pc, #372]	@ (8012848 <configCheck+0x320>)
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d001      	beq.n	80126dc <configCheck+0x1b4>
 80126d8:	4b5c      	ldr	r3, [pc, #368]	@ (801284c <configCheck+0x324>)
 80126da:	e000      	b.n	80126de <configCheck+0x1b6>
 80126dc:	4b5c      	ldr	r3, [pc, #368]	@ (8012850 <configCheck+0x328>)
 80126de:	4a5d      	ldr	r2, [pc, #372]	@ (8012854 <configCheck+0x32c>)
 80126e0:	495d      	ldr	r1, [pc, #372]	@ (8012858 <configCheck+0x330>)
 80126e2:	2002      	movs	r0, #2
 80126e4:	f000 fe32 	bl	801334c <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 80126e8:	1d7b      	adds	r3, r7, #5
 80126ea:	2200      	movs	r2, #0
 80126ec:	701a      	strb	r2, [r3, #0]
 80126ee:	e028      	b.n	8012742 <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 80126f0:	f7ff fadc 	bl	8011cac <Calculate_LED_ON>
 80126f4:	0003      	movs	r3, r0
 80126f6:	001a      	movs	r2, r3
 80126f8:	4b58      	ldr	r3, [pc, #352]	@ (801285c <configCheck+0x334>)
 80126fa:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 80126fc:	4b57      	ldr	r3, [pc, #348]	@ (801285c <configCheck+0x334>)
 80126fe:	1dba      	adds	r2, r7, #6
 8012700:	8812      	ldrh	r2, [r2, #0]
 8012702:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8012704:	4b55      	ldr	r3, [pc, #340]	@ (801285c <configCheck+0x334>)
 8012706:	1dba      	adds	r2, r7, #6
 8012708:	8812      	ldrh	r2, [r2, #0]
 801270a:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 801270c:	23c8      	movs	r3, #200	@ 0xc8
 801270e:	005b      	lsls	r3, r3, #1
 8012710:	0018      	movs	r0, r3
 8012712:	f001 fb65 	bl	8013de0 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 8012716:	4b51      	ldr	r3, [pc, #324]	@ (801285c <configCheck+0x334>)
 8012718:	22fa      	movs	r2, #250	@ 0xfa
 801271a:	0112      	lsls	r2, r2, #4
 801271c:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 801271e:	4b4f      	ldr	r3, [pc, #316]	@ (801285c <configCheck+0x334>)
 8012720:	22fa      	movs	r2, #250	@ 0xfa
 8012722:	0112      	lsls	r2, r2, #4
 8012724:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 8012726:	4b4d      	ldr	r3, [pc, #308]	@ (801285c <configCheck+0x334>)
 8012728:	22fa      	movs	r2, #250	@ 0xfa
 801272a:	0112      	lsls	r2, r2, #4
 801272c:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 801272e:	23c8      	movs	r3, #200	@ 0xc8
 8012730:	005b      	lsls	r3, r3, #1
 8012732:	0018      	movs	r0, r3
 8012734:	f001 fb54 	bl	8013de0 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8012738:	1d7b      	adds	r3, r7, #5
 801273a:	781a      	ldrb	r2, [r3, #0]
 801273c:	1d7b      	adds	r3, r7, #5
 801273e:	3201      	adds	r2, #1
 8012740:	701a      	strb	r2, [r3, #0]
 8012742:	1d7b      	adds	r3, r7, #5
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	2b01      	cmp	r3, #1
 8012748:	d9d2      	bls.n	80126f0 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 801274a:	4b37      	ldr	r3, [pc, #220]	@ (8012828 <configCheck+0x300>)
 801274c:	781b      	ldrb	r3, [r3, #0]
 801274e:	1e5a      	subs	r2, r3, #1
 8012750:	4193      	sbcs	r3, r2
 8012752:	b2db      	uxtb	r3, r3
 8012754:	2201      	movs	r2, #1
 8012756:	4053      	eors	r3, r2
 8012758:	b2db      	uxtb	r3, r3
 801275a:	1c1a      	adds	r2, r3, #0
 801275c:	2301      	movs	r3, #1
 801275e:	4013      	ands	r3, r2
 8012760:	b2da      	uxtb	r2, r3
 8012762:	4b31      	ldr	r3, [pc, #196]	@ (8012828 <configCheck+0x300>)
 8012764:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 8012766:	4b30      	ldr	r3, [pc, #192]	@ (8012828 <configCheck+0x300>)
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d001      	beq.n	8012772 <configCheck+0x24a>
 801276e:	4b37      	ldr	r3, [pc, #220]	@ (801284c <configCheck+0x324>)
 8012770:	e000      	b.n	8012774 <configCheck+0x24c>
 8012772:	4b37      	ldr	r3, [pc, #220]	@ (8012850 <configCheck+0x328>)
 8012774:	4a3a      	ldr	r2, [pc, #232]	@ (8012860 <configCheck+0x338>)
 8012776:	4938      	ldr	r1, [pc, #224]	@ (8012858 <configCheck+0x330>)
 8012778:	2002      	movs	r0, #2
 801277a:	f000 fde7 	bl	801334c <CreateLine>
      if (usbPluggedIn) {
 801277e:	4b39      	ldr	r3, [pc, #228]	@ (8012864 <configCheck+0x33c>)
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d009      	beq.n	801279a <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 8012786:	f7fb ff7b 	bl	800e680 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 801278a:	e006      	b.n	801279a <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 801278c:	4a36      	ldr	r2, [pc, #216]	@ (8012868 <configCheck+0x340>)
 801278e:	4b32      	ldr	r3, [pc, #200]	@ (8012858 <configCheck+0x330>)
 8012790:	0019      	movs	r1, r3
 8012792:	2002      	movs	r0, #2
 8012794:	f000 fdda 	bl	801334c <CreateLine>
 8012798:	e000      	b.n	801279c <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 801279a:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 801279c:	46c0      	nop			@ (mov r8, r8)
 801279e:	f7f6 fdd7 	bl	8009350 <UserButton_Pressed>
 80127a2:	1e03      	subs	r3, r0, #0
 80127a4:	d1fb      	bne.n	801279e <configCheck+0x276>
    }
    userbuttonHeld = false;
 80127a6:	4b1d      	ldr	r3, [pc, #116]	@ (801281c <configCheck+0x2f4>)
 80127a8:	2200      	movs	r2, #0
 80127aa:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 80127ac:	f7f6 fdbe 	bl	800932c <BootButton_Pressed>
 80127b0:	0003      	movs	r3, r0
 80127b2:	001a      	movs	r2, r3
 80127b4:	2301      	movs	r3, #1
 80127b6:	4053      	eors	r3, r2
 80127b8:	b2db      	uxtb	r3, r3
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d00b      	beq.n	80127d6 <configCheck+0x2ae>
 80127be:	f7f6 fdc7 	bl	8009350 <UserButton_Pressed>
 80127c2:	0003      	movs	r3, r0
 80127c4:	001a      	movs	r2, r3
 80127c6:	2301      	movs	r3, #1
 80127c8:	4053      	eors	r3, r2
 80127ca:	b2db      	uxtb	r3, r3
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d002      	beq.n	80127d6 <configCheck+0x2ae>
    userbuttonHeld = false;
 80127d0:	4b12      	ldr	r3, [pc, #72]	@ (801281c <configCheck+0x2f4>)
 80127d2:	2200      	movs	r2, #0
 80127d4:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 80127d6:	f7f6 fd3d 	bl	8009254 <Check_USB_PowerOn>
 80127da:	1e03      	subs	r3, r0, #0
 80127dc:	d003      	beq.n	80127e6 <configCheck+0x2be>
    usbPluggedIn = true;
 80127de:	4b21      	ldr	r3, [pc, #132]	@ (8012864 <configCheck+0x33c>)
 80127e0:	2201      	movs	r2, #1
 80127e2:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 80127e4:	e012      	b.n	801280c <configCheck+0x2e4>
    if(!userToggle && !init){
 80127e6:	4b10      	ldr	r3, [pc, #64]	@ (8012828 <configCheck+0x300>)
 80127e8:	781b      	ldrb	r3, [r3, #0]
 80127ea:	2201      	movs	r2, #1
 80127ec:	4053      	eors	r3, r2
 80127ee:	b2db      	uxtb	r3, r3
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d008      	beq.n	8012806 <configCheck+0x2de>
 80127f4:	4b1d      	ldr	r3, [pc, #116]	@ (801286c <configCheck+0x344>)
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	2201      	movs	r2, #1
 80127fa:	4053      	eors	r3, r2
 80127fc:	b2db      	uxtb	r3, r3
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d001      	beq.n	8012806 <configCheck+0x2de>
      SetLEDsOff();
 8012802:	f7ff fc59 	bl	80120b8 <SetLEDsOff>
    usbPluggedIn = false;
 8012806:	4b17      	ldr	r3, [pc, #92]	@ (8012864 <configCheck+0x33c>)
 8012808:	2200      	movs	r2, #0
 801280a:	701a      	strb	r2, [r3, #0]
}
 801280c:	46c0      	nop			@ (mov r8, r8)
 801280e:	46bd      	mov	sp, r7
 8012810:	b003      	add	sp, #12
 8012812:	bd90      	pop	{r4, r7, pc}
 8012814:	20001e60 	.word	0x20001e60
 8012818:	20001e68 	.word	0x20001e68
 801281c:	20001e63 	.word	0x20001e63
 8012820:	00000bb8 	.word	0x00000bb8
 8012824:	000005dc 	.word	0x000005dc
 8012828:	20001e62 	.word	0x20001e62
 801282c:	20000e28 	.word	0x20000e28
 8012830:	0802d5e8 	.word	0x0802d5e8
 8012834:	0802d5ec 	.word	0x0802d5ec
 8012838:	0802d5f0 	.word	0x0802d5f0
 801283c:	0802d528 	.word	0x0802d528
 8012840:	20001e6c 	.word	0x20001e6c
 8012844:	20000ed4 	.word	0x20000ed4
 8012848:	20000ed2 	.word	0x20000ed2
 801284c:	0802d610 	.word	0x0802d610
 8012850:	0802d618 	.word	0x0802d618
 8012854:	0802d624 	.word	0x0802d624
 8012858:	0802d644 	.word	0x0802d644
 801285c:	40000400 	.word	0x40000400
 8012860:	0802d648 	.word	0x0802d648
 8012864:	20001e61 	.word	0x20001e61
 8012868:	0802d660 	.word	0x0802d660
 801286c:	200000dc 	.word	0x200000dc

08012870 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 8012870:	b590      	push	{r4, r7, lr}
 8012872:	b083      	sub	sp, #12
 8012874:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 8012876:	1dfc      	adds	r4, r7, #7
 8012878:	f7ff fdbc 	bl	80123f4 <powerCheck>
 801287c:	0003      	movs	r3, r0
 801287e:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 8012880:	1dfb      	adds	r3, r7, #7
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	0018      	movs	r0, r3
 8012886:	f7ff fdd1 	bl	801242c <powerDisplay>
  return status;
 801288a:	1dfb      	adds	r3, r7, #7
 801288c:	781b      	ldrb	r3, [r3, #0]
}
 801288e:	0018      	movs	r0, r3
 8012890:	46bd      	mov	sp, r7
 8012892:	b003      	add	sp, #12
 8012894:	bd90      	pop	{r4, r7, pc}
	...

08012898 <setuserToggle>:

void setuserToggle(void) {
 8012898:	b580      	push	{r7, lr}
 801289a:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 801289c:	f7ff fdaa 	bl	80123f4 <powerCheck>
 80128a0:	0003      	movs	r3, r0
 80128a2:	2b04      	cmp	r3, #4
 80128a4:	d004      	beq.n	80128b0 <setuserToggle+0x18>
    userToggle = true;
 80128a6:	4b04      	ldr	r3, [pc, #16]	@ (80128b8 <setuserToggle+0x20>)
 80128a8:	2201      	movs	r2, #1
 80128aa:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 80128ac:	f7fa fd24 	bl	800d2f8 <EnabledConnectedDevices>
  }
}
 80128b0:	46c0      	nop			@ (mov r8, r8)
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	46c0      	nop			@ (mov r8, r8)
 80128b8:	20001e62 	.word	0x20001e62

080128bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80128c0:	4b07      	ldr	r3, [pc, #28]	@ (80128e0 <HAL_MspInit+0x24>)
 80128c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80128c4:	4b06      	ldr	r3, [pc, #24]	@ (80128e0 <HAL_MspInit+0x24>)
 80128c6:	2101      	movs	r1, #1
 80128c8:	430a      	orrs	r2, r1
 80128ca:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80128cc:	4b04      	ldr	r3, [pc, #16]	@ (80128e0 <HAL_MspInit+0x24>)
 80128ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80128d0:	4b03      	ldr	r3, [pc, #12]	@ (80128e0 <HAL_MspInit+0x24>)
 80128d2:	2180      	movs	r1, #128	@ 0x80
 80128d4:	0549      	lsls	r1, r1, #21
 80128d6:	430a      	orrs	r2, r1
 80128d8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80128da:	46c0      	nop			@ (mov r8, r8)
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	40021000 	.word	0x40021000

080128e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80128e8:	46c0      	nop			@ (mov r8, r8)
 80128ea:	e7fd      	b.n	80128e8 <NMI_Handler+0x4>

080128ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80128f0:	46c0      	nop			@ (mov r8, r8)
 80128f2:	e7fd      	b.n	80128f0 <HardFault_Handler+0x4>

080128f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80128f8:	46c0      	nop			@ (mov r8, r8)
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}

080128fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80128fe:	b580      	push	{r7, lr}
 8012900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8012902:	46c0      	nop			@ (mov r8, r8)
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801290c:	f001 fa4c 	bl	8013da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8012910:	46c0      	nop			@ (mov r8, r8)
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
	...

08012918 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 801291c:	4b03      	ldr	r3, [pc, #12]	@ (801292c <RTC_IRQHandler+0x14>)
 801291e:	0018      	movs	r0, r3
 8012920:	f009 fa9c 	bl	801be5c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8012924:	46c0      	nop			@ (mov r8, r8)
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	46c0      	nop			@ (mov r8, r8)
 801292c:	20000eac 	.word	0x20000eac

08012930 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 8012934:	2380      	movs	r3, #128	@ 0x80
 8012936:	021b      	lsls	r3, r3, #8
 8012938:	0018      	movs	r0, r3
 801293a:	f002 fcf5 	bl	8015328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 801293e:	46c0      	nop			@ (mov r8, r8)
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}

08012944 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8012948:	4b05      	ldr	r3, [pc, #20]	@ (8012960 <DMA1_Channel2_3_IRQHandler+0x1c>)
 801294a:	0018      	movs	r0, r3
 801294c:	f002 f87d 	bl	8014a4a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8012950:	4b04      	ldr	r3, [pc, #16]	@ (8012964 <DMA1_Channel2_3_IRQHandler+0x20>)
 8012952:	0018      	movs	r0, r3
 8012954:	f002 f879 	bl	8014a4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8012958:	46c0      	nop			@ (mov r8, r8)
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	46c0      	nop			@ (mov r8, r8)
 8012960:	20000d44 	.word	0x20000d44
 8012964:	20000cfc 	.word	0x20000cfc

08012968 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 801296c:	4b07      	ldr	r3, [pc, #28]	@ (801298c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 801296e:	0018      	movs	r0, r3
 8012970:	f002 f86b 	bl	8014a4a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8012974:	4b06      	ldr	r3, [pc, #24]	@ (8012990 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8012976:	0018      	movs	r0, r3
 8012978:	f002 f867 	bl	8014a4a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 801297c:	4b05      	ldr	r3, [pc, #20]	@ (8012994 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 801297e:	0018      	movs	r0, r3
 8012980:	f002 f863 	bl	8014a4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8012984:	46c0      	nop			@ (mov r8, r8)
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}
 801298a:	46c0      	nop			@ (mov r8, r8)
 801298c:	20000dc8 	.word	0x20000dc8
 8012990:	20002168 	.word	0x20002168
 8012994:	200021b0 	.word	0x200021b0

08012998 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 801299c:	4b03      	ldr	r3, [pc, #12]	@ (80129ac <USART4_5_IRQHandler+0x14>)
 801299e:	0018      	movs	r0, r3
 80129a0:	f00a f956 	bl	801cc50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80129a4:	46c0      	nop			@ (mov r8, r8)
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
 80129aa:	46c0      	nop			@ (mov r8, r8)
 80129ac:	200020b0 	.word	0x200020b0

080129b0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 80129b4:	4b09      	ldr	r3, [pc, #36]	@ (80129dc <I2C1_IRQHandler+0x2c>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	699a      	ldr	r2, [r3, #24]
 80129ba:	23e0      	movs	r3, #224	@ 0xe0
 80129bc:	00db      	lsls	r3, r3, #3
 80129be:	4013      	ands	r3, r2
 80129c0:	d004      	beq.n	80129cc <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80129c2:	4b06      	ldr	r3, [pc, #24]	@ (80129dc <I2C1_IRQHandler+0x2c>)
 80129c4:	0018      	movs	r0, r3
 80129c6:	f003 fbcd 	bl	8016164 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80129ca:	e003      	b.n	80129d4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80129cc:	4b03      	ldr	r3, [pc, #12]	@ (80129dc <I2C1_IRQHandler+0x2c>)
 80129ce:	0018      	movs	r0, r3
 80129d0:	f003 fbae 	bl	8016130 <HAL_I2C_EV_IRQHandler>
}
 80129d4:	46c0      	nop			@ (mov r8, r8)
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd80      	pop	{r7, pc}
 80129da:	46c0      	nop			@ (mov r8, r8)
 80129dc:	20000c54 	.word	0x20000c54

080129e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80129e4:	4b03      	ldr	r3, [pc, #12]	@ (80129f4 <USART1_IRQHandler+0x14>)
 80129e6:	0018      	movs	r0, r3
 80129e8:	f00a f932 	bl	801cc50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80129ec:	46c0      	nop			@ (mov r8, r8)
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	46c0      	nop			@ (mov r8, r8)
 80129f4:	20001ff8 	.word	0x20001ff8

080129f8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80129fc:	4b03      	ldr	r3, [pc, #12]	@ (8012a0c <USB_IRQHandler+0x14>)
 80129fe:	0018      	movs	r0, r3
 8012a00:	f006 f864 	bl	8018acc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8012a04:	46c0      	nop			@ (mov r8, r8)
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	46c0      	nop			@ (mov r8, r8)
 8012a0c:	20002fcc 	.word	0x20002fcc

08012a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	af00      	add	r7, sp, #0
  return 1;
 8012a14:	2301      	movs	r3, #1
}
 8012a16:	0018      	movs	r0, r3
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}

08012a1c <_kill>:

int _kill(int pid, int sig)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012a26:	f013 f829 	bl	8025a7c <__errno>
 8012a2a:	0003      	movs	r3, r0
 8012a2c:	2216      	movs	r2, #22
 8012a2e:	601a      	str	r2, [r3, #0]
  return -1;
 8012a30:	2301      	movs	r3, #1
 8012a32:	425b      	negs	r3, r3
}
 8012a34:	0018      	movs	r0, r3
 8012a36:	46bd      	mov	sp, r7
 8012a38:	b002      	add	sp, #8
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <_exit>:

void _exit (int status)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8012a44:	2301      	movs	r3, #1
 8012a46:	425a      	negs	r2, r3
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	0011      	movs	r1, r2
 8012a4c:	0018      	movs	r0, r3
 8012a4e:	f7ff ffe5 	bl	8012a1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8012a52:	46c0      	nop			@ (mov r8, r8)
 8012a54:	e7fd      	b.n	8012a52 <_exit+0x16>

08012a56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012a56:	b580      	push	{r7, lr}
 8012a58:	b086      	sub	sp, #24
 8012a5a:	af00      	add	r7, sp, #0
 8012a5c:	60f8      	str	r0, [r7, #12]
 8012a5e:	60b9      	str	r1, [r7, #8]
 8012a60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012a62:	2300      	movs	r3, #0
 8012a64:	617b      	str	r3, [r7, #20]
 8012a66:	e00a      	b.n	8012a7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012a68:	e000      	b.n	8012a6c <_read+0x16>
 8012a6a:	bf00      	nop
 8012a6c:	0001      	movs	r1, r0
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	1c5a      	adds	r2, r3, #1
 8012a72:	60ba      	str	r2, [r7, #8]
 8012a74:	b2ca      	uxtb	r2, r1
 8012a76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	3301      	adds	r3, #1
 8012a7c:	617b      	str	r3, [r7, #20]
 8012a7e:	697a      	ldr	r2, [r7, #20]
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	dbf0      	blt.n	8012a68 <_read+0x12>
  }

  return len;
 8012a86:	687b      	ldr	r3, [r7, #4]
}
 8012a88:	0018      	movs	r0, r3
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	b006      	add	sp, #24
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <_close>:
  }
  return len;
}

int _close(int file)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b082      	sub	sp, #8
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012a98:	2301      	movs	r3, #1
 8012a9a:	425b      	negs	r3, r3
}
 8012a9c:	0018      	movs	r0, r3
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	b002      	add	sp, #8
 8012aa2:	bd80      	pop	{r7, pc}

08012aa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b082      	sub	sp, #8
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	2280      	movs	r2, #128	@ 0x80
 8012ab2:	0192      	lsls	r2, r2, #6
 8012ab4:	605a      	str	r2, [r3, #4]
  return 0;
 8012ab6:	2300      	movs	r3, #0
}
 8012ab8:	0018      	movs	r0, r3
 8012aba:	46bd      	mov	sp, r7
 8012abc:	b002      	add	sp, #8
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <_isatty>:

int _isatty(int file)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b082      	sub	sp, #8
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012ac8:	2301      	movs	r3, #1
}
 8012aca:	0018      	movs	r0, r3
 8012acc:	46bd      	mov	sp, r7
 8012ace:	b002      	add	sp, #8
 8012ad0:	bd80      	pop	{r7, pc}

08012ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012ad2:	b580      	push	{r7, lr}
 8012ad4:	b084      	sub	sp, #16
 8012ad6:	af00      	add	r7, sp, #0
 8012ad8:	60f8      	str	r0, [r7, #12]
 8012ada:	60b9      	str	r1, [r7, #8]
 8012adc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012ade:	2300      	movs	r3, #0
}
 8012ae0:	0018      	movs	r0, r3
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	b004      	add	sp, #16
 8012ae6:	bd80      	pop	{r7, pc}

08012ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b086      	sub	sp, #24
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012af0:	4a14      	ldr	r2, [pc, #80]	@ (8012b44 <_sbrk+0x5c>)
 8012af2:	4b15      	ldr	r3, [pc, #84]	@ (8012b48 <_sbrk+0x60>)
 8012af4:	1ad3      	subs	r3, r2, r3
 8012af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012afc:	4b13      	ldr	r3, [pc, #76]	@ (8012b4c <_sbrk+0x64>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d102      	bne.n	8012b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012b04:	4b11      	ldr	r3, [pc, #68]	@ (8012b4c <_sbrk+0x64>)
 8012b06:	4a12      	ldr	r2, [pc, #72]	@ (8012b50 <_sbrk+0x68>)
 8012b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012b0a:	4b10      	ldr	r3, [pc, #64]	@ (8012b4c <_sbrk+0x64>)
 8012b0c:	681a      	ldr	r2, [r3, #0]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	18d3      	adds	r3, r2, r3
 8012b12:	693a      	ldr	r2, [r7, #16]
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d207      	bcs.n	8012b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012b18:	f012 ffb0 	bl	8025a7c <__errno>
 8012b1c:	0003      	movs	r3, r0
 8012b1e:	220c      	movs	r2, #12
 8012b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012b22:	2301      	movs	r3, #1
 8012b24:	425b      	negs	r3, r3
 8012b26:	e009      	b.n	8012b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012b28:	4b08      	ldr	r3, [pc, #32]	@ (8012b4c <_sbrk+0x64>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012b2e:	4b07      	ldr	r3, [pc, #28]	@ (8012b4c <_sbrk+0x64>)
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	18d2      	adds	r2, r2, r3
 8012b36:	4b05      	ldr	r3, [pc, #20]	@ (8012b4c <_sbrk+0x64>)
 8012b38:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8012b3a:	68fb      	ldr	r3, [r7, #12]
}
 8012b3c:	0018      	movs	r0, r3
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	b006      	add	sp, #24
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	20005000 	.word	0x20005000
 8012b48:	00000400 	.word	0x00000400
 8012b4c:	20001e7c 	.word	0x20001e7c
 8012b50:	20003630 	.word	0x20003630

08012b54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012b58:	46c0      	nop			@ (mov r8, r8)
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
	...

08012b60 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b086      	sub	sp, #24
 8012b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012b66:	2310      	movs	r3, #16
 8012b68:	18fb      	adds	r3, r7, r3
 8012b6a:	0018      	movs	r0, r3
 8012b6c:	2308      	movs	r3, #8
 8012b6e:	001a      	movs	r2, r3
 8012b70:	2100      	movs	r1, #0
 8012b72:	f012 fedf 	bl	8025934 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012b76:	003b      	movs	r3, r7
 8012b78:	0018      	movs	r0, r3
 8012b7a:	2310      	movs	r3, #16
 8012b7c:	001a      	movs	r2, r3
 8012b7e:	2100      	movs	r1, #0
 8012b80:	f012 fed8 	bl	8025934 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8012b84:	4b2e      	ldr	r3, [pc, #184]	@ (8012c40 <MX_TIM2_Init+0xe0>)
 8012b86:	2280      	movs	r2, #128	@ 0x80
 8012b88:	05d2      	lsls	r2, r2, #23
 8012b8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8012b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8012c40 <MX_TIM2_Init+0xe0>)
 8012b8e:	2200      	movs	r2, #0
 8012b90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012b92:	4b2b      	ldr	r3, [pc, #172]	@ (8012c40 <MX_TIM2_Init+0xe0>)
 8012b94:	2200      	movs	r2, #0
 8012b96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8012b98:	4b29      	ldr	r3, [pc, #164]	@ (8012c40 <MX_TIM2_Init+0xe0>)
 8012b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8012c44 <MX_TIM2_Init+0xe4>)
 8012b9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012b9e:	4b28      	ldr	r3, [pc, #160]	@ (8012c40 <MX_TIM2_Init+0xe0>)
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012ba4:	4b26      	ldr	r3, [pc, #152]	@ (8012c40 <MX_TIM2_Init+0xe0>)
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8012baa:	4b25      	ldr	r3, [pc, #148]	@ (8012c40 <MX_TIM2_Init+0xe0>)
 8012bac:	0018      	movs	r0, r3
 8012bae:	f009 fa63 	bl	801c078 <HAL_TIM_PWM_Init>
 8012bb2:	1e03      	subs	r3, r0, #0
 8012bb4:	d001      	beq.n	8012bba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8012bb6:	f7f9 ff41 	bl	800ca3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012bba:	2110      	movs	r1, #16
 8012bbc:	187b      	adds	r3, r7, r1
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012bc2:	187b      	adds	r3, r7, r1
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8012bc8:	187a      	adds	r2, r7, r1
 8012bca:	4b1d      	ldr	r3, [pc, #116]	@ (8012c40 <MX_TIM2_Init+0xe0>)
 8012bcc:	0011      	movs	r1, r2
 8012bce:	0018      	movs	r0, r3
 8012bd0:	f009 fd70 	bl	801c6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8012bd4:	1e03      	subs	r3, r0, #0
 8012bd6:	d001      	beq.n	8012bdc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8012bd8:	f7f9 ff30 	bl	800ca3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012bdc:	003b      	movs	r3, r7
 8012bde:	2260      	movs	r2, #96	@ 0x60
 8012be0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8012be2:	003b      	movs	r3, r7
 8012be4:	2200      	movs	r2, #0
 8012be6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012be8:	003b      	movs	r3, r7
 8012bea:	2200      	movs	r2, #0
 8012bec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012bee:	003b      	movs	r3, r7
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012bf4:	0039      	movs	r1, r7
 8012bf6:	4b12      	ldr	r3, [pc, #72]	@ (8012c40 <MX_TIM2_Init+0xe0>)
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	0018      	movs	r0, r3
 8012bfc:	f009 fb0e 	bl	801c21c <HAL_TIM_PWM_ConfigChannel>
 8012c00:	1e03      	subs	r3, r0, #0
 8012c02:	d001      	beq.n	8012c08 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8012c04:	f7f9 ff1a 	bl	800ca3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012c08:	0039      	movs	r1, r7
 8012c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8012c40 <MX_TIM2_Init+0xe0>)
 8012c0c:	2208      	movs	r2, #8
 8012c0e:	0018      	movs	r0, r3
 8012c10:	f009 fb04 	bl	801c21c <HAL_TIM_PWM_ConfigChannel>
 8012c14:	1e03      	subs	r3, r0, #0
 8012c16:	d001      	beq.n	8012c1c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8012c18:	f7f9 ff10 	bl	800ca3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8012c1c:	0039      	movs	r1, r7
 8012c1e:	4b08      	ldr	r3, [pc, #32]	@ (8012c40 <MX_TIM2_Init+0xe0>)
 8012c20:	220c      	movs	r2, #12
 8012c22:	0018      	movs	r0, r3
 8012c24:	f009 fafa 	bl	801c21c <HAL_TIM_PWM_ConfigChannel>
 8012c28:	1e03      	subs	r3, r0, #0
 8012c2a:	d001      	beq.n	8012c30 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8012c2c:	f7f9 ff06 	bl	800ca3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8012c30:	4b03      	ldr	r3, [pc, #12]	@ (8012c40 <MX_TIM2_Init+0xe0>)
 8012c32:	0018      	movs	r0, r3
 8012c34:	f000 f8fe 	bl	8012e34 <HAL_TIM_MspPostInit>

}
 8012c38:	46c0      	nop			@ (mov r8, r8)
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	b006      	add	sp, #24
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	20001e80 	.word	0x20001e80
 8012c44:	0000ffff 	.word	0x0000ffff

08012c48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b086      	sub	sp, #24
 8012c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012c4e:	2310      	movs	r3, #16
 8012c50:	18fb      	adds	r3, r7, r3
 8012c52:	0018      	movs	r0, r3
 8012c54:	2308      	movs	r3, #8
 8012c56:	001a      	movs	r2, r3
 8012c58:	2100      	movs	r1, #0
 8012c5a:	f012 fe6b 	bl	8025934 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012c5e:	003b      	movs	r3, r7
 8012c60:	0018      	movs	r0, r3
 8012c62:	2310      	movs	r3, #16
 8012c64:	001a      	movs	r2, r3
 8012c66:	2100      	movs	r1, #0
 8012c68:	f012 fe64 	bl	8025934 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8012c6c:	4b32      	ldr	r3, [pc, #200]	@ (8012d38 <MX_TIM3_Init+0xf0>)
 8012c6e:	4a33      	ldr	r2, [pc, #204]	@ (8012d3c <MX_TIM3_Init+0xf4>)
 8012c70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8012c72:	4b31      	ldr	r3, [pc, #196]	@ (8012d38 <MX_TIM3_Init+0xf0>)
 8012c74:	2200      	movs	r2, #0
 8012c76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012c78:	4b2f      	ldr	r3, [pc, #188]	@ (8012d38 <MX_TIM3_Init+0xf0>)
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8012c7e:	4b2e      	ldr	r3, [pc, #184]	@ (8012d38 <MX_TIM3_Init+0xf0>)
 8012c80:	4a2f      	ldr	r2, [pc, #188]	@ (8012d40 <MX_TIM3_Init+0xf8>)
 8012c82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012c84:	4b2c      	ldr	r3, [pc, #176]	@ (8012d38 <MX_TIM3_Init+0xf0>)
 8012c86:	2200      	movs	r2, #0
 8012c88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8012d38 <MX_TIM3_Init+0xf0>)
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8012c90:	4b29      	ldr	r3, [pc, #164]	@ (8012d38 <MX_TIM3_Init+0xf0>)
 8012c92:	0018      	movs	r0, r3
 8012c94:	f009 f9f0 	bl	801c078 <HAL_TIM_PWM_Init>
 8012c98:	1e03      	subs	r3, r0, #0
 8012c9a:	d001      	beq.n	8012ca0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8012c9c:	f7f9 fece 	bl	800ca3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012ca0:	2110      	movs	r1, #16
 8012ca2:	187b      	adds	r3, r7, r1
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012ca8:	187b      	adds	r3, r7, r1
 8012caa:	2200      	movs	r2, #0
 8012cac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8012cae:	187a      	adds	r2, r7, r1
 8012cb0:	4b21      	ldr	r3, [pc, #132]	@ (8012d38 <MX_TIM3_Init+0xf0>)
 8012cb2:	0011      	movs	r1, r2
 8012cb4:	0018      	movs	r0, r3
 8012cb6:	f009 fcfd 	bl	801c6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8012cba:	1e03      	subs	r3, r0, #0
 8012cbc:	d001      	beq.n	8012cc2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8012cbe:	f7f9 febd 	bl	800ca3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012cc2:	003b      	movs	r3, r7
 8012cc4:	2260      	movs	r2, #96	@ 0x60
 8012cc6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8012cc8:	003b      	movs	r3, r7
 8012cca:	2200      	movs	r2, #0
 8012ccc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012cce:	003b      	movs	r3, r7
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012cd4:	003b      	movs	r3, r7
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012cda:	0039      	movs	r1, r7
 8012cdc:	4b16      	ldr	r3, [pc, #88]	@ (8012d38 <MX_TIM3_Init+0xf0>)
 8012cde:	2200      	movs	r2, #0
 8012ce0:	0018      	movs	r0, r3
 8012ce2:	f009 fa9b 	bl	801c21c <HAL_TIM_PWM_ConfigChannel>
 8012ce6:	1e03      	subs	r3, r0, #0
 8012ce8:	d001      	beq.n	8012cee <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8012cea:	f7f9 fea7 	bl	800ca3c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8012cee:	4b12      	ldr	r3, [pc, #72]	@ (8012d38 <MX_TIM3_Init+0xf0>)
 8012cf0:	2104      	movs	r1, #4
 8012cf2:	0018      	movs	r0, r3
 8012cf4:	f009 fd3c 	bl	801c770 <HAL_TIMEx_RemapConfig>
 8012cf8:	1e03      	subs	r3, r0, #0
 8012cfa:	d001      	beq.n	8012d00 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8012cfc:	f7f9 fe9e 	bl	800ca3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8012d00:	0039      	movs	r1, r7
 8012d02:	4b0d      	ldr	r3, [pc, #52]	@ (8012d38 <MX_TIM3_Init+0xf0>)
 8012d04:	2204      	movs	r2, #4
 8012d06:	0018      	movs	r0, r3
 8012d08:	f009 fa88 	bl	801c21c <HAL_TIM_PWM_ConfigChannel>
 8012d0c:	1e03      	subs	r3, r0, #0
 8012d0e:	d001      	beq.n	8012d14 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8012d10:	f7f9 fe94 	bl	800ca3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012d14:	0039      	movs	r1, r7
 8012d16:	4b08      	ldr	r3, [pc, #32]	@ (8012d38 <MX_TIM3_Init+0xf0>)
 8012d18:	2208      	movs	r2, #8
 8012d1a:	0018      	movs	r0, r3
 8012d1c:	f009 fa7e 	bl	801c21c <HAL_TIM_PWM_ConfigChannel>
 8012d20:	1e03      	subs	r3, r0, #0
 8012d22:	d001      	beq.n	8012d28 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8012d24:	f7f9 fe8a 	bl	800ca3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8012d28:	4b03      	ldr	r3, [pc, #12]	@ (8012d38 <MX_TIM3_Init+0xf0>)
 8012d2a:	0018      	movs	r0, r3
 8012d2c:	f000 f882 	bl	8012e34 <HAL_TIM_MspPostInit>

}
 8012d30:	46c0      	nop			@ (mov r8, r8)
 8012d32:	46bd      	mov	sp, r7
 8012d34:	b006      	add	sp, #24
 8012d36:	bd80      	pop	{r7, pc}
 8012d38:	20001ec0 	.word	0x20001ec0
 8012d3c:	40000400 	.word	0x40000400
 8012d40:	0000ffff 	.word	0x0000ffff

08012d44 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b082      	sub	sp, #8
 8012d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012d4a:	003b      	movs	r3, r7
 8012d4c:	0018      	movs	r0, r3
 8012d4e:	2308      	movs	r3, #8
 8012d50:	001a      	movs	r2, r3
 8012d52:	2100      	movs	r1, #0
 8012d54:	f012 fdee 	bl	8025934 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8012d58:	4b15      	ldr	r3, [pc, #84]	@ (8012db0 <MX_TIM6_Init+0x6c>)
 8012d5a:	4a16      	ldr	r2, [pc, #88]	@ (8012db4 <MX_TIM6_Init+0x70>)
 8012d5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8012d5e:	4b14      	ldr	r3, [pc, #80]	@ (8012db0 <MX_TIM6_Init+0x6c>)
 8012d60:	220a      	movs	r2, #10
 8012d62:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012d64:	4b12      	ldr	r3, [pc, #72]	@ (8012db0 <MX_TIM6_Init+0x6c>)
 8012d66:	2200      	movs	r2, #0
 8012d68:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8012d6a:	4b11      	ldr	r3, [pc, #68]	@ (8012db0 <MX_TIM6_Init+0x6c>)
 8012d6c:	4a12      	ldr	r2, [pc, #72]	@ (8012db8 <MX_TIM6_Init+0x74>)
 8012d6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012d70:	4b0f      	ldr	r3, [pc, #60]	@ (8012db0 <MX_TIM6_Init+0x6c>)
 8012d72:	2200      	movs	r2, #0
 8012d74:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8012d76:	4b0e      	ldr	r3, [pc, #56]	@ (8012db0 <MX_TIM6_Init+0x6c>)
 8012d78:	0018      	movs	r0, r3
 8012d7a:	f009 f8d5 	bl	801bf28 <HAL_TIM_Base_Init>
 8012d7e:	1e03      	subs	r3, r0, #0
 8012d80:	d001      	beq.n	8012d86 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8012d82:	f7f9 fe5b 	bl	800ca3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012d86:	003b      	movs	r3, r7
 8012d88:	2200      	movs	r2, #0
 8012d8a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012d8c:	003b      	movs	r3, r7
 8012d8e:	2200      	movs	r2, #0
 8012d90:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8012d92:	003a      	movs	r2, r7
 8012d94:	4b06      	ldr	r3, [pc, #24]	@ (8012db0 <MX_TIM6_Init+0x6c>)
 8012d96:	0011      	movs	r1, r2
 8012d98:	0018      	movs	r0, r3
 8012d9a:	f009 fc8b 	bl	801c6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8012d9e:	1e03      	subs	r3, r0, #0
 8012da0:	d001      	beq.n	8012da6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8012da2:	f7f9 fe4b 	bl	800ca3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8012da6:	46c0      	nop			@ (mov r8, r8)
 8012da8:	46bd      	mov	sp, r7
 8012daa:	b002      	add	sp, #8
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	46c0      	nop			@ (mov r8, r8)
 8012db0:	20001f00 	.word	0x20001f00
 8012db4:	40001000 	.word	0x40001000
 8012db8:	0000ffff 	.word	0x0000ffff

08012dbc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681a      	ldr	r2, [r3, #0]
 8012dc8:	2380      	movs	r3, #128	@ 0x80
 8012dca:	05db      	lsls	r3, r3, #23
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d106      	bne.n	8012dde <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8012dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8012dfc <HAL_TIM_PWM_MspInit+0x40>)
 8012dd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012dd4:	4b09      	ldr	r3, [pc, #36]	@ (8012dfc <HAL_TIM_PWM_MspInit+0x40>)
 8012dd6:	2101      	movs	r1, #1
 8012dd8:	430a      	orrs	r2, r1
 8012dda:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8012ddc:	e00a      	b.n	8012df4 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	4a07      	ldr	r2, [pc, #28]	@ (8012e00 <HAL_TIM_PWM_MspInit+0x44>)
 8012de4:	4293      	cmp	r3, r2
 8012de6:	d105      	bne.n	8012df4 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8012de8:	4b04      	ldr	r3, [pc, #16]	@ (8012dfc <HAL_TIM_PWM_MspInit+0x40>)
 8012dea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012dec:	4b03      	ldr	r3, [pc, #12]	@ (8012dfc <HAL_TIM_PWM_MspInit+0x40>)
 8012dee:	2102      	movs	r1, #2
 8012df0:	430a      	orrs	r2, r1
 8012df2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8012df4:	46c0      	nop			@ (mov r8, r8)
 8012df6:	46bd      	mov	sp, r7
 8012df8:	b002      	add	sp, #8
 8012dfa:	bd80      	pop	{r7, pc}
 8012dfc:	40021000 	.word	0x40021000
 8012e00:	40000400 	.word	0x40000400

08012e04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	4a06      	ldr	r2, [pc, #24]	@ (8012e2c <HAL_TIM_Base_MspInit+0x28>)
 8012e12:	4293      	cmp	r3, r2
 8012e14:	d105      	bne.n	8012e22 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8012e16:	4b06      	ldr	r3, [pc, #24]	@ (8012e30 <HAL_TIM_Base_MspInit+0x2c>)
 8012e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012e1a:	4b05      	ldr	r3, [pc, #20]	@ (8012e30 <HAL_TIM_Base_MspInit+0x2c>)
 8012e1c:	2110      	movs	r1, #16
 8012e1e:	430a      	orrs	r2, r1
 8012e20:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8012e22:	46c0      	nop			@ (mov r8, r8)
 8012e24:	46bd      	mov	sp, r7
 8012e26:	b002      	add	sp, #8
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	46c0      	nop			@ (mov r8, r8)
 8012e2c:	40001000 	.word	0x40001000
 8012e30:	40021000 	.word	0x40021000

08012e34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8012e34:	b590      	push	{r4, r7, lr}
 8012e36:	b08b      	sub	sp, #44	@ 0x2c
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e3c:	2414      	movs	r4, #20
 8012e3e:	193b      	adds	r3, r7, r4
 8012e40:	0018      	movs	r0, r3
 8012e42:	2314      	movs	r3, #20
 8012e44:	001a      	movs	r2, r3
 8012e46:	2100      	movs	r1, #0
 8012e48:	f012 fd74 	bl	8025934 <memset>
  if(timHandle->Instance==TIM2)
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681a      	ldr	r2, [r3, #0]
 8012e50:	2380      	movs	r3, #128	@ 0x80
 8012e52:	05db      	lsls	r3, r3, #23
 8012e54:	429a      	cmp	r2, r3
 8012e56:	d123      	bne.n	8012ea0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012e58:	4b27      	ldr	r3, [pc, #156]	@ (8012ef8 <HAL_TIM_MspPostInit+0xc4>)
 8012e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e5c:	4b26      	ldr	r3, [pc, #152]	@ (8012ef8 <HAL_TIM_MspPostInit+0xc4>)
 8012e5e:	2101      	movs	r1, #1
 8012e60:	430a      	orrs	r2, r1
 8012e62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012e64:	4b24      	ldr	r3, [pc, #144]	@ (8012ef8 <HAL_TIM_MspPostInit+0xc4>)
 8012e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e68:	2201      	movs	r2, #1
 8012e6a:	4013      	ands	r3, r2
 8012e6c:	613b      	str	r3, [r7, #16]
 8012e6e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8012e70:	0021      	movs	r1, r4
 8012e72:	187b      	adds	r3, r7, r1
 8012e74:	220d      	movs	r2, #13
 8012e76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e78:	187b      	adds	r3, r7, r1
 8012e7a:	2202      	movs	r2, #2
 8012e7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e7e:	187b      	adds	r3, r7, r1
 8012e80:	2200      	movs	r2, #0
 8012e82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012e84:	187b      	adds	r3, r7, r1
 8012e86:	2200      	movs	r2, #0
 8012e88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8012e8a:	187b      	adds	r3, r7, r1
 8012e8c:	2202      	movs	r2, #2
 8012e8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012e90:	187a      	adds	r2, r7, r1
 8012e92:	23a0      	movs	r3, #160	@ 0xa0
 8012e94:	05db      	lsls	r3, r3, #23
 8012e96:	0011      	movs	r1, r2
 8012e98:	0018      	movs	r0, r3
 8012e9a:	f002 f88d 	bl	8014fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8012e9e:	e027      	b.n	8012ef0 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	4a15      	ldr	r2, [pc, #84]	@ (8012efc <HAL_TIM_MspPostInit+0xc8>)
 8012ea6:	4293      	cmp	r3, r2
 8012ea8:	d122      	bne.n	8012ef0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012eaa:	4b13      	ldr	r3, [pc, #76]	@ (8012ef8 <HAL_TIM_MspPostInit+0xc4>)
 8012eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012eae:	4b12      	ldr	r3, [pc, #72]	@ (8012ef8 <HAL_TIM_MspPostInit+0xc4>)
 8012eb0:	2104      	movs	r1, #4
 8012eb2:	430a      	orrs	r2, r1
 8012eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012eb6:	4b10      	ldr	r3, [pc, #64]	@ (8012ef8 <HAL_TIM_MspPostInit+0xc4>)
 8012eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012eba:	2204      	movs	r2, #4
 8012ebc:	4013      	ands	r3, r2
 8012ebe:	60fb      	str	r3, [r7, #12]
 8012ec0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8012ec2:	2114      	movs	r1, #20
 8012ec4:	187b      	adds	r3, r7, r1
 8012ec6:	22e0      	movs	r2, #224	@ 0xe0
 8012ec8:	0052      	lsls	r2, r2, #1
 8012eca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ecc:	187b      	adds	r3, r7, r1
 8012ece:	2202      	movs	r2, #2
 8012ed0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ed2:	187b      	adds	r3, r7, r1
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012ed8:	187b      	adds	r3, r7, r1
 8012eda:	2200      	movs	r2, #0
 8012edc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012ede:	187b      	adds	r3, r7, r1
 8012ee0:	2202      	movs	r2, #2
 8012ee2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012ee4:	187b      	adds	r3, r7, r1
 8012ee6:	4a06      	ldr	r2, [pc, #24]	@ (8012f00 <HAL_TIM_MspPostInit+0xcc>)
 8012ee8:	0019      	movs	r1, r3
 8012eea:	0010      	movs	r0, r2
 8012eec:	f002 f864 	bl	8014fb8 <HAL_GPIO_Init>
}
 8012ef0:	46c0      	nop			@ (mov r8, r8)
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	b00b      	add	sp, #44	@ 0x2c
 8012ef6:	bd90      	pop	{r4, r7, pc}
 8012ef8:	40021000 	.word	0x40021000
 8012efc:	40000400 	.word	0x40000400
 8012f00:	50000800 	.word	0x50000800

08012f04 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8012f08:	4b17      	ldr	r3, [pc, #92]	@ (8012f68 <MX_LPUART1_UART_Init+0x64>)
 8012f0a:	4a18      	ldr	r2, [pc, #96]	@ (8012f6c <MX_LPUART1_UART_Init+0x68>)
 8012f0c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8012f0e:	4b16      	ldr	r3, [pc, #88]	@ (8012f68 <MX_LPUART1_UART_Init+0x64>)
 8012f10:	22e1      	movs	r2, #225	@ 0xe1
 8012f12:	0252      	lsls	r2, r2, #9
 8012f14:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012f16:	4b14      	ldr	r3, [pc, #80]	@ (8012f68 <MX_LPUART1_UART_Init+0x64>)
 8012f18:	2200      	movs	r2, #0
 8012f1a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8012f1c:	4b12      	ldr	r3, [pc, #72]	@ (8012f68 <MX_LPUART1_UART_Init+0x64>)
 8012f1e:	2200      	movs	r2, #0
 8012f20:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8012f22:	4b11      	ldr	r3, [pc, #68]	@ (8012f68 <MX_LPUART1_UART_Init+0x64>)
 8012f24:	2200      	movs	r2, #0
 8012f26:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8012f28:	4b0f      	ldr	r3, [pc, #60]	@ (8012f68 <MX_LPUART1_UART_Init+0x64>)
 8012f2a:	220c      	movs	r2, #12
 8012f2c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8012f68 <MX_LPUART1_UART_Init+0x64>)
 8012f30:	2200      	movs	r2, #0
 8012f32:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012f34:	4b0c      	ldr	r3, [pc, #48]	@ (8012f68 <MX_LPUART1_UART_Init+0x64>)
 8012f36:	2200      	movs	r2, #0
 8012f38:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8012f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8012f68 <MX_LPUART1_UART_Init+0x64>)
 8012f3c:	2218      	movs	r2, #24
 8012f3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8012f40:	4b09      	ldr	r3, [pc, #36]	@ (8012f68 <MX_LPUART1_UART_Init+0x64>)
 8012f42:	2280      	movs	r2, #128	@ 0x80
 8012f44:	0212      	lsls	r2, r2, #8
 8012f46:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8012f48:	4b07      	ldr	r3, [pc, #28]	@ (8012f68 <MX_LPUART1_UART_Init+0x64>)
 8012f4a:	2280      	movs	r2, #128	@ 0x80
 8012f4c:	0152      	lsls	r2, r2, #5
 8012f4e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8012f50:	4b05      	ldr	r3, [pc, #20]	@ (8012f68 <MX_LPUART1_UART_Init+0x64>)
 8012f52:	0018      	movs	r0, r3
 8012f54:	f009 fc2a 	bl	801c7ac <HAL_UART_Init>
 8012f58:	1e03      	subs	r3, r0, #0
 8012f5a:	d001      	beq.n	8012f60 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8012f5c:	f7f9 fd6e 	bl	800ca3c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8012f60:	46c0      	nop			@ (mov r8, r8)
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
 8012f66:	46c0      	nop			@ (mov r8, r8)
 8012f68:	20001f40 	.word	0x20001f40
 8012f6c:	40004800 	.word	0x40004800

08012f70 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8012f74:	4b14      	ldr	r3, [pc, #80]	@ (8012fc8 <MX_USART1_UART_Init+0x58>)
 8012f76:	4a15      	ldr	r2, [pc, #84]	@ (8012fcc <MX_USART1_UART_Init+0x5c>)
 8012f78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8012f7a:	4b13      	ldr	r3, [pc, #76]	@ (8012fc8 <MX_USART1_UART_Init+0x58>)
 8012f7c:	22e1      	movs	r2, #225	@ 0xe1
 8012f7e:	0252      	lsls	r2, r2, #9
 8012f80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012f82:	4b11      	ldr	r3, [pc, #68]	@ (8012fc8 <MX_USART1_UART_Init+0x58>)
 8012f84:	2200      	movs	r2, #0
 8012f86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8012f88:	4b0f      	ldr	r3, [pc, #60]	@ (8012fc8 <MX_USART1_UART_Init+0x58>)
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8012f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8012fc8 <MX_USART1_UART_Init+0x58>)
 8012f90:	2200      	movs	r2, #0
 8012f92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012f94:	4b0c      	ldr	r3, [pc, #48]	@ (8012fc8 <MX_USART1_UART_Init+0x58>)
 8012f96:	220c      	movs	r2, #12
 8012f98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8012fc8 <MX_USART1_UART_Init+0x58>)
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8012fa0:	4b09      	ldr	r3, [pc, #36]	@ (8012fc8 <MX_USART1_UART_Init+0x58>)
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012fa6:	4b08      	ldr	r3, [pc, #32]	@ (8012fc8 <MX_USART1_UART_Init+0x58>)
 8012fa8:	2200      	movs	r2, #0
 8012faa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012fac:	4b06      	ldr	r3, [pc, #24]	@ (8012fc8 <MX_USART1_UART_Init+0x58>)
 8012fae:	2200      	movs	r2, #0
 8012fb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8012fb2:	4b05      	ldr	r3, [pc, #20]	@ (8012fc8 <MX_USART1_UART_Init+0x58>)
 8012fb4:	0018      	movs	r0, r3
 8012fb6:	f009 fbf9 	bl	801c7ac <HAL_UART_Init>
 8012fba:	1e03      	subs	r3, r0, #0
 8012fbc:	d001      	beq.n	8012fc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8012fbe:	f7f9 fd3d 	bl	800ca3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8012fc2:	46c0      	nop			@ (mov r8, r8)
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}
 8012fc8:	20001ff8 	.word	0x20001ff8
 8012fcc:	40013800 	.word	0x40013800

08012fd0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8012fd4:	4b14      	ldr	r3, [pc, #80]	@ (8013028 <MX_USART4_UART_Init+0x58>)
 8012fd6:	4a15      	ldr	r2, [pc, #84]	@ (801302c <MX_USART4_UART_Init+0x5c>)
 8012fd8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8012fda:	4b13      	ldr	r3, [pc, #76]	@ (8013028 <MX_USART4_UART_Init+0x58>)
 8012fdc:	22e1      	movs	r2, #225	@ 0xe1
 8012fde:	0252      	lsls	r2, r2, #9
 8012fe0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8012fe2:	4b11      	ldr	r3, [pc, #68]	@ (8013028 <MX_USART4_UART_Init+0x58>)
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8012fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8013028 <MX_USART4_UART_Init+0x58>)
 8012fea:	2200      	movs	r2, #0
 8012fec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8012fee:	4b0e      	ldr	r3, [pc, #56]	@ (8013028 <MX_USART4_UART_Init+0x58>)
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8012ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8013028 <MX_USART4_UART_Init+0x58>)
 8012ff6:	220c      	movs	r2, #12
 8012ff8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8013028 <MX_USART4_UART_Init+0x58>)
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8013000:	4b09      	ldr	r3, [pc, #36]	@ (8013028 <MX_USART4_UART_Init+0x58>)
 8013002:	2200      	movs	r2, #0
 8013004:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013006:	4b08      	ldr	r3, [pc, #32]	@ (8013028 <MX_USART4_UART_Init+0x58>)
 8013008:	2200      	movs	r2, #0
 801300a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801300c:	4b06      	ldr	r3, [pc, #24]	@ (8013028 <MX_USART4_UART_Init+0x58>)
 801300e:	2200      	movs	r2, #0
 8013010:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8013012:	4b05      	ldr	r3, [pc, #20]	@ (8013028 <MX_USART4_UART_Init+0x58>)
 8013014:	0018      	movs	r0, r3
 8013016:	f009 fbc9 	bl	801c7ac <HAL_UART_Init>
 801301a:	1e03      	subs	r3, r0, #0
 801301c:	d001      	beq.n	8013022 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 801301e:	f7f9 fd0d 	bl	800ca3c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8013022:	46c0      	nop			@ (mov r8, r8)
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}
 8013028:	200020b0 	.word	0x200020b0
 801302c:	40004c00 	.word	0x40004c00

08013030 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8013030:	b590      	push	{r4, r7, lr}
 8013032:	b08d      	sub	sp, #52	@ 0x34
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013038:	241c      	movs	r4, #28
 801303a:	193b      	adds	r3, r7, r4
 801303c:	0018      	movs	r0, r3
 801303e:	2314      	movs	r3, #20
 8013040:	001a      	movs	r2, r3
 8013042:	2100      	movs	r1, #0
 8013044:	f012 fc76 	bl	8025934 <memset>
  if(uartHandle->Instance==LPUART1)
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	4a8b      	ldr	r2, [pc, #556]	@ (801327c <HAL_UART_MspInit+0x24c>)
 801304e:	4293      	cmp	r3, r2
 8013050:	d129      	bne.n	80130a6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8013052:	4b8b      	ldr	r3, [pc, #556]	@ (8013280 <HAL_UART_MspInit+0x250>)
 8013054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013056:	4b8a      	ldr	r3, [pc, #552]	@ (8013280 <HAL_UART_MspInit+0x250>)
 8013058:	2180      	movs	r1, #128	@ 0x80
 801305a:	02c9      	lsls	r1, r1, #11
 801305c:	430a      	orrs	r2, r1
 801305e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013060:	4b87      	ldr	r3, [pc, #540]	@ (8013280 <HAL_UART_MspInit+0x250>)
 8013062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013064:	4b86      	ldr	r3, [pc, #536]	@ (8013280 <HAL_UART_MspInit+0x250>)
 8013066:	2104      	movs	r1, #4
 8013068:	430a      	orrs	r2, r1
 801306a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801306c:	4b84      	ldr	r3, [pc, #528]	@ (8013280 <HAL_UART_MspInit+0x250>)
 801306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013070:	2204      	movs	r2, #4
 8013072:	4013      	ands	r3, r2
 8013074:	61bb      	str	r3, [r7, #24]
 8013076:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013078:	0021      	movs	r1, r4
 801307a:	187b      	adds	r3, r7, r1
 801307c:	2203      	movs	r2, #3
 801307e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013080:	187b      	adds	r3, r7, r1
 8013082:	2202      	movs	r2, #2
 8013084:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013086:	187b      	adds	r3, r7, r1
 8013088:	2200      	movs	r2, #0
 801308a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801308c:	187b      	adds	r3, r7, r1
 801308e:	2203      	movs	r2, #3
 8013090:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8013092:	187b      	adds	r3, r7, r1
 8013094:	2206      	movs	r2, #6
 8013096:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013098:	187b      	adds	r3, r7, r1
 801309a:	4a7a      	ldr	r2, [pc, #488]	@ (8013284 <HAL_UART_MspInit+0x254>)
 801309c:	0019      	movs	r1, r3
 801309e:	0010      	movs	r0, r2
 80130a0:	f001 ff8a 	bl	8014fb8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80130a4:	e0e5      	b.n	8013272 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	4a77      	ldr	r2, [pc, #476]	@ (8013288 <HAL_UART_MspInit+0x258>)
 80130ac:	4293      	cmp	r3, r2
 80130ae:	d133      	bne.n	8013118 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80130b0:	4b73      	ldr	r3, [pc, #460]	@ (8013280 <HAL_UART_MspInit+0x250>)
 80130b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80130b4:	4b72      	ldr	r3, [pc, #456]	@ (8013280 <HAL_UART_MspInit+0x250>)
 80130b6:	2180      	movs	r1, #128	@ 0x80
 80130b8:	01c9      	lsls	r1, r1, #7
 80130ba:	430a      	orrs	r2, r1
 80130bc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80130be:	4b70      	ldr	r3, [pc, #448]	@ (8013280 <HAL_UART_MspInit+0x250>)
 80130c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80130c2:	4b6f      	ldr	r3, [pc, #444]	@ (8013280 <HAL_UART_MspInit+0x250>)
 80130c4:	2101      	movs	r1, #1
 80130c6:	430a      	orrs	r2, r1
 80130c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80130ca:	4b6d      	ldr	r3, [pc, #436]	@ (8013280 <HAL_UART_MspInit+0x250>)
 80130cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130ce:	2201      	movs	r2, #1
 80130d0:	4013      	ands	r3, r2
 80130d2:	617b      	str	r3, [r7, #20]
 80130d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80130d6:	211c      	movs	r1, #28
 80130d8:	187b      	adds	r3, r7, r1
 80130da:	22c0      	movs	r2, #192	@ 0xc0
 80130dc:	00d2      	lsls	r2, r2, #3
 80130de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80130e0:	187b      	adds	r3, r7, r1
 80130e2:	2202      	movs	r2, #2
 80130e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130e6:	187b      	adds	r3, r7, r1
 80130e8:	2200      	movs	r2, #0
 80130ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80130ec:	187b      	adds	r3, r7, r1
 80130ee:	2203      	movs	r2, #3
 80130f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80130f2:	187b      	adds	r3, r7, r1
 80130f4:	2204      	movs	r2, #4
 80130f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80130f8:	187a      	adds	r2, r7, r1
 80130fa:	23a0      	movs	r3, #160	@ 0xa0
 80130fc:	05db      	lsls	r3, r3, #23
 80130fe:	0011      	movs	r1, r2
 8013100:	0018      	movs	r0, r3
 8013102:	f001 ff59 	bl	8014fb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013106:	2200      	movs	r2, #0
 8013108:	2100      	movs	r1, #0
 801310a:	201b      	movs	r0, #27
 801310c:	f001 fb02 	bl	8014714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013110:	201b      	movs	r0, #27
 8013112:	f001 fb14 	bl	801473e <HAL_NVIC_EnableIRQ>
}
 8013116:	e0ac      	b.n	8013272 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	4a5b      	ldr	r2, [pc, #364]	@ (801328c <HAL_UART_MspInit+0x25c>)
 801311e:	4293      	cmp	r3, r2
 8013120:	d000      	beq.n	8013124 <HAL_UART_MspInit+0xf4>
 8013122:	e0a6      	b.n	8013272 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8013124:	4b56      	ldr	r3, [pc, #344]	@ (8013280 <HAL_UART_MspInit+0x250>)
 8013126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013128:	4b55      	ldr	r3, [pc, #340]	@ (8013280 <HAL_UART_MspInit+0x250>)
 801312a:	2180      	movs	r1, #128	@ 0x80
 801312c:	0309      	lsls	r1, r1, #12
 801312e:	430a      	orrs	r2, r1
 8013130:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013132:	4b53      	ldr	r3, [pc, #332]	@ (8013280 <HAL_UART_MspInit+0x250>)
 8013134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013136:	4b52      	ldr	r3, [pc, #328]	@ (8013280 <HAL_UART_MspInit+0x250>)
 8013138:	2101      	movs	r1, #1
 801313a:	430a      	orrs	r2, r1
 801313c:	62da      	str	r2, [r3, #44]	@ 0x2c
 801313e:	4b50      	ldr	r3, [pc, #320]	@ (8013280 <HAL_UART_MspInit+0x250>)
 8013140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013142:	2201      	movs	r2, #1
 8013144:	4013      	ands	r3, r2
 8013146:	613b      	str	r3, [r7, #16]
 8013148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801314a:	4b4d      	ldr	r3, [pc, #308]	@ (8013280 <HAL_UART_MspInit+0x250>)
 801314c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801314e:	4b4c      	ldr	r3, [pc, #304]	@ (8013280 <HAL_UART_MspInit+0x250>)
 8013150:	2104      	movs	r1, #4
 8013152:	430a      	orrs	r2, r1
 8013154:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013156:	4b4a      	ldr	r3, [pc, #296]	@ (8013280 <HAL_UART_MspInit+0x250>)
 8013158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801315a:	2204      	movs	r2, #4
 801315c:	4013      	ands	r3, r2
 801315e:	60fb      	str	r3, [r7, #12]
 8013160:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8013162:	241c      	movs	r4, #28
 8013164:	193b      	adds	r3, r7, r4
 8013166:	2202      	movs	r2, #2
 8013168:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801316a:	193b      	adds	r3, r7, r4
 801316c:	2202      	movs	r2, #2
 801316e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013170:	193b      	adds	r3, r7, r4
 8013172:	2200      	movs	r2, #0
 8013174:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013176:	193b      	adds	r3, r7, r4
 8013178:	2203      	movs	r2, #3
 801317a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 801317c:	193b      	adds	r3, r7, r4
 801317e:	2206      	movs	r2, #6
 8013180:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013182:	193a      	adds	r2, r7, r4
 8013184:	23a0      	movs	r3, #160	@ 0xa0
 8013186:	05db      	lsls	r3, r3, #23
 8013188:	0011      	movs	r1, r2
 801318a:	0018      	movs	r0, r3
 801318c:	f001 ff14 	bl	8014fb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8013190:	0021      	movs	r1, r4
 8013192:	187b      	adds	r3, r7, r1
 8013194:	2280      	movs	r2, #128	@ 0x80
 8013196:	00d2      	lsls	r2, r2, #3
 8013198:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801319a:	187b      	adds	r3, r7, r1
 801319c:	2202      	movs	r2, #2
 801319e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131a0:	187b      	adds	r3, r7, r1
 80131a2:	2200      	movs	r2, #0
 80131a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80131a6:	187b      	adds	r3, r7, r1
 80131a8:	2203      	movs	r2, #3
 80131aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80131ac:	187b      	adds	r3, r7, r1
 80131ae:	2206      	movs	r2, #6
 80131b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80131b2:	187b      	adds	r3, r7, r1
 80131b4:	4a33      	ldr	r2, [pc, #204]	@ (8013284 <HAL_UART_MspInit+0x254>)
 80131b6:	0019      	movs	r1, r3
 80131b8:	0010      	movs	r0, r2
 80131ba:	f001 fefd 	bl	8014fb8 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80131be:	4b34      	ldr	r3, [pc, #208]	@ (8013290 <HAL_UART_MspInit+0x260>)
 80131c0:	4a34      	ldr	r2, [pc, #208]	@ (8013294 <HAL_UART_MspInit+0x264>)
 80131c2:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80131c4:	4b32      	ldr	r3, [pc, #200]	@ (8013290 <HAL_UART_MspInit+0x260>)
 80131c6:	220c      	movs	r2, #12
 80131c8:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80131ca:	4b31      	ldr	r3, [pc, #196]	@ (8013290 <HAL_UART_MspInit+0x260>)
 80131cc:	2200      	movs	r2, #0
 80131ce:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80131d0:	4b2f      	ldr	r3, [pc, #188]	@ (8013290 <HAL_UART_MspInit+0x260>)
 80131d2:	2200      	movs	r2, #0
 80131d4:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80131d6:	4b2e      	ldr	r3, [pc, #184]	@ (8013290 <HAL_UART_MspInit+0x260>)
 80131d8:	2280      	movs	r2, #128	@ 0x80
 80131da:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80131dc:	4b2c      	ldr	r3, [pc, #176]	@ (8013290 <HAL_UART_MspInit+0x260>)
 80131de:	2200      	movs	r2, #0
 80131e0:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80131e2:	4b2b      	ldr	r3, [pc, #172]	@ (8013290 <HAL_UART_MspInit+0x260>)
 80131e4:	2200      	movs	r2, #0
 80131e6:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 80131e8:	4b29      	ldr	r3, [pc, #164]	@ (8013290 <HAL_UART_MspInit+0x260>)
 80131ea:	2220      	movs	r2, #32
 80131ec:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80131ee:	4b28      	ldr	r3, [pc, #160]	@ (8013290 <HAL_UART_MspInit+0x260>)
 80131f0:	2200      	movs	r2, #0
 80131f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80131f4:	4b26      	ldr	r3, [pc, #152]	@ (8013290 <HAL_UART_MspInit+0x260>)
 80131f6:	0018      	movs	r0, r3
 80131f8:	f001 fac2 	bl	8014780 <HAL_DMA_Init>
 80131fc:	1e03      	subs	r3, r0, #0
 80131fe:	d001      	beq.n	8013204 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8013200:	f7f9 fc1c 	bl	800ca3c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	4a22      	ldr	r2, [pc, #136]	@ (8013290 <HAL_UART_MspInit+0x260>)
 8013208:	675a      	str	r2, [r3, #116]	@ 0x74
 801320a:	4b21      	ldr	r3, [pc, #132]	@ (8013290 <HAL_UART_MspInit+0x260>)
 801320c:	687a      	ldr	r2, [r7, #4]
 801320e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8013210:	4b21      	ldr	r3, [pc, #132]	@ (8013298 <HAL_UART_MspInit+0x268>)
 8013212:	4a22      	ldr	r2, [pc, #136]	@ (801329c <HAL_UART_MspInit+0x26c>)
 8013214:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8013216:	4b20      	ldr	r3, [pc, #128]	@ (8013298 <HAL_UART_MspInit+0x268>)
 8013218:	220c      	movs	r2, #12
 801321a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801321c:	4b1e      	ldr	r3, [pc, #120]	@ (8013298 <HAL_UART_MspInit+0x268>)
 801321e:	2210      	movs	r2, #16
 8013220:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013222:	4b1d      	ldr	r3, [pc, #116]	@ (8013298 <HAL_UART_MspInit+0x268>)
 8013224:	2200      	movs	r2, #0
 8013226:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013228:	4b1b      	ldr	r3, [pc, #108]	@ (8013298 <HAL_UART_MspInit+0x268>)
 801322a:	2280      	movs	r2, #128	@ 0x80
 801322c:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801322e:	4b1a      	ldr	r3, [pc, #104]	@ (8013298 <HAL_UART_MspInit+0x268>)
 8013230:	2200      	movs	r2, #0
 8013232:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013234:	4b18      	ldr	r3, [pc, #96]	@ (8013298 <HAL_UART_MspInit+0x268>)
 8013236:	2200      	movs	r2, #0
 8013238:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 801323a:	4b17      	ldr	r3, [pc, #92]	@ (8013298 <HAL_UART_MspInit+0x268>)
 801323c:	2200      	movs	r2, #0
 801323e:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013240:	4b15      	ldr	r3, [pc, #84]	@ (8013298 <HAL_UART_MspInit+0x268>)
 8013242:	2200      	movs	r2, #0
 8013244:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8013246:	4b14      	ldr	r3, [pc, #80]	@ (8013298 <HAL_UART_MspInit+0x268>)
 8013248:	0018      	movs	r0, r3
 801324a:	f001 fa99 	bl	8014780 <HAL_DMA_Init>
 801324e:	1e03      	subs	r3, r0, #0
 8013250:	d001      	beq.n	8013256 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8013252:	f7f9 fbf3 	bl	800ca3c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	4a0f      	ldr	r2, [pc, #60]	@ (8013298 <HAL_UART_MspInit+0x268>)
 801325a:	671a      	str	r2, [r3, #112]	@ 0x70
 801325c:	4b0e      	ldr	r3, [pc, #56]	@ (8013298 <HAL_UART_MspInit+0x268>)
 801325e:	687a      	ldr	r2, [r7, #4]
 8013260:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8013262:	2200      	movs	r2, #0
 8013264:	2100      	movs	r1, #0
 8013266:	200e      	movs	r0, #14
 8013268:	f001 fa54 	bl	8014714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 801326c:	200e      	movs	r0, #14
 801326e:	f001 fa66 	bl	801473e <HAL_NVIC_EnableIRQ>
}
 8013272:	46c0      	nop			@ (mov r8, r8)
 8013274:	46bd      	mov	sp, r7
 8013276:	b00d      	add	sp, #52	@ 0x34
 8013278:	bd90      	pop	{r4, r7, pc}
 801327a:	46c0      	nop			@ (mov r8, r8)
 801327c:	40004800 	.word	0x40004800
 8013280:	40021000 	.word	0x40021000
 8013284:	50000800 	.word	0x50000800
 8013288:	40013800 	.word	0x40013800
 801328c:	40004c00 	.word	0x40004c00
 8013290:	20002168 	.word	0x20002168
 8013294:	4002006c 	.word	0x4002006c
 8013298:	200021b0 	.word	0x200021b0
 801329c:	40020080 	.word	0x40020080

080132a0 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b086      	sub	sp, #24
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 80132a8:	f000 fd90 	bl	8013dcc <HAL_GetTick>
 80132ac:	0003      	movs	r3, r0
 80132ae:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80132b0:	4b1c      	ldr	r3, [pc, #112]	@ (8013324 <TimestampIsReached+0x84>)
 80132b2:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 80132b4:	697a      	ldr	r2, [r7, #20]
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d307      	bcc.n	80132cc <TimestampIsReached+0x2c>
 80132bc:	697a      	ldr	r2, [r7, #20]
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	1ad3      	subs	r3, r2, r3
 80132c2:	693a      	ldr	r2, [r7, #16]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d901      	bls.n	80132cc <TimestampIsReached+0x2c>
 80132c8:	2201      	movs	r2, #1
 80132ca:	e000      	b.n	80132ce <TimestampIsReached+0x2e>
 80132cc:	2200      	movs	r2, #0
 80132ce:	230f      	movs	r3, #15
 80132d0:	18fb      	adds	r3, r7, r3
 80132d2:	701a      	strb	r2, [r3, #0]
 80132d4:	781a      	ldrb	r2, [r3, #0]
 80132d6:	2101      	movs	r1, #1
 80132d8:	400a      	ands	r2, r1
 80132da:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 80132dc:	697a      	ldr	r2, [r7, #20]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d207      	bcs.n	80132f4 <TimestampIsReached+0x54>
 80132e4:	687a      	ldr	r2, [r7, #4]
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	1ad3      	subs	r3, r2, r3
 80132ea:	693a      	ldr	r2, [r7, #16]
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d201      	bcs.n	80132f4 <TimestampIsReached+0x54>
 80132f0:	2201      	movs	r2, #1
 80132f2:	e000      	b.n	80132f6 <TimestampIsReached+0x56>
 80132f4:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 80132f6:	200e      	movs	r0, #14
 80132f8:	183b      	adds	r3, r7, r0
 80132fa:	701a      	strb	r2, [r3, #0]
 80132fc:	781a      	ldrb	r2, [r3, #0]
 80132fe:	2101      	movs	r1, #1
 8013300:	400a      	ands	r2, r1
 8013302:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8013304:	230f      	movs	r3, #15
 8013306:	18fb      	adds	r3, r7, r3
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d103      	bne.n	8013316 <TimestampIsReached+0x76>
 801330e:	183b      	adds	r3, r7, r0
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d001      	beq.n	801331a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8013316:	2301      	movs	r3, #1
 8013318:	e000      	b.n	801331c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 801331a:	2300      	movs	r3, #0
}
 801331c:	0018      	movs	r0, r3
 801331e:	46bd      	mov	sp, r7
 8013320:	b006      	add	sp, #24
 8013322:	bd80      	pop	{r7, pc}
 8013324:	7fffffff 	.word	0x7fffffff

08013328 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8013330:	f000 fd4c 	bl	8013dcc <HAL_GetTick>
 8013334:	0002      	movs	r2, r0
 8013336:	4904      	ldr	r1, [pc, #16]	@ (8013348 <AddTimestamp+0x20>)
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	0018      	movs	r0, r3
 801333c:	f012 f990 	bl	8025660 <siprintf>
}
 8013340:	46c0      	nop			@ (mov r8, r8)
 8013342:	46bd      	mov	sp, r7
 8013344:	b002      	add	sp, #8
 8013346:	bd80      	pop	{r7, pc}
 8013348:	0802d694 	.word	0x0802d694

0801334c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 801334c:	b40c      	push	{r2, r3}
 801334e:	b5b0      	push	{r4, r5, r7, lr}
 8013350:	b0a4      	sub	sp, #144	@ 0x90
 8013352:	af00      	add	r7, sp, #0
 8013354:	0002      	movs	r2, r0
 8013356:	6039      	str	r1, [r7, #0]
 8013358:	1dfb      	adds	r3, r7, #7
 801335a:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 801335c:	4b23      	ldr	r3, [pc, #140]	@ (80133ec <CreateLine+0xa0>)
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	1dfa      	adds	r2, r7, #7
 8013362:	7812      	ldrb	r2, [r2, #0]
 8013364:	429a      	cmp	r2, r3
 8013366:	d839      	bhi.n	80133dc <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8013368:	683a      	ldr	r2, [r7, #0]
 801336a:	4921      	ldr	r1, [pc, #132]	@ (80133f0 <CreateLine+0xa4>)
 801336c:	240c      	movs	r4, #12
 801336e:	193b      	adds	r3, r7, r4
 8013370:	0018      	movs	r0, r3
 8013372:	f012 f975 	bl	8025660 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8013376:	4b1d      	ldr	r3, [pc, #116]	@ (80133ec <CreateLine+0xa0>)
 8013378:	781b      	ldrb	r3, [r3, #0]
 801337a:	2b01      	cmp	r3, #1
 801337c:	d909      	bls.n	8013392 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 801337e:	193b      	adds	r3, r7, r4
 8013380:	0018      	movs	r0, r3
 8013382:	f7ec fef3 	bl	800016c <strlen>
 8013386:	0002      	movs	r2, r0
 8013388:	193b      	adds	r3, r7, r4
 801338a:	189b      	adds	r3, r3, r2
 801338c:	0018      	movs	r0, r3
 801338e:	f7ff ffcb 	bl	8013328 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8013392:	240c      	movs	r4, #12
 8013394:	193b      	adds	r3, r7, r4
 8013396:	0018      	movs	r0, r3
 8013398:	f7ec fee8 	bl	800016c <strlen>
 801339c:	0003      	movs	r3, r0
 801339e:	218c      	movs	r1, #140	@ 0x8c
 80133a0:	187a      	adds	r2, r7, r1
 80133a2:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 80133a4:	239c      	movs	r3, #156	@ 0x9c
 80133a6:	2508      	movs	r5, #8
 80133a8:	195b      	adds	r3, r3, r5
 80133aa:	19db      	adds	r3, r3, r7
 80133ac:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 80133ae:	193a      	adds	r2, r7, r4
 80133b0:	187b      	adds	r3, r7, r1
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	18d0      	adds	r0, r2, r3
 80133b6:	187b      	adds	r3, r7, r1
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	2280      	movs	r2, #128	@ 0x80
 80133bc:	1ad3      	subs	r3, r2, r3
 80133be:	0019      	movs	r1, r3
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	2298      	movs	r2, #152	@ 0x98
 80133c4:	1952      	adds	r2, r2, r5
 80133c6:	19d2      	adds	r2, r2, r7
 80133c8:	6812      	ldr	r2, [r2, #0]
 80133ca:	f012 f9e5 	bl	8025798 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 80133ce:	193a      	adds	r2, r7, r4
 80133d0:	4b08      	ldr	r3, [pc, #32]	@ (80133f4 <CreateLine+0xa8>)
 80133d2:	0011      	movs	r1, r2
 80133d4:	0018      	movs	r0, r3
 80133d6:	f012 f8d3 	bl	8025580 <iprintf>
 80133da:	e000      	b.n	80133de <CreateLine+0x92>
    return;
 80133dc:	46c0      	nop			@ (mov r8, r8)
}
 80133de:	46bd      	mov	sp, r7
 80133e0:	b024      	add	sp, #144	@ 0x90
 80133e2:	bcb0      	pop	{r4, r5, r7}
 80133e4:	bc08      	pop	{r3}
 80133e6:	b002      	add	sp, #8
 80133e8:	4718      	bx	r3
 80133ea:	46c0      	nop			@ (mov r8, r8)
 80133ec:	200000e4 	.word	0x200000e4
 80133f0:	0802d6a0 	.word	0x0802d6a0
 80133f4:	0802d6a4 	.word	0x0802d6a4

080133f8 <_write>:

int _write(int fd, void *buf, size_t count) {
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b084      	sub	sp, #16
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	60f8      	str	r0, [r7, #12]
 8013400:	60b9      	str	r1, [r7, #8]
 8013402:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	b29a      	uxth	r2, r3
 8013408:	68b9      	ldr	r1, [r7, #8]
 801340a:	4804      	ldr	r0, [pc, #16]	@ (801341c <_write+0x24>)
 801340c:	2364      	movs	r3, #100	@ 0x64
 801340e:	f009 fa33 	bl	801c878 <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 8013412:	687b      	ldr	r3, [r7, #4]
}
 8013414:	0018      	movs	r0, r3
 8013416:	46bd      	mov	sp, r7
 8013418:	b004      	add	sp, #16
 801341a:	bd80      	pop	{r7, pc}
 801341c:	20001ff8 	.word	0x20001ff8

08013420 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8013420:	b580      	push	{r7, lr}
 8013422:	b082      	sub	sp, #8
 8013424:	af00      	add	r7, sp, #0
 8013426:	0002      	movs	r2, r0
 8013428:	1dfb      	adds	r3, r7, #7
 801342a:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 801342c:	4b03      	ldr	r3, [pc, #12]	@ (801343c <SetVerboseLevel+0x1c>)
 801342e:	1dfa      	adds	r2, r7, #7
 8013430:	7812      	ldrb	r2, [r2, #0]
 8013432:	701a      	strb	r2, [r3, #0]
}
 8013434:	46c0      	nop			@ (mov r8, r8)
 8013436:	46bd      	mov	sp, r7
 8013438:	b002      	add	sp, #8
 801343a:	bd80      	pop	{r7, pc}
 801343c:	200000e4 	.word	0x200000e4

08013440 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8013440:	b580      	push	{r7, lr}
 8013442:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8013444:	4b02      	ldr	r3, [pc, #8]	@ (8013450 <GetVerboseLevel+0x10>)
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	0018      	movs	r0, r3
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	46c0      	nop			@ (mov r8, r8)
 8013450:	200000e4 	.word	0x200000e4

08013454 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8013454:	b580      	push	{r7, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 801345a:	4a0f      	ldr	r2, [pc, #60]	@ (8013498 <BinaryReleaseInfo+0x44>)
 801345c:	4b0f      	ldr	r3, [pc, #60]	@ (801349c <BinaryReleaseInfo+0x48>)
 801345e:	0019      	movs	r1, r3
 8013460:	2002      	movs	r0, #2
 8013462:	f7ff ff73 	bl	801334c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8013466:	480e      	ldr	r0, [pc, #56]	@ (80134a0 <BinaryReleaseInfo+0x4c>)
 8013468:	4a0e      	ldr	r2, [pc, #56]	@ (80134a4 <BinaryReleaseInfo+0x50>)
 801346a:	490c      	ldr	r1, [pc, #48]	@ (801349c <BinaryReleaseInfo+0x48>)
 801346c:	4b0e      	ldr	r3, [pc, #56]	@ (80134a8 <BinaryReleaseInfo+0x54>)
 801346e:	9300      	str	r3, [sp, #0]
 8013470:	0003      	movs	r3, r0
 8013472:	2002      	movs	r0, #2
 8013474:	f7ff ff6a 	bl	801334c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8013478:	4b0c      	ldr	r3, [pc, #48]	@ (80134ac <BinaryReleaseInfo+0x58>)
 801347a:	4a0d      	ldr	r2, [pc, #52]	@ (80134b0 <BinaryReleaseInfo+0x5c>)
 801347c:	4907      	ldr	r1, [pc, #28]	@ (801349c <BinaryReleaseInfo+0x48>)
 801347e:	2002      	movs	r0, #2
 8013480:	f7ff ff64 	bl	801334c <CreateLine>
#ifdef DEBUG
  Info("Software version: %s, Debug build", SRC_VERSION);
 8013484:	4b0b      	ldr	r3, [pc, #44]	@ (80134b4 <BinaryReleaseInfo+0x60>)
 8013486:	4a0c      	ldr	r2, [pc, #48]	@ (80134b8 <BinaryReleaseInfo+0x64>)
 8013488:	4904      	ldr	r1, [pc, #16]	@ (801349c <BinaryReleaseInfo+0x48>)
 801348a:	2002      	movs	r0, #2
 801348c:	f7ff ff5e 	bl	801334c <CreateLine>
#else
  Info("Software version: %s, Release build", SRC_VERSION);
#endif
}
 8013490:	46c0      	nop			@ (mov r8, r8)
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	46c0      	nop			@ (mov r8, r8)
 8013498:	0802d6ac 	.word	0x0802d6ac
 801349c:	0802d6d8 	.word	0x0802d6d8
 80134a0:	0802d6dc 	.word	0x0802d6dc
 80134a4:	0802d6e8 	.word	0x0802d6e8
 80134a8:	0802d6fc 	.word	0x0802d6fc
 80134ac:	0802d708 	.word	0x0802d708
 80134b0:	0802d714 	.word	0x0802d714
 80134b4:	0802d71c 	.word	0x0802d71c
 80134b8:	0802d724 	.word	0x0802d724

080134bc <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b084      	sub	sp, #16
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	60f8      	str	r0, [r7, #12]
 80134c4:	60b9      	str	r1, [r7, #8]
 80134c6:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	68ba      	ldr	r2, [r7, #8]
 80134cc:	68f9      	ldr	r1, [r7, #12]
 80134ce:	4803      	ldr	r0, [pc, #12]	@ (80134dc <errorHandler+0x20>)
 80134d0:	f012 f856 	bl	8025580 <iprintf>
//    while (true)
//    {
//    }
}
 80134d4:	46c0      	nop			@ (mov r8, r8)
 80134d6:	46bd      	mov	sp, r7
 80134d8:	b004      	add	sp, #16
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	0802d748 	.word	0x0802d748

080134e0 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80134e0:	b590      	push	{r4, r7, lr}
 80134e2:	b083      	sub	sp, #12
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6039      	str	r1, [r7, #0]
 80134e8:	0011      	movs	r1, r2
 80134ea:	1dfb      	adds	r3, r7, #7
 80134ec:	1c02      	adds	r2, r0, #0
 80134ee:	701a      	strb	r2, [r3, #0]
 80134f0:	1dbb      	adds	r3, r7, #6
 80134f2:	1c0a      	adds	r2, r1, #0
 80134f4:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 80134f6:	4b0a      	ldr	r3, [pc, #40]	@ (8013520 <ReadRegister+0x40>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d00a      	beq.n	8013514 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 80134fe:	4b08      	ldr	r3, [pc, #32]	@ (8013520 <ReadRegister+0x40>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	1dba      	adds	r2, r7, #6
 8013504:	7814      	ldrb	r4, [r2, #0]
 8013506:	6839      	ldr	r1, [r7, #0]
 8013508:	1dfa      	adds	r2, r7, #7
 801350a:	7810      	ldrb	r0, [r2, #0]
 801350c:	0022      	movs	r2, r4
 801350e:	4798      	blx	r3
 8013510:	0003      	movs	r3, r0
 8013512:	e000      	b.n	8013516 <ReadRegister+0x36>
	}
	return false;
 8013514:	2300      	movs	r3, #0
}
 8013516:	0018      	movs	r0, r3
 8013518:	46bd      	mov	sp, r7
 801351a:	b003      	add	sp, #12
 801351c:	bd90      	pop	{r4, r7, pc}
 801351e:	46c0      	nop			@ (mov r8, r8)
 8013520:	20002200 	.word	0x20002200

08013524 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8013524:	b590      	push	{r4, r7, lr}
 8013526:	b083      	sub	sp, #12
 8013528:	af00      	add	r7, sp, #0
 801352a:	6039      	str	r1, [r7, #0]
 801352c:	0011      	movs	r1, r2
 801352e:	1dfb      	adds	r3, r7, #7
 8013530:	1c02      	adds	r2, r0, #0
 8013532:	701a      	strb	r2, [r3, #0]
 8013534:	1dbb      	adds	r3, r7, #6
 8013536:	1c0a      	adds	r2, r1, #0
 8013538:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 801353a:	4b0a      	ldr	r3, [pc, #40]	@ (8013564 <WriteRegister+0x40>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d00a      	beq.n	8013558 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8013542:	4b08      	ldr	r3, [pc, #32]	@ (8013564 <WriteRegister+0x40>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	1dba      	adds	r2, r7, #6
 8013548:	7814      	ldrb	r4, [r2, #0]
 801354a:	6839      	ldr	r1, [r7, #0]
 801354c:	1dfa      	adds	r2, r7, #7
 801354e:	7810      	ldrb	r0, [r2, #0]
 8013550:	0022      	movs	r2, r4
 8013552:	4798      	blx	r3
 8013554:	0003      	movs	r3, r0
 8013556:	e000      	b.n	801355a <WriteRegister+0x36>
  }
  return false;
 8013558:	2300      	movs	r3, #0
}
 801355a:	0018      	movs	r0, r3
 801355c:	46bd      	mov	sp, r7
 801355e:	b003      	add	sp, #12
 8013560:	bd90      	pop	{r4, r7, pc}
 8013562:	46c0      	nop			@ (mov r8, r8)
 8013564:	20002204 	.word	0x20002204

08013568 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8013568:	b580      	push	{r7, lr}
 801356a:	b084      	sub	sp, #16
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	000a      	movs	r2, r1
 8013572:	1cfb      	adds	r3, r7, #3
 8013574:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8013576:	230f      	movs	r3, #15
 8013578:	18fb      	adds	r3, r7, r3
 801357a:	22ff      	movs	r2, #255	@ 0xff
 801357c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 801357e:	230e      	movs	r3, #14
 8013580:	18fb      	adds	r3, r7, r3
 8013582:	2200      	movs	r2, #0
 8013584:	701a      	strb	r2, [r3, #0]
 8013586:	e038      	b.n	80135fa <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8013588:	230e      	movs	r3, #14
 801358a:	18fb      	adds	r3, r7, r3
 801358c:	781b      	ldrb	r3, [r3, #0]
 801358e:	687a      	ldr	r2, [r7, #4]
 8013590:	18d3      	adds	r3, r2, r3
 8013592:	7819      	ldrb	r1, [r3, #0]
 8013594:	220f      	movs	r2, #15
 8013596:	18bb      	adds	r3, r7, r2
 8013598:	18ba      	adds	r2, r7, r2
 801359a:	7812      	ldrb	r2, [r2, #0]
 801359c:	404a      	eors	r2, r1
 801359e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80135a0:	230d      	movs	r3, #13
 80135a2:	18fb      	adds	r3, r7, r3
 80135a4:	2200      	movs	r2, #0
 80135a6:	701a      	strb	r2, [r3, #0]
 80135a8:	e01c      	b.n	80135e4 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 80135aa:	210f      	movs	r1, #15
 80135ac:	187b      	adds	r3, r7, r1
 80135ae:	781b      	ldrb	r3, [r3, #0]
 80135b0:	b25b      	sxtb	r3, r3
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	da0a      	bge.n	80135cc <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80135b6:	187b      	adds	r3, r7, r1
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	b25b      	sxtb	r3, r3
 80135bc:	18db      	adds	r3, r3, r3
 80135be:	b25b      	sxtb	r3, r3
 80135c0:	2231      	movs	r2, #49	@ 0x31
 80135c2:	4053      	eors	r3, r2
 80135c4:	b25a      	sxtb	r2, r3
 80135c6:	187b      	adds	r3, r7, r1
 80135c8:	701a      	strb	r2, [r3, #0]
 80135ca:	e005      	b.n	80135d8 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 80135cc:	230f      	movs	r3, #15
 80135ce:	18fa      	adds	r2, r7, r3
 80135d0:	18fb      	adds	r3, r7, r3
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	18db      	adds	r3, r3, r3
 80135d6:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80135d8:	210d      	movs	r1, #13
 80135da:	187b      	adds	r3, r7, r1
 80135dc:	781a      	ldrb	r2, [r3, #0]
 80135de:	187b      	adds	r3, r7, r1
 80135e0:	3201      	adds	r2, #1
 80135e2:	701a      	strb	r2, [r3, #0]
 80135e4:	230d      	movs	r3, #13
 80135e6:	18fb      	adds	r3, r7, r3
 80135e8:	781b      	ldrb	r3, [r3, #0]
 80135ea:	2b07      	cmp	r3, #7
 80135ec:	d9dd      	bls.n	80135aa <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80135ee:	210e      	movs	r1, #14
 80135f0:	187b      	adds	r3, r7, r1
 80135f2:	781a      	ldrb	r2, [r3, #0]
 80135f4:	187b      	adds	r3, r7, r1
 80135f6:	3201      	adds	r2, #1
 80135f8:	701a      	strb	r2, [r3, #0]
 80135fa:	230e      	movs	r3, #14
 80135fc:	18fa      	adds	r2, r7, r3
 80135fe:	1cfb      	adds	r3, r7, #3
 8013600:	7812      	ldrb	r2, [r2, #0]
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	429a      	cmp	r2, r3
 8013606:	d3bf      	bcc.n	8013588 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8013608:	230f      	movs	r3, #15
 801360a:	18fb      	adds	r3, r7, r3
 801360c:	781b      	ldrb	r3, [r3, #0]
}
 801360e:	0018      	movs	r0, r3
 8013610:	46bd      	mov	sp, r7
 8013612:	b004      	add	sp, #16
 8013614:	bd80      	pop	{r7, pc}
	...

08013618 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 8013618:	b5b0      	push	{r4, r5, r7, lr}
 801361a:	b084      	sub	sp, #16
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	1c18      	adds	r0, r3, #0
 8013628:	f7f0 f934 	bl	8003894 <__aeabi_f2d>
 801362c:	4a2e      	ldr	r2, [pc, #184]	@ (80136e8 <HIDS_DewPointCalculation+0xd0>)
 801362e:	4b2f      	ldr	r3, [pc, #188]	@ (80136ec <HIDS_DewPointCalculation+0xd4>)
 8013630:	f7ef f990 	bl	8002954 <__aeabi_dmul>
 8013634:	0002      	movs	r2, r0
 8013636:	000b      	movs	r3, r1
 8013638:	0014      	movs	r4, r2
 801363a:	001d      	movs	r5, r3
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	1c18      	adds	r0, r3, #0
 8013642:	f7f0 f927 	bl	8003894 <__aeabi_f2d>
 8013646:	4a2a      	ldr	r2, [pc, #168]	@ (80136f0 <HIDS_DewPointCalculation+0xd8>)
 8013648:	4b2a      	ldr	r3, [pc, #168]	@ (80136f4 <HIDS_DewPointCalculation+0xdc>)
 801364a:	f7ee f983 	bl	8001954 <__aeabi_dadd>
 801364e:	0002      	movs	r2, r0
 8013650:	000b      	movs	r3, r1
 8013652:	0020      	movs	r0, r4
 8013654:	0029      	movs	r1, r5
 8013656:	f7ee fd43 	bl	80020e0 <__aeabi_ddiv>
 801365a:	0002      	movs	r2, r0
 801365c:	000b      	movs	r3, r1
 801365e:	0014      	movs	r4, r2
 8013660:	001d      	movs	r5, r3
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	1c18      	adds	r0, r3, #0
 8013668:	f7f0 f914 	bl	8003894 <__aeabi_f2d>
 801366c:	2200      	movs	r2, #0
 801366e:	4b22      	ldr	r3, [pc, #136]	@ (80136f8 <HIDS_DewPointCalculation+0xe0>)
 8013670:	f7ee fd36 	bl	80020e0 <__aeabi_ddiv>
 8013674:	0002      	movs	r2, r0
 8013676:	000b      	movs	r3, r1
 8013678:	0010      	movs	r0, r2
 801367a:	0019      	movs	r1, r3
 801367c:	f014 feea 	bl	8028454 <log>
 8013680:	0002      	movs	r2, r0
 8013682:	000b      	movs	r3, r1
 8013684:	0020      	movs	r0, r4
 8013686:	0029      	movs	r1, r5
 8013688:	f7ee f964 	bl	8001954 <__aeabi_dadd>
 801368c:	0002      	movs	r2, r0
 801368e:	000b      	movs	r3, r1
 8013690:	0010      	movs	r0, r2
 8013692:	0019      	movs	r1, r3
 8013694:	f7f0 f946 	bl	8003924 <__aeabi_d2f>
 8013698:	1c03      	adds	r3, r0, #0
 801369a:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 801369c:	68f8      	ldr	r0, [r7, #12]
 801369e:	f7f0 f8f9 	bl	8003894 <__aeabi_f2d>
 80136a2:	4a13      	ldr	r2, [pc, #76]	@ (80136f0 <HIDS_DewPointCalculation+0xd8>)
 80136a4:	4b13      	ldr	r3, [pc, #76]	@ (80136f4 <HIDS_DewPointCalculation+0xdc>)
 80136a6:	f7ef f955 	bl	8002954 <__aeabi_dmul>
 80136aa:	0002      	movs	r2, r0
 80136ac:	000b      	movs	r3, r1
 80136ae:	0014      	movs	r4, r2
 80136b0:	001d      	movs	r5, r3
 80136b2:	68f8      	ldr	r0, [r7, #12]
 80136b4:	f7f0 f8ee 	bl	8003894 <__aeabi_f2d>
 80136b8:	0002      	movs	r2, r0
 80136ba:	000b      	movs	r3, r1
 80136bc:	480a      	ldr	r0, [pc, #40]	@ (80136e8 <HIDS_DewPointCalculation+0xd0>)
 80136be:	490b      	ldr	r1, [pc, #44]	@ (80136ec <HIDS_DewPointCalculation+0xd4>)
 80136c0:	f7ef fc2e 	bl	8002f20 <__aeabi_dsub>
 80136c4:	0002      	movs	r2, r0
 80136c6:	000b      	movs	r3, r1
 80136c8:	0020      	movs	r0, r4
 80136ca:	0029      	movs	r1, r5
 80136cc:	f7ee fd08 	bl	80020e0 <__aeabi_ddiv>
 80136d0:	0002      	movs	r2, r0
 80136d2:	000b      	movs	r3, r1
 80136d4:	0010      	movs	r0, r2
 80136d6:	0019      	movs	r1, r3
 80136d8:	f7f0 f924 	bl	8003924 <__aeabi_d2f>
 80136dc:	1c03      	adds	r3, r0, #0
}
 80136de:	1c18      	adds	r0, r3, #0
 80136e0:	46bd      	mov	sp, r7
 80136e2:	b004      	add	sp, #16
 80136e4:	bdb0      	pop	{r4, r5, r7, pc}
 80136e6:	46c0      	nop			@ (mov r8, r8)
 80136e8:	b851eb85 	.word	0xb851eb85
 80136ec:	4031451e 	.word	0x4031451e
 80136f0:	66666666 	.word	0x66666666
 80136f4:	406db666 	.word	0x406db666
 80136f8:	40590000 	.word	0x40590000

080136fc <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b082      	sub	sp, #8
 8013700:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 8013702:	4b0d      	ldr	r3, [pc, #52]	@ (8013738 <HIDS_EnableHeater+0x3c>)
 8013704:	781a      	ldrb	r2, [r3, #0]
 8013706:	1dfb      	adds	r3, r7, #7
 8013708:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 801370a:	1dfb      	adds	r3, r7, #7
 801370c:	2201      	movs	r2, #1
 801370e:	0019      	movs	r1, r3
 8013710:	2044      	movs	r0, #68	@ 0x44
 8013712:	f7ff ff07 	bl	8013524 <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 8013716:	1dfb      	adds	r3, r7, #7
 8013718:	781b      	ldrb	r3, [r3, #0]
 801371a:	4a08      	ldr	r2, [pc, #32]	@ (801373c <HIDS_EnableHeater+0x40>)
 801371c:	4908      	ldr	r1, [pc, #32]	@ (8013740 <HIDS_EnableHeater+0x44>)
 801371e:	2002      	movs	r0, #2
 8013720:	f7ff fe14 	bl	801334c <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 8013724:	f7f6 f990 	bl	8009a48 <getPosixTime>
 8013728:	0002      	movs	r2, r0
 801372a:	4b06      	ldr	r3, [pc, #24]	@ (8013744 <HIDS_EnableHeater+0x48>)
 801372c:	601a      	str	r2, [r3, #0]
}
 801372e:	46c0      	nop			@ (mov r8, r8)
 8013730:	46bd      	mov	sp, r7
 8013732:	b002      	add	sp, #8
 8013734:	bd80      	pop	{r7, pc}
 8013736:	46c0      	nop			@ (mov r8, r8)
 8013738:	200000e5 	.word	0x200000e5
 801373c:	0802d770 	.word	0x0802d770
 8013740:	0802d790 	.word	0x0802d790
 8013744:	20002218 	.word	0x20002218

08013748 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8013748:	b580      	push	{r7, lr}
 801374a:	b082      	sub	sp, #8
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8013752:	4b0a      	ldr	r3, [pc, #40]	@ (801377c <HIDS_Init+0x34>)
 8013754:	687a      	ldr	r2, [r7, #4]
 8013756:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8013758:	4b09      	ldr	r3, [pc, #36]	@ (8013780 <HIDS_Init+0x38>)
 801375a:	683a      	ldr	r2, [r7, #0]
 801375c:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 801375e:	4b09      	ldr	r3, [pc, #36]	@ (8013784 <HIDS_Init+0x3c>)
 8013760:	781b      	ldrb	r3, [r3, #0]
 8013762:	0018      	movs	r0, r3
 8013764:	f000 f840 	bl	80137e8 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8013768:	4b07      	ldr	r3, [pc, #28]	@ (8013788 <HIDS_Init+0x40>)
 801376a:	781b      	ldrb	r3, [r3, #0]
 801376c:	0018      	movs	r0, r3
 801376e:	f000 f82b 	bl	80137c8 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8013772:	46c0      	nop			@ (mov r8, r8)
 8013774:	46bd      	mov	sp, r7
 8013776:	b002      	add	sp, #8
 8013778:	bd80      	pop	{r7, pc}
 801377a:	46c0      	nop			@ (mov r8, r8)
 801377c:	20002200 	.word	0x20002200
 8013780:	20002204 	.word	0x20002204
 8013784:	200000e6 	.word	0x200000e6
 8013788:	200000e5 	.word	0x200000e5

0801378c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 801378c:	b580      	push	{r7, lr}
 801378e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8013790:	f000 fb1c 	bl	8013dcc <HAL_GetTick>
 8013794:	0002      	movs	r2, r0
 8013796:	4b08      	ldr	r3, [pc, #32]	@ (80137b8 <HIDS_StartMeasurement+0x2c>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	18d2      	adds	r2, r2, r3
 801379c:	4b07      	ldr	r3, [pc, #28]	@ (80137bc <HIDS_StartMeasurement+0x30>)
 801379e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 80137a0:	4b07      	ldr	r3, [pc, #28]	@ (80137c0 <HIDS_StartMeasurement+0x34>)
 80137a2:	2201      	movs	r2, #1
 80137a4:	0019      	movs	r1, r3
 80137a6:	2044      	movs	r0, #68	@ 0x44
 80137a8:	f7ff febc 	bl	8013524 <WriteRegister>
  MeasurementDone = false;
 80137ac:	4b05      	ldr	r3, [pc, #20]	@ (80137c4 <HIDS_StartMeasurement+0x38>)
 80137ae:	2200      	movs	r2, #0
 80137b0:	701a      	strb	r2, [r3, #0]
}
 80137b2:	46c0      	nop			@ (mov r8, r8)
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}
 80137b8:	200000ec 	.word	0x200000ec
 80137bc:	200000e8 	.word	0x200000e8
 80137c0:	200000e6 	.word	0x200000e6
 80137c4:	2000221c 	.word	0x2000221c

080137c8 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b082      	sub	sp, #8
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	0002      	movs	r2, r0
 80137d0:	1dfb      	adds	r3, r7, #7
 80137d2:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 80137d4:	4b03      	ldr	r3, [pc, #12]	@ (80137e4 <HIDS_SetHeaterMode+0x1c>)
 80137d6:	1dfa      	adds	r2, r7, #7
 80137d8:	7812      	ldrb	r2, [r2, #0]
 80137da:	701a      	strb	r2, [r3, #0]
}
 80137dc:	46c0      	nop			@ (mov r8, r8)
 80137de:	46bd      	mov	sp, r7
 80137e0:	b002      	add	sp, #8
 80137e2:	bd80      	pop	{r7, pc}
 80137e4:	200000e5 	.word	0x200000e5

080137e8 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b082      	sub	sp, #8
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	0002      	movs	r2, r0
 80137f0:	1dfb      	adds	r3, r7, #7
 80137f2:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 80137f4:	4b03      	ldr	r3, [pc, #12]	@ (8013804 <HIDS_SetMeasurementMode+0x1c>)
 80137f6:	1dfa      	adds	r2, r7, #7
 80137f8:	7812      	ldrb	r2, [r2, #0]
 80137fa:	701a      	strb	r2, [r3, #0]
}
 80137fc:	46c0      	nop			@ (mov r8, r8)
 80137fe:	46bd      	mov	sp, r7
 8013800:	b002      	add	sp, #8
 8013802:	bd80      	pop	{r7, pc}
 8013804:	200000e6 	.word	0x200000e6

08013808 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8013810:	f000 fadc 	bl	8013dcc <HAL_GetTick>
 8013814:	0002      	movs	r2, r0
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	18d2      	adds	r2, r2, r3
 801381a:	4b03      	ldr	r3, [pc, #12]	@ (8013828 <setHIDSTimeStamp+0x20>)
 801381c:	601a      	str	r2, [r3, #0]
}
 801381e:	46c0      	nop			@ (mov r8, r8)
 8013820:	46bd      	mov	sp, r7
 8013822:	b002      	add	sp, #8
 8013824:	bd80      	pop	{r7, pc}
 8013826:	46c0      	nop			@ (mov r8, r8)
 8013828:	20002220 	.word	0x20002220

0801382c <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 801382c:	b590      	push	{r4, r7, lr}
 801382e:	b085      	sub	sp, #20
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	781a      	ldrb	r2, [r3, #0]
 8013838:	210c      	movs	r1, #12
 801383a:	187b      	adds	r3, r7, r1
 801383c:	701a      	strb	r2, [r3, #0]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	785a      	ldrb	r2, [r3, #1]
 8013842:	187b      	adds	r3, r7, r1
 8013844:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8013846:	240f      	movs	r4, #15
 8013848:	193b      	adds	r3, r7, r4
 801384a:	687a      	ldr	r2, [r7, #4]
 801384c:	7892      	ldrb	r2, [r2, #2]
 801384e:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8013850:	187b      	adds	r3, r7, r1
 8013852:	2102      	movs	r1, #2
 8013854:	0018      	movs	r0, r3
 8013856:	f7ff fe87 	bl	8013568 <CalculateCRC>
 801385a:	0003      	movs	r3, r0
 801385c:	001a      	movs	r2, r3
 801385e:	193b      	adds	r3, r7, r4
 8013860:	781b      	ldrb	r3, [r3, #0]
 8013862:	4293      	cmp	r3, r2
 8013864:	d007      	beq.n	8013876 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8013866:	4a1a      	ldr	r2, [pc, #104]	@ (80138d0 <CheckCRC+0xa4>)
 8013868:	4b1a      	ldr	r3, [pc, #104]	@ (80138d4 <CheckCRC+0xa8>)
 801386a:	0019      	movs	r1, r3
 801386c:	2001      	movs	r0, #1
 801386e:	f7ff fd6d 	bl	801334c <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 8013872:	2300      	movs	r3, #0
 8013874:	e027      	b.n	80138c6 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	78da      	ldrb	r2, [r3, #3]
 801387a:	2108      	movs	r1, #8
 801387c:	187b      	adds	r3, r7, r1
 801387e:	701a      	strb	r2, [r3, #0]
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	791a      	ldrb	r2, [r3, #4]
 8013884:	187b      	adds	r3, r7, r1
 8013886:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8013888:	240e      	movs	r4, #14
 801388a:	193b      	adds	r3, r7, r4
 801388c:	687a      	ldr	r2, [r7, #4]
 801388e:	7952      	ldrb	r2, [r2, #5]
 8013890:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8013892:	187b      	adds	r3, r7, r1
 8013894:	2102      	movs	r1, #2
 8013896:	0018      	movs	r0, r3
 8013898:	f7ff fe66 	bl	8013568 <CalculateCRC>
 801389c:	0003      	movs	r3, r0
 801389e:	001a      	movs	r2, r3
 80138a0:	193b      	adds	r3, r7, r4
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	4293      	cmp	r3, r2
 80138a6:	d00d      	beq.n	80138c4 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 80138a8:	4a0b      	ldr	r2, [pc, #44]	@ (80138d8 <CheckCRC+0xac>)
 80138aa:	4b0a      	ldr	r3, [pc, #40]	@ (80138d4 <CheckCRC+0xa8>)
 80138ac:	0019      	movs	r1, r3
 80138ae:	2001      	movs	r0, #1
 80138b0:	f7ff fd4c 	bl	801334c <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 80138b4:	4a09      	ldr	r2, [pc, #36]	@ (80138dc <CheckCRC+0xb0>)
 80138b6:	4b0a      	ldr	r3, [pc, #40]	@ (80138e0 <CheckCRC+0xb4>)
 80138b8:	2185      	movs	r1, #133	@ 0x85
 80138ba:	0018      	movs	r0, r3
 80138bc:	f7ff fdfe 	bl	80134bc <errorHandler>
		return false;
 80138c0:	2300      	movs	r3, #0
 80138c2:	e000      	b.n	80138c6 <CheckCRC+0x9a>
	}
	return true;
 80138c4:	2301      	movs	r3, #1
}
 80138c6:	0018      	movs	r0, r3
 80138c8:	46bd      	mov	sp, r7
 80138ca:	b005      	add	sp, #20
 80138cc:	bd90      	pop	{r4, r7, pc}
 80138ce:	46c0      	nop			@ (mov r8, r8)
 80138d0:	0802d794 	.word	0x0802d794
 80138d4:	0802d7bc 	.word	0x0802d7bc
 80138d8:	0802d7c0 	.word	0x0802d7c0
 80138dc:	0802d7ec 	.word	0x0802d7ec
 80138e0:	0802de90 	.word	0x0802de90

080138e4 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b084      	sub	sp, #16
 80138e8:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80138ea:	1dbb      	adds	r3, r7, #6
 80138ec:	2289      	movs	r2, #137	@ 0x89
 80138ee:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80138f0:	1dbb      	adds	r3, r7, #6
 80138f2:	2201      	movs	r2, #1
 80138f4:	0019      	movs	r1, r3
 80138f6:	2044      	movs	r0, #68	@ 0x44
 80138f8:	f7ff fe14 	bl	8013524 <WriteRegister>
	HAL_Delay(30);
 80138fc:	201e      	movs	r0, #30
 80138fe:	f000 fa6f 	bl	8013de0 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8013902:	4b14      	ldr	r3, [pc, #80]	@ (8013954 <HIDS_DeviceConnected+0x70>)
 8013904:	2206      	movs	r2, #6
 8013906:	0019      	movs	r1, r3
 8013908:	2044      	movs	r0, #68	@ 0x44
 801390a:	f7ff fde9 	bl	80134e0 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 801390e:	1dfb      	adds	r3, r7, #7
 8013910:	2200      	movs	r2, #0
 8013912:	701a      	strb	r2, [r3, #0]
 8013914:	e011      	b.n	801393a <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8013916:	1dfb      	adds	r3, r7, #7
 8013918:	7818      	ldrb	r0, [r3, #0]
 801391a:	1dfb      	adds	r3, r7, #7
 801391c:	781b      	ldrb	r3, [r3, #0]
 801391e:	4a0d      	ldr	r2, [pc, #52]	@ (8013954 <HIDS_DeviceConnected+0x70>)
 8013920:	5cd3      	ldrb	r3, [r2, r3]
 8013922:	4a0d      	ldr	r2, [pc, #52]	@ (8013958 <HIDS_DeviceConnected+0x74>)
 8013924:	490d      	ldr	r1, [pc, #52]	@ (801395c <HIDS_DeviceConnected+0x78>)
 8013926:	9300      	str	r3, [sp, #0]
 8013928:	0003      	movs	r3, r0
 801392a:	2002      	movs	r0, #2
 801392c:	f7ff fd0e 	bl	801334c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8013930:	1dfb      	adds	r3, r7, #7
 8013932:	781a      	ldrb	r2, [r3, #0]
 8013934:	1dfb      	adds	r3, r7, #7
 8013936:	3201      	adds	r2, #1
 8013938:	701a      	strb	r2, [r3, #0]
 801393a:	1dfb      	adds	r3, r7, #7
 801393c:	781b      	ldrb	r3, [r3, #0]
 801393e:	2b05      	cmp	r3, #5
 8013940:	d9e9      	bls.n	8013916 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8013942:	4b04      	ldr	r3, [pc, #16]	@ (8013954 <HIDS_DeviceConnected+0x70>)
 8013944:	0018      	movs	r0, r3
 8013946:	f7ff ff71 	bl	801382c <CheckCRC>
 801394a:	0003      	movs	r3, r0
}
 801394c:	0018      	movs	r0, r3
 801394e:	46bd      	mov	sp, r7
 8013950:	b002      	add	sp, #8
 8013952:	bd80      	pop	{r7, pc}
 8013954:	20002208 	.word	0x20002208
 8013958:	0802d804 	.word	0x0802d804
 801395c:	0802d790 	.word	0x0802d790

08013960 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8013960:	b580      	push	{r7, lr}
 8013962:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8013964:	4b04      	ldr	r3, [pc, #16]	@ (8013978 <HIDS_MeasurementReady+0x18>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	0018      	movs	r0, r3
 801396a:	f7ff fc99 	bl	80132a0 <TimestampIsReached>
 801396e:	0003      	movs	r3, r0
}
 8013970:	0018      	movs	r0, r3
 8013972:	46bd      	mov	sp, r7
 8013974:	bd80      	pop	{r7, pc}
 8013976:	46c0      	nop			@ (mov r8, r8)
 8013978:	200000e8 	.word	0x200000e8

0801397c <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 801397c:	b580      	push	{r7, lr}
 801397e:	b084      	sub	sp, #16
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 8013986:	4b41      	ldr	r3, [pc, #260]	@ (8013a8c <HIDS_GetMeasurementValues+0x110>)
 8013988:	781b      	ldrb	r3, [r3, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d001      	beq.n	8013992 <HIDS_GetMeasurementValues+0x16>
 801398e:	2301      	movs	r3, #1
 8013990:	e077      	b.n	8013a82 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8013992:	f7ff ffe5 	bl	8013960 <HIDS_MeasurementReady>
 8013996:	0003      	movs	r3, r0
 8013998:	001a      	movs	r2, r3
 801399a:	2301      	movs	r3, #1
 801399c:	4053      	eors	r3, r2
 801399e:	b2db      	uxtb	r3, r3
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d001      	beq.n	80139a8 <HIDS_GetMeasurementValues+0x2c>
 80139a4:	2300      	movs	r3, #0
 80139a6:	e06c      	b.n	8013a82 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 80139a8:	4b39      	ldr	r3, [pc, #228]	@ (8013a90 <HIDS_GetMeasurementValues+0x114>)
 80139aa:	2206      	movs	r2, #6
 80139ac:	0019      	movs	r1, r3
 80139ae:	2044      	movs	r0, #68	@ 0x44
 80139b0:	f7ff fd96 	bl	80134e0 <ReadRegister>
 80139b4:	0003      	movs	r3, r0
 80139b6:	001a      	movs	r2, r3
 80139b8:	2301      	movs	r3, #1
 80139ba:	4053      	eors	r3, r2
 80139bc:	b2db      	uxtb	r3, r3
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d005      	beq.n	80139ce <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 80139c2:	4a34      	ldr	r2, [pc, #208]	@ (8013a94 <HIDS_GetMeasurementValues+0x118>)
 80139c4:	4b34      	ldr	r3, [pc, #208]	@ (8013a98 <HIDS_GetMeasurementValues+0x11c>)
 80139c6:	0019      	movs	r1, r3
 80139c8:	2001      	movs	r0, #1
 80139ca:	f7ff fcbf 	bl	801334c <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 80139ce:	4b30      	ldr	r3, [pc, #192]	@ (8013a90 <HIDS_GetMeasurementValues+0x114>)
 80139d0:	0018      	movs	r0, r3
 80139d2:	f7ff ff2b 	bl	801382c <CheckCRC>
 80139d6:	0003      	movs	r3, r0
 80139d8:	001a      	movs	r2, r3
 80139da:	2301      	movs	r3, #1
 80139dc:	4053      	eors	r3, r2
 80139de:	b2db      	uxtb	r3, r3
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d001      	beq.n	80139e8 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 80139e4:	2300      	movs	r3, #0
 80139e6:	e04c      	b.n	8013a82 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 80139e8:	4b29      	ldr	r3, [pc, #164]	@ (8013a90 <HIDS_GetMeasurementValues+0x114>)
 80139ea:	781b      	ldrb	r3, [r3, #0]
 80139ec:	021b      	lsls	r3, r3, #8
 80139ee:	4a28      	ldr	r2, [pc, #160]	@ (8013a90 <HIDS_GetMeasurementValues+0x114>)
 80139f0:	7852      	ldrb	r2, [r2, #1]
 80139f2:	4313      	orrs	r3, r2
 80139f4:	22af      	movs	r2, #175	@ 0xaf
 80139f6:	4353      	muls	r3, r2
 80139f8:	0018      	movs	r0, r3
 80139fa:	f7ef fef9 	bl	80037f0 <__aeabi_i2d>
 80139fe:	2200      	movs	r2, #0
 8013a00:	4b26      	ldr	r3, [pc, #152]	@ (8013a9c <HIDS_GetMeasurementValues+0x120>)
 8013a02:	f7ee fb6d 	bl	80020e0 <__aeabi_ddiv>
 8013a06:	0002      	movs	r2, r0
 8013a08:	000b      	movs	r3, r1
 8013a0a:	0010      	movs	r0, r2
 8013a0c:	0019      	movs	r1, r3
 8013a0e:	f7ef ff89 	bl	8003924 <__aeabi_d2f>
 8013a12:	1c03      	adds	r3, r0, #0
 8013a14:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8013a16:	4922      	ldr	r1, [pc, #136]	@ (8013aa0 <HIDS_GetMeasurementValues+0x124>)
 8013a18:	68f8      	ldr	r0, [r7, #12]
 8013a1a:	f7ed fc6b 	bl	80012f4 <__aeabi_fsub>
 8013a1e:	1c03      	adds	r3, r0, #0
 8013a20:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8013a22:	4b1b      	ldr	r3, [pc, #108]	@ (8013a90 <HIDS_GetMeasurementValues+0x114>)
 8013a24:	78db      	ldrb	r3, [r3, #3]
 8013a26:	021b      	lsls	r3, r3, #8
 8013a28:	4a19      	ldr	r2, [pc, #100]	@ (8013a90 <HIDS_GetMeasurementValues+0x114>)
 8013a2a:	7912      	ldrb	r2, [r2, #4]
 8013a2c:	431a      	orrs	r2, r3
 8013a2e:	0013      	movs	r3, r2
 8013a30:	015b      	lsls	r3, r3, #5
 8013a32:	1a9b      	subs	r3, r3, r2
 8013a34:	009b      	lsls	r3, r3, #2
 8013a36:	189b      	adds	r3, r3, r2
 8013a38:	0018      	movs	r0, r3
 8013a3a:	f7ef fed9 	bl	80037f0 <__aeabi_i2d>
 8013a3e:	2200      	movs	r2, #0
 8013a40:	4b16      	ldr	r3, [pc, #88]	@ (8013a9c <HIDS_GetMeasurementValues+0x120>)
 8013a42:	f7ee fb4d 	bl	80020e0 <__aeabi_ddiv>
 8013a46:	0002      	movs	r2, r0
 8013a48:	000b      	movs	r3, r1
 8013a4a:	0010      	movs	r0, r2
 8013a4c:	0019      	movs	r1, r3
 8013a4e:	f7ef ff69 	bl	8003924 <__aeabi_d2f>
 8013a52:	1c03      	adds	r3, r0, #0
 8013a54:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 8013a56:	4913      	ldr	r1, [pc, #76]	@ (8013aa4 <HIDS_GetMeasurementValues+0x128>)
 8013a58:	68b8      	ldr	r0, [r7, #8]
 8013a5a:	f7ed fc4b 	bl	80012f4 <__aeabi_fsub>
 8013a5e:	1c03      	adds	r3, r0, #0
 8013a60:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	68fa      	ldr	r2, [r7, #12]
 8013a66:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	68ba      	ldr	r2, [r7, #8]
 8013a6c:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8013a6e:	687a      	ldr	r2, [r7, #4]
 8013a70:	683b      	ldr	r3, [r7, #0]
 8013a72:	0011      	movs	r1, r2
 8013a74:	0018      	movs	r0, r3
 8013a76:	f7fc ffbf 	bl	80109f8 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8013a7a:	4b04      	ldr	r3, [pc, #16]	@ (8013a8c <HIDS_GetMeasurementValues+0x110>)
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8013a80:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8013a82:	0018      	movs	r0, r3
 8013a84:	46bd      	mov	sp, r7
 8013a86:	b004      	add	sp, #16
 8013a88:	bd80      	pop	{r7, pc}
 8013a8a:	46c0      	nop			@ (mov r8, r8)
 8013a8c:	2000221c 	.word	0x2000221c
 8013a90:	20002210 	.word	0x20002210
 8013a94:	0802d824 	.word	0x0802d824
 8013a98:	0802d7bc 	.word	0x0802d7bc
 8013a9c:	40efffe0 	.word	0x40efffe0
 8013aa0:	42340000 	.word	0x42340000
 8013aa4:	40c00000 	.word	0x40c00000

08013aa8 <ResetHIDSresults>:

void ResetHIDSresults() {
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	af00      	add	r7, sp, #0
  humid = 0.0;
 8013aac:	4b04      	ldr	r3, [pc, #16]	@ (8013ac0 <ResetHIDSresults+0x18>)
 8013aae:	2200      	movs	r2, #0
 8013ab0:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 8013ab2:	4b04      	ldr	r3, [pc, #16]	@ (8013ac4 <ResetHIDSresults+0x1c>)
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	601a      	str	r2, [r3, #0]
}
 8013ab8:	46c0      	nop			@ (mov r8, r8)
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}
 8013abe:	46c0      	nop			@ (mov r8, r8)
 8013ac0:	200021f8 	.word	0x200021f8
 8013ac4:	200021fc 	.word	0x200021fc

08013ac8 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8013ac8:	b5b0      	push	{r4, r5, r7, lr}
 8013aca:	b084      	sub	sp, #16
 8013acc:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8013ace:	4b69      	ldr	r3, [pc, #420]	@ (8013c74 <HIDS_Upkeep+0x1ac>)
 8013ad0:	781b      	ldrb	r3, [r3, #0]
 8013ad2:	2b06      	cmp	r3, #6
 8013ad4:	d900      	bls.n	8013ad8 <HIDS_Upkeep+0x10>
 8013ad6:	e0bd      	b.n	8013c54 <HIDS_Upkeep+0x18c>
 8013ad8:	009a      	lsls	r2, r3, #2
 8013ada:	4b67      	ldr	r3, [pc, #412]	@ (8013c78 <HIDS_Upkeep+0x1b0>)
 8013adc:	18d3      	adds	r3, r2, r3
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 8013ae2:	4a66      	ldr	r2, [pc, #408]	@ (8013c7c <HIDS_Upkeep+0x1b4>)
 8013ae4:	4b66      	ldr	r3, [pc, #408]	@ (8013c80 <HIDS_Upkeep+0x1b8>)
 8013ae6:	0019      	movs	r1, r3
 8013ae8:	2003      	movs	r0, #3
 8013aea:	f7ff fc2f 	bl	801334c <CreateLine>
      break;
 8013aee:	e0bc      	b.n	8013c6a <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8013af0:	f7ff ffda 	bl	8013aa8 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8013af4:	4b5f      	ldr	r3, [pc, #380]	@ (8013c74 <HIDS_Upkeep+0x1ac>)
 8013af6:	2201      	movs	r2, #1
 8013af8:	701a      	strb	r2, [r3, #0]
      break;
 8013afa:	e0b6      	b.n	8013c6a <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 8013afc:	f7f9 fc8e 	bl	800d41c <getSensorLock>
 8013b00:	1e03      	subs	r3, r0, #0
 8013b02:	d000      	beq.n	8013b06 <HIDS_Upkeep+0x3e>
 8013b04:	e0aa      	b.n	8013c5c <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 8013b06:	2001      	movs	r0, #1
 8013b08:	f7f9 fc74 	bl	800d3f4 <setSensorLock>
      SetMeasurementIndicator();
 8013b0c:	f7fe f9c8 	bl	8011ea0 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 8013b10:	f7ff fe3c 	bl	801378c <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 8013b14:	200a      	movs	r0, #10
 8013b16:	f000 f963 	bl	8013de0 <HAL_Delay>
      setSensorLock(FREE);
 8013b1a:	2000      	movs	r0, #0
 8013b1c:	f7f9 fc6a 	bl	800d3f4 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8013b20:	4b54      	ldr	r3, [pc, #336]	@ (8013c74 <HIDS_Upkeep+0x1ac>)
 8013b22:	2202      	movs	r2, #2
 8013b24:	701a      	strb	r2, [r3, #0]
      break;
 8013b26:	e0a0      	b.n	8013c6a <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 8013b28:	f7f9 fc78 	bl	800d41c <getSensorLock>
 8013b2c:	1e03      	subs	r3, r0, #0
 8013b2e:	d000      	beq.n	8013b32 <HIDS_Upkeep+0x6a>
 8013b30:	e096      	b.n	8013c60 <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 8013b32:	2001      	movs	r0, #1
 8013b34:	f7f9 fc5e 	bl	800d3f4 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8013b38:	4a52      	ldr	r2, [pc, #328]	@ (8013c84 <HIDS_Upkeep+0x1bc>)
 8013b3a:	4b53      	ldr	r3, [pc, #332]	@ (8013c88 <HIDS_Upkeep+0x1c0>)
 8013b3c:	0011      	movs	r1, r2
 8013b3e:	0018      	movs	r0, r3
 8013b40:	f7ff ff1c 	bl	801397c <HIDS_GetMeasurementValues>
 8013b44:	1e03      	subs	r3, r0, #0
 8013b46:	d002      	beq.n	8013b4e <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8013b48:	4b4a      	ldr	r3, [pc, #296]	@ (8013c74 <HIDS_Upkeep+0x1ac>)
 8013b4a:	2203      	movs	r2, #3
 8013b4c:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8013b4e:	200a      	movs	r0, #10
 8013b50:	f000 f946 	bl	8013de0 <HAL_Delay>
      setSensorLock(FREE);
 8013b54:	2000      	movs	r0, #0
 8013b56:	f7f9 fc4d 	bl	800d3f4 <setSensorLock>
      break;
 8013b5a:	e086      	b.n	8013c6a <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8013b5c:	4b4a      	ldr	r3, [pc, #296]	@ (8013c88 <HIDS_Upkeep+0x1c0>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	1c18      	adds	r0, r3, #0
 8013b62:	f7ef fe97 	bl	8003894 <__aeabi_f2d>
 8013b66:	0004      	movs	r4, r0
 8013b68:	000d      	movs	r5, r1
 8013b6a:	4b46      	ldr	r3, [pc, #280]	@ (8013c84 <HIDS_Upkeep+0x1bc>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	1c18      	adds	r0, r3, #0
 8013b70:	f7ef fe90 	bl	8003894 <__aeabi_f2d>
 8013b74:	0002      	movs	r2, r0
 8013b76:	000b      	movs	r3, r1
 8013b78:	4844      	ldr	r0, [pc, #272]	@ (8013c8c <HIDS_Upkeep+0x1c4>)
 8013b7a:	4941      	ldr	r1, [pc, #260]	@ (8013c80 <HIDS_Upkeep+0x1b8>)
 8013b7c:	9202      	str	r2, [sp, #8]
 8013b7e:	9303      	str	r3, [sp, #12]
 8013b80:	9400      	str	r4, [sp, #0]
 8013b82:	9501      	str	r5, [sp, #4]
 8013b84:	0002      	movs	r2, r0
 8013b86:	2003      	movs	r0, #3
 8013b88:	f7ff fbe0 	bl	801334c <CreateLine>
      setHIDS(temp, humid);
 8013b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8013c84 <HIDS_Upkeep+0x1bc>)
 8013b8e:	681a      	ldr	r2, [r3, #0]
 8013b90:	4b3d      	ldr	r3, [pc, #244]	@ (8013c88 <HIDS_Upkeep+0x1c0>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	1c19      	adds	r1, r3, #0
 8013b96:	1c10      	adds	r0, r2, #0
 8013b98:	f7f0 ff50 	bl	8004a3c <setHIDS>
      ResetMeasurementIndicator();
 8013b9c:	f7fe f998 	bl	8011ed0 <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8013ba0:	4b38      	ldr	r3, [pc, #224]	@ (8013c84 <HIDS_Upkeep+0x1bc>)
 8013ba2:	681c      	ldr	r4, [r3, #0]
 8013ba4:	4a37      	ldr	r2, [pc, #220]	@ (8013c84 <HIDS_Upkeep+0x1bc>)
 8013ba6:	4b38      	ldr	r3, [pc, #224]	@ (8013c88 <HIDS_Upkeep+0x1c0>)
 8013ba8:	0011      	movs	r1, r2
 8013baa:	0018      	movs	r0, r3
 8013bac:	f7ff fd34 	bl	8013618 <HIDS_DewPointCalculation>
 8013bb0:	1c03      	adds	r3, r0, #0
 8013bb2:	1c19      	adds	r1, r3, #0
 8013bb4:	1c20      	adds	r0, r4, #0
 8013bb6:	f7ed fb9d 	bl	80012f4 <__aeabi_fsub>
 8013bba:	1c03      	adds	r3, r0, #0
 8013bbc:	21fe      	movs	r1, #254	@ 0xfe
 8013bbe:	0589      	lsls	r1, r1, #22
 8013bc0:	1c18      	adds	r0, r3, #0
 8013bc2:	f7ec fcb5 	bl	8000530 <__aeabi_fcmplt>
 8013bc6:	1e03      	subs	r3, r0, #0
 8013bc8:	d023      	beq.n	8013c12 <HIDS_Upkeep+0x14a>
 8013bca:	f7f5 ff3d 	bl	8009a48 <getPosixTime>
 8013bce:	0002      	movs	r2, r0
 8013bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8013c90 <HIDS_Upkeep+0x1c8>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	1ad2      	subs	r2, r2, r3
 8013bd6:	23e1      	movs	r3, #225	@ 0xe1
 8013bd8:	009b      	lsls	r3, r3, #2
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d919      	bls.n	8013c12 <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 8013bde:	4a2d      	ldr	r2, [pc, #180]	@ (8013c94 <HIDS_Upkeep+0x1cc>)
 8013be0:	4b2d      	ldr	r3, [pc, #180]	@ (8013c98 <HIDS_Upkeep+0x1d0>)
 8013be2:	0019      	movs	r1, r3
 8013be4:	2002      	movs	r0, #2
 8013be6:	f7ff fbb1 	bl	801334c <CreateLine>
        if (getSensorLock() != FREE) {
 8013bea:	f7f9 fc17 	bl	800d41c <getSensorLock>
 8013bee:	1e03      	subs	r3, r0, #0
 8013bf0:	d138      	bne.n	8013c64 <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 8013bf2:	f7ff fd83 	bl	80136fc <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 8013bf6:	200a      	movs	r0, #10
 8013bf8:	f000 f8f2 	bl	8013de0 <HAL_Delay>
        setSensorLock(FREE);
 8013bfc:	2000      	movs	r0, #0
 8013bfe:	f7f9 fbf9 	bl	800d3f4 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 8013c02:	f000 f8e3 	bl	8013dcc <HAL_GetTick>
 8013c06:	0003      	movs	r3, r0
 8013c08:	4a24      	ldr	r2, [pc, #144]	@ (8013c9c <HIDS_Upkeep+0x1d4>)
 8013c0a:	189a      	adds	r2, r3, r2
 8013c0c:	4b24      	ldr	r3, [pc, #144]	@ (8013ca0 <HIDS_Upkeep+0x1d8>)
 8013c0e:	601a      	str	r2, [r3, #0]
 8013c10:	e011      	b.n	8013c36 <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8013c12:	f000 f8db 	bl	8013dcc <HAL_GetTick>
 8013c16:	0004      	movs	r4, r0
 8013c18:	f7f5 fb1c 	bl	8009254 <Check_USB_PowerOn>
 8013c1c:	1e03      	subs	r3, r0, #0
 8013c1e:	d103      	bne.n	8013c28 <HIDS_Upkeep+0x160>
 8013c20:	4b20      	ldr	r3, [pc, #128]	@ (8013ca4 <HIDS_Upkeep+0x1dc>)
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d001      	beq.n	8013c2c <HIDS_Upkeep+0x164>
 8013c28:	4b1f      	ldr	r3, [pc, #124]	@ (8013ca8 <HIDS_Upkeep+0x1e0>)
 8013c2a:	e001      	b.n	8013c30 <HIDS_Upkeep+0x168>
 8013c2c:	23fa      	movs	r3, #250	@ 0xfa
 8013c2e:	009b      	lsls	r3, r3, #2
 8013c30:	191a      	adds	r2, r3, r4
 8013c32:	4b1b      	ldr	r3, [pc, #108]	@ (8013ca0 <HIDS_Upkeep+0x1d8>)
 8013c34:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 8013c36:	4b0f      	ldr	r3, [pc, #60]	@ (8013c74 <HIDS_Upkeep+0x1ac>)
 8013c38:	2206      	movs	r2, #6
 8013c3a:	701a      	strb	r2, [r3, #0]
      break;
 8013c3c:	e015      	b.n	8013c6a <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8013c3e:	4b18      	ldr	r3, [pc, #96]	@ (8013ca0 <HIDS_Upkeep+0x1d8>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	0018      	movs	r0, r3
 8013c44:	f7ff fb2c 	bl	80132a0 <TimestampIsReached>
 8013c48:	1e03      	subs	r3, r0, #0
 8013c4a:	d00d      	beq.n	8013c68 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 8013c4c:	4b09      	ldr	r3, [pc, #36]	@ (8013c74 <HIDS_Upkeep+0x1ac>)
 8013c4e:	2200      	movs	r2, #0
 8013c50:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013c52:	e009      	b.n	8013c68 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8013c54:	4b07      	ldr	r3, [pc, #28]	@ (8013c74 <HIDS_Upkeep+0x1ac>)
 8013c56:	2200      	movs	r2, #0
 8013c58:	701a      	strb	r2, [r3, #0]
      break;
 8013c5a:	e006      	b.n	8013c6a <HIDS_Upkeep+0x1a2>
        break;
 8013c5c:	46c0      	nop			@ (mov r8, r8)
 8013c5e:	e004      	b.n	8013c6a <HIDS_Upkeep+0x1a2>
        break;
 8013c60:	46c0      	nop			@ (mov r8, r8)
 8013c62:	e002      	b.n	8013c6a <HIDS_Upkeep+0x1a2>
          break;
 8013c64:	46c0      	nop			@ (mov r8, r8)
 8013c66:	e000      	b.n	8013c6a <HIDS_Upkeep+0x1a2>
      break;
 8013c68:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8013c6a:	4b02      	ldr	r3, [pc, #8]	@ (8013c74 <HIDS_Upkeep+0x1ac>)
 8013c6c:	781b      	ldrb	r3, [r3, #0]
}
 8013c6e:	0018      	movs	r0, r3
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bdb0      	pop	{r4, r5, r7, pc}
 8013c74:	20002224 	.word	0x20002224
 8013c78:	0802de74 	.word	0x0802de74
 8013c7c:	0802d858 	.word	0x0802d858
 8013c80:	0802d88c 	.word	0x0802d88c
 8013c84:	200021fc 	.word	0x200021fc
 8013c88:	200021f8 	.word	0x200021f8
 8013c8c:	0802d890 	.word	0x0802d890
 8013c90:	20002218 	.word	0x20002218
 8013c94:	0802d8c4 	.word	0x0802d8c4
 8013c98:	0802d790 	.word	0x0802d790
 8013c9c:	00002ee0 	.word	0x00002ee0
 8013ca0:	20002220 	.word	0x20002220
 8013ca4:	20001e62 	.word	0x20001e62
 8013ca8:	00002710 	.word	0x00002710

08013cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8013cac:	480d      	ldr	r0, [pc, #52]	@ (8013ce4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8013cae:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8013cb0:	f7fe ff50 	bl	8012b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8013cb4:	480c      	ldr	r0, [pc, #48]	@ (8013ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8013cb6:	490d      	ldr	r1, [pc, #52]	@ (8013cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8013cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8013cf0 <LoopForever+0xe>)
  movs r3, #0
 8013cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013cbc:	e002      	b.n	8013cc4 <LoopCopyDataInit>

08013cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013cc2:	3304      	adds	r3, #4

08013cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013cc8:	d3f9      	bcc.n	8013cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8013cca:	4a0a      	ldr	r2, [pc, #40]	@ (8013cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8013ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8013cf8 <LoopForever+0x16>)
  movs r3, #0
 8013cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013cd0:	e001      	b.n	8013cd6 <LoopFillZerobss>

08013cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013cd4:	3204      	adds	r2, #4

08013cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013cd8:	d3fb      	bcc.n	8013cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8013cda:	f011 fed5 	bl	8025a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013cde:	f7f8 fb1b 	bl	800c318 <main>

08013ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8013ce2:	e7fe      	b.n	8013ce2 <LoopForever>
   ldr   r0, =_estack
 8013ce4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8013ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8013cec:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 8013cf0:	0802e858 	.word	0x0802e858
  ldr r2, =_sbss
 8013cf4:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 8013cf8:	2000362c 	.word	0x2000362c

08013cfc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013cfc:	e7fe      	b.n	8013cfc <ADC1_COMP_IRQHandler>
	...

08013d00 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8013d06:	1dfb      	adds	r3, r7, #7
 8013d08:	2200      	movs	r2, #0
 8013d0a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8013d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8013d3c <HAL_Init+0x3c>)
 8013d0e:	681a      	ldr	r2, [r3, #0]
 8013d10:	4b0a      	ldr	r3, [pc, #40]	@ (8013d3c <HAL_Init+0x3c>)
 8013d12:	2140      	movs	r1, #64	@ 0x40
 8013d14:	430a      	orrs	r2, r1
 8013d16:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8013d18:	2003      	movs	r0, #3
 8013d1a:	f000 f811 	bl	8013d40 <HAL_InitTick>
 8013d1e:	1e03      	subs	r3, r0, #0
 8013d20:	d003      	beq.n	8013d2a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8013d22:	1dfb      	adds	r3, r7, #7
 8013d24:	2201      	movs	r2, #1
 8013d26:	701a      	strb	r2, [r3, #0]
 8013d28:	e001      	b.n	8013d2e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8013d2a:	f7fe fdc7 	bl	80128bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8013d2e:	1dfb      	adds	r3, r7, #7
 8013d30:	781b      	ldrb	r3, [r3, #0]
}
 8013d32:	0018      	movs	r0, r3
 8013d34:	46bd      	mov	sp, r7
 8013d36:	b002      	add	sp, #8
 8013d38:	bd80      	pop	{r7, pc}
 8013d3a:	46c0      	nop			@ (mov r8, r8)
 8013d3c:	40022000 	.word	0x40022000

08013d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013d40:	b590      	push	{r4, r7, lr}
 8013d42:	b083      	sub	sp, #12
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8013d48:	4b14      	ldr	r3, [pc, #80]	@ (8013d9c <HAL_InitTick+0x5c>)
 8013d4a:	681c      	ldr	r4, [r3, #0]
 8013d4c:	4b14      	ldr	r3, [pc, #80]	@ (8013da0 <HAL_InitTick+0x60>)
 8013d4e:	781b      	ldrb	r3, [r3, #0]
 8013d50:	0019      	movs	r1, r3
 8013d52:	23fa      	movs	r3, #250	@ 0xfa
 8013d54:	0098      	lsls	r0, r3, #2
 8013d56:	f7ec fa25 	bl	80001a4 <__udivsi3>
 8013d5a:	0003      	movs	r3, r0
 8013d5c:	0019      	movs	r1, r3
 8013d5e:	0020      	movs	r0, r4
 8013d60:	f7ec fa20 	bl	80001a4 <__udivsi3>
 8013d64:	0003      	movs	r3, r0
 8013d66:	0018      	movs	r0, r3
 8013d68:	f000 fcfd 	bl	8014766 <HAL_SYSTICK_Config>
 8013d6c:	1e03      	subs	r3, r0, #0
 8013d6e:	d001      	beq.n	8013d74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8013d70:	2301      	movs	r3, #1
 8013d72:	e00f      	b.n	8013d94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2b03      	cmp	r3, #3
 8013d78:	d80b      	bhi.n	8013d92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8013d7a:	6879      	ldr	r1, [r7, #4]
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	425b      	negs	r3, r3
 8013d80:	2200      	movs	r2, #0
 8013d82:	0018      	movs	r0, r3
 8013d84:	f000 fcc6 	bl	8014714 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8013d88:	4b06      	ldr	r3, [pc, #24]	@ (8013da4 <HAL_InitTick+0x64>)
 8013d8a:	687a      	ldr	r2, [r7, #4]
 8013d8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	e000      	b.n	8013d94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8013d92:	2301      	movs	r3, #1
}
 8013d94:	0018      	movs	r0, r3
 8013d96:	46bd      	mov	sp, r7
 8013d98:	b003      	add	sp, #12
 8013d9a:	bd90      	pop	{r4, r7, pc}
 8013d9c:	200000e0 	.word	0x200000e0
 8013da0:	200000f4 	.word	0x200000f4
 8013da4:	200000f0 	.word	0x200000f0

08013da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8013dac:	4b05      	ldr	r3, [pc, #20]	@ (8013dc4 <HAL_IncTick+0x1c>)
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	001a      	movs	r2, r3
 8013db2:	4b05      	ldr	r3, [pc, #20]	@ (8013dc8 <HAL_IncTick+0x20>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	18d2      	adds	r2, r2, r3
 8013db8:	4b03      	ldr	r3, [pc, #12]	@ (8013dc8 <HAL_IncTick+0x20>)
 8013dba:	601a      	str	r2, [r3, #0]
}
 8013dbc:	46c0      	nop			@ (mov r8, r8)
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}
 8013dc2:	46c0      	nop			@ (mov r8, r8)
 8013dc4:	200000f4 	.word	0x200000f4
 8013dc8:	20002228 	.word	0x20002228

08013dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	af00      	add	r7, sp, #0
  return uwTick;
 8013dd0:	4b02      	ldr	r3, [pc, #8]	@ (8013ddc <HAL_GetTick+0x10>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
}
 8013dd4:	0018      	movs	r0, r3
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
 8013dda:	46c0      	nop			@ (mov r8, r8)
 8013ddc:	20002228 	.word	0x20002228

08013de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013de8:	f7ff fff0 	bl	8013dcc <HAL_GetTick>
 8013dec:	0003      	movs	r3, r0
 8013dee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	3301      	adds	r3, #1
 8013df8:	d005      	beq.n	8013e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8013dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8013e24 <HAL_Delay+0x44>)
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	001a      	movs	r2, r3
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	189b      	adds	r3, r3, r2
 8013e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8013e06:	46c0      	nop			@ (mov r8, r8)
 8013e08:	f7ff ffe0 	bl	8013dcc <HAL_GetTick>
 8013e0c:	0002      	movs	r2, r0
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	1ad3      	subs	r3, r2, r3
 8013e12:	68fa      	ldr	r2, [r7, #12]
 8013e14:	429a      	cmp	r2, r3
 8013e16:	d8f7      	bhi.n	8013e08 <HAL_Delay+0x28>
  {
  }
}
 8013e18:	46c0      	nop			@ (mov r8, r8)
 8013e1a:	46c0      	nop			@ (mov r8, r8)
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	b004      	add	sp, #16
 8013e20:	bd80      	pop	{r7, pc}
 8013e22:	46c0      	nop			@ (mov r8, r8)
 8013e24:	200000f4 	.word	0x200000f4

08013e28 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8013e2c:	4b04      	ldr	r3, [pc, #16]	@ (8013e40 <HAL_SuspendTick+0x18>)
 8013e2e:	681a      	ldr	r2, [r3, #0]
 8013e30:	4b03      	ldr	r3, [pc, #12]	@ (8013e40 <HAL_SuspendTick+0x18>)
 8013e32:	2102      	movs	r1, #2
 8013e34:	438a      	bics	r2, r1
 8013e36:	601a      	str	r2, [r3, #0]
}
 8013e38:	46c0      	nop			@ (mov r8, r8)
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}
 8013e3e:	46c0      	nop			@ (mov r8, r8)
 8013e40:	e000e010 	.word	0xe000e010

08013e44 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8013e48:	4b04      	ldr	r3, [pc, #16]	@ (8013e5c <HAL_ResumeTick+0x18>)
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	4b03      	ldr	r3, [pc, #12]	@ (8013e5c <HAL_ResumeTick+0x18>)
 8013e4e:	2102      	movs	r1, #2
 8013e50:	430a      	orrs	r2, r1
 8013e52:	601a      	str	r2, [r3, #0]
}
 8013e54:	46c0      	nop			@ (mov r8, r8)
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd80      	pop	{r7, pc}
 8013e5a:	46c0      	nop			@ (mov r8, r8)
 8013e5c:	e000e010 	.word	0xe000e010

08013e60 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8013e64:	4b02      	ldr	r3, [pc, #8]	@ (8013e70 <HAL_GetUIDw0+0x10>)
 8013e66:	681b      	ldr	r3, [r3, #0]
}
 8013e68:	0018      	movs	r0, r3
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}
 8013e6e:	46c0      	nop			@ (mov r8, r8)
 8013e70:	1ff80050 	.word	0x1ff80050

08013e74 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8013e78:	4b02      	ldr	r3, [pc, #8]	@ (8013e84 <HAL_GetUIDw1+0x10>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
}
 8013e7c:	0018      	movs	r0, r3
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}
 8013e82:	46c0      	nop			@ (mov r8, r8)
 8013e84:	1ff80054 	.word	0x1ff80054

08013e88 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8013e8c:	4b02      	ldr	r3, [pc, #8]	@ (8013e98 <HAL_GetUIDw2+0x10>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
}
 8013e90:	0018      	movs	r0, r3
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bd80      	pop	{r7, pc}
 8013e96:	46c0      	nop			@ (mov r8, r8)
 8013e98:	1ff80064 	.word	0x1ff80064

08013e9c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b082      	sub	sp, #8
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d101      	bne.n	8013eae <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8013eaa:	2301      	movs	r3, #1
 8013eac:	e159      	b.n	8014162 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d10a      	bne.n	8013ecc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2200      	movs	r2, #0
 8013eba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2250      	movs	r2, #80	@ 0x50
 8013ec0:	2100      	movs	r1, #0
 8013ec2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	0018      	movs	r0, r3
 8013ec8:	f7f6 f978 	bl	800a1bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ed0:	2210      	movs	r2, #16
 8013ed2:	4013      	ands	r3, r2
 8013ed4:	2b10      	cmp	r3, #16
 8013ed6:	d005      	beq.n	8013ee4 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	689b      	ldr	r3, [r3, #8]
 8013ede:	2204      	movs	r2, #4
 8013ee0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8013ee2:	d00b      	beq.n	8013efc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ee8:	2210      	movs	r2, #16
 8013eea:	431a      	orrs	r2, r3
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2250      	movs	r2, #80	@ 0x50
 8013ef4:	2100      	movs	r1, #0
 8013ef6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8013ef8:	2301      	movs	r3, #1
 8013efa:	e132      	b.n	8014162 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f00:	4a9a      	ldr	r2, [pc, #616]	@ (801416c <HAL_ADC_Init+0x2d0>)
 8013f02:	4013      	ands	r3, r2
 8013f04:	2202      	movs	r2, #2
 8013f06:	431a      	orrs	r2, r3
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	689b      	ldr	r3, [r3, #8]
 8013f12:	2203      	movs	r2, #3
 8013f14:	4013      	ands	r3, r2
 8013f16:	2b01      	cmp	r3, #1
 8013f18:	d108      	bne.n	8013f2c <HAL_ADC_Init+0x90>
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	2201      	movs	r2, #1
 8013f22:	4013      	ands	r3, r2
 8013f24:	2b01      	cmp	r3, #1
 8013f26:	d101      	bne.n	8013f2c <HAL_ADC_Init+0x90>
 8013f28:	2301      	movs	r3, #1
 8013f2a:	e000      	b.n	8013f2e <HAL_ADC_Init+0x92>
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d149      	bne.n	8013fc6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	685a      	ldr	r2, [r3, #4]
 8013f36:	23c0      	movs	r3, #192	@ 0xc0
 8013f38:	061b      	lsls	r3, r3, #24
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	d00b      	beq.n	8013f56 <HAL_ADC_Init+0xba>
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	685a      	ldr	r2, [r3, #4]
 8013f42:	2380      	movs	r3, #128	@ 0x80
 8013f44:	05db      	lsls	r3, r3, #23
 8013f46:	429a      	cmp	r2, r3
 8013f48:	d005      	beq.n	8013f56 <HAL_ADC_Init+0xba>
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	685a      	ldr	r2, [r3, #4]
 8013f4e:	2380      	movs	r3, #128	@ 0x80
 8013f50:	061b      	lsls	r3, r3, #24
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d111      	bne.n	8013f7a <HAL_ADC_Init+0xde>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	691a      	ldr	r2, [r3, #16]
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	0092      	lsls	r2, r2, #2
 8013f62:	0892      	lsrs	r2, r2, #2
 8013f64:	611a      	str	r2, [r3, #16]
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	6919      	ldr	r1, [r3, #16]
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	685a      	ldr	r2, [r3, #4]
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	430a      	orrs	r2, r1
 8013f76:	611a      	str	r2, [r3, #16]
 8013f78:	e014      	b.n	8013fa4 <HAL_ADC_Init+0x108>
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	691a      	ldr	r2, [r3, #16]
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	0092      	lsls	r2, r2, #2
 8013f86:	0892      	lsrs	r2, r2, #2
 8013f88:	611a      	str	r2, [r3, #16]
 8013f8a:	4b79      	ldr	r3, [pc, #484]	@ (8014170 <HAL_ADC_Init+0x2d4>)
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	4b78      	ldr	r3, [pc, #480]	@ (8014170 <HAL_ADC_Init+0x2d4>)
 8013f90:	4978      	ldr	r1, [pc, #480]	@ (8014174 <HAL_ADC_Init+0x2d8>)
 8013f92:	400a      	ands	r2, r1
 8013f94:	601a      	str	r2, [r3, #0]
 8013f96:	4b76      	ldr	r3, [pc, #472]	@ (8014170 <HAL_ADC_Init+0x2d4>)
 8013f98:	6819      	ldr	r1, [r3, #0]
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	685a      	ldr	r2, [r3, #4]
 8013f9e:	4b74      	ldr	r3, [pc, #464]	@ (8014170 <HAL_ADC_Init+0x2d4>)
 8013fa0:	430a      	orrs	r2, r1
 8013fa2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	68da      	ldr	r2, [r3, #12]
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	2118      	movs	r1, #24
 8013fb0:	438a      	bics	r2, r1
 8013fb2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	68d9      	ldr	r1, [r3, #12]
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	689a      	ldr	r2, [r3, #8]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	430a      	orrs	r2, r1
 8013fc4:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8013fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8014170 <HAL_ADC_Init+0x2d4>)
 8013fc8:	681a      	ldr	r2, [r3, #0]
 8013fca:	4b69      	ldr	r3, [pc, #420]	@ (8014170 <HAL_ADC_Init+0x2d4>)
 8013fcc:	496a      	ldr	r1, [pc, #424]	@ (8014178 <HAL_ADC_Init+0x2dc>)
 8013fce:	400a      	ands	r2, r1
 8013fd0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8013fd2:	4b67      	ldr	r3, [pc, #412]	@ (8014170 <HAL_ADC_Init+0x2d4>)
 8013fd4:	6819      	ldr	r1, [r3, #0]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013fda:	065a      	lsls	r2, r3, #25
 8013fdc:	4b64      	ldr	r3, [pc, #400]	@ (8014170 <HAL_ADC_Init+0x2d4>)
 8013fde:	430a      	orrs	r2, r1
 8013fe0:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	689a      	ldr	r2, [r3, #8]
 8013fe8:	2380      	movs	r3, #128	@ 0x80
 8013fea:	055b      	lsls	r3, r3, #21
 8013fec:	4013      	ands	r3, r2
 8013fee:	d108      	bne.n	8014002 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	689a      	ldr	r2, [r3, #8]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	2180      	movs	r1, #128	@ 0x80
 8013ffc:	0549      	lsls	r1, r1, #21
 8013ffe:	430a      	orrs	r2, r1
 8014000:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	68da      	ldr	r2, [r3, #12]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	495b      	ldr	r1, [pc, #364]	@ (801417c <HAL_ADC_Init+0x2e0>)
 801400e:	400a      	ands	r2, r1
 8014010:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	68d9      	ldr	r1, [r3, #12]
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	691b      	ldr	r3, [r3, #16]
 8014020:	2b02      	cmp	r3, #2
 8014022:	d101      	bne.n	8014028 <HAL_ADC_Init+0x18c>
 8014024:	2304      	movs	r3, #4
 8014026:	e000      	b.n	801402a <HAL_ADC_Init+0x18e>
 8014028:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801402a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	2020      	movs	r0, #32
 8014030:	5c1b      	ldrb	r3, [r3, r0]
 8014032:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014034:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	202c      	movs	r0, #44	@ 0x2c
 801403a:	5c1b      	ldrb	r3, [r3, r0]
 801403c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 801403e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014044:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	699b      	ldr	r3, [r3, #24]
 801404a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 801404c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	69db      	ldr	r3, [r3, #28]
 8014052:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014054:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	430a      	orrs	r2, r1
 801405c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014062:	23c2      	movs	r3, #194	@ 0xc2
 8014064:	33ff      	adds	r3, #255	@ 0xff
 8014066:	429a      	cmp	r2, r3
 8014068:	d00b      	beq.n	8014082 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	68d9      	ldr	r1, [r3, #12]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014078:	431a      	orrs	r2, r3
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	430a      	orrs	r2, r1
 8014080:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	2221      	movs	r2, #33	@ 0x21
 8014086:	5c9b      	ldrb	r3, [r3, r2]
 8014088:	2b01      	cmp	r3, #1
 801408a:	d11a      	bne.n	80140c2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2220      	movs	r2, #32
 8014090:	5c9b      	ldrb	r3, [r3, r2]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d109      	bne.n	80140aa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	68da      	ldr	r2, [r3, #12]
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	2180      	movs	r1, #128	@ 0x80
 80140a2:	0249      	lsls	r1, r1, #9
 80140a4:	430a      	orrs	r2, r1
 80140a6:	60da      	str	r2, [r3, #12]
 80140a8:	e00b      	b.n	80140c2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140ae:	2220      	movs	r2, #32
 80140b0:	431a      	orrs	r2, r3
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80140ba:	2201      	movs	r2, #1
 80140bc:	431a      	orrs	r2, r3
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140c6:	2b01      	cmp	r3, #1
 80140c8:	d11f      	bne.n	801410a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	691a      	ldr	r2, [r3, #16]
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	492a      	ldr	r1, [pc, #168]	@ (8014180 <HAL_ADC_Init+0x2e4>)
 80140d6:	400a      	ands	r2, r1
 80140d8:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	6919      	ldr	r1, [r3, #16]
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80140e8:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80140ee:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	430a      	orrs	r2, r1
 80140f6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	691a      	ldr	r2, [r3, #16]
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	2101      	movs	r1, #1
 8014104:	430a      	orrs	r2, r1
 8014106:	611a      	str	r2, [r3, #16]
 8014108:	e00e      	b.n	8014128 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	691b      	ldr	r3, [r3, #16]
 8014110:	2201      	movs	r2, #1
 8014112:	4013      	ands	r3, r2
 8014114:	2b01      	cmp	r3, #1
 8014116:	d107      	bne.n	8014128 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	691a      	ldr	r2, [r3, #16]
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	2101      	movs	r1, #1
 8014124:	438a      	bics	r2, r1
 8014126:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	695a      	ldr	r2, [r3, #20]
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	2107      	movs	r1, #7
 8014134:	438a      	bics	r2, r1
 8014136:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	6959      	ldr	r1, [r3, #20]
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	430a      	orrs	r2, r1
 8014148:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2200      	movs	r2, #0
 801414e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014154:	2203      	movs	r2, #3
 8014156:	4393      	bics	r3, r2
 8014158:	2201      	movs	r2, #1
 801415a:	431a      	orrs	r2, r3
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8014160:	2300      	movs	r3, #0
}
 8014162:	0018      	movs	r0, r3
 8014164:	46bd      	mov	sp, r7
 8014166:	b002      	add	sp, #8
 8014168:	bd80      	pop	{r7, pc}
 801416a:	46c0      	nop			@ (mov r8, r8)
 801416c:	fffffefd 	.word	0xfffffefd
 8014170:	40012708 	.word	0x40012708
 8014174:	ffc3ffff 	.word	0xffc3ffff
 8014178:	fdffffff 	.word	0xfdffffff
 801417c:	fffe0219 	.word	0xfffe0219
 8014180:	fffffc03 	.word	0xfffffc03

08014184 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8014184:	b590      	push	{r4, r7, lr}
 8014186:	b085      	sub	sp, #20
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801418c:	230f      	movs	r3, #15
 801418e:	18fb      	adds	r3, r7, r3
 8014190:	2200      	movs	r2, #0
 8014192:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	689b      	ldr	r3, [r3, #8]
 801419a:	2204      	movs	r2, #4
 801419c:	4013      	ands	r3, r2
 801419e:	d138      	bne.n	8014212 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	2250      	movs	r2, #80	@ 0x50
 80141a4:	5c9b      	ldrb	r3, [r3, r2]
 80141a6:	2b01      	cmp	r3, #1
 80141a8:	d101      	bne.n	80141ae <HAL_ADC_Start+0x2a>
 80141aa:	2302      	movs	r3, #2
 80141ac:	e038      	b.n	8014220 <HAL_ADC_Start+0x9c>
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2250      	movs	r2, #80	@ 0x50
 80141b2:	2101      	movs	r1, #1
 80141b4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	69db      	ldr	r3, [r3, #28]
 80141ba:	2b01      	cmp	r3, #1
 80141bc:	d007      	beq.n	80141ce <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80141be:	230f      	movs	r3, #15
 80141c0:	18fc      	adds	r4, r7, r3
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	0018      	movs	r0, r3
 80141c6:	f000 f95f 	bl	8014488 <ADC_Enable>
 80141ca:	0003      	movs	r3, r0
 80141cc:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80141ce:	230f      	movs	r3, #15
 80141d0:	18fb      	adds	r3, r7, r3
 80141d2:	781b      	ldrb	r3, [r3, #0]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d120      	bne.n	801421a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80141dc:	4a12      	ldr	r2, [pc, #72]	@ (8014228 <HAL_ADC_Start+0xa4>)
 80141de:	4013      	ands	r3, r2
 80141e0:	2280      	movs	r2, #128	@ 0x80
 80141e2:	0052      	lsls	r2, r2, #1
 80141e4:	431a      	orrs	r2, r3
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2200      	movs	r2, #0
 80141ee:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2250      	movs	r2, #80	@ 0x50
 80141f4:	2100      	movs	r1, #0
 80141f6:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	221c      	movs	r2, #28
 80141fe:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	689a      	ldr	r2, [r3, #8]
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	2104      	movs	r1, #4
 801420c:	430a      	orrs	r2, r1
 801420e:	609a      	str	r2, [r3, #8]
 8014210:	e003      	b.n	801421a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8014212:	230f      	movs	r3, #15
 8014214:	18fb      	adds	r3, r7, r3
 8014216:	2202      	movs	r2, #2
 8014218:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 801421a:	230f      	movs	r3, #15
 801421c:	18fb      	adds	r3, r7, r3
 801421e:	781b      	ldrb	r3, [r3, #0]
}
 8014220:	0018      	movs	r0, r3
 8014222:	46bd      	mov	sp, r7
 8014224:	b005      	add	sp, #20
 8014226:	bd90      	pop	{r4, r7, pc}
 8014228:	fffff0fe 	.word	0xfffff0fe

0801422c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b084      	sub	sp, #16
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
 8014234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8014236:	2300      	movs	r3, #0
 8014238:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 801423a:	2300      	movs	r3, #0
 801423c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	695b      	ldr	r3, [r3, #20]
 8014242:	2b08      	cmp	r3, #8
 8014244:	d102      	bne.n	801424c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8014246:	2308      	movs	r3, #8
 8014248:	60fb      	str	r3, [r7, #12]
 801424a:	e014      	b.n	8014276 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	68db      	ldr	r3, [r3, #12]
 8014252:	2201      	movs	r2, #1
 8014254:	4013      	ands	r3, r2
 8014256:	2b01      	cmp	r3, #1
 8014258:	d10b      	bne.n	8014272 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801425e:	2220      	movs	r2, #32
 8014260:	431a      	orrs	r2, r3
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	2250      	movs	r2, #80	@ 0x50
 801426a:	2100      	movs	r1, #0
 801426c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 801426e:	2301      	movs	r3, #1
 8014270:	e072      	b.n	8014358 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8014272:	230c      	movs	r3, #12
 8014274:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8014276:	f7ff fda9 	bl	8013dcc <HAL_GetTick>
 801427a:	0003      	movs	r3, r0
 801427c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 801427e:	e01f      	b.n	80142c0 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8014280:	683b      	ldr	r3, [r7, #0]
 8014282:	3301      	adds	r3, #1
 8014284:	d01c      	beq.n	80142c0 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8014286:	683b      	ldr	r3, [r7, #0]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d007      	beq.n	801429c <HAL_ADC_PollForConversion+0x70>
 801428c:	f7ff fd9e 	bl	8013dcc <HAL_GetTick>
 8014290:	0002      	movs	r2, r0
 8014292:	68bb      	ldr	r3, [r7, #8]
 8014294:	1ad3      	subs	r3, r2, r3
 8014296:	683a      	ldr	r2, [r7, #0]
 8014298:	429a      	cmp	r2, r3
 801429a:	d211      	bcs.n	80142c0 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	68fa      	ldr	r2, [r7, #12]
 80142a4:	4013      	ands	r3, r2
 80142a6:	d10b      	bne.n	80142c0 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80142ac:	2204      	movs	r2, #4
 80142ae:	431a      	orrs	r2, r3
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2250      	movs	r2, #80	@ 0x50
 80142b8:	2100      	movs	r1, #0
 80142ba:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80142bc:	2303      	movs	r3, #3
 80142be:	e04b      	b.n	8014358 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	68fa      	ldr	r2, [r7, #12]
 80142c8:	4013      	ands	r3, r2
 80142ca:	d0d9      	beq.n	8014280 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80142d0:	2280      	movs	r2, #128	@ 0x80
 80142d2:	0092      	lsls	r2, r2, #2
 80142d4:	431a      	orrs	r2, r3
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	68da      	ldr	r2, [r3, #12]
 80142e0:	23c0      	movs	r3, #192	@ 0xc0
 80142e2:	011b      	lsls	r3, r3, #4
 80142e4:	4013      	ands	r3, r2
 80142e6:	d12e      	bne.n	8014346 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	2220      	movs	r2, #32
 80142ec:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d129      	bne.n	8014346 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	2208      	movs	r2, #8
 80142fa:	4013      	ands	r3, r2
 80142fc:	2b08      	cmp	r3, #8
 80142fe:	d122      	bne.n	8014346 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	689b      	ldr	r3, [r3, #8]
 8014306:	2204      	movs	r2, #4
 8014308:	4013      	ands	r3, r2
 801430a:	d110      	bne.n	801432e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	685a      	ldr	r2, [r3, #4]
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	210c      	movs	r1, #12
 8014318:	438a      	bics	r2, r1
 801431a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014320:	4a0f      	ldr	r2, [pc, #60]	@ (8014360 <HAL_ADC_PollForConversion+0x134>)
 8014322:	4013      	ands	r3, r2
 8014324:	2201      	movs	r2, #1
 8014326:	431a      	orrs	r2, r3
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	655a      	str	r2, [r3, #84]	@ 0x54
 801432c:	e00b      	b.n	8014346 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014332:	2220      	movs	r2, #32
 8014334:	431a      	orrs	r2, r3
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801433e:	2201      	movs	r2, #1
 8014340:	431a      	orrs	r2, r3
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	699b      	ldr	r3, [r3, #24]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d103      	bne.n	8014356 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	220c      	movs	r2, #12
 8014354:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014356:	2300      	movs	r3, #0
}
 8014358:	0018      	movs	r0, r3
 801435a:	46bd      	mov	sp, r7
 801435c:	b004      	add	sp, #16
 801435e:	bd80      	pop	{r7, pc}
 8014360:	fffffefe 	.word	0xfffffefe

08014364 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b082      	sub	sp, #8
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8014372:	0018      	movs	r0, r3
 8014374:	46bd      	mov	sp, r7
 8014376:	b002      	add	sp, #8
 8014378:	bd80      	pop	{r7, pc}
	...

0801437c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
 8014384:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2250      	movs	r2, #80	@ 0x50
 801438a:	5c9b      	ldrb	r3, [r3, r2]
 801438c:	2b01      	cmp	r3, #1
 801438e:	d101      	bne.n	8014394 <HAL_ADC_ConfigChannel+0x18>
 8014390:	2302      	movs	r3, #2
 8014392:	e06c      	b.n	801446e <HAL_ADC_ConfigChannel+0xf2>
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2250      	movs	r2, #80	@ 0x50
 8014398:	2101      	movs	r1, #1
 801439a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	689b      	ldr	r3, [r3, #8]
 80143a2:	2204      	movs	r2, #4
 80143a4:	4013      	ands	r3, r2
 80143a6:	d00b      	beq.n	80143c0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80143ac:	2220      	movs	r2, #32
 80143ae:	431a      	orrs	r2, r3
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	2250      	movs	r2, #80	@ 0x50
 80143b8:	2100      	movs	r1, #0
 80143ba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80143bc:	2301      	movs	r3, #1
 80143be:	e056      	b.n	801446e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	685b      	ldr	r3, [r3, #4]
 80143c4:	4a2c      	ldr	r2, [pc, #176]	@ (8014478 <HAL_ADC_ConfigChannel+0xfc>)
 80143c6:	4293      	cmp	r3, r2
 80143c8:	d028      	beq.n	801441c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	035b      	lsls	r3, r3, #13
 80143d6:	0b5a      	lsrs	r2, r3, #13
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	430a      	orrs	r2, r1
 80143de:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	681a      	ldr	r2, [r3, #0]
 80143e4:	2380      	movs	r3, #128	@ 0x80
 80143e6:	02db      	lsls	r3, r3, #11
 80143e8:	4013      	ands	r3, r2
 80143ea:	d009      	beq.n	8014400 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80143ec:	4b23      	ldr	r3, [pc, #140]	@ (801447c <HAL_ADC_ConfigChannel+0x100>)
 80143ee:	681a      	ldr	r2, [r3, #0]
 80143f0:	4b22      	ldr	r3, [pc, #136]	@ (801447c <HAL_ADC_ConfigChannel+0x100>)
 80143f2:	2180      	movs	r1, #128	@ 0x80
 80143f4:	0409      	lsls	r1, r1, #16
 80143f6:	430a      	orrs	r2, r1
 80143f8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80143fa:	200a      	movs	r0, #10
 80143fc:	f000 f8ac 	bl	8014558 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	681a      	ldr	r2, [r3, #0]
 8014404:	2380      	movs	r3, #128	@ 0x80
 8014406:	029b      	lsls	r3, r3, #10
 8014408:	4013      	ands	r3, r2
 801440a:	d02b      	beq.n	8014464 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 801440c:	4b1b      	ldr	r3, [pc, #108]	@ (801447c <HAL_ADC_ConfigChannel+0x100>)
 801440e:	681a      	ldr	r2, [r3, #0]
 8014410:	4b1a      	ldr	r3, [pc, #104]	@ (801447c <HAL_ADC_ConfigChannel+0x100>)
 8014412:	2180      	movs	r1, #128	@ 0x80
 8014414:	03c9      	lsls	r1, r1, #15
 8014416:	430a      	orrs	r2, r1
 8014418:	601a      	str	r2, [r3, #0]
 801441a:	e023      	b.n	8014464 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	035b      	lsls	r3, r3, #13
 8014428:	0b5b      	lsrs	r3, r3, #13
 801442a:	43d9      	mvns	r1, r3
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	400a      	ands	r2, r1
 8014432:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	681a      	ldr	r2, [r3, #0]
 8014438:	2380      	movs	r3, #128	@ 0x80
 801443a:	02db      	lsls	r3, r3, #11
 801443c:	4013      	ands	r3, r2
 801443e:	d005      	beq.n	801444c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8014440:	4b0e      	ldr	r3, [pc, #56]	@ (801447c <HAL_ADC_ConfigChannel+0x100>)
 8014442:	681a      	ldr	r2, [r3, #0]
 8014444:	4b0d      	ldr	r3, [pc, #52]	@ (801447c <HAL_ADC_ConfigChannel+0x100>)
 8014446:	490e      	ldr	r1, [pc, #56]	@ (8014480 <HAL_ADC_ConfigChannel+0x104>)
 8014448:	400a      	ands	r2, r1
 801444a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	681a      	ldr	r2, [r3, #0]
 8014450:	2380      	movs	r3, #128	@ 0x80
 8014452:	029b      	lsls	r3, r3, #10
 8014454:	4013      	ands	r3, r2
 8014456:	d005      	beq.n	8014464 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8014458:	4b08      	ldr	r3, [pc, #32]	@ (801447c <HAL_ADC_ConfigChannel+0x100>)
 801445a:	681a      	ldr	r2, [r3, #0]
 801445c:	4b07      	ldr	r3, [pc, #28]	@ (801447c <HAL_ADC_ConfigChannel+0x100>)
 801445e:	4909      	ldr	r1, [pc, #36]	@ (8014484 <HAL_ADC_ConfigChannel+0x108>)
 8014460:	400a      	ands	r2, r1
 8014462:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2250      	movs	r2, #80	@ 0x50
 8014468:	2100      	movs	r1, #0
 801446a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801446c:	2300      	movs	r3, #0
}
 801446e:	0018      	movs	r0, r3
 8014470:	46bd      	mov	sp, r7
 8014472:	b002      	add	sp, #8
 8014474:	bd80      	pop	{r7, pc}
 8014476:	46c0      	nop			@ (mov r8, r8)
 8014478:	00001001 	.word	0x00001001
 801447c:	40012708 	.word	0x40012708
 8014480:	ff7fffff 	.word	0xff7fffff
 8014484:	ffbfffff 	.word	0xffbfffff

08014488 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b084      	sub	sp, #16
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014490:	2300      	movs	r3, #0
 8014492:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	689b      	ldr	r3, [r3, #8]
 801449a:	2203      	movs	r2, #3
 801449c:	4013      	ands	r3, r2
 801449e:	2b01      	cmp	r3, #1
 80144a0:	d108      	bne.n	80144b4 <ADC_Enable+0x2c>
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	2201      	movs	r2, #1
 80144aa:	4013      	ands	r3, r2
 80144ac:	2b01      	cmp	r3, #1
 80144ae:	d101      	bne.n	80144b4 <ADC_Enable+0x2c>
 80144b0:	2301      	movs	r3, #1
 80144b2:	e000      	b.n	80144b6 <ADC_Enable+0x2e>
 80144b4:	2300      	movs	r3, #0
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d146      	bne.n	8014548 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	689b      	ldr	r3, [r3, #8]
 80144c0:	4a24      	ldr	r2, [pc, #144]	@ (8014554 <ADC_Enable+0xcc>)
 80144c2:	4013      	ands	r3, r2
 80144c4:	d00d      	beq.n	80144e2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80144ca:	2210      	movs	r2, #16
 80144cc:	431a      	orrs	r2, r3
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80144d6:	2201      	movs	r2, #1
 80144d8:	431a      	orrs	r2, r3
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80144de:	2301      	movs	r3, #1
 80144e0:	e033      	b.n	801454a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	689a      	ldr	r2, [r3, #8]
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	2101      	movs	r1, #1
 80144ee:	430a      	orrs	r2, r1
 80144f0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80144f2:	2001      	movs	r0, #1
 80144f4:	f000 f830 	bl	8014558 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80144f8:	f7ff fc68 	bl	8013dcc <HAL_GetTick>
 80144fc:	0003      	movs	r3, r0
 80144fe:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014500:	e01b      	b.n	801453a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8014502:	f7ff fc63 	bl	8013dcc <HAL_GetTick>
 8014506:	0002      	movs	r2, r0
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	1ad3      	subs	r3, r2, r3
 801450c:	2b0a      	cmp	r3, #10
 801450e:	d914      	bls.n	801453a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	2201      	movs	r2, #1
 8014518:	4013      	ands	r3, r2
 801451a:	2b01      	cmp	r3, #1
 801451c:	d00d      	beq.n	801453a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014522:	2210      	movs	r2, #16
 8014524:	431a      	orrs	r2, r3
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801452e:	2201      	movs	r2, #1
 8014530:	431a      	orrs	r2, r3
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8014536:	2301      	movs	r3, #1
 8014538:	e007      	b.n	801454a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	2201      	movs	r2, #1
 8014542:	4013      	ands	r3, r2
 8014544:	2b01      	cmp	r3, #1
 8014546:	d1dc      	bne.n	8014502 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8014548:	2300      	movs	r3, #0
}
 801454a:	0018      	movs	r0, r3
 801454c:	46bd      	mov	sp, r7
 801454e:	b004      	add	sp, #16
 8014550:	bd80      	pop	{r7, pc}
 8014552:	46c0      	nop			@ (mov r8, r8)
 8014554:	80000017 	.word	0x80000017

08014558 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8014560:	4b0b      	ldr	r3, [pc, #44]	@ (8014590 <ADC_DelayMicroSecond+0x38>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	490b      	ldr	r1, [pc, #44]	@ (8014594 <ADC_DelayMicroSecond+0x3c>)
 8014566:	0018      	movs	r0, r3
 8014568:	f7eb fe1c 	bl	80001a4 <__udivsi3>
 801456c:	0003      	movs	r3, r0
 801456e:	001a      	movs	r2, r3
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	4353      	muls	r3, r2
 8014574:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8014576:	e002      	b.n	801457e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	3b01      	subs	r3, #1
 801457c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d1f9      	bne.n	8014578 <ADC_DelayMicroSecond+0x20>
  }
}
 8014584:	46c0      	nop			@ (mov r8, r8)
 8014586:	46c0      	nop			@ (mov r8, r8)
 8014588:	46bd      	mov	sp, r7
 801458a:	b004      	add	sp, #16
 801458c:	bd80      	pop	{r7, pc}
 801458e:	46c0      	nop			@ (mov r8, r8)
 8014590:	200000e0 	.word	0x200000e0
 8014594:	000f4240 	.word	0x000f4240

08014598 <__NVIC_EnableIRQ>:
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b082      	sub	sp, #8
 801459c:	af00      	add	r7, sp, #0
 801459e:	0002      	movs	r2, r0
 80145a0:	1dfb      	adds	r3, r7, #7
 80145a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80145a4:	1dfb      	adds	r3, r7, #7
 80145a6:	781b      	ldrb	r3, [r3, #0]
 80145a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80145aa:	d809      	bhi.n	80145c0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80145ac:	1dfb      	adds	r3, r7, #7
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	001a      	movs	r2, r3
 80145b2:	231f      	movs	r3, #31
 80145b4:	401a      	ands	r2, r3
 80145b6:	4b04      	ldr	r3, [pc, #16]	@ (80145c8 <__NVIC_EnableIRQ+0x30>)
 80145b8:	2101      	movs	r1, #1
 80145ba:	4091      	lsls	r1, r2
 80145bc:	000a      	movs	r2, r1
 80145be:	601a      	str	r2, [r3, #0]
}
 80145c0:	46c0      	nop			@ (mov r8, r8)
 80145c2:	46bd      	mov	sp, r7
 80145c4:	b002      	add	sp, #8
 80145c6:	bd80      	pop	{r7, pc}
 80145c8:	e000e100 	.word	0xe000e100

080145cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80145cc:	b590      	push	{r4, r7, lr}
 80145ce:	b083      	sub	sp, #12
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	0002      	movs	r2, r0
 80145d4:	6039      	str	r1, [r7, #0]
 80145d6:	1dfb      	adds	r3, r7, #7
 80145d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80145da:	1dfb      	adds	r3, r7, #7
 80145dc:	781b      	ldrb	r3, [r3, #0]
 80145de:	2b7f      	cmp	r3, #127	@ 0x7f
 80145e0:	d828      	bhi.n	8014634 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80145e2:	4a2f      	ldr	r2, [pc, #188]	@ (80146a0 <__NVIC_SetPriority+0xd4>)
 80145e4:	1dfb      	adds	r3, r7, #7
 80145e6:	781b      	ldrb	r3, [r3, #0]
 80145e8:	b25b      	sxtb	r3, r3
 80145ea:	089b      	lsrs	r3, r3, #2
 80145ec:	33c0      	adds	r3, #192	@ 0xc0
 80145ee:	009b      	lsls	r3, r3, #2
 80145f0:	589b      	ldr	r3, [r3, r2]
 80145f2:	1dfa      	adds	r2, r7, #7
 80145f4:	7812      	ldrb	r2, [r2, #0]
 80145f6:	0011      	movs	r1, r2
 80145f8:	2203      	movs	r2, #3
 80145fa:	400a      	ands	r2, r1
 80145fc:	00d2      	lsls	r2, r2, #3
 80145fe:	21ff      	movs	r1, #255	@ 0xff
 8014600:	4091      	lsls	r1, r2
 8014602:	000a      	movs	r2, r1
 8014604:	43d2      	mvns	r2, r2
 8014606:	401a      	ands	r2, r3
 8014608:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801460a:	683b      	ldr	r3, [r7, #0]
 801460c:	019b      	lsls	r3, r3, #6
 801460e:	22ff      	movs	r2, #255	@ 0xff
 8014610:	401a      	ands	r2, r3
 8014612:	1dfb      	adds	r3, r7, #7
 8014614:	781b      	ldrb	r3, [r3, #0]
 8014616:	0018      	movs	r0, r3
 8014618:	2303      	movs	r3, #3
 801461a:	4003      	ands	r3, r0
 801461c:	00db      	lsls	r3, r3, #3
 801461e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014620:	481f      	ldr	r0, [pc, #124]	@ (80146a0 <__NVIC_SetPriority+0xd4>)
 8014622:	1dfb      	adds	r3, r7, #7
 8014624:	781b      	ldrb	r3, [r3, #0]
 8014626:	b25b      	sxtb	r3, r3
 8014628:	089b      	lsrs	r3, r3, #2
 801462a:	430a      	orrs	r2, r1
 801462c:	33c0      	adds	r3, #192	@ 0xc0
 801462e:	009b      	lsls	r3, r3, #2
 8014630:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8014632:	e031      	b.n	8014698 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014634:	4a1b      	ldr	r2, [pc, #108]	@ (80146a4 <__NVIC_SetPriority+0xd8>)
 8014636:	1dfb      	adds	r3, r7, #7
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	0019      	movs	r1, r3
 801463c:	230f      	movs	r3, #15
 801463e:	400b      	ands	r3, r1
 8014640:	3b08      	subs	r3, #8
 8014642:	089b      	lsrs	r3, r3, #2
 8014644:	3306      	adds	r3, #6
 8014646:	009b      	lsls	r3, r3, #2
 8014648:	18d3      	adds	r3, r2, r3
 801464a:	3304      	adds	r3, #4
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	1dfa      	adds	r2, r7, #7
 8014650:	7812      	ldrb	r2, [r2, #0]
 8014652:	0011      	movs	r1, r2
 8014654:	2203      	movs	r2, #3
 8014656:	400a      	ands	r2, r1
 8014658:	00d2      	lsls	r2, r2, #3
 801465a:	21ff      	movs	r1, #255	@ 0xff
 801465c:	4091      	lsls	r1, r2
 801465e:	000a      	movs	r2, r1
 8014660:	43d2      	mvns	r2, r2
 8014662:	401a      	ands	r2, r3
 8014664:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	019b      	lsls	r3, r3, #6
 801466a:	22ff      	movs	r2, #255	@ 0xff
 801466c:	401a      	ands	r2, r3
 801466e:	1dfb      	adds	r3, r7, #7
 8014670:	781b      	ldrb	r3, [r3, #0]
 8014672:	0018      	movs	r0, r3
 8014674:	2303      	movs	r3, #3
 8014676:	4003      	ands	r3, r0
 8014678:	00db      	lsls	r3, r3, #3
 801467a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801467c:	4809      	ldr	r0, [pc, #36]	@ (80146a4 <__NVIC_SetPriority+0xd8>)
 801467e:	1dfb      	adds	r3, r7, #7
 8014680:	781b      	ldrb	r3, [r3, #0]
 8014682:	001c      	movs	r4, r3
 8014684:	230f      	movs	r3, #15
 8014686:	4023      	ands	r3, r4
 8014688:	3b08      	subs	r3, #8
 801468a:	089b      	lsrs	r3, r3, #2
 801468c:	430a      	orrs	r2, r1
 801468e:	3306      	adds	r3, #6
 8014690:	009b      	lsls	r3, r3, #2
 8014692:	18c3      	adds	r3, r0, r3
 8014694:	3304      	adds	r3, #4
 8014696:	601a      	str	r2, [r3, #0]
}
 8014698:	46c0      	nop			@ (mov r8, r8)
 801469a:	46bd      	mov	sp, r7
 801469c:	b003      	add	sp, #12
 801469e:	bd90      	pop	{r4, r7, pc}
 80146a0:	e000e100 	.word	0xe000e100
 80146a4:	e000ed00 	.word	0xe000ed00

080146a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80146ac:	f3bf 8f4f 	dsb	sy
}
 80146b0:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80146b2:	4b04      	ldr	r3, [pc, #16]	@ (80146c4 <__NVIC_SystemReset+0x1c>)
 80146b4:	4a04      	ldr	r2, [pc, #16]	@ (80146c8 <__NVIC_SystemReset+0x20>)
 80146b6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80146b8:	f3bf 8f4f 	dsb	sy
}
 80146bc:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80146be:	46c0      	nop			@ (mov r8, r8)
 80146c0:	e7fd      	b.n	80146be <__NVIC_SystemReset+0x16>
 80146c2:	46c0      	nop			@ (mov r8, r8)
 80146c4:	e000ed00 	.word	0xe000ed00
 80146c8:	05fa0004 	.word	0x05fa0004

080146cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b082      	sub	sp, #8
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	1e5a      	subs	r2, r3, #1
 80146d8:	2380      	movs	r3, #128	@ 0x80
 80146da:	045b      	lsls	r3, r3, #17
 80146dc:	429a      	cmp	r2, r3
 80146de:	d301      	bcc.n	80146e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80146e0:	2301      	movs	r3, #1
 80146e2:	e010      	b.n	8014706 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80146e4:	4b0a      	ldr	r3, [pc, #40]	@ (8014710 <SysTick_Config+0x44>)
 80146e6:	687a      	ldr	r2, [r7, #4]
 80146e8:	3a01      	subs	r2, #1
 80146ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80146ec:	2301      	movs	r3, #1
 80146ee:	425b      	negs	r3, r3
 80146f0:	2103      	movs	r1, #3
 80146f2:	0018      	movs	r0, r3
 80146f4:	f7ff ff6a 	bl	80145cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80146f8:	4b05      	ldr	r3, [pc, #20]	@ (8014710 <SysTick_Config+0x44>)
 80146fa:	2200      	movs	r2, #0
 80146fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80146fe:	4b04      	ldr	r3, [pc, #16]	@ (8014710 <SysTick_Config+0x44>)
 8014700:	2207      	movs	r2, #7
 8014702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8014704:	2300      	movs	r3, #0
}
 8014706:	0018      	movs	r0, r3
 8014708:	46bd      	mov	sp, r7
 801470a:	b002      	add	sp, #8
 801470c:	bd80      	pop	{r7, pc}
 801470e:	46c0      	nop			@ (mov r8, r8)
 8014710:	e000e010 	.word	0xe000e010

08014714 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8014714:	b580      	push	{r7, lr}
 8014716:	b084      	sub	sp, #16
 8014718:	af00      	add	r7, sp, #0
 801471a:	60b9      	str	r1, [r7, #8]
 801471c:	607a      	str	r2, [r7, #4]
 801471e:	210f      	movs	r1, #15
 8014720:	187b      	adds	r3, r7, r1
 8014722:	1c02      	adds	r2, r0, #0
 8014724:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8014726:	68ba      	ldr	r2, [r7, #8]
 8014728:	187b      	adds	r3, r7, r1
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	b25b      	sxtb	r3, r3
 801472e:	0011      	movs	r1, r2
 8014730:	0018      	movs	r0, r3
 8014732:	f7ff ff4b 	bl	80145cc <__NVIC_SetPriority>
}
 8014736:	46c0      	nop			@ (mov r8, r8)
 8014738:	46bd      	mov	sp, r7
 801473a:	b004      	add	sp, #16
 801473c:	bd80      	pop	{r7, pc}

0801473e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801473e:	b580      	push	{r7, lr}
 8014740:	b082      	sub	sp, #8
 8014742:	af00      	add	r7, sp, #0
 8014744:	0002      	movs	r2, r0
 8014746:	1dfb      	adds	r3, r7, #7
 8014748:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801474a:	1dfb      	adds	r3, r7, #7
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	b25b      	sxtb	r3, r3
 8014750:	0018      	movs	r0, r3
 8014752:	f7ff ff21 	bl	8014598 <__NVIC_EnableIRQ>
}
 8014756:	46c0      	nop			@ (mov r8, r8)
 8014758:	46bd      	mov	sp, r7
 801475a:	b002      	add	sp, #8
 801475c:	bd80      	pop	{r7, pc}

0801475e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 801475e:	b580      	push	{r7, lr}
 8014760:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8014762:	f7ff ffa1 	bl	80146a8 <__NVIC_SystemReset>

08014766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8014766:	b580      	push	{r7, lr}
 8014768:	b082      	sub	sp, #8
 801476a:	af00      	add	r7, sp, #0
 801476c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	0018      	movs	r0, r3
 8014772:	f7ff ffab 	bl	80146cc <SysTick_Config>
 8014776:	0003      	movs	r3, r0
}
 8014778:	0018      	movs	r0, r3
 801477a:	46bd      	mov	sp, r7
 801477c:	b002      	add	sp, #8
 801477e:	bd80      	pop	{r7, pc}

08014780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b084      	sub	sp, #16
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d101      	bne.n	8014792 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801478e:	2301      	movs	r3, #1
 8014790:	e061      	b.n	8014856 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	4a32      	ldr	r2, [pc, #200]	@ (8014860 <HAL_DMA_Init+0xe0>)
 8014798:	4694      	mov	ip, r2
 801479a:	4463      	add	r3, ip
 801479c:	2114      	movs	r1, #20
 801479e:	0018      	movs	r0, r3
 80147a0:	f7eb fd00 	bl	80001a4 <__udivsi3>
 80147a4:	0003      	movs	r3, r0
 80147a6:	009a      	lsls	r2, r3, #2
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	4a2d      	ldr	r2, [pc, #180]	@ (8014864 <HAL_DMA_Init+0xe4>)
 80147b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	2225      	movs	r2, #37	@ 0x25
 80147b6:	2102      	movs	r1, #2
 80147b8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	4a28      	ldr	r2, [pc, #160]	@ (8014868 <HAL_DMA_Init+0xe8>)
 80147c6:	4013      	ands	r3, r2
 80147c8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80147d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	691b      	ldr	r3, [r3, #16]
 80147d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80147de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	699b      	ldr	r3, [r3, #24]
 80147e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80147ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	6a1b      	ldr	r3, [r3, #32]
 80147f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80147f2:	68fa      	ldr	r2, [r7, #12]
 80147f4:	4313      	orrs	r3, r2
 80147f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	68fa      	ldr	r2, [r7, #12]
 80147fe:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	689a      	ldr	r2, [r3, #8]
 8014804:	2380      	movs	r3, #128	@ 0x80
 8014806:	01db      	lsls	r3, r3, #7
 8014808:	429a      	cmp	r2, r3
 801480a:	d018      	beq.n	801483e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 801480c:	4b17      	ldr	r3, [pc, #92]	@ (801486c <HAL_DMA_Init+0xec>)
 801480e:	681a      	ldr	r2, [r3, #0]
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014814:	211c      	movs	r1, #28
 8014816:	400b      	ands	r3, r1
 8014818:	210f      	movs	r1, #15
 801481a:	4099      	lsls	r1, r3
 801481c:	000b      	movs	r3, r1
 801481e:	43d9      	mvns	r1, r3
 8014820:	4b12      	ldr	r3, [pc, #72]	@ (801486c <HAL_DMA_Init+0xec>)
 8014822:	400a      	ands	r2, r1
 8014824:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8014826:	4b11      	ldr	r3, [pc, #68]	@ (801486c <HAL_DMA_Init+0xec>)
 8014828:	6819      	ldr	r1, [r3, #0]
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	685a      	ldr	r2, [r3, #4]
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014832:	201c      	movs	r0, #28
 8014834:	4003      	ands	r3, r0
 8014836:	409a      	lsls	r2, r3
 8014838:	4b0c      	ldr	r3, [pc, #48]	@ (801486c <HAL_DMA_Init+0xec>)
 801483a:	430a      	orrs	r2, r1
 801483c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	2200      	movs	r2, #0
 8014842:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2225      	movs	r2, #37	@ 0x25
 8014848:	2101      	movs	r1, #1
 801484a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	2224      	movs	r2, #36	@ 0x24
 8014850:	2100      	movs	r1, #0
 8014852:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014854:	2300      	movs	r3, #0
}
 8014856:	0018      	movs	r0, r3
 8014858:	46bd      	mov	sp, r7
 801485a:	b004      	add	sp, #16
 801485c:	bd80      	pop	{r7, pc}
 801485e:	46c0      	nop			@ (mov r8, r8)
 8014860:	bffdfff8 	.word	0xbffdfff8
 8014864:	40020000 	.word	0x40020000
 8014868:	ffff800f 	.word	0xffff800f
 801486c:	400200a8 	.word	0x400200a8

08014870 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b086      	sub	sp, #24
 8014874:	af00      	add	r7, sp, #0
 8014876:	60f8      	str	r0, [r7, #12]
 8014878:	60b9      	str	r1, [r7, #8]
 801487a:	607a      	str	r2, [r7, #4]
 801487c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801487e:	2317      	movs	r3, #23
 8014880:	18fb      	adds	r3, r7, r3
 8014882:	2200      	movs	r2, #0
 8014884:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	2224      	movs	r2, #36	@ 0x24
 801488a:	5c9b      	ldrb	r3, [r3, r2]
 801488c:	2b01      	cmp	r3, #1
 801488e:	d101      	bne.n	8014894 <HAL_DMA_Start_IT+0x24>
 8014890:	2302      	movs	r3, #2
 8014892:	e04f      	b.n	8014934 <HAL_DMA_Start_IT+0xc4>
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	2224      	movs	r2, #36	@ 0x24
 8014898:	2101      	movs	r1, #1
 801489a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	2225      	movs	r2, #37	@ 0x25
 80148a0:	5c9b      	ldrb	r3, [r3, r2]
 80148a2:	b2db      	uxtb	r3, r3
 80148a4:	2b01      	cmp	r3, #1
 80148a6:	d13a      	bne.n	801491e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	2225      	movs	r2, #37	@ 0x25
 80148ac:	2102      	movs	r1, #2
 80148ae:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	2200      	movs	r2, #0
 80148b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	681a      	ldr	r2, [r3, #0]
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	2101      	movs	r1, #1
 80148c2:	438a      	bics	r2, r1
 80148c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	687a      	ldr	r2, [r7, #4]
 80148ca:	68b9      	ldr	r1, [r7, #8]
 80148cc:	68f8      	ldr	r0, [r7, #12]
 80148ce:	f000 f976 	bl	8014bbe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d008      	beq.n	80148ec <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	681a      	ldr	r2, [r3, #0]
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	210e      	movs	r1, #14
 80148e6:	430a      	orrs	r2, r1
 80148e8:	601a      	str	r2, [r3, #0]
 80148ea:	e00f      	b.n	801490c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	681a      	ldr	r2, [r3, #0]
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	2104      	movs	r1, #4
 80148f8:	438a      	bics	r2, r1
 80148fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	681a      	ldr	r2, [r3, #0]
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	210a      	movs	r1, #10
 8014908:	430a      	orrs	r2, r1
 801490a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	681a      	ldr	r2, [r3, #0]
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	2101      	movs	r1, #1
 8014918:	430a      	orrs	r2, r1
 801491a:	601a      	str	r2, [r3, #0]
 801491c:	e007      	b.n	801492e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	2224      	movs	r2, #36	@ 0x24
 8014922:	2100      	movs	r1, #0
 8014924:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8014926:	2317      	movs	r3, #23
 8014928:	18fb      	adds	r3, r7, r3
 801492a:	2202      	movs	r2, #2
 801492c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 801492e:	2317      	movs	r3, #23
 8014930:	18fb      	adds	r3, r7, r3
 8014932:	781b      	ldrb	r3, [r3, #0]
}
 8014934:	0018      	movs	r0, r3
 8014936:	46bd      	mov	sp, r7
 8014938:	b006      	add	sp, #24
 801493a:	bd80      	pop	{r7, pc}

0801493c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b084      	sub	sp, #16
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014944:	230f      	movs	r3, #15
 8014946:	18fb      	adds	r3, r7, r3
 8014948:	2200      	movs	r2, #0
 801494a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	2225      	movs	r2, #37	@ 0x25
 8014950:	5c9b      	ldrb	r3, [r3, r2]
 8014952:	b2db      	uxtb	r3, r3
 8014954:	2b02      	cmp	r3, #2
 8014956:	d008      	beq.n	801496a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2204      	movs	r2, #4
 801495c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	2224      	movs	r2, #36	@ 0x24
 8014962:	2100      	movs	r1, #0
 8014964:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8014966:	2301      	movs	r3, #1
 8014968:	e024      	b.n	80149b4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	681a      	ldr	r2, [r3, #0]
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	210e      	movs	r1, #14
 8014976:	438a      	bics	r2, r1
 8014978:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	681a      	ldr	r2, [r3, #0]
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	2101      	movs	r1, #1
 8014986:	438a      	bics	r2, r1
 8014988:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801498e:	221c      	movs	r2, #28
 8014990:	401a      	ands	r2, r3
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014996:	2101      	movs	r1, #1
 8014998:	4091      	lsls	r1, r2
 801499a:	000a      	movs	r2, r1
 801499c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2225      	movs	r2, #37	@ 0x25
 80149a2:	2101      	movs	r1, #1
 80149a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	2224      	movs	r2, #36	@ 0x24
 80149aa:	2100      	movs	r1, #0
 80149ac:	5499      	strb	r1, [r3, r2]

    return status;
 80149ae:	230f      	movs	r3, #15
 80149b0:	18fb      	adds	r3, r7, r3
 80149b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80149b4:	0018      	movs	r0, r3
 80149b6:	46bd      	mov	sp, r7
 80149b8:	b004      	add	sp, #16
 80149ba:	bd80      	pop	{r7, pc}

080149bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b084      	sub	sp, #16
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80149c4:	210f      	movs	r1, #15
 80149c6:	187b      	adds	r3, r7, r1
 80149c8:	2200      	movs	r2, #0
 80149ca:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	2225      	movs	r2, #37	@ 0x25
 80149d0:	5c9b      	ldrb	r3, [r3, r2]
 80149d2:	b2db      	uxtb	r3, r3
 80149d4:	2b02      	cmp	r3, #2
 80149d6:	d006      	beq.n	80149e6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2204      	movs	r2, #4
 80149dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80149de:	187b      	adds	r3, r7, r1
 80149e0:	2201      	movs	r2, #1
 80149e2:	701a      	strb	r2, [r3, #0]
 80149e4:	e02a      	b.n	8014a3c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	681a      	ldr	r2, [r3, #0]
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	210e      	movs	r1, #14
 80149f2:	438a      	bics	r2, r1
 80149f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	681a      	ldr	r2, [r3, #0]
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	2101      	movs	r1, #1
 8014a02:	438a      	bics	r2, r1
 8014a04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014a0a:	221c      	movs	r2, #28
 8014a0c:	401a      	ands	r2, r3
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a12:	2101      	movs	r1, #1
 8014a14:	4091      	lsls	r1, r2
 8014a16:	000a      	movs	r2, r1
 8014a18:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2225      	movs	r2, #37	@ 0x25
 8014a1e:	2101      	movs	r1, #1
 8014a20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2224      	movs	r2, #36	@ 0x24
 8014a26:	2100      	movs	r1, #0
 8014a28:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d004      	beq.n	8014a3c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a36:	687a      	ldr	r2, [r7, #4]
 8014a38:	0010      	movs	r0, r2
 8014a3a:	4798      	blx	r3
    }
  }
  return status;
 8014a3c:	230f      	movs	r3, #15
 8014a3e:	18fb      	adds	r3, r7, r3
 8014a40:	781b      	ldrb	r3, [r3, #0]
}
 8014a42:	0018      	movs	r0, r3
 8014a44:	46bd      	mov	sp, r7
 8014a46:	b004      	add	sp, #16
 8014a48:	bd80      	pop	{r7, pc}

08014a4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8014a4a:	b580      	push	{r7, lr}
 8014a4c:	b084      	sub	sp, #16
 8014a4e:	af00      	add	r7, sp, #0
 8014a50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014a66:	221c      	movs	r2, #28
 8014a68:	4013      	ands	r3, r2
 8014a6a:	2204      	movs	r2, #4
 8014a6c:	409a      	lsls	r2, r3
 8014a6e:	0013      	movs	r3, r2
 8014a70:	68fa      	ldr	r2, [r7, #12]
 8014a72:	4013      	ands	r3, r2
 8014a74:	d026      	beq.n	8014ac4 <HAL_DMA_IRQHandler+0x7a>
 8014a76:	68bb      	ldr	r3, [r7, #8]
 8014a78:	2204      	movs	r2, #4
 8014a7a:	4013      	ands	r3, r2
 8014a7c:	d022      	beq.n	8014ac4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	2220      	movs	r2, #32
 8014a86:	4013      	ands	r3, r2
 8014a88:	d107      	bne.n	8014a9a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	681a      	ldr	r2, [r3, #0]
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	2104      	movs	r1, #4
 8014a96:	438a      	bics	r2, r1
 8014a98:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014a9e:	221c      	movs	r2, #28
 8014aa0:	401a      	ands	r2, r3
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014aa6:	2104      	movs	r1, #4
 8014aa8:	4091      	lsls	r1, r2
 8014aaa:	000a      	movs	r2, r1
 8014aac:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d100      	bne.n	8014ab8 <HAL_DMA_IRQHandler+0x6e>
 8014ab6:	e071      	b.n	8014b9c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014abc:	687a      	ldr	r2, [r7, #4]
 8014abe:	0010      	movs	r0, r2
 8014ac0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8014ac2:	e06b      	b.n	8014b9c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ac8:	221c      	movs	r2, #28
 8014aca:	4013      	ands	r3, r2
 8014acc:	2202      	movs	r2, #2
 8014ace:	409a      	lsls	r2, r3
 8014ad0:	0013      	movs	r3, r2
 8014ad2:	68fa      	ldr	r2, [r7, #12]
 8014ad4:	4013      	ands	r3, r2
 8014ad6:	d02d      	beq.n	8014b34 <HAL_DMA_IRQHandler+0xea>
 8014ad8:	68bb      	ldr	r3, [r7, #8]
 8014ada:	2202      	movs	r2, #2
 8014adc:	4013      	ands	r3, r2
 8014ade:	d029      	beq.n	8014b34 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	2220      	movs	r2, #32
 8014ae8:	4013      	ands	r3, r2
 8014aea:	d10b      	bne.n	8014b04 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	681a      	ldr	r2, [r3, #0]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	210a      	movs	r1, #10
 8014af8:	438a      	bics	r2, r1
 8014afa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	2225      	movs	r2, #37	@ 0x25
 8014b00:	2101      	movs	r1, #1
 8014b02:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014b08:	221c      	movs	r2, #28
 8014b0a:	401a      	ands	r2, r3
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b10:	2102      	movs	r1, #2
 8014b12:	4091      	lsls	r1, r2
 8014b14:	000a      	movs	r2, r1
 8014b16:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2224      	movs	r2, #36	@ 0x24
 8014b1c:	2100      	movs	r1, #0
 8014b1e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d039      	beq.n	8014b9c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b2c:	687a      	ldr	r2, [r7, #4]
 8014b2e:	0010      	movs	r0, r2
 8014b30:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8014b32:	e033      	b.n	8014b9c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014b38:	221c      	movs	r2, #28
 8014b3a:	4013      	ands	r3, r2
 8014b3c:	2208      	movs	r2, #8
 8014b3e:	409a      	lsls	r2, r3
 8014b40:	0013      	movs	r3, r2
 8014b42:	68fa      	ldr	r2, [r7, #12]
 8014b44:	4013      	ands	r3, r2
 8014b46:	d02a      	beq.n	8014b9e <HAL_DMA_IRQHandler+0x154>
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	2208      	movs	r2, #8
 8014b4c:	4013      	ands	r3, r2
 8014b4e:	d026      	beq.n	8014b9e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	681a      	ldr	r2, [r3, #0]
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	210e      	movs	r1, #14
 8014b5c:	438a      	bics	r2, r1
 8014b5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014b64:	221c      	movs	r2, #28
 8014b66:	401a      	ands	r2, r3
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b6c:	2101      	movs	r1, #1
 8014b6e:	4091      	lsls	r1, r2
 8014b70:	000a      	movs	r2, r1
 8014b72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	2201      	movs	r2, #1
 8014b78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	2225      	movs	r2, #37	@ 0x25
 8014b7e:	2101      	movs	r1, #1
 8014b80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	2224      	movs	r2, #36	@ 0x24
 8014b86:	2100      	movs	r1, #0
 8014b88:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d005      	beq.n	8014b9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b96:	687a      	ldr	r2, [r7, #4]
 8014b98:	0010      	movs	r0, r2
 8014b9a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8014b9c:	46c0      	nop			@ (mov r8, r8)
 8014b9e:	46c0      	nop			@ (mov r8, r8)
}
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	b004      	add	sp, #16
 8014ba4:	bd80      	pop	{r7, pc}

08014ba6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8014ba6:	b580      	push	{r7, lr}
 8014ba8:	b082      	sub	sp, #8
 8014baa:	af00      	add	r7, sp, #0
 8014bac:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	2225      	movs	r2, #37	@ 0x25
 8014bb2:	5c9b      	ldrb	r3, [r3, r2]
 8014bb4:	b2db      	uxtb	r3, r3
}
 8014bb6:	0018      	movs	r0, r3
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	b002      	add	sp, #8
 8014bbc:	bd80      	pop	{r7, pc}

08014bbe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014bbe:	b580      	push	{r7, lr}
 8014bc0:	b084      	sub	sp, #16
 8014bc2:	af00      	add	r7, sp, #0
 8014bc4:	60f8      	str	r0, [r7, #12]
 8014bc6:	60b9      	str	r1, [r7, #8]
 8014bc8:	607a      	str	r2, [r7, #4]
 8014bca:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014bd0:	221c      	movs	r2, #28
 8014bd2:	401a      	ands	r2, r3
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014bd8:	2101      	movs	r1, #1
 8014bda:	4091      	lsls	r1, r2
 8014bdc:	000a      	movs	r2, r1
 8014bde:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	683a      	ldr	r2, [r7, #0]
 8014be6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	689b      	ldr	r3, [r3, #8]
 8014bec:	2b10      	cmp	r3, #16
 8014bee:	d108      	bne.n	8014c02 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	687a      	ldr	r2, [r7, #4]
 8014bf6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	68ba      	ldr	r2, [r7, #8]
 8014bfe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8014c00:	e007      	b.n	8014c12 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	68ba      	ldr	r2, [r7, #8]
 8014c08:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	687a      	ldr	r2, [r7, #4]
 8014c10:	60da      	str	r2, [r3, #12]
}
 8014c12:	46c0      	nop			@ (mov r8, r8)
 8014c14:	46bd      	mov	sp, r7
 8014c16:	b004      	add	sp, #16
 8014c18:	bd80      	pop	{r7, pc}
	...

08014c1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b084      	sub	sp, #16
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8014c24:	f7ff f8d2 	bl	8013dcc <HAL_GetTick>
 8014c28:	0003      	movs	r3, r0
 8014c2a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8014c2c:	e00f      	b.n	8014c4e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	3301      	adds	r3, #1
 8014c32:	d00c      	beq.n	8014c4e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d007      	beq.n	8014c4a <FLASH_WaitForLastOperation+0x2e>
 8014c3a:	f7ff f8c7 	bl	8013dcc <HAL_GetTick>
 8014c3e:	0002      	movs	r2, r0
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	1ad3      	subs	r3, r2, r3
 8014c44:	687a      	ldr	r2, [r7, #4]
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d201      	bcs.n	8014c4e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8014c4a:	2303      	movs	r3, #3
 8014c4c:	e052      	b.n	8014cf4 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8014c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8014cfc <FLASH_WaitForLastOperation+0xe0>)
 8014c50:	699b      	ldr	r3, [r3, #24]
 8014c52:	2201      	movs	r2, #1
 8014c54:	4013      	ands	r3, r2
 8014c56:	2b01      	cmp	r3, #1
 8014c58:	d0e9      	beq.n	8014c2e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8014c5a:	4b28      	ldr	r3, [pc, #160]	@ (8014cfc <FLASH_WaitForLastOperation+0xe0>)
 8014c5c:	699b      	ldr	r3, [r3, #24]
 8014c5e:	2202      	movs	r2, #2
 8014c60:	4013      	ands	r3, r2
 8014c62:	2b02      	cmp	r3, #2
 8014c64:	d102      	bne.n	8014c6c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8014c66:	4b25      	ldr	r3, [pc, #148]	@ (8014cfc <FLASH_WaitForLastOperation+0xe0>)
 8014c68:	2202      	movs	r2, #2
 8014c6a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8014c6c:	4b23      	ldr	r3, [pc, #140]	@ (8014cfc <FLASH_WaitForLastOperation+0xe0>)
 8014c6e:	699a      	ldr	r2, [r3, #24]
 8014c70:	2380      	movs	r3, #128	@ 0x80
 8014c72:	005b      	lsls	r3, r3, #1
 8014c74:	401a      	ands	r2, r3
 8014c76:	2380      	movs	r3, #128	@ 0x80
 8014c78:	005b      	lsls	r3, r3, #1
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d035      	beq.n	8014cea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8014c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8014cfc <FLASH_WaitForLastOperation+0xe0>)
 8014c80:	699a      	ldr	r2, [r3, #24]
 8014c82:	2380      	movs	r3, #128	@ 0x80
 8014c84:	009b      	lsls	r3, r3, #2
 8014c86:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8014c88:	2380      	movs	r3, #128	@ 0x80
 8014c8a:	009b      	lsls	r3, r3, #2
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d02c      	beq.n	8014cea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8014c90:	4b1a      	ldr	r3, [pc, #104]	@ (8014cfc <FLASH_WaitForLastOperation+0xe0>)
 8014c92:	699a      	ldr	r2, [r3, #24]
 8014c94:	2380      	movs	r3, #128	@ 0x80
 8014c96:	00db      	lsls	r3, r3, #3
 8014c98:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8014c9a:	2380      	movs	r3, #128	@ 0x80
 8014c9c:	00db      	lsls	r3, r3, #3
 8014c9e:	429a      	cmp	r2, r3
 8014ca0:	d023      	beq.n	8014cea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8014ca2:	4b16      	ldr	r3, [pc, #88]	@ (8014cfc <FLASH_WaitForLastOperation+0xe0>)
 8014ca4:	699a      	ldr	r2, [r3, #24]
 8014ca6:	2380      	movs	r3, #128	@ 0x80
 8014ca8:	011b      	lsls	r3, r3, #4
 8014caa:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8014cac:	2380      	movs	r3, #128	@ 0x80
 8014cae:	011b      	lsls	r3, r3, #4
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	d01a      	beq.n	8014cea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014cb4:	4b11      	ldr	r3, [pc, #68]	@ (8014cfc <FLASH_WaitForLastOperation+0xe0>)
 8014cb6:	699a      	ldr	r2, [r3, #24]
 8014cb8:	2380      	movs	r3, #128	@ 0x80
 8014cba:	019b      	lsls	r3, r3, #6
 8014cbc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8014cbe:	2380      	movs	r3, #128	@ 0x80
 8014cc0:	019b      	lsls	r3, r3, #6
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d011      	beq.n	8014cea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8014cfc <FLASH_WaitForLastOperation+0xe0>)
 8014cc8:	699a      	ldr	r2, [r3, #24]
 8014cca:	2380      	movs	r3, #128	@ 0x80
 8014ccc:	029b      	lsls	r3, r3, #10
 8014cce:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014cd0:	2380      	movs	r3, #128	@ 0x80
 8014cd2:	029b      	lsls	r3, r3, #10
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	d008      	beq.n	8014cea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8014cd8:	4b08      	ldr	r3, [pc, #32]	@ (8014cfc <FLASH_WaitForLastOperation+0xe0>)
 8014cda:	699a      	ldr	r2, [r3, #24]
 8014cdc:	2380      	movs	r3, #128	@ 0x80
 8014cde:	025b      	lsls	r3, r3, #9
 8014ce0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014ce2:	2380      	movs	r3, #128	@ 0x80
 8014ce4:	025b      	lsls	r3, r3, #9
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d103      	bne.n	8014cf2 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8014cea:	f000 f809 	bl	8014d00 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8014cee:	2301      	movs	r3, #1
 8014cf0:	e000      	b.n	8014cf4 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8014cf2:	2300      	movs	r3, #0
}
 8014cf4:	0018      	movs	r0, r3
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	b004      	add	sp, #16
 8014cfa:	bd80      	pop	{r7, pc}
 8014cfc:	40022000 	.word	0x40022000

08014d00 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b082      	sub	sp, #8
 8014d04:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8014d06:	2300      	movs	r3, #0
 8014d08:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8014d0a:	4b49      	ldr	r3, [pc, #292]	@ (8014e30 <FLASH_SetErrorCode+0x130>)
 8014d0c:	699a      	ldr	r2, [r3, #24]
 8014d0e:	2380      	movs	r3, #128	@ 0x80
 8014d10:	005b      	lsls	r3, r3, #1
 8014d12:	401a      	ands	r2, r3
 8014d14:	2380      	movs	r3, #128	@ 0x80
 8014d16:	005b      	lsls	r3, r3, #1
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d10a      	bne.n	8014d32 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8014d1c:	4b45      	ldr	r3, [pc, #276]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014d1e:	695b      	ldr	r3, [r3, #20]
 8014d20:	2202      	movs	r2, #2
 8014d22:	431a      	orrs	r2, r3
 8014d24:	4b43      	ldr	r3, [pc, #268]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014d26:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	2280      	movs	r2, #128	@ 0x80
 8014d2c:	0052      	lsls	r2, r2, #1
 8014d2e:	4313      	orrs	r3, r2
 8014d30:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8014d32:	4b3f      	ldr	r3, [pc, #252]	@ (8014e30 <FLASH_SetErrorCode+0x130>)
 8014d34:	699a      	ldr	r2, [r3, #24]
 8014d36:	2380      	movs	r3, #128	@ 0x80
 8014d38:	009b      	lsls	r3, r3, #2
 8014d3a:	401a      	ands	r2, r3
 8014d3c:	2380      	movs	r3, #128	@ 0x80
 8014d3e:	009b      	lsls	r3, r3, #2
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d10a      	bne.n	8014d5a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8014d44:	4b3b      	ldr	r3, [pc, #236]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014d46:	695b      	ldr	r3, [r3, #20]
 8014d48:	2201      	movs	r2, #1
 8014d4a:	431a      	orrs	r2, r3
 8014d4c:	4b39      	ldr	r3, [pc, #228]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014d4e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	2280      	movs	r2, #128	@ 0x80
 8014d54:	0092      	lsls	r2, r2, #2
 8014d56:	4313      	orrs	r3, r2
 8014d58:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8014d5a:	4b35      	ldr	r3, [pc, #212]	@ (8014e30 <FLASH_SetErrorCode+0x130>)
 8014d5c:	699a      	ldr	r2, [r3, #24]
 8014d5e:	2380      	movs	r3, #128	@ 0x80
 8014d60:	00db      	lsls	r3, r3, #3
 8014d62:	401a      	ands	r2, r3
 8014d64:	2380      	movs	r3, #128	@ 0x80
 8014d66:	00db      	lsls	r3, r3, #3
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	d10a      	bne.n	8014d82 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8014d6c:	4b31      	ldr	r3, [pc, #196]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014d6e:	695b      	ldr	r3, [r3, #20]
 8014d70:	2208      	movs	r2, #8
 8014d72:	431a      	orrs	r2, r3
 8014d74:	4b2f      	ldr	r3, [pc, #188]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014d76:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2280      	movs	r2, #128	@ 0x80
 8014d7c:	00d2      	lsls	r2, r2, #3
 8014d7e:	4313      	orrs	r3, r2
 8014d80:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8014d82:	4b2b      	ldr	r3, [pc, #172]	@ (8014e30 <FLASH_SetErrorCode+0x130>)
 8014d84:	699a      	ldr	r2, [r3, #24]
 8014d86:	2380      	movs	r3, #128	@ 0x80
 8014d88:	011b      	lsls	r3, r3, #4
 8014d8a:	401a      	ands	r2, r3
 8014d8c:	2380      	movs	r3, #128	@ 0x80
 8014d8e:	011b      	lsls	r3, r3, #4
 8014d90:	429a      	cmp	r2, r3
 8014d92:	d10a      	bne.n	8014daa <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8014d94:	4b27      	ldr	r3, [pc, #156]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014d96:	695b      	ldr	r3, [r3, #20]
 8014d98:	2204      	movs	r2, #4
 8014d9a:	431a      	orrs	r2, r3
 8014d9c:	4b25      	ldr	r3, [pc, #148]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014d9e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2280      	movs	r2, #128	@ 0x80
 8014da4:	0112      	lsls	r2, r2, #4
 8014da6:	4313      	orrs	r3, r2
 8014da8:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8014daa:	4b21      	ldr	r3, [pc, #132]	@ (8014e30 <FLASH_SetErrorCode+0x130>)
 8014dac:	699a      	ldr	r2, [r3, #24]
 8014dae:	2380      	movs	r3, #128	@ 0x80
 8014db0:	019b      	lsls	r3, r3, #6
 8014db2:	401a      	ands	r2, r3
 8014db4:	2380      	movs	r3, #128	@ 0x80
 8014db6:	019b      	lsls	r3, r3, #6
 8014db8:	429a      	cmp	r2, r3
 8014dba:	d10a      	bne.n	8014dd2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8014dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014dbe:	695b      	ldr	r3, [r3, #20]
 8014dc0:	2210      	movs	r2, #16
 8014dc2:	431a      	orrs	r2, r3
 8014dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014dc6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	2280      	movs	r2, #128	@ 0x80
 8014dcc:	0192      	lsls	r2, r2, #6
 8014dce:	4313      	orrs	r3, r2
 8014dd0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8014dd2:	4b17      	ldr	r3, [pc, #92]	@ (8014e30 <FLASH_SetErrorCode+0x130>)
 8014dd4:	699a      	ldr	r2, [r3, #24]
 8014dd6:	2380      	movs	r3, #128	@ 0x80
 8014dd8:	029b      	lsls	r3, r3, #10
 8014dda:	401a      	ands	r2, r3
 8014ddc:	2380      	movs	r3, #128	@ 0x80
 8014dde:	029b      	lsls	r3, r3, #10
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d109      	bne.n	8014df8 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8014de4:	4b13      	ldr	r3, [pc, #76]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014de6:	695b      	ldr	r3, [r3, #20]
 8014de8:	2220      	movs	r2, #32
 8014dea:	431a      	orrs	r2, r3
 8014dec:	4b11      	ldr	r3, [pc, #68]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014dee:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2220      	movs	r2, #32
 8014df4:	4313      	orrs	r3, r2
 8014df6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8014df8:	4b0d      	ldr	r3, [pc, #52]	@ (8014e30 <FLASH_SetErrorCode+0x130>)
 8014dfa:	699a      	ldr	r2, [r3, #24]
 8014dfc:	2380      	movs	r3, #128	@ 0x80
 8014dfe:	025b      	lsls	r3, r3, #9
 8014e00:	401a      	ands	r2, r3
 8014e02:	2380      	movs	r3, #128	@ 0x80
 8014e04:	025b      	lsls	r3, r3, #9
 8014e06:	429a      	cmp	r2, r3
 8014e08:	d10a      	bne.n	8014e20 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8014e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014e0c:	695b      	ldr	r3, [r3, #20]
 8014e0e:	2240      	movs	r2, #64	@ 0x40
 8014e10:	431a      	orrs	r2, r3
 8014e12:	4b08      	ldr	r3, [pc, #32]	@ (8014e34 <FLASH_SetErrorCode+0x134>)
 8014e14:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	2280      	movs	r2, #128	@ 0x80
 8014e1a:	0252      	lsls	r2, r2, #9
 8014e1c:	4313      	orrs	r3, r2
 8014e1e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8014e20:	4b03      	ldr	r3, [pc, #12]	@ (8014e30 <FLASH_SetErrorCode+0x130>)
 8014e22:	687a      	ldr	r2, [r7, #4]
 8014e24:	619a      	str	r2, [r3, #24]
}  
 8014e26:	46c0      	nop			@ (mov r8, r8)
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	b002      	add	sp, #8
 8014e2c:	bd80      	pop	{r7, pc}
 8014e2e:	46c0      	nop			@ (mov r8, r8)
 8014e30:	40022000 	.word	0x40022000
 8014e34:	2000222c 	.word	0x2000222c

08014e38 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b084      	sub	sp, #16
 8014e3c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8014e3e:	4b12      	ldr	r3, [pc, #72]	@ (8014e88 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014e40:	685b      	ldr	r3, [r3, #4]
 8014e42:	2201      	movs	r2, #1
 8014e44:	4013      	ands	r3, r2
 8014e46:	d019      	beq.n	8014e7c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e48:	f3ef 8310 	mrs	r3, PRIMASK
 8014e4c:	607b      	str	r3, [r7, #4]
  return(result);
 8014e4e:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8014e50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8014e52:	b672      	cpsid	i
}
 8014e54:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8014e56:	4b0c      	ldr	r3, [pc, #48]	@ (8014e88 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014e58:	4a0c      	ldr	r2, [pc, #48]	@ (8014e8c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8014e5a:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8014e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8014e88 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8014e90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8014e60:	60da      	str	r2, [r3, #12]
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e66:	68bb      	ldr	r3, [r7, #8]
 8014e68:	f383 8810 	msr	PRIMASK, r3
}
 8014e6c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8014e6e:	4b06      	ldr	r3, [pc, #24]	@ (8014e88 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014e70:	685b      	ldr	r3, [r3, #4]
 8014e72:	2201      	movs	r2, #1
 8014e74:	4013      	ands	r3, r2
 8014e76:	d001      	beq.n	8014e7c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8014e78:	2301      	movs	r3, #1
 8014e7a:	e000      	b.n	8014e7e <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8014e7c:	2300      	movs	r3, #0
}
 8014e7e:	0018      	movs	r0, r3
 8014e80:	46bd      	mov	sp, r7
 8014e82:	b004      	add	sp, #16
 8014e84:	bd80      	pop	{r7, pc}
 8014e86:	46c0      	nop			@ (mov r8, r8)
 8014e88:	40022000 	.word	0x40022000
 8014e8c:	89abcdef 	.word	0x89abcdef
 8014e90:	02030405 	.word	0x02030405

08014e94 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8014e98:	4b04      	ldr	r3, [pc, #16]	@ (8014eac <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8014e9a:	685a      	ldr	r2, [r3, #4]
 8014e9c:	4b03      	ldr	r3, [pc, #12]	@ (8014eac <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8014e9e:	2101      	movs	r1, #1
 8014ea0:	430a      	orrs	r2, r1
 8014ea2:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8014ea4:	2300      	movs	r3, #0
}
 8014ea6:	0018      	movs	r0, r3
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}
 8014eac:	40022000 	.word	0x40022000

08014eb0 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8014eb0:	b5b0      	push	{r4, r5, r7, lr}
 8014eb2:	b084      	sub	sp, #16
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014eb8:	250f      	movs	r5, #15
 8014eba:	197b      	adds	r3, r7, r5
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014ec0:	197c      	adds	r4, r7, r5
 8014ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8014f00 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8014ec4:	0018      	movs	r0, r3
 8014ec6:	f7ff fea9 	bl	8014c1c <FLASH_WaitForLastOperation>
 8014eca:	0003      	movs	r3, r0
 8014ecc:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8014ece:	0029      	movs	r1, r5
 8014ed0:	187b      	adds	r3, r7, r1
 8014ed2:	781b      	ldrb	r3, [r3, #0]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d10c      	bne.n	8014ef2 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8014ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8014f04 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8014eda:	2200      	movs	r2, #0
 8014edc:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014ee4:	187c      	adds	r4, r7, r1
 8014ee6:	4b06      	ldr	r3, [pc, #24]	@ (8014f00 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8014ee8:	0018      	movs	r0, r3
 8014eea:	f7ff fe97 	bl	8014c1c <FLASH_WaitForLastOperation>
 8014eee:	0003      	movs	r3, r0
 8014ef0:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8014ef2:	230f      	movs	r3, #15
 8014ef4:	18fb      	adds	r3, r7, r3
 8014ef6:	781b      	ldrb	r3, [r3, #0]
}  
 8014ef8:	0018      	movs	r0, r3
 8014efa:	46bd      	mov	sp, r7
 8014efc:	b004      	add	sp, #16
 8014efe:	bdb0      	pop	{r4, r5, r7, pc}
 8014f00:	0000c350 	.word	0x0000c350
 8014f04:	2000222c 	.word	0x2000222c

08014f08 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8014f08:	b5b0      	push	{r4, r5, r7, lr}
 8014f0a:	b086      	sub	sp, #24
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	60f8      	str	r0, [r7, #12]
 8014f10:	60b9      	str	r1, [r7, #8]
 8014f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8014f14:	2317      	movs	r3, #23
 8014f16:	18fb      	adds	r3, r7, r3
 8014f18:	2201      	movs	r2, #1
 8014f1a:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8014f1c:	4b24      	ldr	r3, [pc, #144]	@ (8014fb0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014f1e:	7c1b      	ldrb	r3, [r3, #16]
 8014f20:	2b01      	cmp	r3, #1
 8014f22:	d101      	bne.n	8014f28 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8014f24:	2302      	movs	r3, #2
 8014f26:	e03e      	b.n	8014fa6 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8014f28:	4b21      	ldr	r3, [pc, #132]	@ (8014fb0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014f2a:	2201      	movs	r2, #1
 8014f2c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014f2e:	2517      	movs	r5, #23
 8014f30:	197c      	adds	r4, r7, r5
 8014f32:	4b20      	ldr	r3, [pc, #128]	@ (8014fb4 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8014f34:	0018      	movs	r0, r3
 8014f36:	f7ff fe71 	bl	8014c1c <FLASH_WaitForLastOperation>
 8014f3a:	0003      	movs	r3, r0
 8014f3c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8014f3e:	197b      	adds	r3, r7, r5
 8014f40:	781b      	ldrb	r3, [r3, #0]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d129      	bne.n	8014f9a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8014f46:	4b1a      	ldr	r3, [pc, #104]	@ (8014fb0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014f48:	2200      	movs	r2, #0
 8014f4a:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	2b02      	cmp	r3, #2
 8014f50:	d103      	bne.n	8014f5a <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8014f52:	68bb      	ldr	r3, [r7, #8]
 8014f54:	687a      	ldr	r2, [r7, #4]
 8014f56:	601a      	str	r2, [r3, #0]
 8014f58:	e013      	b.n	8014f82 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	2b01      	cmp	r3, #1
 8014f5e:	d104      	bne.n	8014f6a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	687a      	ldr	r2, [r7, #4]
 8014f64:	b292      	uxth	r2, r2
 8014f66:	801a      	strh	r2, [r3, #0]
 8014f68:	e00b      	b.n	8014f82 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d104      	bne.n	8014f7a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	687a      	ldr	r2, [r7, #4]
 8014f74:	b2d2      	uxtb	r2, r2
 8014f76:	701a      	strb	r2, [r3, #0]
 8014f78:	e003      	b.n	8014f82 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8014f7a:	2317      	movs	r3, #23
 8014f7c:	18fb      	adds	r3, r7, r3
 8014f7e:	2201      	movs	r2, #1
 8014f80:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8014f82:	2217      	movs	r2, #23
 8014f84:	18bb      	adds	r3, r7, r2
 8014f86:	781b      	ldrb	r3, [r3, #0]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d106      	bne.n	8014f9a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014f8c:	18bc      	adds	r4, r7, r2
 8014f8e:	4b09      	ldr	r3, [pc, #36]	@ (8014fb4 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8014f90:	0018      	movs	r0, r3
 8014f92:	f7ff fe43 	bl	8014c1c <FLASH_WaitForLastOperation>
 8014f96:	0003      	movs	r3, r0
 8014f98:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8014f9a:	4b05      	ldr	r3, [pc, #20]	@ (8014fb0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	741a      	strb	r2, [r3, #16]

  return status;
 8014fa0:	2317      	movs	r3, #23
 8014fa2:	18fb      	adds	r3, r7, r3
 8014fa4:	781b      	ldrb	r3, [r3, #0]
}
 8014fa6:	0018      	movs	r0, r3
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	b006      	add	sp, #24
 8014fac:	bdb0      	pop	{r4, r5, r7, pc}
 8014fae:	46c0      	nop			@ (mov r8, r8)
 8014fb0:	2000222c 	.word	0x2000222c
 8014fb4:	0000c350 	.word	0x0000c350

08014fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b086      	sub	sp, #24
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8014fce:	e155      	b.n	801527c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	2101      	movs	r1, #1
 8014fd6:	697a      	ldr	r2, [r7, #20]
 8014fd8:	4091      	lsls	r1, r2
 8014fda:	000a      	movs	r2, r1
 8014fdc:	4013      	ands	r3, r2
 8014fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d100      	bne.n	8014fe8 <HAL_GPIO_Init+0x30>
 8014fe6:	e146      	b.n	8015276 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	2203      	movs	r2, #3
 8014fee:	4013      	ands	r3, r2
 8014ff0:	2b01      	cmp	r3, #1
 8014ff2:	d005      	beq.n	8015000 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	685b      	ldr	r3, [r3, #4]
 8014ff8:	2203      	movs	r2, #3
 8014ffa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8014ffc:	2b02      	cmp	r3, #2
 8014ffe:	d130      	bne.n	8015062 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	689b      	ldr	r3, [r3, #8]
 8015004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8015006:	697b      	ldr	r3, [r7, #20]
 8015008:	005b      	lsls	r3, r3, #1
 801500a:	2203      	movs	r2, #3
 801500c:	409a      	lsls	r2, r3
 801500e:	0013      	movs	r3, r2
 8015010:	43da      	mvns	r2, r3
 8015012:	693b      	ldr	r3, [r7, #16]
 8015014:	4013      	ands	r3, r2
 8015016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	68da      	ldr	r2, [r3, #12]
 801501c:	697b      	ldr	r3, [r7, #20]
 801501e:	005b      	lsls	r3, r3, #1
 8015020:	409a      	lsls	r2, r3
 8015022:	0013      	movs	r3, r2
 8015024:	693a      	ldr	r2, [r7, #16]
 8015026:	4313      	orrs	r3, r2
 8015028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	693a      	ldr	r2, [r7, #16]
 801502e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015036:	2201      	movs	r2, #1
 8015038:	697b      	ldr	r3, [r7, #20]
 801503a:	409a      	lsls	r2, r3
 801503c:	0013      	movs	r3, r2
 801503e:	43da      	mvns	r2, r3
 8015040:	693b      	ldr	r3, [r7, #16]
 8015042:	4013      	ands	r3, r2
 8015044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	685b      	ldr	r3, [r3, #4]
 801504a:	091b      	lsrs	r3, r3, #4
 801504c:	2201      	movs	r2, #1
 801504e:	401a      	ands	r2, r3
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	409a      	lsls	r2, r3
 8015054:	0013      	movs	r3, r2
 8015056:	693a      	ldr	r2, [r7, #16]
 8015058:	4313      	orrs	r3, r2
 801505a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	693a      	ldr	r2, [r7, #16]
 8015060:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015062:	683b      	ldr	r3, [r7, #0]
 8015064:	685b      	ldr	r3, [r3, #4]
 8015066:	2203      	movs	r2, #3
 8015068:	4013      	ands	r3, r2
 801506a:	2b03      	cmp	r3, #3
 801506c:	d017      	beq.n	801509e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	68db      	ldr	r3, [r3, #12]
 8015072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015074:	697b      	ldr	r3, [r7, #20]
 8015076:	005b      	lsls	r3, r3, #1
 8015078:	2203      	movs	r2, #3
 801507a:	409a      	lsls	r2, r3
 801507c:	0013      	movs	r3, r2
 801507e:	43da      	mvns	r2, r3
 8015080:	693b      	ldr	r3, [r7, #16]
 8015082:	4013      	ands	r3, r2
 8015084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015086:	683b      	ldr	r3, [r7, #0]
 8015088:	689a      	ldr	r2, [r3, #8]
 801508a:	697b      	ldr	r3, [r7, #20]
 801508c:	005b      	lsls	r3, r3, #1
 801508e:	409a      	lsls	r2, r3
 8015090:	0013      	movs	r3, r2
 8015092:	693a      	ldr	r2, [r7, #16]
 8015094:	4313      	orrs	r3, r2
 8015096:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	693a      	ldr	r2, [r7, #16]
 801509c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801509e:	683b      	ldr	r3, [r7, #0]
 80150a0:	685b      	ldr	r3, [r3, #4]
 80150a2:	2203      	movs	r2, #3
 80150a4:	4013      	ands	r3, r2
 80150a6:	2b02      	cmp	r3, #2
 80150a8:	d123      	bne.n	80150f2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	08da      	lsrs	r2, r3, #3
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	3208      	adds	r2, #8
 80150b2:	0092      	lsls	r2, r2, #2
 80150b4:	58d3      	ldr	r3, [r2, r3]
 80150b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80150b8:	697b      	ldr	r3, [r7, #20]
 80150ba:	2207      	movs	r2, #7
 80150bc:	4013      	ands	r3, r2
 80150be:	009b      	lsls	r3, r3, #2
 80150c0:	220f      	movs	r2, #15
 80150c2:	409a      	lsls	r2, r3
 80150c4:	0013      	movs	r3, r2
 80150c6:	43da      	mvns	r2, r3
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	4013      	ands	r3, r2
 80150cc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	691a      	ldr	r2, [r3, #16]
 80150d2:	697b      	ldr	r3, [r7, #20]
 80150d4:	2107      	movs	r1, #7
 80150d6:	400b      	ands	r3, r1
 80150d8:	009b      	lsls	r3, r3, #2
 80150da:	409a      	lsls	r2, r3
 80150dc:	0013      	movs	r3, r2
 80150de:	693a      	ldr	r2, [r7, #16]
 80150e0:	4313      	orrs	r3, r2
 80150e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80150e4:	697b      	ldr	r3, [r7, #20]
 80150e6:	08da      	lsrs	r2, r3, #3
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	3208      	adds	r2, #8
 80150ec:	0092      	lsls	r2, r2, #2
 80150ee:	6939      	ldr	r1, [r7, #16]
 80150f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80150f8:	697b      	ldr	r3, [r7, #20]
 80150fa:	005b      	lsls	r3, r3, #1
 80150fc:	2203      	movs	r2, #3
 80150fe:	409a      	lsls	r2, r3
 8015100:	0013      	movs	r3, r2
 8015102:	43da      	mvns	r2, r3
 8015104:	693b      	ldr	r3, [r7, #16]
 8015106:	4013      	ands	r3, r2
 8015108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	685b      	ldr	r3, [r3, #4]
 801510e:	2203      	movs	r2, #3
 8015110:	401a      	ands	r2, r3
 8015112:	697b      	ldr	r3, [r7, #20]
 8015114:	005b      	lsls	r3, r3, #1
 8015116:	409a      	lsls	r2, r3
 8015118:	0013      	movs	r3, r2
 801511a:	693a      	ldr	r2, [r7, #16]
 801511c:	4313      	orrs	r3, r2
 801511e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	693a      	ldr	r2, [r7, #16]
 8015124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	685a      	ldr	r2, [r3, #4]
 801512a:	23c0      	movs	r3, #192	@ 0xc0
 801512c:	029b      	lsls	r3, r3, #10
 801512e:	4013      	ands	r3, r2
 8015130:	d100      	bne.n	8015134 <HAL_GPIO_Init+0x17c>
 8015132:	e0a0      	b.n	8015276 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015134:	4b57      	ldr	r3, [pc, #348]	@ (8015294 <HAL_GPIO_Init+0x2dc>)
 8015136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015138:	4b56      	ldr	r3, [pc, #344]	@ (8015294 <HAL_GPIO_Init+0x2dc>)
 801513a:	2101      	movs	r1, #1
 801513c:	430a      	orrs	r2, r1
 801513e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8015140:	4a55      	ldr	r2, [pc, #340]	@ (8015298 <HAL_GPIO_Init+0x2e0>)
 8015142:	697b      	ldr	r3, [r7, #20]
 8015144:	089b      	lsrs	r3, r3, #2
 8015146:	3302      	adds	r3, #2
 8015148:	009b      	lsls	r3, r3, #2
 801514a:	589b      	ldr	r3, [r3, r2]
 801514c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	2203      	movs	r2, #3
 8015152:	4013      	ands	r3, r2
 8015154:	009b      	lsls	r3, r3, #2
 8015156:	220f      	movs	r2, #15
 8015158:	409a      	lsls	r2, r3
 801515a:	0013      	movs	r3, r2
 801515c:	43da      	mvns	r2, r3
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	4013      	ands	r3, r2
 8015162:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8015164:	687a      	ldr	r2, [r7, #4]
 8015166:	23a0      	movs	r3, #160	@ 0xa0
 8015168:	05db      	lsls	r3, r3, #23
 801516a:	429a      	cmp	r2, r3
 801516c:	d01f      	beq.n	80151ae <HAL_GPIO_Init+0x1f6>
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	4a4a      	ldr	r2, [pc, #296]	@ (801529c <HAL_GPIO_Init+0x2e4>)
 8015172:	4293      	cmp	r3, r2
 8015174:	d019      	beq.n	80151aa <HAL_GPIO_Init+0x1f2>
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	4a49      	ldr	r2, [pc, #292]	@ (80152a0 <HAL_GPIO_Init+0x2e8>)
 801517a:	4293      	cmp	r3, r2
 801517c:	d013      	beq.n	80151a6 <HAL_GPIO_Init+0x1ee>
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	4a48      	ldr	r2, [pc, #288]	@ (80152a4 <HAL_GPIO_Init+0x2ec>)
 8015182:	4293      	cmp	r3, r2
 8015184:	d00d      	beq.n	80151a2 <HAL_GPIO_Init+0x1ea>
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	4a47      	ldr	r2, [pc, #284]	@ (80152a8 <HAL_GPIO_Init+0x2f0>)
 801518a:	4293      	cmp	r3, r2
 801518c:	d007      	beq.n	801519e <HAL_GPIO_Init+0x1e6>
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	4a46      	ldr	r2, [pc, #280]	@ (80152ac <HAL_GPIO_Init+0x2f4>)
 8015192:	4293      	cmp	r3, r2
 8015194:	d101      	bne.n	801519a <HAL_GPIO_Init+0x1e2>
 8015196:	2305      	movs	r3, #5
 8015198:	e00a      	b.n	80151b0 <HAL_GPIO_Init+0x1f8>
 801519a:	2306      	movs	r3, #6
 801519c:	e008      	b.n	80151b0 <HAL_GPIO_Init+0x1f8>
 801519e:	2304      	movs	r3, #4
 80151a0:	e006      	b.n	80151b0 <HAL_GPIO_Init+0x1f8>
 80151a2:	2303      	movs	r3, #3
 80151a4:	e004      	b.n	80151b0 <HAL_GPIO_Init+0x1f8>
 80151a6:	2302      	movs	r3, #2
 80151a8:	e002      	b.n	80151b0 <HAL_GPIO_Init+0x1f8>
 80151aa:	2301      	movs	r3, #1
 80151ac:	e000      	b.n	80151b0 <HAL_GPIO_Init+0x1f8>
 80151ae:	2300      	movs	r3, #0
 80151b0:	697a      	ldr	r2, [r7, #20]
 80151b2:	2103      	movs	r1, #3
 80151b4:	400a      	ands	r2, r1
 80151b6:	0092      	lsls	r2, r2, #2
 80151b8:	4093      	lsls	r3, r2
 80151ba:	693a      	ldr	r2, [r7, #16]
 80151bc:	4313      	orrs	r3, r2
 80151be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80151c0:	4935      	ldr	r1, [pc, #212]	@ (8015298 <HAL_GPIO_Init+0x2e0>)
 80151c2:	697b      	ldr	r3, [r7, #20]
 80151c4:	089b      	lsrs	r3, r3, #2
 80151c6:	3302      	adds	r3, #2
 80151c8:	009b      	lsls	r3, r3, #2
 80151ca:	693a      	ldr	r2, [r7, #16]
 80151cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80151ce:	4b38      	ldr	r3, [pc, #224]	@ (80152b0 <HAL_GPIO_Init+0x2f8>)
 80151d0:	689b      	ldr	r3, [r3, #8]
 80151d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	43da      	mvns	r2, r3
 80151d8:	693b      	ldr	r3, [r7, #16]
 80151da:	4013      	ands	r3, r2
 80151dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	685a      	ldr	r2, [r3, #4]
 80151e2:	2380      	movs	r3, #128	@ 0x80
 80151e4:	035b      	lsls	r3, r3, #13
 80151e6:	4013      	ands	r3, r2
 80151e8:	d003      	beq.n	80151f2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80151ea:	693a      	ldr	r2, [r7, #16]
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	4313      	orrs	r3, r2
 80151f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80151f2:	4b2f      	ldr	r3, [pc, #188]	@ (80152b0 <HAL_GPIO_Init+0x2f8>)
 80151f4:	693a      	ldr	r2, [r7, #16]
 80151f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80151f8:	4b2d      	ldr	r3, [pc, #180]	@ (80152b0 <HAL_GPIO_Init+0x2f8>)
 80151fa:	68db      	ldr	r3, [r3, #12]
 80151fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	43da      	mvns	r2, r3
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	4013      	ands	r3, r2
 8015206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	685a      	ldr	r2, [r3, #4]
 801520c:	2380      	movs	r3, #128	@ 0x80
 801520e:	039b      	lsls	r3, r3, #14
 8015210:	4013      	ands	r3, r2
 8015212:	d003      	beq.n	801521c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8015214:	693a      	ldr	r2, [r7, #16]
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	4313      	orrs	r3, r2
 801521a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 801521c:	4b24      	ldr	r3, [pc, #144]	@ (80152b0 <HAL_GPIO_Init+0x2f8>)
 801521e:	693a      	ldr	r2, [r7, #16]
 8015220:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8015222:	4b23      	ldr	r3, [pc, #140]	@ (80152b0 <HAL_GPIO_Init+0x2f8>)
 8015224:	685b      	ldr	r3, [r3, #4]
 8015226:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	43da      	mvns	r2, r3
 801522c:	693b      	ldr	r3, [r7, #16]
 801522e:	4013      	ands	r3, r2
 8015230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015232:	683b      	ldr	r3, [r7, #0]
 8015234:	685a      	ldr	r2, [r3, #4]
 8015236:	2380      	movs	r3, #128	@ 0x80
 8015238:	029b      	lsls	r3, r3, #10
 801523a:	4013      	ands	r3, r2
 801523c:	d003      	beq.n	8015246 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 801523e:	693a      	ldr	r2, [r7, #16]
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	4313      	orrs	r3, r2
 8015244:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8015246:	4b1a      	ldr	r3, [pc, #104]	@ (80152b0 <HAL_GPIO_Init+0x2f8>)
 8015248:	693a      	ldr	r2, [r7, #16]
 801524a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801524c:	4b18      	ldr	r3, [pc, #96]	@ (80152b0 <HAL_GPIO_Init+0x2f8>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	43da      	mvns	r2, r3
 8015256:	693b      	ldr	r3, [r7, #16]
 8015258:	4013      	ands	r3, r2
 801525a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	685a      	ldr	r2, [r3, #4]
 8015260:	2380      	movs	r3, #128	@ 0x80
 8015262:	025b      	lsls	r3, r3, #9
 8015264:	4013      	ands	r3, r2
 8015266:	d003      	beq.n	8015270 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8015268:	693a      	ldr	r2, [r7, #16]
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	4313      	orrs	r3, r2
 801526e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8015270:	4b0f      	ldr	r3, [pc, #60]	@ (80152b0 <HAL_GPIO_Init+0x2f8>)
 8015272:	693a      	ldr	r2, [r7, #16]
 8015274:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8015276:	697b      	ldr	r3, [r7, #20]
 8015278:	3301      	adds	r3, #1
 801527a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 801527c:	683b      	ldr	r3, [r7, #0]
 801527e:	681a      	ldr	r2, [r3, #0]
 8015280:	697b      	ldr	r3, [r7, #20]
 8015282:	40da      	lsrs	r2, r3
 8015284:	1e13      	subs	r3, r2, #0
 8015286:	d000      	beq.n	801528a <HAL_GPIO_Init+0x2d2>
 8015288:	e6a2      	b.n	8014fd0 <HAL_GPIO_Init+0x18>
  }
}
 801528a:	46c0      	nop			@ (mov r8, r8)
 801528c:	46c0      	nop			@ (mov r8, r8)
 801528e:	46bd      	mov	sp, r7
 8015290:	b006      	add	sp, #24
 8015292:	bd80      	pop	{r7, pc}
 8015294:	40021000 	.word	0x40021000
 8015298:	40010000 	.word	0x40010000
 801529c:	50000400 	.word	0x50000400
 80152a0:	50000800 	.word	0x50000800
 80152a4:	50000c00 	.word	0x50000c00
 80152a8:	50001000 	.word	0x50001000
 80152ac:	50001c00 	.word	0x50001c00
 80152b0:	40010400 	.word	0x40010400

080152b4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	b084      	sub	sp, #16
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
 80152bc:	000a      	movs	r2, r1
 80152be:	1cbb      	adds	r3, r7, #2
 80152c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	691b      	ldr	r3, [r3, #16]
 80152c6:	1cba      	adds	r2, r7, #2
 80152c8:	8812      	ldrh	r2, [r2, #0]
 80152ca:	4013      	ands	r3, r2
 80152cc:	d004      	beq.n	80152d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80152ce:	230f      	movs	r3, #15
 80152d0:	18fb      	adds	r3, r7, r3
 80152d2:	2201      	movs	r2, #1
 80152d4:	701a      	strb	r2, [r3, #0]
 80152d6:	e003      	b.n	80152e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80152d8:	230f      	movs	r3, #15
 80152da:	18fb      	adds	r3, r7, r3
 80152dc:	2200      	movs	r2, #0
 80152de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80152e0:	230f      	movs	r3, #15
 80152e2:	18fb      	adds	r3, r7, r3
 80152e4:	781b      	ldrb	r3, [r3, #0]
}
 80152e6:	0018      	movs	r0, r3
 80152e8:	46bd      	mov	sp, r7
 80152ea:	b004      	add	sp, #16
 80152ec:	bd80      	pop	{r7, pc}

080152ee <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80152ee:	b580      	push	{r7, lr}
 80152f0:	b082      	sub	sp, #8
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	6078      	str	r0, [r7, #4]
 80152f6:	0008      	movs	r0, r1
 80152f8:	0011      	movs	r1, r2
 80152fa:	1cbb      	adds	r3, r7, #2
 80152fc:	1c02      	adds	r2, r0, #0
 80152fe:	801a      	strh	r2, [r3, #0]
 8015300:	1c7b      	adds	r3, r7, #1
 8015302:	1c0a      	adds	r2, r1, #0
 8015304:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015306:	1c7b      	adds	r3, r7, #1
 8015308:	781b      	ldrb	r3, [r3, #0]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d004      	beq.n	8015318 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 801530e:	1cbb      	adds	r3, r7, #2
 8015310:	881a      	ldrh	r2, [r3, #0]
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8015316:	e003      	b.n	8015320 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8015318:	1cbb      	adds	r3, r7, #2
 801531a:	881a      	ldrh	r2, [r3, #0]
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8015320:	46c0      	nop			@ (mov r8, r8)
 8015322:	46bd      	mov	sp, r7
 8015324:	b002      	add	sp, #8
 8015326:	bd80      	pop	{r7, pc}

08015328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b082      	sub	sp, #8
 801532c:	af00      	add	r7, sp, #0
 801532e:	0002      	movs	r2, r0
 8015330:	1dbb      	adds	r3, r7, #6
 8015332:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8015334:	4b09      	ldr	r3, [pc, #36]	@ (801535c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015336:	695b      	ldr	r3, [r3, #20]
 8015338:	1dba      	adds	r2, r7, #6
 801533a:	8812      	ldrh	r2, [r2, #0]
 801533c:	4013      	ands	r3, r2
 801533e:	d008      	beq.n	8015352 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015340:	4b06      	ldr	r3, [pc, #24]	@ (801535c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015342:	1dba      	adds	r2, r7, #6
 8015344:	8812      	ldrh	r2, [r2, #0]
 8015346:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8015348:	1dbb      	adds	r3, r7, #6
 801534a:	881b      	ldrh	r3, [r3, #0]
 801534c:	0018      	movs	r0, r3
 801534e:	f7f7 fb57 	bl	800ca00 <HAL_GPIO_EXTI_Callback>
  }
}
 8015352:	46c0      	nop			@ (mov r8, r8)
 8015354:	46bd      	mov	sp, r7
 8015356:	b002      	add	sp, #8
 8015358:	bd80      	pop	{r7, pc}
 801535a:	46c0      	nop			@ (mov r8, r8)
 801535c:	40010400 	.word	0x40010400

08015360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b082      	sub	sp, #8
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d101      	bne.n	8015372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801536e:	2301      	movs	r3, #1
 8015370:	e082      	b.n	8015478 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	2241      	movs	r2, #65	@ 0x41
 8015376:	5c9b      	ldrb	r3, [r3, r2]
 8015378:	b2db      	uxtb	r3, r3
 801537a:	2b00      	cmp	r3, #0
 801537c:	d107      	bne.n	801538e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	2240      	movs	r2, #64	@ 0x40
 8015382:	2100      	movs	r1, #0
 8015384:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	0018      	movs	r0, r3
 801538a:	f7f6 fdeb 	bl	800bf64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	2241      	movs	r2, #65	@ 0x41
 8015392:	2124      	movs	r1, #36	@ 0x24
 8015394:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	681a      	ldr	r2, [r3, #0]
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	2101      	movs	r1, #1
 80153a2:	438a      	bics	r2, r1
 80153a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	685a      	ldr	r2, [r3, #4]
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	4934      	ldr	r1, [pc, #208]	@ (8015480 <HAL_I2C_Init+0x120>)
 80153b0:	400a      	ands	r2, r1
 80153b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	689a      	ldr	r2, [r3, #8]
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	4931      	ldr	r1, [pc, #196]	@ (8015484 <HAL_I2C_Init+0x124>)
 80153c0:	400a      	ands	r2, r1
 80153c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	68db      	ldr	r3, [r3, #12]
 80153c8:	2b01      	cmp	r3, #1
 80153ca:	d108      	bne.n	80153de <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	689a      	ldr	r2, [r3, #8]
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	2180      	movs	r1, #128	@ 0x80
 80153d6:	0209      	lsls	r1, r1, #8
 80153d8:	430a      	orrs	r2, r1
 80153da:	609a      	str	r2, [r3, #8]
 80153dc:	e007      	b.n	80153ee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	689a      	ldr	r2, [r3, #8]
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	2184      	movs	r1, #132	@ 0x84
 80153e8:	0209      	lsls	r1, r1, #8
 80153ea:	430a      	orrs	r2, r1
 80153ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	68db      	ldr	r3, [r3, #12]
 80153f2:	2b02      	cmp	r3, #2
 80153f4:	d104      	bne.n	8015400 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	2280      	movs	r2, #128	@ 0x80
 80153fc:	0112      	lsls	r2, r2, #4
 80153fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	685a      	ldr	r2, [r3, #4]
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	491f      	ldr	r1, [pc, #124]	@ (8015488 <HAL_I2C_Init+0x128>)
 801540c:	430a      	orrs	r2, r1
 801540e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	68da      	ldr	r2, [r3, #12]
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	491a      	ldr	r1, [pc, #104]	@ (8015484 <HAL_I2C_Init+0x124>)
 801541c:	400a      	ands	r2, r1
 801541e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	691a      	ldr	r2, [r3, #16]
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	695b      	ldr	r3, [r3, #20]
 8015428:	431a      	orrs	r2, r3
 801542a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	699b      	ldr	r3, [r3, #24]
 8015430:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	430a      	orrs	r2, r1
 8015438:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	69d9      	ldr	r1, [r3, #28]
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	6a1a      	ldr	r2, [r3, #32]
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	430a      	orrs	r2, r1
 8015448:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	681a      	ldr	r2, [r3, #0]
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	2101      	movs	r1, #1
 8015456:	430a      	orrs	r2, r1
 8015458:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	2200      	movs	r2, #0
 801545e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	2241      	movs	r2, #65	@ 0x41
 8015464:	2120      	movs	r1, #32
 8015466:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2200      	movs	r2, #0
 801546c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	2242      	movs	r2, #66	@ 0x42
 8015472:	2100      	movs	r1, #0
 8015474:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015476:	2300      	movs	r3, #0
}
 8015478:	0018      	movs	r0, r3
 801547a:	46bd      	mov	sp, r7
 801547c:	b002      	add	sp, #8
 801547e:	bd80      	pop	{r7, pc}
 8015480:	f0ffffff 	.word	0xf0ffffff
 8015484:	ffff7fff 	.word	0xffff7fff
 8015488:	02008000 	.word	0x02008000

0801548c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 801548c:	b590      	push	{r4, r7, lr}
 801548e:	b089      	sub	sp, #36	@ 0x24
 8015490:	af02      	add	r7, sp, #8
 8015492:	60f8      	str	r0, [r7, #12]
 8015494:	0008      	movs	r0, r1
 8015496:	607a      	str	r2, [r7, #4]
 8015498:	0019      	movs	r1, r3
 801549a:	230a      	movs	r3, #10
 801549c:	18fb      	adds	r3, r7, r3
 801549e:	1c02      	adds	r2, r0, #0
 80154a0:	801a      	strh	r2, [r3, #0]
 80154a2:	2308      	movs	r3, #8
 80154a4:	18fb      	adds	r3, r7, r3
 80154a6:	1c0a      	adds	r2, r1, #0
 80154a8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	2241      	movs	r2, #65	@ 0x41
 80154ae:	5c9b      	ldrb	r3, [r3, r2]
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	2b20      	cmp	r3, #32
 80154b4:	d000      	beq.n	80154b8 <HAL_I2C_Master_Transmit+0x2c>
 80154b6:	e0e7      	b.n	8015688 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	2240      	movs	r2, #64	@ 0x40
 80154bc:	5c9b      	ldrb	r3, [r3, r2]
 80154be:	2b01      	cmp	r3, #1
 80154c0:	d101      	bne.n	80154c6 <HAL_I2C_Master_Transmit+0x3a>
 80154c2:	2302      	movs	r3, #2
 80154c4:	e0e1      	b.n	801568a <HAL_I2C_Master_Transmit+0x1fe>
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	2240      	movs	r2, #64	@ 0x40
 80154ca:	2101      	movs	r1, #1
 80154cc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80154ce:	f7fe fc7d 	bl	8013dcc <HAL_GetTick>
 80154d2:	0003      	movs	r3, r0
 80154d4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80154d6:	2380      	movs	r3, #128	@ 0x80
 80154d8:	0219      	lsls	r1, r3, #8
 80154da:	68f8      	ldr	r0, [r7, #12]
 80154dc:	697b      	ldr	r3, [r7, #20]
 80154de:	9300      	str	r3, [sp, #0]
 80154e0:	2319      	movs	r3, #25
 80154e2:	2201      	movs	r2, #1
 80154e4:	f002 faa4 	bl	8017a30 <I2C_WaitOnFlagUntilTimeout>
 80154e8:	1e03      	subs	r3, r0, #0
 80154ea:	d001      	beq.n	80154f0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80154ec:	2301      	movs	r3, #1
 80154ee:	e0cc      	b.n	801568a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	2241      	movs	r2, #65	@ 0x41
 80154f4:	2121      	movs	r1, #33	@ 0x21
 80154f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	2242      	movs	r2, #66	@ 0x42
 80154fc:	2110      	movs	r1, #16
 80154fe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	2200      	movs	r2, #0
 8015504:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	687a      	ldr	r2, [r7, #4]
 801550a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	2208      	movs	r2, #8
 8015510:	18ba      	adds	r2, r7, r2
 8015512:	8812      	ldrh	r2, [r2, #0]
 8015514:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	2200      	movs	r2, #0
 801551a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015520:	b29b      	uxth	r3, r3
 8015522:	2bff      	cmp	r3, #255	@ 0xff
 8015524:	d911      	bls.n	801554a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	22ff      	movs	r2, #255	@ 0xff
 801552a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015530:	b2da      	uxtb	r2, r3
 8015532:	2380      	movs	r3, #128	@ 0x80
 8015534:	045c      	lsls	r4, r3, #17
 8015536:	230a      	movs	r3, #10
 8015538:	18fb      	adds	r3, r7, r3
 801553a:	8819      	ldrh	r1, [r3, #0]
 801553c:	68f8      	ldr	r0, [r7, #12]
 801553e:	4b55      	ldr	r3, [pc, #340]	@ (8015694 <HAL_I2C_Master_Transmit+0x208>)
 8015540:	9300      	str	r3, [sp, #0]
 8015542:	0023      	movs	r3, r4
 8015544:	f002 fcc6 	bl	8017ed4 <I2C_TransferConfig>
 8015548:	e075      	b.n	8015636 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801554e:	b29a      	uxth	r2, r3
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015558:	b2da      	uxtb	r2, r3
 801555a:	2380      	movs	r3, #128	@ 0x80
 801555c:	049c      	lsls	r4, r3, #18
 801555e:	230a      	movs	r3, #10
 8015560:	18fb      	adds	r3, r7, r3
 8015562:	8819      	ldrh	r1, [r3, #0]
 8015564:	68f8      	ldr	r0, [r7, #12]
 8015566:	4b4b      	ldr	r3, [pc, #300]	@ (8015694 <HAL_I2C_Master_Transmit+0x208>)
 8015568:	9300      	str	r3, [sp, #0]
 801556a:	0023      	movs	r3, r4
 801556c:	f002 fcb2 	bl	8017ed4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015570:	e061      	b.n	8015636 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015572:	697a      	ldr	r2, [r7, #20]
 8015574:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	0018      	movs	r0, r3
 801557a:	f002 faa7 	bl	8017acc <I2C_WaitOnTXISFlagUntilTimeout>
 801557e:	1e03      	subs	r3, r0, #0
 8015580:	d001      	beq.n	8015586 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8015582:	2301      	movs	r3, #1
 8015584:	e081      	b.n	801568a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801558a:	781a      	ldrb	r2, [r3, #0]
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015596:	1c5a      	adds	r2, r3, #1
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155a0:	b29b      	uxth	r3, r3
 80155a2:	3b01      	subs	r3, #1
 80155a4:	b29a      	uxth	r2, r3
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155ae:	3b01      	subs	r3, #1
 80155b0:	b29a      	uxth	r2, r3
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155ba:	b29b      	uxth	r3, r3
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d03a      	beq.n	8015636 <HAL_I2C_Master_Transmit+0x1aa>
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d136      	bne.n	8015636 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80155c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80155ca:	68f8      	ldr	r0, [r7, #12]
 80155cc:	697b      	ldr	r3, [r7, #20]
 80155ce:	9300      	str	r3, [sp, #0]
 80155d0:	0013      	movs	r3, r2
 80155d2:	2200      	movs	r2, #0
 80155d4:	2180      	movs	r1, #128	@ 0x80
 80155d6:	f002 fa2b 	bl	8017a30 <I2C_WaitOnFlagUntilTimeout>
 80155da:	1e03      	subs	r3, r0, #0
 80155dc:	d001      	beq.n	80155e2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80155de:	2301      	movs	r3, #1
 80155e0:	e053      	b.n	801568a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155e6:	b29b      	uxth	r3, r3
 80155e8:	2bff      	cmp	r3, #255	@ 0xff
 80155ea:	d911      	bls.n	8015610 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	22ff      	movs	r2, #255	@ 0xff
 80155f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155f6:	b2da      	uxtb	r2, r3
 80155f8:	2380      	movs	r3, #128	@ 0x80
 80155fa:	045c      	lsls	r4, r3, #17
 80155fc:	230a      	movs	r3, #10
 80155fe:	18fb      	adds	r3, r7, r3
 8015600:	8819      	ldrh	r1, [r3, #0]
 8015602:	68f8      	ldr	r0, [r7, #12]
 8015604:	2300      	movs	r3, #0
 8015606:	9300      	str	r3, [sp, #0]
 8015608:	0023      	movs	r3, r4
 801560a:	f002 fc63 	bl	8017ed4 <I2C_TransferConfig>
 801560e:	e012      	b.n	8015636 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015614:	b29a      	uxth	r2, r3
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801561e:	b2da      	uxtb	r2, r3
 8015620:	2380      	movs	r3, #128	@ 0x80
 8015622:	049c      	lsls	r4, r3, #18
 8015624:	230a      	movs	r3, #10
 8015626:	18fb      	adds	r3, r7, r3
 8015628:	8819      	ldrh	r1, [r3, #0]
 801562a:	68f8      	ldr	r0, [r7, #12]
 801562c:	2300      	movs	r3, #0
 801562e:	9300      	str	r3, [sp, #0]
 8015630:	0023      	movs	r3, r4
 8015632:	f002 fc4f 	bl	8017ed4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801563a:	b29b      	uxth	r3, r3
 801563c:	2b00      	cmp	r3, #0
 801563e:	d198      	bne.n	8015572 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015640:	697a      	ldr	r2, [r7, #20]
 8015642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	0018      	movs	r0, r3
 8015648:	f002 fa86 	bl	8017b58 <I2C_WaitOnSTOPFlagUntilTimeout>
 801564c:	1e03      	subs	r3, r0, #0
 801564e:	d001      	beq.n	8015654 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8015650:	2301      	movs	r3, #1
 8015652:	e01a      	b.n	801568a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	2220      	movs	r2, #32
 801565a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	685a      	ldr	r2, [r3, #4]
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	490c      	ldr	r1, [pc, #48]	@ (8015698 <HAL_I2C_Master_Transmit+0x20c>)
 8015668:	400a      	ands	r2, r1
 801566a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	2241      	movs	r2, #65	@ 0x41
 8015670:	2120      	movs	r1, #32
 8015672:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	2242      	movs	r2, #66	@ 0x42
 8015678:	2100      	movs	r1, #0
 801567a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	2240      	movs	r2, #64	@ 0x40
 8015680:	2100      	movs	r1, #0
 8015682:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015684:	2300      	movs	r3, #0
 8015686:	e000      	b.n	801568a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8015688:	2302      	movs	r3, #2
  }
}
 801568a:	0018      	movs	r0, r3
 801568c:	46bd      	mov	sp, r7
 801568e:	b007      	add	sp, #28
 8015690:	bd90      	pop	{r4, r7, pc}
 8015692:	46c0      	nop			@ (mov r8, r8)
 8015694:	80002000 	.word	0x80002000
 8015698:	fe00e800 	.word	0xfe00e800

0801569c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 801569c:	b590      	push	{r4, r7, lr}
 801569e:	b089      	sub	sp, #36	@ 0x24
 80156a0:	af02      	add	r7, sp, #8
 80156a2:	60f8      	str	r0, [r7, #12]
 80156a4:	0008      	movs	r0, r1
 80156a6:	607a      	str	r2, [r7, #4]
 80156a8:	0019      	movs	r1, r3
 80156aa:	230a      	movs	r3, #10
 80156ac:	18fb      	adds	r3, r7, r3
 80156ae:	1c02      	adds	r2, r0, #0
 80156b0:	801a      	strh	r2, [r3, #0]
 80156b2:	2308      	movs	r3, #8
 80156b4:	18fb      	adds	r3, r7, r3
 80156b6:	1c0a      	adds	r2, r1, #0
 80156b8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	2241      	movs	r2, #65	@ 0x41
 80156be:	5c9b      	ldrb	r3, [r3, r2]
 80156c0:	b2db      	uxtb	r3, r3
 80156c2:	2b20      	cmp	r3, #32
 80156c4:	d000      	beq.n	80156c8 <HAL_I2C_Master_Receive+0x2c>
 80156c6:	e0e8      	b.n	801589a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	2240      	movs	r2, #64	@ 0x40
 80156cc:	5c9b      	ldrb	r3, [r3, r2]
 80156ce:	2b01      	cmp	r3, #1
 80156d0:	d101      	bne.n	80156d6 <HAL_I2C_Master_Receive+0x3a>
 80156d2:	2302      	movs	r3, #2
 80156d4:	e0e2      	b.n	801589c <HAL_I2C_Master_Receive+0x200>
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	2240      	movs	r2, #64	@ 0x40
 80156da:	2101      	movs	r1, #1
 80156dc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80156de:	f7fe fb75 	bl	8013dcc <HAL_GetTick>
 80156e2:	0003      	movs	r3, r0
 80156e4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80156e6:	2380      	movs	r3, #128	@ 0x80
 80156e8:	0219      	lsls	r1, r3, #8
 80156ea:	68f8      	ldr	r0, [r7, #12]
 80156ec:	697b      	ldr	r3, [r7, #20]
 80156ee:	9300      	str	r3, [sp, #0]
 80156f0:	2319      	movs	r3, #25
 80156f2:	2201      	movs	r2, #1
 80156f4:	f002 f99c 	bl	8017a30 <I2C_WaitOnFlagUntilTimeout>
 80156f8:	1e03      	subs	r3, r0, #0
 80156fa:	d001      	beq.n	8015700 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80156fc:	2301      	movs	r3, #1
 80156fe:	e0cd      	b.n	801589c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	2241      	movs	r2, #65	@ 0x41
 8015704:	2122      	movs	r1, #34	@ 0x22
 8015706:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	2242      	movs	r2, #66	@ 0x42
 801570c:	2110      	movs	r1, #16
 801570e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	2200      	movs	r2, #0
 8015714:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	2208      	movs	r2, #8
 8015720:	18ba      	adds	r2, r7, r2
 8015722:	8812      	ldrh	r2, [r2, #0]
 8015724:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	2200      	movs	r2, #0
 801572a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015730:	b29b      	uxth	r3, r3
 8015732:	2bff      	cmp	r3, #255	@ 0xff
 8015734:	d911      	bls.n	801575a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	22ff      	movs	r2, #255	@ 0xff
 801573a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015740:	b2da      	uxtb	r2, r3
 8015742:	2380      	movs	r3, #128	@ 0x80
 8015744:	045c      	lsls	r4, r3, #17
 8015746:	230a      	movs	r3, #10
 8015748:	18fb      	adds	r3, r7, r3
 801574a:	8819      	ldrh	r1, [r3, #0]
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	4b55      	ldr	r3, [pc, #340]	@ (80158a4 <HAL_I2C_Master_Receive+0x208>)
 8015750:	9300      	str	r3, [sp, #0]
 8015752:	0023      	movs	r3, r4
 8015754:	f002 fbbe 	bl	8017ed4 <I2C_TransferConfig>
 8015758:	e076      	b.n	8015848 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801575e:	b29a      	uxth	r2, r3
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015768:	b2da      	uxtb	r2, r3
 801576a:	2380      	movs	r3, #128	@ 0x80
 801576c:	049c      	lsls	r4, r3, #18
 801576e:	230a      	movs	r3, #10
 8015770:	18fb      	adds	r3, r7, r3
 8015772:	8819      	ldrh	r1, [r3, #0]
 8015774:	68f8      	ldr	r0, [r7, #12]
 8015776:	4b4b      	ldr	r3, [pc, #300]	@ (80158a4 <HAL_I2C_Master_Receive+0x208>)
 8015778:	9300      	str	r3, [sp, #0]
 801577a:	0023      	movs	r3, r4
 801577c:	f002 fbaa 	bl	8017ed4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8015780:	e062      	b.n	8015848 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015782:	697a      	ldr	r2, [r7, #20]
 8015784:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	0018      	movs	r0, r3
 801578a:	f002 fa29 	bl	8017be0 <I2C_WaitOnRXNEFlagUntilTimeout>
 801578e:	1e03      	subs	r3, r0, #0
 8015790:	d001      	beq.n	8015796 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8015792:	2301      	movs	r3, #1
 8015794:	e082      	b.n	801589c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157a0:	b2d2      	uxtb	r2, r2
 80157a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157a8:	1c5a      	adds	r2, r3, #1
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157b2:	3b01      	subs	r3, #1
 80157b4:	b29a      	uxth	r2, r3
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157be:	b29b      	uxth	r3, r3
 80157c0:	3b01      	subs	r3, #1
 80157c2:	b29a      	uxth	r2, r3
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157cc:	b29b      	uxth	r3, r3
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d03a      	beq.n	8015848 <HAL_I2C_Master_Receive+0x1ac>
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d136      	bne.n	8015848 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80157da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80157dc:	68f8      	ldr	r0, [r7, #12]
 80157de:	697b      	ldr	r3, [r7, #20]
 80157e0:	9300      	str	r3, [sp, #0]
 80157e2:	0013      	movs	r3, r2
 80157e4:	2200      	movs	r2, #0
 80157e6:	2180      	movs	r1, #128	@ 0x80
 80157e8:	f002 f922 	bl	8017a30 <I2C_WaitOnFlagUntilTimeout>
 80157ec:	1e03      	subs	r3, r0, #0
 80157ee:	d001      	beq.n	80157f4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80157f0:	2301      	movs	r3, #1
 80157f2:	e053      	b.n	801589c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157f8:	b29b      	uxth	r3, r3
 80157fa:	2bff      	cmp	r3, #255	@ 0xff
 80157fc:	d911      	bls.n	8015822 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	22ff      	movs	r2, #255	@ 0xff
 8015802:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015808:	b2da      	uxtb	r2, r3
 801580a:	2380      	movs	r3, #128	@ 0x80
 801580c:	045c      	lsls	r4, r3, #17
 801580e:	230a      	movs	r3, #10
 8015810:	18fb      	adds	r3, r7, r3
 8015812:	8819      	ldrh	r1, [r3, #0]
 8015814:	68f8      	ldr	r0, [r7, #12]
 8015816:	2300      	movs	r3, #0
 8015818:	9300      	str	r3, [sp, #0]
 801581a:	0023      	movs	r3, r4
 801581c:	f002 fb5a 	bl	8017ed4 <I2C_TransferConfig>
 8015820:	e012      	b.n	8015848 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015826:	b29a      	uxth	r2, r3
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015830:	b2da      	uxtb	r2, r3
 8015832:	2380      	movs	r3, #128	@ 0x80
 8015834:	049c      	lsls	r4, r3, #18
 8015836:	230a      	movs	r3, #10
 8015838:	18fb      	adds	r3, r7, r3
 801583a:	8819      	ldrh	r1, [r3, #0]
 801583c:	68f8      	ldr	r0, [r7, #12]
 801583e:	2300      	movs	r3, #0
 8015840:	9300      	str	r3, [sp, #0]
 8015842:	0023      	movs	r3, r4
 8015844:	f002 fb46 	bl	8017ed4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801584c:	b29b      	uxth	r3, r3
 801584e:	2b00      	cmp	r3, #0
 8015850:	d197      	bne.n	8015782 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015852:	697a      	ldr	r2, [r7, #20]
 8015854:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	0018      	movs	r0, r3
 801585a:	f002 f97d 	bl	8017b58 <I2C_WaitOnSTOPFlagUntilTimeout>
 801585e:	1e03      	subs	r3, r0, #0
 8015860:	d001      	beq.n	8015866 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8015862:	2301      	movs	r3, #1
 8015864:	e01a      	b.n	801589c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	2220      	movs	r2, #32
 801586c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	685a      	ldr	r2, [r3, #4]
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	490b      	ldr	r1, [pc, #44]	@ (80158a8 <HAL_I2C_Master_Receive+0x20c>)
 801587a:	400a      	ands	r2, r1
 801587c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	2241      	movs	r2, #65	@ 0x41
 8015882:	2120      	movs	r1, #32
 8015884:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	2242      	movs	r2, #66	@ 0x42
 801588a:	2100      	movs	r1, #0
 801588c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	2240      	movs	r2, #64	@ 0x40
 8015892:	2100      	movs	r1, #0
 8015894:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015896:	2300      	movs	r3, #0
 8015898:	e000      	b.n	801589c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 801589a:	2302      	movs	r3, #2
  }
}
 801589c:	0018      	movs	r0, r3
 801589e:	46bd      	mov	sp, r7
 80158a0:	b007      	add	sp, #28
 80158a2:	bd90      	pop	{r4, r7, pc}
 80158a4:	80002400 	.word	0x80002400
 80158a8:	fe00e800 	.word	0xfe00e800

080158ac <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80158ac:	b5b0      	push	{r4, r5, r7, lr}
 80158ae:	b088      	sub	sp, #32
 80158b0:	af02      	add	r7, sp, #8
 80158b2:	60f8      	str	r0, [r7, #12]
 80158b4:	0008      	movs	r0, r1
 80158b6:	607a      	str	r2, [r7, #4]
 80158b8:	0019      	movs	r1, r3
 80158ba:	230a      	movs	r3, #10
 80158bc:	18fb      	adds	r3, r7, r3
 80158be:	1c02      	adds	r2, r0, #0
 80158c0:	801a      	strh	r2, [r3, #0]
 80158c2:	2308      	movs	r3, #8
 80158c4:	18fb      	adds	r3, r7, r3
 80158c6:	1c0a      	adds	r2, r1, #0
 80158c8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	2241      	movs	r2, #65	@ 0x41
 80158ce:	5c9b      	ldrb	r3, [r3, r2]
 80158d0:	b2db      	uxtb	r3, r3
 80158d2:	2b20      	cmp	r3, #32
 80158d4:	d000      	beq.n	80158d8 <HAL_I2C_Master_Transmit_DMA+0x2c>
 80158d6:	e0dd      	b.n	8015a94 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	699a      	ldr	r2, [r3, #24]
 80158de:	2380      	movs	r3, #128	@ 0x80
 80158e0:	021b      	lsls	r3, r3, #8
 80158e2:	401a      	ands	r2, r3
 80158e4:	2380      	movs	r3, #128	@ 0x80
 80158e6:	021b      	lsls	r3, r3, #8
 80158e8:	429a      	cmp	r2, r3
 80158ea:	d101      	bne.n	80158f0 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80158ec:	2302      	movs	r3, #2
 80158ee:	e0d2      	b.n	8015a96 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	2240      	movs	r2, #64	@ 0x40
 80158f4:	5c9b      	ldrb	r3, [r3, r2]
 80158f6:	2b01      	cmp	r3, #1
 80158f8:	d101      	bne.n	80158fe <HAL_I2C_Master_Transmit_DMA+0x52>
 80158fa:	2302      	movs	r3, #2
 80158fc:	e0cb      	b.n	8015a96 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	2240      	movs	r2, #64	@ 0x40
 8015902:	2101      	movs	r1, #1
 8015904:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	2241      	movs	r2, #65	@ 0x41
 801590a:	2121      	movs	r1, #33	@ 0x21
 801590c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2242      	movs	r2, #66	@ 0x42
 8015912:	2110      	movs	r1, #16
 8015914:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	2200      	movs	r2, #0
 801591a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	687a      	ldr	r2, [r7, #4]
 8015920:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	2208      	movs	r2, #8
 8015926:	18ba      	adds	r2, r7, r2
 8015928:	8812      	ldrh	r2, [r2, #0]
 801592a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	4a5c      	ldr	r2, [pc, #368]	@ (8015aa0 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8015930:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	4a5b      	ldr	r2, [pc, #364]	@ (8015aa4 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8015936:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801593c:	b29b      	uxth	r3, r3
 801593e:	2bff      	cmp	r3, #255	@ 0xff
 8015940:	d906      	bls.n	8015950 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	22ff      	movs	r2, #255	@ 0xff
 8015946:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8015948:	2380      	movs	r3, #128	@ 0x80
 801594a:	045b      	lsls	r3, r3, #17
 801594c:	617b      	str	r3, [r7, #20]
 801594e:	e007      	b.n	8015960 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015954:	b29a      	uxth	r2, r3
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801595a:	2380      	movs	r3, #128	@ 0x80
 801595c:	049b      	lsls	r3, r3, #18
 801595e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015964:	2b00      	cmp	r3, #0
 8015966:	d100      	bne.n	801596a <HAL_I2C_Master_Transmit_DMA+0xbe>
 8015968:	e078      	b.n	8015a5c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801596e:	2b00      	cmp	r3, #0
 8015970:	d023      	beq.n	80159ba <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015976:	4a4c      	ldr	r2, [pc, #304]	@ (8015aa8 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8015978:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801597e:	4a4b      	ldr	r2, [pc, #300]	@ (8015aac <HAL_I2C_Master_Transmit_DMA+0x200>)
 8015980:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015986:	2200      	movs	r2, #0
 8015988:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801598e:	2200      	movs	r2, #0
 8015990:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015996:	6879      	ldr	r1, [r7, #4]
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	3328      	adds	r3, #40	@ 0x28
 801599e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80159a4:	2513      	movs	r5, #19
 80159a6:	197c      	adds	r4, r7, r5
 80159a8:	f7fe ff62 	bl	8014870 <HAL_DMA_Start_IT>
 80159ac:	0003      	movs	r3, r0
 80159ae:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80159b0:	197b      	adds	r3, r7, r5
 80159b2:	781b      	ldrb	r3, [r3, #0]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d13d      	bne.n	8015a34 <HAL_I2C_Master_Transmit_DMA+0x188>
 80159b8:	e013      	b.n	80159e2 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	2241      	movs	r2, #65	@ 0x41
 80159be:	2120      	movs	r1, #32
 80159c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	2242      	movs	r2, #66	@ 0x42
 80159c6:	2100      	movs	r1, #0
 80159c8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80159ce:	2280      	movs	r2, #128	@ 0x80
 80159d0:	431a      	orrs	r2, r3
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	2240      	movs	r2, #64	@ 0x40
 80159da:	2100      	movs	r1, #0
 80159dc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80159de:	2301      	movs	r3, #1
 80159e0:	e059      	b.n	8015a96 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80159e6:	b2da      	uxtb	r2, r3
 80159e8:	697c      	ldr	r4, [r7, #20]
 80159ea:	230a      	movs	r3, #10
 80159ec:	18fb      	adds	r3, r7, r3
 80159ee:	8819      	ldrh	r1, [r3, #0]
 80159f0:	68f8      	ldr	r0, [r7, #12]
 80159f2:	4b2f      	ldr	r3, [pc, #188]	@ (8015ab0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80159f4:	9300      	str	r3, [sp, #0]
 80159f6:	0023      	movs	r3, r4
 80159f8:	f002 fa6c 	bl	8017ed4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015a00:	b29a      	uxth	r2, r3
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015a06:	1ad3      	subs	r3, r2, r3
 8015a08:	b29a      	uxth	r2, r3
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	2240      	movs	r2, #64	@ 0x40
 8015a12:	2100      	movs	r1, #0
 8015a14:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	2110      	movs	r1, #16
 8015a1a:	0018      	movs	r0, r3
 8015a1c:	f002 fa94 	bl	8017f48 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	681a      	ldr	r2, [r3, #0]
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	2180      	movs	r1, #128	@ 0x80
 8015a2c:	01c9      	lsls	r1, r1, #7
 8015a2e:	430a      	orrs	r2, r1
 8015a30:	601a      	str	r2, [r3, #0]
 8015a32:	e02d      	b.n	8015a90 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	2241      	movs	r2, #65	@ 0x41
 8015a38:	2120      	movs	r1, #32
 8015a3a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	2242      	movs	r2, #66	@ 0x42
 8015a40:	2100      	movs	r1, #0
 8015a42:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a48:	2210      	movs	r2, #16
 8015a4a:	431a      	orrs	r2, r3
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	2240      	movs	r2, #64	@ 0x40
 8015a54:	2100      	movs	r1, #0
 8015a56:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015a58:	2301      	movs	r3, #1
 8015a5a:	e01c      	b.n	8015a96 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	4a15      	ldr	r2, [pc, #84]	@ (8015ab4 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8015a60:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015a66:	b2da      	uxtb	r2, r3
 8015a68:	2380      	movs	r3, #128	@ 0x80
 8015a6a:	049c      	lsls	r4, r3, #18
 8015a6c:	230a      	movs	r3, #10
 8015a6e:	18fb      	adds	r3, r7, r3
 8015a70:	8819      	ldrh	r1, [r3, #0]
 8015a72:	68f8      	ldr	r0, [r7, #12]
 8015a74:	4b0e      	ldr	r3, [pc, #56]	@ (8015ab0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8015a76:	9300      	str	r3, [sp, #0]
 8015a78:	0023      	movs	r3, r4
 8015a7a:	f002 fa2b 	bl	8017ed4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	2240      	movs	r2, #64	@ 0x40
 8015a82:	2100      	movs	r1, #0
 8015a84:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	2101      	movs	r1, #1
 8015a8a:	0018      	movs	r0, r3
 8015a8c:	f002 fa5c 	bl	8017f48 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8015a90:	2300      	movs	r3, #0
 8015a92:	e000      	b.n	8015a96 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8015a94:	2302      	movs	r3, #2
  }
}
 8015a96:	0018      	movs	r0, r3
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	b006      	add	sp, #24
 8015a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8015a9e:	46c0      	nop			@ (mov r8, r8)
 8015aa0:	ffff0000 	.word	0xffff0000
 8015aa4:	08016785 	.word	0x08016785
 8015aa8:	08017881 	.word	0x08017881
 8015aac:	080179c1 	.word	0x080179c1
 8015ab0:	80002000 	.word	0x80002000
 8015ab4:	080162d9 	.word	0x080162d9

08015ab8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8015ab8:	b5b0      	push	{r4, r5, r7, lr}
 8015aba:	b088      	sub	sp, #32
 8015abc:	af02      	add	r7, sp, #8
 8015abe:	60f8      	str	r0, [r7, #12]
 8015ac0:	0008      	movs	r0, r1
 8015ac2:	607a      	str	r2, [r7, #4]
 8015ac4:	0019      	movs	r1, r3
 8015ac6:	230a      	movs	r3, #10
 8015ac8:	18fb      	adds	r3, r7, r3
 8015aca:	1c02      	adds	r2, r0, #0
 8015acc:	801a      	strh	r2, [r3, #0]
 8015ace:	2308      	movs	r3, #8
 8015ad0:	18fb      	adds	r3, r7, r3
 8015ad2:	1c0a      	adds	r2, r1, #0
 8015ad4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	2241      	movs	r2, #65	@ 0x41
 8015ada:	5c9b      	ldrb	r3, [r3, r2]
 8015adc:	b2db      	uxtb	r3, r3
 8015ade:	2b20      	cmp	r3, #32
 8015ae0:	d000      	beq.n	8015ae4 <HAL_I2C_Master_Receive_DMA+0x2c>
 8015ae2:	e0dd      	b.n	8015ca0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	699a      	ldr	r2, [r3, #24]
 8015aea:	2380      	movs	r3, #128	@ 0x80
 8015aec:	021b      	lsls	r3, r3, #8
 8015aee:	401a      	ands	r2, r3
 8015af0:	2380      	movs	r3, #128	@ 0x80
 8015af2:	021b      	lsls	r3, r3, #8
 8015af4:	429a      	cmp	r2, r3
 8015af6:	d101      	bne.n	8015afc <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8015af8:	2302      	movs	r3, #2
 8015afa:	e0d2      	b.n	8015ca2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	2240      	movs	r2, #64	@ 0x40
 8015b00:	5c9b      	ldrb	r3, [r3, r2]
 8015b02:	2b01      	cmp	r3, #1
 8015b04:	d101      	bne.n	8015b0a <HAL_I2C_Master_Receive_DMA+0x52>
 8015b06:	2302      	movs	r3, #2
 8015b08:	e0cb      	b.n	8015ca2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	2240      	movs	r2, #64	@ 0x40
 8015b0e:	2101      	movs	r1, #1
 8015b10:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	2241      	movs	r2, #65	@ 0x41
 8015b16:	2122      	movs	r1, #34	@ 0x22
 8015b18:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	2242      	movs	r2, #66	@ 0x42
 8015b1e:	2110      	movs	r1, #16
 8015b20:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	2200      	movs	r2, #0
 8015b26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	687a      	ldr	r2, [r7, #4]
 8015b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	2208      	movs	r2, #8
 8015b32:	18ba      	adds	r2, r7, r2
 8015b34:	8812      	ldrh	r2, [r2, #0]
 8015b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	4a5c      	ldr	r2, [pc, #368]	@ (8015cac <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8015b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	4a5b      	ldr	r2, [pc, #364]	@ (8015cb0 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8015b42:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b48:	b29b      	uxth	r3, r3
 8015b4a:	2bff      	cmp	r3, #255	@ 0xff
 8015b4c:	d906      	bls.n	8015b5c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	22ff      	movs	r2, #255	@ 0xff
 8015b52:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8015b54:	2380      	movs	r3, #128	@ 0x80
 8015b56:	045b      	lsls	r3, r3, #17
 8015b58:	617b      	str	r3, [r7, #20]
 8015b5a:	e007      	b.n	8015b6c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b60:	b29a      	uxth	r2, r3
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8015b66:	2380      	movs	r3, #128	@ 0x80
 8015b68:	049b      	lsls	r3, r3, #18
 8015b6a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d100      	bne.n	8015b76 <HAL_I2C_Master_Receive_DMA+0xbe>
 8015b74:	e078      	b.n	8015c68 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d023      	beq.n	8015bc6 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015b82:	4a4c      	ldr	r2, [pc, #304]	@ (8015cb4 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8015b84:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015b8a:	4a4b      	ldr	r2, [pc, #300]	@ (8015cb8 <HAL_I2C_Master_Receive_DMA+0x200>)
 8015b8c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015b92:	2200      	movs	r2, #0
 8015b94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	3324      	adds	r3, #36	@ 0x24
 8015ba8:	0019      	movs	r1, r3
 8015baa:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8015bb0:	2513      	movs	r5, #19
 8015bb2:	197c      	adds	r4, r7, r5
 8015bb4:	f7fe fe5c 	bl	8014870 <HAL_DMA_Start_IT>
 8015bb8:	0003      	movs	r3, r0
 8015bba:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8015bbc:	197b      	adds	r3, r7, r5
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d13d      	bne.n	8015c40 <HAL_I2C_Master_Receive_DMA+0x188>
 8015bc4:	e013      	b.n	8015bee <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	2241      	movs	r2, #65	@ 0x41
 8015bca:	2120      	movs	r1, #32
 8015bcc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	2242      	movs	r2, #66	@ 0x42
 8015bd2:	2100      	movs	r1, #0
 8015bd4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015bda:	2280      	movs	r2, #128	@ 0x80
 8015bdc:	431a      	orrs	r2, r3
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	2240      	movs	r2, #64	@ 0x40
 8015be6:	2100      	movs	r1, #0
 8015be8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8015bea:	2301      	movs	r3, #1
 8015bec:	e059      	b.n	8015ca2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015bf2:	b2da      	uxtb	r2, r3
 8015bf4:	697c      	ldr	r4, [r7, #20]
 8015bf6:	230a      	movs	r3, #10
 8015bf8:	18fb      	adds	r3, r7, r3
 8015bfa:	8819      	ldrh	r1, [r3, #0]
 8015bfc:	68f8      	ldr	r0, [r7, #12]
 8015bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8015cbc <HAL_I2C_Master_Receive_DMA+0x204>)
 8015c00:	9300      	str	r3, [sp, #0]
 8015c02:	0023      	movs	r3, r4
 8015c04:	f002 f966 	bl	8017ed4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c0c:	b29a      	uxth	r2, r3
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c12:	1ad3      	subs	r3, r2, r3
 8015c14:	b29a      	uxth	r2, r3
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	2240      	movs	r2, #64	@ 0x40
 8015c1e:	2100      	movs	r1, #0
 8015c20:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	2110      	movs	r1, #16
 8015c26:	0018      	movs	r0, r3
 8015c28:	f002 f98e 	bl	8017f48 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	681a      	ldr	r2, [r3, #0]
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	2180      	movs	r1, #128	@ 0x80
 8015c38:	0209      	lsls	r1, r1, #8
 8015c3a:	430a      	orrs	r2, r1
 8015c3c:	601a      	str	r2, [r3, #0]
 8015c3e:	e02d      	b.n	8015c9c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	2241      	movs	r2, #65	@ 0x41
 8015c44:	2120      	movs	r1, #32
 8015c46:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	2242      	movs	r2, #66	@ 0x42
 8015c4c:	2100      	movs	r1, #0
 8015c4e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c54:	2210      	movs	r2, #16
 8015c56:	431a      	orrs	r2, r3
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	2240      	movs	r2, #64	@ 0x40
 8015c60:	2100      	movs	r1, #0
 8015c62:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015c64:	2301      	movs	r3, #1
 8015c66:	e01c      	b.n	8015ca2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	4a15      	ldr	r2, [pc, #84]	@ (8015cc0 <HAL_I2C_Master_Receive_DMA+0x208>)
 8015c6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c72:	b2da      	uxtb	r2, r3
 8015c74:	2380      	movs	r3, #128	@ 0x80
 8015c76:	049c      	lsls	r4, r3, #18
 8015c78:	230a      	movs	r3, #10
 8015c7a:	18fb      	adds	r3, r7, r3
 8015c7c:	8819      	ldrh	r1, [r3, #0]
 8015c7e:	68f8      	ldr	r0, [r7, #12]
 8015c80:	4b0e      	ldr	r3, [pc, #56]	@ (8015cbc <HAL_I2C_Master_Receive_DMA+0x204>)
 8015c82:	9300      	str	r3, [sp, #0]
 8015c84:	0023      	movs	r3, r4
 8015c86:	f002 f925 	bl	8017ed4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	2240      	movs	r2, #64	@ 0x40
 8015c8e:	2100      	movs	r1, #0
 8015c90:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	2101      	movs	r1, #1
 8015c96:	0018      	movs	r0, r3
 8015c98:	f002 f956 	bl	8017f48 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	e000      	b.n	8015ca2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8015ca0:	2302      	movs	r3, #2
  }
}
 8015ca2:	0018      	movs	r0, r3
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	b006      	add	sp, #24
 8015ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8015caa:	46c0      	nop			@ (mov r8, r8)
 8015cac:	ffff0000 	.word	0xffff0000
 8015cb0:	08016785 	.word	0x08016785
 8015cb4:	08017921 	.word	0x08017921
 8015cb8:	080179c1 	.word	0x080179c1
 8015cbc:	80002400 	.word	0x80002400
 8015cc0:	080162d9 	.word	0x080162d9

08015cc4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015cc4:	b590      	push	{r4, r7, lr}
 8015cc6:	b089      	sub	sp, #36	@ 0x24
 8015cc8:	af02      	add	r7, sp, #8
 8015cca:	60f8      	str	r0, [r7, #12]
 8015ccc:	000c      	movs	r4, r1
 8015cce:	0010      	movs	r0, r2
 8015cd0:	0019      	movs	r1, r3
 8015cd2:	230a      	movs	r3, #10
 8015cd4:	18fb      	adds	r3, r7, r3
 8015cd6:	1c22      	adds	r2, r4, #0
 8015cd8:	801a      	strh	r2, [r3, #0]
 8015cda:	2308      	movs	r3, #8
 8015cdc:	18fb      	adds	r3, r7, r3
 8015cde:	1c02      	adds	r2, r0, #0
 8015ce0:	801a      	strh	r2, [r3, #0]
 8015ce2:	1dbb      	adds	r3, r7, #6
 8015ce4:	1c0a      	adds	r2, r1, #0
 8015ce6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	2241      	movs	r2, #65	@ 0x41
 8015cec:	5c9b      	ldrb	r3, [r3, r2]
 8015cee:	b2db      	uxtb	r3, r3
 8015cf0:	2b20      	cmp	r3, #32
 8015cf2:	d000      	beq.n	8015cf6 <HAL_I2C_Mem_Read+0x32>
 8015cf4:	e110      	b.n	8015f18 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8015cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d004      	beq.n	8015d06 <HAL_I2C_Mem_Read+0x42>
 8015cfc:	232c      	movs	r3, #44	@ 0x2c
 8015cfe:	18fb      	adds	r3, r7, r3
 8015d00:	881b      	ldrh	r3, [r3, #0]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d105      	bne.n	8015d12 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	2280      	movs	r2, #128	@ 0x80
 8015d0a:	0092      	lsls	r2, r2, #2
 8015d0c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8015d0e:	2301      	movs	r3, #1
 8015d10:	e103      	b.n	8015f1a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	2240      	movs	r2, #64	@ 0x40
 8015d16:	5c9b      	ldrb	r3, [r3, r2]
 8015d18:	2b01      	cmp	r3, #1
 8015d1a:	d101      	bne.n	8015d20 <HAL_I2C_Mem_Read+0x5c>
 8015d1c:	2302      	movs	r3, #2
 8015d1e:	e0fc      	b.n	8015f1a <HAL_I2C_Mem_Read+0x256>
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	2240      	movs	r2, #64	@ 0x40
 8015d24:	2101      	movs	r1, #1
 8015d26:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015d28:	f7fe f850 	bl	8013dcc <HAL_GetTick>
 8015d2c:	0003      	movs	r3, r0
 8015d2e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015d30:	2380      	movs	r3, #128	@ 0x80
 8015d32:	0219      	lsls	r1, r3, #8
 8015d34:	68f8      	ldr	r0, [r7, #12]
 8015d36:	697b      	ldr	r3, [r7, #20]
 8015d38:	9300      	str	r3, [sp, #0]
 8015d3a:	2319      	movs	r3, #25
 8015d3c:	2201      	movs	r2, #1
 8015d3e:	f001 fe77 	bl	8017a30 <I2C_WaitOnFlagUntilTimeout>
 8015d42:	1e03      	subs	r3, r0, #0
 8015d44:	d001      	beq.n	8015d4a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8015d46:	2301      	movs	r3, #1
 8015d48:	e0e7      	b.n	8015f1a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	2241      	movs	r2, #65	@ 0x41
 8015d4e:	2122      	movs	r1, #34	@ 0x22
 8015d50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	2242      	movs	r2, #66	@ 0x42
 8015d56:	2140      	movs	r1, #64	@ 0x40
 8015d58:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	222c      	movs	r2, #44	@ 0x2c
 8015d6a:	18ba      	adds	r2, r7, r2
 8015d6c:	8812      	ldrh	r2, [r2, #0]
 8015d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	2200      	movs	r2, #0
 8015d74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8015d76:	1dbb      	adds	r3, r7, #6
 8015d78:	881c      	ldrh	r4, [r3, #0]
 8015d7a:	2308      	movs	r3, #8
 8015d7c:	18fb      	adds	r3, r7, r3
 8015d7e:	881a      	ldrh	r2, [r3, #0]
 8015d80:	230a      	movs	r3, #10
 8015d82:	18fb      	adds	r3, r7, r3
 8015d84:	8819      	ldrh	r1, [r3, #0]
 8015d86:	68f8      	ldr	r0, [r7, #12]
 8015d88:	697b      	ldr	r3, [r7, #20]
 8015d8a:	9301      	str	r3, [sp, #4]
 8015d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d8e:	9300      	str	r3, [sp, #0]
 8015d90:	0023      	movs	r3, r4
 8015d92:	f001 f829 	bl	8016de8 <I2C_RequestMemoryRead>
 8015d96:	1e03      	subs	r3, r0, #0
 8015d98:	d005      	beq.n	8015da6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	2240      	movs	r2, #64	@ 0x40
 8015d9e:	2100      	movs	r1, #0
 8015da0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015da2:	2301      	movs	r3, #1
 8015da4:	e0b9      	b.n	8015f1a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015daa:	b29b      	uxth	r3, r3
 8015dac:	2bff      	cmp	r3, #255	@ 0xff
 8015dae:	d911      	bls.n	8015dd4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	22ff      	movs	r2, #255	@ 0xff
 8015db4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015dba:	b2da      	uxtb	r2, r3
 8015dbc:	2380      	movs	r3, #128	@ 0x80
 8015dbe:	045c      	lsls	r4, r3, #17
 8015dc0:	230a      	movs	r3, #10
 8015dc2:	18fb      	adds	r3, r7, r3
 8015dc4:	8819      	ldrh	r1, [r3, #0]
 8015dc6:	68f8      	ldr	r0, [r7, #12]
 8015dc8:	4b56      	ldr	r3, [pc, #344]	@ (8015f24 <HAL_I2C_Mem_Read+0x260>)
 8015dca:	9300      	str	r3, [sp, #0]
 8015dcc:	0023      	movs	r3, r4
 8015dce:	f002 f881 	bl	8017ed4 <I2C_TransferConfig>
 8015dd2:	e012      	b.n	8015dfa <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015dd8:	b29a      	uxth	r2, r3
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015de2:	b2da      	uxtb	r2, r3
 8015de4:	2380      	movs	r3, #128	@ 0x80
 8015de6:	049c      	lsls	r4, r3, #18
 8015de8:	230a      	movs	r3, #10
 8015dea:	18fb      	adds	r3, r7, r3
 8015dec:	8819      	ldrh	r1, [r3, #0]
 8015dee:	68f8      	ldr	r0, [r7, #12]
 8015df0:	4b4c      	ldr	r3, [pc, #304]	@ (8015f24 <HAL_I2C_Mem_Read+0x260>)
 8015df2:	9300      	str	r3, [sp, #0]
 8015df4:	0023      	movs	r3, r4
 8015df6:	f002 f86d 	bl	8017ed4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8015dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015dfc:	68f8      	ldr	r0, [r7, #12]
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	9300      	str	r3, [sp, #0]
 8015e02:	0013      	movs	r3, r2
 8015e04:	2200      	movs	r2, #0
 8015e06:	2104      	movs	r1, #4
 8015e08:	f001 fe12 	bl	8017a30 <I2C_WaitOnFlagUntilTimeout>
 8015e0c:	1e03      	subs	r3, r0, #0
 8015e0e:	d001      	beq.n	8015e14 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8015e10:	2301      	movs	r3, #1
 8015e12:	e082      	b.n	8015f1a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e1e:	b2d2      	uxtb	r2, r2
 8015e20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e26:	1c5a      	adds	r2, r3, #1
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e30:	3b01      	subs	r3, #1
 8015e32:	b29a      	uxth	r2, r3
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e3c:	b29b      	uxth	r3, r3
 8015e3e:	3b01      	subs	r3, #1
 8015e40:	b29a      	uxth	r2, r3
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e4a:	b29b      	uxth	r3, r3
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d03a      	beq.n	8015ec6 <HAL_I2C_Mem_Read+0x202>
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d136      	bne.n	8015ec6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e5a:	68f8      	ldr	r0, [r7, #12]
 8015e5c:	697b      	ldr	r3, [r7, #20]
 8015e5e:	9300      	str	r3, [sp, #0]
 8015e60:	0013      	movs	r3, r2
 8015e62:	2200      	movs	r2, #0
 8015e64:	2180      	movs	r1, #128	@ 0x80
 8015e66:	f001 fde3 	bl	8017a30 <I2C_WaitOnFlagUntilTimeout>
 8015e6a:	1e03      	subs	r3, r0, #0
 8015e6c:	d001      	beq.n	8015e72 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8015e6e:	2301      	movs	r3, #1
 8015e70:	e053      	b.n	8015f1a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e76:	b29b      	uxth	r3, r3
 8015e78:	2bff      	cmp	r3, #255	@ 0xff
 8015e7a:	d911      	bls.n	8015ea0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	22ff      	movs	r2, #255	@ 0xff
 8015e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e86:	b2da      	uxtb	r2, r3
 8015e88:	2380      	movs	r3, #128	@ 0x80
 8015e8a:	045c      	lsls	r4, r3, #17
 8015e8c:	230a      	movs	r3, #10
 8015e8e:	18fb      	adds	r3, r7, r3
 8015e90:	8819      	ldrh	r1, [r3, #0]
 8015e92:	68f8      	ldr	r0, [r7, #12]
 8015e94:	2300      	movs	r3, #0
 8015e96:	9300      	str	r3, [sp, #0]
 8015e98:	0023      	movs	r3, r4
 8015e9a:	f002 f81b 	bl	8017ed4 <I2C_TransferConfig>
 8015e9e:	e012      	b.n	8015ec6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ea4:	b29a      	uxth	r2, r3
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015eae:	b2da      	uxtb	r2, r3
 8015eb0:	2380      	movs	r3, #128	@ 0x80
 8015eb2:	049c      	lsls	r4, r3, #18
 8015eb4:	230a      	movs	r3, #10
 8015eb6:	18fb      	adds	r3, r7, r3
 8015eb8:	8819      	ldrh	r1, [r3, #0]
 8015eba:	68f8      	ldr	r0, [r7, #12]
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	9300      	str	r3, [sp, #0]
 8015ec0:	0023      	movs	r3, r4
 8015ec2:	f002 f807 	bl	8017ed4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015eca:	b29b      	uxth	r3, r3
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d194      	bne.n	8015dfa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015ed0:	697a      	ldr	r2, [r7, #20]
 8015ed2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	0018      	movs	r0, r3
 8015ed8:	f001 fe3e 	bl	8017b58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015edc:	1e03      	subs	r3, r0, #0
 8015ede:	d001      	beq.n	8015ee4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8015ee0:	2301      	movs	r3, #1
 8015ee2:	e01a      	b.n	8015f1a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	2220      	movs	r2, #32
 8015eea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	685a      	ldr	r2, [r3, #4]
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	490c      	ldr	r1, [pc, #48]	@ (8015f28 <HAL_I2C_Mem_Read+0x264>)
 8015ef8:	400a      	ands	r2, r1
 8015efa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	2241      	movs	r2, #65	@ 0x41
 8015f00:	2120      	movs	r1, #32
 8015f02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	2242      	movs	r2, #66	@ 0x42
 8015f08:	2100      	movs	r1, #0
 8015f0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	2240      	movs	r2, #64	@ 0x40
 8015f10:	2100      	movs	r1, #0
 8015f12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015f14:	2300      	movs	r3, #0
 8015f16:	e000      	b.n	8015f1a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8015f18:	2302      	movs	r3, #2
  }
}
 8015f1a:	0018      	movs	r0, r3
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	b007      	add	sp, #28
 8015f20:	bd90      	pop	{r4, r7, pc}
 8015f22:	46c0      	nop			@ (mov r8, r8)
 8015f24:	80002400 	.word	0x80002400
 8015f28:	fe00e800 	.word	0xfe00e800

08015f2c <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8015f2c:	b5b0      	push	{r4, r5, r7, lr}
 8015f2e:	b088      	sub	sp, #32
 8015f30:	af02      	add	r7, sp, #8
 8015f32:	60f8      	str	r0, [r7, #12]
 8015f34:	000c      	movs	r4, r1
 8015f36:	0010      	movs	r0, r2
 8015f38:	0019      	movs	r1, r3
 8015f3a:	230a      	movs	r3, #10
 8015f3c:	18fb      	adds	r3, r7, r3
 8015f3e:	1c22      	adds	r2, r4, #0
 8015f40:	801a      	strh	r2, [r3, #0]
 8015f42:	2308      	movs	r3, #8
 8015f44:	18fb      	adds	r3, r7, r3
 8015f46:	1c02      	adds	r2, r0, #0
 8015f48:	801a      	strh	r2, [r3, #0]
 8015f4a:	1dbb      	adds	r3, r7, #6
 8015f4c:	1c0a      	adds	r2, r1, #0
 8015f4e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	2241      	movs	r2, #65	@ 0x41
 8015f54:	5c9b      	ldrb	r3, [r3, r2]
 8015f56:	b2db      	uxtb	r3, r3
 8015f58:	2b20      	cmp	r3, #32
 8015f5a:	d000      	beq.n	8015f5e <HAL_I2C_Mem_Write_DMA+0x32>
 8015f5c:	e0d8      	b.n	8016110 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8015f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d004      	beq.n	8015f6e <HAL_I2C_Mem_Write_DMA+0x42>
 8015f64:	232c      	movs	r3, #44	@ 0x2c
 8015f66:	18fb      	adds	r3, r7, r3
 8015f68:	881b      	ldrh	r3, [r3, #0]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d105      	bne.n	8015f7a <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	2280      	movs	r2, #128	@ 0x80
 8015f72:	0092      	lsls	r2, r2, #2
 8015f74:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8015f76:	2301      	movs	r3, #1
 8015f78:	e0cb      	b.n	8016112 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	699a      	ldr	r2, [r3, #24]
 8015f80:	2380      	movs	r3, #128	@ 0x80
 8015f82:	021b      	lsls	r3, r3, #8
 8015f84:	401a      	ands	r2, r3
 8015f86:	2380      	movs	r3, #128	@ 0x80
 8015f88:	021b      	lsls	r3, r3, #8
 8015f8a:	429a      	cmp	r2, r3
 8015f8c:	d101      	bne.n	8015f92 <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8015f8e:	2302      	movs	r3, #2
 8015f90:	e0bf      	b.n	8016112 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	2240      	movs	r2, #64	@ 0x40
 8015f96:	5c9b      	ldrb	r3, [r3, r2]
 8015f98:	2b01      	cmp	r3, #1
 8015f9a:	d101      	bne.n	8015fa0 <HAL_I2C_Mem_Write_DMA+0x74>
 8015f9c:	2302      	movs	r3, #2
 8015f9e:	e0b8      	b.n	8016112 <HAL_I2C_Mem_Write_DMA+0x1e6>
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	2240      	movs	r2, #64	@ 0x40
 8015fa4:	2101      	movs	r1, #1
 8015fa6:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	2241      	movs	r2, #65	@ 0x41
 8015fac:	2121      	movs	r1, #33	@ 0x21
 8015fae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	2242      	movs	r2, #66	@ 0x42
 8015fb4:	2140      	movs	r1, #64	@ 0x40
 8015fb6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	2200      	movs	r2, #0
 8015fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015fc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	222c      	movs	r2, #44	@ 0x2c
 8015fc8:	18ba      	adds	r2, r7, r2
 8015fca:	8812      	ldrh	r2, [r2, #0]
 8015fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	4a52      	ldr	r2, [pc, #328]	@ (801611c <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8015fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	4a52      	ldr	r2, [pc, #328]	@ (8016120 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8015fd8:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8015fda:	230a      	movs	r3, #10
 8015fdc:	18fb      	adds	r3, r7, r3
 8015fde:	881a      	ldrh	r2, [r3, #0]
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015fe8:	b29b      	uxth	r3, r3
 8015fea:	2bff      	cmp	r3, #255	@ 0xff
 8015fec:	d903      	bls.n	8015ff6 <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	22ff      	movs	r2, #255	@ 0xff
 8015ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015ff4:	e004      	b.n	8016000 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ffa:	b29a      	uxth	r2, r3
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8016000:	1dbb      	adds	r3, r7, #6
 8016002:	881b      	ldrh	r3, [r3, #0]
 8016004:	2b01      	cmp	r3, #1
 8016006:	d10b      	bne.n	8016020 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016008:	2308      	movs	r3, #8
 801600a:	18fb      	adds	r3, r7, r3
 801600c:	881b      	ldrh	r3, [r3, #0]
 801600e:	b2da      	uxtb	r2, r3
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	2201      	movs	r2, #1
 801601a:	4252      	negs	r2, r2
 801601c:	651a      	str	r2, [r3, #80]	@ 0x50
 801601e:	e00e      	b.n	801603e <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8016020:	2108      	movs	r1, #8
 8016022:	187b      	adds	r3, r7, r1
 8016024:	881b      	ldrh	r3, [r3, #0]
 8016026:	0a1b      	lsrs	r3, r3, #8
 8016028:	b29b      	uxth	r3, r3
 801602a:	b2da      	uxtb	r2, r3
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8016032:	187b      	adds	r3, r7, r1
 8016034:	881b      	ldrh	r3, [r3, #0]
 8016036:	b2db      	uxtb	r3, r3
 8016038:	001a      	movs	r2, r3
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016042:	2b00      	cmp	r3, #0
 8016044:	d023      	beq.n	801608e <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801604a:	4a36      	ldr	r2, [pc, #216]	@ (8016124 <HAL_I2C_Mem_Write_DMA+0x1f8>)
 801604c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016052:	4a35      	ldr	r2, [pc, #212]	@ (8016128 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 8016054:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801605a:	2200      	movs	r2, #0
 801605c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016062:	2200      	movs	r2, #0
 8016064:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801606a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	3328      	adds	r3, #40	@ 0x28
 8016072:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016078:	2517      	movs	r5, #23
 801607a:	197c      	adds	r4, r7, r5
 801607c:	f7fe fbf8 	bl	8014870 <HAL_DMA_Start_IT>
 8016080:	0003      	movs	r3, r0
 8016082:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8016084:	197b      	adds	r3, r7, r5
 8016086:	781b      	ldrb	r3, [r3, #0]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d12d      	bne.n	80160e8 <HAL_I2C_Mem_Write_DMA+0x1bc>
 801608c:	e013      	b.n	80160b6 <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	2241      	movs	r2, #65	@ 0x41
 8016092:	2120      	movs	r1, #32
 8016094:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	2242      	movs	r2, #66	@ 0x42
 801609a:	2100      	movs	r1, #0
 801609c:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80160a2:	2280      	movs	r2, #128	@ 0x80
 80160a4:	431a      	orrs	r2, r3
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2240      	movs	r2, #64	@ 0x40
 80160ae:	2100      	movs	r1, #0
 80160b0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80160b2:	2301      	movs	r3, #1
 80160b4:	e02d      	b.n	8016112 <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80160b6:	1dbb      	adds	r3, r7, #6
 80160b8:	881b      	ldrh	r3, [r3, #0]
 80160ba:	b2da      	uxtb	r2, r3
 80160bc:	2380      	movs	r3, #128	@ 0x80
 80160be:	045c      	lsls	r4, r3, #17
 80160c0:	230a      	movs	r3, #10
 80160c2:	18fb      	adds	r3, r7, r3
 80160c4:	8819      	ldrh	r1, [r3, #0]
 80160c6:	68f8      	ldr	r0, [r7, #12]
 80160c8:	4b18      	ldr	r3, [pc, #96]	@ (801612c <HAL_I2C_Mem_Write_DMA+0x200>)
 80160ca:	9300      	str	r3, [sp, #0]
 80160cc:	0023      	movs	r3, r4
 80160ce:	f001 ff01 	bl	8017ed4 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	2240      	movs	r2, #64	@ 0x40
 80160d6:	2100      	movs	r1, #0
 80160d8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	2101      	movs	r1, #1
 80160de:	0018      	movs	r0, r3
 80160e0:	f001 ff32 	bl	8017f48 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80160e4:	2300      	movs	r3, #0
 80160e6:	e014      	b.n	8016112 <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	2241      	movs	r2, #65	@ 0x41
 80160ec:	2120      	movs	r1, #32
 80160ee:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	2242      	movs	r2, #66	@ 0x42
 80160f4:	2100      	movs	r1, #0
 80160f6:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80160fc:	2210      	movs	r2, #16
 80160fe:	431a      	orrs	r2, r3
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	2240      	movs	r2, #64	@ 0x40
 8016108:	2100      	movs	r1, #0
 801610a:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 801610c:	2301      	movs	r3, #1
 801610e:	e000      	b.n	8016112 <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8016110:	2302      	movs	r3, #2
  }
}
 8016112:	0018      	movs	r0, r3
 8016114:	46bd      	mov	sp, r7
 8016116:	b006      	add	sp, #24
 8016118:	bdb0      	pop	{r4, r5, r7, pc}
 801611a:	46c0      	nop			@ (mov r8, r8)
 801611c:	ffff0000 	.word	0xffff0000
 8016120:	0801699d 	.word	0x0801699d
 8016124:	08017881 	.word	0x08017881
 8016128:	080179c1 	.word	0x080179c1
 801612c:	80002000 	.word	0x80002000

08016130 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b084      	sub	sp, #16
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	699b      	ldr	r3, [r3, #24]
 801613e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801614c:	2b00      	cmp	r3, #0
 801614e:	d005      	beq.n	801615c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016154:	68ba      	ldr	r2, [r7, #8]
 8016156:	68f9      	ldr	r1, [r7, #12]
 8016158:	6878      	ldr	r0, [r7, #4]
 801615a:	4798      	blx	r3
  }
}
 801615c:	46c0      	nop			@ (mov r8, r8)
 801615e:	46bd      	mov	sp, r7
 8016160:	b004      	add	sp, #16
 8016162:	bd80      	pop	{r7, pc}

08016164 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b086      	sub	sp, #24
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	699b      	ldr	r3, [r3, #24]
 8016172:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 801617c:	697b      	ldr	r3, [r7, #20]
 801617e:	0a1b      	lsrs	r3, r3, #8
 8016180:	001a      	movs	r2, r3
 8016182:	2301      	movs	r3, #1
 8016184:	4013      	ands	r3, r2
 8016186:	d010      	beq.n	80161aa <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016188:	693b      	ldr	r3, [r7, #16]
 801618a:	09db      	lsrs	r3, r3, #7
 801618c:	001a      	movs	r2, r3
 801618e:	2301      	movs	r3, #1
 8016190:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016192:	d00a      	beq.n	80161aa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016198:	2201      	movs	r2, #1
 801619a:	431a      	orrs	r2, r3
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	2280      	movs	r2, #128	@ 0x80
 80161a6:	0052      	lsls	r2, r2, #1
 80161a8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80161aa:	697b      	ldr	r3, [r7, #20]
 80161ac:	0a9b      	lsrs	r3, r3, #10
 80161ae:	001a      	movs	r2, r3
 80161b0:	2301      	movs	r3, #1
 80161b2:	4013      	ands	r3, r2
 80161b4:	d010      	beq.n	80161d8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80161b6:	693b      	ldr	r3, [r7, #16]
 80161b8:	09db      	lsrs	r3, r3, #7
 80161ba:	001a      	movs	r2, r3
 80161bc:	2301      	movs	r3, #1
 80161be:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80161c0:	d00a      	beq.n	80161d8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161c6:	2208      	movs	r2, #8
 80161c8:	431a      	orrs	r2, r3
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	2280      	movs	r2, #128	@ 0x80
 80161d4:	00d2      	lsls	r2, r2, #3
 80161d6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80161d8:	697b      	ldr	r3, [r7, #20]
 80161da:	0a5b      	lsrs	r3, r3, #9
 80161dc:	001a      	movs	r2, r3
 80161de:	2301      	movs	r3, #1
 80161e0:	4013      	ands	r3, r2
 80161e2:	d010      	beq.n	8016206 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80161e4:	693b      	ldr	r3, [r7, #16]
 80161e6:	09db      	lsrs	r3, r3, #7
 80161e8:	001a      	movs	r2, r3
 80161ea:	2301      	movs	r3, #1
 80161ec:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80161ee:	d00a      	beq.n	8016206 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161f4:	2202      	movs	r2, #2
 80161f6:	431a      	orrs	r2, r3
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	2280      	movs	r2, #128	@ 0x80
 8016202:	0092      	lsls	r2, r2, #2
 8016204:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801620a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	220b      	movs	r2, #11
 8016210:	4013      	ands	r3, r2
 8016212:	d005      	beq.n	8016220 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8016214:	68fa      	ldr	r2, [r7, #12]
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	0011      	movs	r1, r2
 801621a:	0018      	movs	r0, r3
 801621c:	f001 f9e2 	bl	80175e4 <I2C_ITError>
  }
}
 8016220:	46c0      	nop			@ (mov r8, r8)
 8016222:	46bd      	mov	sp, r7
 8016224:	b006      	add	sp, #24
 8016226:	bd80      	pop	{r7, pc}

08016228 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b082      	sub	sp, #8
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8016230:	46c0      	nop			@ (mov r8, r8)
 8016232:	46bd      	mov	sp, r7
 8016234:	b002      	add	sp, #8
 8016236:	bd80      	pop	{r7, pc}

08016238 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b082      	sub	sp, #8
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8016240:	46c0      	nop			@ (mov r8, r8)
 8016242:	46bd      	mov	sp, r7
 8016244:	b002      	add	sp, #8
 8016246:	bd80      	pop	{r7, pc}

08016248 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b082      	sub	sp, #8
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8016250:	46c0      	nop			@ (mov r8, r8)
 8016252:	46bd      	mov	sp, r7
 8016254:	b002      	add	sp, #8
 8016256:	bd80      	pop	{r7, pc}

08016258 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b082      	sub	sp, #8
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8016260:	46c0      	nop			@ (mov r8, r8)
 8016262:	46bd      	mov	sp, r7
 8016264:	b002      	add	sp, #8
 8016266:	bd80      	pop	{r7, pc}

08016268 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b082      	sub	sp, #8
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
 8016270:	0008      	movs	r0, r1
 8016272:	0011      	movs	r1, r2
 8016274:	1cfb      	adds	r3, r7, #3
 8016276:	1c02      	adds	r2, r0, #0
 8016278:	701a      	strb	r2, [r3, #0]
 801627a:	003b      	movs	r3, r7
 801627c:	1c0a      	adds	r2, r1, #0
 801627e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016280:	46c0      	nop			@ (mov r8, r8)
 8016282:	46bd      	mov	sp, r7
 8016284:	b002      	add	sp, #8
 8016286:	bd80      	pop	{r7, pc}

08016288 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b082      	sub	sp, #8
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8016290:	46c0      	nop			@ (mov r8, r8)
 8016292:	46bd      	mov	sp, r7
 8016294:	b002      	add	sp, #8
 8016296:	bd80      	pop	{r7, pc}

08016298 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b082      	sub	sp, #8
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80162a0:	46c0      	nop			@ (mov r8, r8)
 80162a2:	46bd      	mov	sp, r7
 80162a4:	b002      	add	sp, #8
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b082      	sub	sp, #8
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80162b0:	46c0      	nop			@ (mov r8, r8)
 80162b2:	46bd      	mov	sp, r7
 80162b4:	b002      	add	sp, #8
 80162b6:	bd80      	pop	{r7, pc}

080162b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b082      	sub	sp, #8
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80162c0:	46c0      	nop			@ (mov r8, r8)
 80162c2:	46bd      	mov	sp, r7
 80162c4:	b002      	add	sp, #8
 80162c6:	bd80      	pop	{r7, pc}

080162c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b082      	sub	sp, #8
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80162d0:	46c0      	nop			@ (mov r8, r8)
 80162d2:	46bd      	mov	sp, r7
 80162d4:	b002      	add	sp, #8
 80162d6:	bd80      	pop	{r7, pc}

080162d8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80162d8:	b590      	push	{r4, r7, lr}
 80162da:	b089      	sub	sp, #36	@ 0x24
 80162dc:	af02      	add	r7, sp, #8
 80162de:	60f8      	str	r0, [r7, #12]
 80162e0:	60b9      	str	r1, [r7, #8]
 80162e2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80162e4:	68bb      	ldr	r3, [r7, #8]
 80162e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	2240      	movs	r2, #64	@ 0x40
 80162ec:	5c9b      	ldrb	r3, [r3, r2]
 80162ee:	2b01      	cmp	r3, #1
 80162f0:	d101      	bne.n	80162f6 <I2C_Master_ISR_IT+0x1e>
 80162f2:	2302      	movs	r3, #2
 80162f4:	e12b      	b.n	801654e <I2C_Master_ISR_IT+0x276>
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	2240      	movs	r2, #64	@ 0x40
 80162fa:	2101      	movs	r1, #1
 80162fc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80162fe:	697b      	ldr	r3, [r7, #20]
 8016300:	091b      	lsrs	r3, r3, #4
 8016302:	001a      	movs	r2, r3
 8016304:	2301      	movs	r3, #1
 8016306:	4013      	ands	r3, r2
 8016308:	d014      	beq.n	8016334 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	091b      	lsrs	r3, r3, #4
 801630e:	001a      	movs	r2, r3
 8016310:	2301      	movs	r3, #1
 8016312:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016314:	d00e      	beq.n	8016334 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	2210      	movs	r2, #16
 801631c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016322:	2204      	movs	r2, #4
 8016324:	431a      	orrs	r2, r3
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	0018      	movs	r0, r3
 801632e:	f001 fa84 	bl	801783a <I2C_Flush_TXDR>
 8016332:	e0f5      	b.n	8016520 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	089b      	lsrs	r3, r3, #2
 8016338:	001a      	movs	r2, r3
 801633a:	2301      	movs	r3, #1
 801633c:	4013      	ands	r3, r2
 801633e:	d023      	beq.n	8016388 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	089b      	lsrs	r3, r3, #2
 8016344:	001a      	movs	r2, r3
 8016346:	2301      	movs	r3, #1
 8016348:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801634a:	d01d      	beq.n	8016388 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801634c:	697b      	ldr	r3, [r7, #20]
 801634e:	2204      	movs	r2, #4
 8016350:	4393      	bics	r3, r2
 8016352:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801635e:	b2d2      	uxtb	r2, r2
 8016360:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016366:	1c5a      	adds	r2, r3, #1
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016370:	3b01      	subs	r3, #1
 8016372:	b29a      	uxth	r2, r3
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801637c:	b29b      	uxth	r3, r3
 801637e:	3b01      	subs	r3, #1
 8016380:	b29a      	uxth	r2, r3
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016386:	e0cb      	b.n	8016520 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016388:	697b      	ldr	r3, [r7, #20]
 801638a:	085b      	lsrs	r3, r3, #1
 801638c:	001a      	movs	r2, r3
 801638e:	2301      	movs	r3, #1
 8016390:	4013      	ands	r3, r2
 8016392:	d01e      	beq.n	80163d2 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	085b      	lsrs	r3, r3, #1
 8016398:	001a      	movs	r2, r3
 801639a:	2301      	movs	r3, #1
 801639c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801639e:	d018      	beq.n	80163d2 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163a4:	781a      	ldrb	r2, [r3, #0]
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163b0:	1c5a      	adds	r2, r3, #1
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80163ba:	3b01      	subs	r3, #1
 80163bc:	b29a      	uxth	r2, r3
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163c6:	b29b      	uxth	r3, r3
 80163c8:	3b01      	subs	r3, #1
 80163ca:	b29a      	uxth	r2, r3
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80163d0:	e0a6      	b.n	8016520 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80163d2:	697b      	ldr	r3, [r7, #20]
 80163d4:	09db      	lsrs	r3, r3, #7
 80163d6:	001a      	movs	r2, r3
 80163d8:	2301      	movs	r3, #1
 80163da:	4013      	ands	r3, r2
 80163dc:	d100      	bne.n	80163e0 <I2C_Master_ISR_IT+0x108>
 80163de:	e06b      	b.n	80164b8 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	099b      	lsrs	r3, r3, #6
 80163e4:	001a      	movs	r2, r3
 80163e6:	2301      	movs	r3, #1
 80163e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80163ea:	d065      	beq.n	80164b8 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163f0:	b29b      	uxth	r3, r3
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d04a      	beq.n	801648c <I2C_Master_ISR_IT+0x1b4>
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d146      	bne.n	801648c <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	685b      	ldr	r3, [r3, #4]
 8016404:	b29a      	uxth	r2, r3
 8016406:	2112      	movs	r1, #18
 8016408:	187b      	adds	r3, r7, r1
 801640a:	0592      	lsls	r2, r2, #22
 801640c:	0d92      	lsrs	r2, r2, #22
 801640e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016414:	b29b      	uxth	r3, r3
 8016416:	2bff      	cmp	r3, #255	@ 0xff
 8016418:	d910      	bls.n	801643c <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	22ff      	movs	r2, #255	@ 0xff
 801641e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016424:	b2da      	uxtb	r2, r3
 8016426:	2380      	movs	r3, #128	@ 0x80
 8016428:	045c      	lsls	r4, r3, #17
 801642a:	187b      	adds	r3, r7, r1
 801642c:	8819      	ldrh	r1, [r3, #0]
 801642e:	68f8      	ldr	r0, [r7, #12]
 8016430:	2300      	movs	r3, #0
 8016432:	9300      	str	r3, [sp, #0]
 8016434:	0023      	movs	r3, r4
 8016436:	f001 fd4d 	bl	8017ed4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801643a:	e03c      	b.n	80164b6 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016440:	b29a      	uxth	r2, r3
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801644a:	4a43      	ldr	r2, [pc, #268]	@ (8016558 <I2C_Master_ISR_IT+0x280>)
 801644c:	4293      	cmp	r3, r2
 801644e:	d00e      	beq.n	801646e <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016454:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801645a:	2312      	movs	r3, #18
 801645c:	18fb      	adds	r3, r7, r3
 801645e:	8819      	ldrh	r1, [r3, #0]
 8016460:	68f8      	ldr	r0, [r7, #12]
 8016462:	2300      	movs	r3, #0
 8016464:	9300      	str	r3, [sp, #0]
 8016466:	0023      	movs	r3, r4
 8016468:	f001 fd34 	bl	8017ed4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801646c:	e023      	b.n	80164b6 <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016472:	b2da      	uxtb	r2, r3
 8016474:	2380      	movs	r3, #128	@ 0x80
 8016476:	049c      	lsls	r4, r3, #18
 8016478:	2312      	movs	r3, #18
 801647a:	18fb      	adds	r3, r7, r3
 801647c:	8819      	ldrh	r1, [r3, #0]
 801647e:	68f8      	ldr	r0, [r7, #12]
 8016480:	2300      	movs	r3, #0
 8016482:	9300      	str	r3, [sp, #0]
 8016484:	0023      	movs	r3, r4
 8016486:	f001 fd25 	bl	8017ed4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801648a:	e014      	b.n	80164b6 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	685a      	ldr	r2, [r3, #4]
 8016492:	2380      	movs	r3, #128	@ 0x80
 8016494:	049b      	lsls	r3, r3, #18
 8016496:	401a      	ands	r2, r3
 8016498:	2380      	movs	r3, #128	@ 0x80
 801649a:	049b      	lsls	r3, r3, #18
 801649c:	429a      	cmp	r2, r3
 801649e:	d004      	beq.n	80164aa <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	0018      	movs	r0, r3
 80164a4:	f000 fda6 	bl	8016ff4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80164a8:	e03a      	b.n	8016520 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	2140      	movs	r1, #64	@ 0x40
 80164ae:	0018      	movs	r0, r3
 80164b0:	f001 f898 	bl	80175e4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80164b4:	e034      	b.n	8016520 <I2C_Master_ISR_IT+0x248>
 80164b6:	e033      	b.n	8016520 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80164b8:	697b      	ldr	r3, [r7, #20]
 80164ba:	099b      	lsrs	r3, r3, #6
 80164bc:	001a      	movs	r2, r3
 80164be:	2301      	movs	r3, #1
 80164c0:	4013      	ands	r3, r2
 80164c2:	d02d      	beq.n	8016520 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	099b      	lsrs	r3, r3, #6
 80164c8:	001a      	movs	r2, r3
 80164ca:	2301      	movs	r3, #1
 80164cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80164ce:	d027      	beq.n	8016520 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164d4:	b29b      	uxth	r3, r3
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d11d      	bne.n	8016516 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	685a      	ldr	r2, [r3, #4]
 80164e0:	2380      	movs	r3, #128	@ 0x80
 80164e2:	049b      	lsls	r3, r3, #18
 80164e4:	401a      	ands	r2, r3
 80164e6:	2380      	movs	r3, #128	@ 0x80
 80164e8:	049b      	lsls	r3, r3, #18
 80164ea:	429a      	cmp	r2, r3
 80164ec:	d018      	beq.n	8016520 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164f2:	4a19      	ldr	r2, [pc, #100]	@ (8016558 <I2C_Master_ISR_IT+0x280>)
 80164f4:	4293      	cmp	r3, r2
 80164f6:	d109      	bne.n	801650c <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	685a      	ldr	r2, [r3, #4]
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	2180      	movs	r1, #128	@ 0x80
 8016504:	01c9      	lsls	r1, r1, #7
 8016506:	430a      	orrs	r2, r1
 8016508:	605a      	str	r2, [r3, #4]
 801650a:	e009      	b.n	8016520 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	0018      	movs	r0, r3
 8016510:	f000 fd70 	bl	8016ff4 <I2C_ITMasterSeqCplt>
 8016514:	e004      	b.n	8016520 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	2140      	movs	r1, #64	@ 0x40
 801651a:	0018      	movs	r0, r3
 801651c:	f001 f862 	bl	80175e4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016520:	697b      	ldr	r3, [r7, #20]
 8016522:	095b      	lsrs	r3, r3, #5
 8016524:	001a      	movs	r2, r3
 8016526:	2301      	movs	r3, #1
 8016528:	4013      	ands	r3, r2
 801652a:	d00b      	beq.n	8016544 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	095b      	lsrs	r3, r3, #5
 8016530:	001a      	movs	r2, r3
 8016532:	2301      	movs	r3, #1
 8016534:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016536:	d005      	beq.n	8016544 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8016538:	697a      	ldr	r2, [r7, #20]
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	0011      	movs	r1, r2
 801653e:	0018      	movs	r0, r3
 8016540:	f000 fe00 	bl	8017144 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	2240      	movs	r2, #64	@ 0x40
 8016548:	2100      	movs	r1, #0
 801654a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801654c:	2300      	movs	r3, #0
}
 801654e:	0018      	movs	r0, r3
 8016550:	46bd      	mov	sp, r7
 8016552:	b007      	add	sp, #28
 8016554:	bd90      	pop	{r4, r7, pc}
 8016556:	46c0      	nop			@ (mov r8, r8)
 8016558:	ffff0000 	.word	0xffff0000

0801655c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b086      	sub	sp, #24
 8016560:	af00      	add	r7, sp, #0
 8016562:	60f8      	str	r0, [r7, #12]
 8016564:	60b9      	str	r1, [r7, #8]
 8016566:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801656c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801656e:	68bb      	ldr	r3, [r7, #8]
 8016570:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	2240      	movs	r2, #64	@ 0x40
 8016576:	5c9b      	ldrb	r3, [r3, r2]
 8016578:	2b01      	cmp	r3, #1
 801657a:	d101      	bne.n	8016580 <I2C_Slave_ISR_IT+0x24>
 801657c:	2302      	movs	r3, #2
 801657e:	e0fa      	b.n	8016776 <I2C_Slave_ISR_IT+0x21a>
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	2240      	movs	r2, #64	@ 0x40
 8016584:	2101      	movs	r1, #1
 8016586:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016588:	693b      	ldr	r3, [r7, #16]
 801658a:	095b      	lsrs	r3, r3, #5
 801658c:	001a      	movs	r2, r3
 801658e:	2301      	movs	r3, #1
 8016590:	4013      	ands	r3, r2
 8016592:	d00b      	beq.n	80165ac <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	095b      	lsrs	r3, r3, #5
 8016598:	001a      	movs	r2, r3
 801659a:	2301      	movs	r3, #1
 801659c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801659e:	d005      	beq.n	80165ac <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80165a0:	693a      	ldr	r2, [r7, #16]
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	0011      	movs	r1, r2
 80165a6:	0018      	movs	r0, r3
 80165a8:	f000 fe9e 	bl	80172e8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80165ac:	693b      	ldr	r3, [r7, #16]
 80165ae:	091b      	lsrs	r3, r3, #4
 80165b0:	001a      	movs	r2, r3
 80165b2:	2301      	movs	r3, #1
 80165b4:	4013      	ands	r3, r2
 80165b6:	d054      	beq.n	8016662 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	091b      	lsrs	r3, r3, #4
 80165bc:	001a      	movs	r2, r3
 80165be:	2301      	movs	r3, #1
 80165c0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80165c2:	d04e      	beq.n	8016662 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165c8:	b29b      	uxth	r3, r3
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d12d      	bne.n	801662a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	2241      	movs	r2, #65	@ 0x41
 80165d2:	5c9b      	ldrb	r3, [r3, r2]
 80165d4:	b2db      	uxtb	r3, r3
 80165d6:	2b28      	cmp	r3, #40	@ 0x28
 80165d8:	d10b      	bne.n	80165f2 <I2C_Slave_ISR_IT+0x96>
 80165da:	697a      	ldr	r2, [r7, #20]
 80165dc:	2380      	movs	r3, #128	@ 0x80
 80165de:	049b      	lsls	r3, r3, #18
 80165e0:	429a      	cmp	r2, r3
 80165e2:	d106      	bne.n	80165f2 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80165e4:	693a      	ldr	r2, [r7, #16]
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	0011      	movs	r1, r2
 80165ea:	0018      	movs	r0, r3
 80165ec:	f000 ffa0 	bl	8017530 <I2C_ITListenCplt>
 80165f0:	e036      	b.n	8016660 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	2241      	movs	r2, #65	@ 0x41
 80165f6:	5c9b      	ldrb	r3, [r3, r2]
 80165f8:	b2db      	uxtb	r3, r3
 80165fa:	2b29      	cmp	r3, #41	@ 0x29
 80165fc:	d110      	bne.n	8016620 <I2C_Slave_ISR_IT+0xc4>
 80165fe:	697b      	ldr	r3, [r7, #20]
 8016600:	4a5f      	ldr	r2, [pc, #380]	@ (8016780 <I2C_Slave_ISR_IT+0x224>)
 8016602:	4293      	cmp	r3, r2
 8016604:	d00c      	beq.n	8016620 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	2210      	movs	r2, #16
 801660c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	0018      	movs	r0, r3
 8016612:	f001 f912 	bl	801783a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	0018      	movs	r0, r3
 801661a:	f000 fd2d 	bl	8017078 <I2C_ITSlaveSeqCplt>
 801661e:	e01f      	b.n	8016660 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	2210      	movs	r2, #16
 8016626:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8016628:	e09d      	b.n	8016766 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	2210      	movs	r2, #16
 8016630:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016636:	2204      	movs	r2, #4
 8016638:	431a      	orrs	r2, r3
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801663e:	697b      	ldr	r3, [r7, #20]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d005      	beq.n	8016650 <I2C_Slave_ISR_IT+0xf4>
 8016644:	697a      	ldr	r2, [r7, #20]
 8016646:	2380      	movs	r3, #128	@ 0x80
 8016648:	045b      	lsls	r3, r3, #17
 801664a:	429a      	cmp	r2, r3
 801664c:	d000      	beq.n	8016650 <I2C_Slave_ISR_IT+0xf4>
 801664e:	e08a      	b.n	8016766 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	0011      	movs	r1, r2
 8016658:	0018      	movs	r0, r3
 801665a:	f000 ffc3 	bl	80175e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801665e:	e082      	b.n	8016766 <I2C_Slave_ISR_IT+0x20a>
 8016660:	e081      	b.n	8016766 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016662:	693b      	ldr	r3, [r7, #16]
 8016664:	089b      	lsrs	r3, r3, #2
 8016666:	001a      	movs	r2, r3
 8016668:	2301      	movs	r3, #1
 801666a:	4013      	ands	r3, r2
 801666c:	d031      	beq.n	80166d2 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	089b      	lsrs	r3, r3, #2
 8016672:	001a      	movs	r2, r3
 8016674:	2301      	movs	r3, #1
 8016676:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016678:	d02b      	beq.n	80166d2 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801667e:	b29b      	uxth	r3, r3
 8016680:	2b00      	cmp	r3, #0
 8016682:	d018      	beq.n	80166b6 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801668e:	b2d2      	uxtb	r2, r2
 8016690:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016696:	1c5a      	adds	r2, r3, #1
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166a0:	3b01      	subs	r3, #1
 80166a2:	b29a      	uxth	r2, r3
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166ac:	b29b      	uxth	r3, r3
 80166ae:	3b01      	subs	r3, #1
 80166b0:	b29a      	uxth	r2, r3
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166ba:	b29b      	uxth	r3, r3
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d154      	bne.n	801676a <I2C_Slave_ISR_IT+0x20e>
 80166c0:	697b      	ldr	r3, [r7, #20]
 80166c2:	4a2f      	ldr	r2, [pc, #188]	@ (8016780 <I2C_Slave_ISR_IT+0x224>)
 80166c4:	4293      	cmp	r3, r2
 80166c6:	d050      	beq.n	801676a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	0018      	movs	r0, r3
 80166cc:	f000 fcd4 	bl	8017078 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80166d0:	e04b      	b.n	801676a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80166d2:	693b      	ldr	r3, [r7, #16]
 80166d4:	08db      	lsrs	r3, r3, #3
 80166d6:	001a      	movs	r2, r3
 80166d8:	2301      	movs	r3, #1
 80166da:	4013      	ands	r3, r2
 80166dc:	d00c      	beq.n	80166f8 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	08db      	lsrs	r3, r3, #3
 80166e2:	001a      	movs	r2, r3
 80166e4:	2301      	movs	r3, #1
 80166e6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80166e8:	d006      	beq.n	80166f8 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80166ea:	693a      	ldr	r2, [r7, #16]
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	0011      	movs	r1, r2
 80166f0:	0018      	movs	r0, r3
 80166f2:	f000 fbdb 	bl	8016eac <I2C_ITAddrCplt>
 80166f6:	e039      	b.n	801676c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80166f8:	693b      	ldr	r3, [r7, #16]
 80166fa:	085b      	lsrs	r3, r3, #1
 80166fc:	001a      	movs	r2, r3
 80166fe:	2301      	movs	r3, #1
 8016700:	4013      	ands	r3, r2
 8016702:	d033      	beq.n	801676c <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	085b      	lsrs	r3, r3, #1
 8016708:	001a      	movs	r2, r3
 801670a:	2301      	movs	r3, #1
 801670c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801670e:	d02d      	beq.n	801676c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016714:	b29b      	uxth	r3, r3
 8016716:	2b00      	cmp	r3, #0
 8016718:	d018      	beq.n	801674c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801671e:	781a      	ldrb	r2, [r3, #0]
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801672a:	1c5a      	adds	r2, r3, #1
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016734:	b29b      	uxth	r3, r3
 8016736:	3b01      	subs	r3, #1
 8016738:	b29a      	uxth	r2, r3
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016742:	3b01      	subs	r3, #1
 8016744:	b29a      	uxth	r2, r3
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	851a      	strh	r2, [r3, #40]	@ 0x28
 801674a:	e00f      	b.n	801676c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801674c:	697a      	ldr	r2, [r7, #20]
 801674e:	2380      	movs	r3, #128	@ 0x80
 8016750:	045b      	lsls	r3, r3, #17
 8016752:	429a      	cmp	r2, r3
 8016754:	d002      	beq.n	801675c <I2C_Slave_ISR_IT+0x200>
 8016756:	697b      	ldr	r3, [r7, #20]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d107      	bne.n	801676c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	0018      	movs	r0, r3
 8016760:	f000 fc8a 	bl	8017078 <I2C_ITSlaveSeqCplt>
 8016764:	e002      	b.n	801676c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8016766:	46c0      	nop			@ (mov r8, r8)
 8016768:	e000      	b.n	801676c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 801676a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	2240      	movs	r2, #64	@ 0x40
 8016770:	2100      	movs	r1, #0
 8016772:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016774:	2300      	movs	r3, #0
}
 8016776:	0018      	movs	r0, r3
 8016778:	46bd      	mov	sp, r7
 801677a:	b006      	add	sp, #24
 801677c:	bd80      	pop	{r7, pc}
 801677e:	46c0      	nop			@ (mov r8, r8)
 8016780:	ffff0000 	.word	0xffff0000

08016784 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8016784:	b590      	push	{r4, r7, lr}
 8016786:	b089      	sub	sp, #36	@ 0x24
 8016788:	af02      	add	r7, sp, #8
 801678a:	60f8      	str	r0, [r7, #12]
 801678c:	60b9      	str	r1, [r7, #8]
 801678e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	2240      	movs	r2, #64	@ 0x40
 8016794:	5c9b      	ldrb	r3, [r3, r2]
 8016796:	2b01      	cmp	r3, #1
 8016798:	d101      	bne.n	801679e <I2C_Master_ISR_DMA+0x1a>
 801679a:	2302      	movs	r3, #2
 801679c:	e0f7      	b.n	801698e <I2C_Master_ISR_DMA+0x20a>
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	2240      	movs	r2, #64	@ 0x40
 80167a2:	2101      	movs	r1, #1
 80167a4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80167a6:	68bb      	ldr	r3, [r7, #8]
 80167a8:	091b      	lsrs	r3, r3, #4
 80167aa:	001a      	movs	r2, r3
 80167ac:	2301      	movs	r3, #1
 80167ae:	4013      	ands	r3, r2
 80167b0:	d019      	beq.n	80167e6 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	091b      	lsrs	r3, r3, #4
 80167b6:	001a      	movs	r2, r3
 80167b8:	2301      	movs	r3, #1
 80167ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80167bc:	d013      	beq.n	80167e6 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	2210      	movs	r2, #16
 80167c4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80167ca:	2204      	movs	r2, #4
 80167cc:	431a      	orrs	r2, r3
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	2120      	movs	r1, #32
 80167d6:	0018      	movs	r0, r3
 80167d8:	f001 fbb6 	bl	8017f48 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	0018      	movs	r0, r3
 80167e0:	f001 f82b 	bl	801783a <I2C_Flush_TXDR>
 80167e4:	e0ce      	b.n	8016984 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	09db      	lsrs	r3, r3, #7
 80167ea:	001a      	movs	r2, r3
 80167ec:	2301      	movs	r3, #1
 80167ee:	4013      	ands	r3, r2
 80167f0:	d100      	bne.n	80167f4 <I2C_Master_ISR_DMA+0x70>
 80167f2:	e07e      	b.n	80168f2 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	099b      	lsrs	r3, r3, #6
 80167f8:	001a      	movs	r2, r3
 80167fa:	2301      	movs	r3, #1
 80167fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80167fe:	d100      	bne.n	8016802 <I2C_Master_ISR_DMA+0x7e>
 8016800:	e077      	b.n	80168f2 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	681a      	ldr	r2, [r3, #0]
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	2140      	movs	r1, #64	@ 0x40
 801680e:	438a      	bics	r2, r1
 8016810:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016816:	b29b      	uxth	r3, r3
 8016818:	2b00      	cmp	r3, #0
 801681a:	d055      	beq.n	80168c8 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	685b      	ldr	r3, [r3, #4]
 8016822:	b29a      	uxth	r2, r3
 8016824:	2312      	movs	r3, #18
 8016826:	18fb      	adds	r3, r7, r3
 8016828:	0592      	lsls	r2, r2, #22
 801682a:	0d92      	lsrs	r2, r2, #22
 801682c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016832:	b29b      	uxth	r3, r3
 8016834:	2bff      	cmp	r3, #255	@ 0xff
 8016836:	d906      	bls.n	8016846 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	22ff      	movs	r2, #255	@ 0xff
 801683c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801683e:	2380      	movs	r3, #128	@ 0x80
 8016840:	045b      	lsls	r3, r3, #17
 8016842:	617b      	str	r3, [r7, #20]
 8016844:	e010      	b.n	8016868 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801684a:	b29a      	uxth	r2, r3
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016854:	4a50      	ldr	r2, [pc, #320]	@ (8016998 <I2C_Master_ISR_DMA+0x214>)
 8016856:	4293      	cmp	r3, r2
 8016858:	d003      	beq.n	8016862 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801685e:	617b      	str	r3, [r7, #20]
 8016860:	e002      	b.n	8016868 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8016862:	2380      	movs	r3, #128	@ 0x80
 8016864:	049b      	lsls	r3, r3, #18
 8016866:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801686c:	b2da      	uxtb	r2, r3
 801686e:	697c      	ldr	r4, [r7, #20]
 8016870:	2312      	movs	r3, #18
 8016872:	18fb      	adds	r3, r7, r3
 8016874:	8819      	ldrh	r1, [r3, #0]
 8016876:	68f8      	ldr	r0, [r7, #12]
 8016878:	2300      	movs	r3, #0
 801687a:	9300      	str	r3, [sp, #0]
 801687c:	0023      	movs	r3, r4
 801687e:	f001 fb29 	bl	8017ed4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016886:	b29a      	uxth	r2, r3
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801688c:	1ad3      	subs	r3, r2, r3
 801688e:	b29a      	uxth	r2, r3
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	2241      	movs	r2, #65	@ 0x41
 8016898:	5c9b      	ldrb	r3, [r3, r2]
 801689a:	b2db      	uxtb	r3, r3
 801689c:	2b22      	cmp	r3, #34	@ 0x22
 801689e:	d109      	bne.n	80168b4 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	681a      	ldr	r2, [r3, #0]
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	2180      	movs	r1, #128	@ 0x80
 80168ac:	0209      	lsls	r1, r1, #8
 80168ae:	430a      	orrs	r2, r1
 80168b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80168b2:	e067      	b.n	8016984 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	681a      	ldr	r2, [r3, #0]
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	2180      	movs	r1, #128	@ 0x80
 80168c0:	01c9      	lsls	r1, r1, #7
 80168c2:	430a      	orrs	r2, r1
 80168c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80168c6:	e05d      	b.n	8016984 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	685a      	ldr	r2, [r3, #4]
 80168ce:	2380      	movs	r3, #128	@ 0x80
 80168d0:	049b      	lsls	r3, r3, #18
 80168d2:	401a      	ands	r2, r3
 80168d4:	2380      	movs	r3, #128	@ 0x80
 80168d6:	049b      	lsls	r3, r3, #18
 80168d8:	429a      	cmp	r2, r3
 80168da:	d004      	beq.n	80168e6 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	0018      	movs	r0, r3
 80168e0:	f000 fb88 	bl	8016ff4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80168e4:	e04e      	b.n	8016984 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	2140      	movs	r1, #64	@ 0x40
 80168ea:	0018      	movs	r0, r3
 80168ec:	f000 fe7a 	bl	80175e4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80168f0:	e048      	b.n	8016984 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80168f2:	68bb      	ldr	r3, [r7, #8]
 80168f4:	099b      	lsrs	r3, r3, #6
 80168f6:	001a      	movs	r2, r3
 80168f8:	2301      	movs	r3, #1
 80168fa:	4013      	ands	r3, r2
 80168fc:	d02e      	beq.n	801695c <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	099b      	lsrs	r3, r3, #6
 8016902:	001a      	movs	r2, r3
 8016904:	2301      	movs	r3, #1
 8016906:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016908:	d028      	beq.n	801695c <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801690e:	b29b      	uxth	r3, r3
 8016910:	2b00      	cmp	r3, #0
 8016912:	d11d      	bne.n	8016950 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	685a      	ldr	r2, [r3, #4]
 801691a:	2380      	movs	r3, #128	@ 0x80
 801691c:	049b      	lsls	r3, r3, #18
 801691e:	401a      	ands	r2, r3
 8016920:	2380      	movs	r3, #128	@ 0x80
 8016922:	049b      	lsls	r3, r3, #18
 8016924:	429a      	cmp	r2, r3
 8016926:	d02c      	beq.n	8016982 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801692c:	4a1a      	ldr	r2, [pc, #104]	@ (8016998 <I2C_Master_ISR_DMA+0x214>)
 801692e:	4293      	cmp	r3, r2
 8016930:	d109      	bne.n	8016946 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	685a      	ldr	r2, [r3, #4]
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	2180      	movs	r1, #128	@ 0x80
 801693e:	01c9      	lsls	r1, r1, #7
 8016940:	430a      	orrs	r2, r1
 8016942:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8016944:	e01d      	b.n	8016982 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	0018      	movs	r0, r3
 801694a:	f000 fb53 	bl	8016ff4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801694e:	e018      	b.n	8016982 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	2140      	movs	r1, #64	@ 0x40
 8016954:	0018      	movs	r0, r3
 8016956:	f000 fe45 	bl	80175e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801695a:	e012      	b.n	8016982 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801695c:	68bb      	ldr	r3, [r7, #8]
 801695e:	095b      	lsrs	r3, r3, #5
 8016960:	001a      	movs	r2, r3
 8016962:	2301      	movs	r3, #1
 8016964:	4013      	ands	r3, r2
 8016966:	d00d      	beq.n	8016984 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	095b      	lsrs	r3, r3, #5
 801696c:	001a      	movs	r2, r3
 801696e:	2301      	movs	r3, #1
 8016970:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016972:	d007      	beq.n	8016984 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8016974:	68ba      	ldr	r2, [r7, #8]
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	0011      	movs	r1, r2
 801697a:	0018      	movs	r0, r3
 801697c:	f000 fbe2 	bl	8017144 <I2C_ITMasterCplt>
 8016980:	e000      	b.n	8016984 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8016982:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	2240      	movs	r2, #64	@ 0x40
 8016988:	2100      	movs	r1, #0
 801698a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801698c:	2300      	movs	r3, #0
}
 801698e:	0018      	movs	r0, r3
 8016990:	46bd      	mov	sp, r7
 8016992:	b007      	add	sp, #28
 8016994:	bd90      	pop	{r4, r7, pc}
 8016996:	46c0      	nop			@ (mov r8, r8)
 8016998:	ffff0000 	.word	0xffff0000

0801699c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 801699c:	b590      	push	{r4, r7, lr}
 801699e:	b089      	sub	sp, #36	@ 0x24
 80169a0:	af02      	add	r7, sp, #8
 80169a2:	60f8      	str	r0, [r7, #12]
 80169a4:	60b9      	str	r1, [r7, #8]
 80169a6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80169a8:	4b92      	ldr	r3, [pc, #584]	@ (8016bf4 <I2C_Mem_ISR_DMA+0x258>)
 80169aa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	2240      	movs	r2, #64	@ 0x40
 80169b0:	5c9b      	ldrb	r3, [r3, r2]
 80169b2:	2b01      	cmp	r3, #1
 80169b4:	d101      	bne.n	80169ba <I2C_Mem_ISR_DMA+0x1e>
 80169b6:	2302      	movs	r3, #2
 80169b8:	e118      	b.n	8016bec <I2C_Mem_ISR_DMA+0x250>
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	2240      	movs	r2, #64	@ 0x40
 80169be:	2101      	movs	r1, #1
 80169c0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80169c2:	68bb      	ldr	r3, [r7, #8]
 80169c4:	091b      	lsrs	r3, r3, #4
 80169c6:	001a      	movs	r2, r3
 80169c8:	2301      	movs	r3, #1
 80169ca:	4013      	ands	r3, r2
 80169cc:	d019      	beq.n	8016a02 <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	091b      	lsrs	r3, r3, #4
 80169d2:	001a      	movs	r2, r3
 80169d4:	2301      	movs	r3, #1
 80169d6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80169d8:	d013      	beq.n	8016a02 <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	2210      	movs	r2, #16
 80169e0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80169e6:	2204      	movs	r2, #4
 80169e8:	431a      	orrs	r2, r3
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	2120      	movs	r1, #32
 80169f2:	0018      	movs	r0, r3
 80169f4:	f001 faa8 	bl	8017f48 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	0018      	movs	r0, r3
 80169fc:	f000 ff1d 	bl	801783a <I2C_Flush_TXDR>
 8016a00:	e0ef      	b.n	8016be2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016a02:	68bb      	ldr	r3, [r7, #8]
 8016a04:	085b      	lsrs	r3, r3, #1
 8016a06:	001a      	movs	r2, r3
 8016a08:	2301      	movs	r3, #1
 8016a0a:	4013      	ands	r3, r2
 8016a0c:	d00f      	beq.n	8016a2e <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	085b      	lsrs	r3, r3, #1
 8016a12:	001a      	movs	r2, r3
 8016a14:	2301      	movs	r3, #1
 8016a16:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016a18:	d009      	beq.n	8016a2e <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	68fa      	ldr	r2, [r7, #12]
 8016a20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8016a22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	2201      	movs	r2, #1
 8016a28:	4252      	negs	r2, r2
 8016a2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8016a2c:	e0d9      	b.n	8016be2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8016a2e:	68bb      	ldr	r3, [r7, #8]
 8016a30:	09db      	lsrs	r3, r3, #7
 8016a32:	001a      	movs	r2, r3
 8016a34:	2301      	movs	r3, #1
 8016a36:	4013      	ands	r3, r2
 8016a38:	d060      	beq.n	8016afc <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	099b      	lsrs	r3, r3, #6
 8016a3e:	001a      	movs	r2, r3
 8016a40:	2301      	movs	r3, #1
 8016a42:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8016a44:	d05a      	beq.n	8016afc <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	2110      	movs	r1, #16
 8016a4a:	0018      	movs	r0, r3
 8016a4c:	f001 fa7c 	bl	8017f48 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a54:	b29b      	uxth	r3, r3
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d04a      	beq.n	8016af0 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a5e:	b29b      	uxth	r3, r3
 8016a60:	2bff      	cmp	r3, #255	@ 0xff
 8016a62:	d910      	bls.n	8016a86 <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	22ff      	movs	r2, #255	@ 0xff
 8016a68:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016a6e:	b299      	uxth	r1, r3
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a74:	b2da      	uxtb	r2, r3
 8016a76:	2380      	movs	r3, #128	@ 0x80
 8016a78:	045b      	lsls	r3, r3, #17
 8016a7a:	68f8      	ldr	r0, [r7, #12]
 8016a7c:	2400      	movs	r4, #0
 8016a7e:	9400      	str	r4, [sp, #0]
 8016a80:	f001 fa28 	bl	8017ed4 <I2C_TransferConfig>
 8016a84:	e011      	b.n	8016aaa <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a8a:	b29a      	uxth	r2, r3
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016a94:	b299      	uxth	r1, r3
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a9a:	b2da      	uxtb	r2, r3
 8016a9c:	2380      	movs	r3, #128	@ 0x80
 8016a9e:	049b      	lsls	r3, r3, #18
 8016aa0:	68f8      	ldr	r0, [r7, #12]
 8016aa2:	2400      	movs	r4, #0
 8016aa4:	9400      	str	r4, [sp, #0]
 8016aa6:	f001 fa15 	bl	8017ed4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016aae:	b29a      	uxth	r2, r3
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ab4:	1ad3      	subs	r3, r2, r3
 8016ab6:	b29a      	uxth	r2, r3
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	2241      	movs	r2, #65	@ 0x41
 8016ac0:	5c9b      	ldrb	r3, [r3, r2]
 8016ac2:	b2db      	uxtb	r3, r3
 8016ac4:	2b22      	cmp	r3, #34	@ 0x22
 8016ac6:	d109      	bne.n	8016adc <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	681a      	ldr	r2, [r3, #0]
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	2180      	movs	r1, #128	@ 0x80
 8016ad4:	0209      	lsls	r1, r1, #8
 8016ad6:	430a      	orrs	r2, r1
 8016ad8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016ada:	e082      	b.n	8016be2 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	681a      	ldr	r2, [r3, #0]
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	2180      	movs	r1, #128	@ 0x80
 8016ae8:	01c9      	lsls	r1, r1, #7
 8016aea:	430a      	orrs	r2, r1
 8016aec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016aee:	e078      	b.n	8016be2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	2140      	movs	r1, #64	@ 0x40
 8016af4:	0018      	movs	r0, r3
 8016af6:	f000 fd75 	bl	80175e4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8016afa:	e072      	b.n	8016be2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	099b      	lsrs	r3, r3, #6
 8016b00:	001a      	movs	r2, r3
 8016b02:	2301      	movs	r3, #1
 8016b04:	4013      	ands	r3, r2
 8016b06:	d05a      	beq.n	8016bbe <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	099b      	lsrs	r3, r3, #6
 8016b0c:	001a      	movs	r2, r3
 8016b0e:	2301      	movs	r3, #1
 8016b10:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016b12:	d054      	beq.n	8016bbe <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	2241      	movs	r2, #65	@ 0x41
 8016b18:	5c9b      	ldrb	r3, [r3, r2]
 8016b1a:	b2db      	uxtb	r3, r3
 8016b1c:	2b22      	cmp	r3, #34	@ 0x22
 8016b1e:	d101      	bne.n	8016b24 <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 8016b20:	4b35      	ldr	r3, [pc, #212]	@ (8016bf8 <I2C_Mem_ISR_DMA+0x25c>)
 8016b22:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b28:	b29b      	uxth	r3, r3
 8016b2a:	2bff      	cmp	r3, #255	@ 0xff
 8016b2c:	d911      	bls.n	8016b52 <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	22ff      	movs	r2, #255	@ 0xff
 8016b32:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016b38:	b299      	uxth	r1, r3
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b3e:	b2da      	uxtb	r2, r3
 8016b40:	2380      	movs	r3, #128	@ 0x80
 8016b42:	045c      	lsls	r4, r3, #17
 8016b44:	68f8      	ldr	r0, [r7, #12]
 8016b46:	697b      	ldr	r3, [r7, #20]
 8016b48:	9300      	str	r3, [sp, #0]
 8016b4a:	0023      	movs	r3, r4
 8016b4c:	f001 f9c2 	bl	8017ed4 <I2C_TransferConfig>
 8016b50:	e012      	b.n	8016b78 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b56:	b29a      	uxth	r2, r3
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016b60:	b299      	uxth	r1, r3
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b66:	b2da      	uxtb	r2, r3
 8016b68:	2380      	movs	r3, #128	@ 0x80
 8016b6a:	049c      	lsls	r4, r3, #18
 8016b6c:	68f8      	ldr	r0, [r7, #12]
 8016b6e:	697b      	ldr	r3, [r7, #20]
 8016b70:	9300      	str	r3, [sp, #0]
 8016b72:	0023      	movs	r3, r4
 8016b74:	f001 f9ae 	bl	8017ed4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b7c:	b29a      	uxth	r2, r3
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b82:	1ad3      	subs	r3, r2, r3
 8016b84:	b29a      	uxth	r2, r3
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	2241      	movs	r2, #65	@ 0x41
 8016b8e:	5c9b      	ldrb	r3, [r3, r2]
 8016b90:	b2db      	uxtb	r3, r3
 8016b92:	2b22      	cmp	r3, #34	@ 0x22
 8016b94:	d109      	bne.n	8016baa <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	681a      	ldr	r2, [r3, #0]
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	2180      	movs	r1, #128	@ 0x80
 8016ba2:	0209      	lsls	r1, r1, #8
 8016ba4:	430a      	orrs	r2, r1
 8016ba6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016ba8:	e01b      	b.n	8016be2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	681a      	ldr	r2, [r3, #0]
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	2180      	movs	r1, #128	@ 0x80
 8016bb6:	01c9      	lsls	r1, r1, #7
 8016bb8:	430a      	orrs	r2, r1
 8016bba:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016bbc:	e011      	b.n	8016be2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016bbe:	68bb      	ldr	r3, [r7, #8]
 8016bc0:	095b      	lsrs	r3, r3, #5
 8016bc2:	001a      	movs	r2, r3
 8016bc4:	2301      	movs	r3, #1
 8016bc6:	4013      	ands	r3, r2
 8016bc8:	d00b      	beq.n	8016be2 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	095b      	lsrs	r3, r3, #5
 8016bce:	001a      	movs	r2, r3
 8016bd0:	2301      	movs	r3, #1
 8016bd2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016bd4:	d005      	beq.n	8016be2 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8016bd6:	68ba      	ldr	r2, [r7, #8]
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	0011      	movs	r1, r2
 8016bdc:	0018      	movs	r0, r3
 8016bde:	f000 fab1 	bl	8017144 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	2240      	movs	r2, #64	@ 0x40
 8016be6:	2100      	movs	r1, #0
 8016be8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016bea:	2300      	movs	r3, #0
}
 8016bec:	0018      	movs	r0, r3
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	b007      	add	sp, #28
 8016bf2:	bd90      	pop	{r4, r7, pc}
 8016bf4:	80002000 	.word	0x80002000
 8016bf8:	80002400 	.word	0x80002400

08016bfc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b088      	sub	sp, #32
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	60f8      	str	r0, [r7, #12]
 8016c04:	60b9      	str	r1, [r7, #8]
 8016c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c0c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	2240      	movs	r2, #64	@ 0x40
 8016c16:	5c9b      	ldrb	r3, [r3, r2]
 8016c18:	2b01      	cmp	r3, #1
 8016c1a:	d101      	bne.n	8016c20 <I2C_Slave_ISR_DMA+0x24>
 8016c1c:	2302      	movs	r3, #2
 8016c1e:	e0dd      	b.n	8016ddc <I2C_Slave_ISR_DMA+0x1e0>
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	2240      	movs	r2, #64	@ 0x40
 8016c24:	2101      	movs	r1, #1
 8016c26:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016c28:	68bb      	ldr	r3, [r7, #8]
 8016c2a:	095b      	lsrs	r3, r3, #5
 8016c2c:	001a      	movs	r2, r3
 8016c2e:	2301      	movs	r3, #1
 8016c30:	4013      	ands	r3, r2
 8016c32:	d00b      	beq.n	8016c4c <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	095b      	lsrs	r3, r3, #5
 8016c38:	001a      	movs	r2, r3
 8016c3a:	2301      	movs	r3, #1
 8016c3c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016c3e:	d005      	beq.n	8016c4c <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8016c40:	68ba      	ldr	r2, [r7, #8]
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	0011      	movs	r1, r2
 8016c46:	0018      	movs	r0, r3
 8016c48:	f000 fb4e 	bl	80172e8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016c4c:	68bb      	ldr	r3, [r7, #8]
 8016c4e:	091b      	lsrs	r3, r3, #4
 8016c50:	001a      	movs	r2, r3
 8016c52:	2301      	movs	r3, #1
 8016c54:	4013      	ands	r3, r2
 8016c56:	d100      	bne.n	8016c5a <I2C_Slave_ISR_DMA+0x5e>
 8016c58:	e0a9      	b.n	8016dae <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	091b      	lsrs	r3, r3, #4
 8016c5e:	001a      	movs	r2, r3
 8016c60:	2301      	movs	r3, #1
 8016c62:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016c64:	d100      	bne.n	8016c68 <I2C_Slave_ISR_DMA+0x6c>
 8016c66:	e0a2      	b.n	8016dae <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	0b9b      	lsrs	r3, r3, #14
 8016c6c:	001a      	movs	r2, r3
 8016c6e:	2301      	movs	r3, #1
 8016c70:	4013      	ands	r3, r2
 8016c72:	d106      	bne.n	8016c82 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	0bdb      	lsrs	r3, r3, #15
 8016c78:	001a      	movs	r2, r3
 8016c7a:	2301      	movs	r3, #1
 8016c7c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016c7e:	d100      	bne.n	8016c82 <I2C_Slave_ISR_DMA+0x86>
 8016c80:	e08e      	b.n	8016da0 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d00d      	beq.n	8016ca6 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	0bdb      	lsrs	r3, r3, #15
 8016c8e:	001a      	movs	r2, r3
 8016c90:	2301      	movs	r3, #1
 8016c92:	4013      	ands	r3, r2
 8016c94:	d007      	beq.n	8016ca6 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	685b      	ldr	r3, [r3, #4]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d101      	bne.n	8016ca6 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d00d      	beq.n	8016cca <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	0b9b      	lsrs	r3, r3, #14
 8016cb2:	001a      	movs	r2, r3
 8016cb4:	2301      	movs	r3, #1
 8016cb6:	4013      	ands	r3, r2
 8016cb8:	d007      	beq.n	8016cca <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	685b      	ldr	r3, [r3, #4]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d101      	bne.n	8016cca <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8016cc6:	2301      	movs	r3, #1
 8016cc8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8016cca:	69fb      	ldr	r3, [r7, #28]
 8016ccc:	2b01      	cmp	r3, #1
 8016cce:	d12d      	bne.n	8016d2c <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	2241      	movs	r2, #65	@ 0x41
 8016cd4:	5c9b      	ldrb	r3, [r3, r2]
 8016cd6:	b2db      	uxtb	r3, r3
 8016cd8:	2b28      	cmp	r3, #40	@ 0x28
 8016cda:	d10b      	bne.n	8016cf4 <I2C_Slave_ISR_DMA+0xf8>
 8016cdc:	69ba      	ldr	r2, [r7, #24]
 8016cde:	2380      	movs	r3, #128	@ 0x80
 8016ce0:	049b      	lsls	r3, r3, #18
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d106      	bne.n	8016cf4 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8016ce6:	68ba      	ldr	r2, [r7, #8]
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	0011      	movs	r1, r2
 8016cec:	0018      	movs	r0, r3
 8016cee:	f000 fc1f 	bl	8017530 <I2C_ITListenCplt>
 8016cf2:	e054      	b.n	8016d9e <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	2241      	movs	r2, #65	@ 0x41
 8016cf8:	5c9b      	ldrb	r3, [r3, r2]
 8016cfa:	b2db      	uxtb	r3, r3
 8016cfc:	2b29      	cmp	r3, #41	@ 0x29
 8016cfe:	d110      	bne.n	8016d22 <I2C_Slave_ISR_DMA+0x126>
 8016d00:	69bb      	ldr	r3, [r7, #24]
 8016d02:	4a38      	ldr	r2, [pc, #224]	@ (8016de4 <I2C_Slave_ISR_DMA+0x1e8>)
 8016d04:	4293      	cmp	r3, r2
 8016d06:	d00c      	beq.n	8016d22 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	2210      	movs	r2, #16
 8016d0e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	0018      	movs	r0, r3
 8016d14:	f000 fd91 	bl	801783a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	0018      	movs	r0, r3
 8016d1c:	f000 f9ac 	bl	8017078 <I2C_ITSlaveSeqCplt>
 8016d20:	e03d      	b.n	8016d9e <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	2210      	movs	r2, #16
 8016d28:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8016d2a:	e03e      	b.n	8016daa <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	2210      	movs	r2, #16
 8016d32:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d38:	2204      	movs	r2, #4
 8016d3a:	431a      	orrs	r2, r3
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8016d40:	2317      	movs	r3, #23
 8016d42:	18fb      	adds	r3, r7, r3
 8016d44:	68fa      	ldr	r2, [r7, #12]
 8016d46:	2141      	movs	r1, #65	@ 0x41
 8016d48:	5c52      	ldrb	r2, [r2, r1]
 8016d4a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8016d4c:	69bb      	ldr	r3, [r7, #24]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d004      	beq.n	8016d5c <I2C_Slave_ISR_DMA+0x160>
 8016d52:	69ba      	ldr	r2, [r7, #24]
 8016d54:	2380      	movs	r3, #128	@ 0x80
 8016d56:	045b      	lsls	r3, r3, #17
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d126      	bne.n	8016daa <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8016d5c:	2217      	movs	r2, #23
 8016d5e:	18bb      	adds	r3, r7, r2
 8016d60:	781b      	ldrb	r3, [r3, #0]
 8016d62:	2b21      	cmp	r3, #33	@ 0x21
 8016d64:	d003      	beq.n	8016d6e <I2C_Slave_ISR_DMA+0x172>
 8016d66:	18bb      	adds	r3, r7, r2
 8016d68:	781b      	ldrb	r3, [r3, #0]
 8016d6a:	2b29      	cmp	r3, #41	@ 0x29
 8016d6c:	d103      	bne.n	8016d76 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	2221      	movs	r2, #33	@ 0x21
 8016d72:	631a      	str	r2, [r3, #48]	@ 0x30
 8016d74:	e00b      	b.n	8016d8e <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8016d76:	2217      	movs	r2, #23
 8016d78:	18bb      	adds	r3, r7, r2
 8016d7a:	781b      	ldrb	r3, [r3, #0]
 8016d7c:	2b22      	cmp	r3, #34	@ 0x22
 8016d7e:	d003      	beq.n	8016d88 <I2C_Slave_ISR_DMA+0x18c>
 8016d80:	18bb      	adds	r3, r7, r2
 8016d82:	781b      	ldrb	r3, [r3, #0]
 8016d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8016d86:	d102      	bne.n	8016d8e <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	2222      	movs	r2, #34	@ 0x22
 8016d8c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	0011      	movs	r1, r2
 8016d96:	0018      	movs	r0, r3
 8016d98:	f000 fc24 	bl	80175e4 <I2C_ITError>
      if (treatdmanack == 1U)
 8016d9c:	e005      	b.n	8016daa <I2C_Slave_ISR_DMA+0x1ae>
 8016d9e:	e004      	b.n	8016daa <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	2210      	movs	r2, #16
 8016da6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016da8:	e013      	b.n	8016dd2 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8016daa:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016dac:	e011      	b.n	8016dd2 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016dae:	68bb      	ldr	r3, [r7, #8]
 8016db0:	08db      	lsrs	r3, r3, #3
 8016db2:	001a      	movs	r2, r3
 8016db4:	2301      	movs	r3, #1
 8016db6:	4013      	ands	r3, r2
 8016db8:	d00b      	beq.n	8016dd2 <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	08db      	lsrs	r3, r3, #3
 8016dbe:	001a      	movs	r2, r3
 8016dc0:	2301      	movs	r3, #1
 8016dc2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016dc4:	d005      	beq.n	8016dd2 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8016dc6:	68ba      	ldr	r2, [r7, #8]
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	0011      	movs	r1, r2
 8016dcc:	0018      	movs	r0, r3
 8016dce:	f000 f86d 	bl	8016eac <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	2240      	movs	r2, #64	@ 0x40
 8016dd6:	2100      	movs	r1, #0
 8016dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016dda:	2300      	movs	r3, #0
}
 8016ddc:	0018      	movs	r0, r3
 8016dde:	46bd      	mov	sp, r7
 8016de0:	b008      	add	sp, #32
 8016de2:	bd80      	pop	{r7, pc}
 8016de4:	ffff0000 	.word	0xffff0000

08016de8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8016de8:	b5b0      	push	{r4, r5, r7, lr}
 8016dea:	b086      	sub	sp, #24
 8016dec:	af02      	add	r7, sp, #8
 8016dee:	60f8      	str	r0, [r7, #12]
 8016df0:	000c      	movs	r4, r1
 8016df2:	0010      	movs	r0, r2
 8016df4:	0019      	movs	r1, r3
 8016df6:	250a      	movs	r5, #10
 8016df8:	197b      	adds	r3, r7, r5
 8016dfa:	1c22      	adds	r2, r4, #0
 8016dfc:	801a      	strh	r2, [r3, #0]
 8016dfe:	2308      	movs	r3, #8
 8016e00:	18fb      	adds	r3, r7, r3
 8016e02:	1c02      	adds	r2, r0, #0
 8016e04:	801a      	strh	r2, [r3, #0]
 8016e06:	1dbb      	adds	r3, r7, #6
 8016e08:	1c0a      	adds	r2, r1, #0
 8016e0a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8016e0c:	1dbb      	adds	r3, r7, #6
 8016e0e:	881b      	ldrh	r3, [r3, #0]
 8016e10:	b2da      	uxtb	r2, r3
 8016e12:	197b      	adds	r3, r7, r5
 8016e14:	8819      	ldrh	r1, [r3, #0]
 8016e16:	68f8      	ldr	r0, [r7, #12]
 8016e18:	4b23      	ldr	r3, [pc, #140]	@ (8016ea8 <I2C_RequestMemoryRead+0xc0>)
 8016e1a:	9300      	str	r3, [sp, #0]
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	f001 f859 	bl	8017ed4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8016e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e24:	6a39      	ldr	r1, [r7, #32]
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	0018      	movs	r0, r3
 8016e2a:	f000 fe4f 	bl	8017acc <I2C_WaitOnTXISFlagUntilTimeout>
 8016e2e:	1e03      	subs	r3, r0, #0
 8016e30:	d001      	beq.n	8016e36 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8016e32:	2301      	movs	r3, #1
 8016e34:	e033      	b.n	8016e9e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8016e36:	1dbb      	adds	r3, r7, #6
 8016e38:	881b      	ldrh	r3, [r3, #0]
 8016e3a:	2b01      	cmp	r3, #1
 8016e3c:	d107      	bne.n	8016e4e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016e3e:	2308      	movs	r3, #8
 8016e40:	18fb      	adds	r3, r7, r3
 8016e42:	881b      	ldrh	r3, [r3, #0]
 8016e44:	b2da      	uxtb	r2, r3
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8016e4c:	e019      	b.n	8016e82 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8016e4e:	2308      	movs	r3, #8
 8016e50:	18fb      	adds	r3, r7, r3
 8016e52:	881b      	ldrh	r3, [r3, #0]
 8016e54:	0a1b      	lsrs	r3, r3, #8
 8016e56:	b29b      	uxth	r3, r3
 8016e58:	b2da      	uxtb	r2, r3
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8016e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e62:	6a39      	ldr	r1, [r7, #32]
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	0018      	movs	r0, r3
 8016e68:	f000 fe30 	bl	8017acc <I2C_WaitOnTXISFlagUntilTimeout>
 8016e6c:	1e03      	subs	r3, r0, #0
 8016e6e:	d001      	beq.n	8016e74 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8016e70:	2301      	movs	r3, #1
 8016e72:	e014      	b.n	8016e9e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016e74:	2308      	movs	r3, #8
 8016e76:	18fb      	adds	r3, r7, r3
 8016e78:	881b      	ldrh	r3, [r3, #0]
 8016e7a:	b2da      	uxtb	r2, r3
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8016e82:	6a3a      	ldr	r2, [r7, #32]
 8016e84:	68f8      	ldr	r0, [r7, #12]
 8016e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e88:	9300      	str	r3, [sp, #0]
 8016e8a:	0013      	movs	r3, r2
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	2140      	movs	r1, #64	@ 0x40
 8016e90:	f000 fdce 	bl	8017a30 <I2C_WaitOnFlagUntilTimeout>
 8016e94:	1e03      	subs	r3, r0, #0
 8016e96:	d001      	beq.n	8016e9c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8016e98:	2301      	movs	r3, #1
 8016e9a:	e000      	b.n	8016e9e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8016e9c:	2300      	movs	r3, #0
}
 8016e9e:	0018      	movs	r0, r3
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	b004      	add	sp, #16
 8016ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8016ea6:	46c0      	nop			@ (mov r8, r8)
 8016ea8:	80002000 	.word	0x80002000

08016eac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016eac:	b5b0      	push	{r4, r5, r7, lr}
 8016eae:	b084      	sub	sp, #16
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
 8016eb4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	2241      	movs	r2, #65	@ 0x41
 8016eba:	5c9b      	ldrb	r3, [r3, r2]
 8016ebc:	b2db      	uxtb	r3, r3
 8016ebe:	001a      	movs	r2, r3
 8016ec0:	2328      	movs	r3, #40	@ 0x28
 8016ec2:	4013      	ands	r3, r2
 8016ec4:	2b28      	cmp	r3, #40	@ 0x28
 8016ec6:	d000      	beq.n	8016eca <I2C_ITAddrCplt+0x1e>
 8016ec8:	e088      	b.n	8016fdc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	699b      	ldr	r3, [r3, #24]
 8016ed0:	0c1b      	lsrs	r3, r3, #16
 8016ed2:	b2da      	uxtb	r2, r3
 8016ed4:	250f      	movs	r5, #15
 8016ed6:	197b      	adds	r3, r7, r5
 8016ed8:	2101      	movs	r1, #1
 8016eda:	400a      	ands	r2, r1
 8016edc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	699b      	ldr	r3, [r3, #24]
 8016ee4:	0c1b      	lsrs	r3, r3, #16
 8016ee6:	b29a      	uxth	r2, r3
 8016ee8:	200c      	movs	r0, #12
 8016eea:	183b      	adds	r3, r7, r0
 8016eec:	21fe      	movs	r1, #254	@ 0xfe
 8016eee:	400a      	ands	r2, r1
 8016ef0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	689b      	ldr	r3, [r3, #8]
 8016ef8:	b29a      	uxth	r2, r3
 8016efa:	240a      	movs	r4, #10
 8016efc:	193b      	adds	r3, r7, r4
 8016efe:	0592      	lsls	r2, r2, #22
 8016f00:	0d92      	lsrs	r2, r2, #22
 8016f02:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	68db      	ldr	r3, [r3, #12]
 8016f0a:	b29a      	uxth	r2, r3
 8016f0c:	2308      	movs	r3, #8
 8016f0e:	18fb      	adds	r3, r7, r3
 8016f10:	21fe      	movs	r1, #254	@ 0xfe
 8016f12:	400a      	ands	r2, r1
 8016f14:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	68db      	ldr	r3, [r3, #12]
 8016f1a:	2b02      	cmp	r3, #2
 8016f1c:	d148      	bne.n	8016fb0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8016f1e:	0021      	movs	r1, r4
 8016f20:	187b      	adds	r3, r7, r1
 8016f22:	881b      	ldrh	r3, [r3, #0]
 8016f24:	09db      	lsrs	r3, r3, #7
 8016f26:	b29a      	uxth	r2, r3
 8016f28:	183b      	adds	r3, r7, r0
 8016f2a:	881b      	ldrh	r3, [r3, #0]
 8016f2c:	4053      	eors	r3, r2
 8016f2e:	b29b      	uxth	r3, r3
 8016f30:	001a      	movs	r2, r3
 8016f32:	2306      	movs	r3, #6
 8016f34:	4013      	ands	r3, r2
 8016f36:	d120      	bne.n	8016f7a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8016f38:	183b      	adds	r3, r7, r0
 8016f3a:	187a      	adds	r2, r7, r1
 8016f3c:	8812      	ldrh	r2, [r2, #0]
 8016f3e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016f44:	1c5a      	adds	r2, r3, #1
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016f4e:	2b02      	cmp	r3, #2
 8016f50:	d14c      	bne.n	8016fec <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	2200      	movs	r2, #0
 8016f56:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	2208      	movs	r2, #8
 8016f5e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	2240      	movs	r2, #64	@ 0x40
 8016f64:	2100      	movs	r1, #0
 8016f66:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016f68:	183b      	adds	r3, r7, r0
 8016f6a:	881a      	ldrh	r2, [r3, #0]
 8016f6c:	197b      	adds	r3, r7, r5
 8016f6e:	7819      	ldrb	r1, [r3, #0]
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	0018      	movs	r0, r3
 8016f74:	f7ff f978 	bl	8016268 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8016f78:	e038      	b.n	8016fec <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8016f7a:	240c      	movs	r4, #12
 8016f7c:	193b      	adds	r3, r7, r4
 8016f7e:	2208      	movs	r2, #8
 8016f80:	18ba      	adds	r2, r7, r2
 8016f82:	8812      	ldrh	r2, [r2, #0]
 8016f84:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8016f86:	2380      	movs	r3, #128	@ 0x80
 8016f88:	021a      	lsls	r2, r3, #8
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	0011      	movs	r1, r2
 8016f8e:	0018      	movs	r0, r3
 8016f90:	f001 f868 	bl	8018064 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	2240      	movs	r2, #64	@ 0x40
 8016f98:	2100      	movs	r1, #0
 8016f9a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016f9c:	193b      	adds	r3, r7, r4
 8016f9e:	881a      	ldrh	r2, [r3, #0]
 8016fa0:	230f      	movs	r3, #15
 8016fa2:	18fb      	adds	r3, r7, r3
 8016fa4:	7819      	ldrb	r1, [r3, #0]
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	0018      	movs	r0, r3
 8016faa:	f7ff f95d 	bl	8016268 <HAL_I2C_AddrCallback>
}
 8016fae:	e01d      	b.n	8016fec <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8016fb0:	2380      	movs	r3, #128	@ 0x80
 8016fb2:	021a      	lsls	r2, r3, #8
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	0011      	movs	r1, r2
 8016fb8:	0018      	movs	r0, r3
 8016fba:	f001 f853 	bl	8018064 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	2240      	movs	r2, #64	@ 0x40
 8016fc2:	2100      	movs	r1, #0
 8016fc4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016fc6:	230c      	movs	r3, #12
 8016fc8:	18fb      	adds	r3, r7, r3
 8016fca:	881a      	ldrh	r2, [r3, #0]
 8016fcc:	230f      	movs	r3, #15
 8016fce:	18fb      	adds	r3, r7, r3
 8016fd0:	7819      	ldrb	r1, [r3, #0]
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	0018      	movs	r0, r3
 8016fd6:	f7ff f947 	bl	8016268 <HAL_I2C_AddrCallback>
}
 8016fda:	e007      	b.n	8016fec <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	2208      	movs	r2, #8
 8016fe2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	2240      	movs	r2, #64	@ 0x40
 8016fe8:	2100      	movs	r1, #0
 8016fea:	5499      	strb	r1, [r3, r2]
}
 8016fec:	46c0      	nop			@ (mov r8, r8)
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	b004      	add	sp, #16
 8016ff2:	bdb0      	pop	{r4, r5, r7, pc}

08016ff4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b082      	sub	sp, #8
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	2242      	movs	r2, #66	@ 0x42
 8017000:	2100      	movs	r1, #0
 8017002:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	2241      	movs	r2, #65	@ 0x41
 8017008:	5c9b      	ldrb	r3, [r3, r2]
 801700a:	b2db      	uxtb	r3, r3
 801700c:	2b21      	cmp	r3, #33	@ 0x21
 801700e:	d117      	bne.n	8017040 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	2241      	movs	r2, #65	@ 0x41
 8017014:	2120      	movs	r1, #32
 8017016:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	2211      	movs	r2, #17
 801701c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	2200      	movs	r2, #0
 8017022:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	2101      	movs	r1, #1
 8017028:	0018      	movs	r0, r3
 801702a:	f001 f81b 	bl	8018064 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	2240      	movs	r2, #64	@ 0x40
 8017032:	2100      	movs	r1, #0
 8017034:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	0018      	movs	r0, r3
 801703a:	f7ff f8f5 	bl	8016228 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801703e:	e016      	b.n	801706e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	2241      	movs	r2, #65	@ 0x41
 8017044:	2120      	movs	r1, #32
 8017046:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	2212      	movs	r2, #18
 801704c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	2200      	movs	r2, #0
 8017052:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	2102      	movs	r1, #2
 8017058:	0018      	movs	r0, r3
 801705a:	f001 f803 	bl	8018064 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	2240      	movs	r2, #64	@ 0x40
 8017062:	2100      	movs	r1, #0
 8017064:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	0018      	movs	r0, r3
 801706a:	f7ff f8e5 	bl	8016238 <HAL_I2C_MasterRxCpltCallback>
}
 801706e:	46c0      	nop			@ (mov r8, r8)
 8017070:	46bd      	mov	sp, r7
 8017072:	b002      	add	sp, #8
 8017074:	bd80      	pop	{r7, pc}
	...

08017078 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b084      	sub	sp, #16
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	2242      	movs	r2, #66	@ 0x42
 801708c:	2100      	movs	r1, #0
 801708e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	0b9b      	lsrs	r3, r3, #14
 8017094:	001a      	movs	r2, r3
 8017096:	2301      	movs	r3, #1
 8017098:	4013      	ands	r3, r2
 801709a:	d008      	beq.n	80170ae <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	681a      	ldr	r2, [r3, #0]
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	4925      	ldr	r1, [pc, #148]	@ (801713c <I2C_ITSlaveSeqCplt+0xc4>)
 80170a8:	400a      	ands	r2, r1
 80170aa:	601a      	str	r2, [r3, #0]
 80170ac:	e00d      	b.n	80170ca <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	0bdb      	lsrs	r3, r3, #15
 80170b2:	001a      	movs	r2, r3
 80170b4:	2301      	movs	r3, #1
 80170b6:	4013      	ands	r3, r2
 80170b8:	d007      	beq.n	80170ca <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	681a      	ldr	r2, [r3, #0]
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	491e      	ldr	r1, [pc, #120]	@ (8017140 <I2C_ITSlaveSeqCplt+0xc8>)
 80170c6:	400a      	ands	r2, r1
 80170c8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	2241      	movs	r2, #65	@ 0x41
 80170ce:	5c9b      	ldrb	r3, [r3, r2]
 80170d0:	b2db      	uxtb	r3, r3
 80170d2:	2b29      	cmp	r3, #41	@ 0x29
 80170d4:	d114      	bne.n	8017100 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	2241      	movs	r2, #65	@ 0x41
 80170da:	2128      	movs	r1, #40	@ 0x28
 80170dc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	2221      	movs	r2, #33	@ 0x21
 80170e2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	2101      	movs	r1, #1
 80170e8:	0018      	movs	r0, r3
 80170ea:	f000 ffbb 	bl	8018064 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	2240      	movs	r2, #64	@ 0x40
 80170f2:	2100      	movs	r1, #0
 80170f4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	0018      	movs	r0, r3
 80170fa:	f7ff f8a5 	bl	8016248 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80170fe:	e019      	b.n	8017134 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	2241      	movs	r2, #65	@ 0x41
 8017104:	5c9b      	ldrb	r3, [r3, r2]
 8017106:	b2db      	uxtb	r3, r3
 8017108:	2b2a      	cmp	r3, #42	@ 0x2a
 801710a:	d113      	bne.n	8017134 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	2241      	movs	r2, #65	@ 0x41
 8017110:	2128      	movs	r1, #40	@ 0x28
 8017112:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	2222      	movs	r2, #34	@ 0x22
 8017118:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	2102      	movs	r1, #2
 801711e:	0018      	movs	r0, r3
 8017120:	f000 ffa0 	bl	8018064 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	2240      	movs	r2, #64	@ 0x40
 8017128:	2100      	movs	r1, #0
 801712a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	0018      	movs	r0, r3
 8017130:	f7ff f892 	bl	8016258 <HAL_I2C_SlaveRxCpltCallback>
}
 8017134:	46c0      	nop			@ (mov r8, r8)
 8017136:	46bd      	mov	sp, r7
 8017138:	b004      	add	sp, #16
 801713a:	bd80      	pop	{r7, pc}
 801713c:	ffffbfff 	.word	0xffffbfff
 8017140:	ffff7fff 	.word	0xffff7fff

08017144 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b086      	sub	sp, #24
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
 801714c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 801714e:	683b      	ldr	r3, [r7, #0]
 8017150:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	2220      	movs	r2, #32
 8017158:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	2241      	movs	r2, #65	@ 0x41
 801715e:	5c9b      	ldrb	r3, [r3, r2]
 8017160:	b2db      	uxtb	r3, r3
 8017162:	2b21      	cmp	r3, #33	@ 0x21
 8017164:	d108      	bne.n	8017178 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	2101      	movs	r1, #1
 801716a:	0018      	movs	r0, r3
 801716c:	f000 ff7a 	bl	8018064 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	2211      	movs	r2, #17
 8017174:	631a      	str	r2, [r3, #48]	@ 0x30
 8017176:	e00d      	b.n	8017194 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	2241      	movs	r2, #65	@ 0x41
 801717c:	5c9b      	ldrb	r3, [r3, r2]
 801717e:	b2db      	uxtb	r3, r3
 8017180:	2b22      	cmp	r3, #34	@ 0x22
 8017182:	d107      	bne.n	8017194 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2102      	movs	r1, #2
 8017188:	0018      	movs	r0, r3
 801718a:	f000 ff6b 	bl	8018064 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	2212      	movs	r2, #18
 8017192:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	685a      	ldr	r2, [r3, #4]
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	4950      	ldr	r1, [pc, #320]	@ (80172e0 <I2C_ITMasterCplt+0x19c>)
 80171a0:	400a      	ands	r2, r1
 80171a2:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	2200      	movs	r2, #0
 80171a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	4a4d      	ldr	r2, [pc, #308]	@ (80172e4 <I2C_ITMasterCplt+0x1a0>)
 80171ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80171b0:	697b      	ldr	r3, [r7, #20]
 80171b2:	091b      	lsrs	r3, r3, #4
 80171b4:	001a      	movs	r2, r3
 80171b6:	2301      	movs	r3, #1
 80171b8:	4013      	ands	r3, r2
 80171ba:	d009      	beq.n	80171d0 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	2210      	movs	r2, #16
 80171c2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80171c8:	2204      	movs	r2, #4
 80171ca:	431a      	orrs	r2, r3
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	2241      	movs	r2, #65	@ 0x41
 80171d4:	5c9b      	ldrb	r3, [r3, r2]
 80171d6:	b2db      	uxtb	r3, r3
 80171d8:	2b60      	cmp	r3, #96	@ 0x60
 80171da:	d10b      	bne.n	80171f4 <I2C_ITMasterCplt+0xb0>
 80171dc:	697b      	ldr	r3, [r7, #20]
 80171de:	089b      	lsrs	r3, r3, #2
 80171e0:	001a      	movs	r2, r3
 80171e2:	2301      	movs	r3, #1
 80171e4:	4013      	ands	r3, r2
 80171e6:	d005      	beq.n	80171f4 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171ee:	b2db      	uxtb	r3, r3
 80171f0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80171f2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	0018      	movs	r0, r3
 80171f8:	f000 fb1f 	bl	801783a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017200:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	2241      	movs	r2, #65	@ 0x41
 8017206:	5c9b      	ldrb	r3, [r3, r2]
 8017208:	b2db      	uxtb	r3, r3
 801720a:	2b60      	cmp	r3, #96	@ 0x60
 801720c:	d002      	beq.n	8017214 <I2C_ITMasterCplt+0xd0>
 801720e:	693b      	ldr	r3, [r7, #16]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d007      	beq.n	8017224 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	0011      	movs	r1, r2
 801721c:	0018      	movs	r0, r3
 801721e:	f000 f9e1 	bl	80175e4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017222:	e058      	b.n	80172d6 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2241      	movs	r2, #65	@ 0x41
 8017228:	5c9b      	ldrb	r3, [r3, r2]
 801722a:	b2db      	uxtb	r3, r3
 801722c:	2b21      	cmp	r3, #33	@ 0x21
 801722e:	d126      	bne.n	801727e <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	2241      	movs	r2, #65	@ 0x41
 8017234:	2120      	movs	r1, #32
 8017236:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	2200      	movs	r2, #0
 801723c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	2242      	movs	r2, #66	@ 0x42
 8017242:	5c9b      	ldrb	r3, [r3, r2]
 8017244:	b2db      	uxtb	r3, r3
 8017246:	2b40      	cmp	r3, #64	@ 0x40
 8017248:	d10c      	bne.n	8017264 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	2242      	movs	r2, #66	@ 0x42
 801724e:	2100      	movs	r1, #0
 8017250:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	2240      	movs	r2, #64	@ 0x40
 8017256:	2100      	movs	r1, #0
 8017258:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	0018      	movs	r0, r3
 801725e:	f7ff f81b 	bl	8016298 <HAL_I2C_MemTxCpltCallback>
}
 8017262:	e038      	b.n	80172d6 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2242      	movs	r2, #66	@ 0x42
 8017268:	2100      	movs	r1, #0
 801726a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	2240      	movs	r2, #64	@ 0x40
 8017270:	2100      	movs	r1, #0
 8017272:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	0018      	movs	r0, r3
 8017278:	f7fe ffd6 	bl	8016228 <HAL_I2C_MasterTxCpltCallback>
}
 801727c:	e02b      	b.n	80172d6 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	2241      	movs	r2, #65	@ 0x41
 8017282:	5c9b      	ldrb	r3, [r3, r2]
 8017284:	b2db      	uxtb	r3, r3
 8017286:	2b22      	cmp	r3, #34	@ 0x22
 8017288:	d125      	bne.n	80172d6 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2241      	movs	r2, #65	@ 0x41
 801728e:	2120      	movs	r1, #32
 8017290:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	2200      	movs	r2, #0
 8017296:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	2242      	movs	r2, #66	@ 0x42
 801729c:	5c9b      	ldrb	r3, [r3, r2]
 801729e:	b2db      	uxtb	r3, r3
 80172a0:	2b40      	cmp	r3, #64	@ 0x40
 80172a2:	d10c      	bne.n	80172be <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	2242      	movs	r2, #66	@ 0x42
 80172a8:	2100      	movs	r1, #0
 80172aa:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	2240      	movs	r2, #64	@ 0x40
 80172b0:	2100      	movs	r1, #0
 80172b2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	0018      	movs	r0, r3
 80172b8:	f7fe fff6 	bl	80162a8 <HAL_I2C_MemRxCpltCallback>
}
 80172bc:	e00b      	b.n	80172d6 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	2242      	movs	r2, #66	@ 0x42
 80172c2:	2100      	movs	r1, #0
 80172c4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	2240      	movs	r2, #64	@ 0x40
 80172ca:	2100      	movs	r1, #0
 80172cc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	0018      	movs	r0, r3
 80172d2:	f7fe ffb1 	bl	8016238 <HAL_I2C_MasterRxCpltCallback>
}
 80172d6:	46c0      	nop			@ (mov r8, r8)
 80172d8:	46bd      	mov	sp, r7
 80172da:	b006      	add	sp, #24
 80172dc:	bd80      	pop	{r7, pc}
 80172de:	46c0      	nop			@ (mov r8, r8)
 80172e0:	fe00e800 	.word	0xfe00e800
 80172e4:	ffff0000 	.word	0xffff0000

080172e8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b086      	sub	sp, #24
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
 80172f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80172fa:	683b      	ldr	r3, [r7, #0]
 80172fc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80172fe:	200f      	movs	r0, #15
 8017300:	183b      	adds	r3, r7, r0
 8017302:	687a      	ldr	r2, [r7, #4]
 8017304:	2141      	movs	r1, #65	@ 0x41
 8017306:	5c52      	ldrb	r2, [r2, r1]
 8017308:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	2220      	movs	r2, #32
 8017310:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017312:	183b      	adds	r3, r7, r0
 8017314:	781b      	ldrb	r3, [r3, #0]
 8017316:	2b21      	cmp	r3, #33	@ 0x21
 8017318:	d003      	beq.n	8017322 <I2C_ITSlaveCplt+0x3a>
 801731a:	183b      	adds	r3, r7, r0
 801731c:	781b      	ldrb	r3, [r3, #0]
 801731e:	2b29      	cmp	r3, #41	@ 0x29
 8017320:	d109      	bne.n	8017336 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8017322:	4a7d      	ldr	r2, [pc, #500]	@ (8017518 <I2C_ITSlaveCplt+0x230>)
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	0011      	movs	r1, r2
 8017328:	0018      	movs	r0, r3
 801732a:	f000 fe9b 	bl	8018064 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	2221      	movs	r2, #33	@ 0x21
 8017332:	631a      	str	r2, [r3, #48]	@ 0x30
 8017334:	e011      	b.n	801735a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017336:	220f      	movs	r2, #15
 8017338:	18bb      	adds	r3, r7, r2
 801733a:	781b      	ldrb	r3, [r3, #0]
 801733c:	2b22      	cmp	r3, #34	@ 0x22
 801733e:	d003      	beq.n	8017348 <I2C_ITSlaveCplt+0x60>
 8017340:	18bb      	adds	r3, r7, r2
 8017342:	781b      	ldrb	r3, [r3, #0]
 8017344:	2b2a      	cmp	r3, #42	@ 0x2a
 8017346:	d108      	bne.n	801735a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8017348:	4a74      	ldr	r2, [pc, #464]	@ (801751c <I2C_ITSlaveCplt+0x234>)
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	0011      	movs	r1, r2
 801734e:	0018      	movs	r0, r3
 8017350:	f000 fe88 	bl	8018064 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	2222      	movs	r2, #34	@ 0x22
 8017358:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	685a      	ldr	r2, [r3, #4]
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	2180      	movs	r1, #128	@ 0x80
 8017366:	0209      	lsls	r1, r1, #8
 8017368:	430a      	orrs	r2, r1
 801736a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	685a      	ldr	r2, [r3, #4]
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	496a      	ldr	r1, [pc, #424]	@ (8017520 <I2C_ITSlaveCplt+0x238>)
 8017378:	400a      	ands	r2, r1
 801737a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	0018      	movs	r0, r3
 8017380:	f000 fa5b 	bl	801783a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017384:	693b      	ldr	r3, [r7, #16]
 8017386:	0b9b      	lsrs	r3, r3, #14
 8017388:	001a      	movs	r2, r3
 801738a:	2301      	movs	r3, #1
 801738c:	4013      	ands	r3, r2
 801738e:	d013      	beq.n	80173b8 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	681a      	ldr	r2, [r3, #0]
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	4962      	ldr	r1, [pc, #392]	@ (8017524 <I2C_ITSlaveCplt+0x23c>)
 801739c:	400a      	ands	r2, r1
 801739e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d020      	beq.n	80173ea <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	685b      	ldr	r3, [r3, #4]
 80173b0:	b29a      	uxth	r2, r3
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80173b6:	e018      	b.n	80173ea <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80173b8:	693b      	ldr	r3, [r7, #16]
 80173ba:	0bdb      	lsrs	r3, r3, #15
 80173bc:	001a      	movs	r2, r3
 80173be:	2301      	movs	r3, #1
 80173c0:	4013      	ands	r3, r2
 80173c2:	d012      	beq.n	80173ea <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	681a      	ldr	r2, [r3, #0]
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	4956      	ldr	r1, [pc, #344]	@ (8017528 <I2C_ITSlaveCplt+0x240>)
 80173d0:	400a      	ands	r2, r1
 80173d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d006      	beq.n	80173ea <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	685b      	ldr	r3, [r3, #4]
 80173e4:	b29a      	uxth	r2, r3
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80173ea:	697b      	ldr	r3, [r7, #20]
 80173ec:	089b      	lsrs	r3, r3, #2
 80173ee:	001a      	movs	r2, r3
 80173f0:	2301      	movs	r3, #1
 80173f2:	4013      	ands	r3, r2
 80173f4:	d020      	beq.n	8017438 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80173f6:	697b      	ldr	r3, [r7, #20]
 80173f8:	2204      	movs	r2, #4
 80173fa:	4393      	bics	r3, r2
 80173fc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017408:	b2d2      	uxtb	r2, r2
 801740a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017410:	1c5a      	adds	r2, r3, #1
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801741a:	2b00      	cmp	r3, #0
 801741c:	d00c      	beq.n	8017438 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017422:	3b01      	subs	r3, #1
 8017424:	b29a      	uxth	r2, r3
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801742e:	b29b      	uxth	r3, r3
 8017430:	3b01      	subs	r3, #1
 8017432:	b29a      	uxth	r2, r3
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801743c:	b29b      	uxth	r3, r3
 801743e:	2b00      	cmp	r3, #0
 8017440:	d005      	beq.n	801744e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017446:	2204      	movs	r2, #4
 8017448:	431a      	orrs	r2, r3
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	2242      	movs	r2, #66	@ 0x42
 8017452:	2100      	movs	r1, #0
 8017454:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	2200      	movs	r2, #0
 801745a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017460:	2b00      	cmp	r3, #0
 8017462:	d013      	beq.n	801748c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	0011      	movs	r1, r2
 801746c:	0018      	movs	r0, r3
 801746e:	f000 f8b9 	bl	80175e4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	2241      	movs	r2, #65	@ 0x41
 8017476:	5c9b      	ldrb	r3, [r3, r2]
 8017478:	b2db      	uxtb	r3, r3
 801747a:	2b28      	cmp	r3, #40	@ 0x28
 801747c:	d147      	bne.n	801750e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801747e:	697a      	ldr	r2, [r7, #20]
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	0011      	movs	r1, r2
 8017484:	0018      	movs	r0, r3
 8017486:	f000 f853 	bl	8017530 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801748a:	e040      	b.n	801750e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017490:	4a26      	ldr	r2, [pc, #152]	@ (801752c <I2C_ITSlaveCplt+0x244>)
 8017492:	4293      	cmp	r3, r2
 8017494:	d016      	beq.n	80174c4 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	0018      	movs	r0, r3
 801749a:	f7ff fded 	bl	8017078 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	4a22      	ldr	r2, [pc, #136]	@ (801752c <I2C_ITSlaveCplt+0x244>)
 80174a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	2241      	movs	r2, #65	@ 0x41
 80174a8:	2120      	movs	r1, #32
 80174aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	2200      	movs	r2, #0
 80174b0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	2240      	movs	r2, #64	@ 0x40
 80174b6:	2100      	movs	r1, #0
 80174b8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	0018      	movs	r0, r3
 80174be:	f7fe fee3 	bl	8016288 <HAL_I2C_ListenCpltCallback>
}
 80174c2:	e024      	b.n	801750e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	2241      	movs	r2, #65	@ 0x41
 80174c8:	5c9b      	ldrb	r3, [r3, r2]
 80174ca:	b2db      	uxtb	r3, r3
 80174cc:	2b22      	cmp	r3, #34	@ 0x22
 80174ce:	d10f      	bne.n	80174f0 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	2241      	movs	r2, #65	@ 0x41
 80174d4:	2120      	movs	r1, #32
 80174d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	2200      	movs	r2, #0
 80174dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	2240      	movs	r2, #64	@ 0x40
 80174e2:	2100      	movs	r1, #0
 80174e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	0018      	movs	r0, r3
 80174ea:	f7fe feb5 	bl	8016258 <HAL_I2C_SlaveRxCpltCallback>
}
 80174ee:	e00e      	b.n	801750e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	2241      	movs	r2, #65	@ 0x41
 80174f4:	2120      	movs	r1, #32
 80174f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	2200      	movs	r2, #0
 80174fc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	2240      	movs	r2, #64	@ 0x40
 8017502:	2100      	movs	r1, #0
 8017504:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	0018      	movs	r0, r3
 801750a:	f7fe fe9d 	bl	8016248 <HAL_I2C_SlaveTxCpltCallback>
}
 801750e:	46c0      	nop			@ (mov r8, r8)
 8017510:	46bd      	mov	sp, r7
 8017512:	b006      	add	sp, #24
 8017514:	bd80      	pop	{r7, pc}
 8017516:	46c0      	nop			@ (mov r8, r8)
 8017518:	00008001 	.word	0x00008001
 801751c:	00008002 	.word	0x00008002
 8017520:	fe00e800 	.word	0xfe00e800
 8017524:	ffffbfff 	.word	0xffffbfff
 8017528:	ffff7fff 	.word	0xffff7fff
 801752c:	ffff0000 	.word	0xffff0000

08017530 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b082      	sub	sp, #8
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
 8017538:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	4a27      	ldr	r2, [pc, #156]	@ (80175dc <I2C_ITListenCplt+0xac>)
 801753e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	2200      	movs	r2, #0
 8017544:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	2241      	movs	r2, #65	@ 0x41
 801754a:	2120      	movs	r1, #32
 801754c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	2242      	movs	r2, #66	@ 0x42
 8017552:	2100      	movs	r1, #0
 8017554:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	2200      	movs	r2, #0
 801755a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801755c:	683b      	ldr	r3, [r7, #0]
 801755e:	089b      	lsrs	r3, r3, #2
 8017560:	001a      	movs	r2, r3
 8017562:	2301      	movs	r3, #1
 8017564:	4013      	ands	r3, r2
 8017566:	d022      	beq.n	80175ae <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017572:	b2d2      	uxtb	r2, r2
 8017574:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801757a:	1c5a      	adds	r2, r3, #1
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017584:	2b00      	cmp	r3, #0
 8017586:	d012      	beq.n	80175ae <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801758c:	3b01      	subs	r3, #1
 801758e:	b29a      	uxth	r2, r3
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017598:	b29b      	uxth	r3, r3
 801759a:	3b01      	subs	r3, #1
 801759c:	b29a      	uxth	r2, r3
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175a6:	2204      	movs	r2, #4
 80175a8:	431a      	orrs	r2, r3
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80175ae:	4a0c      	ldr	r2, [pc, #48]	@ (80175e0 <I2C_ITListenCplt+0xb0>)
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	0011      	movs	r1, r2
 80175b4:	0018      	movs	r0, r3
 80175b6:	f000 fd55 	bl	8018064 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	2210      	movs	r2, #16
 80175c0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	2240      	movs	r2, #64	@ 0x40
 80175c6:	2100      	movs	r1, #0
 80175c8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	0018      	movs	r0, r3
 80175ce:	f7fe fe5b 	bl	8016288 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80175d2:	46c0      	nop			@ (mov r8, r8)
 80175d4:	46bd      	mov	sp, r7
 80175d6:	b002      	add	sp, #8
 80175d8:	bd80      	pop	{r7, pc}
 80175da:	46c0      	nop			@ (mov r8, r8)
 80175dc:	ffff0000 	.word	0xffff0000
 80175e0:	00008003 	.word	0x00008003

080175e4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b084      	sub	sp, #16
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]
 80175ec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80175ee:	200f      	movs	r0, #15
 80175f0:	183b      	adds	r3, r7, r0
 80175f2:	687a      	ldr	r2, [r7, #4]
 80175f4:	2141      	movs	r1, #65	@ 0x41
 80175f6:	5c52      	ldrb	r2, [r2, r1]
 80175f8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	2242      	movs	r2, #66	@ 0x42
 80175fe:	2100      	movs	r1, #0
 8017600:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	4a72      	ldr	r2, [pc, #456]	@ (80177d0 <I2C_ITError+0x1ec>)
 8017606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	2200      	movs	r2, #0
 801760c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017612:	683b      	ldr	r3, [r7, #0]
 8017614:	431a      	orrs	r2, r3
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801761a:	183b      	adds	r3, r7, r0
 801761c:	781b      	ldrb	r3, [r3, #0]
 801761e:	2b28      	cmp	r3, #40	@ 0x28
 8017620:	d007      	beq.n	8017632 <I2C_ITError+0x4e>
 8017622:	183b      	adds	r3, r7, r0
 8017624:	781b      	ldrb	r3, [r3, #0]
 8017626:	2b29      	cmp	r3, #41	@ 0x29
 8017628:	d003      	beq.n	8017632 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801762a:	183b      	adds	r3, r7, r0
 801762c:	781b      	ldrb	r3, [r3, #0]
 801762e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017630:	d10c      	bne.n	801764c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	2103      	movs	r1, #3
 8017636:	0018      	movs	r0, r3
 8017638:	f000 fd14 	bl	8018064 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	2241      	movs	r2, #65	@ 0x41
 8017640:	2128      	movs	r1, #40	@ 0x28
 8017642:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	4a63      	ldr	r2, [pc, #396]	@ (80177d4 <I2C_ITError+0x1f0>)
 8017648:	635a      	str	r2, [r3, #52]	@ 0x34
 801764a:	e032      	b.n	80176b2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801764c:	4a62      	ldr	r2, [pc, #392]	@ (80177d8 <I2C_ITError+0x1f4>)
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	0011      	movs	r1, r2
 8017652:	0018      	movs	r0, r3
 8017654:	f000 fd06 	bl	8018064 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	0018      	movs	r0, r3
 801765c:	f000 f8ed 	bl	801783a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	2241      	movs	r2, #65	@ 0x41
 8017664:	5c9b      	ldrb	r3, [r3, r2]
 8017666:	b2db      	uxtb	r3, r3
 8017668:	2b60      	cmp	r3, #96	@ 0x60
 801766a:	d01f      	beq.n	80176ac <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2241      	movs	r2, #65	@ 0x41
 8017670:	2120      	movs	r1, #32
 8017672:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	699b      	ldr	r3, [r3, #24]
 801767a:	2220      	movs	r2, #32
 801767c:	4013      	ands	r3, r2
 801767e:	2b20      	cmp	r3, #32
 8017680:	d114      	bne.n	80176ac <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	699b      	ldr	r3, [r3, #24]
 8017688:	2210      	movs	r2, #16
 801768a:	4013      	ands	r3, r2
 801768c:	2b10      	cmp	r3, #16
 801768e:	d109      	bne.n	80176a4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	2210      	movs	r2, #16
 8017696:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801769c:	2204      	movs	r2, #4
 801769e:	431a      	orrs	r2, r3
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	2220      	movs	r2, #32
 80176aa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	2200      	movs	r2, #0
 80176b0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80176b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d03b      	beq.n	8017738 <I2C_ITError+0x154>
 80176c0:	68bb      	ldr	r3, [r7, #8]
 80176c2:	2b11      	cmp	r3, #17
 80176c4:	d002      	beq.n	80176cc <I2C_ITError+0xe8>
 80176c6:	68bb      	ldr	r3, [r7, #8]
 80176c8:	2b21      	cmp	r3, #33	@ 0x21
 80176ca:	d135      	bne.n	8017738 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	681a      	ldr	r2, [r3, #0]
 80176d2:	2380      	movs	r3, #128	@ 0x80
 80176d4:	01db      	lsls	r3, r3, #7
 80176d6:	401a      	ands	r2, r3
 80176d8:	2380      	movs	r3, #128	@ 0x80
 80176da:	01db      	lsls	r3, r3, #7
 80176dc:	429a      	cmp	r2, r3
 80176de:	d107      	bne.n	80176f0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	681a      	ldr	r2, [r3, #0]
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	493c      	ldr	r1, [pc, #240]	@ (80177dc <I2C_ITError+0x1f8>)
 80176ec:	400a      	ands	r2, r1
 80176ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80176f4:	0018      	movs	r0, r3
 80176f6:	f7fd fa56 	bl	8014ba6 <HAL_DMA_GetState>
 80176fa:	0003      	movs	r3, r0
 80176fc:	2b01      	cmp	r3, #1
 80176fe:	d016      	beq.n	801772e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017704:	4a36      	ldr	r2, [pc, #216]	@ (80177e0 <I2C_ITError+0x1fc>)
 8017706:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	2240      	movs	r2, #64	@ 0x40
 801770c:	2100      	movs	r1, #0
 801770e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017714:	0018      	movs	r0, r3
 8017716:	f7fd f951 	bl	80149bc <HAL_DMA_Abort_IT>
 801771a:	1e03      	subs	r3, r0, #0
 801771c:	d051      	beq.n	80177c2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017728:	0018      	movs	r0, r3
 801772a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801772c:	e049      	b.n	80177c2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	0018      	movs	r0, r3
 8017732:	f000 f859 	bl	80177e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8017736:	e044      	b.n	80177c2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801773c:	2b00      	cmp	r3, #0
 801773e:	d03b      	beq.n	80177b8 <I2C_ITError+0x1d4>
 8017740:	68bb      	ldr	r3, [r7, #8]
 8017742:	2b12      	cmp	r3, #18
 8017744:	d002      	beq.n	801774c <I2C_ITError+0x168>
 8017746:	68bb      	ldr	r3, [r7, #8]
 8017748:	2b22      	cmp	r3, #34	@ 0x22
 801774a:	d135      	bne.n	80177b8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	681a      	ldr	r2, [r3, #0]
 8017752:	2380      	movs	r3, #128	@ 0x80
 8017754:	021b      	lsls	r3, r3, #8
 8017756:	401a      	ands	r2, r3
 8017758:	2380      	movs	r3, #128	@ 0x80
 801775a:	021b      	lsls	r3, r3, #8
 801775c:	429a      	cmp	r2, r3
 801775e:	d107      	bne.n	8017770 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	681a      	ldr	r2, [r3, #0]
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	491e      	ldr	r1, [pc, #120]	@ (80177e4 <I2C_ITError+0x200>)
 801776c:	400a      	ands	r2, r1
 801776e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017774:	0018      	movs	r0, r3
 8017776:	f7fd fa16 	bl	8014ba6 <HAL_DMA_GetState>
 801777a:	0003      	movs	r3, r0
 801777c:	2b01      	cmp	r3, #1
 801777e:	d016      	beq.n	80177ae <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017784:	4a16      	ldr	r2, [pc, #88]	@ (80177e0 <I2C_ITError+0x1fc>)
 8017786:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	2240      	movs	r2, #64	@ 0x40
 801778c:	2100      	movs	r1, #0
 801778e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017794:	0018      	movs	r0, r3
 8017796:	f7fd f911 	bl	80149bc <HAL_DMA_Abort_IT>
 801779a:	1e03      	subs	r3, r0, #0
 801779c:	d013      	beq.n	80177c6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80177a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80177a8:	0018      	movs	r0, r3
 80177aa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80177ac:	e00b      	b.n	80177c6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	0018      	movs	r0, r3
 80177b2:	f000 f819 	bl	80177e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80177b6:	e006      	b.n	80177c6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	0018      	movs	r0, r3
 80177bc:	f000 f814 	bl	80177e8 <I2C_TreatErrorCallback>
  }
}
 80177c0:	e002      	b.n	80177c8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80177c2:	46c0      	nop			@ (mov r8, r8)
 80177c4:	e000      	b.n	80177c8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80177c6:	46c0      	nop			@ (mov r8, r8)
}
 80177c8:	46c0      	nop			@ (mov r8, r8)
 80177ca:	46bd      	mov	sp, r7
 80177cc:	b004      	add	sp, #16
 80177ce:	bd80      	pop	{r7, pc}
 80177d0:	ffff0000 	.word	0xffff0000
 80177d4:	0801655d 	.word	0x0801655d
 80177d8:	00008003 	.word	0x00008003
 80177dc:	ffffbfff 	.word	0xffffbfff
 80177e0:	080179f3 	.word	0x080179f3
 80177e4:	ffff7fff 	.word	0xffff7fff

080177e8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80177e8:	b580      	push	{r7, lr}
 80177ea:	b082      	sub	sp, #8
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	2241      	movs	r2, #65	@ 0x41
 80177f4:	5c9b      	ldrb	r3, [r3, r2]
 80177f6:	b2db      	uxtb	r3, r3
 80177f8:	2b60      	cmp	r3, #96	@ 0x60
 80177fa:	d10f      	bne.n	801781c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	2241      	movs	r2, #65	@ 0x41
 8017800:	2120      	movs	r1, #32
 8017802:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	2200      	movs	r2, #0
 8017808:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	2240      	movs	r2, #64	@ 0x40
 801780e:	2100      	movs	r1, #0
 8017810:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	0018      	movs	r0, r3
 8017816:	f7fe fd57 	bl	80162c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801781a:	e00a      	b.n	8017832 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	2200      	movs	r2, #0
 8017820:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	2240      	movs	r2, #64	@ 0x40
 8017826:	2100      	movs	r1, #0
 8017828:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	0018      	movs	r0, r3
 801782e:	f7fe fd43 	bl	80162b8 <HAL_I2C_ErrorCallback>
}
 8017832:	46c0      	nop			@ (mov r8, r8)
 8017834:	46bd      	mov	sp, r7
 8017836:	b002      	add	sp, #8
 8017838:	bd80      	pop	{r7, pc}

0801783a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801783a:	b580      	push	{r7, lr}
 801783c:	b082      	sub	sp, #8
 801783e:	af00      	add	r7, sp, #0
 8017840:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	699b      	ldr	r3, [r3, #24]
 8017848:	2202      	movs	r2, #2
 801784a:	4013      	ands	r3, r2
 801784c:	2b02      	cmp	r3, #2
 801784e:	d103      	bne.n	8017858 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	2200      	movs	r2, #0
 8017856:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	699b      	ldr	r3, [r3, #24]
 801785e:	2201      	movs	r2, #1
 8017860:	4013      	ands	r3, r2
 8017862:	2b01      	cmp	r3, #1
 8017864:	d007      	beq.n	8017876 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	699a      	ldr	r2, [r3, #24]
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	2101      	movs	r1, #1
 8017872:	430a      	orrs	r2, r1
 8017874:	619a      	str	r2, [r3, #24]
  }
}
 8017876:	46c0      	nop			@ (mov r8, r8)
 8017878:	46bd      	mov	sp, r7
 801787a:	b002      	add	sp, #8
 801787c:	bd80      	pop	{r7, pc}
	...

08017880 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b084      	sub	sp, #16
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801788c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	681a      	ldr	r2, [r3, #0]
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	4920      	ldr	r1, [pc, #128]	@ (801791c <I2C_DMAMasterTransmitCplt+0x9c>)
 801789a:	400a      	ands	r2, r1
 801789c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80178a2:	b29b      	uxth	r3, r3
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d105      	bne.n	80178b4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	2120      	movs	r1, #32
 80178ac:	0018      	movs	r0, r3
 80178ae:	f000 fb4b 	bl	8017f48 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80178b2:	e02e      	b.n	8017912 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178b8:	68fa      	ldr	r2, [r7, #12]
 80178ba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80178bc:	189a      	adds	r2, r3, r2
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80178c6:	b29b      	uxth	r3, r3
 80178c8:	2bff      	cmp	r3, #255	@ 0xff
 80178ca:	d903      	bls.n	80178d4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	22ff      	movs	r2, #255	@ 0xff
 80178d0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80178d2:	e004      	b.n	80178de <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80178d8:	b29a      	uxth	r2, r3
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178e6:	0019      	movs	r1, r3
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	3328      	adds	r3, #40	@ 0x28
 80178ee:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80178f4:	f7fc ffbc 	bl	8014870 <HAL_DMA_Start_IT>
 80178f8:	1e03      	subs	r3, r0, #0
 80178fa:	d005      	beq.n	8017908 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	2110      	movs	r1, #16
 8017900:	0018      	movs	r0, r3
 8017902:	f7ff fe6f 	bl	80175e4 <I2C_ITError>
}
 8017906:	e004      	b.n	8017912 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	2140      	movs	r1, #64	@ 0x40
 801790c:	0018      	movs	r0, r3
 801790e:	f000 fb1b 	bl	8017f48 <I2C_Enable_IRQ>
}
 8017912:	46c0      	nop			@ (mov r8, r8)
 8017914:	46bd      	mov	sp, r7
 8017916:	b004      	add	sp, #16
 8017918:	bd80      	pop	{r7, pc}
 801791a:	46c0      	nop			@ (mov r8, r8)
 801791c:	ffffbfff 	.word	0xffffbfff

08017920 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b084      	sub	sp, #16
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801792c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	681a      	ldr	r2, [r3, #0]
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	4920      	ldr	r1, [pc, #128]	@ (80179bc <I2C_DMAMasterReceiveCplt+0x9c>)
 801793a:	400a      	ands	r2, r1
 801793c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017942:	b29b      	uxth	r3, r3
 8017944:	2b00      	cmp	r3, #0
 8017946:	d105      	bne.n	8017954 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	2120      	movs	r1, #32
 801794c:	0018      	movs	r0, r3
 801794e:	f000 fafb 	bl	8017f48 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8017952:	e02e      	b.n	80179b2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017958:	68fa      	ldr	r2, [r7, #12]
 801795a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801795c:	189a      	adds	r2, r3, r2
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017966:	b29b      	uxth	r3, r3
 8017968:	2bff      	cmp	r3, #255	@ 0xff
 801796a:	d903      	bls.n	8017974 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	22ff      	movs	r2, #255	@ 0xff
 8017970:	851a      	strh	r2, [r3, #40]	@ 0x28
 8017972:	e004      	b.n	801797e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017978:	b29a      	uxth	r2, r3
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	3324      	adds	r3, #36	@ 0x24
 8017988:	0019      	movs	r1, r3
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801798e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8017994:	f7fc ff6c 	bl	8014870 <HAL_DMA_Start_IT>
 8017998:	1e03      	subs	r3, r0, #0
 801799a:	d005      	beq.n	80179a8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	2110      	movs	r1, #16
 80179a0:	0018      	movs	r0, r3
 80179a2:	f7ff fe1f 	bl	80175e4 <I2C_ITError>
}
 80179a6:	e004      	b.n	80179b2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	2140      	movs	r1, #64	@ 0x40
 80179ac:	0018      	movs	r0, r3
 80179ae:	f000 facb 	bl	8017f48 <I2C_Enable_IRQ>
}
 80179b2:	46c0      	nop			@ (mov r8, r8)
 80179b4:	46bd      	mov	sp, r7
 80179b6:	b004      	add	sp, #16
 80179b8:	bd80      	pop	{r7, pc}
 80179ba:	46c0      	nop			@ (mov r8, r8)
 80179bc:	ffff7fff 	.word	0xffff7fff

080179c0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b084      	sub	sp, #16
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80179cc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	685a      	ldr	r2, [r3, #4]
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	2180      	movs	r1, #128	@ 0x80
 80179da:	0209      	lsls	r1, r1, #8
 80179dc:	430a      	orrs	r2, r1
 80179de:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	2110      	movs	r1, #16
 80179e4:	0018      	movs	r0, r3
 80179e6:	f7ff fdfd 	bl	80175e4 <I2C_ITError>
}
 80179ea:	46c0      	nop			@ (mov r8, r8)
 80179ec:	46bd      	mov	sp, r7
 80179ee:	b004      	add	sp, #16
 80179f0:	bd80      	pop	{r7, pc}

080179f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80179f2:	b580      	push	{r7, lr}
 80179f4:	b084      	sub	sp, #16
 80179f6:	af00      	add	r7, sp, #0
 80179f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80179fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d003      	beq.n	8017a10 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d003      	beq.n	8017a20 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	0018      	movs	r0, r3
 8017a24:	f7ff fee0 	bl	80177e8 <I2C_TreatErrorCallback>
}
 8017a28:	46c0      	nop			@ (mov r8, r8)
 8017a2a:	46bd      	mov	sp, r7
 8017a2c:	b004      	add	sp, #16
 8017a2e:	bd80      	pop	{r7, pc}

08017a30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b084      	sub	sp, #16
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	60f8      	str	r0, [r7, #12]
 8017a38:	60b9      	str	r1, [r7, #8]
 8017a3a:	603b      	str	r3, [r7, #0]
 8017a3c:	1dfb      	adds	r3, r7, #7
 8017a3e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8017a40:	e030      	b.n	8017aa4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017a42:	683b      	ldr	r3, [r7, #0]
 8017a44:	3301      	adds	r3, #1
 8017a46:	d02d      	beq.n	8017aa4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017a48:	f7fc f9c0 	bl	8013dcc <HAL_GetTick>
 8017a4c:	0002      	movs	r2, r0
 8017a4e:	69bb      	ldr	r3, [r7, #24]
 8017a50:	1ad3      	subs	r3, r2, r3
 8017a52:	683a      	ldr	r2, [r7, #0]
 8017a54:	429a      	cmp	r2, r3
 8017a56:	d302      	bcc.n	8017a5e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d122      	bne.n	8017aa4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	699b      	ldr	r3, [r3, #24]
 8017a64:	68ba      	ldr	r2, [r7, #8]
 8017a66:	4013      	ands	r3, r2
 8017a68:	68ba      	ldr	r2, [r7, #8]
 8017a6a:	1ad3      	subs	r3, r2, r3
 8017a6c:	425a      	negs	r2, r3
 8017a6e:	4153      	adcs	r3, r2
 8017a70:	b2db      	uxtb	r3, r3
 8017a72:	001a      	movs	r2, r3
 8017a74:	1dfb      	adds	r3, r7, #7
 8017a76:	781b      	ldrb	r3, [r3, #0]
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d113      	bne.n	8017aa4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a80:	2220      	movs	r2, #32
 8017a82:	431a      	orrs	r2, r3
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	2241      	movs	r2, #65	@ 0x41
 8017a8c:	2120      	movs	r1, #32
 8017a8e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	2242      	movs	r2, #66	@ 0x42
 8017a94:	2100      	movs	r1, #0
 8017a96:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	2240      	movs	r2, #64	@ 0x40
 8017a9c:	2100      	movs	r1, #0
 8017a9e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	e00f      	b.n	8017ac4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	699b      	ldr	r3, [r3, #24]
 8017aaa:	68ba      	ldr	r2, [r7, #8]
 8017aac:	4013      	ands	r3, r2
 8017aae:	68ba      	ldr	r2, [r7, #8]
 8017ab0:	1ad3      	subs	r3, r2, r3
 8017ab2:	425a      	negs	r2, r3
 8017ab4:	4153      	adcs	r3, r2
 8017ab6:	b2db      	uxtb	r3, r3
 8017ab8:	001a      	movs	r2, r3
 8017aba:	1dfb      	adds	r3, r7, #7
 8017abc:	781b      	ldrb	r3, [r3, #0]
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	d0bf      	beq.n	8017a42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017ac2:	2300      	movs	r3, #0
}
 8017ac4:	0018      	movs	r0, r3
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	b004      	add	sp, #16
 8017aca:	bd80      	pop	{r7, pc}

08017acc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b084      	sub	sp, #16
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	60f8      	str	r0, [r7, #12]
 8017ad4:	60b9      	str	r1, [r7, #8]
 8017ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017ad8:	e032      	b.n	8017b40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017ada:	687a      	ldr	r2, [r7, #4]
 8017adc:	68b9      	ldr	r1, [r7, #8]
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	0018      	movs	r0, r3
 8017ae2:	f000 f8ff 	bl	8017ce4 <I2C_IsErrorOccurred>
 8017ae6:	1e03      	subs	r3, r0, #0
 8017ae8:	d001      	beq.n	8017aee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017aea:	2301      	movs	r3, #1
 8017aec:	e030      	b.n	8017b50 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017aee:	68bb      	ldr	r3, [r7, #8]
 8017af0:	3301      	adds	r3, #1
 8017af2:	d025      	beq.n	8017b40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017af4:	f7fc f96a 	bl	8013dcc <HAL_GetTick>
 8017af8:	0002      	movs	r2, r0
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	1ad3      	subs	r3, r2, r3
 8017afe:	68ba      	ldr	r2, [r7, #8]
 8017b00:	429a      	cmp	r2, r3
 8017b02:	d302      	bcc.n	8017b0a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d11a      	bne.n	8017b40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	699b      	ldr	r3, [r3, #24]
 8017b10:	2202      	movs	r2, #2
 8017b12:	4013      	ands	r3, r2
 8017b14:	2b02      	cmp	r3, #2
 8017b16:	d013      	beq.n	8017b40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017b1c:	2220      	movs	r2, #32
 8017b1e:	431a      	orrs	r2, r3
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	2241      	movs	r2, #65	@ 0x41
 8017b28:	2120      	movs	r1, #32
 8017b2a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	2242      	movs	r2, #66	@ 0x42
 8017b30:	2100      	movs	r1, #0
 8017b32:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	2240      	movs	r2, #64	@ 0x40
 8017b38:	2100      	movs	r1, #0
 8017b3a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8017b3c:	2301      	movs	r3, #1
 8017b3e:	e007      	b.n	8017b50 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	699b      	ldr	r3, [r3, #24]
 8017b46:	2202      	movs	r2, #2
 8017b48:	4013      	ands	r3, r2
 8017b4a:	2b02      	cmp	r3, #2
 8017b4c:	d1c5      	bne.n	8017ada <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8017b4e:	2300      	movs	r3, #0
}
 8017b50:	0018      	movs	r0, r3
 8017b52:	46bd      	mov	sp, r7
 8017b54:	b004      	add	sp, #16
 8017b56:	bd80      	pop	{r7, pc}

08017b58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017b58:	b580      	push	{r7, lr}
 8017b5a:	b084      	sub	sp, #16
 8017b5c:	af00      	add	r7, sp, #0
 8017b5e:	60f8      	str	r0, [r7, #12]
 8017b60:	60b9      	str	r1, [r7, #8]
 8017b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017b64:	e02f      	b.n	8017bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017b66:	687a      	ldr	r2, [r7, #4]
 8017b68:	68b9      	ldr	r1, [r7, #8]
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	0018      	movs	r0, r3
 8017b6e:	f000 f8b9 	bl	8017ce4 <I2C_IsErrorOccurred>
 8017b72:	1e03      	subs	r3, r0, #0
 8017b74:	d001      	beq.n	8017b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017b76:	2301      	movs	r3, #1
 8017b78:	e02d      	b.n	8017bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017b7a:	f7fc f927 	bl	8013dcc <HAL_GetTick>
 8017b7e:	0002      	movs	r2, r0
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	1ad3      	subs	r3, r2, r3
 8017b84:	68ba      	ldr	r2, [r7, #8]
 8017b86:	429a      	cmp	r2, r3
 8017b88:	d302      	bcc.n	8017b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8017b8a:	68bb      	ldr	r3, [r7, #8]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d11a      	bne.n	8017bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	699b      	ldr	r3, [r3, #24]
 8017b96:	2220      	movs	r2, #32
 8017b98:	4013      	ands	r3, r2
 8017b9a:	2b20      	cmp	r3, #32
 8017b9c:	d013      	beq.n	8017bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017ba2:	2220      	movs	r2, #32
 8017ba4:	431a      	orrs	r2, r3
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	2241      	movs	r2, #65	@ 0x41
 8017bae:	2120      	movs	r1, #32
 8017bb0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	2242      	movs	r2, #66	@ 0x42
 8017bb6:	2100      	movs	r1, #0
 8017bb8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	2240      	movs	r2, #64	@ 0x40
 8017bbe:	2100      	movs	r1, #0
 8017bc0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017bc2:	2301      	movs	r3, #1
 8017bc4:	e007      	b.n	8017bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	699b      	ldr	r3, [r3, #24]
 8017bcc:	2220      	movs	r2, #32
 8017bce:	4013      	ands	r3, r2
 8017bd0:	2b20      	cmp	r3, #32
 8017bd2:	d1c8      	bne.n	8017b66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017bd4:	2300      	movs	r3, #0
}
 8017bd6:	0018      	movs	r0, r3
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	b004      	add	sp, #16
 8017bdc:	bd80      	pop	{r7, pc}
	...

08017be0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b084      	sub	sp, #16
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	60b9      	str	r1, [r7, #8]
 8017bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017bec:	e06b      	b.n	8017cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017bee:	687a      	ldr	r2, [r7, #4]
 8017bf0:	68b9      	ldr	r1, [r7, #8]
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	0018      	movs	r0, r3
 8017bf6:	f000 f875 	bl	8017ce4 <I2C_IsErrorOccurred>
 8017bfa:	1e03      	subs	r3, r0, #0
 8017bfc:	d001      	beq.n	8017c02 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017bfe:	2301      	movs	r3, #1
 8017c00:	e069      	b.n	8017cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	699b      	ldr	r3, [r3, #24]
 8017c08:	2220      	movs	r2, #32
 8017c0a:	4013      	ands	r3, r2
 8017c0c:	2b20      	cmp	r3, #32
 8017c0e:	d138      	bne.n	8017c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	699b      	ldr	r3, [r3, #24]
 8017c16:	2204      	movs	r2, #4
 8017c18:	4013      	ands	r3, r2
 8017c1a:	2b04      	cmp	r3, #4
 8017c1c:	d105      	bne.n	8017c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d001      	beq.n	8017c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8017c26:	2300      	movs	r3, #0
 8017c28:	e055      	b.n	8017cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	699b      	ldr	r3, [r3, #24]
 8017c30:	2210      	movs	r2, #16
 8017c32:	4013      	ands	r3, r2
 8017c34:	2b10      	cmp	r3, #16
 8017c36:	d107      	bne.n	8017c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	2210      	movs	r2, #16
 8017c3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	2204      	movs	r2, #4
 8017c44:	645a      	str	r2, [r3, #68]	@ 0x44
 8017c46:	e002      	b.n	8017c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	2220      	movs	r2, #32
 8017c54:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	685a      	ldr	r2, [r3, #4]
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	491f      	ldr	r1, [pc, #124]	@ (8017ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8017c62:	400a      	ands	r2, r1
 8017c64:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	2241      	movs	r2, #65	@ 0x41
 8017c6a:	2120      	movs	r1, #32
 8017c6c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	2242      	movs	r2, #66	@ 0x42
 8017c72:	2100      	movs	r1, #0
 8017c74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	2240      	movs	r2, #64	@ 0x40
 8017c7a:	2100      	movs	r1, #0
 8017c7c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017c7e:	2301      	movs	r3, #1
 8017c80:	e029      	b.n	8017cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017c82:	f7fc f8a3 	bl	8013dcc <HAL_GetTick>
 8017c86:	0002      	movs	r2, r0
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	1ad3      	subs	r3, r2, r3
 8017c8c:	68ba      	ldr	r2, [r7, #8]
 8017c8e:	429a      	cmp	r2, r3
 8017c90:	d302      	bcc.n	8017c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8017c92:	68bb      	ldr	r3, [r7, #8]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d116      	bne.n	8017cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	699b      	ldr	r3, [r3, #24]
 8017c9e:	2204      	movs	r2, #4
 8017ca0:	4013      	ands	r3, r2
 8017ca2:	2b04      	cmp	r3, #4
 8017ca4:	d00f      	beq.n	8017cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017caa:	2220      	movs	r2, #32
 8017cac:	431a      	orrs	r2, r3
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	2241      	movs	r2, #65	@ 0x41
 8017cb6:	2120      	movs	r1, #32
 8017cb8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	2240      	movs	r2, #64	@ 0x40
 8017cbe:	2100      	movs	r1, #0
 8017cc0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017cc2:	2301      	movs	r3, #1
 8017cc4:	e007      	b.n	8017cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	699b      	ldr	r3, [r3, #24]
 8017ccc:	2204      	movs	r2, #4
 8017cce:	4013      	ands	r3, r2
 8017cd0:	2b04      	cmp	r3, #4
 8017cd2:	d18c      	bne.n	8017bee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017cd4:	2300      	movs	r3, #0
}
 8017cd6:	0018      	movs	r0, r3
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	b004      	add	sp, #16
 8017cdc:	bd80      	pop	{r7, pc}
 8017cde:	46c0      	nop			@ (mov r8, r8)
 8017ce0:	fe00e800 	.word	0xfe00e800

08017ce4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b08a      	sub	sp, #40	@ 0x28
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	60f8      	str	r0, [r7, #12]
 8017cec:	60b9      	str	r1, [r7, #8]
 8017cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017cf0:	2327      	movs	r3, #39	@ 0x27
 8017cf2:	18fb      	adds	r3, r7, r3
 8017cf4:	2200      	movs	r2, #0
 8017cf6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	699b      	ldr	r3, [r3, #24]
 8017cfe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8017d00:	2300      	movs	r3, #0
 8017d02:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8017d08:	69bb      	ldr	r3, [r7, #24]
 8017d0a:	2210      	movs	r2, #16
 8017d0c:	4013      	ands	r3, r2
 8017d0e:	d100      	bne.n	8017d12 <I2C_IsErrorOccurred+0x2e>
 8017d10:	e079      	b.n	8017e06 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	2210      	movs	r2, #16
 8017d18:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017d1a:	e057      	b.n	8017dcc <I2C_IsErrorOccurred+0xe8>
 8017d1c:	2227      	movs	r2, #39	@ 0x27
 8017d1e:	18bb      	adds	r3, r7, r2
 8017d20:	18ba      	adds	r2, r7, r2
 8017d22:	7812      	ldrb	r2, [r2, #0]
 8017d24:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8017d26:	68bb      	ldr	r3, [r7, #8]
 8017d28:	3301      	adds	r3, #1
 8017d2a:	d04f      	beq.n	8017dcc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017d2c:	f7fc f84e 	bl	8013dcc <HAL_GetTick>
 8017d30:	0002      	movs	r2, r0
 8017d32:	69fb      	ldr	r3, [r7, #28]
 8017d34:	1ad3      	subs	r3, r2, r3
 8017d36:	68ba      	ldr	r2, [r7, #8]
 8017d38:	429a      	cmp	r2, r3
 8017d3a:	d302      	bcc.n	8017d42 <I2C_IsErrorOccurred+0x5e>
 8017d3c:	68bb      	ldr	r3, [r7, #8]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d144      	bne.n	8017dcc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	685a      	ldr	r2, [r3, #4]
 8017d48:	2380      	movs	r3, #128	@ 0x80
 8017d4a:	01db      	lsls	r3, r3, #7
 8017d4c:	4013      	ands	r3, r2
 8017d4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8017d50:	2013      	movs	r0, #19
 8017d52:	183b      	adds	r3, r7, r0
 8017d54:	68fa      	ldr	r2, [r7, #12]
 8017d56:	2142      	movs	r1, #66	@ 0x42
 8017d58:	5c52      	ldrb	r2, [r2, r1]
 8017d5a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	699a      	ldr	r2, [r3, #24]
 8017d62:	2380      	movs	r3, #128	@ 0x80
 8017d64:	021b      	lsls	r3, r3, #8
 8017d66:	401a      	ands	r2, r3
 8017d68:	2380      	movs	r3, #128	@ 0x80
 8017d6a:	021b      	lsls	r3, r3, #8
 8017d6c:	429a      	cmp	r2, r3
 8017d6e:	d126      	bne.n	8017dbe <I2C_IsErrorOccurred+0xda>
 8017d70:	697a      	ldr	r2, [r7, #20]
 8017d72:	2380      	movs	r3, #128	@ 0x80
 8017d74:	01db      	lsls	r3, r3, #7
 8017d76:	429a      	cmp	r2, r3
 8017d78:	d021      	beq.n	8017dbe <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8017d7a:	183b      	adds	r3, r7, r0
 8017d7c:	781b      	ldrb	r3, [r3, #0]
 8017d7e:	2b20      	cmp	r3, #32
 8017d80:	d01d      	beq.n	8017dbe <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	685a      	ldr	r2, [r3, #4]
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	2180      	movs	r1, #128	@ 0x80
 8017d8e:	01c9      	lsls	r1, r1, #7
 8017d90:	430a      	orrs	r2, r1
 8017d92:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8017d94:	f7fc f81a 	bl	8013dcc <HAL_GetTick>
 8017d98:	0003      	movs	r3, r0
 8017d9a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017d9c:	e00f      	b.n	8017dbe <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8017d9e:	f7fc f815 	bl	8013dcc <HAL_GetTick>
 8017da2:	0002      	movs	r2, r0
 8017da4:	69fb      	ldr	r3, [r7, #28]
 8017da6:	1ad3      	subs	r3, r2, r3
 8017da8:	2b19      	cmp	r3, #25
 8017daa:	d908      	bls.n	8017dbe <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8017dac:	6a3b      	ldr	r3, [r7, #32]
 8017dae:	2220      	movs	r2, #32
 8017db0:	4313      	orrs	r3, r2
 8017db2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8017db4:	2327      	movs	r3, #39	@ 0x27
 8017db6:	18fb      	adds	r3, r7, r3
 8017db8:	2201      	movs	r2, #1
 8017dba:	701a      	strb	r2, [r3, #0]

              break;
 8017dbc:	e006      	b.n	8017dcc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	699b      	ldr	r3, [r3, #24]
 8017dc4:	2220      	movs	r2, #32
 8017dc6:	4013      	ands	r3, r2
 8017dc8:	2b20      	cmp	r3, #32
 8017dca:	d1e8      	bne.n	8017d9e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	699b      	ldr	r3, [r3, #24]
 8017dd2:	2220      	movs	r2, #32
 8017dd4:	4013      	ands	r3, r2
 8017dd6:	2b20      	cmp	r3, #32
 8017dd8:	d004      	beq.n	8017de4 <I2C_IsErrorOccurred+0x100>
 8017dda:	2327      	movs	r3, #39	@ 0x27
 8017ddc:	18fb      	adds	r3, r7, r3
 8017dde:	781b      	ldrb	r3, [r3, #0]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d09b      	beq.n	8017d1c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8017de4:	2327      	movs	r3, #39	@ 0x27
 8017de6:	18fb      	adds	r3, r7, r3
 8017de8:	781b      	ldrb	r3, [r3, #0]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d103      	bne.n	8017df6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	2220      	movs	r2, #32
 8017df4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8017df6:	6a3b      	ldr	r3, [r7, #32]
 8017df8:	2204      	movs	r2, #4
 8017dfa:	4313      	orrs	r3, r2
 8017dfc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8017dfe:	2327      	movs	r3, #39	@ 0x27
 8017e00:	18fb      	adds	r3, r7, r3
 8017e02:	2201      	movs	r2, #1
 8017e04:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	699b      	ldr	r3, [r3, #24]
 8017e0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8017e0e:	69ba      	ldr	r2, [r7, #24]
 8017e10:	2380      	movs	r3, #128	@ 0x80
 8017e12:	005b      	lsls	r3, r3, #1
 8017e14:	4013      	ands	r3, r2
 8017e16:	d00c      	beq.n	8017e32 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8017e18:	6a3b      	ldr	r3, [r7, #32]
 8017e1a:	2201      	movs	r2, #1
 8017e1c:	4313      	orrs	r3, r2
 8017e1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	2280      	movs	r2, #128	@ 0x80
 8017e26:	0052      	lsls	r2, r2, #1
 8017e28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017e2a:	2327      	movs	r3, #39	@ 0x27
 8017e2c:	18fb      	adds	r3, r7, r3
 8017e2e:	2201      	movs	r2, #1
 8017e30:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8017e32:	69ba      	ldr	r2, [r7, #24]
 8017e34:	2380      	movs	r3, #128	@ 0x80
 8017e36:	00db      	lsls	r3, r3, #3
 8017e38:	4013      	ands	r3, r2
 8017e3a:	d00c      	beq.n	8017e56 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8017e3c:	6a3b      	ldr	r3, [r7, #32]
 8017e3e:	2208      	movs	r2, #8
 8017e40:	4313      	orrs	r3, r2
 8017e42:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	2280      	movs	r2, #128	@ 0x80
 8017e4a:	00d2      	lsls	r2, r2, #3
 8017e4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017e4e:	2327      	movs	r3, #39	@ 0x27
 8017e50:	18fb      	adds	r3, r7, r3
 8017e52:	2201      	movs	r2, #1
 8017e54:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8017e56:	69ba      	ldr	r2, [r7, #24]
 8017e58:	2380      	movs	r3, #128	@ 0x80
 8017e5a:	009b      	lsls	r3, r3, #2
 8017e5c:	4013      	ands	r3, r2
 8017e5e:	d00c      	beq.n	8017e7a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8017e60:	6a3b      	ldr	r3, [r7, #32]
 8017e62:	2202      	movs	r2, #2
 8017e64:	4313      	orrs	r3, r2
 8017e66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	2280      	movs	r2, #128	@ 0x80
 8017e6e:	0092      	lsls	r2, r2, #2
 8017e70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017e72:	2327      	movs	r3, #39	@ 0x27
 8017e74:	18fb      	adds	r3, r7, r3
 8017e76:	2201      	movs	r2, #1
 8017e78:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8017e7a:	2327      	movs	r3, #39	@ 0x27
 8017e7c:	18fb      	adds	r3, r7, r3
 8017e7e:	781b      	ldrb	r3, [r3, #0]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d01d      	beq.n	8017ec0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	0018      	movs	r0, r3
 8017e88:	f7ff fcd7 	bl	801783a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	685a      	ldr	r2, [r3, #4]
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	490e      	ldr	r1, [pc, #56]	@ (8017ed0 <I2C_IsErrorOccurred+0x1ec>)
 8017e98:	400a      	ands	r2, r1
 8017e9a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017ea0:	6a3b      	ldr	r3, [r7, #32]
 8017ea2:	431a      	orrs	r2, r3
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	2241      	movs	r2, #65	@ 0x41
 8017eac:	2120      	movs	r1, #32
 8017eae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	2242      	movs	r2, #66	@ 0x42
 8017eb4:	2100      	movs	r1, #0
 8017eb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	2240      	movs	r2, #64	@ 0x40
 8017ebc:	2100      	movs	r1, #0
 8017ebe:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8017ec0:	2327      	movs	r3, #39	@ 0x27
 8017ec2:	18fb      	adds	r3, r7, r3
 8017ec4:	781b      	ldrb	r3, [r3, #0]
}
 8017ec6:	0018      	movs	r0, r3
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	b00a      	add	sp, #40	@ 0x28
 8017ecc:	bd80      	pop	{r7, pc}
 8017ece:	46c0      	nop			@ (mov r8, r8)
 8017ed0:	fe00e800 	.word	0xfe00e800

08017ed4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8017ed4:	b590      	push	{r4, r7, lr}
 8017ed6:	b087      	sub	sp, #28
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	60f8      	str	r0, [r7, #12]
 8017edc:	0008      	movs	r0, r1
 8017ede:	0011      	movs	r1, r2
 8017ee0:	607b      	str	r3, [r7, #4]
 8017ee2:	240a      	movs	r4, #10
 8017ee4:	193b      	adds	r3, r7, r4
 8017ee6:	1c02      	adds	r2, r0, #0
 8017ee8:	801a      	strh	r2, [r3, #0]
 8017eea:	2009      	movs	r0, #9
 8017eec:	183b      	adds	r3, r7, r0
 8017eee:	1c0a      	adds	r2, r1, #0
 8017ef0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017ef2:	193b      	adds	r3, r7, r4
 8017ef4:	881b      	ldrh	r3, [r3, #0]
 8017ef6:	059b      	lsls	r3, r3, #22
 8017ef8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017efa:	183b      	adds	r3, r7, r0
 8017efc:	781b      	ldrb	r3, [r3, #0]
 8017efe:	0419      	lsls	r1, r3, #16
 8017f00:	23ff      	movs	r3, #255	@ 0xff
 8017f02:	041b      	lsls	r3, r3, #16
 8017f04:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017f06:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f0e:	4313      	orrs	r3, r2
 8017f10:	005b      	lsls	r3, r3, #1
 8017f12:	085b      	lsrs	r3, r3, #1
 8017f14:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	685b      	ldr	r3, [r3, #4]
 8017f1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f1e:	0d51      	lsrs	r1, r2, #21
 8017f20:	2280      	movs	r2, #128	@ 0x80
 8017f22:	00d2      	lsls	r2, r2, #3
 8017f24:	400a      	ands	r2, r1
 8017f26:	4907      	ldr	r1, [pc, #28]	@ (8017f44 <I2C_TransferConfig+0x70>)
 8017f28:	430a      	orrs	r2, r1
 8017f2a:	43d2      	mvns	r2, r2
 8017f2c:	401a      	ands	r2, r3
 8017f2e:	0011      	movs	r1, r2
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	697a      	ldr	r2, [r7, #20]
 8017f36:	430a      	orrs	r2, r1
 8017f38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8017f3a:	46c0      	nop			@ (mov r8, r8)
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	b007      	add	sp, #28
 8017f40:	bd90      	pop	{r4, r7, pc}
 8017f42:	46c0      	nop			@ (mov r8, r8)
 8017f44:	03ff63ff 	.word	0x03ff63ff

08017f48 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b084      	sub	sp, #16
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
 8017f50:	000a      	movs	r2, r1
 8017f52:	1cbb      	adds	r3, r7, #2
 8017f54:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8017f56:	2300      	movs	r3, #0
 8017f58:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8018058 <I2C_Enable_IRQ+0x110>)
 8017f60:	429a      	cmp	r2, r3
 8017f62:	d035      	beq.n	8017fd0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8017f68:	4b3c      	ldr	r3, [pc, #240]	@ (801805c <I2C_Enable_IRQ+0x114>)
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	d030      	beq.n	8017fd0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8017f72:	4b3b      	ldr	r3, [pc, #236]	@ (8018060 <I2C_Enable_IRQ+0x118>)
 8017f74:	429a      	cmp	r2, r3
 8017f76:	d02b      	beq.n	8017fd0 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017f78:	1cbb      	adds	r3, r7, #2
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	5e9b      	ldrsh	r3, [r3, r2]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	da03      	bge.n	8017f8a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	22b8      	movs	r2, #184	@ 0xb8
 8017f86:	4313      	orrs	r3, r2
 8017f88:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017f8a:	1cbb      	adds	r3, r7, #2
 8017f8c:	881b      	ldrh	r3, [r3, #0]
 8017f8e:	2201      	movs	r2, #1
 8017f90:	4013      	ands	r3, r2
 8017f92:	d003      	beq.n	8017f9c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	22f2      	movs	r2, #242	@ 0xf2
 8017f98:	4313      	orrs	r3, r2
 8017f9a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017f9c:	1cbb      	adds	r3, r7, #2
 8017f9e:	881b      	ldrh	r3, [r3, #0]
 8017fa0:	2202      	movs	r2, #2
 8017fa2:	4013      	ands	r3, r2
 8017fa4:	d003      	beq.n	8017fae <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	22f4      	movs	r2, #244	@ 0xf4
 8017faa:	4313      	orrs	r3, r2
 8017fac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017fae:	1cbb      	adds	r3, r7, #2
 8017fb0:	881b      	ldrh	r3, [r3, #0]
 8017fb2:	2b10      	cmp	r3, #16
 8017fb4:	d103      	bne.n	8017fbe <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	2290      	movs	r2, #144	@ 0x90
 8017fba:	4313      	orrs	r3, r2
 8017fbc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017fbe:	1cbb      	adds	r3, r7, #2
 8017fc0:	881b      	ldrh	r3, [r3, #0]
 8017fc2:	2b20      	cmp	r3, #32
 8017fc4:	d13c      	bne.n	8018040 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	2220      	movs	r2, #32
 8017fca:	4313      	orrs	r3, r2
 8017fcc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017fce:	e037      	b.n	8018040 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017fd0:	1cbb      	adds	r3, r7, #2
 8017fd2:	2200      	movs	r2, #0
 8017fd4:	5e9b      	ldrsh	r3, [r3, r2]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	da03      	bge.n	8017fe2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	22b8      	movs	r2, #184	@ 0xb8
 8017fde:	4313      	orrs	r3, r2
 8017fe0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017fe2:	1cbb      	adds	r3, r7, #2
 8017fe4:	881b      	ldrh	r3, [r3, #0]
 8017fe6:	2201      	movs	r2, #1
 8017fe8:	4013      	ands	r3, r2
 8017fea:	d003      	beq.n	8017ff4 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	22f2      	movs	r2, #242	@ 0xf2
 8017ff0:	4313      	orrs	r3, r2
 8017ff2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017ff4:	1cbb      	adds	r3, r7, #2
 8017ff6:	881b      	ldrh	r3, [r3, #0]
 8017ff8:	2202      	movs	r2, #2
 8017ffa:	4013      	ands	r3, r2
 8017ffc:	d003      	beq.n	8018006 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	22f4      	movs	r2, #244	@ 0xf4
 8018002:	4313      	orrs	r3, r2
 8018004:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018006:	1cbb      	adds	r3, r7, #2
 8018008:	881b      	ldrh	r3, [r3, #0]
 801800a:	2b10      	cmp	r3, #16
 801800c:	d103      	bne.n	8018016 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	2290      	movs	r2, #144	@ 0x90
 8018012:	4313      	orrs	r3, r2
 8018014:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018016:	1cbb      	adds	r3, r7, #2
 8018018:	881b      	ldrh	r3, [r3, #0]
 801801a:	2b20      	cmp	r3, #32
 801801c:	d103      	bne.n	8018026 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	2260      	movs	r2, #96	@ 0x60
 8018022:	4313      	orrs	r3, r2
 8018024:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801802a:	4b0d      	ldr	r3, [pc, #52]	@ (8018060 <I2C_Enable_IRQ+0x118>)
 801802c:	429a      	cmp	r2, r3
 801802e:	d007      	beq.n	8018040 <I2C_Enable_IRQ+0xf8>
 8018030:	1cbb      	adds	r3, r7, #2
 8018032:	881b      	ldrh	r3, [r3, #0]
 8018034:	2b40      	cmp	r3, #64	@ 0x40
 8018036:	d103      	bne.n	8018040 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	2240      	movs	r2, #64	@ 0x40
 801803c:	4313      	orrs	r3, r2
 801803e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	6819      	ldr	r1, [r3, #0]
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	68fa      	ldr	r2, [r7, #12]
 801804c:	430a      	orrs	r2, r1
 801804e:	601a      	str	r2, [r3, #0]
}
 8018050:	46c0      	nop			@ (mov r8, r8)
 8018052:	46bd      	mov	sp, r7
 8018054:	b004      	add	sp, #16
 8018056:	bd80      	pop	{r7, pc}
 8018058:	08016785 	.word	0x08016785
 801805c:	08016bfd 	.word	0x08016bfd
 8018060:	0801699d 	.word	0x0801699d

08018064 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b084      	sub	sp, #16
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
 801806c:	000a      	movs	r2, r1
 801806e:	1cbb      	adds	r3, r7, #2
 8018070:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018072:	2300      	movs	r3, #0
 8018074:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018076:	1cbb      	adds	r3, r7, #2
 8018078:	881b      	ldrh	r3, [r3, #0]
 801807a:	2201      	movs	r2, #1
 801807c:	4013      	ands	r3, r2
 801807e:	d010      	beq.n	80180a2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	2242      	movs	r2, #66	@ 0x42
 8018084:	4313      	orrs	r3, r2
 8018086:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	2241      	movs	r2, #65	@ 0x41
 801808c:	5c9b      	ldrb	r3, [r3, r2]
 801808e:	b2db      	uxtb	r3, r3
 8018090:	001a      	movs	r2, r3
 8018092:	2328      	movs	r3, #40	@ 0x28
 8018094:	4013      	ands	r3, r2
 8018096:	2b28      	cmp	r3, #40	@ 0x28
 8018098:	d003      	beq.n	80180a2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	22b0      	movs	r2, #176	@ 0xb0
 801809e:	4313      	orrs	r3, r2
 80180a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80180a2:	1cbb      	adds	r3, r7, #2
 80180a4:	881b      	ldrh	r3, [r3, #0]
 80180a6:	2202      	movs	r2, #2
 80180a8:	4013      	ands	r3, r2
 80180aa:	d010      	beq.n	80180ce <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	2244      	movs	r2, #68	@ 0x44
 80180b0:	4313      	orrs	r3, r2
 80180b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	2241      	movs	r2, #65	@ 0x41
 80180b8:	5c9b      	ldrb	r3, [r3, r2]
 80180ba:	b2db      	uxtb	r3, r3
 80180bc:	001a      	movs	r2, r3
 80180be:	2328      	movs	r3, #40	@ 0x28
 80180c0:	4013      	ands	r3, r2
 80180c2:	2b28      	cmp	r3, #40	@ 0x28
 80180c4:	d003      	beq.n	80180ce <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	22b0      	movs	r2, #176	@ 0xb0
 80180ca:	4313      	orrs	r3, r2
 80180cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80180ce:	1cbb      	adds	r3, r7, #2
 80180d0:	2200      	movs	r2, #0
 80180d2:	5e9b      	ldrsh	r3, [r3, r2]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	da03      	bge.n	80180e0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	22b8      	movs	r2, #184	@ 0xb8
 80180dc:	4313      	orrs	r3, r2
 80180de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80180e0:	1cbb      	adds	r3, r7, #2
 80180e2:	881b      	ldrh	r3, [r3, #0]
 80180e4:	2b10      	cmp	r3, #16
 80180e6:	d103      	bne.n	80180f0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	2290      	movs	r2, #144	@ 0x90
 80180ec:	4313      	orrs	r3, r2
 80180ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80180f0:	1cbb      	adds	r3, r7, #2
 80180f2:	881b      	ldrh	r3, [r3, #0]
 80180f4:	2b20      	cmp	r3, #32
 80180f6:	d103      	bne.n	8018100 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	2220      	movs	r2, #32
 80180fc:	4313      	orrs	r3, r2
 80180fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8018100:	1cbb      	adds	r3, r7, #2
 8018102:	881b      	ldrh	r3, [r3, #0]
 8018104:	2b40      	cmp	r3, #64	@ 0x40
 8018106:	d103      	bne.n	8018110 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	2240      	movs	r2, #64	@ 0x40
 801810c:	4313      	orrs	r3, r2
 801810e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	681a      	ldr	r2, [r3, #0]
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	43d9      	mvns	r1, r3
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	400a      	ands	r2, r1
 8018120:	601a      	str	r2, [r3, #0]
}
 8018122:	46c0      	nop			@ (mov r8, r8)
 8018124:	46bd      	mov	sp, r7
 8018126:	b004      	add	sp, #16
 8018128:	bd80      	pop	{r7, pc}
	...

0801812c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b082      	sub	sp, #8
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
 8018134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	2241      	movs	r2, #65	@ 0x41
 801813a:	5c9b      	ldrb	r3, [r3, r2]
 801813c:	b2db      	uxtb	r3, r3
 801813e:	2b20      	cmp	r3, #32
 8018140:	d138      	bne.n	80181b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	2240      	movs	r2, #64	@ 0x40
 8018146:	5c9b      	ldrb	r3, [r3, r2]
 8018148:	2b01      	cmp	r3, #1
 801814a:	d101      	bne.n	8018150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801814c:	2302      	movs	r3, #2
 801814e:	e032      	b.n	80181b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	2240      	movs	r2, #64	@ 0x40
 8018154:	2101      	movs	r1, #1
 8018156:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	2241      	movs	r2, #65	@ 0x41
 801815c:	2124      	movs	r1, #36	@ 0x24
 801815e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	681a      	ldr	r2, [r3, #0]
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	2101      	movs	r1, #1
 801816c:	438a      	bics	r2, r1
 801816e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	681a      	ldr	r2, [r3, #0]
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	4911      	ldr	r1, [pc, #68]	@ (80181c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 801817c:	400a      	ands	r2, r1
 801817e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	6819      	ldr	r1, [r3, #0]
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	683a      	ldr	r2, [r7, #0]
 801818c:	430a      	orrs	r2, r1
 801818e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	681a      	ldr	r2, [r3, #0]
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	2101      	movs	r1, #1
 801819c:	430a      	orrs	r2, r1
 801819e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	2241      	movs	r2, #65	@ 0x41
 80181a4:	2120      	movs	r1, #32
 80181a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	2240      	movs	r2, #64	@ 0x40
 80181ac:	2100      	movs	r1, #0
 80181ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80181b0:	2300      	movs	r3, #0
 80181b2:	e000      	b.n	80181b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80181b4:	2302      	movs	r3, #2
  }
}
 80181b6:	0018      	movs	r0, r3
 80181b8:	46bd      	mov	sp, r7
 80181ba:	b002      	add	sp, #8
 80181bc:	bd80      	pop	{r7, pc}
 80181be:	46c0      	nop			@ (mov r8, r8)
 80181c0:	ffffefff 	.word	0xffffefff

080181c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b084      	sub	sp, #16
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
 80181cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	2241      	movs	r2, #65	@ 0x41
 80181d2:	5c9b      	ldrb	r3, [r3, r2]
 80181d4:	b2db      	uxtb	r3, r3
 80181d6:	2b20      	cmp	r3, #32
 80181d8:	d139      	bne.n	801824e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	2240      	movs	r2, #64	@ 0x40
 80181de:	5c9b      	ldrb	r3, [r3, r2]
 80181e0:	2b01      	cmp	r3, #1
 80181e2:	d101      	bne.n	80181e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80181e4:	2302      	movs	r3, #2
 80181e6:	e033      	b.n	8018250 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	2240      	movs	r2, #64	@ 0x40
 80181ec:	2101      	movs	r1, #1
 80181ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	2241      	movs	r2, #65	@ 0x41
 80181f4:	2124      	movs	r1, #36	@ 0x24
 80181f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	681a      	ldr	r2, [r3, #0]
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	2101      	movs	r1, #1
 8018204:	438a      	bics	r2, r1
 8018206:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	4a11      	ldr	r2, [pc, #68]	@ (8018258 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8018214:	4013      	ands	r3, r2
 8018216:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018218:	683b      	ldr	r3, [r7, #0]
 801821a:	021b      	lsls	r3, r3, #8
 801821c:	68fa      	ldr	r2, [r7, #12]
 801821e:	4313      	orrs	r3, r2
 8018220:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	68fa      	ldr	r2, [r7, #12]
 8018228:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	681a      	ldr	r2, [r3, #0]
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	2101      	movs	r1, #1
 8018236:	430a      	orrs	r2, r1
 8018238:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	2241      	movs	r2, #65	@ 0x41
 801823e:	2120      	movs	r1, #32
 8018240:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	2240      	movs	r2, #64	@ 0x40
 8018246:	2100      	movs	r1, #0
 8018248:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801824a:	2300      	movs	r3, #0
 801824c:	e000      	b.n	8018250 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801824e:	2302      	movs	r3, #2
  }
}
 8018250:	0018      	movs	r0, r3
 8018252:	46bd      	mov	sp, r7
 8018254:	b004      	add	sp, #16
 8018256:	bd80      	pop	{r7, pc}
 8018258:	fffff0ff 	.word	0xfffff0ff

0801825c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 801825c:	b580      	push	{r7, lr}
 801825e:	b088      	sub	sp, #32
 8018260:	af00      	add	r7, sp, #0
 8018262:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d101      	bne.n	801826e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 801826a:	2301      	movs	r3, #1
 801826c:	e0e1      	b.n	8018432 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	2235      	movs	r2, #53	@ 0x35
 8018272:	5c9b      	ldrb	r3, [r3, r2]
 8018274:	b2db      	uxtb	r3, r3
 8018276:	2b00      	cmp	r3, #0
 8018278:	d107      	bne.n	801828a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	2234      	movs	r2, #52	@ 0x34
 801827e:	2100      	movs	r1, #0
 8018280:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	0018      	movs	r0, r3
 8018286:	f7f3 ff6f 	bl	800c168 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	2235      	movs	r2, #53	@ 0x35
 801828e:	2102      	movs	r1, #2
 8018290:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	69da      	ldr	r2, [r3, #28]
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	4967      	ldr	r1, [pc, #412]	@ (801843c <HAL_I2S_Init+0x1e0>)
 801829e:	400a      	ands	r2, r1
 80182a0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	2202      	movs	r2, #2
 80182a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	695b      	ldr	r3, [r3, #20]
 80182ae:	2b02      	cmp	r3, #2
 80182b0:	d073      	beq.n	801839a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	68db      	ldr	r3, [r3, #12]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d102      	bne.n	80182c0 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80182ba:	2310      	movs	r3, #16
 80182bc:	617b      	str	r3, [r7, #20]
 80182be:	e001      	b.n	80182c4 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80182c0:	2320      	movs	r3, #32
 80182c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	689b      	ldr	r3, [r3, #8]
 80182c8:	2b20      	cmp	r3, #32
 80182ca:	d802      	bhi.n	80182d2 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80182cc:	697b      	ldr	r3, [r7, #20]
 80182ce:	005b      	lsls	r3, r3, #1
 80182d0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 80182d2:	f002 fed3 	bl	801b07c <HAL_RCC_GetSysClockFreq>
 80182d6:	0003      	movs	r3, r0
 80182d8:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	691a      	ldr	r2, [r3, #16]
 80182de:	2380      	movs	r3, #128	@ 0x80
 80182e0:	009b      	lsls	r3, r3, #2
 80182e2:	429a      	cmp	r2, r3
 80182e4:	d131      	bne.n	801834a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	68db      	ldr	r3, [r3, #12]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d016      	beq.n	801831c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80182ee:	697b      	ldr	r3, [r7, #20]
 80182f0:	009b      	lsls	r3, r3, #2
 80182f2:	0019      	movs	r1, r3
 80182f4:	68f8      	ldr	r0, [r7, #12]
 80182f6:	f7e7 ff55 	bl	80001a4 <__udivsi3>
 80182fa:	0003      	movs	r3, r0
 80182fc:	001a      	movs	r2, r3
 80182fe:	0013      	movs	r3, r2
 8018300:	009b      	lsls	r3, r3, #2
 8018302:	189b      	adds	r3, r3, r2
 8018304:	005b      	lsls	r3, r3, #1
 8018306:	001a      	movs	r2, r3
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	695b      	ldr	r3, [r3, #20]
 801830c:	0019      	movs	r1, r3
 801830e:	0010      	movs	r0, r2
 8018310:	f7e7 ff48 	bl	80001a4 <__udivsi3>
 8018314:	0003      	movs	r3, r0
 8018316:	3305      	adds	r3, #5
 8018318:	613b      	str	r3, [r7, #16]
 801831a:	e02a      	b.n	8018372 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801831c:	697b      	ldr	r3, [r7, #20]
 801831e:	00db      	lsls	r3, r3, #3
 8018320:	0019      	movs	r1, r3
 8018322:	68f8      	ldr	r0, [r7, #12]
 8018324:	f7e7 ff3e 	bl	80001a4 <__udivsi3>
 8018328:	0003      	movs	r3, r0
 801832a:	001a      	movs	r2, r3
 801832c:	0013      	movs	r3, r2
 801832e:	009b      	lsls	r3, r3, #2
 8018330:	189b      	adds	r3, r3, r2
 8018332:	005b      	lsls	r3, r3, #1
 8018334:	001a      	movs	r2, r3
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	695b      	ldr	r3, [r3, #20]
 801833a:	0019      	movs	r1, r3
 801833c:	0010      	movs	r0, r2
 801833e:	f7e7 ff31 	bl	80001a4 <__udivsi3>
 8018342:	0003      	movs	r3, r0
 8018344:	3305      	adds	r3, #5
 8018346:	613b      	str	r3, [r7, #16]
 8018348:	e013      	b.n	8018372 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801834a:	6979      	ldr	r1, [r7, #20]
 801834c:	68f8      	ldr	r0, [r7, #12]
 801834e:	f7e7 ff29 	bl	80001a4 <__udivsi3>
 8018352:	0003      	movs	r3, r0
 8018354:	001a      	movs	r2, r3
 8018356:	0013      	movs	r3, r2
 8018358:	009b      	lsls	r3, r3, #2
 801835a:	189b      	adds	r3, r3, r2
 801835c:	005b      	lsls	r3, r3, #1
 801835e:	001a      	movs	r2, r3
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	695b      	ldr	r3, [r3, #20]
 8018364:	0019      	movs	r1, r3
 8018366:	0010      	movs	r0, r2
 8018368:	f7e7 ff1c 	bl	80001a4 <__udivsi3>
 801836c:	0003      	movs	r3, r0
 801836e:	3305      	adds	r3, #5
 8018370:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8018372:	693b      	ldr	r3, [r7, #16]
 8018374:	210a      	movs	r1, #10
 8018376:	0018      	movs	r0, r3
 8018378:	f7e7 ff14 	bl	80001a4 <__udivsi3>
 801837c:	0003      	movs	r3, r0
 801837e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8018380:	693b      	ldr	r3, [r7, #16]
 8018382:	2201      	movs	r2, #1
 8018384:	4013      	ands	r3, r2
 8018386:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8018388:	693a      	ldr	r2, [r7, #16]
 801838a:	69bb      	ldr	r3, [r7, #24]
 801838c:	1ad3      	subs	r3, r2, r3
 801838e:	085b      	lsrs	r3, r3, #1
 8018390:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8018392:	69bb      	ldr	r3, [r7, #24]
 8018394:	021b      	lsls	r3, r3, #8
 8018396:	61bb      	str	r3, [r7, #24]
 8018398:	e003      	b.n	80183a2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 801839a:	2302      	movs	r3, #2
 801839c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 801839e:	2300      	movs	r3, #0
 80183a0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80183a2:	69fb      	ldr	r3, [r7, #28]
 80183a4:	2b01      	cmp	r3, #1
 80183a6:	d902      	bls.n	80183ae <HAL_I2S_Init+0x152>
 80183a8:	69fb      	ldr	r3, [r7, #28]
 80183aa:	2bff      	cmp	r3, #255	@ 0xff
 80183ac:	d907      	bls.n	80183be <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183b2:	2210      	movs	r2, #16
 80183b4:	431a      	orrs	r2, r3
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80183ba:	2301      	movs	r3, #1
 80183bc:	e039      	b.n	8018432 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	691a      	ldr	r2, [r3, #16]
 80183c2:	69bb      	ldr	r3, [r7, #24]
 80183c4:	431a      	orrs	r2, r3
 80183c6:	0011      	movs	r1, r2
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	69fa      	ldr	r2, [r7, #28]
 80183ce:	430a      	orrs	r2, r1
 80183d0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	69db      	ldr	r3, [r3, #28]
 80183d8:	4a18      	ldr	r2, [pc, #96]	@ (801843c <HAL_I2S_Init+0x1e0>)
 80183da:	401a      	ands	r2, r3
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	6859      	ldr	r1, [r3, #4]
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	689b      	ldr	r3, [r3, #8]
 80183e4:	4319      	orrs	r1, r3
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	68db      	ldr	r3, [r3, #12]
 80183ea:	4319      	orrs	r1, r3
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	699b      	ldr	r3, [r3, #24]
 80183f0:	430b      	orrs	r3, r1
 80183f2:	431a      	orrs	r2, r3
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	2180      	movs	r1, #128	@ 0x80
 80183fa:	0109      	lsls	r1, r1, #4
 80183fc:	430a      	orrs	r2, r1
 80183fe:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	689b      	ldr	r3, [r3, #8]
 8018404:	2b30      	cmp	r3, #48	@ 0x30
 8018406:	d003      	beq.n	8018410 <HAL_I2S_Init+0x1b4>
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	689b      	ldr	r3, [r3, #8]
 801840c:	2bb0      	cmp	r3, #176	@ 0xb0
 801840e:	d108      	bne.n	8018422 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	69da      	ldr	r2, [r3, #28]
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	2180      	movs	r1, #128	@ 0x80
 801841c:	0149      	lsls	r1, r1, #5
 801841e:	430a      	orrs	r2, r1
 8018420:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	2200      	movs	r2, #0
 8018426:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	2235      	movs	r2, #53	@ 0x35
 801842c:	2101      	movs	r1, #1
 801842e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018430:	2300      	movs	r3, #0
}
 8018432:	0018      	movs	r0, r3
 8018434:	46bd      	mov	sp, r7
 8018436:	b008      	add	sp, #32
 8018438:	bd80      	pop	{r7, pc}
 801843a:	46c0      	nop			@ (mov r8, r8)
 801843c:	fffff040 	.word	0xfffff040

08018440 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b086      	sub	sp, #24
 8018444:	af00      	add	r7, sp, #0
 8018446:	60f8      	str	r0, [r7, #12]
 8018448:	60b9      	str	r1, [r7, #8]
 801844a:	1dbb      	adds	r3, r7, #6
 801844c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 801844e:	68bb      	ldr	r3, [r7, #8]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d003      	beq.n	801845c <HAL_I2S_Receive_DMA+0x1c>
 8018454:	1dbb      	adds	r3, r7, #6
 8018456:	881b      	ldrh	r3, [r3, #0]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d101      	bne.n	8018460 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 801845c:	2301      	movs	r3, #1
 801845e:	e0a6      	b.n	80185ae <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	2234      	movs	r2, #52	@ 0x34
 8018464:	5c9b      	ldrb	r3, [r3, r2]
 8018466:	b2db      	uxtb	r3, r3
 8018468:	2b01      	cmp	r3, #1
 801846a:	d101      	bne.n	8018470 <HAL_I2S_Receive_DMA+0x30>
 801846c:	2302      	movs	r3, #2
 801846e:	e09e      	b.n	80185ae <HAL_I2S_Receive_DMA+0x16e>
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	2234      	movs	r2, #52	@ 0x34
 8018474:	2101      	movs	r1, #1
 8018476:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	2235      	movs	r2, #53	@ 0x35
 801847c:	5c9b      	ldrb	r3, [r3, r2]
 801847e:	b2db      	uxtb	r3, r3
 8018480:	2b01      	cmp	r3, #1
 8018482:	d005      	beq.n	8018490 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	2234      	movs	r2, #52	@ 0x34
 8018488:	2100      	movs	r1, #0
 801848a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 801848c:	2302      	movs	r3, #2
 801848e:	e08e      	b.n	80185ae <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	2235      	movs	r2, #53	@ 0x35
 8018494:	2104      	movs	r1, #4
 8018496:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	2200      	movs	r2, #0
 801849c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	68ba      	ldr	r2, [r7, #8]
 80184a2:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	69db      	ldr	r3, [r3, #28]
 80184aa:	2207      	movs	r2, #7
 80184ac:	4013      	ands	r3, r2
 80184ae:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80184b0:	697b      	ldr	r3, [r7, #20]
 80184b2:	2b03      	cmp	r3, #3
 80184b4:	d002      	beq.n	80184bc <HAL_I2S_Receive_DMA+0x7c>
 80184b6:	697b      	ldr	r3, [r7, #20]
 80184b8:	2b05      	cmp	r3, #5
 80184ba:	d10c      	bne.n	80184d6 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 80184bc:	1dbb      	adds	r3, r7, #6
 80184be:	881b      	ldrh	r3, [r3, #0]
 80184c0:	18db      	adds	r3, r3, r3
 80184c2:	b29a      	uxth	r2, r3
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 80184c8:	1dbb      	adds	r3, r7, #6
 80184ca:	881b      	ldrh	r3, [r3, #0]
 80184cc:	18db      	adds	r3, r3, r3
 80184ce:	b29a      	uxth	r2, r3
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80184d4:	e007      	b.n	80184e6 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	1dba      	adds	r2, r7, #6
 80184da:	8812      	ldrh	r2, [r2, #0]
 80184dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	1dba      	adds	r2, r7, #6
 80184e2:	8812      	ldrh	r2, [r2, #0]
 80184e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80184ea:	4a33      	ldr	r2, [pc, #204]	@ (80185b8 <HAL_I2S_Receive_DMA+0x178>)
 80184ec:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80184f2:	4a32      	ldr	r2, [pc, #200]	@ (80185bc <HAL_I2S_Receive_DMA+0x17c>)
 80184f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80184fa:	4a31      	ldr	r2, [pc, #196]	@ (80185c0 <HAL_I2S_Receive_DMA+0x180>)
 80184fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	69da      	ldr	r2, [r3, #28]
 8018504:	23c0      	movs	r3, #192	@ 0xc0
 8018506:	009b      	lsls	r3, r3, #2
 8018508:	401a      	ands	r2, r3
 801850a:	23c0      	movs	r3, #192	@ 0xc0
 801850c:	009b      	lsls	r3, r3, #2
 801850e:	429a      	cmp	r2, r3
 8018510:	d10a      	bne.n	8018528 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8018512:	2300      	movs	r3, #0
 8018514:	613b      	str	r3, [r7, #16]
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	68db      	ldr	r3, [r3, #12]
 801851c:	613b      	str	r3, [r7, #16]
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	689b      	ldr	r3, [r3, #8]
 8018524:	613b      	str	r3, [r7, #16]
 8018526:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	330c      	adds	r3, #12
 8018532:	0019      	movs	r1, r3
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018538:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801853e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8018540:	f7fc f996 	bl	8014870 <HAL_DMA_Start_IT>
 8018544:	1e03      	subs	r3, r0, #0
 8018546:	d00f      	beq.n	8018568 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801854c:	2208      	movs	r2, #8
 801854e:	431a      	orrs	r2, r3
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	2235      	movs	r2, #53	@ 0x35
 8018558:	2101      	movs	r1, #1
 801855a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	2234      	movs	r2, #52	@ 0x34
 8018560:	2100      	movs	r1, #0
 8018562:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8018564:	2301      	movs	r3, #1
 8018566:	e022      	b.n	80185ae <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	69da      	ldr	r2, [r3, #28]
 801856e:	2380      	movs	r3, #128	@ 0x80
 8018570:	00db      	lsls	r3, r3, #3
 8018572:	4013      	ands	r3, r2
 8018574:	d108      	bne.n	8018588 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	69da      	ldr	r2, [r3, #28]
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	2180      	movs	r1, #128	@ 0x80
 8018582:	00c9      	lsls	r1, r1, #3
 8018584:	430a      	orrs	r2, r1
 8018586:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	685b      	ldr	r3, [r3, #4]
 801858e:	2201      	movs	r2, #1
 8018590:	4013      	ands	r3, r2
 8018592:	d107      	bne.n	80185a4 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	685a      	ldr	r2, [r3, #4]
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	2101      	movs	r1, #1
 80185a0:	430a      	orrs	r2, r1
 80185a2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	2234      	movs	r2, #52	@ 0x34
 80185a8:	2100      	movs	r1, #0
 80185aa:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80185ac:	2300      	movs	r3, #0
}
 80185ae:	0018      	movs	r0, r3
 80185b0:	46bd      	mov	sp, r7
 80185b2:	b006      	add	sp, #24
 80185b4:	bd80      	pop	{r7, pc}
 80185b6:	46c0      	nop			@ (mov r8, r8)
 80185b8:	080187a1 	.word	0x080187a1
 80185bc:	0801875d 	.word	0x0801875d
 80185c0:	080187bf 	.word	0x080187bf

080185c4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b086      	sub	sp, #24
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80185cc:	2317      	movs	r3, #23
 80185ce:	18fb      	adds	r3, r7, r3
 80185d0:	2200      	movs	r2, #0
 80185d2:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	685a      	ldr	r2, [r3, #4]
 80185d8:	2380      	movs	r3, #128	@ 0x80
 80185da:	009b      	lsls	r3, r3, #2
 80185dc:	429a      	cmp	r2, r3
 80185de:	d003      	beq.n	80185e8 <HAL_I2S_DMAStop+0x24>
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	685b      	ldr	r3, [r3, #4]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d158      	bne.n	801869a <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d010      	beq.n	8018612 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80185f4:	0018      	movs	r0, r3
 80185f6:	f7fc f9a1 	bl	801493c <HAL_DMA_Abort>
 80185fa:	1e03      	subs	r3, r0, #0
 80185fc:	d009      	beq.n	8018612 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018602:	2208      	movs	r2, #8
 8018604:	431a      	orrs	r2, r3
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801860a:	2317      	movs	r3, #23
 801860c:	18fb      	adds	r3, r7, r3
 801860e:	2201      	movs	r2, #1
 8018610:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8018612:	6878      	ldr	r0, [r7, #4]
 8018614:	2364      	movs	r3, #100	@ 0x64
 8018616:	2201      	movs	r2, #1
 8018618:	2102      	movs	r1, #2
 801861a:	f000 f8f7 	bl	801880c <I2S_WaitFlagStateUntilTimeout>
 801861e:	1e03      	subs	r3, r0, #0
 8018620:	d00d      	beq.n	801863e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018626:	2201      	movs	r2, #1
 8018628:	431a      	orrs	r2, r3
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	2235      	movs	r2, #53	@ 0x35
 8018632:	2101      	movs	r1, #1
 8018634:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8018636:	2317      	movs	r3, #23
 8018638:	18fb      	adds	r3, r7, r3
 801863a:	2201      	movs	r2, #1
 801863c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801863e:	6878      	ldr	r0, [r7, #4]
 8018640:	2364      	movs	r3, #100	@ 0x64
 8018642:	2200      	movs	r2, #0
 8018644:	2180      	movs	r1, #128	@ 0x80
 8018646:	f000 f8e1 	bl	801880c <I2S_WaitFlagStateUntilTimeout>
 801864a:	1e03      	subs	r3, r0, #0
 801864c:	d00d      	beq.n	801866a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018652:	2201      	movs	r2, #1
 8018654:	431a      	orrs	r2, r3
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	2235      	movs	r2, #53	@ 0x35
 801865e:	2101      	movs	r1, #1
 8018660:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8018662:	2317      	movs	r3, #23
 8018664:	18fb      	adds	r3, r7, r3
 8018666:	2201      	movs	r2, #1
 8018668:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	69da      	ldr	r2, [r3, #28]
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	4938      	ldr	r1, [pc, #224]	@ (8018758 <HAL_I2S_DMAStop+0x194>)
 8018676:	400a      	ands	r2, r1
 8018678:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 801867a:	2300      	movs	r3, #0
 801867c:	613b      	str	r3, [r7, #16]
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	689b      	ldr	r3, [r3, #8]
 8018684:	613b      	str	r3, [r7, #16]
 8018686:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	685a      	ldr	r2, [r3, #4]
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	2102      	movs	r1, #2
 8018694:	438a      	bics	r2, r1
 8018696:	605a      	str	r2, [r3, #4]
 8018698:	e053      	b.n	8018742 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	685a      	ldr	r2, [r3, #4]
 801869e:	23c0      	movs	r3, #192	@ 0xc0
 80186a0:	009b      	lsls	r3, r3, #2
 80186a2:	429a      	cmp	r2, r3
 80186a4:	d005      	beq.n	80186b2 <HAL_I2S_DMAStop+0xee>
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	685a      	ldr	r2, [r3, #4]
 80186aa:	2380      	movs	r3, #128	@ 0x80
 80186ac:	005b      	lsls	r3, r3, #1
 80186ae:	429a      	cmp	r2, r3
 80186b0:	d147      	bne.n	8018742 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d010      	beq.n	80186dc <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80186be:	0018      	movs	r0, r3
 80186c0:	f7fc f93c 	bl	801493c <HAL_DMA_Abort>
 80186c4:	1e03      	subs	r3, r0, #0
 80186c6:	d009      	beq.n	80186dc <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80186cc:	2208      	movs	r2, #8
 80186ce:	431a      	orrs	r2, r3
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80186d4:	2317      	movs	r3, #23
 80186d6:	18fb      	adds	r3, r7, r3
 80186d8:	2201      	movs	r2, #1
 80186da:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	69da      	ldr	r2, [r3, #28]
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	491c      	ldr	r1, [pc, #112]	@ (8018758 <HAL_I2S_DMAStop+0x194>)
 80186e8:	400a      	ands	r2, r1
 80186ea:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80186ec:	2300      	movs	r3, #0
 80186ee:	60fb      	str	r3, [r7, #12]
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	68db      	ldr	r3, [r3, #12]
 80186f6:	60fb      	str	r3, [r7, #12]
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	689b      	ldr	r3, [r3, #8]
 80186fe:	60fb      	str	r3, [r7, #12]
 8018700:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	685a      	ldr	r2, [r3, #4]
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	2101      	movs	r1, #1
 801870e:	438a      	bics	r2, r1
 8018710:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	685a      	ldr	r2, [r3, #4]
 8018716:	2380      	movs	r3, #128	@ 0x80
 8018718:	005b      	lsls	r3, r3, #1
 801871a:	429a      	cmp	r2, r3
 801871c:	d10e      	bne.n	801873c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018722:	2240      	movs	r2, #64	@ 0x40
 8018724:	431a      	orrs	r2, r3
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2235      	movs	r2, #53	@ 0x35
 801872e:	2101      	movs	r1, #1
 8018730:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8018732:	2317      	movs	r3, #23
 8018734:	18fb      	adds	r3, r7, r3
 8018736:	2201      	movs	r2, #1
 8018738:	701a      	strb	r2, [r3, #0]
 801873a:	e002      	b.n	8018742 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	2235      	movs	r2, #53	@ 0x35
 8018746:	2101      	movs	r1, #1
 8018748:	5499      	strb	r1, [r3, r2]

  return errorcode;
 801874a:	2317      	movs	r3, #23
 801874c:	18fb      	adds	r3, r7, r3
 801874e:	781b      	ldrb	r3, [r3, #0]
}
 8018750:	0018      	movs	r0, r3
 8018752:	46bd      	mov	sp, r7
 8018754:	b006      	add	sp, #24
 8018756:	bd80      	pop	{r7, pc}
 8018758:	fffffbff 	.word	0xfffffbff

0801875c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b084      	sub	sp, #16
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018768:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	69db      	ldr	r3, [r3, #28]
 801876e:	2b00      	cmp	r3, #0
 8018770:	d10e      	bne.n	8018790 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	685a      	ldr	r2, [r3, #4]
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	2101      	movs	r1, #1
 801877e:	438a      	bics	r2, r1
 8018780:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	2200      	movs	r2, #0
 8018786:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	2235      	movs	r2, #53	@ 0x35
 801878c:	2101      	movs	r1, #1
 801878e:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	0018      	movs	r0, r3
 8018794:	f7f8 fca0 	bl	80110d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8018798:	46c0      	nop			@ (mov r8, r8)
 801879a:	46bd      	mov	sp, r7
 801879c:	b004      	add	sp, #16
 801879e:	bd80      	pop	{r7, pc}

080187a0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b084      	sub	sp, #16
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80187ac:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	0018      	movs	r0, r3
 80187b2:	f7f8 fc7f 	bl	80110b4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80187b6:	46c0      	nop			@ (mov r8, r8)
 80187b8:	46bd      	mov	sp, r7
 80187ba:	b004      	add	sp, #16
 80187bc:	bd80      	pop	{r7, pc}

080187be <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80187be:	b580      	push	{r7, lr}
 80187c0:	b084      	sub	sp, #16
 80187c2:	af00      	add	r7, sp, #0
 80187c4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80187ca:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	685a      	ldr	r2, [r3, #4]
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	2103      	movs	r1, #3
 80187d8:	438a      	bics	r2, r1
 80187da:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	2200      	movs	r2, #0
 80187e0:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	2200      	movs	r2, #0
 80187e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	2235      	movs	r2, #53	@ 0x35
 80187ec:	2101      	movs	r1, #1
 80187ee:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80187f4:	2208      	movs	r2, #8
 80187f6:	431a      	orrs	r2, r3
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	0018      	movs	r0, r3
 8018800:	f7f8 fcb8 	bl	8011174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8018804:	46c0      	nop			@ (mov r8, r8)
 8018806:	46bd      	mov	sp, r7
 8018808:	b004      	add	sp, #16
 801880a:	bd80      	pop	{r7, pc}

0801880c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b086      	sub	sp, #24
 8018810:	af00      	add	r7, sp, #0
 8018812:	60f8      	str	r0, [r7, #12]
 8018814:	60b9      	str	r1, [r7, #8]
 8018816:	603b      	str	r3, [r7, #0]
 8018818:	1dfb      	adds	r3, r7, #7
 801881a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 801881c:	f7fb fad6 	bl	8013dcc <HAL_GetTick>
 8018820:	0003      	movs	r3, r0
 8018822:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8018824:	e017      	b.n	8018856 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8018826:	683b      	ldr	r3, [r7, #0]
 8018828:	3301      	adds	r3, #1
 801882a:	d014      	beq.n	8018856 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 801882c:	f7fb face 	bl	8013dcc <HAL_GetTick>
 8018830:	0002      	movs	r2, r0
 8018832:	697b      	ldr	r3, [r7, #20]
 8018834:	1ad3      	subs	r3, r2, r3
 8018836:	683a      	ldr	r2, [r7, #0]
 8018838:	429a      	cmp	r2, r3
 801883a:	d902      	bls.n	8018842 <I2S_WaitFlagStateUntilTimeout+0x36>
 801883c:	683b      	ldr	r3, [r7, #0]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d109      	bne.n	8018856 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	2235      	movs	r2, #53	@ 0x35
 8018846:	2101      	movs	r1, #1
 8018848:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	2234      	movs	r2, #52	@ 0x34
 801884e:	2100      	movs	r1, #0
 8018850:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8018852:	2303      	movs	r3, #3
 8018854:	e00f      	b.n	8018876 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	689b      	ldr	r3, [r3, #8]
 801885c:	68ba      	ldr	r2, [r7, #8]
 801885e:	4013      	ands	r3, r2
 8018860:	68ba      	ldr	r2, [r7, #8]
 8018862:	1ad3      	subs	r3, r2, r3
 8018864:	425a      	negs	r2, r3
 8018866:	4153      	adcs	r3, r2
 8018868:	b2db      	uxtb	r3, r3
 801886a:	001a      	movs	r2, r3
 801886c:	1dfb      	adds	r3, r7, #7
 801886e:	781b      	ldrb	r3, [r3, #0]
 8018870:	429a      	cmp	r2, r3
 8018872:	d1d8      	bne.n	8018826 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8018874:	2300      	movs	r3, #0
}
 8018876:	0018      	movs	r0, r3
 8018878:	46bd      	mov	sp, r7
 801887a:	b006      	add	sp, #24
 801887c:	bd80      	pop	{r7, pc}
	...

08018880 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8018880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018882:	b08b      	sub	sp, #44	@ 0x2c
 8018884:	af06      	add	r7, sp, #24
 8018886:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d101      	bne.n	8018892 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801888e:	2301      	movs	r3, #1
 8018890:	e0f0      	b.n	8018a74 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	4a79      	ldr	r2, [pc, #484]	@ (8018a7c <HAL_PCD_Init+0x1fc>)
 8018896:	5c9b      	ldrb	r3, [r3, r2]
 8018898:	b2db      	uxtb	r3, r3
 801889a:	2b00      	cmp	r3, #0
 801889c:	d108      	bne.n	80188b0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801889e:	687a      	ldr	r2, [r7, #4]
 80188a0:	23aa      	movs	r3, #170	@ 0xaa
 80188a2:	009b      	lsls	r3, r3, #2
 80188a4:	2100      	movs	r1, #0
 80188a6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	0018      	movs	r0, r3
 80188ac:	f009 ff6a 	bl	8022784 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	4a72      	ldr	r2, [pc, #456]	@ (8018a7c <HAL_PCD_Init+0x1fc>)
 80188b4:	2103      	movs	r1, #3
 80188b6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	0018      	movs	r0, r3
 80188be:	f005 ff1b 	bl	801e6f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80188c2:	230f      	movs	r3, #15
 80188c4:	18fb      	adds	r3, r7, r3
 80188c6:	2200      	movs	r2, #0
 80188c8:	701a      	strb	r2, [r3, #0]
 80188ca:	e049      	b.n	8018960 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80188cc:	200f      	movs	r0, #15
 80188ce:	183b      	adds	r3, r7, r0
 80188d0:	781b      	ldrb	r3, [r3, #0]
 80188d2:	6879      	ldr	r1, [r7, #4]
 80188d4:	1c5a      	adds	r2, r3, #1
 80188d6:	0013      	movs	r3, r2
 80188d8:	009b      	lsls	r3, r3, #2
 80188da:	189b      	adds	r3, r3, r2
 80188dc:	00db      	lsls	r3, r3, #3
 80188de:	18cb      	adds	r3, r1, r3
 80188e0:	3301      	adds	r3, #1
 80188e2:	2201      	movs	r2, #1
 80188e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80188e6:	183b      	adds	r3, r7, r0
 80188e8:	781b      	ldrb	r3, [r3, #0]
 80188ea:	6879      	ldr	r1, [r7, #4]
 80188ec:	1c5a      	adds	r2, r3, #1
 80188ee:	0013      	movs	r3, r2
 80188f0:	009b      	lsls	r3, r3, #2
 80188f2:	189b      	adds	r3, r3, r2
 80188f4:	00db      	lsls	r3, r3, #3
 80188f6:	183a      	adds	r2, r7, r0
 80188f8:	7812      	ldrb	r2, [r2, #0]
 80188fa:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80188fc:	183b      	adds	r3, r7, r0
 80188fe:	781b      	ldrb	r3, [r3, #0]
 8018900:	6879      	ldr	r1, [r7, #4]
 8018902:	1c5a      	adds	r2, r3, #1
 8018904:	0013      	movs	r3, r2
 8018906:	009b      	lsls	r3, r3, #2
 8018908:	189b      	adds	r3, r3, r2
 801890a:	00db      	lsls	r3, r3, #3
 801890c:	18cb      	adds	r3, r1, r3
 801890e:	3303      	adds	r3, #3
 8018910:	2200      	movs	r2, #0
 8018912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8018914:	183b      	adds	r3, r7, r0
 8018916:	781a      	ldrb	r2, [r3, #0]
 8018918:	6879      	ldr	r1, [r7, #4]
 801891a:	0013      	movs	r3, r2
 801891c:	009b      	lsls	r3, r3, #2
 801891e:	189b      	adds	r3, r3, r2
 8018920:	00db      	lsls	r3, r3, #3
 8018922:	18cb      	adds	r3, r1, r3
 8018924:	3338      	adds	r3, #56	@ 0x38
 8018926:	2200      	movs	r2, #0
 8018928:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801892a:	183b      	adds	r3, r7, r0
 801892c:	781a      	ldrb	r2, [r3, #0]
 801892e:	6879      	ldr	r1, [r7, #4]
 8018930:	0013      	movs	r3, r2
 8018932:	009b      	lsls	r3, r3, #2
 8018934:	189b      	adds	r3, r3, r2
 8018936:	00db      	lsls	r3, r3, #3
 8018938:	18cb      	adds	r3, r1, r3
 801893a:	333c      	adds	r3, #60	@ 0x3c
 801893c:	2200      	movs	r2, #0
 801893e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8018940:	183b      	adds	r3, r7, r0
 8018942:	781a      	ldrb	r2, [r3, #0]
 8018944:	6879      	ldr	r1, [r7, #4]
 8018946:	0013      	movs	r3, r2
 8018948:	009b      	lsls	r3, r3, #2
 801894a:	189b      	adds	r3, r3, r2
 801894c:	00db      	lsls	r3, r3, #3
 801894e:	18cb      	adds	r3, r1, r3
 8018950:	3340      	adds	r3, #64	@ 0x40
 8018952:	2200      	movs	r2, #0
 8018954:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8018956:	183b      	adds	r3, r7, r0
 8018958:	781a      	ldrb	r2, [r3, #0]
 801895a:	183b      	adds	r3, r7, r0
 801895c:	3201      	adds	r2, #1
 801895e:	701a      	strb	r2, [r3, #0]
 8018960:	210f      	movs	r1, #15
 8018962:	187b      	adds	r3, r7, r1
 8018964:	781a      	ldrb	r2, [r3, #0]
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	685b      	ldr	r3, [r3, #4]
 801896a:	429a      	cmp	r2, r3
 801896c:	d3ae      	bcc.n	80188cc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801896e:	187b      	adds	r3, r7, r1
 8018970:	2200      	movs	r2, #0
 8018972:	701a      	strb	r2, [r3, #0]
 8018974:	e056      	b.n	8018a24 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8018976:	240f      	movs	r4, #15
 8018978:	193b      	adds	r3, r7, r4
 801897a:	781a      	ldrb	r2, [r3, #0]
 801897c:	6878      	ldr	r0, [r7, #4]
 801897e:	236a      	movs	r3, #106	@ 0x6a
 8018980:	33ff      	adds	r3, #255	@ 0xff
 8018982:	0019      	movs	r1, r3
 8018984:	0013      	movs	r3, r2
 8018986:	009b      	lsls	r3, r3, #2
 8018988:	189b      	adds	r3, r3, r2
 801898a:	00db      	lsls	r3, r3, #3
 801898c:	18c3      	adds	r3, r0, r3
 801898e:	185b      	adds	r3, r3, r1
 8018990:	2200      	movs	r2, #0
 8018992:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8018994:	193b      	adds	r3, r7, r4
 8018996:	781a      	ldrb	r2, [r3, #0]
 8018998:	6878      	ldr	r0, [r7, #4]
 801899a:	23b4      	movs	r3, #180	@ 0xb4
 801899c:	0059      	lsls	r1, r3, #1
 801899e:	0013      	movs	r3, r2
 80189a0:	009b      	lsls	r3, r3, #2
 80189a2:	189b      	adds	r3, r3, r2
 80189a4:	00db      	lsls	r3, r3, #3
 80189a6:	18c3      	adds	r3, r0, r3
 80189a8:	185b      	adds	r3, r3, r1
 80189aa:	193a      	adds	r2, r7, r4
 80189ac:	7812      	ldrb	r2, [r2, #0]
 80189ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80189b0:	193b      	adds	r3, r7, r4
 80189b2:	781a      	ldrb	r2, [r3, #0]
 80189b4:	6878      	ldr	r0, [r7, #4]
 80189b6:	236c      	movs	r3, #108	@ 0x6c
 80189b8:	33ff      	adds	r3, #255	@ 0xff
 80189ba:	0019      	movs	r1, r3
 80189bc:	0013      	movs	r3, r2
 80189be:	009b      	lsls	r3, r3, #2
 80189c0:	189b      	adds	r3, r3, r2
 80189c2:	00db      	lsls	r3, r3, #3
 80189c4:	18c3      	adds	r3, r0, r3
 80189c6:	185b      	adds	r3, r3, r1
 80189c8:	2200      	movs	r2, #0
 80189ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80189cc:	193b      	adds	r3, r7, r4
 80189ce:	781a      	ldrb	r2, [r3, #0]
 80189d0:	6878      	ldr	r0, [r7, #4]
 80189d2:	23bc      	movs	r3, #188	@ 0xbc
 80189d4:	0059      	lsls	r1, r3, #1
 80189d6:	0013      	movs	r3, r2
 80189d8:	009b      	lsls	r3, r3, #2
 80189da:	189b      	adds	r3, r3, r2
 80189dc:	00db      	lsls	r3, r3, #3
 80189de:	18c3      	adds	r3, r0, r3
 80189e0:	185b      	adds	r3, r3, r1
 80189e2:	2200      	movs	r2, #0
 80189e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80189e6:	193b      	adds	r3, r7, r4
 80189e8:	781a      	ldrb	r2, [r3, #0]
 80189ea:	6878      	ldr	r0, [r7, #4]
 80189ec:	23be      	movs	r3, #190	@ 0xbe
 80189ee:	0059      	lsls	r1, r3, #1
 80189f0:	0013      	movs	r3, r2
 80189f2:	009b      	lsls	r3, r3, #2
 80189f4:	189b      	adds	r3, r3, r2
 80189f6:	00db      	lsls	r3, r3, #3
 80189f8:	18c3      	adds	r3, r0, r3
 80189fa:	185b      	adds	r3, r3, r1
 80189fc:	2200      	movs	r2, #0
 80189fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8018a00:	193b      	adds	r3, r7, r4
 8018a02:	781a      	ldrb	r2, [r3, #0]
 8018a04:	6878      	ldr	r0, [r7, #4]
 8018a06:	23c0      	movs	r3, #192	@ 0xc0
 8018a08:	0059      	lsls	r1, r3, #1
 8018a0a:	0013      	movs	r3, r2
 8018a0c:	009b      	lsls	r3, r3, #2
 8018a0e:	189b      	adds	r3, r3, r2
 8018a10:	00db      	lsls	r3, r3, #3
 8018a12:	18c3      	adds	r3, r0, r3
 8018a14:	185b      	adds	r3, r3, r1
 8018a16:	2200      	movs	r2, #0
 8018a18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8018a1a:	193b      	adds	r3, r7, r4
 8018a1c:	781a      	ldrb	r2, [r3, #0]
 8018a1e:	193b      	adds	r3, r7, r4
 8018a20:	3201      	adds	r2, #1
 8018a22:	701a      	strb	r2, [r3, #0]
 8018a24:	230f      	movs	r3, #15
 8018a26:	18fb      	adds	r3, r7, r3
 8018a28:	781a      	ldrb	r2, [r3, #0]
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	685b      	ldr	r3, [r3, #4]
 8018a2e:	429a      	cmp	r2, r3
 8018a30:	d3a1      	bcc.n	8018976 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	6818      	ldr	r0, [r3, #0]
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	466a      	mov	r2, sp
 8018a3a:	0011      	movs	r1, r2
 8018a3c:	001a      	movs	r2, r3
 8018a3e:	3210      	adds	r2, #16
 8018a40:	ca70      	ldmia	r2!, {r4, r5, r6}
 8018a42:	c170      	stmia	r1!, {r4, r5, r6}
 8018a44:	ca30      	ldmia	r2!, {r4, r5}
 8018a46:	c130      	stmia	r1!, {r4, r5}
 8018a48:	6859      	ldr	r1, [r3, #4]
 8018a4a:	689a      	ldr	r2, [r3, #8]
 8018a4c:	68db      	ldr	r3, [r3, #12]
 8018a4e:	f005 fe6d 	bl	801e72c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	2224      	movs	r2, #36	@ 0x24
 8018a56:	2100      	movs	r1, #0
 8018a58:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	4a07      	ldr	r2, [pc, #28]	@ (8018a7c <HAL_PCD_Init+0x1fc>)
 8018a5e:	2101      	movs	r1, #1
 8018a60:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	69db      	ldr	r3, [r3, #28]
 8018a66:	2b01      	cmp	r3, #1
 8018a68:	d103      	bne.n	8018a72 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	0018      	movs	r0, r3
 8018a6e:	f001 fd23 	bl	801a4b8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8018a72:	2300      	movs	r3, #0
}
 8018a74:	0018      	movs	r0, r3
 8018a76:	46bd      	mov	sp, r7
 8018a78:	b005      	add	sp, #20
 8018a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a7c:	000002a9 	.word	0x000002a9

08018a80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8018a80:	b580      	push	{r7, lr}
 8018a82:	b082      	sub	sp, #8
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8018a88:	687a      	ldr	r2, [r7, #4]
 8018a8a:	23aa      	movs	r3, #170	@ 0xaa
 8018a8c:	009b      	lsls	r3, r3, #2
 8018a8e:	5cd3      	ldrb	r3, [r2, r3]
 8018a90:	2b01      	cmp	r3, #1
 8018a92:	d101      	bne.n	8018a98 <HAL_PCD_Start+0x18>
 8018a94:	2302      	movs	r3, #2
 8018a96:	e014      	b.n	8018ac2 <HAL_PCD_Start+0x42>
 8018a98:	687a      	ldr	r2, [r7, #4]
 8018a9a:	23aa      	movs	r3, #170	@ 0xaa
 8018a9c:	009b      	lsls	r3, r3, #2
 8018a9e:	2101      	movs	r1, #1
 8018aa0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	0018      	movs	r0, r3
 8018aa8:	f005 fe10 	bl	801e6cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	0018      	movs	r0, r3
 8018ab2:	f007 fe13 	bl	80206dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8018ab6:	687a      	ldr	r2, [r7, #4]
 8018ab8:	23aa      	movs	r3, #170	@ 0xaa
 8018aba:	009b      	lsls	r3, r3, #2
 8018abc:	2100      	movs	r1, #0
 8018abe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018ac0:	2300      	movs	r3, #0
}
 8018ac2:	0018      	movs	r0, r3
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	b002      	add	sp, #8
 8018ac8:	bd80      	pop	{r7, pc}
	...

08018acc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b084      	sub	sp, #16
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	0018      	movs	r0, r3
 8018ada:	f007 fe15 	bl	8020708 <USB_ReadInterrupts>
 8018ade:	0003      	movs	r3, r0
 8018ae0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8018ae2:	68fa      	ldr	r2, [r7, #12]
 8018ae4:	2380      	movs	r3, #128	@ 0x80
 8018ae6:	021b      	lsls	r3, r3, #8
 8018ae8:	4013      	ands	r3, r2
 8018aea:	d004      	beq.n	8018af6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	0018      	movs	r0, r3
 8018af0:	f000 fb62 	bl	80191b8 <PCD_EP_ISR_Handler>

    return;
 8018af4:	e11d      	b.n	8018d32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8018af6:	68fa      	ldr	r2, [r7, #12]
 8018af8:	2380      	movs	r3, #128	@ 0x80
 8018afa:	00db      	lsls	r3, r3, #3
 8018afc:	4013      	ands	r3, r2
 8018afe:	d015      	beq.n	8018b2c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	2244      	movs	r2, #68	@ 0x44
 8018b06:	5a9b      	ldrh	r3, [r3, r2]
 8018b08:	b29a      	uxth	r2, r3
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	498a      	ldr	r1, [pc, #552]	@ (8018d38 <HAL_PCD_IRQHandler+0x26c>)
 8018b10:	400a      	ands	r2, r1
 8018b12:	b291      	uxth	r1, r2
 8018b14:	2244      	movs	r2, #68	@ 0x44
 8018b16:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	0018      	movs	r0, r3
 8018b1c:	f009 feb5 	bl	802288a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	2100      	movs	r1, #0
 8018b24:	0018      	movs	r0, r3
 8018b26:	f000 f915 	bl	8018d54 <HAL_PCD_SetAddress>

    return;
 8018b2a:	e102      	b.n	8018d32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8018b2c:	68fa      	ldr	r2, [r7, #12]
 8018b2e:	2380      	movs	r3, #128	@ 0x80
 8018b30:	01db      	lsls	r3, r3, #7
 8018b32:	4013      	ands	r3, r2
 8018b34:	d00c      	beq.n	8018b50 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	2244      	movs	r2, #68	@ 0x44
 8018b3c:	5a9b      	ldrh	r3, [r3, r2]
 8018b3e:	b29a      	uxth	r2, r3
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	497d      	ldr	r1, [pc, #500]	@ (8018d3c <HAL_PCD_IRQHandler+0x270>)
 8018b46:	400a      	ands	r2, r1
 8018b48:	b291      	uxth	r1, r2
 8018b4a:	2244      	movs	r2, #68	@ 0x44
 8018b4c:	5299      	strh	r1, [r3, r2]

    return;
 8018b4e:	e0f0      	b.n	8018d32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8018b50:	68fa      	ldr	r2, [r7, #12]
 8018b52:	2380      	movs	r3, #128	@ 0x80
 8018b54:	019b      	lsls	r3, r3, #6
 8018b56:	4013      	ands	r3, r2
 8018b58:	d00c      	beq.n	8018b74 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	2244      	movs	r2, #68	@ 0x44
 8018b60:	5a9b      	ldrh	r3, [r3, r2]
 8018b62:	b29a      	uxth	r2, r3
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	4975      	ldr	r1, [pc, #468]	@ (8018d40 <HAL_PCD_IRQHandler+0x274>)
 8018b6a:	400a      	ands	r2, r1
 8018b6c:	b291      	uxth	r1, r2
 8018b6e:	2244      	movs	r2, #68	@ 0x44
 8018b70:	5299      	strh	r1, [r3, r2]

    return;
 8018b72:	e0de      	b.n	8018d32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8018b74:	68fa      	ldr	r2, [r7, #12]
 8018b76:	2380      	movs	r3, #128	@ 0x80
 8018b78:	015b      	lsls	r3, r3, #5
 8018b7a:	4013      	ands	r3, r2
 8018b7c:	d038      	beq.n	8018bf0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	2240      	movs	r2, #64	@ 0x40
 8018b84:	5a9b      	ldrh	r3, [r3, r2]
 8018b86:	b29a      	uxth	r2, r3
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	2104      	movs	r1, #4
 8018b8e:	438a      	bics	r2, r1
 8018b90:	b291      	uxth	r1, r2
 8018b92:	2240      	movs	r2, #64	@ 0x40
 8018b94:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	2240      	movs	r2, #64	@ 0x40
 8018b9c:	5a9b      	ldrh	r3, [r3, r2]
 8018b9e:	b29a      	uxth	r2, r3
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	2108      	movs	r1, #8
 8018ba6:	438a      	bics	r2, r1
 8018ba8:	b291      	uxth	r1, r2
 8018baa:	2240      	movs	r2, #64	@ 0x40
 8018bac:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8018bae:	687a      	ldr	r2, [r7, #4]
 8018bb0:	23b8      	movs	r3, #184	@ 0xb8
 8018bb2:	009b      	lsls	r3, r3, #2
 8018bb4:	5cd3      	ldrb	r3, [r2, r3]
 8018bb6:	2b01      	cmp	r3, #1
 8018bb8:	d109      	bne.n	8018bce <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8018bba:	687a      	ldr	r2, [r7, #4]
 8018bbc:	23b8      	movs	r3, #184	@ 0xb8
 8018bbe:	009b      	lsls	r3, r3, #2
 8018bc0:	2100      	movs	r1, #0
 8018bc2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	2100      	movs	r1, #0
 8018bc8:	0018      	movs	r0, r3
 8018bca:	f001 fc9f 	bl	801a50c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	0018      	movs	r0, r3
 8018bd2:	f009 fe9b 	bl	802290c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	2244      	movs	r2, #68	@ 0x44
 8018bdc:	5a9b      	ldrh	r3, [r3, r2]
 8018bde:	b29a      	uxth	r2, r3
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	4957      	ldr	r1, [pc, #348]	@ (8018d44 <HAL_PCD_IRQHandler+0x278>)
 8018be6:	400a      	ands	r2, r1
 8018be8:	b291      	uxth	r1, r2
 8018bea:	2244      	movs	r2, #68	@ 0x44
 8018bec:	5299      	strh	r1, [r3, r2]

    return;
 8018bee:	e0a0      	b.n	8018d32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8018bf0:	68fa      	ldr	r2, [r7, #12]
 8018bf2:	2380      	movs	r3, #128	@ 0x80
 8018bf4:	011b      	lsls	r3, r3, #4
 8018bf6:	4013      	ands	r3, r2
 8018bf8:	d028      	beq.n	8018c4c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	2240      	movs	r2, #64	@ 0x40
 8018c00:	5a9b      	ldrh	r3, [r3, r2]
 8018c02:	b29a      	uxth	r2, r3
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	2108      	movs	r1, #8
 8018c0a:	430a      	orrs	r2, r1
 8018c0c:	b291      	uxth	r1, r2
 8018c0e:	2240      	movs	r2, #64	@ 0x40
 8018c10:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	2244      	movs	r2, #68	@ 0x44
 8018c18:	5a9b      	ldrh	r3, [r3, r2]
 8018c1a:	b29a      	uxth	r2, r3
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	4949      	ldr	r1, [pc, #292]	@ (8018d48 <HAL_PCD_IRQHandler+0x27c>)
 8018c22:	400a      	ands	r2, r1
 8018c24:	b291      	uxth	r1, r2
 8018c26:	2244      	movs	r2, #68	@ 0x44
 8018c28:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	2240      	movs	r2, #64	@ 0x40
 8018c30:	5a9b      	ldrh	r3, [r3, r2]
 8018c32:	b29a      	uxth	r2, r3
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	2104      	movs	r1, #4
 8018c3a:	430a      	orrs	r2, r1
 8018c3c:	b291      	uxth	r1, r2
 8018c3e:	2240      	movs	r2, #64	@ 0x40
 8018c40:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	0018      	movs	r0, r3
 8018c46:	f009 fe45 	bl	80228d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8018c4a:	e072      	b.n	8018d32 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	2280      	movs	r2, #128	@ 0x80
 8018c50:	4013      	ands	r3, r2
 8018c52:	d046      	beq.n	8018ce2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	2244      	movs	r2, #68	@ 0x44
 8018c5a:	5a9b      	ldrh	r3, [r3, r2]
 8018c5c:	b29a      	uxth	r2, r3
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	2180      	movs	r1, #128	@ 0x80
 8018c64:	438a      	bics	r2, r1
 8018c66:	b291      	uxth	r1, r2
 8018c68:	2244      	movs	r2, #68	@ 0x44
 8018c6a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8018c6c:	687a      	ldr	r2, [r7, #4]
 8018c6e:	23b8      	movs	r3, #184	@ 0xb8
 8018c70:	009b      	lsls	r3, r3, #2
 8018c72:	5cd3      	ldrb	r3, [r2, r3]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d12f      	bne.n	8018cd8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	2240      	movs	r2, #64	@ 0x40
 8018c7e:	5a9b      	ldrh	r3, [r3, r2]
 8018c80:	b29a      	uxth	r2, r3
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	2104      	movs	r1, #4
 8018c88:	430a      	orrs	r2, r1
 8018c8a:	b291      	uxth	r1, r2
 8018c8c:	2240      	movs	r2, #64	@ 0x40
 8018c8e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	2240      	movs	r2, #64	@ 0x40
 8018c96:	5a9b      	ldrh	r3, [r3, r2]
 8018c98:	b29a      	uxth	r2, r3
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	2108      	movs	r1, #8
 8018ca0:	430a      	orrs	r2, r1
 8018ca2:	b291      	uxth	r1, r2
 8018ca4:	2240      	movs	r2, #64	@ 0x40
 8018ca6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8018ca8:	687a      	ldr	r2, [r7, #4]
 8018caa:	23b8      	movs	r3, #184	@ 0xb8
 8018cac:	009b      	lsls	r3, r3, #2
 8018cae:	2101      	movs	r1, #1
 8018cb0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	2254      	movs	r2, #84	@ 0x54
 8018cb8:	5a9b      	ldrh	r3, [r3, r2]
 8018cba:	b29b      	uxth	r3, r3
 8018cbc:	089b      	lsrs	r3, r3, #2
 8018cbe:	223c      	movs	r2, #60	@ 0x3c
 8018cc0:	4013      	ands	r3, r2
 8018cc2:	0019      	movs	r1, r3
 8018cc4:	687a      	ldr	r2, [r7, #4]
 8018cc6:	23b9      	movs	r3, #185	@ 0xb9
 8018cc8:	009b      	lsls	r3, r3, #2
 8018cca:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	2101      	movs	r1, #1
 8018cd0:	0018      	movs	r0, r3
 8018cd2:	f001 fc1b 	bl	801a50c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8018cd6:	e02c      	b.n	8018d32 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	0018      	movs	r0, r3
 8018cdc:	f009 fdfa 	bl	80228d4 <HAL_PCD_SuspendCallback>
    return;
 8018ce0:	e027      	b.n	8018d32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8018ce2:	68fa      	ldr	r2, [r7, #12]
 8018ce4:	2380      	movs	r3, #128	@ 0x80
 8018ce6:	009b      	lsls	r3, r3, #2
 8018ce8:	4013      	ands	r3, r2
 8018cea:	d010      	beq.n	8018d0e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	2244      	movs	r2, #68	@ 0x44
 8018cf2:	5a9b      	ldrh	r3, [r3, r2]
 8018cf4:	b29a      	uxth	r2, r3
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	4914      	ldr	r1, [pc, #80]	@ (8018d4c <HAL_PCD_IRQHandler+0x280>)
 8018cfc:	400a      	ands	r2, r1
 8018cfe:	b291      	uxth	r1, r2
 8018d00:	2244      	movs	r2, #68	@ 0x44
 8018d02:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	0018      	movs	r0, r3
 8018d08:	f009 fdb0 	bl	802286c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8018d0c:	e011      	b.n	8018d32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8018d0e:	68fa      	ldr	r2, [r7, #12]
 8018d10:	2380      	movs	r3, #128	@ 0x80
 8018d12:	005b      	lsls	r3, r3, #1
 8018d14:	4013      	ands	r3, r2
 8018d16:	d00c      	beq.n	8018d32 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	2244      	movs	r2, #68	@ 0x44
 8018d1e:	5a9b      	ldrh	r3, [r3, r2]
 8018d20:	b29a      	uxth	r2, r3
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	490a      	ldr	r1, [pc, #40]	@ (8018d50 <HAL_PCD_IRQHandler+0x284>)
 8018d28:	400a      	ands	r2, r1
 8018d2a:	b291      	uxth	r1, r2
 8018d2c:	2244      	movs	r2, #68	@ 0x44
 8018d2e:	5299      	strh	r1, [r3, r2]

    return;
 8018d30:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018d32:	46bd      	mov	sp, r7
 8018d34:	b004      	add	sp, #16
 8018d36:	bd80      	pop	{r7, pc}
 8018d38:	fffffbff 	.word	0xfffffbff
 8018d3c:	ffffbfff 	.word	0xffffbfff
 8018d40:	ffffdfff 	.word	0xffffdfff
 8018d44:	ffffefff 	.word	0xffffefff
 8018d48:	fffff7ff 	.word	0xfffff7ff
 8018d4c:	fffffdff 	.word	0xfffffdff
 8018d50:	fffffeff 	.word	0xfffffeff

08018d54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b082      	sub	sp, #8
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	6078      	str	r0, [r7, #4]
 8018d5c:	000a      	movs	r2, r1
 8018d5e:	1cfb      	adds	r3, r7, #3
 8018d60:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8018d62:	687a      	ldr	r2, [r7, #4]
 8018d64:	23aa      	movs	r3, #170	@ 0xaa
 8018d66:	009b      	lsls	r3, r3, #2
 8018d68:	5cd3      	ldrb	r3, [r2, r3]
 8018d6a:	2b01      	cmp	r3, #1
 8018d6c:	d101      	bne.n	8018d72 <HAL_PCD_SetAddress+0x1e>
 8018d6e:	2302      	movs	r3, #2
 8018d70:	e017      	b.n	8018da2 <HAL_PCD_SetAddress+0x4e>
 8018d72:	687a      	ldr	r2, [r7, #4]
 8018d74:	23aa      	movs	r3, #170	@ 0xaa
 8018d76:	009b      	lsls	r3, r3, #2
 8018d78:	2101      	movs	r1, #1
 8018d7a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	1cfa      	adds	r2, r7, #3
 8018d80:	2124      	movs	r1, #36	@ 0x24
 8018d82:	7812      	ldrb	r2, [r2, #0]
 8018d84:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	681a      	ldr	r2, [r3, #0]
 8018d8a:	1cfb      	adds	r3, r7, #3
 8018d8c:	781b      	ldrb	r3, [r3, #0]
 8018d8e:	0019      	movs	r1, r3
 8018d90:	0010      	movs	r0, r2
 8018d92:	f007 fc8f 	bl	80206b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8018d96:	687a      	ldr	r2, [r7, #4]
 8018d98:	23aa      	movs	r3, #170	@ 0xaa
 8018d9a:	009b      	lsls	r3, r3, #2
 8018d9c:	2100      	movs	r1, #0
 8018d9e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018da0:	2300      	movs	r3, #0
}
 8018da2:	0018      	movs	r0, r3
 8018da4:	46bd      	mov	sp, r7
 8018da6:	b002      	add	sp, #8
 8018da8:	bd80      	pop	{r7, pc}

08018daa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8018daa:	b590      	push	{r4, r7, lr}
 8018dac:	b085      	sub	sp, #20
 8018dae:	af00      	add	r7, sp, #0
 8018db0:	6078      	str	r0, [r7, #4]
 8018db2:	000c      	movs	r4, r1
 8018db4:	0010      	movs	r0, r2
 8018db6:	0019      	movs	r1, r3
 8018db8:	1cfb      	adds	r3, r7, #3
 8018dba:	1c22      	adds	r2, r4, #0
 8018dbc:	701a      	strb	r2, [r3, #0]
 8018dbe:	003b      	movs	r3, r7
 8018dc0:	1c02      	adds	r2, r0, #0
 8018dc2:	801a      	strh	r2, [r3, #0]
 8018dc4:	1cbb      	adds	r3, r7, #2
 8018dc6:	1c0a      	adds	r2, r1, #0
 8018dc8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8018dca:	230b      	movs	r3, #11
 8018dcc:	18fb      	adds	r3, r7, r3
 8018dce:	2200      	movs	r2, #0
 8018dd0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8018dd2:	1cfb      	adds	r3, r7, #3
 8018dd4:	781b      	ldrb	r3, [r3, #0]
 8018dd6:	b25b      	sxtb	r3, r3
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	da0f      	bge.n	8018dfc <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018ddc:	1cfb      	adds	r3, r7, #3
 8018dde:	781b      	ldrb	r3, [r3, #0]
 8018de0:	2207      	movs	r2, #7
 8018de2:	4013      	ands	r3, r2
 8018de4:	1c5a      	adds	r2, r3, #1
 8018de6:	0013      	movs	r3, r2
 8018de8:	009b      	lsls	r3, r3, #2
 8018dea:	189b      	adds	r3, r3, r2
 8018dec:	00db      	lsls	r3, r3, #3
 8018dee:	687a      	ldr	r2, [r7, #4]
 8018df0:	18d3      	adds	r3, r2, r3
 8018df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	2201      	movs	r2, #1
 8018df8:	705a      	strb	r2, [r3, #1]
 8018dfa:	e00f      	b.n	8018e1c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018dfc:	1cfb      	adds	r3, r7, #3
 8018dfe:	781b      	ldrb	r3, [r3, #0]
 8018e00:	2207      	movs	r2, #7
 8018e02:	401a      	ands	r2, r3
 8018e04:	0013      	movs	r3, r2
 8018e06:	009b      	lsls	r3, r3, #2
 8018e08:	189b      	adds	r3, r3, r2
 8018e0a:	00db      	lsls	r3, r3, #3
 8018e0c:	3369      	adds	r3, #105	@ 0x69
 8018e0e:	33ff      	adds	r3, #255	@ 0xff
 8018e10:	687a      	ldr	r2, [r7, #4]
 8018e12:	18d3      	adds	r3, r2, r3
 8018e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	2200      	movs	r2, #0
 8018e1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8018e1c:	1cfb      	adds	r3, r7, #3
 8018e1e:	781b      	ldrb	r3, [r3, #0]
 8018e20:	2207      	movs	r2, #7
 8018e22:	4013      	ands	r3, r2
 8018e24:	b2da      	uxtb	r2, r3
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8018e2a:	003b      	movs	r3, r7
 8018e2c:	881a      	ldrh	r2, [r3, #0]
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	1cba      	adds	r2, r7, #2
 8018e36:	7812      	ldrb	r2, [r2, #0]
 8018e38:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8018e3a:	1cbb      	adds	r3, r7, #2
 8018e3c:	781b      	ldrb	r3, [r3, #0]
 8018e3e:	2b02      	cmp	r3, #2
 8018e40:	d102      	bne.n	8018e48 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	2200      	movs	r2, #0
 8018e46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8018e48:	687a      	ldr	r2, [r7, #4]
 8018e4a:	23aa      	movs	r3, #170	@ 0xaa
 8018e4c:	009b      	lsls	r3, r3, #2
 8018e4e:	5cd3      	ldrb	r3, [r2, r3]
 8018e50:	2b01      	cmp	r3, #1
 8018e52:	d101      	bne.n	8018e58 <HAL_PCD_EP_Open+0xae>
 8018e54:	2302      	movs	r3, #2
 8018e56:	e013      	b.n	8018e80 <HAL_PCD_EP_Open+0xd6>
 8018e58:	687a      	ldr	r2, [r7, #4]
 8018e5a:	23aa      	movs	r3, #170	@ 0xaa
 8018e5c:	009b      	lsls	r3, r3, #2
 8018e5e:	2101      	movs	r1, #1
 8018e60:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	68fa      	ldr	r2, [r7, #12]
 8018e68:	0011      	movs	r1, r2
 8018e6a:	0018      	movs	r0, r3
 8018e6c:	f005 fc86 	bl	801e77c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8018e70:	687a      	ldr	r2, [r7, #4]
 8018e72:	23aa      	movs	r3, #170	@ 0xaa
 8018e74:	009b      	lsls	r3, r3, #2
 8018e76:	2100      	movs	r1, #0
 8018e78:	54d1      	strb	r1, [r2, r3]

  return ret;
 8018e7a:	230b      	movs	r3, #11
 8018e7c:	18fb      	adds	r3, r7, r3
 8018e7e:	781b      	ldrb	r3, [r3, #0]
}
 8018e80:	0018      	movs	r0, r3
 8018e82:	46bd      	mov	sp, r7
 8018e84:	b005      	add	sp, #20
 8018e86:	bd90      	pop	{r4, r7, pc}

08018e88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b084      	sub	sp, #16
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
 8018e90:	000a      	movs	r2, r1
 8018e92:	1cfb      	adds	r3, r7, #3
 8018e94:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8018e96:	1cfb      	adds	r3, r7, #3
 8018e98:	781b      	ldrb	r3, [r3, #0]
 8018e9a:	b25b      	sxtb	r3, r3
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	da0f      	bge.n	8018ec0 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018ea0:	1cfb      	adds	r3, r7, #3
 8018ea2:	781b      	ldrb	r3, [r3, #0]
 8018ea4:	2207      	movs	r2, #7
 8018ea6:	4013      	ands	r3, r2
 8018ea8:	1c5a      	adds	r2, r3, #1
 8018eaa:	0013      	movs	r3, r2
 8018eac:	009b      	lsls	r3, r3, #2
 8018eae:	189b      	adds	r3, r3, r2
 8018eb0:	00db      	lsls	r3, r3, #3
 8018eb2:	687a      	ldr	r2, [r7, #4]
 8018eb4:	18d3      	adds	r3, r2, r3
 8018eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	2201      	movs	r2, #1
 8018ebc:	705a      	strb	r2, [r3, #1]
 8018ebe:	e00f      	b.n	8018ee0 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018ec0:	1cfb      	adds	r3, r7, #3
 8018ec2:	781b      	ldrb	r3, [r3, #0]
 8018ec4:	2207      	movs	r2, #7
 8018ec6:	401a      	ands	r2, r3
 8018ec8:	0013      	movs	r3, r2
 8018eca:	009b      	lsls	r3, r3, #2
 8018ecc:	189b      	adds	r3, r3, r2
 8018ece:	00db      	lsls	r3, r3, #3
 8018ed0:	3369      	adds	r3, #105	@ 0x69
 8018ed2:	33ff      	adds	r3, #255	@ 0xff
 8018ed4:	687a      	ldr	r2, [r7, #4]
 8018ed6:	18d3      	adds	r3, r2, r3
 8018ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	2200      	movs	r2, #0
 8018ede:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8018ee0:	1cfb      	adds	r3, r7, #3
 8018ee2:	781b      	ldrb	r3, [r3, #0]
 8018ee4:	2207      	movs	r2, #7
 8018ee6:	4013      	ands	r3, r2
 8018ee8:	b2da      	uxtb	r2, r3
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018eee:	687a      	ldr	r2, [r7, #4]
 8018ef0:	23aa      	movs	r3, #170	@ 0xaa
 8018ef2:	009b      	lsls	r3, r3, #2
 8018ef4:	5cd3      	ldrb	r3, [r2, r3]
 8018ef6:	2b01      	cmp	r3, #1
 8018ef8:	d101      	bne.n	8018efe <HAL_PCD_EP_Close+0x76>
 8018efa:	2302      	movs	r3, #2
 8018efc:	e011      	b.n	8018f22 <HAL_PCD_EP_Close+0x9a>
 8018efe:	687a      	ldr	r2, [r7, #4]
 8018f00:	23aa      	movs	r3, #170	@ 0xaa
 8018f02:	009b      	lsls	r3, r3, #2
 8018f04:	2101      	movs	r1, #1
 8018f06:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	68fa      	ldr	r2, [r7, #12]
 8018f0e:	0011      	movs	r1, r2
 8018f10:	0018      	movs	r0, r3
 8018f12:	f005 ffd5 	bl	801eec0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8018f16:	687a      	ldr	r2, [r7, #4]
 8018f18:	23aa      	movs	r3, #170	@ 0xaa
 8018f1a:	009b      	lsls	r3, r3, #2
 8018f1c:	2100      	movs	r1, #0
 8018f1e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8018f20:	2300      	movs	r3, #0
}
 8018f22:	0018      	movs	r0, r3
 8018f24:	46bd      	mov	sp, r7
 8018f26:	b004      	add	sp, #16
 8018f28:	bd80      	pop	{r7, pc}

08018f2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018f2a:	b580      	push	{r7, lr}
 8018f2c:	b086      	sub	sp, #24
 8018f2e:	af00      	add	r7, sp, #0
 8018f30:	60f8      	str	r0, [r7, #12]
 8018f32:	607a      	str	r2, [r7, #4]
 8018f34:	603b      	str	r3, [r7, #0]
 8018f36:	200b      	movs	r0, #11
 8018f38:	183b      	adds	r3, r7, r0
 8018f3a:	1c0a      	adds	r2, r1, #0
 8018f3c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018f3e:	0001      	movs	r1, r0
 8018f40:	187b      	adds	r3, r7, r1
 8018f42:	781b      	ldrb	r3, [r3, #0]
 8018f44:	2207      	movs	r2, #7
 8018f46:	401a      	ands	r2, r3
 8018f48:	0013      	movs	r3, r2
 8018f4a:	009b      	lsls	r3, r3, #2
 8018f4c:	189b      	adds	r3, r3, r2
 8018f4e:	00db      	lsls	r3, r3, #3
 8018f50:	3369      	adds	r3, #105	@ 0x69
 8018f52:	33ff      	adds	r3, #255	@ 0xff
 8018f54:	68fa      	ldr	r2, [r7, #12]
 8018f56:	18d3      	adds	r3, r2, r3
 8018f58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8018f5a:	697b      	ldr	r3, [r7, #20]
 8018f5c:	687a      	ldr	r2, [r7, #4]
 8018f5e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8018f60:	697b      	ldr	r3, [r7, #20]
 8018f62:	683a      	ldr	r2, [r7, #0]
 8018f64:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8018f66:	697b      	ldr	r3, [r7, #20]
 8018f68:	2200      	movs	r2, #0
 8018f6a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8018f6c:	697b      	ldr	r3, [r7, #20]
 8018f6e:	2200      	movs	r2, #0
 8018f70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018f72:	187b      	adds	r3, r7, r1
 8018f74:	781b      	ldrb	r3, [r3, #0]
 8018f76:	2207      	movs	r2, #7
 8018f78:	4013      	ands	r3, r2
 8018f7a:	b2da      	uxtb	r2, r3
 8018f7c:	697b      	ldr	r3, [r7, #20]
 8018f7e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	697a      	ldr	r2, [r7, #20]
 8018f86:	0011      	movs	r1, r2
 8018f88:	0018      	movs	r0, r3
 8018f8a:	f006 f959 	bl	801f240 <USB_EPStartXfer>

  return HAL_OK;
 8018f8e:	2300      	movs	r3, #0
}
 8018f90:	0018      	movs	r0, r3
 8018f92:	46bd      	mov	sp, r7
 8018f94:	b006      	add	sp, #24
 8018f96:	bd80      	pop	{r7, pc}

08018f98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b082      	sub	sp, #8
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	6078      	str	r0, [r7, #4]
 8018fa0:	000a      	movs	r2, r1
 8018fa2:	1cfb      	adds	r3, r7, #3
 8018fa4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8018fa6:	1cfb      	adds	r3, r7, #3
 8018fa8:	781b      	ldrb	r3, [r3, #0]
 8018faa:	2207      	movs	r2, #7
 8018fac:	401a      	ands	r2, r3
 8018fae:	6878      	ldr	r0, [r7, #4]
 8018fb0:	23c2      	movs	r3, #194	@ 0xc2
 8018fb2:	0059      	lsls	r1, r3, #1
 8018fb4:	0013      	movs	r3, r2
 8018fb6:	009b      	lsls	r3, r3, #2
 8018fb8:	189b      	adds	r3, r3, r2
 8018fba:	00db      	lsls	r3, r3, #3
 8018fbc:	18c3      	adds	r3, r0, r3
 8018fbe:	185b      	adds	r3, r3, r1
 8018fc0:	681b      	ldr	r3, [r3, #0]
}
 8018fc2:	0018      	movs	r0, r3
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	b002      	add	sp, #8
 8018fc8:	bd80      	pop	{r7, pc}

08018fca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018fca:	b580      	push	{r7, lr}
 8018fcc:	b086      	sub	sp, #24
 8018fce:	af00      	add	r7, sp, #0
 8018fd0:	60f8      	str	r0, [r7, #12]
 8018fd2:	607a      	str	r2, [r7, #4]
 8018fd4:	603b      	str	r3, [r7, #0]
 8018fd6:	200b      	movs	r0, #11
 8018fd8:	183b      	adds	r3, r7, r0
 8018fda:	1c0a      	adds	r2, r1, #0
 8018fdc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018fde:	183b      	adds	r3, r7, r0
 8018fe0:	781b      	ldrb	r3, [r3, #0]
 8018fe2:	2207      	movs	r2, #7
 8018fe4:	4013      	ands	r3, r2
 8018fe6:	1c5a      	adds	r2, r3, #1
 8018fe8:	0013      	movs	r3, r2
 8018fea:	009b      	lsls	r3, r3, #2
 8018fec:	189b      	adds	r3, r3, r2
 8018fee:	00db      	lsls	r3, r3, #3
 8018ff0:	68fa      	ldr	r2, [r7, #12]
 8018ff2:	18d3      	adds	r3, r2, r3
 8018ff4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8018ff6:	697b      	ldr	r3, [r7, #20]
 8018ff8:	687a      	ldr	r2, [r7, #4]
 8018ffa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8018ffc:	697b      	ldr	r3, [r7, #20]
 8018ffe:	683a      	ldr	r2, [r7, #0]
 8019000:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8019002:	697b      	ldr	r3, [r7, #20]
 8019004:	2224      	movs	r2, #36	@ 0x24
 8019006:	2101      	movs	r1, #1
 8019008:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801900a:	697b      	ldr	r3, [r7, #20]
 801900c:	683a      	ldr	r2, [r7, #0]
 801900e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8019010:	697b      	ldr	r3, [r7, #20]
 8019012:	2200      	movs	r2, #0
 8019014:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8019016:	697b      	ldr	r3, [r7, #20]
 8019018:	2201      	movs	r2, #1
 801901a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801901c:	183b      	adds	r3, r7, r0
 801901e:	781b      	ldrb	r3, [r3, #0]
 8019020:	2207      	movs	r2, #7
 8019022:	4013      	ands	r3, r2
 8019024:	b2da      	uxtb	r2, r3
 8019026:	697b      	ldr	r3, [r7, #20]
 8019028:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	697a      	ldr	r2, [r7, #20]
 8019030:	0011      	movs	r1, r2
 8019032:	0018      	movs	r0, r3
 8019034:	f006 f904 	bl	801f240 <USB_EPStartXfer>

  return HAL_OK;
 8019038:	2300      	movs	r3, #0
}
 801903a:	0018      	movs	r0, r3
 801903c:	46bd      	mov	sp, r7
 801903e:	b006      	add	sp, #24
 8019040:	bd80      	pop	{r7, pc}

08019042 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019042:	b580      	push	{r7, lr}
 8019044:	b084      	sub	sp, #16
 8019046:	af00      	add	r7, sp, #0
 8019048:	6078      	str	r0, [r7, #4]
 801904a:	000a      	movs	r2, r1
 801904c:	1cfb      	adds	r3, r7, #3
 801904e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8019050:	1cfb      	adds	r3, r7, #3
 8019052:	781b      	ldrb	r3, [r3, #0]
 8019054:	2207      	movs	r2, #7
 8019056:	401a      	ands	r2, r3
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	685b      	ldr	r3, [r3, #4]
 801905c:	429a      	cmp	r2, r3
 801905e:	d901      	bls.n	8019064 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8019060:	2301      	movs	r3, #1
 8019062:	e046      	b.n	80190f2 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019064:	1cfb      	adds	r3, r7, #3
 8019066:	781b      	ldrb	r3, [r3, #0]
 8019068:	b25b      	sxtb	r3, r3
 801906a:	2b00      	cmp	r3, #0
 801906c:	da0f      	bge.n	801908e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801906e:	1cfb      	adds	r3, r7, #3
 8019070:	781b      	ldrb	r3, [r3, #0]
 8019072:	2207      	movs	r2, #7
 8019074:	4013      	ands	r3, r2
 8019076:	1c5a      	adds	r2, r3, #1
 8019078:	0013      	movs	r3, r2
 801907a:	009b      	lsls	r3, r3, #2
 801907c:	189b      	adds	r3, r3, r2
 801907e:	00db      	lsls	r3, r3, #3
 8019080:	687a      	ldr	r2, [r7, #4]
 8019082:	18d3      	adds	r3, r2, r3
 8019084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	2201      	movs	r2, #1
 801908a:	705a      	strb	r2, [r3, #1]
 801908c:	e00d      	b.n	80190aa <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801908e:	1cfb      	adds	r3, r7, #3
 8019090:	781a      	ldrb	r2, [r3, #0]
 8019092:	0013      	movs	r3, r2
 8019094:	009b      	lsls	r3, r3, #2
 8019096:	189b      	adds	r3, r3, r2
 8019098:	00db      	lsls	r3, r3, #3
 801909a:	3369      	adds	r3, #105	@ 0x69
 801909c:	33ff      	adds	r3, #255	@ 0xff
 801909e:	687a      	ldr	r2, [r7, #4]
 80190a0:	18d3      	adds	r3, r2, r3
 80190a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	2200      	movs	r2, #0
 80190a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	2201      	movs	r2, #1
 80190ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80190b0:	1cfb      	adds	r3, r7, #3
 80190b2:	781b      	ldrb	r3, [r3, #0]
 80190b4:	2207      	movs	r2, #7
 80190b6:	4013      	ands	r3, r2
 80190b8:	b2da      	uxtb	r2, r3
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80190be:	687a      	ldr	r2, [r7, #4]
 80190c0:	23aa      	movs	r3, #170	@ 0xaa
 80190c2:	009b      	lsls	r3, r3, #2
 80190c4:	5cd3      	ldrb	r3, [r2, r3]
 80190c6:	2b01      	cmp	r3, #1
 80190c8:	d101      	bne.n	80190ce <HAL_PCD_EP_SetStall+0x8c>
 80190ca:	2302      	movs	r3, #2
 80190cc:	e011      	b.n	80190f2 <HAL_PCD_EP_SetStall+0xb0>
 80190ce:	687a      	ldr	r2, [r7, #4]
 80190d0:	23aa      	movs	r3, #170	@ 0xaa
 80190d2:	009b      	lsls	r3, r3, #2
 80190d4:	2101      	movs	r1, #1
 80190d6:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	68fa      	ldr	r2, [r7, #12]
 80190de:	0011      	movs	r1, r2
 80190e0:	0018      	movs	r0, r3
 80190e2:	f007 f9e5 	bl	80204b0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80190e6:	687a      	ldr	r2, [r7, #4]
 80190e8:	23aa      	movs	r3, #170	@ 0xaa
 80190ea:	009b      	lsls	r3, r3, #2
 80190ec:	2100      	movs	r1, #0
 80190ee:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80190f0:	2300      	movs	r3, #0
}
 80190f2:	0018      	movs	r0, r3
 80190f4:	46bd      	mov	sp, r7
 80190f6:	b004      	add	sp, #16
 80190f8:	bd80      	pop	{r7, pc}

080190fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80190fa:	b580      	push	{r7, lr}
 80190fc:	b084      	sub	sp, #16
 80190fe:	af00      	add	r7, sp, #0
 8019100:	6078      	str	r0, [r7, #4]
 8019102:	000a      	movs	r2, r1
 8019104:	1cfb      	adds	r3, r7, #3
 8019106:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8019108:	1cfb      	adds	r3, r7, #3
 801910a:	781b      	ldrb	r3, [r3, #0]
 801910c:	220f      	movs	r2, #15
 801910e:	401a      	ands	r2, r3
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	685b      	ldr	r3, [r3, #4]
 8019114:	429a      	cmp	r2, r3
 8019116:	d901      	bls.n	801911c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8019118:	2301      	movs	r3, #1
 801911a:	e048      	b.n	80191ae <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801911c:	1cfb      	adds	r3, r7, #3
 801911e:	781b      	ldrb	r3, [r3, #0]
 8019120:	b25b      	sxtb	r3, r3
 8019122:	2b00      	cmp	r3, #0
 8019124:	da0f      	bge.n	8019146 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019126:	1cfb      	adds	r3, r7, #3
 8019128:	781b      	ldrb	r3, [r3, #0]
 801912a:	2207      	movs	r2, #7
 801912c:	4013      	ands	r3, r2
 801912e:	1c5a      	adds	r2, r3, #1
 8019130:	0013      	movs	r3, r2
 8019132:	009b      	lsls	r3, r3, #2
 8019134:	189b      	adds	r3, r3, r2
 8019136:	00db      	lsls	r3, r3, #3
 8019138:	687a      	ldr	r2, [r7, #4]
 801913a:	18d3      	adds	r3, r2, r3
 801913c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	2201      	movs	r2, #1
 8019142:	705a      	strb	r2, [r3, #1]
 8019144:	e00f      	b.n	8019166 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019146:	1cfb      	adds	r3, r7, #3
 8019148:	781b      	ldrb	r3, [r3, #0]
 801914a:	2207      	movs	r2, #7
 801914c:	401a      	ands	r2, r3
 801914e:	0013      	movs	r3, r2
 8019150:	009b      	lsls	r3, r3, #2
 8019152:	189b      	adds	r3, r3, r2
 8019154:	00db      	lsls	r3, r3, #3
 8019156:	3369      	adds	r3, #105	@ 0x69
 8019158:	33ff      	adds	r3, #255	@ 0xff
 801915a:	687a      	ldr	r2, [r7, #4]
 801915c:	18d3      	adds	r3, r2, r3
 801915e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	2200      	movs	r2, #0
 8019164:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	2200      	movs	r2, #0
 801916a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801916c:	1cfb      	adds	r3, r7, #3
 801916e:	781b      	ldrb	r3, [r3, #0]
 8019170:	2207      	movs	r2, #7
 8019172:	4013      	ands	r3, r2
 8019174:	b2da      	uxtb	r2, r3
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801917a:	687a      	ldr	r2, [r7, #4]
 801917c:	23aa      	movs	r3, #170	@ 0xaa
 801917e:	009b      	lsls	r3, r3, #2
 8019180:	5cd3      	ldrb	r3, [r2, r3]
 8019182:	2b01      	cmp	r3, #1
 8019184:	d101      	bne.n	801918a <HAL_PCD_EP_ClrStall+0x90>
 8019186:	2302      	movs	r3, #2
 8019188:	e011      	b.n	80191ae <HAL_PCD_EP_ClrStall+0xb4>
 801918a:	687a      	ldr	r2, [r7, #4]
 801918c:	23aa      	movs	r3, #170	@ 0xaa
 801918e:	009b      	lsls	r3, r3, #2
 8019190:	2101      	movs	r1, #1
 8019192:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	68fa      	ldr	r2, [r7, #12]
 801919a:	0011      	movs	r1, r2
 801919c:	0018      	movs	r0, r3
 801919e:	f007 f9d7 	bl	8020550 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80191a2:	687a      	ldr	r2, [r7, #4]
 80191a4:	23aa      	movs	r3, #170	@ 0xaa
 80191a6:	009b      	lsls	r3, r3, #2
 80191a8:	2100      	movs	r1, #0
 80191aa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80191ac:	2300      	movs	r3, #0
}
 80191ae:	0018      	movs	r0, r3
 80191b0:	46bd      	mov	sp, r7
 80191b2:	b004      	add	sp, #16
 80191b4:	bd80      	pop	{r7, pc}
	...

080191b8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80191b8:	b5b0      	push	{r4, r5, r7, lr}
 80191ba:	b096      	sub	sp, #88	@ 0x58
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80191c0:	f000 fbec 	bl	801999c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	681a      	ldr	r2, [r3, #0]
 80191c8:	204e      	movs	r0, #78	@ 0x4e
 80191ca:	183b      	adds	r3, r7, r0
 80191cc:	2144      	movs	r1, #68	@ 0x44
 80191ce:	5a52      	ldrh	r2, [r2, r1]
 80191d0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80191d2:	183b      	adds	r3, r7, r0
 80191d4:	881b      	ldrh	r3, [r3, #0]
 80191d6:	b2da      	uxtb	r2, r3
 80191d8:	244d      	movs	r4, #77	@ 0x4d
 80191da:	193b      	adds	r3, r7, r4
 80191dc:	210f      	movs	r1, #15
 80191de:	400a      	ands	r2, r1
 80191e0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80191e2:	193b      	adds	r3, r7, r4
 80191e4:	781b      	ldrb	r3, [r3, #0]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d000      	beq.n	80191ec <PCD_EP_ISR_Handler+0x34>
 80191ea:	e18f      	b.n	801950c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80191ec:	183b      	adds	r3, r7, r0
 80191ee:	881b      	ldrh	r3, [r3, #0]
 80191f0:	2210      	movs	r2, #16
 80191f2:	4013      	ands	r3, r2
 80191f4:	d155      	bne.n	80192a2 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	881b      	ldrh	r3, [r3, #0]
 80191fc:	b29a      	uxth	r2, r3
 80191fe:	200e      	movs	r0, #14
 8019200:	183b      	adds	r3, r7, r0
 8019202:	49bb      	ldr	r1, [pc, #748]	@ (80194f0 <PCD_EP_ISR_Handler+0x338>)
 8019204:	400a      	ands	r2, r1
 8019206:	801a      	strh	r2, [r3, #0]
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	183a      	adds	r2, r7, r0
 801920e:	8812      	ldrh	r2, [r2, #0]
 8019210:	49b8      	ldr	r1, [pc, #736]	@ (80194f4 <PCD_EP_ISR_Handler+0x33c>)
 8019212:	430a      	orrs	r2, r1
 8019214:	b292      	uxth	r2, r2
 8019216:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	3328      	adds	r3, #40	@ 0x28
 801921c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	2250      	movs	r2, #80	@ 0x50
 8019224:	5a9b      	ldrh	r3, [r3, r2]
 8019226:	b29b      	uxth	r3, r3
 8019228:	001a      	movs	r2, r3
 801922a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801922c:	781b      	ldrb	r3, [r3, #0]
 801922e:	00db      	lsls	r3, r3, #3
 8019230:	18d2      	adds	r2, r2, r3
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	18d3      	adds	r3, r2, r3
 8019238:	4aaf      	ldr	r2, [pc, #700]	@ (80194f8 <PCD_EP_ISR_Handler+0x340>)
 801923a:	4694      	mov	ip, r2
 801923c:	4463      	add	r3, ip
 801923e:	881b      	ldrh	r3, [r3, #0]
 8019240:	059b      	lsls	r3, r3, #22
 8019242:	0d9a      	lsrs	r2, r3, #22
 8019244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019246:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8019248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801924a:	695a      	ldr	r2, [r3, #20]
 801924c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801924e:	69db      	ldr	r3, [r3, #28]
 8019250:	18d2      	adds	r2, r2, r3
 8019252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019254:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	2100      	movs	r1, #0
 801925a:	0018      	movs	r0, r3
 801925c:	f009 fae8 	bl	8022830 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	2224      	movs	r2, #36	@ 0x24
 8019264:	5c9b      	ldrb	r3, [r3, r2]
 8019266:	b2db      	uxtb	r3, r3
 8019268:	2b00      	cmp	r3, #0
 801926a:	d101      	bne.n	8019270 <PCD_EP_ISR_Handler+0xb8>
 801926c:	f000 fb96 	bl	801999c <PCD_EP_ISR_Handler+0x7e4>
 8019270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019272:	699b      	ldr	r3, [r3, #24]
 8019274:	2b00      	cmp	r3, #0
 8019276:	d001      	beq.n	801927c <PCD_EP_ISR_Handler+0xc4>
 8019278:	f000 fb90 	bl	801999c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	2224      	movs	r2, #36	@ 0x24
 8019280:	5c9b      	ldrb	r3, [r3, r2]
 8019282:	b2db      	uxtb	r3, r3
 8019284:	2280      	movs	r2, #128	@ 0x80
 8019286:	4252      	negs	r2, r2
 8019288:	4313      	orrs	r3, r2
 801928a:	b2da      	uxtb	r2, r3
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	0011      	movs	r1, r2
 8019292:	224c      	movs	r2, #76	@ 0x4c
 8019294:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	2224      	movs	r2, #36	@ 0x24
 801929a:	2100      	movs	r1, #0
 801929c:	5499      	strb	r1, [r3, r2]
 801929e:	f000 fb7d 	bl	801999c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	3369      	adds	r3, #105	@ 0x69
 80192a6:	33ff      	adds	r3, #255	@ 0xff
 80192a8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	681a      	ldr	r2, [r3, #0]
 80192ae:	214a      	movs	r1, #74	@ 0x4a
 80192b0:	187b      	adds	r3, r7, r1
 80192b2:	8812      	ldrh	r2, [r2, #0]
 80192b4:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80192b6:	187b      	adds	r3, r7, r1
 80192b8:	881a      	ldrh	r2, [r3, #0]
 80192ba:	2380      	movs	r3, #128	@ 0x80
 80192bc:	011b      	lsls	r3, r3, #4
 80192be:	4013      	ands	r3, r2
 80192c0:	d037      	beq.n	8019332 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	2250      	movs	r2, #80	@ 0x50
 80192c8:	5a9b      	ldrh	r3, [r3, r2]
 80192ca:	b29b      	uxth	r3, r3
 80192cc:	001a      	movs	r2, r3
 80192ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80192d0:	781b      	ldrb	r3, [r3, #0]
 80192d2:	00db      	lsls	r3, r3, #3
 80192d4:	18d2      	adds	r2, r2, r3
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	18d3      	adds	r3, r2, r3
 80192dc:	4a87      	ldr	r2, [pc, #540]	@ (80194fc <PCD_EP_ISR_Handler+0x344>)
 80192de:	4694      	mov	ip, r2
 80192e0:	4463      	add	r3, ip
 80192e2:	881b      	ldrh	r3, [r3, #0]
 80192e4:	059b      	lsls	r3, r3, #22
 80192e6:	0d9a      	lsrs	r2, r3, #22
 80192e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80192ea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	6818      	ldr	r0, [r3, #0]
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	22ac      	movs	r2, #172	@ 0xac
 80192f4:	0092      	lsls	r2, r2, #2
 80192f6:	1899      	adds	r1, r3, r2
 80192f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80192fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80192fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80192fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019300:	b29b      	uxth	r3, r3
 8019302:	f007 fa59 	bl	80207b8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	881b      	ldrh	r3, [r3, #0]
 801930c:	b29a      	uxth	r2, r3
 801930e:	2010      	movs	r0, #16
 8019310:	183b      	adds	r3, r7, r0
 8019312:	497b      	ldr	r1, [pc, #492]	@ (8019500 <PCD_EP_ISR_Handler+0x348>)
 8019314:	400a      	ands	r2, r1
 8019316:	801a      	strh	r2, [r3, #0]
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	183a      	adds	r2, r7, r0
 801931e:	8812      	ldrh	r2, [r2, #0]
 8019320:	2180      	movs	r1, #128	@ 0x80
 8019322:	430a      	orrs	r2, r1
 8019324:	b292      	uxth	r2, r2
 8019326:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	0018      	movs	r0, r3
 801932c:	f009 fa4a 	bl	80227c4 <HAL_PCD_SetupStageCallback>
 8019330:	e334      	b.n	801999c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8019332:	234a      	movs	r3, #74	@ 0x4a
 8019334:	18fb      	adds	r3, r7, r3
 8019336:	2200      	movs	r2, #0
 8019338:	5e9b      	ldrsh	r3, [r3, r2]
 801933a:	2b00      	cmp	r3, #0
 801933c:	db00      	blt.n	8019340 <PCD_EP_ISR_Handler+0x188>
 801933e:	e32d      	b.n	801999c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	881b      	ldrh	r3, [r3, #0]
 8019346:	b29a      	uxth	r2, r3
 8019348:	201e      	movs	r0, #30
 801934a:	183b      	adds	r3, r7, r0
 801934c:	496c      	ldr	r1, [pc, #432]	@ (8019500 <PCD_EP_ISR_Handler+0x348>)
 801934e:	400a      	ands	r2, r1
 8019350:	801a      	strh	r2, [r3, #0]
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	183a      	adds	r2, r7, r0
 8019358:	8812      	ldrh	r2, [r2, #0]
 801935a:	2180      	movs	r1, #128	@ 0x80
 801935c:	430a      	orrs	r2, r1
 801935e:	b292      	uxth	r2, r2
 8019360:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	2250      	movs	r2, #80	@ 0x50
 8019368:	5a9b      	ldrh	r3, [r3, r2]
 801936a:	b29b      	uxth	r3, r3
 801936c:	001a      	movs	r2, r3
 801936e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019370:	781b      	ldrb	r3, [r3, #0]
 8019372:	00db      	lsls	r3, r3, #3
 8019374:	18d2      	adds	r2, r2, r3
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	18d3      	adds	r3, r2, r3
 801937c:	4a5f      	ldr	r2, [pc, #380]	@ (80194fc <PCD_EP_ISR_Handler+0x344>)
 801937e:	4694      	mov	ip, r2
 8019380:	4463      	add	r3, ip
 8019382:	881b      	ldrh	r3, [r3, #0]
 8019384:	059b      	lsls	r3, r3, #22
 8019386:	0d9a      	lsrs	r2, r3, #22
 8019388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801938a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 801938c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801938e:	69db      	ldr	r3, [r3, #28]
 8019390:	2b00      	cmp	r3, #0
 8019392:	d01a      	beq.n	80193ca <PCD_EP_ISR_Handler+0x212>
 8019394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019396:	695b      	ldr	r3, [r3, #20]
 8019398:	2b00      	cmp	r3, #0
 801939a:	d016      	beq.n	80193ca <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	6818      	ldr	r0, [r3, #0]
 80193a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193a2:	6959      	ldr	r1, [r3, #20]
 80193a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193a6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80193a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193aa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80193ac:	b29b      	uxth	r3, r3
 80193ae:	f007 fa03 	bl	80207b8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80193b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193b4:	695a      	ldr	r2, [r3, #20]
 80193b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193b8:	69db      	ldr	r3, [r3, #28]
 80193ba:	18d2      	adds	r2, r2, r3
 80193bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193be:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	2100      	movs	r1, #0
 80193c4:	0018      	movs	r0, r3
 80193c6:	f009 fa12 	bl	80227ee <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	681a      	ldr	r2, [r3, #0]
 80193ce:	214a      	movs	r1, #74	@ 0x4a
 80193d0:	187b      	adds	r3, r7, r1
 80193d2:	8812      	ldrh	r2, [r2, #0]
 80193d4:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80193d6:	187b      	adds	r3, r7, r1
 80193d8:	881a      	ldrh	r2, [r3, #0]
 80193da:	2380      	movs	r3, #128	@ 0x80
 80193dc:	011b      	lsls	r3, r3, #4
 80193de:	4013      	ands	r3, r2
 80193e0:	d000      	beq.n	80193e4 <PCD_EP_ISR_Handler+0x22c>
 80193e2:	e2db      	b.n	801999c <PCD_EP_ISR_Handler+0x7e4>
 80193e4:	187b      	adds	r3, r7, r1
 80193e6:	881a      	ldrh	r2, [r3, #0]
 80193e8:	23c0      	movs	r3, #192	@ 0xc0
 80193ea:	019b      	lsls	r3, r3, #6
 80193ec:	401a      	ands	r2, r3
 80193ee:	23c0      	movs	r3, #192	@ 0xc0
 80193f0:	019b      	lsls	r3, r3, #6
 80193f2:	429a      	cmp	r2, r3
 80193f4:	d100      	bne.n	80193f8 <PCD_EP_ISR_Handler+0x240>
 80193f6:	e2d1      	b.n	801999c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	61bb      	str	r3, [r7, #24]
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	2250      	movs	r2, #80	@ 0x50
 8019404:	5a9b      	ldrh	r3, [r3, r2]
 8019406:	b29b      	uxth	r3, r3
 8019408:	001a      	movs	r2, r3
 801940a:	69bb      	ldr	r3, [r7, #24]
 801940c:	189b      	adds	r3, r3, r2
 801940e:	61bb      	str	r3, [r7, #24]
 8019410:	69bb      	ldr	r3, [r7, #24]
 8019412:	4a3a      	ldr	r2, [pc, #232]	@ (80194fc <PCD_EP_ISR_Handler+0x344>)
 8019414:	4694      	mov	ip, r2
 8019416:	4463      	add	r3, ip
 8019418:	617b      	str	r3, [r7, #20]
 801941a:	697b      	ldr	r3, [r7, #20]
 801941c:	881b      	ldrh	r3, [r3, #0]
 801941e:	b29b      	uxth	r3, r3
 8019420:	059b      	lsls	r3, r3, #22
 8019422:	0d9b      	lsrs	r3, r3, #22
 8019424:	b29a      	uxth	r2, r3
 8019426:	697b      	ldr	r3, [r7, #20]
 8019428:	801a      	strh	r2, [r3, #0]
 801942a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801942c:	691b      	ldr	r3, [r3, #16]
 801942e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019430:	d91a      	bls.n	8019468 <PCD_EP_ISR_Handler+0x2b0>
 8019432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019434:	691b      	ldr	r3, [r3, #16]
 8019436:	095b      	lsrs	r3, r3, #5
 8019438:	647b      	str	r3, [r7, #68]	@ 0x44
 801943a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801943c:	691b      	ldr	r3, [r3, #16]
 801943e:	221f      	movs	r2, #31
 8019440:	4013      	ands	r3, r2
 8019442:	d102      	bne.n	801944a <PCD_EP_ISR_Handler+0x292>
 8019444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019446:	3b01      	subs	r3, #1
 8019448:	647b      	str	r3, [r7, #68]	@ 0x44
 801944a:	697b      	ldr	r3, [r7, #20]
 801944c:	881b      	ldrh	r3, [r3, #0]
 801944e:	b29a      	uxth	r2, r3
 8019450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019452:	b29b      	uxth	r3, r3
 8019454:	029b      	lsls	r3, r3, #10
 8019456:	b29b      	uxth	r3, r3
 8019458:	4313      	orrs	r3, r2
 801945a:	b29b      	uxth	r3, r3
 801945c:	4a25      	ldr	r2, [pc, #148]	@ (80194f4 <PCD_EP_ISR_Handler+0x33c>)
 801945e:	4313      	orrs	r3, r2
 8019460:	b29a      	uxth	r2, r3
 8019462:	697b      	ldr	r3, [r7, #20]
 8019464:	801a      	strh	r2, [r3, #0]
 8019466:	e023      	b.n	80194b0 <PCD_EP_ISR_Handler+0x2f8>
 8019468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801946a:	691b      	ldr	r3, [r3, #16]
 801946c:	2b00      	cmp	r3, #0
 801946e:	d108      	bne.n	8019482 <PCD_EP_ISR_Handler+0x2ca>
 8019470:	697b      	ldr	r3, [r7, #20]
 8019472:	881b      	ldrh	r3, [r3, #0]
 8019474:	b29b      	uxth	r3, r3
 8019476:	4a1f      	ldr	r2, [pc, #124]	@ (80194f4 <PCD_EP_ISR_Handler+0x33c>)
 8019478:	4313      	orrs	r3, r2
 801947a:	b29a      	uxth	r2, r3
 801947c:	697b      	ldr	r3, [r7, #20]
 801947e:	801a      	strh	r2, [r3, #0]
 8019480:	e016      	b.n	80194b0 <PCD_EP_ISR_Handler+0x2f8>
 8019482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019484:	691b      	ldr	r3, [r3, #16]
 8019486:	085b      	lsrs	r3, r3, #1
 8019488:	647b      	str	r3, [r7, #68]	@ 0x44
 801948a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801948c:	691b      	ldr	r3, [r3, #16]
 801948e:	2201      	movs	r2, #1
 8019490:	4013      	ands	r3, r2
 8019492:	d002      	beq.n	801949a <PCD_EP_ISR_Handler+0x2e2>
 8019494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019496:	3301      	adds	r3, #1
 8019498:	647b      	str	r3, [r7, #68]	@ 0x44
 801949a:	697b      	ldr	r3, [r7, #20]
 801949c:	881b      	ldrh	r3, [r3, #0]
 801949e:	b29a      	uxth	r2, r3
 80194a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80194a2:	b29b      	uxth	r3, r3
 80194a4:	029b      	lsls	r3, r3, #10
 80194a6:	b29b      	uxth	r3, r3
 80194a8:	4313      	orrs	r3, r2
 80194aa:	b29a      	uxth	r2, r3
 80194ac:	697b      	ldr	r3, [r7, #20]
 80194ae:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	881b      	ldrh	r3, [r3, #0]
 80194b6:	b29a      	uxth	r2, r3
 80194b8:	2012      	movs	r0, #18
 80194ba:	183b      	adds	r3, r7, r0
 80194bc:	4911      	ldr	r1, [pc, #68]	@ (8019504 <PCD_EP_ISR_Handler+0x34c>)
 80194be:	400a      	ands	r2, r1
 80194c0:	801a      	strh	r2, [r3, #0]
 80194c2:	183b      	adds	r3, r7, r0
 80194c4:	183a      	adds	r2, r7, r0
 80194c6:	8812      	ldrh	r2, [r2, #0]
 80194c8:	2180      	movs	r1, #128	@ 0x80
 80194ca:	0149      	lsls	r1, r1, #5
 80194cc:	404a      	eors	r2, r1
 80194ce:	801a      	strh	r2, [r3, #0]
 80194d0:	183b      	adds	r3, r7, r0
 80194d2:	183a      	adds	r2, r7, r0
 80194d4:	8812      	ldrh	r2, [r2, #0]
 80194d6:	2180      	movs	r1, #128	@ 0x80
 80194d8:	0189      	lsls	r1, r1, #6
 80194da:	404a      	eors	r2, r1
 80194dc:	801a      	strh	r2, [r3, #0]
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	183a      	adds	r2, r7, r0
 80194e4:	8812      	ldrh	r2, [r2, #0]
 80194e6:	4908      	ldr	r1, [pc, #32]	@ (8019508 <PCD_EP_ISR_Handler+0x350>)
 80194e8:	430a      	orrs	r2, r1
 80194ea:	b292      	uxth	r2, r2
 80194ec:	801a      	strh	r2, [r3, #0]
 80194ee:	e255      	b.n	801999c <PCD_EP_ISR_Handler+0x7e4>
 80194f0:	ffff8f0f 	.word	0xffff8f0f
 80194f4:	ffff8000 	.word	0xffff8000
 80194f8:	00000402 	.word	0x00000402
 80194fc:	00000406 	.word	0x00000406
 8019500:	00000f8f 	.word	0x00000f8f
 8019504:	ffffbf8f 	.word	0xffffbf8f
 8019508:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	001a      	movs	r2, r3
 8019512:	204d      	movs	r0, #77	@ 0x4d
 8019514:	183b      	adds	r3, r7, r0
 8019516:	781b      	ldrb	r3, [r3, #0]
 8019518:	009b      	lsls	r3, r3, #2
 801951a:	18d2      	adds	r2, r2, r3
 801951c:	214a      	movs	r1, #74	@ 0x4a
 801951e:	187b      	adds	r3, r7, r1
 8019520:	8812      	ldrh	r2, [r2, #0]
 8019522:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8019524:	187b      	adds	r3, r7, r1
 8019526:	2200      	movs	r2, #0
 8019528:	5e9b      	ldrsh	r3, [r3, r2]
 801952a:	2b00      	cmp	r3, #0
 801952c:	db00      	blt.n	8019530 <PCD_EP_ISR_Handler+0x378>
 801952e:	e0fa      	b.n	8019726 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	001a      	movs	r2, r3
 8019536:	183b      	adds	r3, r7, r0
 8019538:	781b      	ldrb	r3, [r3, #0]
 801953a:	009b      	lsls	r3, r3, #2
 801953c:	18d3      	adds	r3, r2, r3
 801953e:	881b      	ldrh	r3, [r3, #0]
 8019540:	b29a      	uxth	r2, r3
 8019542:	2448      	movs	r4, #72	@ 0x48
 8019544:	193b      	adds	r3, r7, r4
 8019546:	49d1      	ldr	r1, [pc, #836]	@ (801988c <PCD_EP_ISR_Handler+0x6d4>)
 8019548:	400a      	ands	r2, r1
 801954a:	801a      	strh	r2, [r3, #0]
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	001a      	movs	r2, r3
 8019552:	183b      	adds	r3, r7, r0
 8019554:	781b      	ldrb	r3, [r3, #0]
 8019556:	009b      	lsls	r3, r3, #2
 8019558:	18d3      	adds	r3, r2, r3
 801955a:	193a      	adds	r2, r7, r4
 801955c:	8812      	ldrh	r2, [r2, #0]
 801955e:	2180      	movs	r1, #128	@ 0x80
 8019560:	430a      	orrs	r2, r1
 8019562:	b292      	uxth	r2, r2
 8019564:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8019566:	183b      	adds	r3, r7, r0
 8019568:	781a      	ldrb	r2, [r3, #0]
 801956a:	0013      	movs	r3, r2
 801956c:	009b      	lsls	r3, r3, #2
 801956e:	189b      	adds	r3, r3, r2
 8019570:	00db      	lsls	r3, r3, #3
 8019572:	3369      	adds	r3, #105	@ 0x69
 8019574:	33ff      	adds	r3, #255	@ 0xff
 8019576:	687a      	ldr	r2, [r7, #4]
 8019578:	18d3      	adds	r3, r2, r3
 801957a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801957c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801957e:	7b1b      	ldrb	r3, [r3, #12]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d125      	bne.n	80195d0 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	2250      	movs	r2, #80	@ 0x50
 801958a:	5a9b      	ldrh	r3, [r3, r2]
 801958c:	b29b      	uxth	r3, r3
 801958e:	001a      	movs	r2, r3
 8019590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019592:	781b      	ldrb	r3, [r3, #0]
 8019594:	00db      	lsls	r3, r3, #3
 8019596:	18d2      	adds	r2, r2, r3
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	18d3      	adds	r3, r2, r3
 801959e:	4abc      	ldr	r2, [pc, #752]	@ (8019890 <PCD_EP_ISR_Handler+0x6d8>)
 80195a0:	4694      	mov	ip, r2
 80195a2:	4463      	add	r3, ip
 80195a4:	881a      	ldrh	r2, [r3, #0]
 80195a6:	2450      	movs	r4, #80	@ 0x50
 80195a8:	193b      	adds	r3, r7, r4
 80195aa:	0592      	lsls	r2, r2, #22
 80195ac:	0d92      	lsrs	r2, r2, #22
 80195ae:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80195b0:	193b      	adds	r3, r7, r4
 80195b2:	881b      	ldrh	r3, [r3, #0]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d100      	bne.n	80195ba <PCD_EP_ISR_Handler+0x402>
 80195b8:	e08d      	b.n	80196d6 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	6818      	ldr	r0, [r3, #0]
 80195be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195c0:	6959      	ldr	r1, [r3, #20]
 80195c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195c4:	88da      	ldrh	r2, [r3, #6]
 80195c6:	193b      	adds	r3, r7, r4
 80195c8:	881b      	ldrh	r3, [r3, #0]
 80195ca:	f007 f8f5 	bl	80207b8 <USB_ReadPMA>
 80195ce:	e082      	b.n	80196d6 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80195d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195d2:	78db      	ldrb	r3, [r3, #3]
 80195d4:	2b02      	cmp	r3, #2
 80195d6:	d10c      	bne.n	80195f2 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80195d8:	2350      	movs	r3, #80	@ 0x50
 80195da:	18fc      	adds	r4, r7, r3
 80195dc:	234a      	movs	r3, #74	@ 0x4a
 80195de:	18fb      	adds	r3, r7, r3
 80195e0:	881a      	ldrh	r2, [r3, #0]
 80195e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	0018      	movs	r0, r3
 80195e8:	f000 f9ec 	bl	80199c4 <HAL_PCD_EP_DB_Receive>
 80195ec:	0003      	movs	r3, r0
 80195ee:	8023      	strh	r3, [r4, #0]
 80195f0:	e071      	b.n	80196d6 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	001a      	movs	r2, r3
 80195f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195fa:	781b      	ldrb	r3, [r3, #0]
 80195fc:	009b      	lsls	r3, r3, #2
 80195fe:	18d3      	adds	r3, r2, r3
 8019600:	881b      	ldrh	r3, [r3, #0]
 8019602:	b29a      	uxth	r2, r3
 8019604:	2052      	movs	r0, #82	@ 0x52
 8019606:	183b      	adds	r3, r7, r0
 8019608:	49a2      	ldr	r1, [pc, #648]	@ (8019894 <PCD_EP_ISR_Handler+0x6dc>)
 801960a:	400a      	ands	r2, r1
 801960c:	801a      	strh	r2, [r3, #0]
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	001a      	movs	r2, r3
 8019614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019616:	781b      	ldrb	r3, [r3, #0]
 8019618:	009b      	lsls	r3, r3, #2
 801961a:	18d3      	adds	r3, r2, r3
 801961c:	183a      	adds	r2, r7, r0
 801961e:	8812      	ldrh	r2, [r2, #0]
 8019620:	499d      	ldr	r1, [pc, #628]	@ (8019898 <PCD_EP_ISR_Handler+0x6e0>)
 8019622:	430a      	orrs	r2, r1
 8019624:	b292      	uxth	r2, r2
 8019626:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	001a      	movs	r2, r3
 801962e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019630:	781b      	ldrb	r3, [r3, #0]
 8019632:	009b      	lsls	r3, r3, #2
 8019634:	18d3      	adds	r3, r2, r3
 8019636:	881b      	ldrh	r3, [r3, #0]
 8019638:	b29b      	uxth	r3, r3
 801963a:	001a      	movs	r2, r3
 801963c:	2380      	movs	r3, #128	@ 0x80
 801963e:	01db      	lsls	r3, r3, #7
 8019640:	4013      	ands	r3, r2
 8019642:	d024      	beq.n	801968e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	2250      	movs	r2, #80	@ 0x50
 801964a:	5a9b      	ldrh	r3, [r3, r2]
 801964c:	b29b      	uxth	r3, r3
 801964e:	001a      	movs	r2, r3
 8019650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019652:	781b      	ldrb	r3, [r3, #0]
 8019654:	00db      	lsls	r3, r3, #3
 8019656:	18d2      	adds	r2, r2, r3
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	18d3      	adds	r3, r2, r3
 801965e:	4a8f      	ldr	r2, [pc, #572]	@ (801989c <PCD_EP_ISR_Handler+0x6e4>)
 8019660:	4694      	mov	ip, r2
 8019662:	4463      	add	r3, ip
 8019664:	881a      	ldrh	r2, [r3, #0]
 8019666:	2450      	movs	r4, #80	@ 0x50
 8019668:	193b      	adds	r3, r7, r4
 801966a:	0592      	lsls	r2, r2, #22
 801966c:	0d92      	lsrs	r2, r2, #22
 801966e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8019670:	193b      	adds	r3, r7, r4
 8019672:	881b      	ldrh	r3, [r3, #0]
 8019674:	2b00      	cmp	r3, #0
 8019676:	d02e      	beq.n	80196d6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	6818      	ldr	r0, [r3, #0]
 801967c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801967e:	6959      	ldr	r1, [r3, #20]
 8019680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019682:	891a      	ldrh	r2, [r3, #8]
 8019684:	193b      	adds	r3, r7, r4
 8019686:	881b      	ldrh	r3, [r3, #0]
 8019688:	f007 f896 	bl	80207b8 <USB_ReadPMA>
 801968c:	e023      	b.n	80196d6 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	2250      	movs	r2, #80	@ 0x50
 8019694:	5a9b      	ldrh	r3, [r3, r2]
 8019696:	b29b      	uxth	r3, r3
 8019698:	001a      	movs	r2, r3
 801969a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801969c:	781b      	ldrb	r3, [r3, #0]
 801969e:	00db      	lsls	r3, r3, #3
 80196a0:	18d2      	adds	r2, r2, r3
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	18d3      	adds	r3, r2, r3
 80196a8:	4a79      	ldr	r2, [pc, #484]	@ (8019890 <PCD_EP_ISR_Handler+0x6d8>)
 80196aa:	4694      	mov	ip, r2
 80196ac:	4463      	add	r3, ip
 80196ae:	881a      	ldrh	r2, [r3, #0]
 80196b0:	2450      	movs	r4, #80	@ 0x50
 80196b2:	193b      	adds	r3, r7, r4
 80196b4:	0592      	lsls	r2, r2, #22
 80196b6:	0d92      	lsrs	r2, r2, #22
 80196b8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80196ba:	193b      	adds	r3, r7, r4
 80196bc:	881b      	ldrh	r3, [r3, #0]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d009      	beq.n	80196d6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	6818      	ldr	r0, [r3, #0]
 80196c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196c8:	6959      	ldr	r1, [r3, #20]
 80196ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196cc:	895a      	ldrh	r2, [r3, #10]
 80196ce:	193b      	adds	r3, r7, r4
 80196d0:	881b      	ldrh	r3, [r3, #0]
 80196d2:	f007 f871 	bl	80207b8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80196d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196d8:	69da      	ldr	r2, [r3, #28]
 80196da:	2150      	movs	r1, #80	@ 0x50
 80196dc:	187b      	adds	r3, r7, r1
 80196de:	881b      	ldrh	r3, [r3, #0]
 80196e0:	18d2      	adds	r2, r2, r3
 80196e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80196e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196e8:	695a      	ldr	r2, [r3, #20]
 80196ea:	187b      	adds	r3, r7, r1
 80196ec:	881b      	ldrh	r3, [r3, #0]
 80196ee:	18d2      	adds	r2, r2, r3
 80196f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80196f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196f6:	699b      	ldr	r3, [r3, #24]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d005      	beq.n	8019708 <PCD_EP_ISR_Handler+0x550>
 80196fc:	187b      	adds	r3, r7, r1
 80196fe:	881a      	ldrh	r2, [r3, #0]
 8019700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019702:	691b      	ldr	r3, [r3, #16]
 8019704:	429a      	cmp	r2, r3
 8019706:	d207      	bcs.n	8019718 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8019708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801970a:	781a      	ldrb	r2, [r3, #0]
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	0011      	movs	r1, r2
 8019710:	0018      	movs	r0, r3
 8019712:	f009 f86c 	bl	80227ee <HAL_PCD_DataOutStageCallback>
 8019716:	e006      	b.n	8019726 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801971e:	0011      	movs	r1, r2
 8019720:	0018      	movs	r0, r3
 8019722:	f005 fd8d 	bl	801f240 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8019726:	244a      	movs	r4, #74	@ 0x4a
 8019728:	193b      	adds	r3, r7, r4
 801972a:	881b      	ldrh	r3, [r3, #0]
 801972c:	2280      	movs	r2, #128	@ 0x80
 801972e:	4013      	ands	r3, r2
 8019730:	d100      	bne.n	8019734 <PCD_EP_ISR_Handler+0x57c>
 8019732:	e133      	b.n	801999c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8019734:	204d      	movs	r0, #77	@ 0x4d
 8019736:	183b      	adds	r3, r7, r0
 8019738:	781b      	ldrb	r3, [r3, #0]
 801973a:	1c5a      	adds	r2, r3, #1
 801973c:	0013      	movs	r3, r2
 801973e:	009b      	lsls	r3, r3, #2
 8019740:	189b      	adds	r3, r3, r2
 8019742:	00db      	lsls	r3, r3, #3
 8019744:	687a      	ldr	r2, [r7, #4]
 8019746:	18d3      	adds	r3, r2, r3
 8019748:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	001a      	movs	r2, r3
 8019750:	183b      	adds	r3, r7, r0
 8019752:	781b      	ldrb	r3, [r3, #0]
 8019754:	009b      	lsls	r3, r3, #2
 8019756:	18d3      	adds	r3, r2, r3
 8019758:	881b      	ldrh	r3, [r3, #0]
 801975a:	b29a      	uxth	r2, r3
 801975c:	2542      	movs	r5, #66	@ 0x42
 801975e:	197b      	adds	r3, r7, r5
 8019760:	494f      	ldr	r1, [pc, #316]	@ (80198a0 <PCD_EP_ISR_Handler+0x6e8>)
 8019762:	400a      	ands	r2, r1
 8019764:	801a      	strh	r2, [r3, #0]
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	001a      	movs	r2, r3
 801976c:	183b      	adds	r3, r7, r0
 801976e:	781b      	ldrb	r3, [r3, #0]
 8019770:	009b      	lsls	r3, r3, #2
 8019772:	18d3      	adds	r3, r2, r3
 8019774:	197a      	adds	r2, r7, r5
 8019776:	8812      	ldrh	r2, [r2, #0]
 8019778:	494a      	ldr	r1, [pc, #296]	@ (80198a4 <PCD_EP_ISR_Handler+0x6ec>)
 801977a:	430a      	orrs	r2, r1
 801977c:	b292      	uxth	r2, r2
 801977e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8019780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019782:	78db      	ldrb	r3, [r3, #3]
 8019784:	2b01      	cmp	r3, #1
 8019786:	d000      	beq.n	801978a <PCD_EP_ISR_Handler+0x5d2>
 8019788:	e0af      	b.n	80198ea <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801978a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801978c:	2200      	movs	r2, #0
 801978e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8019790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019792:	7b1b      	ldrb	r3, [r3, #12]
 8019794:	2b00      	cmp	r3, #0
 8019796:	d100      	bne.n	801979a <PCD_EP_ISR_Handler+0x5e2>
 8019798:	e09f      	b.n	80198da <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801979a:	193b      	adds	r3, r7, r4
 801979c:	881b      	ldrh	r3, [r3, #0]
 801979e:	2240      	movs	r2, #64	@ 0x40
 80197a0:	4013      	ands	r3, r2
 80197a2:	d046      	beq.n	8019832 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80197a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197a6:	785b      	ldrb	r3, [r3, #1]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d125      	bne.n	80197f8 <PCD_EP_ISR_Handler+0x640>
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	2250      	movs	r2, #80	@ 0x50
 80197b8:	5a9b      	ldrh	r3, [r3, r2]
 80197ba:	b29b      	uxth	r3, r3
 80197bc:	001a      	movs	r2, r3
 80197be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197c0:	189b      	adds	r3, r3, r2
 80197c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80197c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197c6:	781b      	ldrb	r3, [r3, #0]
 80197c8:	00da      	lsls	r2, r3, #3
 80197ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197cc:	18d3      	adds	r3, r2, r3
 80197ce:	4a33      	ldr	r2, [pc, #204]	@ (801989c <PCD_EP_ISR_Handler+0x6e4>)
 80197d0:	4694      	mov	ip, r2
 80197d2:	4463      	add	r3, ip
 80197d4:	623b      	str	r3, [r7, #32]
 80197d6:	6a3b      	ldr	r3, [r7, #32]
 80197d8:	881b      	ldrh	r3, [r3, #0]
 80197da:	b29b      	uxth	r3, r3
 80197dc:	059b      	lsls	r3, r3, #22
 80197de:	0d9b      	lsrs	r3, r3, #22
 80197e0:	b29a      	uxth	r2, r3
 80197e2:	6a3b      	ldr	r3, [r7, #32]
 80197e4:	801a      	strh	r2, [r3, #0]
 80197e6:	6a3b      	ldr	r3, [r7, #32]
 80197e8:	881b      	ldrh	r3, [r3, #0]
 80197ea:	b29b      	uxth	r3, r3
 80197ec:	4a2d      	ldr	r2, [pc, #180]	@ (80198a4 <PCD_EP_ISR_Handler+0x6ec>)
 80197ee:	4313      	orrs	r3, r2
 80197f0:	b29a      	uxth	r2, r3
 80197f2:	6a3b      	ldr	r3, [r7, #32]
 80197f4:	801a      	strh	r2, [r3, #0]
 80197f6:	e070      	b.n	80198da <PCD_EP_ISR_Handler+0x722>
 80197f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197fa:	785b      	ldrb	r3, [r3, #1]
 80197fc:	2b01      	cmp	r3, #1
 80197fe:	d16c      	bne.n	80198da <PCD_EP_ISR_Handler+0x722>
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	2250      	movs	r2, #80	@ 0x50
 801980c:	5a9b      	ldrh	r3, [r3, r2]
 801980e:	b29b      	uxth	r3, r3
 8019810:	001a      	movs	r2, r3
 8019812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019814:	189b      	adds	r3, r3, r2
 8019816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801981a:	781b      	ldrb	r3, [r3, #0]
 801981c:	00da      	lsls	r2, r3, #3
 801981e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019820:	18d3      	adds	r3, r2, r3
 8019822:	4a1e      	ldr	r2, [pc, #120]	@ (801989c <PCD_EP_ISR_Handler+0x6e4>)
 8019824:	4694      	mov	ip, r2
 8019826:	4463      	add	r3, ip
 8019828:	62bb      	str	r3, [r7, #40]	@ 0x28
 801982a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801982c:	2200      	movs	r2, #0
 801982e:	801a      	strh	r2, [r3, #0]
 8019830:	e053      	b.n	80198da <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801983a:	785b      	ldrb	r3, [r3, #1]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d133      	bne.n	80198a8 <PCD_EP_ISR_Handler+0x6f0>
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	637b      	str	r3, [r7, #52]	@ 0x34
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	2250      	movs	r2, #80	@ 0x50
 801984c:	5a9b      	ldrh	r3, [r3, r2]
 801984e:	b29b      	uxth	r3, r3
 8019850:	001a      	movs	r2, r3
 8019852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019854:	189b      	adds	r3, r3, r2
 8019856:	637b      	str	r3, [r7, #52]	@ 0x34
 8019858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801985a:	781b      	ldrb	r3, [r3, #0]
 801985c:	00da      	lsls	r2, r3, #3
 801985e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019860:	18d3      	adds	r3, r2, r3
 8019862:	4a0b      	ldr	r2, [pc, #44]	@ (8019890 <PCD_EP_ISR_Handler+0x6d8>)
 8019864:	4694      	mov	ip, r2
 8019866:	4463      	add	r3, ip
 8019868:	633b      	str	r3, [r7, #48]	@ 0x30
 801986a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801986c:	881b      	ldrh	r3, [r3, #0]
 801986e:	b29b      	uxth	r3, r3
 8019870:	059b      	lsls	r3, r3, #22
 8019872:	0d9b      	lsrs	r3, r3, #22
 8019874:	b29a      	uxth	r2, r3
 8019876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019878:	801a      	strh	r2, [r3, #0]
 801987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801987c:	881b      	ldrh	r3, [r3, #0]
 801987e:	b29b      	uxth	r3, r3
 8019880:	4a08      	ldr	r2, [pc, #32]	@ (80198a4 <PCD_EP_ISR_Handler+0x6ec>)
 8019882:	4313      	orrs	r3, r2
 8019884:	b29a      	uxth	r2, r3
 8019886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019888:	801a      	strh	r2, [r3, #0]
 801988a:	e026      	b.n	80198da <PCD_EP_ISR_Handler+0x722>
 801988c:	00000f8f 	.word	0x00000f8f
 8019890:	00000406 	.word	0x00000406
 8019894:	ffff8f8f 	.word	0xffff8f8f
 8019898:	ffff80c0 	.word	0xffff80c0
 801989c:	00000402 	.word	0x00000402
 80198a0:	ffff8f0f 	.word	0xffff8f0f
 80198a4:	ffff8000 	.word	0xffff8000
 80198a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80198aa:	785b      	ldrb	r3, [r3, #1]
 80198ac:	2b01      	cmp	r3, #1
 80198ae:	d114      	bne.n	80198da <PCD_EP_ISR_Handler+0x722>
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	2250      	movs	r2, #80	@ 0x50
 80198b6:	5a9b      	ldrh	r3, [r3, r2]
 80198b8:	b29b      	uxth	r3, r3
 80198ba:	001a      	movs	r2, r3
 80198bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80198be:	189b      	adds	r3, r3, r2
 80198c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80198c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80198c4:	781b      	ldrb	r3, [r3, #0]
 80198c6:	00da      	lsls	r2, r3, #3
 80198c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80198ca:	18d3      	adds	r3, r2, r3
 80198cc:	4a3b      	ldr	r2, [pc, #236]	@ (80199bc <PCD_EP_ISR_Handler+0x804>)
 80198ce:	4694      	mov	ip, r2
 80198d0:	4463      	add	r3, ip
 80198d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80198d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198d6:	2200      	movs	r2, #0
 80198d8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80198da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80198dc:	781a      	ldrb	r2, [r3, #0]
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	0011      	movs	r1, r2
 80198e2:	0018      	movs	r0, r3
 80198e4:	f008 ffa4 	bl	8022830 <HAL_PCD_DataInStageCallback>
 80198e8:	e058      	b.n	801999c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80198ea:	234a      	movs	r3, #74	@ 0x4a
 80198ec:	18fb      	adds	r3, r7, r3
 80198ee:	881a      	ldrh	r2, [r3, #0]
 80198f0:	2380      	movs	r3, #128	@ 0x80
 80198f2:	005b      	lsls	r3, r3, #1
 80198f4:	4013      	ands	r3, r2
 80198f6:	d149      	bne.n	801998c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	2250      	movs	r2, #80	@ 0x50
 80198fe:	5a9b      	ldrh	r3, [r3, r2]
 8019900:	b29b      	uxth	r3, r3
 8019902:	001a      	movs	r2, r3
 8019904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019906:	781b      	ldrb	r3, [r3, #0]
 8019908:	00db      	lsls	r3, r3, #3
 801990a:	18d2      	adds	r2, r2, r3
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	18d3      	adds	r3, r2, r3
 8019912:	4a2b      	ldr	r2, [pc, #172]	@ (80199c0 <PCD_EP_ISR_Handler+0x808>)
 8019914:	4694      	mov	ip, r2
 8019916:	4463      	add	r3, ip
 8019918:	881a      	ldrh	r2, [r3, #0]
 801991a:	2140      	movs	r1, #64	@ 0x40
 801991c:	187b      	adds	r3, r7, r1
 801991e:	0592      	lsls	r2, r2, #22
 8019920:	0d92      	lsrs	r2, r2, #22
 8019922:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8019924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019926:	699a      	ldr	r2, [r3, #24]
 8019928:	187b      	adds	r3, r7, r1
 801992a:	881b      	ldrh	r3, [r3, #0]
 801992c:	429a      	cmp	r2, r3
 801992e:	d907      	bls.n	8019940 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8019930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019932:	699a      	ldr	r2, [r3, #24]
 8019934:	187b      	adds	r3, r7, r1
 8019936:	881b      	ldrh	r3, [r3, #0]
 8019938:	1ad2      	subs	r2, r2, r3
 801993a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801993c:	619a      	str	r2, [r3, #24]
 801993e:	e002      	b.n	8019946 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8019940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019942:	2200      	movs	r2, #0
 8019944:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8019946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019948:	699b      	ldr	r3, [r3, #24]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d107      	bne.n	801995e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801994e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019950:	781a      	ldrb	r2, [r3, #0]
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	0011      	movs	r1, r2
 8019956:	0018      	movs	r0, r3
 8019958:	f008 ff6a 	bl	8022830 <HAL_PCD_DataInStageCallback>
 801995c:	e01e      	b.n	801999c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801995e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019960:	695a      	ldr	r2, [r3, #20]
 8019962:	2140      	movs	r1, #64	@ 0x40
 8019964:	187b      	adds	r3, r7, r1
 8019966:	881b      	ldrh	r3, [r3, #0]
 8019968:	18d2      	adds	r2, r2, r3
 801996a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801996c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801996e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019970:	69da      	ldr	r2, [r3, #28]
 8019972:	187b      	adds	r3, r7, r1
 8019974:	881b      	ldrh	r3, [r3, #0]
 8019976:	18d2      	adds	r2, r2, r3
 8019978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801997a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019982:	0011      	movs	r1, r2
 8019984:	0018      	movs	r0, r3
 8019986:	f005 fc5b 	bl	801f240 <USB_EPStartXfer>
 801998a:	e007      	b.n	801999c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801998c:	234a      	movs	r3, #74	@ 0x4a
 801998e:	18fb      	adds	r3, r7, r3
 8019990:	881a      	ldrh	r2, [r3, #0]
 8019992:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	0018      	movs	r0, r3
 8019998:	f000 f930 	bl	8019bfc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	2244      	movs	r2, #68	@ 0x44
 80199a2:	5a9b      	ldrh	r3, [r3, r2]
 80199a4:	b29b      	uxth	r3, r3
 80199a6:	b21b      	sxth	r3, r3
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	da01      	bge.n	80199b0 <PCD_EP_ISR_Handler+0x7f8>
 80199ac:	f7ff fc0a 	bl	80191c4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80199b0:	2300      	movs	r3, #0
}
 80199b2:	0018      	movs	r0, r3
 80199b4:	46bd      	mov	sp, r7
 80199b6:	b016      	add	sp, #88	@ 0x58
 80199b8:	bdb0      	pop	{r4, r5, r7, pc}
 80199ba:	46c0      	nop			@ (mov r8, r8)
 80199bc:	00000406 	.word	0x00000406
 80199c0:	00000402 	.word	0x00000402

080199c4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80199c4:	b590      	push	{r4, r7, lr}
 80199c6:	b089      	sub	sp, #36	@ 0x24
 80199c8:	af00      	add	r7, sp, #0
 80199ca:	60f8      	str	r0, [r7, #12]
 80199cc:	60b9      	str	r1, [r7, #8]
 80199ce:	1dbb      	adds	r3, r7, #6
 80199d0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80199d2:	1dbb      	adds	r3, r7, #6
 80199d4:	881a      	ldrh	r2, [r3, #0]
 80199d6:	2380      	movs	r3, #128	@ 0x80
 80199d8:	01db      	lsls	r3, r3, #7
 80199da:	4013      	ands	r3, r2
 80199dc:	d100      	bne.n	80199e0 <HAL_PCD_EP_DB_Receive+0x1c>
 80199de:	e07d      	b.n	8019adc <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	2250      	movs	r2, #80	@ 0x50
 80199e6:	5a9b      	ldrh	r3, [r3, r2]
 80199e8:	b29b      	uxth	r3, r3
 80199ea:	001a      	movs	r2, r3
 80199ec:	68bb      	ldr	r3, [r7, #8]
 80199ee:	781b      	ldrb	r3, [r3, #0]
 80199f0:	00db      	lsls	r3, r3, #3
 80199f2:	18d2      	adds	r2, r2, r3
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	18d3      	adds	r3, r2, r3
 80199fa:	4a7a      	ldr	r2, [pc, #488]	@ (8019be4 <HAL_PCD_EP_DB_Receive+0x220>)
 80199fc:	4694      	mov	ip, r2
 80199fe:	4463      	add	r3, ip
 8019a00:	881a      	ldrh	r2, [r3, #0]
 8019a02:	211a      	movs	r1, #26
 8019a04:	187b      	adds	r3, r7, r1
 8019a06:	0592      	lsls	r2, r2, #22
 8019a08:	0d92      	lsrs	r2, r2, #22
 8019a0a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8019a0c:	68bb      	ldr	r3, [r7, #8]
 8019a0e:	699a      	ldr	r2, [r3, #24]
 8019a10:	187b      	adds	r3, r7, r1
 8019a12:	881b      	ldrh	r3, [r3, #0]
 8019a14:	429a      	cmp	r2, r3
 8019a16:	d307      	bcc.n	8019a28 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8019a18:	68bb      	ldr	r3, [r7, #8]
 8019a1a:	699a      	ldr	r2, [r3, #24]
 8019a1c:	187b      	adds	r3, r7, r1
 8019a1e:	881b      	ldrh	r3, [r3, #0]
 8019a20:	1ad2      	subs	r2, r2, r3
 8019a22:	68bb      	ldr	r3, [r7, #8]
 8019a24:	619a      	str	r2, [r3, #24]
 8019a26:	e002      	b.n	8019a2e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8019a28:	68bb      	ldr	r3, [r7, #8]
 8019a2a:	2200      	movs	r2, #0
 8019a2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8019a2e:	68bb      	ldr	r3, [r7, #8]
 8019a30:	699b      	ldr	r3, [r3, #24]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d121      	bne.n	8019a7a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8019a36:	68fb      	ldr	r3, [r7, #12]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	001a      	movs	r2, r3
 8019a3c:	68bb      	ldr	r3, [r7, #8]
 8019a3e:	781b      	ldrb	r3, [r3, #0]
 8019a40:	009b      	lsls	r3, r3, #2
 8019a42:	18d3      	adds	r3, r2, r3
 8019a44:	881b      	ldrh	r3, [r3, #0]
 8019a46:	b29a      	uxth	r2, r3
 8019a48:	2018      	movs	r0, #24
 8019a4a:	183b      	adds	r3, r7, r0
 8019a4c:	4966      	ldr	r1, [pc, #408]	@ (8019be8 <HAL_PCD_EP_DB_Receive+0x224>)
 8019a4e:	400a      	ands	r2, r1
 8019a50:	801a      	strh	r2, [r3, #0]
 8019a52:	183b      	adds	r3, r7, r0
 8019a54:	183a      	adds	r2, r7, r0
 8019a56:	8812      	ldrh	r2, [r2, #0]
 8019a58:	2180      	movs	r1, #128	@ 0x80
 8019a5a:	0189      	lsls	r1, r1, #6
 8019a5c:	404a      	eors	r2, r1
 8019a5e:	801a      	strh	r2, [r3, #0]
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	001a      	movs	r2, r3
 8019a66:	68bb      	ldr	r3, [r7, #8]
 8019a68:	781b      	ldrb	r3, [r3, #0]
 8019a6a:	009b      	lsls	r3, r3, #2
 8019a6c:	18d3      	adds	r3, r2, r3
 8019a6e:	183a      	adds	r2, r7, r0
 8019a70:	8812      	ldrh	r2, [r2, #0]
 8019a72:	495e      	ldr	r1, [pc, #376]	@ (8019bec <HAL_PCD_EP_DB_Receive+0x228>)
 8019a74:	430a      	orrs	r2, r1
 8019a76:	b292      	uxth	r2, r2
 8019a78:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8019a7a:	1dbb      	adds	r3, r7, #6
 8019a7c:	881b      	ldrh	r3, [r3, #0]
 8019a7e:	2240      	movs	r2, #64	@ 0x40
 8019a80:	4013      	ands	r3, r2
 8019a82:	d01a      	beq.n	8019aba <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	001a      	movs	r2, r3
 8019a8a:	68bb      	ldr	r3, [r7, #8]
 8019a8c:	781b      	ldrb	r3, [r3, #0]
 8019a8e:	009b      	lsls	r3, r3, #2
 8019a90:	18d3      	adds	r3, r2, r3
 8019a92:	881b      	ldrh	r3, [r3, #0]
 8019a94:	b29a      	uxth	r2, r3
 8019a96:	2016      	movs	r0, #22
 8019a98:	183b      	adds	r3, r7, r0
 8019a9a:	4955      	ldr	r1, [pc, #340]	@ (8019bf0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8019a9c:	400a      	ands	r2, r1
 8019a9e:	801a      	strh	r2, [r3, #0]
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	001a      	movs	r2, r3
 8019aa6:	68bb      	ldr	r3, [r7, #8]
 8019aa8:	781b      	ldrb	r3, [r3, #0]
 8019aaa:	009b      	lsls	r3, r3, #2
 8019aac:	18d3      	adds	r3, r2, r3
 8019aae:	183a      	adds	r2, r7, r0
 8019ab0:	8812      	ldrh	r2, [r2, #0]
 8019ab2:	4950      	ldr	r1, [pc, #320]	@ (8019bf4 <HAL_PCD_EP_DB_Receive+0x230>)
 8019ab4:	430a      	orrs	r2, r1
 8019ab6:	b292      	uxth	r2, r2
 8019ab8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8019aba:	241a      	movs	r4, #26
 8019abc:	193b      	adds	r3, r7, r4
 8019abe:	881b      	ldrh	r3, [r3, #0]
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d100      	bne.n	8019ac6 <HAL_PCD_EP_DB_Receive+0x102>
 8019ac4:	e086      	b.n	8019bd4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	6818      	ldr	r0, [r3, #0]
 8019aca:	68bb      	ldr	r3, [r7, #8]
 8019acc:	6959      	ldr	r1, [r3, #20]
 8019ace:	68bb      	ldr	r3, [r7, #8]
 8019ad0:	891a      	ldrh	r2, [r3, #8]
 8019ad2:	193b      	adds	r3, r7, r4
 8019ad4:	881b      	ldrh	r3, [r3, #0]
 8019ad6:	f006 fe6f 	bl	80207b8 <USB_ReadPMA>
 8019ada:	e07b      	b.n	8019bd4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	2250      	movs	r2, #80	@ 0x50
 8019ae2:	5a9b      	ldrh	r3, [r3, r2]
 8019ae4:	b29b      	uxth	r3, r3
 8019ae6:	001a      	movs	r2, r3
 8019ae8:	68bb      	ldr	r3, [r7, #8]
 8019aea:	781b      	ldrb	r3, [r3, #0]
 8019aec:	00db      	lsls	r3, r3, #3
 8019aee:	18d2      	adds	r2, r2, r3
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	18d3      	adds	r3, r2, r3
 8019af6:	4a40      	ldr	r2, [pc, #256]	@ (8019bf8 <HAL_PCD_EP_DB_Receive+0x234>)
 8019af8:	4694      	mov	ip, r2
 8019afa:	4463      	add	r3, ip
 8019afc:	881a      	ldrh	r2, [r3, #0]
 8019afe:	211a      	movs	r1, #26
 8019b00:	187b      	adds	r3, r7, r1
 8019b02:	0592      	lsls	r2, r2, #22
 8019b04:	0d92      	lsrs	r2, r2, #22
 8019b06:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8019b08:	68bb      	ldr	r3, [r7, #8]
 8019b0a:	699a      	ldr	r2, [r3, #24]
 8019b0c:	187b      	adds	r3, r7, r1
 8019b0e:	881b      	ldrh	r3, [r3, #0]
 8019b10:	429a      	cmp	r2, r3
 8019b12:	d307      	bcc.n	8019b24 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8019b14:	68bb      	ldr	r3, [r7, #8]
 8019b16:	699a      	ldr	r2, [r3, #24]
 8019b18:	187b      	adds	r3, r7, r1
 8019b1a:	881b      	ldrh	r3, [r3, #0]
 8019b1c:	1ad2      	subs	r2, r2, r3
 8019b1e:	68bb      	ldr	r3, [r7, #8]
 8019b20:	619a      	str	r2, [r3, #24]
 8019b22:	e002      	b.n	8019b2a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8019b24:	68bb      	ldr	r3, [r7, #8]
 8019b26:	2200      	movs	r2, #0
 8019b28:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8019b2a:	68bb      	ldr	r3, [r7, #8]
 8019b2c:	699b      	ldr	r3, [r3, #24]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d121      	bne.n	8019b76 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	001a      	movs	r2, r3
 8019b38:	68bb      	ldr	r3, [r7, #8]
 8019b3a:	781b      	ldrb	r3, [r3, #0]
 8019b3c:	009b      	lsls	r3, r3, #2
 8019b3e:	18d3      	adds	r3, r2, r3
 8019b40:	881b      	ldrh	r3, [r3, #0]
 8019b42:	b29a      	uxth	r2, r3
 8019b44:	201e      	movs	r0, #30
 8019b46:	183b      	adds	r3, r7, r0
 8019b48:	4927      	ldr	r1, [pc, #156]	@ (8019be8 <HAL_PCD_EP_DB_Receive+0x224>)
 8019b4a:	400a      	ands	r2, r1
 8019b4c:	801a      	strh	r2, [r3, #0]
 8019b4e:	183b      	adds	r3, r7, r0
 8019b50:	183a      	adds	r2, r7, r0
 8019b52:	8812      	ldrh	r2, [r2, #0]
 8019b54:	2180      	movs	r1, #128	@ 0x80
 8019b56:	0189      	lsls	r1, r1, #6
 8019b58:	404a      	eors	r2, r1
 8019b5a:	801a      	strh	r2, [r3, #0]
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	001a      	movs	r2, r3
 8019b62:	68bb      	ldr	r3, [r7, #8]
 8019b64:	781b      	ldrb	r3, [r3, #0]
 8019b66:	009b      	lsls	r3, r3, #2
 8019b68:	18d3      	adds	r3, r2, r3
 8019b6a:	183a      	adds	r2, r7, r0
 8019b6c:	8812      	ldrh	r2, [r2, #0]
 8019b6e:	491f      	ldr	r1, [pc, #124]	@ (8019bec <HAL_PCD_EP_DB_Receive+0x228>)
 8019b70:	430a      	orrs	r2, r1
 8019b72:	b292      	uxth	r2, r2
 8019b74:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8019b76:	1dbb      	adds	r3, r7, #6
 8019b78:	881b      	ldrh	r3, [r3, #0]
 8019b7a:	2240      	movs	r2, #64	@ 0x40
 8019b7c:	4013      	ands	r3, r2
 8019b7e:	d11a      	bne.n	8019bb6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	001a      	movs	r2, r3
 8019b86:	68bb      	ldr	r3, [r7, #8]
 8019b88:	781b      	ldrb	r3, [r3, #0]
 8019b8a:	009b      	lsls	r3, r3, #2
 8019b8c:	18d3      	adds	r3, r2, r3
 8019b8e:	881b      	ldrh	r3, [r3, #0]
 8019b90:	b29a      	uxth	r2, r3
 8019b92:	201c      	movs	r0, #28
 8019b94:	183b      	adds	r3, r7, r0
 8019b96:	4916      	ldr	r1, [pc, #88]	@ (8019bf0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8019b98:	400a      	ands	r2, r1
 8019b9a:	801a      	strh	r2, [r3, #0]
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	001a      	movs	r2, r3
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	781b      	ldrb	r3, [r3, #0]
 8019ba6:	009b      	lsls	r3, r3, #2
 8019ba8:	18d3      	adds	r3, r2, r3
 8019baa:	183a      	adds	r2, r7, r0
 8019bac:	8812      	ldrh	r2, [r2, #0]
 8019bae:	4911      	ldr	r1, [pc, #68]	@ (8019bf4 <HAL_PCD_EP_DB_Receive+0x230>)
 8019bb0:	430a      	orrs	r2, r1
 8019bb2:	b292      	uxth	r2, r2
 8019bb4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8019bb6:	241a      	movs	r4, #26
 8019bb8:	193b      	adds	r3, r7, r4
 8019bba:	881b      	ldrh	r3, [r3, #0]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d009      	beq.n	8019bd4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	6818      	ldr	r0, [r3, #0]
 8019bc4:	68bb      	ldr	r3, [r7, #8]
 8019bc6:	6959      	ldr	r1, [r3, #20]
 8019bc8:	68bb      	ldr	r3, [r7, #8]
 8019bca:	895a      	ldrh	r2, [r3, #10]
 8019bcc:	193b      	adds	r3, r7, r4
 8019bce:	881b      	ldrh	r3, [r3, #0]
 8019bd0:	f006 fdf2 	bl	80207b8 <USB_ReadPMA>
    }
  }

  return count;
 8019bd4:	231a      	movs	r3, #26
 8019bd6:	18fb      	adds	r3, r7, r3
 8019bd8:	881b      	ldrh	r3, [r3, #0]
}
 8019bda:	0018      	movs	r0, r3
 8019bdc:	46bd      	mov	sp, r7
 8019bde:	b009      	add	sp, #36	@ 0x24
 8019be0:	bd90      	pop	{r4, r7, pc}
 8019be2:	46c0      	nop			@ (mov r8, r8)
 8019be4:	00000402 	.word	0x00000402
 8019be8:	ffffbf8f 	.word	0xffffbf8f
 8019bec:	ffff8080 	.word	0xffff8080
 8019bf0:	ffff8f8f 	.word	0xffff8f8f
 8019bf4:	ffff80c0 	.word	0xffff80c0
 8019bf8:	00000406 	.word	0x00000406

08019bfc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8019bfc:	b580      	push	{r7, lr}
 8019bfe:	b0a4      	sub	sp, #144	@ 0x90
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	60f8      	str	r0, [r7, #12]
 8019c04:	60b9      	str	r1, [r7, #8]
 8019c06:	1dbb      	adds	r3, r7, #6
 8019c08:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8019c0a:	1dbb      	adds	r3, r7, #6
 8019c0c:	881b      	ldrh	r3, [r3, #0]
 8019c0e:	2240      	movs	r2, #64	@ 0x40
 8019c10:	4013      	ands	r3, r2
 8019c12:	d100      	bne.n	8019c16 <HAL_PCD_EP_DB_Transmit+0x1a>
 8019c14:	e1e4      	b.n	8019fe0 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	2250      	movs	r2, #80	@ 0x50
 8019c1c:	5a9b      	ldrh	r3, [r3, r2]
 8019c1e:	b29b      	uxth	r3, r3
 8019c20:	001a      	movs	r2, r3
 8019c22:	68bb      	ldr	r3, [r7, #8]
 8019c24:	781b      	ldrb	r3, [r3, #0]
 8019c26:	00db      	lsls	r3, r3, #3
 8019c28:	18d2      	adds	r2, r2, r3
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	18d3      	adds	r3, r2, r3
 8019c30:	4ad0      	ldr	r2, [pc, #832]	@ (8019f74 <HAL_PCD_EP_DB_Transmit+0x378>)
 8019c32:	4694      	mov	ip, r2
 8019c34:	4463      	add	r3, ip
 8019c36:	881a      	ldrh	r2, [r3, #0]
 8019c38:	2186      	movs	r1, #134	@ 0x86
 8019c3a:	187b      	adds	r3, r7, r1
 8019c3c:	0592      	lsls	r2, r2, #22
 8019c3e:	0d92      	lsrs	r2, r2, #22
 8019c40:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8019c42:	68bb      	ldr	r3, [r7, #8]
 8019c44:	699a      	ldr	r2, [r3, #24]
 8019c46:	187b      	adds	r3, r7, r1
 8019c48:	881b      	ldrh	r3, [r3, #0]
 8019c4a:	429a      	cmp	r2, r3
 8019c4c:	d907      	bls.n	8019c5e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8019c4e:	68bb      	ldr	r3, [r7, #8]
 8019c50:	699a      	ldr	r2, [r3, #24]
 8019c52:	187b      	adds	r3, r7, r1
 8019c54:	881b      	ldrh	r3, [r3, #0]
 8019c56:	1ad2      	subs	r2, r2, r3
 8019c58:	68bb      	ldr	r3, [r7, #8]
 8019c5a:	619a      	str	r2, [r3, #24]
 8019c5c:	e002      	b.n	8019c64 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8019c5e:	68bb      	ldr	r3, [r7, #8]
 8019c60:	2200      	movs	r2, #0
 8019c62:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8019c64:	68bb      	ldr	r3, [r7, #8]
 8019c66:	699b      	ldr	r3, [r3, #24]
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d000      	beq.n	8019c6e <HAL_PCD_EP_DB_Transmit+0x72>
 8019c6c:	e0b5      	b.n	8019dda <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019c6e:	68bb      	ldr	r3, [r7, #8]
 8019c70:	785b      	ldrb	r3, [r3, #1]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d125      	bne.n	8019cc2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	2250      	movs	r2, #80	@ 0x50
 8019c82:	5a9b      	ldrh	r3, [r3, r2]
 8019c84:	b29b      	uxth	r3, r3
 8019c86:	001a      	movs	r2, r3
 8019c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c8a:	189b      	adds	r3, r3, r2
 8019c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019c8e:	68bb      	ldr	r3, [r7, #8]
 8019c90:	781b      	ldrb	r3, [r3, #0]
 8019c92:	00da      	lsls	r2, r3, #3
 8019c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c96:	18d3      	adds	r3, r2, r3
 8019c98:	4ab6      	ldr	r2, [pc, #728]	@ (8019f74 <HAL_PCD_EP_DB_Transmit+0x378>)
 8019c9a:	4694      	mov	ip, r2
 8019c9c:	4463      	add	r3, ip
 8019c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ca2:	881b      	ldrh	r3, [r3, #0]
 8019ca4:	b29b      	uxth	r3, r3
 8019ca6:	059b      	lsls	r3, r3, #22
 8019ca8:	0d9b      	lsrs	r3, r3, #22
 8019caa:	b29a      	uxth	r2, r3
 8019cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cae:	801a      	strh	r2, [r3, #0]
 8019cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cb2:	881b      	ldrh	r3, [r3, #0]
 8019cb4:	b29b      	uxth	r3, r3
 8019cb6:	4ab0      	ldr	r2, [pc, #704]	@ (8019f78 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019cb8:	4313      	orrs	r3, r2
 8019cba:	b29a      	uxth	r2, r3
 8019cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cbe:	801a      	strh	r2, [r3, #0]
 8019cc0:	e01b      	b.n	8019cfa <HAL_PCD_EP_DB_Transmit+0xfe>
 8019cc2:	68bb      	ldr	r3, [r7, #8]
 8019cc4:	785b      	ldrb	r3, [r3, #1]
 8019cc6:	2b01      	cmp	r3, #1
 8019cc8:	d117      	bne.n	8019cfa <HAL_PCD_EP_DB_Transmit+0xfe>
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	2250      	movs	r2, #80	@ 0x50
 8019cd6:	5a9b      	ldrh	r3, [r3, r2]
 8019cd8:	b29b      	uxth	r3, r3
 8019cda:	001a      	movs	r2, r3
 8019cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cde:	189b      	adds	r3, r3, r2
 8019ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8019ce2:	68bb      	ldr	r3, [r7, #8]
 8019ce4:	781b      	ldrb	r3, [r3, #0]
 8019ce6:	00da      	lsls	r2, r3, #3
 8019ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cea:	18d3      	adds	r3, r2, r3
 8019cec:	4aa1      	ldr	r2, [pc, #644]	@ (8019f74 <HAL_PCD_EP_DB_Transmit+0x378>)
 8019cee:	4694      	mov	ip, r2
 8019cf0:	4463      	add	r3, ip
 8019cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8019cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d00:	68bb      	ldr	r3, [r7, #8]
 8019d02:	785b      	ldrb	r3, [r3, #1]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d125      	bne.n	8019d54 <HAL_PCD_EP_DB_Transmit+0x158>
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	61fb      	str	r3, [r7, #28]
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	2250      	movs	r2, #80	@ 0x50
 8019d14:	5a9b      	ldrh	r3, [r3, r2]
 8019d16:	b29b      	uxth	r3, r3
 8019d18:	001a      	movs	r2, r3
 8019d1a:	69fb      	ldr	r3, [r7, #28]
 8019d1c:	189b      	adds	r3, r3, r2
 8019d1e:	61fb      	str	r3, [r7, #28]
 8019d20:	68bb      	ldr	r3, [r7, #8]
 8019d22:	781b      	ldrb	r3, [r3, #0]
 8019d24:	00da      	lsls	r2, r3, #3
 8019d26:	69fb      	ldr	r3, [r7, #28]
 8019d28:	18d3      	adds	r3, r2, r3
 8019d2a:	4a94      	ldr	r2, [pc, #592]	@ (8019f7c <HAL_PCD_EP_DB_Transmit+0x380>)
 8019d2c:	4694      	mov	ip, r2
 8019d2e:	4463      	add	r3, ip
 8019d30:	61bb      	str	r3, [r7, #24]
 8019d32:	69bb      	ldr	r3, [r7, #24]
 8019d34:	881b      	ldrh	r3, [r3, #0]
 8019d36:	b29b      	uxth	r3, r3
 8019d38:	059b      	lsls	r3, r3, #22
 8019d3a:	0d9b      	lsrs	r3, r3, #22
 8019d3c:	b29a      	uxth	r2, r3
 8019d3e:	69bb      	ldr	r3, [r7, #24]
 8019d40:	801a      	strh	r2, [r3, #0]
 8019d42:	69bb      	ldr	r3, [r7, #24]
 8019d44:	881b      	ldrh	r3, [r3, #0]
 8019d46:	b29b      	uxth	r3, r3
 8019d48:	4a8b      	ldr	r2, [pc, #556]	@ (8019f78 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019d4a:	4313      	orrs	r3, r2
 8019d4c:	b29a      	uxth	r2, r3
 8019d4e:	69bb      	ldr	r3, [r7, #24]
 8019d50:	801a      	strh	r2, [r3, #0]
 8019d52:	e018      	b.n	8019d86 <HAL_PCD_EP_DB_Transmit+0x18a>
 8019d54:	68bb      	ldr	r3, [r7, #8]
 8019d56:	785b      	ldrb	r3, [r3, #1]
 8019d58:	2b01      	cmp	r3, #1
 8019d5a:	d114      	bne.n	8019d86 <HAL_PCD_EP_DB_Transmit+0x18a>
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	2250      	movs	r2, #80	@ 0x50
 8019d62:	5a9b      	ldrh	r3, [r3, r2]
 8019d64:	b29b      	uxth	r3, r3
 8019d66:	001a      	movs	r2, r3
 8019d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d6a:	189b      	adds	r3, r3, r2
 8019d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d6e:	68bb      	ldr	r3, [r7, #8]
 8019d70:	781b      	ldrb	r3, [r3, #0]
 8019d72:	00da      	lsls	r2, r3, #3
 8019d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d76:	18d3      	adds	r3, r2, r3
 8019d78:	4a80      	ldr	r2, [pc, #512]	@ (8019f7c <HAL_PCD_EP_DB_Transmit+0x380>)
 8019d7a:	4694      	mov	ip, r2
 8019d7c:	4463      	add	r3, ip
 8019d7e:	623b      	str	r3, [r7, #32]
 8019d80:	6a3b      	ldr	r3, [r7, #32]
 8019d82:	2200      	movs	r2, #0
 8019d84:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019d86:	68bb      	ldr	r3, [r7, #8]
 8019d88:	781a      	ldrb	r2, [r3, #0]
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	0011      	movs	r1, r2
 8019d8e:	0018      	movs	r0, r3
 8019d90:	f008 fd4e 	bl	8022830 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8019d94:	1dbb      	adds	r3, r7, #6
 8019d96:	881a      	ldrh	r2, [r3, #0]
 8019d98:	2380      	movs	r3, #128	@ 0x80
 8019d9a:	01db      	lsls	r3, r3, #7
 8019d9c:	4013      	ands	r3, r2
 8019d9e:	d100      	bne.n	8019da2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8019da0:	e309      	b.n	801a3b6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	001a      	movs	r2, r3
 8019da8:	68bb      	ldr	r3, [r7, #8]
 8019daa:	781b      	ldrb	r3, [r3, #0]
 8019dac:	009b      	lsls	r3, r3, #2
 8019dae:	18d3      	adds	r3, r2, r3
 8019db0:	881b      	ldrh	r3, [r3, #0]
 8019db2:	b29a      	uxth	r2, r3
 8019db4:	2016      	movs	r0, #22
 8019db6:	183b      	adds	r3, r7, r0
 8019db8:	4971      	ldr	r1, [pc, #452]	@ (8019f80 <HAL_PCD_EP_DB_Transmit+0x384>)
 8019dba:	400a      	ands	r2, r1
 8019dbc:	801a      	strh	r2, [r3, #0]
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	001a      	movs	r2, r3
 8019dc4:	68bb      	ldr	r3, [r7, #8]
 8019dc6:	781b      	ldrb	r3, [r3, #0]
 8019dc8:	009b      	lsls	r3, r3, #2
 8019dca:	18d3      	adds	r3, r2, r3
 8019dcc:	183a      	adds	r2, r7, r0
 8019dce:	8812      	ldrh	r2, [r2, #0]
 8019dd0:	496c      	ldr	r1, [pc, #432]	@ (8019f84 <HAL_PCD_EP_DB_Transmit+0x388>)
 8019dd2:	430a      	orrs	r2, r1
 8019dd4:	b292      	uxth	r2, r2
 8019dd6:	801a      	strh	r2, [r3, #0]
 8019dd8:	e2ed      	b.n	801a3b6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8019dda:	1dbb      	adds	r3, r7, #6
 8019ddc:	881a      	ldrh	r2, [r3, #0]
 8019dde:	2380      	movs	r3, #128	@ 0x80
 8019de0:	01db      	lsls	r3, r3, #7
 8019de2:	4013      	ands	r3, r2
 8019de4:	d01a      	beq.n	8019e1c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	001a      	movs	r2, r3
 8019dec:	68bb      	ldr	r3, [r7, #8]
 8019dee:	781b      	ldrb	r3, [r3, #0]
 8019df0:	009b      	lsls	r3, r3, #2
 8019df2:	18d3      	adds	r3, r2, r3
 8019df4:	881b      	ldrh	r3, [r3, #0]
 8019df6:	b29a      	uxth	r2, r3
 8019df8:	208a      	movs	r0, #138	@ 0x8a
 8019dfa:	183b      	adds	r3, r7, r0
 8019dfc:	4960      	ldr	r1, [pc, #384]	@ (8019f80 <HAL_PCD_EP_DB_Transmit+0x384>)
 8019dfe:	400a      	ands	r2, r1
 8019e00:	801a      	strh	r2, [r3, #0]
 8019e02:	68fb      	ldr	r3, [r7, #12]
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	001a      	movs	r2, r3
 8019e08:	68bb      	ldr	r3, [r7, #8]
 8019e0a:	781b      	ldrb	r3, [r3, #0]
 8019e0c:	009b      	lsls	r3, r3, #2
 8019e0e:	18d3      	adds	r3, r2, r3
 8019e10:	183a      	adds	r2, r7, r0
 8019e12:	8812      	ldrh	r2, [r2, #0]
 8019e14:	495b      	ldr	r1, [pc, #364]	@ (8019f84 <HAL_PCD_EP_DB_Transmit+0x388>)
 8019e16:	430a      	orrs	r2, r1
 8019e18:	b292      	uxth	r2, r2
 8019e1a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8019e1c:	68bb      	ldr	r3, [r7, #8]
 8019e1e:	2224      	movs	r2, #36	@ 0x24
 8019e20:	5c9b      	ldrb	r3, [r3, r2]
 8019e22:	2b01      	cmp	r3, #1
 8019e24:	d000      	beq.n	8019e28 <HAL_PCD_EP_DB_Transmit+0x22c>
 8019e26:	e2c6      	b.n	801a3b6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8019e28:	68bb      	ldr	r3, [r7, #8]
 8019e2a:	695a      	ldr	r2, [r3, #20]
 8019e2c:	2186      	movs	r1, #134	@ 0x86
 8019e2e:	187b      	adds	r3, r7, r1
 8019e30:	881b      	ldrh	r3, [r3, #0]
 8019e32:	18d2      	adds	r2, r2, r3
 8019e34:	68bb      	ldr	r3, [r7, #8]
 8019e36:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8019e38:	68bb      	ldr	r3, [r7, #8]
 8019e3a:	69da      	ldr	r2, [r3, #28]
 8019e3c:	187b      	adds	r3, r7, r1
 8019e3e:	881b      	ldrh	r3, [r3, #0]
 8019e40:	18d2      	adds	r2, r2, r3
 8019e42:	68bb      	ldr	r3, [r7, #8]
 8019e44:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8019e46:	68bb      	ldr	r3, [r7, #8]
 8019e48:	6a1a      	ldr	r2, [r3, #32]
 8019e4a:	68bb      	ldr	r3, [r7, #8]
 8019e4c:	691b      	ldr	r3, [r3, #16]
 8019e4e:	429a      	cmp	r2, r3
 8019e50:	d30c      	bcc.n	8019e6c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8019e52:	68bb      	ldr	r3, [r7, #8]
 8019e54:	691b      	ldr	r3, [r3, #16]
 8019e56:	218c      	movs	r1, #140	@ 0x8c
 8019e58:	187a      	adds	r2, r7, r1
 8019e5a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8019e5c:	68bb      	ldr	r3, [r7, #8]
 8019e5e:	6a1a      	ldr	r2, [r3, #32]
 8019e60:	187b      	adds	r3, r7, r1
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	1ad2      	subs	r2, r2, r3
 8019e66:	68bb      	ldr	r3, [r7, #8]
 8019e68:	621a      	str	r2, [r3, #32]
 8019e6a:	e01a      	b.n	8019ea2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8019e6c:	68bb      	ldr	r3, [r7, #8]
 8019e6e:	6a1b      	ldr	r3, [r3, #32]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d10a      	bne.n	8019e8a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8019e74:	2386      	movs	r3, #134	@ 0x86
 8019e76:	18fb      	adds	r3, r7, r3
 8019e78:	881b      	ldrh	r3, [r3, #0]
 8019e7a:	228c      	movs	r2, #140	@ 0x8c
 8019e7c:	18ba      	adds	r2, r7, r2
 8019e7e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8019e80:	68bb      	ldr	r3, [r7, #8]
 8019e82:	2224      	movs	r2, #36	@ 0x24
 8019e84:	2100      	movs	r1, #0
 8019e86:	5499      	strb	r1, [r3, r2]
 8019e88:	e00b      	b.n	8019ea2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8019e8a:	68bb      	ldr	r3, [r7, #8]
 8019e8c:	2224      	movs	r2, #36	@ 0x24
 8019e8e:	2100      	movs	r1, #0
 8019e90:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8019e92:	68bb      	ldr	r3, [r7, #8]
 8019e94:	6a1b      	ldr	r3, [r3, #32]
 8019e96:	228c      	movs	r2, #140	@ 0x8c
 8019e98:	18ba      	adds	r2, r7, r2
 8019e9a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8019e9c:	68bb      	ldr	r3, [r7, #8]
 8019e9e:	2200      	movs	r2, #0
 8019ea0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8019ea2:	68bb      	ldr	r3, [r7, #8]
 8019ea4:	785b      	ldrb	r3, [r3, #1]
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d000      	beq.n	8019eac <HAL_PCD_EP_DB_Transmit+0x2b0>
 8019eaa:	e06d      	b.n	8019f88 <HAL_PCD_EP_DB_Transmit+0x38c>
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	2250      	movs	r2, #80	@ 0x50
 8019eb8:	5a9b      	ldrh	r3, [r3, r2]
 8019eba:	b29b      	uxth	r3, r3
 8019ebc:	001a      	movs	r2, r3
 8019ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ec0:	189b      	adds	r3, r3, r2
 8019ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019ec4:	68bb      	ldr	r3, [r7, #8]
 8019ec6:	781b      	ldrb	r3, [r3, #0]
 8019ec8:	00da      	lsls	r2, r3, #3
 8019eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ecc:	18d3      	adds	r3, r2, r3
 8019ece:	4a29      	ldr	r2, [pc, #164]	@ (8019f74 <HAL_PCD_EP_DB_Transmit+0x378>)
 8019ed0:	4694      	mov	ip, r2
 8019ed2:	4463      	add	r3, ip
 8019ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ed8:	881b      	ldrh	r3, [r3, #0]
 8019eda:	b29b      	uxth	r3, r3
 8019edc:	059b      	lsls	r3, r3, #22
 8019ede:	0d9b      	lsrs	r3, r3, #22
 8019ee0:	b29a      	uxth	r2, r3
 8019ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ee4:	801a      	strh	r2, [r3, #0]
 8019ee6:	228c      	movs	r2, #140	@ 0x8c
 8019ee8:	18bb      	adds	r3, r7, r2
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	2b3e      	cmp	r3, #62	@ 0x3e
 8019eee:	d91a      	bls.n	8019f26 <HAL_PCD_EP_DB_Transmit+0x32a>
 8019ef0:	18bb      	adds	r3, r7, r2
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	095b      	lsrs	r3, r3, #5
 8019ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019ef8:	18bb      	adds	r3, r7, r2
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	221f      	movs	r2, #31
 8019efe:	4013      	ands	r3, r2
 8019f00:	d102      	bne.n	8019f08 <HAL_PCD_EP_DB_Transmit+0x30c>
 8019f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019f04:	3b01      	subs	r3, #1
 8019f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f0a:	881b      	ldrh	r3, [r3, #0]
 8019f0c:	b29a      	uxth	r2, r3
 8019f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019f10:	b29b      	uxth	r3, r3
 8019f12:	029b      	lsls	r3, r3, #10
 8019f14:	b29b      	uxth	r3, r3
 8019f16:	4313      	orrs	r3, r2
 8019f18:	b29b      	uxth	r3, r3
 8019f1a:	4a17      	ldr	r2, [pc, #92]	@ (8019f78 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019f1c:	4313      	orrs	r3, r2
 8019f1e:	b29a      	uxth	r2, r3
 8019f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f22:	801a      	strh	r2, [r3, #0]
 8019f24:	e04f      	b.n	8019fc6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019f26:	238c      	movs	r3, #140	@ 0x8c
 8019f28:	18fb      	adds	r3, r7, r3
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d108      	bne.n	8019f42 <HAL_PCD_EP_DB_Transmit+0x346>
 8019f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f32:	881b      	ldrh	r3, [r3, #0]
 8019f34:	b29b      	uxth	r3, r3
 8019f36:	4a10      	ldr	r2, [pc, #64]	@ (8019f78 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019f38:	4313      	orrs	r3, r2
 8019f3a:	b29a      	uxth	r2, r3
 8019f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f3e:	801a      	strh	r2, [r3, #0]
 8019f40:	e041      	b.n	8019fc6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019f42:	228c      	movs	r2, #140	@ 0x8c
 8019f44:	18bb      	adds	r3, r7, r2
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	085b      	lsrs	r3, r3, #1
 8019f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019f4c:	18bb      	adds	r3, r7, r2
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	2201      	movs	r2, #1
 8019f52:	4013      	ands	r3, r2
 8019f54:	d002      	beq.n	8019f5c <HAL_PCD_EP_DB_Transmit+0x360>
 8019f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019f58:	3301      	adds	r3, #1
 8019f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f5e:	881b      	ldrh	r3, [r3, #0]
 8019f60:	b29a      	uxth	r2, r3
 8019f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019f64:	b29b      	uxth	r3, r3
 8019f66:	029b      	lsls	r3, r3, #10
 8019f68:	b29b      	uxth	r3, r3
 8019f6a:	4313      	orrs	r3, r2
 8019f6c:	b29a      	uxth	r2, r3
 8019f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f70:	801a      	strh	r2, [r3, #0]
 8019f72:	e028      	b.n	8019fc6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019f74:	00000402 	.word	0x00000402
 8019f78:	ffff8000 	.word	0xffff8000
 8019f7c:	00000406 	.word	0x00000406
 8019f80:	ffff8f8f 	.word	0xffff8f8f
 8019f84:	ffffc080 	.word	0xffffc080
 8019f88:	68bb      	ldr	r3, [r7, #8]
 8019f8a:	785b      	ldrb	r3, [r3, #1]
 8019f8c:	2b01      	cmp	r3, #1
 8019f8e:	d11a      	bne.n	8019fc6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	2250      	movs	r2, #80	@ 0x50
 8019f9c:	5a9b      	ldrh	r3, [r3, r2]
 8019f9e:	b29b      	uxth	r3, r3
 8019fa0:	001a      	movs	r2, r3
 8019fa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019fa4:	189b      	adds	r3, r3, r2
 8019fa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8019fa8:	68bb      	ldr	r3, [r7, #8]
 8019faa:	781b      	ldrb	r3, [r3, #0]
 8019fac:	00da      	lsls	r2, r3, #3
 8019fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019fb0:	18d3      	adds	r3, r2, r3
 8019fb2:	4adb      	ldr	r2, [pc, #876]	@ (801a320 <HAL_PCD_EP_DB_Transmit+0x724>)
 8019fb4:	4694      	mov	ip, r2
 8019fb6:	4463      	add	r3, ip
 8019fb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8019fba:	238c      	movs	r3, #140	@ 0x8c
 8019fbc:	18fb      	adds	r3, r7, r3
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	b29a      	uxth	r2, r3
 8019fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019fc4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	6818      	ldr	r0, [r3, #0]
 8019fca:	68bb      	ldr	r3, [r7, #8]
 8019fcc:	6959      	ldr	r1, [r3, #20]
 8019fce:	68bb      	ldr	r3, [r7, #8]
 8019fd0:	891a      	ldrh	r2, [r3, #8]
 8019fd2:	238c      	movs	r3, #140	@ 0x8c
 8019fd4:	18fb      	adds	r3, r7, r3
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	b29b      	uxth	r3, r3
 8019fda:	f006 fba3 	bl	8020724 <USB_WritePMA>
 8019fde:	e1ea      	b.n	801a3b6 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	2250      	movs	r2, #80	@ 0x50
 8019fe6:	5a9b      	ldrh	r3, [r3, r2]
 8019fe8:	b29b      	uxth	r3, r3
 8019fea:	001a      	movs	r2, r3
 8019fec:	68bb      	ldr	r3, [r7, #8]
 8019fee:	781b      	ldrb	r3, [r3, #0]
 8019ff0:	00db      	lsls	r3, r3, #3
 8019ff2:	18d2      	adds	r2, r2, r3
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	18d3      	adds	r3, r2, r3
 8019ffa:	4aca      	ldr	r2, [pc, #808]	@ (801a324 <HAL_PCD_EP_DB_Transmit+0x728>)
 8019ffc:	4694      	mov	ip, r2
 8019ffe:	4463      	add	r3, ip
 801a000:	881a      	ldrh	r2, [r3, #0]
 801a002:	2186      	movs	r1, #134	@ 0x86
 801a004:	187b      	adds	r3, r7, r1
 801a006:	0592      	lsls	r2, r2, #22
 801a008:	0d92      	lsrs	r2, r2, #22
 801a00a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801a00c:	68bb      	ldr	r3, [r7, #8]
 801a00e:	699a      	ldr	r2, [r3, #24]
 801a010:	187b      	adds	r3, r7, r1
 801a012:	881b      	ldrh	r3, [r3, #0]
 801a014:	429a      	cmp	r2, r3
 801a016:	d307      	bcc.n	801a028 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801a018:	68bb      	ldr	r3, [r7, #8]
 801a01a:	699a      	ldr	r2, [r3, #24]
 801a01c:	187b      	adds	r3, r7, r1
 801a01e:	881b      	ldrh	r3, [r3, #0]
 801a020:	1ad2      	subs	r2, r2, r3
 801a022:	68bb      	ldr	r3, [r7, #8]
 801a024:	619a      	str	r2, [r3, #24]
 801a026:	e002      	b.n	801a02e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	2200      	movs	r2, #0
 801a02c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801a02e:	68bb      	ldr	r3, [r7, #8]
 801a030:	699b      	ldr	r3, [r3, #24]
 801a032:	2b00      	cmp	r3, #0
 801a034:	d000      	beq.n	801a038 <HAL_PCD_EP_DB_Transmit+0x43c>
 801a036:	e0bb      	b.n	801a1b0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a038:	68bb      	ldr	r3, [r7, #8]
 801a03a:	785b      	ldrb	r3, [r3, #1]
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d125      	bne.n	801a08c <HAL_PCD_EP_DB_Transmit+0x490>
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a046:	68fb      	ldr	r3, [r7, #12]
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	2250      	movs	r2, #80	@ 0x50
 801a04c:	5a9b      	ldrh	r3, [r3, r2]
 801a04e:	b29b      	uxth	r3, r3
 801a050:	001a      	movs	r2, r3
 801a052:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a054:	189b      	adds	r3, r3, r2
 801a056:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a058:	68bb      	ldr	r3, [r7, #8]
 801a05a:	781b      	ldrb	r3, [r3, #0]
 801a05c:	00da      	lsls	r2, r3, #3
 801a05e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a060:	18d3      	adds	r3, r2, r3
 801a062:	4aaf      	ldr	r2, [pc, #700]	@ (801a320 <HAL_PCD_EP_DB_Transmit+0x724>)
 801a064:	4694      	mov	ip, r2
 801a066:	4463      	add	r3, ip
 801a068:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a06a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a06c:	881b      	ldrh	r3, [r3, #0]
 801a06e:	b29b      	uxth	r3, r3
 801a070:	059b      	lsls	r3, r3, #22
 801a072:	0d9b      	lsrs	r3, r3, #22
 801a074:	b29a      	uxth	r2, r3
 801a076:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a078:	801a      	strh	r2, [r3, #0]
 801a07a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a07c:	881b      	ldrh	r3, [r3, #0]
 801a07e:	b29b      	uxth	r3, r3
 801a080:	4aa9      	ldr	r2, [pc, #676]	@ (801a328 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a082:	4313      	orrs	r3, r2
 801a084:	b29a      	uxth	r2, r3
 801a086:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a088:	801a      	strh	r2, [r3, #0]
 801a08a:	e01b      	b.n	801a0c4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801a08c:	68bb      	ldr	r3, [r7, #8]
 801a08e:	785b      	ldrb	r3, [r3, #1]
 801a090:	2b01      	cmp	r3, #1
 801a092:	d117      	bne.n	801a0c4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	667b      	str	r3, [r7, #100]	@ 0x64
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	2250      	movs	r2, #80	@ 0x50
 801a0a0:	5a9b      	ldrh	r3, [r3, r2]
 801a0a2:	b29b      	uxth	r3, r3
 801a0a4:	001a      	movs	r2, r3
 801a0a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a0a8:	189b      	adds	r3, r3, r2
 801a0aa:	667b      	str	r3, [r7, #100]	@ 0x64
 801a0ac:	68bb      	ldr	r3, [r7, #8]
 801a0ae:	781b      	ldrb	r3, [r3, #0]
 801a0b0:	00da      	lsls	r2, r3, #3
 801a0b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a0b4:	18d3      	adds	r3, r2, r3
 801a0b6:	4a9a      	ldr	r2, [pc, #616]	@ (801a320 <HAL_PCD_EP_DB_Transmit+0x724>)
 801a0b8:	4694      	mov	ip, r2
 801a0ba:	4463      	add	r3, ip
 801a0bc:	663b      	str	r3, [r7, #96]	@ 0x60
 801a0be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a0c0:	2200      	movs	r2, #0
 801a0c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a0c4:	68fb      	ldr	r3, [r7, #12]
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	677b      	str	r3, [r7, #116]	@ 0x74
 801a0ca:	68bb      	ldr	r3, [r7, #8]
 801a0cc:	785b      	ldrb	r3, [r3, #1]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d12b      	bne.n	801a12a <HAL_PCD_EP_DB_Transmit+0x52e>
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	2250      	movs	r2, #80	@ 0x50
 801a0de:	5a9b      	ldrh	r3, [r3, r2]
 801a0e0:	b29b      	uxth	r3, r3
 801a0e2:	001a      	movs	r2, r3
 801a0e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a0e6:	189b      	adds	r3, r3, r2
 801a0e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a0ea:	68bb      	ldr	r3, [r7, #8]
 801a0ec:	781b      	ldrb	r3, [r3, #0]
 801a0ee:	00da      	lsls	r2, r3, #3
 801a0f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a0f2:	18d3      	adds	r3, r2, r3
 801a0f4:	4a8b      	ldr	r2, [pc, #556]	@ (801a324 <HAL_PCD_EP_DB_Transmit+0x728>)
 801a0f6:	4694      	mov	ip, r2
 801a0f8:	4463      	add	r3, ip
 801a0fa:	2180      	movs	r1, #128	@ 0x80
 801a0fc:	187a      	adds	r2, r7, r1
 801a0fe:	6013      	str	r3, [r2, #0]
 801a100:	187b      	adds	r3, r7, r1
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	881b      	ldrh	r3, [r3, #0]
 801a106:	b29b      	uxth	r3, r3
 801a108:	059b      	lsls	r3, r3, #22
 801a10a:	0d9b      	lsrs	r3, r3, #22
 801a10c:	b29a      	uxth	r2, r3
 801a10e:	187b      	adds	r3, r7, r1
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	801a      	strh	r2, [r3, #0]
 801a114:	187b      	adds	r3, r7, r1
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	881b      	ldrh	r3, [r3, #0]
 801a11a:	b29b      	uxth	r3, r3
 801a11c:	4a82      	ldr	r2, [pc, #520]	@ (801a328 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a11e:	4313      	orrs	r3, r2
 801a120:	b29a      	uxth	r2, r3
 801a122:	187b      	adds	r3, r7, r1
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	801a      	strh	r2, [r3, #0]
 801a128:	e018      	b.n	801a15c <HAL_PCD_EP_DB_Transmit+0x560>
 801a12a:	68bb      	ldr	r3, [r7, #8]
 801a12c:	785b      	ldrb	r3, [r3, #1]
 801a12e:	2b01      	cmp	r3, #1
 801a130:	d114      	bne.n	801a15c <HAL_PCD_EP_DB_Transmit+0x560>
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	2250      	movs	r2, #80	@ 0x50
 801a138:	5a9b      	ldrh	r3, [r3, r2]
 801a13a:	b29b      	uxth	r3, r3
 801a13c:	001a      	movs	r2, r3
 801a13e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a140:	189b      	adds	r3, r3, r2
 801a142:	677b      	str	r3, [r7, #116]	@ 0x74
 801a144:	68bb      	ldr	r3, [r7, #8]
 801a146:	781b      	ldrb	r3, [r3, #0]
 801a148:	00da      	lsls	r2, r3, #3
 801a14a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a14c:	18d3      	adds	r3, r2, r3
 801a14e:	4a75      	ldr	r2, [pc, #468]	@ (801a324 <HAL_PCD_EP_DB_Transmit+0x728>)
 801a150:	4694      	mov	ip, r2
 801a152:	4463      	add	r3, ip
 801a154:	673b      	str	r3, [r7, #112]	@ 0x70
 801a156:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a158:	2200      	movs	r2, #0
 801a15a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a15c:	68bb      	ldr	r3, [r7, #8]
 801a15e:	781a      	ldrb	r2, [r3, #0]
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	0011      	movs	r1, r2
 801a164:	0018      	movs	r0, r3
 801a166:	f008 fb63 	bl	8022830 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801a16a:	1dbb      	adds	r3, r7, #6
 801a16c:	881a      	ldrh	r2, [r3, #0]
 801a16e:	2380      	movs	r3, #128	@ 0x80
 801a170:	01db      	lsls	r3, r3, #7
 801a172:	4013      	ands	r3, r2
 801a174:	d000      	beq.n	801a178 <HAL_PCD_EP_DB_Transmit+0x57c>
 801a176:	e11e      	b.n	801a3b6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	001a      	movs	r2, r3
 801a17e:	68bb      	ldr	r3, [r7, #8]
 801a180:	781b      	ldrb	r3, [r3, #0]
 801a182:	009b      	lsls	r3, r3, #2
 801a184:	18d3      	adds	r3, r2, r3
 801a186:	881b      	ldrh	r3, [r3, #0]
 801a188:	b29a      	uxth	r2, r3
 801a18a:	2088      	movs	r0, #136	@ 0x88
 801a18c:	183b      	adds	r3, r7, r0
 801a18e:	4967      	ldr	r1, [pc, #412]	@ (801a32c <HAL_PCD_EP_DB_Transmit+0x730>)
 801a190:	400a      	ands	r2, r1
 801a192:	801a      	strh	r2, [r3, #0]
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	001a      	movs	r2, r3
 801a19a:	68bb      	ldr	r3, [r7, #8]
 801a19c:	781b      	ldrb	r3, [r3, #0]
 801a19e:	009b      	lsls	r3, r3, #2
 801a1a0:	18d3      	adds	r3, r2, r3
 801a1a2:	183a      	adds	r2, r7, r0
 801a1a4:	8812      	ldrh	r2, [r2, #0]
 801a1a6:	4962      	ldr	r1, [pc, #392]	@ (801a330 <HAL_PCD_EP_DB_Transmit+0x734>)
 801a1a8:	430a      	orrs	r2, r1
 801a1aa:	b292      	uxth	r2, r2
 801a1ac:	801a      	strh	r2, [r3, #0]
 801a1ae:	e102      	b.n	801a3b6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801a1b0:	1dbb      	adds	r3, r7, #6
 801a1b2:	881a      	ldrh	r2, [r3, #0]
 801a1b4:	2380      	movs	r3, #128	@ 0x80
 801a1b6:	01db      	lsls	r3, r3, #7
 801a1b8:	4013      	ands	r3, r2
 801a1ba:	d11a      	bne.n	801a1f2 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a1bc:	68fb      	ldr	r3, [r7, #12]
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	001a      	movs	r2, r3
 801a1c2:	68bb      	ldr	r3, [r7, #8]
 801a1c4:	781b      	ldrb	r3, [r3, #0]
 801a1c6:	009b      	lsls	r3, r3, #2
 801a1c8:	18d3      	adds	r3, r2, r3
 801a1ca:	881b      	ldrh	r3, [r3, #0]
 801a1cc:	b29a      	uxth	r2, r3
 801a1ce:	204e      	movs	r0, #78	@ 0x4e
 801a1d0:	183b      	adds	r3, r7, r0
 801a1d2:	4956      	ldr	r1, [pc, #344]	@ (801a32c <HAL_PCD_EP_DB_Transmit+0x730>)
 801a1d4:	400a      	ands	r2, r1
 801a1d6:	801a      	strh	r2, [r3, #0]
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	001a      	movs	r2, r3
 801a1de:	68bb      	ldr	r3, [r7, #8]
 801a1e0:	781b      	ldrb	r3, [r3, #0]
 801a1e2:	009b      	lsls	r3, r3, #2
 801a1e4:	18d3      	adds	r3, r2, r3
 801a1e6:	183a      	adds	r2, r7, r0
 801a1e8:	8812      	ldrh	r2, [r2, #0]
 801a1ea:	4951      	ldr	r1, [pc, #324]	@ (801a330 <HAL_PCD_EP_DB_Transmit+0x734>)
 801a1ec:	430a      	orrs	r2, r1
 801a1ee:	b292      	uxth	r2, r2
 801a1f0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801a1f2:	68bb      	ldr	r3, [r7, #8]
 801a1f4:	2224      	movs	r2, #36	@ 0x24
 801a1f6:	5c9b      	ldrb	r3, [r3, r2]
 801a1f8:	2b01      	cmp	r3, #1
 801a1fa:	d000      	beq.n	801a1fe <HAL_PCD_EP_DB_Transmit+0x602>
 801a1fc:	e0db      	b.n	801a3b6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801a1fe:	68bb      	ldr	r3, [r7, #8]
 801a200:	695a      	ldr	r2, [r3, #20]
 801a202:	2186      	movs	r1, #134	@ 0x86
 801a204:	187b      	adds	r3, r7, r1
 801a206:	881b      	ldrh	r3, [r3, #0]
 801a208:	18d2      	adds	r2, r2, r3
 801a20a:	68bb      	ldr	r3, [r7, #8]
 801a20c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801a20e:	68bb      	ldr	r3, [r7, #8]
 801a210:	69da      	ldr	r2, [r3, #28]
 801a212:	187b      	adds	r3, r7, r1
 801a214:	881b      	ldrh	r3, [r3, #0]
 801a216:	18d2      	adds	r2, r2, r3
 801a218:	68bb      	ldr	r3, [r7, #8]
 801a21a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801a21c:	68bb      	ldr	r3, [r7, #8]
 801a21e:	6a1a      	ldr	r2, [r3, #32]
 801a220:	68bb      	ldr	r3, [r7, #8]
 801a222:	691b      	ldr	r3, [r3, #16]
 801a224:	429a      	cmp	r2, r3
 801a226:	d30c      	bcc.n	801a242 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801a228:	68bb      	ldr	r3, [r7, #8]
 801a22a:	691b      	ldr	r3, [r3, #16]
 801a22c:	218c      	movs	r1, #140	@ 0x8c
 801a22e:	187a      	adds	r2, r7, r1
 801a230:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801a232:	68bb      	ldr	r3, [r7, #8]
 801a234:	6a1a      	ldr	r2, [r3, #32]
 801a236:	187b      	adds	r3, r7, r1
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	1ad2      	subs	r2, r2, r3
 801a23c:	68bb      	ldr	r3, [r7, #8]
 801a23e:	621a      	str	r2, [r3, #32]
 801a240:	e01a      	b.n	801a278 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801a242:	68bb      	ldr	r3, [r7, #8]
 801a244:	6a1b      	ldr	r3, [r3, #32]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d10a      	bne.n	801a260 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801a24a:	2386      	movs	r3, #134	@ 0x86
 801a24c:	18fb      	adds	r3, r7, r3
 801a24e:	881b      	ldrh	r3, [r3, #0]
 801a250:	228c      	movs	r2, #140	@ 0x8c
 801a252:	18ba      	adds	r2, r7, r2
 801a254:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801a256:	68bb      	ldr	r3, [r7, #8]
 801a258:	2224      	movs	r2, #36	@ 0x24
 801a25a:	2100      	movs	r1, #0
 801a25c:	5499      	strb	r1, [r3, r2]
 801a25e:	e00b      	b.n	801a278 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801a260:	68bb      	ldr	r3, [r7, #8]
 801a262:	6a1b      	ldr	r3, [r3, #32]
 801a264:	228c      	movs	r2, #140	@ 0x8c
 801a266:	18ba      	adds	r2, r7, r2
 801a268:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801a26a:	68bb      	ldr	r3, [r7, #8]
 801a26c:	2200      	movs	r2, #0
 801a26e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801a270:	68bb      	ldr	r3, [r7, #8]
 801a272:	2224      	movs	r2, #36	@ 0x24
 801a274:	2100      	movs	r1, #0
 801a276:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	657b      	str	r3, [r7, #84]	@ 0x54
 801a27e:	68bb      	ldr	r3, [r7, #8]
 801a280:	785b      	ldrb	r3, [r3, #1]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d000      	beq.n	801a288 <HAL_PCD_EP_DB_Transmit+0x68c>
 801a286:	e06e      	b.n	801a366 <HAL_PCD_EP_DB_Transmit+0x76a>
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	2250      	movs	r2, #80	@ 0x50
 801a294:	5a9b      	ldrh	r3, [r3, r2]
 801a296:	b29b      	uxth	r3, r3
 801a298:	001a      	movs	r2, r3
 801a29a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a29c:	189b      	adds	r3, r3, r2
 801a29e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a2a0:	68bb      	ldr	r3, [r7, #8]
 801a2a2:	781b      	ldrb	r3, [r3, #0]
 801a2a4:	00da      	lsls	r2, r3, #3
 801a2a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a2a8:	18d3      	adds	r3, r2, r3
 801a2aa:	4a1e      	ldr	r2, [pc, #120]	@ (801a324 <HAL_PCD_EP_DB_Transmit+0x728>)
 801a2ac:	4694      	mov	ip, r2
 801a2ae:	4463      	add	r3, ip
 801a2b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a2b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a2b4:	881b      	ldrh	r3, [r3, #0]
 801a2b6:	b29b      	uxth	r3, r3
 801a2b8:	059b      	lsls	r3, r3, #22
 801a2ba:	0d9b      	lsrs	r3, r3, #22
 801a2bc:	b29a      	uxth	r2, r3
 801a2be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a2c0:	801a      	strh	r2, [r3, #0]
 801a2c2:	228c      	movs	r2, #140	@ 0x8c
 801a2c4:	18bb      	adds	r3, r7, r2
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	2b3e      	cmp	r3, #62	@ 0x3e
 801a2ca:	d91a      	bls.n	801a302 <HAL_PCD_EP_DB_Transmit+0x706>
 801a2cc:	18bb      	adds	r3, r7, r2
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	095b      	lsrs	r3, r3, #5
 801a2d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a2d4:	18bb      	adds	r3, r7, r2
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	221f      	movs	r2, #31
 801a2da:	4013      	ands	r3, r2
 801a2dc:	d102      	bne.n	801a2e4 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801a2de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a2e0:	3b01      	subs	r3, #1
 801a2e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a2e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a2e6:	881b      	ldrh	r3, [r3, #0]
 801a2e8:	b29a      	uxth	r2, r3
 801a2ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a2ec:	b29b      	uxth	r3, r3
 801a2ee:	029b      	lsls	r3, r3, #10
 801a2f0:	b29b      	uxth	r3, r3
 801a2f2:	4313      	orrs	r3, r2
 801a2f4:	b29b      	uxth	r3, r3
 801a2f6:	4a0c      	ldr	r2, [pc, #48]	@ (801a328 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a2f8:	4313      	orrs	r3, r2
 801a2fa:	b29a      	uxth	r2, r3
 801a2fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a2fe:	801a      	strh	r2, [r3, #0]
 801a300:	e04d      	b.n	801a39e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a302:	238c      	movs	r3, #140	@ 0x8c
 801a304:	18fb      	adds	r3, r7, r3
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d113      	bne.n	801a334 <HAL_PCD_EP_DB_Transmit+0x738>
 801a30c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a30e:	881b      	ldrh	r3, [r3, #0]
 801a310:	b29b      	uxth	r3, r3
 801a312:	4a05      	ldr	r2, [pc, #20]	@ (801a328 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a314:	4313      	orrs	r3, r2
 801a316:	b29a      	uxth	r2, r3
 801a318:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a31a:	801a      	strh	r2, [r3, #0]
 801a31c:	e03f      	b.n	801a39e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a31e:	46c0      	nop			@ (mov r8, r8)
 801a320:	00000402 	.word	0x00000402
 801a324:	00000406 	.word	0x00000406
 801a328:	ffff8000 	.word	0xffff8000
 801a32c:	ffff8f8f 	.word	0xffff8f8f
 801a330:	ffffc080 	.word	0xffffc080
 801a334:	228c      	movs	r2, #140	@ 0x8c
 801a336:	18bb      	adds	r3, r7, r2
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	085b      	lsrs	r3, r3, #1
 801a33c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a33e:	18bb      	adds	r3, r7, r2
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	2201      	movs	r2, #1
 801a344:	4013      	ands	r3, r2
 801a346:	d002      	beq.n	801a34e <HAL_PCD_EP_DB_Transmit+0x752>
 801a348:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a34a:	3301      	adds	r3, #1
 801a34c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a34e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a350:	881b      	ldrh	r3, [r3, #0]
 801a352:	b29a      	uxth	r2, r3
 801a354:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a356:	b29b      	uxth	r3, r3
 801a358:	029b      	lsls	r3, r3, #10
 801a35a:	b29b      	uxth	r3, r3
 801a35c:	4313      	orrs	r3, r2
 801a35e:	b29a      	uxth	r2, r3
 801a360:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a362:	801a      	strh	r2, [r3, #0]
 801a364:	e01b      	b.n	801a39e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a366:	68bb      	ldr	r3, [r7, #8]
 801a368:	785b      	ldrb	r3, [r3, #1]
 801a36a:	2b01      	cmp	r3, #1
 801a36c:	d117      	bne.n	801a39e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	2250      	movs	r2, #80	@ 0x50
 801a374:	5a9b      	ldrh	r3, [r3, r2]
 801a376:	b29b      	uxth	r3, r3
 801a378:	001a      	movs	r2, r3
 801a37a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a37c:	189b      	adds	r3, r3, r2
 801a37e:	657b      	str	r3, [r7, #84]	@ 0x54
 801a380:	68bb      	ldr	r3, [r7, #8]
 801a382:	781b      	ldrb	r3, [r3, #0]
 801a384:	00da      	lsls	r2, r3, #3
 801a386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a388:	18d3      	adds	r3, r2, r3
 801a38a:	4a21      	ldr	r2, [pc, #132]	@ (801a410 <HAL_PCD_EP_DB_Transmit+0x814>)
 801a38c:	4694      	mov	ip, r2
 801a38e:	4463      	add	r3, ip
 801a390:	653b      	str	r3, [r7, #80]	@ 0x50
 801a392:	238c      	movs	r3, #140	@ 0x8c
 801a394:	18fb      	adds	r3, r7, r3
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	b29a      	uxth	r2, r3
 801a39a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a39c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	6818      	ldr	r0, [r3, #0]
 801a3a2:	68bb      	ldr	r3, [r7, #8]
 801a3a4:	6959      	ldr	r1, [r3, #20]
 801a3a6:	68bb      	ldr	r3, [r7, #8]
 801a3a8:	895a      	ldrh	r2, [r3, #10]
 801a3aa:	238c      	movs	r3, #140	@ 0x8c
 801a3ac:	18fb      	adds	r3, r7, r3
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	b29b      	uxth	r3, r3
 801a3b2:	f006 f9b7 	bl	8020724 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	001a      	movs	r2, r3
 801a3bc:	68bb      	ldr	r3, [r7, #8]
 801a3be:	781b      	ldrb	r3, [r3, #0]
 801a3c0:	009b      	lsls	r3, r3, #2
 801a3c2:	18d3      	adds	r3, r2, r3
 801a3c4:	881b      	ldrh	r3, [r3, #0]
 801a3c6:	b29a      	uxth	r2, r3
 801a3c8:	2014      	movs	r0, #20
 801a3ca:	183b      	adds	r3, r7, r0
 801a3cc:	4911      	ldr	r1, [pc, #68]	@ (801a414 <HAL_PCD_EP_DB_Transmit+0x818>)
 801a3ce:	400a      	ands	r2, r1
 801a3d0:	801a      	strh	r2, [r3, #0]
 801a3d2:	183b      	adds	r3, r7, r0
 801a3d4:	183a      	adds	r2, r7, r0
 801a3d6:	8812      	ldrh	r2, [r2, #0]
 801a3d8:	2110      	movs	r1, #16
 801a3da:	404a      	eors	r2, r1
 801a3dc:	801a      	strh	r2, [r3, #0]
 801a3de:	183b      	adds	r3, r7, r0
 801a3e0:	183a      	adds	r2, r7, r0
 801a3e2:	8812      	ldrh	r2, [r2, #0]
 801a3e4:	2120      	movs	r1, #32
 801a3e6:	404a      	eors	r2, r1
 801a3e8:	801a      	strh	r2, [r3, #0]
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	001a      	movs	r2, r3
 801a3f0:	68bb      	ldr	r3, [r7, #8]
 801a3f2:	781b      	ldrb	r3, [r3, #0]
 801a3f4:	009b      	lsls	r3, r3, #2
 801a3f6:	18d3      	adds	r3, r2, r3
 801a3f8:	183a      	adds	r2, r7, r0
 801a3fa:	8812      	ldrh	r2, [r2, #0]
 801a3fc:	4906      	ldr	r1, [pc, #24]	@ (801a418 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801a3fe:	430a      	orrs	r2, r1
 801a400:	b292      	uxth	r2, r2
 801a402:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801a404:	2300      	movs	r3, #0
}
 801a406:	0018      	movs	r0, r3
 801a408:	46bd      	mov	sp, r7
 801a40a:	b024      	add	sp, #144	@ 0x90
 801a40c:	bd80      	pop	{r7, pc}
 801a40e:	46c0      	nop			@ (mov r8, r8)
 801a410:	00000406 	.word	0x00000406
 801a414:	ffff8fbf 	.word	0xffff8fbf
 801a418:	ffff8080 	.word	0xffff8080

0801a41c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801a41c:	b590      	push	{r4, r7, lr}
 801a41e:	b087      	sub	sp, #28
 801a420:	af00      	add	r7, sp, #0
 801a422:	60f8      	str	r0, [r7, #12]
 801a424:	0008      	movs	r0, r1
 801a426:	0011      	movs	r1, r2
 801a428:	607b      	str	r3, [r7, #4]
 801a42a:	240a      	movs	r4, #10
 801a42c:	193b      	adds	r3, r7, r4
 801a42e:	1c02      	adds	r2, r0, #0
 801a430:	801a      	strh	r2, [r3, #0]
 801a432:	2308      	movs	r3, #8
 801a434:	18fb      	adds	r3, r7, r3
 801a436:	1c0a      	adds	r2, r1, #0
 801a438:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801a43a:	0021      	movs	r1, r4
 801a43c:	187b      	adds	r3, r7, r1
 801a43e:	881b      	ldrh	r3, [r3, #0]
 801a440:	2280      	movs	r2, #128	@ 0x80
 801a442:	4013      	ands	r3, r2
 801a444:	b29b      	uxth	r3, r3
 801a446:	2b00      	cmp	r3, #0
 801a448:	d00c      	beq.n	801a464 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a44a:	187b      	adds	r3, r7, r1
 801a44c:	881b      	ldrh	r3, [r3, #0]
 801a44e:	2207      	movs	r2, #7
 801a450:	4013      	ands	r3, r2
 801a452:	1c5a      	adds	r2, r3, #1
 801a454:	0013      	movs	r3, r2
 801a456:	009b      	lsls	r3, r3, #2
 801a458:	189b      	adds	r3, r3, r2
 801a45a:	00db      	lsls	r3, r3, #3
 801a45c:	68fa      	ldr	r2, [r7, #12]
 801a45e:	18d3      	adds	r3, r2, r3
 801a460:	617b      	str	r3, [r7, #20]
 801a462:	e00b      	b.n	801a47c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801a464:	230a      	movs	r3, #10
 801a466:	18fb      	adds	r3, r7, r3
 801a468:	881a      	ldrh	r2, [r3, #0]
 801a46a:	0013      	movs	r3, r2
 801a46c:	009b      	lsls	r3, r3, #2
 801a46e:	189b      	adds	r3, r3, r2
 801a470:	00db      	lsls	r3, r3, #3
 801a472:	3369      	adds	r3, #105	@ 0x69
 801a474:	33ff      	adds	r3, #255	@ 0xff
 801a476:	68fa      	ldr	r2, [r7, #12]
 801a478:	18d3      	adds	r3, r2, r3
 801a47a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801a47c:	2308      	movs	r3, #8
 801a47e:	18fb      	adds	r3, r7, r3
 801a480:	881b      	ldrh	r3, [r3, #0]
 801a482:	2b00      	cmp	r3, #0
 801a484:	d107      	bne.n	801a496 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801a486:	697b      	ldr	r3, [r7, #20]
 801a488:	2200      	movs	r2, #0
 801a48a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	b29a      	uxth	r2, r3
 801a490:	697b      	ldr	r3, [r7, #20]
 801a492:	80da      	strh	r2, [r3, #6]
 801a494:	e00b      	b.n	801a4ae <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801a496:	697b      	ldr	r3, [r7, #20]
 801a498:	2201      	movs	r2, #1
 801a49a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	b29a      	uxth	r2, r3
 801a4a0:	697b      	ldr	r3, [r7, #20]
 801a4a2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	0c1b      	lsrs	r3, r3, #16
 801a4a8:	b29a      	uxth	r2, r3
 801a4aa:	697b      	ldr	r3, [r7, #20]
 801a4ac:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801a4ae:	2300      	movs	r3, #0
}
 801a4b0:	0018      	movs	r0, r3
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	b007      	add	sp, #28
 801a4b6:	bd90      	pop	{r4, r7, pc}

0801a4b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b084      	sub	sp, #16
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801a4c6:	687a      	ldr	r2, [r7, #4]
 801a4c8:	23ba      	movs	r3, #186	@ 0xba
 801a4ca:	009b      	lsls	r3, r3, #2
 801a4cc:	2101      	movs	r1, #1
 801a4ce:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801a4d0:	687a      	ldr	r2, [r7, #4]
 801a4d2:	23b8      	movs	r3, #184	@ 0xb8
 801a4d4:	009b      	lsls	r3, r3, #2
 801a4d6:	2100      	movs	r1, #0
 801a4d8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	2254      	movs	r2, #84	@ 0x54
 801a4de:	5a9b      	ldrh	r3, [r3, r2]
 801a4e0:	b29b      	uxth	r3, r3
 801a4e2:	2201      	movs	r2, #1
 801a4e4:	4313      	orrs	r3, r2
 801a4e6:	b299      	uxth	r1, r3
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	2254      	movs	r2, #84	@ 0x54
 801a4ec:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801a4ee:	68fb      	ldr	r3, [r7, #12]
 801a4f0:	2254      	movs	r2, #84	@ 0x54
 801a4f2:	5a9b      	ldrh	r3, [r3, r2]
 801a4f4:	b29b      	uxth	r3, r3
 801a4f6:	2202      	movs	r2, #2
 801a4f8:	4313      	orrs	r3, r2
 801a4fa:	b299      	uxth	r1, r3
 801a4fc:	68fb      	ldr	r3, [r7, #12]
 801a4fe:	2254      	movs	r2, #84	@ 0x54
 801a500:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801a502:	2300      	movs	r3, #0
}
 801a504:	0018      	movs	r0, r3
 801a506:	46bd      	mov	sp, r7
 801a508:	b004      	add	sp, #16
 801a50a:	bd80      	pop	{r7, pc}

0801a50c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801a50c:	b580      	push	{r7, lr}
 801a50e:	b082      	sub	sp, #8
 801a510:	af00      	add	r7, sp, #0
 801a512:	6078      	str	r0, [r7, #4]
 801a514:	000a      	movs	r2, r1
 801a516:	1cfb      	adds	r3, r7, #3
 801a518:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801a51a:	46c0      	nop			@ (mov r8, r8)
 801a51c:	46bd      	mov	sp, r7
 801a51e:	b002      	add	sp, #8
 801a520:	bd80      	pop	{r7, pc}
	...

0801a524 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801a524:	b580      	push	{r7, lr}
 801a526:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801a528:	4b04      	ldr	r3, [pc, #16]	@ (801a53c <HAL_PWR_EnableBkUpAccess+0x18>)
 801a52a:	681a      	ldr	r2, [r3, #0]
 801a52c:	4b03      	ldr	r3, [pc, #12]	@ (801a53c <HAL_PWR_EnableBkUpAccess+0x18>)
 801a52e:	2180      	movs	r1, #128	@ 0x80
 801a530:	0049      	lsls	r1, r1, #1
 801a532:	430a      	orrs	r2, r1
 801a534:	601a      	str	r2, [r3, #0]
}
 801a536:	46c0      	nop			@ (mov r8, r8)
 801a538:	46bd      	mov	sp, r7
 801a53a:	bd80      	pop	{r7, pc}
 801a53c:	40007000 	.word	0x40007000

0801a540 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801a540:	b580      	push	{r7, lr}
 801a542:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801a544:	4b04      	ldr	r3, [pc, #16]	@ (801a558 <HAL_PWR_DisableBkUpAccess+0x18>)
 801a546:	681a      	ldr	r2, [r3, #0]
 801a548:	4b03      	ldr	r3, [pc, #12]	@ (801a558 <HAL_PWR_DisableBkUpAccess+0x18>)
 801a54a:	4904      	ldr	r1, [pc, #16]	@ (801a55c <HAL_PWR_DisableBkUpAccess+0x1c>)
 801a54c:	400a      	ands	r2, r1
 801a54e:	601a      	str	r2, [r3, #0]
}
 801a550:	46c0      	nop			@ (mov r8, r8)
 801a552:	46bd      	mov	sp, r7
 801a554:	bd80      	pop	{r7, pc}
 801a556:	46c0      	nop			@ (mov r8, r8)
 801a558:	40007000 	.word	0x40007000
 801a55c:	fffffeff 	.word	0xfffffeff

0801a560 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801a560:	b580      	push	{r7, lr}
 801a562:	b086      	sub	sp, #24
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
 801a568:	000a      	movs	r2, r1
 801a56a:	1cfb      	adds	r3, r7, #3
 801a56c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801a56e:	2300      	movs	r3, #0
 801a570:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801a572:	4b25      	ldr	r3, [pc, #148]	@ (801a608 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a574:	681a      	ldr	r2, [r3, #0]
 801a576:	2380      	movs	r3, #128	@ 0x80
 801a578:	009b      	lsls	r3, r3, #2
 801a57a:	4013      	ands	r3, r2
 801a57c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801a57e:	4b23      	ldr	r3, [pc, #140]	@ (801a60c <HAL_PWR_EnterSTOPMode+0xac>)
 801a580:	6a1b      	ldr	r3, [r3, #32]
 801a582:	2201      	movs	r2, #1
 801a584:	4013      	ands	r3, r2
 801a586:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801a588:	693b      	ldr	r3, [r7, #16]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d008      	beq.n	801a5a0 <HAL_PWR_EnterSTOPMode+0x40>
 801a58e:	68fb      	ldr	r3, [r7, #12]
 801a590:	2b00      	cmp	r3, #0
 801a592:	d005      	beq.n	801a5a0 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801a594:	4b1c      	ldr	r3, [pc, #112]	@ (801a608 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a596:	681a      	ldr	r2, [r3, #0]
 801a598:	4b1b      	ldr	r3, [pc, #108]	@ (801a608 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a59a:	491d      	ldr	r1, [pc, #116]	@ (801a610 <HAL_PWR_EnterSTOPMode+0xb0>)
 801a59c:	400a      	ands	r2, r1
 801a59e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801a5a0:	4b19      	ldr	r3, [pc, #100]	@ (801a608 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801a5a6:	697b      	ldr	r3, [r7, #20]
 801a5a8:	2203      	movs	r2, #3
 801a5aa:	4393      	bics	r3, r2
 801a5ac:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801a5ae:	697a      	ldr	r2, [r7, #20]
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	4313      	orrs	r3, r2
 801a5b4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801a5b6:	4b14      	ldr	r3, [pc, #80]	@ (801a608 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a5b8:	697a      	ldr	r2, [r7, #20]
 801a5ba:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a5bc:	4b15      	ldr	r3, [pc, #84]	@ (801a614 <HAL_PWR_EnterSTOPMode+0xb4>)
 801a5be:	691a      	ldr	r2, [r3, #16]
 801a5c0:	4b14      	ldr	r3, [pc, #80]	@ (801a614 <HAL_PWR_EnterSTOPMode+0xb4>)
 801a5c2:	2104      	movs	r1, #4
 801a5c4:	430a      	orrs	r2, r1
 801a5c6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801a5c8:	1cfb      	adds	r3, r7, #3
 801a5ca:	781b      	ldrb	r3, [r3, #0]
 801a5cc:	2b01      	cmp	r3, #1
 801a5ce:	d101      	bne.n	801a5d4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801a5d0:	bf30      	wfi
 801a5d2:	e002      	b.n	801a5da <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801a5d4:	bf40      	sev
    __WFE();
 801a5d6:	bf20      	wfe
    __WFE();
 801a5d8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a5da:	4b0e      	ldr	r3, [pc, #56]	@ (801a614 <HAL_PWR_EnterSTOPMode+0xb4>)
 801a5dc:	691a      	ldr	r2, [r3, #16]
 801a5de:	4b0d      	ldr	r3, [pc, #52]	@ (801a614 <HAL_PWR_EnterSTOPMode+0xb4>)
 801a5e0:	2104      	movs	r1, #4
 801a5e2:	438a      	bics	r2, r1
 801a5e4:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801a5e6:	693b      	ldr	r3, [r7, #16]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d009      	beq.n	801a600 <HAL_PWR_EnterSTOPMode+0xa0>
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d006      	beq.n	801a600 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801a5f2:	4b05      	ldr	r3, [pc, #20]	@ (801a608 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a5f4:	681a      	ldr	r2, [r3, #0]
 801a5f6:	4b04      	ldr	r3, [pc, #16]	@ (801a608 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a5f8:	2180      	movs	r1, #128	@ 0x80
 801a5fa:	0089      	lsls	r1, r1, #2
 801a5fc:	430a      	orrs	r2, r1
 801a5fe:	601a      	str	r2, [r3, #0]
  }
}
 801a600:	46c0      	nop			@ (mov r8, r8)
 801a602:	46bd      	mov	sp, r7
 801a604:	b006      	add	sp, #24
 801a606:	bd80      	pop	{r7, pc}
 801a608:	40007000 	.word	0x40007000
 801a60c:	40010000 	.word	0x40010000
 801a610:	fffffdff 	.word	0xfffffdff
 801a614:	e000ed00 	.word	0xe000ed00

0801a618 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 801a618:	b580      	push	{r7, lr}
 801a61a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 801a61c:	4b07      	ldr	r3, [pc, #28]	@ (801a63c <HAL_PWR_EnterSTANDBYMode+0x24>)
 801a61e:	681a      	ldr	r2, [r3, #0]
 801a620:	4b06      	ldr	r3, [pc, #24]	@ (801a63c <HAL_PWR_EnterSTANDBYMode+0x24>)
 801a622:	2102      	movs	r1, #2
 801a624:	430a      	orrs	r2, r1
 801a626:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a628:	4b05      	ldr	r3, [pc, #20]	@ (801a640 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801a62a:	691a      	ldr	r2, [r3, #16]
 801a62c:	4b04      	ldr	r3, [pc, #16]	@ (801a640 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801a62e:	2104      	movs	r1, #4
 801a630:	430a      	orrs	r2, r1
 801a632:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 801a634:	bf30      	wfi
}
 801a636:	46c0      	nop			@ (mov r8, r8)
 801a638:	46bd      	mov	sp, r7
 801a63a:	bd80      	pop	{r7, pc}
 801a63c:	40007000 	.word	0x40007000
 801a640:	e000ed00 	.word	0xe000ed00

0801a644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a644:	b5b0      	push	{r4, r5, r7, lr}
 801a646:	b08a      	sub	sp, #40	@ 0x28
 801a648:	af00      	add	r7, sp, #0
 801a64a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d102      	bne.n	801a658 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801a652:	2301      	movs	r3, #1
 801a654:	f000 fbbf 	bl	801add6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a658:	4bc9      	ldr	r3, [pc, #804]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a65a:	68db      	ldr	r3, [r3, #12]
 801a65c:	220c      	movs	r2, #12
 801a65e:	4013      	ands	r3, r2
 801a660:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801a662:	4bc7      	ldr	r3, [pc, #796]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a664:	68da      	ldr	r2, [r3, #12]
 801a666:	2380      	movs	r3, #128	@ 0x80
 801a668:	025b      	lsls	r3, r3, #9
 801a66a:	4013      	ands	r3, r2
 801a66c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	2201      	movs	r2, #1
 801a674:	4013      	ands	r3, r2
 801a676:	d100      	bne.n	801a67a <HAL_RCC_OscConfig+0x36>
 801a678:	e07e      	b.n	801a778 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801a67a:	69fb      	ldr	r3, [r7, #28]
 801a67c:	2b08      	cmp	r3, #8
 801a67e:	d007      	beq.n	801a690 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801a680:	69fb      	ldr	r3, [r7, #28]
 801a682:	2b0c      	cmp	r3, #12
 801a684:	d112      	bne.n	801a6ac <HAL_RCC_OscConfig+0x68>
 801a686:	69ba      	ldr	r2, [r7, #24]
 801a688:	2380      	movs	r3, #128	@ 0x80
 801a68a:	025b      	lsls	r3, r3, #9
 801a68c:	429a      	cmp	r2, r3
 801a68e:	d10d      	bne.n	801a6ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a690:	4bbb      	ldr	r3, [pc, #748]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a692:	681a      	ldr	r2, [r3, #0]
 801a694:	2380      	movs	r3, #128	@ 0x80
 801a696:	029b      	lsls	r3, r3, #10
 801a698:	4013      	ands	r3, r2
 801a69a:	d100      	bne.n	801a69e <HAL_RCC_OscConfig+0x5a>
 801a69c:	e06b      	b.n	801a776 <HAL_RCC_OscConfig+0x132>
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	685b      	ldr	r3, [r3, #4]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d167      	bne.n	801a776 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801a6a6:	2301      	movs	r3, #1
 801a6a8:	f000 fb95 	bl	801add6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	685a      	ldr	r2, [r3, #4]
 801a6b0:	2380      	movs	r3, #128	@ 0x80
 801a6b2:	025b      	lsls	r3, r3, #9
 801a6b4:	429a      	cmp	r2, r3
 801a6b6:	d107      	bne.n	801a6c8 <HAL_RCC_OscConfig+0x84>
 801a6b8:	4bb1      	ldr	r3, [pc, #708]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a6ba:	681a      	ldr	r2, [r3, #0]
 801a6bc:	4bb0      	ldr	r3, [pc, #704]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a6be:	2180      	movs	r1, #128	@ 0x80
 801a6c0:	0249      	lsls	r1, r1, #9
 801a6c2:	430a      	orrs	r2, r1
 801a6c4:	601a      	str	r2, [r3, #0]
 801a6c6:	e027      	b.n	801a718 <HAL_RCC_OscConfig+0xd4>
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	685a      	ldr	r2, [r3, #4]
 801a6cc:	23a0      	movs	r3, #160	@ 0xa0
 801a6ce:	02db      	lsls	r3, r3, #11
 801a6d0:	429a      	cmp	r2, r3
 801a6d2:	d10e      	bne.n	801a6f2 <HAL_RCC_OscConfig+0xae>
 801a6d4:	4baa      	ldr	r3, [pc, #680]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a6d6:	681a      	ldr	r2, [r3, #0]
 801a6d8:	4ba9      	ldr	r3, [pc, #676]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a6da:	2180      	movs	r1, #128	@ 0x80
 801a6dc:	02c9      	lsls	r1, r1, #11
 801a6de:	430a      	orrs	r2, r1
 801a6e0:	601a      	str	r2, [r3, #0]
 801a6e2:	4ba7      	ldr	r3, [pc, #668]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a6e4:	681a      	ldr	r2, [r3, #0]
 801a6e6:	4ba6      	ldr	r3, [pc, #664]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a6e8:	2180      	movs	r1, #128	@ 0x80
 801a6ea:	0249      	lsls	r1, r1, #9
 801a6ec:	430a      	orrs	r2, r1
 801a6ee:	601a      	str	r2, [r3, #0]
 801a6f0:	e012      	b.n	801a718 <HAL_RCC_OscConfig+0xd4>
 801a6f2:	4ba3      	ldr	r3, [pc, #652]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a6f4:	681a      	ldr	r2, [r3, #0]
 801a6f6:	4ba2      	ldr	r3, [pc, #648]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a6f8:	49a2      	ldr	r1, [pc, #648]	@ (801a984 <HAL_RCC_OscConfig+0x340>)
 801a6fa:	400a      	ands	r2, r1
 801a6fc:	601a      	str	r2, [r3, #0]
 801a6fe:	4ba0      	ldr	r3, [pc, #640]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a700:	681a      	ldr	r2, [r3, #0]
 801a702:	2380      	movs	r3, #128	@ 0x80
 801a704:	025b      	lsls	r3, r3, #9
 801a706:	4013      	ands	r3, r2
 801a708:	60fb      	str	r3, [r7, #12]
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	4b9c      	ldr	r3, [pc, #624]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a70e:	681a      	ldr	r2, [r3, #0]
 801a710:	4b9b      	ldr	r3, [pc, #620]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a712:	499d      	ldr	r1, [pc, #628]	@ (801a988 <HAL_RCC_OscConfig+0x344>)
 801a714:	400a      	ands	r2, r1
 801a716:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	685b      	ldr	r3, [r3, #4]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d015      	beq.n	801a74c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a720:	f7f9 fb54 	bl	8013dcc <HAL_GetTick>
 801a724:	0003      	movs	r3, r0
 801a726:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a728:	e009      	b.n	801a73e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a72a:	f7f9 fb4f 	bl	8013dcc <HAL_GetTick>
 801a72e:	0002      	movs	r2, r0
 801a730:	697b      	ldr	r3, [r7, #20]
 801a732:	1ad3      	subs	r3, r2, r3
 801a734:	2b64      	cmp	r3, #100	@ 0x64
 801a736:	d902      	bls.n	801a73e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a738:	2303      	movs	r3, #3
 801a73a:	f000 fb4c 	bl	801add6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a73e:	4b90      	ldr	r3, [pc, #576]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a740:	681a      	ldr	r2, [r3, #0]
 801a742:	2380      	movs	r3, #128	@ 0x80
 801a744:	029b      	lsls	r3, r3, #10
 801a746:	4013      	ands	r3, r2
 801a748:	d0ef      	beq.n	801a72a <HAL_RCC_OscConfig+0xe6>
 801a74a:	e015      	b.n	801a778 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a74c:	f7f9 fb3e 	bl	8013dcc <HAL_GetTick>
 801a750:	0003      	movs	r3, r0
 801a752:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a754:	e008      	b.n	801a768 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a756:	f7f9 fb39 	bl	8013dcc <HAL_GetTick>
 801a75a:	0002      	movs	r2, r0
 801a75c:	697b      	ldr	r3, [r7, #20]
 801a75e:	1ad3      	subs	r3, r2, r3
 801a760:	2b64      	cmp	r3, #100	@ 0x64
 801a762:	d901      	bls.n	801a768 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801a764:	2303      	movs	r3, #3
 801a766:	e336      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a768:	4b85      	ldr	r3, [pc, #532]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a76a:	681a      	ldr	r2, [r3, #0]
 801a76c:	2380      	movs	r3, #128	@ 0x80
 801a76e:	029b      	lsls	r3, r3, #10
 801a770:	4013      	ands	r3, r2
 801a772:	d1f0      	bne.n	801a756 <HAL_RCC_OscConfig+0x112>
 801a774:	e000      	b.n	801a778 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a776:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	2202      	movs	r2, #2
 801a77e:	4013      	ands	r3, r2
 801a780:	d100      	bne.n	801a784 <HAL_RCC_OscConfig+0x140>
 801a782:	e099      	b.n	801a8b8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	68db      	ldr	r3, [r3, #12]
 801a788:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801a78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a78c:	2220      	movs	r2, #32
 801a78e:	4013      	ands	r3, r2
 801a790:	d009      	beq.n	801a7a6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801a792:	4b7b      	ldr	r3, [pc, #492]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a794:	681a      	ldr	r2, [r3, #0]
 801a796:	4b7a      	ldr	r3, [pc, #488]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a798:	2120      	movs	r1, #32
 801a79a:	430a      	orrs	r2, r1
 801a79c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801a79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7a0:	2220      	movs	r2, #32
 801a7a2:	4393      	bics	r3, r2
 801a7a4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801a7a6:	69fb      	ldr	r3, [r7, #28]
 801a7a8:	2b04      	cmp	r3, #4
 801a7aa:	d005      	beq.n	801a7b8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801a7ac:	69fb      	ldr	r3, [r7, #28]
 801a7ae:	2b0c      	cmp	r3, #12
 801a7b0:	d13e      	bne.n	801a830 <HAL_RCC_OscConfig+0x1ec>
 801a7b2:	69bb      	ldr	r3, [r7, #24]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d13b      	bne.n	801a830 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801a7b8:	4b71      	ldr	r3, [pc, #452]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	2204      	movs	r2, #4
 801a7be:	4013      	ands	r3, r2
 801a7c0:	d004      	beq.n	801a7cc <HAL_RCC_OscConfig+0x188>
 801a7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d101      	bne.n	801a7cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801a7c8:	2301      	movs	r3, #1
 801a7ca:	e304      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a7cc:	4b6c      	ldr	r3, [pc, #432]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a7ce:	685b      	ldr	r3, [r3, #4]
 801a7d0:	4a6e      	ldr	r2, [pc, #440]	@ (801a98c <HAL_RCC_OscConfig+0x348>)
 801a7d2:	4013      	ands	r3, r2
 801a7d4:	0019      	movs	r1, r3
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	691b      	ldr	r3, [r3, #16]
 801a7da:	021a      	lsls	r2, r3, #8
 801a7dc:	4b68      	ldr	r3, [pc, #416]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a7de:	430a      	orrs	r2, r1
 801a7e0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801a7e2:	4b67      	ldr	r3, [pc, #412]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	2209      	movs	r2, #9
 801a7e8:	4393      	bics	r3, r2
 801a7ea:	0019      	movs	r1, r3
 801a7ec:	4b64      	ldr	r3, [pc, #400]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a7ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a7f0:	430a      	orrs	r2, r1
 801a7f2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a7f4:	f000 fc42 	bl	801b07c <HAL_RCC_GetSysClockFreq>
 801a7f8:	0001      	movs	r1, r0
 801a7fa:	4b61      	ldr	r3, [pc, #388]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a7fc:	68db      	ldr	r3, [r3, #12]
 801a7fe:	091b      	lsrs	r3, r3, #4
 801a800:	220f      	movs	r2, #15
 801a802:	4013      	ands	r3, r2
 801a804:	4a62      	ldr	r2, [pc, #392]	@ (801a990 <HAL_RCC_OscConfig+0x34c>)
 801a806:	5cd3      	ldrb	r3, [r2, r3]
 801a808:	000a      	movs	r2, r1
 801a80a:	40da      	lsrs	r2, r3
 801a80c:	4b61      	ldr	r3, [pc, #388]	@ (801a994 <HAL_RCC_OscConfig+0x350>)
 801a80e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801a810:	4b61      	ldr	r3, [pc, #388]	@ (801a998 <HAL_RCC_OscConfig+0x354>)
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	2513      	movs	r5, #19
 801a816:	197c      	adds	r4, r7, r5
 801a818:	0018      	movs	r0, r3
 801a81a:	f7f9 fa91 	bl	8013d40 <HAL_InitTick>
 801a81e:	0003      	movs	r3, r0
 801a820:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801a822:	197b      	adds	r3, r7, r5
 801a824:	781b      	ldrb	r3, [r3, #0]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d046      	beq.n	801a8b8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801a82a:	197b      	adds	r3, r7, r5
 801a82c:	781b      	ldrb	r3, [r3, #0]
 801a82e:	e2d2      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801a830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a832:	2b00      	cmp	r3, #0
 801a834:	d027      	beq.n	801a886 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801a836:	4b52      	ldr	r3, [pc, #328]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	2209      	movs	r2, #9
 801a83c:	4393      	bics	r3, r2
 801a83e:	0019      	movs	r1, r3
 801a840:	4b4f      	ldr	r3, [pc, #316]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a844:	430a      	orrs	r2, r1
 801a846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a848:	f7f9 fac0 	bl	8013dcc <HAL_GetTick>
 801a84c:	0003      	movs	r3, r0
 801a84e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a850:	e008      	b.n	801a864 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a852:	f7f9 fabb 	bl	8013dcc <HAL_GetTick>
 801a856:	0002      	movs	r2, r0
 801a858:	697b      	ldr	r3, [r7, #20]
 801a85a:	1ad3      	subs	r3, r2, r3
 801a85c:	2b02      	cmp	r3, #2
 801a85e:	d901      	bls.n	801a864 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801a860:	2303      	movs	r3, #3
 801a862:	e2b8      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a864:	4b46      	ldr	r3, [pc, #280]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	2204      	movs	r2, #4
 801a86a:	4013      	ands	r3, r2
 801a86c:	d0f1      	beq.n	801a852 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a86e:	4b44      	ldr	r3, [pc, #272]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a870:	685b      	ldr	r3, [r3, #4]
 801a872:	4a46      	ldr	r2, [pc, #280]	@ (801a98c <HAL_RCC_OscConfig+0x348>)
 801a874:	4013      	ands	r3, r2
 801a876:	0019      	movs	r1, r3
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	691b      	ldr	r3, [r3, #16]
 801a87c:	021a      	lsls	r2, r3, #8
 801a87e:	4b40      	ldr	r3, [pc, #256]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a880:	430a      	orrs	r2, r1
 801a882:	605a      	str	r2, [r3, #4]
 801a884:	e018      	b.n	801a8b8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a886:	4b3e      	ldr	r3, [pc, #248]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a888:	681a      	ldr	r2, [r3, #0]
 801a88a:	4b3d      	ldr	r3, [pc, #244]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a88c:	2101      	movs	r1, #1
 801a88e:	438a      	bics	r2, r1
 801a890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a892:	f7f9 fa9b 	bl	8013dcc <HAL_GetTick>
 801a896:	0003      	movs	r3, r0
 801a898:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a89a:	e008      	b.n	801a8ae <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a89c:	f7f9 fa96 	bl	8013dcc <HAL_GetTick>
 801a8a0:	0002      	movs	r2, r0
 801a8a2:	697b      	ldr	r3, [r7, #20]
 801a8a4:	1ad3      	subs	r3, r2, r3
 801a8a6:	2b02      	cmp	r3, #2
 801a8a8:	d901      	bls.n	801a8ae <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801a8aa:	2303      	movs	r3, #3
 801a8ac:	e293      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a8ae:	4b34      	ldr	r3, [pc, #208]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	2204      	movs	r2, #4
 801a8b4:	4013      	ands	r3, r2
 801a8b6:	d1f1      	bne.n	801a89c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	2210      	movs	r2, #16
 801a8be:	4013      	ands	r3, r2
 801a8c0:	d100      	bne.n	801a8c4 <HAL_RCC_OscConfig+0x280>
 801a8c2:	e0a2      	b.n	801aa0a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801a8c4:	69fb      	ldr	r3, [r7, #28]
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d140      	bne.n	801a94c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801a8ca:	4b2d      	ldr	r3, [pc, #180]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a8cc:	681a      	ldr	r2, [r3, #0]
 801a8ce:	2380      	movs	r3, #128	@ 0x80
 801a8d0:	009b      	lsls	r3, r3, #2
 801a8d2:	4013      	ands	r3, r2
 801a8d4:	d005      	beq.n	801a8e2 <HAL_RCC_OscConfig+0x29e>
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	69db      	ldr	r3, [r3, #28]
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d101      	bne.n	801a8e2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801a8de:	2301      	movs	r3, #1
 801a8e0:	e279      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a8e2:	4b27      	ldr	r3, [pc, #156]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a8e4:	685b      	ldr	r3, [r3, #4]
 801a8e6:	4a2d      	ldr	r2, [pc, #180]	@ (801a99c <HAL_RCC_OscConfig+0x358>)
 801a8e8:	4013      	ands	r3, r2
 801a8ea:	0019      	movs	r1, r3
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a8f0:	4b23      	ldr	r3, [pc, #140]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a8f2:	430a      	orrs	r2, r1
 801a8f4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a8f6:	4b22      	ldr	r3, [pc, #136]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a8f8:	685b      	ldr	r3, [r3, #4]
 801a8fa:	021b      	lsls	r3, r3, #8
 801a8fc:	0a19      	lsrs	r1, r3, #8
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	6a1b      	ldr	r3, [r3, #32]
 801a902:	061a      	lsls	r2, r3, #24
 801a904:	4b1e      	ldr	r3, [pc, #120]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a906:	430a      	orrs	r2, r1
 801a908:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a90e:	0b5b      	lsrs	r3, r3, #13
 801a910:	3301      	adds	r3, #1
 801a912:	2280      	movs	r2, #128	@ 0x80
 801a914:	0212      	lsls	r2, r2, #8
 801a916:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801a918:	4b19      	ldr	r3, [pc, #100]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a91a:	68db      	ldr	r3, [r3, #12]
 801a91c:	091b      	lsrs	r3, r3, #4
 801a91e:	210f      	movs	r1, #15
 801a920:	400b      	ands	r3, r1
 801a922:	491b      	ldr	r1, [pc, #108]	@ (801a990 <HAL_RCC_OscConfig+0x34c>)
 801a924:	5ccb      	ldrb	r3, [r1, r3]
 801a926:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801a928:	4b1a      	ldr	r3, [pc, #104]	@ (801a994 <HAL_RCC_OscConfig+0x350>)
 801a92a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801a92c:	4b1a      	ldr	r3, [pc, #104]	@ (801a998 <HAL_RCC_OscConfig+0x354>)
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	2513      	movs	r5, #19
 801a932:	197c      	adds	r4, r7, r5
 801a934:	0018      	movs	r0, r3
 801a936:	f7f9 fa03 	bl	8013d40 <HAL_InitTick>
 801a93a:	0003      	movs	r3, r0
 801a93c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801a93e:	197b      	adds	r3, r7, r5
 801a940:	781b      	ldrb	r3, [r3, #0]
 801a942:	2b00      	cmp	r3, #0
 801a944:	d061      	beq.n	801aa0a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801a946:	197b      	adds	r3, r7, r5
 801a948:	781b      	ldrb	r3, [r3, #0]
 801a94a:	e244      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	69db      	ldr	r3, [r3, #28]
 801a950:	2b00      	cmp	r3, #0
 801a952:	d040      	beq.n	801a9d6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801a954:	4b0a      	ldr	r3, [pc, #40]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a956:	681a      	ldr	r2, [r3, #0]
 801a958:	4b09      	ldr	r3, [pc, #36]	@ (801a980 <HAL_RCC_OscConfig+0x33c>)
 801a95a:	2180      	movs	r1, #128	@ 0x80
 801a95c:	0049      	lsls	r1, r1, #1
 801a95e:	430a      	orrs	r2, r1
 801a960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a962:	f7f9 fa33 	bl	8013dcc <HAL_GetTick>
 801a966:	0003      	movs	r3, r0
 801a968:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a96a:	e019      	b.n	801a9a0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a96c:	f7f9 fa2e 	bl	8013dcc <HAL_GetTick>
 801a970:	0002      	movs	r2, r0
 801a972:	697b      	ldr	r3, [r7, #20]
 801a974:	1ad3      	subs	r3, r2, r3
 801a976:	2b02      	cmp	r3, #2
 801a978:	d912      	bls.n	801a9a0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801a97a:	2303      	movs	r3, #3
 801a97c:	e22b      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
 801a97e:	46c0      	nop			@ (mov r8, r8)
 801a980:	40021000 	.word	0x40021000
 801a984:	fffeffff 	.word	0xfffeffff
 801a988:	fffbffff 	.word	0xfffbffff
 801a98c:	ffffe0ff 	.word	0xffffe0ff
 801a990:	0802de50 	.word	0x0802de50
 801a994:	200000e0 	.word	0x200000e0
 801a998:	200000f0 	.word	0x200000f0
 801a99c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a9a0:	4bca      	ldr	r3, [pc, #808]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801a9a2:	681a      	ldr	r2, [r3, #0]
 801a9a4:	2380      	movs	r3, #128	@ 0x80
 801a9a6:	009b      	lsls	r3, r3, #2
 801a9a8:	4013      	ands	r3, r2
 801a9aa:	d0df      	beq.n	801a96c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a9ac:	4bc7      	ldr	r3, [pc, #796]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801a9ae:	685b      	ldr	r3, [r3, #4]
 801a9b0:	4ac7      	ldr	r2, [pc, #796]	@ (801acd0 <HAL_RCC_OscConfig+0x68c>)
 801a9b2:	4013      	ands	r3, r2
 801a9b4:	0019      	movs	r1, r3
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a9ba:	4bc4      	ldr	r3, [pc, #784]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801a9bc:	430a      	orrs	r2, r1
 801a9be:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a9c0:	4bc2      	ldr	r3, [pc, #776]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801a9c2:	685b      	ldr	r3, [r3, #4]
 801a9c4:	021b      	lsls	r3, r3, #8
 801a9c6:	0a19      	lsrs	r1, r3, #8
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	6a1b      	ldr	r3, [r3, #32]
 801a9cc:	061a      	lsls	r2, r3, #24
 801a9ce:	4bbf      	ldr	r3, [pc, #764]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801a9d0:	430a      	orrs	r2, r1
 801a9d2:	605a      	str	r2, [r3, #4]
 801a9d4:	e019      	b.n	801aa0a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801a9d6:	4bbd      	ldr	r3, [pc, #756]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801a9d8:	681a      	ldr	r2, [r3, #0]
 801a9da:	4bbc      	ldr	r3, [pc, #752]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801a9dc:	49bd      	ldr	r1, [pc, #756]	@ (801acd4 <HAL_RCC_OscConfig+0x690>)
 801a9de:	400a      	ands	r2, r1
 801a9e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a9e2:	f7f9 f9f3 	bl	8013dcc <HAL_GetTick>
 801a9e6:	0003      	movs	r3, r0
 801a9e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801a9ea:	e008      	b.n	801a9fe <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a9ec:	f7f9 f9ee 	bl	8013dcc <HAL_GetTick>
 801a9f0:	0002      	movs	r2, r0
 801a9f2:	697b      	ldr	r3, [r7, #20]
 801a9f4:	1ad3      	subs	r3, r2, r3
 801a9f6:	2b02      	cmp	r3, #2
 801a9f8:	d901      	bls.n	801a9fe <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801a9fa:	2303      	movs	r3, #3
 801a9fc:	e1eb      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801a9fe:	4bb3      	ldr	r3, [pc, #716]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801aa00:	681a      	ldr	r2, [r3, #0]
 801aa02:	2380      	movs	r3, #128	@ 0x80
 801aa04:	009b      	lsls	r3, r3, #2
 801aa06:	4013      	ands	r3, r2
 801aa08:	d1f0      	bne.n	801a9ec <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	2208      	movs	r2, #8
 801aa10:	4013      	ands	r3, r2
 801aa12:	d036      	beq.n	801aa82 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	695b      	ldr	r3, [r3, #20]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d019      	beq.n	801aa50 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801aa1c:	4bab      	ldr	r3, [pc, #684]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801aa1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801aa20:	4baa      	ldr	r3, [pc, #680]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801aa22:	2101      	movs	r1, #1
 801aa24:	430a      	orrs	r2, r1
 801aa26:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801aa28:	f7f9 f9d0 	bl	8013dcc <HAL_GetTick>
 801aa2c:	0003      	movs	r3, r0
 801aa2e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801aa30:	e008      	b.n	801aa44 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801aa32:	f7f9 f9cb 	bl	8013dcc <HAL_GetTick>
 801aa36:	0002      	movs	r2, r0
 801aa38:	697b      	ldr	r3, [r7, #20]
 801aa3a:	1ad3      	subs	r3, r2, r3
 801aa3c:	2b02      	cmp	r3, #2
 801aa3e:	d901      	bls.n	801aa44 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801aa40:	2303      	movs	r3, #3
 801aa42:	e1c8      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801aa44:	4ba1      	ldr	r3, [pc, #644]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801aa46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aa48:	2202      	movs	r2, #2
 801aa4a:	4013      	ands	r3, r2
 801aa4c:	d0f1      	beq.n	801aa32 <HAL_RCC_OscConfig+0x3ee>
 801aa4e:	e018      	b.n	801aa82 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801aa50:	4b9e      	ldr	r3, [pc, #632]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801aa52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801aa54:	4b9d      	ldr	r3, [pc, #628]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801aa56:	2101      	movs	r1, #1
 801aa58:	438a      	bics	r2, r1
 801aa5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801aa5c:	f7f9 f9b6 	bl	8013dcc <HAL_GetTick>
 801aa60:	0003      	movs	r3, r0
 801aa62:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801aa64:	e008      	b.n	801aa78 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801aa66:	f7f9 f9b1 	bl	8013dcc <HAL_GetTick>
 801aa6a:	0002      	movs	r2, r0
 801aa6c:	697b      	ldr	r3, [r7, #20]
 801aa6e:	1ad3      	subs	r3, r2, r3
 801aa70:	2b02      	cmp	r3, #2
 801aa72:	d901      	bls.n	801aa78 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801aa74:	2303      	movs	r3, #3
 801aa76:	e1ae      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801aa78:	4b94      	ldr	r3, [pc, #592]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801aa7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aa7c:	2202      	movs	r2, #2
 801aa7e:	4013      	ands	r3, r2
 801aa80:	d1f1      	bne.n	801aa66 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	2204      	movs	r2, #4
 801aa88:	4013      	ands	r3, r2
 801aa8a:	d100      	bne.n	801aa8e <HAL_RCC_OscConfig+0x44a>
 801aa8c:	e0ae      	b.n	801abec <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801aa8e:	2023      	movs	r0, #35	@ 0x23
 801aa90:	183b      	adds	r3, r7, r0
 801aa92:	2200      	movs	r2, #0
 801aa94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801aa96:	4b8d      	ldr	r3, [pc, #564]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801aa98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801aa9a:	2380      	movs	r3, #128	@ 0x80
 801aa9c:	055b      	lsls	r3, r3, #21
 801aa9e:	4013      	ands	r3, r2
 801aaa0:	d109      	bne.n	801aab6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801aaa2:	4b8a      	ldr	r3, [pc, #552]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801aaa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801aaa6:	4b89      	ldr	r3, [pc, #548]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801aaa8:	2180      	movs	r1, #128	@ 0x80
 801aaaa:	0549      	lsls	r1, r1, #21
 801aaac:	430a      	orrs	r2, r1
 801aaae:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801aab0:	183b      	adds	r3, r7, r0
 801aab2:	2201      	movs	r2, #1
 801aab4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801aab6:	4b88      	ldr	r3, [pc, #544]	@ (801acd8 <HAL_RCC_OscConfig+0x694>)
 801aab8:	681a      	ldr	r2, [r3, #0]
 801aaba:	2380      	movs	r3, #128	@ 0x80
 801aabc:	005b      	lsls	r3, r3, #1
 801aabe:	4013      	ands	r3, r2
 801aac0:	d11a      	bne.n	801aaf8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801aac2:	4b85      	ldr	r3, [pc, #532]	@ (801acd8 <HAL_RCC_OscConfig+0x694>)
 801aac4:	681a      	ldr	r2, [r3, #0]
 801aac6:	4b84      	ldr	r3, [pc, #528]	@ (801acd8 <HAL_RCC_OscConfig+0x694>)
 801aac8:	2180      	movs	r1, #128	@ 0x80
 801aaca:	0049      	lsls	r1, r1, #1
 801aacc:	430a      	orrs	r2, r1
 801aace:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801aad0:	f7f9 f97c 	bl	8013dcc <HAL_GetTick>
 801aad4:	0003      	movs	r3, r0
 801aad6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801aad8:	e008      	b.n	801aaec <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801aada:	f7f9 f977 	bl	8013dcc <HAL_GetTick>
 801aade:	0002      	movs	r2, r0
 801aae0:	697b      	ldr	r3, [r7, #20]
 801aae2:	1ad3      	subs	r3, r2, r3
 801aae4:	2b64      	cmp	r3, #100	@ 0x64
 801aae6:	d901      	bls.n	801aaec <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801aae8:	2303      	movs	r3, #3
 801aaea:	e174      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801aaec:	4b7a      	ldr	r3, [pc, #488]	@ (801acd8 <HAL_RCC_OscConfig+0x694>)
 801aaee:	681a      	ldr	r2, [r3, #0]
 801aaf0:	2380      	movs	r3, #128	@ 0x80
 801aaf2:	005b      	lsls	r3, r3, #1
 801aaf4:	4013      	ands	r3, r2
 801aaf6:	d0f0      	beq.n	801aada <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	689a      	ldr	r2, [r3, #8]
 801aafc:	2380      	movs	r3, #128	@ 0x80
 801aafe:	005b      	lsls	r3, r3, #1
 801ab00:	429a      	cmp	r2, r3
 801ab02:	d107      	bne.n	801ab14 <HAL_RCC_OscConfig+0x4d0>
 801ab04:	4b71      	ldr	r3, [pc, #452]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ab08:	4b70      	ldr	r3, [pc, #448]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab0a:	2180      	movs	r1, #128	@ 0x80
 801ab0c:	0049      	lsls	r1, r1, #1
 801ab0e:	430a      	orrs	r2, r1
 801ab10:	651a      	str	r2, [r3, #80]	@ 0x50
 801ab12:	e031      	b.n	801ab78 <HAL_RCC_OscConfig+0x534>
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	689b      	ldr	r3, [r3, #8]
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d10c      	bne.n	801ab36 <HAL_RCC_OscConfig+0x4f2>
 801ab1c:	4b6b      	ldr	r3, [pc, #428]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ab20:	4b6a      	ldr	r3, [pc, #424]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab22:	496c      	ldr	r1, [pc, #432]	@ (801acd4 <HAL_RCC_OscConfig+0x690>)
 801ab24:	400a      	ands	r2, r1
 801ab26:	651a      	str	r2, [r3, #80]	@ 0x50
 801ab28:	4b68      	ldr	r3, [pc, #416]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ab2c:	4b67      	ldr	r3, [pc, #412]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab2e:	496b      	ldr	r1, [pc, #428]	@ (801acdc <HAL_RCC_OscConfig+0x698>)
 801ab30:	400a      	ands	r2, r1
 801ab32:	651a      	str	r2, [r3, #80]	@ 0x50
 801ab34:	e020      	b.n	801ab78 <HAL_RCC_OscConfig+0x534>
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	689a      	ldr	r2, [r3, #8]
 801ab3a:	23a0      	movs	r3, #160	@ 0xa0
 801ab3c:	00db      	lsls	r3, r3, #3
 801ab3e:	429a      	cmp	r2, r3
 801ab40:	d10e      	bne.n	801ab60 <HAL_RCC_OscConfig+0x51c>
 801ab42:	4b62      	ldr	r3, [pc, #392]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ab46:	4b61      	ldr	r3, [pc, #388]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab48:	2180      	movs	r1, #128	@ 0x80
 801ab4a:	00c9      	lsls	r1, r1, #3
 801ab4c:	430a      	orrs	r2, r1
 801ab4e:	651a      	str	r2, [r3, #80]	@ 0x50
 801ab50:	4b5e      	ldr	r3, [pc, #376]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ab54:	4b5d      	ldr	r3, [pc, #372]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab56:	2180      	movs	r1, #128	@ 0x80
 801ab58:	0049      	lsls	r1, r1, #1
 801ab5a:	430a      	orrs	r2, r1
 801ab5c:	651a      	str	r2, [r3, #80]	@ 0x50
 801ab5e:	e00b      	b.n	801ab78 <HAL_RCC_OscConfig+0x534>
 801ab60:	4b5a      	ldr	r3, [pc, #360]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ab64:	4b59      	ldr	r3, [pc, #356]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab66:	495b      	ldr	r1, [pc, #364]	@ (801acd4 <HAL_RCC_OscConfig+0x690>)
 801ab68:	400a      	ands	r2, r1
 801ab6a:	651a      	str	r2, [r3, #80]	@ 0x50
 801ab6c:	4b57      	ldr	r3, [pc, #348]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ab70:	4b56      	ldr	r3, [pc, #344]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ab72:	495a      	ldr	r1, [pc, #360]	@ (801acdc <HAL_RCC_OscConfig+0x698>)
 801ab74:	400a      	ands	r2, r1
 801ab76:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	689b      	ldr	r3, [r3, #8]
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d015      	beq.n	801abac <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801ab80:	f7f9 f924 	bl	8013dcc <HAL_GetTick>
 801ab84:	0003      	movs	r3, r0
 801ab86:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ab88:	e009      	b.n	801ab9e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801ab8a:	f7f9 f91f 	bl	8013dcc <HAL_GetTick>
 801ab8e:	0002      	movs	r2, r0
 801ab90:	697b      	ldr	r3, [r7, #20]
 801ab92:	1ad3      	subs	r3, r2, r3
 801ab94:	4a52      	ldr	r2, [pc, #328]	@ (801ace0 <HAL_RCC_OscConfig+0x69c>)
 801ab96:	4293      	cmp	r3, r2
 801ab98:	d901      	bls.n	801ab9e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801ab9a:	2303      	movs	r3, #3
 801ab9c:	e11b      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ab9e:	4b4b      	ldr	r3, [pc, #300]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801aba0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801aba2:	2380      	movs	r3, #128	@ 0x80
 801aba4:	009b      	lsls	r3, r3, #2
 801aba6:	4013      	ands	r3, r2
 801aba8:	d0ef      	beq.n	801ab8a <HAL_RCC_OscConfig+0x546>
 801abaa:	e014      	b.n	801abd6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801abac:	f7f9 f90e 	bl	8013dcc <HAL_GetTick>
 801abb0:	0003      	movs	r3, r0
 801abb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801abb4:	e009      	b.n	801abca <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801abb6:	f7f9 f909 	bl	8013dcc <HAL_GetTick>
 801abba:	0002      	movs	r2, r0
 801abbc:	697b      	ldr	r3, [r7, #20]
 801abbe:	1ad3      	subs	r3, r2, r3
 801abc0:	4a47      	ldr	r2, [pc, #284]	@ (801ace0 <HAL_RCC_OscConfig+0x69c>)
 801abc2:	4293      	cmp	r3, r2
 801abc4:	d901      	bls.n	801abca <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801abc6:	2303      	movs	r3, #3
 801abc8:	e105      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801abca:	4b40      	ldr	r3, [pc, #256]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801abcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801abce:	2380      	movs	r3, #128	@ 0x80
 801abd0:	009b      	lsls	r3, r3, #2
 801abd2:	4013      	ands	r3, r2
 801abd4:	d1ef      	bne.n	801abb6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801abd6:	2323      	movs	r3, #35	@ 0x23
 801abd8:	18fb      	adds	r3, r7, r3
 801abda:	781b      	ldrb	r3, [r3, #0]
 801abdc:	2b01      	cmp	r3, #1
 801abde:	d105      	bne.n	801abec <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801abe0:	4b3a      	ldr	r3, [pc, #232]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801abe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801abe4:	4b39      	ldr	r3, [pc, #228]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801abe6:	493f      	ldr	r1, [pc, #252]	@ (801ace4 <HAL_RCC_OscConfig+0x6a0>)
 801abe8:	400a      	ands	r2, r1
 801abea:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	2220      	movs	r2, #32
 801abf2:	4013      	ands	r3, r2
 801abf4:	d049      	beq.n	801ac8a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	699b      	ldr	r3, [r3, #24]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d026      	beq.n	801ac4c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801abfe:	4b33      	ldr	r3, [pc, #204]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ac00:	689a      	ldr	r2, [r3, #8]
 801ac02:	4b32      	ldr	r3, [pc, #200]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ac04:	2101      	movs	r1, #1
 801ac06:	430a      	orrs	r2, r1
 801ac08:	609a      	str	r2, [r3, #8]
 801ac0a:	4b30      	ldr	r3, [pc, #192]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ac0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ac0e:	4b2f      	ldr	r3, [pc, #188]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ac10:	2101      	movs	r1, #1
 801ac12:	430a      	orrs	r2, r1
 801ac14:	635a      	str	r2, [r3, #52]	@ 0x34
 801ac16:	4b34      	ldr	r3, [pc, #208]	@ (801ace8 <HAL_RCC_OscConfig+0x6a4>)
 801ac18:	6a1a      	ldr	r2, [r3, #32]
 801ac1a:	4b33      	ldr	r3, [pc, #204]	@ (801ace8 <HAL_RCC_OscConfig+0x6a4>)
 801ac1c:	2180      	movs	r1, #128	@ 0x80
 801ac1e:	0189      	lsls	r1, r1, #6
 801ac20:	430a      	orrs	r2, r1
 801ac22:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ac24:	f7f9 f8d2 	bl	8013dcc <HAL_GetTick>
 801ac28:	0003      	movs	r3, r0
 801ac2a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ac2c:	e008      	b.n	801ac40 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ac2e:	f7f9 f8cd 	bl	8013dcc <HAL_GetTick>
 801ac32:	0002      	movs	r2, r0
 801ac34:	697b      	ldr	r3, [r7, #20]
 801ac36:	1ad3      	subs	r3, r2, r3
 801ac38:	2b02      	cmp	r3, #2
 801ac3a:	d901      	bls.n	801ac40 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801ac3c:	2303      	movs	r3, #3
 801ac3e:	e0ca      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ac40:	4b22      	ldr	r3, [pc, #136]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ac42:	689b      	ldr	r3, [r3, #8]
 801ac44:	2202      	movs	r2, #2
 801ac46:	4013      	ands	r3, r2
 801ac48:	d0f1      	beq.n	801ac2e <HAL_RCC_OscConfig+0x5ea>
 801ac4a:	e01e      	b.n	801ac8a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801ac4c:	4b1f      	ldr	r3, [pc, #124]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ac4e:	689a      	ldr	r2, [r3, #8]
 801ac50:	4b1e      	ldr	r3, [pc, #120]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ac52:	2101      	movs	r1, #1
 801ac54:	438a      	bics	r2, r1
 801ac56:	609a      	str	r2, [r3, #8]
 801ac58:	4b23      	ldr	r3, [pc, #140]	@ (801ace8 <HAL_RCC_OscConfig+0x6a4>)
 801ac5a:	6a1a      	ldr	r2, [r3, #32]
 801ac5c:	4b22      	ldr	r3, [pc, #136]	@ (801ace8 <HAL_RCC_OscConfig+0x6a4>)
 801ac5e:	4923      	ldr	r1, [pc, #140]	@ (801acec <HAL_RCC_OscConfig+0x6a8>)
 801ac60:	400a      	ands	r2, r1
 801ac62:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ac64:	f7f9 f8b2 	bl	8013dcc <HAL_GetTick>
 801ac68:	0003      	movs	r3, r0
 801ac6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801ac6c:	e008      	b.n	801ac80 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ac6e:	f7f9 f8ad 	bl	8013dcc <HAL_GetTick>
 801ac72:	0002      	movs	r2, r0
 801ac74:	697b      	ldr	r3, [r7, #20]
 801ac76:	1ad3      	subs	r3, r2, r3
 801ac78:	2b02      	cmp	r3, #2
 801ac7a:	d901      	bls.n	801ac80 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801ac7c:	2303      	movs	r3, #3
 801ac7e:	e0aa      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801ac80:	4b12      	ldr	r3, [pc, #72]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801ac82:	689b      	ldr	r3, [r3, #8]
 801ac84:	2202      	movs	r2, #2
 801ac86:	4013      	ands	r3, r2
 801ac88:	d1f1      	bne.n	801ac6e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d100      	bne.n	801ac94 <HAL_RCC_OscConfig+0x650>
 801ac92:	e09f      	b.n	801add4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ac94:	69fb      	ldr	r3, [r7, #28]
 801ac96:	2b0c      	cmp	r3, #12
 801ac98:	d100      	bne.n	801ac9c <HAL_RCC_OscConfig+0x658>
 801ac9a:	e078      	b.n	801ad8e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aca0:	2b02      	cmp	r3, #2
 801aca2:	d159      	bne.n	801ad58 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801aca4:	4b09      	ldr	r3, [pc, #36]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801aca6:	681a      	ldr	r2, [r3, #0]
 801aca8:	4b08      	ldr	r3, [pc, #32]	@ (801accc <HAL_RCC_OscConfig+0x688>)
 801acaa:	4911      	ldr	r1, [pc, #68]	@ (801acf0 <HAL_RCC_OscConfig+0x6ac>)
 801acac:	400a      	ands	r2, r1
 801acae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801acb0:	f7f9 f88c 	bl	8013dcc <HAL_GetTick>
 801acb4:	0003      	movs	r3, r0
 801acb6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801acb8:	e01c      	b.n	801acf4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801acba:	f7f9 f887 	bl	8013dcc <HAL_GetTick>
 801acbe:	0002      	movs	r2, r0
 801acc0:	697b      	ldr	r3, [r7, #20]
 801acc2:	1ad3      	subs	r3, r2, r3
 801acc4:	2b02      	cmp	r3, #2
 801acc6:	d915      	bls.n	801acf4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801acc8:	2303      	movs	r3, #3
 801acca:	e084      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
 801accc:	40021000 	.word	0x40021000
 801acd0:	ffff1fff 	.word	0xffff1fff
 801acd4:	fffffeff 	.word	0xfffffeff
 801acd8:	40007000 	.word	0x40007000
 801acdc:	fffffbff 	.word	0xfffffbff
 801ace0:	00001388 	.word	0x00001388
 801ace4:	efffffff 	.word	0xefffffff
 801ace8:	40010000 	.word	0x40010000
 801acec:	ffffdfff 	.word	0xffffdfff
 801acf0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801acf4:	4b3a      	ldr	r3, [pc, #232]	@ (801ade0 <HAL_RCC_OscConfig+0x79c>)
 801acf6:	681a      	ldr	r2, [r3, #0]
 801acf8:	2380      	movs	r3, #128	@ 0x80
 801acfa:	049b      	lsls	r3, r3, #18
 801acfc:	4013      	ands	r3, r2
 801acfe:	d1dc      	bne.n	801acba <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801ad00:	4b37      	ldr	r3, [pc, #220]	@ (801ade0 <HAL_RCC_OscConfig+0x79c>)
 801ad02:	68db      	ldr	r3, [r3, #12]
 801ad04:	4a37      	ldr	r2, [pc, #220]	@ (801ade4 <HAL_RCC_OscConfig+0x7a0>)
 801ad06:	4013      	ands	r3, r2
 801ad08:	0019      	movs	r1, r3
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ad12:	431a      	orrs	r2, r3
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ad18:	431a      	orrs	r2, r3
 801ad1a:	4b31      	ldr	r3, [pc, #196]	@ (801ade0 <HAL_RCC_OscConfig+0x79c>)
 801ad1c:	430a      	orrs	r2, r1
 801ad1e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801ad20:	4b2f      	ldr	r3, [pc, #188]	@ (801ade0 <HAL_RCC_OscConfig+0x79c>)
 801ad22:	681a      	ldr	r2, [r3, #0]
 801ad24:	4b2e      	ldr	r3, [pc, #184]	@ (801ade0 <HAL_RCC_OscConfig+0x79c>)
 801ad26:	2180      	movs	r1, #128	@ 0x80
 801ad28:	0449      	lsls	r1, r1, #17
 801ad2a:	430a      	orrs	r2, r1
 801ad2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ad2e:	f7f9 f84d 	bl	8013dcc <HAL_GetTick>
 801ad32:	0003      	movs	r3, r0
 801ad34:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801ad36:	e008      	b.n	801ad4a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801ad38:	f7f9 f848 	bl	8013dcc <HAL_GetTick>
 801ad3c:	0002      	movs	r2, r0
 801ad3e:	697b      	ldr	r3, [r7, #20]
 801ad40:	1ad3      	subs	r3, r2, r3
 801ad42:	2b02      	cmp	r3, #2
 801ad44:	d901      	bls.n	801ad4a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801ad46:	2303      	movs	r3, #3
 801ad48:	e045      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801ad4a:	4b25      	ldr	r3, [pc, #148]	@ (801ade0 <HAL_RCC_OscConfig+0x79c>)
 801ad4c:	681a      	ldr	r2, [r3, #0]
 801ad4e:	2380      	movs	r3, #128	@ 0x80
 801ad50:	049b      	lsls	r3, r3, #18
 801ad52:	4013      	ands	r3, r2
 801ad54:	d0f0      	beq.n	801ad38 <HAL_RCC_OscConfig+0x6f4>
 801ad56:	e03d      	b.n	801add4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ad58:	4b21      	ldr	r3, [pc, #132]	@ (801ade0 <HAL_RCC_OscConfig+0x79c>)
 801ad5a:	681a      	ldr	r2, [r3, #0]
 801ad5c:	4b20      	ldr	r3, [pc, #128]	@ (801ade0 <HAL_RCC_OscConfig+0x79c>)
 801ad5e:	4922      	ldr	r1, [pc, #136]	@ (801ade8 <HAL_RCC_OscConfig+0x7a4>)
 801ad60:	400a      	ands	r2, r1
 801ad62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ad64:	f7f9 f832 	bl	8013dcc <HAL_GetTick>
 801ad68:	0003      	movs	r3, r0
 801ad6a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801ad6c:	e008      	b.n	801ad80 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801ad6e:	f7f9 f82d 	bl	8013dcc <HAL_GetTick>
 801ad72:	0002      	movs	r2, r0
 801ad74:	697b      	ldr	r3, [r7, #20]
 801ad76:	1ad3      	subs	r3, r2, r3
 801ad78:	2b02      	cmp	r3, #2
 801ad7a:	d901      	bls.n	801ad80 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801ad7c:	2303      	movs	r3, #3
 801ad7e:	e02a      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801ad80:	4b17      	ldr	r3, [pc, #92]	@ (801ade0 <HAL_RCC_OscConfig+0x79c>)
 801ad82:	681a      	ldr	r2, [r3, #0]
 801ad84:	2380      	movs	r3, #128	@ 0x80
 801ad86:	049b      	lsls	r3, r3, #18
 801ad88:	4013      	ands	r3, r2
 801ad8a:	d1f0      	bne.n	801ad6e <HAL_RCC_OscConfig+0x72a>
 801ad8c:	e022      	b.n	801add4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ad92:	2b01      	cmp	r3, #1
 801ad94:	d101      	bne.n	801ad9a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801ad96:	2301      	movs	r3, #1
 801ad98:	e01d      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801ad9a:	4b11      	ldr	r3, [pc, #68]	@ (801ade0 <HAL_RCC_OscConfig+0x79c>)
 801ad9c:	68db      	ldr	r3, [r3, #12]
 801ad9e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ada0:	69ba      	ldr	r2, [r7, #24]
 801ada2:	2380      	movs	r3, #128	@ 0x80
 801ada4:	025b      	lsls	r3, r3, #9
 801ada6:	401a      	ands	r2, r3
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801adac:	429a      	cmp	r2, r3
 801adae:	d10f      	bne.n	801add0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801adb0:	69ba      	ldr	r2, [r7, #24]
 801adb2:	23f0      	movs	r3, #240	@ 0xf0
 801adb4:	039b      	lsls	r3, r3, #14
 801adb6:	401a      	ands	r2, r3
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801adbc:	429a      	cmp	r2, r3
 801adbe:	d107      	bne.n	801add0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801adc0:	69ba      	ldr	r2, [r7, #24]
 801adc2:	23c0      	movs	r3, #192	@ 0xc0
 801adc4:	041b      	lsls	r3, r3, #16
 801adc6:	401a      	ands	r2, r3
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801adcc:	429a      	cmp	r2, r3
 801adce:	d001      	beq.n	801add4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801add0:	2301      	movs	r3, #1
 801add2:	e000      	b.n	801add6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801add4:	2300      	movs	r3, #0
}
 801add6:	0018      	movs	r0, r3
 801add8:	46bd      	mov	sp, r7
 801adda:	b00a      	add	sp, #40	@ 0x28
 801addc:	bdb0      	pop	{r4, r5, r7, pc}
 801adde:	46c0      	nop			@ (mov r8, r8)
 801ade0:	40021000 	.word	0x40021000
 801ade4:	ff02ffff 	.word	0xff02ffff
 801ade8:	feffffff 	.word	0xfeffffff

0801adec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801adec:	b5b0      	push	{r4, r5, r7, lr}
 801adee:	b084      	sub	sp, #16
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	6078      	str	r0, [r7, #4]
 801adf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d101      	bne.n	801ae00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801adfc:	2301      	movs	r3, #1
 801adfe:	e128      	b.n	801b052 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801ae00:	4b96      	ldr	r3, [pc, #600]	@ (801b05c <HAL_RCC_ClockConfig+0x270>)
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	2201      	movs	r2, #1
 801ae06:	4013      	ands	r3, r2
 801ae08:	683a      	ldr	r2, [r7, #0]
 801ae0a:	429a      	cmp	r2, r3
 801ae0c:	d91e      	bls.n	801ae4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ae0e:	4b93      	ldr	r3, [pc, #588]	@ (801b05c <HAL_RCC_ClockConfig+0x270>)
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	2201      	movs	r2, #1
 801ae14:	4393      	bics	r3, r2
 801ae16:	0019      	movs	r1, r3
 801ae18:	4b90      	ldr	r3, [pc, #576]	@ (801b05c <HAL_RCC_ClockConfig+0x270>)
 801ae1a:	683a      	ldr	r2, [r7, #0]
 801ae1c:	430a      	orrs	r2, r1
 801ae1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801ae20:	f7f8 ffd4 	bl	8013dcc <HAL_GetTick>
 801ae24:	0003      	movs	r3, r0
 801ae26:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ae28:	e009      	b.n	801ae3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ae2a:	f7f8 ffcf 	bl	8013dcc <HAL_GetTick>
 801ae2e:	0002      	movs	r2, r0
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	1ad3      	subs	r3, r2, r3
 801ae34:	4a8a      	ldr	r2, [pc, #552]	@ (801b060 <HAL_RCC_ClockConfig+0x274>)
 801ae36:	4293      	cmp	r3, r2
 801ae38:	d901      	bls.n	801ae3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801ae3a:	2303      	movs	r3, #3
 801ae3c:	e109      	b.n	801b052 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ae3e:	4b87      	ldr	r3, [pc, #540]	@ (801b05c <HAL_RCC_ClockConfig+0x270>)
 801ae40:	681b      	ldr	r3, [r3, #0]
 801ae42:	2201      	movs	r2, #1
 801ae44:	4013      	ands	r3, r2
 801ae46:	683a      	ldr	r2, [r7, #0]
 801ae48:	429a      	cmp	r2, r3
 801ae4a:	d1ee      	bne.n	801ae2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	2202      	movs	r2, #2
 801ae52:	4013      	ands	r3, r2
 801ae54:	d009      	beq.n	801ae6a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ae56:	4b83      	ldr	r3, [pc, #524]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801ae58:	68db      	ldr	r3, [r3, #12]
 801ae5a:	22f0      	movs	r2, #240	@ 0xf0
 801ae5c:	4393      	bics	r3, r2
 801ae5e:	0019      	movs	r1, r3
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	689a      	ldr	r2, [r3, #8]
 801ae64:	4b7f      	ldr	r3, [pc, #508]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801ae66:	430a      	orrs	r2, r1
 801ae68:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	2201      	movs	r2, #1
 801ae70:	4013      	ands	r3, r2
 801ae72:	d100      	bne.n	801ae76 <HAL_RCC_ClockConfig+0x8a>
 801ae74:	e089      	b.n	801af8a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	685b      	ldr	r3, [r3, #4]
 801ae7a:	2b02      	cmp	r3, #2
 801ae7c:	d107      	bne.n	801ae8e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ae7e:	4b79      	ldr	r3, [pc, #484]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801ae80:	681a      	ldr	r2, [r3, #0]
 801ae82:	2380      	movs	r3, #128	@ 0x80
 801ae84:	029b      	lsls	r3, r3, #10
 801ae86:	4013      	ands	r3, r2
 801ae88:	d120      	bne.n	801aecc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ae8a:	2301      	movs	r3, #1
 801ae8c:	e0e1      	b.n	801b052 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	685b      	ldr	r3, [r3, #4]
 801ae92:	2b03      	cmp	r3, #3
 801ae94:	d107      	bne.n	801aea6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ae96:	4b73      	ldr	r3, [pc, #460]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801ae98:	681a      	ldr	r2, [r3, #0]
 801ae9a:	2380      	movs	r3, #128	@ 0x80
 801ae9c:	049b      	lsls	r3, r3, #18
 801ae9e:	4013      	ands	r3, r2
 801aea0:	d114      	bne.n	801aecc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801aea2:	2301      	movs	r3, #1
 801aea4:	e0d5      	b.n	801b052 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	685b      	ldr	r3, [r3, #4]
 801aeaa:	2b01      	cmp	r3, #1
 801aeac:	d106      	bne.n	801aebc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801aeae:	4b6d      	ldr	r3, [pc, #436]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	2204      	movs	r2, #4
 801aeb4:	4013      	ands	r3, r2
 801aeb6:	d109      	bne.n	801aecc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801aeb8:	2301      	movs	r3, #1
 801aeba:	e0ca      	b.n	801b052 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801aebc:	4b69      	ldr	r3, [pc, #420]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801aebe:	681a      	ldr	r2, [r3, #0]
 801aec0:	2380      	movs	r3, #128	@ 0x80
 801aec2:	009b      	lsls	r3, r3, #2
 801aec4:	4013      	ands	r3, r2
 801aec6:	d101      	bne.n	801aecc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801aec8:	2301      	movs	r3, #1
 801aeca:	e0c2      	b.n	801b052 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801aecc:	4b65      	ldr	r3, [pc, #404]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801aece:	68db      	ldr	r3, [r3, #12]
 801aed0:	2203      	movs	r2, #3
 801aed2:	4393      	bics	r3, r2
 801aed4:	0019      	movs	r1, r3
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	685a      	ldr	r2, [r3, #4]
 801aeda:	4b62      	ldr	r3, [pc, #392]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801aedc:	430a      	orrs	r2, r1
 801aede:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801aee0:	f7f8 ff74 	bl	8013dcc <HAL_GetTick>
 801aee4:	0003      	movs	r3, r0
 801aee6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	685b      	ldr	r3, [r3, #4]
 801aeec:	2b02      	cmp	r3, #2
 801aeee:	d111      	bne.n	801af14 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801aef0:	e009      	b.n	801af06 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801aef2:	f7f8 ff6b 	bl	8013dcc <HAL_GetTick>
 801aef6:	0002      	movs	r2, r0
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	1ad3      	subs	r3, r2, r3
 801aefc:	4a58      	ldr	r2, [pc, #352]	@ (801b060 <HAL_RCC_ClockConfig+0x274>)
 801aefe:	4293      	cmp	r3, r2
 801af00:	d901      	bls.n	801af06 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801af02:	2303      	movs	r3, #3
 801af04:	e0a5      	b.n	801b052 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801af06:	4b57      	ldr	r3, [pc, #348]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801af08:	68db      	ldr	r3, [r3, #12]
 801af0a:	220c      	movs	r2, #12
 801af0c:	4013      	ands	r3, r2
 801af0e:	2b08      	cmp	r3, #8
 801af10:	d1ef      	bne.n	801aef2 <HAL_RCC_ClockConfig+0x106>
 801af12:	e03a      	b.n	801af8a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	685b      	ldr	r3, [r3, #4]
 801af18:	2b03      	cmp	r3, #3
 801af1a:	d111      	bne.n	801af40 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801af1c:	e009      	b.n	801af32 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801af1e:	f7f8 ff55 	bl	8013dcc <HAL_GetTick>
 801af22:	0002      	movs	r2, r0
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	1ad3      	subs	r3, r2, r3
 801af28:	4a4d      	ldr	r2, [pc, #308]	@ (801b060 <HAL_RCC_ClockConfig+0x274>)
 801af2a:	4293      	cmp	r3, r2
 801af2c:	d901      	bls.n	801af32 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801af2e:	2303      	movs	r3, #3
 801af30:	e08f      	b.n	801b052 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801af32:	4b4c      	ldr	r3, [pc, #304]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801af34:	68db      	ldr	r3, [r3, #12]
 801af36:	220c      	movs	r2, #12
 801af38:	4013      	ands	r3, r2
 801af3a:	2b0c      	cmp	r3, #12
 801af3c:	d1ef      	bne.n	801af1e <HAL_RCC_ClockConfig+0x132>
 801af3e:	e024      	b.n	801af8a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	685b      	ldr	r3, [r3, #4]
 801af44:	2b01      	cmp	r3, #1
 801af46:	d11b      	bne.n	801af80 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801af48:	e009      	b.n	801af5e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801af4a:	f7f8 ff3f 	bl	8013dcc <HAL_GetTick>
 801af4e:	0002      	movs	r2, r0
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	1ad3      	subs	r3, r2, r3
 801af54:	4a42      	ldr	r2, [pc, #264]	@ (801b060 <HAL_RCC_ClockConfig+0x274>)
 801af56:	4293      	cmp	r3, r2
 801af58:	d901      	bls.n	801af5e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801af5a:	2303      	movs	r3, #3
 801af5c:	e079      	b.n	801b052 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801af5e:	4b41      	ldr	r3, [pc, #260]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801af60:	68db      	ldr	r3, [r3, #12]
 801af62:	220c      	movs	r2, #12
 801af64:	4013      	ands	r3, r2
 801af66:	2b04      	cmp	r3, #4
 801af68:	d1ef      	bne.n	801af4a <HAL_RCC_ClockConfig+0x15e>
 801af6a:	e00e      	b.n	801af8a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801af6c:	f7f8 ff2e 	bl	8013dcc <HAL_GetTick>
 801af70:	0002      	movs	r2, r0
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	1ad3      	subs	r3, r2, r3
 801af76:	4a3a      	ldr	r2, [pc, #232]	@ (801b060 <HAL_RCC_ClockConfig+0x274>)
 801af78:	4293      	cmp	r3, r2
 801af7a:	d901      	bls.n	801af80 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801af7c:	2303      	movs	r3, #3
 801af7e:	e068      	b.n	801b052 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801af80:	4b38      	ldr	r3, [pc, #224]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801af82:	68db      	ldr	r3, [r3, #12]
 801af84:	220c      	movs	r2, #12
 801af86:	4013      	ands	r3, r2
 801af88:	d1f0      	bne.n	801af6c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801af8a:	4b34      	ldr	r3, [pc, #208]	@ (801b05c <HAL_RCC_ClockConfig+0x270>)
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	2201      	movs	r2, #1
 801af90:	4013      	ands	r3, r2
 801af92:	683a      	ldr	r2, [r7, #0]
 801af94:	429a      	cmp	r2, r3
 801af96:	d21e      	bcs.n	801afd6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801af98:	4b30      	ldr	r3, [pc, #192]	@ (801b05c <HAL_RCC_ClockConfig+0x270>)
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	2201      	movs	r2, #1
 801af9e:	4393      	bics	r3, r2
 801afa0:	0019      	movs	r1, r3
 801afa2:	4b2e      	ldr	r3, [pc, #184]	@ (801b05c <HAL_RCC_ClockConfig+0x270>)
 801afa4:	683a      	ldr	r2, [r7, #0]
 801afa6:	430a      	orrs	r2, r1
 801afa8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801afaa:	f7f8 ff0f 	bl	8013dcc <HAL_GetTick>
 801afae:	0003      	movs	r3, r0
 801afb0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801afb2:	e009      	b.n	801afc8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801afb4:	f7f8 ff0a 	bl	8013dcc <HAL_GetTick>
 801afb8:	0002      	movs	r2, r0
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	1ad3      	subs	r3, r2, r3
 801afbe:	4a28      	ldr	r2, [pc, #160]	@ (801b060 <HAL_RCC_ClockConfig+0x274>)
 801afc0:	4293      	cmp	r3, r2
 801afc2:	d901      	bls.n	801afc8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801afc4:	2303      	movs	r3, #3
 801afc6:	e044      	b.n	801b052 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801afc8:	4b24      	ldr	r3, [pc, #144]	@ (801b05c <HAL_RCC_ClockConfig+0x270>)
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	2201      	movs	r2, #1
 801afce:	4013      	ands	r3, r2
 801afd0:	683a      	ldr	r2, [r7, #0]
 801afd2:	429a      	cmp	r2, r3
 801afd4:	d1ee      	bne.n	801afb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	2204      	movs	r2, #4
 801afdc:	4013      	ands	r3, r2
 801afde:	d009      	beq.n	801aff4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801afe0:	4b20      	ldr	r3, [pc, #128]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801afe2:	68db      	ldr	r3, [r3, #12]
 801afe4:	4a20      	ldr	r2, [pc, #128]	@ (801b068 <HAL_RCC_ClockConfig+0x27c>)
 801afe6:	4013      	ands	r3, r2
 801afe8:	0019      	movs	r1, r3
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	68da      	ldr	r2, [r3, #12]
 801afee:	4b1d      	ldr	r3, [pc, #116]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801aff0:	430a      	orrs	r2, r1
 801aff2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	2208      	movs	r2, #8
 801affa:	4013      	ands	r3, r2
 801affc:	d00a      	beq.n	801b014 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801affe:	4b19      	ldr	r3, [pc, #100]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801b000:	68db      	ldr	r3, [r3, #12]
 801b002:	4a1a      	ldr	r2, [pc, #104]	@ (801b06c <HAL_RCC_ClockConfig+0x280>)
 801b004:	4013      	ands	r3, r2
 801b006:	0019      	movs	r1, r3
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	691b      	ldr	r3, [r3, #16]
 801b00c:	00da      	lsls	r2, r3, #3
 801b00e:	4b15      	ldr	r3, [pc, #84]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801b010:	430a      	orrs	r2, r1
 801b012:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b014:	f000 f832 	bl	801b07c <HAL_RCC_GetSysClockFreq>
 801b018:	0001      	movs	r1, r0
 801b01a:	4b12      	ldr	r3, [pc, #72]	@ (801b064 <HAL_RCC_ClockConfig+0x278>)
 801b01c:	68db      	ldr	r3, [r3, #12]
 801b01e:	091b      	lsrs	r3, r3, #4
 801b020:	220f      	movs	r2, #15
 801b022:	4013      	ands	r3, r2
 801b024:	4a12      	ldr	r2, [pc, #72]	@ (801b070 <HAL_RCC_ClockConfig+0x284>)
 801b026:	5cd3      	ldrb	r3, [r2, r3]
 801b028:	000a      	movs	r2, r1
 801b02a:	40da      	lsrs	r2, r3
 801b02c:	4b11      	ldr	r3, [pc, #68]	@ (801b074 <HAL_RCC_ClockConfig+0x288>)
 801b02e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801b030:	4b11      	ldr	r3, [pc, #68]	@ (801b078 <HAL_RCC_ClockConfig+0x28c>)
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	250b      	movs	r5, #11
 801b036:	197c      	adds	r4, r7, r5
 801b038:	0018      	movs	r0, r3
 801b03a:	f7f8 fe81 	bl	8013d40 <HAL_InitTick>
 801b03e:	0003      	movs	r3, r0
 801b040:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801b042:	197b      	adds	r3, r7, r5
 801b044:	781b      	ldrb	r3, [r3, #0]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d002      	beq.n	801b050 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801b04a:	197b      	adds	r3, r7, r5
 801b04c:	781b      	ldrb	r3, [r3, #0]
 801b04e:	e000      	b.n	801b052 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801b050:	2300      	movs	r3, #0
}
 801b052:	0018      	movs	r0, r3
 801b054:	46bd      	mov	sp, r7
 801b056:	b004      	add	sp, #16
 801b058:	bdb0      	pop	{r4, r5, r7, pc}
 801b05a:	46c0      	nop			@ (mov r8, r8)
 801b05c:	40022000 	.word	0x40022000
 801b060:	00001388 	.word	0x00001388
 801b064:	40021000 	.word	0x40021000
 801b068:	fffff8ff 	.word	0xfffff8ff
 801b06c:	ffffc7ff 	.word	0xffffc7ff
 801b070:	0802de50 	.word	0x0802de50
 801b074:	200000e0 	.word	0x200000e0
 801b078:	200000f0 	.word	0x200000f0

0801b07c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b07c:	b5b0      	push	{r4, r5, r7, lr}
 801b07e:	b08e      	sub	sp, #56	@ 0x38
 801b080:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801b082:	4b4c      	ldr	r3, [pc, #304]	@ (801b1b4 <HAL_RCC_GetSysClockFreq+0x138>)
 801b084:	68db      	ldr	r3, [r3, #12]
 801b086:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801b088:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b08a:	230c      	movs	r3, #12
 801b08c:	4013      	ands	r3, r2
 801b08e:	2b0c      	cmp	r3, #12
 801b090:	d014      	beq.n	801b0bc <HAL_RCC_GetSysClockFreq+0x40>
 801b092:	d900      	bls.n	801b096 <HAL_RCC_GetSysClockFreq+0x1a>
 801b094:	e07b      	b.n	801b18e <HAL_RCC_GetSysClockFreq+0x112>
 801b096:	2b04      	cmp	r3, #4
 801b098:	d002      	beq.n	801b0a0 <HAL_RCC_GetSysClockFreq+0x24>
 801b09a:	2b08      	cmp	r3, #8
 801b09c:	d00b      	beq.n	801b0b6 <HAL_RCC_GetSysClockFreq+0x3a>
 801b09e:	e076      	b.n	801b18e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801b0a0:	4b44      	ldr	r3, [pc, #272]	@ (801b1b4 <HAL_RCC_GetSysClockFreq+0x138>)
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	2210      	movs	r2, #16
 801b0a6:	4013      	ands	r3, r2
 801b0a8:	d002      	beq.n	801b0b0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801b0aa:	4b43      	ldr	r3, [pc, #268]	@ (801b1b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 801b0ac:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801b0ae:	e07c      	b.n	801b1aa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801b0b0:	4b42      	ldr	r3, [pc, #264]	@ (801b1bc <HAL_RCC_GetSysClockFreq+0x140>)
 801b0b2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801b0b4:	e079      	b.n	801b1aa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801b0b6:	4b42      	ldr	r3, [pc, #264]	@ (801b1c0 <HAL_RCC_GetSysClockFreq+0x144>)
 801b0b8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801b0ba:	e076      	b.n	801b1aa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801b0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0be:	0c9a      	lsrs	r2, r3, #18
 801b0c0:	230f      	movs	r3, #15
 801b0c2:	401a      	ands	r2, r3
 801b0c4:	4b3f      	ldr	r3, [pc, #252]	@ (801b1c4 <HAL_RCC_GetSysClockFreq+0x148>)
 801b0c6:	5c9b      	ldrb	r3, [r3, r2]
 801b0c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801b0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0cc:	0d9a      	lsrs	r2, r3, #22
 801b0ce:	2303      	movs	r3, #3
 801b0d0:	4013      	ands	r3, r2
 801b0d2:	3301      	adds	r3, #1
 801b0d4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b0d6:	4b37      	ldr	r3, [pc, #220]	@ (801b1b4 <HAL_RCC_GetSysClockFreq+0x138>)
 801b0d8:	68da      	ldr	r2, [r3, #12]
 801b0da:	2380      	movs	r3, #128	@ 0x80
 801b0dc:	025b      	lsls	r3, r3, #9
 801b0de:	4013      	ands	r3, r2
 801b0e0:	d01a      	beq.n	801b118 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801b0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0e4:	61bb      	str	r3, [r7, #24]
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	61fb      	str	r3, [r7, #28]
 801b0ea:	4a35      	ldr	r2, [pc, #212]	@ (801b1c0 <HAL_RCC_GetSysClockFreq+0x144>)
 801b0ec:	2300      	movs	r3, #0
 801b0ee:	69b8      	ldr	r0, [r7, #24]
 801b0f0:	69f9      	ldr	r1, [r7, #28]
 801b0f2:	f7e5 fa65 	bl	80005c0 <__aeabi_lmul>
 801b0f6:	0002      	movs	r2, r0
 801b0f8:	000b      	movs	r3, r1
 801b0fa:	0010      	movs	r0, r2
 801b0fc:	0019      	movs	r1, r3
 801b0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b100:	613b      	str	r3, [r7, #16]
 801b102:	2300      	movs	r3, #0
 801b104:	617b      	str	r3, [r7, #20]
 801b106:	693a      	ldr	r2, [r7, #16]
 801b108:	697b      	ldr	r3, [r7, #20]
 801b10a:	f7e5 fa39 	bl	8000580 <__aeabi_uldivmod>
 801b10e:	0002      	movs	r2, r0
 801b110:	000b      	movs	r3, r1
 801b112:	0013      	movs	r3, r2
 801b114:	637b      	str	r3, [r7, #52]	@ 0x34
 801b116:	e037      	b.n	801b188 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801b118:	4b26      	ldr	r3, [pc, #152]	@ (801b1b4 <HAL_RCC_GetSysClockFreq+0x138>)
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	2210      	movs	r2, #16
 801b11e:	4013      	ands	r3, r2
 801b120:	d01a      	beq.n	801b158 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801b122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b124:	60bb      	str	r3, [r7, #8]
 801b126:	2300      	movs	r3, #0
 801b128:	60fb      	str	r3, [r7, #12]
 801b12a:	4a23      	ldr	r2, [pc, #140]	@ (801b1b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 801b12c:	2300      	movs	r3, #0
 801b12e:	68b8      	ldr	r0, [r7, #8]
 801b130:	68f9      	ldr	r1, [r7, #12]
 801b132:	f7e5 fa45 	bl	80005c0 <__aeabi_lmul>
 801b136:	0002      	movs	r2, r0
 801b138:	000b      	movs	r3, r1
 801b13a:	0010      	movs	r0, r2
 801b13c:	0019      	movs	r1, r3
 801b13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b140:	603b      	str	r3, [r7, #0]
 801b142:	2300      	movs	r3, #0
 801b144:	607b      	str	r3, [r7, #4]
 801b146:	683a      	ldr	r2, [r7, #0]
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	f7e5 fa19 	bl	8000580 <__aeabi_uldivmod>
 801b14e:	0002      	movs	r2, r0
 801b150:	000b      	movs	r3, r1
 801b152:	0013      	movs	r3, r2
 801b154:	637b      	str	r3, [r7, #52]	@ 0x34
 801b156:	e017      	b.n	801b188 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801b158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b15a:	0018      	movs	r0, r3
 801b15c:	2300      	movs	r3, #0
 801b15e:	0019      	movs	r1, r3
 801b160:	4a16      	ldr	r2, [pc, #88]	@ (801b1bc <HAL_RCC_GetSysClockFreq+0x140>)
 801b162:	2300      	movs	r3, #0
 801b164:	f7e5 fa2c 	bl	80005c0 <__aeabi_lmul>
 801b168:	0002      	movs	r2, r0
 801b16a:	000b      	movs	r3, r1
 801b16c:	0010      	movs	r0, r2
 801b16e:	0019      	movs	r1, r3
 801b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b172:	001c      	movs	r4, r3
 801b174:	2300      	movs	r3, #0
 801b176:	001d      	movs	r5, r3
 801b178:	0022      	movs	r2, r4
 801b17a:	002b      	movs	r3, r5
 801b17c:	f7e5 fa00 	bl	8000580 <__aeabi_uldivmod>
 801b180:	0002      	movs	r2, r0
 801b182:	000b      	movs	r3, r1
 801b184:	0013      	movs	r3, r2
 801b186:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801b188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b18a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801b18c:	e00d      	b.n	801b1aa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801b18e:	4b09      	ldr	r3, [pc, #36]	@ (801b1b4 <HAL_RCC_GetSysClockFreq+0x138>)
 801b190:	685b      	ldr	r3, [r3, #4]
 801b192:	0b5b      	lsrs	r3, r3, #13
 801b194:	2207      	movs	r2, #7
 801b196:	4013      	ands	r3, r2
 801b198:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801b19a:	6a3b      	ldr	r3, [r7, #32]
 801b19c:	3301      	adds	r3, #1
 801b19e:	2280      	movs	r2, #128	@ 0x80
 801b1a0:	0212      	lsls	r2, r2, #8
 801b1a2:	409a      	lsls	r2, r3
 801b1a4:	0013      	movs	r3, r2
 801b1a6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801b1a8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801b1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801b1ac:	0018      	movs	r0, r3
 801b1ae:	46bd      	mov	sp, r7
 801b1b0:	b00e      	add	sp, #56	@ 0x38
 801b1b2:	bdb0      	pop	{r4, r5, r7, pc}
 801b1b4:	40021000 	.word	0x40021000
 801b1b8:	003d0900 	.word	0x003d0900
 801b1bc:	00f42400 	.word	0x00f42400
 801b1c0:	007a1200 	.word	0x007a1200
 801b1c4:	0802de68 	.word	0x0802de68

0801b1c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b1c8:	b580      	push	{r7, lr}
 801b1ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b1cc:	4b02      	ldr	r3, [pc, #8]	@ (801b1d8 <HAL_RCC_GetHCLKFreq+0x10>)
 801b1ce:	681b      	ldr	r3, [r3, #0]
}
 801b1d0:	0018      	movs	r0, r3
 801b1d2:	46bd      	mov	sp, r7
 801b1d4:	bd80      	pop	{r7, pc}
 801b1d6:	46c0      	nop			@ (mov r8, r8)
 801b1d8:	200000e0 	.word	0x200000e0

0801b1dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b1dc:	b580      	push	{r7, lr}
 801b1de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801b1e0:	f7ff fff2 	bl	801b1c8 <HAL_RCC_GetHCLKFreq>
 801b1e4:	0001      	movs	r1, r0
 801b1e6:	4b06      	ldr	r3, [pc, #24]	@ (801b200 <HAL_RCC_GetPCLK1Freq+0x24>)
 801b1e8:	68db      	ldr	r3, [r3, #12]
 801b1ea:	0a1b      	lsrs	r3, r3, #8
 801b1ec:	2207      	movs	r2, #7
 801b1ee:	4013      	ands	r3, r2
 801b1f0:	4a04      	ldr	r2, [pc, #16]	@ (801b204 <HAL_RCC_GetPCLK1Freq+0x28>)
 801b1f2:	5cd3      	ldrb	r3, [r2, r3]
 801b1f4:	40d9      	lsrs	r1, r3
 801b1f6:	000b      	movs	r3, r1
}
 801b1f8:	0018      	movs	r0, r3
 801b1fa:	46bd      	mov	sp, r7
 801b1fc:	bd80      	pop	{r7, pc}
 801b1fe:	46c0      	nop			@ (mov r8, r8)
 801b200:	40021000 	.word	0x40021000
 801b204:	0802de60 	.word	0x0802de60

0801b208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b208:	b580      	push	{r7, lr}
 801b20a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801b20c:	f7ff ffdc 	bl	801b1c8 <HAL_RCC_GetHCLKFreq>
 801b210:	0001      	movs	r1, r0
 801b212:	4b06      	ldr	r3, [pc, #24]	@ (801b22c <HAL_RCC_GetPCLK2Freq+0x24>)
 801b214:	68db      	ldr	r3, [r3, #12]
 801b216:	0adb      	lsrs	r3, r3, #11
 801b218:	2207      	movs	r2, #7
 801b21a:	4013      	ands	r3, r2
 801b21c:	4a04      	ldr	r2, [pc, #16]	@ (801b230 <HAL_RCC_GetPCLK2Freq+0x28>)
 801b21e:	5cd3      	ldrb	r3, [r2, r3]
 801b220:	40d9      	lsrs	r1, r3
 801b222:	000b      	movs	r3, r1
}
 801b224:	0018      	movs	r0, r3
 801b226:	46bd      	mov	sp, r7
 801b228:	bd80      	pop	{r7, pc}
 801b22a:	46c0      	nop			@ (mov r8, r8)
 801b22c:	40021000 	.word	0x40021000
 801b230:	0802de60 	.word	0x0802de60

0801b234 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b234:	b580      	push	{r7, lr}
 801b236:	b086      	sub	sp, #24
 801b238:	af00      	add	r7, sp, #0
 801b23a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801b23c:	2017      	movs	r0, #23
 801b23e:	183b      	adds	r3, r7, r0
 801b240:	2200      	movs	r2, #0
 801b242:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	2220      	movs	r2, #32
 801b24a:	4013      	ands	r3, r2
 801b24c:	d100      	bne.n	801b250 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801b24e:	e0c7      	b.n	801b3e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b250:	4b9b      	ldr	r3, [pc, #620]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b252:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b254:	2380      	movs	r3, #128	@ 0x80
 801b256:	055b      	lsls	r3, r3, #21
 801b258:	4013      	ands	r3, r2
 801b25a:	d109      	bne.n	801b270 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b25c:	4b98      	ldr	r3, [pc, #608]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b25e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b260:	4b97      	ldr	r3, [pc, #604]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b262:	2180      	movs	r1, #128	@ 0x80
 801b264:	0549      	lsls	r1, r1, #21
 801b266:	430a      	orrs	r2, r1
 801b268:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b26a:	183b      	adds	r3, r7, r0
 801b26c:	2201      	movs	r2, #1
 801b26e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b270:	4b94      	ldr	r3, [pc, #592]	@ (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b272:	681a      	ldr	r2, [r3, #0]
 801b274:	2380      	movs	r3, #128	@ 0x80
 801b276:	005b      	lsls	r3, r3, #1
 801b278:	4013      	ands	r3, r2
 801b27a:	d11a      	bne.n	801b2b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b27c:	4b91      	ldr	r3, [pc, #580]	@ (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b27e:	681a      	ldr	r2, [r3, #0]
 801b280:	4b90      	ldr	r3, [pc, #576]	@ (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b282:	2180      	movs	r1, #128	@ 0x80
 801b284:	0049      	lsls	r1, r1, #1
 801b286:	430a      	orrs	r2, r1
 801b288:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b28a:	f7f8 fd9f 	bl	8013dcc <HAL_GetTick>
 801b28e:	0003      	movs	r3, r0
 801b290:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b292:	e008      	b.n	801b2a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b294:	f7f8 fd9a 	bl	8013dcc <HAL_GetTick>
 801b298:	0002      	movs	r2, r0
 801b29a:	693b      	ldr	r3, [r7, #16]
 801b29c:	1ad3      	subs	r3, r2, r3
 801b29e:	2b64      	cmp	r3, #100	@ 0x64
 801b2a0:	d901      	bls.n	801b2a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801b2a2:	2303      	movs	r3, #3
 801b2a4:	e107      	b.n	801b4b6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b2a6:	4b87      	ldr	r3, [pc, #540]	@ (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b2a8:	681a      	ldr	r2, [r3, #0]
 801b2aa:	2380      	movs	r3, #128	@ 0x80
 801b2ac:	005b      	lsls	r3, r3, #1
 801b2ae:	4013      	ands	r3, r2
 801b2b0:	d0f0      	beq.n	801b294 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801b2b2:	4b83      	ldr	r3, [pc, #524]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b2b4:	681a      	ldr	r2, [r3, #0]
 801b2b6:	23c0      	movs	r3, #192	@ 0xc0
 801b2b8:	039b      	lsls	r3, r3, #14
 801b2ba:	4013      	ands	r3, r2
 801b2bc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	685a      	ldr	r2, [r3, #4]
 801b2c2:	23c0      	movs	r3, #192	@ 0xc0
 801b2c4:	039b      	lsls	r3, r3, #14
 801b2c6:	4013      	ands	r3, r2
 801b2c8:	68fa      	ldr	r2, [r7, #12]
 801b2ca:	429a      	cmp	r2, r3
 801b2cc:	d013      	beq.n	801b2f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	685a      	ldr	r2, [r3, #4]
 801b2d2:	23c0      	movs	r3, #192	@ 0xc0
 801b2d4:	029b      	lsls	r3, r3, #10
 801b2d6:	401a      	ands	r2, r3
 801b2d8:	23c0      	movs	r3, #192	@ 0xc0
 801b2da:	029b      	lsls	r3, r3, #10
 801b2dc:	429a      	cmp	r2, r3
 801b2de:	d10a      	bne.n	801b2f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801b2e0:	4b77      	ldr	r3, [pc, #476]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b2e2:	681a      	ldr	r2, [r3, #0]
 801b2e4:	2380      	movs	r3, #128	@ 0x80
 801b2e6:	029b      	lsls	r3, r3, #10
 801b2e8:	401a      	ands	r2, r3
 801b2ea:	2380      	movs	r3, #128	@ 0x80
 801b2ec:	029b      	lsls	r3, r3, #10
 801b2ee:	429a      	cmp	r2, r3
 801b2f0:	d101      	bne.n	801b2f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801b2f2:	2301      	movs	r3, #1
 801b2f4:	e0df      	b.n	801b4b6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801b2f6:	4b72      	ldr	r3, [pc, #456]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b2f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b2fa:	23c0      	movs	r3, #192	@ 0xc0
 801b2fc:	029b      	lsls	r3, r3, #10
 801b2fe:	4013      	ands	r3, r2
 801b300:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801b302:	68fb      	ldr	r3, [r7, #12]
 801b304:	2b00      	cmp	r3, #0
 801b306:	d03b      	beq.n	801b380 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	685a      	ldr	r2, [r3, #4]
 801b30c:	23c0      	movs	r3, #192	@ 0xc0
 801b30e:	029b      	lsls	r3, r3, #10
 801b310:	4013      	ands	r3, r2
 801b312:	68fa      	ldr	r2, [r7, #12]
 801b314:	429a      	cmp	r2, r3
 801b316:	d033      	beq.n	801b380 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	2220      	movs	r2, #32
 801b31e:	4013      	ands	r3, r2
 801b320:	d02e      	beq.n	801b380 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801b322:	4b67      	ldr	r3, [pc, #412]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b326:	4a68      	ldr	r2, [pc, #416]	@ (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801b328:	4013      	ands	r3, r2
 801b32a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b32c:	4b64      	ldr	r3, [pc, #400]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b32e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b330:	4b63      	ldr	r3, [pc, #396]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b332:	2180      	movs	r1, #128	@ 0x80
 801b334:	0309      	lsls	r1, r1, #12
 801b336:	430a      	orrs	r2, r1
 801b338:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b33a:	4b61      	ldr	r3, [pc, #388]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b33c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b33e:	4b60      	ldr	r3, [pc, #384]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b340:	4962      	ldr	r1, [pc, #392]	@ (801b4cc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801b342:	400a      	ands	r2, r1
 801b344:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801b346:	4b5e      	ldr	r3, [pc, #376]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b348:	68fa      	ldr	r2, [r7, #12]
 801b34a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801b34c:	68fa      	ldr	r2, [r7, #12]
 801b34e:	2380      	movs	r3, #128	@ 0x80
 801b350:	005b      	lsls	r3, r3, #1
 801b352:	4013      	ands	r3, r2
 801b354:	d014      	beq.n	801b380 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b356:	f7f8 fd39 	bl	8013dcc <HAL_GetTick>
 801b35a:	0003      	movs	r3, r0
 801b35c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b35e:	e009      	b.n	801b374 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b360:	f7f8 fd34 	bl	8013dcc <HAL_GetTick>
 801b364:	0002      	movs	r2, r0
 801b366:	693b      	ldr	r3, [r7, #16]
 801b368:	1ad3      	subs	r3, r2, r3
 801b36a:	4a59      	ldr	r2, [pc, #356]	@ (801b4d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801b36c:	4293      	cmp	r3, r2
 801b36e:	d901      	bls.n	801b374 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801b370:	2303      	movs	r3, #3
 801b372:	e0a0      	b.n	801b4b6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b374:	4b52      	ldr	r3, [pc, #328]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b376:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b378:	2380      	movs	r3, #128	@ 0x80
 801b37a:	009b      	lsls	r3, r3, #2
 801b37c:	4013      	ands	r3, r2
 801b37e:	d0ef      	beq.n	801b360 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	2220      	movs	r2, #32
 801b386:	4013      	ands	r3, r2
 801b388:	d01f      	beq.n	801b3ca <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	685a      	ldr	r2, [r3, #4]
 801b38e:	23c0      	movs	r3, #192	@ 0xc0
 801b390:	029b      	lsls	r3, r3, #10
 801b392:	401a      	ands	r2, r3
 801b394:	23c0      	movs	r3, #192	@ 0xc0
 801b396:	029b      	lsls	r3, r3, #10
 801b398:	429a      	cmp	r2, r3
 801b39a:	d10c      	bne.n	801b3b6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 801b39c:	4b48      	ldr	r3, [pc, #288]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	4a4c      	ldr	r2, [pc, #304]	@ (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801b3a2:	4013      	ands	r3, r2
 801b3a4:	0019      	movs	r1, r3
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	685a      	ldr	r2, [r3, #4]
 801b3aa:	23c0      	movs	r3, #192	@ 0xc0
 801b3ac:	039b      	lsls	r3, r3, #14
 801b3ae:	401a      	ands	r2, r3
 801b3b0:	4b43      	ldr	r3, [pc, #268]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b3b2:	430a      	orrs	r2, r1
 801b3b4:	601a      	str	r2, [r3, #0]
 801b3b6:	4b42      	ldr	r3, [pc, #264]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b3b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	685a      	ldr	r2, [r3, #4]
 801b3be:	23c0      	movs	r3, #192	@ 0xc0
 801b3c0:	029b      	lsls	r3, r3, #10
 801b3c2:	401a      	ands	r2, r3
 801b3c4:	4b3e      	ldr	r3, [pc, #248]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b3c6:	430a      	orrs	r2, r1
 801b3c8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b3ca:	2317      	movs	r3, #23
 801b3cc:	18fb      	adds	r3, r7, r3
 801b3ce:	781b      	ldrb	r3, [r3, #0]
 801b3d0:	2b01      	cmp	r3, #1
 801b3d2:	d105      	bne.n	801b3e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b3d4:	4b3a      	ldr	r3, [pc, #232]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b3d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b3d8:	4b39      	ldr	r3, [pc, #228]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b3da:	493f      	ldr	r1, [pc, #252]	@ (801b4d8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801b3dc:	400a      	ands	r2, r1
 801b3de:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	2201      	movs	r2, #1
 801b3e6:	4013      	ands	r3, r2
 801b3e8:	d009      	beq.n	801b3fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801b3ea:	4b35      	ldr	r3, [pc, #212]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b3ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b3ee:	2203      	movs	r2, #3
 801b3f0:	4393      	bics	r3, r2
 801b3f2:	0019      	movs	r1, r3
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	689a      	ldr	r2, [r3, #8]
 801b3f8:	4b31      	ldr	r3, [pc, #196]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b3fa:	430a      	orrs	r2, r1
 801b3fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	2202      	movs	r2, #2
 801b404:	4013      	ands	r3, r2
 801b406:	d009      	beq.n	801b41c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801b408:	4b2d      	ldr	r3, [pc, #180]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b40a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b40c:	220c      	movs	r2, #12
 801b40e:	4393      	bics	r3, r2
 801b410:	0019      	movs	r1, r3
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	68da      	ldr	r2, [r3, #12]
 801b416:	4b2a      	ldr	r3, [pc, #168]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b418:	430a      	orrs	r2, r1
 801b41a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	2204      	movs	r2, #4
 801b422:	4013      	ands	r3, r2
 801b424:	d009      	beq.n	801b43a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801b426:	4b26      	ldr	r3, [pc, #152]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b42a:	4a2c      	ldr	r2, [pc, #176]	@ (801b4dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801b42c:	4013      	ands	r3, r2
 801b42e:	0019      	movs	r1, r3
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	691a      	ldr	r2, [r3, #16]
 801b434:	4b22      	ldr	r3, [pc, #136]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b436:	430a      	orrs	r2, r1
 801b438:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	681b      	ldr	r3, [r3, #0]
 801b43e:	2208      	movs	r2, #8
 801b440:	4013      	ands	r3, r2
 801b442:	d009      	beq.n	801b458 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801b444:	4b1e      	ldr	r3, [pc, #120]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b448:	4a25      	ldr	r2, [pc, #148]	@ (801b4e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801b44a:	4013      	ands	r3, r2
 801b44c:	0019      	movs	r1, r3
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	695a      	ldr	r2, [r3, #20]
 801b452:	4b1b      	ldr	r3, [pc, #108]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b454:	430a      	orrs	r2, r1
 801b456:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	681a      	ldr	r2, [r3, #0]
 801b45c:	2380      	movs	r3, #128	@ 0x80
 801b45e:	005b      	lsls	r3, r3, #1
 801b460:	4013      	ands	r3, r2
 801b462:	d009      	beq.n	801b478 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801b464:	4b16      	ldr	r3, [pc, #88]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b468:	4a17      	ldr	r2, [pc, #92]	@ (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801b46a:	4013      	ands	r3, r2
 801b46c:	0019      	movs	r1, r3
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	699a      	ldr	r2, [r3, #24]
 801b472:	4b13      	ldr	r3, [pc, #76]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b474:	430a      	orrs	r2, r1
 801b476:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	2240      	movs	r2, #64	@ 0x40
 801b47e:	4013      	ands	r3, r2
 801b480:	d009      	beq.n	801b496 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801b482:	4b0f      	ldr	r3, [pc, #60]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b486:	4a17      	ldr	r2, [pc, #92]	@ (801b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801b488:	4013      	ands	r3, r2
 801b48a:	0019      	movs	r1, r3
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	6a1a      	ldr	r2, [r3, #32]
 801b490:	4b0b      	ldr	r3, [pc, #44]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b492:	430a      	orrs	r2, r1
 801b494:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	2280      	movs	r2, #128	@ 0x80
 801b49c:	4013      	ands	r3, r2
 801b49e:	d009      	beq.n	801b4b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801b4a0:	4b07      	ldr	r3, [pc, #28]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b4a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b4a4:	4a10      	ldr	r2, [pc, #64]	@ (801b4e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801b4a6:	4013      	ands	r3, r2
 801b4a8:	0019      	movs	r1, r3
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	69da      	ldr	r2, [r3, #28]
 801b4ae:	4b04      	ldr	r3, [pc, #16]	@ (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b4b0:	430a      	orrs	r2, r1
 801b4b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801b4b4:	2300      	movs	r3, #0
}
 801b4b6:	0018      	movs	r0, r3
 801b4b8:	46bd      	mov	sp, r7
 801b4ba:	b006      	add	sp, #24
 801b4bc:	bd80      	pop	{r7, pc}
 801b4be:	46c0      	nop			@ (mov r8, r8)
 801b4c0:	40021000 	.word	0x40021000
 801b4c4:	40007000 	.word	0x40007000
 801b4c8:	fffcffff 	.word	0xfffcffff
 801b4cc:	fff7ffff 	.word	0xfff7ffff
 801b4d0:	00001388 	.word	0x00001388
 801b4d4:	ffcfffff 	.word	0xffcfffff
 801b4d8:	efffffff 	.word	0xefffffff
 801b4dc:	fffff3ff 	.word	0xfffff3ff
 801b4e0:	ffffcfff 	.word	0xffffcfff
 801b4e4:	fbffffff 	.word	0xfbffffff
 801b4e8:	fff3ffff 	.word	0xfff3ffff

0801b4ec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801b4ec:	b5b0      	push	{r4, r5, r7, lr}
 801b4ee:	b084      	sub	sp, #16
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801b4f4:	230f      	movs	r3, #15
 801b4f6:	18fb      	adds	r3, r7, r3
 801b4f8:	2201      	movs	r2, #1
 801b4fa:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d101      	bne.n	801b506 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801b502:	2301      	movs	r3, #1
 801b504:	e088      	b.n	801b618 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	2221      	movs	r2, #33	@ 0x21
 801b50a:	5c9b      	ldrb	r3, [r3, r2]
 801b50c:	b2db      	uxtb	r3, r3
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d107      	bne.n	801b522 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	2220      	movs	r2, #32
 801b516:	2100      	movs	r1, #0
 801b518:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	0018      	movs	r0, r3
 801b51e:	f7f2 fb13 	bl	800db48 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	2221      	movs	r2, #33	@ 0x21
 801b526:	2102      	movs	r1, #2
 801b528:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	681b      	ldr	r3, [r3, #0]
 801b52e:	68db      	ldr	r3, [r3, #12]
 801b530:	2210      	movs	r2, #16
 801b532:	4013      	ands	r3, r2
 801b534:	2b10      	cmp	r3, #16
 801b536:	d05f      	beq.n	801b5f8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	22ca      	movs	r2, #202	@ 0xca
 801b53e:	625a      	str	r2, [r3, #36]	@ 0x24
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	2253      	movs	r2, #83	@ 0x53
 801b546:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801b548:	250f      	movs	r5, #15
 801b54a:	197c      	adds	r4, r7, r5
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	0018      	movs	r0, r3
 801b550:	f000 fa99 	bl	801ba86 <RTC_EnterInitMode>
 801b554:	0003      	movs	r3, r0
 801b556:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801b558:	0028      	movs	r0, r5
 801b55a:	183b      	adds	r3, r7, r0
 801b55c:	781b      	ldrb	r3, [r3, #0]
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d12c      	bne.n	801b5bc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	681b      	ldr	r3, [r3, #0]
 801b566:	689a      	ldr	r2, [r3, #8]
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	492c      	ldr	r1, [pc, #176]	@ (801b620 <HAL_RTC_Init+0x134>)
 801b56e:	400a      	ands	r2, r1
 801b570:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	6899      	ldr	r1, [r3, #8]
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	685a      	ldr	r2, [r3, #4]
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	691b      	ldr	r3, [r3, #16]
 801b580:	431a      	orrs	r2, r3
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	699b      	ldr	r3, [r3, #24]
 801b586:	431a      	orrs	r2, r3
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	430a      	orrs	r2, r1
 801b58e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	687a      	ldr	r2, [r7, #4]
 801b596:	68d2      	ldr	r2, [r2, #12]
 801b598:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	6919      	ldr	r1, [r3, #16]
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	689b      	ldr	r3, [r3, #8]
 801b5a4:	041a      	lsls	r2, r3, #16
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	430a      	orrs	r2, r1
 801b5ac:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801b5ae:	183c      	adds	r4, r7, r0
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	0018      	movs	r0, r3
 801b5b4:	f000 faab 	bl	801bb0e <RTC_ExitInitMode>
 801b5b8:	0003      	movs	r3, r0
 801b5ba:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801b5bc:	230f      	movs	r3, #15
 801b5be:	18fb      	adds	r3, r7, r3
 801b5c0:	781b      	ldrb	r3, [r3, #0]
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d113      	bne.n	801b5ee <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	681b      	ldr	r3, [r3, #0]
 801b5ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	681b      	ldr	r3, [r3, #0]
 801b5d0:	2103      	movs	r1, #3
 801b5d2:	438a      	bics	r2, r1
 801b5d4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	69da      	ldr	r2, [r3, #28]
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	695b      	ldr	r3, [r3, #20]
 801b5e4:	431a      	orrs	r2, r3
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	430a      	orrs	r2, r1
 801b5ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	22ff      	movs	r2, #255	@ 0xff
 801b5f4:	625a      	str	r2, [r3, #36]	@ 0x24
 801b5f6:	e003      	b.n	801b600 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801b5f8:	230f      	movs	r3, #15
 801b5fa:	18fb      	adds	r3, r7, r3
 801b5fc:	2200      	movs	r2, #0
 801b5fe:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801b600:	230f      	movs	r3, #15
 801b602:	18fb      	adds	r3, r7, r3
 801b604:	781b      	ldrb	r3, [r3, #0]
 801b606:	2b00      	cmp	r3, #0
 801b608:	d103      	bne.n	801b612 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	2221      	movs	r2, #33	@ 0x21
 801b60e:	2101      	movs	r1, #1
 801b610:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801b612:	230f      	movs	r3, #15
 801b614:	18fb      	adds	r3, r7, r3
 801b616:	781b      	ldrb	r3, [r3, #0]
}
 801b618:	0018      	movs	r0, r3
 801b61a:	46bd      	mov	sp, r7
 801b61c:	b004      	add	sp, #16
 801b61e:	bdb0      	pop	{r4, r5, r7, pc}
 801b620:	ff8fffbf 	.word	0xff8fffbf

0801b624 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801b624:	b5b0      	push	{r4, r5, r7, lr}
 801b626:	b086      	sub	sp, #24
 801b628:	af00      	add	r7, sp, #0
 801b62a:	60f8      	str	r0, [r7, #12]
 801b62c:	60b9      	str	r1, [r7, #8]
 801b62e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801b630:	2300      	movs	r3, #0
 801b632:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	2220      	movs	r2, #32
 801b638:	5c9b      	ldrb	r3, [r3, r2]
 801b63a:	2b01      	cmp	r3, #1
 801b63c:	d101      	bne.n	801b642 <HAL_RTC_SetTime+0x1e>
 801b63e:	2302      	movs	r3, #2
 801b640:	e092      	b.n	801b768 <HAL_RTC_SetTime+0x144>
 801b642:	68fb      	ldr	r3, [r7, #12]
 801b644:	2220      	movs	r2, #32
 801b646:	2101      	movs	r1, #1
 801b648:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	2221      	movs	r2, #33	@ 0x21
 801b64e:	2102      	movs	r1, #2
 801b650:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	2b00      	cmp	r3, #0
 801b656:	d125      	bne.n	801b6a4 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801b658:	68fb      	ldr	r3, [r7, #12]
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	689b      	ldr	r3, [r3, #8]
 801b65e:	2240      	movs	r2, #64	@ 0x40
 801b660:	4013      	ands	r3, r2
 801b662:	d102      	bne.n	801b66a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801b664:	68bb      	ldr	r3, [r7, #8]
 801b666:	2200      	movs	r2, #0
 801b668:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b66a:	68bb      	ldr	r3, [r7, #8]
 801b66c:	781b      	ldrb	r3, [r3, #0]
 801b66e:	0018      	movs	r0, r3
 801b670:	f000 fa77 	bl	801bb62 <RTC_ByteToBcd2>
 801b674:	0003      	movs	r3, r0
 801b676:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801b678:	68bb      	ldr	r3, [r7, #8]
 801b67a:	785b      	ldrb	r3, [r3, #1]
 801b67c:	0018      	movs	r0, r3
 801b67e:	f000 fa70 	bl	801bb62 <RTC_ByteToBcd2>
 801b682:	0003      	movs	r3, r0
 801b684:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b686:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801b688:	68bb      	ldr	r3, [r7, #8]
 801b68a:	789b      	ldrb	r3, [r3, #2]
 801b68c:	0018      	movs	r0, r3
 801b68e:	f000 fa68 	bl	801bb62 <RTC_ByteToBcd2>
 801b692:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801b694:	0022      	movs	r2, r4
 801b696:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801b698:	68bb      	ldr	r3, [r7, #8]
 801b69a:	78db      	ldrb	r3, [r3, #3]
 801b69c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b69e:	4313      	orrs	r3, r2
 801b6a0:	617b      	str	r3, [r7, #20]
 801b6a2:	e017      	b.n	801b6d4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801b6a4:	68fb      	ldr	r3, [r7, #12]
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	689b      	ldr	r3, [r3, #8]
 801b6aa:	2240      	movs	r2, #64	@ 0x40
 801b6ac:	4013      	ands	r3, r2
 801b6ae:	d102      	bne.n	801b6b6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801b6b0:	68bb      	ldr	r3, [r7, #8]
 801b6b2:	2200      	movs	r2, #0
 801b6b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b6b6:	68bb      	ldr	r3, [r7, #8]
 801b6b8:	781b      	ldrb	r3, [r3, #0]
 801b6ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801b6bc:	68bb      	ldr	r3, [r7, #8]
 801b6be:	785b      	ldrb	r3, [r3, #1]
 801b6c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b6c2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801b6c4:	68ba      	ldr	r2, [r7, #8]
 801b6c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801b6c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801b6ca:	68bb      	ldr	r3, [r7, #8]
 801b6cc:	78db      	ldrb	r3, [r3, #3]
 801b6ce:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b6d0:	4313      	orrs	r3, r2
 801b6d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b6d4:	68fb      	ldr	r3, [r7, #12]
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	22ca      	movs	r2, #202	@ 0xca
 801b6da:	625a      	str	r2, [r3, #36]	@ 0x24
 801b6dc:	68fb      	ldr	r3, [r7, #12]
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	2253      	movs	r2, #83	@ 0x53
 801b6e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801b6e4:	2513      	movs	r5, #19
 801b6e6:	197c      	adds	r4, r7, r5
 801b6e8:	68fb      	ldr	r3, [r7, #12]
 801b6ea:	0018      	movs	r0, r3
 801b6ec:	f000 f9cb 	bl	801ba86 <RTC_EnterInitMode>
 801b6f0:	0003      	movs	r3, r0
 801b6f2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801b6f4:	0028      	movs	r0, r5
 801b6f6:	183b      	adds	r3, r7, r0
 801b6f8:	781b      	ldrb	r3, [r3, #0]
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d120      	bne.n	801b740 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801b6fe:	68fb      	ldr	r3, [r7, #12]
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	697a      	ldr	r2, [r7, #20]
 801b704:	491a      	ldr	r1, [pc, #104]	@ (801b770 <HAL_RTC_SetTime+0x14c>)
 801b706:	400a      	ands	r2, r1
 801b708:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801b70a:	68fb      	ldr	r3, [r7, #12]
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	689a      	ldr	r2, [r3, #8]
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	4917      	ldr	r1, [pc, #92]	@ (801b774 <HAL_RTC_SetTime+0x150>)
 801b716:	400a      	ands	r2, r1
 801b718:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801b71a:	68fb      	ldr	r3, [r7, #12]
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	6899      	ldr	r1, [r3, #8]
 801b720:	68bb      	ldr	r3, [r7, #8]
 801b722:	68da      	ldr	r2, [r3, #12]
 801b724:	68bb      	ldr	r3, [r7, #8]
 801b726:	691b      	ldr	r3, [r3, #16]
 801b728:	431a      	orrs	r2, r3
 801b72a:	68fb      	ldr	r3, [r7, #12]
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	430a      	orrs	r2, r1
 801b730:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801b732:	183c      	adds	r4, r7, r0
 801b734:	68fb      	ldr	r3, [r7, #12]
 801b736:	0018      	movs	r0, r3
 801b738:	f000 f9e9 	bl	801bb0e <RTC_ExitInitMode>
 801b73c:	0003      	movs	r3, r0
 801b73e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801b740:	2313      	movs	r3, #19
 801b742:	18fb      	adds	r3, r7, r3
 801b744:	781b      	ldrb	r3, [r3, #0]
 801b746:	2b00      	cmp	r3, #0
 801b748:	d103      	bne.n	801b752 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b74a:	68fb      	ldr	r3, [r7, #12]
 801b74c:	2221      	movs	r2, #33	@ 0x21
 801b74e:	2101      	movs	r1, #1
 801b750:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b752:	68fb      	ldr	r3, [r7, #12]
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	22ff      	movs	r2, #255	@ 0xff
 801b758:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b75a:	68fb      	ldr	r3, [r7, #12]
 801b75c:	2220      	movs	r2, #32
 801b75e:	2100      	movs	r1, #0
 801b760:	5499      	strb	r1, [r3, r2]

  return status;
 801b762:	2313      	movs	r3, #19
 801b764:	18fb      	adds	r3, r7, r3
 801b766:	781b      	ldrb	r3, [r3, #0]
}
 801b768:	0018      	movs	r0, r3
 801b76a:	46bd      	mov	sp, r7
 801b76c:	b006      	add	sp, #24
 801b76e:	bdb0      	pop	{r4, r5, r7, pc}
 801b770:	007f7f7f 	.word	0x007f7f7f
 801b774:	fffbffff 	.word	0xfffbffff

0801b778 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801b778:	b580      	push	{r7, lr}
 801b77a:	b086      	sub	sp, #24
 801b77c:	af00      	add	r7, sp, #0
 801b77e:	60f8      	str	r0, [r7, #12]
 801b780:	60b9      	str	r1, [r7, #8]
 801b782:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801b784:	2300      	movs	r3, #0
 801b786:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801b788:	68fb      	ldr	r3, [r7, #12]
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b78e:	68bb      	ldr	r3, [r7, #8]
 801b790:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801b792:	68fb      	ldr	r3, [r7, #12]
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	691b      	ldr	r3, [r3, #16]
 801b798:	045b      	lsls	r3, r3, #17
 801b79a:	0c5a      	lsrs	r2, r3, #17
 801b79c:	68bb      	ldr	r3, [r7, #8]
 801b79e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801b7a0:	68fb      	ldr	r3, [r7, #12]
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	4a22      	ldr	r2, [pc, #136]	@ (801b830 <HAL_RTC_GetTime+0xb8>)
 801b7a8:	4013      	ands	r3, r2
 801b7aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801b7ac:	697b      	ldr	r3, [r7, #20]
 801b7ae:	0c1b      	lsrs	r3, r3, #16
 801b7b0:	b2db      	uxtb	r3, r3
 801b7b2:	223f      	movs	r2, #63	@ 0x3f
 801b7b4:	4013      	ands	r3, r2
 801b7b6:	b2da      	uxtb	r2, r3
 801b7b8:	68bb      	ldr	r3, [r7, #8]
 801b7ba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801b7bc:	697b      	ldr	r3, [r7, #20]
 801b7be:	0a1b      	lsrs	r3, r3, #8
 801b7c0:	b2db      	uxtb	r3, r3
 801b7c2:	227f      	movs	r2, #127	@ 0x7f
 801b7c4:	4013      	ands	r3, r2
 801b7c6:	b2da      	uxtb	r2, r3
 801b7c8:	68bb      	ldr	r3, [r7, #8]
 801b7ca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801b7cc:	697b      	ldr	r3, [r7, #20]
 801b7ce:	b2db      	uxtb	r3, r3
 801b7d0:	227f      	movs	r2, #127	@ 0x7f
 801b7d2:	4013      	ands	r3, r2
 801b7d4:	b2da      	uxtb	r2, r3
 801b7d6:	68bb      	ldr	r3, [r7, #8]
 801b7d8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801b7da:	697b      	ldr	r3, [r7, #20]
 801b7dc:	0d9b      	lsrs	r3, r3, #22
 801b7de:	b2db      	uxtb	r3, r3
 801b7e0:	2201      	movs	r2, #1
 801b7e2:	4013      	ands	r3, r2
 801b7e4:	b2da      	uxtb	r2, r3
 801b7e6:	68bb      	ldr	r3, [r7, #8]
 801b7e8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d11a      	bne.n	801b826 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801b7f0:	68bb      	ldr	r3, [r7, #8]
 801b7f2:	781b      	ldrb	r3, [r3, #0]
 801b7f4:	0018      	movs	r0, r3
 801b7f6:	f000 f9d5 	bl	801bba4 <RTC_Bcd2ToByte>
 801b7fa:	0003      	movs	r3, r0
 801b7fc:	001a      	movs	r2, r3
 801b7fe:	68bb      	ldr	r3, [r7, #8]
 801b800:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801b802:	68bb      	ldr	r3, [r7, #8]
 801b804:	785b      	ldrb	r3, [r3, #1]
 801b806:	0018      	movs	r0, r3
 801b808:	f000 f9cc 	bl	801bba4 <RTC_Bcd2ToByte>
 801b80c:	0003      	movs	r3, r0
 801b80e:	001a      	movs	r2, r3
 801b810:	68bb      	ldr	r3, [r7, #8]
 801b812:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801b814:	68bb      	ldr	r3, [r7, #8]
 801b816:	789b      	ldrb	r3, [r3, #2]
 801b818:	0018      	movs	r0, r3
 801b81a:	f000 f9c3 	bl	801bba4 <RTC_Bcd2ToByte>
 801b81e:	0003      	movs	r3, r0
 801b820:	001a      	movs	r2, r3
 801b822:	68bb      	ldr	r3, [r7, #8]
 801b824:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801b826:	2300      	movs	r3, #0
}
 801b828:	0018      	movs	r0, r3
 801b82a:	46bd      	mov	sp, r7
 801b82c:	b006      	add	sp, #24
 801b82e:	bd80      	pop	{r7, pc}
 801b830:	007f7f7f 	.word	0x007f7f7f

0801b834 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801b834:	b5b0      	push	{r4, r5, r7, lr}
 801b836:	b086      	sub	sp, #24
 801b838:	af00      	add	r7, sp, #0
 801b83a:	60f8      	str	r0, [r7, #12]
 801b83c:	60b9      	str	r1, [r7, #8]
 801b83e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801b840:	2300      	movs	r3, #0
 801b842:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b844:	68fb      	ldr	r3, [r7, #12]
 801b846:	2220      	movs	r2, #32
 801b848:	5c9b      	ldrb	r3, [r3, r2]
 801b84a:	2b01      	cmp	r3, #1
 801b84c:	d101      	bne.n	801b852 <HAL_RTC_SetDate+0x1e>
 801b84e:	2302      	movs	r3, #2
 801b850:	e07e      	b.n	801b950 <HAL_RTC_SetDate+0x11c>
 801b852:	68fb      	ldr	r3, [r7, #12]
 801b854:	2220      	movs	r2, #32
 801b856:	2101      	movs	r1, #1
 801b858:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	2221      	movs	r2, #33	@ 0x21
 801b85e:	2102      	movs	r1, #2
 801b860:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	2b00      	cmp	r3, #0
 801b866:	d10e      	bne.n	801b886 <HAL_RTC_SetDate+0x52>
 801b868:	68bb      	ldr	r3, [r7, #8]
 801b86a:	785b      	ldrb	r3, [r3, #1]
 801b86c:	001a      	movs	r2, r3
 801b86e:	2310      	movs	r3, #16
 801b870:	4013      	ands	r3, r2
 801b872:	d008      	beq.n	801b886 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801b874:	68bb      	ldr	r3, [r7, #8]
 801b876:	785b      	ldrb	r3, [r3, #1]
 801b878:	2210      	movs	r2, #16
 801b87a:	4393      	bics	r3, r2
 801b87c:	b2db      	uxtb	r3, r3
 801b87e:	330a      	adds	r3, #10
 801b880:	b2da      	uxtb	r2, r3
 801b882:	68bb      	ldr	r3, [r7, #8]
 801b884:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d11c      	bne.n	801b8c6 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b88c:	68bb      	ldr	r3, [r7, #8]
 801b88e:	78db      	ldrb	r3, [r3, #3]
 801b890:	0018      	movs	r0, r3
 801b892:	f000 f966 	bl	801bb62 <RTC_ByteToBcd2>
 801b896:	0003      	movs	r3, r0
 801b898:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801b89a:	68bb      	ldr	r3, [r7, #8]
 801b89c:	785b      	ldrb	r3, [r3, #1]
 801b89e:	0018      	movs	r0, r3
 801b8a0:	f000 f95f 	bl	801bb62 <RTC_ByteToBcd2>
 801b8a4:	0003      	movs	r3, r0
 801b8a6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b8a8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801b8aa:	68bb      	ldr	r3, [r7, #8]
 801b8ac:	789b      	ldrb	r3, [r3, #2]
 801b8ae:	0018      	movs	r0, r3
 801b8b0:	f000 f957 	bl	801bb62 <RTC_ByteToBcd2>
 801b8b4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801b8b6:	0022      	movs	r2, r4
 801b8b8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801b8ba:	68bb      	ldr	r3, [r7, #8]
 801b8bc:	781b      	ldrb	r3, [r3, #0]
 801b8be:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b8c0:	4313      	orrs	r3, r2
 801b8c2:	617b      	str	r3, [r7, #20]
 801b8c4:	e00e      	b.n	801b8e4 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b8c6:	68bb      	ldr	r3, [r7, #8]
 801b8c8:	78db      	ldrb	r3, [r3, #3]
 801b8ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801b8cc:	68bb      	ldr	r3, [r7, #8]
 801b8ce:	785b      	ldrb	r3, [r3, #1]
 801b8d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b8d2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801b8d4:	68ba      	ldr	r2, [r7, #8]
 801b8d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801b8d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801b8da:	68bb      	ldr	r3, [r7, #8]
 801b8dc:	781b      	ldrb	r3, [r3, #0]
 801b8de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b8e0:	4313      	orrs	r3, r2
 801b8e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b8e4:	68fb      	ldr	r3, [r7, #12]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	22ca      	movs	r2, #202	@ 0xca
 801b8ea:	625a      	str	r2, [r3, #36]	@ 0x24
 801b8ec:	68fb      	ldr	r3, [r7, #12]
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	2253      	movs	r2, #83	@ 0x53
 801b8f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801b8f4:	2513      	movs	r5, #19
 801b8f6:	197c      	adds	r4, r7, r5
 801b8f8:	68fb      	ldr	r3, [r7, #12]
 801b8fa:	0018      	movs	r0, r3
 801b8fc:	f000 f8c3 	bl	801ba86 <RTC_EnterInitMode>
 801b900:	0003      	movs	r3, r0
 801b902:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801b904:	0028      	movs	r0, r5
 801b906:	183b      	adds	r3, r7, r0
 801b908:	781b      	ldrb	r3, [r3, #0]
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d10c      	bne.n	801b928 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801b90e:	68fb      	ldr	r3, [r7, #12]
 801b910:	681b      	ldr	r3, [r3, #0]
 801b912:	697a      	ldr	r2, [r7, #20]
 801b914:	4910      	ldr	r1, [pc, #64]	@ (801b958 <HAL_RTC_SetDate+0x124>)
 801b916:	400a      	ands	r2, r1
 801b918:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801b91a:	183c      	adds	r4, r7, r0
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	0018      	movs	r0, r3
 801b920:	f000 f8f5 	bl	801bb0e <RTC_ExitInitMode>
 801b924:	0003      	movs	r3, r0
 801b926:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801b928:	2313      	movs	r3, #19
 801b92a:	18fb      	adds	r3, r7, r3
 801b92c:	781b      	ldrb	r3, [r3, #0]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d103      	bne.n	801b93a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b932:	68fb      	ldr	r3, [r7, #12]
 801b934:	2221      	movs	r2, #33	@ 0x21
 801b936:	2101      	movs	r1, #1
 801b938:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	22ff      	movs	r2, #255	@ 0xff
 801b940:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	2220      	movs	r2, #32
 801b946:	2100      	movs	r1, #0
 801b948:	5499      	strb	r1, [r3, r2]

  return status;
 801b94a:	2313      	movs	r3, #19
 801b94c:	18fb      	adds	r3, r7, r3
 801b94e:	781b      	ldrb	r3, [r3, #0]
}
 801b950:	0018      	movs	r0, r3
 801b952:	46bd      	mov	sp, r7
 801b954:	b006      	add	sp, #24
 801b956:	bdb0      	pop	{r4, r5, r7, pc}
 801b958:	00ffff3f 	.word	0x00ffff3f

0801b95c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801b95c:	b580      	push	{r7, lr}
 801b95e:	b086      	sub	sp, #24
 801b960:	af00      	add	r7, sp, #0
 801b962:	60f8      	str	r0, [r7, #12]
 801b964:	60b9      	str	r1, [r7, #8]
 801b966:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801b968:	2300      	movs	r3, #0
 801b96a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801b96c:	68fb      	ldr	r3, [r7, #12]
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	685b      	ldr	r3, [r3, #4]
 801b972:	4a21      	ldr	r2, [pc, #132]	@ (801b9f8 <HAL_RTC_GetDate+0x9c>)
 801b974:	4013      	ands	r3, r2
 801b976:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801b978:	697b      	ldr	r3, [r7, #20]
 801b97a:	0c1b      	lsrs	r3, r3, #16
 801b97c:	b2da      	uxtb	r2, r3
 801b97e:	68bb      	ldr	r3, [r7, #8]
 801b980:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801b982:	697b      	ldr	r3, [r7, #20]
 801b984:	0a1b      	lsrs	r3, r3, #8
 801b986:	b2db      	uxtb	r3, r3
 801b988:	221f      	movs	r2, #31
 801b98a:	4013      	ands	r3, r2
 801b98c:	b2da      	uxtb	r2, r3
 801b98e:	68bb      	ldr	r3, [r7, #8]
 801b990:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801b992:	697b      	ldr	r3, [r7, #20]
 801b994:	b2db      	uxtb	r3, r3
 801b996:	223f      	movs	r2, #63	@ 0x3f
 801b998:	4013      	ands	r3, r2
 801b99a:	b2da      	uxtb	r2, r3
 801b99c:	68bb      	ldr	r3, [r7, #8]
 801b99e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801b9a0:	697b      	ldr	r3, [r7, #20]
 801b9a2:	0b5b      	lsrs	r3, r3, #13
 801b9a4:	b2db      	uxtb	r3, r3
 801b9a6:	2207      	movs	r2, #7
 801b9a8:	4013      	ands	r3, r2
 801b9aa:	b2da      	uxtb	r2, r3
 801b9ac:	68bb      	ldr	r3, [r7, #8]
 801b9ae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d11a      	bne.n	801b9ec <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801b9b6:	68bb      	ldr	r3, [r7, #8]
 801b9b8:	78db      	ldrb	r3, [r3, #3]
 801b9ba:	0018      	movs	r0, r3
 801b9bc:	f000 f8f2 	bl	801bba4 <RTC_Bcd2ToByte>
 801b9c0:	0003      	movs	r3, r0
 801b9c2:	001a      	movs	r2, r3
 801b9c4:	68bb      	ldr	r3, [r7, #8]
 801b9c6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801b9c8:	68bb      	ldr	r3, [r7, #8]
 801b9ca:	785b      	ldrb	r3, [r3, #1]
 801b9cc:	0018      	movs	r0, r3
 801b9ce:	f000 f8e9 	bl	801bba4 <RTC_Bcd2ToByte>
 801b9d2:	0003      	movs	r3, r0
 801b9d4:	001a      	movs	r2, r3
 801b9d6:	68bb      	ldr	r3, [r7, #8]
 801b9d8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801b9da:	68bb      	ldr	r3, [r7, #8]
 801b9dc:	789b      	ldrb	r3, [r3, #2]
 801b9de:	0018      	movs	r0, r3
 801b9e0:	f000 f8e0 	bl	801bba4 <RTC_Bcd2ToByte>
 801b9e4:	0003      	movs	r3, r0
 801b9e6:	001a      	movs	r2, r3
 801b9e8:	68bb      	ldr	r3, [r7, #8]
 801b9ea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801b9ec:	2300      	movs	r3, #0
}
 801b9ee:	0018      	movs	r0, r3
 801b9f0:	46bd      	mov	sp, r7
 801b9f2:	b006      	add	sp, #24
 801b9f4:	bd80      	pop	{r7, pc}
 801b9f6:	46c0      	nop			@ (mov r8, r8)
 801b9f8:	00ffff3f 	.word	0x00ffff3f

0801b9fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801b9fc:	b580      	push	{r7, lr}
 801b9fe:	b084      	sub	sp, #16
 801ba00:	af00      	add	r7, sp, #0
 801ba02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801ba04:	2300      	movs	r3, #0
 801ba06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	681b      	ldr	r3, [r3, #0]
 801ba0c:	4a0e      	ldr	r2, [pc, #56]	@ (801ba48 <HAL_RTC_WaitForSynchro+0x4c>)
 801ba0e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801ba10:	f7f8 f9dc 	bl	8013dcc <HAL_GetTick>
 801ba14:	0003      	movs	r3, r0
 801ba16:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801ba18:	e00a      	b.n	801ba30 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801ba1a:	f7f8 f9d7 	bl	8013dcc <HAL_GetTick>
 801ba1e:	0002      	movs	r2, r0
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	1ad2      	subs	r2, r2, r3
 801ba24:	23fa      	movs	r3, #250	@ 0xfa
 801ba26:	009b      	lsls	r3, r3, #2
 801ba28:	429a      	cmp	r2, r3
 801ba2a:	d901      	bls.n	801ba30 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801ba2c:	2303      	movs	r3, #3
 801ba2e:	e006      	b.n	801ba3e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	681b      	ldr	r3, [r3, #0]
 801ba34:	68db      	ldr	r3, [r3, #12]
 801ba36:	2220      	movs	r2, #32
 801ba38:	4013      	ands	r3, r2
 801ba3a:	d0ee      	beq.n	801ba1a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801ba3c:	2300      	movs	r3, #0
}
 801ba3e:	0018      	movs	r0, r3
 801ba40:	46bd      	mov	sp, r7
 801ba42:	b004      	add	sp, #16
 801ba44:	bd80      	pop	{r7, pc}
 801ba46:	46c0      	nop			@ (mov r8, r8)
 801ba48:	0001ff5f 	.word	0x0001ff5f

0801ba4c <HAL_RTC_DST_Add1Hour>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 801ba4c:	b580      	push	{r7, lr}
 801ba4e:	b082      	sub	sp, #8
 801ba50:	af00      	add	r7, sp, #0
 801ba52:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	22ca      	movs	r2, #202	@ 0xca
 801ba5a:	625a      	str	r2, [r3, #36]	@ 0x24
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	2253      	movs	r2, #83	@ 0x53
 801ba62:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	689a      	ldr	r2, [r3, #8]
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	2180      	movs	r1, #128	@ 0x80
 801ba70:	0249      	lsls	r1, r1, #9
 801ba72:	430a      	orrs	r2, r1
 801ba74:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	22ff      	movs	r2, #255	@ 0xff
 801ba7c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801ba7e:	46c0      	nop			@ (mov r8, r8)
 801ba80:	46bd      	mov	sp, r7
 801ba82:	b002      	add	sp, #8
 801ba84:	bd80      	pop	{r7, pc}

0801ba86 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801ba86:	b580      	push	{r7, lr}
 801ba88:	b084      	sub	sp, #16
 801ba8a:	af00      	add	r7, sp, #0
 801ba8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801ba8e:	2300      	movs	r3, #0
 801ba90:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801ba92:	230f      	movs	r3, #15
 801ba94:	18fb      	adds	r3, r7, r3
 801ba96:	2200      	movs	r2, #0
 801ba98:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	68db      	ldr	r3, [r3, #12]
 801baa0:	2240      	movs	r2, #64	@ 0x40
 801baa2:	4013      	ands	r3, r2
 801baa4:	d12c      	bne.n	801bb00 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	68da      	ldr	r2, [r3, #12]
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	2180      	movs	r1, #128	@ 0x80
 801bab2:	430a      	orrs	r2, r1
 801bab4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801bab6:	f7f8 f989 	bl	8013dcc <HAL_GetTick>
 801baba:	0003      	movs	r3, r0
 801babc:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801babe:	e014      	b.n	801baea <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801bac0:	f7f8 f984 	bl	8013dcc <HAL_GetTick>
 801bac4:	0002      	movs	r2, r0
 801bac6:	68bb      	ldr	r3, [r7, #8]
 801bac8:	1ad2      	subs	r2, r2, r3
 801baca:	200f      	movs	r0, #15
 801bacc:	183b      	adds	r3, r7, r0
 801bace:	1839      	adds	r1, r7, r0
 801bad0:	7809      	ldrb	r1, [r1, #0]
 801bad2:	7019      	strb	r1, [r3, #0]
 801bad4:	23fa      	movs	r3, #250	@ 0xfa
 801bad6:	009b      	lsls	r3, r3, #2
 801bad8:	429a      	cmp	r2, r3
 801bada:	d906      	bls.n	801baea <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	2221      	movs	r2, #33	@ 0x21
 801bae0:	2104      	movs	r1, #4
 801bae2:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801bae4:	183b      	adds	r3, r7, r0
 801bae6:	2201      	movs	r2, #1
 801bae8:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	68db      	ldr	r3, [r3, #12]
 801baf0:	2240      	movs	r2, #64	@ 0x40
 801baf2:	4013      	ands	r3, r2
 801baf4:	d104      	bne.n	801bb00 <RTC_EnterInitMode+0x7a>
 801baf6:	230f      	movs	r3, #15
 801baf8:	18fb      	adds	r3, r7, r3
 801bafa:	781b      	ldrb	r3, [r3, #0]
 801bafc:	2b01      	cmp	r3, #1
 801bafe:	d1df      	bne.n	801bac0 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801bb00:	230f      	movs	r3, #15
 801bb02:	18fb      	adds	r3, r7, r3
 801bb04:	781b      	ldrb	r3, [r3, #0]
}
 801bb06:	0018      	movs	r0, r3
 801bb08:	46bd      	mov	sp, r7
 801bb0a:	b004      	add	sp, #16
 801bb0c:	bd80      	pop	{r7, pc}

0801bb0e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801bb0e:	b590      	push	{r4, r7, lr}
 801bb10:	b085      	sub	sp, #20
 801bb12:	af00      	add	r7, sp, #0
 801bb14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bb16:	240f      	movs	r4, #15
 801bb18:	193b      	adds	r3, r7, r4
 801bb1a:	2200      	movs	r2, #0
 801bb1c:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	68da      	ldr	r2, [r3, #12]
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	2180      	movs	r1, #128	@ 0x80
 801bb2a:	438a      	bics	r2, r1
 801bb2c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	689b      	ldr	r3, [r3, #8]
 801bb34:	2220      	movs	r2, #32
 801bb36:	4013      	ands	r3, r2
 801bb38:	d10c      	bne.n	801bb54 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	0018      	movs	r0, r3
 801bb3e:	f7ff ff5d 	bl	801b9fc <HAL_RTC_WaitForSynchro>
 801bb42:	1e03      	subs	r3, r0, #0
 801bb44:	d006      	beq.n	801bb54 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	2221      	movs	r2, #33	@ 0x21
 801bb4a:	2104      	movs	r1, #4
 801bb4c:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801bb4e:	193b      	adds	r3, r7, r4
 801bb50:	2201      	movs	r2, #1
 801bb52:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801bb54:	230f      	movs	r3, #15
 801bb56:	18fb      	adds	r3, r7, r3
 801bb58:	781b      	ldrb	r3, [r3, #0]
}
 801bb5a:	0018      	movs	r0, r3
 801bb5c:	46bd      	mov	sp, r7
 801bb5e:	b005      	add	sp, #20
 801bb60:	bd90      	pop	{r4, r7, pc}

0801bb62 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801bb62:	b580      	push	{r7, lr}
 801bb64:	b084      	sub	sp, #16
 801bb66:	af00      	add	r7, sp, #0
 801bb68:	0002      	movs	r2, r0
 801bb6a:	1dfb      	adds	r3, r7, #7
 801bb6c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801bb6e:	2300      	movs	r3, #0
 801bb70:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801bb72:	e007      	b.n	801bb84 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801bb74:	68fb      	ldr	r3, [r7, #12]
 801bb76:	3301      	adds	r3, #1
 801bb78:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801bb7a:	1dfb      	adds	r3, r7, #7
 801bb7c:	1dfa      	adds	r2, r7, #7
 801bb7e:	7812      	ldrb	r2, [r2, #0]
 801bb80:	3a0a      	subs	r2, #10
 801bb82:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801bb84:	1dfb      	adds	r3, r7, #7
 801bb86:	781b      	ldrb	r3, [r3, #0]
 801bb88:	2b09      	cmp	r3, #9
 801bb8a:	d8f3      	bhi.n	801bb74 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801bb8c:	68fb      	ldr	r3, [r7, #12]
 801bb8e:	b2db      	uxtb	r3, r3
 801bb90:	011b      	lsls	r3, r3, #4
 801bb92:	b2da      	uxtb	r2, r3
 801bb94:	1dfb      	adds	r3, r7, #7
 801bb96:	781b      	ldrb	r3, [r3, #0]
 801bb98:	4313      	orrs	r3, r2
 801bb9a:	b2db      	uxtb	r3, r3
}
 801bb9c:	0018      	movs	r0, r3
 801bb9e:	46bd      	mov	sp, r7
 801bba0:	b004      	add	sp, #16
 801bba2:	bd80      	pop	{r7, pc}

0801bba4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801bba4:	b580      	push	{r7, lr}
 801bba6:	b084      	sub	sp, #16
 801bba8:	af00      	add	r7, sp, #0
 801bbaa:	0002      	movs	r2, r0
 801bbac:	1dfb      	adds	r3, r7, #7
 801bbae:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801bbb0:	2300      	movs	r3, #0
 801bbb2:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801bbb4:	1dfb      	adds	r3, r7, #7
 801bbb6:	781b      	ldrb	r3, [r3, #0]
 801bbb8:	091b      	lsrs	r3, r3, #4
 801bbba:	b2db      	uxtb	r3, r3
 801bbbc:	001a      	movs	r2, r3
 801bbbe:	0013      	movs	r3, r2
 801bbc0:	009b      	lsls	r3, r3, #2
 801bbc2:	189b      	adds	r3, r3, r2
 801bbc4:	005b      	lsls	r3, r3, #1
 801bbc6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	b2da      	uxtb	r2, r3
 801bbcc:	1dfb      	adds	r3, r7, #7
 801bbce:	781b      	ldrb	r3, [r3, #0]
 801bbd0:	210f      	movs	r1, #15
 801bbd2:	400b      	ands	r3, r1
 801bbd4:	b2db      	uxtb	r3, r3
 801bbd6:	18d3      	adds	r3, r2, r3
 801bbd8:	b2db      	uxtb	r3, r3
}
 801bbda:	0018      	movs	r0, r3
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	b004      	add	sp, #16
 801bbe0:	bd80      	pop	{r7, pc}
	...

0801bbe4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801bbe4:	b580      	push	{r7, lr}
 801bbe6:	b086      	sub	sp, #24
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	60f8      	str	r0, [r7, #12]
 801bbec:	60b9      	str	r1, [r7, #8]
 801bbee:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801bbf0:	4b64      	ldr	r3, [pc, #400]	@ (801bd84 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801bbf2:	681b      	ldr	r3, [r3, #0]
 801bbf4:	22fa      	movs	r2, #250	@ 0xfa
 801bbf6:	01d1      	lsls	r1, r2, #7
 801bbf8:	0018      	movs	r0, r3
 801bbfa:	f7e4 fad3 	bl	80001a4 <__udivsi3>
 801bbfe:	0003      	movs	r3, r0
 801bc00:	001a      	movs	r2, r3
 801bc02:	0013      	movs	r3, r2
 801bc04:	015b      	lsls	r3, r3, #5
 801bc06:	1a9b      	subs	r3, r3, r2
 801bc08:	009b      	lsls	r3, r3, #2
 801bc0a:	189b      	adds	r3, r3, r2
 801bc0c:	00db      	lsls	r3, r3, #3
 801bc0e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	2220      	movs	r2, #32
 801bc14:	5c9b      	ldrb	r3, [r3, r2]
 801bc16:	2b01      	cmp	r3, #1
 801bc18:	d101      	bne.n	801bc1e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801bc1a:	2302      	movs	r3, #2
 801bc1c:	e0ad      	b.n	801bd7a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	2220      	movs	r2, #32
 801bc22:	2101      	movs	r1, #1
 801bc24:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	2221      	movs	r2, #33	@ 0x21
 801bc2a:	2102      	movs	r1, #2
 801bc2c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801bc2e:	68fb      	ldr	r3, [r7, #12]
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	22ca      	movs	r2, #202	@ 0xca
 801bc34:	625a      	str	r2, [r3, #36]	@ 0x24
 801bc36:	68fb      	ldr	r3, [r7, #12]
 801bc38:	681b      	ldr	r3, [r3, #0]
 801bc3a:	2253      	movs	r2, #83	@ 0x53
 801bc3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801bc3e:	68fb      	ldr	r3, [r7, #12]
 801bc40:	681b      	ldr	r3, [r3, #0]
 801bc42:	689a      	ldr	r2, [r3, #8]
 801bc44:	2380      	movs	r3, #128	@ 0x80
 801bc46:	00db      	lsls	r3, r3, #3
 801bc48:	4013      	ands	r3, r2
 801bc4a:	d019      	beq.n	801bc80 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801bc4c:	697b      	ldr	r3, [r7, #20]
 801bc4e:	3b01      	subs	r3, #1
 801bc50:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801bc52:	697b      	ldr	r3, [r7, #20]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d10d      	bne.n	801bc74 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bc58:	68fb      	ldr	r3, [r7, #12]
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	22ff      	movs	r2, #255	@ 0xff
 801bc5e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801bc60:	68fb      	ldr	r3, [r7, #12]
 801bc62:	2221      	movs	r2, #33	@ 0x21
 801bc64:	2103      	movs	r1, #3
 801bc66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801bc68:	68fb      	ldr	r3, [r7, #12]
 801bc6a:	2220      	movs	r2, #32
 801bc6c:	2100      	movs	r1, #0
 801bc6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801bc70:	2303      	movs	r3, #3
 801bc72:	e082      	b.n	801bd7a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801bc74:	68fb      	ldr	r3, [r7, #12]
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	68db      	ldr	r3, [r3, #12]
 801bc7a:	2204      	movs	r2, #4
 801bc7c:	4013      	ands	r3, r2
 801bc7e:	d1e5      	bne.n	801bc4c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801bc80:	68fb      	ldr	r3, [r7, #12]
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	689a      	ldr	r2, [r3, #8]
 801bc86:	68fb      	ldr	r3, [r7, #12]
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	493f      	ldr	r1, [pc, #252]	@ (801bd88 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801bc8c:	400a      	ands	r2, r1
 801bc8e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801bc90:	68fb      	ldr	r3, [r7, #12]
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	68db      	ldr	r3, [r3, #12]
 801bc96:	22ff      	movs	r2, #255	@ 0xff
 801bc98:	401a      	ands	r2, r3
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	493b      	ldr	r1, [pc, #236]	@ (801bd8c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801bca0:	430a      	orrs	r2, r1
 801bca2:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801bca4:	4b37      	ldr	r3, [pc, #220]	@ (801bd84 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	22fa      	movs	r2, #250	@ 0xfa
 801bcaa:	01d1      	lsls	r1, r2, #7
 801bcac:	0018      	movs	r0, r3
 801bcae:	f7e4 fa79 	bl	80001a4 <__udivsi3>
 801bcb2:	0003      	movs	r3, r0
 801bcb4:	001a      	movs	r2, r3
 801bcb6:	0013      	movs	r3, r2
 801bcb8:	015b      	lsls	r3, r3, #5
 801bcba:	1a9b      	subs	r3, r3, r2
 801bcbc:	009b      	lsls	r3, r3, #2
 801bcbe:	189b      	adds	r3, r3, r2
 801bcc0:	00db      	lsls	r3, r3, #3
 801bcc2:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801bcc4:	697b      	ldr	r3, [r7, #20]
 801bcc6:	3b01      	subs	r3, #1
 801bcc8:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801bcca:	697b      	ldr	r3, [r7, #20]
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d10d      	bne.n	801bcec <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bcd0:	68fb      	ldr	r3, [r7, #12]
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	22ff      	movs	r2, #255	@ 0xff
 801bcd6:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801bcd8:	68fb      	ldr	r3, [r7, #12]
 801bcda:	2221      	movs	r2, #33	@ 0x21
 801bcdc:	2103      	movs	r1, #3
 801bcde:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801bce0:	68fb      	ldr	r3, [r7, #12]
 801bce2:	2220      	movs	r2, #32
 801bce4:	2100      	movs	r1, #0
 801bce6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801bce8:	2303      	movs	r3, #3
 801bcea:	e046      	b.n	801bd7a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801bcec:	68fb      	ldr	r3, [r7, #12]
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	68db      	ldr	r3, [r3, #12]
 801bcf2:	2204      	movs	r2, #4
 801bcf4:	4013      	ands	r3, r2
 801bcf6:	d0e5      	beq.n	801bcc4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801bcf8:	68fb      	ldr	r3, [r7, #12]
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	689a      	ldr	r2, [r3, #8]
 801bcfe:	68fb      	ldr	r3, [r7, #12]
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	2107      	movs	r1, #7
 801bd04:	438a      	bics	r2, r1
 801bd06:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801bd08:	68fb      	ldr	r3, [r7, #12]
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	6899      	ldr	r1, [r3, #8]
 801bd0e:	68fb      	ldr	r3, [r7, #12]
 801bd10:	681b      	ldr	r3, [r3, #0]
 801bd12:	687a      	ldr	r2, [r7, #4]
 801bd14:	430a      	orrs	r2, r1
 801bd16:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801bd18:	68fb      	ldr	r3, [r7, #12]
 801bd1a:	681b      	ldr	r3, [r3, #0]
 801bd1c:	68ba      	ldr	r2, [r7, #8]
 801bd1e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801bd20:	4b1b      	ldr	r3, [pc, #108]	@ (801bd90 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801bd22:	681a      	ldr	r2, [r3, #0]
 801bd24:	4b1a      	ldr	r3, [pc, #104]	@ (801bd90 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801bd26:	2180      	movs	r1, #128	@ 0x80
 801bd28:	0349      	lsls	r1, r1, #13
 801bd2a:	430a      	orrs	r2, r1
 801bd2c:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801bd2e:	4b18      	ldr	r3, [pc, #96]	@ (801bd90 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801bd30:	689a      	ldr	r2, [r3, #8]
 801bd32:	4b17      	ldr	r3, [pc, #92]	@ (801bd90 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801bd34:	2180      	movs	r1, #128	@ 0x80
 801bd36:	0349      	lsls	r1, r1, #13
 801bd38:	430a      	orrs	r2, r1
 801bd3a:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	689a      	ldr	r2, [r3, #8]
 801bd42:	68fb      	ldr	r3, [r7, #12]
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	2180      	movs	r1, #128	@ 0x80
 801bd48:	01c9      	lsls	r1, r1, #7
 801bd4a:	430a      	orrs	r2, r1
 801bd4c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801bd4e:	68fb      	ldr	r3, [r7, #12]
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	689a      	ldr	r2, [r3, #8]
 801bd54:	68fb      	ldr	r3, [r7, #12]
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	2180      	movs	r1, #128	@ 0x80
 801bd5a:	00c9      	lsls	r1, r1, #3
 801bd5c:	430a      	orrs	r2, r1
 801bd5e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	681b      	ldr	r3, [r3, #0]
 801bd64:	22ff      	movs	r2, #255	@ 0xff
 801bd66:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801bd68:	68fb      	ldr	r3, [r7, #12]
 801bd6a:	2221      	movs	r2, #33	@ 0x21
 801bd6c:	2101      	movs	r1, #1
 801bd6e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801bd70:	68fb      	ldr	r3, [r7, #12]
 801bd72:	2220      	movs	r2, #32
 801bd74:	2100      	movs	r1, #0
 801bd76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bd78:	2300      	movs	r3, #0
}
 801bd7a:	0018      	movs	r0, r3
 801bd7c:	46bd      	mov	sp, r7
 801bd7e:	b006      	add	sp, #24
 801bd80:	bd80      	pop	{r7, pc}
 801bd82:	46c0      	nop			@ (mov r8, r8)
 801bd84:	200000e0 	.word	0x200000e0
 801bd88:	fffffbff 	.word	0xfffffbff
 801bd8c:	fffffb7f 	.word	0xfffffb7f
 801bd90:	40010400 	.word	0x40010400

0801bd94 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b084      	sub	sp, #16
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801bd9c:	2300      	movs	r3, #0
 801bd9e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	2220      	movs	r2, #32
 801bda4:	5c9b      	ldrb	r3, [r3, r2]
 801bda6:	2b01      	cmp	r3, #1
 801bda8:	d101      	bne.n	801bdae <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801bdaa:	2302      	movs	r3, #2
 801bdac:	e04e      	b.n	801be4c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	2220      	movs	r2, #32
 801bdb2:	2101      	movs	r1, #1
 801bdb4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	2221      	movs	r2, #33	@ 0x21
 801bdba:	2102      	movs	r1, #2
 801bdbc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	22ca      	movs	r2, #202	@ 0xca
 801bdc4:	625a      	str	r2, [r3, #36]	@ 0x24
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	681b      	ldr	r3, [r3, #0]
 801bdca:	2253      	movs	r2, #83	@ 0x53
 801bdcc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	689a      	ldr	r2, [r3, #8]
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	491e      	ldr	r1, [pc, #120]	@ (801be54 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801bdda:	400a      	ands	r2, r1
 801bddc:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	689a      	ldr	r2, [r3, #8]
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	681b      	ldr	r3, [r3, #0]
 801bde8:	491b      	ldr	r1, [pc, #108]	@ (801be58 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801bdea:	400a      	ands	r2, r1
 801bdec:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801bdee:	f7f7 ffed 	bl	8013dcc <HAL_GetTick>
 801bdf2:	0003      	movs	r3, r0
 801bdf4:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801bdf6:	e016      	b.n	801be26 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801bdf8:	f7f7 ffe8 	bl	8013dcc <HAL_GetTick>
 801bdfc:	0002      	movs	r2, r0
 801bdfe:	68fb      	ldr	r3, [r7, #12]
 801be00:	1ad2      	subs	r2, r2, r3
 801be02:	23fa      	movs	r3, #250	@ 0xfa
 801be04:	009b      	lsls	r3, r3, #2
 801be06:	429a      	cmp	r2, r3
 801be08:	d90d      	bls.n	801be26 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	22ff      	movs	r2, #255	@ 0xff
 801be10:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	2221      	movs	r2, #33	@ 0x21
 801be16:	2103      	movs	r1, #3
 801be18:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	2220      	movs	r2, #32
 801be1e:	2100      	movs	r1, #0
 801be20:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801be22:	2303      	movs	r3, #3
 801be24:	e012      	b.n	801be4c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	681b      	ldr	r3, [r3, #0]
 801be2a:	68db      	ldr	r3, [r3, #12]
 801be2c:	2204      	movs	r2, #4
 801be2e:	4013      	ands	r3, r2
 801be30:	d0e2      	beq.n	801bdf8 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	22ff      	movs	r2, #255	@ 0xff
 801be38:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	2221      	movs	r2, #33	@ 0x21
 801be3e:	2101      	movs	r1, #1
 801be40:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	2220      	movs	r2, #32
 801be46:	2100      	movs	r1, #0
 801be48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801be4a:	2300      	movs	r3, #0
}
 801be4c:	0018      	movs	r0, r3
 801be4e:	46bd      	mov	sp, r7
 801be50:	b004      	add	sp, #16
 801be52:	bd80      	pop	{r7, pc}
 801be54:	fffffbff 	.word	0xfffffbff
 801be58:	ffffbfff 	.word	0xffffbfff

0801be5c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801be5c:	b580      	push	{r7, lr}
 801be5e:	b082      	sub	sp, #8
 801be60:	af00      	add	r7, sp, #0
 801be62:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801be64:	4b13      	ldr	r3, [pc, #76]	@ (801beb4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801be66:	2280      	movs	r2, #128	@ 0x80
 801be68:	0352      	lsls	r2, r2, #13
 801be6a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	681b      	ldr	r3, [r3, #0]
 801be70:	689a      	ldr	r2, [r3, #8]
 801be72:	2380      	movs	r3, #128	@ 0x80
 801be74:	01db      	lsls	r3, r3, #7
 801be76:	4013      	ands	r3, r2
 801be78:	d014      	beq.n	801bea4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	68da      	ldr	r2, [r3, #12]
 801be80:	2380      	movs	r3, #128	@ 0x80
 801be82:	00db      	lsls	r3, r3, #3
 801be84:	4013      	ands	r3, r2
 801be86:	d00d      	beq.n	801bea4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	68db      	ldr	r3, [r3, #12]
 801be8e:	22ff      	movs	r2, #255	@ 0xff
 801be90:	401a      	ands	r2, r3
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	681b      	ldr	r3, [r3, #0]
 801be96:	4908      	ldr	r1, [pc, #32]	@ (801beb8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801be98:	430a      	orrs	r2, r1
 801be9a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	0018      	movs	r0, r3
 801bea0:	f000 f80c 	bl	801bebc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	2221      	movs	r2, #33	@ 0x21
 801bea8:	2101      	movs	r1, #1
 801beaa:	5499      	strb	r1, [r3, r2]
}
 801beac:	46c0      	nop			@ (mov r8, r8)
 801beae:	46bd      	mov	sp, r7
 801beb0:	b002      	add	sp, #8
 801beb2:	bd80      	pop	{r7, pc}
 801beb4:	40010400 	.word	0x40010400
 801beb8:	fffffb7f 	.word	0xfffffb7f

0801bebc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801bebc:	b580      	push	{r7, lr}
 801bebe:	b082      	sub	sp, #8
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801bec4:	46c0      	nop			@ (mov r8, r8)
 801bec6:	46bd      	mov	sp, r7
 801bec8:	b002      	add	sp, #8
 801beca:	bd80      	pop	{r7, pc}

0801becc <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801becc:	b580      	push	{r7, lr}
 801bece:	b086      	sub	sp, #24
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	60f8      	str	r0, [r7, #12]
 801bed4:	60b9      	str	r1, [r7, #8]
 801bed6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801bed8:	2300      	movs	r3, #0
 801beda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	3350      	adds	r3, #80	@ 0x50
 801bee2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801bee4:	68bb      	ldr	r3, [r7, #8]
 801bee6:	009b      	lsls	r3, r3, #2
 801bee8:	697a      	ldr	r2, [r7, #20]
 801beea:	18d3      	adds	r3, r2, r3
 801beec:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801beee:	697b      	ldr	r3, [r7, #20]
 801bef0:	687a      	ldr	r2, [r7, #4]
 801bef2:	601a      	str	r2, [r3, #0]
}
 801bef4:	46c0      	nop			@ (mov r8, r8)
 801bef6:	46bd      	mov	sp, r7
 801bef8:	b006      	add	sp, #24
 801befa:	bd80      	pop	{r7, pc}

0801befc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801befc:	b580      	push	{r7, lr}
 801befe:	b084      	sub	sp, #16
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	6078      	str	r0, [r7, #4]
 801bf04:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801bf06:	2300      	movs	r3, #0
 801bf08:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	3350      	adds	r3, #80	@ 0x50
 801bf10:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801bf12:	683b      	ldr	r3, [r7, #0]
 801bf14:	009b      	lsls	r3, r3, #2
 801bf16:	68fa      	ldr	r2, [r7, #12]
 801bf18:	18d3      	adds	r3, r2, r3
 801bf1a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801bf1c:	68fb      	ldr	r3, [r7, #12]
 801bf1e:	681b      	ldr	r3, [r3, #0]
}
 801bf20:	0018      	movs	r0, r3
 801bf22:	46bd      	mov	sp, r7
 801bf24:	b004      	add	sp, #16
 801bf26:	bd80      	pop	{r7, pc}

0801bf28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b082      	sub	sp, #8
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d101      	bne.n	801bf3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801bf36:	2301      	movs	r3, #1
 801bf38:	e032      	b.n	801bfa0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	2239      	movs	r2, #57	@ 0x39
 801bf3e:	5c9b      	ldrb	r3, [r3, r2]
 801bf40:	b2db      	uxtb	r3, r3
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d107      	bne.n	801bf56 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	2238      	movs	r2, #56	@ 0x38
 801bf4a:	2100      	movs	r1, #0
 801bf4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	0018      	movs	r0, r3
 801bf52:	f7f6 ff57 	bl	8012e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	2239      	movs	r2, #57	@ 0x39
 801bf5a:	2102      	movs	r1, #2
 801bf5c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	681a      	ldr	r2, [r3, #0]
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	3304      	adds	r3, #4
 801bf66:	0019      	movs	r1, r3
 801bf68:	0010      	movs	r0, r2
 801bf6a:	f000 fa1d 	bl	801c3a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	223e      	movs	r2, #62	@ 0x3e
 801bf72:	2101      	movs	r1, #1
 801bf74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	223a      	movs	r2, #58	@ 0x3a
 801bf7a:	2101      	movs	r1, #1
 801bf7c:	5499      	strb	r1, [r3, r2]
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	223b      	movs	r2, #59	@ 0x3b
 801bf82:	2101      	movs	r1, #1
 801bf84:	5499      	strb	r1, [r3, r2]
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	223c      	movs	r2, #60	@ 0x3c
 801bf8a:	2101      	movs	r1, #1
 801bf8c:	5499      	strb	r1, [r3, r2]
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	223d      	movs	r2, #61	@ 0x3d
 801bf92:	2101      	movs	r1, #1
 801bf94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	2239      	movs	r2, #57	@ 0x39
 801bf9a:	2101      	movs	r1, #1
 801bf9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bf9e:	2300      	movs	r3, #0
}
 801bfa0:	0018      	movs	r0, r3
 801bfa2:	46bd      	mov	sp, r7
 801bfa4:	b002      	add	sp, #8
 801bfa6:	bd80      	pop	{r7, pc}

0801bfa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b084      	sub	sp, #16
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	2239      	movs	r2, #57	@ 0x39
 801bfb4:	5c9b      	ldrb	r3, [r3, r2]
 801bfb6:	b2db      	uxtb	r3, r3
 801bfb8:	2b01      	cmp	r3, #1
 801bfba:	d001      	beq.n	801bfc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801bfbc:	2301      	movs	r3, #1
 801bfbe:	e033      	b.n	801c028 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	2239      	movs	r2, #57	@ 0x39
 801bfc4:	2102      	movs	r1, #2
 801bfc6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	681a      	ldr	r2, [r3, #0]
 801bfcc:	2380      	movs	r3, #128	@ 0x80
 801bfce:	05db      	lsls	r3, r3, #23
 801bfd0:	429a      	cmp	r2, r3
 801bfd2:	d00e      	beq.n	801bff2 <HAL_TIM_Base_Start+0x4a>
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	4a15      	ldr	r2, [pc, #84]	@ (801c030 <HAL_TIM_Base_Start+0x88>)
 801bfda:	4293      	cmp	r3, r2
 801bfdc:	d009      	beq.n	801bff2 <HAL_TIM_Base_Start+0x4a>
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	4a14      	ldr	r2, [pc, #80]	@ (801c034 <HAL_TIM_Base_Start+0x8c>)
 801bfe4:	4293      	cmp	r3, r2
 801bfe6:	d004      	beq.n	801bff2 <HAL_TIM_Base_Start+0x4a>
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	4a12      	ldr	r2, [pc, #72]	@ (801c038 <HAL_TIM_Base_Start+0x90>)
 801bfee:	4293      	cmp	r3, r2
 801bff0:	d111      	bne.n	801c016 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	689b      	ldr	r3, [r3, #8]
 801bff8:	2207      	movs	r2, #7
 801bffa:	4013      	ands	r3, r2
 801bffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bffe:	68fb      	ldr	r3, [r7, #12]
 801c000:	2b06      	cmp	r3, #6
 801c002:	d010      	beq.n	801c026 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	681a      	ldr	r2, [r3, #0]
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	2101      	movs	r1, #1
 801c010:	430a      	orrs	r2, r1
 801c012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c014:	e007      	b.n	801c026 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	681a      	ldr	r2, [r3, #0]
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	2101      	movs	r1, #1
 801c022:	430a      	orrs	r2, r1
 801c024:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801c026:	2300      	movs	r3, #0
}
 801c028:	0018      	movs	r0, r3
 801c02a:	46bd      	mov	sp, r7
 801c02c:	b004      	add	sp, #16
 801c02e:	bd80      	pop	{r7, pc}
 801c030:	40000400 	.word	0x40000400
 801c034:	40010800 	.word	0x40010800
 801c038:	40011400 	.word	0x40011400

0801c03c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801c03c:	b580      	push	{r7, lr}
 801c03e:	b082      	sub	sp, #8
 801c040:	af00      	add	r7, sp, #0
 801c042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	6a1b      	ldr	r3, [r3, #32]
 801c04a:	4a0a      	ldr	r2, [pc, #40]	@ (801c074 <HAL_TIM_Base_Stop+0x38>)
 801c04c:	4013      	ands	r3, r2
 801c04e:	d107      	bne.n	801c060 <HAL_TIM_Base_Stop+0x24>
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	681a      	ldr	r2, [r3, #0]
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	681b      	ldr	r3, [r3, #0]
 801c05a:	2101      	movs	r1, #1
 801c05c:	438a      	bics	r2, r1
 801c05e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	2239      	movs	r2, #57	@ 0x39
 801c064:	2101      	movs	r1, #1
 801c066:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801c068:	2300      	movs	r3, #0
}
 801c06a:	0018      	movs	r0, r3
 801c06c:	46bd      	mov	sp, r7
 801c06e:	b002      	add	sp, #8
 801c070:	bd80      	pop	{r7, pc}
 801c072:	46c0      	nop			@ (mov r8, r8)
 801c074:	00001111 	.word	0x00001111

0801c078 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801c078:	b580      	push	{r7, lr}
 801c07a:	b082      	sub	sp, #8
 801c07c:	af00      	add	r7, sp, #0
 801c07e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	2b00      	cmp	r3, #0
 801c084:	d101      	bne.n	801c08a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801c086:	2301      	movs	r3, #1
 801c088:	e032      	b.n	801c0f0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	2239      	movs	r2, #57	@ 0x39
 801c08e:	5c9b      	ldrb	r3, [r3, r2]
 801c090:	b2db      	uxtb	r3, r3
 801c092:	2b00      	cmp	r3, #0
 801c094:	d107      	bne.n	801c0a6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	2238      	movs	r2, #56	@ 0x38
 801c09a:	2100      	movs	r1, #0
 801c09c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	0018      	movs	r0, r3
 801c0a2:	f7f6 fe8b 	bl	8012dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	2239      	movs	r2, #57	@ 0x39
 801c0aa:	2102      	movs	r1, #2
 801c0ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	681a      	ldr	r2, [r3, #0]
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	3304      	adds	r3, #4
 801c0b6:	0019      	movs	r1, r3
 801c0b8:	0010      	movs	r0, r2
 801c0ba:	f000 f975 	bl	801c3a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	223e      	movs	r2, #62	@ 0x3e
 801c0c2:	2101      	movs	r1, #1
 801c0c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	223a      	movs	r2, #58	@ 0x3a
 801c0ca:	2101      	movs	r1, #1
 801c0cc:	5499      	strb	r1, [r3, r2]
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	223b      	movs	r2, #59	@ 0x3b
 801c0d2:	2101      	movs	r1, #1
 801c0d4:	5499      	strb	r1, [r3, r2]
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	223c      	movs	r2, #60	@ 0x3c
 801c0da:	2101      	movs	r1, #1
 801c0dc:	5499      	strb	r1, [r3, r2]
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	223d      	movs	r2, #61	@ 0x3d
 801c0e2:	2101      	movs	r1, #1
 801c0e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	2239      	movs	r2, #57	@ 0x39
 801c0ea:	2101      	movs	r1, #1
 801c0ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c0ee:	2300      	movs	r3, #0
}
 801c0f0:	0018      	movs	r0, r3
 801c0f2:	46bd      	mov	sp, r7
 801c0f4:	b002      	add	sp, #8
 801c0f6:	bd80      	pop	{r7, pc}

0801c0f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801c0f8:	b580      	push	{r7, lr}
 801c0fa:	b084      	sub	sp, #16
 801c0fc:	af00      	add	r7, sp, #0
 801c0fe:	6078      	str	r0, [r7, #4]
 801c100:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801c102:	683b      	ldr	r3, [r7, #0]
 801c104:	2b00      	cmp	r3, #0
 801c106:	d108      	bne.n	801c11a <HAL_TIM_PWM_Start+0x22>
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	223a      	movs	r2, #58	@ 0x3a
 801c10c:	5c9b      	ldrb	r3, [r3, r2]
 801c10e:	b2db      	uxtb	r3, r3
 801c110:	3b01      	subs	r3, #1
 801c112:	1e5a      	subs	r2, r3, #1
 801c114:	4193      	sbcs	r3, r2
 801c116:	b2db      	uxtb	r3, r3
 801c118:	e01f      	b.n	801c15a <HAL_TIM_PWM_Start+0x62>
 801c11a:	683b      	ldr	r3, [r7, #0]
 801c11c:	2b04      	cmp	r3, #4
 801c11e:	d108      	bne.n	801c132 <HAL_TIM_PWM_Start+0x3a>
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	223b      	movs	r2, #59	@ 0x3b
 801c124:	5c9b      	ldrb	r3, [r3, r2]
 801c126:	b2db      	uxtb	r3, r3
 801c128:	3b01      	subs	r3, #1
 801c12a:	1e5a      	subs	r2, r3, #1
 801c12c:	4193      	sbcs	r3, r2
 801c12e:	b2db      	uxtb	r3, r3
 801c130:	e013      	b.n	801c15a <HAL_TIM_PWM_Start+0x62>
 801c132:	683b      	ldr	r3, [r7, #0]
 801c134:	2b08      	cmp	r3, #8
 801c136:	d108      	bne.n	801c14a <HAL_TIM_PWM_Start+0x52>
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	223c      	movs	r2, #60	@ 0x3c
 801c13c:	5c9b      	ldrb	r3, [r3, r2]
 801c13e:	b2db      	uxtb	r3, r3
 801c140:	3b01      	subs	r3, #1
 801c142:	1e5a      	subs	r2, r3, #1
 801c144:	4193      	sbcs	r3, r2
 801c146:	b2db      	uxtb	r3, r3
 801c148:	e007      	b.n	801c15a <HAL_TIM_PWM_Start+0x62>
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	223d      	movs	r2, #61	@ 0x3d
 801c14e:	5c9b      	ldrb	r3, [r3, r2]
 801c150:	b2db      	uxtb	r3, r3
 801c152:	3b01      	subs	r3, #1
 801c154:	1e5a      	subs	r2, r3, #1
 801c156:	4193      	sbcs	r3, r2
 801c158:	b2db      	uxtb	r3, r3
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	d001      	beq.n	801c162 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801c15e:	2301      	movs	r3, #1
 801c160:	e052      	b.n	801c208 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801c162:	683b      	ldr	r3, [r7, #0]
 801c164:	2b00      	cmp	r3, #0
 801c166:	d104      	bne.n	801c172 <HAL_TIM_PWM_Start+0x7a>
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	223a      	movs	r2, #58	@ 0x3a
 801c16c:	2102      	movs	r1, #2
 801c16e:	5499      	strb	r1, [r3, r2]
 801c170:	e013      	b.n	801c19a <HAL_TIM_PWM_Start+0xa2>
 801c172:	683b      	ldr	r3, [r7, #0]
 801c174:	2b04      	cmp	r3, #4
 801c176:	d104      	bne.n	801c182 <HAL_TIM_PWM_Start+0x8a>
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	223b      	movs	r2, #59	@ 0x3b
 801c17c:	2102      	movs	r1, #2
 801c17e:	5499      	strb	r1, [r3, r2]
 801c180:	e00b      	b.n	801c19a <HAL_TIM_PWM_Start+0xa2>
 801c182:	683b      	ldr	r3, [r7, #0]
 801c184:	2b08      	cmp	r3, #8
 801c186:	d104      	bne.n	801c192 <HAL_TIM_PWM_Start+0x9a>
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	223c      	movs	r2, #60	@ 0x3c
 801c18c:	2102      	movs	r1, #2
 801c18e:	5499      	strb	r1, [r3, r2]
 801c190:	e003      	b.n	801c19a <HAL_TIM_PWM_Start+0xa2>
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	223d      	movs	r2, #61	@ 0x3d
 801c196:	2102      	movs	r1, #2
 801c198:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	6839      	ldr	r1, [r7, #0]
 801c1a0:	2201      	movs	r2, #1
 801c1a2:	0018      	movs	r0, r3
 801c1a4:	f000 fa62 	bl	801c66c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	681a      	ldr	r2, [r3, #0]
 801c1ac:	2380      	movs	r3, #128	@ 0x80
 801c1ae:	05db      	lsls	r3, r3, #23
 801c1b0:	429a      	cmp	r2, r3
 801c1b2:	d00e      	beq.n	801c1d2 <HAL_TIM_PWM_Start+0xda>
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	681b      	ldr	r3, [r3, #0]
 801c1b8:	4a15      	ldr	r2, [pc, #84]	@ (801c210 <HAL_TIM_PWM_Start+0x118>)
 801c1ba:	4293      	cmp	r3, r2
 801c1bc:	d009      	beq.n	801c1d2 <HAL_TIM_PWM_Start+0xda>
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	4a14      	ldr	r2, [pc, #80]	@ (801c214 <HAL_TIM_PWM_Start+0x11c>)
 801c1c4:	4293      	cmp	r3, r2
 801c1c6:	d004      	beq.n	801c1d2 <HAL_TIM_PWM_Start+0xda>
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	4a12      	ldr	r2, [pc, #72]	@ (801c218 <HAL_TIM_PWM_Start+0x120>)
 801c1ce:	4293      	cmp	r3, r2
 801c1d0:	d111      	bne.n	801c1f6 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	681b      	ldr	r3, [r3, #0]
 801c1d6:	689b      	ldr	r3, [r3, #8]
 801c1d8:	2207      	movs	r2, #7
 801c1da:	4013      	ands	r3, r2
 801c1dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c1de:	68fb      	ldr	r3, [r7, #12]
 801c1e0:	2b06      	cmp	r3, #6
 801c1e2:	d010      	beq.n	801c206 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	681a      	ldr	r2, [r3, #0]
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	2101      	movs	r1, #1
 801c1f0:	430a      	orrs	r2, r1
 801c1f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c1f4:	e007      	b.n	801c206 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	681b      	ldr	r3, [r3, #0]
 801c1fa:	681a      	ldr	r2, [r3, #0]
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	681b      	ldr	r3, [r3, #0]
 801c200:	2101      	movs	r1, #1
 801c202:	430a      	orrs	r2, r1
 801c204:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801c206:	2300      	movs	r3, #0
}
 801c208:	0018      	movs	r0, r3
 801c20a:	46bd      	mov	sp, r7
 801c20c:	b004      	add	sp, #16
 801c20e:	bd80      	pop	{r7, pc}
 801c210:	40000400 	.word	0x40000400
 801c214:	40010800 	.word	0x40010800
 801c218:	40011400 	.word	0x40011400

0801c21c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801c21c:	b580      	push	{r7, lr}
 801c21e:	b086      	sub	sp, #24
 801c220:	af00      	add	r7, sp, #0
 801c222:	60f8      	str	r0, [r7, #12]
 801c224:	60b9      	str	r1, [r7, #8]
 801c226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c228:	2317      	movs	r3, #23
 801c22a:	18fb      	adds	r3, r7, r3
 801c22c:	2200      	movs	r2, #0
 801c22e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801c230:	68fb      	ldr	r3, [r7, #12]
 801c232:	2238      	movs	r2, #56	@ 0x38
 801c234:	5c9b      	ldrb	r3, [r3, r2]
 801c236:	2b01      	cmp	r3, #1
 801c238:	d101      	bne.n	801c23e <HAL_TIM_PWM_ConfigChannel+0x22>
 801c23a:	2302      	movs	r3, #2
 801c23c:	e0ad      	b.n	801c39a <HAL_TIM_PWM_ConfigChannel+0x17e>
 801c23e:	68fb      	ldr	r3, [r7, #12]
 801c240:	2238      	movs	r2, #56	@ 0x38
 801c242:	2101      	movs	r1, #1
 801c244:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	2b0c      	cmp	r3, #12
 801c24a:	d100      	bne.n	801c24e <HAL_TIM_PWM_ConfigChannel+0x32>
 801c24c:	e076      	b.n	801c33c <HAL_TIM_PWM_ConfigChannel+0x120>
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	2b0c      	cmp	r3, #12
 801c252:	d900      	bls.n	801c256 <HAL_TIM_PWM_ConfigChannel+0x3a>
 801c254:	e095      	b.n	801c382 <HAL_TIM_PWM_ConfigChannel+0x166>
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	2b08      	cmp	r3, #8
 801c25a:	d04e      	beq.n	801c2fa <HAL_TIM_PWM_ConfigChannel+0xde>
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	2b08      	cmp	r3, #8
 801c260:	d900      	bls.n	801c264 <HAL_TIM_PWM_ConfigChannel+0x48>
 801c262:	e08e      	b.n	801c382 <HAL_TIM_PWM_ConfigChannel+0x166>
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	2b00      	cmp	r3, #0
 801c268:	d003      	beq.n	801c272 <HAL_TIM_PWM_ConfigChannel+0x56>
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	2b04      	cmp	r3, #4
 801c26e:	d021      	beq.n	801c2b4 <HAL_TIM_PWM_ConfigChannel+0x98>
 801c270:	e087      	b.n	801c382 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	68ba      	ldr	r2, [r7, #8]
 801c278:	0011      	movs	r1, r2
 801c27a:	0018      	movs	r0, r3
 801c27c:	f000 f8f2 	bl	801c464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801c280:	68fb      	ldr	r3, [r7, #12]
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	699a      	ldr	r2, [r3, #24]
 801c286:	68fb      	ldr	r3, [r7, #12]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	2108      	movs	r1, #8
 801c28c:	430a      	orrs	r2, r1
 801c28e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801c290:	68fb      	ldr	r3, [r7, #12]
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	699a      	ldr	r2, [r3, #24]
 801c296:	68fb      	ldr	r3, [r7, #12]
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	2104      	movs	r1, #4
 801c29c:	438a      	bics	r2, r1
 801c29e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801c2a0:	68fb      	ldr	r3, [r7, #12]
 801c2a2:	681b      	ldr	r3, [r3, #0]
 801c2a4:	6999      	ldr	r1, [r3, #24]
 801c2a6:	68bb      	ldr	r3, [r7, #8]
 801c2a8:	68da      	ldr	r2, [r3, #12]
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	681b      	ldr	r3, [r3, #0]
 801c2ae:	430a      	orrs	r2, r1
 801c2b0:	619a      	str	r2, [r3, #24]
      break;
 801c2b2:	e06b      	b.n	801c38c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	68ba      	ldr	r2, [r7, #8]
 801c2ba:	0011      	movs	r1, r2
 801c2bc:	0018      	movs	r0, r3
 801c2be:	f000 f90d 	bl	801c4dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	699a      	ldr	r2, [r3, #24]
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	2180      	movs	r1, #128	@ 0x80
 801c2ce:	0109      	lsls	r1, r1, #4
 801c2d0:	430a      	orrs	r2, r1
 801c2d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	699a      	ldr	r2, [r3, #24]
 801c2da:	68fb      	ldr	r3, [r7, #12]
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	4931      	ldr	r1, [pc, #196]	@ (801c3a4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801c2e0:	400a      	ands	r2, r1
 801c2e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	681b      	ldr	r3, [r3, #0]
 801c2e8:	6999      	ldr	r1, [r3, #24]
 801c2ea:	68bb      	ldr	r3, [r7, #8]
 801c2ec:	68db      	ldr	r3, [r3, #12]
 801c2ee:	021a      	lsls	r2, r3, #8
 801c2f0:	68fb      	ldr	r3, [r7, #12]
 801c2f2:	681b      	ldr	r3, [r3, #0]
 801c2f4:	430a      	orrs	r2, r1
 801c2f6:	619a      	str	r2, [r3, #24]
      break;
 801c2f8:	e048      	b.n	801c38c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801c2fa:	68fb      	ldr	r3, [r7, #12]
 801c2fc:	681b      	ldr	r3, [r3, #0]
 801c2fe:	68ba      	ldr	r2, [r7, #8]
 801c300:	0011      	movs	r1, r2
 801c302:	0018      	movs	r0, r3
 801c304:	f000 f92c 	bl	801c560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801c308:	68fb      	ldr	r3, [r7, #12]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	69da      	ldr	r2, [r3, #28]
 801c30e:	68fb      	ldr	r3, [r7, #12]
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	2108      	movs	r1, #8
 801c314:	430a      	orrs	r2, r1
 801c316:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	681b      	ldr	r3, [r3, #0]
 801c31c:	69da      	ldr	r2, [r3, #28]
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	2104      	movs	r1, #4
 801c324:	438a      	bics	r2, r1
 801c326:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801c328:	68fb      	ldr	r3, [r7, #12]
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	69d9      	ldr	r1, [r3, #28]
 801c32e:	68bb      	ldr	r3, [r7, #8]
 801c330:	68da      	ldr	r2, [r3, #12]
 801c332:	68fb      	ldr	r3, [r7, #12]
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	430a      	orrs	r2, r1
 801c338:	61da      	str	r2, [r3, #28]
      break;
 801c33a:	e027      	b.n	801c38c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	68ba      	ldr	r2, [r7, #8]
 801c342:	0011      	movs	r1, r2
 801c344:	0018      	movs	r0, r3
 801c346:	f000 f94b 	bl	801c5e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801c34a:	68fb      	ldr	r3, [r7, #12]
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	69da      	ldr	r2, [r3, #28]
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	2180      	movs	r1, #128	@ 0x80
 801c356:	0109      	lsls	r1, r1, #4
 801c358:	430a      	orrs	r2, r1
 801c35a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801c35c:	68fb      	ldr	r3, [r7, #12]
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	69da      	ldr	r2, [r3, #28]
 801c362:	68fb      	ldr	r3, [r7, #12]
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	490f      	ldr	r1, [pc, #60]	@ (801c3a4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801c368:	400a      	ands	r2, r1
 801c36a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801c36c:	68fb      	ldr	r3, [r7, #12]
 801c36e:	681b      	ldr	r3, [r3, #0]
 801c370:	69d9      	ldr	r1, [r3, #28]
 801c372:	68bb      	ldr	r3, [r7, #8]
 801c374:	68db      	ldr	r3, [r3, #12]
 801c376:	021a      	lsls	r2, r3, #8
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	430a      	orrs	r2, r1
 801c37e:	61da      	str	r2, [r3, #28]
      break;
 801c380:	e004      	b.n	801c38c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801c382:	2317      	movs	r3, #23
 801c384:	18fb      	adds	r3, r7, r3
 801c386:	2201      	movs	r2, #1
 801c388:	701a      	strb	r2, [r3, #0]
      break;
 801c38a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	2238      	movs	r2, #56	@ 0x38
 801c390:	2100      	movs	r1, #0
 801c392:	5499      	strb	r1, [r3, r2]

  return status;
 801c394:	2317      	movs	r3, #23
 801c396:	18fb      	adds	r3, r7, r3
 801c398:	781b      	ldrb	r3, [r3, #0]
}
 801c39a:	0018      	movs	r0, r3
 801c39c:	46bd      	mov	sp, r7
 801c39e:	b006      	add	sp, #24
 801c3a0:	bd80      	pop	{r7, pc}
 801c3a2:	46c0      	nop			@ (mov r8, r8)
 801c3a4:	fffffbff 	.word	0xfffffbff

0801c3a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801c3a8:	b580      	push	{r7, lr}
 801c3aa:	b084      	sub	sp, #16
 801c3ac:	af00      	add	r7, sp, #0
 801c3ae:	6078      	str	r0, [r7, #4]
 801c3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	681b      	ldr	r3, [r3, #0]
 801c3b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801c3b8:	687a      	ldr	r2, [r7, #4]
 801c3ba:	2380      	movs	r3, #128	@ 0x80
 801c3bc:	05db      	lsls	r3, r3, #23
 801c3be:	429a      	cmp	r2, r3
 801c3c0:	d00b      	beq.n	801c3da <TIM_Base_SetConfig+0x32>
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	4a23      	ldr	r2, [pc, #140]	@ (801c454 <TIM_Base_SetConfig+0xac>)
 801c3c6:	4293      	cmp	r3, r2
 801c3c8:	d007      	beq.n	801c3da <TIM_Base_SetConfig+0x32>
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	4a22      	ldr	r2, [pc, #136]	@ (801c458 <TIM_Base_SetConfig+0xb0>)
 801c3ce:	4293      	cmp	r3, r2
 801c3d0:	d003      	beq.n	801c3da <TIM_Base_SetConfig+0x32>
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	4a21      	ldr	r2, [pc, #132]	@ (801c45c <TIM_Base_SetConfig+0xb4>)
 801c3d6:	4293      	cmp	r3, r2
 801c3d8:	d108      	bne.n	801c3ec <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801c3da:	68fb      	ldr	r3, [r7, #12]
 801c3dc:	2270      	movs	r2, #112	@ 0x70
 801c3de:	4393      	bics	r3, r2
 801c3e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801c3e2:	683b      	ldr	r3, [r7, #0]
 801c3e4:	685b      	ldr	r3, [r3, #4]
 801c3e6:	68fa      	ldr	r2, [r7, #12]
 801c3e8:	4313      	orrs	r3, r2
 801c3ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801c3ec:	687a      	ldr	r2, [r7, #4]
 801c3ee:	2380      	movs	r3, #128	@ 0x80
 801c3f0:	05db      	lsls	r3, r3, #23
 801c3f2:	429a      	cmp	r2, r3
 801c3f4:	d00b      	beq.n	801c40e <TIM_Base_SetConfig+0x66>
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	4a16      	ldr	r2, [pc, #88]	@ (801c454 <TIM_Base_SetConfig+0xac>)
 801c3fa:	4293      	cmp	r3, r2
 801c3fc:	d007      	beq.n	801c40e <TIM_Base_SetConfig+0x66>
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	4a15      	ldr	r2, [pc, #84]	@ (801c458 <TIM_Base_SetConfig+0xb0>)
 801c402:	4293      	cmp	r3, r2
 801c404:	d003      	beq.n	801c40e <TIM_Base_SetConfig+0x66>
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	4a14      	ldr	r2, [pc, #80]	@ (801c45c <TIM_Base_SetConfig+0xb4>)
 801c40a:	4293      	cmp	r3, r2
 801c40c:	d108      	bne.n	801c420 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	4a13      	ldr	r2, [pc, #76]	@ (801c460 <TIM_Base_SetConfig+0xb8>)
 801c412:	4013      	ands	r3, r2
 801c414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801c416:	683b      	ldr	r3, [r7, #0]
 801c418:	68db      	ldr	r3, [r3, #12]
 801c41a:	68fa      	ldr	r2, [r7, #12]
 801c41c:	4313      	orrs	r3, r2
 801c41e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	2280      	movs	r2, #128	@ 0x80
 801c424:	4393      	bics	r3, r2
 801c426:	001a      	movs	r2, r3
 801c428:	683b      	ldr	r3, [r7, #0]
 801c42a:	691b      	ldr	r3, [r3, #16]
 801c42c:	4313      	orrs	r3, r2
 801c42e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	68fa      	ldr	r2, [r7, #12]
 801c434:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801c436:	683b      	ldr	r3, [r7, #0]
 801c438:	689a      	ldr	r2, [r3, #8]
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801c43e:	683b      	ldr	r3, [r7, #0]
 801c440:	681a      	ldr	r2, [r3, #0]
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	2201      	movs	r2, #1
 801c44a:	615a      	str	r2, [r3, #20]
}
 801c44c:	46c0      	nop			@ (mov r8, r8)
 801c44e:	46bd      	mov	sp, r7
 801c450:	b004      	add	sp, #16
 801c452:	bd80      	pop	{r7, pc}
 801c454:	40000400 	.word	0x40000400
 801c458:	40010800 	.word	0x40010800
 801c45c:	40011400 	.word	0x40011400
 801c460:	fffffcff 	.word	0xfffffcff

0801c464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c464:	b580      	push	{r7, lr}
 801c466:	b086      	sub	sp, #24
 801c468:	af00      	add	r7, sp, #0
 801c46a:	6078      	str	r0, [r7, #4]
 801c46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	6a1b      	ldr	r3, [r3, #32]
 801c472:	2201      	movs	r2, #1
 801c474:	4393      	bics	r3, r2
 801c476:	001a      	movs	r2, r3
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	6a1b      	ldr	r3, [r3, #32]
 801c480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	685b      	ldr	r3, [r3, #4]
 801c486:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	699b      	ldr	r3, [r3, #24]
 801c48c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801c48e:	68fb      	ldr	r3, [r7, #12]
 801c490:	2270      	movs	r2, #112	@ 0x70
 801c492:	4393      	bics	r3, r2
 801c494:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	2203      	movs	r2, #3
 801c49a:	4393      	bics	r3, r2
 801c49c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c49e:	683b      	ldr	r3, [r7, #0]
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	68fa      	ldr	r2, [r7, #12]
 801c4a4:	4313      	orrs	r3, r2
 801c4a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801c4a8:	697b      	ldr	r3, [r7, #20]
 801c4aa:	2202      	movs	r2, #2
 801c4ac:	4393      	bics	r3, r2
 801c4ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801c4b0:	683b      	ldr	r3, [r7, #0]
 801c4b2:	689b      	ldr	r3, [r3, #8]
 801c4b4:	697a      	ldr	r2, [r7, #20]
 801c4b6:	4313      	orrs	r3, r2
 801c4b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	693a      	ldr	r2, [r7, #16]
 801c4be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	68fa      	ldr	r2, [r7, #12]
 801c4c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801c4c6:	683b      	ldr	r3, [r7, #0]
 801c4c8:	685a      	ldr	r2, [r3, #4]
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	697a      	ldr	r2, [r7, #20]
 801c4d2:	621a      	str	r2, [r3, #32]
}
 801c4d4:	46c0      	nop			@ (mov r8, r8)
 801c4d6:	46bd      	mov	sp, r7
 801c4d8:	b006      	add	sp, #24
 801c4da:	bd80      	pop	{r7, pc}

0801c4dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c4dc:	b580      	push	{r7, lr}
 801c4de:	b086      	sub	sp, #24
 801c4e0:	af00      	add	r7, sp, #0
 801c4e2:	6078      	str	r0, [r7, #4]
 801c4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	6a1b      	ldr	r3, [r3, #32]
 801c4ea:	2210      	movs	r2, #16
 801c4ec:	4393      	bics	r3, r2
 801c4ee:	001a      	movs	r2, r3
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	6a1b      	ldr	r3, [r3, #32]
 801c4f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	685b      	ldr	r3, [r3, #4]
 801c4fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	699b      	ldr	r3, [r3, #24]
 801c504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	4a13      	ldr	r2, [pc, #76]	@ (801c558 <TIM_OC2_SetConfig+0x7c>)
 801c50a:	4013      	ands	r3, r2
 801c50c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	4a12      	ldr	r2, [pc, #72]	@ (801c55c <TIM_OC2_SetConfig+0x80>)
 801c512:	4013      	ands	r3, r2
 801c514:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801c516:	683b      	ldr	r3, [r7, #0]
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	021b      	lsls	r3, r3, #8
 801c51c:	68fa      	ldr	r2, [r7, #12]
 801c51e:	4313      	orrs	r3, r2
 801c520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801c522:	697b      	ldr	r3, [r7, #20]
 801c524:	2220      	movs	r2, #32
 801c526:	4393      	bics	r3, r2
 801c528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801c52a:	683b      	ldr	r3, [r7, #0]
 801c52c:	689b      	ldr	r3, [r3, #8]
 801c52e:	011b      	lsls	r3, r3, #4
 801c530:	697a      	ldr	r2, [r7, #20]
 801c532:	4313      	orrs	r3, r2
 801c534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	693a      	ldr	r2, [r7, #16]
 801c53a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	68fa      	ldr	r2, [r7, #12]
 801c540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801c542:	683b      	ldr	r3, [r7, #0]
 801c544:	685a      	ldr	r2, [r3, #4]
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	697a      	ldr	r2, [r7, #20]
 801c54e:	621a      	str	r2, [r3, #32]
}
 801c550:	46c0      	nop			@ (mov r8, r8)
 801c552:	46bd      	mov	sp, r7
 801c554:	b006      	add	sp, #24
 801c556:	bd80      	pop	{r7, pc}
 801c558:	ffff8fff 	.word	0xffff8fff
 801c55c:	fffffcff 	.word	0xfffffcff

0801c560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c560:	b580      	push	{r7, lr}
 801c562:	b086      	sub	sp, #24
 801c564:	af00      	add	r7, sp, #0
 801c566:	6078      	str	r0, [r7, #4]
 801c568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	6a1b      	ldr	r3, [r3, #32]
 801c56e:	4a1a      	ldr	r2, [pc, #104]	@ (801c5d8 <TIM_OC3_SetConfig+0x78>)
 801c570:	401a      	ands	r2, r3
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	6a1b      	ldr	r3, [r3, #32]
 801c57a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	685b      	ldr	r3, [r3, #4]
 801c580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	69db      	ldr	r3, [r3, #28]
 801c586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801c588:	68fb      	ldr	r3, [r7, #12]
 801c58a:	2270      	movs	r2, #112	@ 0x70
 801c58c:	4393      	bics	r3, r2
 801c58e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	2203      	movs	r2, #3
 801c594:	4393      	bics	r3, r2
 801c596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c598:	683b      	ldr	r3, [r7, #0]
 801c59a:	681b      	ldr	r3, [r3, #0]
 801c59c:	68fa      	ldr	r2, [r7, #12]
 801c59e:	4313      	orrs	r3, r2
 801c5a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801c5a2:	697b      	ldr	r3, [r7, #20]
 801c5a4:	4a0d      	ldr	r2, [pc, #52]	@ (801c5dc <TIM_OC3_SetConfig+0x7c>)
 801c5a6:	4013      	ands	r3, r2
 801c5a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801c5aa:	683b      	ldr	r3, [r7, #0]
 801c5ac:	689b      	ldr	r3, [r3, #8]
 801c5ae:	021b      	lsls	r3, r3, #8
 801c5b0:	697a      	ldr	r2, [r7, #20]
 801c5b2:	4313      	orrs	r3, r2
 801c5b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	693a      	ldr	r2, [r7, #16]
 801c5ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	68fa      	ldr	r2, [r7, #12]
 801c5c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801c5c2:	683b      	ldr	r3, [r7, #0]
 801c5c4:	685a      	ldr	r2, [r3, #4]
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	697a      	ldr	r2, [r7, #20]
 801c5ce:	621a      	str	r2, [r3, #32]
}
 801c5d0:	46c0      	nop			@ (mov r8, r8)
 801c5d2:	46bd      	mov	sp, r7
 801c5d4:	b006      	add	sp, #24
 801c5d6:	bd80      	pop	{r7, pc}
 801c5d8:	fffffeff 	.word	0xfffffeff
 801c5dc:	fffffdff 	.word	0xfffffdff

0801c5e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c5e0:	b580      	push	{r7, lr}
 801c5e2:	b086      	sub	sp, #24
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	6078      	str	r0, [r7, #4]
 801c5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	6a1b      	ldr	r3, [r3, #32]
 801c5ee:	4a1b      	ldr	r2, [pc, #108]	@ (801c65c <TIM_OC4_SetConfig+0x7c>)
 801c5f0:	401a      	ands	r2, r3
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	6a1b      	ldr	r3, [r3, #32]
 801c5fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	685b      	ldr	r3, [r3, #4]
 801c600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	69db      	ldr	r3, [r3, #28]
 801c606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	4a15      	ldr	r2, [pc, #84]	@ (801c660 <TIM_OC4_SetConfig+0x80>)
 801c60c:	4013      	ands	r3, r2
 801c60e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	4a14      	ldr	r2, [pc, #80]	@ (801c664 <TIM_OC4_SetConfig+0x84>)
 801c614:	4013      	ands	r3, r2
 801c616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801c618:	683b      	ldr	r3, [r7, #0]
 801c61a:	681b      	ldr	r3, [r3, #0]
 801c61c:	021b      	lsls	r3, r3, #8
 801c61e:	68fa      	ldr	r2, [r7, #12]
 801c620:	4313      	orrs	r3, r2
 801c622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801c624:	697b      	ldr	r3, [r7, #20]
 801c626:	4a10      	ldr	r2, [pc, #64]	@ (801c668 <TIM_OC4_SetConfig+0x88>)
 801c628:	4013      	ands	r3, r2
 801c62a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801c62c:	683b      	ldr	r3, [r7, #0]
 801c62e:	689b      	ldr	r3, [r3, #8]
 801c630:	031b      	lsls	r3, r3, #12
 801c632:	697a      	ldr	r2, [r7, #20]
 801c634:	4313      	orrs	r3, r2
 801c636:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	693a      	ldr	r2, [r7, #16]
 801c63c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	68fa      	ldr	r2, [r7, #12]
 801c642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801c644:	683b      	ldr	r3, [r7, #0]
 801c646:	685a      	ldr	r2, [r3, #4]
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	697a      	ldr	r2, [r7, #20]
 801c650:	621a      	str	r2, [r3, #32]
}
 801c652:	46c0      	nop			@ (mov r8, r8)
 801c654:	46bd      	mov	sp, r7
 801c656:	b006      	add	sp, #24
 801c658:	bd80      	pop	{r7, pc}
 801c65a:	46c0      	nop			@ (mov r8, r8)
 801c65c:	ffffefff 	.word	0xffffefff
 801c660:	ffff8fff 	.word	0xffff8fff
 801c664:	fffffcff 	.word	0xfffffcff
 801c668:	ffffdfff 	.word	0xffffdfff

0801c66c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801c66c:	b580      	push	{r7, lr}
 801c66e:	b086      	sub	sp, #24
 801c670:	af00      	add	r7, sp, #0
 801c672:	60f8      	str	r0, [r7, #12]
 801c674:	60b9      	str	r1, [r7, #8]
 801c676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801c678:	68bb      	ldr	r3, [r7, #8]
 801c67a:	221f      	movs	r2, #31
 801c67c:	4013      	ands	r3, r2
 801c67e:	2201      	movs	r2, #1
 801c680:	409a      	lsls	r2, r3
 801c682:	0013      	movs	r3, r2
 801c684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	6a1b      	ldr	r3, [r3, #32]
 801c68a:	697a      	ldr	r2, [r7, #20]
 801c68c:	43d2      	mvns	r2, r2
 801c68e:	401a      	ands	r2, r3
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801c694:	68fb      	ldr	r3, [r7, #12]
 801c696:	6a1a      	ldr	r2, [r3, #32]
 801c698:	68bb      	ldr	r3, [r7, #8]
 801c69a:	211f      	movs	r1, #31
 801c69c:	400b      	ands	r3, r1
 801c69e:	6879      	ldr	r1, [r7, #4]
 801c6a0:	4099      	lsls	r1, r3
 801c6a2:	000b      	movs	r3, r1
 801c6a4:	431a      	orrs	r2, r3
 801c6a6:	68fb      	ldr	r3, [r7, #12]
 801c6a8:	621a      	str	r2, [r3, #32]
}
 801c6aa:	46c0      	nop			@ (mov r8, r8)
 801c6ac:	46bd      	mov	sp, r7
 801c6ae:	b006      	add	sp, #24
 801c6b0:	bd80      	pop	{r7, pc}
	...

0801c6b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801c6b4:	b580      	push	{r7, lr}
 801c6b6:	b084      	sub	sp, #16
 801c6b8:	af00      	add	r7, sp, #0
 801c6ba:	6078      	str	r0, [r7, #4]
 801c6bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	2238      	movs	r2, #56	@ 0x38
 801c6c2:	5c9b      	ldrb	r3, [r3, r2]
 801c6c4:	2b01      	cmp	r3, #1
 801c6c6:	d101      	bne.n	801c6cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801c6c8:	2302      	movs	r3, #2
 801c6ca:	e047      	b.n	801c75c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	2238      	movs	r2, #56	@ 0x38
 801c6d0:	2101      	movs	r1, #1
 801c6d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	2239      	movs	r2, #57	@ 0x39
 801c6d8:	2102      	movs	r1, #2
 801c6da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	685b      	ldr	r3, [r3, #4]
 801c6e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	689b      	ldr	r3, [r3, #8]
 801c6ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	2270      	movs	r2, #112	@ 0x70
 801c6f0:	4393      	bics	r3, r2
 801c6f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801c6f4:	683b      	ldr	r3, [r7, #0]
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	68fa      	ldr	r2, [r7, #12]
 801c6fa:	4313      	orrs	r3, r2
 801c6fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	681b      	ldr	r3, [r3, #0]
 801c702:	68fa      	ldr	r2, [r7, #12]
 801c704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	681a      	ldr	r2, [r3, #0]
 801c70a:	2380      	movs	r3, #128	@ 0x80
 801c70c:	05db      	lsls	r3, r3, #23
 801c70e:	429a      	cmp	r2, r3
 801c710:	d00e      	beq.n	801c730 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	681b      	ldr	r3, [r3, #0]
 801c716:	4a13      	ldr	r2, [pc, #76]	@ (801c764 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801c718:	4293      	cmp	r3, r2
 801c71a:	d009      	beq.n	801c730 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c71c:	687b      	ldr	r3, [r7, #4]
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	4a11      	ldr	r2, [pc, #68]	@ (801c768 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801c722:	4293      	cmp	r3, r2
 801c724:	d004      	beq.n	801c730 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	4a10      	ldr	r2, [pc, #64]	@ (801c76c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801c72c:	4293      	cmp	r3, r2
 801c72e:	d10c      	bne.n	801c74a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801c730:	68bb      	ldr	r3, [r7, #8]
 801c732:	2280      	movs	r2, #128	@ 0x80
 801c734:	4393      	bics	r3, r2
 801c736:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801c738:	683b      	ldr	r3, [r7, #0]
 801c73a:	685b      	ldr	r3, [r3, #4]
 801c73c:	68ba      	ldr	r2, [r7, #8]
 801c73e:	4313      	orrs	r3, r2
 801c740:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	681b      	ldr	r3, [r3, #0]
 801c746:	68ba      	ldr	r2, [r7, #8]
 801c748:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	2239      	movs	r2, #57	@ 0x39
 801c74e:	2101      	movs	r1, #1
 801c750:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	2238      	movs	r2, #56	@ 0x38
 801c756:	2100      	movs	r1, #0
 801c758:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c75a:	2300      	movs	r3, #0
}
 801c75c:	0018      	movs	r0, r3
 801c75e:	46bd      	mov	sp, r7
 801c760:	b004      	add	sp, #16
 801c762:	bd80      	pop	{r7, pc}
 801c764:	40000400 	.word	0x40000400
 801c768:	40010800 	.word	0x40010800
 801c76c:	40011400 	.word	0x40011400

0801c770 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801c770:	b580      	push	{r7, lr}
 801c772:	b082      	sub	sp, #8
 801c774:	af00      	add	r7, sp, #0
 801c776:	6078      	str	r0, [r7, #4]
 801c778:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	2238      	movs	r2, #56	@ 0x38
 801c77e:	5c9b      	ldrb	r3, [r3, r2]
 801c780:	2b01      	cmp	r3, #1
 801c782:	d101      	bne.n	801c788 <HAL_TIMEx_RemapConfig+0x18>
 801c784:	2302      	movs	r3, #2
 801c786:	e00c      	b.n	801c7a2 <HAL_TIMEx_RemapConfig+0x32>
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	2238      	movs	r2, #56	@ 0x38
 801c78c:	2101      	movs	r1, #1
 801c78e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	683a      	ldr	r2, [r7, #0]
 801c796:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	2238      	movs	r2, #56	@ 0x38
 801c79c:	2100      	movs	r1, #0
 801c79e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c7a0:	2300      	movs	r3, #0
}
 801c7a2:	0018      	movs	r0, r3
 801c7a4:	46bd      	mov	sp, r7
 801c7a6:	b002      	add	sp, #8
 801c7a8:	bd80      	pop	{r7, pc}
	...

0801c7ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801c7ac:	b580      	push	{r7, lr}
 801c7ae:	b082      	sub	sp, #8
 801c7b0:	af00      	add	r7, sp, #0
 801c7b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d101      	bne.n	801c7be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801c7ba:	2301      	movs	r3, #1
 801c7bc:	e053      	b.n	801c866 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d116      	bne.n	801c7f4 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801c7c6:	687b      	ldr	r3, [r7, #4]
 801c7c8:	2278      	movs	r2, #120	@ 0x78
 801c7ca:	2100      	movs	r1, #0
 801c7cc:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	0018      	movs	r0, r3
 801c7d2:	f000 fd65 	bl	801d2a0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	22b0      	movs	r2, #176	@ 0xb0
 801c7da:	589b      	ldr	r3, [r3, r2]
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d103      	bne.n	801c7e8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	21b0      	movs	r1, #176	@ 0xb0
 801c7e4:	4a22      	ldr	r2, [pc, #136]	@ (801c870 <HAL_UART_Init+0xc4>)
 801c7e6:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801c7e8:	687b      	ldr	r3, [r7, #4]
 801c7ea:	22b0      	movs	r2, #176	@ 0xb0
 801c7ec:	589b      	ldr	r3, [r3, r2]
 801c7ee:	687a      	ldr	r2, [r7, #4]
 801c7f0:	0010      	movs	r0, r2
 801c7f2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	2224      	movs	r2, #36	@ 0x24
 801c7f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	681a      	ldr	r2, [r3, #0]
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	2101      	movs	r1, #1
 801c806:	438a      	bics	r2, r1
 801c808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	0018      	movs	r0, r3
 801c80e:	f000 fd8b 	bl	801d328 <UART_SetConfig>
 801c812:	0003      	movs	r3, r0
 801c814:	2b01      	cmp	r3, #1
 801c816:	d101      	bne.n	801c81c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801c818:	2301      	movs	r3, #1
 801c81a:	e024      	b.n	801c866 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c820:	2b00      	cmp	r3, #0
 801c822:	d003      	beq.n	801c82c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	0018      	movs	r0, r3
 801c828:	f001 f81c 	bl	801d864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	685a      	ldr	r2, [r3, #4]
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	490f      	ldr	r1, [pc, #60]	@ (801c874 <HAL_UART_Init+0xc8>)
 801c838:	400a      	ands	r2, r1
 801c83a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	689a      	ldr	r2, [r3, #8]
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	212a      	movs	r1, #42	@ 0x2a
 801c848:	438a      	bics	r2, r1
 801c84a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	681a      	ldr	r2, [r3, #0]
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	2101      	movs	r1, #1
 801c858:	430a      	orrs	r2, r1
 801c85a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	0018      	movs	r0, r3
 801c860:	f001 f8b4 	bl	801d9cc <UART_CheckIdleState>
 801c864:	0003      	movs	r3, r0
}
 801c866:	0018      	movs	r0, r3
 801c868:	46bd      	mov	sp, r7
 801c86a:	b002      	add	sp, #8
 801c86c:	bd80      	pop	{r7, pc}
 801c86e:	46c0      	nop			@ (mov r8, r8)
 801c870:	08013031 	.word	0x08013031
 801c874:	ffffb7ff 	.word	0xffffb7ff

0801c878 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c878:	b580      	push	{r7, lr}
 801c87a:	b08a      	sub	sp, #40	@ 0x28
 801c87c:	af02      	add	r7, sp, #8
 801c87e:	60f8      	str	r0, [r7, #12]
 801c880:	60b9      	str	r1, [r7, #8]
 801c882:	603b      	str	r3, [r7, #0]
 801c884:	1dbb      	adds	r3, r7, #6
 801c886:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c88c:	2b20      	cmp	r3, #32
 801c88e:	d000      	beq.n	801c892 <HAL_UART_Transmit+0x1a>
 801c890:	e08c      	b.n	801c9ac <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801c892:	68bb      	ldr	r3, [r7, #8]
 801c894:	2b00      	cmp	r3, #0
 801c896:	d003      	beq.n	801c8a0 <HAL_UART_Transmit+0x28>
 801c898:	1dbb      	adds	r3, r7, #6
 801c89a:	881b      	ldrh	r3, [r3, #0]
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	d101      	bne.n	801c8a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801c8a0:	2301      	movs	r3, #1
 801c8a2:	e084      	b.n	801c9ae <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	689a      	ldr	r2, [r3, #8]
 801c8a8:	2380      	movs	r3, #128	@ 0x80
 801c8aa:	015b      	lsls	r3, r3, #5
 801c8ac:	429a      	cmp	r2, r3
 801c8ae:	d109      	bne.n	801c8c4 <HAL_UART_Transmit+0x4c>
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	691b      	ldr	r3, [r3, #16]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d105      	bne.n	801c8c4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c8b8:	68bb      	ldr	r3, [r7, #8]
 801c8ba:	2201      	movs	r2, #1
 801c8bc:	4013      	ands	r3, r2
 801c8be:	d001      	beq.n	801c8c4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801c8c0:	2301      	movs	r3, #1
 801c8c2:	e074      	b.n	801c9ae <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	2284      	movs	r2, #132	@ 0x84
 801c8c8:	2100      	movs	r1, #0
 801c8ca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	2221      	movs	r2, #33	@ 0x21
 801c8d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801c8d2:	f7f7 fa7b 	bl	8013dcc <HAL_GetTick>
 801c8d6:	0003      	movs	r3, r0
 801c8d8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	1dba      	adds	r2, r7, #6
 801c8de:	2150      	movs	r1, #80	@ 0x50
 801c8e0:	8812      	ldrh	r2, [r2, #0]
 801c8e2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	1dba      	adds	r2, r7, #6
 801c8e8:	2152      	movs	r1, #82	@ 0x52
 801c8ea:	8812      	ldrh	r2, [r2, #0]
 801c8ec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	689a      	ldr	r2, [r3, #8]
 801c8f2:	2380      	movs	r3, #128	@ 0x80
 801c8f4:	015b      	lsls	r3, r3, #5
 801c8f6:	429a      	cmp	r2, r3
 801c8f8:	d108      	bne.n	801c90c <HAL_UART_Transmit+0x94>
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	691b      	ldr	r3, [r3, #16]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d104      	bne.n	801c90c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801c902:	2300      	movs	r3, #0
 801c904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801c906:	68bb      	ldr	r3, [r7, #8]
 801c908:	61bb      	str	r3, [r7, #24]
 801c90a:	e003      	b.n	801c914 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801c90c:	68bb      	ldr	r3, [r7, #8]
 801c90e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801c910:	2300      	movs	r3, #0
 801c912:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801c914:	e02f      	b.n	801c976 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801c916:	697a      	ldr	r2, [r7, #20]
 801c918:	68f8      	ldr	r0, [r7, #12]
 801c91a:	683b      	ldr	r3, [r7, #0]
 801c91c:	9300      	str	r3, [sp, #0]
 801c91e:	0013      	movs	r3, r2
 801c920:	2200      	movs	r2, #0
 801c922:	2180      	movs	r1, #128	@ 0x80
 801c924:	f001 f8fa 	bl	801db1c <UART_WaitOnFlagUntilTimeout>
 801c928:	1e03      	subs	r3, r0, #0
 801c92a:	d004      	beq.n	801c936 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	2220      	movs	r2, #32
 801c930:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801c932:	2303      	movs	r3, #3
 801c934:	e03b      	b.n	801c9ae <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801c936:	69fb      	ldr	r3, [r7, #28]
 801c938:	2b00      	cmp	r3, #0
 801c93a:	d10b      	bne.n	801c954 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801c93c:	69bb      	ldr	r3, [r7, #24]
 801c93e:	881b      	ldrh	r3, [r3, #0]
 801c940:	001a      	movs	r2, r3
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	05d2      	lsls	r2, r2, #23
 801c948:	0dd2      	lsrs	r2, r2, #23
 801c94a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801c94c:	69bb      	ldr	r3, [r7, #24]
 801c94e:	3302      	adds	r3, #2
 801c950:	61bb      	str	r3, [r7, #24]
 801c952:	e007      	b.n	801c964 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801c954:	69fb      	ldr	r3, [r7, #28]
 801c956:	781a      	ldrb	r2, [r3, #0]
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801c95e:	69fb      	ldr	r3, [r7, #28]
 801c960:	3301      	adds	r3, #1
 801c962:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	2252      	movs	r2, #82	@ 0x52
 801c968:	5a9b      	ldrh	r3, [r3, r2]
 801c96a:	b29b      	uxth	r3, r3
 801c96c:	3b01      	subs	r3, #1
 801c96e:	b299      	uxth	r1, r3
 801c970:	68fb      	ldr	r3, [r7, #12]
 801c972:	2252      	movs	r2, #82	@ 0x52
 801c974:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801c976:	68fb      	ldr	r3, [r7, #12]
 801c978:	2252      	movs	r2, #82	@ 0x52
 801c97a:	5a9b      	ldrh	r3, [r3, r2]
 801c97c:	b29b      	uxth	r3, r3
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d1c9      	bne.n	801c916 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801c982:	697a      	ldr	r2, [r7, #20]
 801c984:	68f8      	ldr	r0, [r7, #12]
 801c986:	683b      	ldr	r3, [r7, #0]
 801c988:	9300      	str	r3, [sp, #0]
 801c98a:	0013      	movs	r3, r2
 801c98c:	2200      	movs	r2, #0
 801c98e:	2140      	movs	r1, #64	@ 0x40
 801c990:	f001 f8c4 	bl	801db1c <UART_WaitOnFlagUntilTimeout>
 801c994:	1e03      	subs	r3, r0, #0
 801c996:	d004      	beq.n	801c9a2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801c998:	68fb      	ldr	r3, [r7, #12]
 801c99a:	2220      	movs	r2, #32
 801c99c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801c99e:	2303      	movs	r3, #3
 801c9a0:	e005      	b.n	801c9ae <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801c9a2:	68fb      	ldr	r3, [r7, #12]
 801c9a4:	2220      	movs	r2, #32
 801c9a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801c9a8:	2300      	movs	r3, #0
 801c9aa:	e000      	b.n	801c9ae <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801c9ac:	2302      	movs	r3, #2
  }
}
 801c9ae:	0018      	movs	r0, r3
 801c9b0:	46bd      	mov	sp, r7
 801c9b2:	b008      	add	sp, #32
 801c9b4:	bd80      	pop	{r7, pc}
	...

0801c9b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b088      	sub	sp, #32
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	60f8      	str	r0, [r7, #12]
 801c9c0:	60b9      	str	r1, [r7, #8]
 801c9c2:	1dbb      	adds	r3, r7, #6
 801c9c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	2280      	movs	r2, #128	@ 0x80
 801c9ca:	589b      	ldr	r3, [r3, r2]
 801c9cc:	2b20      	cmp	r3, #32
 801c9ce:	d14a      	bne.n	801ca66 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801c9d0:	68bb      	ldr	r3, [r7, #8]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d003      	beq.n	801c9de <HAL_UART_Receive_IT+0x26>
 801c9d6:	1dbb      	adds	r3, r7, #6
 801c9d8:	881b      	ldrh	r3, [r3, #0]
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d101      	bne.n	801c9e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801c9de:	2301      	movs	r3, #1
 801c9e0:	e042      	b.n	801ca68 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	689a      	ldr	r2, [r3, #8]
 801c9e6:	2380      	movs	r3, #128	@ 0x80
 801c9e8:	015b      	lsls	r3, r3, #5
 801c9ea:	429a      	cmp	r2, r3
 801c9ec:	d109      	bne.n	801ca02 <HAL_UART_Receive_IT+0x4a>
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	691b      	ldr	r3, [r3, #16]
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d105      	bne.n	801ca02 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c9f6:	68bb      	ldr	r3, [r7, #8]
 801c9f8:	2201      	movs	r2, #1
 801c9fa:	4013      	ands	r3, r2
 801c9fc:	d001      	beq.n	801ca02 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801c9fe:	2301      	movs	r3, #1
 801ca00:	e032      	b.n	801ca68 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ca02:	68fb      	ldr	r3, [r7, #12]
 801ca04:	2200      	movs	r2, #0
 801ca06:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ca08:	68fb      	ldr	r3, [r7, #12]
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	4a18      	ldr	r2, [pc, #96]	@ (801ca70 <HAL_UART_Receive_IT+0xb8>)
 801ca0e:	4293      	cmp	r3, r2
 801ca10:	d020      	beq.n	801ca54 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ca12:	68fb      	ldr	r3, [r7, #12]
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	685a      	ldr	r2, [r3, #4]
 801ca18:	2380      	movs	r3, #128	@ 0x80
 801ca1a:	041b      	lsls	r3, r3, #16
 801ca1c:	4013      	ands	r3, r2
 801ca1e:	d019      	beq.n	801ca54 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca20:	f3ef 8310 	mrs	r3, PRIMASK
 801ca24:	613b      	str	r3, [r7, #16]
  return(result);
 801ca26:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ca28:	61fb      	str	r3, [r7, #28]
 801ca2a:	2301      	movs	r3, #1
 801ca2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca2e:	697b      	ldr	r3, [r7, #20]
 801ca30:	f383 8810 	msr	PRIMASK, r3
}
 801ca34:	46c0      	nop			@ (mov r8, r8)
 801ca36:	68fb      	ldr	r3, [r7, #12]
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	681a      	ldr	r2, [r3, #0]
 801ca3c:	68fb      	ldr	r3, [r7, #12]
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	2180      	movs	r1, #128	@ 0x80
 801ca42:	04c9      	lsls	r1, r1, #19
 801ca44:	430a      	orrs	r2, r1
 801ca46:	601a      	str	r2, [r3, #0]
 801ca48:	69fb      	ldr	r3, [r7, #28]
 801ca4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca4c:	69bb      	ldr	r3, [r7, #24]
 801ca4e:	f383 8810 	msr	PRIMASK, r3
}
 801ca52:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801ca54:	1dbb      	adds	r3, r7, #6
 801ca56:	881a      	ldrh	r2, [r3, #0]
 801ca58:	68b9      	ldr	r1, [r7, #8]
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	0018      	movs	r0, r3
 801ca5e:	f001 f8c7 	bl	801dbf0 <UART_Start_Receive_IT>
 801ca62:	0003      	movs	r3, r0
 801ca64:	e000      	b.n	801ca68 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801ca66:	2302      	movs	r3, #2
  }
}
 801ca68:	0018      	movs	r0, r3
 801ca6a:	46bd      	mov	sp, r7
 801ca6c:	b008      	add	sp, #32
 801ca6e:	bd80      	pop	{r7, pc}
 801ca70:	40004800 	.word	0x40004800

0801ca74 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	b088      	sub	sp, #32
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	60f8      	str	r0, [r7, #12]
 801ca7c:	60b9      	str	r1, [r7, #8]
 801ca7e:	1dbb      	adds	r3, r7, #6
 801ca80:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ca82:	68fb      	ldr	r3, [r7, #12]
 801ca84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ca86:	2b20      	cmp	r3, #32
 801ca88:	d000      	beq.n	801ca8c <HAL_UART_Transmit_DMA+0x18>
 801ca8a:	e077      	b.n	801cb7c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801ca8c:	68bb      	ldr	r3, [r7, #8]
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d003      	beq.n	801ca9a <HAL_UART_Transmit_DMA+0x26>
 801ca92:	1dbb      	adds	r3, r7, #6
 801ca94:	881b      	ldrh	r3, [r3, #0]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d101      	bne.n	801ca9e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801ca9a:	2301      	movs	r3, #1
 801ca9c:	e06f      	b.n	801cb7e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ca9e:	68fb      	ldr	r3, [r7, #12]
 801caa0:	689a      	ldr	r2, [r3, #8]
 801caa2:	2380      	movs	r3, #128	@ 0x80
 801caa4:	015b      	lsls	r3, r3, #5
 801caa6:	429a      	cmp	r2, r3
 801caa8:	d109      	bne.n	801cabe <HAL_UART_Transmit_DMA+0x4a>
 801caaa:	68fb      	ldr	r3, [r7, #12]
 801caac:	691b      	ldr	r3, [r3, #16]
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d105      	bne.n	801cabe <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801cab2:	68bb      	ldr	r3, [r7, #8]
 801cab4:	2201      	movs	r2, #1
 801cab6:	4013      	ands	r3, r2
 801cab8:	d001      	beq.n	801cabe <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801caba:	2301      	movs	r3, #1
 801cabc:	e05f      	b.n	801cb7e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	68ba      	ldr	r2, [r7, #8]
 801cac2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801cac4:	68fb      	ldr	r3, [r7, #12]
 801cac6:	1dba      	adds	r2, r7, #6
 801cac8:	2150      	movs	r1, #80	@ 0x50
 801caca:	8812      	ldrh	r2, [r2, #0]
 801cacc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801cace:	68fb      	ldr	r3, [r7, #12]
 801cad0:	1dba      	adds	r2, r7, #6
 801cad2:	2152      	movs	r1, #82	@ 0x52
 801cad4:	8812      	ldrh	r2, [r2, #0]
 801cad6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801cad8:	68fb      	ldr	r3, [r7, #12]
 801cada:	2284      	movs	r2, #132	@ 0x84
 801cadc:	2100      	movs	r1, #0
 801cade:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801cae0:	68fb      	ldr	r3, [r7, #12]
 801cae2:	2221      	movs	r2, #33	@ 0x21
 801cae4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801cae6:	68fb      	ldr	r3, [r7, #12]
 801cae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801caea:	2b00      	cmp	r3, #0
 801caec:	d027      	beq.n	801cb3e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801caf2:	4a25      	ldr	r2, [pc, #148]	@ (801cb88 <HAL_UART_Transmit_DMA+0x114>)
 801caf4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cafa:	4a24      	ldr	r2, [pc, #144]	@ (801cb8c <HAL_UART_Transmit_DMA+0x118>)
 801cafc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cb02:	4a23      	ldr	r2, [pc, #140]	@ (801cb90 <HAL_UART_Transmit_DMA+0x11c>)
 801cb04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cb0a:	2200      	movs	r2, #0
 801cb0c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801cb12:	68fb      	ldr	r3, [r7, #12]
 801cb14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cb16:	0019      	movs	r1, r3
 801cb18:	68fb      	ldr	r3, [r7, #12]
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	3328      	adds	r3, #40	@ 0x28
 801cb1e:	001a      	movs	r2, r3
 801cb20:	1dbb      	adds	r3, r7, #6
 801cb22:	881b      	ldrh	r3, [r3, #0]
 801cb24:	f7f7 fea4 	bl	8014870 <HAL_DMA_Start_IT>
 801cb28:	1e03      	subs	r3, r0, #0
 801cb2a:	d008      	beq.n	801cb3e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801cb2c:	68fb      	ldr	r3, [r7, #12]
 801cb2e:	2284      	movs	r2, #132	@ 0x84
 801cb30:	2110      	movs	r1, #16
 801cb32:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	2220      	movs	r2, #32
 801cb38:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801cb3a:	2301      	movs	r3, #1
 801cb3c:	e01f      	b.n	801cb7e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801cb3e:	68fb      	ldr	r3, [r7, #12]
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	2240      	movs	r2, #64	@ 0x40
 801cb44:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cb46:	f3ef 8310 	mrs	r3, PRIMASK
 801cb4a:	613b      	str	r3, [r7, #16]
  return(result);
 801cb4c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801cb4e:	61fb      	str	r3, [r7, #28]
 801cb50:	2301      	movs	r3, #1
 801cb52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb54:	697b      	ldr	r3, [r7, #20]
 801cb56:	f383 8810 	msr	PRIMASK, r3
}
 801cb5a:	46c0      	nop			@ (mov r8, r8)
 801cb5c:	68fb      	ldr	r3, [r7, #12]
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	689a      	ldr	r2, [r3, #8]
 801cb62:	68fb      	ldr	r3, [r7, #12]
 801cb64:	681b      	ldr	r3, [r3, #0]
 801cb66:	2180      	movs	r1, #128	@ 0x80
 801cb68:	430a      	orrs	r2, r1
 801cb6a:	609a      	str	r2, [r3, #8]
 801cb6c:	69fb      	ldr	r3, [r7, #28]
 801cb6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb70:	69bb      	ldr	r3, [r7, #24]
 801cb72:	f383 8810 	msr	PRIMASK, r3
}
 801cb76:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801cb78:	2300      	movs	r3, #0
 801cb7a:	e000      	b.n	801cb7e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801cb7c:	2302      	movs	r3, #2
  }
}
 801cb7e:	0018      	movs	r0, r3
 801cb80:	46bd      	mov	sp, r7
 801cb82:	b008      	add	sp, #32
 801cb84:	bd80      	pop	{r7, pc}
 801cb86:	46c0      	nop			@ (mov r8, r8)
 801cb88:	0801dfd5 	.word	0x0801dfd5
 801cb8c:	0801e071 	.word	0x0801e071
 801cb90:	0801e211 	.word	0x0801e211

0801cb94 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801cb94:	b580      	push	{r7, lr}
 801cb96:	b088      	sub	sp, #32
 801cb98:	af00      	add	r7, sp, #0
 801cb9a:	60f8      	str	r0, [r7, #12]
 801cb9c:	60b9      	str	r1, [r7, #8]
 801cb9e:	1dbb      	adds	r3, r7, #6
 801cba0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801cba2:	68fb      	ldr	r3, [r7, #12]
 801cba4:	2280      	movs	r2, #128	@ 0x80
 801cba6:	589b      	ldr	r3, [r3, r2]
 801cba8:	2b20      	cmp	r3, #32
 801cbaa:	d14a      	bne.n	801cc42 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801cbac:	68bb      	ldr	r3, [r7, #8]
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	d003      	beq.n	801cbba <HAL_UART_Receive_DMA+0x26>
 801cbb2:	1dbb      	adds	r3, r7, #6
 801cbb4:	881b      	ldrh	r3, [r3, #0]
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d101      	bne.n	801cbbe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801cbba:	2301      	movs	r3, #1
 801cbbc:	e042      	b.n	801cc44 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	689a      	ldr	r2, [r3, #8]
 801cbc2:	2380      	movs	r3, #128	@ 0x80
 801cbc4:	015b      	lsls	r3, r3, #5
 801cbc6:	429a      	cmp	r2, r3
 801cbc8:	d109      	bne.n	801cbde <HAL_UART_Receive_DMA+0x4a>
 801cbca:	68fb      	ldr	r3, [r7, #12]
 801cbcc:	691b      	ldr	r3, [r3, #16]
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d105      	bne.n	801cbde <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801cbd2:	68bb      	ldr	r3, [r7, #8]
 801cbd4:	2201      	movs	r2, #1
 801cbd6:	4013      	ands	r3, r2
 801cbd8:	d001      	beq.n	801cbde <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801cbda:	2301      	movs	r3, #1
 801cbdc:	e032      	b.n	801cc44 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cbde:	68fb      	ldr	r3, [r7, #12]
 801cbe0:	2200      	movs	r2, #0
 801cbe2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801cbe4:	68fb      	ldr	r3, [r7, #12]
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	4a18      	ldr	r2, [pc, #96]	@ (801cc4c <HAL_UART_Receive_DMA+0xb8>)
 801cbea:	4293      	cmp	r3, r2
 801cbec:	d020      	beq.n	801cc30 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801cbee:	68fb      	ldr	r3, [r7, #12]
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	685a      	ldr	r2, [r3, #4]
 801cbf4:	2380      	movs	r3, #128	@ 0x80
 801cbf6:	041b      	lsls	r3, r3, #16
 801cbf8:	4013      	ands	r3, r2
 801cbfa:	d019      	beq.n	801cc30 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cbfc:	f3ef 8310 	mrs	r3, PRIMASK
 801cc00:	613b      	str	r3, [r7, #16]
  return(result);
 801cc02:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801cc04:	61fb      	str	r3, [r7, #28]
 801cc06:	2301      	movs	r3, #1
 801cc08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc0a:	697b      	ldr	r3, [r7, #20]
 801cc0c:	f383 8810 	msr	PRIMASK, r3
}
 801cc10:	46c0      	nop			@ (mov r8, r8)
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	681a      	ldr	r2, [r3, #0]
 801cc18:	68fb      	ldr	r3, [r7, #12]
 801cc1a:	681b      	ldr	r3, [r3, #0]
 801cc1c:	2180      	movs	r1, #128	@ 0x80
 801cc1e:	04c9      	lsls	r1, r1, #19
 801cc20:	430a      	orrs	r2, r1
 801cc22:	601a      	str	r2, [r3, #0]
 801cc24:	69fb      	ldr	r3, [r7, #28]
 801cc26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc28:	69bb      	ldr	r3, [r7, #24]
 801cc2a:	f383 8810 	msr	PRIMASK, r3
}
 801cc2e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801cc30:	1dbb      	adds	r3, r7, #6
 801cc32:	881a      	ldrh	r2, [r3, #0]
 801cc34:	68b9      	ldr	r1, [r7, #8]
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	0018      	movs	r0, r3
 801cc3a:	f001 f8a3 	bl	801dd84 <UART_Start_Receive_DMA>
 801cc3e:	0003      	movs	r3, r0
 801cc40:	e000      	b.n	801cc44 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801cc42:	2302      	movs	r3, #2
  }
}
 801cc44:	0018      	movs	r0, r3
 801cc46:	46bd      	mov	sp, r7
 801cc48:	b008      	add	sp, #32
 801cc4a:	bd80      	pop	{r7, pc}
 801cc4c:	40004800 	.word	0x40004800

0801cc50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801cc50:	b590      	push	{r4, r7, lr}
 801cc52:	b0ab      	sub	sp, #172	@ 0xac
 801cc54:	af00      	add	r7, sp, #0
 801cc56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	69db      	ldr	r3, [r3, #28]
 801cc5e:	22a4      	movs	r2, #164	@ 0xa4
 801cc60:	18b9      	adds	r1, r7, r2
 801cc62:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	681b      	ldr	r3, [r3, #0]
 801cc68:	681b      	ldr	r3, [r3, #0]
 801cc6a:	20a0      	movs	r0, #160	@ 0xa0
 801cc6c:	1839      	adds	r1, r7, r0
 801cc6e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	681b      	ldr	r3, [r3, #0]
 801cc74:	689b      	ldr	r3, [r3, #8]
 801cc76:	219c      	movs	r1, #156	@ 0x9c
 801cc78:	1879      	adds	r1, r7, r1
 801cc7a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801cc7c:	0011      	movs	r1, r2
 801cc7e:	18bb      	adds	r3, r7, r2
 801cc80:	681b      	ldr	r3, [r3, #0]
 801cc82:	4a9c      	ldr	r2, [pc, #624]	@ (801cef4 <HAL_UART_IRQHandler+0x2a4>)
 801cc84:	4013      	ands	r3, r2
 801cc86:	2298      	movs	r2, #152	@ 0x98
 801cc88:	18bc      	adds	r4, r7, r2
 801cc8a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801cc8c:	18bb      	adds	r3, r7, r2
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d114      	bne.n	801ccbe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801cc94:	187b      	adds	r3, r7, r1
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	2220      	movs	r2, #32
 801cc9a:	4013      	ands	r3, r2
 801cc9c:	d00f      	beq.n	801ccbe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801cc9e:	183b      	adds	r3, r7, r0
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	2220      	movs	r2, #32
 801cca4:	4013      	ands	r3, r2
 801cca6:	d00a      	beq.n	801ccbe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d100      	bne.n	801ccb2 <HAL_UART_IRQHandler+0x62>
 801ccb0:	e2aa      	b.n	801d208 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ccb6:	687a      	ldr	r2, [r7, #4]
 801ccb8:	0010      	movs	r0, r2
 801ccba:	4798      	blx	r3
      }
      return;
 801ccbc:	e2a4      	b.n	801d208 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801ccbe:	2398      	movs	r3, #152	@ 0x98
 801ccc0:	18fb      	adds	r3, r7, r3
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d100      	bne.n	801ccca <HAL_UART_IRQHandler+0x7a>
 801ccc8:	e11a      	b.n	801cf00 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801ccca:	239c      	movs	r3, #156	@ 0x9c
 801cccc:	18fb      	adds	r3, r7, r3
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	2201      	movs	r2, #1
 801ccd2:	4013      	ands	r3, r2
 801ccd4:	d106      	bne.n	801cce4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801ccd6:	23a0      	movs	r3, #160	@ 0xa0
 801ccd8:	18fb      	adds	r3, r7, r3
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	4a86      	ldr	r2, [pc, #536]	@ (801cef8 <HAL_UART_IRQHandler+0x2a8>)
 801ccde:	4013      	ands	r3, r2
 801cce0:	d100      	bne.n	801cce4 <HAL_UART_IRQHandler+0x94>
 801cce2:	e10d      	b.n	801cf00 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801cce4:	23a4      	movs	r3, #164	@ 0xa4
 801cce6:	18fb      	adds	r3, r7, r3
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	2201      	movs	r2, #1
 801ccec:	4013      	ands	r3, r2
 801ccee:	d012      	beq.n	801cd16 <HAL_UART_IRQHandler+0xc6>
 801ccf0:	23a0      	movs	r3, #160	@ 0xa0
 801ccf2:	18fb      	adds	r3, r7, r3
 801ccf4:	681a      	ldr	r2, [r3, #0]
 801ccf6:	2380      	movs	r3, #128	@ 0x80
 801ccf8:	005b      	lsls	r3, r3, #1
 801ccfa:	4013      	ands	r3, r2
 801ccfc:	d00b      	beq.n	801cd16 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	2201      	movs	r2, #1
 801cd04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	2284      	movs	r2, #132	@ 0x84
 801cd0a:	589b      	ldr	r3, [r3, r2]
 801cd0c:	2201      	movs	r2, #1
 801cd0e:	431a      	orrs	r2, r3
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	2184      	movs	r1, #132	@ 0x84
 801cd14:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801cd16:	23a4      	movs	r3, #164	@ 0xa4
 801cd18:	18fb      	adds	r3, r7, r3
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	2202      	movs	r2, #2
 801cd1e:	4013      	ands	r3, r2
 801cd20:	d011      	beq.n	801cd46 <HAL_UART_IRQHandler+0xf6>
 801cd22:	239c      	movs	r3, #156	@ 0x9c
 801cd24:	18fb      	adds	r3, r7, r3
 801cd26:	681b      	ldr	r3, [r3, #0]
 801cd28:	2201      	movs	r2, #1
 801cd2a:	4013      	ands	r3, r2
 801cd2c:	d00b      	beq.n	801cd46 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	681b      	ldr	r3, [r3, #0]
 801cd32:	2202      	movs	r2, #2
 801cd34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	2284      	movs	r2, #132	@ 0x84
 801cd3a:	589b      	ldr	r3, [r3, r2]
 801cd3c:	2204      	movs	r2, #4
 801cd3e:	431a      	orrs	r2, r3
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	2184      	movs	r1, #132	@ 0x84
 801cd44:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801cd46:	23a4      	movs	r3, #164	@ 0xa4
 801cd48:	18fb      	adds	r3, r7, r3
 801cd4a:	681b      	ldr	r3, [r3, #0]
 801cd4c:	2204      	movs	r2, #4
 801cd4e:	4013      	ands	r3, r2
 801cd50:	d011      	beq.n	801cd76 <HAL_UART_IRQHandler+0x126>
 801cd52:	239c      	movs	r3, #156	@ 0x9c
 801cd54:	18fb      	adds	r3, r7, r3
 801cd56:	681b      	ldr	r3, [r3, #0]
 801cd58:	2201      	movs	r2, #1
 801cd5a:	4013      	ands	r3, r2
 801cd5c:	d00b      	beq.n	801cd76 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	681b      	ldr	r3, [r3, #0]
 801cd62:	2204      	movs	r2, #4
 801cd64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	2284      	movs	r2, #132	@ 0x84
 801cd6a:	589b      	ldr	r3, [r3, r2]
 801cd6c:	2202      	movs	r2, #2
 801cd6e:	431a      	orrs	r2, r3
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	2184      	movs	r1, #132	@ 0x84
 801cd74:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801cd76:	23a4      	movs	r3, #164	@ 0xa4
 801cd78:	18fb      	adds	r3, r7, r3
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	2208      	movs	r2, #8
 801cd7e:	4013      	ands	r3, r2
 801cd80:	d017      	beq.n	801cdb2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801cd82:	23a0      	movs	r3, #160	@ 0xa0
 801cd84:	18fb      	adds	r3, r7, r3
 801cd86:	681b      	ldr	r3, [r3, #0]
 801cd88:	2220      	movs	r2, #32
 801cd8a:	4013      	ands	r3, r2
 801cd8c:	d105      	bne.n	801cd9a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801cd8e:	239c      	movs	r3, #156	@ 0x9c
 801cd90:	18fb      	adds	r3, r7, r3
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	2201      	movs	r2, #1
 801cd96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801cd98:	d00b      	beq.n	801cdb2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	681b      	ldr	r3, [r3, #0]
 801cd9e:	2208      	movs	r2, #8
 801cda0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	2284      	movs	r2, #132	@ 0x84
 801cda6:	589b      	ldr	r3, [r3, r2]
 801cda8:	2208      	movs	r2, #8
 801cdaa:	431a      	orrs	r2, r3
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	2184      	movs	r1, #132	@ 0x84
 801cdb0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801cdb2:	23a4      	movs	r3, #164	@ 0xa4
 801cdb4:	18fb      	adds	r3, r7, r3
 801cdb6:	681a      	ldr	r2, [r3, #0]
 801cdb8:	2380      	movs	r3, #128	@ 0x80
 801cdba:	011b      	lsls	r3, r3, #4
 801cdbc:	4013      	ands	r3, r2
 801cdbe:	d013      	beq.n	801cde8 <HAL_UART_IRQHandler+0x198>
 801cdc0:	23a0      	movs	r3, #160	@ 0xa0
 801cdc2:	18fb      	adds	r3, r7, r3
 801cdc4:	681a      	ldr	r2, [r3, #0]
 801cdc6:	2380      	movs	r3, #128	@ 0x80
 801cdc8:	04db      	lsls	r3, r3, #19
 801cdca:	4013      	ands	r3, r2
 801cdcc:	d00c      	beq.n	801cde8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	2280      	movs	r2, #128	@ 0x80
 801cdd4:	0112      	lsls	r2, r2, #4
 801cdd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	2284      	movs	r2, #132	@ 0x84
 801cddc:	589b      	ldr	r3, [r3, r2]
 801cdde:	2220      	movs	r2, #32
 801cde0:	431a      	orrs	r2, r3
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	2184      	movs	r1, #132	@ 0x84
 801cde6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	2284      	movs	r2, #132	@ 0x84
 801cdec:	589b      	ldr	r3, [r3, r2]
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d100      	bne.n	801cdf4 <HAL_UART_IRQHandler+0x1a4>
 801cdf2:	e20b      	b.n	801d20c <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801cdf4:	23a4      	movs	r3, #164	@ 0xa4
 801cdf6:	18fb      	adds	r3, r7, r3
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	2220      	movs	r2, #32
 801cdfc:	4013      	ands	r3, r2
 801cdfe:	d00e      	beq.n	801ce1e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801ce00:	23a0      	movs	r3, #160	@ 0xa0
 801ce02:	18fb      	adds	r3, r7, r3
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	2220      	movs	r2, #32
 801ce08:	4013      	ands	r3, r2
 801ce0a:	d008      	beq.n	801ce1e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d004      	beq.n	801ce1e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ce18:	687a      	ldr	r2, [r7, #4]
 801ce1a:	0010      	movs	r0, r2
 801ce1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	2284      	movs	r2, #132	@ 0x84
 801ce22:	589b      	ldr	r3, [r3, r2]
 801ce24:	2194      	movs	r1, #148	@ 0x94
 801ce26:	187a      	adds	r2, r7, r1
 801ce28:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	689b      	ldr	r3, [r3, #8]
 801ce30:	2240      	movs	r2, #64	@ 0x40
 801ce32:	4013      	ands	r3, r2
 801ce34:	2b40      	cmp	r3, #64	@ 0x40
 801ce36:	d004      	beq.n	801ce42 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801ce38:	187b      	adds	r3, r7, r1
 801ce3a:	681b      	ldr	r3, [r3, #0]
 801ce3c:	2228      	movs	r2, #40	@ 0x28
 801ce3e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801ce40:	d04b      	beq.n	801ceda <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	0018      	movs	r0, r3
 801ce46:	f001 f861 	bl	801df0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	689b      	ldr	r3, [r3, #8]
 801ce50:	2240      	movs	r2, #64	@ 0x40
 801ce52:	4013      	ands	r3, r2
 801ce54:	2b40      	cmp	r3, #64	@ 0x40
 801ce56:	d139      	bne.n	801cecc <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce58:	f3ef 8310 	mrs	r3, PRIMASK
 801ce5c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801ce5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ce60:	2090      	movs	r0, #144	@ 0x90
 801ce62:	183a      	adds	r2, r7, r0
 801ce64:	6013      	str	r3, [r2, #0]
 801ce66:	2301      	movs	r3, #1
 801ce68:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ce6c:	f383 8810 	msr	PRIMASK, r3
}
 801ce70:	46c0      	nop			@ (mov r8, r8)
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	681b      	ldr	r3, [r3, #0]
 801ce76:	689a      	ldr	r2, [r3, #8]
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	2140      	movs	r1, #64	@ 0x40
 801ce7e:	438a      	bics	r2, r1
 801ce80:	609a      	str	r2, [r3, #8]
 801ce82:	183b      	adds	r3, r7, r0
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ce8a:	f383 8810 	msr	PRIMASK, r3
}
 801ce8e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d012      	beq.n	801cebe <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ce9c:	4a17      	ldr	r2, [pc, #92]	@ (801cefc <HAL_UART_IRQHandler+0x2ac>)
 801ce9e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cea4:	0018      	movs	r0, r3
 801cea6:	f7f7 fd89 	bl	80149bc <HAL_DMA_Abort_IT>
 801ceaa:	1e03      	subs	r3, r0, #0
 801ceac:	d020      	beq.n	801cef0 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ceb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ceb8:	0018      	movs	r0, r3
 801ceba:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cebc:	e018      	b.n	801cef0 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	2298      	movs	r2, #152	@ 0x98
 801cec2:	589b      	ldr	r3, [r3, r2]
 801cec4:	687a      	ldr	r2, [r7, #4]
 801cec6:	0010      	movs	r0, r2
 801cec8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ceca:	e011      	b.n	801cef0 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	2298      	movs	r2, #152	@ 0x98
 801ced0:	589b      	ldr	r3, [r3, r2]
 801ced2:	687a      	ldr	r2, [r7, #4]
 801ced4:	0010      	movs	r0, r2
 801ced6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ced8:	e00a      	b.n	801cef0 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	2298      	movs	r2, #152	@ 0x98
 801cede:	589b      	ldr	r3, [r3, r2]
 801cee0:	687a      	ldr	r2, [r7, #4]
 801cee2:	0010      	movs	r0, r2
 801cee4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	2284      	movs	r2, #132	@ 0x84
 801ceea:	2100      	movs	r1, #0
 801ceec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801ceee:	e18d      	b.n	801d20c <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cef0:	46c0      	nop			@ (mov r8, r8)
    return;
 801cef2:	e18b      	b.n	801d20c <HAL_UART_IRQHandler+0x5bc>
 801cef4:	0000080f 	.word	0x0000080f
 801cef8:	04000120 	.word	0x04000120
 801cefc:	0801e299 	.word	0x0801e299

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cf04:	2b01      	cmp	r3, #1
 801cf06:	d000      	beq.n	801cf0a <HAL_UART_IRQHandler+0x2ba>
 801cf08:	e13d      	b.n	801d186 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801cf0a:	23a4      	movs	r3, #164	@ 0xa4
 801cf0c:	18fb      	adds	r3, r7, r3
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	2210      	movs	r2, #16
 801cf12:	4013      	ands	r3, r2
 801cf14:	d100      	bne.n	801cf18 <HAL_UART_IRQHandler+0x2c8>
 801cf16:	e136      	b.n	801d186 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801cf18:	23a0      	movs	r3, #160	@ 0xa0
 801cf1a:	18fb      	adds	r3, r7, r3
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	2210      	movs	r2, #16
 801cf20:	4013      	ands	r3, r2
 801cf22:	d100      	bne.n	801cf26 <HAL_UART_IRQHandler+0x2d6>
 801cf24:	e12f      	b.n	801d186 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	2210      	movs	r2, #16
 801cf2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	681b      	ldr	r3, [r3, #0]
 801cf32:	689b      	ldr	r3, [r3, #8]
 801cf34:	2240      	movs	r2, #64	@ 0x40
 801cf36:	4013      	ands	r3, r2
 801cf38:	2b40      	cmp	r3, #64	@ 0x40
 801cf3a:	d000      	beq.n	801cf3e <HAL_UART_IRQHandler+0x2ee>
 801cf3c:	e0a2      	b.n	801d084 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	685a      	ldr	r2, [r3, #4]
 801cf46:	217e      	movs	r1, #126	@ 0x7e
 801cf48:	187b      	adds	r3, r7, r1
 801cf4a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801cf4c:	187b      	adds	r3, r7, r1
 801cf4e:	881b      	ldrh	r3, [r3, #0]
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d100      	bne.n	801cf56 <HAL_UART_IRQHandler+0x306>
 801cf54:	e15c      	b.n	801d210 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	2258      	movs	r2, #88	@ 0x58
 801cf5a:	5a9b      	ldrh	r3, [r3, r2]
 801cf5c:	187a      	adds	r2, r7, r1
 801cf5e:	8812      	ldrh	r2, [r2, #0]
 801cf60:	429a      	cmp	r2, r3
 801cf62:	d300      	bcc.n	801cf66 <HAL_UART_IRQHandler+0x316>
 801cf64:	e154      	b.n	801d210 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	187a      	adds	r2, r7, r1
 801cf6a:	215a      	movs	r1, #90	@ 0x5a
 801cf6c:	8812      	ldrh	r2, [r2, #0]
 801cf6e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	2220      	movs	r2, #32
 801cf7a:	4013      	ands	r3, r2
 801cf7c:	d16f      	bne.n	801d05e <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf7e:	f3ef 8310 	mrs	r3, PRIMASK
 801cf82:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801cf84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801cf86:	67bb      	str	r3, [r7, #120]	@ 0x78
 801cf88:	2301      	movs	r3, #1
 801cf8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf8e:	f383 8810 	msr	PRIMASK, r3
}
 801cf92:	46c0      	nop			@ (mov r8, r8)
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	681a      	ldr	r2, [r3, #0]
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	49a0      	ldr	r1, [pc, #640]	@ (801d220 <HAL_UART_IRQHandler+0x5d0>)
 801cfa0:	400a      	ands	r2, r1
 801cfa2:	601a      	str	r2, [r3, #0]
 801cfa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cfa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfaa:	f383 8810 	msr	PRIMASK, r3
}
 801cfae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cfb0:	f3ef 8310 	mrs	r3, PRIMASK
 801cfb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801cfb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801cfb8:	677b      	str	r3, [r7, #116]	@ 0x74
 801cfba:	2301      	movs	r3, #1
 801cfbc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cfc0:	f383 8810 	msr	PRIMASK, r3
}
 801cfc4:	46c0      	nop			@ (mov r8, r8)
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	689a      	ldr	r2, [r3, #8]
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	2101      	movs	r1, #1
 801cfd2:	438a      	bics	r2, r1
 801cfd4:	609a      	str	r2, [r3, #8]
 801cfd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801cfd8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cfdc:	f383 8810 	msr	PRIMASK, r3
}
 801cfe0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cfe2:	f3ef 8310 	mrs	r3, PRIMASK
 801cfe6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801cfe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801cfea:	673b      	str	r3, [r7, #112]	@ 0x70
 801cfec:	2301      	movs	r3, #1
 801cfee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cff2:	f383 8810 	msr	PRIMASK, r3
}
 801cff6:	46c0      	nop			@ (mov r8, r8)
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	689a      	ldr	r2, [r3, #8]
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	2140      	movs	r1, #64	@ 0x40
 801d004:	438a      	bics	r2, r1
 801d006:	609a      	str	r2, [r3, #8]
 801d008:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d00a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d00c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d00e:	f383 8810 	msr	PRIMASK, r3
}
 801d012:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	2280      	movs	r2, #128	@ 0x80
 801d018:	2120      	movs	r1, #32
 801d01a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	2200      	movs	r2, #0
 801d020:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d022:	f3ef 8310 	mrs	r3, PRIMASK
 801d026:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801d028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d02a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801d02c:	2301      	movs	r3, #1
 801d02e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801d032:	f383 8810 	msr	PRIMASK, r3
}
 801d036:	46c0      	nop			@ (mov r8, r8)
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	681b      	ldr	r3, [r3, #0]
 801d03c:	681a      	ldr	r2, [r3, #0]
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	681b      	ldr	r3, [r3, #0]
 801d042:	2110      	movs	r1, #16
 801d044:	438a      	bics	r2, r1
 801d046:	601a      	str	r2, [r3, #0]
 801d048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801d04a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d04c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d04e:	f383 8810 	msr	PRIMASK, r3
}
 801d052:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d058:	0018      	movs	r0, r3
 801d05a:	f7f7 fc6f 	bl	801493c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	2202      	movs	r2, #2
 801d062:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	22ac      	movs	r2, #172	@ 0xac
 801d068:	589b      	ldr	r3, [r3, r2]
 801d06a:	687a      	ldr	r2, [r7, #4]
 801d06c:	2158      	movs	r1, #88	@ 0x58
 801d06e:	5a51      	ldrh	r1, [r2, r1]
 801d070:	687a      	ldr	r2, [r7, #4]
 801d072:	205a      	movs	r0, #90	@ 0x5a
 801d074:	5a12      	ldrh	r2, [r2, r0]
 801d076:	b292      	uxth	r2, r2
 801d078:	1a8a      	subs	r2, r1, r2
 801d07a:	b291      	uxth	r1, r2
 801d07c:	687a      	ldr	r2, [r7, #4]
 801d07e:	0010      	movs	r0, r2
 801d080:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801d082:	e0c5      	b.n	801d210 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	2258      	movs	r2, #88	@ 0x58
 801d088:	5a99      	ldrh	r1, [r3, r2]
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	225a      	movs	r2, #90	@ 0x5a
 801d08e:	5a9b      	ldrh	r3, [r3, r2]
 801d090:	b29a      	uxth	r2, r3
 801d092:	208e      	movs	r0, #142	@ 0x8e
 801d094:	183b      	adds	r3, r7, r0
 801d096:	1a8a      	subs	r2, r1, r2
 801d098:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	225a      	movs	r2, #90	@ 0x5a
 801d09e:	5a9b      	ldrh	r3, [r3, r2]
 801d0a0:	b29b      	uxth	r3, r3
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d100      	bne.n	801d0a8 <HAL_UART_IRQHandler+0x458>
 801d0a6:	e0b5      	b.n	801d214 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801d0a8:	183b      	adds	r3, r7, r0
 801d0aa:	881b      	ldrh	r3, [r3, #0]
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	d100      	bne.n	801d0b2 <HAL_UART_IRQHandler+0x462>
 801d0b0:	e0b0      	b.n	801d214 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0b2:	f3ef 8310 	mrs	r3, PRIMASK
 801d0b6:	60fb      	str	r3, [r7, #12]
  return(result);
 801d0b8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d0ba:	2488      	movs	r4, #136	@ 0x88
 801d0bc:	193a      	adds	r2, r7, r4
 801d0be:	6013      	str	r3, [r2, #0]
 801d0c0:	2301      	movs	r3, #1
 801d0c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0c4:	693b      	ldr	r3, [r7, #16]
 801d0c6:	f383 8810 	msr	PRIMASK, r3
}
 801d0ca:	46c0      	nop			@ (mov r8, r8)
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	681a      	ldr	r2, [r3, #0]
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	681b      	ldr	r3, [r3, #0]
 801d0d6:	4953      	ldr	r1, [pc, #332]	@ (801d224 <HAL_UART_IRQHandler+0x5d4>)
 801d0d8:	400a      	ands	r2, r1
 801d0da:	601a      	str	r2, [r3, #0]
 801d0dc:	193b      	adds	r3, r7, r4
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0e2:	697b      	ldr	r3, [r7, #20]
 801d0e4:	f383 8810 	msr	PRIMASK, r3
}
 801d0e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0ea:	f3ef 8310 	mrs	r3, PRIMASK
 801d0ee:	61bb      	str	r3, [r7, #24]
  return(result);
 801d0f0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d0f2:	2484      	movs	r4, #132	@ 0x84
 801d0f4:	193a      	adds	r2, r7, r4
 801d0f6:	6013      	str	r3, [r2, #0]
 801d0f8:	2301      	movs	r3, #1
 801d0fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0fc:	69fb      	ldr	r3, [r7, #28]
 801d0fe:	f383 8810 	msr	PRIMASK, r3
}
 801d102:	46c0      	nop			@ (mov r8, r8)
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	681b      	ldr	r3, [r3, #0]
 801d108:	689a      	ldr	r2, [r3, #8]
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	681b      	ldr	r3, [r3, #0]
 801d10e:	2101      	movs	r1, #1
 801d110:	438a      	bics	r2, r1
 801d112:	609a      	str	r2, [r3, #8]
 801d114:	193b      	adds	r3, r7, r4
 801d116:	681b      	ldr	r3, [r3, #0]
 801d118:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d11a:	6a3b      	ldr	r3, [r7, #32]
 801d11c:	f383 8810 	msr	PRIMASK, r3
}
 801d120:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	2280      	movs	r2, #128	@ 0x80
 801d126:	2120      	movs	r1, #32
 801d128:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d12a:	687b      	ldr	r3, [r7, #4]
 801d12c:	2200      	movs	r2, #0
 801d12e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801d130:	687b      	ldr	r3, [r7, #4]
 801d132:	2200      	movs	r2, #0
 801d134:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d136:	f3ef 8310 	mrs	r3, PRIMASK
 801d13a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801d13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d13e:	2480      	movs	r4, #128	@ 0x80
 801d140:	193a      	adds	r2, r7, r4
 801d142:	6013      	str	r3, [r2, #0]
 801d144:	2301      	movs	r3, #1
 801d146:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d14a:	f383 8810 	msr	PRIMASK, r3
}
 801d14e:	46c0      	nop			@ (mov r8, r8)
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	681a      	ldr	r2, [r3, #0]
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	681b      	ldr	r3, [r3, #0]
 801d15a:	2110      	movs	r1, #16
 801d15c:	438a      	bics	r2, r1
 801d15e:	601a      	str	r2, [r3, #0]
 801d160:	193b      	adds	r3, r7, r4
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d168:	f383 8810 	msr	PRIMASK, r3
}
 801d16c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	2202      	movs	r2, #2
 801d172:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	22ac      	movs	r2, #172	@ 0xac
 801d178:	589b      	ldr	r3, [r3, r2]
 801d17a:	183a      	adds	r2, r7, r0
 801d17c:	8811      	ldrh	r1, [r2, #0]
 801d17e:	687a      	ldr	r2, [r7, #4]
 801d180:	0010      	movs	r0, r2
 801d182:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801d184:	e046      	b.n	801d214 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801d186:	23a4      	movs	r3, #164	@ 0xa4
 801d188:	18fb      	adds	r3, r7, r3
 801d18a:	681a      	ldr	r2, [r3, #0]
 801d18c:	2380      	movs	r3, #128	@ 0x80
 801d18e:	035b      	lsls	r3, r3, #13
 801d190:	4013      	ands	r3, r2
 801d192:	d012      	beq.n	801d1ba <HAL_UART_IRQHandler+0x56a>
 801d194:	239c      	movs	r3, #156	@ 0x9c
 801d196:	18fb      	adds	r3, r7, r3
 801d198:	681a      	ldr	r2, [r3, #0]
 801d19a:	2380      	movs	r3, #128	@ 0x80
 801d19c:	03db      	lsls	r3, r3, #15
 801d19e:	4013      	ands	r3, r2
 801d1a0:	d00b      	beq.n	801d1ba <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	681b      	ldr	r3, [r3, #0]
 801d1a6:	2280      	movs	r2, #128	@ 0x80
 801d1a8:	0352      	lsls	r2, r2, #13
 801d1aa:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	22a8      	movs	r2, #168	@ 0xa8
 801d1b0:	589b      	ldr	r3, [r3, r2]
 801d1b2:	687a      	ldr	r2, [r7, #4]
 801d1b4:	0010      	movs	r0, r2
 801d1b6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801d1b8:	e02f      	b.n	801d21a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801d1ba:	23a4      	movs	r3, #164	@ 0xa4
 801d1bc:	18fb      	adds	r3, r7, r3
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	2280      	movs	r2, #128	@ 0x80
 801d1c2:	4013      	ands	r3, r2
 801d1c4:	d00f      	beq.n	801d1e6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801d1c6:	23a0      	movs	r3, #160	@ 0xa0
 801d1c8:	18fb      	adds	r3, r7, r3
 801d1ca:	681b      	ldr	r3, [r3, #0]
 801d1cc:	2280      	movs	r2, #128	@ 0x80
 801d1ce:	4013      	ands	r3, r2
 801d1d0:	d009      	beq.n	801d1e6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	d01e      	beq.n	801d218 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d1de:	687a      	ldr	r2, [r7, #4]
 801d1e0:	0010      	movs	r0, r2
 801d1e2:	4798      	blx	r3
    }
    return;
 801d1e4:	e018      	b.n	801d218 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801d1e6:	23a4      	movs	r3, #164	@ 0xa4
 801d1e8:	18fb      	adds	r3, r7, r3
 801d1ea:	681b      	ldr	r3, [r3, #0]
 801d1ec:	2240      	movs	r2, #64	@ 0x40
 801d1ee:	4013      	ands	r3, r2
 801d1f0:	d013      	beq.n	801d21a <HAL_UART_IRQHandler+0x5ca>
 801d1f2:	23a0      	movs	r3, #160	@ 0xa0
 801d1f4:	18fb      	adds	r3, r7, r3
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	2240      	movs	r2, #64	@ 0x40
 801d1fa:	4013      	ands	r3, r2
 801d1fc:	d00d      	beq.n	801d21a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	0018      	movs	r0, r3
 801d202:	f001 f862 	bl	801e2ca <UART_EndTransmit_IT>
    return;
 801d206:	e008      	b.n	801d21a <HAL_UART_IRQHandler+0x5ca>
      return;
 801d208:	46c0      	nop			@ (mov r8, r8)
 801d20a:	e006      	b.n	801d21a <HAL_UART_IRQHandler+0x5ca>
    return;
 801d20c:	46c0      	nop			@ (mov r8, r8)
 801d20e:	e004      	b.n	801d21a <HAL_UART_IRQHandler+0x5ca>
      return;
 801d210:	46c0      	nop			@ (mov r8, r8)
 801d212:	e002      	b.n	801d21a <HAL_UART_IRQHandler+0x5ca>
      return;
 801d214:	46c0      	nop			@ (mov r8, r8)
 801d216:	e000      	b.n	801d21a <HAL_UART_IRQHandler+0x5ca>
    return;
 801d218:	46c0      	nop			@ (mov r8, r8)
  }

}
 801d21a:	46bd      	mov	sp, r7
 801d21c:	b02b      	add	sp, #172	@ 0xac
 801d21e:	bd90      	pop	{r4, r7, pc}
 801d220:	fffffeff 	.word	0xfffffeff
 801d224:	fffffedf 	.word	0xfffffedf

0801d228 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801d228:	b580      	push	{r7, lr}
 801d22a:	b082      	sub	sp, #8
 801d22c:	af00      	add	r7, sp, #0
 801d22e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801d230:	46c0      	nop			@ (mov r8, r8)
 801d232:	46bd      	mov	sp, r7
 801d234:	b002      	add	sp, #8
 801d236:	bd80      	pop	{r7, pc}

0801d238 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801d238:	b580      	push	{r7, lr}
 801d23a:	b082      	sub	sp, #8
 801d23c:	af00      	add	r7, sp, #0
 801d23e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801d240:	46c0      	nop			@ (mov r8, r8)
 801d242:	46bd      	mov	sp, r7
 801d244:	b002      	add	sp, #8
 801d246:	bd80      	pop	{r7, pc}

0801d248 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801d248:	b580      	push	{r7, lr}
 801d24a:	b082      	sub	sp, #8
 801d24c:	af00      	add	r7, sp, #0
 801d24e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801d250:	46c0      	nop			@ (mov r8, r8)
 801d252:	46bd      	mov	sp, r7
 801d254:	b002      	add	sp, #8
 801d256:	bd80      	pop	{r7, pc}

0801d258 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801d258:	b580      	push	{r7, lr}
 801d25a:	b082      	sub	sp, #8
 801d25c:	af00      	add	r7, sp, #0
 801d25e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801d260:	46c0      	nop			@ (mov r8, r8)
 801d262:	46bd      	mov	sp, r7
 801d264:	b002      	add	sp, #8
 801d266:	bd80      	pop	{r7, pc}

0801d268 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801d268:	b580      	push	{r7, lr}
 801d26a:	b082      	sub	sp, #8
 801d26c:	af00      	add	r7, sp, #0
 801d26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801d270:	46c0      	nop			@ (mov r8, r8)
 801d272:	46bd      	mov	sp, r7
 801d274:	b002      	add	sp, #8
 801d276:	bd80      	pop	{r7, pc}

0801d278 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801d278:	b580      	push	{r7, lr}
 801d27a:	b082      	sub	sp, #8
 801d27c:	af00      	add	r7, sp, #0
 801d27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801d280:	46c0      	nop			@ (mov r8, r8)
 801d282:	46bd      	mov	sp, r7
 801d284:	b002      	add	sp, #8
 801d286:	bd80      	pop	{r7, pc}

0801d288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801d288:	b580      	push	{r7, lr}
 801d28a:	b082      	sub	sp, #8
 801d28c:	af00      	add	r7, sp, #0
 801d28e:	6078      	str	r0, [r7, #4]
 801d290:	000a      	movs	r2, r1
 801d292:	1cbb      	adds	r3, r7, #2
 801d294:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801d296:	46c0      	nop			@ (mov r8, r8)
 801d298:	46bd      	mov	sp, r7
 801d29a:	b002      	add	sp, #8
 801d29c:	bd80      	pop	{r7, pc}
	...

0801d2a0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801d2a0:	b580      	push	{r7, lr}
 801d2a2:	b082      	sub	sp, #8
 801d2a4:	af00      	add	r7, sp, #0
 801d2a6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	2188      	movs	r1, #136	@ 0x88
 801d2ac:	4a14      	ldr	r2, [pc, #80]	@ (801d300 <UART_InitCallbacksToDefault+0x60>)
 801d2ae:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	218c      	movs	r1, #140	@ 0x8c
 801d2b4:	4a13      	ldr	r2, [pc, #76]	@ (801d304 <UART_InitCallbacksToDefault+0x64>)
 801d2b6:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	2190      	movs	r1, #144	@ 0x90
 801d2bc:	4a12      	ldr	r2, [pc, #72]	@ (801d308 <UART_InitCallbacksToDefault+0x68>)
 801d2be:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	2194      	movs	r1, #148	@ 0x94
 801d2c4:	4a11      	ldr	r2, [pc, #68]	@ (801d30c <UART_InitCallbacksToDefault+0x6c>)
 801d2c6:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	2198      	movs	r1, #152	@ 0x98
 801d2cc:	4a10      	ldr	r2, [pc, #64]	@ (801d310 <UART_InitCallbacksToDefault+0x70>)
 801d2ce:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	219c      	movs	r1, #156	@ 0x9c
 801d2d4:	4a0f      	ldr	r2, [pc, #60]	@ (801d314 <UART_InitCallbacksToDefault+0x74>)
 801d2d6:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	21a0      	movs	r1, #160	@ 0xa0
 801d2dc:	4a0e      	ldr	r2, [pc, #56]	@ (801d318 <UART_InitCallbacksToDefault+0x78>)
 801d2de:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	21a4      	movs	r1, #164	@ 0xa4
 801d2e4:	4a0d      	ldr	r2, [pc, #52]	@ (801d31c <UART_InitCallbacksToDefault+0x7c>)
 801d2e6:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	21a8      	movs	r1, #168	@ 0xa8
 801d2ec:	4a0c      	ldr	r2, [pc, #48]	@ (801d320 <UART_InitCallbacksToDefault+0x80>)
 801d2ee:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	21ac      	movs	r1, #172	@ 0xac
 801d2f4:	4a0b      	ldr	r2, [pc, #44]	@ (801d324 <UART_InitCallbacksToDefault+0x84>)
 801d2f6:	505a      	str	r2, [r3, r1]

}
 801d2f8:	46c0      	nop			@ (mov r8, r8)
 801d2fa:	46bd      	mov	sp, r7
 801d2fc:	b002      	add	sp, #8
 801d2fe:	bd80      	pop	{r7, pc}
 801d300:	0801d239 	.word	0x0801d239
 801d304:	0801d229 	.word	0x0801d229
 801d308:	0801d249 	.word	0x0801d249
 801d30c:	0800c9d1 	.word	0x0800c9d1
 801d310:	08005069 	.word	0x08005069
 801d314:	0801d259 	.word	0x0801d259
 801d318:	0801d269 	.word	0x0801d269
 801d31c:	0801d279 	.word	0x0801d279
 801d320:	0801e6bd 	.word	0x0801e6bd
 801d324:	0801d289 	.word	0x0801d289

0801d328 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801d328:	b5b0      	push	{r4, r5, r7, lr}
 801d32a:	b08e      	sub	sp, #56	@ 0x38
 801d32c:	af00      	add	r7, sp, #0
 801d32e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801d330:	231a      	movs	r3, #26
 801d332:	2218      	movs	r2, #24
 801d334:	189b      	adds	r3, r3, r2
 801d336:	19db      	adds	r3, r3, r7
 801d338:	2200      	movs	r2, #0
 801d33a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801d33c:	69fb      	ldr	r3, [r7, #28]
 801d33e:	689a      	ldr	r2, [r3, #8]
 801d340:	69fb      	ldr	r3, [r7, #28]
 801d342:	691b      	ldr	r3, [r3, #16]
 801d344:	431a      	orrs	r2, r3
 801d346:	69fb      	ldr	r3, [r7, #28]
 801d348:	695b      	ldr	r3, [r3, #20]
 801d34a:	431a      	orrs	r2, r3
 801d34c:	69fb      	ldr	r3, [r7, #28]
 801d34e:	69db      	ldr	r3, [r3, #28]
 801d350:	4313      	orrs	r3, r2
 801d352:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801d354:	69fb      	ldr	r3, [r7, #28]
 801d356:	681b      	ldr	r3, [r3, #0]
 801d358:	681b      	ldr	r3, [r3, #0]
 801d35a:	4ac3      	ldr	r2, [pc, #780]	@ (801d668 <UART_SetConfig+0x340>)
 801d35c:	4013      	ands	r3, r2
 801d35e:	0019      	movs	r1, r3
 801d360:	69fb      	ldr	r3, [r7, #28]
 801d362:	681b      	ldr	r3, [r3, #0]
 801d364:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d366:	430a      	orrs	r2, r1
 801d368:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801d36a:	69fb      	ldr	r3, [r7, #28]
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	685b      	ldr	r3, [r3, #4]
 801d370:	4abe      	ldr	r2, [pc, #760]	@ (801d66c <UART_SetConfig+0x344>)
 801d372:	4013      	ands	r3, r2
 801d374:	0019      	movs	r1, r3
 801d376:	69fb      	ldr	r3, [r7, #28]
 801d378:	68da      	ldr	r2, [r3, #12]
 801d37a:	69fb      	ldr	r3, [r7, #28]
 801d37c:	681b      	ldr	r3, [r3, #0]
 801d37e:	430a      	orrs	r2, r1
 801d380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801d382:	69fb      	ldr	r3, [r7, #28]
 801d384:	699b      	ldr	r3, [r3, #24]
 801d386:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801d388:	69fb      	ldr	r3, [r7, #28]
 801d38a:	681b      	ldr	r3, [r3, #0]
 801d38c:	4ab8      	ldr	r2, [pc, #736]	@ (801d670 <UART_SetConfig+0x348>)
 801d38e:	4293      	cmp	r3, r2
 801d390:	d004      	beq.n	801d39c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801d392:	69fb      	ldr	r3, [r7, #28]
 801d394:	6a1b      	ldr	r3, [r3, #32]
 801d396:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d398:	4313      	orrs	r3, r2
 801d39a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801d39c:	69fb      	ldr	r3, [r7, #28]
 801d39e:	681b      	ldr	r3, [r3, #0]
 801d3a0:	689b      	ldr	r3, [r3, #8]
 801d3a2:	4ab4      	ldr	r2, [pc, #720]	@ (801d674 <UART_SetConfig+0x34c>)
 801d3a4:	4013      	ands	r3, r2
 801d3a6:	0019      	movs	r1, r3
 801d3a8:	69fb      	ldr	r3, [r7, #28]
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d3ae:	430a      	orrs	r2, r1
 801d3b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801d3b2:	69fb      	ldr	r3, [r7, #28]
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	4ab0      	ldr	r2, [pc, #704]	@ (801d678 <UART_SetConfig+0x350>)
 801d3b8:	4293      	cmp	r3, r2
 801d3ba:	d131      	bne.n	801d420 <UART_SetConfig+0xf8>
 801d3bc:	4baf      	ldr	r3, [pc, #700]	@ (801d67c <UART_SetConfig+0x354>)
 801d3be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d3c0:	2203      	movs	r2, #3
 801d3c2:	4013      	ands	r3, r2
 801d3c4:	2b03      	cmp	r3, #3
 801d3c6:	d01d      	beq.n	801d404 <UART_SetConfig+0xdc>
 801d3c8:	d823      	bhi.n	801d412 <UART_SetConfig+0xea>
 801d3ca:	2b02      	cmp	r3, #2
 801d3cc:	d00c      	beq.n	801d3e8 <UART_SetConfig+0xc0>
 801d3ce:	d820      	bhi.n	801d412 <UART_SetConfig+0xea>
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	d002      	beq.n	801d3da <UART_SetConfig+0xb2>
 801d3d4:	2b01      	cmp	r3, #1
 801d3d6:	d00e      	beq.n	801d3f6 <UART_SetConfig+0xce>
 801d3d8:	e01b      	b.n	801d412 <UART_SetConfig+0xea>
 801d3da:	231b      	movs	r3, #27
 801d3dc:	2218      	movs	r2, #24
 801d3de:	189b      	adds	r3, r3, r2
 801d3e0:	19db      	adds	r3, r3, r7
 801d3e2:	2201      	movs	r2, #1
 801d3e4:	701a      	strb	r2, [r3, #0]
 801d3e6:	e0b4      	b.n	801d552 <UART_SetConfig+0x22a>
 801d3e8:	231b      	movs	r3, #27
 801d3ea:	2218      	movs	r2, #24
 801d3ec:	189b      	adds	r3, r3, r2
 801d3ee:	19db      	adds	r3, r3, r7
 801d3f0:	2202      	movs	r2, #2
 801d3f2:	701a      	strb	r2, [r3, #0]
 801d3f4:	e0ad      	b.n	801d552 <UART_SetConfig+0x22a>
 801d3f6:	231b      	movs	r3, #27
 801d3f8:	2218      	movs	r2, #24
 801d3fa:	189b      	adds	r3, r3, r2
 801d3fc:	19db      	adds	r3, r3, r7
 801d3fe:	2204      	movs	r2, #4
 801d400:	701a      	strb	r2, [r3, #0]
 801d402:	e0a6      	b.n	801d552 <UART_SetConfig+0x22a>
 801d404:	231b      	movs	r3, #27
 801d406:	2218      	movs	r2, #24
 801d408:	189b      	adds	r3, r3, r2
 801d40a:	19db      	adds	r3, r3, r7
 801d40c:	2208      	movs	r2, #8
 801d40e:	701a      	strb	r2, [r3, #0]
 801d410:	e09f      	b.n	801d552 <UART_SetConfig+0x22a>
 801d412:	231b      	movs	r3, #27
 801d414:	2218      	movs	r2, #24
 801d416:	189b      	adds	r3, r3, r2
 801d418:	19db      	adds	r3, r3, r7
 801d41a:	2210      	movs	r2, #16
 801d41c:	701a      	strb	r2, [r3, #0]
 801d41e:	e098      	b.n	801d552 <UART_SetConfig+0x22a>
 801d420:	69fb      	ldr	r3, [r7, #28]
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	4a96      	ldr	r2, [pc, #600]	@ (801d680 <UART_SetConfig+0x358>)
 801d426:	4293      	cmp	r3, r2
 801d428:	d131      	bne.n	801d48e <UART_SetConfig+0x166>
 801d42a:	4b94      	ldr	r3, [pc, #592]	@ (801d67c <UART_SetConfig+0x354>)
 801d42c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d42e:	220c      	movs	r2, #12
 801d430:	4013      	ands	r3, r2
 801d432:	2b0c      	cmp	r3, #12
 801d434:	d01d      	beq.n	801d472 <UART_SetConfig+0x14a>
 801d436:	d823      	bhi.n	801d480 <UART_SetConfig+0x158>
 801d438:	2b08      	cmp	r3, #8
 801d43a:	d00c      	beq.n	801d456 <UART_SetConfig+0x12e>
 801d43c:	d820      	bhi.n	801d480 <UART_SetConfig+0x158>
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d002      	beq.n	801d448 <UART_SetConfig+0x120>
 801d442:	2b04      	cmp	r3, #4
 801d444:	d00e      	beq.n	801d464 <UART_SetConfig+0x13c>
 801d446:	e01b      	b.n	801d480 <UART_SetConfig+0x158>
 801d448:	231b      	movs	r3, #27
 801d44a:	2218      	movs	r2, #24
 801d44c:	189b      	adds	r3, r3, r2
 801d44e:	19db      	adds	r3, r3, r7
 801d450:	2200      	movs	r2, #0
 801d452:	701a      	strb	r2, [r3, #0]
 801d454:	e07d      	b.n	801d552 <UART_SetConfig+0x22a>
 801d456:	231b      	movs	r3, #27
 801d458:	2218      	movs	r2, #24
 801d45a:	189b      	adds	r3, r3, r2
 801d45c:	19db      	adds	r3, r3, r7
 801d45e:	2202      	movs	r2, #2
 801d460:	701a      	strb	r2, [r3, #0]
 801d462:	e076      	b.n	801d552 <UART_SetConfig+0x22a>
 801d464:	231b      	movs	r3, #27
 801d466:	2218      	movs	r2, #24
 801d468:	189b      	adds	r3, r3, r2
 801d46a:	19db      	adds	r3, r3, r7
 801d46c:	2204      	movs	r2, #4
 801d46e:	701a      	strb	r2, [r3, #0]
 801d470:	e06f      	b.n	801d552 <UART_SetConfig+0x22a>
 801d472:	231b      	movs	r3, #27
 801d474:	2218      	movs	r2, #24
 801d476:	189b      	adds	r3, r3, r2
 801d478:	19db      	adds	r3, r3, r7
 801d47a:	2208      	movs	r2, #8
 801d47c:	701a      	strb	r2, [r3, #0]
 801d47e:	e068      	b.n	801d552 <UART_SetConfig+0x22a>
 801d480:	231b      	movs	r3, #27
 801d482:	2218      	movs	r2, #24
 801d484:	189b      	adds	r3, r3, r2
 801d486:	19db      	adds	r3, r3, r7
 801d488:	2210      	movs	r2, #16
 801d48a:	701a      	strb	r2, [r3, #0]
 801d48c:	e061      	b.n	801d552 <UART_SetConfig+0x22a>
 801d48e:	69fb      	ldr	r3, [r7, #28]
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	4a7c      	ldr	r2, [pc, #496]	@ (801d684 <UART_SetConfig+0x35c>)
 801d494:	4293      	cmp	r3, r2
 801d496:	d106      	bne.n	801d4a6 <UART_SetConfig+0x17e>
 801d498:	231b      	movs	r3, #27
 801d49a:	2218      	movs	r2, #24
 801d49c:	189b      	adds	r3, r3, r2
 801d49e:	19db      	adds	r3, r3, r7
 801d4a0:	2200      	movs	r2, #0
 801d4a2:	701a      	strb	r2, [r3, #0]
 801d4a4:	e055      	b.n	801d552 <UART_SetConfig+0x22a>
 801d4a6:	69fb      	ldr	r3, [r7, #28]
 801d4a8:	681b      	ldr	r3, [r3, #0]
 801d4aa:	4a77      	ldr	r2, [pc, #476]	@ (801d688 <UART_SetConfig+0x360>)
 801d4ac:	4293      	cmp	r3, r2
 801d4ae:	d106      	bne.n	801d4be <UART_SetConfig+0x196>
 801d4b0:	231b      	movs	r3, #27
 801d4b2:	2218      	movs	r2, #24
 801d4b4:	189b      	adds	r3, r3, r2
 801d4b6:	19db      	adds	r3, r3, r7
 801d4b8:	2200      	movs	r2, #0
 801d4ba:	701a      	strb	r2, [r3, #0]
 801d4bc:	e049      	b.n	801d552 <UART_SetConfig+0x22a>
 801d4be:	69fb      	ldr	r3, [r7, #28]
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	4a6b      	ldr	r2, [pc, #428]	@ (801d670 <UART_SetConfig+0x348>)
 801d4c4:	4293      	cmp	r3, r2
 801d4c6:	d13e      	bne.n	801d546 <UART_SetConfig+0x21e>
 801d4c8:	4b6c      	ldr	r3, [pc, #432]	@ (801d67c <UART_SetConfig+0x354>)
 801d4ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801d4cc:	23c0      	movs	r3, #192	@ 0xc0
 801d4ce:	011b      	lsls	r3, r3, #4
 801d4d0:	4013      	ands	r3, r2
 801d4d2:	22c0      	movs	r2, #192	@ 0xc0
 801d4d4:	0112      	lsls	r2, r2, #4
 801d4d6:	4293      	cmp	r3, r2
 801d4d8:	d027      	beq.n	801d52a <UART_SetConfig+0x202>
 801d4da:	22c0      	movs	r2, #192	@ 0xc0
 801d4dc:	0112      	lsls	r2, r2, #4
 801d4de:	4293      	cmp	r3, r2
 801d4e0:	d82a      	bhi.n	801d538 <UART_SetConfig+0x210>
 801d4e2:	2280      	movs	r2, #128	@ 0x80
 801d4e4:	0112      	lsls	r2, r2, #4
 801d4e6:	4293      	cmp	r3, r2
 801d4e8:	d011      	beq.n	801d50e <UART_SetConfig+0x1e6>
 801d4ea:	2280      	movs	r2, #128	@ 0x80
 801d4ec:	0112      	lsls	r2, r2, #4
 801d4ee:	4293      	cmp	r3, r2
 801d4f0:	d822      	bhi.n	801d538 <UART_SetConfig+0x210>
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	d004      	beq.n	801d500 <UART_SetConfig+0x1d8>
 801d4f6:	2280      	movs	r2, #128	@ 0x80
 801d4f8:	00d2      	lsls	r2, r2, #3
 801d4fa:	4293      	cmp	r3, r2
 801d4fc:	d00e      	beq.n	801d51c <UART_SetConfig+0x1f4>
 801d4fe:	e01b      	b.n	801d538 <UART_SetConfig+0x210>
 801d500:	231b      	movs	r3, #27
 801d502:	2218      	movs	r2, #24
 801d504:	189b      	adds	r3, r3, r2
 801d506:	19db      	adds	r3, r3, r7
 801d508:	2200      	movs	r2, #0
 801d50a:	701a      	strb	r2, [r3, #0]
 801d50c:	e021      	b.n	801d552 <UART_SetConfig+0x22a>
 801d50e:	231b      	movs	r3, #27
 801d510:	2218      	movs	r2, #24
 801d512:	189b      	adds	r3, r3, r2
 801d514:	19db      	adds	r3, r3, r7
 801d516:	2202      	movs	r2, #2
 801d518:	701a      	strb	r2, [r3, #0]
 801d51a:	e01a      	b.n	801d552 <UART_SetConfig+0x22a>
 801d51c:	231b      	movs	r3, #27
 801d51e:	2218      	movs	r2, #24
 801d520:	189b      	adds	r3, r3, r2
 801d522:	19db      	adds	r3, r3, r7
 801d524:	2204      	movs	r2, #4
 801d526:	701a      	strb	r2, [r3, #0]
 801d528:	e013      	b.n	801d552 <UART_SetConfig+0x22a>
 801d52a:	231b      	movs	r3, #27
 801d52c:	2218      	movs	r2, #24
 801d52e:	189b      	adds	r3, r3, r2
 801d530:	19db      	adds	r3, r3, r7
 801d532:	2208      	movs	r2, #8
 801d534:	701a      	strb	r2, [r3, #0]
 801d536:	e00c      	b.n	801d552 <UART_SetConfig+0x22a>
 801d538:	231b      	movs	r3, #27
 801d53a:	2218      	movs	r2, #24
 801d53c:	189b      	adds	r3, r3, r2
 801d53e:	19db      	adds	r3, r3, r7
 801d540:	2210      	movs	r2, #16
 801d542:	701a      	strb	r2, [r3, #0]
 801d544:	e005      	b.n	801d552 <UART_SetConfig+0x22a>
 801d546:	231b      	movs	r3, #27
 801d548:	2218      	movs	r2, #24
 801d54a:	189b      	adds	r3, r3, r2
 801d54c:	19db      	adds	r3, r3, r7
 801d54e:	2210      	movs	r2, #16
 801d550:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801d552:	69fb      	ldr	r3, [r7, #28]
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	4a46      	ldr	r2, [pc, #280]	@ (801d670 <UART_SetConfig+0x348>)
 801d558:	4293      	cmp	r3, r2
 801d55a:	d000      	beq.n	801d55e <UART_SetConfig+0x236>
 801d55c:	e09a      	b.n	801d694 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801d55e:	231b      	movs	r3, #27
 801d560:	2218      	movs	r2, #24
 801d562:	189b      	adds	r3, r3, r2
 801d564:	19db      	adds	r3, r3, r7
 801d566:	781b      	ldrb	r3, [r3, #0]
 801d568:	2b08      	cmp	r3, #8
 801d56a:	d01d      	beq.n	801d5a8 <UART_SetConfig+0x280>
 801d56c:	dc20      	bgt.n	801d5b0 <UART_SetConfig+0x288>
 801d56e:	2b04      	cmp	r3, #4
 801d570:	d015      	beq.n	801d59e <UART_SetConfig+0x276>
 801d572:	dc1d      	bgt.n	801d5b0 <UART_SetConfig+0x288>
 801d574:	2b00      	cmp	r3, #0
 801d576:	d002      	beq.n	801d57e <UART_SetConfig+0x256>
 801d578:	2b02      	cmp	r3, #2
 801d57a:	d005      	beq.n	801d588 <UART_SetConfig+0x260>
 801d57c:	e018      	b.n	801d5b0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d57e:	f7fd fe2d 	bl	801b1dc <HAL_RCC_GetPCLK1Freq>
 801d582:	0003      	movs	r3, r0
 801d584:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d586:	e01c      	b.n	801d5c2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d588:	4b3c      	ldr	r3, [pc, #240]	@ (801d67c <UART_SetConfig+0x354>)
 801d58a:	681b      	ldr	r3, [r3, #0]
 801d58c:	2210      	movs	r2, #16
 801d58e:	4013      	ands	r3, r2
 801d590:	d002      	beq.n	801d598 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d592:	4b3e      	ldr	r3, [pc, #248]	@ (801d68c <UART_SetConfig+0x364>)
 801d594:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d596:	e014      	b.n	801d5c2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801d598:	4b3d      	ldr	r3, [pc, #244]	@ (801d690 <UART_SetConfig+0x368>)
 801d59a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d59c:	e011      	b.n	801d5c2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d59e:	f7fd fd6d 	bl	801b07c <HAL_RCC_GetSysClockFreq>
 801d5a2:	0003      	movs	r3, r0
 801d5a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d5a6:	e00c      	b.n	801d5c2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d5a8:	2380      	movs	r3, #128	@ 0x80
 801d5aa:	021b      	lsls	r3, r3, #8
 801d5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d5ae:	e008      	b.n	801d5c2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801d5b0:	2300      	movs	r3, #0
 801d5b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d5b4:	231a      	movs	r3, #26
 801d5b6:	2218      	movs	r2, #24
 801d5b8:	189b      	adds	r3, r3, r2
 801d5ba:	19db      	adds	r3, r3, r7
 801d5bc:	2201      	movs	r2, #1
 801d5be:	701a      	strb	r2, [r3, #0]
        break;
 801d5c0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801d5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d100      	bne.n	801d5ca <UART_SetConfig+0x2a2>
 801d5c8:	e133      	b.n	801d832 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801d5ca:	69fb      	ldr	r3, [r7, #28]
 801d5cc:	685a      	ldr	r2, [r3, #4]
 801d5ce:	0013      	movs	r3, r2
 801d5d0:	005b      	lsls	r3, r3, #1
 801d5d2:	189b      	adds	r3, r3, r2
 801d5d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d5d6:	429a      	cmp	r2, r3
 801d5d8:	d305      	bcc.n	801d5e6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801d5da:	69fb      	ldr	r3, [r7, #28]
 801d5dc:	685b      	ldr	r3, [r3, #4]
 801d5de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801d5e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d5e2:	429a      	cmp	r2, r3
 801d5e4:	d906      	bls.n	801d5f4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801d5e6:	231a      	movs	r3, #26
 801d5e8:	2218      	movs	r2, #24
 801d5ea:	189b      	adds	r3, r3, r2
 801d5ec:	19db      	adds	r3, r3, r7
 801d5ee:	2201      	movs	r2, #1
 801d5f0:	701a      	strb	r2, [r3, #0]
 801d5f2:	e11e      	b.n	801d832 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801d5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d5f6:	613b      	str	r3, [r7, #16]
 801d5f8:	2300      	movs	r3, #0
 801d5fa:	617b      	str	r3, [r7, #20]
 801d5fc:	6939      	ldr	r1, [r7, #16]
 801d5fe:	697a      	ldr	r2, [r7, #20]
 801d600:	000b      	movs	r3, r1
 801d602:	0e1b      	lsrs	r3, r3, #24
 801d604:	0010      	movs	r0, r2
 801d606:	0205      	lsls	r5, r0, #8
 801d608:	431d      	orrs	r5, r3
 801d60a:	000b      	movs	r3, r1
 801d60c:	021c      	lsls	r4, r3, #8
 801d60e:	69fb      	ldr	r3, [r7, #28]
 801d610:	685b      	ldr	r3, [r3, #4]
 801d612:	085b      	lsrs	r3, r3, #1
 801d614:	60bb      	str	r3, [r7, #8]
 801d616:	2300      	movs	r3, #0
 801d618:	60fb      	str	r3, [r7, #12]
 801d61a:	68b8      	ldr	r0, [r7, #8]
 801d61c:	68f9      	ldr	r1, [r7, #12]
 801d61e:	1900      	adds	r0, r0, r4
 801d620:	4169      	adcs	r1, r5
 801d622:	69fb      	ldr	r3, [r7, #28]
 801d624:	685b      	ldr	r3, [r3, #4]
 801d626:	603b      	str	r3, [r7, #0]
 801d628:	2300      	movs	r3, #0
 801d62a:	607b      	str	r3, [r7, #4]
 801d62c:	683a      	ldr	r2, [r7, #0]
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	f7e2 ffa6 	bl	8000580 <__aeabi_uldivmod>
 801d634:	0002      	movs	r2, r0
 801d636:	000b      	movs	r3, r1
 801d638:	0013      	movs	r3, r2
 801d63a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801d63c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d63e:	23c0      	movs	r3, #192	@ 0xc0
 801d640:	009b      	lsls	r3, r3, #2
 801d642:	429a      	cmp	r2, r3
 801d644:	d309      	bcc.n	801d65a <UART_SetConfig+0x332>
 801d646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d648:	2380      	movs	r3, #128	@ 0x80
 801d64a:	035b      	lsls	r3, r3, #13
 801d64c:	429a      	cmp	r2, r3
 801d64e:	d204      	bcs.n	801d65a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801d650:	69fb      	ldr	r3, [r7, #28]
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d656:	60da      	str	r2, [r3, #12]
 801d658:	e0eb      	b.n	801d832 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801d65a:	231a      	movs	r3, #26
 801d65c:	2218      	movs	r2, #24
 801d65e:	189b      	adds	r3, r3, r2
 801d660:	19db      	adds	r3, r3, r7
 801d662:	2201      	movs	r2, #1
 801d664:	701a      	strb	r2, [r3, #0]
 801d666:	e0e4      	b.n	801d832 <UART_SetConfig+0x50a>
 801d668:	efff69f3 	.word	0xefff69f3
 801d66c:	ffffcfff 	.word	0xffffcfff
 801d670:	40004800 	.word	0x40004800
 801d674:	fffff4ff 	.word	0xfffff4ff
 801d678:	40013800 	.word	0x40013800
 801d67c:	40021000 	.word	0x40021000
 801d680:	40004400 	.word	0x40004400
 801d684:	40004c00 	.word	0x40004c00
 801d688:	40005000 	.word	0x40005000
 801d68c:	003d0900 	.word	0x003d0900
 801d690:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801d694:	69fb      	ldr	r3, [r7, #28]
 801d696:	69da      	ldr	r2, [r3, #28]
 801d698:	2380      	movs	r3, #128	@ 0x80
 801d69a:	021b      	lsls	r3, r3, #8
 801d69c:	429a      	cmp	r2, r3
 801d69e:	d000      	beq.n	801d6a2 <UART_SetConfig+0x37a>
 801d6a0:	e070      	b.n	801d784 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801d6a2:	231b      	movs	r3, #27
 801d6a4:	2218      	movs	r2, #24
 801d6a6:	189b      	adds	r3, r3, r2
 801d6a8:	19db      	adds	r3, r3, r7
 801d6aa:	781b      	ldrb	r3, [r3, #0]
 801d6ac:	2b08      	cmp	r3, #8
 801d6ae:	d822      	bhi.n	801d6f6 <UART_SetConfig+0x3ce>
 801d6b0:	009a      	lsls	r2, r3, #2
 801d6b2:	4b67      	ldr	r3, [pc, #412]	@ (801d850 <UART_SetConfig+0x528>)
 801d6b4:	18d3      	adds	r3, r2, r3
 801d6b6:	681b      	ldr	r3, [r3, #0]
 801d6b8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d6ba:	f7fd fd8f 	bl	801b1dc <HAL_RCC_GetPCLK1Freq>
 801d6be:	0003      	movs	r3, r0
 801d6c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d6c2:	e021      	b.n	801d708 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d6c4:	f7fd fda0 	bl	801b208 <HAL_RCC_GetPCLK2Freq>
 801d6c8:	0003      	movs	r3, r0
 801d6ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d6cc:	e01c      	b.n	801d708 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d6ce:	4b61      	ldr	r3, [pc, #388]	@ (801d854 <UART_SetConfig+0x52c>)
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	2210      	movs	r2, #16
 801d6d4:	4013      	ands	r3, r2
 801d6d6:	d002      	beq.n	801d6de <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d6d8:	4b5f      	ldr	r3, [pc, #380]	@ (801d858 <UART_SetConfig+0x530>)
 801d6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d6dc:	e014      	b.n	801d708 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801d6de:	4b5f      	ldr	r3, [pc, #380]	@ (801d85c <UART_SetConfig+0x534>)
 801d6e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d6e2:	e011      	b.n	801d708 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d6e4:	f7fd fcca 	bl	801b07c <HAL_RCC_GetSysClockFreq>
 801d6e8:	0003      	movs	r3, r0
 801d6ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d6ec:	e00c      	b.n	801d708 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d6ee:	2380      	movs	r3, #128	@ 0x80
 801d6f0:	021b      	lsls	r3, r3, #8
 801d6f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d6f4:	e008      	b.n	801d708 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d6fa:	231a      	movs	r3, #26
 801d6fc:	2218      	movs	r2, #24
 801d6fe:	189b      	adds	r3, r3, r2
 801d700:	19db      	adds	r3, r3, r7
 801d702:	2201      	movs	r2, #1
 801d704:	701a      	strb	r2, [r3, #0]
        break;
 801d706:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801d708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	d100      	bne.n	801d710 <UART_SetConfig+0x3e8>
 801d70e:	e090      	b.n	801d832 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801d710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d712:	005a      	lsls	r2, r3, #1
 801d714:	69fb      	ldr	r3, [r7, #28]
 801d716:	685b      	ldr	r3, [r3, #4]
 801d718:	085b      	lsrs	r3, r3, #1
 801d71a:	18d2      	adds	r2, r2, r3
 801d71c:	69fb      	ldr	r3, [r7, #28]
 801d71e:	685b      	ldr	r3, [r3, #4]
 801d720:	0019      	movs	r1, r3
 801d722:	0010      	movs	r0, r2
 801d724:	f7e2 fd3e 	bl	80001a4 <__udivsi3>
 801d728:	0003      	movs	r3, r0
 801d72a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d72e:	2b0f      	cmp	r3, #15
 801d730:	d921      	bls.n	801d776 <UART_SetConfig+0x44e>
 801d732:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d734:	2380      	movs	r3, #128	@ 0x80
 801d736:	025b      	lsls	r3, r3, #9
 801d738:	429a      	cmp	r2, r3
 801d73a:	d21c      	bcs.n	801d776 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801d73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d73e:	b29a      	uxth	r2, r3
 801d740:	200e      	movs	r0, #14
 801d742:	2418      	movs	r4, #24
 801d744:	1903      	adds	r3, r0, r4
 801d746:	19db      	adds	r3, r3, r7
 801d748:	210f      	movs	r1, #15
 801d74a:	438a      	bics	r2, r1
 801d74c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801d74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d750:	085b      	lsrs	r3, r3, #1
 801d752:	b29b      	uxth	r3, r3
 801d754:	2207      	movs	r2, #7
 801d756:	4013      	ands	r3, r2
 801d758:	b299      	uxth	r1, r3
 801d75a:	1903      	adds	r3, r0, r4
 801d75c:	19db      	adds	r3, r3, r7
 801d75e:	1902      	adds	r2, r0, r4
 801d760:	19d2      	adds	r2, r2, r7
 801d762:	8812      	ldrh	r2, [r2, #0]
 801d764:	430a      	orrs	r2, r1
 801d766:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801d768:	69fb      	ldr	r3, [r7, #28]
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	1902      	adds	r2, r0, r4
 801d76e:	19d2      	adds	r2, r2, r7
 801d770:	8812      	ldrh	r2, [r2, #0]
 801d772:	60da      	str	r2, [r3, #12]
 801d774:	e05d      	b.n	801d832 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801d776:	231a      	movs	r3, #26
 801d778:	2218      	movs	r2, #24
 801d77a:	189b      	adds	r3, r3, r2
 801d77c:	19db      	adds	r3, r3, r7
 801d77e:	2201      	movs	r2, #1
 801d780:	701a      	strb	r2, [r3, #0]
 801d782:	e056      	b.n	801d832 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801d784:	231b      	movs	r3, #27
 801d786:	2218      	movs	r2, #24
 801d788:	189b      	adds	r3, r3, r2
 801d78a:	19db      	adds	r3, r3, r7
 801d78c:	781b      	ldrb	r3, [r3, #0]
 801d78e:	2b08      	cmp	r3, #8
 801d790:	d822      	bhi.n	801d7d8 <UART_SetConfig+0x4b0>
 801d792:	009a      	lsls	r2, r3, #2
 801d794:	4b32      	ldr	r3, [pc, #200]	@ (801d860 <UART_SetConfig+0x538>)
 801d796:	18d3      	adds	r3, r2, r3
 801d798:	681b      	ldr	r3, [r3, #0]
 801d79a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d79c:	f7fd fd1e 	bl	801b1dc <HAL_RCC_GetPCLK1Freq>
 801d7a0:	0003      	movs	r3, r0
 801d7a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d7a4:	e021      	b.n	801d7ea <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d7a6:	f7fd fd2f 	bl	801b208 <HAL_RCC_GetPCLK2Freq>
 801d7aa:	0003      	movs	r3, r0
 801d7ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d7ae:	e01c      	b.n	801d7ea <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d7b0:	4b28      	ldr	r3, [pc, #160]	@ (801d854 <UART_SetConfig+0x52c>)
 801d7b2:	681b      	ldr	r3, [r3, #0]
 801d7b4:	2210      	movs	r2, #16
 801d7b6:	4013      	ands	r3, r2
 801d7b8:	d002      	beq.n	801d7c0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d7ba:	4b27      	ldr	r3, [pc, #156]	@ (801d858 <UART_SetConfig+0x530>)
 801d7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d7be:	e014      	b.n	801d7ea <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801d7c0:	4b26      	ldr	r3, [pc, #152]	@ (801d85c <UART_SetConfig+0x534>)
 801d7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d7c4:	e011      	b.n	801d7ea <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d7c6:	f7fd fc59 	bl	801b07c <HAL_RCC_GetSysClockFreq>
 801d7ca:	0003      	movs	r3, r0
 801d7cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d7ce:	e00c      	b.n	801d7ea <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d7d0:	2380      	movs	r3, #128	@ 0x80
 801d7d2:	021b      	lsls	r3, r3, #8
 801d7d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d7d6:	e008      	b.n	801d7ea <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801d7d8:	2300      	movs	r3, #0
 801d7da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d7dc:	231a      	movs	r3, #26
 801d7de:	2218      	movs	r2, #24
 801d7e0:	189b      	adds	r3, r3, r2
 801d7e2:	19db      	adds	r3, r3, r7
 801d7e4:	2201      	movs	r2, #1
 801d7e6:	701a      	strb	r2, [r3, #0]
        break;
 801d7e8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801d7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d020      	beq.n	801d832 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801d7f0:	69fb      	ldr	r3, [r7, #28]
 801d7f2:	685b      	ldr	r3, [r3, #4]
 801d7f4:	085a      	lsrs	r2, r3, #1
 801d7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7f8:	18d2      	adds	r2, r2, r3
 801d7fa:	69fb      	ldr	r3, [r7, #28]
 801d7fc:	685b      	ldr	r3, [r3, #4]
 801d7fe:	0019      	movs	r1, r3
 801d800:	0010      	movs	r0, r2
 801d802:	f7e2 fccf 	bl	80001a4 <__udivsi3>
 801d806:	0003      	movs	r3, r0
 801d808:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d80c:	2b0f      	cmp	r3, #15
 801d80e:	d90a      	bls.n	801d826 <UART_SetConfig+0x4fe>
 801d810:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d812:	2380      	movs	r3, #128	@ 0x80
 801d814:	025b      	lsls	r3, r3, #9
 801d816:	429a      	cmp	r2, r3
 801d818:	d205      	bcs.n	801d826 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801d81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d81c:	b29a      	uxth	r2, r3
 801d81e:	69fb      	ldr	r3, [r7, #28]
 801d820:	681b      	ldr	r3, [r3, #0]
 801d822:	60da      	str	r2, [r3, #12]
 801d824:	e005      	b.n	801d832 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801d826:	231a      	movs	r3, #26
 801d828:	2218      	movs	r2, #24
 801d82a:	189b      	adds	r3, r3, r2
 801d82c:	19db      	adds	r3, r3, r7
 801d82e:	2201      	movs	r2, #1
 801d830:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801d832:	69fb      	ldr	r3, [r7, #28]
 801d834:	2200      	movs	r2, #0
 801d836:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801d838:	69fb      	ldr	r3, [r7, #28]
 801d83a:	2200      	movs	r2, #0
 801d83c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801d83e:	231a      	movs	r3, #26
 801d840:	2218      	movs	r2, #24
 801d842:	189b      	adds	r3, r3, r2
 801d844:	19db      	adds	r3, r3, r7
 801d846:	781b      	ldrb	r3, [r3, #0]
}
 801d848:	0018      	movs	r0, r3
 801d84a:	46bd      	mov	sp, r7
 801d84c:	b00e      	add	sp, #56	@ 0x38
 801d84e:	bdb0      	pop	{r4, r5, r7, pc}
 801d850:	0802de9c 	.word	0x0802de9c
 801d854:	40021000 	.word	0x40021000
 801d858:	003d0900 	.word	0x003d0900
 801d85c:	00f42400 	.word	0x00f42400
 801d860:	0802dec0 	.word	0x0802dec0

0801d864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801d864:	b580      	push	{r7, lr}
 801d866:	b082      	sub	sp, #8
 801d868:	af00      	add	r7, sp, #0
 801d86a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801d86c:	687b      	ldr	r3, [r7, #4]
 801d86e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d870:	2201      	movs	r2, #1
 801d872:	4013      	ands	r3, r2
 801d874:	d00b      	beq.n	801d88e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	681b      	ldr	r3, [r3, #0]
 801d87a:	685b      	ldr	r3, [r3, #4]
 801d87c:	4a4a      	ldr	r2, [pc, #296]	@ (801d9a8 <UART_AdvFeatureConfig+0x144>)
 801d87e:	4013      	ands	r3, r2
 801d880:	0019      	movs	r1, r3
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	681b      	ldr	r3, [r3, #0]
 801d88a:	430a      	orrs	r2, r1
 801d88c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d892:	2202      	movs	r2, #2
 801d894:	4013      	ands	r3, r2
 801d896:	d00b      	beq.n	801d8b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	681b      	ldr	r3, [r3, #0]
 801d89c:	685b      	ldr	r3, [r3, #4]
 801d89e:	4a43      	ldr	r2, [pc, #268]	@ (801d9ac <UART_AdvFeatureConfig+0x148>)
 801d8a0:	4013      	ands	r3, r2
 801d8a2:	0019      	movs	r1, r3
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	681b      	ldr	r3, [r3, #0]
 801d8ac:	430a      	orrs	r2, r1
 801d8ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d8b4:	2204      	movs	r2, #4
 801d8b6:	4013      	ands	r3, r2
 801d8b8:	d00b      	beq.n	801d8d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	685b      	ldr	r3, [r3, #4]
 801d8c0:	4a3b      	ldr	r2, [pc, #236]	@ (801d9b0 <UART_AdvFeatureConfig+0x14c>)
 801d8c2:	4013      	ands	r3, r2
 801d8c4:	0019      	movs	r1, r3
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	430a      	orrs	r2, r1
 801d8d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801d8d2:	687b      	ldr	r3, [r7, #4]
 801d8d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d8d6:	2208      	movs	r2, #8
 801d8d8:	4013      	ands	r3, r2
 801d8da:	d00b      	beq.n	801d8f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	685b      	ldr	r3, [r3, #4]
 801d8e2:	4a34      	ldr	r2, [pc, #208]	@ (801d9b4 <UART_AdvFeatureConfig+0x150>)
 801d8e4:	4013      	ands	r3, r2
 801d8e6:	0019      	movs	r1, r3
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	430a      	orrs	r2, r1
 801d8f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d8f8:	2210      	movs	r2, #16
 801d8fa:	4013      	ands	r3, r2
 801d8fc:	d00b      	beq.n	801d916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	689b      	ldr	r3, [r3, #8]
 801d904:	4a2c      	ldr	r2, [pc, #176]	@ (801d9b8 <UART_AdvFeatureConfig+0x154>)
 801d906:	4013      	ands	r3, r2
 801d908:	0019      	movs	r1, r3
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	681b      	ldr	r3, [r3, #0]
 801d912:	430a      	orrs	r2, r1
 801d914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d91a:	2220      	movs	r2, #32
 801d91c:	4013      	ands	r3, r2
 801d91e:	d00b      	beq.n	801d938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	681b      	ldr	r3, [r3, #0]
 801d924:	689b      	ldr	r3, [r3, #8]
 801d926:	4a25      	ldr	r2, [pc, #148]	@ (801d9bc <UART_AdvFeatureConfig+0x158>)
 801d928:	4013      	ands	r3, r2
 801d92a:	0019      	movs	r1, r3
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	681b      	ldr	r3, [r3, #0]
 801d934:	430a      	orrs	r2, r1
 801d936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d93c:	2240      	movs	r2, #64	@ 0x40
 801d93e:	4013      	ands	r3, r2
 801d940:	d01d      	beq.n	801d97e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	685b      	ldr	r3, [r3, #4]
 801d948:	4a1d      	ldr	r2, [pc, #116]	@ (801d9c0 <UART_AdvFeatureConfig+0x15c>)
 801d94a:	4013      	ands	r3, r2
 801d94c:	0019      	movs	r1, r3
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	681b      	ldr	r3, [r3, #0]
 801d956:	430a      	orrs	r2, r1
 801d958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801d95e:	2380      	movs	r3, #128	@ 0x80
 801d960:	035b      	lsls	r3, r3, #13
 801d962:	429a      	cmp	r2, r3
 801d964:	d10b      	bne.n	801d97e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	685b      	ldr	r3, [r3, #4]
 801d96c:	4a15      	ldr	r2, [pc, #84]	@ (801d9c4 <UART_AdvFeatureConfig+0x160>)
 801d96e:	4013      	ands	r3, r2
 801d970:	0019      	movs	r1, r3
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	681b      	ldr	r3, [r3, #0]
 801d97a:	430a      	orrs	r2, r1
 801d97c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d982:	2280      	movs	r2, #128	@ 0x80
 801d984:	4013      	ands	r3, r2
 801d986:	d00b      	beq.n	801d9a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801d988:	687b      	ldr	r3, [r7, #4]
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	685b      	ldr	r3, [r3, #4]
 801d98e:	4a0e      	ldr	r2, [pc, #56]	@ (801d9c8 <UART_AdvFeatureConfig+0x164>)
 801d990:	4013      	ands	r3, r2
 801d992:	0019      	movs	r1, r3
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	681b      	ldr	r3, [r3, #0]
 801d99c:	430a      	orrs	r2, r1
 801d99e:	605a      	str	r2, [r3, #4]
  }
}
 801d9a0:	46c0      	nop			@ (mov r8, r8)
 801d9a2:	46bd      	mov	sp, r7
 801d9a4:	b002      	add	sp, #8
 801d9a6:	bd80      	pop	{r7, pc}
 801d9a8:	fffdffff 	.word	0xfffdffff
 801d9ac:	fffeffff 	.word	0xfffeffff
 801d9b0:	fffbffff 	.word	0xfffbffff
 801d9b4:	ffff7fff 	.word	0xffff7fff
 801d9b8:	ffffefff 	.word	0xffffefff
 801d9bc:	ffffdfff 	.word	0xffffdfff
 801d9c0:	ffefffff 	.word	0xffefffff
 801d9c4:	ff9fffff 	.word	0xff9fffff
 801d9c8:	fff7ffff 	.word	0xfff7ffff

0801d9cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801d9cc:	b580      	push	{r7, lr}
 801d9ce:	b092      	sub	sp, #72	@ 0x48
 801d9d0:	af02      	add	r7, sp, #8
 801d9d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d9d4:	687b      	ldr	r3, [r7, #4]
 801d9d6:	2284      	movs	r2, #132	@ 0x84
 801d9d8:	2100      	movs	r1, #0
 801d9da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801d9dc:	f7f6 f9f6 	bl	8013dcc <HAL_GetTick>
 801d9e0:	0003      	movs	r3, r0
 801d9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801d9e4:	687b      	ldr	r3, [r7, #4]
 801d9e6:	681b      	ldr	r3, [r3, #0]
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	2208      	movs	r2, #8
 801d9ec:	4013      	ands	r3, r2
 801d9ee:	2b08      	cmp	r3, #8
 801d9f0:	d12c      	bne.n	801da4c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d9f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d9f4:	2280      	movs	r2, #128	@ 0x80
 801d9f6:	0391      	lsls	r1, r2, #14
 801d9f8:	6878      	ldr	r0, [r7, #4]
 801d9fa:	4a46      	ldr	r2, [pc, #280]	@ (801db14 <UART_CheckIdleState+0x148>)
 801d9fc:	9200      	str	r2, [sp, #0]
 801d9fe:	2200      	movs	r2, #0
 801da00:	f000 f88c 	bl	801db1c <UART_WaitOnFlagUntilTimeout>
 801da04:	1e03      	subs	r3, r0, #0
 801da06:	d021      	beq.n	801da4c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da08:	f3ef 8310 	mrs	r3, PRIMASK
 801da0c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801da0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801da10:	63bb      	str	r3, [r7, #56]	@ 0x38
 801da12:	2301      	movs	r3, #1
 801da14:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da18:	f383 8810 	msr	PRIMASK, r3
}
 801da1c:	46c0      	nop			@ (mov r8, r8)
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	681b      	ldr	r3, [r3, #0]
 801da22:	681a      	ldr	r2, [r3, #0]
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	681b      	ldr	r3, [r3, #0]
 801da28:	2180      	movs	r1, #128	@ 0x80
 801da2a:	438a      	bics	r2, r1
 801da2c:	601a      	str	r2, [r3, #0]
 801da2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da34:	f383 8810 	msr	PRIMASK, r3
}
 801da38:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801da3a:	687b      	ldr	r3, [r7, #4]
 801da3c:	2220      	movs	r2, #32
 801da3e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	2278      	movs	r2, #120	@ 0x78
 801da44:	2100      	movs	r1, #0
 801da46:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801da48:	2303      	movs	r3, #3
 801da4a:	e05f      	b.n	801db0c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	681b      	ldr	r3, [r3, #0]
 801da50:	681b      	ldr	r3, [r3, #0]
 801da52:	2204      	movs	r2, #4
 801da54:	4013      	ands	r3, r2
 801da56:	2b04      	cmp	r3, #4
 801da58:	d146      	bne.n	801dae8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801da5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801da5c:	2280      	movs	r2, #128	@ 0x80
 801da5e:	03d1      	lsls	r1, r2, #15
 801da60:	6878      	ldr	r0, [r7, #4]
 801da62:	4a2c      	ldr	r2, [pc, #176]	@ (801db14 <UART_CheckIdleState+0x148>)
 801da64:	9200      	str	r2, [sp, #0]
 801da66:	2200      	movs	r2, #0
 801da68:	f000 f858 	bl	801db1c <UART_WaitOnFlagUntilTimeout>
 801da6c:	1e03      	subs	r3, r0, #0
 801da6e:	d03b      	beq.n	801dae8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da70:	f3ef 8310 	mrs	r3, PRIMASK
 801da74:	60fb      	str	r3, [r7, #12]
  return(result);
 801da76:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801da78:	637b      	str	r3, [r7, #52]	@ 0x34
 801da7a:	2301      	movs	r3, #1
 801da7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da7e:	693b      	ldr	r3, [r7, #16]
 801da80:	f383 8810 	msr	PRIMASK, r3
}
 801da84:	46c0      	nop			@ (mov r8, r8)
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	681a      	ldr	r2, [r3, #0]
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	681b      	ldr	r3, [r3, #0]
 801da90:	4921      	ldr	r1, [pc, #132]	@ (801db18 <UART_CheckIdleState+0x14c>)
 801da92:	400a      	ands	r2, r1
 801da94:	601a      	str	r2, [r3, #0]
 801da96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da9a:	697b      	ldr	r3, [r7, #20]
 801da9c:	f383 8810 	msr	PRIMASK, r3
}
 801daa0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801daa2:	f3ef 8310 	mrs	r3, PRIMASK
 801daa6:	61bb      	str	r3, [r7, #24]
  return(result);
 801daa8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801daaa:	633b      	str	r3, [r7, #48]	@ 0x30
 801daac:	2301      	movs	r3, #1
 801daae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dab0:	69fb      	ldr	r3, [r7, #28]
 801dab2:	f383 8810 	msr	PRIMASK, r3
}
 801dab6:	46c0      	nop			@ (mov r8, r8)
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	689a      	ldr	r2, [r3, #8]
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	681b      	ldr	r3, [r3, #0]
 801dac2:	2101      	movs	r1, #1
 801dac4:	438a      	bics	r2, r1
 801dac6:	609a      	str	r2, [r3, #8]
 801dac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801daca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dacc:	6a3b      	ldr	r3, [r7, #32]
 801dace:	f383 8810 	msr	PRIMASK, r3
}
 801dad2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	2280      	movs	r2, #128	@ 0x80
 801dad8:	2120      	movs	r1, #32
 801dada:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	2278      	movs	r2, #120	@ 0x78
 801dae0:	2100      	movs	r1, #0
 801dae2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801dae4:	2303      	movs	r3, #3
 801dae6:	e011      	b.n	801db0c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	2220      	movs	r2, #32
 801daec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	2280      	movs	r2, #128	@ 0x80
 801daf2:	2120      	movs	r1, #32
 801daf4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	2200      	movs	r2, #0
 801dafa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	2200      	movs	r2, #0
 801db00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801db02:	687b      	ldr	r3, [r7, #4]
 801db04:	2278      	movs	r2, #120	@ 0x78
 801db06:	2100      	movs	r1, #0
 801db08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801db0a:	2300      	movs	r3, #0
}
 801db0c:	0018      	movs	r0, r3
 801db0e:	46bd      	mov	sp, r7
 801db10:	b010      	add	sp, #64	@ 0x40
 801db12:	bd80      	pop	{r7, pc}
 801db14:	01ffffff 	.word	0x01ffffff
 801db18:	fffffedf 	.word	0xfffffedf

0801db1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801db1c:	b580      	push	{r7, lr}
 801db1e:	b084      	sub	sp, #16
 801db20:	af00      	add	r7, sp, #0
 801db22:	60f8      	str	r0, [r7, #12]
 801db24:	60b9      	str	r1, [r7, #8]
 801db26:	603b      	str	r3, [r7, #0]
 801db28:	1dfb      	adds	r3, r7, #7
 801db2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801db2c:	e04b      	b.n	801dbc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801db2e:	69bb      	ldr	r3, [r7, #24]
 801db30:	3301      	adds	r3, #1
 801db32:	d048      	beq.n	801dbc6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801db34:	f7f6 f94a 	bl	8013dcc <HAL_GetTick>
 801db38:	0002      	movs	r2, r0
 801db3a:	683b      	ldr	r3, [r7, #0]
 801db3c:	1ad3      	subs	r3, r2, r3
 801db3e:	69ba      	ldr	r2, [r7, #24]
 801db40:	429a      	cmp	r2, r3
 801db42:	d302      	bcc.n	801db4a <UART_WaitOnFlagUntilTimeout+0x2e>
 801db44:	69bb      	ldr	r3, [r7, #24]
 801db46:	2b00      	cmp	r3, #0
 801db48:	d101      	bne.n	801db4e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801db4a:	2303      	movs	r3, #3
 801db4c:	e04b      	b.n	801dbe6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801db4e:	68fb      	ldr	r3, [r7, #12]
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	681b      	ldr	r3, [r3, #0]
 801db54:	2204      	movs	r2, #4
 801db56:	4013      	ands	r3, r2
 801db58:	d035      	beq.n	801dbc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801db5a:	68fb      	ldr	r3, [r7, #12]
 801db5c:	681b      	ldr	r3, [r3, #0]
 801db5e:	69db      	ldr	r3, [r3, #28]
 801db60:	2208      	movs	r2, #8
 801db62:	4013      	ands	r3, r2
 801db64:	2b08      	cmp	r3, #8
 801db66:	d111      	bne.n	801db8c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801db68:	68fb      	ldr	r3, [r7, #12]
 801db6a:	681b      	ldr	r3, [r3, #0]
 801db6c:	2208      	movs	r2, #8
 801db6e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801db70:	68fb      	ldr	r3, [r7, #12]
 801db72:	0018      	movs	r0, r3
 801db74:	f000 f9ca 	bl	801df0c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	2284      	movs	r2, #132	@ 0x84
 801db7c:	2108      	movs	r1, #8
 801db7e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801db80:	68fb      	ldr	r3, [r7, #12]
 801db82:	2278      	movs	r2, #120	@ 0x78
 801db84:	2100      	movs	r1, #0
 801db86:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801db88:	2301      	movs	r3, #1
 801db8a:	e02c      	b.n	801dbe6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801db8c:	68fb      	ldr	r3, [r7, #12]
 801db8e:	681b      	ldr	r3, [r3, #0]
 801db90:	69da      	ldr	r2, [r3, #28]
 801db92:	2380      	movs	r3, #128	@ 0x80
 801db94:	011b      	lsls	r3, r3, #4
 801db96:	401a      	ands	r2, r3
 801db98:	2380      	movs	r3, #128	@ 0x80
 801db9a:	011b      	lsls	r3, r3, #4
 801db9c:	429a      	cmp	r2, r3
 801db9e:	d112      	bne.n	801dbc6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801dba0:	68fb      	ldr	r3, [r7, #12]
 801dba2:	681b      	ldr	r3, [r3, #0]
 801dba4:	2280      	movs	r2, #128	@ 0x80
 801dba6:	0112      	lsls	r2, r2, #4
 801dba8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801dbaa:	68fb      	ldr	r3, [r7, #12]
 801dbac:	0018      	movs	r0, r3
 801dbae:	f000 f9ad 	bl	801df0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801dbb2:	68fb      	ldr	r3, [r7, #12]
 801dbb4:	2284      	movs	r2, #132	@ 0x84
 801dbb6:	2120      	movs	r1, #32
 801dbb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801dbba:	68fb      	ldr	r3, [r7, #12]
 801dbbc:	2278      	movs	r2, #120	@ 0x78
 801dbbe:	2100      	movs	r1, #0
 801dbc0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801dbc2:	2303      	movs	r3, #3
 801dbc4:	e00f      	b.n	801dbe6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801dbc6:	68fb      	ldr	r3, [r7, #12]
 801dbc8:	681b      	ldr	r3, [r3, #0]
 801dbca:	69db      	ldr	r3, [r3, #28]
 801dbcc:	68ba      	ldr	r2, [r7, #8]
 801dbce:	4013      	ands	r3, r2
 801dbd0:	68ba      	ldr	r2, [r7, #8]
 801dbd2:	1ad3      	subs	r3, r2, r3
 801dbd4:	425a      	negs	r2, r3
 801dbd6:	4153      	adcs	r3, r2
 801dbd8:	b2db      	uxtb	r3, r3
 801dbda:	001a      	movs	r2, r3
 801dbdc:	1dfb      	adds	r3, r7, #7
 801dbde:	781b      	ldrb	r3, [r3, #0]
 801dbe0:	429a      	cmp	r2, r3
 801dbe2:	d0a4      	beq.n	801db2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801dbe4:	2300      	movs	r3, #0
}
 801dbe6:	0018      	movs	r0, r3
 801dbe8:	46bd      	mov	sp, r7
 801dbea:	b004      	add	sp, #16
 801dbec:	bd80      	pop	{r7, pc}
	...

0801dbf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801dbf0:	b580      	push	{r7, lr}
 801dbf2:	b090      	sub	sp, #64	@ 0x40
 801dbf4:	af00      	add	r7, sp, #0
 801dbf6:	60f8      	str	r0, [r7, #12]
 801dbf8:	60b9      	str	r1, [r7, #8]
 801dbfa:	1dbb      	adds	r3, r7, #6
 801dbfc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801dbfe:	68fb      	ldr	r3, [r7, #12]
 801dc00:	68ba      	ldr	r2, [r7, #8]
 801dc02:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801dc04:	68fb      	ldr	r3, [r7, #12]
 801dc06:	1dba      	adds	r2, r7, #6
 801dc08:	2158      	movs	r1, #88	@ 0x58
 801dc0a:	8812      	ldrh	r2, [r2, #0]
 801dc0c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801dc0e:	68fb      	ldr	r3, [r7, #12]
 801dc10:	1dba      	adds	r2, r7, #6
 801dc12:	215a      	movs	r1, #90	@ 0x5a
 801dc14:	8812      	ldrh	r2, [r2, #0]
 801dc16:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801dc18:	68fb      	ldr	r3, [r7, #12]
 801dc1a:	2200      	movs	r2, #0
 801dc1c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801dc1e:	68fb      	ldr	r3, [r7, #12]
 801dc20:	689a      	ldr	r2, [r3, #8]
 801dc22:	2380      	movs	r3, #128	@ 0x80
 801dc24:	015b      	lsls	r3, r3, #5
 801dc26:	429a      	cmp	r2, r3
 801dc28:	d10d      	bne.n	801dc46 <UART_Start_Receive_IT+0x56>
 801dc2a:	68fb      	ldr	r3, [r7, #12]
 801dc2c:	691b      	ldr	r3, [r3, #16]
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	d104      	bne.n	801dc3c <UART_Start_Receive_IT+0x4c>
 801dc32:	68fb      	ldr	r3, [r7, #12]
 801dc34:	225c      	movs	r2, #92	@ 0x5c
 801dc36:	4950      	ldr	r1, [pc, #320]	@ (801dd78 <UART_Start_Receive_IT+0x188>)
 801dc38:	5299      	strh	r1, [r3, r2]
 801dc3a:	e02e      	b.n	801dc9a <UART_Start_Receive_IT+0xaa>
 801dc3c:	68fb      	ldr	r3, [r7, #12]
 801dc3e:	225c      	movs	r2, #92	@ 0x5c
 801dc40:	21ff      	movs	r1, #255	@ 0xff
 801dc42:	5299      	strh	r1, [r3, r2]
 801dc44:	e029      	b.n	801dc9a <UART_Start_Receive_IT+0xaa>
 801dc46:	68fb      	ldr	r3, [r7, #12]
 801dc48:	689b      	ldr	r3, [r3, #8]
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d10d      	bne.n	801dc6a <UART_Start_Receive_IT+0x7a>
 801dc4e:	68fb      	ldr	r3, [r7, #12]
 801dc50:	691b      	ldr	r3, [r3, #16]
 801dc52:	2b00      	cmp	r3, #0
 801dc54:	d104      	bne.n	801dc60 <UART_Start_Receive_IT+0x70>
 801dc56:	68fb      	ldr	r3, [r7, #12]
 801dc58:	225c      	movs	r2, #92	@ 0x5c
 801dc5a:	21ff      	movs	r1, #255	@ 0xff
 801dc5c:	5299      	strh	r1, [r3, r2]
 801dc5e:	e01c      	b.n	801dc9a <UART_Start_Receive_IT+0xaa>
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	225c      	movs	r2, #92	@ 0x5c
 801dc64:	217f      	movs	r1, #127	@ 0x7f
 801dc66:	5299      	strh	r1, [r3, r2]
 801dc68:	e017      	b.n	801dc9a <UART_Start_Receive_IT+0xaa>
 801dc6a:	68fb      	ldr	r3, [r7, #12]
 801dc6c:	689a      	ldr	r2, [r3, #8]
 801dc6e:	2380      	movs	r3, #128	@ 0x80
 801dc70:	055b      	lsls	r3, r3, #21
 801dc72:	429a      	cmp	r2, r3
 801dc74:	d10d      	bne.n	801dc92 <UART_Start_Receive_IT+0xa2>
 801dc76:	68fb      	ldr	r3, [r7, #12]
 801dc78:	691b      	ldr	r3, [r3, #16]
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d104      	bne.n	801dc88 <UART_Start_Receive_IT+0x98>
 801dc7e:	68fb      	ldr	r3, [r7, #12]
 801dc80:	225c      	movs	r2, #92	@ 0x5c
 801dc82:	217f      	movs	r1, #127	@ 0x7f
 801dc84:	5299      	strh	r1, [r3, r2]
 801dc86:	e008      	b.n	801dc9a <UART_Start_Receive_IT+0xaa>
 801dc88:	68fb      	ldr	r3, [r7, #12]
 801dc8a:	225c      	movs	r2, #92	@ 0x5c
 801dc8c:	213f      	movs	r1, #63	@ 0x3f
 801dc8e:	5299      	strh	r1, [r3, r2]
 801dc90:	e003      	b.n	801dc9a <UART_Start_Receive_IT+0xaa>
 801dc92:	68fb      	ldr	r3, [r7, #12]
 801dc94:	225c      	movs	r2, #92	@ 0x5c
 801dc96:	2100      	movs	r1, #0
 801dc98:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dc9a:	68fb      	ldr	r3, [r7, #12]
 801dc9c:	2284      	movs	r2, #132	@ 0x84
 801dc9e:	2100      	movs	r1, #0
 801dca0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801dca2:	68fb      	ldr	r3, [r7, #12]
 801dca4:	2280      	movs	r2, #128	@ 0x80
 801dca6:	2122      	movs	r1, #34	@ 0x22
 801dca8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcaa:	f3ef 8310 	mrs	r3, PRIMASK
 801dcae:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801dcb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dcb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dcb4:	2301      	movs	r3, #1
 801dcb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dcba:	f383 8810 	msr	PRIMASK, r3
}
 801dcbe:	46c0      	nop			@ (mov r8, r8)
 801dcc0:	68fb      	ldr	r3, [r7, #12]
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	689a      	ldr	r2, [r3, #8]
 801dcc6:	68fb      	ldr	r3, [r7, #12]
 801dcc8:	681b      	ldr	r3, [r3, #0]
 801dcca:	2101      	movs	r1, #1
 801dccc:	430a      	orrs	r2, r1
 801dcce:	609a      	str	r2, [r3, #8]
 801dcd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dcd2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dcd6:	f383 8810 	msr	PRIMASK, r3
}
 801dcda:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	689a      	ldr	r2, [r3, #8]
 801dce0:	2380      	movs	r3, #128	@ 0x80
 801dce2:	015b      	lsls	r3, r3, #5
 801dce4:	429a      	cmp	r2, r3
 801dce6:	d107      	bne.n	801dcf8 <UART_Start_Receive_IT+0x108>
 801dce8:	68fb      	ldr	r3, [r7, #12]
 801dcea:	691b      	ldr	r3, [r3, #16]
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	d103      	bne.n	801dcf8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801dcf0:	68fb      	ldr	r3, [r7, #12]
 801dcf2:	4a22      	ldr	r2, [pc, #136]	@ (801dd7c <UART_Start_Receive_IT+0x18c>)
 801dcf4:	669a      	str	r2, [r3, #104]	@ 0x68
 801dcf6:	e002      	b.n	801dcfe <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801dcf8:	68fb      	ldr	r3, [r7, #12]
 801dcfa:	4a21      	ldr	r2, [pc, #132]	@ (801dd80 <UART_Start_Receive_IT+0x190>)
 801dcfc:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801dcfe:	68fb      	ldr	r3, [r7, #12]
 801dd00:	691b      	ldr	r3, [r3, #16]
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d019      	beq.n	801dd3a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd06:	f3ef 8310 	mrs	r3, PRIMASK
 801dd0a:	61fb      	str	r3, [r7, #28]
  return(result);
 801dd0c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801dd0e:	637b      	str	r3, [r7, #52]	@ 0x34
 801dd10:	2301      	movs	r3, #1
 801dd12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd14:	6a3b      	ldr	r3, [r7, #32]
 801dd16:	f383 8810 	msr	PRIMASK, r3
}
 801dd1a:	46c0      	nop			@ (mov r8, r8)
 801dd1c:	68fb      	ldr	r3, [r7, #12]
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	681a      	ldr	r2, [r3, #0]
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	681b      	ldr	r3, [r3, #0]
 801dd26:	2190      	movs	r1, #144	@ 0x90
 801dd28:	0049      	lsls	r1, r1, #1
 801dd2a:	430a      	orrs	r2, r1
 801dd2c:	601a      	str	r2, [r3, #0]
 801dd2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dd30:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd34:	f383 8810 	msr	PRIMASK, r3
}
 801dd38:	e018      	b.n	801dd6c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd3a:	f3ef 8310 	mrs	r3, PRIMASK
 801dd3e:	613b      	str	r3, [r7, #16]
  return(result);
 801dd40:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801dd42:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dd44:	2301      	movs	r3, #1
 801dd46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd48:	697b      	ldr	r3, [r7, #20]
 801dd4a:	f383 8810 	msr	PRIMASK, r3
}
 801dd4e:	46c0      	nop			@ (mov r8, r8)
 801dd50:	68fb      	ldr	r3, [r7, #12]
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	681a      	ldr	r2, [r3, #0]
 801dd56:	68fb      	ldr	r3, [r7, #12]
 801dd58:	681b      	ldr	r3, [r3, #0]
 801dd5a:	2120      	movs	r1, #32
 801dd5c:	430a      	orrs	r2, r1
 801dd5e:	601a      	str	r2, [r3, #0]
 801dd60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd64:	69bb      	ldr	r3, [r7, #24]
 801dd66:	f383 8810 	msr	PRIMASK, r3
}
 801dd6a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801dd6c:	2300      	movs	r3, #0
}
 801dd6e:	0018      	movs	r0, r3
 801dd70:	46bd      	mov	sp, r7
 801dd72:	b010      	add	sp, #64	@ 0x40
 801dd74:	bd80      	pop	{r7, pc}
 801dd76:	46c0      	nop			@ (mov r8, r8)
 801dd78:	000001ff 	.word	0x000001ff
 801dd7c:	0801e4f1 	.word	0x0801e4f1
 801dd80:	0801e325 	.word	0x0801e325

0801dd84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801dd84:	b580      	push	{r7, lr}
 801dd86:	b090      	sub	sp, #64	@ 0x40
 801dd88:	af00      	add	r7, sp, #0
 801dd8a:	60f8      	str	r0, [r7, #12]
 801dd8c:	60b9      	str	r1, [r7, #8]
 801dd8e:	1dbb      	adds	r3, r7, #6
 801dd90:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801dd92:	68fb      	ldr	r3, [r7, #12]
 801dd94:	68ba      	ldr	r2, [r7, #8]
 801dd96:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801dd98:	68fb      	ldr	r3, [r7, #12]
 801dd9a:	1dba      	adds	r2, r7, #6
 801dd9c:	2158      	movs	r1, #88	@ 0x58
 801dd9e:	8812      	ldrh	r2, [r2, #0]
 801dda0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dda2:	68fb      	ldr	r3, [r7, #12]
 801dda4:	2284      	movs	r2, #132	@ 0x84
 801dda6:	2100      	movs	r1, #0
 801dda8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ddaa:	68fb      	ldr	r3, [r7, #12]
 801ddac:	2280      	movs	r2, #128	@ 0x80
 801ddae:	2122      	movs	r1, #34	@ 0x22
 801ddb0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	d028      	beq.n	801de0c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801ddba:	68fb      	ldr	r3, [r7, #12]
 801ddbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ddbe:	4a3e      	ldr	r2, [pc, #248]	@ (801deb8 <UART_Start_Receive_DMA+0x134>)
 801ddc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801ddc2:	68fb      	ldr	r3, [r7, #12]
 801ddc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ddc6:	4a3d      	ldr	r2, [pc, #244]	@ (801debc <UART_Start_Receive_DMA+0x138>)
 801ddc8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801ddca:	68fb      	ldr	r3, [r7, #12]
 801ddcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ddce:	4a3c      	ldr	r2, [pc, #240]	@ (801dec0 <UART_Start_Receive_DMA+0x13c>)
 801ddd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ddd6:	2200      	movs	r2, #0
 801ddd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801ddda:	68fb      	ldr	r3, [r7, #12]
 801dddc:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801ddde:	68fb      	ldr	r3, [r7, #12]
 801dde0:	681b      	ldr	r3, [r3, #0]
 801dde2:	3324      	adds	r3, #36	@ 0x24
 801dde4:	0019      	movs	r1, r3
 801dde6:	68fb      	ldr	r3, [r7, #12]
 801dde8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ddea:	001a      	movs	r2, r3
 801ddec:	1dbb      	adds	r3, r7, #6
 801ddee:	881b      	ldrh	r3, [r3, #0]
 801ddf0:	f7f6 fd3e 	bl	8014870 <HAL_DMA_Start_IT>
 801ddf4:	1e03      	subs	r3, r0, #0
 801ddf6:	d009      	beq.n	801de0c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801ddf8:	68fb      	ldr	r3, [r7, #12]
 801ddfa:	2284      	movs	r2, #132	@ 0x84
 801ddfc:	2110      	movs	r1, #16
 801ddfe:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801de00:	68fb      	ldr	r3, [r7, #12]
 801de02:	2280      	movs	r2, #128	@ 0x80
 801de04:	2120      	movs	r1, #32
 801de06:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801de08:	2301      	movs	r3, #1
 801de0a:	e050      	b.n	801deae <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801de0c:	68fb      	ldr	r3, [r7, #12]
 801de0e:	691b      	ldr	r3, [r3, #16]
 801de10:	2b00      	cmp	r3, #0
 801de12:	d019      	beq.n	801de48 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de14:	f3ef 8310 	mrs	r3, PRIMASK
 801de18:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801de1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801de1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801de1e:	2301      	movs	r3, #1
 801de20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de24:	f383 8810 	msr	PRIMASK, r3
}
 801de28:	46c0      	nop			@ (mov r8, r8)
 801de2a:	68fb      	ldr	r3, [r7, #12]
 801de2c:	681b      	ldr	r3, [r3, #0]
 801de2e:	681a      	ldr	r2, [r3, #0]
 801de30:	68fb      	ldr	r3, [r7, #12]
 801de32:	681b      	ldr	r3, [r3, #0]
 801de34:	2180      	movs	r1, #128	@ 0x80
 801de36:	0049      	lsls	r1, r1, #1
 801de38:	430a      	orrs	r2, r1
 801de3a:	601a      	str	r2, [r3, #0]
 801de3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801de3e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801de42:	f383 8810 	msr	PRIMASK, r3
}
 801de46:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de48:	f3ef 8310 	mrs	r3, PRIMASK
 801de4c:	613b      	str	r3, [r7, #16]
  return(result);
 801de4e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801de50:	63bb      	str	r3, [r7, #56]	@ 0x38
 801de52:	2301      	movs	r3, #1
 801de54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de56:	697b      	ldr	r3, [r7, #20]
 801de58:	f383 8810 	msr	PRIMASK, r3
}
 801de5c:	46c0      	nop			@ (mov r8, r8)
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	681b      	ldr	r3, [r3, #0]
 801de62:	689a      	ldr	r2, [r3, #8]
 801de64:	68fb      	ldr	r3, [r7, #12]
 801de66:	681b      	ldr	r3, [r3, #0]
 801de68:	2101      	movs	r1, #1
 801de6a:	430a      	orrs	r2, r1
 801de6c:	609a      	str	r2, [r3, #8]
 801de6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de72:	69bb      	ldr	r3, [r7, #24]
 801de74:	f383 8810 	msr	PRIMASK, r3
}
 801de78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de7a:	f3ef 8310 	mrs	r3, PRIMASK
 801de7e:	61fb      	str	r3, [r7, #28]
  return(result);
 801de80:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801de82:	637b      	str	r3, [r7, #52]	@ 0x34
 801de84:	2301      	movs	r3, #1
 801de86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de88:	6a3b      	ldr	r3, [r7, #32]
 801de8a:	f383 8810 	msr	PRIMASK, r3
}
 801de8e:	46c0      	nop			@ (mov r8, r8)
 801de90:	68fb      	ldr	r3, [r7, #12]
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	689a      	ldr	r2, [r3, #8]
 801de96:	68fb      	ldr	r3, [r7, #12]
 801de98:	681b      	ldr	r3, [r3, #0]
 801de9a:	2140      	movs	r1, #64	@ 0x40
 801de9c:	430a      	orrs	r2, r1
 801de9e:	609a      	str	r2, [r3, #8]
 801dea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dea2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dea6:	f383 8810 	msr	PRIMASK, r3
}
 801deaa:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801deac:	2300      	movs	r3, #0
}
 801deae:	0018      	movs	r0, r3
 801deb0:	46bd      	mov	sp, r7
 801deb2:	b010      	add	sp, #64	@ 0x40
 801deb4:	bd80      	pop	{r7, pc}
 801deb6:	46c0      	nop			@ (mov r8, r8)
 801deb8:	0801e095 	.word	0x0801e095
 801debc:	0801e1c9 	.word	0x0801e1c9
 801dec0:	0801e211 	.word	0x0801e211

0801dec4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801dec4:	b580      	push	{r7, lr}
 801dec6:	b086      	sub	sp, #24
 801dec8:	af00      	add	r7, sp, #0
 801deca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801decc:	f3ef 8310 	mrs	r3, PRIMASK
 801ded0:	60bb      	str	r3, [r7, #8]
  return(result);
 801ded2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801ded4:	617b      	str	r3, [r7, #20]
 801ded6:	2301      	movs	r3, #1
 801ded8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801deda:	68fb      	ldr	r3, [r7, #12]
 801dedc:	f383 8810 	msr	PRIMASK, r3
}
 801dee0:	46c0      	nop			@ (mov r8, r8)
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	681b      	ldr	r3, [r3, #0]
 801dee6:	681a      	ldr	r2, [r3, #0]
 801dee8:	687b      	ldr	r3, [r7, #4]
 801deea:	681b      	ldr	r3, [r3, #0]
 801deec:	21c0      	movs	r1, #192	@ 0xc0
 801deee:	438a      	bics	r2, r1
 801def0:	601a      	str	r2, [r3, #0]
 801def2:	697b      	ldr	r3, [r7, #20]
 801def4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801def6:	693b      	ldr	r3, [r7, #16]
 801def8:	f383 8810 	msr	PRIMASK, r3
}
 801defc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	2220      	movs	r2, #32
 801df02:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801df04:	46c0      	nop			@ (mov r8, r8)
 801df06:	46bd      	mov	sp, r7
 801df08:	b006      	add	sp, #24
 801df0a:	bd80      	pop	{r7, pc}

0801df0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801df0c:	b580      	push	{r7, lr}
 801df0e:	b08e      	sub	sp, #56	@ 0x38
 801df10:	af00      	add	r7, sp, #0
 801df12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df14:	f3ef 8310 	mrs	r3, PRIMASK
 801df18:	617b      	str	r3, [r7, #20]
  return(result);
 801df1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801df1c:	637b      	str	r3, [r7, #52]	@ 0x34
 801df1e:	2301      	movs	r3, #1
 801df20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df22:	69bb      	ldr	r3, [r7, #24]
 801df24:	f383 8810 	msr	PRIMASK, r3
}
 801df28:	46c0      	nop			@ (mov r8, r8)
 801df2a:	687b      	ldr	r3, [r7, #4]
 801df2c:	681b      	ldr	r3, [r3, #0]
 801df2e:	681a      	ldr	r2, [r3, #0]
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	681b      	ldr	r3, [r3, #0]
 801df34:	4926      	ldr	r1, [pc, #152]	@ (801dfd0 <UART_EndRxTransfer+0xc4>)
 801df36:	400a      	ands	r2, r1
 801df38:	601a      	str	r2, [r3, #0]
 801df3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801df3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df3e:	69fb      	ldr	r3, [r7, #28]
 801df40:	f383 8810 	msr	PRIMASK, r3
}
 801df44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df46:	f3ef 8310 	mrs	r3, PRIMASK
 801df4a:	623b      	str	r3, [r7, #32]
  return(result);
 801df4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801df4e:	633b      	str	r3, [r7, #48]	@ 0x30
 801df50:	2301      	movs	r3, #1
 801df52:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df56:	f383 8810 	msr	PRIMASK, r3
}
 801df5a:	46c0      	nop			@ (mov r8, r8)
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	689a      	ldr	r2, [r3, #8]
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	681b      	ldr	r3, [r3, #0]
 801df66:	2101      	movs	r1, #1
 801df68:	438a      	bics	r2, r1
 801df6a:	609a      	str	r2, [r3, #8]
 801df6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df72:	f383 8810 	msr	PRIMASK, r3
}
 801df76:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801df78:	687b      	ldr	r3, [r7, #4]
 801df7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801df7c:	2b01      	cmp	r3, #1
 801df7e:	d118      	bne.n	801dfb2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df80:	f3ef 8310 	mrs	r3, PRIMASK
 801df84:	60bb      	str	r3, [r7, #8]
  return(result);
 801df86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801df88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801df8a:	2301      	movs	r3, #1
 801df8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	f383 8810 	msr	PRIMASK, r3
}
 801df94:	46c0      	nop			@ (mov r8, r8)
 801df96:	687b      	ldr	r3, [r7, #4]
 801df98:	681b      	ldr	r3, [r3, #0]
 801df9a:	681a      	ldr	r2, [r3, #0]
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	681b      	ldr	r3, [r3, #0]
 801dfa0:	2110      	movs	r1, #16
 801dfa2:	438a      	bics	r2, r1
 801dfa4:	601a      	str	r2, [r3, #0]
 801dfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dfa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dfaa:	693b      	ldr	r3, [r7, #16]
 801dfac:	f383 8810 	msr	PRIMASK, r3
}
 801dfb0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801dfb2:	687b      	ldr	r3, [r7, #4]
 801dfb4:	2280      	movs	r2, #128	@ 0x80
 801dfb6:	2120      	movs	r1, #32
 801dfb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	2200      	movs	r2, #0
 801dfbe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	2200      	movs	r2, #0
 801dfc4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801dfc6:	46c0      	nop			@ (mov r8, r8)
 801dfc8:	46bd      	mov	sp, r7
 801dfca:	b00e      	add	sp, #56	@ 0x38
 801dfcc:	bd80      	pop	{r7, pc}
 801dfce:	46c0      	nop			@ (mov r8, r8)
 801dfd0:	fffffedf 	.word	0xfffffedf

0801dfd4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801dfd4:	b580      	push	{r7, lr}
 801dfd6:	b08c      	sub	sp, #48	@ 0x30
 801dfd8:	af00      	add	r7, sp, #0
 801dfda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dfe0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	681b      	ldr	r3, [r3, #0]
 801dfe6:	681b      	ldr	r3, [r3, #0]
 801dfe8:	2220      	movs	r2, #32
 801dfea:	4013      	ands	r3, r2
 801dfec:	d135      	bne.n	801e05a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801dfee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dff0:	2252      	movs	r2, #82	@ 0x52
 801dff2:	2100      	movs	r1, #0
 801dff4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dff6:	f3ef 8310 	mrs	r3, PRIMASK
 801dffa:	60fb      	str	r3, [r7, #12]
  return(result);
 801dffc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801dffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e000:	2301      	movs	r3, #1
 801e002:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e004:	693b      	ldr	r3, [r7, #16]
 801e006:	f383 8810 	msr	PRIMASK, r3
}
 801e00a:	46c0      	nop			@ (mov r8, r8)
 801e00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	689a      	ldr	r2, [r3, #8]
 801e012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e014:	681b      	ldr	r3, [r3, #0]
 801e016:	2180      	movs	r1, #128	@ 0x80
 801e018:	438a      	bics	r2, r1
 801e01a:	609a      	str	r2, [r3, #8]
 801e01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e01e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e020:	697b      	ldr	r3, [r7, #20]
 801e022:	f383 8810 	msr	PRIMASK, r3
}
 801e026:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e028:	f3ef 8310 	mrs	r3, PRIMASK
 801e02c:	61bb      	str	r3, [r7, #24]
  return(result);
 801e02e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801e030:	627b      	str	r3, [r7, #36]	@ 0x24
 801e032:	2301      	movs	r3, #1
 801e034:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e036:	69fb      	ldr	r3, [r7, #28]
 801e038:	f383 8810 	msr	PRIMASK, r3
}
 801e03c:	46c0      	nop			@ (mov r8, r8)
 801e03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e040:	681b      	ldr	r3, [r3, #0]
 801e042:	681a      	ldr	r2, [r3, #0]
 801e044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e046:	681b      	ldr	r3, [r3, #0]
 801e048:	2140      	movs	r1, #64	@ 0x40
 801e04a:	430a      	orrs	r2, r1
 801e04c:	601a      	str	r2, [r3, #0]
 801e04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e050:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e052:	6a3b      	ldr	r3, [r7, #32]
 801e054:	f383 8810 	msr	PRIMASK, r3
}
 801e058:	e006      	b.n	801e068 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801e05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e05c:	228c      	movs	r2, #140	@ 0x8c
 801e05e:	589b      	ldr	r3, [r3, r2]
 801e060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e062:	0010      	movs	r0, r2
 801e064:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801e066:	46c0      	nop			@ (mov r8, r8)
 801e068:	46c0      	nop			@ (mov r8, r8)
 801e06a:	46bd      	mov	sp, r7
 801e06c:	b00c      	add	sp, #48	@ 0x30
 801e06e:	bd80      	pop	{r7, pc}

0801e070 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801e070:	b580      	push	{r7, lr}
 801e072:	b084      	sub	sp, #16
 801e074:	af00      	add	r7, sp, #0
 801e076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e078:	687b      	ldr	r3, [r7, #4]
 801e07a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e07c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801e07e:	68fb      	ldr	r3, [r7, #12]
 801e080:	2288      	movs	r2, #136	@ 0x88
 801e082:	589b      	ldr	r3, [r3, r2]
 801e084:	68fa      	ldr	r2, [r7, #12]
 801e086:	0010      	movs	r0, r2
 801e088:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e08a:	46c0      	nop			@ (mov r8, r8)
 801e08c:	46bd      	mov	sp, r7
 801e08e:	b004      	add	sp, #16
 801e090:	bd80      	pop	{r7, pc}
	...

0801e094 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801e094:	b580      	push	{r7, lr}
 801e096:	b094      	sub	sp, #80	@ 0x50
 801e098:	af00      	add	r7, sp, #0
 801e09a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e0a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801e0a2:	687b      	ldr	r3, [r7, #4]
 801e0a4:	681b      	ldr	r3, [r3, #0]
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	2220      	movs	r2, #32
 801e0aa:	4013      	ands	r3, r2
 801e0ac:	d16f      	bne.n	801e18e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801e0ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e0b0:	225a      	movs	r2, #90	@ 0x5a
 801e0b2:	2100      	movs	r1, #0
 801e0b4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e0b6:	f3ef 8310 	mrs	r3, PRIMASK
 801e0ba:	61bb      	str	r3, [r7, #24]
  return(result);
 801e0bc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801e0be:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e0c0:	2301      	movs	r3, #1
 801e0c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0c4:	69fb      	ldr	r3, [r7, #28]
 801e0c6:	f383 8810 	msr	PRIMASK, r3
}
 801e0ca:	46c0      	nop			@ (mov r8, r8)
 801e0cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e0ce:	681b      	ldr	r3, [r3, #0]
 801e0d0:	681a      	ldr	r2, [r3, #0]
 801e0d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e0d4:	681b      	ldr	r3, [r3, #0]
 801e0d6:	493b      	ldr	r1, [pc, #236]	@ (801e1c4 <UART_DMAReceiveCplt+0x130>)
 801e0d8:	400a      	ands	r2, r1
 801e0da:	601a      	str	r2, [r3, #0]
 801e0dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e0de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0e0:	6a3b      	ldr	r3, [r7, #32]
 801e0e2:	f383 8810 	msr	PRIMASK, r3
}
 801e0e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e0e8:	f3ef 8310 	mrs	r3, PRIMASK
 801e0ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e0f0:	647b      	str	r3, [r7, #68]	@ 0x44
 801e0f2:	2301      	movs	r3, #1
 801e0f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e0f8:	f383 8810 	msr	PRIMASK, r3
}
 801e0fc:	46c0      	nop			@ (mov r8, r8)
 801e0fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	689a      	ldr	r2, [r3, #8]
 801e104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e106:	681b      	ldr	r3, [r3, #0]
 801e108:	2101      	movs	r1, #1
 801e10a:	438a      	bics	r2, r1
 801e10c:	609a      	str	r2, [r3, #8]
 801e10e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e114:	f383 8810 	msr	PRIMASK, r3
}
 801e118:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e11a:	f3ef 8310 	mrs	r3, PRIMASK
 801e11e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801e120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e122:	643b      	str	r3, [r7, #64]	@ 0x40
 801e124:	2301      	movs	r3, #1
 801e126:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e12a:	f383 8810 	msr	PRIMASK, r3
}
 801e12e:	46c0      	nop			@ (mov r8, r8)
 801e130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e132:	681b      	ldr	r3, [r3, #0]
 801e134:	689a      	ldr	r2, [r3, #8]
 801e136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	2140      	movs	r1, #64	@ 0x40
 801e13c:	438a      	bics	r2, r1
 801e13e:	609a      	str	r2, [r3, #8]
 801e140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e142:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e146:	f383 8810 	msr	PRIMASK, r3
}
 801e14a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801e14c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e14e:	2280      	movs	r2, #128	@ 0x80
 801e150:	2120      	movs	r1, #32
 801e152:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e158:	2b01      	cmp	r3, #1
 801e15a:	d118      	bne.n	801e18e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e15c:	f3ef 8310 	mrs	r3, PRIMASK
 801e160:	60fb      	str	r3, [r7, #12]
  return(result);
 801e162:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e164:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e166:	2301      	movs	r3, #1
 801e168:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e16a:	693b      	ldr	r3, [r7, #16]
 801e16c:	f383 8810 	msr	PRIMASK, r3
}
 801e170:	46c0      	nop			@ (mov r8, r8)
 801e172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e174:	681b      	ldr	r3, [r3, #0]
 801e176:	681a      	ldr	r2, [r3, #0]
 801e178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e17a:	681b      	ldr	r3, [r3, #0]
 801e17c:	2110      	movs	r1, #16
 801e17e:	438a      	bics	r2, r1
 801e180:	601a      	str	r2, [r3, #0]
 801e182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e184:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e186:	697b      	ldr	r3, [r7, #20]
 801e188:	f383 8810 	msr	PRIMASK, r3
}
 801e18c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e18e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e190:	2200      	movs	r2, #0
 801e192:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e198:	2b01      	cmp	r3, #1
 801e19a:	d109      	bne.n	801e1b0 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801e19c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e19e:	22ac      	movs	r2, #172	@ 0xac
 801e1a0:	589b      	ldr	r3, [r3, r2]
 801e1a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e1a4:	2158      	movs	r1, #88	@ 0x58
 801e1a6:	5a51      	ldrh	r1, [r2, r1]
 801e1a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e1aa:	0010      	movs	r0, r2
 801e1ac:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801e1ae:	e005      	b.n	801e1bc <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801e1b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e1b2:	2294      	movs	r2, #148	@ 0x94
 801e1b4:	589b      	ldr	r3, [r3, r2]
 801e1b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e1b8:	0010      	movs	r0, r2
 801e1ba:	4798      	blx	r3
}
 801e1bc:	46c0      	nop			@ (mov r8, r8)
 801e1be:	46bd      	mov	sp, r7
 801e1c0:	b014      	add	sp, #80	@ 0x50
 801e1c2:	bd80      	pop	{r7, pc}
 801e1c4:	fffffeff 	.word	0xfffffeff

0801e1c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801e1c8:	b580      	push	{r7, lr}
 801e1ca:	b084      	sub	sp, #16
 801e1cc:	af00      	add	r7, sp, #0
 801e1ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e1d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801e1d6:	68fb      	ldr	r3, [r7, #12]
 801e1d8:	2201      	movs	r2, #1
 801e1da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e1e0:	2b01      	cmp	r3, #1
 801e1e2:	d10b      	bne.n	801e1fc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801e1e4:	68fb      	ldr	r3, [r7, #12]
 801e1e6:	22ac      	movs	r2, #172	@ 0xac
 801e1e8:	589b      	ldr	r3, [r3, r2]
 801e1ea:	68fa      	ldr	r2, [r7, #12]
 801e1ec:	2158      	movs	r1, #88	@ 0x58
 801e1ee:	5a52      	ldrh	r2, [r2, r1]
 801e1f0:	0852      	lsrs	r2, r2, #1
 801e1f2:	b291      	uxth	r1, r2
 801e1f4:	68fa      	ldr	r2, [r7, #12]
 801e1f6:	0010      	movs	r0, r2
 801e1f8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801e1fa:	e005      	b.n	801e208 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801e1fc:	68fb      	ldr	r3, [r7, #12]
 801e1fe:	2290      	movs	r2, #144	@ 0x90
 801e200:	589b      	ldr	r3, [r3, r2]
 801e202:	68fa      	ldr	r2, [r7, #12]
 801e204:	0010      	movs	r0, r2
 801e206:	4798      	blx	r3
}
 801e208:	46c0      	nop			@ (mov r8, r8)
 801e20a:	46bd      	mov	sp, r7
 801e20c:	b004      	add	sp, #16
 801e20e:	bd80      	pop	{r7, pc}

0801e210 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801e210:	b580      	push	{r7, lr}
 801e212:	b086      	sub	sp, #24
 801e214:	af00      	add	r7, sp, #0
 801e216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e21c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801e21e:	697b      	ldr	r3, [r7, #20]
 801e220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e222:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801e224:	697b      	ldr	r3, [r7, #20]
 801e226:	2280      	movs	r2, #128	@ 0x80
 801e228:	589b      	ldr	r3, [r3, r2]
 801e22a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801e22c:	697b      	ldr	r3, [r7, #20]
 801e22e:	681b      	ldr	r3, [r3, #0]
 801e230:	689b      	ldr	r3, [r3, #8]
 801e232:	2280      	movs	r2, #128	@ 0x80
 801e234:	4013      	ands	r3, r2
 801e236:	2b80      	cmp	r3, #128	@ 0x80
 801e238:	d10a      	bne.n	801e250 <UART_DMAError+0x40>
 801e23a:	693b      	ldr	r3, [r7, #16]
 801e23c:	2b21      	cmp	r3, #33	@ 0x21
 801e23e:	d107      	bne.n	801e250 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801e240:	697b      	ldr	r3, [r7, #20]
 801e242:	2252      	movs	r2, #82	@ 0x52
 801e244:	2100      	movs	r1, #0
 801e246:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801e248:	697b      	ldr	r3, [r7, #20]
 801e24a:	0018      	movs	r0, r3
 801e24c:	f7ff fe3a 	bl	801dec4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801e250:	697b      	ldr	r3, [r7, #20]
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	689b      	ldr	r3, [r3, #8]
 801e256:	2240      	movs	r2, #64	@ 0x40
 801e258:	4013      	ands	r3, r2
 801e25a:	2b40      	cmp	r3, #64	@ 0x40
 801e25c:	d10a      	bne.n	801e274 <UART_DMAError+0x64>
 801e25e:	68fb      	ldr	r3, [r7, #12]
 801e260:	2b22      	cmp	r3, #34	@ 0x22
 801e262:	d107      	bne.n	801e274 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801e264:	697b      	ldr	r3, [r7, #20]
 801e266:	225a      	movs	r2, #90	@ 0x5a
 801e268:	2100      	movs	r1, #0
 801e26a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801e26c:	697b      	ldr	r3, [r7, #20]
 801e26e:	0018      	movs	r0, r3
 801e270:	f7ff fe4c 	bl	801df0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801e274:	697b      	ldr	r3, [r7, #20]
 801e276:	2284      	movs	r2, #132	@ 0x84
 801e278:	589b      	ldr	r3, [r3, r2]
 801e27a:	2210      	movs	r2, #16
 801e27c:	431a      	orrs	r2, r3
 801e27e:	697b      	ldr	r3, [r7, #20]
 801e280:	2184      	movs	r1, #132	@ 0x84
 801e282:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801e284:	697b      	ldr	r3, [r7, #20]
 801e286:	2298      	movs	r2, #152	@ 0x98
 801e288:	589b      	ldr	r3, [r3, r2]
 801e28a:	697a      	ldr	r2, [r7, #20]
 801e28c:	0010      	movs	r0, r2
 801e28e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e290:	46c0      	nop			@ (mov r8, r8)
 801e292:	46bd      	mov	sp, r7
 801e294:	b006      	add	sp, #24
 801e296:	bd80      	pop	{r7, pc}

0801e298 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801e298:	b580      	push	{r7, lr}
 801e29a:	b084      	sub	sp, #16
 801e29c:	af00      	add	r7, sp, #0
 801e29e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e2a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801e2a6:	68fb      	ldr	r3, [r7, #12]
 801e2a8:	225a      	movs	r2, #90	@ 0x5a
 801e2aa:	2100      	movs	r1, #0
 801e2ac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801e2ae:	68fb      	ldr	r3, [r7, #12]
 801e2b0:	2252      	movs	r2, #82	@ 0x52
 801e2b2:	2100      	movs	r1, #0
 801e2b4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801e2b6:	68fb      	ldr	r3, [r7, #12]
 801e2b8:	2298      	movs	r2, #152	@ 0x98
 801e2ba:	589b      	ldr	r3, [r3, r2]
 801e2bc:	68fa      	ldr	r2, [r7, #12]
 801e2be:	0010      	movs	r0, r2
 801e2c0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e2c2:	46c0      	nop			@ (mov r8, r8)
 801e2c4:	46bd      	mov	sp, r7
 801e2c6:	b004      	add	sp, #16
 801e2c8:	bd80      	pop	{r7, pc}

0801e2ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801e2ca:	b580      	push	{r7, lr}
 801e2cc:	b086      	sub	sp, #24
 801e2ce:	af00      	add	r7, sp, #0
 801e2d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e2d2:	f3ef 8310 	mrs	r3, PRIMASK
 801e2d6:	60bb      	str	r3, [r7, #8]
  return(result);
 801e2d8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801e2da:	617b      	str	r3, [r7, #20]
 801e2dc:	2301      	movs	r3, #1
 801e2de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2e0:	68fb      	ldr	r3, [r7, #12]
 801e2e2:	f383 8810 	msr	PRIMASK, r3
}
 801e2e6:	46c0      	nop			@ (mov r8, r8)
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	681b      	ldr	r3, [r3, #0]
 801e2ec:	681a      	ldr	r2, [r3, #0]
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	681b      	ldr	r3, [r3, #0]
 801e2f2:	2140      	movs	r1, #64	@ 0x40
 801e2f4:	438a      	bics	r2, r1
 801e2f6:	601a      	str	r2, [r3, #0]
 801e2f8:	697b      	ldr	r3, [r7, #20]
 801e2fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2fc:	693b      	ldr	r3, [r7, #16]
 801e2fe:	f383 8810 	msr	PRIMASK, r3
}
 801e302:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	2220      	movs	r2, #32
 801e308:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	2200      	movs	r2, #0
 801e30e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	228c      	movs	r2, #140	@ 0x8c
 801e314:	589b      	ldr	r3, [r3, r2]
 801e316:	687a      	ldr	r2, [r7, #4]
 801e318:	0010      	movs	r0, r2
 801e31a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e31c:	46c0      	nop			@ (mov r8, r8)
 801e31e:	46bd      	mov	sp, r7
 801e320:	b006      	add	sp, #24
 801e322:	bd80      	pop	{r7, pc}

0801e324 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801e324:	b580      	push	{r7, lr}
 801e326:	b094      	sub	sp, #80	@ 0x50
 801e328:	af00      	add	r7, sp, #0
 801e32a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801e32c:	204e      	movs	r0, #78	@ 0x4e
 801e32e:	183b      	adds	r3, r7, r0
 801e330:	687a      	ldr	r2, [r7, #4]
 801e332:	215c      	movs	r1, #92	@ 0x5c
 801e334:	5a52      	ldrh	r2, [r2, r1]
 801e336:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	2280      	movs	r2, #128	@ 0x80
 801e33c:	589b      	ldr	r3, [r3, r2]
 801e33e:	2b22      	cmp	r3, #34	@ 0x22
 801e340:	d000      	beq.n	801e344 <UART_RxISR_8BIT+0x20>
 801e342:	e0c2      	b.n	801e4ca <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e344:	687b      	ldr	r3, [r7, #4]
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e34a:	214c      	movs	r1, #76	@ 0x4c
 801e34c:	187b      	adds	r3, r7, r1
 801e34e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801e350:	187b      	adds	r3, r7, r1
 801e352:	881b      	ldrh	r3, [r3, #0]
 801e354:	b2da      	uxtb	r2, r3
 801e356:	183b      	adds	r3, r7, r0
 801e358:	881b      	ldrh	r3, [r3, #0]
 801e35a:	b2d9      	uxtb	r1, r3
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e360:	400a      	ands	r2, r1
 801e362:	b2d2      	uxtb	r2, r2
 801e364:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e36a:	1c5a      	adds	r2, r3, #1
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	225a      	movs	r2, #90	@ 0x5a
 801e374:	5a9b      	ldrh	r3, [r3, r2]
 801e376:	b29b      	uxth	r3, r3
 801e378:	3b01      	subs	r3, #1
 801e37a:	b299      	uxth	r1, r3
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	225a      	movs	r2, #90	@ 0x5a
 801e380:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	225a      	movs	r2, #90	@ 0x5a
 801e386:	5a9b      	ldrh	r3, [r3, r2]
 801e388:	b29b      	uxth	r3, r3
 801e38a:	2b00      	cmp	r3, #0
 801e38c:	d000      	beq.n	801e390 <UART_RxISR_8BIT+0x6c>
 801e38e:	e0a4      	b.n	801e4da <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e390:	f3ef 8310 	mrs	r3, PRIMASK
 801e394:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e398:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e39a:	2301      	movs	r3, #1
 801e39c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e3a0:	f383 8810 	msr	PRIMASK, r3
}
 801e3a4:	46c0      	nop			@ (mov r8, r8)
 801e3a6:	687b      	ldr	r3, [r7, #4]
 801e3a8:	681b      	ldr	r3, [r3, #0]
 801e3aa:	681a      	ldr	r2, [r3, #0]
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	681b      	ldr	r3, [r3, #0]
 801e3b0:	494c      	ldr	r1, [pc, #304]	@ (801e4e4 <UART_RxISR_8BIT+0x1c0>)
 801e3b2:	400a      	ands	r2, r1
 801e3b4:	601a      	str	r2, [r3, #0]
 801e3b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e3b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e3bc:	f383 8810 	msr	PRIMASK, r3
}
 801e3c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e3c2:	f3ef 8310 	mrs	r3, PRIMASK
 801e3c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801e3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e3ca:	647b      	str	r3, [r7, #68]	@ 0x44
 801e3cc:	2301      	movs	r3, #1
 801e3ce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e3d2:	f383 8810 	msr	PRIMASK, r3
}
 801e3d6:	46c0      	nop			@ (mov r8, r8)
 801e3d8:	687b      	ldr	r3, [r7, #4]
 801e3da:	681b      	ldr	r3, [r3, #0]
 801e3dc:	689a      	ldr	r2, [r3, #8]
 801e3de:	687b      	ldr	r3, [r7, #4]
 801e3e0:	681b      	ldr	r3, [r3, #0]
 801e3e2:	2101      	movs	r1, #1
 801e3e4:	438a      	bics	r2, r1
 801e3e6:	609a      	str	r2, [r3, #8]
 801e3e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e3ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e3ee:	f383 8810 	msr	PRIMASK, r3
}
 801e3f2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e3f4:	687b      	ldr	r3, [r7, #4]
 801e3f6:	2280      	movs	r2, #128	@ 0x80
 801e3f8:	2120      	movs	r1, #32
 801e3fa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e3fc:	687b      	ldr	r3, [r7, #4]
 801e3fe:	2200      	movs	r2, #0
 801e400:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	2200      	movs	r2, #0
 801e406:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	4a36      	ldr	r2, [pc, #216]	@ (801e4e8 <UART_RxISR_8BIT+0x1c4>)
 801e40e:	4293      	cmp	r3, r2
 801e410:	d01f      	beq.n	801e452 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	685a      	ldr	r2, [r3, #4]
 801e418:	2380      	movs	r3, #128	@ 0x80
 801e41a:	041b      	lsls	r3, r3, #16
 801e41c:	4013      	ands	r3, r2
 801e41e:	d018      	beq.n	801e452 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e420:	f3ef 8310 	mrs	r3, PRIMASK
 801e424:	61bb      	str	r3, [r7, #24]
  return(result);
 801e426:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801e428:	643b      	str	r3, [r7, #64]	@ 0x40
 801e42a:	2301      	movs	r3, #1
 801e42c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e42e:	69fb      	ldr	r3, [r7, #28]
 801e430:	f383 8810 	msr	PRIMASK, r3
}
 801e434:	46c0      	nop			@ (mov r8, r8)
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	681a      	ldr	r2, [r3, #0]
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	492a      	ldr	r1, [pc, #168]	@ (801e4ec <UART_RxISR_8BIT+0x1c8>)
 801e442:	400a      	ands	r2, r1
 801e444:	601a      	str	r2, [r3, #0]
 801e446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e448:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e44a:	6a3b      	ldr	r3, [r7, #32]
 801e44c:	f383 8810 	msr	PRIMASK, r3
}
 801e450:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e456:	2b01      	cmp	r3, #1
 801e458:	d130      	bne.n	801e4bc <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e45a:	687b      	ldr	r3, [r7, #4]
 801e45c:	2200      	movs	r2, #0
 801e45e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e460:	f3ef 8310 	mrs	r3, PRIMASK
 801e464:	60fb      	str	r3, [r7, #12]
  return(result);
 801e466:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e46a:	2301      	movs	r3, #1
 801e46c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e46e:	693b      	ldr	r3, [r7, #16]
 801e470:	f383 8810 	msr	PRIMASK, r3
}
 801e474:	46c0      	nop			@ (mov r8, r8)
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	681b      	ldr	r3, [r3, #0]
 801e47a:	681a      	ldr	r2, [r3, #0]
 801e47c:	687b      	ldr	r3, [r7, #4]
 801e47e:	681b      	ldr	r3, [r3, #0]
 801e480:	2110      	movs	r1, #16
 801e482:	438a      	bics	r2, r1
 801e484:	601a      	str	r2, [r3, #0]
 801e486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e488:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e48a:	697b      	ldr	r3, [r7, #20]
 801e48c:	f383 8810 	msr	PRIMASK, r3
}
 801e490:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	681b      	ldr	r3, [r3, #0]
 801e496:	69db      	ldr	r3, [r3, #28]
 801e498:	2210      	movs	r2, #16
 801e49a:	4013      	ands	r3, r2
 801e49c:	2b10      	cmp	r3, #16
 801e49e:	d103      	bne.n	801e4a8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	2210      	movs	r2, #16
 801e4a6:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	22ac      	movs	r2, #172	@ 0xac
 801e4ac:	589b      	ldr	r3, [r3, r2]
 801e4ae:	687a      	ldr	r2, [r7, #4]
 801e4b0:	2158      	movs	r1, #88	@ 0x58
 801e4b2:	5a51      	ldrh	r1, [r2, r1]
 801e4b4:	687a      	ldr	r2, [r7, #4]
 801e4b6:	0010      	movs	r0, r2
 801e4b8:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e4ba:	e00e      	b.n	801e4da <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801e4bc:	687b      	ldr	r3, [r7, #4]
 801e4be:	2294      	movs	r2, #148	@ 0x94
 801e4c0:	589b      	ldr	r3, [r3, r2]
 801e4c2:	687a      	ldr	r2, [r7, #4]
 801e4c4:	0010      	movs	r0, r2
 801e4c6:	4798      	blx	r3
}
 801e4c8:	e007      	b.n	801e4da <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	681b      	ldr	r3, [r3, #0]
 801e4ce:	699a      	ldr	r2, [r3, #24]
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	2108      	movs	r1, #8
 801e4d6:	430a      	orrs	r2, r1
 801e4d8:	619a      	str	r2, [r3, #24]
}
 801e4da:	46c0      	nop			@ (mov r8, r8)
 801e4dc:	46bd      	mov	sp, r7
 801e4de:	b014      	add	sp, #80	@ 0x50
 801e4e0:	bd80      	pop	{r7, pc}
 801e4e2:	46c0      	nop			@ (mov r8, r8)
 801e4e4:	fffffedf 	.word	0xfffffedf
 801e4e8:	40004800 	.word	0x40004800
 801e4ec:	fbffffff 	.word	0xfbffffff

0801e4f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801e4f0:	b580      	push	{r7, lr}
 801e4f2:	b094      	sub	sp, #80	@ 0x50
 801e4f4:	af00      	add	r7, sp, #0
 801e4f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801e4f8:	204e      	movs	r0, #78	@ 0x4e
 801e4fa:	183b      	adds	r3, r7, r0
 801e4fc:	687a      	ldr	r2, [r7, #4]
 801e4fe:	215c      	movs	r1, #92	@ 0x5c
 801e500:	5a52      	ldrh	r2, [r2, r1]
 801e502:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	2280      	movs	r2, #128	@ 0x80
 801e508:	589b      	ldr	r3, [r3, r2]
 801e50a:	2b22      	cmp	r3, #34	@ 0x22
 801e50c:	d000      	beq.n	801e510 <UART_RxISR_16BIT+0x20>
 801e50e:	e0c2      	b.n	801e696 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e516:	214c      	movs	r1, #76	@ 0x4c
 801e518:	187b      	adds	r3, r7, r1
 801e51a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e520:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801e522:	187b      	adds	r3, r7, r1
 801e524:	183a      	adds	r2, r7, r0
 801e526:	881b      	ldrh	r3, [r3, #0]
 801e528:	8812      	ldrh	r2, [r2, #0]
 801e52a:	4013      	ands	r3, r2
 801e52c:	b29a      	uxth	r2, r3
 801e52e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e530:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801e532:	687b      	ldr	r3, [r7, #4]
 801e534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e536:	1c9a      	adds	r2, r3, #2
 801e538:	687b      	ldr	r3, [r7, #4]
 801e53a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	225a      	movs	r2, #90	@ 0x5a
 801e540:	5a9b      	ldrh	r3, [r3, r2]
 801e542:	b29b      	uxth	r3, r3
 801e544:	3b01      	subs	r3, #1
 801e546:	b299      	uxth	r1, r3
 801e548:	687b      	ldr	r3, [r7, #4]
 801e54a:	225a      	movs	r2, #90	@ 0x5a
 801e54c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	225a      	movs	r2, #90	@ 0x5a
 801e552:	5a9b      	ldrh	r3, [r3, r2]
 801e554:	b29b      	uxth	r3, r3
 801e556:	2b00      	cmp	r3, #0
 801e558:	d000      	beq.n	801e55c <UART_RxISR_16BIT+0x6c>
 801e55a:	e0a4      	b.n	801e6a6 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e55c:	f3ef 8310 	mrs	r3, PRIMASK
 801e560:	623b      	str	r3, [r7, #32]
  return(result);
 801e562:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e564:	647b      	str	r3, [r7, #68]	@ 0x44
 801e566:	2301      	movs	r3, #1
 801e568:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e56c:	f383 8810 	msr	PRIMASK, r3
}
 801e570:	46c0      	nop			@ (mov r8, r8)
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	681b      	ldr	r3, [r3, #0]
 801e576:	681a      	ldr	r2, [r3, #0]
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	681b      	ldr	r3, [r3, #0]
 801e57c:	494c      	ldr	r1, [pc, #304]	@ (801e6b0 <UART_RxISR_16BIT+0x1c0>)
 801e57e:	400a      	ands	r2, r1
 801e580:	601a      	str	r2, [r3, #0]
 801e582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e584:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e588:	f383 8810 	msr	PRIMASK, r3
}
 801e58c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e58e:	f3ef 8310 	mrs	r3, PRIMASK
 801e592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801e594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e596:	643b      	str	r3, [r7, #64]	@ 0x40
 801e598:	2301      	movs	r3, #1
 801e59a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e59e:	f383 8810 	msr	PRIMASK, r3
}
 801e5a2:	46c0      	nop			@ (mov r8, r8)
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	689a      	ldr	r2, [r3, #8]
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	681b      	ldr	r3, [r3, #0]
 801e5ae:	2101      	movs	r1, #1
 801e5b0:	438a      	bics	r2, r1
 801e5b2:	609a      	str	r2, [r3, #8]
 801e5b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e5b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e5ba:	f383 8810 	msr	PRIMASK, r3
}
 801e5be:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	2280      	movs	r2, #128	@ 0x80
 801e5c4:	2120      	movs	r1, #32
 801e5c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	2200      	movs	r2, #0
 801e5cc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e5ce:	687b      	ldr	r3, [r7, #4]
 801e5d0:	2200      	movs	r2, #0
 801e5d2:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	681b      	ldr	r3, [r3, #0]
 801e5d8:	4a36      	ldr	r2, [pc, #216]	@ (801e6b4 <UART_RxISR_16BIT+0x1c4>)
 801e5da:	4293      	cmp	r3, r2
 801e5dc:	d01f      	beq.n	801e61e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	685a      	ldr	r2, [r3, #4]
 801e5e4:	2380      	movs	r3, #128	@ 0x80
 801e5e6:	041b      	lsls	r3, r3, #16
 801e5e8:	4013      	ands	r3, r2
 801e5ea:	d018      	beq.n	801e61e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e5ec:	f3ef 8310 	mrs	r3, PRIMASK
 801e5f0:	617b      	str	r3, [r7, #20]
  return(result);
 801e5f2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801e5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e5f6:	2301      	movs	r3, #1
 801e5f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5fa:	69bb      	ldr	r3, [r7, #24]
 801e5fc:	f383 8810 	msr	PRIMASK, r3
}
 801e600:	46c0      	nop			@ (mov r8, r8)
 801e602:	687b      	ldr	r3, [r7, #4]
 801e604:	681b      	ldr	r3, [r3, #0]
 801e606:	681a      	ldr	r2, [r3, #0]
 801e608:	687b      	ldr	r3, [r7, #4]
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	492a      	ldr	r1, [pc, #168]	@ (801e6b8 <UART_RxISR_16BIT+0x1c8>)
 801e60e:	400a      	ands	r2, r1
 801e610:	601a      	str	r2, [r3, #0]
 801e612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e616:	69fb      	ldr	r3, [r7, #28]
 801e618:	f383 8810 	msr	PRIMASK, r3
}
 801e61c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e622:	2b01      	cmp	r3, #1
 801e624:	d130      	bne.n	801e688 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	2200      	movs	r2, #0
 801e62a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e62c:	f3ef 8310 	mrs	r3, PRIMASK
 801e630:	60bb      	str	r3, [r7, #8]
  return(result);
 801e632:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e634:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e636:	2301      	movs	r3, #1
 801e638:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e63a:	68fb      	ldr	r3, [r7, #12]
 801e63c:	f383 8810 	msr	PRIMASK, r3
}
 801e640:	46c0      	nop			@ (mov r8, r8)
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	681b      	ldr	r3, [r3, #0]
 801e646:	681a      	ldr	r2, [r3, #0]
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	2110      	movs	r1, #16
 801e64e:	438a      	bics	r2, r1
 801e650:	601a      	str	r2, [r3, #0]
 801e652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e654:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e656:	693b      	ldr	r3, [r7, #16]
 801e658:	f383 8810 	msr	PRIMASK, r3
}
 801e65c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801e65e:	687b      	ldr	r3, [r7, #4]
 801e660:	681b      	ldr	r3, [r3, #0]
 801e662:	69db      	ldr	r3, [r3, #28]
 801e664:	2210      	movs	r2, #16
 801e666:	4013      	ands	r3, r2
 801e668:	2b10      	cmp	r3, #16
 801e66a:	d103      	bne.n	801e674 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e66c:	687b      	ldr	r3, [r7, #4]
 801e66e:	681b      	ldr	r3, [r3, #0]
 801e670:	2210      	movs	r2, #16
 801e672:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	22ac      	movs	r2, #172	@ 0xac
 801e678:	589b      	ldr	r3, [r3, r2]
 801e67a:	687a      	ldr	r2, [r7, #4]
 801e67c:	2158      	movs	r1, #88	@ 0x58
 801e67e:	5a51      	ldrh	r1, [r2, r1]
 801e680:	687a      	ldr	r2, [r7, #4]
 801e682:	0010      	movs	r0, r2
 801e684:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e686:	e00e      	b.n	801e6a6 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	2294      	movs	r2, #148	@ 0x94
 801e68c:	589b      	ldr	r3, [r3, r2]
 801e68e:	687a      	ldr	r2, [r7, #4]
 801e690:	0010      	movs	r0, r2
 801e692:	4798      	blx	r3
}
 801e694:	e007      	b.n	801e6a6 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	681b      	ldr	r3, [r3, #0]
 801e69a:	699a      	ldr	r2, [r3, #24]
 801e69c:	687b      	ldr	r3, [r7, #4]
 801e69e:	681b      	ldr	r3, [r3, #0]
 801e6a0:	2108      	movs	r1, #8
 801e6a2:	430a      	orrs	r2, r1
 801e6a4:	619a      	str	r2, [r3, #24]
}
 801e6a6:	46c0      	nop			@ (mov r8, r8)
 801e6a8:	46bd      	mov	sp, r7
 801e6aa:	b014      	add	sp, #80	@ 0x50
 801e6ac:	bd80      	pop	{r7, pc}
 801e6ae:	46c0      	nop			@ (mov r8, r8)
 801e6b0:	fffffedf 	.word	0xfffffedf
 801e6b4:	40004800 	.word	0x40004800
 801e6b8:	fbffffff 	.word	0xfbffffff

0801e6bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801e6bc:	b580      	push	{r7, lr}
 801e6be:	b082      	sub	sp, #8
 801e6c0:	af00      	add	r7, sp, #0
 801e6c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801e6c4:	46c0      	nop			@ (mov r8, r8)
 801e6c6:	46bd      	mov	sp, r7
 801e6c8:	b002      	add	sp, #8
 801e6ca:	bd80      	pop	{r7, pc}

0801e6cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801e6cc:	b580      	push	{r7, lr}
 801e6ce:	b084      	sub	sp, #16
 801e6d0:	af00      	add	r7, sp, #0
 801e6d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	2244      	movs	r2, #68	@ 0x44
 801e6d8:	2100      	movs	r1, #0
 801e6da:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801e6dc:	4b05      	ldr	r3, [pc, #20]	@ (801e6f4 <USB_EnableGlobalInt+0x28>)
 801e6de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801e6e0:	68fb      	ldr	r3, [r7, #12]
 801e6e2:	b299      	uxth	r1, r3
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	2240      	movs	r2, #64	@ 0x40
 801e6e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e6ea:	2300      	movs	r3, #0
}
 801e6ec:	0018      	movs	r0, r3
 801e6ee:	46bd      	mov	sp, r7
 801e6f0:	b004      	add	sp, #16
 801e6f2:	bd80      	pop	{r7, pc}
 801e6f4:	0000bf80 	.word	0x0000bf80

0801e6f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801e6f8:	b580      	push	{r7, lr}
 801e6fa:	b084      	sub	sp, #16
 801e6fc:	af00      	add	r7, sp, #0
 801e6fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801e700:	4b09      	ldr	r3, [pc, #36]	@ (801e728 <USB_DisableGlobalInt+0x30>)
 801e702:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801e704:	687b      	ldr	r3, [r7, #4]
 801e706:	2240      	movs	r2, #64	@ 0x40
 801e708:	5a9b      	ldrh	r3, [r3, r2]
 801e70a:	b29b      	uxth	r3, r3
 801e70c:	68fa      	ldr	r2, [r7, #12]
 801e70e:	b292      	uxth	r2, r2
 801e710:	43d2      	mvns	r2, r2
 801e712:	b292      	uxth	r2, r2
 801e714:	4013      	ands	r3, r2
 801e716:	b299      	uxth	r1, r3
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	2240      	movs	r2, #64	@ 0x40
 801e71c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e71e:	2300      	movs	r3, #0
}
 801e720:	0018      	movs	r0, r3
 801e722:	46bd      	mov	sp, r7
 801e724:	b004      	add	sp, #16
 801e726:	bd80      	pop	{r7, pc}
 801e728:	0000bf80 	.word	0x0000bf80

0801e72c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801e72c:	b084      	sub	sp, #16
 801e72e:	b590      	push	{r4, r7, lr}
 801e730:	b083      	sub	sp, #12
 801e732:	af00      	add	r7, sp, #0
 801e734:	6078      	str	r0, [r7, #4]
 801e736:	2004      	movs	r0, #4
 801e738:	2410      	movs	r4, #16
 801e73a:	1900      	adds	r0, r0, r4
 801e73c:	2408      	movs	r4, #8
 801e73e:	46a4      	mov	ip, r4
 801e740:	44bc      	add	ip, r7
 801e742:	4460      	add	r0, ip
 801e744:	6001      	str	r1, [r0, #0]
 801e746:	6042      	str	r2, [r0, #4]
 801e748:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	2240      	movs	r2, #64	@ 0x40
 801e74e:	2101      	movs	r1, #1
 801e750:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	2240      	movs	r2, #64	@ 0x40
 801e756:	2100      	movs	r1, #0
 801e758:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	2244      	movs	r2, #68	@ 0x44
 801e75e:	2100      	movs	r1, #0
 801e760:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	2250      	movs	r2, #80	@ 0x50
 801e766:	2100      	movs	r1, #0
 801e768:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e76a:	2300      	movs	r3, #0
}
 801e76c:	0018      	movs	r0, r3
 801e76e:	46bd      	mov	sp, r7
 801e770:	b003      	add	sp, #12
 801e772:	bc90      	pop	{r4, r7}
 801e774:	bc08      	pop	{r3}
 801e776:	b004      	add	sp, #16
 801e778:	4718      	bx	r3
	...

0801e77c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e77c:	b580      	push	{r7, lr}
 801e77e:	b09c      	sub	sp, #112	@ 0x70
 801e780:	af00      	add	r7, sp, #0
 801e782:	6078      	str	r0, [r7, #4]
 801e784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801e786:	236f      	movs	r3, #111	@ 0x6f
 801e788:	18fb      	adds	r3, r7, r3
 801e78a:	2200      	movs	r2, #0
 801e78c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801e78e:	687a      	ldr	r2, [r7, #4]
 801e790:	683b      	ldr	r3, [r7, #0]
 801e792:	781b      	ldrb	r3, [r3, #0]
 801e794:	009b      	lsls	r3, r3, #2
 801e796:	18d3      	adds	r3, r2, r3
 801e798:	881b      	ldrh	r3, [r3, #0]
 801e79a:	b29a      	uxth	r2, r3
 801e79c:	236c      	movs	r3, #108	@ 0x6c
 801e79e:	18fb      	adds	r3, r7, r3
 801e7a0:	49a3      	ldr	r1, [pc, #652]	@ (801ea30 <USB_ActivateEndpoint+0x2b4>)
 801e7a2:	400a      	ands	r2, r1
 801e7a4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801e7a6:	683b      	ldr	r3, [r7, #0]
 801e7a8:	78db      	ldrb	r3, [r3, #3]
 801e7aa:	2b03      	cmp	r3, #3
 801e7ac:	d017      	beq.n	801e7de <USB_ActivateEndpoint+0x62>
 801e7ae:	dc28      	bgt.n	801e802 <USB_ActivateEndpoint+0x86>
 801e7b0:	2b02      	cmp	r3, #2
 801e7b2:	d00e      	beq.n	801e7d2 <USB_ActivateEndpoint+0x56>
 801e7b4:	dc25      	bgt.n	801e802 <USB_ActivateEndpoint+0x86>
 801e7b6:	2b00      	cmp	r3, #0
 801e7b8:	d002      	beq.n	801e7c0 <USB_ActivateEndpoint+0x44>
 801e7ba:	2b01      	cmp	r3, #1
 801e7bc:	d018      	beq.n	801e7f0 <USB_ActivateEndpoint+0x74>
 801e7be:	e020      	b.n	801e802 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801e7c0:	226c      	movs	r2, #108	@ 0x6c
 801e7c2:	18bb      	adds	r3, r7, r2
 801e7c4:	18ba      	adds	r2, r7, r2
 801e7c6:	8812      	ldrh	r2, [r2, #0]
 801e7c8:	2180      	movs	r1, #128	@ 0x80
 801e7ca:	0089      	lsls	r1, r1, #2
 801e7cc:	430a      	orrs	r2, r1
 801e7ce:	801a      	strh	r2, [r3, #0]
      break;
 801e7d0:	e01c      	b.n	801e80c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801e7d2:	226c      	movs	r2, #108	@ 0x6c
 801e7d4:	18bb      	adds	r3, r7, r2
 801e7d6:	18ba      	adds	r2, r7, r2
 801e7d8:	8812      	ldrh	r2, [r2, #0]
 801e7da:	801a      	strh	r2, [r3, #0]
      break;
 801e7dc:	e016      	b.n	801e80c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801e7de:	226c      	movs	r2, #108	@ 0x6c
 801e7e0:	18bb      	adds	r3, r7, r2
 801e7e2:	18ba      	adds	r2, r7, r2
 801e7e4:	8812      	ldrh	r2, [r2, #0]
 801e7e6:	21c0      	movs	r1, #192	@ 0xc0
 801e7e8:	00c9      	lsls	r1, r1, #3
 801e7ea:	430a      	orrs	r2, r1
 801e7ec:	801a      	strh	r2, [r3, #0]
      break;
 801e7ee:	e00d      	b.n	801e80c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801e7f0:	226c      	movs	r2, #108	@ 0x6c
 801e7f2:	18bb      	adds	r3, r7, r2
 801e7f4:	18ba      	adds	r2, r7, r2
 801e7f6:	8812      	ldrh	r2, [r2, #0]
 801e7f8:	2180      	movs	r1, #128	@ 0x80
 801e7fa:	00c9      	lsls	r1, r1, #3
 801e7fc:	430a      	orrs	r2, r1
 801e7fe:	801a      	strh	r2, [r3, #0]
      break;
 801e800:	e004      	b.n	801e80c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801e802:	236f      	movs	r3, #111	@ 0x6f
 801e804:	18fb      	adds	r3, r7, r3
 801e806:	2201      	movs	r2, #1
 801e808:	701a      	strb	r2, [r3, #0]
      break;
 801e80a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801e80c:	687a      	ldr	r2, [r7, #4]
 801e80e:	683b      	ldr	r3, [r7, #0]
 801e810:	781b      	ldrb	r3, [r3, #0]
 801e812:	009b      	lsls	r3, r3, #2
 801e814:	18d3      	adds	r3, r2, r3
 801e816:	226c      	movs	r2, #108	@ 0x6c
 801e818:	18ba      	adds	r2, r7, r2
 801e81a:	8812      	ldrh	r2, [r2, #0]
 801e81c:	4985      	ldr	r1, [pc, #532]	@ (801ea34 <USB_ActivateEndpoint+0x2b8>)
 801e81e:	430a      	orrs	r2, r1
 801e820:	b292      	uxth	r2, r2
 801e822:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801e824:	687a      	ldr	r2, [r7, #4]
 801e826:	683b      	ldr	r3, [r7, #0]
 801e828:	781b      	ldrb	r3, [r3, #0]
 801e82a:	009b      	lsls	r3, r3, #2
 801e82c:	18d3      	adds	r3, r2, r3
 801e82e:	881b      	ldrh	r3, [r3, #0]
 801e830:	b29b      	uxth	r3, r3
 801e832:	b21b      	sxth	r3, r3
 801e834:	4a80      	ldr	r2, [pc, #512]	@ (801ea38 <USB_ActivateEndpoint+0x2bc>)
 801e836:	4013      	ands	r3, r2
 801e838:	b21a      	sxth	r2, r3
 801e83a:	683b      	ldr	r3, [r7, #0]
 801e83c:	781b      	ldrb	r3, [r3, #0]
 801e83e:	b21b      	sxth	r3, r3
 801e840:	4313      	orrs	r3, r2
 801e842:	b21a      	sxth	r2, r3
 801e844:	2166      	movs	r1, #102	@ 0x66
 801e846:	187b      	adds	r3, r7, r1
 801e848:	801a      	strh	r2, [r3, #0]
 801e84a:	687a      	ldr	r2, [r7, #4]
 801e84c:	683b      	ldr	r3, [r7, #0]
 801e84e:	781b      	ldrb	r3, [r3, #0]
 801e850:	009b      	lsls	r3, r3, #2
 801e852:	18d3      	adds	r3, r2, r3
 801e854:	187a      	adds	r2, r7, r1
 801e856:	8812      	ldrh	r2, [r2, #0]
 801e858:	4976      	ldr	r1, [pc, #472]	@ (801ea34 <USB_ActivateEndpoint+0x2b8>)
 801e85a:	430a      	orrs	r2, r1
 801e85c:	b292      	uxth	r2, r2
 801e85e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801e860:	683b      	ldr	r3, [r7, #0]
 801e862:	7b1b      	ldrb	r3, [r3, #12]
 801e864:	2b00      	cmp	r3, #0
 801e866:	d000      	beq.n	801e86a <USB_ActivateEndpoint+0xee>
 801e868:	e178      	b.n	801eb5c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801e86a:	683b      	ldr	r3, [r7, #0]
 801e86c:	785b      	ldrb	r3, [r3, #1]
 801e86e:	2b00      	cmp	r3, #0
 801e870:	d100      	bne.n	801e874 <USB_ActivateEndpoint+0xf8>
 801e872:	e07a      	b.n	801e96a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	61bb      	str	r3, [r7, #24]
 801e878:	687b      	ldr	r3, [r7, #4]
 801e87a:	2250      	movs	r2, #80	@ 0x50
 801e87c:	5a9b      	ldrh	r3, [r3, r2]
 801e87e:	b29b      	uxth	r3, r3
 801e880:	001a      	movs	r2, r3
 801e882:	69bb      	ldr	r3, [r7, #24]
 801e884:	189b      	adds	r3, r3, r2
 801e886:	61bb      	str	r3, [r7, #24]
 801e888:	683b      	ldr	r3, [r7, #0]
 801e88a:	781b      	ldrb	r3, [r3, #0]
 801e88c:	00da      	lsls	r2, r3, #3
 801e88e:	69bb      	ldr	r3, [r7, #24]
 801e890:	18d3      	adds	r3, r2, r3
 801e892:	2280      	movs	r2, #128	@ 0x80
 801e894:	00d2      	lsls	r2, r2, #3
 801e896:	4694      	mov	ip, r2
 801e898:	4463      	add	r3, ip
 801e89a:	617b      	str	r3, [r7, #20]
 801e89c:	683b      	ldr	r3, [r7, #0]
 801e89e:	88db      	ldrh	r3, [r3, #6]
 801e8a0:	085b      	lsrs	r3, r3, #1
 801e8a2:	b29b      	uxth	r3, r3
 801e8a4:	18db      	adds	r3, r3, r3
 801e8a6:	b29a      	uxth	r2, r3
 801e8a8:	697b      	ldr	r3, [r7, #20]
 801e8aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e8ac:	687a      	ldr	r2, [r7, #4]
 801e8ae:	683b      	ldr	r3, [r7, #0]
 801e8b0:	781b      	ldrb	r3, [r3, #0]
 801e8b2:	009b      	lsls	r3, r3, #2
 801e8b4:	18d2      	adds	r2, r2, r3
 801e8b6:	2112      	movs	r1, #18
 801e8b8:	187b      	adds	r3, r7, r1
 801e8ba:	8812      	ldrh	r2, [r2, #0]
 801e8bc:	801a      	strh	r2, [r3, #0]
 801e8be:	187b      	adds	r3, r7, r1
 801e8c0:	881b      	ldrh	r3, [r3, #0]
 801e8c2:	2240      	movs	r2, #64	@ 0x40
 801e8c4:	4013      	ands	r3, r2
 801e8c6:	d016      	beq.n	801e8f6 <USB_ActivateEndpoint+0x17a>
 801e8c8:	687a      	ldr	r2, [r7, #4]
 801e8ca:	683b      	ldr	r3, [r7, #0]
 801e8cc:	781b      	ldrb	r3, [r3, #0]
 801e8ce:	009b      	lsls	r3, r3, #2
 801e8d0:	18d3      	adds	r3, r2, r3
 801e8d2:	881b      	ldrh	r3, [r3, #0]
 801e8d4:	b29a      	uxth	r2, r3
 801e8d6:	2010      	movs	r0, #16
 801e8d8:	183b      	adds	r3, r7, r0
 801e8da:	4957      	ldr	r1, [pc, #348]	@ (801ea38 <USB_ActivateEndpoint+0x2bc>)
 801e8dc:	400a      	ands	r2, r1
 801e8de:	801a      	strh	r2, [r3, #0]
 801e8e0:	687a      	ldr	r2, [r7, #4]
 801e8e2:	683b      	ldr	r3, [r7, #0]
 801e8e4:	781b      	ldrb	r3, [r3, #0]
 801e8e6:	009b      	lsls	r3, r3, #2
 801e8e8:	18d3      	adds	r3, r2, r3
 801e8ea:	183a      	adds	r2, r7, r0
 801e8ec:	8812      	ldrh	r2, [r2, #0]
 801e8ee:	4953      	ldr	r1, [pc, #332]	@ (801ea3c <USB_ActivateEndpoint+0x2c0>)
 801e8f0:	430a      	orrs	r2, r1
 801e8f2:	b292      	uxth	r2, r2
 801e8f4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e8f6:	683b      	ldr	r3, [r7, #0]
 801e8f8:	78db      	ldrb	r3, [r3, #3]
 801e8fa:	2b01      	cmp	r3, #1
 801e8fc:	d01d      	beq.n	801e93a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801e8fe:	687a      	ldr	r2, [r7, #4]
 801e900:	683b      	ldr	r3, [r7, #0]
 801e902:	781b      	ldrb	r3, [r3, #0]
 801e904:	009b      	lsls	r3, r3, #2
 801e906:	18d3      	adds	r3, r2, r3
 801e908:	881b      	ldrh	r3, [r3, #0]
 801e90a:	b29a      	uxth	r2, r3
 801e90c:	200c      	movs	r0, #12
 801e90e:	183b      	adds	r3, r7, r0
 801e910:	494b      	ldr	r1, [pc, #300]	@ (801ea40 <USB_ActivateEndpoint+0x2c4>)
 801e912:	400a      	ands	r2, r1
 801e914:	801a      	strh	r2, [r3, #0]
 801e916:	183b      	adds	r3, r7, r0
 801e918:	183a      	adds	r2, r7, r0
 801e91a:	8812      	ldrh	r2, [r2, #0]
 801e91c:	2120      	movs	r1, #32
 801e91e:	404a      	eors	r2, r1
 801e920:	801a      	strh	r2, [r3, #0]
 801e922:	687a      	ldr	r2, [r7, #4]
 801e924:	683b      	ldr	r3, [r7, #0]
 801e926:	781b      	ldrb	r3, [r3, #0]
 801e928:	009b      	lsls	r3, r3, #2
 801e92a:	18d3      	adds	r3, r2, r3
 801e92c:	183a      	adds	r2, r7, r0
 801e92e:	8812      	ldrh	r2, [r2, #0]
 801e930:	4940      	ldr	r1, [pc, #256]	@ (801ea34 <USB_ActivateEndpoint+0x2b8>)
 801e932:	430a      	orrs	r2, r1
 801e934:	b292      	uxth	r2, r2
 801e936:	801a      	strh	r2, [r3, #0]
 801e938:	e2b4      	b.n	801eea4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e93a:	687a      	ldr	r2, [r7, #4]
 801e93c:	683b      	ldr	r3, [r7, #0]
 801e93e:	781b      	ldrb	r3, [r3, #0]
 801e940:	009b      	lsls	r3, r3, #2
 801e942:	18d3      	adds	r3, r2, r3
 801e944:	881b      	ldrh	r3, [r3, #0]
 801e946:	b29a      	uxth	r2, r3
 801e948:	200e      	movs	r0, #14
 801e94a:	183b      	adds	r3, r7, r0
 801e94c:	493c      	ldr	r1, [pc, #240]	@ (801ea40 <USB_ActivateEndpoint+0x2c4>)
 801e94e:	400a      	ands	r2, r1
 801e950:	801a      	strh	r2, [r3, #0]
 801e952:	687a      	ldr	r2, [r7, #4]
 801e954:	683b      	ldr	r3, [r7, #0]
 801e956:	781b      	ldrb	r3, [r3, #0]
 801e958:	009b      	lsls	r3, r3, #2
 801e95a:	18d3      	adds	r3, r2, r3
 801e95c:	183a      	adds	r2, r7, r0
 801e95e:	8812      	ldrh	r2, [r2, #0]
 801e960:	4934      	ldr	r1, [pc, #208]	@ (801ea34 <USB_ActivateEndpoint+0x2b8>)
 801e962:	430a      	orrs	r2, r1
 801e964:	b292      	uxth	r2, r2
 801e966:	801a      	strh	r2, [r3, #0]
 801e968:	e29c      	b.n	801eea4 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	633b      	str	r3, [r7, #48]	@ 0x30
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	2250      	movs	r2, #80	@ 0x50
 801e972:	5a9b      	ldrh	r3, [r3, r2]
 801e974:	b29b      	uxth	r3, r3
 801e976:	001a      	movs	r2, r3
 801e978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e97a:	189b      	adds	r3, r3, r2
 801e97c:	633b      	str	r3, [r7, #48]	@ 0x30
 801e97e:	683b      	ldr	r3, [r7, #0]
 801e980:	781b      	ldrb	r3, [r3, #0]
 801e982:	00da      	lsls	r2, r3, #3
 801e984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e986:	18d3      	adds	r3, r2, r3
 801e988:	4a2e      	ldr	r2, [pc, #184]	@ (801ea44 <USB_ActivateEndpoint+0x2c8>)
 801e98a:	4694      	mov	ip, r2
 801e98c:	4463      	add	r3, ip
 801e98e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e990:	683b      	ldr	r3, [r7, #0]
 801e992:	88db      	ldrh	r3, [r3, #6]
 801e994:	085b      	lsrs	r3, r3, #1
 801e996:	b29b      	uxth	r3, r3
 801e998:	18db      	adds	r3, r3, r3
 801e99a:	b29a      	uxth	r2, r3
 801e99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e99e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e9a4:	687b      	ldr	r3, [r7, #4]
 801e9a6:	2250      	movs	r2, #80	@ 0x50
 801e9a8:	5a9b      	ldrh	r3, [r3, r2]
 801e9aa:	b29b      	uxth	r3, r3
 801e9ac:	001a      	movs	r2, r3
 801e9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9b0:	189b      	adds	r3, r3, r2
 801e9b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e9b4:	683b      	ldr	r3, [r7, #0]
 801e9b6:	781b      	ldrb	r3, [r3, #0]
 801e9b8:	00da      	lsls	r2, r3, #3
 801e9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9bc:	18d3      	adds	r3, r2, r3
 801e9be:	4a22      	ldr	r2, [pc, #136]	@ (801ea48 <USB_ActivateEndpoint+0x2cc>)
 801e9c0:	4694      	mov	ip, r2
 801e9c2:	4463      	add	r3, ip
 801e9c4:	627b      	str	r3, [r7, #36]	@ 0x24
 801e9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9c8:	881b      	ldrh	r3, [r3, #0]
 801e9ca:	b29b      	uxth	r3, r3
 801e9cc:	059b      	lsls	r3, r3, #22
 801e9ce:	0d9b      	lsrs	r3, r3, #22
 801e9d0:	b29a      	uxth	r2, r3
 801e9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9d4:	801a      	strh	r2, [r3, #0]
 801e9d6:	683b      	ldr	r3, [r7, #0]
 801e9d8:	691b      	ldr	r3, [r3, #16]
 801e9da:	2b3e      	cmp	r3, #62	@ 0x3e
 801e9dc:	d91a      	bls.n	801ea14 <USB_ActivateEndpoint+0x298>
 801e9de:	683b      	ldr	r3, [r7, #0]
 801e9e0:	691b      	ldr	r3, [r3, #16]
 801e9e2:	095b      	lsrs	r3, r3, #5
 801e9e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e9e6:	683b      	ldr	r3, [r7, #0]
 801e9e8:	691b      	ldr	r3, [r3, #16]
 801e9ea:	221f      	movs	r2, #31
 801e9ec:	4013      	ands	r3, r2
 801e9ee:	d102      	bne.n	801e9f6 <USB_ActivateEndpoint+0x27a>
 801e9f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e9f2:	3b01      	subs	r3, #1
 801e9f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9f8:	881b      	ldrh	r3, [r3, #0]
 801e9fa:	b29a      	uxth	r2, r3
 801e9fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e9fe:	b29b      	uxth	r3, r3
 801ea00:	029b      	lsls	r3, r3, #10
 801ea02:	b29b      	uxth	r3, r3
 801ea04:	4313      	orrs	r3, r2
 801ea06:	b29b      	uxth	r3, r3
 801ea08:	4a10      	ldr	r2, [pc, #64]	@ (801ea4c <USB_ActivateEndpoint+0x2d0>)
 801ea0a:	4313      	orrs	r3, r2
 801ea0c:	b29a      	uxth	r2, r3
 801ea0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea10:	801a      	strh	r2, [r3, #0]
 801ea12:	e034      	b.n	801ea7e <USB_ActivateEndpoint+0x302>
 801ea14:	683b      	ldr	r3, [r7, #0]
 801ea16:	691b      	ldr	r3, [r3, #16]
 801ea18:	2b00      	cmp	r3, #0
 801ea1a:	d119      	bne.n	801ea50 <USB_ActivateEndpoint+0x2d4>
 801ea1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea1e:	881b      	ldrh	r3, [r3, #0]
 801ea20:	b29b      	uxth	r3, r3
 801ea22:	4a0a      	ldr	r2, [pc, #40]	@ (801ea4c <USB_ActivateEndpoint+0x2d0>)
 801ea24:	4313      	orrs	r3, r2
 801ea26:	b29a      	uxth	r2, r3
 801ea28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea2a:	801a      	strh	r2, [r3, #0]
 801ea2c:	e027      	b.n	801ea7e <USB_ActivateEndpoint+0x302>
 801ea2e:	46c0      	nop			@ (mov r8, r8)
 801ea30:	ffff898f 	.word	0xffff898f
 801ea34:	ffff8080 	.word	0xffff8080
 801ea38:	ffff8f8f 	.word	0xffff8f8f
 801ea3c:	ffff80c0 	.word	0xffff80c0
 801ea40:	ffff8fbf 	.word	0xffff8fbf
 801ea44:	00000404 	.word	0x00000404
 801ea48:	00000406 	.word	0x00000406
 801ea4c:	ffff8000 	.word	0xffff8000
 801ea50:	683b      	ldr	r3, [r7, #0]
 801ea52:	691b      	ldr	r3, [r3, #16]
 801ea54:	085b      	lsrs	r3, r3, #1
 801ea56:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ea58:	683b      	ldr	r3, [r7, #0]
 801ea5a:	691b      	ldr	r3, [r3, #16]
 801ea5c:	2201      	movs	r2, #1
 801ea5e:	4013      	ands	r3, r2
 801ea60:	d002      	beq.n	801ea68 <USB_ActivateEndpoint+0x2ec>
 801ea62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ea64:	3301      	adds	r3, #1
 801ea66:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ea68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea6a:	881b      	ldrh	r3, [r3, #0]
 801ea6c:	b29a      	uxth	r2, r3
 801ea6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ea70:	b29b      	uxth	r3, r3
 801ea72:	029b      	lsls	r3, r3, #10
 801ea74:	b29b      	uxth	r3, r3
 801ea76:	4313      	orrs	r3, r2
 801ea78:	b29a      	uxth	r2, r3
 801ea7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ea7e:	687a      	ldr	r2, [r7, #4]
 801ea80:	683b      	ldr	r3, [r7, #0]
 801ea82:	781b      	ldrb	r3, [r3, #0]
 801ea84:	009b      	lsls	r3, r3, #2
 801ea86:	18d2      	adds	r2, r2, r3
 801ea88:	2122      	movs	r1, #34	@ 0x22
 801ea8a:	187b      	adds	r3, r7, r1
 801ea8c:	8812      	ldrh	r2, [r2, #0]
 801ea8e:	801a      	strh	r2, [r3, #0]
 801ea90:	187b      	adds	r3, r7, r1
 801ea92:	881a      	ldrh	r2, [r3, #0]
 801ea94:	2380      	movs	r3, #128	@ 0x80
 801ea96:	01db      	lsls	r3, r3, #7
 801ea98:	4013      	ands	r3, r2
 801ea9a:	d016      	beq.n	801eaca <USB_ActivateEndpoint+0x34e>
 801ea9c:	687a      	ldr	r2, [r7, #4]
 801ea9e:	683b      	ldr	r3, [r7, #0]
 801eaa0:	781b      	ldrb	r3, [r3, #0]
 801eaa2:	009b      	lsls	r3, r3, #2
 801eaa4:	18d3      	adds	r3, r2, r3
 801eaa6:	881b      	ldrh	r3, [r3, #0]
 801eaa8:	b29a      	uxth	r2, r3
 801eaaa:	2020      	movs	r0, #32
 801eaac:	183b      	adds	r3, r7, r0
 801eaae:	49dd      	ldr	r1, [pc, #884]	@ (801ee24 <USB_ActivateEndpoint+0x6a8>)
 801eab0:	400a      	ands	r2, r1
 801eab2:	801a      	strh	r2, [r3, #0]
 801eab4:	687a      	ldr	r2, [r7, #4]
 801eab6:	683b      	ldr	r3, [r7, #0]
 801eab8:	781b      	ldrb	r3, [r3, #0]
 801eaba:	009b      	lsls	r3, r3, #2
 801eabc:	18d3      	adds	r3, r2, r3
 801eabe:	183a      	adds	r2, r7, r0
 801eac0:	8812      	ldrh	r2, [r2, #0]
 801eac2:	49d9      	ldr	r1, [pc, #868]	@ (801ee28 <USB_ActivateEndpoint+0x6ac>)
 801eac4:	430a      	orrs	r2, r1
 801eac6:	b292      	uxth	r2, r2
 801eac8:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801eaca:	683b      	ldr	r3, [r7, #0]
 801eacc:	781b      	ldrb	r3, [r3, #0]
 801eace:	2b00      	cmp	r3, #0
 801ead0:	d125      	bne.n	801eb1e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ead2:	687a      	ldr	r2, [r7, #4]
 801ead4:	683b      	ldr	r3, [r7, #0]
 801ead6:	781b      	ldrb	r3, [r3, #0]
 801ead8:	009b      	lsls	r3, r3, #2
 801eada:	18d3      	adds	r3, r2, r3
 801eadc:	881b      	ldrh	r3, [r3, #0]
 801eade:	b29a      	uxth	r2, r3
 801eae0:	201c      	movs	r0, #28
 801eae2:	183b      	adds	r3, r7, r0
 801eae4:	49d1      	ldr	r1, [pc, #836]	@ (801ee2c <USB_ActivateEndpoint+0x6b0>)
 801eae6:	400a      	ands	r2, r1
 801eae8:	801a      	strh	r2, [r3, #0]
 801eaea:	183b      	adds	r3, r7, r0
 801eaec:	183a      	adds	r2, r7, r0
 801eaee:	8812      	ldrh	r2, [r2, #0]
 801eaf0:	2180      	movs	r1, #128	@ 0x80
 801eaf2:	0149      	lsls	r1, r1, #5
 801eaf4:	404a      	eors	r2, r1
 801eaf6:	801a      	strh	r2, [r3, #0]
 801eaf8:	183b      	adds	r3, r7, r0
 801eafa:	183a      	adds	r2, r7, r0
 801eafc:	8812      	ldrh	r2, [r2, #0]
 801eafe:	2180      	movs	r1, #128	@ 0x80
 801eb00:	0189      	lsls	r1, r1, #6
 801eb02:	404a      	eors	r2, r1
 801eb04:	801a      	strh	r2, [r3, #0]
 801eb06:	687a      	ldr	r2, [r7, #4]
 801eb08:	683b      	ldr	r3, [r7, #0]
 801eb0a:	781b      	ldrb	r3, [r3, #0]
 801eb0c:	009b      	lsls	r3, r3, #2
 801eb0e:	18d3      	adds	r3, r2, r3
 801eb10:	183a      	adds	r2, r7, r0
 801eb12:	8812      	ldrh	r2, [r2, #0]
 801eb14:	49c6      	ldr	r1, [pc, #792]	@ (801ee30 <USB_ActivateEndpoint+0x6b4>)
 801eb16:	430a      	orrs	r2, r1
 801eb18:	b292      	uxth	r2, r2
 801eb1a:	801a      	strh	r2, [r3, #0]
 801eb1c:	e1c2      	b.n	801eea4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801eb1e:	687a      	ldr	r2, [r7, #4]
 801eb20:	683b      	ldr	r3, [r7, #0]
 801eb22:	781b      	ldrb	r3, [r3, #0]
 801eb24:	009b      	lsls	r3, r3, #2
 801eb26:	18d3      	adds	r3, r2, r3
 801eb28:	881b      	ldrh	r3, [r3, #0]
 801eb2a:	b29a      	uxth	r2, r3
 801eb2c:	201e      	movs	r0, #30
 801eb2e:	183b      	adds	r3, r7, r0
 801eb30:	49be      	ldr	r1, [pc, #760]	@ (801ee2c <USB_ActivateEndpoint+0x6b0>)
 801eb32:	400a      	ands	r2, r1
 801eb34:	801a      	strh	r2, [r3, #0]
 801eb36:	183b      	adds	r3, r7, r0
 801eb38:	183a      	adds	r2, r7, r0
 801eb3a:	8812      	ldrh	r2, [r2, #0]
 801eb3c:	2180      	movs	r1, #128	@ 0x80
 801eb3e:	0189      	lsls	r1, r1, #6
 801eb40:	404a      	eors	r2, r1
 801eb42:	801a      	strh	r2, [r3, #0]
 801eb44:	687a      	ldr	r2, [r7, #4]
 801eb46:	683b      	ldr	r3, [r7, #0]
 801eb48:	781b      	ldrb	r3, [r3, #0]
 801eb4a:	009b      	lsls	r3, r3, #2
 801eb4c:	18d3      	adds	r3, r2, r3
 801eb4e:	183a      	adds	r2, r7, r0
 801eb50:	8812      	ldrh	r2, [r2, #0]
 801eb52:	49b7      	ldr	r1, [pc, #732]	@ (801ee30 <USB_ActivateEndpoint+0x6b4>)
 801eb54:	430a      	orrs	r2, r1
 801eb56:	b292      	uxth	r2, r2
 801eb58:	801a      	strh	r2, [r3, #0]
 801eb5a:	e1a3      	b.n	801eea4 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801eb5c:	683b      	ldr	r3, [r7, #0]
 801eb5e:	78db      	ldrb	r3, [r3, #3]
 801eb60:	2b02      	cmp	r3, #2
 801eb62:	d117      	bne.n	801eb94 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801eb64:	687a      	ldr	r2, [r7, #4]
 801eb66:	683b      	ldr	r3, [r7, #0]
 801eb68:	781b      	ldrb	r3, [r3, #0]
 801eb6a:	009b      	lsls	r3, r3, #2
 801eb6c:	18d3      	adds	r3, r2, r3
 801eb6e:	881b      	ldrh	r3, [r3, #0]
 801eb70:	b29a      	uxth	r2, r3
 801eb72:	2062      	movs	r0, #98	@ 0x62
 801eb74:	183b      	adds	r3, r7, r0
 801eb76:	49ab      	ldr	r1, [pc, #684]	@ (801ee24 <USB_ActivateEndpoint+0x6a8>)
 801eb78:	400a      	ands	r2, r1
 801eb7a:	801a      	strh	r2, [r3, #0]
 801eb7c:	687a      	ldr	r2, [r7, #4]
 801eb7e:	683b      	ldr	r3, [r7, #0]
 801eb80:	781b      	ldrb	r3, [r3, #0]
 801eb82:	009b      	lsls	r3, r3, #2
 801eb84:	18d3      	adds	r3, r2, r3
 801eb86:	183a      	adds	r2, r7, r0
 801eb88:	8812      	ldrh	r2, [r2, #0]
 801eb8a:	49aa      	ldr	r1, [pc, #680]	@ (801ee34 <USB_ActivateEndpoint+0x6b8>)
 801eb8c:	430a      	orrs	r2, r1
 801eb8e:	b292      	uxth	r2, r2
 801eb90:	801a      	strh	r2, [r3, #0]
 801eb92:	e016      	b.n	801ebc2 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801eb94:	687a      	ldr	r2, [r7, #4]
 801eb96:	683b      	ldr	r3, [r7, #0]
 801eb98:	781b      	ldrb	r3, [r3, #0]
 801eb9a:	009b      	lsls	r3, r3, #2
 801eb9c:	18d3      	adds	r3, r2, r3
 801eb9e:	881b      	ldrh	r3, [r3, #0]
 801eba0:	b29a      	uxth	r2, r3
 801eba2:	2064      	movs	r0, #100	@ 0x64
 801eba4:	183b      	adds	r3, r7, r0
 801eba6:	49a4      	ldr	r1, [pc, #656]	@ (801ee38 <USB_ActivateEndpoint+0x6bc>)
 801eba8:	400a      	ands	r2, r1
 801ebaa:	801a      	strh	r2, [r3, #0]
 801ebac:	687a      	ldr	r2, [r7, #4]
 801ebae:	683b      	ldr	r3, [r7, #0]
 801ebb0:	781b      	ldrb	r3, [r3, #0]
 801ebb2:	009b      	lsls	r3, r3, #2
 801ebb4:	18d3      	adds	r3, r2, r3
 801ebb6:	183a      	adds	r2, r7, r0
 801ebb8:	8812      	ldrh	r2, [r2, #0]
 801ebba:	499d      	ldr	r1, [pc, #628]	@ (801ee30 <USB_ActivateEndpoint+0x6b4>)
 801ebbc:	430a      	orrs	r2, r1
 801ebbe:	b292      	uxth	r2, r2
 801ebc0:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801ebc2:	687b      	ldr	r3, [r7, #4]
 801ebc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ebc6:	687b      	ldr	r3, [r7, #4]
 801ebc8:	2250      	movs	r2, #80	@ 0x50
 801ebca:	5a9b      	ldrh	r3, [r3, r2]
 801ebcc:	b29b      	uxth	r3, r3
 801ebce:	001a      	movs	r2, r3
 801ebd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ebd2:	189b      	adds	r3, r3, r2
 801ebd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ebd6:	683b      	ldr	r3, [r7, #0]
 801ebd8:	781b      	ldrb	r3, [r3, #0]
 801ebda:	00da      	lsls	r2, r3, #3
 801ebdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ebde:	18d3      	adds	r3, r2, r3
 801ebe0:	2280      	movs	r2, #128	@ 0x80
 801ebe2:	00d2      	lsls	r2, r2, #3
 801ebe4:	4694      	mov	ip, r2
 801ebe6:	4463      	add	r3, ip
 801ebe8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ebea:	683b      	ldr	r3, [r7, #0]
 801ebec:	891b      	ldrh	r3, [r3, #8]
 801ebee:	085b      	lsrs	r3, r3, #1
 801ebf0:	b29b      	uxth	r3, r3
 801ebf2:	18db      	adds	r3, r3, r3
 801ebf4:	b29a      	uxth	r2, r3
 801ebf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ebf8:	801a      	strh	r2, [r3, #0]
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	657b      	str	r3, [r7, #84]	@ 0x54
 801ebfe:	687b      	ldr	r3, [r7, #4]
 801ec00:	2250      	movs	r2, #80	@ 0x50
 801ec02:	5a9b      	ldrh	r3, [r3, r2]
 801ec04:	b29b      	uxth	r3, r3
 801ec06:	001a      	movs	r2, r3
 801ec08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ec0a:	189b      	adds	r3, r3, r2
 801ec0c:	657b      	str	r3, [r7, #84]	@ 0x54
 801ec0e:	683b      	ldr	r3, [r7, #0]
 801ec10:	781b      	ldrb	r3, [r3, #0]
 801ec12:	00da      	lsls	r2, r3, #3
 801ec14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ec16:	18d3      	adds	r3, r2, r3
 801ec18:	4a88      	ldr	r2, [pc, #544]	@ (801ee3c <USB_ActivateEndpoint+0x6c0>)
 801ec1a:	4694      	mov	ip, r2
 801ec1c:	4463      	add	r3, ip
 801ec1e:	653b      	str	r3, [r7, #80]	@ 0x50
 801ec20:	683b      	ldr	r3, [r7, #0]
 801ec22:	895b      	ldrh	r3, [r3, #10]
 801ec24:	085b      	lsrs	r3, r3, #1
 801ec26:	b29b      	uxth	r3, r3
 801ec28:	18db      	adds	r3, r3, r3
 801ec2a:	b29a      	uxth	r2, r3
 801ec2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ec2e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801ec30:	683b      	ldr	r3, [r7, #0]
 801ec32:	785b      	ldrb	r3, [r3, #1]
 801ec34:	2b00      	cmp	r3, #0
 801ec36:	d000      	beq.n	801ec3a <USB_ActivateEndpoint+0x4be>
 801ec38:	e087      	b.n	801ed4a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ec3a:	687a      	ldr	r2, [r7, #4]
 801ec3c:	683b      	ldr	r3, [r7, #0]
 801ec3e:	781b      	ldrb	r3, [r3, #0]
 801ec40:	009b      	lsls	r3, r3, #2
 801ec42:	18d2      	adds	r2, r2, r3
 801ec44:	2140      	movs	r1, #64	@ 0x40
 801ec46:	187b      	adds	r3, r7, r1
 801ec48:	8812      	ldrh	r2, [r2, #0]
 801ec4a:	801a      	strh	r2, [r3, #0]
 801ec4c:	187b      	adds	r3, r7, r1
 801ec4e:	881a      	ldrh	r2, [r3, #0]
 801ec50:	2380      	movs	r3, #128	@ 0x80
 801ec52:	01db      	lsls	r3, r3, #7
 801ec54:	4013      	ands	r3, r2
 801ec56:	d016      	beq.n	801ec86 <USB_ActivateEndpoint+0x50a>
 801ec58:	687a      	ldr	r2, [r7, #4]
 801ec5a:	683b      	ldr	r3, [r7, #0]
 801ec5c:	781b      	ldrb	r3, [r3, #0]
 801ec5e:	009b      	lsls	r3, r3, #2
 801ec60:	18d3      	adds	r3, r2, r3
 801ec62:	881b      	ldrh	r3, [r3, #0]
 801ec64:	b29a      	uxth	r2, r3
 801ec66:	203e      	movs	r0, #62	@ 0x3e
 801ec68:	183b      	adds	r3, r7, r0
 801ec6a:	496e      	ldr	r1, [pc, #440]	@ (801ee24 <USB_ActivateEndpoint+0x6a8>)
 801ec6c:	400a      	ands	r2, r1
 801ec6e:	801a      	strh	r2, [r3, #0]
 801ec70:	687a      	ldr	r2, [r7, #4]
 801ec72:	683b      	ldr	r3, [r7, #0]
 801ec74:	781b      	ldrb	r3, [r3, #0]
 801ec76:	009b      	lsls	r3, r3, #2
 801ec78:	18d3      	adds	r3, r2, r3
 801ec7a:	183a      	adds	r2, r7, r0
 801ec7c:	8812      	ldrh	r2, [r2, #0]
 801ec7e:	496a      	ldr	r1, [pc, #424]	@ (801ee28 <USB_ActivateEndpoint+0x6ac>)
 801ec80:	430a      	orrs	r2, r1
 801ec82:	b292      	uxth	r2, r2
 801ec84:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ec86:	687a      	ldr	r2, [r7, #4]
 801ec88:	683b      	ldr	r3, [r7, #0]
 801ec8a:	781b      	ldrb	r3, [r3, #0]
 801ec8c:	009b      	lsls	r3, r3, #2
 801ec8e:	18d2      	adds	r2, r2, r3
 801ec90:	213c      	movs	r1, #60	@ 0x3c
 801ec92:	187b      	adds	r3, r7, r1
 801ec94:	8812      	ldrh	r2, [r2, #0]
 801ec96:	801a      	strh	r2, [r3, #0]
 801ec98:	187b      	adds	r3, r7, r1
 801ec9a:	881b      	ldrh	r3, [r3, #0]
 801ec9c:	2240      	movs	r2, #64	@ 0x40
 801ec9e:	4013      	ands	r3, r2
 801eca0:	d016      	beq.n	801ecd0 <USB_ActivateEndpoint+0x554>
 801eca2:	687a      	ldr	r2, [r7, #4]
 801eca4:	683b      	ldr	r3, [r7, #0]
 801eca6:	781b      	ldrb	r3, [r3, #0]
 801eca8:	009b      	lsls	r3, r3, #2
 801ecaa:	18d3      	adds	r3, r2, r3
 801ecac:	881b      	ldrh	r3, [r3, #0]
 801ecae:	b29a      	uxth	r2, r3
 801ecb0:	203a      	movs	r0, #58	@ 0x3a
 801ecb2:	183b      	adds	r3, r7, r0
 801ecb4:	495b      	ldr	r1, [pc, #364]	@ (801ee24 <USB_ActivateEndpoint+0x6a8>)
 801ecb6:	400a      	ands	r2, r1
 801ecb8:	801a      	strh	r2, [r3, #0]
 801ecba:	687a      	ldr	r2, [r7, #4]
 801ecbc:	683b      	ldr	r3, [r7, #0]
 801ecbe:	781b      	ldrb	r3, [r3, #0]
 801ecc0:	009b      	lsls	r3, r3, #2
 801ecc2:	18d3      	adds	r3, r2, r3
 801ecc4:	183a      	adds	r2, r7, r0
 801ecc6:	8812      	ldrh	r2, [r2, #0]
 801ecc8:	495d      	ldr	r1, [pc, #372]	@ (801ee40 <USB_ActivateEndpoint+0x6c4>)
 801ecca:	430a      	orrs	r2, r1
 801eccc:	b292      	uxth	r2, r2
 801ecce:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ecd0:	687a      	ldr	r2, [r7, #4]
 801ecd2:	683b      	ldr	r3, [r7, #0]
 801ecd4:	781b      	ldrb	r3, [r3, #0]
 801ecd6:	009b      	lsls	r3, r3, #2
 801ecd8:	18d3      	adds	r3, r2, r3
 801ecda:	881b      	ldrh	r3, [r3, #0]
 801ecdc:	b29a      	uxth	r2, r3
 801ecde:	2038      	movs	r0, #56	@ 0x38
 801ece0:	183b      	adds	r3, r7, r0
 801ece2:	4952      	ldr	r1, [pc, #328]	@ (801ee2c <USB_ActivateEndpoint+0x6b0>)
 801ece4:	400a      	ands	r2, r1
 801ece6:	801a      	strh	r2, [r3, #0]
 801ece8:	183b      	adds	r3, r7, r0
 801ecea:	183a      	adds	r2, r7, r0
 801ecec:	8812      	ldrh	r2, [r2, #0]
 801ecee:	2180      	movs	r1, #128	@ 0x80
 801ecf0:	0149      	lsls	r1, r1, #5
 801ecf2:	404a      	eors	r2, r1
 801ecf4:	801a      	strh	r2, [r3, #0]
 801ecf6:	183b      	adds	r3, r7, r0
 801ecf8:	183a      	adds	r2, r7, r0
 801ecfa:	8812      	ldrh	r2, [r2, #0]
 801ecfc:	2180      	movs	r1, #128	@ 0x80
 801ecfe:	0189      	lsls	r1, r1, #6
 801ed00:	404a      	eors	r2, r1
 801ed02:	801a      	strh	r2, [r3, #0]
 801ed04:	687a      	ldr	r2, [r7, #4]
 801ed06:	683b      	ldr	r3, [r7, #0]
 801ed08:	781b      	ldrb	r3, [r3, #0]
 801ed0a:	009b      	lsls	r3, r3, #2
 801ed0c:	18d3      	adds	r3, r2, r3
 801ed0e:	183a      	adds	r2, r7, r0
 801ed10:	8812      	ldrh	r2, [r2, #0]
 801ed12:	4947      	ldr	r1, [pc, #284]	@ (801ee30 <USB_ActivateEndpoint+0x6b4>)
 801ed14:	430a      	orrs	r2, r1
 801ed16:	b292      	uxth	r2, r2
 801ed18:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ed1a:	687a      	ldr	r2, [r7, #4]
 801ed1c:	683b      	ldr	r3, [r7, #0]
 801ed1e:	781b      	ldrb	r3, [r3, #0]
 801ed20:	009b      	lsls	r3, r3, #2
 801ed22:	18d3      	adds	r3, r2, r3
 801ed24:	881b      	ldrh	r3, [r3, #0]
 801ed26:	b29a      	uxth	r2, r3
 801ed28:	2036      	movs	r0, #54	@ 0x36
 801ed2a:	183b      	adds	r3, r7, r0
 801ed2c:	4945      	ldr	r1, [pc, #276]	@ (801ee44 <USB_ActivateEndpoint+0x6c8>)
 801ed2e:	400a      	ands	r2, r1
 801ed30:	801a      	strh	r2, [r3, #0]
 801ed32:	687a      	ldr	r2, [r7, #4]
 801ed34:	683b      	ldr	r3, [r7, #0]
 801ed36:	781b      	ldrb	r3, [r3, #0]
 801ed38:	009b      	lsls	r3, r3, #2
 801ed3a:	18d3      	adds	r3, r2, r3
 801ed3c:	183a      	adds	r2, r7, r0
 801ed3e:	8812      	ldrh	r2, [r2, #0]
 801ed40:	493b      	ldr	r1, [pc, #236]	@ (801ee30 <USB_ActivateEndpoint+0x6b4>)
 801ed42:	430a      	orrs	r2, r1
 801ed44:	b292      	uxth	r2, r2
 801ed46:	801a      	strh	r2, [r3, #0]
 801ed48:	e0ac      	b.n	801eea4 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ed4a:	687a      	ldr	r2, [r7, #4]
 801ed4c:	683b      	ldr	r3, [r7, #0]
 801ed4e:	781b      	ldrb	r3, [r3, #0]
 801ed50:	009b      	lsls	r3, r3, #2
 801ed52:	18d2      	adds	r2, r2, r3
 801ed54:	214e      	movs	r1, #78	@ 0x4e
 801ed56:	187b      	adds	r3, r7, r1
 801ed58:	8812      	ldrh	r2, [r2, #0]
 801ed5a:	801a      	strh	r2, [r3, #0]
 801ed5c:	187b      	adds	r3, r7, r1
 801ed5e:	881a      	ldrh	r2, [r3, #0]
 801ed60:	2380      	movs	r3, #128	@ 0x80
 801ed62:	01db      	lsls	r3, r3, #7
 801ed64:	4013      	ands	r3, r2
 801ed66:	d016      	beq.n	801ed96 <USB_ActivateEndpoint+0x61a>
 801ed68:	687a      	ldr	r2, [r7, #4]
 801ed6a:	683b      	ldr	r3, [r7, #0]
 801ed6c:	781b      	ldrb	r3, [r3, #0]
 801ed6e:	009b      	lsls	r3, r3, #2
 801ed70:	18d3      	adds	r3, r2, r3
 801ed72:	881b      	ldrh	r3, [r3, #0]
 801ed74:	b29a      	uxth	r2, r3
 801ed76:	204c      	movs	r0, #76	@ 0x4c
 801ed78:	183b      	adds	r3, r7, r0
 801ed7a:	492a      	ldr	r1, [pc, #168]	@ (801ee24 <USB_ActivateEndpoint+0x6a8>)
 801ed7c:	400a      	ands	r2, r1
 801ed7e:	801a      	strh	r2, [r3, #0]
 801ed80:	687a      	ldr	r2, [r7, #4]
 801ed82:	683b      	ldr	r3, [r7, #0]
 801ed84:	781b      	ldrb	r3, [r3, #0]
 801ed86:	009b      	lsls	r3, r3, #2
 801ed88:	18d3      	adds	r3, r2, r3
 801ed8a:	183a      	adds	r2, r7, r0
 801ed8c:	8812      	ldrh	r2, [r2, #0]
 801ed8e:	4926      	ldr	r1, [pc, #152]	@ (801ee28 <USB_ActivateEndpoint+0x6ac>)
 801ed90:	430a      	orrs	r2, r1
 801ed92:	b292      	uxth	r2, r2
 801ed94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ed96:	687a      	ldr	r2, [r7, #4]
 801ed98:	683b      	ldr	r3, [r7, #0]
 801ed9a:	781b      	ldrb	r3, [r3, #0]
 801ed9c:	009b      	lsls	r3, r3, #2
 801ed9e:	18d2      	adds	r2, r2, r3
 801eda0:	214a      	movs	r1, #74	@ 0x4a
 801eda2:	187b      	adds	r3, r7, r1
 801eda4:	8812      	ldrh	r2, [r2, #0]
 801eda6:	801a      	strh	r2, [r3, #0]
 801eda8:	187b      	adds	r3, r7, r1
 801edaa:	881b      	ldrh	r3, [r3, #0]
 801edac:	2240      	movs	r2, #64	@ 0x40
 801edae:	4013      	ands	r3, r2
 801edb0:	d016      	beq.n	801ede0 <USB_ActivateEndpoint+0x664>
 801edb2:	687a      	ldr	r2, [r7, #4]
 801edb4:	683b      	ldr	r3, [r7, #0]
 801edb6:	781b      	ldrb	r3, [r3, #0]
 801edb8:	009b      	lsls	r3, r3, #2
 801edba:	18d3      	adds	r3, r2, r3
 801edbc:	881b      	ldrh	r3, [r3, #0]
 801edbe:	b29a      	uxth	r2, r3
 801edc0:	2048      	movs	r0, #72	@ 0x48
 801edc2:	183b      	adds	r3, r7, r0
 801edc4:	4917      	ldr	r1, [pc, #92]	@ (801ee24 <USB_ActivateEndpoint+0x6a8>)
 801edc6:	400a      	ands	r2, r1
 801edc8:	801a      	strh	r2, [r3, #0]
 801edca:	687a      	ldr	r2, [r7, #4]
 801edcc:	683b      	ldr	r3, [r7, #0]
 801edce:	781b      	ldrb	r3, [r3, #0]
 801edd0:	009b      	lsls	r3, r3, #2
 801edd2:	18d3      	adds	r3, r2, r3
 801edd4:	183a      	adds	r2, r7, r0
 801edd6:	8812      	ldrh	r2, [r2, #0]
 801edd8:	4919      	ldr	r1, [pc, #100]	@ (801ee40 <USB_ActivateEndpoint+0x6c4>)
 801edda:	430a      	orrs	r2, r1
 801eddc:	b292      	uxth	r2, r2
 801edde:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801ede0:	683b      	ldr	r3, [r7, #0]
 801ede2:	78db      	ldrb	r3, [r3, #3]
 801ede4:	2b01      	cmp	r3, #1
 801ede6:	d02f      	beq.n	801ee48 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801ede8:	687a      	ldr	r2, [r7, #4]
 801edea:	683b      	ldr	r3, [r7, #0]
 801edec:	781b      	ldrb	r3, [r3, #0]
 801edee:	009b      	lsls	r3, r3, #2
 801edf0:	18d3      	adds	r3, r2, r3
 801edf2:	881b      	ldrh	r3, [r3, #0]
 801edf4:	b29a      	uxth	r2, r3
 801edf6:	2044      	movs	r0, #68	@ 0x44
 801edf8:	183b      	adds	r3, r7, r0
 801edfa:	4912      	ldr	r1, [pc, #72]	@ (801ee44 <USB_ActivateEndpoint+0x6c8>)
 801edfc:	400a      	ands	r2, r1
 801edfe:	801a      	strh	r2, [r3, #0]
 801ee00:	183b      	adds	r3, r7, r0
 801ee02:	183a      	adds	r2, r7, r0
 801ee04:	8812      	ldrh	r2, [r2, #0]
 801ee06:	2120      	movs	r1, #32
 801ee08:	404a      	eors	r2, r1
 801ee0a:	801a      	strh	r2, [r3, #0]
 801ee0c:	687a      	ldr	r2, [r7, #4]
 801ee0e:	683b      	ldr	r3, [r7, #0]
 801ee10:	781b      	ldrb	r3, [r3, #0]
 801ee12:	009b      	lsls	r3, r3, #2
 801ee14:	18d3      	adds	r3, r2, r3
 801ee16:	183a      	adds	r2, r7, r0
 801ee18:	8812      	ldrh	r2, [r2, #0]
 801ee1a:	4905      	ldr	r1, [pc, #20]	@ (801ee30 <USB_ActivateEndpoint+0x6b4>)
 801ee1c:	430a      	orrs	r2, r1
 801ee1e:	b292      	uxth	r2, r2
 801ee20:	801a      	strh	r2, [r3, #0]
 801ee22:	e028      	b.n	801ee76 <USB_ActivateEndpoint+0x6fa>
 801ee24:	ffff8f8f 	.word	0xffff8f8f
 801ee28:	ffffc080 	.word	0xffffc080
 801ee2c:	ffffbf8f 	.word	0xffffbf8f
 801ee30:	ffff8080 	.word	0xffff8080
 801ee34:	ffff8180 	.word	0xffff8180
 801ee38:	ffff8e8f 	.word	0xffff8e8f
 801ee3c:	00000404 	.word	0x00000404
 801ee40:	ffff80c0 	.word	0xffff80c0
 801ee44:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ee48:	687a      	ldr	r2, [r7, #4]
 801ee4a:	683b      	ldr	r3, [r7, #0]
 801ee4c:	781b      	ldrb	r3, [r3, #0]
 801ee4e:	009b      	lsls	r3, r3, #2
 801ee50:	18d3      	adds	r3, r2, r3
 801ee52:	881b      	ldrh	r3, [r3, #0]
 801ee54:	b29a      	uxth	r2, r3
 801ee56:	2046      	movs	r0, #70	@ 0x46
 801ee58:	183b      	adds	r3, r7, r0
 801ee5a:	4916      	ldr	r1, [pc, #88]	@ (801eeb4 <USB_ActivateEndpoint+0x738>)
 801ee5c:	400a      	ands	r2, r1
 801ee5e:	801a      	strh	r2, [r3, #0]
 801ee60:	687a      	ldr	r2, [r7, #4]
 801ee62:	683b      	ldr	r3, [r7, #0]
 801ee64:	781b      	ldrb	r3, [r3, #0]
 801ee66:	009b      	lsls	r3, r3, #2
 801ee68:	18d3      	adds	r3, r2, r3
 801ee6a:	183a      	adds	r2, r7, r0
 801ee6c:	8812      	ldrh	r2, [r2, #0]
 801ee6e:	4912      	ldr	r1, [pc, #72]	@ (801eeb8 <USB_ActivateEndpoint+0x73c>)
 801ee70:	430a      	orrs	r2, r1
 801ee72:	b292      	uxth	r2, r2
 801ee74:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ee76:	687a      	ldr	r2, [r7, #4]
 801ee78:	683b      	ldr	r3, [r7, #0]
 801ee7a:	781b      	ldrb	r3, [r3, #0]
 801ee7c:	009b      	lsls	r3, r3, #2
 801ee7e:	18d3      	adds	r3, r2, r3
 801ee80:	881b      	ldrh	r3, [r3, #0]
 801ee82:	b29a      	uxth	r2, r3
 801ee84:	2042      	movs	r0, #66	@ 0x42
 801ee86:	183b      	adds	r3, r7, r0
 801ee88:	490c      	ldr	r1, [pc, #48]	@ (801eebc <USB_ActivateEndpoint+0x740>)
 801ee8a:	400a      	ands	r2, r1
 801ee8c:	801a      	strh	r2, [r3, #0]
 801ee8e:	687a      	ldr	r2, [r7, #4]
 801ee90:	683b      	ldr	r3, [r7, #0]
 801ee92:	781b      	ldrb	r3, [r3, #0]
 801ee94:	009b      	lsls	r3, r3, #2
 801ee96:	18d3      	adds	r3, r2, r3
 801ee98:	183a      	adds	r2, r7, r0
 801ee9a:	8812      	ldrh	r2, [r2, #0]
 801ee9c:	4906      	ldr	r1, [pc, #24]	@ (801eeb8 <USB_ActivateEndpoint+0x73c>)
 801ee9e:	430a      	orrs	r2, r1
 801eea0:	b292      	uxth	r2, r2
 801eea2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801eea4:	236f      	movs	r3, #111	@ 0x6f
 801eea6:	18fb      	adds	r3, r7, r3
 801eea8:	781b      	ldrb	r3, [r3, #0]
}
 801eeaa:	0018      	movs	r0, r3
 801eeac:	46bd      	mov	sp, r7
 801eeae:	b01c      	add	sp, #112	@ 0x70
 801eeb0:	bd80      	pop	{r7, pc}
 801eeb2:	46c0      	nop			@ (mov r8, r8)
 801eeb4:	ffff8fbf 	.word	0xffff8fbf
 801eeb8:	ffff8080 	.word	0xffff8080
 801eebc:	ffffbf8f 	.word	0xffffbf8f

0801eec0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801eec0:	b580      	push	{r7, lr}
 801eec2:	b08c      	sub	sp, #48	@ 0x30
 801eec4:	af00      	add	r7, sp, #0
 801eec6:	6078      	str	r0, [r7, #4]
 801eec8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801eeca:	683b      	ldr	r3, [r7, #0]
 801eecc:	7b1b      	ldrb	r3, [r3, #12]
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d000      	beq.n	801eed4 <USB_DeactivateEndpoint+0x14>
 801eed2:	e07e      	b.n	801efd2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801eed4:	683b      	ldr	r3, [r7, #0]
 801eed6:	785b      	ldrb	r3, [r3, #1]
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d03c      	beq.n	801ef56 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801eedc:	687a      	ldr	r2, [r7, #4]
 801eede:	683b      	ldr	r3, [r7, #0]
 801eee0:	781b      	ldrb	r3, [r3, #0]
 801eee2:	009b      	lsls	r3, r3, #2
 801eee4:	18d2      	adds	r2, r2, r3
 801eee6:	210c      	movs	r1, #12
 801eee8:	187b      	adds	r3, r7, r1
 801eeea:	8812      	ldrh	r2, [r2, #0]
 801eeec:	801a      	strh	r2, [r3, #0]
 801eeee:	187b      	adds	r3, r7, r1
 801eef0:	881b      	ldrh	r3, [r3, #0]
 801eef2:	2240      	movs	r2, #64	@ 0x40
 801eef4:	4013      	ands	r3, r2
 801eef6:	d016      	beq.n	801ef26 <USB_DeactivateEndpoint+0x66>
 801eef8:	687a      	ldr	r2, [r7, #4]
 801eefa:	683b      	ldr	r3, [r7, #0]
 801eefc:	781b      	ldrb	r3, [r3, #0]
 801eefe:	009b      	lsls	r3, r3, #2
 801ef00:	18d3      	adds	r3, r2, r3
 801ef02:	881b      	ldrh	r3, [r3, #0]
 801ef04:	b29a      	uxth	r2, r3
 801ef06:	200a      	movs	r0, #10
 801ef08:	183b      	adds	r3, r7, r0
 801ef0a:	49c7      	ldr	r1, [pc, #796]	@ (801f228 <USB_DeactivateEndpoint+0x368>)
 801ef0c:	400a      	ands	r2, r1
 801ef0e:	801a      	strh	r2, [r3, #0]
 801ef10:	687a      	ldr	r2, [r7, #4]
 801ef12:	683b      	ldr	r3, [r7, #0]
 801ef14:	781b      	ldrb	r3, [r3, #0]
 801ef16:	009b      	lsls	r3, r3, #2
 801ef18:	18d3      	adds	r3, r2, r3
 801ef1a:	183a      	adds	r2, r7, r0
 801ef1c:	8812      	ldrh	r2, [r2, #0]
 801ef1e:	49c3      	ldr	r1, [pc, #780]	@ (801f22c <USB_DeactivateEndpoint+0x36c>)
 801ef20:	430a      	orrs	r2, r1
 801ef22:	b292      	uxth	r2, r2
 801ef24:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ef26:	687a      	ldr	r2, [r7, #4]
 801ef28:	683b      	ldr	r3, [r7, #0]
 801ef2a:	781b      	ldrb	r3, [r3, #0]
 801ef2c:	009b      	lsls	r3, r3, #2
 801ef2e:	18d3      	adds	r3, r2, r3
 801ef30:	881b      	ldrh	r3, [r3, #0]
 801ef32:	b29a      	uxth	r2, r3
 801ef34:	2008      	movs	r0, #8
 801ef36:	183b      	adds	r3, r7, r0
 801ef38:	49bd      	ldr	r1, [pc, #756]	@ (801f230 <USB_DeactivateEndpoint+0x370>)
 801ef3a:	400a      	ands	r2, r1
 801ef3c:	801a      	strh	r2, [r3, #0]
 801ef3e:	687a      	ldr	r2, [r7, #4]
 801ef40:	683b      	ldr	r3, [r7, #0]
 801ef42:	781b      	ldrb	r3, [r3, #0]
 801ef44:	009b      	lsls	r3, r3, #2
 801ef46:	18d3      	adds	r3, r2, r3
 801ef48:	183a      	adds	r2, r7, r0
 801ef4a:	8812      	ldrh	r2, [r2, #0]
 801ef4c:	49b9      	ldr	r1, [pc, #740]	@ (801f234 <USB_DeactivateEndpoint+0x374>)
 801ef4e:	430a      	orrs	r2, r1
 801ef50:	b292      	uxth	r2, r2
 801ef52:	801a      	strh	r2, [r3, #0]
 801ef54:	e163      	b.n	801f21e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ef56:	687a      	ldr	r2, [r7, #4]
 801ef58:	683b      	ldr	r3, [r7, #0]
 801ef5a:	781b      	ldrb	r3, [r3, #0]
 801ef5c:	009b      	lsls	r3, r3, #2
 801ef5e:	18d2      	adds	r2, r2, r3
 801ef60:	2112      	movs	r1, #18
 801ef62:	187b      	adds	r3, r7, r1
 801ef64:	8812      	ldrh	r2, [r2, #0]
 801ef66:	801a      	strh	r2, [r3, #0]
 801ef68:	187b      	adds	r3, r7, r1
 801ef6a:	881a      	ldrh	r2, [r3, #0]
 801ef6c:	2380      	movs	r3, #128	@ 0x80
 801ef6e:	01db      	lsls	r3, r3, #7
 801ef70:	4013      	ands	r3, r2
 801ef72:	d016      	beq.n	801efa2 <USB_DeactivateEndpoint+0xe2>
 801ef74:	687a      	ldr	r2, [r7, #4]
 801ef76:	683b      	ldr	r3, [r7, #0]
 801ef78:	781b      	ldrb	r3, [r3, #0]
 801ef7a:	009b      	lsls	r3, r3, #2
 801ef7c:	18d3      	adds	r3, r2, r3
 801ef7e:	881b      	ldrh	r3, [r3, #0]
 801ef80:	b29a      	uxth	r2, r3
 801ef82:	2010      	movs	r0, #16
 801ef84:	183b      	adds	r3, r7, r0
 801ef86:	49a8      	ldr	r1, [pc, #672]	@ (801f228 <USB_DeactivateEndpoint+0x368>)
 801ef88:	400a      	ands	r2, r1
 801ef8a:	801a      	strh	r2, [r3, #0]
 801ef8c:	687a      	ldr	r2, [r7, #4]
 801ef8e:	683b      	ldr	r3, [r7, #0]
 801ef90:	781b      	ldrb	r3, [r3, #0]
 801ef92:	009b      	lsls	r3, r3, #2
 801ef94:	18d3      	adds	r3, r2, r3
 801ef96:	183a      	adds	r2, r7, r0
 801ef98:	8812      	ldrh	r2, [r2, #0]
 801ef9a:	49a7      	ldr	r1, [pc, #668]	@ (801f238 <USB_DeactivateEndpoint+0x378>)
 801ef9c:	430a      	orrs	r2, r1
 801ef9e:	b292      	uxth	r2, r2
 801efa0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801efa2:	687a      	ldr	r2, [r7, #4]
 801efa4:	683b      	ldr	r3, [r7, #0]
 801efa6:	781b      	ldrb	r3, [r3, #0]
 801efa8:	009b      	lsls	r3, r3, #2
 801efaa:	18d3      	adds	r3, r2, r3
 801efac:	881b      	ldrh	r3, [r3, #0]
 801efae:	b29a      	uxth	r2, r3
 801efb0:	200e      	movs	r0, #14
 801efb2:	183b      	adds	r3, r7, r0
 801efb4:	49a1      	ldr	r1, [pc, #644]	@ (801f23c <USB_DeactivateEndpoint+0x37c>)
 801efb6:	400a      	ands	r2, r1
 801efb8:	801a      	strh	r2, [r3, #0]
 801efba:	687a      	ldr	r2, [r7, #4]
 801efbc:	683b      	ldr	r3, [r7, #0]
 801efbe:	781b      	ldrb	r3, [r3, #0]
 801efc0:	009b      	lsls	r3, r3, #2
 801efc2:	18d3      	adds	r3, r2, r3
 801efc4:	183a      	adds	r2, r7, r0
 801efc6:	8812      	ldrh	r2, [r2, #0]
 801efc8:	499a      	ldr	r1, [pc, #616]	@ (801f234 <USB_DeactivateEndpoint+0x374>)
 801efca:	430a      	orrs	r2, r1
 801efcc:	b292      	uxth	r2, r2
 801efce:	801a      	strh	r2, [r3, #0]
 801efd0:	e125      	b.n	801f21e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801efd2:	683b      	ldr	r3, [r7, #0]
 801efd4:	785b      	ldrb	r3, [r3, #1]
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	d000      	beq.n	801efdc <USB_DeactivateEndpoint+0x11c>
 801efda:	e090      	b.n	801f0fe <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801efdc:	687a      	ldr	r2, [r7, #4]
 801efde:	683b      	ldr	r3, [r7, #0]
 801efe0:	781b      	ldrb	r3, [r3, #0]
 801efe2:	009b      	lsls	r3, r3, #2
 801efe4:	18d2      	adds	r2, r2, r3
 801efe6:	2120      	movs	r1, #32
 801efe8:	187b      	adds	r3, r7, r1
 801efea:	8812      	ldrh	r2, [r2, #0]
 801efec:	801a      	strh	r2, [r3, #0]
 801efee:	187b      	adds	r3, r7, r1
 801eff0:	881a      	ldrh	r2, [r3, #0]
 801eff2:	2380      	movs	r3, #128	@ 0x80
 801eff4:	01db      	lsls	r3, r3, #7
 801eff6:	4013      	ands	r3, r2
 801eff8:	d016      	beq.n	801f028 <USB_DeactivateEndpoint+0x168>
 801effa:	687a      	ldr	r2, [r7, #4]
 801effc:	683b      	ldr	r3, [r7, #0]
 801effe:	781b      	ldrb	r3, [r3, #0]
 801f000:	009b      	lsls	r3, r3, #2
 801f002:	18d3      	adds	r3, r2, r3
 801f004:	881b      	ldrh	r3, [r3, #0]
 801f006:	b29a      	uxth	r2, r3
 801f008:	201e      	movs	r0, #30
 801f00a:	183b      	adds	r3, r7, r0
 801f00c:	4986      	ldr	r1, [pc, #536]	@ (801f228 <USB_DeactivateEndpoint+0x368>)
 801f00e:	400a      	ands	r2, r1
 801f010:	801a      	strh	r2, [r3, #0]
 801f012:	687a      	ldr	r2, [r7, #4]
 801f014:	683b      	ldr	r3, [r7, #0]
 801f016:	781b      	ldrb	r3, [r3, #0]
 801f018:	009b      	lsls	r3, r3, #2
 801f01a:	18d3      	adds	r3, r2, r3
 801f01c:	183a      	adds	r2, r7, r0
 801f01e:	8812      	ldrh	r2, [r2, #0]
 801f020:	4985      	ldr	r1, [pc, #532]	@ (801f238 <USB_DeactivateEndpoint+0x378>)
 801f022:	430a      	orrs	r2, r1
 801f024:	b292      	uxth	r2, r2
 801f026:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f028:	687a      	ldr	r2, [r7, #4]
 801f02a:	683b      	ldr	r3, [r7, #0]
 801f02c:	781b      	ldrb	r3, [r3, #0]
 801f02e:	009b      	lsls	r3, r3, #2
 801f030:	18d2      	adds	r2, r2, r3
 801f032:	211c      	movs	r1, #28
 801f034:	187b      	adds	r3, r7, r1
 801f036:	8812      	ldrh	r2, [r2, #0]
 801f038:	801a      	strh	r2, [r3, #0]
 801f03a:	187b      	adds	r3, r7, r1
 801f03c:	881b      	ldrh	r3, [r3, #0]
 801f03e:	2240      	movs	r2, #64	@ 0x40
 801f040:	4013      	ands	r3, r2
 801f042:	d016      	beq.n	801f072 <USB_DeactivateEndpoint+0x1b2>
 801f044:	687a      	ldr	r2, [r7, #4]
 801f046:	683b      	ldr	r3, [r7, #0]
 801f048:	781b      	ldrb	r3, [r3, #0]
 801f04a:	009b      	lsls	r3, r3, #2
 801f04c:	18d3      	adds	r3, r2, r3
 801f04e:	881b      	ldrh	r3, [r3, #0]
 801f050:	b29a      	uxth	r2, r3
 801f052:	201a      	movs	r0, #26
 801f054:	183b      	adds	r3, r7, r0
 801f056:	4974      	ldr	r1, [pc, #464]	@ (801f228 <USB_DeactivateEndpoint+0x368>)
 801f058:	400a      	ands	r2, r1
 801f05a:	801a      	strh	r2, [r3, #0]
 801f05c:	687a      	ldr	r2, [r7, #4]
 801f05e:	683b      	ldr	r3, [r7, #0]
 801f060:	781b      	ldrb	r3, [r3, #0]
 801f062:	009b      	lsls	r3, r3, #2
 801f064:	18d3      	adds	r3, r2, r3
 801f066:	183a      	adds	r2, r7, r0
 801f068:	8812      	ldrh	r2, [r2, #0]
 801f06a:	4970      	ldr	r1, [pc, #448]	@ (801f22c <USB_DeactivateEndpoint+0x36c>)
 801f06c:	430a      	orrs	r2, r1
 801f06e:	b292      	uxth	r2, r2
 801f070:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801f072:	687a      	ldr	r2, [r7, #4]
 801f074:	683b      	ldr	r3, [r7, #0]
 801f076:	781b      	ldrb	r3, [r3, #0]
 801f078:	009b      	lsls	r3, r3, #2
 801f07a:	18d3      	adds	r3, r2, r3
 801f07c:	881b      	ldrh	r3, [r3, #0]
 801f07e:	b29a      	uxth	r2, r3
 801f080:	2018      	movs	r0, #24
 801f082:	183b      	adds	r3, r7, r0
 801f084:	4968      	ldr	r1, [pc, #416]	@ (801f228 <USB_DeactivateEndpoint+0x368>)
 801f086:	400a      	ands	r2, r1
 801f088:	801a      	strh	r2, [r3, #0]
 801f08a:	687a      	ldr	r2, [r7, #4]
 801f08c:	683b      	ldr	r3, [r7, #0]
 801f08e:	781b      	ldrb	r3, [r3, #0]
 801f090:	009b      	lsls	r3, r3, #2
 801f092:	18d3      	adds	r3, r2, r3
 801f094:	183a      	adds	r2, r7, r0
 801f096:	8812      	ldrh	r2, [r2, #0]
 801f098:	4964      	ldr	r1, [pc, #400]	@ (801f22c <USB_DeactivateEndpoint+0x36c>)
 801f09a:	430a      	orrs	r2, r1
 801f09c:	b292      	uxth	r2, r2
 801f09e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801f0a0:	687a      	ldr	r2, [r7, #4]
 801f0a2:	683b      	ldr	r3, [r7, #0]
 801f0a4:	781b      	ldrb	r3, [r3, #0]
 801f0a6:	009b      	lsls	r3, r3, #2
 801f0a8:	18d3      	adds	r3, r2, r3
 801f0aa:	881b      	ldrh	r3, [r3, #0]
 801f0ac:	b29a      	uxth	r2, r3
 801f0ae:	2016      	movs	r0, #22
 801f0b0:	183b      	adds	r3, r7, r0
 801f0b2:	4962      	ldr	r1, [pc, #392]	@ (801f23c <USB_DeactivateEndpoint+0x37c>)
 801f0b4:	400a      	ands	r2, r1
 801f0b6:	801a      	strh	r2, [r3, #0]
 801f0b8:	687a      	ldr	r2, [r7, #4]
 801f0ba:	683b      	ldr	r3, [r7, #0]
 801f0bc:	781b      	ldrb	r3, [r3, #0]
 801f0be:	009b      	lsls	r3, r3, #2
 801f0c0:	18d3      	adds	r3, r2, r3
 801f0c2:	183a      	adds	r2, r7, r0
 801f0c4:	8812      	ldrh	r2, [r2, #0]
 801f0c6:	495b      	ldr	r1, [pc, #364]	@ (801f234 <USB_DeactivateEndpoint+0x374>)
 801f0c8:	430a      	orrs	r2, r1
 801f0ca:	b292      	uxth	r2, r2
 801f0cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f0ce:	687a      	ldr	r2, [r7, #4]
 801f0d0:	683b      	ldr	r3, [r7, #0]
 801f0d2:	781b      	ldrb	r3, [r3, #0]
 801f0d4:	009b      	lsls	r3, r3, #2
 801f0d6:	18d3      	adds	r3, r2, r3
 801f0d8:	881b      	ldrh	r3, [r3, #0]
 801f0da:	b29a      	uxth	r2, r3
 801f0dc:	2014      	movs	r0, #20
 801f0de:	183b      	adds	r3, r7, r0
 801f0e0:	4953      	ldr	r1, [pc, #332]	@ (801f230 <USB_DeactivateEndpoint+0x370>)
 801f0e2:	400a      	ands	r2, r1
 801f0e4:	801a      	strh	r2, [r3, #0]
 801f0e6:	687a      	ldr	r2, [r7, #4]
 801f0e8:	683b      	ldr	r3, [r7, #0]
 801f0ea:	781b      	ldrb	r3, [r3, #0]
 801f0ec:	009b      	lsls	r3, r3, #2
 801f0ee:	18d3      	adds	r3, r2, r3
 801f0f0:	183a      	adds	r2, r7, r0
 801f0f2:	8812      	ldrh	r2, [r2, #0]
 801f0f4:	494f      	ldr	r1, [pc, #316]	@ (801f234 <USB_DeactivateEndpoint+0x374>)
 801f0f6:	430a      	orrs	r2, r1
 801f0f8:	b292      	uxth	r2, r2
 801f0fa:	801a      	strh	r2, [r3, #0]
 801f0fc:	e08f      	b.n	801f21e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f0fe:	687a      	ldr	r2, [r7, #4]
 801f100:	683b      	ldr	r3, [r7, #0]
 801f102:	781b      	ldrb	r3, [r3, #0]
 801f104:	009b      	lsls	r3, r3, #2
 801f106:	18d2      	adds	r2, r2, r3
 801f108:	212e      	movs	r1, #46	@ 0x2e
 801f10a:	187b      	adds	r3, r7, r1
 801f10c:	8812      	ldrh	r2, [r2, #0]
 801f10e:	801a      	strh	r2, [r3, #0]
 801f110:	187b      	adds	r3, r7, r1
 801f112:	881a      	ldrh	r2, [r3, #0]
 801f114:	2380      	movs	r3, #128	@ 0x80
 801f116:	01db      	lsls	r3, r3, #7
 801f118:	4013      	ands	r3, r2
 801f11a:	d016      	beq.n	801f14a <USB_DeactivateEndpoint+0x28a>
 801f11c:	687a      	ldr	r2, [r7, #4]
 801f11e:	683b      	ldr	r3, [r7, #0]
 801f120:	781b      	ldrb	r3, [r3, #0]
 801f122:	009b      	lsls	r3, r3, #2
 801f124:	18d3      	adds	r3, r2, r3
 801f126:	881b      	ldrh	r3, [r3, #0]
 801f128:	b29a      	uxth	r2, r3
 801f12a:	202c      	movs	r0, #44	@ 0x2c
 801f12c:	183b      	adds	r3, r7, r0
 801f12e:	493e      	ldr	r1, [pc, #248]	@ (801f228 <USB_DeactivateEndpoint+0x368>)
 801f130:	400a      	ands	r2, r1
 801f132:	801a      	strh	r2, [r3, #0]
 801f134:	687a      	ldr	r2, [r7, #4]
 801f136:	683b      	ldr	r3, [r7, #0]
 801f138:	781b      	ldrb	r3, [r3, #0]
 801f13a:	009b      	lsls	r3, r3, #2
 801f13c:	18d3      	adds	r3, r2, r3
 801f13e:	183a      	adds	r2, r7, r0
 801f140:	8812      	ldrh	r2, [r2, #0]
 801f142:	493d      	ldr	r1, [pc, #244]	@ (801f238 <USB_DeactivateEndpoint+0x378>)
 801f144:	430a      	orrs	r2, r1
 801f146:	b292      	uxth	r2, r2
 801f148:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f14a:	687a      	ldr	r2, [r7, #4]
 801f14c:	683b      	ldr	r3, [r7, #0]
 801f14e:	781b      	ldrb	r3, [r3, #0]
 801f150:	009b      	lsls	r3, r3, #2
 801f152:	18d2      	adds	r2, r2, r3
 801f154:	212a      	movs	r1, #42	@ 0x2a
 801f156:	187b      	adds	r3, r7, r1
 801f158:	8812      	ldrh	r2, [r2, #0]
 801f15a:	801a      	strh	r2, [r3, #0]
 801f15c:	187b      	adds	r3, r7, r1
 801f15e:	881b      	ldrh	r3, [r3, #0]
 801f160:	2240      	movs	r2, #64	@ 0x40
 801f162:	4013      	ands	r3, r2
 801f164:	d016      	beq.n	801f194 <USB_DeactivateEndpoint+0x2d4>
 801f166:	687a      	ldr	r2, [r7, #4]
 801f168:	683b      	ldr	r3, [r7, #0]
 801f16a:	781b      	ldrb	r3, [r3, #0]
 801f16c:	009b      	lsls	r3, r3, #2
 801f16e:	18d3      	adds	r3, r2, r3
 801f170:	881b      	ldrh	r3, [r3, #0]
 801f172:	b29a      	uxth	r2, r3
 801f174:	2028      	movs	r0, #40	@ 0x28
 801f176:	183b      	adds	r3, r7, r0
 801f178:	492b      	ldr	r1, [pc, #172]	@ (801f228 <USB_DeactivateEndpoint+0x368>)
 801f17a:	400a      	ands	r2, r1
 801f17c:	801a      	strh	r2, [r3, #0]
 801f17e:	687a      	ldr	r2, [r7, #4]
 801f180:	683b      	ldr	r3, [r7, #0]
 801f182:	781b      	ldrb	r3, [r3, #0]
 801f184:	009b      	lsls	r3, r3, #2
 801f186:	18d3      	adds	r3, r2, r3
 801f188:	183a      	adds	r2, r7, r0
 801f18a:	8812      	ldrh	r2, [r2, #0]
 801f18c:	4927      	ldr	r1, [pc, #156]	@ (801f22c <USB_DeactivateEndpoint+0x36c>)
 801f18e:	430a      	orrs	r2, r1
 801f190:	b292      	uxth	r2, r2
 801f192:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801f194:	687a      	ldr	r2, [r7, #4]
 801f196:	683b      	ldr	r3, [r7, #0]
 801f198:	781b      	ldrb	r3, [r3, #0]
 801f19a:	009b      	lsls	r3, r3, #2
 801f19c:	18d3      	adds	r3, r2, r3
 801f19e:	881b      	ldrh	r3, [r3, #0]
 801f1a0:	b29a      	uxth	r2, r3
 801f1a2:	2026      	movs	r0, #38	@ 0x26
 801f1a4:	183b      	adds	r3, r7, r0
 801f1a6:	4920      	ldr	r1, [pc, #128]	@ (801f228 <USB_DeactivateEndpoint+0x368>)
 801f1a8:	400a      	ands	r2, r1
 801f1aa:	801a      	strh	r2, [r3, #0]
 801f1ac:	687a      	ldr	r2, [r7, #4]
 801f1ae:	683b      	ldr	r3, [r7, #0]
 801f1b0:	781b      	ldrb	r3, [r3, #0]
 801f1b2:	009b      	lsls	r3, r3, #2
 801f1b4:	18d3      	adds	r3, r2, r3
 801f1b6:	183a      	adds	r2, r7, r0
 801f1b8:	8812      	ldrh	r2, [r2, #0]
 801f1ba:	491f      	ldr	r1, [pc, #124]	@ (801f238 <USB_DeactivateEndpoint+0x378>)
 801f1bc:	430a      	orrs	r2, r1
 801f1be:	b292      	uxth	r2, r2
 801f1c0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f1c2:	687a      	ldr	r2, [r7, #4]
 801f1c4:	683b      	ldr	r3, [r7, #0]
 801f1c6:	781b      	ldrb	r3, [r3, #0]
 801f1c8:	009b      	lsls	r3, r3, #2
 801f1ca:	18d3      	adds	r3, r2, r3
 801f1cc:	881b      	ldrh	r3, [r3, #0]
 801f1ce:	b29a      	uxth	r2, r3
 801f1d0:	2024      	movs	r0, #36	@ 0x24
 801f1d2:	183b      	adds	r3, r7, r0
 801f1d4:	4916      	ldr	r1, [pc, #88]	@ (801f230 <USB_DeactivateEndpoint+0x370>)
 801f1d6:	400a      	ands	r2, r1
 801f1d8:	801a      	strh	r2, [r3, #0]
 801f1da:	687a      	ldr	r2, [r7, #4]
 801f1dc:	683b      	ldr	r3, [r7, #0]
 801f1de:	781b      	ldrb	r3, [r3, #0]
 801f1e0:	009b      	lsls	r3, r3, #2
 801f1e2:	18d3      	adds	r3, r2, r3
 801f1e4:	183a      	adds	r2, r7, r0
 801f1e6:	8812      	ldrh	r2, [r2, #0]
 801f1e8:	4912      	ldr	r1, [pc, #72]	@ (801f234 <USB_DeactivateEndpoint+0x374>)
 801f1ea:	430a      	orrs	r2, r1
 801f1ec:	b292      	uxth	r2, r2
 801f1ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801f1f0:	687a      	ldr	r2, [r7, #4]
 801f1f2:	683b      	ldr	r3, [r7, #0]
 801f1f4:	781b      	ldrb	r3, [r3, #0]
 801f1f6:	009b      	lsls	r3, r3, #2
 801f1f8:	18d3      	adds	r3, r2, r3
 801f1fa:	881b      	ldrh	r3, [r3, #0]
 801f1fc:	b29a      	uxth	r2, r3
 801f1fe:	2022      	movs	r0, #34	@ 0x22
 801f200:	183b      	adds	r3, r7, r0
 801f202:	490e      	ldr	r1, [pc, #56]	@ (801f23c <USB_DeactivateEndpoint+0x37c>)
 801f204:	400a      	ands	r2, r1
 801f206:	801a      	strh	r2, [r3, #0]
 801f208:	687a      	ldr	r2, [r7, #4]
 801f20a:	683b      	ldr	r3, [r7, #0]
 801f20c:	781b      	ldrb	r3, [r3, #0]
 801f20e:	009b      	lsls	r3, r3, #2
 801f210:	18d3      	adds	r3, r2, r3
 801f212:	183a      	adds	r2, r7, r0
 801f214:	8812      	ldrh	r2, [r2, #0]
 801f216:	4907      	ldr	r1, [pc, #28]	@ (801f234 <USB_DeactivateEndpoint+0x374>)
 801f218:	430a      	orrs	r2, r1
 801f21a:	b292      	uxth	r2, r2
 801f21c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801f21e:	2300      	movs	r3, #0
}
 801f220:	0018      	movs	r0, r3
 801f222:	46bd      	mov	sp, r7
 801f224:	b00c      	add	sp, #48	@ 0x30
 801f226:	bd80      	pop	{r7, pc}
 801f228:	ffff8f8f 	.word	0xffff8f8f
 801f22c:	ffff80c0 	.word	0xffff80c0
 801f230:	ffff8fbf 	.word	0xffff8fbf
 801f234:	ffff8080 	.word	0xffff8080
 801f238:	ffffc080 	.word	0xffffc080
 801f23c:	ffffbf8f 	.word	0xffffbf8f

0801f240 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f240:	b590      	push	{r4, r7, lr}
 801f242:	b0c3      	sub	sp, #268	@ 0x10c
 801f244:	af00      	add	r7, sp, #0
 801f246:	6078      	str	r0, [r7, #4]
 801f248:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801f24a:	683b      	ldr	r3, [r7, #0]
 801f24c:	785b      	ldrb	r3, [r3, #1]
 801f24e:	2b01      	cmp	r3, #1
 801f250:	d001      	beq.n	801f256 <USB_EPStartXfer+0x16>
 801f252:	f000 fd2d 	bl	801fcb0 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801f256:	683b      	ldr	r3, [r7, #0]
 801f258:	699a      	ldr	r2, [r3, #24]
 801f25a:	683b      	ldr	r3, [r7, #0]
 801f25c:	691b      	ldr	r3, [r3, #16]
 801f25e:	429a      	cmp	r2, r3
 801f260:	d905      	bls.n	801f26e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801f262:	683b      	ldr	r3, [r7, #0]
 801f264:	691b      	ldr	r3, [r3, #16]
 801f266:	1d7a      	adds	r2, r7, #5
 801f268:	32ff      	adds	r2, #255	@ 0xff
 801f26a:	6013      	str	r3, [r2, #0]
 801f26c:	e004      	b.n	801f278 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801f26e:	683b      	ldr	r3, [r7, #0]
 801f270:	699b      	ldr	r3, [r3, #24]
 801f272:	1d7a      	adds	r2, r7, #5
 801f274:	32ff      	adds	r2, #255	@ 0xff
 801f276:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801f278:	683b      	ldr	r3, [r7, #0]
 801f27a:	7b1b      	ldrb	r3, [r3, #12]
 801f27c:	2b00      	cmp	r3, #0
 801f27e:	d125      	bne.n	801f2cc <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801f280:	683b      	ldr	r3, [r7, #0]
 801f282:	6959      	ldr	r1, [r3, #20]
 801f284:	683b      	ldr	r3, [r7, #0]
 801f286:	88da      	ldrh	r2, [r3, #6]
 801f288:	1d7b      	adds	r3, r7, #5
 801f28a:	33ff      	adds	r3, #255	@ 0xff
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	b29b      	uxth	r3, r3
 801f290:	6878      	ldr	r0, [r7, #4]
 801f292:	f001 fa47 	bl	8020724 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801f296:	687b      	ldr	r3, [r7, #4]
 801f298:	613b      	str	r3, [r7, #16]
 801f29a:	687b      	ldr	r3, [r7, #4]
 801f29c:	2250      	movs	r2, #80	@ 0x50
 801f29e:	5a9b      	ldrh	r3, [r3, r2]
 801f2a0:	b29b      	uxth	r3, r3
 801f2a2:	001a      	movs	r2, r3
 801f2a4:	693b      	ldr	r3, [r7, #16]
 801f2a6:	189b      	adds	r3, r3, r2
 801f2a8:	613b      	str	r3, [r7, #16]
 801f2aa:	683b      	ldr	r3, [r7, #0]
 801f2ac:	781b      	ldrb	r3, [r3, #0]
 801f2ae:	00da      	lsls	r2, r3, #3
 801f2b0:	693b      	ldr	r3, [r7, #16]
 801f2b2:	18d3      	adds	r3, r2, r3
 801f2b4:	4ad7      	ldr	r2, [pc, #860]	@ (801f614 <USB_EPStartXfer+0x3d4>)
 801f2b6:	4694      	mov	ip, r2
 801f2b8:	4463      	add	r3, ip
 801f2ba:	60fb      	str	r3, [r7, #12]
 801f2bc:	1d7b      	adds	r3, r7, #5
 801f2be:	33ff      	adds	r3, #255	@ 0xff
 801f2c0:	681b      	ldr	r3, [r3, #0]
 801f2c2:	b29a      	uxth	r2, r3
 801f2c4:	68fb      	ldr	r3, [r7, #12]
 801f2c6:	801a      	strh	r2, [r3, #0]
 801f2c8:	f000 fccd 	bl	801fc66 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801f2cc:	683b      	ldr	r3, [r7, #0]
 801f2ce:	78db      	ldrb	r3, [r3, #3]
 801f2d0:	2b02      	cmp	r3, #2
 801f2d2:	d000      	beq.n	801f2d6 <USB_EPStartXfer+0x96>
 801f2d4:	e362      	b.n	801f99c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801f2d6:	683b      	ldr	r3, [r7, #0]
 801f2d8:	6a1a      	ldr	r2, [r3, #32]
 801f2da:	683b      	ldr	r3, [r7, #0]
 801f2dc:	691b      	ldr	r3, [r3, #16]
 801f2de:	429a      	cmp	r2, r3
 801f2e0:	d800      	bhi.n	801f2e4 <USB_EPStartXfer+0xa4>
 801f2e2:	e309      	b.n	801f8f8 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f2e4:	687a      	ldr	r2, [r7, #4]
 801f2e6:	683b      	ldr	r3, [r7, #0]
 801f2e8:	781b      	ldrb	r3, [r3, #0]
 801f2ea:	009b      	lsls	r3, r3, #2
 801f2ec:	18d3      	adds	r3, r2, r3
 801f2ee:	881b      	ldrh	r3, [r3, #0]
 801f2f0:	b29a      	uxth	r2, r3
 801f2f2:	2056      	movs	r0, #86	@ 0x56
 801f2f4:	183b      	adds	r3, r7, r0
 801f2f6:	49c8      	ldr	r1, [pc, #800]	@ (801f618 <USB_EPStartXfer+0x3d8>)
 801f2f8:	400a      	ands	r2, r1
 801f2fa:	801a      	strh	r2, [r3, #0]
 801f2fc:	687a      	ldr	r2, [r7, #4]
 801f2fe:	683b      	ldr	r3, [r7, #0]
 801f300:	781b      	ldrb	r3, [r3, #0]
 801f302:	009b      	lsls	r3, r3, #2
 801f304:	18d3      	adds	r3, r2, r3
 801f306:	183a      	adds	r2, r7, r0
 801f308:	8812      	ldrh	r2, [r2, #0]
 801f30a:	49c4      	ldr	r1, [pc, #784]	@ (801f61c <USB_EPStartXfer+0x3dc>)
 801f30c:	430a      	orrs	r2, r1
 801f30e:	b292      	uxth	r2, r2
 801f310:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801f312:	683b      	ldr	r3, [r7, #0]
 801f314:	6a1a      	ldr	r2, [r3, #32]
 801f316:	1d7b      	adds	r3, r7, #5
 801f318:	33ff      	adds	r3, #255	@ 0xff
 801f31a:	681b      	ldr	r3, [r3, #0]
 801f31c:	1ad2      	subs	r2, r2, r3
 801f31e:	683b      	ldr	r3, [r7, #0]
 801f320:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801f322:	687a      	ldr	r2, [r7, #4]
 801f324:	683b      	ldr	r3, [r7, #0]
 801f326:	781b      	ldrb	r3, [r3, #0]
 801f328:	009b      	lsls	r3, r3, #2
 801f32a:	18d3      	adds	r3, r2, r3
 801f32c:	881b      	ldrh	r3, [r3, #0]
 801f32e:	b29b      	uxth	r3, r3
 801f330:	001a      	movs	r2, r3
 801f332:	2340      	movs	r3, #64	@ 0x40
 801f334:	4013      	ands	r3, r2
 801f336:	d100      	bne.n	801f33a <USB_EPStartXfer+0xfa>
 801f338:	e176      	b.n	801f628 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f33a:	687b      	ldr	r3, [r7, #4]
 801f33c:	633b      	str	r3, [r7, #48]	@ 0x30
 801f33e:	683b      	ldr	r3, [r7, #0]
 801f340:	785b      	ldrb	r3, [r3, #1]
 801f342:	2b00      	cmp	r3, #0
 801f344:	d000      	beq.n	801f348 <USB_EPStartXfer+0x108>
 801f346:	e074      	b.n	801f432 <USB_EPStartXfer+0x1f2>
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f34c:	687b      	ldr	r3, [r7, #4]
 801f34e:	2250      	movs	r2, #80	@ 0x50
 801f350:	5a9b      	ldrh	r3, [r3, r2]
 801f352:	b29b      	uxth	r3, r3
 801f354:	001a      	movs	r2, r3
 801f356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f358:	189b      	adds	r3, r3, r2
 801f35a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f35c:	683b      	ldr	r3, [r7, #0]
 801f35e:	781b      	ldrb	r3, [r3, #0]
 801f360:	00da      	lsls	r2, r3, #3
 801f362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f364:	18d3      	adds	r3, r2, r3
 801f366:	4aae      	ldr	r2, [pc, #696]	@ (801f620 <USB_EPStartXfer+0x3e0>)
 801f368:	4694      	mov	ip, r2
 801f36a:	4463      	add	r3, ip
 801f36c:	627b      	str	r3, [r7, #36]	@ 0x24
 801f36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f370:	881b      	ldrh	r3, [r3, #0]
 801f372:	b29b      	uxth	r3, r3
 801f374:	059b      	lsls	r3, r3, #22
 801f376:	0d9b      	lsrs	r3, r3, #22
 801f378:	b29a      	uxth	r2, r3
 801f37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f37c:	801a      	strh	r2, [r3, #0]
 801f37e:	1d7b      	adds	r3, r7, #5
 801f380:	33ff      	adds	r3, #255	@ 0xff
 801f382:	681b      	ldr	r3, [r3, #0]
 801f384:	2b3e      	cmp	r3, #62	@ 0x3e
 801f386:	d924      	bls.n	801f3d2 <USB_EPStartXfer+0x192>
 801f388:	1d7b      	adds	r3, r7, #5
 801f38a:	33ff      	adds	r3, #255	@ 0xff
 801f38c:	681b      	ldr	r3, [r3, #0]
 801f38e:	095b      	lsrs	r3, r3, #5
 801f390:	1c7a      	adds	r2, r7, #1
 801f392:	32ff      	adds	r2, #255	@ 0xff
 801f394:	6013      	str	r3, [r2, #0]
 801f396:	1d7b      	adds	r3, r7, #5
 801f398:	33ff      	adds	r3, #255	@ 0xff
 801f39a:	681b      	ldr	r3, [r3, #0]
 801f39c:	221f      	movs	r2, #31
 801f39e:	4013      	ands	r3, r2
 801f3a0:	d106      	bne.n	801f3b0 <USB_EPStartXfer+0x170>
 801f3a2:	1c7b      	adds	r3, r7, #1
 801f3a4:	33ff      	adds	r3, #255	@ 0xff
 801f3a6:	681b      	ldr	r3, [r3, #0]
 801f3a8:	3b01      	subs	r3, #1
 801f3aa:	1c7a      	adds	r2, r7, #1
 801f3ac:	32ff      	adds	r2, #255	@ 0xff
 801f3ae:	6013      	str	r3, [r2, #0]
 801f3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f3b2:	881b      	ldrh	r3, [r3, #0]
 801f3b4:	b29a      	uxth	r2, r3
 801f3b6:	1c7b      	adds	r3, r7, #1
 801f3b8:	33ff      	adds	r3, #255	@ 0xff
 801f3ba:	681b      	ldr	r3, [r3, #0]
 801f3bc:	b29b      	uxth	r3, r3
 801f3be:	029b      	lsls	r3, r3, #10
 801f3c0:	b29b      	uxth	r3, r3
 801f3c2:	4313      	orrs	r3, r2
 801f3c4:	b29b      	uxth	r3, r3
 801f3c6:	4a97      	ldr	r2, [pc, #604]	@ (801f624 <USB_EPStartXfer+0x3e4>)
 801f3c8:	4313      	orrs	r3, r2
 801f3ca:	b29a      	uxth	r2, r3
 801f3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f3ce:	801a      	strh	r2, [r3, #0]
 801f3d0:	e04a      	b.n	801f468 <USB_EPStartXfer+0x228>
 801f3d2:	1d7b      	adds	r3, r7, #5
 801f3d4:	33ff      	adds	r3, #255	@ 0xff
 801f3d6:	681b      	ldr	r3, [r3, #0]
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	d108      	bne.n	801f3ee <USB_EPStartXfer+0x1ae>
 801f3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f3de:	881b      	ldrh	r3, [r3, #0]
 801f3e0:	b29b      	uxth	r3, r3
 801f3e2:	4a90      	ldr	r2, [pc, #576]	@ (801f624 <USB_EPStartXfer+0x3e4>)
 801f3e4:	4313      	orrs	r3, r2
 801f3e6:	b29a      	uxth	r2, r3
 801f3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f3ea:	801a      	strh	r2, [r3, #0]
 801f3ec:	e03c      	b.n	801f468 <USB_EPStartXfer+0x228>
 801f3ee:	1d7b      	adds	r3, r7, #5
 801f3f0:	33ff      	adds	r3, #255	@ 0xff
 801f3f2:	681b      	ldr	r3, [r3, #0]
 801f3f4:	085b      	lsrs	r3, r3, #1
 801f3f6:	1c7a      	adds	r2, r7, #1
 801f3f8:	32ff      	adds	r2, #255	@ 0xff
 801f3fa:	6013      	str	r3, [r2, #0]
 801f3fc:	1d7b      	adds	r3, r7, #5
 801f3fe:	33ff      	adds	r3, #255	@ 0xff
 801f400:	681b      	ldr	r3, [r3, #0]
 801f402:	2201      	movs	r2, #1
 801f404:	4013      	ands	r3, r2
 801f406:	d006      	beq.n	801f416 <USB_EPStartXfer+0x1d6>
 801f408:	1c7b      	adds	r3, r7, #1
 801f40a:	33ff      	adds	r3, #255	@ 0xff
 801f40c:	681b      	ldr	r3, [r3, #0]
 801f40e:	3301      	adds	r3, #1
 801f410:	1c7a      	adds	r2, r7, #1
 801f412:	32ff      	adds	r2, #255	@ 0xff
 801f414:	6013      	str	r3, [r2, #0]
 801f416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f418:	881b      	ldrh	r3, [r3, #0]
 801f41a:	b29a      	uxth	r2, r3
 801f41c:	1c7b      	adds	r3, r7, #1
 801f41e:	33ff      	adds	r3, #255	@ 0xff
 801f420:	681b      	ldr	r3, [r3, #0]
 801f422:	b29b      	uxth	r3, r3
 801f424:	029b      	lsls	r3, r3, #10
 801f426:	b29b      	uxth	r3, r3
 801f428:	4313      	orrs	r3, r2
 801f42a:	b29a      	uxth	r2, r3
 801f42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f42e:	801a      	strh	r2, [r3, #0]
 801f430:	e01a      	b.n	801f468 <USB_EPStartXfer+0x228>
 801f432:	683b      	ldr	r3, [r7, #0]
 801f434:	785b      	ldrb	r3, [r3, #1]
 801f436:	2b01      	cmp	r3, #1
 801f438:	d116      	bne.n	801f468 <USB_EPStartXfer+0x228>
 801f43a:	687b      	ldr	r3, [r7, #4]
 801f43c:	2250      	movs	r2, #80	@ 0x50
 801f43e:	5a9b      	ldrh	r3, [r3, r2]
 801f440:	b29b      	uxth	r3, r3
 801f442:	001a      	movs	r2, r3
 801f444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f446:	189b      	adds	r3, r3, r2
 801f448:	633b      	str	r3, [r7, #48]	@ 0x30
 801f44a:	683b      	ldr	r3, [r7, #0]
 801f44c:	781b      	ldrb	r3, [r3, #0]
 801f44e:	00da      	lsls	r2, r3, #3
 801f450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f452:	18d3      	adds	r3, r2, r3
 801f454:	4a72      	ldr	r2, [pc, #456]	@ (801f620 <USB_EPStartXfer+0x3e0>)
 801f456:	4694      	mov	ip, r2
 801f458:	4463      	add	r3, ip
 801f45a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f45c:	1d7b      	adds	r3, r7, #5
 801f45e:	33ff      	adds	r3, #255	@ 0xff
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	b29a      	uxth	r2, r3
 801f464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f466:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801f468:	2076      	movs	r0, #118	@ 0x76
 801f46a:	183b      	adds	r3, r7, r0
 801f46c:	683a      	ldr	r2, [r7, #0]
 801f46e:	8952      	ldrh	r2, [r2, #10]
 801f470:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f472:	683b      	ldr	r3, [r7, #0]
 801f474:	6959      	ldr	r1, [r3, #20]
 801f476:	1d7b      	adds	r3, r7, #5
 801f478:	33ff      	adds	r3, #255	@ 0xff
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	b29c      	uxth	r4, r3
 801f47e:	183b      	adds	r3, r7, r0
 801f480:	881a      	ldrh	r2, [r3, #0]
 801f482:	6878      	ldr	r0, [r7, #4]
 801f484:	0023      	movs	r3, r4
 801f486:	f001 f94d 	bl	8020724 <USB_WritePMA>
            ep->xfer_buff += len;
 801f48a:	683b      	ldr	r3, [r7, #0]
 801f48c:	695a      	ldr	r2, [r3, #20]
 801f48e:	1d7b      	adds	r3, r7, #5
 801f490:	33ff      	adds	r3, #255	@ 0xff
 801f492:	681b      	ldr	r3, [r3, #0]
 801f494:	18d2      	adds	r2, r2, r3
 801f496:	683b      	ldr	r3, [r7, #0]
 801f498:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801f49a:	683b      	ldr	r3, [r7, #0]
 801f49c:	6a1a      	ldr	r2, [r3, #32]
 801f49e:	683b      	ldr	r3, [r7, #0]
 801f4a0:	691b      	ldr	r3, [r3, #16]
 801f4a2:	429a      	cmp	r2, r3
 801f4a4:	d908      	bls.n	801f4b8 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801f4a6:	683b      	ldr	r3, [r7, #0]
 801f4a8:	6a1a      	ldr	r2, [r3, #32]
 801f4aa:	1d7b      	adds	r3, r7, #5
 801f4ac:	33ff      	adds	r3, #255	@ 0xff
 801f4ae:	681b      	ldr	r3, [r3, #0]
 801f4b0:	1ad2      	subs	r2, r2, r3
 801f4b2:	683b      	ldr	r3, [r7, #0]
 801f4b4:	621a      	str	r2, [r3, #32]
 801f4b6:	e007      	b.n	801f4c8 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801f4b8:	683b      	ldr	r3, [r7, #0]
 801f4ba:	6a1b      	ldr	r3, [r3, #32]
 801f4bc:	1d7a      	adds	r2, r7, #5
 801f4be:	32ff      	adds	r2, #255	@ 0xff
 801f4c0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801f4c2:	683b      	ldr	r3, [r7, #0]
 801f4c4:	2200      	movs	r2, #0
 801f4c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f4c8:	683b      	ldr	r3, [r7, #0]
 801f4ca:	785b      	ldrb	r3, [r3, #1]
 801f4cc:	2b00      	cmp	r3, #0
 801f4ce:	d000      	beq.n	801f4d2 <USB_EPStartXfer+0x292>
 801f4d0:	e070      	b.n	801f5b4 <USB_EPStartXfer+0x374>
 801f4d2:	687b      	ldr	r3, [r7, #4]
 801f4d4:	61bb      	str	r3, [r7, #24]
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	2250      	movs	r2, #80	@ 0x50
 801f4da:	5a9b      	ldrh	r3, [r3, r2]
 801f4dc:	b29b      	uxth	r3, r3
 801f4de:	001a      	movs	r2, r3
 801f4e0:	69bb      	ldr	r3, [r7, #24]
 801f4e2:	189b      	adds	r3, r3, r2
 801f4e4:	61bb      	str	r3, [r7, #24]
 801f4e6:	683b      	ldr	r3, [r7, #0]
 801f4e8:	781b      	ldrb	r3, [r3, #0]
 801f4ea:	00da      	lsls	r2, r3, #3
 801f4ec:	69bb      	ldr	r3, [r7, #24]
 801f4ee:	18d3      	adds	r3, r2, r3
 801f4f0:	4a48      	ldr	r2, [pc, #288]	@ (801f614 <USB_EPStartXfer+0x3d4>)
 801f4f2:	4694      	mov	ip, r2
 801f4f4:	4463      	add	r3, ip
 801f4f6:	617b      	str	r3, [r7, #20]
 801f4f8:	697b      	ldr	r3, [r7, #20]
 801f4fa:	881b      	ldrh	r3, [r3, #0]
 801f4fc:	b29b      	uxth	r3, r3
 801f4fe:	059b      	lsls	r3, r3, #22
 801f500:	0d9b      	lsrs	r3, r3, #22
 801f502:	b29a      	uxth	r2, r3
 801f504:	697b      	ldr	r3, [r7, #20]
 801f506:	801a      	strh	r2, [r3, #0]
 801f508:	1d7b      	adds	r3, r7, #5
 801f50a:	33ff      	adds	r3, #255	@ 0xff
 801f50c:	681b      	ldr	r3, [r3, #0]
 801f50e:	2b3e      	cmp	r3, #62	@ 0x3e
 801f510:	d922      	bls.n	801f558 <USB_EPStartXfer+0x318>
 801f512:	1d7b      	adds	r3, r7, #5
 801f514:	33ff      	adds	r3, #255	@ 0xff
 801f516:	681b      	ldr	r3, [r3, #0]
 801f518:	095b      	lsrs	r3, r3, #5
 801f51a:	21fc      	movs	r1, #252	@ 0xfc
 801f51c:	187a      	adds	r2, r7, r1
 801f51e:	6013      	str	r3, [r2, #0]
 801f520:	1d7b      	adds	r3, r7, #5
 801f522:	33ff      	adds	r3, #255	@ 0xff
 801f524:	681b      	ldr	r3, [r3, #0]
 801f526:	221f      	movs	r2, #31
 801f528:	4013      	ands	r3, r2
 801f52a:	d104      	bne.n	801f536 <USB_EPStartXfer+0x2f6>
 801f52c:	187b      	adds	r3, r7, r1
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	3b01      	subs	r3, #1
 801f532:	187a      	adds	r2, r7, r1
 801f534:	6013      	str	r3, [r2, #0]
 801f536:	697b      	ldr	r3, [r7, #20]
 801f538:	881b      	ldrh	r3, [r3, #0]
 801f53a:	b29a      	uxth	r2, r3
 801f53c:	23fc      	movs	r3, #252	@ 0xfc
 801f53e:	18fb      	adds	r3, r7, r3
 801f540:	681b      	ldr	r3, [r3, #0]
 801f542:	b29b      	uxth	r3, r3
 801f544:	029b      	lsls	r3, r3, #10
 801f546:	b29b      	uxth	r3, r3
 801f548:	4313      	orrs	r3, r2
 801f54a:	b29b      	uxth	r3, r3
 801f54c:	4a35      	ldr	r2, [pc, #212]	@ (801f624 <USB_EPStartXfer+0x3e4>)
 801f54e:	4313      	orrs	r3, r2
 801f550:	b29a      	uxth	r2, r3
 801f552:	697b      	ldr	r3, [r7, #20]
 801f554:	801a      	strh	r2, [r3, #0]
 801f556:	e04a      	b.n	801f5ee <USB_EPStartXfer+0x3ae>
 801f558:	1d7b      	adds	r3, r7, #5
 801f55a:	33ff      	adds	r3, #255	@ 0xff
 801f55c:	681b      	ldr	r3, [r3, #0]
 801f55e:	2b00      	cmp	r3, #0
 801f560:	d108      	bne.n	801f574 <USB_EPStartXfer+0x334>
 801f562:	697b      	ldr	r3, [r7, #20]
 801f564:	881b      	ldrh	r3, [r3, #0]
 801f566:	b29b      	uxth	r3, r3
 801f568:	4a2e      	ldr	r2, [pc, #184]	@ (801f624 <USB_EPStartXfer+0x3e4>)
 801f56a:	4313      	orrs	r3, r2
 801f56c:	b29a      	uxth	r2, r3
 801f56e:	697b      	ldr	r3, [r7, #20]
 801f570:	801a      	strh	r2, [r3, #0]
 801f572:	e03c      	b.n	801f5ee <USB_EPStartXfer+0x3ae>
 801f574:	1d7b      	adds	r3, r7, #5
 801f576:	33ff      	adds	r3, #255	@ 0xff
 801f578:	681b      	ldr	r3, [r3, #0]
 801f57a:	085b      	lsrs	r3, r3, #1
 801f57c:	21fc      	movs	r1, #252	@ 0xfc
 801f57e:	187a      	adds	r2, r7, r1
 801f580:	6013      	str	r3, [r2, #0]
 801f582:	1d7b      	adds	r3, r7, #5
 801f584:	33ff      	adds	r3, #255	@ 0xff
 801f586:	681b      	ldr	r3, [r3, #0]
 801f588:	2201      	movs	r2, #1
 801f58a:	4013      	ands	r3, r2
 801f58c:	d004      	beq.n	801f598 <USB_EPStartXfer+0x358>
 801f58e:	187b      	adds	r3, r7, r1
 801f590:	681b      	ldr	r3, [r3, #0]
 801f592:	3301      	adds	r3, #1
 801f594:	187a      	adds	r2, r7, r1
 801f596:	6013      	str	r3, [r2, #0]
 801f598:	697b      	ldr	r3, [r7, #20]
 801f59a:	881b      	ldrh	r3, [r3, #0]
 801f59c:	b29a      	uxth	r2, r3
 801f59e:	23fc      	movs	r3, #252	@ 0xfc
 801f5a0:	18fb      	adds	r3, r7, r3
 801f5a2:	681b      	ldr	r3, [r3, #0]
 801f5a4:	b29b      	uxth	r3, r3
 801f5a6:	029b      	lsls	r3, r3, #10
 801f5a8:	b29b      	uxth	r3, r3
 801f5aa:	4313      	orrs	r3, r2
 801f5ac:	b29a      	uxth	r2, r3
 801f5ae:	697b      	ldr	r3, [r7, #20]
 801f5b0:	801a      	strh	r2, [r3, #0]
 801f5b2:	e01c      	b.n	801f5ee <USB_EPStartXfer+0x3ae>
 801f5b4:	683b      	ldr	r3, [r7, #0]
 801f5b6:	785b      	ldrb	r3, [r3, #1]
 801f5b8:	2b01      	cmp	r3, #1
 801f5ba:	d118      	bne.n	801f5ee <USB_EPStartXfer+0x3ae>
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	623b      	str	r3, [r7, #32]
 801f5c0:	687b      	ldr	r3, [r7, #4]
 801f5c2:	2250      	movs	r2, #80	@ 0x50
 801f5c4:	5a9b      	ldrh	r3, [r3, r2]
 801f5c6:	b29b      	uxth	r3, r3
 801f5c8:	001a      	movs	r2, r3
 801f5ca:	6a3b      	ldr	r3, [r7, #32]
 801f5cc:	189b      	adds	r3, r3, r2
 801f5ce:	623b      	str	r3, [r7, #32]
 801f5d0:	683b      	ldr	r3, [r7, #0]
 801f5d2:	781b      	ldrb	r3, [r3, #0]
 801f5d4:	00da      	lsls	r2, r3, #3
 801f5d6:	6a3b      	ldr	r3, [r7, #32]
 801f5d8:	18d3      	adds	r3, r2, r3
 801f5da:	4a0e      	ldr	r2, [pc, #56]	@ (801f614 <USB_EPStartXfer+0x3d4>)
 801f5dc:	4694      	mov	ip, r2
 801f5de:	4463      	add	r3, ip
 801f5e0:	61fb      	str	r3, [r7, #28]
 801f5e2:	1d7b      	adds	r3, r7, #5
 801f5e4:	33ff      	adds	r3, #255	@ 0xff
 801f5e6:	681b      	ldr	r3, [r3, #0]
 801f5e8:	b29a      	uxth	r2, r3
 801f5ea:	69fb      	ldr	r3, [r7, #28]
 801f5ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801f5ee:	2076      	movs	r0, #118	@ 0x76
 801f5f0:	183b      	adds	r3, r7, r0
 801f5f2:	683a      	ldr	r2, [r7, #0]
 801f5f4:	8912      	ldrh	r2, [r2, #8]
 801f5f6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f5f8:	683b      	ldr	r3, [r7, #0]
 801f5fa:	6959      	ldr	r1, [r3, #20]
 801f5fc:	1d7b      	adds	r3, r7, #5
 801f5fe:	33ff      	adds	r3, #255	@ 0xff
 801f600:	681b      	ldr	r3, [r3, #0]
 801f602:	b29c      	uxth	r4, r3
 801f604:	183b      	adds	r3, r7, r0
 801f606:	881a      	ldrh	r2, [r3, #0]
 801f608:	6878      	ldr	r0, [r7, #4]
 801f60a:	0023      	movs	r3, r4
 801f60c:	f001 f88a 	bl	8020724 <USB_WritePMA>
 801f610:	e329      	b.n	801fc66 <USB_EPStartXfer+0xa26>
 801f612:	46c0      	nop			@ (mov r8, r8)
 801f614:	00000402 	.word	0x00000402
 801f618:	ffff8f8f 	.word	0xffff8f8f
 801f61c:	ffff8180 	.word	0xffff8180
 801f620:	00000406 	.word	0x00000406
 801f624:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f628:	683b      	ldr	r3, [r7, #0]
 801f62a:	785b      	ldrb	r3, [r3, #1]
 801f62c:	2b00      	cmp	r3, #0
 801f62e:	d000      	beq.n	801f632 <USB_EPStartXfer+0x3f2>
 801f630:	e070      	b.n	801f714 <USB_EPStartXfer+0x4d4>
 801f632:	687b      	ldr	r3, [r7, #4]
 801f634:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f636:	687b      	ldr	r3, [r7, #4]
 801f638:	2250      	movs	r2, #80	@ 0x50
 801f63a:	5a9b      	ldrh	r3, [r3, r2]
 801f63c:	b29b      	uxth	r3, r3
 801f63e:	001a      	movs	r2, r3
 801f640:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f642:	189b      	adds	r3, r3, r2
 801f644:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f646:	683b      	ldr	r3, [r7, #0]
 801f648:	781b      	ldrb	r3, [r3, #0]
 801f64a:	00da      	lsls	r2, r3, #3
 801f64c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f64e:	18d3      	adds	r3, r2, r3
 801f650:	4acd      	ldr	r2, [pc, #820]	@ (801f988 <USB_EPStartXfer+0x748>)
 801f652:	4694      	mov	ip, r2
 801f654:	4463      	add	r3, ip
 801f656:	647b      	str	r3, [r7, #68]	@ 0x44
 801f658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f65a:	881b      	ldrh	r3, [r3, #0]
 801f65c:	b29b      	uxth	r3, r3
 801f65e:	059b      	lsls	r3, r3, #22
 801f660:	0d9b      	lsrs	r3, r3, #22
 801f662:	b29a      	uxth	r2, r3
 801f664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f666:	801a      	strh	r2, [r3, #0]
 801f668:	1d7b      	adds	r3, r7, #5
 801f66a:	33ff      	adds	r3, #255	@ 0xff
 801f66c:	681b      	ldr	r3, [r3, #0]
 801f66e:	2b3e      	cmp	r3, #62	@ 0x3e
 801f670:	d922      	bls.n	801f6b8 <USB_EPStartXfer+0x478>
 801f672:	1d7b      	adds	r3, r7, #5
 801f674:	33ff      	adds	r3, #255	@ 0xff
 801f676:	681b      	ldr	r3, [r3, #0]
 801f678:	095b      	lsrs	r3, r3, #5
 801f67a:	21f8      	movs	r1, #248	@ 0xf8
 801f67c:	187a      	adds	r2, r7, r1
 801f67e:	6013      	str	r3, [r2, #0]
 801f680:	1d7b      	adds	r3, r7, #5
 801f682:	33ff      	adds	r3, #255	@ 0xff
 801f684:	681b      	ldr	r3, [r3, #0]
 801f686:	221f      	movs	r2, #31
 801f688:	4013      	ands	r3, r2
 801f68a:	d104      	bne.n	801f696 <USB_EPStartXfer+0x456>
 801f68c:	187b      	adds	r3, r7, r1
 801f68e:	681b      	ldr	r3, [r3, #0]
 801f690:	3b01      	subs	r3, #1
 801f692:	187a      	adds	r2, r7, r1
 801f694:	6013      	str	r3, [r2, #0]
 801f696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f698:	881b      	ldrh	r3, [r3, #0]
 801f69a:	b29a      	uxth	r2, r3
 801f69c:	23f8      	movs	r3, #248	@ 0xf8
 801f69e:	18fb      	adds	r3, r7, r3
 801f6a0:	681b      	ldr	r3, [r3, #0]
 801f6a2:	b29b      	uxth	r3, r3
 801f6a4:	029b      	lsls	r3, r3, #10
 801f6a6:	b29b      	uxth	r3, r3
 801f6a8:	4313      	orrs	r3, r2
 801f6aa:	b29b      	uxth	r3, r3
 801f6ac:	4ab7      	ldr	r2, [pc, #732]	@ (801f98c <USB_EPStartXfer+0x74c>)
 801f6ae:	4313      	orrs	r3, r2
 801f6b0:	b29a      	uxth	r2, r3
 801f6b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f6b4:	801a      	strh	r2, [r3, #0]
 801f6b6:	e04a      	b.n	801f74e <USB_EPStartXfer+0x50e>
 801f6b8:	1d7b      	adds	r3, r7, #5
 801f6ba:	33ff      	adds	r3, #255	@ 0xff
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	2b00      	cmp	r3, #0
 801f6c0:	d108      	bne.n	801f6d4 <USB_EPStartXfer+0x494>
 801f6c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f6c4:	881b      	ldrh	r3, [r3, #0]
 801f6c6:	b29b      	uxth	r3, r3
 801f6c8:	4ab0      	ldr	r2, [pc, #704]	@ (801f98c <USB_EPStartXfer+0x74c>)
 801f6ca:	4313      	orrs	r3, r2
 801f6cc:	b29a      	uxth	r2, r3
 801f6ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f6d0:	801a      	strh	r2, [r3, #0]
 801f6d2:	e03c      	b.n	801f74e <USB_EPStartXfer+0x50e>
 801f6d4:	1d7b      	adds	r3, r7, #5
 801f6d6:	33ff      	adds	r3, #255	@ 0xff
 801f6d8:	681b      	ldr	r3, [r3, #0]
 801f6da:	085b      	lsrs	r3, r3, #1
 801f6dc:	21f8      	movs	r1, #248	@ 0xf8
 801f6de:	187a      	adds	r2, r7, r1
 801f6e0:	6013      	str	r3, [r2, #0]
 801f6e2:	1d7b      	adds	r3, r7, #5
 801f6e4:	33ff      	adds	r3, #255	@ 0xff
 801f6e6:	681b      	ldr	r3, [r3, #0]
 801f6e8:	2201      	movs	r2, #1
 801f6ea:	4013      	ands	r3, r2
 801f6ec:	d004      	beq.n	801f6f8 <USB_EPStartXfer+0x4b8>
 801f6ee:	187b      	adds	r3, r7, r1
 801f6f0:	681b      	ldr	r3, [r3, #0]
 801f6f2:	3301      	adds	r3, #1
 801f6f4:	187a      	adds	r2, r7, r1
 801f6f6:	6013      	str	r3, [r2, #0]
 801f6f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f6fa:	881b      	ldrh	r3, [r3, #0]
 801f6fc:	b29a      	uxth	r2, r3
 801f6fe:	23f8      	movs	r3, #248	@ 0xf8
 801f700:	18fb      	adds	r3, r7, r3
 801f702:	681b      	ldr	r3, [r3, #0]
 801f704:	b29b      	uxth	r3, r3
 801f706:	029b      	lsls	r3, r3, #10
 801f708:	b29b      	uxth	r3, r3
 801f70a:	4313      	orrs	r3, r2
 801f70c:	b29a      	uxth	r2, r3
 801f70e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f710:	801a      	strh	r2, [r3, #0]
 801f712:	e01c      	b.n	801f74e <USB_EPStartXfer+0x50e>
 801f714:	683b      	ldr	r3, [r7, #0]
 801f716:	785b      	ldrb	r3, [r3, #1]
 801f718:	2b01      	cmp	r3, #1
 801f71a:	d118      	bne.n	801f74e <USB_EPStartXfer+0x50e>
 801f71c:	687b      	ldr	r3, [r7, #4]
 801f71e:	653b      	str	r3, [r7, #80]	@ 0x50
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	2250      	movs	r2, #80	@ 0x50
 801f724:	5a9b      	ldrh	r3, [r3, r2]
 801f726:	b29b      	uxth	r3, r3
 801f728:	001a      	movs	r2, r3
 801f72a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f72c:	189b      	adds	r3, r3, r2
 801f72e:	653b      	str	r3, [r7, #80]	@ 0x50
 801f730:	683b      	ldr	r3, [r7, #0]
 801f732:	781b      	ldrb	r3, [r3, #0]
 801f734:	00da      	lsls	r2, r3, #3
 801f736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f738:	18d3      	adds	r3, r2, r3
 801f73a:	4a93      	ldr	r2, [pc, #588]	@ (801f988 <USB_EPStartXfer+0x748>)
 801f73c:	4694      	mov	ip, r2
 801f73e:	4463      	add	r3, ip
 801f740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f742:	1d7b      	adds	r3, r7, #5
 801f744:	33ff      	adds	r3, #255	@ 0xff
 801f746:	681b      	ldr	r3, [r3, #0]
 801f748:	b29a      	uxth	r2, r3
 801f74a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f74c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801f74e:	2076      	movs	r0, #118	@ 0x76
 801f750:	183b      	adds	r3, r7, r0
 801f752:	683a      	ldr	r2, [r7, #0]
 801f754:	8912      	ldrh	r2, [r2, #8]
 801f756:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f758:	683b      	ldr	r3, [r7, #0]
 801f75a:	6959      	ldr	r1, [r3, #20]
 801f75c:	1d7b      	adds	r3, r7, #5
 801f75e:	33ff      	adds	r3, #255	@ 0xff
 801f760:	681b      	ldr	r3, [r3, #0]
 801f762:	b29c      	uxth	r4, r3
 801f764:	183b      	adds	r3, r7, r0
 801f766:	881a      	ldrh	r2, [r3, #0]
 801f768:	6878      	ldr	r0, [r7, #4]
 801f76a:	0023      	movs	r3, r4
 801f76c:	f000 ffda 	bl	8020724 <USB_WritePMA>
            ep->xfer_buff += len;
 801f770:	683b      	ldr	r3, [r7, #0]
 801f772:	695a      	ldr	r2, [r3, #20]
 801f774:	1d7b      	adds	r3, r7, #5
 801f776:	33ff      	adds	r3, #255	@ 0xff
 801f778:	681b      	ldr	r3, [r3, #0]
 801f77a:	18d2      	adds	r2, r2, r3
 801f77c:	683b      	ldr	r3, [r7, #0]
 801f77e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801f780:	683b      	ldr	r3, [r7, #0]
 801f782:	6a1a      	ldr	r2, [r3, #32]
 801f784:	683b      	ldr	r3, [r7, #0]
 801f786:	691b      	ldr	r3, [r3, #16]
 801f788:	429a      	cmp	r2, r3
 801f78a:	d908      	bls.n	801f79e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801f78c:	683b      	ldr	r3, [r7, #0]
 801f78e:	6a1a      	ldr	r2, [r3, #32]
 801f790:	1d7b      	adds	r3, r7, #5
 801f792:	33ff      	adds	r3, #255	@ 0xff
 801f794:	681b      	ldr	r3, [r3, #0]
 801f796:	1ad2      	subs	r2, r2, r3
 801f798:	683b      	ldr	r3, [r7, #0]
 801f79a:	621a      	str	r2, [r3, #32]
 801f79c:	e007      	b.n	801f7ae <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801f79e:	683b      	ldr	r3, [r7, #0]
 801f7a0:	6a1b      	ldr	r3, [r3, #32]
 801f7a2:	1d7a      	adds	r2, r7, #5
 801f7a4:	32ff      	adds	r2, #255	@ 0xff
 801f7a6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801f7a8:	683b      	ldr	r3, [r7, #0]
 801f7aa:	2200      	movs	r2, #0
 801f7ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f7ae:	687b      	ldr	r3, [r7, #4]
 801f7b0:	643b      	str	r3, [r7, #64]	@ 0x40
 801f7b2:	683b      	ldr	r3, [r7, #0]
 801f7b4:	785b      	ldrb	r3, [r3, #1]
 801f7b6:	2b00      	cmp	r3, #0
 801f7b8:	d000      	beq.n	801f7bc <USB_EPStartXfer+0x57c>
 801f7ba:	e070      	b.n	801f89e <USB_EPStartXfer+0x65e>
 801f7bc:	687b      	ldr	r3, [r7, #4]
 801f7be:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	2250      	movs	r2, #80	@ 0x50
 801f7c4:	5a9b      	ldrh	r3, [r3, r2]
 801f7c6:	b29b      	uxth	r3, r3
 801f7c8:	001a      	movs	r2, r3
 801f7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f7cc:	189b      	adds	r3, r3, r2
 801f7ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f7d0:	683b      	ldr	r3, [r7, #0]
 801f7d2:	781b      	ldrb	r3, [r3, #0]
 801f7d4:	00da      	lsls	r2, r3, #3
 801f7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f7d8:	18d3      	adds	r3, r2, r3
 801f7da:	4a6d      	ldr	r2, [pc, #436]	@ (801f990 <USB_EPStartXfer+0x750>)
 801f7dc:	4694      	mov	ip, r2
 801f7de:	4463      	add	r3, ip
 801f7e0:	637b      	str	r3, [r7, #52]	@ 0x34
 801f7e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f7e4:	881b      	ldrh	r3, [r3, #0]
 801f7e6:	b29b      	uxth	r3, r3
 801f7e8:	059b      	lsls	r3, r3, #22
 801f7ea:	0d9b      	lsrs	r3, r3, #22
 801f7ec:	b29a      	uxth	r2, r3
 801f7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f7f0:	801a      	strh	r2, [r3, #0]
 801f7f2:	1d7b      	adds	r3, r7, #5
 801f7f4:	33ff      	adds	r3, #255	@ 0xff
 801f7f6:	681b      	ldr	r3, [r3, #0]
 801f7f8:	2b3e      	cmp	r3, #62	@ 0x3e
 801f7fa:	d922      	bls.n	801f842 <USB_EPStartXfer+0x602>
 801f7fc:	1d7b      	adds	r3, r7, #5
 801f7fe:	33ff      	adds	r3, #255	@ 0xff
 801f800:	681b      	ldr	r3, [r3, #0]
 801f802:	095b      	lsrs	r3, r3, #5
 801f804:	21f4      	movs	r1, #244	@ 0xf4
 801f806:	187a      	adds	r2, r7, r1
 801f808:	6013      	str	r3, [r2, #0]
 801f80a:	1d7b      	adds	r3, r7, #5
 801f80c:	33ff      	adds	r3, #255	@ 0xff
 801f80e:	681b      	ldr	r3, [r3, #0]
 801f810:	221f      	movs	r2, #31
 801f812:	4013      	ands	r3, r2
 801f814:	d104      	bne.n	801f820 <USB_EPStartXfer+0x5e0>
 801f816:	187b      	adds	r3, r7, r1
 801f818:	681b      	ldr	r3, [r3, #0]
 801f81a:	3b01      	subs	r3, #1
 801f81c:	187a      	adds	r2, r7, r1
 801f81e:	6013      	str	r3, [r2, #0]
 801f820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f822:	881b      	ldrh	r3, [r3, #0]
 801f824:	b29a      	uxth	r2, r3
 801f826:	23f4      	movs	r3, #244	@ 0xf4
 801f828:	18fb      	adds	r3, r7, r3
 801f82a:	681b      	ldr	r3, [r3, #0]
 801f82c:	b29b      	uxth	r3, r3
 801f82e:	029b      	lsls	r3, r3, #10
 801f830:	b29b      	uxth	r3, r3
 801f832:	4313      	orrs	r3, r2
 801f834:	b29b      	uxth	r3, r3
 801f836:	4a55      	ldr	r2, [pc, #340]	@ (801f98c <USB_EPStartXfer+0x74c>)
 801f838:	4313      	orrs	r3, r2
 801f83a:	b29a      	uxth	r2, r3
 801f83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f83e:	801a      	strh	r2, [r3, #0]
 801f840:	e048      	b.n	801f8d4 <USB_EPStartXfer+0x694>
 801f842:	1d7b      	adds	r3, r7, #5
 801f844:	33ff      	adds	r3, #255	@ 0xff
 801f846:	681b      	ldr	r3, [r3, #0]
 801f848:	2b00      	cmp	r3, #0
 801f84a:	d108      	bne.n	801f85e <USB_EPStartXfer+0x61e>
 801f84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f84e:	881b      	ldrh	r3, [r3, #0]
 801f850:	b29b      	uxth	r3, r3
 801f852:	4a4e      	ldr	r2, [pc, #312]	@ (801f98c <USB_EPStartXfer+0x74c>)
 801f854:	4313      	orrs	r3, r2
 801f856:	b29a      	uxth	r2, r3
 801f858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f85a:	801a      	strh	r2, [r3, #0]
 801f85c:	e03a      	b.n	801f8d4 <USB_EPStartXfer+0x694>
 801f85e:	1d7b      	adds	r3, r7, #5
 801f860:	33ff      	adds	r3, #255	@ 0xff
 801f862:	681b      	ldr	r3, [r3, #0]
 801f864:	085b      	lsrs	r3, r3, #1
 801f866:	21f4      	movs	r1, #244	@ 0xf4
 801f868:	187a      	adds	r2, r7, r1
 801f86a:	6013      	str	r3, [r2, #0]
 801f86c:	1d7b      	adds	r3, r7, #5
 801f86e:	33ff      	adds	r3, #255	@ 0xff
 801f870:	681b      	ldr	r3, [r3, #0]
 801f872:	2201      	movs	r2, #1
 801f874:	4013      	ands	r3, r2
 801f876:	d004      	beq.n	801f882 <USB_EPStartXfer+0x642>
 801f878:	187b      	adds	r3, r7, r1
 801f87a:	681b      	ldr	r3, [r3, #0]
 801f87c:	3301      	adds	r3, #1
 801f87e:	187a      	adds	r2, r7, r1
 801f880:	6013      	str	r3, [r2, #0]
 801f882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f884:	881b      	ldrh	r3, [r3, #0]
 801f886:	b29a      	uxth	r2, r3
 801f888:	23f4      	movs	r3, #244	@ 0xf4
 801f88a:	18fb      	adds	r3, r7, r3
 801f88c:	681b      	ldr	r3, [r3, #0]
 801f88e:	b29b      	uxth	r3, r3
 801f890:	029b      	lsls	r3, r3, #10
 801f892:	b29b      	uxth	r3, r3
 801f894:	4313      	orrs	r3, r2
 801f896:	b29a      	uxth	r2, r3
 801f898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f89a:	801a      	strh	r2, [r3, #0]
 801f89c:	e01a      	b.n	801f8d4 <USB_EPStartXfer+0x694>
 801f89e:	683b      	ldr	r3, [r7, #0]
 801f8a0:	785b      	ldrb	r3, [r3, #1]
 801f8a2:	2b01      	cmp	r3, #1
 801f8a4:	d116      	bne.n	801f8d4 <USB_EPStartXfer+0x694>
 801f8a6:	687b      	ldr	r3, [r7, #4]
 801f8a8:	2250      	movs	r2, #80	@ 0x50
 801f8aa:	5a9b      	ldrh	r3, [r3, r2]
 801f8ac:	b29b      	uxth	r3, r3
 801f8ae:	001a      	movs	r2, r3
 801f8b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f8b2:	189b      	adds	r3, r3, r2
 801f8b4:	643b      	str	r3, [r7, #64]	@ 0x40
 801f8b6:	683b      	ldr	r3, [r7, #0]
 801f8b8:	781b      	ldrb	r3, [r3, #0]
 801f8ba:	00da      	lsls	r2, r3, #3
 801f8bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f8be:	18d3      	adds	r3, r2, r3
 801f8c0:	4a33      	ldr	r2, [pc, #204]	@ (801f990 <USB_EPStartXfer+0x750>)
 801f8c2:	4694      	mov	ip, r2
 801f8c4:	4463      	add	r3, ip
 801f8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f8c8:	1d7b      	adds	r3, r7, #5
 801f8ca:	33ff      	adds	r3, #255	@ 0xff
 801f8cc:	681b      	ldr	r3, [r3, #0]
 801f8ce:	b29a      	uxth	r2, r3
 801f8d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f8d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801f8d4:	2076      	movs	r0, #118	@ 0x76
 801f8d6:	183b      	adds	r3, r7, r0
 801f8d8:	683a      	ldr	r2, [r7, #0]
 801f8da:	8952      	ldrh	r2, [r2, #10]
 801f8dc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f8de:	683b      	ldr	r3, [r7, #0]
 801f8e0:	6959      	ldr	r1, [r3, #20]
 801f8e2:	1d7b      	adds	r3, r7, #5
 801f8e4:	33ff      	adds	r3, #255	@ 0xff
 801f8e6:	681b      	ldr	r3, [r3, #0]
 801f8e8:	b29c      	uxth	r4, r3
 801f8ea:	183b      	adds	r3, r7, r0
 801f8ec:	881a      	ldrh	r2, [r3, #0]
 801f8ee:	6878      	ldr	r0, [r7, #4]
 801f8f0:	0023      	movs	r3, r4
 801f8f2:	f000 ff17 	bl	8020724 <USB_WritePMA>
 801f8f6:	e1b6      	b.n	801fc66 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801f8f8:	683b      	ldr	r3, [r7, #0]
 801f8fa:	6a1b      	ldr	r3, [r3, #32]
 801f8fc:	1d7a      	adds	r2, r7, #5
 801f8fe:	32ff      	adds	r2, #255	@ 0xff
 801f900:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801f902:	687a      	ldr	r2, [r7, #4]
 801f904:	683b      	ldr	r3, [r7, #0]
 801f906:	781b      	ldrb	r3, [r3, #0]
 801f908:	009b      	lsls	r3, r3, #2
 801f90a:	18d3      	adds	r3, r2, r3
 801f90c:	881b      	ldrh	r3, [r3, #0]
 801f90e:	b29a      	uxth	r2, r3
 801f910:	2062      	movs	r0, #98	@ 0x62
 801f912:	183b      	adds	r3, r7, r0
 801f914:	491f      	ldr	r1, [pc, #124]	@ (801f994 <USB_EPStartXfer+0x754>)
 801f916:	400a      	ands	r2, r1
 801f918:	801a      	strh	r2, [r3, #0]
 801f91a:	687a      	ldr	r2, [r7, #4]
 801f91c:	683b      	ldr	r3, [r7, #0]
 801f91e:	781b      	ldrb	r3, [r3, #0]
 801f920:	009b      	lsls	r3, r3, #2
 801f922:	18d3      	adds	r3, r2, r3
 801f924:	183a      	adds	r2, r7, r0
 801f926:	8812      	ldrh	r2, [r2, #0]
 801f928:	491b      	ldr	r1, [pc, #108]	@ (801f998 <USB_EPStartXfer+0x758>)
 801f92a:	430a      	orrs	r2, r1
 801f92c:	b292      	uxth	r2, r2
 801f92e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801f930:	687b      	ldr	r3, [r7, #4]
 801f932:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f934:	687b      	ldr	r3, [r7, #4]
 801f936:	2250      	movs	r2, #80	@ 0x50
 801f938:	5a9b      	ldrh	r3, [r3, r2]
 801f93a:	b29b      	uxth	r3, r3
 801f93c:	001a      	movs	r2, r3
 801f93e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f940:	189b      	adds	r3, r3, r2
 801f942:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f944:	683b      	ldr	r3, [r7, #0]
 801f946:	781b      	ldrb	r3, [r3, #0]
 801f948:	00da      	lsls	r2, r3, #3
 801f94a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f94c:	18d3      	adds	r3, r2, r3
 801f94e:	4a0e      	ldr	r2, [pc, #56]	@ (801f988 <USB_EPStartXfer+0x748>)
 801f950:	4694      	mov	ip, r2
 801f952:	4463      	add	r3, ip
 801f954:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f956:	1d7b      	adds	r3, r7, #5
 801f958:	33ff      	adds	r3, #255	@ 0xff
 801f95a:	681b      	ldr	r3, [r3, #0]
 801f95c:	b29a      	uxth	r2, r3
 801f95e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f960:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801f962:	2076      	movs	r0, #118	@ 0x76
 801f964:	183b      	adds	r3, r7, r0
 801f966:	683a      	ldr	r2, [r7, #0]
 801f968:	8912      	ldrh	r2, [r2, #8]
 801f96a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f96c:	683b      	ldr	r3, [r7, #0]
 801f96e:	6959      	ldr	r1, [r3, #20]
 801f970:	1d7b      	adds	r3, r7, #5
 801f972:	33ff      	adds	r3, #255	@ 0xff
 801f974:	681b      	ldr	r3, [r3, #0]
 801f976:	b29c      	uxth	r4, r3
 801f978:	183b      	adds	r3, r7, r0
 801f97a:	881a      	ldrh	r2, [r3, #0]
 801f97c:	6878      	ldr	r0, [r7, #4]
 801f97e:	0023      	movs	r3, r4
 801f980:	f000 fed0 	bl	8020724 <USB_WritePMA>
 801f984:	e16f      	b.n	801fc66 <USB_EPStartXfer+0xa26>
 801f986:	46c0      	nop			@ (mov r8, r8)
 801f988:	00000402 	.word	0x00000402
 801f98c:	ffff8000 	.word	0xffff8000
 801f990:	00000406 	.word	0x00000406
 801f994:	ffff8e8f 	.word	0xffff8e8f
 801f998:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801f99c:	683b      	ldr	r3, [r7, #0]
 801f99e:	6a1a      	ldr	r2, [r3, #32]
 801f9a0:	1d7b      	adds	r3, r7, #5
 801f9a2:	33ff      	adds	r3, #255	@ 0xff
 801f9a4:	681b      	ldr	r3, [r3, #0]
 801f9a6:	1ad2      	subs	r2, r2, r3
 801f9a8:	683b      	ldr	r3, [r7, #0]
 801f9aa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801f9ac:	687a      	ldr	r2, [r7, #4]
 801f9ae:	683b      	ldr	r3, [r7, #0]
 801f9b0:	781b      	ldrb	r3, [r3, #0]
 801f9b2:	009b      	lsls	r3, r3, #2
 801f9b4:	18d3      	adds	r3, r2, r3
 801f9b6:	881b      	ldrh	r3, [r3, #0]
 801f9b8:	b29b      	uxth	r3, r3
 801f9ba:	001a      	movs	r2, r3
 801f9bc:	2340      	movs	r3, #64	@ 0x40
 801f9be:	4013      	ands	r3, r2
 801f9c0:	d100      	bne.n	801f9c4 <USB_EPStartXfer+0x784>
 801f9c2:	e0a4      	b.n	801fb0e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f9c4:	687b      	ldr	r3, [r7, #4]
 801f9c6:	673b      	str	r3, [r7, #112]	@ 0x70
 801f9c8:	683b      	ldr	r3, [r7, #0]
 801f9ca:	785b      	ldrb	r3, [r3, #1]
 801f9cc:	2b00      	cmp	r3, #0
 801f9ce:	d000      	beq.n	801f9d2 <USB_EPStartXfer+0x792>
 801f9d0:	e070      	b.n	801fab4 <USB_EPStartXfer+0x874>
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f9d6:	687b      	ldr	r3, [r7, #4]
 801f9d8:	2250      	movs	r2, #80	@ 0x50
 801f9da:	5a9b      	ldrh	r3, [r3, r2]
 801f9dc:	b29b      	uxth	r3, r3
 801f9de:	001a      	movs	r2, r3
 801f9e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f9e2:	189b      	adds	r3, r3, r2
 801f9e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f9e6:	683b      	ldr	r3, [r7, #0]
 801f9e8:	781b      	ldrb	r3, [r3, #0]
 801f9ea:	00da      	lsls	r2, r3, #3
 801f9ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f9ee:	18d3      	adds	r3, r2, r3
 801f9f0:	4abc      	ldr	r2, [pc, #752]	@ (801fce4 <USB_EPStartXfer+0xaa4>)
 801f9f2:	4694      	mov	ip, r2
 801f9f4:	4463      	add	r3, ip
 801f9f6:	667b      	str	r3, [r7, #100]	@ 0x64
 801f9f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f9fa:	881b      	ldrh	r3, [r3, #0]
 801f9fc:	b29b      	uxth	r3, r3
 801f9fe:	059b      	lsls	r3, r3, #22
 801fa00:	0d9b      	lsrs	r3, r3, #22
 801fa02:	b29a      	uxth	r2, r3
 801fa04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fa06:	801a      	strh	r2, [r3, #0]
 801fa08:	1d7b      	adds	r3, r7, #5
 801fa0a:	33ff      	adds	r3, #255	@ 0xff
 801fa0c:	681b      	ldr	r3, [r3, #0]
 801fa0e:	2b3e      	cmp	r3, #62	@ 0x3e
 801fa10:	d922      	bls.n	801fa58 <USB_EPStartXfer+0x818>
 801fa12:	1d7b      	adds	r3, r7, #5
 801fa14:	33ff      	adds	r3, #255	@ 0xff
 801fa16:	681b      	ldr	r3, [r3, #0]
 801fa18:	095b      	lsrs	r3, r3, #5
 801fa1a:	21f0      	movs	r1, #240	@ 0xf0
 801fa1c:	187a      	adds	r2, r7, r1
 801fa1e:	6013      	str	r3, [r2, #0]
 801fa20:	1d7b      	adds	r3, r7, #5
 801fa22:	33ff      	adds	r3, #255	@ 0xff
 801fa24:	681b      	ldr	r3, [r3, #0]
 801fa26:	221f      	movs	r2, #31
 801fa28:	4013      	ands	r3, r2
 801fa2a:	d104      	bne.n	801fa36 <USB_EPStartXfer+0x7f6>
 801fa2c:	187b      	adds	r3, r7, r1
 801fa2e:	681b      	ldr	r3, [r3, #0]
 801fa30:	3b01      	subs	r3, #1
 801fa32:	187a      	adds	r2, r7, r1
 801fa34:	6013      	str	r3, [r2, #0]
 801fa36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fa38:	881b      	ldrh	r3, [r3, #0]
 801fa3a:	b29a      	uxth	r2, r3
 801fa3c:	23f0      	movs	r3, #240	@ 0xf0
 801fa3e:	18fb      	adds	r3, r7, r3
 801fa40:	681b      	ldr	r3, [r3, #0]
 801fa42:	b29b      	uxth	r3, r3
 801fa44:	029b      	lsls	r3, r3, #10
 801fa46:	b29b      	uxth	r3, r3
 801fa48:	4313      	orrs	r3, r2
 801fa4a:	b29b      	uxth	r3, r3
 801fa4c:	4aa6      	ldr	r2, [pc, #664]	@ (801fce8 <USB_EPStartXfer+0xaa8>)
 801fa4e:	4313      	orrs	r3, r2
 801fa50:	b29a      	uxth	r2, r3
 801fa52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fa54:	801a      	strh	r2, [r3, #0]
 801fa56:	e048      	b.n	801faea <USB_EPStartXfer+0x8aa>
 801fa58:	1d7b      	adds	r3, r7, #5
 801fa5a:	33ff      	adds	r3, #255	@ 0xff
 801fa5c:	681b      	ldr	r3, [r3, #0]
 801fa5e:	2b00      	cmp	r3, #0
 801fa60:	d108      	bne.n	801fa74 <USB_EPStartXfer+0x834>
 801fa62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fa64:	881b      	ldrh	r3, [r3, #0]
 801fa66:	b29b      	uxth	r3, r3
 801fa68:	4a9f      	ldr	r2, [pc, #636]	@ (801fce8 <USB_EPStartXfer+0xaa8>)
 801fa6a:	4313      	orrs	r3, r2
 801fa6c:	b29a      	uxth	r2, r3
 801fa6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fa70:	801a      	strh	r2, [r3, #0]
 801fa72:	e03a      	b.n	801faea <USB_EPStartXfer+0x8aa>
 801fa74:	1d7b      	adds	r3, r7, #5
 801fa76:	33ff      	adds	r3, #255	@ 0xff
 801fa78:	681b      	ldr	r3, [r3, #0]
 801fa7a:	085b      	lsrs	r3, r3, #1
 801fa7c:	21f0      	movs	r1, #240	@ 0xf0
 801fa7e:	187a      	adds	r2, r7, r1
 801fa80:	6013      	str	r3, [r2, #0]
 801fa82:	1d7b      	adds	r3, r7, #5
 801fa84:	33ff      	adds	r3, #255	@ 0xff
 801fa86:	681b      	ldr	r3, [r3, #0]
 801fa88:	2201      	movs	r2, #1
 801fa8a:	4013      	ands	r3, r2
 801fa8c:	d004      	beq.n	801fa98 <USB_EPStartXfer+0x858>
 801fa8e:	187b      	adds	r3, r7, r1
 801fa90:	681b      	ldr	r3, [r3, #0]
 801fa92:	3301      	adds	r3, #1
 801fa94:	187a      	adds	r2, r7, r1
 801fa96:	6013      	str	r3, [r2, #0]
 801fa98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fa9a:	881b      	ldrh	r3, [r3, #0]
 801fa9c:	b29a      	uxth	r2, r3
 801fa9e:	23f0      	movs	r3, #240	@ 0xf0
 801faa0:	18fb      	adds	r3, r7, r3
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	b29b      	uxth	r3, r3
 801faa6:	029b      	lsls	r3, r3, #10
 801faa8:	b29b      	uxth	r3, r3
 801faaa:	4313      	orrs	r3, r2
 801faac:	b29a      	uxth	r2, r3
 801faae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fab0:	801a      	strh	r2, [r3, #0]
 801fab2:	e01a      	b.n	801faea <USB_EPStartXfer+0x8aa>
 801fab4:	683b      	ldr	r3, [r7, #0]
 801fab6:	785b      	ldrb	r3, [r3, #1]
 801fab8:	2b01      	cmp	r3, #1
 801faba:	d116      	bne.n	801faea <USB_EPStartXfer+0x8aa>
 801fabc:	687b      	ldr	r3, [r7, #4]
 801fabe:	2250      	movs	r2, #80	@ 0x50
 801fac0:	5a9b      	ldrh	r3, [r3, r2]
 801fac2:	b29b      	uxth	r3, r3
 801fac4:	001a      	movs	r2, r3
 801fac6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801fac8:	189b      	adds	r3, r3, r2
 801faca:	673b      	str	r3, [r7, #112]	@ 0x70
 801facc:	683b      	ldr	r3, [r7, #0]
 801face:	781b      	ldrb	r3, [r3, #0]
 801fad0:	00da      	lsls	r2, r3, #3
 801fad2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801fad4:	18d3      	adds	r3, r2, r3
 801fad6:	4a83      	ldr	r2, [pc, #524]	@ (801fce4 <USB_EPStartXfer+0xaa4>)
 801fad8:	4694      	mov	ip, r2
 801fada:	4463      	add	r3, ip
 801fadc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801fade:	1d7b      	adds	r3, r7, #5
 801fae0:	33ff      	adds	r3, #255	@ 0xff
 801fae2:	681b      	ldr	r3, [r3, #0]
 801fae4:	b29a      	uxth	r2, r3
 801fae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801fae8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801faea:	2076      	movs	r0, #118	@ 0x76
 801faec:	183b      	adds	r3, r7, r0
 801faee:	683a      	ldr	r2, [r7, #0]
 801faf0:	8952      	ldrh	r2, [r2, #10]
 801faf2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801faf4:	683b      	ldr	r3, [r7, #0]
 801faf6:	6959      	ldr	r1, [r3, #20]
 801faf8:	1d7b      	adds	r3, r7, #5
 801fafa:	33ff      	adds	r3, #255	@ 0xff
 801fafc:	681b      	ldr	r3, [r3, #0]
 801fafe:	b29c      	uxth	r4, r3
 801fb00:	183b      	adds	r3, r7, r0
 801fb02:	881a      	ldrh	r2, [r3, #0]
 801fb04:	6878      	ldr	r0, [r7, #4]
 801fb06:	0023      	movs	r3, r4
 801fb08:	f000 fe0c 	bl	8020724 <USB_WritePMA>
 801fb0c:	e0ab      	b.n	801fc66 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801fb0e:	683b      	ldr	r3, [r7, #0]
 801fb10:	785b      	ldrb	r3, [r3, #1]
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d000      	beq.n	801fb18 <USB_EPStartXfer+0x8d8>
 801fb16:	e070      	b.n	801fbfa <USB_EPStartXfer+0x9ba>
 801fb18:	687b      	ldr	r3, [r7, #4]
 801fb1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801fb1c:	687b      	ldr	r3, [r7, #4]
 801fb1e:	2250      	movs	r2, #80	@ 0x50
 801fb20:	5a9b      	ldrh	r3, [r3, r2]
 801fb22:	b29b      	uxth	r3, r3
 801fb24:	001a      	movs	r2, r3
 801fb26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801fb28:	189b      	adds	r3, r3, r2
 801fb2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801fb2c:	683b      	ldr	r3, [r7, #0]
 801fb2e:	781b      	ldrb	r3, [r3, #0]
 801fb30:	00da      	lsls	r2, r3, #3
 801fb32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801fb34:	18d3      	adds	r3, r2, r3
 801fb36:	4a6d      	ldr	r2, [pc, #436]	@ (801fcec <USB_EPStartXfer+0xaac>)
 801fb38:	4694      	mov	ip, r2
 801fb3a:	4463      	add	r3, ip
 801fb3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801fb3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fb40:	881b      	ldrh	r3, [r3, #0]
 801fb42:	b29b      	uxth	r3, r3
 801fb44:	059b      	lsls	r3, r3, #22
 801fb46:	0d9b      	lsrs	r3, r3, #22
 801fb48:	b29a      	uxth	r2, r3
 801fb4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fb4c:	801a      	strh	r2, [r3, #0]
 801fb4e:	1d7b      	adds	r3, r7, #5
 801fb50:	33ff      	adds	r3, #255	@ 0xff
 801fb52:	681b      	ldr	r3, [r3, #0]
 801fb54:	2b3e      	cmp	r3, #62	@ 0x3e
 801fb56:	d922      	bls.n	801fb9e <USB_EPStartXfer+0x95e>
 801fb58:	1d7b      	adds	r3, r7, #5
 801fb5a:	33ff      	adds	r3, #255	@ 0xff
 801fb5c:	681b      	ldr	r3, [r3, #0]
 801fb5e:	095b      	lsrs	r3, r3, #5
 801fb60:	21ec      	movs	r1, #236	@ 0xec
 801fb62:	187a      	adds	r2, r7, r1
 801fb64:	6013      	str	r3, [r2, #0]
 801fb66:	1d7b      	adds	r3, r7, #5
 801fb68:	33ff      	adds	r3, #255	@ 0xff
 801fb6a:	681b      	ldr	r3, [r3, #0]
 801fb6c:	221f      	movs	r2, #31
 801fb6e:	4013      	ands	r3, r2
 801fb70:	d104      	bne.n	801fb7c <USB_EPStartXfer+0x93c>
 801fb72:	187b      	adds	r3, r7, r1
 801fb74:	681b      	ldr	r3, [r3, #0]
 801fb76:	3b01      	subs	r3, #1
 801fb78:	187a      	adds	r2, r7, r1
 801fb7a:	6013      	str	r3, [r2, #0]
 801fb7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fb7e:	881b      	ldrh	r3, [r3, #0]
 801fb80:	b29a      	uxth	r2, r3
 801fb82:	23ec      	movs	r3, #236	@ 0xec
 801fb84:	18fb      	adds	r3, r7, r3
 801fb86:	681b      	ldr	r3, [r3, #0]
 801fb88:	b29b      	uxth	r3, r3
 801fb8a:	029b      	lsls	r3, r3, #10
 801fb8c:	b29b      	uxth	r3, r3
 801fb8e:	4313      	orrs	r3, r2
 801fb90:	b29b      	uxth	r3, r3
 801fb92:	4a55      	ldr	r2, [pc, #340]	@ (801fce8 <USB_EPStartXfer+0xaa8>)
 801fb94:	4313      	orrs	r3, r2
 801fb96:	b29a      	uxth	r2, r3
 801fb98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fb9a:	801a      	strh	r2, [r3, #0]
 801fb9c:	e052      	b.n	801fc44 <USB_EPStartXfer+0xa04>
 801fb9e:	1d7b      	adds	r3, r7, #5
 801fba0:	33ff      	adds	r3, #255	@ 0xff
 801fba2:	681b      	ldr	r3, [r3, #0]
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	d108      	bne.n	801fbba <USB_EPStartXfer+0x97a>
 801fba8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fbaa:	881b      	ldrh	r3, [r3, #0]
 801fbac:	b29b      	uxth	r3, r3
 801fbae:	4a4e      	ldr	r2, [pc, #312]	@ (801fce8 <USB_EPStartXfer+0xaa8>)
 801fbb0:	4313      	orrs	r3, r2
 801fbb2:	b29a      	uxth	r2, r3
 801fbb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fbb6:	801a      	strh	r2, [r3, #0]
 801fbb8:	e044      	b.n	801fc44 <USB_EPStartXfer+0xa04>
 801fbba:	1d7b      	adds	r3, r7, #5
 801fbbc:	33ff      	adds	r3, #255	@ 0xff
 801fbbe:	681b      	ldr	r3, [r3, #0]
 801fbc0:	085b      	lsrs	r3, r3, #1
 801fbc2:	21ec      	movs	r1, #236	@ 0xec
 801fbc4:	187a      	adds	r2, r7, r1
 801fbc6:	6013      	str	r3, [r2, #0]
 801fbc8:	1d7b      	adds	r3, r7, #5
 801fbca:	33ff      	adds	r3, #255	@ 0xff
 801fbcc:	681b      	ldr	r3, [r3, #0]
 801fbce:	2201      	movs	r2, #1
 801fbd0:	4013      	ands	r3, r2
 801fbd2:	d004      	beq.n	801fbde <USB_EPStartXfer+0x99e>
 801fbd4:	187b      	adds	r3, r7, r1
 801fbd6:	681b      	ldr	r3, [r3, #0]
 801fbd8:	3301      	adds	r3, #1
 801fbda:	187a      	adds	r2, r7, r1
 801fbdc:	6013      	str	r3, [r2, #0]
 801fbde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fbe0:	881b      	ldrh	r3, [r3, #0]
 801fbe2:	b29a      	uxth	r2, r3
 801fbe4:	23ec      	movs	r3, #236	@ 0xec
 801fbe6:	18fb      	adds	r3, r7, r3
 801fbe8:	681b      	ldr	r3, [r3, #0]
 801fbea:	b29b      	uxth	r3, r3
 801fbec:	029b      	lsls	r3, r3, #10
 801fbee:	b29b      	uxth	r3, r3
 801fbf0:	4313      	orrs	r3, r2
 801fbf2:	b29a      	uxth	r2, r3
 801fbf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fbf6:	801a      	strh	r2, [r3, #0]
 801fbf8:	e024      	b.n	801fc44 <USB_EPStartXfer+0xa04>
 801fbfa:	683b      	ldr	r3, [r7, #0]
 801fbfc:	785b      	ldrb	r3, [r3, #1]
 801fbfe:	2b01      	cmp	r3, #1
 801fc00:	d120      	bne.n	801fc44 <USB_EPStartXfer+0xa04>
 801fc02:	687b      	ldr	r3, [r7, #4]
 801fc04:	2184      	movs	r1, #132	@ 0x84
 801fc06:	187a      	adds	r2, r7, r1
 801fc08:	6013      	str	r3, [r2, #0]
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	2250      	movs	r2, #80	@ 0x50
 801fc0e:	5a9b      	ldrh	r3, [r3, r2]
 801fc10:	b29b      	uxth	r3, r3
 801fc12:	001a      	movs	r2, r3
 801fc14:	187b      	adds	r3, r7, r1
 801fc16:	681b      	ldr	r3, [r3, #0]
 801fc18:	189b      	adds	r3, r3, r2
 801fc1a:	187a      	adds	r2, r7, r1
 801fc1c:	6013      	str	r3, [r2, #0]
 801fc1e:	683b      	ldr	r3, [r7, #0]
 801fc20:	781b      	ldrb	r3, [r3, #0]
 801fc22:	00da      	lsls	r2, r3, #3
 801fc24:	187b      	adds	r3, r7, r1
 801fc26:	681b      	ldr	r3, [r3, #0]
 801fc28:	18d3      	adds	r3, r2, r3
 801fc2a:	4a30      	ldr	r2, [pc, #192]	@ (801fcec <USB_EPStartXfer+0xaac>)
 801fc2c:	4694      	mov	ip, r2
 801fc2e:	4463      	add	r3, ip
 801fc30:	2180      	movs	r1, #128	@ 0x80
 801fc32:	187a      	adds	r2, r7, r1
 801fc34:	6013      	str	r3, [r2, #0]
 801fc36:	1d7b      	adds	r3, r7, #5
 801fc38:	33ff      	adds	r3, #255	@ 0xff
 801fc3a:	681b      	ldr	r3, [r3, #0]
 801fc3c:	b29a      	uxth	r2, r3
 801fc3e:	187b      	adds	r3, r7, r1
 801fc40:	681b      	ldr	r3, [r3, #0]
 801fc42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801fc44:	2076      	movs	r0, #118	@ 0x76
 801fc46:	183b      	adds	r3, r7, r0
 801fc48:	683a      	ldr	r2, [r7, #0]
 801fc4a:	8912      	ldrh	r2, [r2, #8]
 801fc4c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801fc4e:	683b      	ldr	r3, [r7, #0]
 801fc50:	6959      	ldr	r1, [r3, #20]
 801fc52:	1d7b      	adds	r3, r7, #5
 801fc54:	33ff      	adds	r3, #255	@ 0xff
 801fc56:	681b      	ldr	r3, [r3, #0]
 801fc58:	b29c      	uxth	r4, r3
 801fc5a:	183b      	adds	r3, r7, r0
 801fc5c:	881a      	ldrh	r2, [r3, #0]
 801fc5e:	6878      	ldr	r0, [r7, #4]
 801fc60:	0023      	movs	r3, r4
 801fc62:	f000 fd5f 	bl	8020724 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801fc66:	687a      	ldr	r2, [r7, #4]
 801fc68:	683b      	ldr	r3, [r7, #0]
 801fc6a:	781b      	ldrb	r3, [r3, #0]
 801fc6c:	009b      	lsls	r3, r3, #2
 801fc6e:	18d3      	adds	r3, r2, r3
 801fc70:	881b      	ldrh	r3, [r3, #0]
 801fc72:	b29a      	uxth	r2, r3
 801fc74:	200a      	movs	r0, #10
 801fc76:	183b      	adds	r3, r7, r0
 801fc78:	491d      	ldr	r1, [pc, #116]	@ (801fcf0 <USB_EPStartXfer+0xab0>)
 801fc7a:	400a      	ands	r2, r1
 801fc7c:	801a      	strh	r2, [r3, #0]
 801fc7e:	183b      	adds	r3, r7, r0
 801fc80:	183a      	adds	r2, r7, r0
 801fc82:	8812      	ldrh	r2, [r2, #0]
 801fc84:	2110      	movs	r1, #16
 801fc86:	404a      	eors	r2, r1
 801fc88:	801a      	strh	r2, [r3, #0]
 801fc8a:	183b      	adds	r3, r7, r0
 801fc8c:	183a      	adds	r2, r7, r0
 801fc8e:	8812      	ldrh	r2, [r2, #0]
 801fc90:	2120      	movs	r1, #32
 801fc92:	404a      	eors	r2, r1
 801fc94:	801a      	strh	r2, [r3, #0]
 801fc96:	687a      	ldr	r2, [r7, #4]
 801fc98:	683b      	ldr	r3, [r7, #0]
 801fc9a:	781b      	ldrb	r3, [r3, #0]
 801fc9c:	009b      	lsls	r3, r3, #2
 801fc9e:	18d3      	adds	r3, r2, r3
 801fca0:	183a      	adds	r2, r7, r0
 801fca2:	8812      	ldrh	r2, [r2, #0]
 801fca4:	4913      	ldr	r1, [pc, #76]	@ (801fcf4 <USB_EPStartXfer+0xab4>)
 801fca6:	430a      	orrs	r2, r1
 801fca8:	b292      	uxth	r2, r2
 801fcaa:	801a      	strh	r2, [r3, #0]
 801fcac:	f000 fbf4 	bl	8020498 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801fcb0:	683b      	ldr	r3, [r7, #0]
 801fcb2:	7b1b      	ldrb	r3, [r3, #12]
 801fcb4:	2b00      	cmp	r3, #0
 801fcb6:	d000      	beq.n	801fcba <USB_EPStartXfer+0xa7a>
 801fcb8:	e0a9      	b.n	801fe0e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801fcba:	683b      	ldr	r3, [r7, #0]
 801fcbc:	699a      	ldr	r2, [r3, #24]
 801fcbe:	683b      	ldr	r3, [r7, #0]
 801fcc0:	691b      	ldr	r3, [r3, #16]
 801fcc2:	429a      	cmp	r2, r3
 801fcc4:	d918      	bls.n	801fcf8 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801fcc6:	683b      	ldr	r3, [r7, #0]
 801fcc8:	691b      	ldr	r3, [r3, #16]
 801fcca:	1d7a      	adds	r2, r7, #5
 801fccc:	32ff      	adds	r2, #255	@ 0xff
 801fcce:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801fcd0:	683b      	ldr	r3, [r7, #0]
 801fcd2:	699a      	ldr	r2, [r3, #24]
 801fcd4:	1d7b      	adds	r3, r7, #5
 801fcd6:	33ff      	adds	r3, #255	@ 0xff
 801fcd8:	681b      	ldr	r3, [r3, #0]
 801fcda:	1ad2      	subs	r2, r2, r3
 801fcdc:	683b      	ldr	r3, [r7, #0]
 801fcde:	619a      	str	r2, [r3, #24]
 801fce0:	e012      	b.n	801fd08 <USB_EPStartXfer+0xac8>
 801fce2:	46c0      	nop			@ (mov r8, r8)
 801fce4:	00000406 	.word	0x00000406
 801fce8:	ffff8000 	.word	0xffff8000
 801fcec:	00000402 	.word	0x00000402
 801fcf0:	ffff8fbf 	.word	0xffff8fbf
 801fcf4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801fcf8:	683b      	ldr	r3, [r7, #0]
 801fcfa:	699b      	ldr	r3, [r3, #24]
 801fcfc:	1d7a      	adds	r2, r7, #5
 801fcfe:	32ff      	adds	r2, #255	@ 0xff
 801fd00:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801fd02:	683b      	ldr	r3, [r7, #0]
 801fd04:	2200      	movs	r2, #0
 801fd06:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	2190      	movs	r1, #144	@ 0x90
 801fd0c:	187a      	adds	r2, r7, r1
 801fd0e:	6013      	str	r3, [r2, #0]
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	2250      	movs	r2, #80	@ 0x50
 801fd14:	5a9b      	ldrh	r3, [r3, r2]
 801fd16:	b29b      	uxth	r3, r3
 801fd18:	001a      	movs	r2, r3
 801fd1a:	187b      	adds	r3, r7, r1
 801fd1c:	681b      	ldr	r3, [r3, #0]
 801fd1e:	189b      	adds	r3, r3, r2
 801fd20:	187a      	adds	r2, r7, r1
 801fd22:	6013      	str	r3, [r2, #0]
 801fd24:	683b      	ldr	r3, [r7, #0]
 801fd26:	781b      	ldrb	r3, [r3, #0]
 801fd28:	00da      	lsls	r2, r3, #3
 801fd2a:	187b      	adds	r3, r7, r1
 801fd2c:	681b      	ldr	r3, [r3, #0]
 801fd2e:	18d3      	adds	r3, r2, r3
 801fd30:	4acf      	ldr	r2, [pc, #828]	@ (8020070 <USB_EPStartXfer+0xe30>)
 801fd32:	4694      	mov	ip, r2
 801fd34:	4463      	add	r3, ip
 801fd36:	218c      	movs	r1, #140	@ 0x8c
 801fd38:	187a      	adds	r2, r7, r1
 801fd3a:	6013      	str	r3, [r2, #0]
 801fd3c:	187b      	adds	r3, r7, r1
 801fd3e:	681b      	ldr	r3, [r3, #0]
 801fd40:	881b      	ldrh	r3, [r3, #0]
 801fd42:	b29b      	uxth	r3, r3
 801fd44:	059b      	lsls	r3, r3, #22
 801fd46:	0d9b      	lsrs	r3, r3, #22
 801fd48:	b29a      	uxth	r2, r3
 801fd4a:	187b      	adds	r3, r7, r1
 801fd4c:	681b      	ldr	r3, [r3, #0]
 801fd4e:	801a      	strh	r2, [r3, #0]
 801fd50:	1d7b      	adds	r3, r7, #5
 801fd52:	33ff      	adds	r3, #255	@ 0xff
 801fd54:	681b      	ldr	r3, [r3, #0]
 801fd56:	2b3e      	cmp	r3, #62	@ 0x3e
 801fd58:	d925      	bls.n	801fda6 <USB_EPStartXfer+0xb66>
 801fd5a:	1d7b      	adds	r3, r7, #5
 801fd5c:	33ff      	adds	r3, #255	@ 0xff
 801fd5e:	681b      	ldr	r3, [r3, #0]
 801fd60:	095b      	lsrs	r3, r3, #5
 801fd62:	21e8      	movs	r1, #232	@ 0xe8
 801fd64:	187a      	adds	r2, r7, r1
 801fd66:	6013      	str	r3, [r2, #0]
 801fd68:	1d7b      	adds	r3, r7, #5
 801fd6a:	33ff      	adds	r3, #255	@ 0xff
 801fd6c:	681b      	ldr	r3, [r3, #0]
 801fd6e:	221f      	movs	r2, #31
 801fd70:	4013      	ands	r3, r2
 801fd72:	d104      	bne.n	801fd7e <USB_EPStartXfer+0xb3e>
 801fd74:	187b      	adds	r3, r7, r1
 801fd76:	681b      	ldr	r3, [r3, #0]
 801fd78:	3b01      	subs	r3, #1
 801fd7a:	187a      	adds	r2, r7, r1
 801fd7c:	6013      	str	r3, [r2, #0]
 801fd7e:	218c      	movs	r1, #140	@ 0x8c
 801fd80:	187b      	adds	r3, r7, r1
 801fd82:	681b      	ldr	r3, [r3, #0]
 801fd84:	881b      	ldrh	r3, [r3, #0]
 801fd86:	b29a      	uxth	r2, r3
 801fd88:	23e8      	movs	r3, #232	@ 0xe8
 801fd8a:	18fb      	adds	r3, r7, r3
 801fd8c:	681b      	ldr	r3, [r3, #0]
 801fd8e:	b29b      	uxth	r3, r3
 801fd90:	029b      	lsls	r3, r3, #10
 801fd92:	b29b      	uxth	r3, r3
 801fd94:	4313      	orrs	r3, r2
 801fd96:	b29b      	uxth	r3, r3
 801fd98:	4ab6      	ldr	r2, [pc, #728]	@ (8020074 <USB_EPStartXfer+0xe34>)
 801fd9a:	4313      	orrs	r3, r2
 801fd9c:	b29a      	uxth	r2, r3
 801fd9e:	187b      	adds	r3, r7, r1
 801fda0:	681b      	ldr	r3, [r3, #0]
 801fda2:	801a      	strh	r2, [r3, #0]
 801fda4:	e353      	b.n	802044e <USB_EPStartXfer+0x120e>
 801fda6:	1d7b      	adds	r3, r7, #5
 801fda8:	33ff      	adds	r3, #255	@ 0xff
 801fdaa:	681b      	ldr	r3, [r3, #0]
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	d10b      	bne.n	801fdc8 <USB_EPStartXfer+0xb88>
 801fdb0:	218c      	movs	r1, #140	@ 0x8c
 801fdb2:	187b      	adds	r3, r7, r1
 801fdb4:	681b      	ldr	r3, [r3, #0]
 801fdb6:	881b      	ldrh	r3, [r3, #0]
 801fdb8:	b29b      	uxth	r3, r3
 801fdba:	4aae      	ldr	r2, [pc, #696]	@ (8020074 <USB_EPStartXfer+0xe34>)
 801fdbc:	4313      	orrs	r3, r2
 801fdbe:	b29a      	uxth	r2, r3
 801fdc0:	187b      	adds	r3, r7, r1
 801fdc2:	681b      	ldr	r3, [r3, #0]
 801fdc4:	801a      	strh	r2, [r3, #0]
 801fdc6:	e342      	b.n	802044e <USB_EPStartXfer+0x120e>
 801fdc8:	1d7b      	adds	r3, r7, #5
 801fdca:	33ff      	adds	r3, #255	@ 0xff
 801fdcc:	681b      	ldr	r3, [r3, #0]
 801fdce:	085b      	lsrs	r3, r3, #1
 801fdd0:	21e8      	movs	r1, #232	@ 0xe8
 801fdd2:	187a      	adds	r2, r7, r1
 801fdd4:	6013      	str	r3, [r2, #0]
 801fdd6:	1d7b      	adds	r3, r7, #5
 801fdd8:	33ff      	adds	r3, #255	@ 0xff
 801fdda:	681b      	ldr	r3, [r3, #0]
 801fddc:	2201      	movs	r2, #1
 801fdde:	4013      	ands	r3, r2
 801fde0:	d004      	beq.n	801fdec <USB_EPStartXfer+0xbac>
 801fde2:	187b      	adds	r3, r7, r1
 801fde4:	681b      	ldr	r3, [r3, #0]
 801fde6:	3301      	adds	r3, #1
 801fde8:	187a      	adds	r2, r7, r1
 801fdea:	6013      	str	r3, [r2, #0]
 801fdec:	218c      	movs	r1, #140	@ 0x8c
 801fdee:	187b      	adds	r3, r7, r1
 801fdf0:	681b      	ldr	r3, [r3, #0]
 801fdf2:	881b      	ldrh	r3, [r3, #0]
 801fdf4:	b29a      	uxth	r2, r3
 801fdf6:	23e8      	movs	r3, #232	@ 0xe8
 801fdf8:	18fb      	adds	r3, r7, r3
 801fdfa:	681b      	ldr	r3, [r3, #0]
 801fdfc:	b29b      	uxth	r3, r3
 801fdfe:	029b      	lsls	r3, r3, #10
 801fe00:	b29b      	uxth	r3, r3
 801fe02:	4313      	orrs	r3, r2
 801fe04:	b29a      	uxth	r2, r3
 801fe06:	187b      	adds	r3, r7, r1
 801fe08:	681b      	ldr	r3, [r3, #0]
 801fe0a:	801a      	strh	r2, [r3, #0]
 801fe0c:	e31f      	b.n	802044e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801fe0e:	683b      	ldr	r3, [r7, #0]
 801fe10:	78db      	ldrb	r3, [r3, #3]
 801fe12:	2b02      	cmp	r3, #2
 801fe14:	d000      	beq.n	801fe18 <USB_EPStartXfer+0xbd8>
 801fe16:	e191      	b.n	802013c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801fe18:	683b      	ldr	r3, [r7, #0]
 801fe1a:	785b      	ldrb	r3, [r3, #1]
 801fe1c:	2b00      	cmp	r3, #0
 801fe1e:	d000      	beq.n	801fe22 <USB_EPStartXfer+0xbe2>
 801fe20:	e07c      	b.n	801ff1c <USB_EPStartXfer+0xcdc>
 801fe22:	687b      	ldr	r3, [r7, #4]
 801fe24:	21ac      	movs	r1, #172	@ 0xac
 801fe26:	187a      	adds	r2, r7, r1
 801fe28:	6013      	str	r3, [r2, #0]
 801fe2a:	687b      	ldr	r3, [r7, #4]
 801fe2c:	2250      	movs	r2, #80	@ 0x50
 801fe2e:	5a9b      	ldrh	r3, [r3, r2]
 801fe30:	b29b      	uxth	r3, r3
 801fe32:	001a      	movs	r2, r3
 801fe34:	187b      	adds	r3, r7, r1
 801fe36:	681b      	ldr	r3, [r3, #0]
 801fe38:	189b      	adds	r3, r3, r2
 801fe3a:	187a      	adds	r2, r7, r1
 801fe3c:	6013      	str	r3, [r2, #0]
 801fe3e:	683b      	ldr	r3, [r7, #0]
 801fe40:	781b      	ldrb	r3, [r3, #0]
 801fe42:	00da      	lsls	r2, r3, #3
 801fe44:	187b      	adds	r3, r7, r1
 801fe46:	681b      	ldr	r3, [r3, #0]
 801fe48:	18d3      	adds	r3, r2, r3
 801fe4a:	4a8b      	ldr	r2, [pc, #556]	@ (8020078 <USB_EPStartXfer+0xe38>)
 801fe4c:	4694      	mov	ip, r2
 801fe4e:	4463      	add	r3, ip
 801fe50:	21a8      	movs	r1, #168	@ 0xa8
 801fe52:	187a      	adds	r2, r7, r1
 801fe54:	6013      	str	r3, [r2, #0]
 801fe56:	187b      	adds	r3, r7, r1
 801fe58:	681b      	ldr	r3, [r3, #0]
 801fe5a:	881b      	ldrh	r3, [r3, #0]
 801fe5c:	b29b      	uxth	r3, r3
 801fe5e:	059b      	lsls	r3, r3, #22
 801fe60:	0d9b      	lsrs	r3, r3, #22
 801fe62:	b29a      	uxth	r2, r3
 801fe64:	187b      	adds	r3, r7, r1
 801fe66:	681b      	ldr	r3, [r3, #0]
 801fe68:	801a      	strh	r2, [r3, #0]
 801fe6a:	683b      	ldr	r3, [r7, #0]
 801fe6c:	691b      	ldr	r3, [r3, #16]
 801fe6e:	2b3e      	cmp	r3, #62	@ 0x3e
 801fe70:	d923      	bls.n	801feba <USB_EPStartXfer+0xc7a>
 801fe72:	683b      	ldr	r3, [r7, #0]
 801fe74:	691b      	ldr	r3, [r3, #16]
 801fe76:	095b      	lsrs	r3, r3, #5
 801fe78:	21e4      	movs	r1, #228	@ 0xe4
 801fe7a:	187a      	adds	r2, r7, r1
 801fe7c:	6013      	str	r3, [r2, #0]
 801fe7e:	683b      	ldr	r3, [r7, #0]
 801fe80:	691b      	ldr	r3, [r3, #16]
 801fe82:	221f      	movs	r2, #31
 801fe84:	4013      	ands	r3, r2
 801fe86:	d104      	bne.n	801fe92 <USB_EPStartXfer+0xc52>
 801fe88:	187b      	adds	r3, r7, r1
 801fe8a:	681b      	ldr	r3, [r3, #0]
 801fe8c:	3b01      	subs	r3, #1
 801fe8e:	187a      	adds	r2, r7, r1
 801fe90:	6013      	str	r3, [r2, #0]
 801fe92:	21a8      	movs	r1, #168	@ 0xa8
 801fe94:	187b      	adds	r3, r7, r1
 801fe96:	681b      	ldr	r3, [r3, #0]
 801fe98:	881b      	ldrh	r3, [r3, #0]
 801fe9a:	b29a      	uxth	r2, r3
 801fe9c:	23e4      	movs	r3, #228	@ 0xe4
 801fe9e:	18fb      	adds	r3, r7, r3
 801fea0:	681b      	ldr	r3, [r3, #0]
 801fea2:	b29b      	uxth	r3, r3
 801fea4:	029b      	lsls	r3, r3, #10
 801fea6:	b29b      	uxth	r3, r3
 801fea8:	4313      	orrs	r3, r2
 801feaa:	b29b      	uxth	r3, r3
 801feac:	4a71      	ldr	r2, [pc, #452]	@ (8020074 <USB_EPStartXfer+0xe34>)
 801feae:	4313      	orrs	r3, r2
 801feb0:	b29a      	uxth	r2, r3
 801feb2:	187b      	adds	r3, r7, r1
 801feb4:	681b      	ldr	r3, [r3, #0]
 801feb6:	801a      	strh	r2, [r3, #0]
 801feb8:	e054      	b.n	801ff64 <USB_EPStartXfer+0xd24>
 801feba:	683b      	ldr	r3, [r7, #0]
 801febc:	691b      	ldr	r3, [r3, #16]
 801febe:	2b00      	cmp	r3, #0
 801fec0:	d10b      	bne.n	801feda <USB_EPStartXfer+0xc9a>
 801fec2:	21a8      	movs	r1, #168	@ 0xa8
 801fec4:	187b      	adds	r3, r7, r1
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	881b      	ldrh	r3, [r3, #0]
 801feca:	b29b      	uxth	r3, r3
 801fecc:	4a69      	ldr	r2, [pc, #420]	@ (8020074 <USB_EPStartXfer+0xe34>)
 801fece:	4313      	orrs	r3, r2
 801fed0:	b29a      	uxth	r2, r3
 801fed2:	187b      	adds	r3, r7, r1
 801fed4:	681b      	ldr	r3, [r3, #0]
 801fed6:	801a      	strh	r2, [r3, #0]
 801fed8:	e044      	b.n	801ff64 <USB_EPStartXfer+0xd24>
 801feda:	683b      	ldr	r3, [r7, #0]
 801fedc:	691b      	ldr	r3, [r3, #16]
 801fede:	085b      	lsrs	r3, r3, #1
 801fee0:	21e4      	movs	r1, #228	@ 0xe4
 801fee2:	187a      	adds	r2, r7, r1
 801fee4:	6013      	str	r3, [r2, #0]
 801fee6:	683b      	ldr	r3, [r7, #0]
 801fee8:	691b      	ldr	r3, [r3, #16]
 801feea:	2201      	movs	r2, #1
 801feec:	4013      	ands	r3, r2
 801feee:	d004      	beq.n	801fefa <USB_EPStartXfer+0xcba>
 801fef0:	187b      	adds	r3, r7, r1
 801fef2:	681b      	ldr	r3, [r3, #0]
 801fef4:	3301      	adds	r3, #1
 801fef6:	187a      	adds	r2, r7, r1
 801fef8:	6013      	str	r3, [r2, #0]
 801fefa:	21a8      	movs	r1, #168	@ 0xa8
 801fefc:	187b      	adds	r3, r7, r1
 801fefe:	681b      	ldr	r3, [r3, #0]
 801ff00:	881b      	ldrh	r3, [r3, #0]
 801ff02:	b29a      	uxth	r2, r3
 801ff04:	23e4      	movs	r3, #228	@ 0xe4
 801ff06:	18fb      	adds	r3, r7, r3
 801ff08:	681b      	ldr	r3, [r3, #0]
 801ff0a:	b29b      	uxth	r3, r3
 801ff0c:	029b      	lsls	r3, r3, #10
 801ff0e:	b29b      	uxth	r3, r3
 801ff10:	4313      	orrs	r3, r2
 801ff12:	b29a      	uxth	r2, r3
 801ff14:	187b      	adds	r3, r7, r1
 801ff16:	681b      	ldr	r3, [r3, #0]
 801ff18:	801a      	strh	r2, [r3, #0]
 801ff1a:	e023      	b.n	801ff64 <USB_EPStartXfer+0xd24>
 801ff1c:	683b      	ldr	r3, [r7, #0]
 801ff1e:	785b      	ldrb	r3, [r3, #1]
 801ff20:	2b01      	cmp	r3, #1
 801ff22:	d11f      	bne.n	801ff64 <USB_EPStartXfer+0xd24>
 801ff24:	687b      	ldr	r3, [r7, #4]
 801ff26:	21b4      	movs	r1, #180	@ 0xb4
 801ff28:	187a      	adds	r2, r7, r1
 801ff2a:	6013      	str	r3, [r2, #0]
 801ff2c:	687b      	ldr	r3, [r7, #4]
 801ff2e:	2250      	movs	r2, #80	@ 0x50
 801ff30:	5a9b      	ldrh	r3, [r3, r2]
 801ff32:	b29b      	uxth	r3, r3
 801ff34:	001a      	movs	r2, r3
 801ff36:	187b      	adds	r3, r7, r1
 801ff38:	681b      	ldr	r3, [r3, #0]
 801ff3a:	189b      	adds	r3, r3, r2
 801ff3c:	187a      	adds	r2, r7, r1
 801ff3e:	6013      	str	r3, [r2, #0]
 801ff40:	683b      	ldr	r3, [r7, #0]
 801ff42:	781b      	ldrb	r3, [r3, #0]
 801ff44:	00da      	lsls	r2, r3, #3
 801ff46:	187b      	adds	r3, r7, r1
 801ff48:	681b      	ldr	r3, [r3, #0]
 801ff4a:	18d3      	adds	r3, r2, r3
 801ff4c:	4a4a      	ldr	r2, [pc, #296]	@ (8020078 <USB_EPStartXfer+0xe38>)
 801ff4e:	4694      	mov	ip, r2
 801ff50:	4463      	add	r3, ip
 801ff52:	21b0      	movs	r1, #176	@ 0xb0
 801ff54:	187a      	adds	r2, r7, r1
 801ff56:	6013      	str	r3, [r2, #0]
 801ff58:	683b      	ldr	r3, [r7, #0]
 801ff5a:	691b      	ldr	r3, [r3, #16]
 801ff5c:	b29a      	uxth	r2, r3
 801ff5e:	187b      	adds	r3, r7, r1
 801ff60:	681b      	ldr	r3, [r3, #0]
 801ff62:	801a      	strh	r2, [r3, #0]
 801ff64:	687b      	ldr	r3, [r7, #4]
 801ff66:	22a4      	movs	r2, #164	@ 0xa4
 801ff68:	18ba      	adds	r2, r7, r2
 801ff6a:	6013      	str	r3, [r2, #0]
 801ff6c:	683b      	ldr	r3, [r7, #0]
 801ff6e:	785b      	ldrb	r3, [r3, #1]
 801ff70:	2b00      	cmp	r3, #0
 801ff72:	d000      	beq.n	801ff76 <USB_EPStartXfer+0xd36>
 801ff74:	e082      	b.n	802007c <USB_EPStartXfer+0xe3c>
 801ff76:	687b      	ldr	r3, [r7, #4]
 801ff78:	219c      	movs	r1, #156	@ 0x9c
 801ff7a:	187a      	adds	r2, r7, r1
 801ff7c:	6013      	str	r3, [r2, #0]
 801ff7e:	687b      	ldr	r3, [r7, #4]
 801ff80:	2250      	movs	r2, #80	@ 0x50
 801ff82:	5a9b      	ldrh	r3, [r3, r2]
 801ff84:	b29b      	uxth	r3, r3
 801ff86:	001a      	movs	r2, r3
 801ff88:	187b      	adds	r3, r7, r1
 801ff8a:	681b      	ldr	r3, [r3, #0]
 801ff8c:	189b      	adds	r3, r3, r2
 801ff8e:	187a      	adds	r2, r7, r1
 801ff90:	6013      	str	r3, [r2, #0]
 801ff92:	683b      	ldr	r3, [r7, #0]
 801ff94:	781b      	ldrb	r3, [r3, #0]
 801ff96:	00da      	lsls	r2, r3, #3
 801ff98:	187b      	adds	r3, r7, r1
 801ff9a:	681b      	ldr	r3, [r3, #0]
 801ff9c:	18d3      	adds	r3, r2, r3
 801ff9e:	4a34      	ldr	r2, [pc, #208]	@ (8020070 <USB_EPStartXfer+0xe30>)
 801ffa0:	4694      	mov	ip, r2
 801ffa2:	4463      	add	r3, ip
 801ffa4:	2198      	movs	r1, #152	@ 0x98
 801ffa6:	187a      	adds	r2, r7, r1
 801ffa8:	6013      	str	r3, [r2, #0]
 801ffaa:	187b      	adds	r3, r7, r1
 801ffac:	681b      	ldr	r3, [r3, #0]
 801ffae:	881b      	ldrh	r3, [r3, #0]
 801ffb0:	b29b      	uxth	r3, r3
 801ffb2:	059b      	lsls	r3, r3, #22
 801ffb4:	0d9b      	lsrs	r3, r3, #22
 801ffb6:	b29a      	uxth	r2, r3
 801ffb8:	187b      	adds	r3, r7, r1
 801ffba:	681b      	ldr	r3, [r3, #0]
 801ffbc:	801a      	strh	r2, [r3, #0]
 801ffbe:	683b      	ldr	r3, [r7, #0]
 801ffc0:	691b      	ldr	r3, [r3, #16]
 801ffc2:	2b3e      	cmp	r3, #62	@ 0x3e
 801ffc4:	d923      	bls.n	802000e <USB_EPStartXfer+0xdce>
 801ffc6:	683b      	ldr	r3, [r7, #0]
 801ffc8:	691b      	ldr	r3, [r3, #16]
 801ffca:	095b      	lsrs	r3, r3, #5
 801ffcc:	21e0      	movs	r1, #224	@ 0xe0
 801ffce:	187a      	adds	r2, r7, r1
 801ffd0:	6013      	str	r3, [r2, #0]
 801ffd2:	683b      	ldr	r3, [r7, #0]
 801ffd4:	691b      	ldr	r3, [r3, #16]
 801ffd6:	221f      	movs	r2, #31
 801ffd8:	4013      	ands	r3, r2
 801ffda:	d104      	bne.n	801ffe6 <USB_EPStartXfer+0xda6>
 801ffdc:	187b      	adds	r3, r7, r1
 801ffde:	681b      	ldr	r3, [r3, #0]
 801ffe0:	3b01      	subs	r3, #1
 801ffe2:	187a      	adds	r2, r7, r1
 801ffe4:	6013      	str	r3, [r2, #0]
 801ffe6:	2198      	movs	r1, #152	@ 0x98
 801ffe8:	187b      	adds	r3, r7, r1
 801ffea:	681b      	ldr	r3, [r3, #0]
 801ffec:	881b      	ldrh	r3, [r3, #0]
 801ffee:	b29a      	uxth	r2, r3
 801fff0:	23e0      	movs	r3, #224	@ 0xe0
 801fff2:	18fb      	adds	r3, r7, r3
 801fff4:	681b      	ldr	r3, [r3, #0]
 801fff6:	b29b      	uxth	r3, r3
 801fff8:	029b      	lsls	r3, r3, #10
 801fffa:	b29b      	uxth	r3, r3
 801fffc:	4313      	orrs	r3, r2
 801fffe:	b29b      	uxth	r3, r3
 8020000:	4a1c      	ldr	r2, [pc, #112]	@ (8020074 <USB_EPStartXfer+0xe34>)
 8020002:	4313      	orrs	r3, r2
 8020004:	b29a      	uxth	r2, r3
 8020006:	187b      	adds	r3, r7, r1
 8020008:	681b      	ldr	r3, [r3, #0]
 802000a:	801a      	strh	r2, [r3, #0]
 802000c:	e057      	b.n	80200be <USB_EPStartXfer+0xe7e>
 802000e:	683b      	ldr	r3, [r7, #0]
 8020010:	691b      	ldr	r3, [r3, #16]
 8020012:	2b00      	cmp	r3, #0
 8020014:	d10b      	bne.n	802002e <USB_EPStartXfer+0xdee>
 8020016:	2198      	movs	r1, #152	@ 0x98
 8020018:	187b      	adds	r3, r7, r1
 802001a:	681b      	ldr	r3, [r3, #0]
 802001c:	881b      	ldrh	r3, [r3, #0]
 802001e:	b29b      	uxth	r3, r3
 8020020:	4a14      	ldr	r2, [pc, #80]	@ (8020074 <USB_EPStartXfer+0xe34>)
 8020022:	4313      	orrs	r3, r2
 8020024:	b29a      	uxth	r2, r3
 8020026:	187b      	adds	r3, r7, r1
 8020028:	681b      	ldr	r3, [r3, #0]
 802002a:	801a      	strh	r2, [r3, #0]
 802002c:	e047      	b.n	80200be <USB_EPStartXfer+0xe7e>
 802002e:	683b      	ldr	r3, [r7, #0]
 8020030:	691b      	ldr	r3, [r3, #16]
 8020032:	085b      	lsrs	r3, r3, #1
 8020034:	21e0      	movs	r1, #224	@ 0xe0
 8020036:	187a      	adds	r2, r7, r1
 8020038:	6013      	str	r3, [r2, #0]
 802003a:	683b      	ldr	r3, [r7, #0]
 802003c:	691b      	ldr	r3, [r3, #16]
 802003e:	2201      	movs	r2, #1
 8020040:	4013      	ands	r3, r2
 8020042:	d004      	beq.n	802004e <USB_EPStartXfer+0xe0e>
 8020044:	187b      	adds	r3, r7, r1
 8020046:	681b      	ldr	r3, [r3, #0]
 8020048:	3301      	adds	r3, #1
 802004a:	187a      	adds	r2, r7, r1
 802004c:	6013      	str	r3, [r2, #0]
 802004e:	2198      	movs	r1, #152	@ 0x98
 8020050:	187b      	adds	r3, r7, r1
 8020052:	681b      	ldr	r3, [r3, #0]
 8020054:	881b      	ldrh	r3, [r3, #0]
 8020056:	b29a      	uxth	r2, r3
 8020058:	23e0      	movs	r3, #224	@ 0xe0
 802005a:	18fb      	adds	r3, r7, r3
 802005c:	681b      	ldr	r3, [r3, #0]
 802005e:	b29b      	uxth	r3, r3
 8020060:	029b      	lsls	r3, r3, #10
 8020062:	b29b      	uxth	r3, r3
 8020064:	4313      	orrs	r3, r2
 8020066:	b29a      	uxth	r2, r3
 8020068:	187b      	adds	r3, r7, r1
 802006a:	681b      	ldr	r3, [r3, #0]
 802006c:	801a      	strh	r2, [r3, #0]
 802006e:	e026      	b.n	80200be <USB_EPStartXfer+0xe7e>
 8020070:	00000406 	.word	0x00000406
 8020074:	ffff8000 	.word	0xffff8000
 8020078:	00000402 	.word	0x00000402
 802007c:	683b      	ldr	r3, [r7, #0]
 802007e:	785b      	ldrb	r3, [r3, #1]
 8020080:	2b01      	cmp	r3, #1
 8020082:	d11c      	bne.n	80200be <USB_EPStartXfer+0xe7e>
 8020084:	687b      	ldr	r3, [r7, #4]
 8020086:	2250      	movs	r2, #80	@ 0x50
 8020088:	5a9b      	ldrh	r3, [r3, r2]
 802008a:	b29b      	uxth	r3, r3
 802008c:	001a      	movs	r2, r3
 802008e:	21a4      	movs	r1, #164	@ 0xa4
 8020090:	187b      	adds	r3, r7, r1
 8020092:	681b      	ldr	r3, [r3, #0]
 8020094:	189b      	adds	r3, r3, r2
 8020096:	187a      	adds	r2, r7, r1
 8020098:	6013      	str	r3, [r2, #0]
 802009a:	683b      	ldr	r3, [r7, #0]
 802009c:	781b      	ldrb	r3, [r3, #0]
 802009e:	00da      	lsls	r2, r3, #3
 80200a0:	187b      	adds	r3, r7, r1
 80200a2:	681b      	ldr	r3, [r3, #0]
 80200a4:	18d3      	adds	r3, r2, r3
 80200a6:	4ad2      	ldr	r2, [pc, #840]	@ (80203f0 <USB_EPStartXfer+0x11b0>)
 80200a8:	4694      	mov	ip, r2
 80200aa:	4463      	add	r3, ip
 80200ac:	21a0      	movs	r1, #160	@ 0xa0
 80200ae:	187a      	adds	r2, r7, r1
 80200b0:	6013      	str	r3, [r2, #0]
 80200b2:	683b      	ldr	r3, [r7, #0]
 80200b4:	691b      	ldr	r3, [r3, #16]
 80200b6:	b29a      	uxth	r2, r3
 80200b8:	187b      	adds	r3, r7, r1
 80200ba:	681b      	ldr	r3, [r3, #0]
 80200bc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80200be:	683b      	ldr	r3, [r7, #0]
 80200c0:	69db      	ldr	r3, [r3, #28]
 80200c2:	2b00      	cmp	r3, #0
 80200c4:	d100      	bne.n	80200c8 <USB_EPStartXfer+0xe88>
 80200c6:	e1c2      	b.n	802044e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80200c8:	687a      	ldr	r2, [r7, #4]
 80200ca:	683b      	ldr	r3, [r7, #0]
 80200cc:	781b      	ldrb	r3, [r3, #0]
 80200ce:	009b      	lsls	r3, r3, #2
 80200d0:	18d2      	adds	r2, r2, r3
 80200d2:	2196      	movs	r1, #150	@ 0x96
 80200d4:	187b      	adds	r3, r7, r1
 80200d6:	8812      	ldrh	r2, [r2, #0]
 80200d8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80200da:	187b      	adds	r3, r7, r1
 80200dc:	881a      	ldrh	r2, [r3, #0]
 80200de:	2380      	movs	r3, #128	@ 0x80
 80200e0:	01db      	lsls	r3, r3, #7
 80200e2:	4013      	ands	r3, r2
 80200e4:	d004      	beq.n	80200f0 <USB_EPStartXfer+0xeb0>
 80200e6:	187b      	adds	r3, r7, r1
 80200e8:	881b      	ldrh	r3, [r3, #0]
 80200ea:	2240      	movs	r2, #64	@ 0x40
 80200ec:	4013      	ands	r3, r2
 80200ee:	d10d      	bne.n	802010c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80200f0:	2196      	movs	r1, #150	@ 0x96
 80200f2:	187b      	adds	r3, r7, r1
 80200f4:	881a      	ldrh	r2, [r3, #0]
 80200f6:	2380      	movs	r3, #128	@ 0x80
 80200f8:	01db      	lsls	r3, r3, #7
 80200fa:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80200fc:	d000      	beq.n	8020100 <USB_EPStartXfer+0xec0>
 80200fe:	e1a6      	b.n	802044e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020100:	187b      	adds	r3, r7, r1
 8020102:	881b      	ldrh	r3, [r3, #0]
 8020104:	2240      	movs	r2, #64	@ 0x40
 8020106:	4013      	ands	r3, r2
 8020108:	d000      	beq.n	802010c <USB_EPStartXfer+0xecc>
 802010a:	e1a0      	b.n	802044e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 802010c:	687a      	ldr	r2, [r7, #4]
 802010e:	683b      	ldr	r3, [r7, #0]
 8020110:	781b      	ldrb	r3, [r3, #0]
 8020112:	009b      	lsls	r3, r3, #2
 8020114:	18d3      	adds	r3, r2, r3
 8020116:	881b      	ldrh	r3, [r3, #0]
 8020118:	b29a      	uxth	r2, r3
 802011a:	2094      	movs	r0, #148	@ 0x94
 802011c:	183b      	adds	r3, r7, r0
 802011e:	49b5      	ldr	r1, [pc, #724]	@ (80203f4 <USB_EPStartXfer+0x11b4>)
 8020120:	400a      	ands	r2, r1
 8020122:	801a      	strh	r2, [r3, #0]
 8020124:	687a      	ldr	r2, [r7, #4]
 8020126:	683b      	ldr	r3, [r7, #0]
 8020128:	781b      	ldrb	r3, [r3, #0]
 802012a:	009b      	lsls	r3, r3, #2
 802012c:	18d3      	adds	r3, r2, r3
 802012e:	183a      	adds	r2, r7, r0
 8020130:	8812      	ldrh	r2, [r2, #0]
 8020132:	49b1      	ldr	r1, [pc, #708]	@ (80203f8 <USB_EPStartXfer+0x11b8>)
 8020134:	430a      	orrs	r2, r1
 8020136:	b292      	uxth	r2, r2
 8020138:	801a      	strh	r2, [r3, #0]
 802013a:	e188      	b.n	802044e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 802013c:	683b      	ldr	r3, [r7, #0]
 802013e:	78db      	ldrb	r3, [r3, #3]
 8020140:	2b01      	cmp	r3, #1
 8020142:	d000      	beq.n	8020146 <USB_EPStartXfer+0xf06>
 8020144:	e181      	b.n	802044a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8020146:	683b      	ldr	r3, [r7, #0]
 8020148:	699a      	ldr	r2, [r3, #24]
 802014a:	683b      	ldr	r3, [r7, #0]
 802014c:	691b      	ldr	r3, [r3, #16]
 802014e:	429a      	cmp	r2, r3
 8020150:	d90d      	bls.n	802016e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8020152:	683b      	ldr	r3, [r7, #0]
 8020154:	691b      	ldr	r3, [r3, #16]
 8020156:	1d7a      	adds	r2, r7, #5
 8020158:	32ff      	adds	r2, #255	@ 0xff
 802015a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 802015c:	683b      	ldr	r3, [r7, #0]
 802015e:	699a      	ldr	r2, [r3, #24]
 8020160:	1d7b      	adds	r3, r7, #5
 8020162:	33ff      	adds	r3, #255	@ 0xff
 8020164:	681b      	ldr	r3, [r3, #0]
 8020166:	1ad2      	subs	r2, r2, r3
 8020168:	683b      	ldr	r3, [r7, #0]
 802016a:	619a      	str	r2, [r3, #24]
 802016c:	e007      	b.n	802017e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 802016e:	683b      	ldr	r3, [r7, #0]
 8020170:	699b      	ldr	r3, [r3, #24]
 8020172:	1d7a      	adds	r2, r7, #5
 8020174:	32ff      	adds	r2, #255	@ 0xff
 8020176:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8020178:	683b      	ldr	r3, [r7, #0]
 802017a:	2200      	movs	r2, #0
 802017c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 802017e:	683b      	ldr	r3, [r7, #0]
 8020180:	785b      	ldrb	r3, [r3, #1]
 8020182:	2b00      	cmp	r3, #0
 8020184:	d000      	beq.n	8020188 <USB_EPStartXfer+0xf48>
 8020186:	e082      	b.n	802028e <USB_EPStartXfer+0x104e>
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	21cc      	movs	r1, #204	@ 0xcc
 802018c:	187a      	adds	r2, r7, r1
 802018e:	6013      	str	r3, [r2, #0]
 8020190:	687b      	ldr	r3, [r7, #4]
 8020192:	2250      	movs	r2, #80	@ 0x50
 8020194:	5a9b      	ldrh	r3, [r3, r2]
 8020196:	b29b      	uxth	r3, r3
 8020198:	001a      	movs	r2, r3
 802019a:	187b      	adds	r3, r7, r1
 802019c:	681b      	ldr	r3, [r3, #0]
 802019e:	189b      	adds	r3, r3, r2
 80201a0:	187a      	adds	r2, r7, r1
 80201a2:	6013      	str	r3, [r2, #0]
 80201a4:	683b      	ldr	r3, [r7, #0]
 80201a6:	781b      	ldrb	r3, [r3, #0]
 80201a8:	00da      	lsls	r2, r3, #3
 80201aa:	187b      	adds	r3, r7, r1
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	18d3      	adds	r3, r2, r3
 80201b0:	4a92      	ldr	r2, [pc, #584]	@ (80203fc <USB_EPStartXfer+0x11bc>)
 80201b2:	4694      	mov	ip, r2
 80201b4:	4463      	add	r3, ip
 80201b6:	21c8      	movs	r1, #200	@ 0xc8
 80201b8:	187a      	adds	r2, r7, r1
 80201ba:	6013      	str	r3, [r2, #0]
 80201bc:	187b      	adds	r3, r7, r1
 80201be:	681b      	ldr	r3, [r3, #0]
 80201c0:	881b      	ldrh	r3, [r3, #0]
 80201c2:	b29b      	uxth	r3, r3
 80201c4:	059b      	lsls	r3, r3, #22
 80201c6:	0d9b      	lsrs	r3, r3, #22
 80201c8:	b29a      	uxth	r2, r3
 80201ca:	187b      	adds	r3, r7, r1
 80201cc:	681b      	ldr	r3, [r3, #0]
 80201ce:	801a      	strh	r2, [r3, #0]
 80201d0:	1d7b      	adds	r3, r7, #5
 80201d2:	33ff      	adds	r3, #255	@ 0xff
 80201d4:	681b      	ldr	r3, [r3, #0]
 80201d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80201d8:	d925      	bls.n	8020226 <USB_EPStartXfer+0xfe6>
 80201da:	1d7b      	adds	r3, r7, #5
 80201dc:	33ff      	adds	r3, #255	@ 0xff
 80201de:	681b      	ldr	r3, [r3, #0]
 80201e0:	095b      	lsrs	r3, r3, #5
 80201e2:	21dc      	movs	r1, #220	@ 0xdc
 80201e4:	187a      	adds	r2, r7, r1
 80201e6:	6013      	str	r3, [r2, #0]
 80201e8:	1d7b      	adds	r3, r7, #5
 80201ea:	33ff      	adds	r3, #255	@ 0xff
 80201ec:	681b      	ldr	r3, [r3, #0]
 80201ee:	221f      	movs	r2, #31
 80201f0:	4013      	ands	r3, r2
 80201f2:	d104      	bne.n	80201fe <USB_EPStartXfer+0xfbe>
 80201f4:	187b      	adds	r3, r7, r1
 80201f6:	681b      	ldr	r3, [r3, #0]
 80201f8:	3b01      	subs	r3, #1
 80201fa:	187a      	adds	r2, r7, r1
 80201fc:	6013      	str	r3, [r2, #0]
 80201fe:	21c8      	movs	r1, #200	@ 0xc8
 8020200:	187b      	adds	r3, r7, r1
 8020202:	681b      	ldr	r3, [r3, #0]
 8020204:	881b      	ldrh	r3, [r3, #0]
 8020206:	b29a      	uxth	r2, r3
 8020208:	23dc      	movs	r3, #220	@ 0xdc
 802020a:	18fb      	adds	r3, r7, r3
 802020c:	681b      	ldr	r3, [r3, #0]
 802020e:	b29b      	uxth	r3, r3
 8020210:	029b      	lsls	r3, r3, #10
 8020212:	b29b      	uxth	r3, r3
 8020214:	4313      	orrs	r3, r2
 8020216:	b29b      	uxth	r3, r3
 8020218:	4a79      	ldr	r2, [pc, #484]	@ (8020400 <USB_EPStartXfer+0x11c0>)
 802021a:	4313      	orrs	r3, r2
 802021c:	b29a      	uxth	r2, r3
 802021e:	187b      	adds	r3, r7, r1
 8020220:	681b      	ldr	r3, [r3, #0]
 8020222:	801a      	strh	r2, [r3, #0]
 8020224:	e058      	b.n	80202d8 <USB_EPStartXfer+0x1098>
 8020226:	1d7b      	adds	r3, r7, #5
 8020228:	33ff      	adds	r3, #255	@ 0xff
 802022a:	681b      	ldr	r3, [r3, #0]
 802022c:	2b00      	cmp	r3, #0
 802022e:	d10b      	bne.n	8020248 <USB_EPStartXfer+0x1008>
 8020230:	21c8      	movs	r1, #200	@ 0xc8
 8020232:	187b      	adds	r3, r7, r1
 8020234:	681b      	ldr	r3, [r3, #0]
 8020236:	881b      	ldrh	r3, [r3, #0]
 8020238:	b29b      	uxth	r3, r3
 802023a:	4a71      	ldr	r2, [pc, #452]	@ (8020400 <USB_EPStartXfer+0x11c0>)
 802023c:	4313      	orrs	r3, r2
 802023e:	b29a      	uxth	r2, r3
 8020240:	187b      	adds	r3, r7, r1
 8020242:	681b      	ldr	r3, [r3, #0]
 8020244:	801a      	strh	r2, [r3, #0]
 8020246:	e047      	b.n	80202d8 <USB_EPStartXfer+0x1098>
 8020248:	1d7b      	adds	r3, r7, #5
 802024a:	33ff      	adds	r3, #255	@ 0xff
 802024c:	681b      	ldr	r3, [r3, #0]
 802024e:	085b      	lsrs	r3, r3, #1
 8020250:	21dc      	movs	r1, #220	@ 0xdc
 8020252:	187a      	adds	r2, r7, r1
 8020254:	6013      	str	r3, [r2, #0]
 8020256:	1d7b      	adds	r3, r7, #5
 8020258:	33ff      	adds	r3, #255	@ 0xff
 802025a:	681b      	ldr	r3, [r3, #0]
 802025c:	2201      	movs	r2, #1
 802025e:	4013      	ands	r3, r2
 8020260:	d004      	beq.n	802026c <USB_EPStartXfer+0x102c>
 8020262:	187b      	adds	r3, r7, r1
 8020264:	681b      	ldr	r3, [r3, #0]
 8020266:	3301      	adds	r3, #1
 8020268:	187a      	adds	r2, r7, r1
 802026a:	6013      	str	r3, [r2, #0]
 802026c:	21c8      	movs	r1, #200	@ 0xc8
 802026e:	187b      	adds	r3, r7, r1
 8020270:	681b      	ldr	r3, [r3, #0]
 8020272:	881b      	ldrh	r3, [r3, #0]
 8020274:	b29a      	uxth	r2, r3
 8020276:	23dc      	movs	r3, #220	@ 0xdc
 8020278:	18fb      	adds	r3, r7, r3
 802027a:	681b      	ldr	r3, [r3, #0]
 802027c:	b29b      	uxth	r3, r3
 802027e:	029b      	lsls	r3, r3, #10
 8020280:	b29b      	uxth	r3, r3
 8020282:	4313      	orrs	r3, r2
 8020284:	b29a      	uxth	r2, r3
 8020286:	187b      	adds	r3, r7, r1
 8020288:	681b      	ldr	r3, [r3, #0]
 802028a:	801a      	strh	r2, [r3, #0]
 802028c:	e024      	b.n	80202d8 <USB_EPStartXfer+0x1098>
 802028e:	683b      	ldr	r3, [r7, #0]
 8020290:	785b      	ldrb	r3, [r3, #1]
 8020292:	2b01      	cmp	r3, #1
 8020294:	d120      	bne.n	80202d8 <USB_EPStartXfer+0x1098>
 8020296:	687b      	ldr	r3, [r7, #4]
 8020298:	21d4      	movs	r1, #212	@ 0xd4
 802029a:	187a      	adds	r2, r7, r1
 802029c:	6013      	str	r3, [r2, #0]
 802029e:	687b      	ldr	r3, [r7, #4]
 80202a0:	2250      	movs	r2, #80	@ 0x50
 80202a2:	5a9b      	ldrh	r3, [r3, r2]
 80202a4:	b29b      	uxth	r3, r3
 80202a6:	001a      	movs	r2, r3
 80202a8:	187b      	adds	r3, r7, r1
 80202aa:	681b      	ldr	r3, [r3, #0]
 80202ac:	189b      	adds	r3, r3, r2
 80202ae:	187a      	adds	r2, r7, r1
 80202b0:	6013      	str	r3, [r2, #0]
 80202b2:	683b      	ldr	r3, [r7, #0]
 80202b4:	781b      	ldrb	r3, [r3, #0]
 80202b6:	00da      	lsls	r2, r3, #3
 80202b8:	187b      	adds	r3, r7, r1
 80202ba:	681b      	ldr	r3, [r3, #0]
 80202bc:	18d3      	adds	r3, r2, r3
 80202be:	4a4f      	ldr	r2, [pc, #316]	@ (80203fc <USB_EPStartXfer+0x11bc>)
 80202c0:	4694      	mov	ip, r2
 80202c2:	4463      	add	r3, ip
 80202c4:	21d0      	movs	r1, #208	@ 0xd0
 80202c6:	187a      	adds	r2, r7, r1
 80202c8:	6013      	str	r3, [r2, #0]
 80202ca:	1d7b      	adds	r3, r7, #5
 80202cc:	33ff      	adds	r3, #255	@ 0xff
 80202ce:	681b      	ldr	r3, [r3, #0]
 80202d0:	b29a      	uxth	r2, r3
 80202d2:	187b      	adds	r3, r7, r1
 80202d4:	681b      	ldr	r3, [r3, #0]
 80202d6:	801a      	strh	r2, [r3, #0]
 80202d8:	687b      	ldr	r3, [r7, #4]
 80202da:	22c4      	movs	r2, #196	@ 0xc4
 80202dc:	18ba      	adds	r2, r7, r2
 80202de:	6013      	str	r3, [r2, #0]
 80202e0:	683b      	ldr	r3, [r7, #0]
 80202e2:	785b      	ldrb	r3, [r3, #1]
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	d000      	beq.n	80202ea <USB_EPStartXfer+0x10aa>
 80202e8:	e08c      	b.n	8020404 <USB_EPStartXfer+0x11c4>
 80202ea:	687b      	ldr	r3, [r7, #4]
 80202ec:	21bc      	movs	r1, #188	@ 0xbc
 80202ee:	187a      	adds	r2, r7, r1
 80202f0:	6013      	str	r3, [r2, #0]
 80202f2:	687b      	ldr	r3, [r7, #4]
 80202f4:	2250      	movs	r2, #80	@ 0x50
 80202f6:	5a9b      	ldrh	r3, [r3, r2]
 80202f8:	b29b      	uxth	r3, r3
 80202fa:	001a      	movs	r2, r3
 80202fc:	187b      	adds	r3, r7, r1
 80202fe:	681b      	ldr	r3, [r3, #0]
 8020300:	189b      	adds	r3, r3, r2
 8020302:	187a      	adds	r2, r7, r1
 8020304:	6013      	str	r3, [r2, #0]
 8020306:	683b      	ldr	r3, [r7, #0]
 8020308:	781b      	ldrb	r3, [r3, #0]
 802030a:	00da      	lsls	r2, r3, #3
 802030c:	187b      	adds	r3, r7, r1
 802030e:	681b      	ldr	r3, [r3, #0]
 8020310:	18d3      	adds	r3, r2, r3
 8020312:	4a37      	ldr	r2, [pc, #220]	@ (80203f0 <USB_EPStartXfer+0x11b0>)
 8020314:	4694      	mov	ip, r2
 8020316:	4463      	add	r3, ip
 8020318:	21b8      	movs	r1, #184	@ 0xb8
 802031a:	187a      	adds	r2, r7, r1
 802031c:	6013      	str	r3, [r2, #0]
 802031e:	187b      	adds	r3, r7, r1
 8020320:	681b      	ldr	r3, [r3, #0]
 8020322:	881b      	ldrh	r3, [r3, #0]
 8020324:	b29b      	uxth	r3, r3
 8020326:	059b      	lsls	r3, r3, #22
 8020328:	0d9b      	lsrs	r3, r3, #22
 802032a:	b29a      	uxth	r2, r3
 802032c:	187b      	adds	r3, r7, r1
 802032e:	681b      	ldr	r3, [r3, #0]
 8020330:	801a      	strh	r2, [r3, #0]
 8020332:	1d7b      	adds	r3, r7, #5
 8020334:	33ff      	adds	r3, #255	@ 0xff
 8020336:	681b      	ldr	r3, [r3, #0]
 8020338:	2b3e      	cmp	r3, #62	@ 0x3e
 802033a:	d925      	bls.n	8020388 <USB_EPStartXfer+0x1148>
 802033c:	1d7b      	adds	r3, r7, #5
 802033e:	33ff      	adds	r3, #255	@ 0xff
 8020340:	681b      	ldr	r3, [r3, #0]
 8020342:	095b      	lsrs	r3, r3, #5
 8020344:	21d8      	movs	r1, #216	@ 0xd8
 8020346:	187a      	adds	r2, r7, r1
 8020348:	6013      	str	r3, [r2, #0]
 802034a:	1d7b      	adds	r3, r7, #5
 802034c:	33ff      	adds	r3, #255	@ 0xff
 802034e:	681b      	ldr	r3, [r3, #0]
 8020350:	221f      	movs	r2, #31
 8020352:	4013      	ands	r3, r2
 8020354:	d104      	bne.n	8020360 <USB_EPStartXfer+0x1120>
 8020356:	187b      	adds	r3, r7, r1
 8020358:	681b      	ldr	r3, [r3, #0]
 802035a:	3b01      	subs	r3, #1
 802035c:	187a      	adds	r2, r7, r1
 802035e:	6013      	str	r3, [r2, #0]
 8020360:	21b8      	movs	r1, #184	@ 0xb8
 8020362:	187b      	adds	r3, r7, r1
 8020364:	681b      	ldr	r3, [r3, #0]
 8020366:	881b      	ldrh	r3, [r3, #0]
 8020368:	b29a      	uxth	r2, r3
 802036a:	23d8      	movs	r3, #216	@ 0xd8
 802036c:	18fb      	adds	r3, r7, r3
 802036e:	681b      	ldr	r3, [r3, #0]
 8020370:	b29b      	uxth	r3, r3
 8020372:	029b      	lsls	r3, r3, #10
 8020374:	b29b      	uxth	r3, r3
 8020376:	4313      	orrs	r3, r2
 8020378:	b29b      	uxth	r3, r3
 802037a:	4a21      	ldr	r2, [pc, #132]	@ (8020400 <USB_EPStartXfer+0x11c0>)
 802037c:	4313      	orrs	r3, r2
 802037e:	b29a      	uxth	r2, r3
 8020380:	187b      	adds	r3, r7, r1
 8020382:	681b      	ldr	r3, [r3, #0]
 8020384:	801a      	strh	r2, [r3, #0]
 8020386:	e062      	b.n	802044e <USB_EPStartXfer+0x120e>
 8020388:	1d7b      	adds	r3, r7, #5
 802038a:	33ff      	adds	r3, #255	@ 0xff
 802038c:	681b      	ldr	r3, [r3, #0]
 802038e:	2b00      	cmp	r3, #0
 8020390:	d10b      	bne.n	80203aa <USB_EPStartXfer+0x116a>
 8020392:	21b8      	movs	r1, #184	@ 0xb8
 8020394:	187b      	adds	r3, r7, r1
 8020396:	681b      	ldr	r3, [r3, #0]
 8020398:	881b      	ldrh	r3, [r3, #0]
 802039a:	b29b      	uxth	r3, r3
 802039c:	4a18      	ldr	r2, [pc, #96]	@ (8020400 <USB_EPStartXfer+0x11c0>)
 802039e:	4313      	orrs	r3, r2
 80203a0:	b29a      	uxth	r2, r3
 80203a2:	187b      	adds	r3, r7, r1
 80203a4:	681b      	ldr	r3, [r3, #0]
 80203a6:	801a      	strh	r2, [r3, #0]
 80203a8:	e051      	b.n	802044e <USB_EPStartXfer+0x120e>
 80203aa:	1d7b      	adds	r3, r7, #5
 80203ac:	33ff      	adds	r3, #255	@ 0xff
 80203ae:	681b      	ldr	r3, [r3, #0]
 80203b0:	085b      	lsrs	r3, r3, #1
 80203b2:	21d8      	movs	r1, #216	@ 0xd8
 80203b4:	187a      	adds	r2, r7, r1
 80203b6:	6013      	str	r3, [r2, #0]
 80203b8:	1d7b      	adds	r3, r7, #5
 80203ba:	33ff      	adds	r3, #255	@ 0xff
 80203bc:	681b      	ldr	r3, [r3, #0]
 80203be:	2201      	movs	r2, #1
 80203c0:	4013      	ands	r3, r2
 80203c2:	d004      	beq.n	80203ce <USB_EPStartXfer+0x118e>
 80203c4:	187b      	adds	r3, r7, r1
 80203c6:	681b      	ldr	r3, [r3, #0]
 80203c8:	3301      	adds	r3, #1
 80203ca:	187a      	adds	r2, r7, r1
 80203cc:	6013      	str	r3, [r2, #0]
 80203ce:	21b8      	movs	r1, #184	@ 0xb8
 80203d0:	187b      	adds	r3, r7, r1
 80203d2:	681b      	ldr	r3, [r3, #0]
 80203d4:	881b      	ldrh	r3, [r3, #0]
 80203d6:	b29a      	uxth	r2, r3
 80203d8:	23d8      	movs	r3, #216	@ 0xd8
 80203da:	18fb      	adds	r3, r7, r3
 80203dc:	681b      	ldr	r3, [r3, #0]
 80203de:	b29b      	uxth	r3, r3
 80203e0:	029b      	lsls	r3, r3, #10
 80203e2:	b29b      	uxth	r3, r3
 80203e4:	4313      	orrs	r3, r2
 80203e6:	b29a      	uxth	r2, r3
 80203e8:	187b      	adds	r3, r7, r1
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	801a      	strh	r2, [r3, #0]
 80203ee:	e02e      	b.n	802044e <USB_EPStartXfer+0x120e>
 80203f0:	00000406 	.word	0x00000406
 80203f4:	ffff8f8f 	.word	0xffff8f8f
 80203f8:	ffff80c0 	.word	0xffff80c0
 80203fc:	00000402 	.word	0x00000402
 8020400:	ffff8000 	.word	0xffff8000
 8020404:	683b      	ldr	r3, [r7, #0]
 8020406:	785b      	ldrb	r3, [r3, #1]
 8020408:	2b01      	cmp	r3, #1
 802040a:	d120      	bne.n	802044e <USB_EPStartXfer+0x120e>
 802040c:	687b      	ldr	r3, [r7, #4]
 802040e:	2250      	movs	r2, #80	@ 0x50
 8020410:	5a9b      	ldrh	r3, [r3, r2]
 8020412:	b29b      	uxth	r3, r3
 8020414:	001a      	movs	r2, r3
 8020416:	21c4      	movs	r1, #196	@ 0xc4
 8020418:	187b      	adds	r3, r7, r1
 802041a:	681b      	ldr	r3, [r3, #0]
 802041c:	189b      	adds	r3, r3, r2
 802041e:	187a      	adds	r2, r7, r1
 8020420:	6013      	str	r3, [r2, #0]
 8020422:	683b      	ldr	r3, [r7, #0]
 8020424:	781b      	ldrb	r3, [r3, #0]
 8020426:	00da      	lsls	r2, r3, #3
 8020428:	187b      	adds	r3, r7, r1
 802042a:	681b      	ldr	r3, [r3, #0]
 802042c:	18d3      	adds	r3, r2, r3
 802042e:	4a1d      	ldr	r2, [pc, #116]	@ (80204a4 <USB_EPStartXfer+0x1264>)
 8020430:	4694      	mov	ip, r2
 8020432:	4463      	add	r3, ip
 8020434:	21c0      	movs	r1, #192	@ 0xc0
 8020436:	187a      	adds	r2, r7, r1
 8020438:	6013      	str	r3, [r2, #0]
 802043a:	1d7b      	adds	r3, r7, #5
 802043c:	33ff      	adds	r3, #255	@ 0xff
 802043e:	681b      	ldr	r3, [r3, #0]
 8020440:	b29a      	uxth	r2, r3
 8020442:	187b      	adds	r3, r7, r1
 8020444:	681b      	ldr	r3, [r3, #0]
 8020446:	801a      	strh	r2, [r3, #0]
 8020448:	e001      	b.n	802044e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 802044a:	2301      	movs	r3, #1
 802044c:	e025      	b.n	802049a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 802044e:	687a      	ldr	r2, [r7, #4]
 8020450:	683b      	ldr	r3, [r7, #0]
 8020452:	781b      	ldrb	r3, [r3, #0]
 8020454:	009b      	lsls	r3, r3, #2
 8020456:	18d3      	adds	r3, r2, r3
 8020458:	881b      	ldrh	r3, [r3, #0]
 802045a:	b29a      	uxth	r2, r3
 802045c:	208a      	movs	r0, #138	@ 0x8a
 802045e:	183b      	adds	r3, r7, r0
 8020460:	4911      	ldr	r1, [pc, #68]	@ (80204a8 <USB_EPStartXfer+0x1268>)
 8020462:	400a      	ands	r2, r1
 8020464:	801a      	strh	r2, [r3, #0]
 8020466:	183b      	adds	r3, r7, r0
 8020468:	183a      	adds	r2, r7, r0
 802046a:	8812      	ldrh	r2, [r2, #0]
 802046c:	2180      	movs	r1, #128	@ 0x80
 802046e:	0149      	lsls	r1, r1, #5
 8020470:	404a      	eors	r2, r1
 8020472:	801a      	strh	r2, [r3, #0]
 8020474:	183b      	adds	r3, r7, r0
 8020476:	183a      	adds	r2, r7, r0
 8020478:	8812      	ldrh	r2, [r2, #0]
 802047a:	2180      	movs	r1, #128	@ 0x80
 802047c:	0189      	lsls	r1, r1, #6
 802047e:	404a      	eors	r2, r1
 8020480:	801a      	strh	r2, [r3, #0]
 8020482:	687a      	ldr	r2, [r7, #4]
 8020484:	683b      	ldr	r3, [r7, #0]
 8020486:	781b      	ldrb	r3, [r3, #0]
 8020488:	009b      	lsls	r3, r3, #2
 802048a:	18d3      	adds	r3, r2, r3
 802048c:	183a      	adds	r2, r7, r0
 802048e:	8812      	ldrh	r2, [r2, #0]
 8020490:	4906      	ldr	r1, [pc, #24]	@ (80204ac <USB_EPStartXfer+0x126c>)
 8020492:	430a      	orrs	r2, r1
 8020494:	b292      	uxth	r2, r2
 8020496:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8020498:	2300      	movs	r3, #0
}
 802049a:	0018      	movs	r0, r3
 802049c:	46bd      	mov	sp, r7
 802049e:	b043      	add	sp, #268	@ 0x10c
 80204a0:	bd90      	pop	{r4, r7, pc}
 80204a2:	46c0      	nop			@ (mov r8, r8)
 80204a4:	00000406 	.word	0x00000406
 80204a8:	ffffbf8f 	.word	0xffffbf8f
 80204ac:	ffff8080 	.word	0xffff8080

080204b0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80204b0:	b580      	push	{r7, lr}
 80204b2:	b084      	sub	sp, #16
 80204b4:	af00      	add	r7, sp, #0
 80204b6:	6078      	str	r0, [r7, #4]
 80204b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80204ba:	683b      	ldr	r3, [r7, #0]
 80204bc:	785b      	ldrb	r3, [r3, #1]
 80204be:	2b00      	cmp	r3, #0
 80204c0:	d01d      	beq.n	80204fe <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80204c2:	687a      	ldr	r2, [r7, #4]
 80204c4:	683b      	ldr	r3, [r7, #0]
 80204c6:	781b      	ldrb	r3, [r3, #0]
 80204c8:	009b      	lsls	r3, r3, #2
 80204ca:	18d3      	adds	r3, r2, r3
 80204cc:	881b      	ldrh	r3, [r3, #0]
 80204ce:	b29a      	uxth	r2, r3
 80204d0:	200c      	movs	r0, #12
 80204d2:	183b      	adds	r3, r7, r0
 80204d4:	491b      	ldr	r1, [pc, #108]	@ (8020544 <USB_EPSetStall+0x94>)
 80204d6:	400a      	ands	r2, r1
 80204d8:	801a      	strh	r2, [r3, #0]
 80204da:	183b      	adds	r3, r7, r0
 80204dc:	183a      	adds	r2, r7, r0
 80204de:	8812      	ldrh	r2, [r2, #0]
 80204e0:	2110      	movs	r1, #16
 80204e2:	404a      	eors	r2, r1
 80204e4:	801a      	strh	r2, [r3, #0]
 80204e6:	687a      	ldr	r2, [r7, #4]
 80204e8:	683b      	ldr	r3, [r7, #0]
 80204ea:	781b      	ldrb	r3, [r3, #0]
 80204ec:	009b      	lsls	r3, r3, #2
 80204ee:	18d3      	adds	r3, r2, r3
 80204f0:	183a      	adds	r2, r7, r0
 80204f2:	8812      	ldrh	r2, [r2, #0]
 80204f4:	4914      	ldr	r1, [pc, #80]	@ (8020548 <USB_EPSetStall+0x98>)
 80204f6:	430a      	orrs	r2, r1
 80204f8:	b292      	uxth	r2, r2
 80204fa:	801a      	strh	r2, [r3, #0]
 80204fc:	e01d      	b.n	802053a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80204fe:	687a      	ldr	r2, [r7, #4]
 8020500:	683b      	ldr	r3, [r7, #0]
 8020502:	781b      	ldrb	r3, [r3, #0]
 8020504:	009b      	lsls	r3, r3, #2
 8020506:	18d3      	adds	r3, r2, r3
 8020508:	881b      	ldrh	r3, [r3, #0]
 802050a:	b29a      	uxth	r2, r3
 802050c:	200e      	movs	r0, #14
 802050e:	183b      	adds	r3, r7, r0
 8020510:	490e      	ldr	r1, [pc, #56]	@ (802054c <USB_EPSetStall+0x9c>)
 8020512:	400a      	ands	r2, r1
 8020514:	801a      	strh	r2, [r3, #0]
 8020516:	183b      	adds	r3, r7, r0
 8020518:	183a      	adds	r2, r7, r0
 802051a:	8812      	ldrh	r2, [r2, #0]
 802051c:	2180      	movs	r1, #128	@ 0x80
 802051e:	0149      	lsls	r1, r1, #5
 8020520:	404a      	eors	r2, r1
 8020522:	801a      	strh	r2, [r3, #0]
 8020524:	687a      	ldr	r2, [r7, #4]
 8020526:	683b      	ldr	r3, [r7, #0]
 8020528:	781b      	ldrb	r3, [r3, #0]
 802052a:	009b      	lsls	r3, r3, #2
 802052c:	18d3      	adds	r3, r2, r3
 802052e:	183a      	adds	r2, r7, r0
 8020530:	8812      	ldrh	r2, [r2, #0]
 8020532:	4905      	ldr	r1, [pc, #20]	@ (8020548 <USB_EPSetStall+0x98>)
 8020534:	430a      	orrs	r2, r1
 8020536:	b292      	uxth	r2, r2
 8020538:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 802053a:	2300      	movs	r3, #0
}
 802053c:	0018      	movs	r0, r3
 802053e:	46bd      	mov	sp, r7
 8020540:	b004      	add	sp, #16
 8020542:	bd80      	pop	{r7, pc}
 8020544:	ffff8fbf 	.word	0xffff8fbf
 8020548:	ffff8080 	.word	0xffff8080
 802054c:	ffffbf8f 	.word	0xffffbf8f

08020550 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8020550:	b580      	push	{r7, lr}
 8020552:	b086      	sub	sp, #24
 8020554:	af00      	add	r7, sp, #0
 8020556:	6078      	str	r0, [r7, #4]
 8020558:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 802055a:	683b      	ldr	r3, [r7, #0]
 802055c:	7b1b      	ldrb	r3, [r3, #12]
 802055e:	2b00      	cmp	r3, #0
 8020560:	d000      	beq.n	8020564 <USB_EPClearStall+0x14>
 8020562:	e095      	b.n	8020690 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8020564:	683b      	ldr	r3, [r7, #0]
 8020566:	785b      	ldrb	r3, [r3, #1]
 8020568:	2b00      	cmp	r3, #0
 802056a:	d046      	beq.n	80205fa <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 802056c:	687a      	ldr	r2, [r7, #4]
 802056e:	683b      	ldr	r3, [r7, #0]
 8020570:	781b      	ldrb	r3, [r3, #0]
 8020572:	009b      	lsls	r3, r3, #2
 8020574:	18d2      	adds	r2, r2, r3
 8020576:	2110      	movs	r1, #16
 8020578:	187b      	adds	r3, r7, r1
 802057a:	8812      	ldrh	r2, [r2, #0]
 802057c:	801a      	strh	r2, [r3, #0]
 802057e:	187b      	adds	r3, r7, r1
 8020580:	881b      	ldrh	r3, [r3, #0]
 8020582:	2240      	movs	r2, #64	@ 0x40
 8020584:	4013      	ands	r3, r2
 8020586:	d016      	beq.n	80205b6 <USB_EPClearStall+0x66>
 8020588:	687a      	ldr	r2, [r7, #4]
 802058a:	683b      	ldr	r3, [r7, #0]
 802058c:	781b      	ldrb	r3, [r3, #0]
 802058e:	009b      	lsls	r3, r3, #2
 8020590:	18d3      	adds	r3, r2, r3
 8020592:	881b      	ldrh	r3, [r3, #0]
 8020594:	b29a      	uxth	r2, r3
 8020596:	200e      	movs	r0, #14
 8020598:	183b      	adds	r3, r7, r0
 802059a:	4940      	ldr	r1, [pc, #256]	@ (802069c <USB_EPClearStall+0x14c>)
 802059c:	400a      	ands	r2, r1
 802059e:	801a      	strh	r2, [r3, #0]
 80205a0:	687a      	ldr	r2, [r7, #4]
 80205a2:	683b      	ldr	r3, [r7, #0]
 80205a4:	781b      	ldrb	r3, [r3, #0]
 80205a6:	009b      	lsls	r3, r3, #2
 80205a8:	18d3      	adds	r3, r2, r3
 80205aa:	183a      	adds	r2, r7, r0
 80205ac:	8812      	ldrh	r2, [r2, #0]
 80205ae:	493c      	ldr	r1, [pc, #240]	@ (80206a0 <USB_EPClearStall+0x150>)
 80205b0:	430a      	orrs	r2, r1
 80205b2:	b292      	uxth	r2, r2
 80205b4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80205b6:	683b      	ldr	r3, [r7, #0]
 80205b8:	78db      	ldrb	r3, [r3, #3]
 80205ba:	2b01      	cmp	r3, #1
 80205bc:	d068      	beq.n	8020690 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80205be:	687a      	ldr	r2, [r7, #4]
 80205c0:	683b      	ldr	r3, [r7, #0]
 80205c2:	781b      	ldrb	r3, [r3, #0]
 80205c4:	009b      	lsls	r3, r3, #2
 80205c6:	18d3      	adds	r3, r2, r3
 80205c8:	881b      	ldrh	r3, [r3, #0]
 80205ca:	b29a      	uxth	r2, r3
 80205cc:	200c      	movs	r0, #12
 80205ce:	183b      	adds	r3, r7, r0
 80205d0:	4934      	ldr	r1, [pc, #208]	@ (80206a4 <USB_EPClearStall+0x154>)
 80205d2:	400a      	ands	r2, r1
 80205d4:	801a      	strh	r2, [r3, #0]
 80205d6:	183b      	adds	r3, r7, r0
 80205d8:	183a      	adds	r2, r7, r0
 80205da:	8812      	ldrh	r2, [r2, #0]
 80205dc:	2120      	movs	r1, #32
 80205de:	404a      	eors	r2, r1
 80205e0:	801a      	strh	r2, [r3, #0]
 80205e2:	687a      	ldr	r2, [r7, #4]
 80205e4:	683b      	ldr	r3, [r7, #0]
 80205e6:	781b      	ldrb	r3, [r3, #0]
 80205e8:	009b      	lsls	r3, r3, #2
 80205ea:	18d3      	adds	r3, r2, r3
 80205ec:	183a      	adds	r2, r7, r0
 80205ee:	8812      	ldrh	r2, [r2, #0]
 80205f0:	492d      	ldr	r1, [pc, #180]	@ (80206a8 <USB_EPClearStall+0x158>)
 80205f2:	430a      	orrs	r2, r1
 80205f4:	b292      	uxth	r2, r2
 80205f6:	801a      	strh	r2, [r3, #0]
 80205f8:	e04a      	b.n	8020690 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80205fa:	687a      	ldr	r2, [r7, #4]
 80205fc:	683b      	ldr	r3, [r7, #0]
 80205fe:	781b      	ldrb	r3, [r3, #0]
 8020600:	009b      	lsls	r3, r3, #2
 8020602:	18d2      	adds	r2, r2, r3
 8020604:	2116      	movs	r1, #22
 8020606:	187b      	adds	r3, r7, r1
 8020608:	8812      	ldrh	r2, [r2, #0]
 802060a:	801a      	strh	r2, [r3, #0]
 802060c:	187b      	adds	r3, r7, r1
 802060e:	881a      	ldrh	r2, [r3, #0]
 8020610:	2380      	movs	r3, #128	@ 0x80
 8020612:	01db      	lsls	r3, r3, #7
 8020614:	4013      	ands	r3, r2
 8020616:	d016      	beq.n	8020646 <USB_EPClearStall+0xf6>
 8020618:	687a      	ldr	r2, [r7, #4]
 802061a:	683b      	ldr	r3, [r7, #0]
 802061c:	781b      	ldrb	r3, [r3, #0]
 802061e:	009b      	lsls	r3, r3, #2
 8020620:	18d3      	adds	r3, r2, r3
 8020622:	881b      	ldrh	r3, [r3, #0]
 8020624:	b29a      	uxth	r2, r3
 8020626:	2014      	movs	r0, #20
 8020628:	183b      	adds	r3, r7, r0
 802062a:	491c      	ldr	r1, [pc, #112]	@ (802069c <USB_EPClearStall+0x14c>)
 802062c:	400a      	ands	r2, r1
 802062e:	801a      	strh	r2, [r3, #0]
 8020630:	687a      	ldr	r2, [r7, #4]
 8020632:	683b      	ldr	r3, [r7, #0]
 8020634:	781b      	ldrb	r3, [r3, #0]
 8020636:	009b      	lsls	r3, r3, #2
 8020638:	18d3      	adds	r3, r2, r3
 802063a:	183a      	adds	r2, r7, r0
 802063c:	8812      	ldrh	r2, [r2, #0]
 802063e:	491b      	ldr	r1, [pc, #108]	@ (80206ac <USB_EPClearStall+0x15c>)
 8020640:	430a      	orrs	r2, r1
 8020642:	b292      	uxth	r2, r2
 8020644:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8020646:	687a      	ldr	r2, [r7, #4]
 8020648:	683b      	ldr	r3, [r7, #0]
 802064a:	781b      	ldrb	r3, [r3, #0]
 802064c:	009b      	lsls	r3, r3, #2
 802064e:	18d3      	adds	r3, r2, r3
 8020650:	881b      	ldrh	r3, [r3, #0]
 8020652:	b29a      	uxth	r2, r3
 8020654:	2012      	movs	r0, #18
 8020656:	183b      	adds	r3, r7, r0
 8020658:	4915      	ldr	r1, [pc, #84]	@ (80206b0 <USB_EPClearStall+0x160>)
 802065a:	400a      	ands	r2, r1
 802065c:	801a      	strh	r2, [r3, #0]
 802065e:	183b      	adds	r3, r7, r0
 8020660:	183a      	adds	r2, r7, r0
 8020662:	8812      	ldrh	r2, [r2, #0]
 8020664:	2180      	movs	r1, #128	@ 0x80
 8020666:	0149      	lsls	r1, r1, #5
 8020668:	404a      	eors	r2, r1
 802066a:	801a      	strh	r2, [r3, #0]
 802066c:	183b      	adds	r3, r7, r0
 802066e:	183a      	adds	r2, r7, r0
 8020670:	8812      	ldrh	r2, [r2, #0]
 8020672:	2180      	movs	r1, #128	@ 0x80
 8020674:	0189      	lsls	r1, r1, #6
 8020676:	404a      	eors	r2, r1
 8020678:	801a      	strh	r2, [r3, #0]
 802067a:	687a      	ldr	r2, [r7, #4]
 802067c:	683b      	ldr	r3, [r7, #0]
 802067e:	781b      	ldrb	r3, [r3, #0]
 8020680:	009b      	lsls	r3, r3, #2
 8020682:	18d3      	adds	r3, r2, r3
 8020684:	183a      	adds	r2, r7, r0
 8020686:	8812      	ldrh	r2, [r2, #0]
 8020688:	4907      	ldr	r1, [pc, #28]	@ (80206a8 <USB_EPClearStall+0x158>)
 802068a:	430a      	orrs	r2, r1
 802068c:	b292      	uxth	r2, r2
 802068e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8020690:	2300      	movs	r3, #0
}
 8020692:	0018      	movs	r0, r3
 8020694:	46bd      	mov	sp, r7
 8020696:	b006      	add	sp, #24
 8020698:	bd80      	pop	{r7, pc}
 802069a:	46c0      	nop			@ (mov r8, r8)
 802069c:	ffff8f8f 	.word	0xffff8f8f
 80206a0:	ffff80c0 	.word	0xffff80c0
 80206a4:	ffff8fbf 	.word	0xffff8fbf
 80206a8:	ffff8080 	.word	0xffff8080
 80206ac:	ffffc080 	.word	0xffffc080
 80206b0:	ffffbf8f 	.word	0xffffbf8f

080206b4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80206b4:	b580      	push	{r7, lr}
 80206b6:	b082      	sub	sp, #8
 80206b8:	af00      	add	r7, sp, #0
 80206ba:	6078      	str	r0, [r7, #4]
 80206bc:	000a      	movs	r2, r1
 80206be:	1cfb      	adds	r3, r7, #3
 80206c0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80206c2:	1cfb      	adds	r3, r7, #3
 80206c4:	781b      	ldrb	r3, [r3, #0]
 80206c6:	2b00      	cmp	r3, #0
 80206c8:	d103      	bne.n	80206d2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80206ca:	687b      	ldr	r3, [r7, #4]
 80206cc:	224c      	movs	r2, #76	@ 0x4c
 80206ce:	2180      	movs	r1, #128	@ 0x80
 80206d0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80206d2:	2300      	movs	r3, #0
}
 80206d4:	0018      	movs	r0, r3
 80206d6:	46bd      	mov	sp, r7
 80206d8:	b002      	add	sp, #8
 80206da:	bd80      	pop	{r7, pc}

080206dc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80206dc:	b580      	push	{r7, lr}
 80206de:	b082      	sub	sp, #8
 80206e0:	af00      	add	r7, sp, #0
 80206e2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80206e4:	687b      	ldr	r3, [r7, #4]
 80206e6:	2258      	movs	r2, #88	@ 0x58
 80206e8:	5a9b      	ldrh	r3, [r3, r2]
 80206ea:	b29b      	uxth	r3, r3
 80206ec:	4a05      	ldr	r2, [pc, #20]	@ (8020704 <USB_DevConnect+0x28>)
 80206ee:	4313      	orrs	r3, r2
 80206f0:	b299      	uxth	r1, r3
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	2258      	movs	r2, #88	@ 0x58
 80206f6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80206f8:	2300      	movs	r3, #0
}
 80206fa:	0018      	movs	r0, r3
 80206fc:	46bd      	mov	sp, r7
 80206fe:	b002      	add	sp, #8
 8020700:	bd80      	pop	{r7, pc}
 8020702:	46c0      	nop			@ (mov r8, r8)
 8020704:	ffff8000 	.word	0xffff8000

08020708 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8020708:	b580      	push	{r7, lr}
 802070a:	b084      	sub	sp, #16
 802070c:	af00      	add	r7, sp, #0
 802070e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8020710:	687b      	ldr	r3, [r7, #4]
 8020712:	2244      	movs	r2, #68	@ 0x44
 8020714:	5a9b      	ldrh	r3, [r3, r2]
 8020716:	b29b      	uxth	r3, r3
 8020718:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 802071a:	68fb      	ldr	r3, [r7, #12]
}
 802071c:	0018      	movs	r0, r3
 802071e:	46bd      	mov	sp, r7
 8020720:	b004      	add	sp, #16
 8020722:	bd80      	pop	{r7, pc}

08020724 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8020724:	b580      	push	{r7, lr}
 8020726:	b08a      	sub	sp, #40	@ 0x28
 8020728:	af00      	add	r7, sp, #0
 802072a:	60f8      	str	r0, [r7, #12]
 802072c:	60b9      	str	r1, [r7, #8]
 802072e:	0019      	movs	r1, r3
 8020730:	1dbb      	adds	r3, r7, #6
 8020732:	801a      	strh	r2, [r3, #0]
 8020734:	1d3b      	adds	r3, r7, #4
 8020736:	1c0a      	adds	r2, r1, #0
 8020738:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 802073a:	1d3b      	adds	r3, r7, #4
 802073c:	881b      	ldrh	r3, [r3, #0]
 802073e:	3301      	adds	r3, #1
 8020740:	085b      	lsrs	r3, r3, #1
 8020742:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8020744:	68fb      	ldr	r3, [r7, #12]
 8020746:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8020748:	68bb      	ldr	r3, [r7, #8]
 802074a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 802074c:	1dbb      	adds	r3, r7, #6
 802074e:	881a      	ldrh	r2, [r3, #0]
 8020750:	697b      	ldr	r3, [r7, #20]
 8020752:	18d3      	adds	r3, r2, r3
 8020754:	2280      	movs	r2, #128	@ 0x80
 8020756:	00d2      	lsls	r2, r2, #3
 8020758:	4694      	mov	ip, r2
 802075a:	4463      	add	r3, ip
 802075c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 802075e:	69bb      	ldr	r3, [r7, #24]
 8020760:	627b      	str	r3, [r7, #36]	@ 0x24
 8020762:	e021      	b.n	80207a8 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8020764:	69fb      	ldr	r3, [r7, #28]
 8020766:	781a      	ldrb	r2, [r3, #0]
 8020768:	2112      	movs	r1, #18
 802076a:	187b      	adds	r3, r7, r1
 802076c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 802076e:	69fb      	ldr	r3, [r7, #28]
 8020770:	3301      	adds	r3, #1
 8020772:	781b      	ldrb	r3, [r3, #0]
 8020774:	b21b      	sxth	r3, r3
 8020776:	021b      	lsls	r3, r3, #8
 8020778:	b21a      	sxth	r2, r3
 802077a:	187b      	adds	r3, r7, r1
 802077c:	2000      	movs	r0, #0
 802077e:	5e1b      	ldrsh	r3, [r3, r0]
 8020780:	4313      	orrs	r3, r2
 8020782:	b21a      	sxth	r2, r3
 8020784:	187b      	adds	r3, r7, r1
 8020786:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8020788:	6a3b      	ldr	r3, [r7, #32]
 802078a:	187a      	adds	r2, r7, r1
 802078c:	8812      	ldrh	r2, [r2, #0]
 802078e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8020790:	6a3b      	ldr	r3, [r7, #32]
 8020792:	3302      	adds	r3, #2
 8020794:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8020796:	69fb      	ldr	r3, [r7, #28]
 8020798:	3301      	adds	r3, #1
 802079a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 802079c:	69fb      	ldr	r3, [r7, #28]
 802079e:	3301      	adds	r3, #1
 80207a0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80207a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80207a4:	3b01      	subs	r3, #1
 80207a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80207a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d1da      	bne.n	8020764 <USB_WritePMA+0x40>
  }
}
 80207ae:	46c0      	nop			@ (mov r8, r8)
 80207b0:	46c0      	nop			@ (mov r8, r8)
 80207b2:	46bd      	mov	sp, r7
 80207b4:	b00a      	add	sp, #40	@ 0x28
 80207b6:	bd80      	pop	{r7, pc}

080207b8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80207b8:	b580      	push	{r7, lr}
 80207ba:	b08a      	sub	sp, #40	@ 0x28
 80207bc:	af00      	add	r7, sp, #0
 80207be:	60f8      	str	r0, [r7, #12]
 80207c0:	60b9      	str	r1, [r7, #8]
 80207c2:	0019      	movs	r1, r3
 80207c4:	1dbb      	adds	r3, r7, #6
 80207c6:	801a      	strh	r2, [r3, #0]
 80207c8:	1d3b      	adds	r3, r7, #4
 80207ca:	1c0a      	adds	r2, r1, #0
 80207cc:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80207ce:	1d3b      	adds	r3, r7, #4
 80207d0:	881b      	ldrh	r3, [r3, #0]
 80207d2:	085b      	lsrs	r3, r3, #1
 80207d4:	b29b      	uxth	r3, r3
 80207d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80207d8:	68fb      	ldr	r3, [r7, #12]
 80207da:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80207dc:	68bb      	ldr	r3, [r7, #8]
 80207de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80207e0:	1dbb      	adds	r3, r7, #6
 80207e2:	881a      	ldrh	r2, [r3, #0]
 80207e4:	697b      	ldr	r3, [r7, #20]
 80207e6:	18d3      	adds	r3, r2, r3
 80207e8:	2280      	movs	r2, #128	@ 0x80
 80207ea:	00d2      	lsls	r2, r2, #3
 80207ec:	4694      	mov	ip, r2
 80207ee:	4463      	add	r3, ip
 80207f0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80207f2:	69bb      	ldr	r3, [r7, #24]
 80207f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80207f6:	e018      	b.n	802082a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80207f8:	6a3b      	ldr	r3, [r7, #32]
 80207fa:	881b      	ldrh	r3, [r3, #0]
 80207fc:	b29b      	uxth	r3, r3
 80207fe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8020800:	6a3b      	ldr	r3, [r7, #32]
 8020802:	3302      	adds	r3, #2
 8020804:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8020806:	693b      	ldr	r3, [r7, #16]
 8020808:	b2da      	uxtb	r2, r3
 802080a:	69fb      	ldr	r3, [r7, #28]
 802080c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 802080e:	69fb      	ldr	r3, [r7, #28]
 8020810:	3301      	adds	r3, #1
 8020812:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8020814:	693b      	ldr	r3, [r7, #16]
 8020816:	0a1b      	lsrs	r3, r3, #8
 8020818:	b2da      	uxtb	r2, r3
 802081a:	69fb      	ldr	r3, [r7, #28]
 802081c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 802081e:	69fb      	ldr	r3, [r7, #28]
 8020820:	3301      	adds	r3, #1
 8020822:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8020824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020826:	3b01      	subs	r3, #1
 8020828:	627b      	str	r3, [r7, #36]	@ 0x24
 802082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802082c:	2b00      	cmp	r3, #0
 802082e:	d1e3      	bne.n	80207f8 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8020830:	1d3b      	adds	r3, r7, #4
 8020832:	881b      	ldrh	r3, [r3, #0]
 8020834:	2201      	movs	r2, #1
 8020836:	4013      	ands	r3, r2
 8020838:	b29b      	uxth	r3, r3
 802083a:	2b00      	cmp	r3, #0
 802083c:	d007      	beq.n	802084e <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 802083e:	6a3b      	ldr	r3, [r7, #32]
 8020840:	881b      	ldrh	r3, [r3, #0]
 8020842:	b29b      	uxth	r3, r3
 8020844:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8020846:	693b      	ldr	r3, [r7, #16]
 8020848:	b2da      	uxtb	r2, r3
 802084a:	69fb      	ldr	r3, [r7, #28]
 802084c:	701a      	strb	r2, [r3, #0]
  }
}
 802084e:	46c0      	nop			@ (mov r8, r8)
 8020850:	46bd      	mov	sp, r7
 8020852:	b00a      	add	sp, #40	@ 0x28
 8020854:	bd80      	pop	{r7, pc}

08020856 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020856:	b580      	push	{r7, lr}
 8020858:	b084      	sub	sp, #16
 802085a:	af00      	add	r7, sp, #0
 802085c:	6078      	str	r0, [r7, #4]
 802085e:	000a      	movs	r2, r1
 8020860:	1cfb      	adds	r3, r7, #3
 8020862:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8020864:	230f      	movs	r3, #15
 8020866:	18fb      	adds	r3, r7, r3
 8020868:	2200      	movs	r2, #0
 802086a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802086c:	687b      	ldr	r3, [r7, #4]
 802086e:	7c1b      	ldrb	r3, [r3, #16]
 8020870:	2b00      	cmp	r3, #0
 8020872:	d116      	bne.n	80208a2 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8020874:	2380      	movs	r3, #128	@ 0x80
 8020876:	009b      	lsls	r3, r3, #2
 8020878:	6878      	ldr	r0, [r7, #4]
 802087a:	2202      	movs	r2, #2
 802087c:	2181      	movs	r1, #129	@ 0x81
 802087e:	f002 f8ec 	bl	8022a5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8020882:	687b      	ldr	r3, [r7, #4]
 8020884:	2201      	movs	r2, #1
 8020886:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8020888:	2380      	movs	r3, #128	@ 0x80
 802088a:	009b      	lsls	r3, r3, #2
 802088c:	6878      	ldr	r0, [r7, #4]
 802088e:	2202      	movs	r2, #2
 8020890:	2101      	movs	r1, #1
 8020892:	f002 f8e2 	bl	8022a5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8020896:	687a      	ldr	r2, [r7, #4]
 8020898:	23b6      	movs	r3, #182	@ 0xb6
 802089a:	005b      	lsls	r3, r3, #1
 802089c:	2101      	movs	r1, #1
 802089e:	50d1      	str	r1, [r2, r3]
 80208a0:	e013      	b.n	80208ca <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80208a2:	6878      	ldr	r0, [r7, #4]
 80208a4:	2340      	movs	r3, #64	@ 0x40
 80208a6:	2202      	movs	r2, #2
 80208a8:	2181      	movs	r1, #129	@ 0x81
 80208aa:	f002 f8d6 	bl	8022a5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80208ae:	687b      	ldr	r3, [r7, #4]
 80208b0:	2201      	movs	r2, #1
 80208b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80208b4:	6878      	ldr	r0, [r7, #4]
 80208b6:	2340      	movs	r3, #64	@ 0x40
 80208b8:	2202      	movs	r2, #2
 80208ba:	2101      	movs	r1, #1
 80208bc:	f002 f8cd 	bl	8022a5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80208c0:	687a      	ldr	r2, [r7, #4]
 80208c2:	23b6      	movs	r3, #182	@ 0xb6
 80208c4:	005b      	lsls	r3, r3, #1
 80208c6:	2101      	movs	r1, #1
 80208c8:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80208ca:	6878      	ldr	r0, [r7, #4]
 80208cc:	2308      	movs	r3, #8
 80208ce:	2203      	movs	r2, #3
 80208d0:	2182      	movs	r1, #130	@ 0x82
 80208d2:	f002 f8c2 	bl	8022a5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80208d6:	687b      	ldr	r3, [r7, #4]
 80208d8:	2201      	movs	r2, #1
 80208da:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80208dc:	2387      	movs	r3, #135	@ 0x87
 80208de:	009b      	lsls	r3, r3, #2
 80208e0:	0018      	movs	r0, r3
 80208e2:	f002 fa53 	bl	8022d8c <USBD_static_malloc>
 80208e6:	0001      	movs	r1, r0
 80208e8:	687a      	ldr	r2, [r7, #4]
 80208ea:	23ae      	movs	r3, #174	@ 0xae
 80208ec:	009b      	lsls	r3, r3, #2
 80208ee:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80208f0:	687a      	ldr	r2, [r7, #4]
 80208f2:	23ae      	movs	r3, #174	@ 0xae
 80208f4:	009b      	lsls	r3, r3, #2
 80208f6:	58d3      	ldr	r3, [r2, r3]
 80208f8:	2b00      	cmp	r3, #0
 80208fa:	d104      	bne.n	8020906 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80208fc:	230f      	movs	r3, #15
 80208fe:	18fb      	adds	r3, r7, r3
 8020900:	2201      	movs	r2, #1
 8020902:	701a      	strb	r2, [r3, #0]
 8020904:	e02c      	b.n	8020960 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020906:	687a      	ldr	r2, [r7, #4]
 8020908:	23ae      	movs	r3, #174	@ 0xae
 802090a:	009b      	lsls	r3, r3, #2
 802090c:	58d3      	ldr	r3, [r2, r3]
 802090e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8020910:	687a      	ldr	r2, [r7, #4]
 8020912:	23af      	movs	r3, #175	@ 0xaf
 8020914:	009b      	lsls	r3, r3, #2
 8020916:	58d3      	ldr	r3, [r2, r3]
 8020918:	681b      	ldr	r3, [r3, #0]
 802091a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 802091c:	68ba      	ldr	r2, [r7, #8]
 802091e:	2385      	movs	r3, #133	@ 0x85
 8020920:	009b      	lsls	r3, r3, #2
 8020922:	2100      	movs	r1, #0
 8020924:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8020926:	68ba      	ldr	r2, [r7, #8]
 8020928:	2386      	movs	r3, #134	@ 0x86
 802092a:	009b      	lsls	r3, r3, #2
 802092c:	2100      	movs	r1, #0
 802092e:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020930:	687b      	ldr	r3, [r7, #4]
 8020932:	7c1b      	ldrb	r3, [r3, #16]
 8020934:	2b00      	cmp	r3, #0
 8020936:	d10a      	bne.n	802094e <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020938:	68ba      	ldr	r2, [r7, #8]
 802093a:	2381      	movs	r3, #129	@ 0x81
 802093c:	009b      	lsls	r3, r3, #2
 802093e:	58d2      	ldr	r2, [r2, r3]
 8020940:	2380      	movs	r3, #128	@ 0x80
 8020942:	009b      	lsls	r3, r3, #2
 8020944:	6878      	ldr	r0, [r7, #4]
 8020946:	2101      	movs	r1, #1
 8020948:	f002 f9d2 	bl	8022cf0 <USBD_LL_PrepareReceive>
 802094c:	e008      	b.n	8020960 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 802094e:	68ba      	ldr	r2, [r7, #8]
 8020950:	2381      	movs	r3, #129	@ 0x81
 8020952:	009b      	lsls	r3, r3, #2
 8020954:	58d2      	ldr	r2, [r2, r3]
 8020956:	6878      	ldr	r0, [r7, #4]
 8020958:	2340      	movs	r3, #64	@ 0x40
 802095a:	2101      	movs	r1, #1
 802095c:	f002 f9c8 	bl	8022cf0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8020960:	230f      	movs	r3, #15
 8020962:	18fb      	adds	r3, r7, r3
 8020964:	781b      	ldrb	r3, [r3, #0]
}
 8020966:	0018      	movs	r0, r3
 8020968:	46bd      	mov	sp, r7
 802096a:	b004      	add	sp, #16
 802096c:	bd80      	pop	{r7, pc}

0802096e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802096e:	b580      	push	{r7, lr}
 8020970:	b084      	sub	sp, #16
 8020972:	af00      	add	r7, sp, #0
 8020974:	6078      	str	r0, [r7, #4]
 8020976:	000a      	movs	r2, r1
 8020978:	1cfb      	adds	r3, r7, #3
 802097a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 802097c:	230f      	movs	r3, #15
 802097e:	18fb      	adds	r3, r7, r3
 8020980:	2200      	movs	r2, #0
 8020982:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8020984:	687b      	ldr	r3, [r7, #4]
 8020986:	2181      	movs	r1, #129	@ 0x81
 8020988:	0018      	movs	r0, r3
 802098a:	f002 f89d 	bl	8022ac8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 802098e:	687b      	ldr	r3, [r7, #4]
 8020990:	2200      	movs	r2, #0
 8020992:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	2101      	movs	r1, #1
 8020998:	0018      	movs	r0, r3
 802099a:	f002 f895 	bl	8022ac8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 802099e:	687a      	ldr	r2, [r7, #4]
 80209a0:	23b6      	movs	r3, #182	@ 0xb6
 80209a2:	005b      	lsls	r3, r3, #1
 80209a4:	2100      	movs	r1, #0
 80209a6:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	2182      	movs	r1, #130	@ 0x82
 80209ac:	0018      	movs	r0, r3
 80209ae:	f002 f88b 	bl	8022ac8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80209b2:	687b      	ldr	r3, [r7, #4]
 80209b4:	2200      	movs	r2, #0
 80209b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80209b8:	687a      	ldr	r2, [r7, #4]
 80209ba:	23ae      	movs	r3, #174	@ 0xae
 80209bc:	009b      	lsls	r3, r3, #2
 80209be:	58d3      	ldr	r3, [r2, r3]
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	d011      	beq.n	80209e8 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80209c4:	687a      	ldr	r2, [r7, #4]
 80209c6:	23af      	movs	r3, #175	@ 0xaf
 80209c8:	009b      	lsls	r3, r3, #2
 80209ca:	58d3      	ldr	r3, [r2, r3]
 80209cc:	685b      	ldr	r3, [r3, #4]
 80209ce:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80209d0:	687a      	ldr	r2, [r7, #4]
 80209d2:	23ae      	movs	r3, #174	@ 0xae
 80209d4:	009b      	lsls	r3, r3, #2
 80209d6:	58d3      	ldr	r3, [r2, r3]
 80209d8:	0018      	movs	r0, r3
 80209da:	f002 f9e3 	bl	8022da4 <USBD_static_free>
    pdev->pClassData = NULL;
 80209de:	687a      	ldr	r2, [r7, #4]
 80209e0:	23ae      	movs	r3, #174	@ 0xae
 80209e2:	009b      	lsls	r3, r3, #2
 80209e4:	2100      	movs	r1, #0
 80209e6:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80209e8:	230f      	movs	r3, #15
 80209ea:	18fb      	adds	r3, r7, r3
 80209ec:	781b      	ldrb	r3, [r3, #0]
}
 80209ee:	0018      	movs	r0, r3
 80209f0:	46bd      	mov	sp, r7
 80209f2:	b004      	add	sp, #16
 80209f4:	bd80      	pop	{r7, pc}
	...

080209f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80209f8:	b580      	push	{r7, lr}
 80209fa:	b086      	sub	sp, #24
 80209fc:	af00      	add	r7, sp, #0
 80209fe:	6078      	str	r0, [r7, #4]
 8020a00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020a02:	687a      	ldr	r2, [r7, #4]
 8020a04:	23ae      	movs	r3, #174	@ 0xae
 8020a06:	009b      	lsls	r3, r3, #2
 8020a08:	58d3      	ldr	r3, [r2, r3]
 8020a0a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8020a0c:	230f      	movs	r3, #15
 8020a0e:	18fb      	adds	r3, r7, r3
 8020a10:	2200      	movs	r2, #0
 8020a12:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8020a14:	230c      	movs	r3, #12
 8020a16:	18fb      	adds	r3, r7, r3
 8020a18:	2200      	movs	r2, #0
 8020a1a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8020a1c:	2317      	movs	r3, #23
 8020a1e:	18fb      	adds	r3, r7, r3
 8020a20:	2200      	movs	r2, #0
 8020a22:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020a24:	683b      	ldr	r3, [r7, #0]
 8020a26:	781b      	ldrb	r3, [r3, #0]
 8020a28:	001a      	movs	r2, r3
 8020a2a:	2360      	movs	r3, #96	@ 0x60
 8020a2c:	4013      	ands	r3, r2
 8020a2e:	d03d      	beq.n	8020aac <USBD_CDC_Setup+0xb4>
 8020a30:	2b20      	cmp	r3, #32
 8020a32:	d000      	beq.n	8020a36 <USBD_CDC_Setup+0x3e>
 8020a34:	e094      	b.n	8020b60 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8020a36:	683b      	ldr	r3, [r7, #0]
 8020a38:	88db      	ldrh	r3, [r3, #6]
 8020a3a:	2b00      	cmp	r3, #0
 8020a3c:	d02b      	beq.n	8020a96 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8020a3e:	683b      	ldr	r3, [r7, #0]
 8020a40:	781b      	ldrb	r3, [r3, #0]
 8020a42:	b25b      	sxtb	r3, r3
 8020a44:	2b00      	cmp	r3, #0
 8020a46:	da12      	bge.n	8020a6e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020a48:	687a      	ldr	r2, [r7, #4]
 8020a4a:	23af      	movs	r3, #175	@ 0xaf
 8020a4c:	009b      	lsls	r3, r3, #2
 8020a4e:	58d3      	ldr	r3, [r2, r3]
 8020a50:	689b      	ldr	r3, [r3, #8]
 8020a52:	683a      	ldr	r2, [r7, #0]
 8020a54:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8020a56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020a58:	683a      	ldr	r2, [r7, #0]
 8020a5a:	88d2      	ldrh	r2, [r2, #6]
 8020a5c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8020a5e:	6939      	ldr	r1, [r7, #16]
 8020a60:	683b      	ldr	r3, [r7, #0]
 8020a62:	88da      	ldrh	r2, [r3, #6]
 8020a64:	687b      	ldr	r3, [r7, #4]
 8020a66:	0018      	movs	r0, r3
 8020a68:	f001 fbaf 	bl	80221ca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8020a6c:	e083      	b.n	8020b76 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8020a6e:	683b      	ldr	r3, [r7, #0]
 8020a70:	7859      	ldrb	r1, [r3, #1]
 8020a72:	693a      	ldr	r2, [r7, #16]
 8020a74:	2380      	movs	r3, #128	@ 0x80
 8020a76:	009b      	lsls	r3, r3, #2
 8020a78:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8020a7a:	683b      	ldr	r3, [r7, #0]
 8020a7c:	88db      	ldrh	r3, [r3, #6]
 8020a7e:	b2d9      	uxtb	r1, r3
 8020a80:	693b      	ldr	r3, [r7, #16]
 8020a82:	4a40      	ldr	r2, [pc, #256]	@ (8020b84 <USBD_CDC_Setup+0x18c>)
 8020a84:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8020a86:	6939      	ldr	r1, [r7, #16]
 8020a88:	683b      	ldr	r3, [r7, #0]
 8020a8a:	88da      	ldrh	r2, [r3, #6]
 8020a8c:	687b      	ldr	r3, [r7, #4]
 8020a8e:	0018      	movs	r0, r3
 8020a90:	f001 fbce 	bl	8022230 <USBD_CtlPrepareRx>
      break;
 8020a94:	e06f      	b.n	8020b76 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020a96:	687a      	ldr	r2, [r7, #4]
 8020a98:	23af      	movs	r3, #175	@ 0xaf
 8020a9a:	009b      	lsls	r3, r3, #2
 8020a9c:	58d3      	ldr	r3, [r2, r3]
 8020a9e:	689b      	ldr	r3, [r3, #8]
 8020aa0:	683a      	ldr	r2, [r7, #0]
 8020aa2:	7850      	ldrb	r0, [r2, #1]
 8020aa4:	6839      	ldr	r1, [r7, #0]
 8020aa6:	2200      	movs	r2, #0
 8020aa8:	4798      	blx	r3
      break;
 8020aaa:	e064      	b.n	8020b76 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8020aac:	683b      	ldr	r3, [r7, #0]
 8020aae:	785b      	ldrb	r3, [r3, #1]
 8020ab0:	2b0b      	cmp	r3, #11
 8020ab2:	d037      	beq.n	8020b24 <USBD_CDC_Setup+0x12c>
 8020ab4:	dc47      	bgt.n	8020b46 <USBD_CDC_Setup+0x14e>
 8020ab6:	2b00      	cmp	r3, #0
 8020ab8:	d002      	beq.n	8020ac0 <USBD_CDC_Setup+0xc8>
 8020aba:	2b0a      	cmp	r3, #10
 8020abc:	d019      	beq.n	8020af2 <USBD_CDC_Setup+0xfa>
 8020abe:	e042      	b.n	8020b46 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020ac0:	687a      	ldr	r2, [r7, #4]
 8020ac2:	23a7      	movs	r3, #167	@ 0xa7
 8020ac4:	009b      	lsls	r3, r3, #2
 8020ac6:	5cd3      	ldrb	r3, [r2, r3]
 8020ac8:	2b03      	cmp	r3, #3
 8020aca:	d107      	bne.n	8020adc <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8020acc:	230c      	movs	r3, #12
 8020ace:	18f9      	adds	r1, r7, r3
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	2202      	movs	r2, #2
 8020ad4:	0018      	movs	r0, r3
 8020ad6:	f001 fb78 	bl	80221ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8020ada:	e040      	b.n	8020b5e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8020adc:	683a      	ldr	r2, [r7, #0]
 8020ade:	687b      	ldr	r3, [r7, #4]
 8020ae0:	0011      	movs	r1, r2
 8020ae2:	0018      	movs	r0, r3
 8020ae4:	f001 faf3 	bl	80220ce <USBD_CtlError>
            ret = USBD_FAIL;
 8020ae8:	2317      	movs	r3, #23
 8020aea:	18fb      	adds	r3, r7, r3
 8020aec:	2202      	movs	r2, #2
 8020aee:	701a      	strb	r2, [r3, #0]
          break;
 8020af0:	e035      	b.n	8020b5e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020af2:	687a      	ldr	r2, [r7, #4]
 8020af4:	23a7      	movs	r3, #167	@ 0xa7
 8020af6:	009b      	lsls	r3, r3, #2
 8020af8:	5cd3      	ldrb	r3, [r2, r3]
 8020afa:	2b03      	cmp	r3, #3
 8020afc:	d107      	bne.n	8020b0e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8020afe:	230f      	movs	r3, #15
 8020b00:	18f9      	adds	r1, r7, r3
 8020b02:	687b      	ldr	r3, [r7, #4]
 8020b04:	2201      	movs	r2, #1
 8020b06:	0018      	movs	r0, r3
 8020b08:	f001 fb5f 	bl	80221ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8020b0c:	e027      	b.n	8020b5e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8020b0e:	683a      	ldr	r2, [r7, #0]
 8020b10:	687b      	ldr	r3, [r7, #4]
 8020b12:	0011      	movs	r1, r2
 8020b14:	0018      	movs	r0, r3
 8020b16:	f001 fada 	bl	80220ce <USBD_CtlError>
            ret = USBD_FAIL;
 8020b1a:	2317      	movs	r3, #23
 8020b1c:	18fb      	adds	r3, r7, r3
 8020b1e:	2202      	movs	r2, #2
 8020b20:	701a      	strb	r2, [r3, #0]
          break;
 8020b22:	e01c      	b.n	8020b5e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8020b24:	687a      	ldr	r2, [r7, #4]
 8020b26:	23a7      	movs	r3, #167	@ 0xa7
 8020b28:	009b      	lsls	r3, r3, #2
 8020b2a:	5cd3      	ldrb	r3, [r2, r3]
 8020b2c:	2b03      	cmp	r3, #3
 8020b2e:	d015      	beq.n	8020b5c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8020b30:	683a      	ldr	r2, [r7, #0]
 8020b32:	687b      	ldr	r3, [r7, #4]
 8020b34:	0011      	movs	r1, r2
 8020b36:	0018      	movs	r0, r3
 8020b38:	f001 fac9 	bl	80220ce <USBD_CtlError>
            ret = USBD_FAIL;
 8020b3c:	2317      	movs	r3, #23
 8020b3e:	18fb      	adds	r3, r7, r3
 8020b40:	2202      	movs	r2, #2
 8020b42:	701a      	strb	r2, [r3, #0]
          }
          break;
 8020b44:	e00a      	b.n	8020b5c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8020b46:	683a      	ldr	r2, [r7, #0]
 8020b48:	687b      	ldr	r3, [r7, #4]
 8020b4a:	0011      	movs	r1, r2
 8020b4c:	0018      	movs	r0, r3
 8020b4e:	f001 fabe 	bl	80220ce <USBD_CtlError>
          ret = USBD_FAIL;
 8020b52:	2317      	movs	r3, #23
 8020b54:	18fb      	adds	r3, r7, r3
 8020b56:	2202      	movs	r2, #2
 8020b58:	701a      	strb	r2, [r3, #0]
          break;
 8020b5a:	e000      	b.n	8020b5e <USBD_CDC_Setup+0x166>
          break;
 8020b5c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8020b5e:	e00a      	b.n	8020b76 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8020b60:	683a      	ldr	r2, [r7, #0]
 8020b62:	687b      	ldr	r3, [r7, #4]
 8020b64:	0011      	movs	r1, r2
 8020b66:	0018      	movs	r0, r3
 8020b68:	f001 fab1 	bl	80220ce <USBD_CtlError>
      ret = USBD_FAIL;
 8020b6c:	2317      	movs	r3, #23
 8020b6e:	18fb      	adds	r3, r7, r3
 8020b70:	2202      	movs	r2, #2
 8020b72:	701a      	strb	r2, [r3, #0]
      break;
 8020b74:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8020b76:	2317      	movs	r3, #23
 8020b78:	18fb      	adds	r3, r7, r3
 8020b7a:	781b      	ldrb	r3, [r3, #0]
}
 8020b7c:	0018      	movs	r0, r3
 8020b7e:	46bd      	mov	sp, r7
 8020b80:	b006      	add	sp, #24
 8020b82:	bd80      	pop	{r7, pc}
 8020b84:	00000201 	.word	0x00000201

08020b88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8020b88:	b580      	push	{r7, lr}
 8020b8a:	b084      	sub	sp, #16
 8020b8c:	af00      	add	r7, sp, #0
 8020b8e:	6078      	str	r0, [r7, #4]
 8020b90:	000a      	movs	r2, r1
 8020b92:	1cfb      	adds	r3, r7, #3
 8020b94:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020b96:	687a      	ldr	r2, [r7, #4]
 8020b98:	23ae      	movs	r3, #174	@ 0xae
 8020b9a:	009b      	lsls	r3, r3, #2
 8020b9c:	58d3      	ldr	r3, [r2, r3]
 8020b9e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8020ba0:	687a      	ldr	r2, [r7, #4]
 8020ba2:	23b0      	movs	r3, #176	@ 0xb0
 8020ba4:	009b      	lsls	r3, r3, #2
 8020ba6:	58d3      	ldr	r3, [r2, r3]
 8020ba8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8020baa:	687a      	ldr	r2, [r7, #4]
 8020bac:	23ae      	movs	r3, #174	@ 0xae
 8020bae:	009b      	lsls	r3, r3, #2
 8020bb0:	58d3      	ldr	r3, [r2, r3]
 8020bb2:	2b00      	cmp	r3, #0
 8020bb4:	d03e      	beq.n	8020c34 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8020bb6:	1cfb      	adds	r3, r7, #3
 8020bb8:	781a      	ldrb	r2, [r3, #0]
 8020bba:	6879      	ldr	r1, [r7, #4]
 8020bbc:	0013      	movs	r3, r2
 8020bbe:	009b      	lsls	r3, r3, #2
 8020bc0:	189b      	adds	r3, r3, r2
 8020bc2:	009b      	lsls	r3, r3, #2
 8020bc4:	18cb      	adds	r3, r1, r3
 8020bc6:	331c      	adds	r3, #28
 8020bc8:	681b      	ldr	r3, [r3, #0]
 8020bca:	2b00      	cmp	r3, #0
 8020bcc:	d02b      	beq.n	8020c26 <USBD_CDC_DataIn+0x9e>
 8020bce:	1cfb      	adds	r3, r7, #3
 8020bd0:	781a      	ldrb	r2, [r3, #0]
 8020bd2:	6879      	ldr	r1, [r7, #4]
 8020bd4:	0013      	movs	r3, r2
 8020bd6:	009b      	lsls	r3, r3, #2
 8020bd8:	189b      	adds	r3, r3, r2
 8020bda:	009b      	lsls	r3, r3, #2
 8020bdc:	18cb      	adds	r3, r1, r3
 8020bde:	331c      	adds	r3, #28
 8020be0:	6818      	ldr	r0, [r3, #0]
 8020be2:	1cfb      	adds	r3, r7, #3
 8020be4:	781a      	ldrb	r2, [r3, #0]
 8020be6:	68b9      	ldr	r1, [r7, #8]
 8020be8:	0013      	movs	r3, r2
 8020bea:	009b      	lsls	r3, r3, #2
 8020bec:	189b      	adds	r3, r3, r2
 8020bee:	00db      	lsls	r3, r3, #3
 8020bf0:	18cb      	adds	r3, r1, r3
 8020bf2:	3338      	adds	r3, #56	@ 0x38
 8020bf4:	681b      	ldr	r3, [r3, #0]
 8020bf6:	0019      	movs	r1, r3
 8020bf8:	f7df fb5a 	bl	80002b0 <__aeabi_uidivmod>
 8020bfc:	1e0b      	subs	r3, r1, #0
 8020bfe:	d112      	bne.n	8020c26 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8020c00:	1cfb      	adds	r3, r7, #3
 8020c02:	781a      	ldrb	r2, [r3, #0]
 8020c04:	6879      	ldr	r1, [r7, #4]
 8020c06:	0013      	movs	r3, r2
 8020c08:	009b      	lsls	r3, r3, #2
 8020c0a:	189b      	adds	r3, r3, r2
 8020c0c:	009b      	lsls	r3, r3, #2
 8020c0e:	18cb      	adds	r3, r1, r3
 8020c10:	331c      	adds	r3, #28
 8020c12:	2200      	movs	r2, #0
 8020c14:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8020c16:	1cfb      	adds	r3, r7, #3
 8020c18:	7819      	ldrb	r1, [r3, #0]
 8020c1a:	6878      	ldr	r0, [r7, #4]
 8020c1c:	2300      	movs	r3, #0
 8020c1e:	2200      	movs	r2, #0
 8020c20:	f002 f82f 	bl	8022c82 <USBD_LL_Transmit>
 8020c24:	e004      	b.n	8020c30 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8020c26:	68fa      	ldr	r2, [r7, #12]
 8020c28:	2385      	movs	r3, #133	@ 0x85
 8020c2a:	009b      	lsls	r3, r3, #2
 8020c2c:	2100      	movs	r1, #0
 8020c2e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8020c30:	2300      	movs	r3, #0
 8020c32:	e000      	b.n	8020c36 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8020c34:	2302      	movs	r3, #2
  }
}
 8020c36:	0018      	movs	r0, r3
 8020c38:	46bd      	mov	sp, r7
 8020c3a:	b004      	add	sp, #16
 8020c3c:	bd80      	pop	{r7, pc}

08020c3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8020c3e:	b580      	push	{r7, lr}
 8020c40:	b084      	sub	sp, #16
 8020c42:	af00      	add	r7, sp, #0
 8020c44:	6078      	str	r0, [r7, #4]
 8020c46:	000a      	movs	r2, r1
 8020c48:	1cfb      	adds	r3, r7, #3
 8020c4a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020c4c:	687a      	ldr	r2, [r7, #4]
 8020c4e:	23ae      	movs	r3, #174	@ 0xae
 8020c50:	009b      	lsls	r3, r3, #2
 8020c52:	58d3      	ldr	r3, [r2, r3]
 8020c54:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8020c56:	1cfb      	adds	r3, r7, #3
 8020c58:	781a      	ldrb	r2, [r3, #0]
 8020c5a:	687b      	ldr	r3, [r7, #4]
 8020c5c:	0011      	movs	r1, r2
 8020c5e:	0018      	movs	r0, r3
 8020c60:	f002 f87d 	bl	8022d5e <USBD_LL_GetRxDataSize>
 8020c64:	0001      	movs	r1, r0
 8020c66:	68fa      	ldr	r2, [r7, #12]
 8020c68:	2383      	movs	r3, #131	@ 0x83
 8020c6a:	009b      	lsls	r3, r3, #2
 8020c6c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8020c6e:	687a      	ldr	r2, [r7, #4]
 8020c70:	23ae      	movs	r3, #174	@ 0xae
 8020c72:	009b      	lsls	r3, r3, #2
 8020c74:	58d3      	ldr	r3, [r2, r3]
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	d011      	beq.n	8020c9e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8020c7a:	687a      	ldr	r2, [r7, #4]
 8020c7c:	23af      	movs	r3, #175	@ 0xaf
 8020c7e:	009b      	lsls	r3, r3, #2
 8020c80:	58d3      	ldr	r3, [r2, r3]
 8020c82:	68da      	ldr	r2, [r3, #12]
 8020c84:	68f9      	ldr	r1, [r7, #12]
 8020c86:	2381      	movs	r3, #129	@ 0x81
 8020c88:	009b      	lsls	r3, r3, #2
 8020c8a:	58c8      	ldr	r0, [r1, r3]
 8020c8c:	68fb      	ldr	r3, [r7, #12]
 8020c8e:	2183      	movs	r1, #131	@ 0x83
 8020c90:	0089      	lsls	r1, r1, #2
 8020c92:	468c      	mov	ip, r1
 8020c94:	4463      	add	r3, ip
 8020c96:	0019      	movs	r1, r3
 8020c98:	4790      	blx	r2

    return USBD_OK;
 8020c9a:	2300      	movs	r3, #0
 8020c9c:	e000      	b.n	8020ca0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8020c9e:	2302      	movs	r3, #2
  }
}
 8020ca0:	0018      	movs	r0, r3
 8020ca2:	46bd      	mov	sp, r7
 8020ca4:	b004      	add	sp, #16
 8020ca6:	bd80      	pop	{r7, pc}

08020ca8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8020ca8:	b590      	push	{r4, r7, lr}
 8020caa:	b085      	sub	sp, #20
 8020cac:	af00      	add	r7, sp, #0
 8020cae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020cb0:	687a      	ldr	r2, [r7, #4]
 8020cb2:	23ae      	movs	r3, #174	@ 0xae
 8020cb4:	009b      	lsls	r3, r3, #2
 8020cb6:	58d3      	ldr	r3, [r2, r3]
 8020cb8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8020cba:	687a      	ldr	r2, [r7, #4]
 8020cbc:	23af      	movs	r3, #175	@ 0xaf
 8020cbe:	009b      	lsls	r3, r3, #2
 8020cc0:	58d3      	ldr	r3, [r2, r3]
 8020cc2:	2b00      	cmp	r3, #0
 8020cc4:	d018      	beq.n	8020cf8 <USBD_CDC_EP0_RxReady+0x50>
 8020cc6:	68fa      	ldr	r2, [r7, #12]
 8020cc8:	2380      	movs	r3, #128	@ 0x80
 8020cca:	009b      	lsls	r3, r3, #2
 8020ccc:	5cd3      	ldrb	r3, [r2, r3]
 8020cce:	2bff      	cmp	r3, #255	@ 0xff
 8020cd0:	d012      	beq.n	8020cf8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8020cd2:	687a      	ldr	r2, [r7, #4]
 8020cd4:	23af      	movs	r3, #175	@ 0xaf
 8020cd6:	009b      	lsls	r3, r3, #2
 8020cd8:	58d3      	ldr	r3, [r2, r3]
 8020cda:	689b      	ldr	r3, [r3, #8]
 8020cdc:	68f9      	ldr	r1, [r7, #12]
 8020cde:	2280      	movs	r2, #128	@ 0x80
 8020ce0:	0092      	lsls	r2, r2, #2
 8020ce2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8020ce4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8020ce6:	68fa      	ldr	r2, [r7, #12]
 8020ce8:	4c06      	ldr	r4, [pc, #24]	@ (8020d04 <USBD_CDC_EP0_RxReady+0x5c>)
 8020cea:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8020cec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8020cee:	68fa      	ldr	r2, [r7, #12]
 8020cf0:	2380      	movs	r3, #128	@ 0x80
 8020cf2:	009b      	lsls	r3, r3, #2
 8020cf4:	21ff      	movs	r1, #255	@ 0xff
 8020cf6:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8020cf8:	2300      	movs	r3, #0
}
 8020cfa:	0018      	movs	r0, r3
 8020cfc:	46bd      	mov	sp, r7
 8020cfe:	b005      	add	sp, #20
 8020d00:	bd90      	pop	{r4, r7, pc}
 8020d02:	46c0      	nop			@ (mov r8, r8)
 8020d04:	00000201 	.word	0x00000201

08020d08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8020d08:	b580      	push	{r7, lr}
 8020d0a:	b082      	sub	sp, #8
 8020d0c:	af00      	add	r7, sp, #0
 8020d0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8020d10:	687b      	ldr	r3, [r7, #4]
 8020d12:	2243      	movs	r2, #67	@ 0x43
 8020d14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8020d16:	4b02      	ldr	r3, [pc, #8]	@ (8020d20 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8020d18:	0018      	movs	r0, r3
 8020d1a:	46bd      	mov	sp, r7
 8020d1c:	b002      	add	sp, #8
 8020d1e:	bd80      	pop	{r7, pc}
 8020d20:	20000180 	.word	0x20000180

08020d24 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8020d24:	b580      	push	{r7, lr}
 8020d26:	b082      	sub	sp, #8
 8020d28:	af00      	add	r7, sp, #0
 8020d2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	2243      	movs	r2, #67	@ 0x43
 8020d30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8020d32:	4b02      	ldr	r3, [pc, #8]	@ (8020d3c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8020d34:	0018      	movs	r0, r3
 8020d36:	46bd      	mov	sp, r7
 8020d38:	b002      	add	sp, #8
 8020d3a:	bd80      	pop	{r7, pc}
 8020d3c:	2000013c 	.word	0x2000013c

08020d40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8020d40:	b580      	push	{r7, lr}
 8020d42:	b082      	sub	sp, #8
 8020d44:	af00      	add	r7, sp, #0
 8020d46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8020d48:	687b      	ldr	r3, [r7, #4]
 8020d4a:	2243      	movs	r2, #67	@ 0x43
 8020d4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8020d4e:	4b02      	ldr	r3, [pc, #8]	@ (8020d58 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8020d50:	0018      	movs	r0, r3
 8020d52:	46bd      	mov	sp, r7
 8020d54:	b002      	add	sp, #8
 8020d56:	bd80      	pop	{r7, pc}
 8020d58:	200001c4 	.word	0x200001c4

08020d5c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8020d5c:	b580      	push	{r7, lr}
 8020d5e:	b082      	sub	sp, #8
 8020d60:	af00      	add	r7, sp, #0
 8020d62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8020d64:	687b      	ldr	r3, [r7, #4]
 8020d66:	220a      	movs	r2, #10
 8020d68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8020d6a:	4b02      	ldr	r3, [pc, #8]	@ (8020d74 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8020d6c:	0018      	movs	r0, r3
 8020d6e:	46bd      	mov	sp, r7
 8020d70:	b002      	add	sp, #8
 8020d72:	bd80      	pop	{r7, pc}
 8020d74:	200000f8 	.word	0x200000f8

08020d78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8020d78:	b580      	push	{r7, lr}
 8020d7a:	b084      	sub	sp, #16
 8020d7c:	af00      	add	r7, sp, #0
 8020d7e:	6078      	str	r0, [r7, #4]
 8020d80:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8020d82:	200f      	movs	r0, #15
 8020d84:	183b      	adds	r3, r7, r0
 8020d86:	2202      	movs	r2, #2
 8020d88:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8020d8a:	683b      	ldr	r3, [r7, #0]
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d007      	beq.n	8020da0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8020d90:	687a      	ldr	r2, [r7, #4]
 8020d92:	23af      	movs	r3, #175	@ 0xaf
 8020d94:	009b      	lsls	r3, r3, #2
 8020d96:	6839      	ldr	r1, [r7, #0]
 8020d98:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8020d9a:	183b      	adds	r3, r7, r0
 8020d9c:	2200      	movs	r2, #0
 8020d9e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8020da0:	230f      	movs	r3, #15
 8020da2:	18fb      	adds	r3, r7, r3
 8020da4:	781b      	ldrb	r3, [r3, #0]
}
 8020da6:	0018      	movs	r0, r3
 8020da8:	46bd      	mov	sp, r7
 8020daa:	b004      	add	sp, #16
 8020dac:	bd80      	pop	{r7, pc}

08020dae <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8020dae:	b580      	push	{r7, lr}
 8020db0:	b086      	sub	sp, #24
 8020db2:	af00      	add	r7, sp, #0
 8020db4:	60f8      	str	r0, [r7, #12]
 8020db6:	60b9      	str	r1, [r7, #8]
 8020db8:	1dbb      	adds	r3, r7, #6
 8020dba:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020dbc:	68fa      	ldr	r2, [r7, #12]
 8020dbe:	23ae      	movs	r3, #174	@ 0xae
 8020dc0:	009b      	lsls	r3, r3, #2
 8020dc2:	58d3      	ldr	r3, [r2, r3]
 8020dc4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8020dc6:	697a      	ldr	r2, [r7, #20]
 8020dc8:	2382      	movs	r3, #130	@ 0x82
 8020dca:	009b      	lsls	r3, r3, #2
 8020dcc:	68b9      	ldr	r1, [r7, #8]
 8020dce:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8020dd0:	1dbb      	adds	r3, r7, #6
 8020dd2:	8819      	ldrh	r1, [r3, #0]
 8020dd4:	697a      	ldr	r2, [r7, #20]
 8020dd6:	2384      	movs	r3, #132	@ 0x84
 8020dd8:	009b      	lsls	r3, r3, #2
 8020dda:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8020ddc:	2300      	movs	r3, #0
}
 8020dde:	0018      	movs	r0, r3
 8020de0:	46bd      	mov	sp, r7
 8020de2:	b006      	add	sp, #24
 8020de4:	bd80      	pop	{r7, pc}

08020de6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8020de6:	b580      	push	{r7, lr}
 8020de8:	b084      	sub	sp, #16
 8020dea:	af00      	add	r7, sp, #0
 8020dec:	6078      	str	r0, [r7, #4]
 8020dee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020df0:	687a      	ldr	r2, [r7, #4]
 8020df2:	23ae      	movs	r3, #174	@ 0xae
 8020df4:	009b      	lsls	r3, r3, #2
 8020df6:	58d3      	ldr	r3, [r2, r3]
 8020df8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8020dfa:	68fa      	ldr	r2, [r7, #12]
 8020dfc:	2381      	movs	r3, #129	@ 0x81
 8020dfe:	009b      	lsls	r3, r3, #2
 8020e00:	6839      	ldr	r1, [r7, #0]
 8020e02:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8020e04:	2300      	movs	r3, #0
}
 8020e06:	0018      	movs	r0, r3
 8020e08:	46bd      	mov	sp, r7
 8020e0a:	b004      	add	sp, #16
 8020e0c:	bd80      	pop	{r7, pc}

08020e0e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8020e0e:	b580      	push	{r7, lr}
 8020e10:	b084      	sub	sp, #16
 8020e12:	af00      	add	r7, sp, #0
 8020e14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020e16:	687a      	ldr	r2, [r7, #4]
 8020e18:	23ae      	movs	r3, #174	@ 0xae
 8020e1a:	009b      	lsls	r3, r3, #2
 8020e1c:	58d3      	ldr	r3, [r2, r3]
 8020e1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8020e20:	687a      	ldr	r2, [r7, #4]
 8020e22:	23ae      	movs	r3, #174	@ 0xae
 8020e24:	009b      	lsls	r3, r3, #2
 8020e26:	58d3      	ldr	r3, [r2, r3]
 8020e28:	2b00      	cmp	r3, #0
 8020e2a:	d022      	beq.n	8020e72 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8020e2c:	68fa      	ldr	r2, [r7, #12]
 8020e2e:	2385      	movs	r3, #133	@ 0x85
 8020e30:	009b      	lsls	r3, r3, #2
 8020e32:	58d3      	ldr	r3, [r2, r3]
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	d11a      	bne.n	8020e6e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8020e38:	68fa      	ldr	r2, [r7, #12]
 8020e3a:	2385      	movs	r3, #133	@ 0x85
 8020e3c:	009b      	lsls	r3, r3, #2
 8020e3e:	2101      	movs	r1, #1
 8020e40:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8020e42:	68fa      	ldr	r2, [r7, #12]
 8020e44:	2384      	movs	r3, #132	@ 0x84
 8020e46:	009b      	lsls	r3, r3, #2
 8020e48:	58d2      	ldr	r2, [r2, r3]
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8020e4e:	68fa      	ldr	r2, [r7, #12]
 8020e50:	2382      	movs	r3, #130	@ 0x82
 8020e52:	009b      	lsls	r3, r3, #2
 8020e54:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8020e56:	68fa      	ldr	r2, [r7, #12]
 8020e58:	2384      	movs	r3, #132	@ 0x84
 8020e5a:	009b      	lsls	r3, r3, #2
 8020e5c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8020e5e:	b29b      	uxth	r3, r3
 8020e60:	6878      	ldr	r0, [r7, #4]
 8020e62:	000a      	movs	r2, r1
 8020e64:	2181      	movs	r1, #129	@ 0x81
 8020e66:	f001 ff0c 	bl	8022c82 <USBD_LL_Transmit>

      return USBD_OK;
 8020e6a:	2300      	movs	r3, #0
 8020e6c:	e002      	b.n	8020e74 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8020e6e:	2301      	movs	r3, #1
 8020e70:	e000      	b.n	8020e74 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8020e72:	2302      	movs	r3, #2
  }
}
 8020e74:	0018      	movs	r0, r3
 8020e76:	46bd      	mov	sp, r7
 8020e78:	b004      	add	sp, #16
 8020e7a:	bd80      	pop	{r7, pc}

08020e7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8020e7c:	b580      	push	{r7, lr}
 8020e7e:	b084      	sub	sp, #16
 8020e80:	af00      	add	r7, sp, #0
 8020e82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020e84:	687a      	ldr	r2, [r7, #4]
 8020e86:	23ae      	movs	r3, #174	@ 0xae
 8020e88:	009b      	lsls	r3, r3, #2
 8020e8a:	58d3      	ldr	r3, [r2, r3]
 8020e8c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8020e8e:	687a      	ldr	r2, [r7, #4]
 8020e90:	23ae      	movs	r3, #174	@ 0xae
 8020e92:	009b      	lsls	r3, r3, #2
 8020e94:	58d3      	ldr	r3, [r2, r3]
 8020e96:	2b00      	cmp	r3, #0
 8020e98:	d019      	beq.n	8020ece <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	7c1b      	ldrb	r3, [r3, #16]
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	d10a      	bne.n	8020eb8 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8020ea2:	68fa      	ldr	r2, [r7, #12]
 8020ea4:	2381      	movs	r3, #129	@ 0x81
 8020ea6:	009b      	lsls	r3, r3, #2
 8020ea8:	58d2      	ldr	r2, [r2, r3]
 8020eaa:	2380      	movs	r3, #128	@ 0x80
 8020eac:	009b      	lsls	r3, r3, #2
 8020eae:	6878      	ldr	r0, [r7, #4]
 8020eb0:	2101      	movs	r1, #1
 8020eb2:	f001 ff1d 	bl	8022cf0 <USBD_LL_PrepareReceive>
 8020eb6:	e008      	b.n	8020eca <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8020eb8:	68fa      	ldr	r2, [r7, #12]
 8020eba:	2381      	movs	r3, #129	@ 0x81
 8020ebc:	009b      	lsls	r3, r3, #2
 8020ebe:	58d2      	ldr	r2, [r2, r3]
 8020ec0:	6878      	ldr	r0, [r7, #4]
 8020ec2:	2340      	movs	r3, #64	@ 0x40
 8020ec4:	2101      	movs	r1, #1
 8020ec6:	f001 ff13 	bl	8022cf0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8020eca:	2300      	movs	r3, #0
 8020ecc:	e000      	b.n	8020ed0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8020ece:	2302      	movs	r3, #2
  }
}
 8020ed0:	0018      	movs	r0, r3
 8020ed2:	46bd      	mov	sp, r7
 8020ed4:	b004      	add	sp, #16
 8020ed6:	bd80      	pop	{r7, pc}

08020ed8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020ed8:	b580      	push	{r7, lr}
 8020eda:	b084      	sub	sp, #16
 8020edc:	af00      	add	r7, sp, #0
 8020ede:	60f8      	str	r0, [r7, #12]
 8020ee0:	60b9      	str	r1, [r7, #8]
 8020ee2:	1dfb      	adds	r3, r7, #7
 8020ee4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020ee6:	68fb      	ldr	r3, [r7, #12]
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	d101      	bne.n	8020ef0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020eec:	2302      	movs	r3, #2
 8020eee:	e020      	b.n	8020f32 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8020ef0:	68fa      	ldr	r2, [r7, #12]
 8020ef2:	23ad      	movs	r3, #173	@ 0xad
 8020ef4:	009b      	lsls	r3, r3, #2
 8020ef6:	58d3      	ldr	r3, [r2, r3]
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	d004      	beq.n	8020f06 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8020efc:	68fa      	ldr	r2, [r7, #12]
 8020efe:	23ad      	movs	r3, #173	@ 0xad
 8020f00:	009b      	lsls	r3, r3, #2
 8020f02:	2100      	movs	r1, #0
 8020f04:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020f06:	68bb      	ldr	r3, [r7, #8]
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	d004      	beq.n	8020f16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020f0c:	68fa      	ldr	r2, [r7, #12]
 8020f0e:	23ac      	movs	r3, #172	@ 0xac
 8020f10:	009b      	lsls	r3, r3, #2
 8020f12:	68b9      	ldr	r1, [r7, #8]
 8020f14:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020f16:	68fa      	ldr	r2, [r7, #12]
 8020f18:	23a7      	movs	r3, #167	@ 0xa7
 8020f1a:	009b      	lsls	r3, r3, #2
 8020f1c:	2101      	movs	r1, #1
 8020f1e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8020f20:	68fb      	ldr	r3, [r7, #12]
 8020f22:	1dfa      	adds	r2, r7, #7
 8020f24:	7812      	ldrb	r2, [r2, #0]
 8020f26:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8020f28:	68fb      	ldr	r3, [r7, #12]
 8020f2a:	0018      	movs	r0, r3
 8020f2c:	f001 fd0c 	bl	8022948 <USBD_LL_Init>

  return USBD_OK;
 8020f30:	2300      	movs	r3, #0
}
 8020f32:	0018      	movs	r0, r3
 8020f34:	46bd      	mov	sp, r7
 8020f36:	b004      	add	sp, #16
 8020f38:	bd80      	pop	{r7, pc}

08020f3a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020f3a:	b580      	push	{r7, lr}
 8020f3c:	b084      	sub	sp, #16
 8020f3e:	af00      	add	r7, sp, #0
 8020f40:	6078      	str	r0, [r7, #4]
 8020f42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8020f44:	200f      	movs	r0, #15
 8020f46:	183b      	adds	r3, r7, r0
 8020f48:	2200      	movs	r2, #0
 8020f4a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8020f4c:	683b      	ldr	r3, [r7, #0]
 8020f4e:	2b00      	cmp	r3, #0
 8020f50:	d008      	beq.n	8020f64 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8020f52:	687a      	ldr	r2, [r7, #4]
 8020f54:	23ad      	movs	r3, #173	@ 0xad
 8020f56:	009b      	lsls	r3, r3, #2
 8020f58:	6839      	ldr	r1, [r7, #0]
 8020f5a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8020f5c:	183b      	adds	r3, r7, r0
 8020f5e:	2200      	movs	r2, #0
 8020f60:	701a      	strb	r2, [r3, #0]
 8020f62:	e003      	b.n	8020f6c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8020f64:	230f      	movs	r3, #15
 8020f66:	18fb      	adds	r3, r7, r3
 8020f68:	2202      	movs	r2, #2
 8020f6a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8020f6c:	230f      	movs	r3, #15
 8020f6e:	18fb      	adds	r3, r7, r3
 8020f70:	781b      	ldrb	r3, [r3, #0]
}
 8020f72:	0018      	movs	r0, r3
 8020f74:	46bd      	mov	sp, r7
 8020f76:	b004      	add	sp, #16
 8020f78:	bd80      	pop	{r7, pc}

08020f7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8020f7a:	b580      	push	{r7, lr}
 8020f7c:	b082      	sub	sp, #8
 8020f7e:	af00      	add	r7, sp, #0
 8020f80:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8020f82:	687b      	ldr	r3, [r7, #4]
 8020f84:	0018      	movs	r0, r3
 8020f86:	f001 fd43 	bl	8022a10 <USBD_LL_Start>

  return USBD_OK;
 8020f8a:	2300      	movs	r3, #0
}
 8020f8c:	0018      	movs	r0, r3
 8020f8e:	46bd      	mov	sp, r7
 8020f90:	b002      	add	sp, #8
 8020f92:	bd80      	pop	{r7, pc}

08020f94 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8020f94:	b580      	push	{r7, lr}
 8020f96:	b082      	sub	sp, #8
 8020f98:	af00      	add	r7, sp, #0
 8020f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8020f9c:	2300      	movs	r3, #0
}
 8020f9e:	0018      	movs	r0, r3
 8020fa0:	46bd      	mov	sp, r7
 8020fa2:	b002      	add	sp, #8
 8020fa4:	bd80      	pop	{r7, pc}

08020fa6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8020fa6:	b590      	push	{r4, r7, lr}
 8020fa8:	b085      	sub	sp, #20
 8020faa:	af00      	add	r7, sp, #0
 8020fac:	6078      	str	r0, [r7, #4]
 8020fae:	000a      	movs	r2, r1
 8020fb0:	1cfb      	adds	r3, r7, #3
 8020fb2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8020fb4:	240f      	movs	r4, #15
 8020fb6:	193b      	adds	r3, r7, r4
 8020fb8:	2202      	movs	r2, #2
 8020fba:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8020fbc:	687a      	ldr	r2, [r7, #4]
 8020fbe:	23ad      	movs	r3, #173	@ 0xad
 8020fc0:	009b      	lsls	r3, r3, #2
 8020fc2:	58d3      	ldr	r3, [r2, r3]
 8020fc4:	2b00      	cmp	r3, #0
 8020fc6:	d00e      	beq.n	8020fe6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8020fc8:	687a      	ldr	r2, [r7, #4]
 8020fca:	23ad      	movs	r3, #173	@ 0xad
 8020fcc:	009b      	lsls	r3, r3, #2
 8020fce:	58d3      	ldr	r3, [r2, r3]
 8020fd0:	681b      	ldr	r3, [r3, #0]
 8020fd2:	1cfa      	adds	r2, r7, #3
 8020fd4:	7811      	ldrb	r1, [r2, #0]
 8020fd6:	687a      	ldr	r2, [r7, #4]
 8020fd8:	0010      	movs	r0, r2
 8020fda:	4798      	blx	r3
 8020fdc:	1e03      	subs	r3, r0, #0
 8020fde:	d102      	bne.n	8020fe6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8020fe0:	193b      	adds	r3, r7, r4
 8020fe2:	2200      	movs	r2, #0
 8020fe4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8020fe6:	230f      	movs	r3, #15
 8020fe8:	18fb      	adds	r3, r7, r3
 8020fea:	781b      	ldrb	r3, [r3, #0]
}
 8020fec:	0018      	movs	r0, r3
 8020fee:	46bd      	mov	sp, r7
 8020ff0:	b005      	add	sp, #20
 8020ff2:	bd90      	pop	{r4, r7, pc}

08020ff4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8020ff4:	b580      	push	{r7, lr}
 8020ff6:	b082      	sub	sp, #8
 8020ff8:	af00      	add	r7, sp, #0
 8020ffa:	6078      	str	r0, [r7, #4]
 8020ffc:	000a      	movs	r2, r1
 8020ffe:	1cfb      	adds	r3, r7, #3
 8021000:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8021002:	687a      	ldr	r2, [r7, #4]
 8021004:	23ad      	movs	r3, #173	@ 0xad
 8021006:	009b      	lsls	r3, r3, #2
 8021008:	58d3      	ldr	r3, [r2, r3]
 802100a:	685b      	ldr	r3, [r3, #4]
 802100c:	1cfa      	adds	r2, r7, #3
 802100e:	7811      	ldrb	r1, [r2, #0]
 8021010:	687a      	ldr	r2, [r7, #4]
 8021012:	0010      	movs	r0, r2
 8021014:	4798      	blx	r3

  return USBD_OK;
 8021016:	2300      	movs	r3, #0
}
 8021018:	0018      	movs	r0, r3
 802101a:	46bd      	mov	sp, r7
 802101c:	b002      	add	sp, #8
 802101e:	bd80      	pop	{r7, pc}

08021020 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8021020:	b580      	push	{r7, lr}
 8021022:	b082      	sub	sp, #8
 8021024:	af00      	add	r7, sp, #0
 8021026:	6078      	str	r0, [r7, #4]
 8021028:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 802102a:	687b      	ldr	r3, [r7, #4]
 802102c:	22aa      	movs	r2, #170	@ 0xaa
 802102e:	0092      	lsls	r2, r2, #2
 8021030:	4694      	mov	ip, r2
 8021032:	4463      	add	r3, ip
 8021034:	683a      	ldr	r2, [r7, #0]
 8021036:	0011      	movs	r1, r2
 8021038:	0018      	movs	r0, r3
 802103a:	f001 f810 	bl	802205e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 802103e:	687a      	ldr	r2, [r7, #4]
 8021040:	23a5      	movs	r3, #165	@ 0xa5
 8021042:	009b      	lsls	r3, r3, #2
 8021044:	2101      	movs	r1, #1
 8021046:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	4a23      	ldr	r2, [pc, #140]	@ (80210d8 <USBD_LL_SetupStage+0xb8>)
 802104c:	5a9b      	ldrh	r3, [r3, r2]
 802104e:	0019      	movs	r1, r3
 8021050:	687a      	ldr	r2, [r7, #4]
 8021052:	23a6      	movs	r3, #166	@ 0xa6
 8021054:	009b      	lsls	r3, r3, #2
 8021056:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8021058:	687a      	ldr	r2, [r7, #4]
 802105a:	23aa      	movs	r3, #170	@ 0xaa
 802105c:	009b      	lsls	r3, r3, #2
 802105e:	5cd3      	ldrb	r3, [r2, r3]
 8021060:	001a      	movs	r2, r3
 8021062:	231f      	movs	r3, #31
 8021064:	4013      	ands	r3, r2
 8021066:	2b02      	cmp	r3, #2
 8021068:	d019      	beq.n	802109e <USBD_LL_SetupStage+0x7e>
 802106a:	d822      	bhi.n	80210b2 <USBD_LL_SetupStage+0x92>
 802106c:	2b00      	cmp	r3, #0
 802106e:	d002      	beq.n	8021076 <USBD_LL_SetupStage+0x56>
 8021070:	2b01      	cmp	r3, #1
 8021072:	d00a      	beq.n	802108a <USBD_LL_SetupStage+0x6a>
 8021074:	e01d      	b.n	80210b2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8021076:	687b      	ldr	r3, [r7, #4]
 8021078:	22aa      	movs	r2, #170	@ 0xaa
 802107a:	0092      	lsls	r2, r2, #2
 802107c:	189a      	adds	r2, r3, r2
 802107e:	687b      	ldr	r3, [r7, #4]
 8021080:	0011      	movs	r1, r2
 8021082:	0018      	movs	r0, r3
 8021084:	f000 fa10 	bl	80214a8 <USBD_StdDevReq>
      break;
 8021088:	e020      	b.n	80210cc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 802108a:	687b      	ldr	r3, [r7, #4]
 802108c:	22aa      	movs	r2, #170	@ 0xaa
 802108e:	0092      	lsls	r2, r2, #2
 8021090:	189a      	adds	r2, r3, r2
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	0011      	movs	r1, r2
 8021096:	0018      	movs	r0, r3
 8021098:	f000 fa78 	bl	802158c <USBD_StdItfReq>
      break;
 802109c:	e016      	b.n	80210cc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 802109e:	687b      	ldr	r3, [r7, #4]
 80210a0:	22aa      	movs	r2, #170	@ 0xaa
 80210a2:	0092      	lsls	r2, r2, #2
 80210a4:	189a      	adds	r2, r3, r2
 80210a6:	687b      	ldr	r3, [r7, #4]
 80210a8:	0011      	movs	r1, r2
 80210aa:	0018      	movs	r0, r3
 80210ac:	f000 fac5 	bl	802163a <USBD_StdEPReq>
      break;
 80210b0:	e00c      	b.n	80210cc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80210b2:	687a      	ldr	r2, [r7, #4]
 80210b4:	23aa      	movs	r3, #170	@ 0xaa
 80210b6:	009b      	lsls	r3, r3, #2
 80210b8:	5cd3      	ldrb	r3, [r2, r3]
 80210ba:	227f      	movs	r2, #127	@ 0x7f
 80210bc:	4393      	bics	r3, r2
 80210be:	b2da      	uxtb	r2, r3
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	0011      	movs	r1, r2
 80210c4:	0018      	movs	r0, r3
 80210c6:	f001 fd2a 	bl	8022b1e <USBD_LL_StallEP>
      break;
 80210ca:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80210cc:	2300      	movs	r3, #0
}
 80210ce:	0018      	movs	r0, r3
 80210d0:	46bd      	mov	sp, r7
 80210d2:	b002      	add	sp, #8
 80210d4:	bd80      	pop	{r7, pc}
 80210d6:	46c0      	nop			@ (mov r8, r8)
 80210d8:	000002ae 	.word	0x000002ae

080210dc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80210dc:	b580      	push	{r7, lr}
 80210de:	b086      	sub	sp, #24
 80210e0:	af00      	add	r7, sp, #0
 80210e2:	60f8      	str	r0, [r7, #12]
 80210e4:	607a      	str	r2, [r7, #4]
 80210e6:	200b      	movs	r0, #11
 80210e8:	183b      	adds	r3, r7, r0
 80210ea:	1c0a      	adds	r2, r1, #0
 80210ec:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80210ee:	183b      	adds	r3, r7, r0
 80210f0:	781b      	ldrb	r3, [r3, #0]
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	d154      	bne.n	80211a0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80210f6:	68fb      	ldr	r3, [r7, #12]
 80210f8:	3355      	adds	r3, #85	@ 0x55
 80210fa:	33ff      	adds	r3, #255	@ 0xff
 80210fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80210fe:	68fa      	ldr	r2, [r7, #12]
 8021100:	23a5      	movs	r3, #165	@ 0xa5
 8021102:	009b      	lsls	r3, r3, #2
 8021104:	58d3      	ldr	r3, [r2, r3]
 8021106:	2b03      	cmp	r3, #3
 8021108:	d139      	bne.n	802117e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 802110a:	697b      	ldr	r3, [r7, #20]
 802110c:	68da      	ldr	r2, [r3, #12]
 802110e:	697b      	ldr	r3, [r7, #20]
 8021110:	691b      	ldr	r3, [r3, #16]
 8021112:	429a      	cmp	r2, r3
 8021114:	d919      	bls.n	802114a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8021116:	697b      	ldr	r3, [r7, #20]
 8021118:	68da      	ldr	r2, [r3, #12]
 802111a:	697b      	ldr	r3, [r7, #20]
 802111c:	691b      	ldr	r3, [r3, #16]
 802111e:	1ad2      	subs	r2, r2, r3
 8021120:	697b      	ldr	r3, [r7, #20]
 8021122:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021124:	697b      	ldr	r3, [r7, #20]
 8021126:	68da      	ldr	r2, [r3, #12]
 8021128:	697b      	ldr	r3, [r7, #20]
 802112a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 802112c:	429a      	cmp	r2, r3
 802112e:	d203      	bcs.n	8021138 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021130:	697b      	ldr	r3, [r7, #20]
 8021132:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8021134:	b29b      	uxth	r3, r3
 8021136:	e002      	b.n	802113e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021138:	697b      	ldr	r3, [r7, #20]
 802113a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 802113c:	b29b      	uxth	r3, r3
 802113e:	6879      	ldr	r1, [r7, #4]
 8021140:	68f8      	ldr	r0, [r7, #12]
 8021142:	001a      	movs	r2, r3
 8021144:	f001 f898 	bl	8022278 <USBD_CtlContinueRx>
 8021148:	e045      	b.n	80211d6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 802114a:	68fa      	ldr	r2, [r7, #12]
 802114c:	23ad      	movs	r3, #173	@ 0xad
 802114e:	009b      	lsls	r3, r3, #2
 8021150:	58d3      	ldr	r3, [r2, r3]
 8021152:	691b      	ldr	r3, [r3, #16]
 8021154:	2b00      	cmp	r3, #0
 8021156:	d00d      	beq.n	8021174 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021158:	68fa      	ldr	r2, [r7, #12]
 802115a:	23a7      	movs	r3, #167	@ 0xa7
 802115c:	009b      	lsls	r3, r3, #2
 802115e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021160:	2b03      	cmp	r3, #3
 8021162:	d107      	bne.n	8021174 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8021164:	68fa      	ldr	r2, [r7, #12]
 8021166:	23ad      	movs	r3, #173	@ 0xad
 8021168:	009b      	lsls	r3, r3, #2
 802116a:	58d3      	ldr	r3, [r2, r3]
 802116c:	691b      	ldr	r3, [r3, #16]
 802116e:	68fa      	ldr	r2, [r7, #12]
 8021170:	0010      	movs	r0, r2
 8021172:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8021174:	68fb      	ldr	r3, [r7, #12]
 8021176:	0018      	movs	r0, r3
 8021178:	f001 f891 	bl	802229e <USBD_CtlSendStatus>
 802117c:	e02b      	b.n	80211d6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 802117e:	68fa      	ldr	r2, [r7, #12]
 8021180:	23a5      	movs	r3, #165	@ 0xa5
 8021182:	009b      	lsls	r3, r3, #2
 8021184:	58d3      	ldr	r3, [r2, r3]
 8021186:	2b05      	cmp	r3, #5
 8021188:	d125      	bne.n	80211d6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 802118a:	68fa      	ldr	r2, [r7, #12]
 802118c:	23a5      	movs	r3, #165	@ 0xa5
 802118e:	009b      	lsls	r3, r3, #2
 8021190:	2100      	movs	r1, #0
 8021192:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8021194:	68fb      	ldr	r3, [r7, #12]
 8021196:	2100      	movs	r1, #0
 8021198:	0018      	movs	r0, r3
 802119a:	f001 fcc0 	bl	8022b1e <USBD_LL_StallEP>
 802119e:	e01a      	b.n	80211d6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80211a0:	68fa      	ldr	r2, [r7, #12]
 80211a2:	23ad      	movs	r3, #173	@ 0xad
 80211a4:	009b      	lsls	r3, r3, #2
 80211a6:	58d3      	ldr	r3, [r2, r3]
 80211a8:	699b      	ldr	r3, [r3, #24]
 80211aa:	2b00      	cmp	r3, #0
 80211ac:	d011      	beq.n	80211d2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80211ae:	68fa      	ldr	r2, [r7, #12]
 80211b0:	23a7      	movs	r3, #167	@ 0xa7
 80211b2:	009b      	lsls	r3, r3, #2
 80211b4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80211b6:	2b03      	cmp	r3, #3
 80211b8:	d10b      	bne.n	80211d2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80211ba:	68fa      	ldr	r2, [r7, #12]
 80211bc:	23ad      	movs	r3, #173	@ 0xad
 80211be:	009b      	lsls	r3, r3, #2
 80211c0:	58d3      	ldr	r3, [r2, r3]
 80211c2:	699b      	ldr	r3, [r3, #24]
 80211c4:	220b      	movs	r2, #11
 80211c6:	18ba      	adds	r2, r7, r2
 80211c8:	7811      	ldrb	r1, [r2, #0]
 80211ca:	68fa      	ldr	r2, [r7, #12]
 80211cc:	0010      	movs	r0, r2
 80211ce:	4798      	blx	r3
 80211d0:	e001      	b.n	80211d6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80211d2:	2302      	movs	r3, #2
 80211d4:	e000      	b.n	80211d8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80211d6:	2300      	movs	r3, #0
}
 80211d8:	0018      	movs	r0, r3
 80211da:	46bd      	mov	sp, r7
 80211dc:	b006      	add	sp, #24
 80211de:	bd80      	pop	{r7, pc}

080211e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80211e0:	b580      	push	{r7, lr}
 80211e2:	b086      	sub	sp, #24
 80211e4:	af00      	add	r7, sp, #0
 80211e6:	60f8      	str	r0, [r7, #12]
 80211e8:	607a      	str	r2, [r7, #4]
 80211ea:	200b      	movs	r0, #11
 80211ec:	183b      	adds	r3, r7, r0
 80211ee:	1c0a      	adds	r2, r1, #0
 80211f0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80211f2:	183b      	adds	r3, r7, r0
 80211f4:	781b      	ldrb	r3, [r3, #0]
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	d000      	beq.n	80211fc <USBD_LL_DataInStage+0x1c>
 80211fa:	e08e      	b.n	802131a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80211fc:	68fb      	ldr	r3, [r7, #12]
 80211fe:	3314      	adds	r3, #20
 8021200:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021202:	68fa      	ldr	r2, [r7, #12]
 8021204:	23a5      	movs	r3, #165	@ 0xa5
 8021206:	009b      	lsls	r3, r3, #2
 8021208:	58d3      	ldr	r3, [r2, r3]
 802120a:	2b02      	cmp	r3, #2
 802120c:	d164      	bne.n	80212d8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 802120e:	697b      	ldr	r3, [r7, #20]
 8021210:	68da      	ldr	r2, [r3, #12]
 8021212:	697b      	ldr	r3, [r7, #20]
 8021214:	691b      	ldr	r3, [r3, #16]
 8021216:	429a      	cmp	r2, r3
 8021218:	d915      	bls.n	8021246 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 802121a:	697b      	ldr	r3, [r7, #20]
 802121c:	68da      	ldr	r2, [r3, #12]
 802121e:	697b      	ldr	r3, [r7, #20]
 8021220:	691b      	ldr	r3, [r3, #16]
 8021222:	1ad2      	subs	r2, r2, r3
 8021224:	697b      	ldr	r3, [r7, #20]
 8021226:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8021228:	697b      	ldr	r3, [r7, #20]
 802122a:	68db      	ldr	r3, [r3, #12]
 802122c:	b29a      	uxth	r2, r3
 802122e:	6879      	ldr	r1, [r7, #4]
 8021230:	68fb      	ldr	r3, [r7, #12]
 8021232:	0018      	movs	r0, r3
 8021234:	f000 ffe9 	bl	802220a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021238:	68f8      	ldr	r0, [r7, #12]
 802123a:	2300      	movs	r3, #0
 802123c:	2200      	movs	r2, #0
 802123e:	2100      	movs	r1, #0
 8021240:	f001 fd56 	bl	8022cf0 <USBD_LL_PrepareReceive>
 8021244:	e059      	b.n	80212fa <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021246:	697b      	ldr	r3, [r7, #20]
 8021248:	689a      	ldr	r2, [r3, #8]
 802124a:	697b      	ldr	r3, [r7, #20]
 802124c:	691b      	ldr	r3, [r3, #16]
 802124e:	0019      	movs	r1, r3
 8021250:	0010      	movs	r0, r2
 8021252:	f7df f82d 	bl	80002b0 <__aeabi_uidivmod>
 8021256:	1e0b      	subs	r3, r1, #0
 8021258:	d11f      	bne.n	802129a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 802125a:	697b      	ldr	r3, [r7, #20]
 802125c:	689a      	ldr	r2, [r3, #8]
 802125e:	697b      	ldr	r3, [r7, #20]
 8021260:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021262:	429a      	cmp	r2, r3
 8021264:	d319      	bcc.n	802129a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8021266:	697b      	ldr	r3, [r7, #20]
 8021268:	689a      	ldr	r2, [r3, #8]
 802126a:	68f9      	ldr	r1, [r7, #12]
 802126c:	23a6      	movs	r3, #166	@ 0xa6
 802126e:	009b      	lsls	r3, r3, #2
 8021270:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8021272:	429a      	cmp	r2, r3
 8021274:	d211      	bcs.n	802129a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021276:	68fb      	ldr	r3, [r7, #12]
 8021278:	2200      	movs	r2, #0
 802127a:	2100      	movs	r1, #0
 802127c:	0018      	movs	r0, r3
 802127e:	f000 ffc4 	bl	802220a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8021282:	68fa      	ldr	r2, [r7, #12]
 8021284:	23a6      	movs	r3, #166	@ 0xa6
 8021286:	009b      	lsls	r3, r3, #2
 8021288:	2100      	movs	r1, #0
 802128a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802128c:	68f8      	ldr	r0, [r7, #12]
 802128e:	2300      	movs	r3, #0
 8021290:	2200      	movs	r2, #0
 8021292:	2100      	movs	r1, #0
 8021294:	f001 fd2c 	bl	8022cf0 <USBD_LL_PrepareReceive>
 8021298:	e02f      	b.n	80212fa <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 802129a:	68fa      	ldr	r2, [r7, #12]
 802129c:	23ad      	movs	r3, #173	@ 0xad
 802129e:	009b      	lsls	r3, r3, #2
 80212a0:	58d3      	ldr	r3, [r2, r3]
 80212a2:	68db      	ldr	r3, [r3, #12]
 80212a4:	2b00      	cmp	r3, #0
 80212a6:	d00d      	beq.n	80212c4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80212a8:	68fa      	ldr	r2, [r7, #12]
 80212aa:	23a7      	movs	r3, #167	@ 0xa7
 80212ac:	009b      	lsls	r3, r3, #2
 80212ae:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80212b0:	2b03      	cmp	r3, #3
 80212b2:	d107      	bne.n	80212c4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80212b4:	68fa      	ldr	r2, [r7, #12]
 80212b6:	23ad      	movs	r3, #173	@ 0xad
 80212b8:	009b      	lsls	r3, r3, #2
 80212ba:	58d3      	ldr	r3, [r2, r3]
 80212bc:	68db      	ldr	r3, [r3, #12]
 80212be:	68fa      	ldr	r2, [r7, #12]
 80212c0:	0010      	movs	r0, r2
 80212c2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80212c4:	68fb      	ldr	r3, [r7, #12]
 80212c6:	2180      	movs	r1, #128	@ 0x80
 80212c8:	0018      	movs	r0, r3
 80212ca:	f001 fc28 	bl	8022b1e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80212ce:	68fb      	ldr	r3, [r7, #12]
 80212d0:	0018      	movs	r0, r3
 80212d2:	f000 fff8 	bl	80222c6 <USBD_CtlReceiveStatus>
 80212d6:	e010      	b.n	80212fa <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80212d8:	68fa      	ldr	r2, [r7, #12]
 80212da:	23a5      	movs	r3, #165	@ 0xa5
 80212dc:	009b      	lsls	r3, r3, #2
 80212de:	58d3      	ldr	r3, [r2, r3]
 80212e0:	2b04      	cmp	r3, #4
 80212e2:	d005      	beq.n	80212f0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80212e4:	68fa      	ldr	r2, [r7, #12]
 80212e6:	23a5      	movs	r3, #165	@ 0xa5
 80212e8:	009b      	lsls	r3, r3, #2
 80212ea:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80212ec:	2b00      	cmp	r3, #0
 80212ee:	d104      	bne.n	80212fa <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80212f0:	68fb      	ldr	r3, [r7, #12]
 80212f2:	2180      	movs	r1, #128	@ 0x80
 80212f4:	0018      	movs	r0, r3
 80212f6:	f001 fc12 	bl	8022b1e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80212fa:	68fa      	ldr	r2, [r7, #12]
 80212fc:	23a8      	movs	r3, #168	@ 0xa8
 80212fe:	009b      	lsls	r3, r3, #2
 8021300:	5cd3      	ldrb	r3, [r2, r3]
 8021302:	2b01      	cmp	r3, #1
 8021304:	d124      	bne.n	8021350 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8021306:	68fb      	ldr	r3, [r7, #12]
 8021308:	0018      	movs	r0, r3
 802130a:	f7ff fe43 	bl	8020f94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 802130e:	68fa      	ldr	r2, [r7, #12]
 8021310:	23a8      	movs	r3, #168	@ 0xa8
 8021312:	009b      	lsls	r3, r3, #2
 8021314:	2100      	movs	r1, #0
 8021316:	54d1      	strb	r1, [r2, r3]
 8021318:	e01a      	b.n	8021350 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 802131a:	68fa      	ldr	r2, [r7, #12]
 802131c:	23ad      	movs	r3, #173	@ 0xad
 802131e:	009b      	lsls	r3, r3, #2
 8021320:	58d3      	ldr	r3, [r2, r3]
 8021322:	695b      	ldr	r3, [r3, #20]
 8021324:	2b00      	cmp	r3, #0
 8021326:	d011      	beq.n	802134c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021328:	68fa      	ldr	r2, [r7, #12]
 802132a:	23a7      	movs	r3, #167	@ 0xa7
 802132c:	009b      	lsls	r3, r3, #2
 802132e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8021330:	2b03      	cmp	r3, #3
 8021332:	d10b      	bne.n	802134c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8021334:	68fa      	ldr	r2, [r7, #12]
 8021336:	23ad      	movs	r3, #173	@ 0xad
 8021338:	009b      	lsls	r3, r3, #2
 802133a:	58d3      	ldr	r3, [r2, r3]
 802133c:	695b      	ldr	r3, [r3, #20]
 802133e:	220b      	movs	r2, #11
 8021340:	18ba      	adds	r2, r7, r2
 8021342:	7811      	ldrb	r1, [r2, #0]
 8021344:	68fa      	ldr	r2, [r7, #12]
 8021346:	0010      	movs	r0, r2
 8021348:	4798      	blx	r3
 802134a:	e001      	b.n	8021350 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 802134c:	2302      	movs	r3, #2
 802134e:	e000      	b.n	8021352 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8021350:	2300      	movs	r3, #0
}
 8021352:	0018      	movs	r0, r3
 8021354:	46bd      	mov	sp, r7
 8021356:	b006      	add	sp, #24
 8021358:	bd80      	pop	{r7, pc}

0802135a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 802135a:	b580      	push	{r7, lr}
 802135c:	b082      	sub	sp, #8
 802135e:	af00      	add	r7, sp, #0
 8021360:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021362:	6878      	ldr	r0, [r7, #4]
 8021364:	2340      	movs	r3, #64	@ 0x40
 8021366:	2200      	movs	r2, #0
 8021368:	2100      	movs	r1, #0
 802136a:	f001 fb76 	bl	8022a5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 802136e:	687a      	ldr	r2, [r7, #4]
 8021370:	23ac      	movs	r3, #172	@ 0xac
 8021372:	005b      	lsls	r3, r3, #1
 8021374:	2101      	movs	r1, #1
 8021376:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021378:	687a      	ldr	r2, [r7, #4]
 802137a:	23b2      	movs	r3, #178	@ 0xb2
 802137c:	005b      	lsls	r3, r3, #1
 802137e:	2140      	movs	r1, #64	@ 0x40
 8021380:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021382:	6878      	ldr	r0, [r7, #4]
 8021384:	2340      	movs	r3, #64	@ 0x40
 8021386:	2200      	movs	r2, #0
 8021388:	2180      	movs	r1, #128	@ 0x80
 802138a:	f001 fb66 	bl	8022a5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 802138e:	687b      	ldr	r3, [r7, #4]
 8021390:	2201      	movs	r2, #1
 8021392:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8021394:	687b      	ldr	r3, [r7, #4]
 8021396:	2240      	movs	r2, #64	@ 0x40
 8021398:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802139a:	687a      	ldr	r2, [r7, #4]
 802139c:	23a7      	movs	r3, #167	@ 0xa7
 802139e:	009b      	lsls	r3, r3, #2
 80213a0:	2101      	movs	r1, #1
 80213a2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80213a4:	687a      	ldr	r2, [r7, #4]
 80213a6:	23a5      	movs	r3, #165	@ 0xa5
 80213a8:	009b      	lsls	r3, r3, #2
 80213aa:	2100      	movs	r1, #0
 80213ac:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80213ae:	687b      	ldr	r3, [r7, #4]
 80213b0:	2200      	movs	r2, #0
 80213b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80213b4:	687a      	ldr	r2, [r7, #4]
 80213b6:	23a9      	movs	r3, #169	@ 0xa9
 80213b8:	009b      	lsls	r3, r3, #2
 80213ba:	2100      	movs	r1, #0
 80213bc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80213be:	687a      	ldr	r2, [r7, #4]
 80213c0:	23ae      	movs	r3, #174	@ 0xae
 80213c2:	009b      	lsls	r3, r3, #2
 80213c4:	58d3      	ldr	r3, [r2, r3]
 80213c6:	2b00      	cmp	r3, #0
 80213c8:	d00a      	beq.n	80213e0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80213ca:	687a      	ldr	r2, [r7, #4]
 80213cc:	23ad      	movs	r3, #173	@ 0xad
 80213ce:	009b      	lsls	r3, r3, #2
 80213d0:	58d3      	ldr	r3, [r2, r3]
 80213d2:	685a      	ldr	r2, [r3, #4]
 80213d4:	687b      	ldr	r3, [r7, #4]
 80213d6:	685b      	ldr	r3, [r3, #4]
 80213d8:	b2d9      	uxtb	r1, r3
 80213da:	687b      	ldr	r3, [r7, #4]
 80213dc:	0018      	movs	r0, r3
 80213de:	4790      	blx	r2
  }

  return USBD_OK;
 80213e0:	2300      	movs	r3, #0
}
 80213e2:	0018      	movs	r0, r3
 80213e4:	46bd      	mov	sp, r7
 80213e6:	b002      	add	sp, #8
 80213e8:	bd80      	pop	{r7, pc}

080213ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80213ea:	b580      	push	{r7, lr}
 80213ec:	b082      	sub	sp, #8
 80213ee:	af00      	add	r7, sp, #0
 80213f0:	6078      	str	r0, [r7, #4]
 80213f2:	000a      	movs	r2, r1
 80213f4:	1cfb      	adds	r3, r7, #3
 80213f6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80213f8:	687b      	ldr	r3, [r7, #4]
 80213fa:	1cfa      	adds	r2, r7, #3
 80213fc:	7812      	ldrb	r2, [r2, #0]
 80213fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8021400:	2300      	movs	r3, #0
}
 8021402:	0018      	movs	r0, r3
 8021404:	46bd      	mov	sp, r7
 8021406:	b002      	add	sp, #8
 8021408:	bd80      	pop	{r7, pc}
	...

0802140c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 802140c:	b580      	push	{r7, lr}
 802140e:	b082      	sub	sp, #8
 8021410:	af00      	add	r7, sp, #0
 8021412:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8021414:	687a      	ldr	r2, [r7, #4]
 8021416:	23a7      	movs	r3, #167	@ 0xa7
 8021418:	009b      	lsls	r3, r3, #2
 802141a:	5cd1      	ldrb	r1, [r2, r3]
 802141c:	687b      	ldr	r3, [r7, #4]
 802141e:	4a06      	ldr	r2, [pc, #24]	@ (8021438 <USBD_LL_Suspend+0x2c>)
 8021420:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8021422:	687a      	ldr	r2, [r7, #4]
 8021424:	23a7      	movs	r3, #167	@ 0xa7
 8021426:	009b      	lsls	r3, r3, #2
 8021428:	2104      	movs	r1, #4
 802142a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 802142c:	2300      	movs	r3, #0
}
 802142e:	0018      	movs	r0, r3
 8021430:	46bd      	mov	sp, r7
 8021432:	b002      	add	sp, #8
 8021434:	bd80      	pop	{r7, pc}
 8021436:	46c0      	nop			@ (mov r8, r8)
 8021438:	0000029d 	.word	0x0000029d

0802143c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802143c:	b580      	push	{r7, lr}
 802143e:	b082      	sub	sp, #8
 8021440:	af00      	add	r7, sp, #0
 8021442:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8021444:	687a      	ldr	r2, [r7, #4]
 8021446:	23a7      	movs	r3, #167	@ 0xa7
 8021448:	009b      	lsls	r3, r3, #2
 802144a:	5cd3      	ldrb	r3, [r2, r3]
 802144c:	2b04      	cmp	r3, #4
 802144e:	d106      	bne.n	802145e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8021450:	687b      	ldr	r3, [r7, #4]
 8021452:	4a05      	ldr	r2, [pc, #20]	@ (8021468 <USBD_LL_Resume+0x2c>)
 8021454:	5c99      	ldrb	r1, [r3, r2]
 8021456:	687a      	ldr	r2, [r7, #4]
 8021458:	23a7      	movs	r3, #167	@ 0xa7
 802145a:	009b      	lsls	r3, r3, #2
 802145c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 802145e:	2300      	movs	r3, #0
}
 8021460:	0018      	movs	r0, r3
 8021462:	46bd      	mov	sp, r7
 8021464:	b002      	add	sp, #8
 8021466:	bd80      	pop	{r7, pc}
 8021468:	0000029d 	.word	0x0000029d

0802146c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802146c:	b580      	push	{r7, lr}
 802146e:	b082      	sub	sp, #8
 8021470:	af00      	add	r7, sp, #0
 8021472:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021474:	687a      	ldr	r2, [r7, #4]
 8021476:	23a7      	movs	r3, #167	@ 0xa7
 8021478:	009b      	lsls	r3, r3, #2
 802147a:	5cd3      	ldrb	r3, [r2, r3]
 802147c:	2b03      	cmp	r3, #3
 802147e:	d10e      	bne.n	802149e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8021480:	687a      	ldr	r2, [r7, #4]
 8021482:	23ad      	movs	r3, #173	@ 0xad
 8021484:	009b      	lsls	r3, r3, #2
 8021486:	58d3      	ldr	r3, [r2, r3]
 8021488:	69db      	ldr	r3, [r3, #28]
 802148a:	2b00      	cmp	r3, #0
 802148c:	d007      	beq.n	802149e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 802148e:	687a      	ldr	r2, [r7, #4]
 8021490:	23ad      	movs	r3, #173	@ 0xad
 8021492:	009b      	lsls	r3, r3, #2
 8021494:	58d3      	ldr	r3, [r2, r3]
 8021496:	69db      	ldr	r3, [r3, #28]
 8021498:	687a      	ldr	r2, [r7, #4]
 802149a:	0010      	movs	r0, r2
 802149c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802149e:	2300      	movs	r3, #0
}
 80214a0:	0018      	movs	r0, r3
 80214a2:	46bd      	mov	sp, r7
 80214a4:	b002      	add	sp, #8
 80214a6:	bd80      	pop	{r7, pc}

080214a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80214a8:	b580      	push	{r7, lr}
 80214aa:	b084      	sub	sp, #16
 80214ac:	af00      	add	r7, sp, #0
 80214ae:	6078      	str	r0, [r7, #4]
 80214b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80214b2:	230f      	movs	r3, #15
 80214b4:	18fb      	adds	r3, r7, r3
 80214b6:	2200      	movs	r2, #0
 80214b8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80214ba:	683b      	ldr	r3, [r7, #0]
 80214bc:	781b      	ldrb	r3, [r3, #0]
 80214be:	001a      	movs	r2, r3
 80214c0:	2360      	movs	r3, #96	@ 0x60
 80214c2:	4013      	ands	r3, r2
 80214c4:	2b40      	cmp	r3, #64	@ 0x40
 80214c6:	d004      	beq.n	80214d2 <USBD_StdDevReq+0x2a>
 80214c8:	d84f      	bhi.n	802156a <USBD_StdDevReq+0xc2>
 80214ca:	2b00      	cmp	r3, #0
 80214cc:	d00b      	beq.n	80214e6 <USBD_StdDevReq+0x3e>
 80214ce:	2b20      	cmp	r3, #32
 80214d0:	d14b      	bne.n	802156a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80214d2:	687a      	ldr	r2, [r7, #4]
 80214d4:	23ad      	movs	r3, #173	@ 0xad
 80214d6:	009b      	lsls	r3, r3, #2
 80214d8:	58d3      	ldr	r3, [r2, r3]
 80214da:	689b      	ldr	r3, [r3, #8]
 80214dc:	6839      	ldr	r1, [r7, #0]
 80214de:	687a      	ldr	r2, [r7, #4]
 80214e0:	0010      	movs	r0, r2
 80214e2:	4798      	blx	r3
      break;
 80214e4:	e048      	b.n	8021578 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80214e6:	683b      	ldr	r3, [r7, #0]
 80214e8:	785b      	ldrb	r3, [r3, #1]
 80214ea:	2b09      	cmp	r3, #9
 80214ec:	d835      	bhi.n	802155a <USBD_StdDevReq+0xb2>
 80214ee:	009a      	lsls	r2, r3, #2
 80214f0:	4b25      	ldr	r3, [pc, #148]	@ (8021588 <USBD_StdDevReq+0xe0>)
 80214f2:	18d3      	adds	r3, r2, r3
 80214f4:	681b      	ldr	r3, [r3, #0]
 80214f6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80214f8:	683a      	ldr	r2, [r7, #0]
 80214fa:	687b      	ldr	r3, [r7, #4]
 80214fc:	0011      	movs	r1, r2
 80214fe:	0018      	movs	r0, r3
 8021500:	f000 fa52 	bl	80219a8 <USBD_GetDescriptor>
          break;
 8021504:	e030      	b.n	8021568 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8021506:	683a      	ldr	r2, [r7, #0]
 8021508:	687b      	ldr	r3, [r7, #4]
 802150a:	0011      	movs	r1, r2
 802150c:	0018      	movs	r0, r3
 802150e:	f000 fbfd 	bl	8021d0c <USBD_SetAddress>
          break;
 8021512:	e029      	b.n	8021568 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8021514:	683a      	ldr	r2, [r7, #0]
 8021516:	687b      	ldr	r3, [r7, #4]
 8021518:	0011      	movs	r1, r2
 802151a:	0018      	movs	r0, r3
 802151c:	f000 fc4a 	bl	8021db4 <USBD_SetConfig>
          break;
 8021520:	e022      	b.n	8021568 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8021522:	683a      	ldr	r2, [r7, #0]
 8021524:	687b      	ldr	r3, [r7, #4]
 8021526:	0011      	movs	r1, r2
 8021528:	0018      	movs	r0, r3
 802152a:	f000 fce7 	bl	8021efc <USBD_GetConfig>
          break;
 802152e:	e01b      	b.n	8021568 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8021530:	683a      	ldr	r2, [r7, #0]
 8021532:	687b      	ldr	r3, [r7, #4]
 8021534:	0011      	movs	r1, r2
 8021536:	0018      	movs	r0, r3
 8021538:	f000 fd1b 	bl	8021f72 <USBD_GetStatus>
          break;
 802153c:	e014      	b.n	8021568 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 802153e:	683a      	ldr	r2, [r7, #0]
 8021540:	687b      	ldr	r3, [r7, #4]
 8021542:	0011      	movs	r1, r2
 8021544:	0018      	movs	r0, r3
 8021546:	f000 fd4e 	bl	8021fe6 <USBD_SetFeature>
          break;
 802154a:	e00d      	b.n	8021568 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 802154c:	683a      	ldr	r2, [r7, #0]
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	0011      	movs	r1, r2
 8021552:	0018      	movs	r0, r3
 8021554:	f000 fd5d 	bl	8022012 <USBD_ClrFeature>
          break;
 8021558:	e006      	b.n	8021568 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 802155a:	683a      	ldr	r2, [r7, #0]
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	0011      	movs	r1, r2
 8021560:	0018      	movs	r0, r3
 8021562:	f000 fdb4 	bl	80220ce <USBD_CtlError>
          break;
 8021566:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021568:	e006      	b.n	8021578 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 802156a:	683a      	ldr	r2, [r7, #0]
 802156c:	687b      	ldr	r3, [r7, #4]
 802156e:	0011      	movs	r1, r2
 8021570:	0018      	movs	r0, r3
 8021572:	f000 fdac 	bl	80220ce <USBD_CtlError>
      break;
 8021576:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8021578:	230f      	movs	r3, #15
 802157a:	18fb      	adds	r3, r7, r3
 802157c:	781b      	ldrb	r3, [r3, #0]
}
 802157e:	0018      	movs	r0, r3
 8021580:	46bd      	mov	sp, r7
 8021582:	b004      	add	sp, #16
 8021584:	bd80      	pop	{r7, pc}
 8021586:	46c0      	nop			@ (mov r8, r8)
 8021588:	0802dee4 	.word	0x0802dee4

0802158c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 802158c:	b5b0      	push	{r4, r5, r7, lr}
 802158e:	b084      	sub	sp, #16
 8021590:	af00      	add	r7, sp, #0
 8021592:	6078      	str	r0, [r7, #4]
 8021594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021596:	230f      	movs	r3, #15
 8021598:	18fb      	adds	r3, r7, r3
 802159a:	2200      	movs	r2, #0
 802159c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802159e:	683b      	ldr	r3, [r7, #0]
 80215a0:	781b      	ldrb	r3, [r3, #0]
 80215a2:	001a      	movs	r2, r3
 80215a4:	2360      	movs	r3, #96	@ 0x60
 80215a6:	4013      	ands	r3, r2
 80215a8:	2b40      	cmp	r3, #64	@ 0x40
 80215aa:	d004      	beq.n	80215b6 <USBD_StdItfReq+0x2a>
 80215ac:	d839      	bhi.n	8021622 <USBD_StdItfReq+0x96>
 80215ae:	2b00      	cmp	r3, #0
 80215b0:	d001      	beq.n	80215b6 <USBD_StdItfReq+0x2a>
 80215b2:	2b20      	cmp	r3, #32
 80215b4:	d135      	bne.n	8021622 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80215b6:	687a      	ldr	r2, [r7, #4]
 80215b8:	23a7      	movs	r3, #167	@ 0xa7
 80215ba:	009b      	lsls	r3, r3, #2
 80215bc:	5cd3      	ldrb	r3, [r2, r3]
 80215be:	3b01      	subs	r3, #1
 80215c0:	2b02      	cmp	r3, #2
 80215c2:	d825      	bhi.n	8021610 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80215c4:	683b      	ldr	r3, [r7, #0]
 80215c6:	889b      	ldrh	r3, [r3, #4]
 80215c8:	b2db      	uxtb	r3, r3
 80215ca:	2b01      	cmp	r3, #1
 80215cc:	d819      	bhi.n	8021602 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80215ce:	687a      	ldr	r2, [r7, #4]
 80215d0:	23ad      	movs	r3, #173	@ 0xad
 80215d2:	009b      	lsls	r3, r3, #2
 80215d4:	58d3      	ldr	r3, [r2, r3]
 80215d6:	689b      	ldr	r3, [r3, #8]
 80215d8:	250f      	movs	r5, #15
 80215da:	197c      	adds	r4, r7, r5
 80215dc:	6839      	ldr	r1, [r7, #0]
 80215de:	687a      	ldr	r2, [r7, #4]
 80215e0:	0010      	movs	r0, r2
 80215e2:	4798      	blx	r3
 80215e4:	0003      	movs	r3, r0
 80215e6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80215e8:	683b      	ldr	r3, [r7, #0]
 80215ea:	88db      	ldrh	r3, [r3, #6]
 80215ec:	2b00      	cmp	r3, #0
 80215ee:	d116      	bne.n	802161e <USBD_StdItfReq+0x92>
 80215f0:	197b      	adds	r3, r7, r5
 80215f2:	781b      	ldrb	r3, [r3, #0]
 80215f4:	2b00      	cmp	r3, #0
 80215f6:	d112      	bne.n	802161e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80215f8:	687b      	ldr	r3, [r7, #4]
 80215fa:	0018      	movs	r0, r3
 80215fc:	f000 fe4f 	bl	802229e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8021600:	e00d      	b.n	802161e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8021602:	683a      	ldr	r2, [r7, #0]
 8021604:	687b      	ldr	r3, [r7, #4]
 8021606:	0011      	movs	r1, r2
 8021608:	0018      	movs	r0, r3
 802160a:	f000 fd60 	bl	80220ce <USBD_CtlError>
          break;
 802160e:	e006      	b.n	802161e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8021610:	683a      	ldr	r2, [r7, #0]
 8021612:	687b      	ldr	r3, [r7, #4]
 8021614:	0011      	movs	r1, r2
 8021616:	0018      	movs	r0, r3
 8021618:	f000 fd59 	bl	80220ce <USBD_CtlError>
          break;
 802161c:	e000      	b.n	8021620 <USBD_StdItfReq+0x94>
          break;
 802161e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021620:	e006      	b.n	8021630 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8021622:	683a      	ldr	r2, [r7, #0]
 8021624:	687b      	ldr	r3, [r7, #4]
 8021626:	0011      	movs	r1, r2
 8021628:	0018      	movs	r0, r3
 802162a:	f000 fd50 	bl	80220ce <USBD_CtlError>
      break;
 802162e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021630:	2300      	movs	r3, #0
}
 8021632:	0018      	movs	r0, r3
 8021634:	46bd      	mov	sp, r7
 8021636:	b004      	add	sp, #16
 8021638:	bdb0      	pop	{r4, r5, r7, pc}

0802163a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 802163a:	b5b0      	push	{r4, r5, r7, lr}
 802163c:	b084      	sub	sp, #16
 802163e:	af00      	add	r7, sp, #0
 8021640:	6078      	str	r0, [r7, #4]
 8021642:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8021644:	230f      	movs	r3, #15
 8021646:	18fb      	adds	r3, r7, r3
 8021648:	2200      	movs	r2, #0
 802164a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 802164c:	683b      	ldr	r3, [r7, #0]
 802164e:	889a      	ldrh	r2, [r3, #4]
 8021650:	230e      	movs	r3, #14
 8021652:	18fb      	adds	r3, r7, r3
 8021654:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021656:	683b      	ldr	r3, [r7, #0]
 8021658:	781b      	ldrb	r3, [r3, #0]
 802165a:	001a      	movs	r2, r3
 802165c:	2360      	movs	r3, #96	@ 0x60
 802165e:	4013      	ands	r3, r2
 8021660:	2b40      	cmp	r3, #64	@ 0x40
 8021662:	d006      	beq.n	8021672 <USBD_StdEPReq+0x38>
 8021664:	d900      	bls.n	8021668 <USBD_StdEPReq+0x2e>
 8021666:	e190      	b.n	802198a <USBD_StdEPReq+0x350>
 8021668:	2b00      	cmp	r3, #0
 802166a:	d00c      	beq.n	8021686 <USBD_StdEPReq+0x4c>
 802166c:	2b20      	cmp	r3, #32
 802166e:	d000      	beq.n	8021672 <USBD_StdEPReq+0x38>
 8021670:	e18b      	b.n	802198a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8021672:	687a      	ldr	r2, [r7, #4]
 8021674:	23ad      	movs	r3, #173	@ 0xad
 8021676:	009b      	lsls	r3, r3, #2
 8021678:	58d3      	ldr	r3, [r2, r3]
 802167a:	689b      	ldr	r3, [r3, #8]
 802167c:	6839      	ldr	r1, [r7, #0]
 802167e:	687a      	ldr	r2, [r7, #4]
 8021680:	0010      	movs	r0, r2
 8021682:	4798      	blx	r3
      break;
 8021684:	e188      	b.n	8021998 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8021686:	683b      	ldr	r3, [r7, #0]
 8021688:	781b      	ldrb	r3, [r3, #0]
 802168a:	001a      	movs	r2, r3
 802168c:	2360      	movs	r3, #96	@ 0x60
 802168e:	4013      	ands	r3, r2
 8021690:	2b20      	cmp	r3, #32
 8021692:	d10f      	bne.n	80216b4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021694:	687a      	ldr	r2, [r7, #4]
 8021696:	23ad      	movs	r3, #173	@ 0xad
 8021698:	009b      	lsls	r3, r3, #2
 802169a:	58d3      	ldr	r3, [r2, r3]
 802169c:	689b      	ldr	r3, [r3, #8]
 802169e:	250f      	movs	r5, #15
 80216a0:	197c      	adds	r4, r7, r5
 80216a2:	6839      	ldr	r1, [r7, #0]
 80216a4:	687a      	ldr	r2, [r7, #4]
 80216a6:	0010      	movs	r0, r2
 80216a8:	4798      	blx	r3
 80216aa:	0003      	movs	r3, r0
 80216ac:	7023      	strb	r3, [r4, #0]

        return ret;
 80216ae:	197b      	adds	r3, r7, r5
 80216b0:	781b      	ldrb	r3, [r3, #0]
 80216b2:	e174      	b.n	802199e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80216b4:	683b      	ldr	r3, [r7, #0]
 80216b6:	785b      	ldrb	r3, [r3, #1]
 80216b8:	2b03      	cmp	r3, #3
 80216ba:	d007      	beq.n	80216cc <USBD_StdEPReq+0x92>
 80216bc:	dd00      	ble.n	80216c0 <USBD_StdEPReq+0x86>
 80216be:	e15c      	b.n	802197a <USBD_StdEPReq+0x340>
 80216c0:	2b00      	cmp	r3, #0
 80216c2:	d100      	bne.n	80216c6 <USBD_StdEPReq+0x8c>
 80216c4:	e092      	b.n	80217ec <USBD_StdEPReq+0x1b2>
 80216c6:	2b01      	cmp	r3, #1
 80216c8:	d04b      	beq.n	8021762 <USBD_StdEPReq+0x128>
 80216ca:	e156      	b.n	802197a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80216cc:	687a      	ldr	r2, [r7, #4]
 80216ce:	23a7      	movs	r3, #167	@ 0xa7
 80216d0:	009b      	lsls	r3, r3, #2
 80216d2:	5cd3      	ldrb	r3, [r2, r3]
 80216d4:	2b02      	cmp	r3, #2
 80216d6:	d002      	beq.n	80216de <USBD_StdEPReq+0xa4>
 80216d8:	2b03      	cmp	r3, #3
 80216da:	d01d      	beq.n	8021718 <USBD_StdEPReq+0xde>
 80216dc:	e039      	b.n	8021752 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80216de:	220e      	movs	r2, #14
 80216e0:	18bb      	adds	r3, r7, r2
 80216e2:	781b      	ldrb	r3, [r3, #0]
 80216e4:	2b00      	cmp	r3, #0
 80216e6:	d010      	beq.n	802170a <USBD_StdEPReq+0xd0>
 80216e8:	18bb      	adds	r3, r7, r2
 80216ea:	781b      	ldrb	r3, [r3, #0]
 80216ec:	2b80      	cmp	r3, #128	@ 0x80
 80216ee:	d00c      	beq.n	802170a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80216f0:	18bb      	adds	r3, r7, r2
 80216f2:	781a      	ldrb	r2, [r3, #0]
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	0011      	movs	r1, r2
 80216f8:	0018      	movs	r0, r3
 80216fa:	f001 fa10 	bl	8022b1e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80216fe:	687b      	ldr	r3, [r7, #4]
 8021700:	2180      	movs	r1, #128	@ 0x80
 8021702:	0018      	movs	r0, r3
 8021704:	f001 fa0b 	bl	8022b1e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021708:	e02a      	b.n	8021760 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 802170a:	683a      	ldr	r2, [r7, #0]
 802170c:	687b      	ldr	r3, [r7, #4]
 802170e:	0011      	movs	r1, r2
 8021710:	0018      	movs	r0, r3
 8021712:	f000 fcdc 	bl	80220ce <USBD_CtlError>
              break;
 8021716:	e023      	b.n	8021760 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021718:	683b      	ldr	r3, [r7, #0]
 802171a:	885b      	ldrh	r3, [r3, #2]
 802171c:	2b00      	cmp	r3, #0
 802171e:	d113      	bne.n	8021748 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8021720:	220e      	movs	r2, #14
 8021722:	18bb      	adds	r3, r7, r2
 8021724:	781b      	ldrb	r3, [r3, #0]
 8021726:	2b00      	cmp	r3, #0
 8021728:	d00e      	beq.n	8021748 <USBD_StdEPReq+0x10e>
 802172a:	18bb      	adds	r3, r7, r2
 802172c:	781b      	ldrb	r3, [r3, #0]
 802172e:	2b80      	cmp	r3, #128	@ 0x80
 8021730:	d00a      	beq.n	8021748 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8021732:	683b      	ldr	r3, [r7, #0]
 8021734:	88db      	ldrh	r3, [r3, #6]
 8021736:	2b00      	cmp	r3, #0
 8021738:	d106      	bne.n	8021748 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 802173a:	18bb      	adds	r3, r7, r2
 802173c:	781a      	ldrb	r2, [r3, #0]
 802173e:	687b      	ldr	r3, [r7, #4]
 8021740:	0011      	movs	r1, r2
 8021742:	0018      	movs	r0, r3
 8021744:	f001 f9eb 	bl	8022b1e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8021748:	687b      	ldr	r3, [r7, #4]
 802174a:	0018      	movs	r0, r3
 802174c:	f000 fda7 	bl	802229e <USBD_CtlSendStatus>

              break;
 8021750:	e006      	b.n	8021760 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8021752:	683a      	ldr	r2, [r7, #0]
 8021754:	687b      	ldr	r3, [r7, #4]
 8021756:	0011      	movs	r1, r2
 8021758:	0018      	movs	r0, r3
 802175a:	f000 fcb8 	bl	80220ce <USBD_CtlError>
              break;
 802175e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8021760:	e112      	b.n	8021988 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8021762:	687a      	ldr	r2, [r7, #4]
 8021764:	23a7      	movs	r3, #167	@ 0xa7
 8021766:	009b      	lsls	r3, r3, #2
 8021768:	5cd3      	ldrb	r3, [r2, r3]
 802176a:	2b02      	cmp	r3, #2
 802176c:	d002      	beq.n	8021774 <USBD_StdEPReq+0x13a>
 802176e:	2b03      	cmp	r3, #3
 8021770:	d01d      	beq.n	80217ae <USBD_StdEPReq+0x174>
 8021772:	e032      	b.n	80217da <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021774:	220e      	movs	r2, #14
 8021776:	18bb      	adds	r3, r7, r2
 8021778:	781b      	ldrb	r3, [r3, #0]
 802177a:	2b00      	cmp	r3, #0
 802177c:	d010      	beq.n	80217a0 <USBD_StdEPReq+0x166>
 802177e:	18bb      	adds	r3, r7, r2
 8021780:	781b      	ldrb	r3, [r3, #0]
 8021782:	2b80      	cmp	r3, #128	@ 0x80
 8021784:	d00c      	beq.n	80217a0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8021786:	18bb      	adds	r3, r7, r2
 8021788:	781a      	ldrb	r2, [r3, #0]
 802178a:	687b      	ldr	r3, [r7, #4]
 802178c:	0011      	movs	r1, r2
 802178e:	0018      	movs	r0, r3
 8021790:	f001 f9c5 	bl	8022b1e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8021794:	687b      	ldr	r3, [r7, #4]
 8021796:	2180      	movs	r1, #128	@ 0x80
 8021798:	0018      	movs	r0, r3
 802179a:	f001 f9c0 	bl	8022b1e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802179e:	e024      	b.n	80217ea <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80217a0:	683a      	ldr	r2, [r7, #0]
 80217a2:	687b      	ldr	r3, [r7, #4]
 80217a4:	0011      	movs	r1, r2
 80217a6:	0018      	movs	r0, r3
 80217a8:	f000 fc91 	bl	80220ce <USBD_CtlError>
              break;
 80217ac:	e01d      	b.n	80217ea <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80217ae:	683b      	ldr	r3, [r7, #0]
 80217b0:	885b      	ldrh	r3, [r3, #2]
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	d118      	bne.n	80217e8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80217b6:	210e      	movs	r1, #14
 80217b8:	187b      	adds	r3, r7, r1
 80217ba:	781b      	ldrb	r3, [r3, #0]
 80217bc:	227f      	movs	r2, #127	@ 0x7f
 80217be:	4013      	ands	r3, r2
 80217c0:	d006      	beq.n	80217d0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80217c2:	187b      	adds	r3, r7, r1
 80217c4:	781a      	ldrb	r2, [r3, #0]
 80217c6:	687b      	ldr	r3, [r7, #4]
 80217c8:	0011      	movs	r1, r2
 80217ca:	0018      	movs	r0, r3
 80217cc:	f001 f9d2 	bl	8022b74 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80217d0:	687b      	ldr	r3, [r7, #4]
 80217d2:	0018      	movs	r0, r3
 80217d4:	f000 fd63 	bl	802229e <USBD_CtlSendStatus>
              }
              break;
 80217d8:	e006      	b.n	80217e8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80217da:	683a      	ldr	r2, [r7, #0]
 80217dc:	687b      	ldr	r3, [r7, #4]
 80217de:	0011      	movs	r1, r2
 80217e0:	0018      	movs	r0, r3
 80217e2:	f000 fc74 	bl	80220ce <USBD_CtlError>
              break;
 80217e6:	e000      	b.n	80217ea <USBD_StdEPReq+0x1b0>
              break;
 80217e8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80217ea:	e0cd      	b.n	8021988 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80217ec:	687a      	ldr	r2, [r7, #4]
 80217ee:	23a7      	movs	r3, #167	@ 0xa7
 80217f0:	009b      	lsls	r3, r3, #2
 80217f2:	5cd3      	ldrb	r3, [r2, r3]
 80217f4:	2b02      	cmp	r3, #2
 80217f6:	d002      	beq.n	80217fe <USBD_StdEPReq+0x1c4>
 80217f8:	2b03      	cmp	r3, #3
 80217fa:	d03c      	beq.n	8021876 <USBD_StdEPReq+0x23c>
 80217fc:	e0b5      	b.n	802196a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80217fe:	220e      	movs	r2, #14
 8021800:	18bb      	adds	r3, r7, r2
 8021802:	781b      	ldrb	r3, [r3, #0]
 8021804:	2b00      	cmp	r3, #0
 8021806:	d00a      	beq.n	802181e <USBD_StdEPReq+0x1e4>
 8021808:	18bb      	adds	r3, r7, r2
 802180a:	781b      	ldrb	r3, [r3, #0]
 802180c:	2b80      	cmp	r3, #128	@ 0x80
 802180e:	d006      	beq.n	802181e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8021810:	683a      	ldr	r2, [r7, #0]
 8021812:	687b      	ldr	r3, [r7, #4]
 8021814:	0011      	movs	r1, r2
 8021816:	0018      	movs	r0, r3
 8021818:	f000 fc59 	bl	80220ce <USBD_CtlError>
                break;
 802181c:	e0ac      	b.n	8021978 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802181e:	220e      	movs	r2, #14
 8021820:	18bb      	adds	r3, r7, r2
 8021822:	781b      	ldrb	r3, [r3, #0]
 8021824:	b25b      	sxtb	r3, r3
 8021826:	2b00      	cmp	r3, #0
 8021828:	da0c      	bge.n	8021844 <USBD_StdEPReq+0x20a>
 802182a:	18bb      	adds	r3, r7, r2
 802182c:	781b      	ldrb	r3, [r3, #0]
 802182e:	227f      	movs	r2, #127	@ 0x7f
 8021830:	401a      	ands	r2, r3
 8021832:	0013      	movs	r3, r2
 8021834:	009b      	lsls	r3, r3, #2
 8021836:	189b      	adds	r3, r3, r2
 8021838:	009b      	lsls	r3, r3, #2
 802183a:	3310      	adds	r3, #16
 802183c:	687a      	ldr	r2, [r7, #4]
 802183e:	18d3      	adds	r3, r2, r3
 8021840:	3304      	adds	r3, #4
 8021842:	e00d      	b.n	8021860 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021844:	230e      	movs	r3, #14
 8021846:	18fb      	adds	r3, r7, r3
 8021848:	781b      	ldrb	r3, [r3, #0]
 802184a:	227f      	movs	r2, #127	@ 0x7f
 802184c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802184e:	0013      	movs	r3, r2
 8021850:	009b      	lsls	r3, r3, #2
 8021852:	189b      	adds	r3, r3, r2
 8021854:	009b      	lsls	r3, r3, #2
 8021856:	3351      	adds	r3, #81	@ 0x51
 8021858:	33ff      	adds	r3, #255	@ 0xff
 802185a:	687a      	ldr	r2, [r7, #4]
 802185c:	18d3      	adds	r3, r2, r3
 802185e:	3304      	adds	r3, #4
 8021860:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8021862:	68bb      	ldr	r3, [r7, #8]
 8021864:	2200      	movs	r2, #0
 8021866:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8021868:	68b9      	ldr	r1, [r7, #8]
 802186a:	687b      	ldr	r3, [r7, #4]
 802186c:	2202      	movs	r2, #2
 802186e:	0018      	movs	r0, r3
 8021870:	f000 fcab 	bl	80221ca <USBD_CtlSendData>
              break;
 8021874:	e080      	b.n	8021978 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8021876:	220e      	movs	r2, #14
 8021878:	18bb      	adds	r3, r7, r2
 802187a:	781b      	ldrb	r3, [r3, #0]
 802187c:	b25b      	sxtb	r3, r3
 802187e:	2b00      	cmp	r3, #0
 8021880:	da14      	bge.n	80218ac <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8021882:	18bb      	adds	r3, r7, r2
 8021884:	781b      	ldrb	r3, [r3, #0]
 8021886:	220f      	movs	r2, #15
 8021888:	401a      	ands	r2, r3
 802188a:	6879      	ldr	r1, [r7, #4]
 802188c:	0013      	movs	r3, r2
 802188e:	009b      	lsls	r3, r3, #2
 8021890:	189b      	adds	r3, r3, r2
 8021892:	009b      	lsls	r3, r3, #2
 8021894:	18cb      	adds	r3, r1, r3
 8021896:	3318      	adds	r3, #24
 8021898:	681b      	ldr	r3, [r3, #0]
 802189a:	2b00      	cmp	r3, #0
 802189c:	d11e      	bne.n	80218dc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 802189e:	683a      	ldr	r2, [r7, #0]
 80218a0:	687b      	ldr	r3, [r7, #4]
 80218a2:	0011      	movs	r1, r2
 80218a4:	0018      	movs	r0, r3
 80218a6:	f000 fc12 	bl	80220ce <USBD_CtlError>
                  break;
 80218aa:	e065      	b.n	8021978 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80218ac:	230e      	movs	r3, #14
 80218ae:	18fb      	adds	r3, r7, r3
 80218b0:	781b      	ldrb	r3, [r3, #0]
 80218b2:	220f      	movs	r2, #15
 80218b4:	401a      	ands	r2, r3
 80218b6:	6878      	ldr	r0, [r7, #4]
 80218b8:	23ac      	movs	r3, #172	@ 0xac
 80218ba:	0059      	lsls	r1, r3, #1
 80218bc:	0013      	movs	r3, r2
 80218be:	009b      	lsls	r3, r3, #2
 80218c0:	189b      	adds	r3, r3, r2
 80218c2:	009b      	lsls	r3, r3, #2
 80218c4:	18c3      	adds	r3, r0, r3
 80218c6:	185b      	adds	r3, r3, r1
 80218c8:	681b      	ldr	r3, [r3, #0]
 80218ca:	2b00      	cmp	r3, #0
 80218cc:	d106      	bne.n	80218dc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80218ce:	683a      	ldr	r2, [r7, #0]
 80218d0:	687b      	ldr	r3, [r7, #4]
 80218d2:	0011      	movs	r1, r2
 80218d4:	0018      	movs	r0, r3
 80218d6:	f000 fbfa 	bl	80220ce <USBD_CtlError>
                  break;
 80218da:	e04d      	b.n	8021978 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80218dc:	220e      	movs	r2, #14
 80218de:	18bb      	adds	r3, r7, r2
 80218e0:	781b      	ldrb	r3, [r3, #0]
 80218e2:	b25b      	sxtb	r3, r3
 80218e4:	2b00      	cmp	r3, #0
 80218e6:	da0c      	bge.n	8021902 <USBD_StdEPReq+0x2c8>
 80218e8:	18bb      	adds	r3, r7, r2
 80218ea:	781b      	ldrb	r3, [r3, #0]
 80218ec:	227f      	movs	r2, #127	@ 0x7f
 80218ee:	401a      	ands	r2, r3
 80218f0:	0013      	movs	r3, r2
 80218f2:	009b      	lsls	r3, r3, #2
 80218f4:	189b      	adds	r3, r3, r2
 80218f6:	009b      	lsls	r3, r3, #2
 80218f8:	3310      	adds	r3, #16
 80218fa:	687a      	ldr	r2, [r7, #4]
 80218fc:	18d3      	adds	r3, r2, r3
 80218fe:	3304      	adds	r3, #4
 8021900:	e00d      	b.n	802191e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021902:	230e      	movs	r3, #14
 8021904:	18fb      	adds	r3, r7, r3
 8021906:	781b      	ldrb	r3, [r3, #0]
 8021908:	227f      	movs	r2, #127	@ 0x7f
 802190a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802190c:	0013      	movs	r3, r2
 802190e:	009b      	lsls	r3, r3, #2
 8021910:	189b      	adds	r3, r3, r2
 8021912:	009b      	lsls	r3, r3, #2
 8021914:	3351      	adds	r3, #81	@ 0x51
 8021916:	33ff      	adds	r3, #255	@ 0xff
 8021918:	687a      	ldr	r2, [r7, #4]
 802191a:	18d3      	adds	r3, r2, r3
 802191c:	3304      	adds	r3, #4
 802191e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8021920:	220e      	movs	r2, #14
 8021922:	18bb      	adds	r3, r7, r2
 8021924:	781b      	ldrb	r3, [r3, #0]
 8021926:	2b00      	cmp	r3, #0
 8021928:	d003      	beq.n	8021932 <USBD_StdEPReq+0x2f8>
 802192a:	18bb      	adds	r3, r7, r2
 802192c:	781b      	ldrb	r3, [r3, #0]
 802192e:	2b80      	cmp	r3, #128	@ 0x80
 8021930:	d103      	bne.n	802193a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8021932:	68bb      	ldr	r3, [r7, #8]
 8021934:	2200      	movs	r2, #0
 8021936:	601a      	str	r2, [r3, #0]
 8021938:	e010      	b.n	802195c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 802193a:	230e      	movs	r3, #14
 802193c:	18fb      	adds	r3, r7, r3
 802193e:	781a      	ldrb	r2, [r3, #0]
 8021940:	687b      	ldr	r3, [r7, #4]
 8021942:	0011      	movs	r1, r2
 8021944:	0018      	movs	r0, r3
 8021946:	f001 f940 	bl	8022bca <USBD_LL_IsStallEP>
 802194a:	1e03      	subs	r3, r0, #0
 802194c:	d003      	beq.n	8021956 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 802194e:	68bb      	ldr	r3, [r7, #8]
 8021950:	2201      	movs	r2, #1
 8021952:	601a      	str	r2, [r3, #0]
 8021954:	e002      	b.n	802195c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8021956:	68bb      	ldr	r3, [r7, #8]
 8021958:	2200      	movs	r2, #0
 802195a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 802195c:	68b9      	ldr	r1, [r7, #8]
 802195e:	687b      	ldr	r3, [r7, #4]
 8021960:	2202      	movs	r2, #2
 8021962:	0018      	movs	r0, r3
 8021964:	f000 fc31 	bl	80221ca <USBD_CtlSendData>
              break;
 8021968:	e006      	b.n	8021978 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 802196a:	683a      	ldr	r2, [r7, #0]
 802196c:	687b      	ldr	r3, [r7, #4]
 802196e:	0011      	movs	r1, r2
 8021970:	0018      	movs	r0, r3
 8021972:	f000 fbac 	bl	80220ce <USBD_CtlError>
              break;
 8021976:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8021978:	e006      	b.n	8021988 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 802197a:	683a      	ldr	r2, [r7, #0]
 802197c:	687b      	ldr	r3, [r7, #4]
 802197e:	0011      	movs	r1, r2
 8021980:	0018      	movs	r0, r3
 8021982:	f000 fba4 	bl	80220ce <USBD_CtlError>
          break;
 8021986:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021988:	e006      	b.n	8021998 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 802198a:	683a      	ldr	r2, [r7, #0]
 802198c:	687b      	ldr	r3, [r7, #4]
 802198e:	0011      	movs	r1, r2
 8021990:	0018      	movs	r0, r3
 8021992:	f000 fb9c 	bl	80220ce <USBD_CtlError>
      break;
 8021996:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8021998:	230f      	movs	r3, #15
 802199a:	18fb      	adds	r3, r7, r3
 802199c:	781b      	ldrb	r3, [r3, #0]
}
 802199e:	0018      	movs	r0, r3
 80219a0:	46bd      	mov	sp, r7
 80219a2:	b004      	add	sp, #16
 80219a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080219a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80219a8:	b580      	push	{r7, lr}
 80219aa:	b084      	sub	sp, #16
 80219ac:	af00      	add	r7, sp, #0
 80219ae:	6078      	str	r0, [r7, #4]
 80219b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80219b2:	2308      	movs	r3, #8
 80219b4:	18fb      	adds	r3, r7, r3
 80219b6:	2200      	movs	r2, #0
 80219b8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80219ba:	2300      	movs	r3, #0
 80219bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80219be:	230b      	movs	r3, #11
 80219c0:	18fb      	adds	r3, r7, r3
 80219c2:	2200      	movs	r2, #0
 80219c4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80219c6:	683b      	ldr	r3, [r7, #0]
 80219c8:	885b      	ldrh	r3, [r3, #2]
 80219ca:	0a1b      	lsrs	r3, r3, #8
 80219cc:	b29b      	uxth	r3, r3
 80219ce:	2b07      	cmp	r3, #7
 80219d0:	d900      	bls.n	80219d4 <USBD_GetDescriptor+0x2c>
 80219d2:	e159      	b.n	8021c88 <USBD_GetDescriptor+0x2e0>
 80219d4:	009a      	lsls	r2, r3, #2
 80219d6:	4bcb      	ldr	r3, [pc, #812]	@ (8021d04 <USBD_GetDescriptor+0x35c>)
 80219d8:	18d3      	adds	r3, r2, r3
 80219da:	681b      	ldr	r3, [r3, #0]
 80219dc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80219de:	687a      	ldr	r2, [r7, #4]
 80219e0:	23ac      	movs	r3, #172	@ 0xac
 80219e2:	009b      	lsls	r3, r3, #2
 80219e4:	58d3      	ldr	r3, [r2, r3]
 80219e6:	681b      	ldr	r3, [r3, #0]
 80219e8:	687a      	ldr	r2, [r7, #4]
 80219ea:	7c12      	ldrb	r2, [r2, #16]
 80219ec:	2108      	movs	r1, #8
 80219ee:	1879      	adds	r1, r7, r1
 80219f0:	0010      	movs	r0, r2
 80219f2:	4798      	blx	r3
 80219f4:	0003      	movs	r3, r0
 80219f6:	60fb      	str	r3, [r7, #12]
      break;
 80219f8:	e153      	b.n	8021ca2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80219fa:	687b      	ldr	r3, [r7, #4]
 80219fc:	7c1b      	ldrb	r3, [r3, #16]
 80219fe:	2b00      	cmp	r3, #0
 8021a00:	d10f      	bne.n	8021a22 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8021a02:	687a      	ldr	r2, [r7, #4]
 8021a04:	23ad      	movs	r3, #173	@ 0xad
 8021a06:	009b      	lsls	r3, r3, #2
 8021a08:	58d3      	ldr	r3, [r2, r3]
 8021a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021a0c:	2208      	movs	r2, #8
 8021a0e:	18ba      	adds	r2, r7, r2
 8021a10:	0010      	movs	r0, r2
 8021a12:	4798      	blx	r3
 8021a14:	0003      	movs	r3, r0
 8021a16:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021a18:	68fb      	ldr	r3, [r7, #12]
 8021a1a:	3301      	adds	r3, #1
 8021a1c:	2202      	movs	r2, #2
 8021a1e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8021a20:	e13f      	b.n	8021ca2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8021a22:	687a      	ldr	r2, [r7, #4]
 8021a24:	23ad      	movs	r3, #173	@ 0xad
 8021a26:	009b      	lsls	r3, r3, #2
 8021a28:	58d3      	ldr	r3, [r2, r3]
 8021a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021a2c:	2208      	movs	r2, #8
 8021a2e:	18ba      	adds	r2, r7, r2
 8021a30:	0010      	movs	r0, r2
 8021a32:	4798      	blx	r3
 8021a34:	0003      	movs	r3, r0
 8021a36:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021a38:	68fb      	ldr	r3, [r7, #12]
 8021a3a:	3301      	adds	r3, #1
 8021a3c:	2202      	movs	r2, #2
 8021a3e:	701a      	strb	r2, [r3, #0]
      break;
 8021a40:	e12f      	b.n	8021ca2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021a42:	683b      	ldr	r3, [r7, #0]
 8021a44:	885b      	ldrh	r3, [r3, #2]
 8021a46:	b2db      	uxtb	r3, r3
 8021a48:	2b05      	cmp	r3, #5
 8021a4a:	d900      	bls.n	8021a4e <USBD_GetDescriptor+0xa6>
 8021a4c:	e0d0      	b.n	8021bf0 <USBD_GetDescriptor+0x248>
 8021a4e:	009a      	lsls	r2, r3, #2
 8021a50:	4bad      	ldr	r3, [pc, #692]	@ (8021d08 <USBD_GetDescriptor+0x360>)
 8021a52:	18d3      	adds	r3, r2, r3
 8021a54:	681b      	ldr	r3, [r3, #0]
 8021a56:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021a58:	687a      	ldr	r2, [r7, #4]
 8021a5a:	23ac      	movs	r3, #172	@ 0xac
 8021a5c:	009b      	lsls	r3, r3, #2
 8021a5e:	58d3      	ldr	r3, [r2, r3]
 8021a60:	685b      	ldr	r3, [r3, #4]
 8021a62:	2b00      	cmp	r3, #0
 8021a64:	d00d      	beq.n	8021a82 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8021a66:	687a      	ldr	r2, [r7, #4]
 8021a68:	23ac      	movs	r3, #172	@ 0xac
 8021a6a:	009b      	lsls	r3, r3, #2
 8021a6c:	58d3      	ldr	r3, [r2, r3]
 8021a6e:	685b      	ldr	r3, [r3, #4]
 8021a70:	687a      	ldr	r2, [r7, #4]
 8021a72:	7c12      	ldrb	r2, [r2, #16]
 8021a74:	2108      	movs	r1, #8
 8021a76:	1879      	adds	r1, r7, r1
 8021a78:	0010      	movs	r0, r2
 8021a7a:	4798      	blx	r3
 8021a7c:	0003      	movs	r3, r0
 8021a7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a80:	e0c3      	b.n	8021c0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021a82:	683a      	ldr	r2, [r7, #0]
 8021a84:	687b      	ldr	r3, [r7, #4]
 8021a86:	0011      	movs	r1, r2
 8021a88:	0018      	movs	r0, r3
 8021a8a:	f000 fb20 	bl	80220ce <USBD_CtlError>
            err++;
 8021a8e:	210b      	movs	r1, #11
 8021a90:	187b      	adds	r3, r7, r1
 8021a92:	781a      	ldrb	r2, [r3, #0]
 8021a94:	187b      	adds	r3, r7, r1
 8021a96:	3201      	adds	r2, #1
 8021a98:	701a      	strb	r2, [r3, #0]
          break;
 8021a9a:	e0b6      	b.n	8021c0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8021a9c:	687a      	ldr	r2, [r7, #4]
 8021a9e:	23ac      	movs	r3, #172	@ 0xac
 8021aa0:	009b      	lsls	r3, r3, #2
 8021aa2:	58d3      	ldr	r3, [r2, r3]
 8021aa4:	689b      	ldr	r3, [r3, #8]
 8021aa6:	2b00      	cmp	r3, #0
 8021aa8:	d00d      	beq.n	8021ac6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8021aaa:	687a      	ldr	r2, [r7, #4]
 8021aac:	23ac      	movs	r3, #172	@ 0xac
 8021aae:	009b      	lsls	r3, r3, #2
 8021ab0:	58d3      	ldr	r3, [r2, r3]
 8021ab2:	689b      	ldr	r3, [r3, #8]
 8021ab4:	687a      	ldr	r2, [r7, #4]
 8021ab6:	7c12      	ldrb	r2, [r2, #16]
 8021ab8:	2108      	movs	r1, #8
 8021aba:	1879      	adds	r1, r7, r1
 8021abc:	0010      	movs	r0, r2
 8021abe:	4798      	blx	r3
 8021ac0:	0003      	movs	r3, r0
 8021ac2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021ac4:	e0a1      	b.n	8021c0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021ac6:	683a      	ldr	r2, [r7, #0]
 8021ac8:	687b      	ldr	r3, [r7, #4]
 8021aca:	0011      	movs	r1, r2
 8021acc:	0018      	movs	r0, r3
 8021ace:	f000 fafe 	bl	80220ce <USBD_CtlError>
            err++;
 8021ad2:	210b      	movs	r1, #11
 8021ad4:	187b      	adds	r3, r7, r1
 8021ad6:	781a      	ldrb	r2, [r3, #0]
 8021ad8:	187b      	adds	r3, r7, r1
 8021ada:	3201      	adds	r2, #1
 8021adc:	701a      	strb	r2, [r3, #0]
          break;
 8021ade:	e094      	b.n	8021c0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8021ae0:	687a      	ldr	r2, [r7, #4]
 8021ae2:	23ac      	movs	r3, #172	@ 0xac
 8021ae4:	009b      	lsls	r3, r3, #2
 8021ae6:	58d3      	ldr	r3, [r2, r3]
 8021ae8:	68db      	ldr	r3, [r3, #12]
 8021aea:	2b00      	cmp	r3, #0
 8021aec:	d00d      	beq.n	8021b0a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021aee:	687a      	ldr	r2, [r7, #4]
 8021af0:	23ac      	movs	r3, #172	@ 0xac
 8021af2:	009b      	lsls	r3, r3, #2
 8021af4:	58d3      	ldr	r3, [r2, r3]
 8021af6:	68db      	ldr	r3, [r3, #12]
 8021af8:	687a      	ldr	r2, [r7, #4]
 8021afa:	7c12      	ldrb	r2, [r2, #16]
 8021afc:	2108      	movs	r1, #8
 8021afe:	1879      	adds	r1, r7, r1
 8021b00:	0010      	movs	r0, r2
 8021b02:	4798      	blx	r3
 8021b04:	0003      	movs	r3, r0
 8021b06:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021b08:	e07f      	b.n	8021c0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021b0a:	683a      	ldr	r2, [r7, #0]
 8021b0c:	687b      	ldr	r3, [r7, #4]
 8021b0e:	0011      	movs	r1, r2
 8021b10:	0018      	movs	r0, r3
 8021b12:	f000 fadc 	bl	80220ce <USBD_CtlError>
            err++;
 8021b16:	210b      	movs	r1, #11
 8021b18:	187b      	adds	r3, r7, r1
 8021b1a:	781a      	ldrb	r2, [r3, #0]
 8021b1c:	187b      	adds	r3, r7, r1
 8021b1e:	3201      	adds	r2, #1
 8021b20:	701a      	strb	r2, [r3, #0]
          break;
 8021b22:	e072      	b.n	8021c0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021b24:	687a      	ldr	r2, [r7, #4]
 8021b26:	23ac      	movs	r3, #172	@ 0xac
 8021b28:	009b      	lsls	r3, r3, #2
 8021b2a:	58d3      	ldr	r3, [r2, r3]
 8021b2c:	691b      	ldr	r3, [r3, #16]
 8021b2e:	2b00      	cmp	r3, #0
 8021b30:	d00d      	beq.n	8021b4e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8021b32:	687a      	ldr	r2, [r7, #4]
 8021b34:	23ac      	movs	r3, #172	@ 0xac
 8021b36:	009b      	lsls	r3, r3, #2
 8021b38:	58d3      	ldr	r3, [r2, r3]
 8021b3a:	691b      	ldr	r3, [r3, #16]
 8021b3c:	687a      	ldr	r2, [r7, #4]
 8021b3e:	7c12      	ldrb	r2, [r2, #16]
 8021b40:	2108      	movs	r1, #8
 8021b42:	1879      	adds	r1, r7, r1
 8021b44:	0010      	movs	r0, r2
 8021b46:	4798      	blx	r3
 8021b48:	0003      	movs	r3, r0
 8021b4a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021b4c:	e05d      	b.n	8021c0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021b4e:	683a      	ldr	r2, [r7, #0]
 8021b50:	687b      	ldr	r3, [r7, #4]
 8021b52:	0011      	movs	r1, r2
 8021b54:	0018      	movs	r0, r3
 8021b56:	f000 faba 	bl	80220ce <USBD_CtlError>
            err++;
 8021b5a:	210b      	movs	r1, #11
 8021b5c:	187b      	adds	r3, r7, r1
 8021b5e:	781a      	ldrb	r2, [r3, #0]
 8021b60:	187b      	adds	r3, r7, r1
 8021b62:	3201      	adds	r2, #1
 8021b64:	701a      	strb	r2, [r3, #0]
          break;
 8021b66:	e050      	b.n	8021c0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021b68:	687a      	ldr	r2, [r7, #4]
 8021b6a:	23ac      	movs	r3, #172	@ 0xac
 8021b6c:	009b      	lsls	r3, r3, #2
 8021b6e:	58d3      	ldr	r3, [r2, r3]
 8021b70:	695b      	ldr	r3, [r3, #20]
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	d00d      	beq.n	8021b92 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021b76:	687a      	ldr	r2, [r7, #4]
 8021b78:	23ac      	movs	r3, #172	@ 0xac
 8021b7a:	009b      	lsls	r3, r3, #2
 8021b7c:	58d3      	ldr	r3, [r2, r3]
 8021b7e:	695b      	ldr	r3, [r3, #20]
 8021b80:	687a      	ldr	r2, [r7, #4]
 8021b82:	7c12      	ldrb	r2, [r2, #16]
 8021b84:	2108      	movs	r1, #8
 8021b86:	1879      	adds	r1, r7, r1
 8021b88:	0010      	movs	r0, r2
 8021b8a:	4798      	blx	r3
 8021b8c:	0003      	movs	r3, r0
 8021b8e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021b90:	e03b      	b.n	8021c0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021b92:	683a      	ldr	r2, [r7, #0]
 8021b94:	687b      	ldr	r3, [r7, #4]
 8021b96:	0011      	movs	r1, r2
 8021b98:	0018      	movs	r0, r3
 8021b9a:	f000 fa98 	bl	80220ce <USBD_CtlError>
            err++;
 8021b9e:	210b      	movs	r1, #11
 8021ba0:	187b      	adds	r3, r7, r1
 8021ba2:	781a      	ldrb	r2, [r3, #0]
 8021ba4:	187b      	adds	r3, r7, r1
 8021ba6:	3201      	adds	r2, #1
 8021ba8:	701a      	strb	r2, [r3, #0]
          break;
 8021baa:	e02e      	b.n	8021c0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021bac:	687a      	ldr	r2, [r7, #4]
 8021bae:	23ac      	movs	r3, #172	@ 0xac
 8021bb0:	009b      	lsls	r3, r3, #2
 8021bb2:	58d3      	ldr	r3, [r2, r3]
 8021bb4:	699b      	ldr	r3, [r3, #24]
 8021bb6:	2b00      	cmp	r3, #0
 8021bb8:	d00d      	beq.n	8021bd6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021bba:	687a      	ldr	r2, [r7, #4]
 8021bbc:	23ac      	movs	r3, #172	@ 0xac
 8021bbe:	009b      	lsls	r3, r3, #2
 8021bc0:	58d3      	ldr	r3, [r2, r3]
 8021bc2:	699b      	ldr	r3, [r3, #24]
 8021bc4:	687a      	ldr	r2, [r7, #4]
 8021bc6:	7c12      	ldrb	r2, [r2, #16]
 8021bc8:	2108      	movs	r1, #8
 8021bca:	1879      	adds	r1, r7, r1
 8021bcc:	0010      	movs	r0, r2
 8021bce:	4798      	blx	r3
 8021bd0:	0003      	movs	r3, r0
 8021bd2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021bd4:	e019      	b.n	8021c0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021bd6:	683a      	ldr	r2, [r7, #0]
 8021bd8:	687b      	ldr	r3, [r7, #4]
 8021bda:	0011      	movs	r1, r2
 8021bdc:	0018      	movs	r0, r3
 8021bde:	f000 fa76 	bl	80220ce <USBD_CtlError>
            err++;
 8021be2:	210b      	movs	r1, #11
 8021be4:	187b      	adds	r3, r7, r1
 8021be6:	781a      	ldrb	r2, [r3, #0]
 8021be8:	187b      	adds	r3, r7, r1
 8021bea:	3201      	adds	r2, #1
 8021bec:	701a      	strb	r2, [r3, #0]
          break;
 8021bee:	e00c      	b.n	8021c0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8021bf0:	683a      	ldr	r2, [r7, #0]
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	0011      	movs	r1, r2
 8021bf6:	0018      	movs	r0, r3
 8021bf8:	f000 fa69 	bl	80220ce <USBD_CtlError>
          err++;
 8021bfc:	210b      	movs	r1, #11
 8021bfe:	187b      	adds	r3, r7, r1
 8021c00:	781a      	ldrb	r2, [r3, #0]
 8021c02:	187b      	adds	r3, r7, r1
 8021c04:	3201      	adds	r2, #1
 8021c06:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8021c08:	e04b      	b.n	8021ca2 <USBD_GetDescriptor+0x2fa>
 8021c0a:	e04a      	b.n	8021ca2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	7c1b      	ldrb	r3, [r3, #16]
 8021c10:	2b00      	cmp	r3, #0
 8021c12:	d10b      	bne.n	8021c2c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021c14:	687a      	ldr	r2, [r7, #4]
 8021c16:	23ad      	movs	r3, #173	@ 0xad
 8021c18:	009b      	lsls	r3, r3, #2
 8021c1a:	58d3      	ldr	r3, [r2, r3]
 8021c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021c1e:	2208      	movs	r2, #8
 8021c20:	18ba      	adds	r2, r7, r2
 8021c22:	0010      	movs	r0, r2
 8021c24:	4798      	blx	r3
 8021c26:	0003      	movs	r3, r0
 8021c28:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021c2a:	e03a      	b.n	8021ca2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8021c2c:	683a      	ldr	r2, [r7, #0]
 8021c2e:	687b      	ldr	r3, [r7, #4]
 8021c30:	0011      	movs	r1, r2
 8021c32:	0018      	movs	r0, r3
 8021c34:	f000 fa4b 	bl	80220ce <USBD_CtlError>
        err++;
 8021c38:	210b      	movs	r1, #11
 8021c3a:	187b      	adds	r3, r7, r1
 8021c3c:	781a      	ldrb	r2, [r3, #0]
 8021c3e:	187b      	adds	r3, r7, r1
 8021c40:	3201      	adds	r2, #1
 8021c42:	701a      	strb	r2, [r3, #0]
      break;
 8021c44:	e02d      	b.n	8021ca2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021c46:	687b      	ldr	r3, [r7, #4]
 8021c48:	7c1b      	ldrb	r3, [r3, #16]
 8021c4a:	2b00      	cmp	r3, #0
 8021c4c:	d10f      	bne.n	8021c6e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021c4e:	687a      	ldr	r2, [r7, #4]
 8021c50:	23ad      	movs	r3, #173	@ 0xad
 8021c52:	009b      	lsls	r3, r3, #2
 8021c54:	58d3      	ldr	r3, [r2, r3]
 8021c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021c58:	2208      	movs	r2, #8
 8021c5a:	18ba      	adds	r2, r7, r2
 8021c5c:	0010      	movs	r0, r2
 8021c5e:	4798      	blx	r3
 8021c60:	0003      	movs	r3, r0
 8021c62:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021c64:	68fb      	ldr	r3, [r7, #12]
 8021c66:	3301      	adds	r3, #1
 8021c68:	2207      	movs	r2, #7
 8021c6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021c6c:	e019      	b.n	8021ca2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8021c6e:	683a      	ldr	r2, [r7, #0]
 8021c70:	687b      	ldr	r3, [r7, #4]
 8021c72:	0011      	movs	r1, r2
 8021c74:	0018      	movs	r0, r3
 8021c76:	f000 fa2a 	bl	80220ce <USBD_CtlError>
        err++;
 8021c7a:	210b      	movs	r1, #11
 8021c7c:	187b      	adds	r3, r7, r1
 8021c7e:	781a      	ldrb	r2, [r3, #0]
 8021c80:	187b      	adds	r3, r7, r1
 8021c82:	3201      	adds	r2, #1
 8021c84:	701a      	strb	r2, [r3, #0]
      break;
 8021c86:	e00c      	b.n	8021ca2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8021c88:	683a      	ldr	r2, [r7, #0]
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	0011      	movs	r1, r2
 8021c8e:	0018      	movs	r0, r3
 8021c90:	f000 fa1d 	bl	80220ce <USBD_CtlError>
      err++;
 8021c94:	210b      	movs	r1, #11
 8021c96:	187b      	adds	r3, r7, r1
 8021c98:	781a      	ldrb	r2, [r3, #0]
 8021c9a:	187b      	adds	r3, r7, r1
 8021c9c:	3201      	adds	r2, #1
 8021c9e:	701a      	strb	r2, [r3, #0]
      break;
 8021ca0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8021ca2:	230b      	movs	r3, #11
 8021ca4:	18fb      	adds	r3, r7, r3
 8021ca6:	781b      	ldrb	r3, [r3, #0]
 8021ca8:	2b00      	cmp	r3, #0
 8021caa:	d127      	bne.n	8021cfc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8021cac:	2108      	movs	r1, #8
 8021cae:	187b      	adds	r3, r7, r1
 8021cb0:	881b      	ldrh	r3, [r3, #0]
 8021cb2:	2b00      	cmp	r3, #0
 8021cb4:	d019      	beq.n	8021cea <USBD_GetDescriptor+0x342>
 8021cb6:	683b      	ldr	r3, [r7, #0]
 8021cb8:	88db      	ldrh	r3, [r3, #6]
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d015      	beq.n	8021cea <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8021cbe:	683b      	ldr	r3, [r7, #0]
 8021cc0:	88da      	ldrh	r2, [r3, #6]
 8021cc2:	187b      	adds	r3, r7, r1
 8021cc4:	881b      	ldrh	r3, [r3, #0]
 8021cc6:	1c18      	adds	r0, r3, #0
 8021cc8:	1c11      	adds	r1, r2, #0
 8021cca:	b28a      	uxth	r2, r1
 8021ccc:	b283      	uxth	r3, r0
 8021cce:	429a      	cmp	r2, r3
 8021cd0:	d900      	bls.n	8021cd4 <USBD_GetDescriptor+0x32c>
 8021cd2:	1c01      	adds	r1, r0, #0
 8021cd4:	b28a      	uxth	r2, r1
 8021cd6:	2108      	movs	r1, #8
 8021cd8:	187b      	adds	r3, r7, r1
 8021cda:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021cdc:	187b      	adds	r3, r7, r1
 8021cde:	881a      	ldrh	r2, [r3, #0]
 8021ce0:	68f9      	ldr	r1, [r7, #12]
 8021ce2:	687b      	ldr	r3, [r7, #4]
 8021ce4:	0018      	movs	r0, r3
 8021ce6:	f000 fa70 	bl	80221ca <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8021cea:	683b      	ldr	r3, [r7, #0]
 8021cec:	88db      	ldrh	r3, [r3, #6]
 8021cee:	2b00      	cmp	r3, #0
 8021cf0:	d105      	bne.n	8021cfe <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8021cf2:	687b      	ldr	r3, [r7, #4]
 8021cf4:	0018      	movs	r0, r3
 8021cf6:	f000 fad2 	bl	802229e <USBD_CtlSendStatus>
 8021cfa:	e000      	b.n	8021cfe <USBD_GetDescriptor+0x356>
    return;
 8021cfc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8021cfe:	46bd      	mov	sp, r7
 8021d00:	b004      	add	sp, #16
 8021d02:	bd80      	pop	{r7, pc}
 8021d04:	0802df0c 	.word	0x0802df0c
 8021d08:	0802df2c 	.word	0x0802df2c

08021d0c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8021d0c:	b590      	push	{r4, r7, lr}
 8021d0e:	b085      	sub	sp, #20
 8021d10:	af00      	add	r7, sp, #0
 8021d12:	6078      	str	r0, [r7, #4]
 8021d14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021d16:	683b      	ldr	r3, [r7, #0]
 8021d18:	889b      	ldrh	r3, [r3, #4]
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	d13d      	bne.n	8021d9a <USBD_SetAddress+0x8e>
 8021d1e:	683b      	ldr	r3, [r7, #0]
 8021d20:	88db      	ldrh	r3, [r3, #6]
 8021d22:	2b00      	cmp	r3, #0
 8021d24:	d139      	bne.n	8021d9a <USBD_SetAddress+0x8e>
 8021d26:	683b      	ldr	r3, [r7, #0]
 8021d28:	885b      	ldrh	r3, [r3, #2]
 8021d2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8021d2c:	d835      	bhi.n	8021d9a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021d2e:	683b      	ldr	r3, [r7, #0]
 8021d30:	885b      	ldrh	r3, [r3, #2]
 8021d32:	b2da      	uxtb	r2, r3
 8021d34:	230f      	movs	r3, #15
 8021d36:	18fb      	adds	r3, r7, r3
 8021d38:	217f      	movs	r1, #127	@ 0x7f
 8021d3a:	400a      	ands	r2, r1
 8021d3c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021d3e:	687a      	ldr	r2, [r7, #4]
 8021d40:	23a7      	movs	r3, #167	@ 0xa7
 8021d42:	009b      	lsls	r3, r3, #2
 8021d44:	5cd3      	ldrb	r3, [r2, r3]
 8021d46:	2b03      	cmp	r3, #3
 8021d48:	d106      	bne.n	8021d58 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8021d4a:	683a      	ldr	r2, [r7, #0]
 8021d4c:	687b      	ldr	r3, [r7, #4]
 8021d4e:	0011      	movs	r1, r2
 8021d50:	0018      	movs	r0, r3
 8021d52:	f000 f9bc 	bl	80220ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021d56:	e027      	b.n	8021da8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021d58:	687b      	ldr	r3, [r7, #4]
 8021d5a:	240f      	movs	r4, #15
 8021d5c:	193a      	adds	r2, r7, r4
 8021d5e:	4914      	ldr	r1, [pc, #80]	@ (8021db0 <USBD_SetAddress+0xa4>)
 8021d60:	7812      	ldrb	r2, [r2, #0]
 8021d62:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021d64:	193b      	adds	r3, r7, r4
 8021d66:	781a      	ldrb	r2, [r3, #0]
 8021d68:	687b      	ldr	r3, [r7, #4]
 8021d6a:	0011      	movs	r1, r2
 8021d6c:	0018      	movs	r0, r3
 8021d6e:	f000 ff5d 	bl	8022c2c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8021d72:	687b      	ldr	r3, [r7, #4]
 8021d74:	0018      	movs	r0, r3
 8021d76:	f000 fa92 	bl	802229e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021d7a:	193b      	adds	r3, r7, r4
 8021d7c:	781b      	ldrb	r3, [r3, #0]
 8021d7e:	2b00      	cmp	r3, #0
 8021d80:	d005      	beq.n	8021d8e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021d82:	687a      	ldr	r2, [r7, #4]
 8021d84:	23a7      	movs	r3, #167	@ 0xa7
 8021d86:	009b      	lsls	r3, r3, #2
 8021d88:	2102      	movs	r1, #2
 8021d8a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021d8c:	e00c      	b.n	8021da8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021d8e:	687a      	ldr	r2, [r7, #4]
 8021d90:	23a7      	movs	r3, #167	@ 0xa7
 8021d92:	009b      	lsls	r3, r3, #2
 8021d94:	2101      	movs	r1, #1
 8021d96:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021d98:	e006      	b.n	8021da8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021d9a:	683a      	ldr	r2, [r7, #0]
 8021d9c:	687b      	ldr	r3, [r7, #4]
 8021d9e:	0011      	movs	r1, r2
 8021da0:	0018      	movs	r0, r3
 8021da2:	f000 f994 	bl	80220ce <USBD_CtlError>
  }
}
 8021da6:	46c0      	nop			@ (mov r8, r8)
 8021da8:	46c0      	nop			@ (mov r8, r8)
 8021daa:	46bd      	mov	sp, r7
 8021dac:	b005      	add	sp, #20
 8021dae:	bd90      	pop	{r4, r7, pc}
 8021db0:	0000029e 	.word	0x0000029e

08021db4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021db4:	b580      	push	{r7, lr}
 8021db6:	b082      	sub	sp, #8
 8021db8:	af00      	add	r7, sp, #0
 8021dba:	6078      	str	r0, [r7, #4]
 8021dbc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021dbe:	683b      	ldr	r3, [r7, #0]
 8021dc0:	885b      	ldrh	r3, [r3, #2]
 8021dc2:	b2da      	uxtb	r2, r3
 8021dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8021ef8 <USBD_SetConfig+0x144>)
 8021dc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021dc8:	4b4b      	ldr	r3, [pc, #300]	@ (8021ef8 <USBD_SetConfig+0x144>)
 8021dca:	781b      	ldrb	r3, [r3, #0]
 8021dcc:	2b01      	cmp	r3, #1
 8021dce:	d906      	bls.n	8021dde <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8021dd0:	683a      	ldr	r2, [r7, #0]
 8021dd2:	687b      	ldr	r3, [r7, #4]
 8021dd4:	0011      	movs	r1, r2
 8021dd6:	0018      	movs	r0, r3
 8021dd8:	f000 f979 	bl	80220ce <USBD_CtlError>
 8021ddc:	e088      	b.n	8021ef0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8021dde:	687a      	ldr	r2, [r7, #4]
 8021de0:	23a7      	movs	r3, #167	@ 0xa7
 8021de2:	009b      	lsls	r3, r3, #2
 8021de4:	5cd3      	ldrb	r3, [r2, r3]
 8021de6:	2b02      	cmp	r3, #2
 8021de8:	d002      	beq.n	8021df0 <USBD_SetConfig+0x3c>
 8021dea:	2b03      	cmp	r3, #3
 8021dec:	d029      	beq.n	8021e42 <USBD_SetConfig+0x8e>
 8021dee:	e071      	b.n	8021ed4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8021df0:	4b41      	ldr	r3, [pc, #260]	@ (8021ef8 <USBD_SetConfig+0x144>)
 8021df2:	781b      	ldrb	r3, [r3, #0]
 8021df4:	2b00      	cmp	r3, #0
 8021df6:	d01f      	beq.n	8021e38 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8021df8:	4b3f      	ldr	r3, [pc, #252]	@ (8021ef8 <USBD_SetConfig+0x144>)
 8021dfa:	781b      	ldrb	r3, [r3, #0]
 8021dfc:	001a      	movs	r2, r3
 8021dfe:	687b      	ldr	r3, [r7, #4]
 8021e00:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021e02:	687a      	ldr	r2, [r7, #4]
 8021e04:	23a7      	movs	r3, #167	@ 0xa7
 8021e06:	009b      	lsls	r3, r3, #2
 8021e08:	2103      	movs	r1, #3
 8021e0a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8021e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8021ef8 <USBD_SetConfig+0x144>)
 8021e0e:	781a      	ldrb	r2, [r3, #0]
 8021e10:	687b      	ldr	r3, [r7, #4]
 8021e12:	0011      	movs	r1, r2
 8021e14:	0018      	movs	r0, r3
 8021e16:	f7ff f8c6 	bl	8020fa6 <USBD_SetClassConfig>
 8021e1a:	0003      	movs	r3, r0
 8021e1c:	2b02      	cmp	r3, #2
 8021e1e:	d106      	bne.n	8021e2e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8021e20:	683a      	ldr	r2, [r7, #0]
 8021e22:	687b      	ldr	r3, [r7, #4]
 8021e24:	0011      	movs	r1, r2
 8021e26:	0018      	movs	r0, r3
 8021e28:	f000 f951 	bl	80220ce <USBD_CtlError>
            return;
 8021e2c:	e060      	b.n	8021ef0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8021e2e:	687b      	ldr	r3, [r7, #4]
 8021e30:	0018      	movs	r0, r3
 8021e32:	f000 fa34 	bl	802229e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8021e36:	e05b      	b.n	8021ef0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021e38:	687b      	ldr	r3, [r7, #4]
 8021e3a:	0018      	movs	r0, r3
 8021e3c:	f000 fa2f 	bl	802229e <USBD_CtlSendStatus>
        break;
 8021e40:	e056      	b.n	8021ef0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8021e42:	4b2d      	ldr	r3, [pc, #180]	@ (8021ef8 <USBD_SetConfig+0x144>)
 8021e44:	781b      	ldrb	r3, [r3, #0]
 8021e46:	2b00      	cmp	r3, #0
 8021e48:	d115      	bne.n	8021e76 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021e4a:	687a      	ldr	r2, [r7, #4]
 8021e4c:	23a7      	movs	r3, #167	@ 0xa7
 8021e4e:	009b      	lsls	r3, r3, #2
 8021e50:	2102      	movs	r1, #2
 8021e52:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8021e54:	4b28      	ldr	r3, [pc, #160]	@ (8021ef8 <USBD_SetConfig+0x144>)
 8021e56:	781b      	ldrb	r3, [r3, #0]
 8021e58:	001a      	movs	r2, r3
 8021e5a:	687b      	ldr	r3, [r7, #4]
 8021e5c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8021e5e:	4b26      	ldr	r3, [pc, #152]	@ (8021ef8 <USBD_SetConfig+0x144>)
 8021e60:	781a      	ldrb	r2, [r3, #0]
 8021e62:	687b      	ldr	r3, [r7, #4]
 8021e64:	0011      	movs	r1, r2
 8021e66:	0018      	movs	r0, r3
 8021e68:	f7ff f8c4 	bl	8020ff4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8021e6c:	687b      	ldr	r3, [r7, #4]
 8021e6e:	0018      	movs	r0, r3
 8021e70:	f000 fa15 	bl	802229e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8021e74:	e03c      	b.n	8021ef0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8021e76:	4b20      	ldr	r3, [pc, #128]	@ (8021ef8 <USBD_SetConfig+0x144>)
 8021e78:	781b      	ldrb	r3, [r3, #0]
 8021e7a:	001a      	movs	r2, r3
 8021e7c:	687b      	ldr	r3, [r7, #4]
 8021e7e:	685b      	ldr	r3, [r3, #4]
 8021e80:	429a      	cmp	r2, r3
 8021e82:	d022      	beq.n	8021eca <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021e84:	687b      	ldr	r3, [r7, #4]
 8021e86:	685b      	ldr	r3, [r3, #4]
 8021e88:	b2da      	uxtb	r2, r3
 8021e8a:	687b      	ldr	r3, [r7, #4]
 8021e8c:	0011      	movs	r1, r2
 8021e8e:	0018      	movs	r0, r3
 8021e90:	f7ff f8b0 	bl	8020ff4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8021e94:	4b18      	ldr	r3, [pc, #96]	@ (8021ef8 <USBD_SetConfig+0x144>)
 8021e96:	781b      	ldrb	r3, [r3, #0]
 8021e98:	001a      	movs	r2, r3
 8021e9a:	687b      	ldr	r3, [r7, #4]
 8021e9c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8021e9e:	4b16      	ldr	r3, [pc, #88]	@ (8021ef8 <USBD_SetConfig+0x144>)
 8021ea0:	781a      	ldrb	r2, [r3, #0]
 8021ea2:	687b      	ldr	r3, [r7, #4]
 8021ea4:	0011      	movs	r1, r2
 8021ea6:	0018      	movs	r0, r3
 8021ea8:	f7ff f87d 	bl	8020fa6 <USBD_SetClassConfig>
 8021eac:	0003      	movs	r3, r0
 8021eae:	2b02      	cmp	r3, #2
 8021eb0:	d106      	bne.n	8021ec0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8021eb2:	683a      	ldr	r2, [r7, #0]
 8021eb4:	687b      	ldr	r3, [r7, #4]
 8021eb6:	0011      	movs	r1, r2
 8021eb8:	0018      	movs	r0, r3
 8021eba:	f000 f908 	bl	80220ce <USBD_CtlError>
            return;
 8021ebe:	e017      	b.n	8021ef0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	0018      	movs	r0, r3
 8021ec4:	f000 f9eb 	bl	802229e <USBD_CtlSendStatus>
        break;
 8021ec8:	e012      	b.n	8021ef0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021eca:	687b      	ldr	r3, [r7, #4]
 8021ecc:	0018      	movs	r0, r3
 8021ece:	f000 f9e6 	bl	802229e <USBD_CtlSendStatus>
        break;
 8021ed2:	e00d      	b.n	8021ef0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8021ed4:	683a      	ldr	r2, [r7, #0]
 8021ed6:	687b      	ldr	r3, [r7, #4]
 8021ed8:	0011      	movs	r1, r2
 8021eda:	0018      	movs	r0, r3
 8021edc:	f000 f8f7 	bl	80220ce <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8021ee0:	4b05      	ldr	r3, [pc, #20]	@ (8021ef8 <USBD_SetConfig+0x144>)
 8021ee2:	781a      	ldrb	r2, [r3, #0]
 8021ee4:	687b      	ldr	r3, [r7, #4]
 8021ee6:	0011      	movs	r1, r2
 8021ee8:	0018      	movs	r0, r3
 8021eea:	f7ff f883 	bl	8020ff4 <USBD_ClrClassConfig>
        break;
 8021eee:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8021ef0:	46bd      	mov	sp, r7
 8021ef2:	b002      	add	sp, #8
 8021ef4:	bd80      	pop	{r7, pc}
 8021ef6:	46c0      	nop			@ (mov r8, r8)
 8021ef8:	20002244 	.word	0x20002244

08021efc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021efc:	b580      	push	{r7, lr}
 8021efe:	b082      	sub	sp, #8
 8021f00:	af00      	add	r7, sp, #0
 8021f02:	6078      	str	r0, [r7, #4]
 8021f04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021f06:	683b      	ldr	r3, [r7, #0]
 8021f08:	88db      	ldrh	r3, [r3, #6]
 8021f0a:	2b01      	cmp	r3, #1
 8021f0c:	d006      	beq.n	8021f1c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8021f0e:	683a      	ldr	r2, [r7, #0]
 8021f10:	687b      	ldr	r3, [r7, #4]
 8021f12:	0011      	movs	r1, r2
 8021f14:	0018      	movs	r0, r3
 8021f16:	f000 f8da 	bl	80220ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021f1a:	e026      	b.n	8021f6a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8021f1c:	687a      	ldr	r2, [r7, #4]
 8021f1e:	23a7      	movs	r3, #167	@ 0xa7
 8021f20:	009b      	lsls	r3, r3, #2
 8021f22:	5cd3      	ldrb	r3, [r2, r3]
 8021f24:	2b02      	cmp	r3, #2
 8021f26:	dc02      	bgt.n	8021f2e <USBD_GetConfig+0x32>
 8021f28:	2b00      	cmp	r3, #0
 8021f2a:	dc03      	bgt.n	8021f34 <USBD_GetConfig+0x38>
 8021f2c:	e016      	b.n	8021f5c <USBD_GetConfig+0x60>
 8021f2e:	2b03      	cmp	r3, #3
 8021f30:	d00c      	beq.n	8021f4c <USBD_GetConfig+0x50>
 8021f32:	e013      	b.n	8021f5c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	2200      	movs	r2, #0
 8021f38:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	3308      	adds	r3, #8
 8021f3e:	0019      	movs	r1, r3
 8021f40:	687b      	ldr	r3, [r7, #4]
 8021f42:	2201      	movs	r2, #1
 8021f44:	0018      	movs	r0, r3
 8021f46:	f000 f940 	bl	80221ca <USBD_CtlSendData>
        break;
 8021f4a:	e00e      	b.n	8021f6a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8021f4c:	687b      	ldr	r3, [r7, #4]
 8021f4e:	1d19      	adds	r1, r3, #4
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	2201      	movs	r2, #1
 8021f54:	0018      	movs	r0, r3
 8021f56:	f000 f938 	bl	80221ca <USBD_CtlSendData>
        break;
 8021f5a:	e006      	b.n	8021f6a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8021f5c:	683a      	ldr	r2, [r7, #0]
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	0011      	movs	r1, r2
 8021f62:	0018      	movs	r0, r3
 8021f64:	f000 f8b3 	bl	80220ce <USBD_CtlError>
        break;
 8021f68:	46c0      	nop			@ (mov r8, r8)
}
 8021f6a:	46c0      	nop			@ (mov r8, r8)
 8021f6c:	46bd      	mov	sp, r7
 8021f6e:	b002      	add	sp, #8
 8021f70:	bd80      	pop	{r7, pc}

08021f72 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021f72:	b580      	push	{r7, lr}
 8021f74:	b082      	sub	sp, #8
 8021f76:	af00      	add	r7, sp, #0
 8021f78:	6078      	str	r0, [r7, #4]
 8021f7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021f7c:	687a      	ldr	r2, [r7, #4]
 8021f7e:	23a7      	movs	r3, #167	@ 0xa7
 8021f80:	009b      	lsls	r3, r3, #2
 8021f82:	5cd3      	ldrb	r3, [r2, r3]
 8021f84:	3b01      	subs	r3, #1
 8021f86:	2b02      	cmp	r3, #2
 8021f88:	d822      	bhi.n	8021fd0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8021f8a:	683b      	ldr	r3, [r7, #0]
 8021f8c:	88db      	ldrh	r3, [r3, #6]
 8021f8e:	2b02      	cmp	r3, #2
 8021f90:	d006      	beq.n	8021fa0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8021f92:	683a      	ldr	r2, [r7, #0]
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	0011      	movs	r1, r2
 8021f98:	0018      	movs	r0, r3
 8021f9a:	f000 f898 	bl	80220ce <USBD_CtlError>
        break;
 8021f9e:	e01e      	b.n	8021fde <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021fa0:	687b      	ldr	r3, [r7, #4]
 8021fa2:	2201      	movs	r2, #1
 8021fa4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8021fa6:	687a      	ldr	r2, [r7, #4]
 8021fa8:	23a9      	movs	r3, #169	@ 0xa9
 8021faa:	009b      	lsls	r3, r3, #2
 8021fac:	58d3      	ldr	r3, [r2, r3]
 8021fae:	2b00      	cmp	r3, #0
 8021fb0:	d005      	beq.n	8021fbe <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	68db      	ldr	r3, [r3, #12]
 8021fb6:	2202      	movs	r2, #2
 8021fb8:	431a      	orrs	r2, r3
 8021fba:	687b      	ldr	r3, [r7, #4]
 8021fbc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8021fbe:	687b      	ldr	r3, [r7, #4]
 8021fc0:	330c      	adds	r3, #12
 8021fc2:	0019      	movs	r1, r3
 8021fc4:	687b      	ldr	r3, [r7, #4]
 8021fc6:	2202      	movs	r2, #2
 8021fc8:	0018      	movs	r0, r3
 8021fca:	f000 f8fe 	bl	80221ca <USBD_CtlSendData>
      break;
 8021fce:	e006      	b.n	8021fde <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8021fd0:	683a      	ldr	r2, [r7, #0]
 8021fd2:	687b      	ldr	r3, [r7, #4]
 8021fd4:	0011      	movs	r1, r2
 8021fd6:	0018      	movs	r0, r3
 8021fd8:	f000 f879 	bl	80220ce <USBD_CtlError>
      break;
 8021fdc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8021fde:	46c0      	nop			@ (mov r8, r8)
 8021fe0:	46bd      	mov	sp, r7
 8021fe2:	b002      	add	sp, #8
 8021fe4:	bd80      	pop	{r7, pc}

08021fe6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8021fe6:	b580      	push	{r7, lr}
 8021fe8:	b082      	sub	sp, #8
 8021fea:	af00      	add	r7, sp, #0
 8021fec:	6078      	str	r0, [r7, #4]
 8021fee:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021ff0:	683b      	ldr	r3, [r7, #0]
 8021ff2:	885b      	ldrh	r3, [r3, #2]
 8021ff4:	2b01      	cmp	r3, #1
 8021ff6:	d108      	bne.n	802200a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8021ff8:	687a      	ldr	r2, [r7, #4]
 8021ffa:	23a9      	movs	r3, #169	@ 0xa9
 8021ffc:	009b      	lsls	r3, r3, #2
 8021ffe:	2101      	movs	r1, #1
 8022000:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8022002:	687b      	ldr	r3, [r7, #4]
 8022004:	0018      	movs	r0, r3
 8022006:	f000 f94a 	bl	802229e <USBD_CtlSendStatus>
  }
}
 802200a:	46c0      	nop			@ (mov r8, r8)
 802200c:	46bd      	mov	sp, r7
 802200e:	b002      	add	sp, #8
 8022010:	bd80      	pop	{r7, pc}

08022012 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022012:	b580      	push	{r7, lr}
 8022014:	b082      	sub	sp, #8
 8022016:	af00      	add	r7, sp, #0
 8022018:	6078      	str	r0, [r7, #4]
 802201a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 802201c:	687a      	ldr	r2, [r7, #4]
 802201e:	23a7      	movs	r3, #167	@ 0xa7
 8022020:	009b      	lsls	r3, r3, #2
 8022022:	5cd3      	ldrb	r3, [r2, r3]
 8022024:	3b01      	subs	r3, #1
 8022026:	2b02      	cmp	r3, #2
 8022028:	d80d      	bhi.n	8022046 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 802202a:	683b      	ldr	r3, [r7, #0]
 802202c:	885b      	ldrh	r3, [r3, #2]
 802202e:	2b01      	cmp	r3, #1
 8022030:	d110      	bne.n	8022054 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8022032:	687a      	ldr	r2, [r7, #4]
 8022034:	23a9      	movs	r3, #169	@ 0xa9
 8022036:	009b      	lsls	r3, r3, #2
 8022038:	2100      	movs	r1, #0
 802203a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 802203c:	687b      	ldr	r3, [r7, #4]
 802203e:	0018      	movs	r0, r3
 8022040:	f000 f92d 	bl	802229e <USBD_CtlSendStatus>
      }
      break;
 8022044:	e006      	b.n	8022054 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8022046:	683a      	ldr	r2, [r7, #0]
 8022048:	687b      	ldr	r3, [r7, #4]
 802204a:	0011      	movs	r1, r2
 802204c:	0018      	movs	r0, r3
 802204e:	f000 f83e 	bl	80220ce <USBD_CtlError>
      break;
 8022052:	e000      	b.n	8022056 <USBD_ClrFeature+0x44>
      break;
 8022054:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022056:	46c0      	nop			@ (mov r8, r8)
 8022058:	46bd      	mov	sp, r7
 802205a:	b002      	add	sp, #8
 802205c:	bd80      	pop	{r7, pc}

0802205e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 802205e:	b580      	push	{r7, lr}
 8022060:	b082      	sub	sp, #8
 8022062:	af00      	add	r7, sp, #0
 8022064:	6078      	str	r0, [r7, #4]
 8022066:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8022068:	683b      	ldr	r3, [r7, #0]
 802206a:	781a      	ldrb	r2, [r3, #0]
 802206c:	687b      	ldr	r3, [r7, #4]
 802206e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8022070:	683b      	ldr	r3, [r7, #0]
 8022072:	785a      	ldrb	r2, [r3, #1]
 8022074:	687b      	ldr	r3, [r7, #4]
 8022076:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8022078:	683b      	ldr	r3, [r7, #0]
 802207a:	3302      	adds	r3, #2
 802207c:	781b      	ldrb	r3, [r3, #0]
 802207e:	001a      	movs	r2, r3
 8022080:	683b      	ldr	r3, [r7, #0]
 8022082:	3303      	adds	r3, #3
 8022084:	781b      	ldrb	r3, [r3, #0]
 8022086:	021b      	lsls	r3, r3, #8
 8022088:	b29b      	uxth	r3, r3
 802208a:	18d3      	adds	r3, r2, r3
 802208c:	b29a      	uxth	r2, r3
 802208e:	687b      	ldr	r3, [r7, #4]
 8022090:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8022092:	683b      	ldr	r3, [r7, #0]
 8022094:	3304      	adds	r3, #4
 8022096:	781b      	ldrb	r3, [r3, #0]
 8022098:	001a      	movs	r2, r3
 802209a:	683b      	ldr	r3, [r7, #0]
 802209c:	3305      	adds	r3, #5
 802209e:	781b      	ldrb	r3, [r3, #0]
 80220a0:	021b      	lsls	r3, r3, #8
 80220a2:	b29b      	uxth	r3, r3
 80220a4:	18d3      	adds	r3, r2, r3
 80220a6:	b29a      	uxth	r2, r3
 80220a8:	687b      	ldr	r3, [r7, #4]
 80220aa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80220ac:	683b      	ldr	r3, [r7, #0]
 80220ae:	3306      	adds	r3, #6
 80220b0:	781b      	ldrb	r3, [r3, #0]
 80220b2:	001a      	movs	r2, r3
 80220b4:	683b      	ldr	r3, [r7, #0]
 80220b6:	3307      	adds	r3, #7
 80220b8:	781b      	ldrb	r3, [r3, #0]
 80220ba:	021b      	lsls	r3, r3, #8
 80220bc:	b29b      	uxth	r3, r3
 80220be:	18d3      	adds	r3, r2, r3
 80220c0:	b29a      	uxth	r2, r3
 80220c2:	687b      	ldr	r3, [r7, #4]
 80220c4:	80da      	strh	r2, [r3, #6]

}
 80220c6:	46c0      	nop			@ (mov r8, r8)
 80220c8:	46bd      	mov	sp, r7
 80220ca:	b002      	add	sp, #8
 80220cc:	bd80      	pop	{r7, pc}

080220ce <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80220ce:	b580      	push	{r7, lr}
 80220d0:	b082      	sub	sp, #8
 80220d2:	af00      	add	r7, sp, #0
 80220d4:	6078      	str	r0, [r7, #4]
 80220d6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80220d8:	687b      	ldr	r3, [r7, #4]
 80220da:	2180      	movs	r1, #128	@ 0x80
 80220dc:	0018      	movs	r0, r3
 80220de:	f000 fd1e 	bl	8022b1e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80220e2:	687b      	ldr	r3, [r7, #4]
 80220e4:	2100      	movs	r1, #0
 80220e6:	0018      	movs	r0, r3
 80220e8:	f000 fd19 	bl	8022b1e <USBD_LL_StallEP>
}
 80220ec:	46c0      	nop			@ (mov r8, r8)
 80220ee:	46bd      	mov	sp, r7
 80220f0:	b002      	add	sp, #8
 80220f2:	bd80      	pop	{r7, pc}

080220f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80220f4:	b590      	push	{r4, r7, lr}
 80220f6:	b087      	sub	sp, #28
 80220f8:	af00      	add	r7, sp, #0
 80220fa:	60f8      	str	r0, [r7, #12]
 80220fc:	60b9      	str	r1, [r7, #8]
 80220fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8022100:	2417      	movs	r4, #23
 8022102:	193b      	adds	r3, r7, r4
 8022104:	2200      	movs	r2, #0
 8022106:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8022108:	68fb      	ldr	r3, [r7, #12]
 802210a:	2b00      	cmp	r3, #0
 802210c:	d03c      	beq.n	8022188 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 802210e:	68fb      	ldr	r3, [r7, #12]
 8022110:	0018      	movs	r0, r3
 8022112:	f000 f83d 	bl	8022190 <USBD_GetLen>
 8022116:	0003      	movs	r3, r0
 8022118:	3301      	adds	r3, #1
 802211a:	b29b      	uxth	r3, r3
 802211c:	18db      	adds	r3, r3, r3
 802211e:	b29a      	uxth	r2, r3
 8022120:	687b      	ldr	r3, [r7, #4]
 8022122:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8022124:	193b      	adds	r3, r7, r4
 8022126:	781b      	ldrb	r3, [r3, #0]
 8022128:	193a      	adds	r2, r7, r4
 802212a:	1c59      	adds	r1, r3, #1
 802212c:	7011      	strb	r1, [r2, #0]
 802212e:	001a      	movs	r2, r3
 8022130:	68bb      	ldr	r3, [r7, #8]
 8022132:	189b      	adds	r3, r3, r2
 8022134:	687a      	ldr	r2, [r7, #4]
 8022136:	7812      	ldrb	r2, [r2, #0]
 8022138:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 802213a:	193b      	adds	r3, r7, r4
 802213c:	781b      	ldrb	r3, [r3, #0]
 802213e:	193a      	adds	r2, r7, r4
 8022140:	1c59      	adds	r1, r3, #1
 8022142:	7011      	strb	r1, [r2, #0]
 8022144:	001a      	movs	r2, r3
 8022146:	68bb      	ldr	r3, [r7, #8]
 8022148:	189b      	adds	r3, r3, r2
 802214a:	2203      	movs	r2, #3
 802214c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 802214e:	e017      	b.n	8022180 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8022150:	68fb      	ldr	r3, [r7, #12]
 8022152:	1c5a      	adds	r2, r3, #1
 8022154:	60fa      	str	r2, [r7, #12]
 8022156:	2417      	movs	r4, #23
 8022158:	193a      	adds	r2, r7, r4
 802215a:	7812      	ldrb	r2, [r2, #0]
 802215c:	1939      	adds	r1, r7, r4
 802215e:	1c50      	adds	r0, r2, #1
 8022160:	7008      	strb	r0, [r1, #0]
 8022162:	0011      	movs	r1, r2
 8022164:	68ba      	ldr	r2, [r7, #8]
 8022166:	1852      	adds	r2, r2, r1
 8022168:	781b      	ldrb	r3, [r3, #0]
 802216a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 802216c:	193b      	adds	r3, r7, r4
 802216e:	781b      	ldrb	r3, [r3, #0]
 8022170:	193a      	adds	r2, r7, r4
 8022172:	1c59      	adds	r1, r3, #1
 8022174:	7011      	strb	r1, [r2, #0]
 8022176:	001a      	movs	r2, r3
 8022178:	68bb      	ldr	r3, [r7, #8]
 802217a:	189b      	adds	r3, r3, r2
 802217c:	2200      	movs	r2, #0
 802217e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8022180:	68fb      	ldr	r3, [r7, #12]
 8022182:	781b      	ldrb	r3, [r3, #0]
 8022184:	2b00      	cmp	r3, #0
 8022186:	d1e3      	bne.n	8022150 <USBD_GetString+0x5c>
    }
  }
}
 8022188:	46c0      	nop			@ (mov r8, r8)
 802218a:	46bd      	mov	sp, r7
 802218c:	b007      	add	sp, #28
 802218e:	bd90      	pop	{r4, r7, pc}

08022190 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022190:	b580      	push	{r7, lr}
 8022192:	b084      	sub	sp, #16
 8022194:	af00      	add	r7, sp, #0
 8022196:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022198:	230f      	movs	r3, #15
 802219a:	18fb      	adds	r3, r7, r3
 802219c:	2200      	movs	r2, #0
 802219e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80221a0:	e008      	b.n	80221b4 <USBD_GetLen+0x24>
  {
    len++;
 80221a2:	210f      	movs	r1, #15
 80221a4:	187b      	adds	r3, r7, r1
 80221a6:	781a      	ldrb	r2, [r3, #0]
 80221a8:	187b      	adds	r3, r7, r1
 80221aa:	3201      	adds	r2, #1
 80221ac:	701a      	strb	r2, [r3, #0]
    buf++;
 80221ae:	687b      	ldr	r3, [r7, #4]
 80221b0:	3301      	adds	r3, #1
 80221b2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80221b4:	687b      	ldr	r3, [r7, #4]
 80221b6:	781b      	ldrb	r3, [r3, #0]
 80221b8:	2b00      	cmp	r3, #0
 80221ba:	d1f2      	bne.n	80221a2 <USBD_GetLen+0x12>
  }

  return len;
 80221bc:	230f      	movs	r3, #15
 80221be:	18fb      	adds	r3, r7, r3
 80221c0:	781b      	ldrb	r3, [r3, #0]
}
 80221c2:	0018      	movs	r0, r3
 80221c4:	46bd      	mov	sp, r7
 80221c6:	b004      	add	sp, #16
 80221c8:	bd80      	pop	{r7, pc}

080221ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80221ca:	b580      	push	{r7, lr}
 80221cc:	b084      	sub	sp, #16
 80221ce:	af00      	add	r7, sp, #0
 80221d0:	60f8      	str	r0, [r7, #12]
 80221d2:	60b9      	str	r1, [r7, #8]
 80221d4:	1dbb      	adds	r3, r7, #6
 80221d6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80221d8:	68fa      	ldr	r2, [r7, #12]
 80221da:	23a5      	movs	r3, #165	@ 0xa5
 80221dc:	009b      	lsls	r3, r3, #2
 80221de:	2102      	movs	r1, #2
 80221e0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80221e2:	1dbb      	adds	r3, r7, #6
 80221e4:	881a      	ldrh	r2, [r3, #0]
 80221e6:	68fb      	ldr	r3, [r7, #12]
 80221e8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80221ea:	1dbb      	adds	r3, r7, #6
 80221ec:	881a      	ldrh	r2, [r3, #0]
 80221ee:	68fb      	ldr	r3, [r7, #12]
 80221f0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80221f2:	1dbb      	adds	r3, r7, #6
 80221f4:	881b      	ldrh	r3, [r3, #0]
 80221f6:	68ba      	ldr	r2, [r7, #8]
 80221f8:	68f8      	ldr	r0, [r7, #12]
 80221fa:	2100      	movs	r1, #0
 80221fc:	f000 fd41 	bl	8022c82 <USBD_LL_Transmit>

  return USBD_OK;
 8022200:	2300      	movs	r3, #0
}
 8022202:	0018      	movs	r0, r3
 8022204:	46bd      	mov	sp, r7
 8022206:	b004      	add	sp, #16
 8022208:	bd80      	pop	{r7, pc}

0802220a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 802220a:	b580      	push	{r7, lr}
 802220c:	b084      	sub	sp, #16
 802220e:	af00      	add	r7, sp, #0
 8022210:	60f8      	str	r0, [r7, #12]
 8022212:	60b9      	str	r1, [r7, #8]
 8022214:	1dbb      	adds	r3, r7, #6
 8022216:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022218:	1dbb      	adds	r3, r7, #6
 802221a:	881b      	ldrh	r3, [r3, #0]
 802221c:	68ba      	ldr	r2, [r7, #8]
 802221e:	68f8      	ldr	r0, [r7, #12]
 8022220:	2100      	movs	r1, #0
 8022222:	f000 fd2e 	bl	8022c82 <USBD_LL_Transmit>

  return USBD_OK;
 8022226:	2300      	movs	r3, #0
}
 8022228:	0018      	movs	r0, r3
 802222a:	46bd      	mov	sp, r7
 802222c:	b004      	add	sp, #16
 802222e:	bd80      	pop	{r7, pc}

08022230 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8022230:	b580      	push	{r7, lr}
 8022232:	b084      	sub	sp, #16
 8022234:	af00      	add	r7, sp, #0
 8022236:	60f8      	str	r0, [r7, #12]
 8022238:	60b9      	str	r1, [r7, #8]
 802223a:	1dbb      	adds	r3, r7, #6
 802223c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 802223e:	68fa      	ldr	r2, [r7, #12]
 8022240:	23a5      	movs	r3, #165	@ 0xa5
 8022242:	009b      	lsls	r3, r3, #2
 8022244:	2103      	movs	r1, #3
 8022246:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8022248:	1dbb      	adds	r3, r7, #6
 802224a:	8819      	ldrh	r1, [r3, #0]
 802224c:	68fa      	ldr	r2, [r7, #12]
 802224e:	23ae      	movs	r3, #174	@ 0xae
 8022250:	005b      	lsls	r3, r3, #1
 8022252:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8022254:	1dbb      	adds	r3, r7, #6
 8022256:	8819      	ldrh	r1, [r3, #0]
 8022258:	68fa      	ldr	r2, [r7, #12]
 802225a:	23b0      	movs	r3, #176	@ 0xb0
 802225c:	005b      	lsls	r3, r3, #1
 802225e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022260:	1dbb      	adds	r3, r7, #6
 8022262:	881b      	ldrh	r3, [r3, #0]
 8022264:	68ba      	ldr	r2, [r7, #8]
 8022266:	68f8      	ldr	r0, [r7, #12]
 8022268:	2100      	movs	r1, #0
 802226a:	f000 fd41 	bl	8022cf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802226e:	2300      	movs	r3, #0
}
 8022270:	0018      	movs	r0, r3
 8022272:	46bd      	mov	sp, r7
 8022274:	b004      	add	sp, #16
 8022276:	bd80      	pop	{r7, pc}

08022278 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8022278:	b580      	push	{r7, lr}
 802227a:	b084      	sub	sp, #16
 802227c:	af00      	add	r7, sp, #0
 802227e:	60f8      	str	r0, [r7, #12]
 8022280:	60b9      	str	r1, [r7, #8]
 8022282:	1dbb      	adds	r3, r7, #6
 8022284:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022286:	1dbb      	adds	r3, r7, #6
 8022288:	881b      	ldrh	r3, [r3, #0]
 802228a:	68ba      	ldr	r2, [r7, #8]
 802228c:	68f8      	ldr	r0, [r7, #12]
 802228e:	2100      	movs	r1, #0
 8022290:	f000 fd2e 	bl	8022cf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022294:	2300      	movs	r3, #0
}
 8022296:	0018      	movs	r0, r3
 8022298:	46bd      	mov	sp, r7
 802229a:	b004      	add	sp, #16
 802229c:	bd80      	pop	{r7, pc}

0802229e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 802229e:	b580      	push	{r7, lr}
 80222a0:	b082      	sub	sp, #8
 80222a2:	af00      	add	r7, sp, #0
 80222a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80222a6:	687a      	ldr	r2, [r7, #4]
 80222a8:	23a5      	movs	r3, #165	@ 0xa5
 80222aa:	009b      	lsls	r3, r3, #2
 80222ac:	2104      	movs	r1, #4
 80222ae:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80222b0:	6878      	ldr	r0, [r7, #4]
 80222b2:	2300      	movs	r3, #0
 80222b4:	2200      	movs	r2, #0
 80222b6:	2100      	movs	r1, #0
 80222b8:	f000 fce3 	bl	8022c82 <USBD_LL_Transmit>

  return USBD_OK;
 80222bc:	2300      	movs	r3, #0
}
 80222be:	0018      	movs	r0, r3
 80222c0:	46bd      	mov	sp, r7
 80222c2:	b002      	add	sp, #8
 80222c4:	bd80      	pop	{r7, pc}

080222c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80222c6:	b580      	push	{r7, lr}
 80222c8:	b082      	sub	sp, #8
 80222ca:	af00      	add	r7, sp, #0
 80222cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80222ce:	687a      	ldr	r2, [r7, #4]
 80222d0:	23a5      	movs	r3, #165	@ 0xa5
 80222d2:	009b      	lsls	r3, r3, #2
 80222d4:	2105      	movs	r1, #5
 80222d6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80222d8:	6878      	ldr	r0, [r7, #4]
 80222da:	2300      	movs	r3, #0
 80222dc:	2200      	movs	r2, #0
 80222de:	2100      	movs	r1, #0
 80222e0:	f000 fd06 	bl	8022cf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80222e4:	2300      	movs	r3, #0
}
 80222e6:	0018      	movs	r0, r3
 80222e8:	46bd      	mov	sp, r7
 80222ea:	b002      	add	sp, #8
 80222ec:	bd80      	pop	{r7, pc}
	...

080222f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80222f0:	b580      	push	{r7, lr}
 80222f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80222f4:	4914      	ldr	r1, [pc, #80]	@ (8022348 <MX_USB_DEVICE_Init+0x58>)
 80222f6:	4b15      	ldr	r3, [pc, #84]	@ (802234c <MX_USB_DEVICE_Init+0x5c>)
 80222f8:	2200      	movs	r2, #0
 80222fa:	0018      	movs	r0, r3
 80222fc:	f7fe fdec 	bl	8020ed8 <USBD_Init>
 8022300:	1e03      	subs	r3, r0, #0
 8022302:	d001      	beq.n	8022308 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8022304:	f7ea fb9a 	bl	800ca3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8022308:	4a11      	ldr	r2, [pc, #68]	@ (8022350 <MX_USB_DEVICE_Init+0x60>)
 802230a:	4b10      	ldr	r3, [pc, #64]	@ (802234c <MX_USB_DEVICE_Init+0x5c>)
 802230c:	0011      	movs	r1, r2
 802230e:	0018      	movs	r0, r3
 8022310:	f7fe fe13 	bl	8020f3a <USBD_RegisterClass>
 8022314:	1e03      	subs	r3, r0, #0
 8022316:	d001      	beq.n	802231c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8022318:	f7ea fb90 	bl	800ca3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 802231c:	4a0d      	ldr	r2, [pc, #52]	@ (8022354 <MX_USB_DEVICE_Init+0x64>)
 802231e:	4b0b      	ldr	r3, [pc, #44]	@ (802234c <MX_USB_DEVICE_Init+0x5c>)
 8022320:	0011      	movs	r1, r2
 8022322:	0018      	movs	r0, r3
 8022324:	f7fe fd28 	bl	8020d78 <USBD_CDC_RegisterInterface>
 8022328:	1e03      	subs	r3, r0, #0
 802232a:	d001      	beq.n	8022330 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 802232c:	f7ea fb86 	bl	800ca3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022330:	4b06      	ldr	r3, [pc, #24]	@ (802234c <MX_USB_DEVICE_Init+0x5c>)
 8022332:	0018      	movs	r0, r3
 8022334:	f7fe fe21 	bl	8020f7a <USBD_Start>
 8022338:	1e03      	subs	r3, r0, #0
 802233a:	d001      	beq.n	8022340 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 802233c:	f7ea fb7e 	bl	800ca3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022340:	46c0      	nop			@ (mov r8, r8)
 8022342:	46bd      	mov	sp, r7
 8022344:	bd80      	pop	{r7, pc}
 8022346:	46c0      	nop			@ (mov r8, r8)
 8022348:	20000218 	.word	0x20000218
 802234c:	20002248 	.word	0x20002248
 8022350:	20000104 	.word	0x20000104
 8022354:	20000208 	.word	0x20000208

08022358 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8022358:	b580      	push	{r7, lr}
 802235a:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 802235c:	4907      	ldr	r1, [pc, #28]	@ (802237c <CDC_Init_FS+0x24>)
 802235e:	4b08      	ldr	r3, [pc, #32]	@ (8022380 <CDC_Init_FS+0x28>)
 8022360:	2200      	movs	r2, #0
 8022362:	0018      	movs	r0, r3
 8022364:	f7fe fd23 	bl	8020dae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8022368:	4a06      	ldr	r2, [pc, #24]	@ (8022384 <CDC_Init_FS+0x2c>)
 802236a:	4b05      	ldr	r3, [pc, #20]	@ (8022380 <CDC_Init_FS+0x28>)
 802236c:	0011      	movs	r1, r2
 802236e:	0018      	movs	r0, r3
 8022370:	f7fe fd39 	bl	8020de6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8022374:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022376:	0018      	movs	r0, r3
 8022378:	46bd      	mov	sp, r7
 802237a:	bd80      	pop	{r7, pc}
 802237c:	200029cc 	.word	0x200029cc
 8022380:	20002248 	.word	0x20002248
 8022384:	200025cc 	.word	0x200025cc

08022388 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8022388:	b580      	push	{r7, lr}
 802238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 802238c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802238e:	0018      	movs	r0, r3
 8022390:	46bd      	mov	sp, r7
 8022392:	bd80      	pop	{r7, pc}

08022394 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8022394:	b580      	push	{r7, lr}
 8022396:	b082      	sub	sp, #8
 8022398:	af00      	add	r7, sp, #0
 802239a:	6039      	str	r1, [r7, #0]
 802239c:	0011      	movs	r1, r2
 802239e:	1dfb      	adds	r3, r7, #7
 80223a0:	1c02      	adds	r2, r0, #0
 80223a2:	701a      	strb	r2, [r3, #0]
 80223a4:	1d3b      	adds	r3, r7, #4
 80223a6:	1c0a      	adds	r2, r1, #0
 80223a8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80223aa:	1dfb      	adds	r3, r7, #7
 80223ac:	781b      	ldrb	r3, [r3, #0]
 80223ae:	2b23      	cmp	r3, #35	@ 0x23
 80223b0:	d804      	bhi.n	80223bc <CDC_Control_FS+0x28>
 80223b2:	009a      	lsls	r2, r3, #2
 80223b4:	4b04      	ldr	r3, [pc, #16]	@ (80223c8 <CDC_Control_FS+0x34>)
 80223b6:	18d3      	adds	r3, r2, r3
 80223b8:	681b      	ldr	r3, [r3, #0]
 80223ba:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80223bc:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80223be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80223c0:	0018      	movs	r0, r3
 80223c2:	46bd      	mov	sp, r7
 80223c4:	b002      	add	sp, #8
 80223c6:	bd80      	pop	{r7, pc}
 80223c8:	0802df44 	.word	0x0802df44

080223cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80223cc:	b580      	push	{r7, lr}
 80223ce:	b082      	sub	sp, #8
 80223d0:	af00      	add	r7, sp, #0
 80223d2:	6078      	str	r0, [r7, #4]
 80223d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 80223d6:	4b12      	ldr	r3, [pc, #72]	@ (8022420 <CDC_Receive_FS+0x54>)
 80223d8:	781b      	ldrb	r3, [r3, #0]
 80223da:	2b00      	cmp	r3, #0
 80223dc:	d013      	beq.n	8022406 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 80223de:	683b      	ldr	r3, [r7, #0]
 80223e0:	681b      	ldr	r3, [r3, #0]
 80223e2:	b29a      	uxth	r2, r3
 80223e4:	2301      	movs	r3, #1
 80223e6:	425b      	negs	r3, r3
 80223e8:	6879      	ldr	r1, [r7, #4]
 80223ea:	480e      	ldr	r0, [pc, #56]	@ (8022424 <CDC_Receive_FS+0x58>)
 80223ec:	f7fa fa44 	bl	801c878 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80223f0:	687a      	ldr	r2, [r7, #4]
 80223f2:	4b0d      	ldr	r3, [pc, #52]	@ (8022428 <CDC_Receive_FS+0x5c>)
 80223f4:	0011      	movs	r1, r2
 80223f6:	0018      	movs	r0, r3
 80223f8:	f7fe fcf5 	bl	8020de6 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80223fc:	4b0a      	ldr	r3, [pc, #40]	@ (8022428 <CDC_Receive_FS+0x5c>)
 80223fe:	0018      	movs	r0, r3
 8022400:	f7fe fd3c 	bl	8020e7c <USBD_CDC_ReceivePacket>
 8022404:	e006      	b.n	8022414 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 8022406:	683b      	ldr	r3, [r7, #0]
 8022408:	681a      	ldr	r2, [r3, #0]
 802240a:	4b08      	ldr	r3, [pc, #32]	@ (802242c <CDC_Receive_FS+0x60>)
 802240c:	681b      	ldr	r3, [r3, #0]
 802240e:	18d2      	adds	r2, r2, r3
 8022410:	4b06      	ldr	r3, [pc, #24]	@ (802242c <CDC_Receive_FS+0x60>)
 8022412:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8022414:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8022416:	0018      	movs	r0, r3
 8022418:	46bd      	mov	sp, r7
 802241a:	b002      	add	sp, #8
 802241c:	bd80      	pop	{r7, pc}
 802241e:	46c0      	nop			@ (mov r8, r8)
 8022420:	2000250c 	.word	0x2000250c
 8022424:	20002510 	.word	0x20002510
 8022428:	20002248 	.word	0x20002248
 802242c:	200025c8 	.word	0x200025c8

08022430 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8022430:	b5b0      	push	{r4, r5, r7, lr}
 8022432:	b084      	sub	sp, #16
 8022434:	af00      	add	r7, sp, #0
 8022436:	6078      	str	r0, [r7, #4]
 8022438:	000a      	movs	r2, r1
 802243a:	1cbb      	adds	r3, r7, #2
 802243c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 802243e:	230f      	movs	r3, #15
 8022440:	18fb      	adds	r3, r7, r3
 8022442:	2200      	movs	r2, #0
 8022444:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8022446:	4a11      	ldr	r2, [pc, #68]	@ (802248c <CDC_Transmit_FS+0x5c>)
 8022448:	23ae      	movs	r3, #174	@ 0xae
 802244a:	009b      	lsls	r3, r3, #2
 802244c:	58d3      	ldr	r3, [r2, r3]
 802244e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8022450:	68ba      	ldr	r2, [r7, #8]
 8022452:	2385      	movs	r3, #133	@ 0x85
 8022454:	009b      	lsls	r3, r3, #2
 8022456:	58d3      	ldr	r3, [r2, r3]
 8022458:	2b00      	cmp	r3, #0
 802245a:	d001      	beq.n	8022460 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 802245c:	2301      	movs	r3, #1
 802245e:	e010      	b.n	8022482 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8022460:	1cbb      	adds	r3, r7, #2
 8022462:	881a      	ldrh	r2, [r3, #0]
 8022464:	6879      	ldr	r1, [r7, #4]
 8022466:	4b09      	ldr	r3, [pc, #36]	@ (802248c <CDC_Transmit_FS+0x5c>)
 8022468:	0018      	movs	r0, r3
 802246a:	f7fe fca0 	bl	8020dae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802246e:	250f      	movs	r5, #15
 8022470:	197c      	adds	r4, r7, r5
 8022472:	4b06      	ldr	r3, [pc, #24]	@ (802248c <CDC_Transmit_FS+0x5c>)
 8022474:	0018      	movs	r0, r3
 8022476:	f7fe fcca 	bl	8020e0e <USBD_CDC_TransmitPacket>
 802247a:	0003      	movs	r3, r0
 802247c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 802247e:	197b      	adds	r3, r7, r5
 8022480:	781b      	ldrb	r3, [r3, #0]
}
 8022482:	0018      	movs	r0, r3
 8022484:	46bd      	mov	sp, r7
 8022486:	b004      	add	sp, #16
 8022488:	bdb0      	pop	{r4, r5, r7, pc}
 802248a:	46c0      	nop			@ (mov r8, r8)
 802248c:	20002248 	.word	0x20002248

08022490 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8022490:	b580      	push	{r7, lr}
 8022492:	af00      	add	r7, sp, #0
  ESPProg = true;
 8022494:	4b02      	ldr	r3, [pc, #8]	@ (80224a0 <EnableESPProg+0x10>)
 8022496:	2201      	movs	r2, #1
 8022498:	701a      	strb	r2, [r3, #0]
}
 802249a:	46c0      	nop			@ (mov r8, r8)
 802249c:	46bd      	mov	sp, r7
 802249e:	bd80      	pop	{r7, pc}
 80224a0:	2000250c 	.word	0x2000250c

080224a4 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 80224a4:	b580      	push	{r7, lr}
 80224a6:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 80224a8:	4b01      	ldr	r3, [pc, #4]	@ (80224b0 <GetUsbRxPointer+0xc>)
}
 80224aa:	0018      	movs	r0, r3
 80224ac:	46bd      	mov	sp, r7
 80224ae:	bd80      	pop	{r7, pc}
 80224b0:	200025cc 	.word	0x200025cc

080224b4 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 80224b4:	b580      	push	{r7, lr}
 80224b6:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 80224b8:	4b07      	ldr	r3, [pc, #28]	@ (80224d8 <ResetUsbRxDataSize+0x24>)
 80224ba:	2200      	movs	r2, #0
 80224bc:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80224be:	4a07      	ldr	r2, [pc, #28]	@ (80224dc <ResetUsbRxDataSize+0x28>)
 80224c0:	4b07      	ldr	r3, [pc, #28]	@ (80224e0 <ResetUsbRxDataSize+0x2c>)
 80224c2:	0011      	movs	r1, r2
 80224c4:	0018      	movs	r0, r3
 80224c6:	f7fe fc8e 	bl	8020de6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80224ca:	4b05      	ldr	r3, [pc, #20]	@ (80224e0 <ResetUsbRxDataSize+0x2c>)
 80224cc:	0018      	movs	r0, r3
 80224ce:	f7fe fcd5 	bl	8020e7c <USBD_CDC_ReceivePacket>
}
 80224d2:	46c0      	nop			@ (mov r8, r8)
 80224d4:	46bd      	mov	sp, r7
 80224d6:	bd80      	pop	{r7, pc}
 80224d8:	200025c8 	.word	0x200025c8
 80224dc:	200025cc 	.word	0x200025cc
 80224e0:	20002248 	.word	0x20002248

080224e4 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 80224e4:	b580      	push	{r7, lr}
 80224e6:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 80224e8:	4b02      	ldr	r3, [pc, #8]	@ (80224f4 <GetUsbRxDataSize+0x10>)
 80224ea:	681b      	ldr	r3, [r3, #0]
}
 80224ec:	0018      	movs	r0, r3
 80224ee:	46bd      	mov	sp, r7
 80224f0:	bd80      	pop	{r7, pc}
 80224f2:	46c0      	nop			@ (mov r8, r8)
 80224f4:	200025c8 	.word	0x200025c8

080224f8 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 80224f8:	b580      	push	{r7, lr}
 80224fa:	b082      	sub	sp, #8
 80224fc:	af00      	add	r7, sp, #0
 80224fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8022500:	687a      	ldr	r2, [r7, #4]
 8022502:	4b07      	ldr	r3, [pc, #28]	@ (8022520 <GetUsbRxNextChunk+0x28>)
 8022504:	18d2      	adds	r2, r2, r3
 8022506:	4b07      	ldr	r3, [pc, #28]	@ (8022524 <GetUsbRxNextChunk+0x2c>)
 8022508:	0011      	movs	r1, r2
 802250a:	0018      	movs	r0, r3
 802250c:	f7fe fc6b 	bl	8020de6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022510:	4b04      	ldr	r3, [pc, #16]	@ (8022524 <GetUsbRxNextChunk+0x2c>)
 8022512:	0018      	movs	r0, r3
 8022514:	f7fe fcb2 	bl	8020e7c <USBD_CDC_ReceivePacket>
}
 8022518:	46c0      	nop			@ (mov r8, r8)
 802251a:	46bd      	mov	sp, r7
 802251c:	b002      	add	sp, #8
 802251e:	bd80      	pop	{r7, pc}
 8022520:	200025cc 	.word	0x200025cc
 8022524:	20002248 	.word	0x20002248

08022528 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022528:	b580      	push	{r7, lr}
 802252a:	b082      	sub	sp, #8
 802252c:	af00      	add	r7, sp, #0
 802252e:	0002      	movs	r2, r0
 8022530:	6039      	str	r1, [r7, #0]
 8022532:	1dfb      	adds	r3, r7, #7
 8022534:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8022536:	683b      	ldr	r3, [r7, #0]
 8022538:	2212      	movs	r2, #18
 802253a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802253c:	4b02      	ldr	r3, [pc, #8]	@ (8022548 <USBD_FS_DeviceDescriptor+0x20>)
}
 802253e:	0018      	movs	r0, r3
 8022540:	46bd      	mov	sp, r7
 8022542:	b002      	add	sp, #8
 8022544:	bd80      	pop	{r7, pc}
 8022546:	46c0      	nop			@ (mov r8, r8)
 8022548:	20000234 	.word	0x20000234

0802254c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802254c:	b580      	push	{r7, lr}
 802254e:	b082      	sub	sp, #8
 8022550:	af00      	add	r7, sp, #0
 8022552:	0002      	movs	r2, r0
 8022554:	6039      	str	r1, [r7, #0]
 8022556:	1dfb      	adds	r3, r7, #7
 8022558:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802255a:	683b      	ldr	r3, [r7, #0]
 802255c:	2204      	movs	r2, #4
 802255e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8022560:	4b02      	ldr	r3, [pc, #8]	@ (802256c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8022562:	0018      	movs	r0, r3
 8022564:	46bd      	mov	sp, r7
 8022566:	b002      	add	sp, #8
 8022568:	bd80      	pop	{r7, pc}
 802256a:	46c0      	nop			@ (mov r8, r8)
 802256c:	20000248 	.word	0x20000248

08022570 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022570:	b580      	push	{r7, lr}
 8022572:	b082      	sub	sp, #8
 8022574:	af00      	add	r7, sp, #0
 8022576:	0002      	movs	r2, r0
 8022578:	6039      	str	r1, [r7, #0]
 802257a:	1dfb      	adds	r3, r7, #7
 802257c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802257e:	1dfb      	adds	r3, r7, #7
 8022580:	781b      	ldrb	r3, [r3, #0]
 8022582:	2b00      	cmp	r3, #0
 8022584:	d106      	bne.n	8022594 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022586:	683a      	ldr	r2, [r7, #0]
 8022588:	4908      	ldr	r1, [pc, #32]	@ (80225ac <USBD_FS_ProductStrDescriptor+0x3c>)
 802258a:	4b09      	ldr	r3, [pc, #36]	@ (80225b0 <USBD_FS_ProductStrDescriptor+0x40>)
 802258c:	0018      	movs	r0, r3
 802258e:	f7ff fdb1 	bl	80220f4 <USBD_GetString>
 8022592:	e005      	b.n	80225a0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022594:	683a      	ldr	r2, [r7, #0]
 8022596:	4905      	ldr	r1, [pc, #20]	@ (80225ac <USBD_FS_ProductStrDescriptor+0x3c>)
 8022598:	4b05      	ldr	r3, [pc, #20]	@ (80225b0 <USBD_FS_ProductStrDescriptor+0x40>)
 802259a:	0018      	movs	r0, r3
 802259c:	f7ff fdaa 	bl	80220f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80225a0:	4b02      	ldr	r3, [pc, #8]	@ (80225ac <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80225a2:	0018      	movs	r0, r3
 80225a4:	46bd      	mov	sp, r7
 80225a6:	b002      	add	sp, #8
 80225a8:	bd80      	pop	{r7, pc}
 80225aa:	46c0      	nop			@ (mov r8, r8)
 80225ac:	20002dcc 	.word	0x20002dcc
 80225b0:	0802d900 	.word	0x0802d900

080225b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80225b4:	b580      	push	{r7, lr}
 80225b6:	b082      	sub	sp, #8
 80225b8:	af00      	add	r7, sp, #0
 80225ba:	0002      	movs	r2, r0
 80225bc:	6039      	str	r1, [r7, #0]
 80225be:	1dfb      	adds	r3, r7, #7
 80225c0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80225c2:	683a      	ldr	r2, [r7, #0]
 80225c4:	4904      	ldr	r1, [pc, #16]	@ (80225d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80225c6:	4b05      	ldr	r3, [pc, #20]	@ (80225dc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80225c8:	0018      	movs	r0, r3
 80225ca:	f7ff fd93 	bl	80220f4 <USBD_GetString>
  return USBD_StrDesc;
 80225ce:	4b02      	ldr	r3, [pc, #8]	@ (80225d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80225d0:	0018      	movs	r0, r3
 80225d2:	46bd      	mov	sp, r7
 80225d4:	b002      	add	sp, #8
 80225d6:	bd80      	pop	{r7, pc}
 80225d8:	20002dcc 	.word	0x20002dcc
 80225dc:	0802d918 	.word	0x0802d918

080225e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80225e0:	b580      	push	{r7, lr}
 80225e2:	b082      	sub	sp, #8
 80225e4:	af00      	add	r7, sp, #0
 80225e6:	0002      	movs	r2, r0
 80225e8:	6039      	str	r1, [r7, #0]
 80225ea:	1dfb      	adds	r3, r7, #7
 80225ec:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80225ee:	683b      	ldr	r3, [r7, #0]
 80225f0:	221a      	movs	r2, #26
 80225f2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80225f4:	f000 f84c 	bl	8022690 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80225f8:	4b02      	ldr	r3, [pc, #8]	@ (8022604 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80225fa:	0018      	movs	r0, r3
 80225fc:	46bd      	mov	sp, r7
 80225fe:	b002      	add	sp, #8
 8022600:	bd80      	pop	{r7, pc}
 8022602:	46c0      	nop			@ (mov r8, r8)
 8022604:	2000024c 	.word	0x2000024c

08022608 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022608:	b580      	push	{r7, lr}
 802260a:	b082      	sub	sp, #8
 802260c:	af00      	add	r7, sp, #0
 802260e:	0002      	movs	r2, r0
 8022610:	6039      	str	r1, [r7, #0]
 8022612:	1dfb      	adds	r3, r7, #7
 8022614:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8022616:	1dfb      	adds	r3, r7, #7
 8022618:	781b      	ldrb	r3, [r3, #0]
 802261a:	2b00      	cmp	r3, #0
 802261c:	d106      	bne.n	802262c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802261e:	683a      	ldr	r2, [r7, #0]
 8022620:	4908      	ldr	r1, [pc, #32]	@ (8022644 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8022622:	4b09      	ldr	r3, [pc, #36]	@ (8022648 <USBD_FS_ConfigStrDescriptor+0x40>)
 8022624:	0018      	movs	r0, r3
 8022626:	f7ff fd65 	bl	80220f4 <USBD_GetString>
 802262a:	e005      	b.n	8022638 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802262c:	683a      	ldr	r2, [r7, #0]
 802262e:	4905      	ldr	r1, [pc, #20]	@ (8022644 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8022630:	4b05      	ldr	r3, [pc, #20]	@ (8022648 <USBD_FS_ConfigStrDescriptor+0x40>)
 8022632:	0018      	movs	r0, r3
 8022634:	f7ff fd5e 	bl	80220f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022638:	4b02      	ldr	r3, [pc, #8]	@ (8022644 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 802263a:	0018      	movs	r0, r3
 802263c:	46bd      	mov	sp, r7
 802263e:	b002      	add	sp, #8
 8022640:	bd80      	pop	{r7, pc}
 8022642:	46c0      	nop			@ (mov r8, r8)
 8022644:	20002dcc 	.word	0x20002dcc
 8022648:	0802d92c 	.word	0x0802d92c

0802264c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802264c:	b580      	push	{r7, lr}
 802264e:	b082      	sub	sp, #8
 8022650:	af00      	add	r7, sp, #0
 8022652:	0002      	movs	r2, r0
 8022654:	6039      	str	r1, [r7, #0]
 8022656:	1dfb      	adds	r3, r7, #7
 8022658:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802265a:	1dfb      	adds	r3, r7, #7
 802265c:	781b      	ldrb	r3, [r3, #0]
 802265e:	2b00      	cmp	r3, #0
 8022660:	d106      	bne.n	8022670 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022662:	683a      	ldr	r2, [r7, #0]
 8022664:	4908      	ldr	r1, [pc, #32]	@ (8022688 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8022666:	4b09      	ldr	r3, [pc, #36]	@ (802268c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8022668:	0018      	movs	r0, r3
 802266a:	f7ff fd43 	bl	80220f4 <USBD_GetString>
 802266e:	e005      	b.n	802267c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022670:	683a      	ldr	r2, [r7, #0]
 8022672:	4905      	ldr	r1, [pc, #20]	@ (8022688 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8022674:	4b05      	ldr	r3, [pc, #20]	@ (802268c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8022676:	0018      	movs	r0, r3
 8022678:	f7ff fd3c 	bl	80220f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 802267c:	4b02      	ldr	r3, [pc, #8]	@ (8022688 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 802267e:	0018      	movs	r0, r3
 8022680:	46bd      	mov	sp, r7
 8022682:	b002      	add	sp, #8
 8022684:	bd80      	pop	{r7, pc}
 8022686:	46c0      	nop			@ (mov r8, r8)
 8022688:	20002dcc 	.word	0x20002dcc
 802268c:	0802d938 	.word	0x0802d938

08022690 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8022690:	b580      	push	{r7, lr}
 8022692:	b084      	sub	sp, #16
 8022694:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8022696:	4b10      	ldr	r3, [pc, #64]	@ (80226d8 <Get_SerialNum+0x48>)
 8022698:	681b      	ldr	r3, [r3, #0]
 802269a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 802269c:	4b0f      	ldr	r3, [pc, #60]	@ (80226dc <Get_SerialNum+0x4c>)
 802269e:	681b      	ldr	r3, [r3, #0]
 80226a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80226a2:	4b0f      	ldr	r3, [pc, #60]	@ (80226e0 <Get_SerialNum+0x50>)
 80226a4:	681b      	ldr	r3, [r3, #0]
 80226a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80226a8:	68fa      	ldr	r2, [r7, #12]
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	18d3      	adds	r3, r2, r3
 80226ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80226b0:	68fb      	ldr	r3, [r7, #12]
 80226b2:	2b00      	cmp	r3, #0
 80226b4:	d00b      	beq.n	80226ce <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80226b6:	490b      	ldr	r1, [pc, #44]	@ (80226e4 <Get_SerialNum+0x54>)
 80226b8:	68fb      	ldr	r3, [r7, #12]
 80226ba:	2208      	movs	r2, #8
 80226bc:	0018      	movs	r0, r3
 80226be:	f000 f815 	bl	80226ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80226c2:	4909      	ldr	r1, [pc, #36]	@ (80226e8 <Get_SerialNum+0x58>)
 80226c4:	68bb      	ldr	r3, [r7, #8]
 80226c6:	2204      	movs	r2, #4
 80226c8:	0018      	movs	r0, r3
 80226ca:	f000 f80f 	bl	80226ec <IntToUnicode>
  }
}
 80226ce:	46c0      	nop			@ (mov r8, r8)
 80226d0:	46bd      	mov	sp, r7
 80226d2:	b004      	add	sp, #16
 80226d4:	bd80      	pop	{r7, pc}
 80226d6:	46c0      	nop			@ (mov r8, r8)
 80226d8:	1ff80050 	.word	0x1ff80050
 80226dc:	1ff80054 	.word	0x1ff80054
 80226e0:	1ff80058 	.word	0x1ff80058
 80226e4:	2000024e 	.word	0x2000024e
 80226e8:	2000025e 	.word	0x2000025e

080226ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80226ec:	b580      	push	{r7, lr}
 80226ee:	b086      	sub	sp, #24
 80226f0:	af00      	add	r7, sp, #0
 80226f2:	60f8      	str	r0, [r7, #12]
 80226f4:	60b9      	str	r1, [r7, #8]
 80226f6:	1dfb      	adds	r3, r7, #7
 80226f8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80226fa:	2117      	movs	r1, #23
 80226fc:	187b      	adds	r3, r7, r1
 80226fe:	2200      	movs	r2, #0
 8022700:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8022702:	187b      	adds	r3, r7, r1
 8022704:	2200      	movs	r2, #0
 8022706:	701a      	strb	r2, [r3, #0]
 8022708:	e02f      	b.n	802276a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 802270a:	68fb      	ldr	r3, [r7, #12]
 802270c:	0f1b      	lsrs	r3, r3, #28
 802270e:	2b09      	cmp	r3, #9
 8022710:	d80d      	bhi.n	802272e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8022712:	68fb      	ldr	r3, [r7, #12]
 8022714:	0f1b      	lsrs	r3, r3, #28
 8022716:	b2da      	uxtb	r2, r3
 8022718:	2317      	movs	r3, #23
 802271a:	18fb      	adds	r3, r7, r3
 802271c:	781b      	ldrb	r3, [r3, #0]
 802271e:	005b      	lsls	r3, r3, #1
 8022720:	0019      	movs	r1, r3
 8022722:	68bb      	ldr	r3, [r7, #8]
 8022724:	185b      	adds	r3, r3, r1
 8022726:	3230      	adds	r2, #48	@ 0x30
 8022728:	b2d2      	uxtb	r2, r2
 802272a:	701a      	strb	r2, [r3, #0]
 802272c:	e00c      	b.n	8022748 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802272e:	68fb      	ldr	r3, [r7, #12]
 8022730:	0f1b      	lsrs	r3, r3, #28
 8022732:	b2da      	uxtb	r2, r3
 8022734:	2317      	movs	r3, #23
 8022736:	18fb      	adds	r3, r7, r3
 8022738:	781b      	ldrb	r3, [r3, #0]
 802273a:	005b      	lsls	r3, r3, #1
 802273c:	0019      	movs	r1, r3
 802273e:	68bb      	ldr	r3, [r7, #8]
 8022740:	185b      	adds	r3, r3, r1
 8022742:	3237      	adds	r2, #55	@ 0x37
 8022744:	b2d2      	uxtb	r2, r2
 8022746:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8022748:	68fb      	ldr	r3, [r7, #12]
 802274a:	011b      	lsls	r3, r3, #4
 802274c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 802274e:	2117      	movs	r1, #23
 8022750:	187b      	adds	r3, r7, r1
 8022752:	781b      	ldrb	r3, [r3, #0]
 8022754:	005b      	lsls	r3, r3, #1
 8022756:	3301      	adds	r3, #1
 8022758:	68ba      	ldr	r2, [r7, #8]
 802275a:	18d3      	adds	r3, r2, r3
 802275c:	2200      	movs	r2, #0
 802275e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8022760:	187b      	adds	r3, r7, r1
 8022762:	781a      	ldrb	r2, [r3, #0]
 8022764:	187b      	adds	r3, r7, r1
 8022766:	3201      	adds	r2, #1
 8022768:	701a      	strb	r2, [r3, #0]
 802276a:	2317      	movs	r3, #23
 802276c:	18fa      	adds	r2, r7, r3
 802276e:	1dfb      	adds	r3, r7, #7
 8022770:	7812      	ldrb	r2, [r2, #0]
 8022772:	781b      	ldrb	r3, [r3, #0]
 8022774:	429a      	cmp	r2, r3
 8022776:	d3c8      	bcc.n	802270a <IntToUnicode+0x1e>
  }
}
 8022778:	46c0      	nop			@ (mov r8, r8)
 802277a:	46c0      	nop			@ (mov r8, r8)
 802277c:	46bd      	mov	sp, r7
 802277e:	b006      	add	sp, #24
 8022780:	bd80      	pop	{r7, pc}
	...

08022784 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8022784:	b580      	push	{r7, lr}
 8022786:	b082      	sub	sp, #8
 8022788:	af00      	add	r7, sp, #0
 802278a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 802278c:	687b      	ldr	r3, [r7, #4]
 802278e:	681b      	ldr	r3, [r3, #0]
 8022790:	4a0a      	ldr	r2, [pc, #40]	@ (80227bc <HAL_PCD_MspInit+0x38>)
 8022792:	4293      	cmp	r3, r2
 8022794:	d10e      	bne.n	80227b4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8022796:	4b0a      	ldr	r3, [pc, #40]	@ (80227c0 <HAL_PCD_MspInit+0x3c>)
 8022798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802279a:	4b09      	ldr	r3, [pc, #36]	@ (80227c0 <HAL_PCD_MspInit+0x3c>)
 802279c:	2180      	movs	r1, #128	@ 0x80
 802279e:	0409      	lsls	r1, r1, #16
 80227a0:	430a      	orrs	r2, r1
 80227a2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80227a4:	2200      	movs	r2, #0
 80227a6:	2100      	movs	r1, #0
 80227a8:	201f      	movs	r0, #31
 80227aa:	f7f1 ffb3 	bl	8014714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80227ae:	201f      	movs	r0, #31
 80227b0:	f7f1 ffc5 	bl	801473e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80227b4:	46c0      	nop			@ (mov r8, r8)
 80227b6:	46bd      	mov	sp, r7
 80227b8:	b002      	add	sp, #8
 80227ba:	bd80      	pop	{r7, pc}
 80227bc:	40005c00 	.word	0x40005c00
 80227c0:	40021000 	.word	0x40021000

080227c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80227c4:	b580      	push	{r7, lr}
 80227c6:	b082      	sub	sp, #8
 80227c8:	af00      	add	r7, sp, #0
 80227ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80227cc:	687a      	ldr	r2, [r7, #4]
 80227ce:	23bc      	movs	r3, #188	@ 0xbc
 80227d0:	009b      	lsls	r3, r3, #2
 80227d2:	58d2      	ldr	r2, [r2, r3]
 80227d4:	687b      	ldr	r3, [r7, #4]
 80227d6:	21ac      	movs	r1, #172	@ 0xac
 80227d8:	0089      	lsls	r1, r1, #2
 80227da:	468c      	mov	ip, r1
 80227dc:	4463      	add	r3, ip
 80227de:	0019      	movs	r1, r3
 80227e0:	0010      	movs	r0, r2
 80227e2:	f7fe fc1d 	bl	8021020 <USBD_LL_SetupStage>
}
 80227e6:	46c0      	nop			@ (mov r8, r8)
 80227e8:	46bd      	mov	sp, r7
 80227ea:	b002      	add	sp, #8
 80227ec:	bd80      	pop	{r7, pc}

080227ee <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80227ee:	b590      	push	{r4, r7, lr}
 80227f0:	b083      	sub	sp, #12
 80227f2:	af00      	add	r7, sp, #0
 80227f4:	6078      	str	r0, [r7, #4]
 80227f6:	000a      	movs	r2, r1
 80227f8:	1cfb      	adds	r3, r7, #3
 80227fa:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80227fc:	687a      	ldr	r2, [r7, #4]
 80227fe:	23bc      	movs	r3, #188	@ 0xbc
 8022800:	009b      	lsls	r3, r3, #2
 8022802:	58d4      	ldr	r4, [r2, r3]
 8022804:	1cfb      	adds	r3, r7, #3
 8022806:	781a      	ldrb	r2, [r3, #0]
 8022808:	6878      	ldr	r0, [r7, #4]
 802280a:	23be      	movs	r3, #190	@ 0xbe
 802280c:	0059      	lsls	r1, r3, #1
 802280e:	0013      	movs	r3, r2
 8022810:	009b      	lsls	r3, r3, #2
 8022812:	189b      	adds	r3, r3, r2
 8022814:	00db      	lsls	r3, r3, #3
 8022816:	18c3      	adds	r3, r0, r3
 8022818:	185b      	adds	r3, r3, r1
 802281a:	681a      	ldr	r2, [r3, #0]
 802281c:	1cfb      	adds	r3, r7, #3
 802281e:	781b      	ldrb	r3, [r3, #0]
 8022820:	0019      	movs	r1, r3
 8022822:	0020      	movs	r0, r4
 8022824:	f7fe fc5a 	bl	80210dc <USBD_LL_DataOutStage>
}
 8022828:	46c0      	nop			@ (mov r8, r8)
 802282a:	46bd      	mov	sp, r7
 802282c:	b003      	add	sp, #12
 802282e:	bd90      	pop	{r4, r7, pc}

08022830 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022830:	b580      	push	{r7, lr}
 8022832:	b082      	sub	sp, #8
 8022834:	af00      	add	r7, sp, #0
 8022836:	6078      	str	r0, [r7, #4]
 8022838:	000a      	movs	r2, r1
 802283a:	1cfb      	adds	r3, r7, #3
 802283c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802283e:	687a      	ldr	r2, [r7, #4]
 8022840:	23bc      	movs	r3, #188	@ 0xbc
 8022842:	009b      	lsls	r3, r3, #2
 8022844:	58d0      	ldr	r0, [r2, r3]
 8022846:	1cfb      	adds	r3, r7, #3
 8022848:	781a      	ldrb	r2, [r3, #0]
 802284a:	6879      	ldr	r1, [r7, #4]
 802284c:	0013      	movs	r3, r2
 802284e:	009b      	lsls	r3, r3, #2
 8022850:	189b      	adds	r3, r3, r2
 8022852:	00db      	lsls	r3, r3, #3
 8022854:	18cb      	adds	r3, r1, r3
 8022856:	333c      	adds	r3, #60	@ 0x3c
 8022858:	681a      	ldr	r2, [r3, #0]
 802285a:	1cfb      	adds	r3, r7, #3
 802285c:	781b      	ldrb	r3, [r3, #0]
 802285e:	0019      	movs	r1, r3
 8022860:	f7fe fcbe 	bl	80211e0 <USBD_LL_DataInStage>
}
 8022864:	46c0      	nop			@ (mov r8, r8)
 8022866:	46bd      	mov	sp, r7
 8022868:	b002      	add	sp, #8
 802286a:	bd80      	pop	{r7, pc}

0802286c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802286c:	b580      	push	{r7, lr}
 802286e:	b082      	sub	sp, #8
 8022870:	af00      	add	r7, sp, #0
 8022872:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8022874:	687a      	ldr	r2, [r7, #4]
 8022876:	23bc      	movs	r3, #188	@ 0xbc
 8022878:	009b      	lsls	r3, r3, #2
 802287a:	58d3      	ldr	r3, [r2, r3]
 802287c:	0018      	movs	r0, r3
 802287e:	f7fe fdf5 	bl	802146c <USBD_LL_SOF>
}
 8022882:	46c0      	nop			@ (mov r8, r8)
 8022884:	46bd      	mov	sp, r7
 8022886:	b002      	add	sp, #8
 8022888:	bd80      	pop	{r7, pc}

0802288a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802288a:	b580      	push	{r7, lr}
 802288c:	b084      	sub	sp, #16
 802288e:	af00      	add	r7, sp, #0
 8022890:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8022892:	230f      	movs	r3, #15
 8022894:	18fb      	adds	r3, r7, r3
 8022896:	2201      	movs	r2, #1
 8022898:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 802289a:	687b      	ldr	r3, [r7, #4]
 802289c:	689b      	ldr	r3, [r3, #8]
 802289e:	2b02      	cmp	r3, #2
 80228a0:	d001      	beq.n	80228a6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80228a2:	f7ea f8cb 	bl	800ca3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80228a6:	687a      	ldr	r2, [r7, #4]
 80228a8:	23bc      	movs	r3, #188	@ 0xbc
 80228aa:	009b      	lsls	r3, r3, #2
 80228ac:	58d2      	ldr	r2, [r2, r3]
 80228ae:	230f      	movs	r3, #15
 80228b0:	18fb      	adds	r3, r7, r3
 80228b2:	781b      	ldrb	r3, [r3, #0]
 80228b4:	0019      	movs	r1, r3
 80228b6:	0010      	movs	r0, r2
 80228b8:	f7fe fd97 	bl	80213ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80228bc:	687a      	ldr	r2, [r7, #4]
 80228be:	23bc      	movs	r3, #188	@ 0xbc
 80228c0:	009b      	lsls	r3, r3, #2
 80228c2:	58d3      	ldr	r3, [r2, r3]
 80228c4:	0018      	movs	r0, r3
 80228c6:	f7fe fd48 	bl	802135a <USBD_LL_Reset>
}
 80228ca:	46c0      	nop			@ (mov r8, r8)
 80228cc:	46bd      	mov	sp, r7
 80228ce:	b004      	add	sp, #16
 80228d0:	bd80      	pop	{r7, pc}
	...

080228d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80228d4:	b580      	push	{r7, lr}
 80228d6:	b082      	sub	sp, #8
 80228d8:	af00      	add	r7, sp, #0
 80228da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80228dc:	687a      	ldr	r2, [r7, #4]
 80228de:	23bc      	movs	r3, #188	@ 0xbc
 80228e0:	009b      	lsls	r3, r3, #2
 80228e2:	58d3      	ldr	r3, [r2, r3]
 80228e4:	0018      	movs	r0, r3
 80228e6:	f7fe fd91 	bl	802140c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80228ea:	687b      	ldr	r3, [r7, #4]
 80228ec:	699b      	ldr	r3, [r3, #24]
 80228ee:	2b00      	cmp	r3, #0
 80228f0:	d005      	beq.n	80228fe <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80228f2:	4b05      	ldr	r3, [pc, #20]	@ (8022908 <HAL_PCD_SuspendCallback+0x34>)
 80228f4:	691a      	ldr	r2, [r3, #16]
 80228f6:	4b04      	ldr	r3, [pc, #16]	@ (8022908 <HAL_PCD_SuspendCallback+0x34>)
 80228f8:	2106      	movs	r1, #6
 80228fa:	430a      	orrs	r2, r1
 80228fc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80228fe:	46c0      	nop			@ (mov r8, r8)
 8022900:	46bd      	mov	sp, r7
 8022902:	b002      	add	sp, #8
 8022904:	bd80      	pop	{r7, pc}
 8022906:	46c0      	nop			@ (mov r8, r8)
 8022908:	e000ed00 	.word	0xe000ed00

0802290c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802290c:	b580      	push	{r7, lr}
 802290e:	b082      	sub	sp, #8
 8022910:	af00      	add	r7, sp, #0
 8022912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8022914:	687b      	ldr	r3, [r7, #4]
 8022916:	699b      	ldr	r3, [r3, #24]
 8022918:	2b00      	cmp	r3, #0
 802291a:	d007      	beq.n	802292c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802291c:	4b09      	ldr	r3, [pc, #36]	@ (8022944 <HAL_PCD_ResumeCallback+0x38>)
 802291e:	691a      	ldr	r2, [r3, #16]
 8022920:	4b08      	ldr	r3, [pc, #32]	@ (8022944 <HAL_PCD_ResumeCallback+0x38>)
 8022922:	2106      	movs	r1, #6
 8022924:	438a      	bics	r2, r1
 8022926:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8022928:	f000 fa44 	bl	8022db4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 802292c:	687a      	ldr	r2, [r7, #4]
 802292e:	23bc      	movs	r3, #188	@ 0xbc
 8022930:	009b      	lsls	r3, r3, #2
 8022932:	58d3      	ldr	r3, [r2, r3]
 8022934:	0018      	movs	r0, r3
 8022936:	f7fe fd81 	bl	802143c <USBD_LL_Resume>
}
 802293a:	46c0      	nop			@ (mov r8, r8)
 802293c:	46bd      	mov	sp, r7
 802293e:	b002      	add	sp, #8
 8022940:	bd80      	pop	{r7, pc}
 8022942:	46c0      	nop			@ (mov r8, r8)
 8022944:	e000ed00 	.word	0xe000ed00

08022948 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8022948:	b580      	push	{r7, lr}
 802294a:	b082      	sub	sp, #8
 802294c:	af00      	add	r7, sp, #0
 802294e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8022950:	4a2d      	ldr	r2, [pc, #180]	@ (8022a08 <USBD_LL_Init+0xc0>)
 8022952:	23bc      	movs	r3, #188	@ 0xbc
 8022954:	009b      	lsls	r3, r3, #2
 8022956:	6879      	ldr	r1, [r7, #4]
 8022958:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 802295a:	687a      	ldr	r2, [r7, #4]
 802295c:	23b0      	movs	r3, #176	@ 0xb0
 802295e:	009b      	lsls	r3, r3, #2
 8022960:	4929      	ldr	r1, [pc, #164]	@ (8022a08 <USBD_LL_Init+0xc0>)
 8022962:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8022964:	4b28      	ldr	r3, [pc, #160]	@ (8022a08 <USBD_LL_Init+0xc0>)
 8022966:	4a29      	ldr	r2, [pc, #164]	@ (8022a0c <USBD_LL_Init+0xc4>)
 8022968:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 802296a:	4b27      	ldr	r3, [pc, #156]	@ (8022a08 <USBD_LL_Init+0xc0>)
 802296c:	2208      	movs	r2, #8
 802296e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8022970:	4b25      	ldr	r3, [pc, #148]	@ (8022a08 <USBD_LL_Init+0xc0>)
 8022972:	2202      	movs	r2, #2
 8022974:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8022976:	4b24      	ldr	r3, [pc, #144]	@ (8022a08 <USBD_LL_Init+0xc0>)
 8022978:	2202      	movs	r2, #2
 802297a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 802297c:	4b22      	ldr	r3, [pc, #136]	@ (8022a08 <USBD_LL_Init+0xc0>)
 802297e:	2200      	movs	r2, #0
 8022980:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8022982:	4b21      	ldr	r3, [pc, #132]	@ (8022a08 <USBD_LL_Init+0xc0>)
 8022984:	2200      	movs	r2, #0
 8022986:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8022988:	4b1f      	ldr	r3, [pc, #124]	@ (8022a08 <USBD_LL_Init+0xc0>)
 802298a:	2200      	movs	r2, #0
 802298c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 802298e:	4b1e      	ldr	r3, [pc, #120]	@ (8022a08 <USBD_LL_Init+0xc0>)
 8022990:	0018      	movs	r0, r3
 8022992:	f7f5 ff75 	bl	8018880 <HAL_PCD_Init>
 8022996:	1e03      	subs	r3, r0, #0
 8022998:	d001      	beq.n	802299e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 802299a:	f7ea f84f 	bl	800ca3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 802299e:	687a      	ldr	r2, [r7, #4]
 80229a0:	23b0      	movs	r3, #176	@ 0xb0
 80229a2:	009b      	lsls	r3, r3, #2
 80229a4:	58d0      	ldr	r0, [r2, r3]
 80229a6:	2318      	movs	r3, #24
 80229a8:	2200      	movs	r2, #0
 80229aa:	2100      	movs	r1, #0
 80229ac:	f7f7 fd36 	bl	801a41c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80229b0:	687a      	ldr	r2, [r7, #4]
 80229b2:	23b0      	movs	r3, #176	@ 0xb0
 80229b4:	009b      	lsls	r3, r3, #2
 80229b6:	58d0      	ldr	r0, [r2, r3]
 80229b8:	2358      	movs	r3, #88	@ 0x58
 80229ba:	2200      	movs	r2, #0
 80229bc:	2180      	movs	r1, #128	@ 0x80
 80229be:	f7f7 fd2d 	bl	801a41c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80229c2:	687a      	ldr	r2, [r7, #4]
 80229c4:	23b0      	movs	r3, #176	@ 0xb0
 80229c6:	009b      	lsls	r3, r3, #2
 80229c8:	58d0      	ldr	r0, [r2, r3]
 80229ca:	23c0      	movs	r3, #192	@ 0xc0
 80229cc:	2200      	movs	r2, #0
 80229ce:	2181      	movs	r1, #129	@ 0x81
 80229d0:	f7f7 fd24 	bl	801a41c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80229d4:	687a      	ldr	r2, [r7, #4]
 80229d6:	23b0      	movs	r3, #176	@ 0xb0
 80229d8:	009b      	lsls	r3, r3, #2
 80229da:	58d0      	ldr	r0, [r2, r3]
 80229dc:	2388      	movs	r3, #136	@ 0x88
 80229de:	005b      	lsls	r3, r3, #1
 80229e0:	2200      	movs	r2, #0
 80229e2:	2101      	movs	r1, #1
 80229e4:	f7f7 fd1a 	bl	801a41c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80229e8:	687a      	ldr	r2, [r7, #4]
 80229ea:	23b0      	movs	r3, #176	@ 0xb0
 80229ec:	009b      	lsls	r3, r3, #2
 80229ee:	58d0      	ldr	r0, [r2, r3]
 80229f0:	2380      	movs	r3, #128	@ 0x80
 80229f2:	005b      	lsls	r3, r3, #1
 80229f4:	2200      	movs	r2, #0
 80229f6:	2182      	movs	r1, #130	@ 0x82
 80229f8:	f7f7 fd10 	bl	801a41c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80229fc:	2300      	movs	r3, #0
}
 80229fe:	0018      	movs	r0, r3
 8022a00:	46bd      	mov	sp, r7
 8022a02:	b002      	add	sp, #8
 8022a04:	bd80      	pop	{r7, pc}
 8022a06:	46c0      	nop			@ (mov r8, r8)
 8022a08:	20002fcc 	.word	0x20002fcc
 8022a0c:	40005c00 	.word	0x40005c00

08022a10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a12:	b085      	sub	sp, #20
 8022a14:	af00      	add	r7, sp, #0
 8022a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a18:	210f      	movs	r1, #15
 8022a1a:	187b      	adds	r3, r7, r1
 8022a1c:	2200      	movs	r2, #0
 8022a1e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a20:	260e      	movs	r6, #14
 8022a22:	19bb      	adds	r3, r7, r6
 8022a24:	2200      	movs	r2, #0
 8022a26:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022a28:	687a      	ldr	r2, [r7, #4]
 8022a2a:	23b0      	movs	r3, #176	@ 0xb0
 8022a2c:	009b      	lsls	r3, r3, #2
 8022a2e:	58d3      	ldr	r3, [r2, r3]
 8022a30:	000d      	movs	r5, r1
 8022a32:	187c      	adds	r4, r7, r1
 8022a34:	0018      	movs	r0, r3
 8022a36:	f7f6 f823 	bl	8018a80 <HAL_PCD_Start>
 8022a3a:	0003      	movs	r3, r0
 8022a3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022a3e:	19bc      	adds	r4, r7, r6
 8022a40:	197b      	adds	r3, r7, r5
 8022a42:	781b      	ldrb	r3, [r3, #0]
 8022a44:	0018      	movs	r0, r3
 8022a46:	f000 f9bc 	bl	8022dc2 <USBD_Get_USB_Status>
 8022a4a:	0003      	movs	r3, r0
 8022a4c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022a4e:	19bb      	adds	r3, r7, r6
 8022a50:	781b      	ldrb	r3, [r3, #0]
}
 8022a52:	0018      	movs	r0, r3
 8022a54:	46bd      	mov	sp, r7
 8022a56:	b005      	add	sp, #20
 8022a58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022a5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8022a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a5c:	b085      	sub	sp, #20
 8022a5e:	af00      	add	r7, sp, #0
 8022a60:	6078      	str	r0, [r7, #4]
 8022a62:	000c      	movs	r4, r1
 8022a64:	0010      	movs	r0, r2
 8022a66:	0019      	movs	r1, r3
 8022a68:	1cfb      	adds	r3, r7, #3
 8022a6a:	1c22      	adds	r2, r4, #0
 8022a6c:	701a      	strb	r2, [r3, #0]
 8022a6e:	1cbb      	adds	r3, r7, #2
 8022a70:	1c02      	adds	r2, r0, #0
 8022a72:	701a      	strb	r2, [r3, #0]
 8022a74:	003b      	movs	r3, r7
 8022a76:	1c0a      	adds	r2, r1, #0
 8022a78:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a7a:	260f      	movs	r6, #15
 8022a7c:	19bb      	adds	r3, r7, r6
 8022a7e:	2200      	movs	r2, #0
 8022a80:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a82:	250e      	movs	r5, #14
 8022a84:	197b      	adds	r3, r7, r5
 8022a86:	2200      	movs	r2, #0
 8022a88:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8022a8a:	687a      	ldr	r2, [r7, #4]
 8022a8c:	23b0      	movs	r3, #176	@ 0xb0
 8022a8e:	009b      	lsls	r3, r3, #2
 8022a90:	58d0      	ldr	r0, [r2, r3]
 8022a92:	19bc      	adds	r4, r7, r6
 8022a94:	1cbb      	adds	r3, r7, #2
 8022a96:	781d      	ldrb	r5, [r3, #0]
 8022a98:	003b      	movs	r3, r7
 8022a9a:	881a      	ldrh	r2, [r3, #0]
 8022a9c:	1cfb      	adds	r3, r7, #3
 8022a9e:	7819      	ldrb	r1, [r3, #0]
 8022aa0:	002b      	movs	r3, r5
 8022aa2:	f7f6 f982 	bl	8018daa <HAL_PCD_EP_Open>
 8022aa6:	0003      	movs	r3, r0
 8022aa8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022aaa:	250e      	movs	r5, #14
 8022aac:	197c      	adds	r4, r7, r5
 8022aae:	19bb      	adds	r3, r7, r6
 8022ab0:	781b      	ldrb	r3, [r3, #0]
 8022ab2:	0018      	movs	r0, r3
 8022ab4:	f000 f985 	bl	8022dc2 <USBD_Get_USB_Status>
 8022ab8:	0003      	movs	r3, r0
 8022aba:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022abc:	197b      	adds	r3, r7, r5
 8022abe:	781b      	ldrb	r3, [r3, #0]
}
 8022ac0:	0018      	movs	r0, r3
 8022ac2:	46bd      	mov	sp, r7
 8022ac4:	b005      	add	sp, #20
 8022ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022ac8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022aca:	b085      	sub	sp, #20
 8022acc:	af00      	add	r7, sp, #0
 8022ace:	6078      	str	r0, [r7, #4]
 8022ad0:	000a      	movs	r2, r1
 8022ad2:	1cfb      	adds	r3, r7, #3
 8022ad4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022ad6:	210f      	movs	r1, #15
 8022ad8:	187b      	adds	r3, r7, r1
 8022ada:	2200      	movs	r2, #0
 8022adc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022ade:	260e      	movs	r6, #14
 8022ae0:	19bb      	adds	r3, r7, r6
 8022ae2:	2200      	movs	r2, #0
 8022ae4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8022ae6:	687a      	ldr	r2, [r7, #4]
 8022ae8:	23b0      	movs	r3, #176	@ 0xb0
 8022aea:	009b      	lsls	r3, r3, #2
 8022aec:	58d2      	ldr	r2, [r2, r3]
 8022aee:	000d      	movs	r5, r1
 8022af0:	187c      	adds	r4, r7, r1
 8022af2:	1cfb      	adds	r3, r7, #3
 8022af4:	781b      	ldrb	r3, [r3, #0]
 8022af6:	0019      	movs	r1, r3
 8022af8:	0010      	movs	r0, r2
 8022afa:	f7f6 f9c5 	bl	8018e88 <HAL_PCD_EP_Close>
 8022afe:	0003      	movs	r3, r0
 8022b00:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022b02:	19bc      	adds	r4, r7, r6
 8022b04:	197b      	adds	r3, r7, r5
 8022b06:	781b      	ldrb	r3, [r3, #0]
 8022b08:	0018      	movs	r0, r3
 8022b0a:	f000 f95a 	bl	8022dc2 <USBD_Get_USB_Status>
 8022b0e:	0003      	movs	r3, r0
 8022b10:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022b12:	19bb      	adds	r3, r7, r6
 8022b14:	781b      	ldrb	r3, [r3, #0]
}
 8022b16:	0018      	movs	r0, r3
 8022b18:	46bd      	mov	sp, r7
 8022b1a:	b005      	add	sp, #20
 8022b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022b1e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b20:	b085      	sub	sp, #20
 8022b22:	af00      	add	r7, sp, #0
 8022b24:	6078      	str	r0, [r7, #4]
 8022b26:	000a      	movs	r2, r1
 8022b28:	1cfb      	adds	r3, r7, #3
 8022b2a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022b2c:	210f      	movs	r1, #15
 8022b2e:	187b      	adds	r3, r7, r1
 8022b30:	2200      	movs	r2, #0
 8022b32:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022b34:	260e      	movs	r6, #14
 8022b36:	19bb      	adds	r3, r7, r6
 8022b38:	2200      	movs	r2, #0
 8022b3a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022b3c:	687a      	ldr	r2, [r7, #4]
 8022b3e:	23b0      	movs	r3, #176	@ 0xb0
 8022b40:	009b      	lsls	r3, r3, #2
 8022b42:	58d2      	ldr	r2, [r2, r3]
 8022b44:	000d      	movs	r5, r1
 8022b46:	187c      	adds	r4, r7, r1
 8022b48:	1cfb      	adds	r3, r7, #3
 8022b4a:	781b      	ldrb	r3, [r3, #0]
 8022b4c:	0019      	movs	r1, r3
 8022b4e:	0010      	movs	r0, r2
 8022b50:	f7f6 fa77 	bl	8019042 <HAL_PCD_EP_SetStall>
 8022b54:	0003      	movs	r3, r0
 8022b56:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022b58:	19bc      	adds	r4, r7, r6
 8022b5a:	197b      	adds	r3, r7, r5
 8022b5c:	781b      	ldrb	r3, [r3, #0]
 8022b5e:	0018      	movs	r0, r3
 8022b60:	f000 f92f 	bl	8022dc2 <USBD_Get_USB_Status>
 8022b64:	0003      	movs	r3, r0
 8022b66:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022b68:	19bb      	adds	r3, r7, r6
 8022b6a:	781b      	ldrb	r3, [r3, #0]
}
 8022b6c:	0018      	movs	r0, r3
 8022b6e:	46bd      	mov	sp, r7
 8022b70:	b005      	add	sp, #20
 8022b72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022b74 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b76:	b085      	sub	sp, #20
 8022b78:	af00      	add	r7, sp, #0
 8022b7a:	6078      	str	r0, [r7, #4]
 8022b7c:	000a      	movs	r2, r1
 8022b7e:	1cfb      	adds	r3, r7, #3
 8022b80:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022b82:	210f      	movs	r1, #15
 8022b84:	187b      	adds	r3, r7, r1
 8022b86:	2200      	movs	r2, #0
 8022b88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022b8a:	260e      	movs	r6, #14
 8022b8c:	19bb      	adds	r3, r7, r6
 8022b8e:	2200      	movs	r2, #0
 8022b90:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8022b92:	687a      	ldr	r2, [r7, #4]
 8022b94:	23b0      	movs	r3, #176	@ 0xb0
 8022b96:	009b      	lsls	r3, r3, #2
 8022b98:	58d2      	ldr	r2, [r2, r3]
 8022b9a:	000d      	movs	r5, r1
 8022b9c:	187c      	adds	r4, r7, r1
 8022b9e:	1cfb      	adds	r3, r7, #3
 8022ba0:	781b      	ldrb	r3, [r3, #0]
 8022ba2:	0019      	movs	r1, r3
 8022ba4:	0010      	movs	r0, r2
 8022ba6:	f7f6 faa8 	bl	80190fa <HAL_PCD_EP_ClrStall>
 8022baa:	0003      	movs	r3, r0
 8022bac:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022bae:	19bc      	adds	r4, r7, r6
 8022bb0:	197b      	adds	r3, r7, r5
 8022bb2:	781b      	ldrb	r3, [r3, #0]
 8022bb4:	0018      	movs	r0, r3
 8022bb6:	f000 f904 	bl	8022dc2 <USBD_Get_USB_Status>
 8022bba:	0003      	movs	r3, r0
 8022bbc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022bbe:	19bb      	adds	r3, r7, r6
 8022bc0:	781b      	ldrb	r3, [r3, #0]
}
 8022bc2:	0018      	movs	r0, r3
 8022bc4:	46bd      	mov	sp, r7
 8022bc6:	b005      	add	sp, #20
 8022bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022bca <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022bca:	b580      	push	{r7, lr}
 8022bcc:	b084      	sub	sp, #16
 8022bce:	af00      	add	r7, sp, #0
 8022bd0:	6078      	str	r0, [r7, #4]
 8022bd2:	000a      	movs	r2, r1
 8022bd4:	1cfb      	adds	r3, r7, #3
 8022bd6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8022bd8:	687a      	ldr	r2, [r7, #4]
 8022bda:	23b0      	movs	r3, #176	@ 0xb0
 8022bdc:	009b      	lsls	r3, r3, #2
 8022bde:	58d3      	ldr	r3, [r2, r3]
 8022be0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8022be2:	1cfb      	adds	r3, r7, #3
 8022be4:	781b      	ldrb	r3, [r3, #0]
 8022be6:	b25b      	sxtb	r3, r3
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	da0d      	bge.n	8022c08 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8022bec:	1cfb      	adds	r3, r7, #3
 8022bee:	781b      	ldrb	r3, [r3, #0]
 8022bf0:	227f      	movs	r2, #127	@ 0x7f
 8022bf2:	4013      	ands	r3, r2
 8022bf4:	68f9      	ldr	r1, [r7, #12]
 8022bf6:	1c5a      	adds	r2, r3, #1
 8022bf8:	0013      	movs	r3, r2
 8022bfa:	009b      	lsls	r3, r3, #2
 8022bfc:	189b      	adds	r3, r3, r2
 8022bfe:	00db      	lsls	r3, r3, #3
 8022c00:	18cb      	adds	r3, r1, r3
 8022c02:	3302      	adds	r3, #2
 8022c04:	781b      	ldrb	r3, [r3, #0]
 8022c06:	e00d      	b.n	8022c24 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8022c08:	1cfb      	adds	r3, r7, #3
 8022c0a:	781b      	ldrb	r3, [r3, #0]
 8022c0c:	227f      	movs	r2, #127	@ 0x7f
 8022c0e:	401a      	ands	r2, r3
 8022c10:	68f8      	ldr	r0, [r7, #12]
 8022c12:	23b5      	movs	r3, #181	@ 0xb5
 8022c14:	0059      	lsls	r1, r3, #1
 8022c16:	0013      	movs	r3, r2
 8022c18:	009b      	lsls	r3, r3, #2
 8022c1a:	189b      	adds	r3, r3, r2
 8022c1c:	00db      	lsls	r3, r3, #3
 8022c1e:	18c3      	adds	r3, r0, r3
 8022c20:	185b      	adds	r3, r3, r1
 8022c22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8022c24:	0018      	movs	r0, r3
 8022c26:	46bd      	mov	sp, r7
 8022c28:	b004      	add	sp, #16
 8022c2a:	bd80      	pop	{r7, pc}

08022c2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8022c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c2e:	b085      	sub	sp, #20
 8022c30:	af00      	add	r7, sp, #0
 8022c32:	6078      	str	r0, [r7, #4]
 8022c34:	000a      	movs	r2, r1
 8022c36:	1cfb      	adds	r3, r7, #3
 8022c38:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022c3a:	210f      	movs	r1, #15
 8022c3c:	187b      	adds	r3, r7, r1
 8022c3e:	2200      	movs	r2, #0
 8022c40:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022c42:	260e      	movs	r6, #14
 8022c44:	19bb      	adds	r3, r7, r6
 8022c46:	2200      	movs	r2, #0
 8022c48:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022c4a:	687a      	ldr	r2, [r7, #4]
 8022c4c:	23b0      	movs	r3, #176	@ 0xb0
 8022c4e:	009b      	lsls	r3, r3, #2
 8022c50:	58d2      	ldr	r2, [r2, r3]
 8022c52:	000d      	movs	r5, r1
 8022c54:	187c      	adds	r4, r7, r1
 8022c56:	1cfb      	adds	r3, r7, #3
 8022c58:	781b      	ldrb	r3, [r3, #0]
 8022c5a:	0019      	movs	r1, r3
 8022c5c:	0010      	movs	r0, r2
 8022c5e:	f7f6 f879 	bl	8018d54 <HAL_PCD_SetAddress>
 8022c62:	0003      	movs	r3, r0
 8022c64:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022c66:	19bc      	adds	r4, r7, r6
 8022c68:	197b      	adds	r3, r7, r5
 8022c6a:	781b      	ldrb	r3, [r3, #0]
 8022c6c:	0018      	movs	r0, r3
 8022c6e:	f000 f8a8 	bl	8022dc2 <USBD_Get_USB_Status>
 8022c72:	0003      	movs	r3, r0
 8022c74:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022c76:	19bb      	adds	r3, r7, r6
 8022c78:	781b      	ldrb	r3, [r3, #0]
}
 8022c7a:	0018      	movs	r0, r3
 8022c7c:	46bd      	mov	sp, r7
 8022c7e:	b005      	add	sp, #20
 8022c80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022c82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8022c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c84:	b087      	sub	sp, #28
 8022c86:	af00      	add	r7, sp, #0
 8022c88:	60f8      	str	r0, [r7, #12]
 8022c8a:	0008      	movs	r0, r1
 8022c8c:	607a      	str	r2, [r7, #4]
 8022c8e:	0019      	movs	r1, r3
 8022c90:	230b      	movs	r3, #11
 8022c92:	18fb      	adds	r3, r7, r3
 8022c94:	1c02      	adds	r2, r0, #0
 8022c96:	701a      	strb	r2, [r3, #0]
 8022c98:	2408      	movs	r4, #8
 8022c9a:	193b      	adds	r3, r7, r4
 8022c9c:	1c0a      	adds	r2, r1, #0
 8022c9e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022ca0:	2117      	movs	r1, #23
 8022ca2:	187b      	adds	r3, r7, r1
 8022ca4:	2200      	movs	r2, #0
 8022ca6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022ca8:	2516      	movs	r5, #22
 8022caa:	197b      	adds	r3, r7, r5
 8022cac:	2200      	movs	r2, #0
 8022cae:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022cb0:	68fa      	ldr	r2, [r7, #12]
 8022cb2:	23b0      	movs	r3, #176	@ 0xb0
 8022cb4:	009b      	lsls	r3, r3, #2
 8022cb6:	58d0      	ldr	r0, [r2, r3]
 8022cb8:	193b      	adds	r3, r7, r4
 8022cba:	881d      	ldrh	r5, [r3, #0]
 8022cbc:	000e      	movs	r6, r1
 8022cbe:	187c      	adds	r4, r7, r1
 8022cc0:	687a      	ldr	r2, [r7, #4]
 8022cc2:	230b      	movs	r3, #11
 8022cc4:	18fb      	adds	r3, r7, r3
 8022cc6:	7819      	ldrb	r1, [r3, #0]
 8022cc8:	002b      	movs	r3, r5
 8022cca:	f7f6 f97e 	bl	8018fca <HAL_PCD_EP_Transmit>
 8022cce:	0003      	movs	r3, r0
 8022cd0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022cd2:	2516      	movs	r5, #22
 8022cd4:	197c      	adds	r4, r7, r5
 8022cd6:	19bb      	adds	r3, r7, r6
 8022cd8:	781b      	ldrb	r3, [r3, #0]
 8022cda:	0018      	movs	r0, r3
 8022cdc:	f000 f871 	bl	8022dc2 <USBD_Get_USB_Status>
 8022ce0:	0003      	movs	r3, r0
 8022ce2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022ce4:	197b      	adds	r3, r7, r5
 8022ce6:	781b      	ldrb	r3, [r3, #0]
}
 8022ce8:	0018      	movs	r0, r3
 8022cea:	46bd      	mov	sp, r7
 8022cec:	b007      	add	sp, #28
 8022cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022cf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8022cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022cf2:	b087      	sub	sp, #28
 8022cf4:	af00      	add	r7, sp, #0
 8022cf6:	60f8      	str	r0, [r7, #12]
 8022cf8:	0008      	movs	r0, r1
 8022cfa:	607a      	str	r2, [r7, #4]
 8022cfc:	0019      	movs	r1, r3
 8022cfe:	230b      	movs	r3, #11
 8022d00:	18fb      	adds	r3, r7, r3
 8022d02:	1c02      	adds	r2, r0, #0
 8022d04:	701a      	strb	r2, [r3, #0]
 8022d06:	2408      	movs	r4, #8
 8022d08:	193b      	adds	r3, r7, r4
 8022d0a:	1c0a      	adds	r2, r1, #0
 8022d0c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022d0e:	2117      	movs	r1, #23
 8022d10:	187b      	adds	r3, r7, r1
 8022d12:	2200      	movs	r2, #0
 8022d14:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022d16:	2516      	movs	r5, #22
 8022d18:	197b      	adds	r3, r7, r5
 8022d1a:	2200      	movs	r2, #0
 8022d1c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022d1e:	68fa      	ldr	r2, [r7, #12]
 8022d20:	23b0      	movs	r3, #176	@ 0xb0
 8022d22:	009b      	lsls	r3, r3, #2
 8022d24:	58d0      	ldr	r0, [r2, r3]
 8022d26:	193b      	adds	r3, r7, r4
 8022d28:	881d      	ldrh	r5, [r3, #0]
 8022d2a:	000e      	movs	r6, r1
 8022d2c:	187c      	adds	r4, r7, r1
 8022d2e:	687a      	ldr	r2, [r7, #4]
 8022d30:	230b      	movs	r3, #11
 8022d32:	18fb      	adds	r3, r7, r3
 8022d34:	7819      	ldrb	r1, [r3, #0]
 8022d36:	002b      	movs	r3, r5
 8022d38:	f7f6 f8f7 	bl	8018f2a <HAL_PCD_EP_Receive>
 8022d3c:	0003      	movs	r3, r0
 8022d3e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022d40:	2516      	movs	r5, #22
 8022d42:	197c      	adds	r4, r7, r5
 8022d44:	19bb      	adds	r3, r7, r6
 8022d46:	781b      	ldrb	r3, [r3, #0]
 8022d48:	0018      	movs	r0, r3
 8022d4a:	f000 f83a 	bl	8022dc2 <USBD_Get_USB_Status>
 8022d4e:	0003      	movs	r3, r0
 8022d50:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022d52:	197b      	adds	r3, r7, r5
 8022d54:	781b      	ldrb	r3, [r3, #0]
}
 8022d56:	0018      	movs	r0, r3
 8022d58:	46bd      	mov	sp, r7
 8022d5a:	b007      	add	sp, #28
 8022d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022d5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022d5e:	b580      	push	{r7, lr}
 8022d60:	b082      	sub	sp, #8
 8022d62:	af00      	add	r7, sp, #0
 8022d64:	6078      	str	r0, [r7, #4]
 8022d66:	000a      	movs	r2, r1
 8022d68:	1cfb      	adds	r3, r7, #3
 8022d6a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8022d6c:	687a      	ldr	r2, [r7, #4]
 8022d6e:	23b0      	movs	r3, #176	@ 0xb0
 8022d70:	009b      	lsls	r3, r3, #2
 8022d72:	58d2      	ldr	r2, [r2, r3]
 8022d74:	1cfb      	adds	r3, r7, #3
 8022d76:	781b      	ldrb	r3, [r3, #0]
 8022d78:	0019      	movs	r1, r3
 8022d7a:	0010      	movs	r0, r2
 8022d7c:	f7f6 f90c 	bl	8018f98 <HAL_PCD_EP_GetRxCount>
 8022d80:	0003      	movs	r3, r0
}
 8022d82:	0018      	movs	r0, r3
 8022d84:	46bd      	mov	sp, r7
 8022d86:	b002      	add	sp, #8
 8022d88:	bd80      	pop	{r7, pc}
	...

08022d8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022d8c:	b580      	push	{r7, lr}
 8022d8e:	b082      	sub	sp, #8
 8022d90:	af00      	add	r7, sp, #0
 8022d92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022d94:	4b02      	ldr	r3, [pc, #8]	@ (8022da0 <USBD_static_malloc+0x14>)
}
 8022d96:	0018      	movs	r0, r3
 8022d98:	46bd      	mov	sp, r7
 8022d9a:	b002      	add	sp, #8
 8022d9c:	bd80      	pop	{r7, pc}
 8022d9e:	46c0      	nop			@ (mov r8, r8)
 8022da0:	200032c0 	.word	0x200032c0

08022da4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022da4:	b580      	push	{r7, lr}
 8022da6:	b082      	sub	sp, #8
 8022da8:	af00      	add	r7, sp, #0
 8022daa:	6078      	str	r0, [r7, #4]

}
 8022dac:	46c0      	nop			@ (mov r8, r8)
 8022dae:	46bd      	mov	sp, r7
 8022db0:	b002      	add	sp, #8
 8022db2:	bd80      	pop	{r7, pc}

08022db4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8022db4:	b580      	push	{r7, lr}
 8022db6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8022db8:	f7e9 fce6 	bl	800c788 <SystemClock_Config>
}
 8022dbc:	46c0      	nop			@ (mov r8, r8)
 8022dbe:	46bd      	mov	sp, r7
 8022dc0:	bd80      	pop	{r7, pc}

08022dc2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022dc2:	b580      	push	{r7, lr}
 8022dc4:	b084      	sub	sp, #16
 8022dc6:	af00      	add	r7, sp, #0
 8022dc8:	0002      	movs	r2, r0
 8022dca:	1dfb      	adds	r3, r7, #7
 8022dcc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022dce:	230f      	movs	r3, #15
 8022dd0:	18fb      	adds	r3, r7, r3
 8022dd2:	2200      	movs	r2, #0
 8022dd4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8022dd6:	1dfb      	adds	r3, r7, #7
 8022dd8:	781b      	ldrb	r3, [r3, #0]
 8022dda:	2b03      	cmp	r3, #3
 8022ddc:	d017      	beq.n	8022e0e <USBD_Get_USB_Status+0x4c>
 8022dde:	dc1b      	bgt.n	8022e18 <USBD_Get_USB_Status+0x56>
 8022de0:	2b02      	cmp	r3, #2
 8022de2:	d00f      	beq.n	8022e04 <USBD_Get_USB_Status+0x42>
 8022de4:	dc18      	bgt.n	8022e18 <USBD_Get_USB_Status+0x56>
 8022de6:	2b00      	cmp	r3, #0
 8022de8:	d002      	beq.n	8022df0 <USBD_Get_USB_Status+0x2e>
 8022dea:	2b01      	cmp	r3, #1
 8022dec:	d005      	beq.n	8022dfa <USBD_Get_USB_Status+0x38>
 8022dee:	e013      	b.n	8022e18 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022df0:	230f      	movs	r3, #15
 8022df2:	18fb      	adds	r3, r7, r3
 8022df4:	2200      	movs	r2, #0
 8022df6:	701a      	strb	r2, [r3, #0]
    break;
 8022df8:	e013      	b.n	8022e22 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022dfa:	230f      	movs	r3, #15
 8022dfc:	18fb      	adds	r3, r7, r3
 8022dfe:	2202      	movs	r2, #2
 8022e00:	701a      	strb	r2, [r3, #0]
    break;
 8022e02:	e00e      	b.n	8022e22 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022e04:	230f      	movs	r3, #15
 8022e06:	18fb      	adds	r3, r7, r3
 8022e08:	2201      	movs	r2, #1
 8022e0a:	701a      	strb	r2, [r3, #0]
    break;
 8022e0c:	e009      	b.n	8022e22 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022e0e:	230f      	movs	r3, #15
 8022e10:	18fb      	adds	r3, r7, r3
 8022e12:	2202      	movs	r2, #2
 8022e14:	701a      	strb	r2, [r3, #0]
    break;
 8022e16:	e004      	b.n	8022e22 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8022e18:	230f      	movs	r3, #15
 8022e1a:	18fb      	adds	r3, r7, r3
 8022e1c:	2202      	movs	r2, #2
 8022e1e:	701a      	strb	r2, [r3, #0]
    break;
 8022e20:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8022e22:	230f      	movs	r3, #15
 8022e24:	18fb      	adds	r3, r7, r3
 8022e26:	781b      	ldrb	r3, [r3, #0]
}
 8022e28:	0018      	movs	r0, r3
 8022e2a:	46bd      	mov	sp, r7
 8022e2c:	b004      	add	sp, #16
 8022e2e:	bd80      	pop	{r7, pc}

08022e30 <arm_cfft_radix4by2_q31>:
 8022e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e32:	465f      	mov	r7, fp
 8022e34:	4656      	mov	r6, sl
 8022e36:	464d      	mov	r5, r9
 8022e38:	4644      	mov	r4, r8
 8022e3a:	000b      	movs	r3, r1
 8022e3c:	b4f0      	push	{r4, r5, r6, r7}
 8022e3e:	085b      	lsrs	r3, r3, #1
 8022e40:	b08f      	sub	sp, #60	@ 0x3c
 8022e42:	910a      	str	r1, [sp, #40]	@ 0x28
 8022e44:	0007      	movs	r7, r0
 8022e46:	9009      	str	r0, [sp, #36]	@ 0x24
 8022e48:	0011      	movs	r1, r2
 8022e4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022e4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8022e4e:	2b00      	cmp	r3, #0
 8022e50:	d100      	bne.n	8022e54 <arm_cfft_radix4by2_q31+0x24>
 8022e52:	e0a0      	b.n	8022f96 <arm_cfft_radix4by2_q31+0x166>
 8022e54:	0002      	movs	r2, r0
 8022e56:	00db      	lsls	r3, r3, #3
 8022e58:	3204      	adds	r2, #4
 8022e5a:	4691      	mov	r9, r2
 8022e5c:	4698      	mov	r8, r3
 8022e5e:	000a      	movs	r2, r1
 8022e60:	464e      	mov	r6, r9
 8022e62:	4442      	add	r2, r8
 8022e64:	4699      	mov	r9, r3
 8022e66:	4688      	mov	r8, r1
 8022e68:	9208      	str	r2, [sp, #32]
 8022e6a:	900d      	str	r0, [sp, #52]	@ 0x34
 8022e6c:	4643      	mov	r3, r8
 8022e6e:	681b      	ldr	r3, [r3, #0]
 8022e70:	469b      	mov	fp, r3
 8022e72:	4643      	mov	r3, r8
 8022e74:	685b      	ldr	r3, [r3, #4]
 8022e76:	469a      	mov	sl, r3
 8022e78:	683b      	ldr	r3, [r7, #0]
 8022e7a:	109c      	asrs	r4, r3, #2
 8022e7c:	464b      	mov	r3, r9
 8022e7e:	58fb      	ldr	r3, [r7, r3]
 8022e80:	109a      	asrs	r2, r3, #2
 8022e82:	18a3      	adds	r3, r4, r2
 8022e84:	603b      	str	r3, [r7, #0]
 8022e86:	6833      	ldr	r3, [r6, #0]
 8022e88:	1aa4      	subs	r4, r4, r2
 8022e8a:	109d      	asrs	r5, r3, #2
 8022e8c:	464b      	mov	r3, r9
 8022e8e:	58f3      	ldr	r3, [r6, r3]
 8022e90:	17e2      	asrs	r2, r4, #31
 8022e92:	109b      	asrs	r3, r3, #2
 8022e94:	18e9      	adds	r1, r5, r3
 8022e96:	6031      	str	r1, [r6, #0]
 8022e98:	0011      	movs	r1, r2
 8022e9a:	465a      	mov	r2, fp
 8022e9c:	17d2      	asrs	r2, r2, #31
 8022e9e:	0010      	movs	r0, r2
 8022ea0:	4652      	mov	r2, sl
 8022ea2:	1aed      	subs	r5, r5, r3
 8022ea4:	17eb      	asrs	r3, r5, #31
 8022ea6:	17d2      	asrs	r2, r2, #31
 8022ea8:	9307      	str	r3, [sp, #28]
 8022eaa:	9204      	str	r2, [sp, #16]
 8022eac:	0003      	movs	r3, r0
 8022eae:	465a      	mov	r2, fp
 8022eb0:	9006      	str	r0, [sp, #24]
 8022eb2:	0020      	movs	r0, r4
 8022eb4:	9105      	str	r1, [sp, #20]
 8022eb6:	f7dd fb83 	bl	80005c0 <__aeabi_lmul>
 8022eba:	2280      	movs	r2, #128	@ 0x80
 8022ebc:	2300      	movs	r3, #0
 8022ebe:	0612      	lsls	r2, r2, #24
 8022ec0:	1880      	adds	r0, r0, r2
 8022ec2:	4159      	adcs	r1, r3
 8022ec4:	2300      	movs	r3, #0
 8022ec6:	9101      	str	r1, [sp, #4]
 8022ec8:	9300      	str	r3, [sp, #0]
 8022eca:	4652      	mov	r2, sl
 8022ecc:	9b04      	ldr	r3, [sp, #16]
 8022ece:	0028      	movs	r0, r5
 8022ed0:	17e9      	asrs	r1, r5, #31
 8022ed2:	f7dd fb75 	bl	80005c0 <__aeabi_lmul>
 8022ed6:	9a00      	ldr	r2, [sp, #0]
 8022ed8:	9b01      	ldr	r3, [sp, #4]
 8022eda:	1880      	adds	r0, r0, r2
 8022edc:	4159      	adcs	r1, r3
 8022ede:	2280      	movs	r2, #128	@ 0x80
 8022ee0:	2300      	movs	r3, #0
 8022ee2:	0612      	lsls	r2, r2, #24
 8022ee4:	1880      	adds	r0, r0, r2
 8022ee6:	4159      	adcs	r1, r3
 8022ee8:	464a      	mov	r2, r9
 8022eea:	004b      	lsls	r3, r1, #1
 8022eec:	50bb      	str	r3, [r7, r2]
 8022eee:	4658      	mov	r0, fp
 8022ef0:	002a      	movs	r2, r5
 8022ef2:	9b07      	ldr	r3, [sp, #28]
 8022ef4:	9906      	ldr	r1, [sp, #24]
 8022ef6:	f7dd fb63 	bl	80005c0 <__aeabi_lmul>
 8022efa:	2280      	movs	r2, #128	@ 0x80
 8022efc:	2300      	movs	r3, #0
 8022efe:	0612      	lsls	r2, r2, #24
 8022f00:	1880      	adds	r0, r0, r2
 8022f02:	4159      	adcs	r1, r3
 8022f04:	2000      	movs	r0, #0
 8022f06:	9103      	str	r1, [sp, #12]
 8022f08:	9002      	str	r0, [sp, #8]
 8022f0a:	4652      	mov	r2, sl
 8022f0c:	9b04      	ldr	r3, [sp, #16]
 8022f0e:	0020      	movs	r0, r4
 8022f10:	9905      	ldr	r1, [sp, #20]
 8022f12:	f7dd fb55 	bl	80005c0 <__aeabi_lmul>
 8022f16:	9a02      	ldr	r2, [sp, #8]
 8022f18:	9b03      	ldr	r3, [sp, #12]
 8022f1a:	1a12      	subs	r2, r2, r0
 8022f1c:	418b      	sbcs	r3, r1
 8022f1e:	2080      	movs	r0, #128	@ 0x80
 8022f20:	2100      	movs	r1, #0
 8022f22:	0600      	lsls	r0, r0, #24
 8022f24:	1812      	adds	r2, r2, r0
 8022f26:	414b      	adcs	r3, r1
 8022f28:	464a      	mov	r2, r9
 8022f2a:	005b      	lsls	r3, r3, #1
 8022f2c:	50b3      	str	r3, [r6, r2]
 8022f2e:	2308      	movs	r3, #8
 8022f30:	469c      	mov	ip, r3
 8022f32:	9b08      	ldr	r3, [sp, #32]
 8022f34:	44e0      	add	r8, ip
 8022f36:	3708      	adds	r7, #8
 8022f38:	3608      	adds	r6, #8
 8022f3a:	4598      	cmp	r8, r3
 8022f3c:	d196      	bne.n	8022e6c <arm_cfft_radix4by2_q31+0x3c>
 8022f3e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022f40:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022f42:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022f44:	2302      	movs	r3, #2
 8022f46:	003a      	movs	r2, r7
 8022f48:	0029      	movs	r1, r5
 8022f4a:	0020      	movs	r0, r4
 8022f4c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8022f4e:	f000 f957 	bl	8023200 <arm_radix4_butterfly_q31>
 8022f52:	46a4      	mov	ip, r4
 8022f54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022f56:	2302      	movs	r3, #2
 8022f58:	0088      	lsls	r0, r1, #2
 8022f5a:	4460      	add	r0, ip
 8022f5c:	003a      	movs	r2, r7
 8022f5e:	0029      	movs	r1, r5
 8022f60:	f000 f94e 	bl	8023200 <arm_radix4_butterfly_q31>
 8022f64:	46a4      	mov	ip, r4
 8022f66:	0128      	lsls	r0, r5, #4
 8022f68:	4460      	add	r0, ip
 8022f6a:	6833      	ldr	r3, [r6, #0]
 8022f6c:	005b      	lsls	r3, r3, #1
 8022f6e:	6033      	str	r3, [r6, #0]
 8022f70:	6873      	ldr	r3, [r6, #4]
 8022f72:	005b      	lsls	r3, r3, #1
 8022f74:	6073      	str	r3, [r6, #4]
 8022f76:	68b3      	ldr	r3, [r6, #8]
 8022f78:	005b      	lsls	r3, r3, #1
 8022f7a:	60b3      	str	r3, [r6, #8]
 8022f7c:	68f3      	ldr	r3, [r6, #12]
 8022f7e:	005b      	lsls	r3, r3, #1
 8022f80:	60f3      	str	r3, [r6, #12]
 8022f82:	3610      	adds	r6, #16
 8022f84:	42b0      	cmp	r0, r6
 8022f86:	d1f0      	bne.n	8022f6a <arm_cfft_radix4by2_q31+0x13a>
 8022f88:	b00f      	add	sp, #60	@ 0x3c
 8022f8a:	bc3c      	pop	{r2, r3, r4, r5}
 8022f8c:	4690      	mov	r8, r2
 8022f8e:	4699      	mov	r9, r3
 8022f90:	46a2      	mov	sl, r4
 8022f92:	46ab      	mov	fp, r5
 8022f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f96:	2302      	movs	r3, #2
 8022f98:	2100      	movs	r1, #0
 8022f9a:	0015      	movs	r5, r2
 8022f9c:	f000 f930 	bl	8023200 <arm_radix4_butterfly_q31>
 8022fa0:	46bc      	mov	ip, r7
 8022fa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022fa4:	002a      	movs	r2, r5
 8022fa6:	0098      	lsls	r0, r3, #2
 8022fa8:	4460      	add	r0, ip
 8022faa:	2302      	movs	r3, #2
 8022fac:	2100      	movs	r1, #0
 8022fae:	f000 f927 	bl	8023200 <arm_radix4_butterfly_q31>
 8022fb2:	e7e9      	b.n	8022f88 <arm_cfft_radix4by2_q31+0x158>

08022fb4 <arm_cfft_radix4by2_inverse_q31>:
 8022fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022fb6:	465f      	mov	r7, fp
 8022fb8:	4656      	mov	r6, sl
 8022fba:	464d      	mov	r5, r9
 8022fbc:	4644      	mov	r4, r8
 8022fbe:	000b      	movs	r3, r1
 8022fc0:	b4f0      	push	{r4, r5, r6, r7}
 8022fc2:	085b      	lsrs	r3, r3, #1
 8022fc4:	b08f      	sub	sp, #60	@ 0x3c
 8022fc6:	910a      	str	r1, [sp, #40]	@ 0x28
 8022fc8:	0007      	movs	r7, r0
 8022fca:	9009      	str	r0, [sp, #36]	@ 0x24
 8022fcc:	0011      	movs	r1, r2
 8022fce:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022fd0:	930c      	str	r3, [sp, #48]	@ 0x30
 8022fd2:	2b00      	cmp	r3, #0
 8022fd4:	d100      	bne.n	8022fd8 <arm_cfft_radix4by2_inverse_q31+0x24>
 8022fd6:	e0a0      	b.n	802311a <arm_cfft_radix4by2_inverse_q31+0x166>
 8022fd8:	0002      	movs	r2, r0
 8022fda:	00db      	lsls	r3, r3, #3
 8022fdc:	3204      	adds	r2, #4
 8022fde:	4691      	mov	r9, r2
 8022fe0:	4698      	mov	r8, r3
 8022fe2:	000a      	movs	r2, r1
 8022fe4:	464e      	mov	r6, r9
 8022fe6:	4442      	add	r2, r8
 8022fe8:	4699      	mov	r9, r3
 8022fea:	4688      	mov	r8, r1
 8022fec:	9208      	str	r2, [sp, #32]
 8022fee:	900d      	str	r0, [sp, #52]	@ 0x34
 8022ff0:	4643      	mov	r3, r8
 8022ff2:	681b      	ldr	r3, [r3, #0]
 8022ff4:	469b      	mov	fp, r3
 8022ff6:	4643      	mov	r3, r8
 8022ff8:	685b      	ldr	r3, [r3, #4]
 8022ffa:	469a      	mov	sl, r3
 8022ffc:	683b      	ldr	r3, [r7, #0]
 8022ffe:	109c      	asrs	r4, r3, #2
 8023000:	464b      	mov	r3, r9
 8023002:	58fb      	ldr	r3, [r7, r3]
 8023004:	109a      	asrs	r2, r3, #2
 8023006:	18a3      	adds	r3, r4, r2
 8023008:	603b      	str	r3, [r7, #0]
 802300a:	6833      	ldr	r3, [r6, #0]
 802300c:	1aa4      	subs	r4, r4, r2
 802300e:	109d      	asrs	r5, r3, #2
 8023010:	464b      	mov	r3, r9
 8023012:	58f3      	ldr	r3, [r6, r3]
 8023014:	17e2      	asrs	r2, r4, #31
 8023016:	109b      	asrs	r3, r3, #2
 8023018:	18e9      	adds	r1, r5, r3
 802301a:	6031      	str	r1, [r6, #0]
 802301c:	0011      	movs	r1, r2
 802301e:	465a      	mov	r2, fp
 8023020:	17d2      	asrs	r2, r2, #31
 8023022:	0010      	movs	r0, r2
 8023024:	4652      	mov	r2, sl
 8023026:	1aed      	subs	r5, r5, r3
 8023028:	17eb      	asrs	r3, r5, #31
 802302a:	17d2      	asrs	r2, r2, #31
 802302c:	9307      	str	r3, [sp, #28]
 802302e:	9204      	str	r2, [sp, #16]
 8023030:	0003      	movs	r3, r0
 8023032:	465a      	mov	r2, fp
 8023034:	9006      	str	r0, [sp, #24]
 8023036:	0020      	movs	r0, r4
 8023038:	9105      	str	r1, [sp, #20]
 802303a:	f7dd fac1 	bl	80005c0 <__aeabi_lmul>
 802303e:	2280      	movs	r2, #128	@ 0x80
 8023040:	2300      	movs	r3, #0
 8023042:	0612      	lsls	r2, r2, #24
 8023044:	1880      	adds	r0, r0, r2
 8023046:	4159      	adcs	r1, r3
 8023048:	2300      	movs	r3, #0
 802304a:	9101      	str	r1, [sp, #4]
 802304c:	9300      	str	r3, [sp, #0]
 802304e:	4652      	mov	r2, sl
 8023050:	9b04      	ldr	r3, [sp, #16]
 8023052:	0028      	movs	r0, r5
 8023054:	17e9      	asrs	r1, r5, #31
 8023056:	f7dd fab3 	bl	80005c0 <__aeabi_lmul>
 802305a:	9a00      	ldr	r2, [sp, #0]
 802305c:	9b01      	ldr	r3, [sp, #4]
 802305e:	1a12      	subs	r2, r2, r0
 8023060:	418b      	sbcs	r3, r1
 8023062:	2080      	movs	r0, #128	@ 0x80
 8023064:	2100      	movs	r1, #0
 8023066:	0600      	lsls	r0, r0, #24
 8023068:	1812      	adds	r2, r2, r0
 802306a:	414b      	adcs	r3, r1
 802306c:	464a      	mov	r2, r9
 802306e:	005b      	lsls	r3, r3, #1
 8023070:	50bb      	str	r3, [r7, r2]
 8023072:	4658      	mov	r0, fp
 8023074:	002a      	movs	r2, r5
 8023076:	9b07      	ldr	r3, [sp, #28]
 8023078:	9906      	ldr	r1, [sp, #24]
 802307a:	f7dd faa1 	bl	80005c0 <__aeabi_lmul>
 802307e:	2280      	movs	r2, #128	@ 0x80
 8023080:	2300      	movs	r3, #0
 8023082:	0612      	lsls	r2, r2, #24
 8023084:	1880      	adds	r0, r0, r2
 8023086:	4159      	adcs	r1, r3
 8023088:	2000      	movs	r0, #0
 802308a:	9103      	str	r1, [sp, #12]
 802308c:	9002      	str	r0, [sp, #8]
 802308e:	4652      	mov	r2, sl
 8023090:	9b04      	ldr	r3, [sp, #16]
 8023092:	0020      	movs	r0, r4
 8023094:	9905      	ldr	r1, [sp, #20]
 8023096:	f7dd fa93 	bl	80005c0 <__aeabi_lmul>
 802309a:	9b02      	ldr	r3, [sp, #8]
 802309c:	9c03      	ldr	r4, [sp, #12]
 802309e:	18c0      	adds	r0, r0, r3
 80230a0:	4161      	adcs	r1, r4
 80230a2:	2380      	movs	r3, #128	@ 0x80
 80230a4:	2400      	movs	r4, #0
 80230a6:	061b      	lsls	r3, r3, #24
 80230a8:	18c0      	adds	r0, r0, r3
 80230aa:	4161      	adcs	r1, r4
 80230ac:	464a      	mov	r2, r9
 80230ae:	004b      	lsls	r3, r1, #1
 80230b0:	50b3      	str	r3, [r6, r2]
 80230b2:	2308      	movs	r3, #8
 80230b4:	469c      	mov	ip, r3
 80230b6:	9b08      	ldr	r3, [sp, #32]
 80230b8:	44e0      	add	r8, ip
 80230ba:	3708      	adds	r7, #8
 80230bc:	3608      	adds	r6, #8
 80230be:	4598      	cmp	r8, r3
 80230c0:	d196      	bne.n	8022ff0 <arm_cfft_radix4by2_inverse_q31+0x3c>
 80230c2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80230c4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80230c6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80230c8:	2302      	movs	r3, #2
 80230ca:	003a      	movs	r2, r7
 80230cc:	0029      	movs	r1, r5
 80230ce:	0020      	movs	r0, r4
 80230d0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80230d2:	f000 fb3b 	bl	802374c <arm_radix4_butterfly_inverse_q31>
 80230d6:	46a4      	mov	ip, r4
 80230d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80230da:	2302      	movs	r3, #2
 80230dc:	0088      	lsls	r0, r1, #2
 80230de:	4460      	add	r0, ip
 80230e0:	003a      	movs	r2, r7
 80230e2:	0029      	movs	r1, r5
 80230e4:	f000 fb32 	bl	802374c <arm_radix4_butterfly_inverse_q31>
 80230e8:	46a4      	mov	ip, r4
 80230ea:	0128      	lsls	r0, r5, #4
 80230ec:	4460      	add	r0, ip
 80230ee:	6833      	ldr	r3, [r6, #0]
 80230f0:	005b      	lsls	r3, r3, #1
 80230f2:	6033      	str	r3, [r6, #0]
 80230f4:	6873      	ldr	r3, [r6, #4]
 80230f6:	005b      	lsls	r3, r3, #1
 80230f8:	6073      	str	r3, [r6, #4]
 80230fa:	68b3      	ldr	r3, [r6, #8]
 80230fc:	005b      	lsls	r3, r3, #1
 80230fe:	60b3      	str	r3, [r6, #8]
 8023100:	68f3      	ldr	r3, [r6, #12]
 8023102:	005b      	lsls	r3, r3, #1
 8023104:	60f3      	str	r3, [r6, #12]
 8023106:	3610      	adds	r6, #16
 8023108:	42b0      	cmp	r0, r6
 802310a:	d1f0      	bne.n	80230ee <arm_cfft_radix4by2_inverse_q31+0x13a>
 802310c:	b00f      	add	sp, #60	@ 0x3c
 802310e:	bc3c      	pop	{r2, r3, r4, r5}
 8023110:	4690      	mov	r8, r2
 8023112:	4699      	mov	r9, r3
 8023114:	46a2      	mov	sl, r4
 8023116:	46ab      	mov	fp, r5
 8023118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802311a:	2302      	movs	r3, #2
 802311c:	2100      	movs	r1, #0
 802311e:	0015      	movs	r5, r2
 8023120:	f000 fb14 	bl	802374c <arm_radix4_butterfly_inverse_q31>
 8023124:	46bc      	mov	ip, r7
 8023126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023128:	002a      	movs	r2, r5
 802312a:	0098      	lsls	r0, r3, #2
 802312c:	4460      	add	r0, ip
 802312e:	2302      	movs	r3, #2
 8023130:	2100      	movs	r1, #0
 8023132:	f000 fb0b 	bl	802374c <arm_radix4_butterfly_inverse_q31>
 8023136:	e7e9      	b.n	802310c <arm_cfft_radix4by2_inverse_q31+0x158>

08023138 <arm_cfft_q31>:
 8023138:	b570      	push	{r4, r5, r6, lr}
 802313a:	001e      	movs	r6, r3
 802313c:	2380      	movs	r3, #128	@ 0x80
 802313e:	000d      	movs	r5, r1
 8023140:	0004      	movs	r4, r0
 8023142:	8801      	ldrh	r1, [r0, #0]
 8023144:	005b      	lsls	r3, r3, #1
 8023146:	2a01      	cmp	r2, #1
 8023148:	d028      	beq.n	802319c <arm_cfft_q31+0x64>
 802314a:	4299      	cmp	r1, r3
 802314c:	d020      	beq.n	8023190 <arm_cfft_q31+0x58>
 802314e:	d812      	bhi.n	8023176 <arm_cfft_q31+0x3e>
 8023150:	2920      	cmp	r1, #32
 8023152:	d004      	beq.n	802315e <arm_cfft_q31+0x26>
 8023154:	d949      	bls.n	80231ea <arm_cfft_q31+0xb2>
 8023156:	2940      	cmp	r1, #64	@ 0x40
 8023158:	d01a      	beq.n	8023190 <arm_cfft_q31+0x58>
 802315a:	2980      	cmp	r1, #128	@ 0x80
 802315c:	d103      	bne.n	8023166 <arm_cfft_q31+0x2e>
 802315e:	6862      	ldr	r2, [r4, #4]
 8023160:	0028      	movs	r0, r5
 8023162:	f7ff fe65 	bl	8022e30 <arm_cfft_radix4by2_q31>
 8023166:	2e00      	cmp	r6, #0
 8023168:	d004      	beq.n	8023174 <arm_cfft_q31+0x3c>
 802316a:	68a2      	ldr	r2, [r4, #8]
 802316c:	89a1      	ldrh	r1, [r4, #12]
 802316e:	0028      	movs	r0, r5
 8023170:	f7dc ffca 	bl	8000108 <arm_bitreversal_32>
 8023174:	bd70      	pop	{r4, r5, r6, pc}
 8023176:	2380      	movs	r3, #128	@ 0x80
 8023178:	00db      	lsls	r3, r3, #3
 802317a:	4299      	cmp	r1, r3
 802317c:	d008      	beq.n	8023190 <arm_cfft_q31+0x58>
 802317e:	d92f      	bls.n	80231e0 <arm_cfft_q31+0xa8>
 8023180:	2380      	movs	r3, #128	@ 0x80
 8023182:	011b      	lsls	r3, r3, #4
 8023184:	4299      	cmp	r1, r3
 8023186:	d0ea      	beq.n	802315e <arm_cfft_q31+0x26>
 8023188:	2380      	movs	r3, #128	@ 0x80
 802318a:	015b      	lsls	r3, r3, #5
 802318c:	4299      	cmp	r1, r3
 802318e:	d1ea      	bne.n	8023166 <arm_cfft_q31+0x2e>
 8023190:	2301      	movs	r3, #1
 8023192:	6862      	ldr	r2, [r4, #4]
 8023194:	0028      	movs	r0, r5
 8023196:	f000 f833 	bl	8023200 <arm_radix4_butterfly_q31>
 802319a:	e7e4      	b.n	8023166 <arm_cfft_q31+0x2e>
 802319c:	4299      	cmp	r1, r3
 802319e:	d019      	beq.n	80231d4 <arm_cfft_q31+0x9c>
 80231a0:	d80b      	bhi.n	80231ba <arm_cfft_q31+0x82>
 80231a2:	2920      	cmp	r1, #32
 80231a4:	d004      	beq.n	80231b0 <arm_cfft_q31+0x78>
 80231a6:	d928      	bls.n	80231fa <arm_cfft_q31+0xc2>
 80231a8:	2940      	cmp	r1, #64	@ 0x40
 80231aa:	d013      	beq.n	80231d4 <arm_cfft_q31+0x9c>
 80231ac:	2980      	cmp	r1, #128	@ 0x80
 80231ae:	d1da      	bne.n	8023166 <arm_cfft_q31+0x2e>
 80231b0:	6862      	ldr	r2, [r4, #4]
 80231b2:	0028      	movs	r0, r5
 80231b4:	f7ff fefe 	bl	8022fb4 <arm_cfft_radix4by2_inverse_q31>
 80231b8:	e7d5      	b.n	8023166 <arm_cfft_q31+0x2e>
 80231ba:	2380      	movs	r3, #128	@ 0x80
 80231bc:	00db      	lsls	r3, r3, #3
 80231be:	4299      	cmp	r1, r3
 80231c0:	d008      	beq.n	80231d4 <arm_cfft_q31+0x9c>
 80231c2:	d915      	bls.n	80231f0 <arm_cfft_q31+0xb8>
 80231c4:	2380      	movs	r3, #128	@ 0x80
 80231c6:	011b      	lsls	r3, r3, #4
 80231c8:	4299      	cmp	r1, r3
 80231ca:	d0f1      	beq.n	80231b0 <arm_cfft_q31+0x78>
 80231cc:	2380      	movs	r3, #128	@ 0x80
 80231ce:	015b      	lsls	r3, r3, #5
 80231d0:	4299      	cmp	r1, r3
 80231d2:	d1c8      	bne.n	8023166 <arm_cfft_q31+0x2e>
 80231d4:	2301      	movs	r3, #1
 80231d6:	6862      	ldr	r2, [r4, #4]
 80231d8:	0028      	movs	r0, r5
 80231da:	f000 fab7 	bl	802374c <arm_radix4_butterfly_inverse_q31>
 80231de:	e7c2      	b.n	8023166 <arm_cfft_q31+0x2e>
 80231e0:	2380      	movs	r3, #128	@ 0x80
 80231e2:	009b      	lsls	r3, r3, #2
 80231e4:	4299      	cmp	r1, r3
 80231e6:	d0ba      	beq.n	802315e <arm_cfft_q31+0x26>
 80231e8:	e7bd      	b.n	8023166 <arm_cfft_q31+0x2e>
 80231ea:	2910      	cmp	r1, #16
 80231ec:	d1bb      	bne.n	8023166 <arm_cfft_q31+0x2e>
 80231ee:	e7cf      	b.n	8023190 <arm_cfft_q31+0x58>
 80231f0:	2380      	movs	r3, #128	@ 0x80
 80231f2:	009b      	lsls	r3, r3, #2
 80231f4:	4299      	cmp	r1, r3
 80231f6:	d0db      	beq.n	80231b0 <arm_cfft_q31+0x78>
 80231f8:	e7b5      	b.n	8023166 <arm_cfft_q31+0x2e>
 80231fa:	2910      	cmp	r1, #16
 80231fc:	d1b3      	bne.n	8023166 <arm_cfft_q31+0x2e>
 80231fe:	e7e9      	b.n	80231d4 <arm_cfft_q31+0x9c>

08023200 <arm_radix4_butterfly_q31>:
 8023200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023202:	464d      	mov	r5, r9
 8023204:	4644      	mov	r4, r8
 8023206:	465f      	mov	r7, fp
 8023208:	4656      	mov	r6, sl
 802320a:	469c      	mov	ip, r3
 802320c:	b4f0      	push	{r4, r5, r6, r7}
 802320e:	b0a7      	sub	sp, #156	@ 0x9c
 8023210:	9114      	str	r1, [sp, #80]	@ 0x50
 8023212:	0889      	lsrs	r1, r1, #2
 8023214:	9310      	str	r3, [sp, #64]	@ 0x40
 8023216:	00cb      	lsls	r3, r1, #3
 8023218:	0015      	movs	r5, r2
 802321a:	9223      	str	r2, [sp, #140]	@ 0x8c
 802321c:	18c2      	adds	r2, r0, r3
 802321e:	000c      	movs	r4, r1
 8023220:	469a      	mov	sl, r3
 8023222:	9124      	str	r1, [sp, #144]	@ 0x90
 8023224:	18d1      	adds	r1, r2, r3
 8023226:	4663      	mov	r3, ip
 8023228:	468b      	mov	fp, r1
 802322a:	0119      	lsls	r1, r3, #4
 802322c:	910d      	str	r1, [sp, #52]	@ 0x34
 802322e:	00d9      	lsls	r1, r3, #3
 8023230:	005b      	lsls	r3, r3, #1
 8023232:	4463      	add	r3, ip
 8023234:	910e      	str	r1, [sp, #56]	@ 0x38
 8023236:	00d9      	lsls	r1, r3, #3
 8023238:	465b      	mov	r3, fp
 802323a:	44da      	add	sl, fp
 802323c:	4690      	mov	r8, r2
 802323e:	4683      	mov	fp, r0
 8023240:	4699      	mov	r9, r3
 8023242:	9022      	str	r0, [sp, #136]	@ 0x88
 8023244:	9025      	str	r0, [sp, #148]	@ 0x94
 8023246:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023248:	9502      	str	r5, [sp, #8]
 802324a:	9500      	str	r5, [sp, #0]
 802324c:	9501      	str	r5, [sp, #4]
 802324e:	9407      	str	r4, [sp, #28]
 8023250:	465b      	mov	r3, fp
 8023252:	681b      	ldr	r3, [r3, #0]
 8023254:	4642      	mov	r2, r8
 8023256:	111c      	asrs	r4, r3, #4
 8023258:	464b      	mov	r3, r9
 802325a:	4658      	mov	r0, fp
 802325c:	681b      	ldr	r3, [r3, #0]
 802325e:	6812      	ldr	r2, [r2, #0]
 8023260:	111b      	asrs	r3, r3, #4
 8023262:	18e7      	adds	r7, r4, r3
 8023264:	1ae3      	subs	r3, r4, r3
 8023266:	1114      	asrs	r4, r2, #4
 8023268:	4652      	mov	r2, sl
 802326a:	6840      	ldr	r0, [r0, #4]
 802326c:	6812      	ldr	r2, [r2, #0]
 802326e:	1105      	asrs	r5, r0, #4
 8023270:	4648      	mov	r0, r9
 8023272:	9303      	str	r3, [sp, #12]
 8023274:	1113      	asrs	r3, r2, #4
 8023276:	18e2      	adds	r2, r4, r3
 8023278:	465c      	mov	r4, fp
 802327a:	6840      	ldr	r0, [r0, #4]
 802327c:	1103      	asrs	r3, r0, #4
 802327e:	18ee      	adds	r6, r5, r3
 8023280:	1ae8      	subs	r0, r5, r3
 8023282:	18bb      	adds	r3, r7, r2
 8023284:	6023      	str	r3, [r4, #0]
 8023286:	4644      	mov	r4, r8
 8023288:	6864      	ldr	r4, [r4, #4]
 802328a:	9004      	str	r0, [sp, #16]
 802328c:	1125      	asrs	r5, r4, #4
 802328e:	4654      	mov	r4, sl
 8023290:	6864      	ldr	r4, [r4, #4]
 8023292:	1123      	asrs	r3, r4, #4
 8023294:	465c      	mov	r4, fp
 8023296:	18eb      	adds	r3, r5, r3
 8023298:	18f1      	adds	r1, r6, r3
 802329a:	6061      	str	r1, [r4, #4]
 802329c:	4655      	mov	r5, sl
 802329e:	4644      	mov	r4, r8
 80232a0:	686d      	ldr	r5, [r5, #4]
 80232a2:	6864      	ldr	r4, [r4, #4]
 80232a4:	1129      	asrs	r1, r5, #4
 80232a6:	1124      	asrs	r4, r4, #4
 80232a8:	1a64      	subs	r4, r4, r1
 80232aa:	4641      	mov	r1, r8
 80232ac:	6809      	ldr	r1, [r1, #0]
 80232ae:	9405      	str	r4, [sp, #20]
 80232b0:	1108      	asrs	r0, r1, #4
 80232b2:	4651      	mov	r1, sl
 80232b4:	6809      	ldr	r1, [r1, #0]
 80232b6:	1abc      	subs	r4, r7, r2
 80232b8:	1109      	asrs	r1, r1, #4
 80232ba:	1a41      	subs	r1, r0, r1
 80232bc:	17e2      	asrs	r2, r4, #31
 80232be:	9106      	str	r1, [sp, #24]
 80232c0:	0011      	movs	r1, r2
 80232c2:	9a01      	ldr	r2, [sp, #4]
 80232c4:	9108      	str	r1, [sp, #32]
 80232c6:	6817      	ldr	r7, [r2, #0]
 80232c8:	17fd      	asrs	r5, r7, #31
 80232ca:	0028      	movs	r0, r5
 80232cc:	1af5      	subs	r5, r6, r3
 80232ce:	17ee      	asrs	r6, r5, #31
 80232d0:	960a      	str	r6, [sp, #40]	@ 0x28
 80232d2:	6856      	ldr	r6, [r2, #4]
 80232d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80232d6:	17f3      	asrs	r3, r6, #31
 80232d8:	003a      	movs	r2, r7
 80232da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80232dc:	0003      	movs	r3, r0
 80232de:	0020      	movs	r0, r4
 80232e0:	f7dd f96e 	bl	80005c0 <__aeabi_lmul>
 80232e4:	0032      	movs	r2, r6
 80232e6:	17f3      	asrs	r3, r6, #31
 80232e8:	910c      	str	r1, [sp, #48]	@ 0x30
 80232ea:	0028      	movs	r0, r5
 80232ec:	17e9      	asrs	r1, r5, #31
 80232ee:	f7dd f967 	bl	80005c0 <__aeabi_lmul>
 80232f2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80232f4:	002a      	movs	r2, r5
 80232f6:	4684      	mov	ip, r0
 80232f8:	4640      	mov	r0, r8
 80232fa:	4461      	add	r1, ip
 80232fc:	0049      	lsls	r1, r1, #1
 80232fe:	6001      	str	r1, [r0, #0]
 8023300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023302:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023304:	0038      	movs	r0, r7
 8023306:	f7dd f95b 	bl	80005c0 <__aeabi_lmul>
 802330a:	0032      	movs	r2, r6
 802330c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802330e:	000d      	movs	r5, r1
 8023310:	0020      	movs	r0, r4
 8023312:	9908      	ldr	r1, [sp, #32]
 8023314:	f7dd f954 	bl	80005c0 <__aeabi_lmul>
 8023318:	4646      	mov	r6, r8
 802331a:	1a6d      	subs	r5, r5, r1
 802331c:	006d      	lsls	r5, r5, #1
 802331e:	6075      	str	r5, [r6, #4]
 8023320:	9903      	ldr	r1, [sp, #12]
 8023322:	9d05      	ldr	r5, [sp, #20]
 8023324:	000c      	movs	r4, r1
 8023326:	46ac      	mov	ip, r5
 8023328:	4464      	add	r4, ip
 802332a:	17e6      	asrs	r6, r4, #31
 802332c:	0031      	movs	r1, r6
 802332e:	9b00      	ldr	r3, [sp, #0]
 8023330:	9804      	ldr	r0, [sp, #16]
 8023332:	681e      	ldr	r6, [r3, #0]
 8023334:	17f7      	asrs	r7, r6, #31
 8023336:	9709      	str	r7, [sp, #36]	@ 0x24
 8023338:	9f06      	ldr	r7, [sp, #24]
 802333a:	0032      	movs	r2, r6
 802333c:	1bc7      	subs	r7, r0, r7
 802333e:	17fd      	asrs	r5, r7, #31
 8023340:	950a      	str	r5, [sp, #40]	@ 0x28
 8023342:	685d      	ldr	r5, [r3, #4]
 8023344:	17f3      	asrs	r3, r6, #31
 8023346:	17e8      	asrs	r0, r5, #31
 8023348:	900b      	str	r0, [sp, #44]	@ 0x2c
 802334a:	0020      	movs	r0, r4
 802334c:	9108      	str	r1, [sp, #32]
 802334e:	f7dd f937 	bl	80005c0 <__aeabi_lmul>
 8023352:	002a      	movs	r2, r5
 8023354:	17eb      	asrs	r3, r5, #31
 8023356:	910c      	str	r1, [sp, #48]	@ 0x30
 8023358:	0038      	movs	r0, r7
 802335a:	17f9      	asrs	r1, r7, #31
 802335c:	f7dd f930 	bl	80005c0 <__aeabi_lmul>
 8023360:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023362:	003a      	movs	r2, r7
 8023364:	4684      	mov	ip, r0
 8023366:	4648      	mov	r0, r9
 8023368:	4461      	add	r1, ip
 802336a:	0049      	lsls	r1, r1, #1
 802336c:	6001      	str	r1, [r0, #0]
 802336e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023370:	0030      	movs	r0, r6
 8023372:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023374:	f7dd f924 	bl	80005c0 <__aeabi_lmul>
 8023378:	002a      	movs	r2, r5
 802337a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802337c:	000e      	movs	r6, r1
 802337e:	0020      	movs	r0, r4
 8023380:	9908      	ldr	r1, [sp, #32]
 8023382:	f7dd f91d 	bl	80005c0 <__aeabi_lmul>
 8023386:	464c      	mov	r4, r9
 8023388:	9d05      	ldr	r5, [sp, #20]
 802338a:	1a76      	subs	r6, r6, r1
 802338c:	9903      	ldr	r1, [sp, #12]
 802338e:	0076      	lsls	r6, r6, #1
 8023390:	6066      	str	r6, [r4, #4]
 8023392:	1b4c      	subs	r4, r1, r5
 8023394:	9e06      	ldr	r6, [sp, #24]
 8023396:	17e1      	asrs	r1, r4, #31
 8023398:	9103      	str	r1, [sp, #12]
 802339a:	9902      	ldr	r1, [sp, #8]
 802339c:	46b4      	mov	ip, r6
 802339e:	680f      	ldr	r7, [r1, #0]
 80233a0:	9804      	ldr	r0, [sp, #16]
 80233a2:	17fd      	asrs	r5, r7, #31
 80233a4:	002b      	movs	r3, r5
 80233a6:	684e      	ldr	r6, [r1, #4]
 80233a8:	4460      	add	r0, ip
 80233aa:	0005      	movs	r5, r0
 80233ac:	17c0      	asrs	r0, r0, #31
 80233ae:	9005      	str	r0, [sp, #20]
 80233b0:	17f0      	asrs	r0, r6, #31
 80233b2:	9006      	str	r0, [sp, #24]
 80233b4:	003a      	movs	r2, r7
 80233b6:	0020      	movs	r0, r4
 80233b8:	17e1      	asrs	r1, r4, #31
 80233ba:	9304      	str	r3, [sp, #16]
 80233bc:	f7dd f900 	bl	80005c0 <__aeabi_lmul>
 80233c0:	0032      	movs	r2, r6
 80233c2:	9108      	str	r1, [sp, #32]
 80233c4:	17f3      	asrs	r3, r6, #31
 80233c6:	0028      	movs	r0, r5
 80233c8:	17e9      	asrs	r1, r5, #31
 80233ca:	f7dd f8f9 	bl	80005c0 <__aeabi_lmul>
 80233ce:	9808      	ldr	r0, [sp, #32]
 80233d0:	002a      	movs	r2, r5
 80233d2:	4684      	mov	ip, r0
 80233d4:	4650      	mov	r0, sl
 80233d6:	4461      	add	r1, ip
 80233d8:	0049      	lsls	r1, r1, #1
 80233da:	6001      	str	r1, [r0, #0]
 80233dc:	9b05      	ldr	r3, [sp, #20]
 80233de:	9904      	ldr	r1, [sp, #16]
 80233e0:	0038      	movs	r0, r7
 80233e2:	f7dd f8ed 	bl	80005c0 <__aeabi_lmul>
 80233e6:	0020      	movs	r0, r4
 80233e8:	2408      	movs	r4, #8
 80233ea:	000d      	movs	r5, r1
 80233ec:	0032      	movs	r2, r6
 80233ee:	9b06      	ldr	r3, [sp, #24]
 80233f0:	9903      	ldr	r1, [sp, #12]
 80233f2:	f7dd f8e5 	bl	80005c0 <__aeabi_lmul>
 80233f6:	46a4      	mov	ip, r4
 80233f8:	4650      	mov	r0, sl
 80233fa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80233fc:	44e3      	add	fp, ip
 80233fe:	44e0      	add	r8, ip
 8023400:	44e1      	add	r9, ip
 8023402:	44e2      	add	sl, ip
 8023404:	46a4      	mov	ip, r4
 8023406:	1a6d      	subs	r5, r5, r1
 8023408:	006d      	lsls	r5, r5, #1
 802340a:	9a01      	ldr	r2, [sp, #4]
 802340c:	6045      	str	r5, [r0, #4]
 802340e:	9807      	ldr	r0, [sp, #28]
 8023410:	4462      	add	r2, ip
 8023412:	3801      	subs	r0, #1
 8023414:	9201      	str	r2, [sp, #4]
 8023416:	9007      	str	r0, [sp, #28]
 8023418:	9b00      	ldr	r3, [sp, #0]
 802341a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802341c:	9902      	ldr	r1, [sp, #8]
 802341e:	4694      	mov	ip, r2
 8023420:	4463      	add	r3, ip
 8023422:	9300      	str	r3, [sp, #0]
 8023424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023426:	469c      	mov	ip, r3
 8023428:	4461      	add	r1, ip
 802342a:	9102      	str	r1, [sp, #8]
 802342c:	2800      	cmp	r0, #0
 802342e:	d000      	beq.n	8023432 <arm_radix4_butterfly_q31+0x232>
 8023430:	e70e      	b.n	8023250 <arm_radix4_butterfly_q31+0x50>
 8023432:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023434:	009b      	lsls	r3, r3, #2
 8023436:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023438:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802343a:	9320      	str	r3, [sp, #128]	@ 0x80
 802343c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802343e:	2b04      	cmp	r3, #4
 8023440:	d800      	bhi.n	8023444 <arm_radix4_butterfly_q31+0x244>
 8023442:	e180      	b.n	8023746 <arm_radix4_butterfly_q31+0x546>
 8023444:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023446:	0893      	lsrs	r3, r2, #2
 8023448:	1e59      	subs	r1, r3, #1
 802344a:	9321      	str	r3, [sp, #132]	@ 0x84
 802344c:	00db      	lsls	r3, r3, #3
 802344e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8023450:	00d3      	lsls	r3, r2, #3
 8023452:	9300      	str	r3, [sp, #0]
 8023454:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023456:	911a      	str	r1, [sp, #104]	@ 0x68
 8023458:	00da      	lsls	r2, r3, #3
 802345a:	921e      	str	r2, [sp, #120]	@ 0x78
 802345c:	011a      	lsls	r2, r3, #4
 802345e:	921d      	str	r2, [sp, #116]	@ 0x74
 8023460:	001a      	movs	r2, r3
 8023462:	4694      	mov	ip, r2
 8023464:	005b      	lsls	r3, r3, #1
 8023466:	4463      	add	r3, ip
 8023468:	00db      	lsls	r3, r3, #3
 802346a:	931c      	str	r3, [sp, #112]	@ 0x70
 802346c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802346e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023470:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023472:	9318      	str	r3, [sp, #96]	@ 0x60
 8023474:	9319      	str	r3, [sp, #100]	@ 0x64
 8023476:	9316      	str	r3, [sp, #88]	@ 0x58
 8023478:	2300      	movs	r3, #0
 802347a:	9315      	str	r3, [sp, #84]	@ 0x54
 802347c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802347e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023480:	681a      	ldr	r2, [r3, #0]
 8023482:	685b      	ldr	r3, [r3, #4]
 8023484:	9205      	str	r2, [sp, #20]
 8023486:	9306      	str	r3, [sp, #24]
 8023488:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802348a:	468c      	mov	ip, r1
 802348c:	681a      	ldr	r2, [r3, #0]
 802348e:	685b      	ldr	r3, [r3, #4]
 8023490:	9207      	str	r2, [sp, #28]
 8023492:	9308      	str	r3, [sp, #32]
 8023494:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023496:	681a      	ldr	r2, [r3, #0]
 8023498:	685b      	ldr	r3, [r3, #4]
 802349a:	9209      	str	r2, [sp, #36]	@ 0x24
 802349c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802349e:	930a      	str	r3, [sp, #40]	@ 0x28
 80234a0:	0013      	movs	r3, r2
 80234a2:	4463      	add	r3, ip
 80234a4:	4698      	mov	r8, r3
 80234a6:	0013      	movs	r3, r2
 80234a8:	4442      	add	r2, r8
 80234aa:	4691      	mov	r9, r2
 80234ac:	001a      	movs	r2, r3
 80234ae:	444a      	add	r2, r9
 80234b0:	4692      	mov	sl, r2
 80234b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80234b4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80234b6:	4293      	cmp	r3, r2
 80234b8:	d800      	bhi.n	80234bc <arm_radix4_butterfly_q31+0x2bc>
 80234ba:	e0dd      	b.n	8023678 <arm_radix4_butterfly_q31+0x478>
 80234bc:	4694      	mov	ip, r2
 80234be:	468b      	mov	fp, r1
 80234c0:	4644      	mov	r4, r8
 80234c2:	4655      	mov	r5, sl
 80234c4:	9b07      	ldr	r3, [sp, #28]
 80234c6:	17db      	asrs	r3, r3, #31
 80234c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80234ca:	9b08      	ldr	r3, [sp, #32]
 80234cc:	17db      	asrs	r3, r3, #31
 80234ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80234d0:	9b05      	ldr	r3, [sp, #20]
 80234d2:	17db      	asrs	r3, r3, #31
 80234d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80234d6:	9b06      	ldr	r3, [sp, #24]
 80234d8:	17db      	asrs	r3, r3, #31
 80234da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80234dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80234de:	17db      	asrs	r3, r3, #31
 80234e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80234e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80234e4:	17db      	asrs	r3, r3, #31
 80234e6:	9311      	str	r3, [sp, #68]	@ 0x44
 80234e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80234ea:	4463      	add	r3, ip
 80234ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80234ee:	465b      	mov	r3, fp
 80234f0:	4659      	mov	r1, fp
 80234f2:	681a      	ldr	r2, [r3, #0]
 80234f4:	464b      	mov	r3, r9
 80234f6:	684f      	ldr	r7, [r1, #4]
 80234f8:	4649      	mov	r1, r9
 80234fa:	681b      	ldr	r3, [r3, #0]
 80234fc:	18d6      	adds	r6, r2, r3
 80234fe:	1ad3      	subs	r3, r2, r3
 8023500:	9301      	str	r3, [sp, #4]
 8023502:	684b      	ldr	r3, [r1, #4]
 8023504:	18f8      	adds	r0, r7, r3
 8023506:	1af9      	subs	r1, r7, r3
 8023508:	6827      	ldr	r7, [r4, #0]
 802350a:	9102      	str	r1, [sp, #8]
 802350c:	003a      	movs	r2, r7
 802350e:	682f      	ldr	r7, [r5, #0]
 8023510:	46bc      	mov	ip, r7
 8023512:	465f      	mov	r7, fp
 8023514:	4462      	add	r2, ip
 8023516:	18b3      	adds	r3, r6, r2
 8023518:	109b      	asrs	r3, r3, #2
 802351a:	603b      	str	r3, [r7, #0]
 802351c:	6867      	ldr	r7, [r4, #4]
 802351e:	1ab6      	subs	r6, r6, r2
 8023520:	46b8      	mov	r8, r7
 8023522:	686f      	ldr	r7, [r5, #4]
 8023524:	17f2      	asrs	r2, r6, #31
 8023526:	46bc      	mov	ip, r7
 8023528:	44e0      	add	r8, ip
 802352a:	4643      	mov	r3, r8
 802352c:	465f      	mov	r7, fp
 802352e:	18c1      	adds	r1, r0, r3
 8023530:	1089      	asrs	r1, r1, #2
 8023532:	6079      	str	r1, [r7, #4]
 8023534:	9900      	ldr	r1, [sp, #0]
 8023536:	4690      	mov	r8, r2
 8023538:	468c      	mov	ip, r1
 802353a:	6867      	ldr	r7, [r4, #4]
 802353c:	6869      	ldr	r1, [r5, #4]
 802353e:	44e3      	add	fp, ip
 8023540:	1a7f      	subs	r7, r7, r1
 8023542:	9703      	str	r7, [sp, #12]
 8023544:	6829      	ldr	r1, [r5, #0]
 8023546:	6827      	ldr	r7, [r4, #0]
 8023548:	1a7f      	subs	r7, r7, r1
 802354a:	9704      	str	r7, [sp, #16]
 802354c:	1ac7      	subs	r7, r0, r3
 802354e:	17fa      	asrs	r2, r7, #31
 8023550:	4692      	mov	sl, r2
 8023552:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023554:	9a07      	ldr	r2, [sp, #28]
 8023556:	0030      	movs	r0, r6
 8023558:	4641      	mov	r1, r8
 802355a:	f7dd f831 	bl	80005c0 <__aeabi_lmul>
 802355e:	9a08      	ldr	r2, [sp, #32]
 8023560:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023562:	9112      	str	r1, [sp, #72]	@ 0x48
 8023564:	0038      	movs	r0, r7
 8023566:	4651      	mov	r1, sl
 8023568:	f7dd f82a 	bl	80005c0 <__aeabi_lmul>
 802356c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802356e:	9a07      	ldr	r2, [sp, #28]
 8023570:	4684      	mov	ip, r0
 8023572:	4461      	add	r1, ip
 8023574:	1049      	asrs	r1, r1, #1
 8023576:	6021      	str	r1, [r4, #0]
 8023578:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802357a:	0038      	movs	r0, r7
 802357c:	4651      	mov	r1, sl
 802357e:	f7dd f81f 	bl	80005c0 <__aeabi_lmul>
 8023582:	9a08      	ldr	r2, [sp, #32]
 8023584:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023586:	000f      	movs	r7, r1
 8023588:	0030      	movs	r0, r6
 802358a:	4641      	mov	r1, r8
 802358c:	f7dd f818 	bl	80005c0 <__aeabi_lmul>
 8023590:	9b00      	ldr	r3, [sp, #0]
 8023592:	9a01      	ldr	r2, [sp, #4]
 8023594:	469c      	mov	ip, r3
 8023596:	9803      	ldr	r0, [sp, #12]
 8023598:	1a7f      	subs	r7, r7, r1
 802359a:	107f      	asrs	r7, r7, #1
 802359c:	6067      	str	r7, [r4, #4]
 802359e:	0016      	movs	r6, r2
 80235a0:	4464      	add	r4, ip
 80235a2:	4684      	mov	ip, r0
 80235a4:	4466      	add	r6, ip
 80235a6:	17f2      	asrs	r2, r6, #31
 80235a8:	4690      	mov	r8, r2
 80235aa:	9902      	ldr	r1, [sp, #8]
 80235ac:	9f04      	ldr	r7, [sp, #16]
 80235ae:	0030      	movs	r0, r6
 80235b0:	1bcf      	subs	r7, r1, r7
 80235b2:	17fa      	asrs	r2, r7, #31
 80235b4:	4692      	mov	sl, r2
 80235b6:	4641      	mov	r1, r8
 80235b8:	9a05      	ldr	r2, [sp, #20]
 80235ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80235bc:	f7dd f800 	bl	80005c0 <__aeabi_lmul>
 80235c0:	9a06      	ldr	r2, [sp, #24]
 80235c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80235c4:	9112      	str	r1, [sp, #72]	@ 0x48
 80235c6:	0038      	movs	r0, r7
 80235c8:	4651      	mov	r1, sl
 80235ca:	f7dc fff9 	bl	80005c0 <__aeabi_lmul>
 80235ce:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80235d0:	9a05      	ldr	r2, [sp, #20]
 80235d2:	4684      	mov	ip, r0
 80235d4:	4648      	mov	r0, r9
 80235d6:	4461      	add	r1, ip
 80235d8:	1049      	asrs	r1, r1, #1
 80235da:	6001      	str	r1, [r0, #0]
 80235dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80235de:	0038      	movs	r0, r7
 80235e0:	4651      	mov	r1, sl
 80235e2:	f7dc ffed 	bl	80005c0 <__aeabi_lmul>
 80235e6:	9a06      	ldr	r2, [sp, #24]
 80235e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80235ea:	000f      	movs	r7, r1
 80235ec:	0030      	movs	r0, r6
 80235ee:	4641      	mov	r1, r8
 80235f0:	f7dc ffe6 	bl	80005c0 <__aeabi_lmul>
 80235f4:	464e      	mov	r6, r9
 80235f6:	9a00      	ldr	r2, [sp, #0]
 80235f8:	9b01      	ldr	r3, [sp, #4]
 80235fa:	4694      	mov	ip, r2
 80235fc:	9803      	ldr	r0, [sp, #12]
 80235fe:	1a7f      	subs	r7, r7, r1
 8023600:	107f      	asrs	r7, r7, #1
 8023602:	6077      	str	r7, [r6, #4]
 8023604:	1a1e      	subs	r6, r3, r0
 8023606:	9b04      	ldr	r3, [sp, #16]
 8023608:	44e1      	add	r9, ip
 802360a:	469c      	mov	ip, r3
 802360c:	17f0      	asrs	r0, r6, #31
 802360e:	4680      	mov	r8, r0
 8023610:	9902      	ldr	r1, [sp, #8]
 8023612:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023614:	4461      	add	r1, ip
 8023616:	17cb      	asrs	r3, r1, #31
 8023618:	000f      	movs	r7, r1
 802361a:	469a      	mov	sl, r3
 802361c:	0030      	movs	r0, r6
 802361e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023620:	4641      	mov	r1, r8
 8023622:	f7dc ffcd 	bl	80005c0 <__aeabi_lmul>
 8023626:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023628:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802362a:	9101      	str	r1, [sp, #4]
 802362c:	0038      	movs	r0, r7
 802362e:	4651      	mov	r1, sl
 8023630:	f7dc ffc6 	bl	80005c0 <__aeabi_lmul>
 8023634:	9801      	ldr	r0, [sp, #4]
 8023636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023638:	4684      	mov	ip, r0
 802363a:	4461      	add	r1, ip
 802363c:	1049      	asrs	r1, r1, #1
 802363e:	6029      	str	r1, [r5, #0]
 8023640:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023642:	0038      	movs	r0, r7
 8023644:	4651      	mov	r1, sl
 8023646:	f7dc ffbb 	bl	80005c0 <__aeabi_lmul>
 802364a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802364c:	000f      	movs	r7, r1
 802364e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023650:	0030      	movs	r0, r6
 8023652:	4641      	mov	r1, r8
 8023654:	f7dc ffb4 	bl	80005c0 <__aeabi_lmul>
 8023658:	1a7f      	subs	r7, r7, r1
 802365a:	107f      	asrs	r7, r7, #1
 802365c:	606f      	str	r7, [r5, #4]
 802365e:	9a00      	ldr	r2, [sp, #0]
 8023660:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023662:	4694      	mov	ip, r2
 8023664:	4465      	add	r5, ip
 8023666:	468c      	mov	ip, r1
 8023668:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802366a:	0013      	movs	r3, r2
 802366c:	4462      	add	r2, ip
 802366e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023670:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023672:	429a      	cmp	r2, r3
 8023674:	d900      	bls.n	8023678 <arm_radix4_butterfly_q31+0x478>
 8023676:	e73a      	b.n	80234ee <arm_radix4_butterfly_q31+0x2ee>
 8023678:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802367a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802367c:	468c      	mov	ip, r1
 802367e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8023680:	4462      	add	r2, ip
 8023682:	468c      	mov	ip, r1
 8023684:	9216      	str	r2, [sp, #88]	@ 0x58
 8023686:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8023688:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802368a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802368c:	4462      	add	r2, ip
 802368e:	468c      	mov	ip, r1
 8023690:	9219      	str	r2, [sp, #100]	@ 0x64
 8023692:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023694:	3301      	adds	r3, #1
 8023696:	4462      	add	r2, ip
 8023698:	9218      	str	r2, [sp, #96]	@ 0x60
 802369a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802369c:	9315      	str	r3, [sp, #84]	@ 0x54
 802369e:	3208      	adds	r2, #8
 80236a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80236a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80236a4:	4293      	cmp	r3, r2
 80236a6:	d800      	bhi.n	80236aa <arm_radix4_butterfly_q31+0x4aa>
 80236a8:	e6e8      	b.n	802347c <arm_radix4_butterfly_q31+0x27c>
 80236aa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80236ac:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80236ae:	009b      	lsls	r3, r3, #2
 80236b0:	931f      	str	r3, [sp, #124]	@ 0x7c
 80236b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80236b4:	9213      	str	r2, [sp, #76]	@ 0x4c
 80236b6:	089b      	lsrs	r3, r3, #2
 80236b8:	9320      	str	r3, [sp, #128]	@ 0x80
 80236ba:	2b04      	cmp	r3, #4
 80236bc:	d900      	bls.n	80236c0 <arm_radix4_butterfly_q31+0x4c0>
 80236be:	e6c1      	b.n	8023444 <arm_radix4_butterfly_q31+0x244>
 80236c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80236c2:	469a      	mov	sl, r3
 80236c4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80236c6:	691c      	ldr	r4, [r3, #16]
 80236c8:	685a      	ldr	r2, [r3, #4]
 80236ca:	46a1      	mov	r9, r4
 80236cc:	4690      	mov	r8, r2
 80236ce:	6819      	ldr	r1, [r3, #0]
 80236d0:	689a      	ldr	r2, [r3, #8]
 80236d2:	699f      	ldr	r7, [r3, #24]
 80236d4:	188d      	adds	r5, r1, r2
 80236d6:	444d      	add	r5, r9
 80236d8:	19ed      	adds	r5, r5, r7
 80236da:	69de      	ldr	r6, [r3, #28]
 80236dc:	601d      	str	r5, [r3, #0]
 80236de:	4645      	mov	r5, r8
 80236e0:	46b4      	mov	ip, r6
 80236e2:	68d8      	ldr	r0, [r3, #12]
 80236e4:	695c      	ldr	r4, [r3, #20]
 80236e6:	182d      	adds	r5, r5, r0
 80236e8:	192d      	adds	r5, r5, r4
 80236ea:	4465      	add	r5, ip
 80236ec:	605d      	str	r5, [r3, #4]
 80236ee:	1a8d      	subs	r5, r1, r2
 80236f0:	444d      	add	r5, r9
 80236f2:	1bed      	subs	r5, r5, r7
 80236f4:	609d      	str	r5, [r3, #8]
 80236f6:	4645      	mov	r5, r8
 80236f8:	1a2d      	subs	r5, r5, r0
 80236fa:	192d      	adds	r5, r5, r4
 80236fc:	1bad      	subs	r5, r5, r6
 80236fe:	464e      	mov	r6, r9
 8023700:	60dd      	str	r5, [r3, #12]
 8023702:	180d      	adds	r5, r1, r0
 8023704:	1bad      	subs	r5, r5, r6
 8023706:	4666      	mov	r6, ip
 8023708:	1bad      	subs	r5, r5, r6
 802370a:	611d      	str	r5, [r3, #16]
 802370c:	4645      	mov	r5, r8
 802370e:	1aad      	subs	r5, r5, r2
 8023710:	4442      	add	r2, r8
 8023712:	1b12      	subs	r2, r2, r4
 8023714:	1bd2      	subs	r2, r2, r7
 8023716:	1a08      	subs	r0, r1, r0
 8023718:	61da      	str	r2, [r3, #28]
 802371a:	4649      	mov	r1, r9
 802371c:	2201      	movs	r2, #1
 802371e:	1a41      	subs	r1, r0, r1
 8023720:	4252      	negs	r2, r2
 8023722:	4461      	add	r1, ip
 8023724:	4694      	mov	ip, r2
 8023726:	44e2      	add	sl, ip
 8023728:	4652      	mov	r2, sl
 802372a:	1b2d      	subs	r5, r5, r4
 802372c:	19ed      	adds	r5, r5, r7
 802372e:	615d      	str	r5, [r3, #20]
 8023730:	6199      	str	r1, [r3, #24]
 8023732:	3320      	adds	r3, #32
 8023734:	2a00      	cmp	r2, #0
 8023736:	d1c6      	bne.n	80236c6 <arm_radix4_butterfly_q31+0x4c6>
 8023738:	b027      	add	sp, #156	@ 0x9c
 802373a:	bc3c      	pop	{r2, r3, r4, r5}
 802373c:	4690      	mov	r8, r2
 802373e:	4699      	mov	r9, r3
 8023740:	46a2      	mov	sl, r4
 8023742:	46ab      	mov	fp, r5
 8023744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023746:	469a      	mov	sl, r3
 8023748:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802374a:	e7bc      	b.n	80236c6 <arm_radix4_butterfly_q31+0x4c6>

0802374c <arm_radix4_butterfly_inverse_q31>:
 802374c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802374e:	464d      	mov	r5, r9
 8023750:	4644      	mov	r4, r8
 8023752:	465f      	mov	r7, fp
 8023754:	4656      	mov	r6, sl
 8023756:	b4f0      	push	{r4, r5, r6, r7}
 8023758:	b0a7      	sub	sp, #156	@ 0x9c
 802375a:	469c      	mov	ip, r3
 802375c:	9114      	str	r1, [sp, #80]	@ 0x50
 802375e:	0889      	lsrs	r1, r1, #2
 8023760:	9310      	str	r3, [sp, #64]	@ 0x40
 8023762:	00cb      	lsls	r3, r1, #3
 8023764:	0015      	movs	r5, r2
 8023766:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023768:	18c2      	adds	r2, r0, r3
 802376a:	000c      	movs	r4, r1
 802376c:	9124      	str	r1, [sp, #144]	@ 0x90
 802376e:	18d1      	adds	r1, r2, r3
 8023770:	468b      	mov	fp, r1
 8023772:	469a      	mov	sl, r3
 8023774:	4663      	mov	r3, ip
 8023776:	44da      	add	sl, fp
 8023778:	46d0      	mov	r8, sl
 802377a:	4681      	mov	r9, r0
 802377c:	4692      	mov	sl, r2
 802377e:	0119      	lsls	r1, r3, #4
 8023780:	910d      	str	r1, [sp, #52]	@ 0x34
 8023782:	00d9      	lsls	r1, r3, #3
 8023784:	005b      	lsls	r3, r3, #1
 8023786:	4463      	add	r3, ip
 8023788:	910e      	str	r1, [sp, #56]	@ 0x38
 802378a:	00d9      	lsls	r1, r3, #3
 802378c:	9022      	str	r0, [sp, #136]	@ 0x88
 802378e:	9025      	str	r0, [sp, #148]	@ 0x94
 8023790:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023792:	9502      	str	r5, [sp, #8]
 8023794:	9500      	str	r5, [sp, #0]
 8023796:	9501      	str	r5, [sp, #4]
 8023798:	9409      	str	r4, [sp, #36]	@ 0x24
 802379a:	464b      	mov	r3, r9
 802379c:	681b      	ldr	r3, [r3, #0]
 802379e:	4652      	mov	r2, sl
 80237a0:	111c      	asrs	r4, r3, #4
 80237a2:	465b      	mov	r3, fp
 80237a4:	4648      	mov	r0, r9
 80237a6:	681b      	ldr	r3, [r3, #0]
 80237a8:	6812      	ldr	r2, [r2, #0]
 80237aa:	6840      	ldr	r0, [r0, #4]
 80237ac:	111b      	asrs	r3, r3, #4
 80237ae:	18e7      	adds	r7, r4, r3
 80237b0:	1ae3      	subs	r3, r4, r3
 80237b2:	1114      	asrs	r4, r2, #4
 80237b4:	4642      	mov	r2, r8
 80237b6:	1105      	asrs	r5, r0, #4
 80237b8:	4658      	mov	r0, fp
 80237ba:	6812      	ldr	r2, [r2, #0]
 80237bc:	6840      	ldr	r0, [r0, #4]
 80237be:	9303      	str	r3, [sp, #12]
 80237c0:	1113      	asrs	r3, r2, #4
 80237c2:	18e2      	adds	r2, r4, r3
 80237c4:	1103      	asrs	r3, r0, #4
 80237c6:	18ee      	adds	r6, r5, r3
 80237c8:	1ae8      	subs	r0, r5, r3
 80237ca:	464d      	mov	r5, r9
 80237cc:	18bb      	adds	r3, r7, r2
 80237ce:	602b      	str	r3, [r5, #0]
 80237d0:	4641      	mov	r1, r8
 80237d2:	4655      	mov	r5, sl
 80237d4:	6849      	ldr	r1, [r1, #4]
 80237d6:	686d      	ldr	r5, [r5, #4]
 80237d8:	110b      	asrs	r3, r1, #4
 80237da:	112d      	asrs	r5, r5, #4
 80237dc:	18eb      	adds	r3, r5, r3
 80237de:	464d      	mov	r5, r9
 80237e0:	18f1      	adds	r1, r6, r3
 80237e2:	6069      	str	r1, [r5, #4]
 80237e4:	4655      	mov	r5, sl
 80237e6:	686d      	ldr	r5, [r5, #4]
 80237e8:	9004      	str	r0, [sp, #16]
 80237ea:	112c      	asrs	r4, r5, #4
 80237ec:	4645      	mov	r5, r8
 80237ee:	686d      	ldr	r5, [r5, #4]
 80237f0:	1129      	asrs	r1, r5, #4
 80237f2:	1a65      	subs	r5, r4, r1
 80237f4:	4651      	mov	r1, sl
 80237f6:	6809      	ldr	r1, [r1, #0]
 80237f8:	1abc      	subs	r4, r7, r2
 80237fa:	1108      	asrs	r0, r1, #4
 80237fc:	4641      	mov	r1, r8
 80237fe:	17e2      	asrs	r2, r4, #31
 8023800:	6809      	ldr	r1, [r1, #0]
 8023802:	9207      	str	r2, [sp, #28]
 8023804:	9a01      	ldr	r2, [sp, #4]
 8023806:	1109      	asrs	r1, r1, #4
 8023808:	6817      	ldr	r7, [r2, #0]
 802380a:	1a41      	subs	r1, r0, r1
 802380c:	9106      	str	r1, [sp, #24]
 802380e:	0039      	movs	r1, r7
 8023810:	17ff      	asrs	r7, r7, #31
 8023812:	0038      	movs	r0, r7
 8023814:	9505      	str	r5, [sp, #20]
 8023816:	1af5      	subs	r5, r6, r3
 8023818:	17ef      	asrs	r7, r5, #31
 802381a:	970b      	str	r7, [sp, #44]	@ 0x2c
 802381c:	6857      	ldr	r7, [r2, #4]
 802381e:	0003      	movs	r3, r0
 8023820:	17fe      	asrs	r6, r7, #31
 8023822:	000a      	movs	r2, r1
 8023824:	9108      	str	r1, [sp, #32]
 8023826:	900a      	str	r0, [sp, #40]	@ 0x28
 8023828:	17e1      	asrs	r1, r4, #31
 802382a:	0020      	movs	r0, r4
 802382c:	960c      	str	r6, [sp, #48]	@ 0x30
 802382e:	f7dc fec7 	bl	80005c0 <__aeabi_lmul>
 8023832:	003a      	movs	r2, r7
 8023834:	17fb      	asrs	r3, r7, #31
 8023836:	000e      	movs	r6, r1
 8023838:	0028      	movs	r0, r5
 802383a:	17e9      	asrs	r1, r5, #31
 802383c:	f7dc fec0 	bl	80005c0 <__aeabi_lmul>
 8023840:	4653      	mov	r3, sl
 8023842:	1a76      	subs	r6, r6, r1
 8023844:	0076      	lsls	r6, r6, #1
 8023846:	601e      	str	r6, [r3, #0]
 8023848:	002a      	movs	r2, r5
 802384a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802384c:	9808      	ldr	r0, [sp, #32]
 802384e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023850:	f7dc feb6 	bl	80005c0 <__aeabi_lmul>
 8023854:	003a      	movs	r2, r7
 8023856:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023858:	000d      	movs	r5, r1
 802385a:	0020      	movs	r0, r4
 802385c:	9907      	ldr	r1, [sp, #28]
 802385e:	f7dc feaf 	bl	80005c0 <__aeabi_lmul>
 8023862:	4657      	mov	r7, sl
 8023864:	186d      	adds	r5, r5, r1
 8023866:	006d      	lsls	r5, r5, #1
 8023868:	607d      	str	r5, [r7, #4]
 802386a:	9b03      	ldr	r3, [sp, #12]
 802386c:	9e06      	ldr	r6, [sp, #24]
 802386e:	9d05      	ldr	r5, [sp, #20]
 8023870:	46b4      	mov	ip, r6
 8023872:	1b5d      	subs	r5, r3, r5
 8023874:	9b00      	ldr	r3, [sp, #0]
 8023876:	17ef      	asrs	r7, r5, #31
 8023878:	0039      	movs	r1, r7
 802387a:	681f      	ldr	r7, [r3, #0]
 802387c:	17fc      	asrs	r4, r7, #31
 802387e:	0020      	movs	r0, r4
 8023880:	9c04      	ldr	r4, [sp, #16]
 8023882:	4464      	add	r4, ip
 8023884:	17e6      	asrs	r6, r4, #31
 8023886:	9407      	str	r4, [sp, #28]
 8023888:	9608      	str	r6, [sp, #32]
 802388a:	685e      	ldr	r6, [r3, #4]
 802388c:	900b      	str	r0, [sp, #44]	@ 0x2c
 802388e:	17f2      	asrs	r2, r6, #31
 8023890:	0003      	movs	r3, r0
 8023892:	920c      	str	r2, [sp, #48]	@ 0x30
 8023894:	0028      	movs	r0, r5
 8023896:	003a      	movs	r2, r7
 8023898:	910a      	str	r1, [sp, #40]	@ 0x28
 802389a:	f7dc fe91 	bl	80005c0 <__aeabi_lmul>
 802389e:	0032      	movs	r2, r6
 80238a0:	17f3      	asrs	r3, r6, #31
 80238a2:	9807      	ldr	r0, [sp, #28]
 80238a4:	000c      	movs	r4, r1
 80238a6:	9908      	ldr	r1, [sp, #32]
 80238a8:	f7dc fe8a 	bl	80005c0 <__aeabi_lmul>
 80238ac:	4658      	mov	r0, fp
 80238ae:	1a64      	subs	r4, r4, r1
 80238b0:	0064      	lsls	r4, r4, #1
 80238b2:	9a07      	ldr	r2, [sp, #28]
 80238b4:	6004      	str	r4, [r0, #0]
 80238b6:	9b08      	ldr	r3, [sp, #32]
 80238b8:	0038      	movs	r0, r7
 80238ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80238bc:	f7dc fe80 	bl	80005c0 <__aeabi_lmul>
 80238c0:	0032      	movs	r2, r6
 80238c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80238c4:	000c      	movs	r4, r1
 80238c6:	0028      	movs	r0, r5
 80238c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80238ca:	f7dc fe79 	bl	80005c0 <__aeabi_lmul>
 80238ce:	9d05      	ldr	r5, [sp, #20]
 80238d0:	465f      	mov	r7, fp
 80238d2:	46ac      	mov	ip, r5
 80238d4:	1864      	adds	r4, r4, r1
 80238d6:	9903      	ldr	r1, [sp, #12]
 80238d8:	0064      	lsls	r4, r4, #1
 80238da:	4461      	add	r1, ip
 80238dc:	607c      	str	r4, [r7, #4]
 80238de:	000c      	movs	r4, r1
 80238e0:	17c9      	asrs	r1, r1, #31
 80238e2:	9105      	str	r1, [sp, #20]
 80238e4:	9902      	ldr	r1, [sp, #8]
 80238e6:	9804      	ldr	r0, [sp, #16]
 80238e8:	680d      	ldr	r5, [r1, #0]
 80238ea:	9e06      	ldr	r6, [sp, #24]
 80238ec:	002b      	movs	r3, r5
 80238ee:	17ed      	asrs	r5, r5, #31
 80238f0:	684f      	ldr	r7, [r1, #4]
 80238f2:	9503      	str	r5, [sp, #12]
 80238f4:	1b85      	subs	r5, r0, r6
 80238f6:	17e8      	asrs	r0, r5, #31
 80238f8:	001a      	movs	r2, r3
 80238fa:	9006      	str	r0, [sp, #24]
 80238fc:	17fe      	asrs	r6, r7, #31
 80238fe:	9304      	str	r3, [sp, #16]
 8023900:	0020      	movs	r0, r4
 8023902:	9b03      	ldr	r3, [sp, #12]
 8023904:	17e1      	asrs	r1, r4, #31
 8023906:	9607      	str	r6, [sp, #28]
 8023908:	f7dc fe5a 	bl	80005c0 <__aeabi_lmul>
 802390c:	003a      	movs	r2, r7
 802390e:	000e      	movs	r6, r1
 8023910:	17fb      	asrs	r3, r7, #31
 8023912:	0028      	movs	r0, r5
 8023914:	17e9      	asrs	r1, r5, #31
 8023916:	f7dc fe53 	bl	80005c0 <__aeabi_lmul>
 802391a:	4640      	mov	r0, r8
 802391c:	1a76      	subs	r6, r6, r1
 802391e:	0076      	lsls	r6, r6, #1
 8023920:	002a      	movs	r2, r5
 8023922:	9b06      	ldr	r3, [sp, #24]
 8023924:	6006      	str	r6, [r0, #0]
 8023926:	9903      	ldr	r1, [sp, #12]
 8023928:	9804      	ldr	r0, [sp, #16]
 802392a:	f7dc fe49 	bl	80005c0 <__aeabi_lmul>
 802392e:	0020      	movs	r0, r4
 8023930:	2408      	movs	r4, #8
 8023932:	9b07      	ldr	r3, [sp, #28]
 8023934:	000d      	movs	r5, r1
 8023936:	003a      	movs	r2, r7
 8023938:	9905      	ldr	r1, [sp, #20]
 802393a:	f7dc fe41 	bl	80005c0 <__aeabi_lmul>
 802393e:	4640      	mov	r0, r8
 8023940:	46a4      	mov	ip, r4
 8023942:	186d      	adds	r5, r5, r1
 8023944:	006d      	lsls	r5, r5, #1
 8023946:	6045      	str	r5, [r0, #4]
 8023948:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802394a:	44e1      	add	r9, ip
 802394c:	3801      	subs	r0, #1
 802394e:	9009      	str	r0, [sp, #36]	@ 0x24
 8023950:	9a01      	ldr	r2, [sp, #4]
 8023952:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023954:	44e2      	add	sl, ip
 8023956:	44e3      	add	fp, ip
 8023958:	44e0      	add	r8, ip
 802395a:	46a4      	mov	ip, r4
 802395c:	4462      	add	r2, ip
 802395e:	9201      	str	r2, [sp, #4]
 8023960:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023962:	9b00      	ldr	r3, [sp, #0]
 8023964:	4694      	mov	ip, r2
 8023966:	4463      	add	r3, ip
 8023968:	9300      	str	r3, [sp, #0]
 802396a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802396c:	9902      	ldr	r1, [sp, #8]
 802396e:	469c      	mov	ip, r3
 8023970:	4461      	add	r1, ip
 8023972:	9102      	str	r1, [sp, #8]
 8023974:	2800      	cmp	r0, #0
 8023976:	d000      	beq.n	802397a <arm_radix4_butterfly_inverse_q31+0x22e>
 8023978:	e70f      	b.n	802379a <arm_radix4_butterfly_inverse_q31+0x4e>
 802397a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802397c:	009b      	lsls	r3, r3, #2
 802397e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023980:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023982:	9320      	str	r3, [sp, #128]	@ 0x80
 8023984:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023986:	2b04      	cmp	r3, #4
 8023988:	d800      	bhi.n	802398c <arm_radix4_butterfly_inverse_q31+0x240>
 802398a:	e17c      	b.n	8023c86 <arm_radix4_butterfly_inverse_q31+0x53a>
 802398c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802398e:	0893      	lsrs	r3, r2, #2
 8023990:	1e59      	subs	r1, r3, #1
 8023992:	9321      	str	r3, [sp, #132]	@ 0x84
 8023994:	00db      	lsls	r3, r3, #3
 8023996:	931b      	str	r3, [sp, #108]	@ 0x6c
 8023998:	00d3      	lsls	r3, r2, #3
 802399a:	9300      	str	r3, [sp, #0]
 802399c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802399e:	911a      	str	r1, [sp, #104]	@ 0x68
 80239a0:	00da      	lsls	r2, r3, #3
 80239a2:	921e      	str	r2, [sp, #120]	@ 0x78
 80239a4:	011a      	lsls	r2, r3, #4
 80239a6:	921d      	str	r2, [sp, #116]	@ 0x74
 80239a8:	001a      	movs	r2, r3
 80239aa:	4694      	mov	ip, r2
 80239ac:	005b      	lsls	r3, r3, #1
 80239ae:	4463      	add	r3, ip
 80239b0:	00db      	lsls	r3, r3, #3
 80239b2:	931c      	str	r3, [sp, #112]	@ 0x70
 80239b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80239b6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80239b8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80239ba:	9318      	str	r3, [sp, #96]	@ 0x60
 80239bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80239be:	9316      	str	r3, [sp, #88]	@ 0x58
 80239c0:	2300      	movs	r3, #0
 80239c2:	9315      	str	r3, [sp, #84]	@ 0x54
 80239c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80239c6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80239c8:	681a      	ldr	r2, [r3, #0]
 80239ca:	685b      	ldr	r3, [r3, #4]
 80239cc:	9205      	str	r2, [sp, #20]
 80239ce:	9306      	str	r3, [sp, #24]
 80239d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80239d2:	468c      	mov	ip, r1
 80239d4:	681a      	ldr	r2, [r3, #0]
 80239d6:	685b      	ldr	r3, [r3, #4]
 80239d8:	9207      	str	r2, [sp, #28]
 80239da:	9308      	str	r3, [sp, #32]
 80239dc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80239de:	681a      	ldr	r2, [r3, #0]
 80239e0:	685b      	ldr	r3, [r3, #4]
 80239e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80239e4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80239e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80239e8:	0013      	movs	r3, r2
 80239ea:	4463      	add	r3, ip
 80239ec:	4698      	mov	r8, r3
 80239ee:	0013      	movs	r3, r2
 80239f0:	4442      	add	r2, r8
 80239f2:	4691      	mov	r9, r2
 80239f4:	001a      	movs	r2, r3
 80239f6:	444a      	add	r2, r9
 80239f8:	4692      	mov	sl, r2
 80239fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80239fc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80239fe:	4293      	cmp	r3, r2
 8023a00:	d800      	bhi.n	8023a04 <arm_radix4_butterfly_inverse_q31+0x2b8>
 8023a02:	e0d9      	b.n	8023bb8 <arm_radix4_butterfly_inverse_q31+0x46c>
 8023a04:	4694      	mov	ip, r2
 8023a06:	4644      	mov	r4, r8
 8023a08:	4655      	mov	r5, sl
 8023a0a:	4688      	mov	r8, r1
 8023a0c:	9b07      	ldr	r3, [sp, #28]
 8023a0e:	17db      	asrs	r3, r3, #31
 8023a10:	930c      	str	r3, [sp, #48]	@ 0x30
 8023a12:	9b08      	ldr	r3, [sp, #32]
 8023a14:	17db      	asrs	r3, r3, #31
 8023a16:	930d      	str	r3, [sp, #52]	@ 0x34
 8023a18:	9b05      	ldr	r3, [sp, #20]
 8023a1a:	17db      	asrs	r3, r3, #31
 8023a1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8023a1e:	9b06      	ldr	r3, [sp, #24]
 8023a20:	17db      	asrs	r3, r3, #31
 8023a22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a26:	17db      	asrs	r3, r3, #31
 8023a28:	9310      	str	r3, [sp, #64]	@ 0x40
 8023a2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023a2c:	17db      	asrs	r3, r3, #31
 8023a2e:	9311      	str	r3, [sp, #68]	@ 0x44
 8023a30:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023a32:	4463      	add	r3, ip
 8023a34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023a36:	4643      	mov	r3, r8
 8023a38:	4641      	mov	r1, r8
 8023a3a:	681a      	ldr	r2, [r3, #0]
 8023a3c:	464b      	mov	r3, r9
 8023a3e:	684f      	ldr	r7, [r1, #4]
 8023a40:	4649      	mov	r1, r9
 8023a42:	681b      	ldr	r3, [r3, #0]
 8023a44:	18d6      	adds	r6, r2, r3
 8023a46:	1ad3      	subs	r3, r2, r3
 8023a48:	9301      	str	r3, [sp, #4]
 8023a4a:	684b      	ldr	r3, [r1, #4]
 8023a4c:	1af9      	subs	r1, r7, r3
 8023a4e:	9102      	str	r1, [sp, #8]
 8023a50:	6829      	ldr	r1, [r5, #0]
 8023a52:	18f8      	adds	r0, r7, r3
 8023a54:	468c      	mov	ip, r1
 8023a56:	6827      	ldr	r7, [r4, #0]
 8023a58:	4467      	add	r7, ip
 8023a5a:	003a      	movs	r2, r7
 8023a5c:	19f3      	adds	r3, r6, r7
 8023a5e:	4647      	mov	r7, r8
 8023a60:	109b      	asrs	r3, r3, #2
 8023a62:	603b      	str	r3, [r7, #0]
 8023a64:	6869      	ldr	r1, [r5, #4]
 8023a66:	6867      	ldr	r7, [r4, #4]
 8023a68:	468c      	mov	ip, r1
 8023a6a:	4467      	add	r7, ip
 8023a6c:	003b      	movs	r3, r7
 8023a6e:	19c1      	adds	r1, r0, r7
 8023a70:	4647      	mov	r7, r8
 8023a72:	1ab6      	subs	r6, r6, r2
 8023a74:	1089      	asrs	r1, r1, #2
 8023a76:	6079      	str	r1, [r7, #4]
 8023a78:	17f2      	asrs	r2, r6, #31
 8023a7a:	9900      	ldr	r1, [sp, #0]
 8023a7c:	4692      	mov	sl, r2
 8023a7e:	468c      	mov	ip, r1
 8023a80:	6867      	ldr	r7, [r4, #4]
 8023a82:	6869      	ldr	r1, [r5, #4]
 8023a84:	44e0      	add	r8, ip
 8023a86:	1a7f      	subs	r7, r7, r1
 8023a88:	9703      	str	r7, [sp, #12]
 8023a8a:	6821      	ldr	r1, [r4, #0]
 8023a8c:	682f      	ldr	r7, [r5, #0]
 8023a8e:	1bc9      	subs	r1, r1, r7
 8023a90:	1ac7      	subs	r7, r0, r3
 8023a92:	17fa      	asrs	r2, r7, #31
 8023a94:	4693      	mov	fp, r2
 8023a96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023a98:	9a07      	ldr	r2, [sp, #28]
 8023a9a:	9104      	str	r1, [sp, #16]
 8023a9c:	0030      	movs	r0, r6
 8023a9e:	4651      	mov	r1, sl
 8023aa0:	f7dc fd8e 	bl	80005c0 <__aeabi_lmul>
 8023aa4:	9a08      	ldr	r2, [sp, #32]
 8023aa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023aa8:	9112      	str	r1, [sp, #72]	@ 0x48
 8023aaa:	0038      	movs	r0, r7
 8023aac:	4659      	mov	r1, fp
 8023aae:	f7dc fd87 	bl	80005c0 <__aeabi_lmul>
 8023ab2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023ab4:	9a07      	ldr	r2, [sp, #28]
 8023ab6:	1a41      	subs	r1, r0, r1
 8023ab8:	1049      	asrs	r1, r1, #1
 8023aba:	6021      	str	r1, [r4, #0]
 8023abc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023abe:	0038      	movs	r0, r7
 8023ac0:	4659      	mov	r1, fp
 8023ac2:	f7dc fd7d 	bl	80005c0 <__aeabi_lmul>
 8023ac6:	9a08      	ldr	r2, [sp, #32]
 8023ac8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023aca:	000f      	movs	r7, r1
 8023acc:	0030      	movs	r0, r6
 8023ace:	4651      	mov	r1, sl
 8023ad0:	f7dc fd76 	bl	80005c0 <__aeabi_lmul>
 8023ad4:	9b00      	ldr	r3, [sp, #0]
 8023ad6:	187f      	adds	r7, r7, r1
 8023ad8:	469c      	mov	ip, r3
 8023ada:	107f      	asrs	r7, r7, #1
 8023adc:	6067      	str	r7, [r4, #4]
 8023ade:	9a01      	ldr	r2, [sp, #4]
 8023ae0:	9f03      	ldr	r7, [sp, #12]
 8023ae2:	9802      	ldr	r0, [sp, #8]
 8023ae4:	1bd7      	subs	r7, r2, r7
 8023ae6:	17fe      	asrs	r6, r7, #31
 8023ae8:	0031      	movs	r1, r6
 8023aea:	9e04      	ldr	r6, [sp, #16]
 8023aec:	4682      	mov	sl, r0
 8023aee:	4464      	add	r4, ip
 8023af0:	46b4      	mov	ip, r6
 8023af2:	44e2      	add	sl, ip
 8023af4:	4652      	mov	r2, sl
 8023af6:	17d2      	asrs	r2, r2, #31
 8023af8:	4693      	mov	fp, r2
 8023afa:	0038      	movs	r0, r7
 8023afc:	9a05      	ldr	r2, [sp, #20]
 8023afe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023b00:	9112      	str	r1, [sp, #72]	@ 0x48
 8023b02:	f7dc fd5d 	bl	80005c0 <__aeabi_lmul>
 8023b06:	9a06      	ldr	r2, [sp, #24]
 8023b08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023b0a:	000e      	movs	r6, r1
 8023b0c:	4650      	mov	r0, sl
 8023b0e:	4659      	mov	r1, fp
 8023b10:	f7dc fd56 	bl	80005c0 <__aeabi_lmul>
 8023b14:	4648      	mov	r0, r9
 8023b16:	1a76      	subs	r6, r6, r1
 8023b18:	1076      	asrs	r6, r6, #1
 8023b1a:	6006      	str	r6, [r0, #0]
 8023b1c:	9a05      	ldr	r2, [sp, #20]
 8023b1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023b20:	4650      	mov	r0, sl
 8023b22:	4659      	mov	r1, fp
 8023b24:	f7dc fd4c 	bl	80005c0 <__aeabi_lmul>
 8023b28:	9a06      	ldr	r2, [sp, #24]
 8023b2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023b2c:	000e      	movs	r6, r1
 8023b2e:	0038      	movs	r0, r7
 8023b30:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023b32:	f7dc fd45 	bl	80005c0 <__aeabi_lmul>
 8023b36:	9a00      	ldr	r2, [sp, #0]
 8023b38:	9f03      	ldr	r7, [sp, #12]
 8023b3a:	4694      	mov	ip, r2
 8023b3c:	1876      	adds	r6, r6, r1
 8023b3e:	4649      	mov	r1, r9
 8023b40:	44e1      	add	r9, ip
 8023b42:	46bc      	mov	ip, r7
 8023b44:	9b01      	ldr	r3, [sp, #4]
 8023b46:	1076      	asrs	r6, r6, #1
 8023b48:	4463      	add	r3, ip
 8023b4a:	17df      	asrs	r7, r3, #31
 8023b4c:	604e      	str	r6, [r1, #4]
 8023b4e:	46ba      	mov	sl, r7
 8023b50:	001e      	movs	r6, r3
 8023b52:	9802      	ldr	r0, [sp, #8]
 8023b54:	9b04      	ldr	r3, [sp, #16]
 8023b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023b58:	1ac7      	subs	r7, r0, r3
 8023b5a:	17fb      	asrs	r3, r7, #31
 8023b5c:	469b      	mov	fp, r3
 8023b5e:	0030      	movs	r0, r6
 8023b60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023b62:	4651      	mov	r1, sl
 8023b64:	f7dc fd2c 	bl	80005c0 <__aeabi_lmul>
 8023b68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023b6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023b6c:	9101      	str	r1, [sp, #4]
 8023b6e:	0038      	movs	r0, r7
 8023b70:	4659      	mov	r1, fp
 8023b72:	f7dc fd25 	bl	80005c0 <__aeabi_lmul>
 8023b76:	9801      	ldr	r0, [sp, #4]
 8023b78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023b7a:	1a41      	subs	r1, r0, r1
 8023b7c:	1049      	asrs	r1, r1, #1
 8023b7e:	6029      	str	r1, [r5, #0]
 8023b80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023b82:	0038      	movs	r0, r7
 8023b84:	4659      	mov	r1, fp
 8023b86:	f7dc fd1b 	bl	80005c0 <__aeabi_lmul>
 8023b8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023b8c:	000f      	movs	r7, r1
 8023b8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023b90:	0030      	movs	r0, r6
 8023b92:	4651      	mov	r1, sl
 8023b94:	f7dc fd14 	bl	80005c0 <__aeabi_lmul>
 8023b98:	187f      	adds	r7, r7, r1
 8023b9a:	107f      	asrs	r7, r7, #1
 8023b9c:	606f      	str	r7, [r5, #4]
 8023b9e:	9a00      	ldr	r2, [sp, #0]
 8023ba0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023ba2:	4694      	mov	ip, r2
 8023ba4:	4465      	add	r5, ip
 8023ba6:	468c      	mov	ip, r1
 8023ba8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023baa:	0013      	movs	r3, r2
 8023bac:	4462      	add	r2, ip
 8023bae:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023bb0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023bb2:	429a      	cmp	r2, r3
 8023bb4:	d900      	bls.n	8023bb8 <arm_radix4_butterfly_inverse_q31+0x46c>
 8023bb6:	e73e      	b.n	8023a36 <arm_radix4_butterfly_inverse_q31+0x2ea>
 8023bb8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023bba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023bbc:	468c      	mov	ip, r1
 8023bbe:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8023bc0:	4462      	add	r2, ip
 8023bc2:	468c      	mov	ip, r1
 8023bc4:	9216      	str	r2, [sp, #88]	@ 0x58
 8023bc6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8023bc8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023bca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023bcc:	4462      	add	r2, ip
 8023bce:	468c      	mov	ip, r1
 8023bd0:	9219      	str	r2, [sp, #100]	@ 0x64
 8023bd2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023bd4:	3301      	adds	r3, #1
 8023bd6:	4462      	add	r2, ip
 8023bd8:	9218      	str	r2, [sp, #96]	@ 0x60
 8023bda:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8023bdc:	9315      	str	r3, [sp, #84]	@ 0x54
 8023bde:	3208      	adds	r2, #8
 8023be0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8023be2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023be4:	4293      	cmp	r3, r2
 8023be6:	d800      	bhi.n	8023bea <arm_radix4_butterfly_inverse_q31+0x49e>
 8023be8:	e6ec      	b.n	80239c4 <arm_radix4_butterfly_inverse_q31+0x278>
 8023bea:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023bec:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023bee:	009b      	lsls	r3, r3, #2
 8023bf0:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023bf2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023bf4:	9213      	str	r2, [sp, #76]	@ 0x4c
 8023bf6:	089b      	lsrs	r3, r3, #2
 8023bf8:	9320      	str	r3, [sp, #128]	@ 0x80
 8023bfa:	2b04      	cmp	r3, #4
 8023bfc:	d900      	bls.n	8023c00 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8023bfe:	e6c5      	b.n	802398c <arm_radix4_butterfly_inverse_q31+0x240>
 8023c00:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023c02:	469a      	mov	sl, r3
 8023c04:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023c06:	681a      	ldr	r2, [r3, #0]
 8023c08:	6918      	ldr	r0, [r3, #16]
 8023c0a:	4691      	mov	r9, r2
 8023c0c:	464c      	mov	r4, r9
 8023c0e:	4680      	mov	r8, r0
 8023c10:	69de      	ldr	r6, [r3, #28]
 8023c12:	689d      	ldr	r5, [r3, #8]
 8023c14:	46b4      	mov	ip, r6
 8023c16:	6998      	ldr	r0, [r3, #24]
 8023c18:	1964      	adds	r4, r4, r5
 8023c1a:	6859      	ldr	r1, [r3, #4]
 8023c1c:	68da      	ldr	r2, [r3, #12]
 8023c1e:	4444      	add	r4, r8
 8023c20:	695f      	ldr	r7, [r3, #20]
 8023c22:	1824      	adds	r4, r4, r0
 8023c24:	601c      	str	r4, [r3, #0]
 8023c26:	188c      	adds	r4, r1, r2
 8023c28:	19e4      	adds	r4, r4, r7
 8023c2a:	4464      	add	r4, ip
 8023c2c:	605c      	str	r4, [r3, #4]
 8023c2e:	464c      	mov	r4, r9
 8023c30:	1b64      	subs	r4, r4, r5
 8023c32:	4444      	add	r4, r8
 8023c34:	1a24      	subs	r4, r4, r0
 8023c36:	609c      	str	r4, [r3, #8]
 8023c38:	1a8c      	subs	r4, r1, r2
 8023c3a:	19e4      	adds	r4, r4, r7
 8023c3c:	1ba4      	subs	r4, r4, r6
 8023c3e:	60dc      	str	r4, [r3, #12]
 8023c40:	464c      	mov	r4, r9
 8023c42:	4646      	mov	r6, r8
 8023c44:	1aa4      	subs	r4, r4, r2
 8023c46:	1ba4      	subs	r4, r4, r6
 8023c48:	4464      	add	r4, ip
 8023c4a:	611c      	str	r4, [r3, #16]
 8023c4c:	194c      	adds	r4, r1, r5
 8023c4e:	1be4      	subs	r4, r4, r7
 8023c50:	1a24      	subs	r4, r4, r0
 8023c52:	615c      	str	r4, [r3, #20]
 8023c54:	4644      	mov	r4, r8
 8023c56:	4666      	mov	r6, ip
 8023c58:	444a      	add	r2, r9
 8023c5a:	1b12      	subs	r2, r2, r4
 8023c5c:	1b92      	subs	r2, r2, r6
 8023c5e:	619a      	str	r2, [r3, #24]
 8023c60:	1b4a      	subs	r2, r1, r5
 8023c62:	1bd1      	subs	r1, r2, r7
 8023c64:	2201      	movs	r2, #1
 8023c66:	4252      	negs	r2, r2
 8023c68:	4694      	mov	ip, r2
 8023c6a:	44e2      	add	sl, ip
 8023c6c:	4652      	mov	r2, sl
 8023c6e:	1809      	adds	r1, r1, r0
 8023c70:	61d9      	str	r1, [r3, #28]
 8023c72:	3320      	adds	r3, #32
 8023c74:	2a00      	cmp	r2, #0
 8023c76:	d1c6      	bne.n	8023c06 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8023c78:	b027      	add	sp, #156	@ 0x9c
 8023c7a:	bc3c      	pop	{r2, r3, r4, r5}
 8023c7c:	4690      	mov	r8, r2
 8023c7e:	4699      	mov	r9, r3
 8023c80:	46a2      	mov	sl, r4
 8023c82:	46ab      	mov	fp, r5
 8023c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023c86:	469a      	mov	sl, r3
 8023c88:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023c8a:	e7bc      	b.n	8023c06 <arm_radix4_butterfly_inverse_q31+0x4ba>

08023c8c <arm_cmplx_mag_squared_q31>:
 8023c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023c8e:	464f      	mov	r7, r9
 8023c90:	4646      	mov	r6, r8
 8023c92:	0004      	movs	r4, r0
 8023c94:	b4c0      	push	{r6, r7}
 8023c96:	0016      	movs	r6, r2
 8023c98:	000f      	movs	r7, r1
 8023c9a:	2a00      	cmp	r2, #0
 8023c9c:	d018      	beq.n	8023cd0 <arm_cmplx_mag_squared_q31+0x44>
 8023c9e:	6823      	ldr	r3, [r4, #0]
 8023ca0:	6822      	ldr	r2, [r4, #0]
 8023ca2:	17d9      	asrs	r1, r3, #31
 8023ca4:	6863      	ldr	r3, [r4, #4]
 8023ca6:	0010      	movs	r0, r2
 8023ca8:	4698      	mov	r8, r3
 8023caa:	17db      	asrs	r3, r3, #31
 8023cac:	4699      	mov	r9, r3
 8023cae:	000b      	movs	r3, r1
 8023cb0:	f7dc fc86 	bl	80005c0 <__aeabi_lmul>
 8023cb4:	4642      	mov	r2, r8
 8023cb6:	104d      	asrs	r5, r1, #1
 8023cb8:	464b      	mov	r3, r9
 8023cba:	4640      	mov	r0, r8
 8023cbc:	4649      	mov	r1, r9
 8023cbe:	f7dc fc7f 	bl	80005c0 <__aeabi_lmul>
 8023cc2:	1049      	asrs	r1, r1, #1
 8023cc4:	1869      	adds	r1, r5, r1
 8023cc6:	3e01      	subs	r6, #1
 8023cc8:	c702      	stmia	r7!, {r1}
 8023cca:	3408      	adds	r4, #8
 8023ccc:	2e00      	cmp	r6, #0
 8023cce:	d1e6      	bne.n	8023c9e <arm_cmplx_mag_squared_q31+0x12>
 8023cd0:	bc0c      	pop	{r2, r3}
 8023cd2:	4690      	mov	r8, r2
 8023cd4:	4699      	mov	r9, r3
 8023cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023cd8 <arm_mult_q31>:
 8023cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023cda:	4646      	mov	r6, r8
 8023cdc:	464f      	mov	r7, r9
 8023cde:	4690      	mov	r8, r2
 8023ce0:	b4c0      	push	{r6, r7}
 8023ce2:	001d      	movs	r5, r3
 8023ce4:	0006      	movs	r6, r0
 8023ce6:	000f      	movs	r7, r1
 8023ce8:	2400      	movs	r4, #0
 8023cea:	2b00      	cmp	r3, #0
 8023cec:	d020      	beq.n	8023d30 <arm_mult_q31+0x58>
 8023cee:	4b12      	ldr	r3, [pc, #72]	@ (8023d38 <arm_mult_q31+0x60>)
 8023cf0:	4699      	mov	r9, r3
 8023cf2:	e007      	b.n	8023d04 <arm_mult_q31+0x2c>
 8023cf4:	464b      	mov	r3, r9
 8023cf6:	4059      	eors	r1, r3
 8023cf8:	4643      	mov	r3, r8
 8023cfa:	3d01      	subs	r5, #1
 8023cfc:	5119      	str	r1, [r3, r4]
 8023cfe:	3404      	adds	r4, #4
 8023d00:	2d00      	cmp	r5, #0
 8023d02:	d015      	beq.n	8023d30 <arm_mult_q31+0x58>
 8023d04:	5933      	ldr	r3, [r6, r4]
 8023d06:	593a      	ldr	r2, [r7, r4]
 8023d08:	17d9      	asrs	r1, r3, #31
 8023d0a:	593b      	ldr	r3, [r7, r4]
 8023d0c:	5930      	ldr	r0, [r6, r4]
 8023d0e:	17db      	asrs	r3, r3, #31
 8023d10:	f7dc fc56 	bl	80005c0 <__aeabi_lmul>
 8023d14:	004b      	lsls	r3, r1, #1
 8023d16:	0fc0      	lsrs	r0, r0, #31
 8023d18:	4318      	orrs	r0, r3
 8023d1a:	17c9      	asrs	r1, r1, #31
 8023d1c:	17c3      	asrs	r3, r0, #31
 8023d1e:	428b      	cmp	r3, r1
 8023d20:	d1e8      	bne.n	8023cf4 <arm_mult_q31+0x1c>
 8023d22:	0001      	movs	r1, r0
 8023d24:	4643      	mov	r3, r8
 8023d26:	3d01      	subs	r5, #1
 8023d28:	5119      	str	r1, [r3, r4]
 8023d2a:	3404      	adds	r4, #4
 8023d2c:	2d00      	cmp	r5, #0
 8023d2e:	d1e9      	bne.n	8023d04 <arm_mult_q31+0x2c>
 8023d30:	bc0c      	pop	{r2, r3}
 8023d32:	4690      	mov	r8, r2
 8023d34:	4699      	mov	r9, r3
 8023d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023d38:	7fffffff 	.word	0x7fffffff

08023d3c <arm_add_q31>:
 8023d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023d3e:	465f      	mov	r7, fp
 8023d40:	4656      	mov	r6, sl
 8023d42:	464d      	mov	r5, r9
 8023d44:	4644      	mov	r4, r8
 8023d46:	b4f0      	push	{r4, r5, r6, r7}
 8023d48:	4693      	mov	fp, r2
 8023d4a:	b083      	sub	sp, #12
 8023d4c:	4681      	mov	r9, r0
 8023d4e:	468a      	mov	sl, r1
 8023d50:	4698      	mov	r8, r3
 8023d52:	2200      	movs	r2, #0
 8023d54:	2b00      	cmp	r3, #0
 8023d56:	d020      	beq.n	8023d9a <arm_add_q31+0x5e>
 8023d58:	4649      	mov	r1, r9
 8023d5a:	4653      	mov	r3, sl
 8023d5c:	588e      	ldr	r6, [r1, r2]
 8023d5e:	589b      	ldr	r3, [r3, r2]
 8023d60:	17f7      	asrs	r7, r6, #31
 8023d62:	001c      	movs	r4, r3
 8023d64:	0030      	movs	r0, r6
 8023d66:	0039      	movs	r1, r7
 8023d68:	17dd      	asrs	r5, r3, #31
 8023d6a:	46b4      	mov	ip, r6
 8023d6c:	1900      	adds	r0, r0, r4
 8023d6e:	4169      	adcs	r1, r5
 8023d70:	4463      	add	r3, ip
 8023d72:	9000      	str	r0, [sp, #0]
 8023d74:	9101      	str	r1, [sp, #4]
 8023d76:	17d9      	asrs	r1, r3, #31
 8023d78:	468c      	mov	ip, r1
 8023d7a:	9901      	ldr	r1, [sp, #4]
 8023d7c:	458c      	cmp	ip, r1
 8023d7e:	d002      	beq.n	8023d86 <arm_add_q31+0x4a>
 8023d80:	17cb      	asrs	r3, r1, #31
 8023d82:	4909      	ldr	r1, [pc, #36]	@ (8023da8 <arm_add_q31+0x6c>)
 8023d84:	404b      	eors	r3, r1
 8023d86:	4659      	mov	r1, fp
 8023d88:	508b      	str	r3, [r1, r2]
 8023d8a:	2301      	movs	r3, #1
 8023d8c:	425b      	negs	r3, r3
 8023d8e:	469c      	mov	ip, r3
 8023d90:	44e0      	add	r8, ip
 8023d92:	4643      	mov	r3, r8
 8023d94:	3204      	adds	r2, #4
 8023d96:	2b00      	cmp	r3, #0
 8023d98:	d1de      	bne.n	8023d58 <arm_add_q31+0x1c>
 8023d9a:	b003      	add	sp, #12
 8023d9c:	bc3c      	pop	{r2, r3, r4, r5}
 8023d9e:	4690      	mov	r8, r2
 8023da0:	4699      	mov	r9, r3
 8023da2:	46a2      	mov	sl, r4
 8023da4:	46ab      	mov	fp, r5
 8023da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023da8:	7fffffff 	.word	0x7fffffff

08023dac <atof>:
 8023dac:	b510      	push	{r4, lr}
 8023dae:	2100      	movs	r1, #0
 8023db0:	f000 fe1e 	bl	80249f0 <strtod>
 8023db4:	bd10      	pop	{r4, pc}

08023db6 <atoi>:
 8023db6:	b510      	push	{r4, lr}
 8023db8:	220a      	movs	r2, #10
 8023dba:	2100      	movs	r1, #0
 8023dbc:	f000 feb0 	bl	8024b20 <strtol>
 8023dc0:	bd10      	pop	{r4, pc}
	...

08023dc4 <sulp>:
 8023dc4:	b570      	push	{r4, r5, r6, lr}
 8023dc6:	0016      	movs	r6, r2
 8023dc8:	000d      	movs	r5, r1
 8023dca:	f003 fd0f 	bl	80277ec <__ulp>
 8023dce:	2e00      	cmp	r6, #0
 8023dd0:	d00d      	beq.n	8023dee <sulp+0x2a>
 8023dd2:	236b      	movs	r3, #107	@ 0x6b
 8023dd4:	006a      	lsls	r2, r5, #1
 8023dd6:	0d52      	lsrs	r2, r2, #21
 8023dd8:	1a9b      	subs	r3, r3, r2
 8023dda:	2b00      	cmp	r3, #0
 8023ddc:	dd07      	ble.n	8023dee <sulp+0x2a>
 8023dde:	2400      	movs	r4, #0
 8023de0:	4a03      	ldr	r2, [pc, #12]	@ (8023df0 <sulp+0x2c>)
 8023de2:	051b      	lsls	r3, r3, #20
 8023de4:	189d      	adds	r5, r3, r2
 8023de6:	002b      	movs	r3, r5
 8023de8:	0022      	movs	r2, r4
 8023dea:	f7de fdb3 	bl	8002954 <__aeabi_dmul>
 8023dee:	bd70      	pop	{r4, r5, r6, pc}
 8023df0:	3ff00000 	.word	0x3ff00000

08023df4 <_strtod_l>:
 8023df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023df6:	b0a3      	sub	sp, #140	@ 0x8c
 8023df8:	921b      	str	r2, [sp, #108]	@ 0x6c
 8023dfa:	2200      	movs	r2, #0
 8023dfc:	2600      	movs	r6, #0
 8023dfe:	2700      	movs	r7, #0
 8023e00:	9005      	str	r0, [sp, #20]
 8023e02:	9109      	str	r1, [sp, #36]	@ 0x24
 8023e04:	921e      	str	r2, [sp, #120]	@ 0x78
 8023e06:	911d      	str	r1, [sp, #116]	@ 0x74
 8023e08:	780a      	ldrb	r2, [r1, #0]
 8023e0a:	2a2b      	cmp	r2, #43	@ 0x2b
 8023e0c:	d053      	beq.n	8023eb6 <_strtod_l+0xc2>
 8023e0e:	d83f      	bhi.n	8023e90 <_strtod_l+0x9c>
 8023e10:	2a0d      	cmp	r2, #13
 8023e12:	d839      	bhi.n	8023e88 <_strtod_l+0x94>
 8023e14:	2a08      	cmp	r2, #8
 8023e16:	d839      	bhi.n	8023e8c <_strtod_l+0x98>
 8023e18:	2a00      	cmp	r2, #0
 8023e1a:	d042      	beq.n	8023ea2 <_strtod_l+0xae>
 8023e1c:	2200      	movs	r2, #0
 8023e1e:	9212      	str	r2, [sp, #72]	@ 0x48
 8023e20:	2100      	movs	r1, #0
 8023e22:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8023e24:	910c      	str	r1, [sp, #48]	@ 0x30
 8023e26:	782a      	ldrb	r2, [r5, #0]
 8023e28:	2a30      	cmp	r2, #48	@ 0x30
 8023e2a:	d000      	beq.n	8023e2e <_strtod_l+0x3a>
 8023e2c:	e083      	b.n	8023f36 <_strtod_l+0x142>
 8023e2e:	786a      	ldrb	r2, [r5, #1]
 8023e30:	3120      	adds	r1, #32
 8023e32:	438a      	bics	r2, r1
 8023e34:	2a58      	cmp	r2, #88	@ 0x58
 8023e36:	d000      	beq.n	8023e3a <_strtod_l+0x46>
 8023e38:	e073      	b.n	8023f22 <_strtod_l+0x12e>
 8023e3a:	9302      	str	r3, [sp, #8]
 8023e3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023e3e:	4a9b      	ldr	r2, [pc, #620]	@ (80240ac <_strtod_l+0x2b8>)
 8023e40:	9301      	str	r3, [sp, #4]
 8023e42:	ab1e      	add	r3, sp, #120	@ 0x78
 8023e44:	9300      	str	r3, [sp, #0]
 8023e46:	9805      	ldr	r0, [sp, #20]
 8023e48:	ab1f      	add	r3, sp, #124	@ 0x7c
 8023e4a:	a91d      	add	r1, sp, #116	@ 0x74
 8023e4c:	f002 fd86 	bl	802695c <__gethex>
 8023e50:	230f      	movs	r3, #15
 8023e52:	0002      	movs	r2, r0
 8023e54:	401a      	ands	r2, r3
 8023e56:	0004      	movs	r4, r0
 8023e58:	9206      	str	r2, [sp, #24]
 8023e5a:	4218      	tst	r0, r3
 8023e5c:	d005      	beq.n	8023e6a <_strtod_l+0x76>
 8023e5e:	2a06      	cmp	r2, #6
 8023e60:	d12b      	bne.n	8023eba <_strtod_l+0xc6>
 8023e62:	2300      	movs	r3, #0
 8023e64:	3501      	adds	r5, #1
 8023e66:	951d      	str	r5, [sp, #116]	@ 0x74
 8023e68:	9312      	str	r3, [sp, #72]	@ 0x48
 8023e6a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023e6c:	2b00      	cmp	r3, #0
 8023e6e:	d002      	beq.n	8023e76 <_strtod_l+0x82>
 8023e70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023e72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023e74:	6013      	str	r3, [r2, #0]
 8023e76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023e78:	2b00      	cmp	r3, #0
 8023e7a:	d019      	beq.n	8023eb0 <_strtod_l+0xbc>
 8023e7c:	2380      	movs	r3, #128	@ 0x80
 8023e7e:	0030      	movs	r0, r6
 8023e80:	061b      	lsls	r3, r3, #24
 8023e82:	18f9      	adds	r1, r7, r3
 8023e84:	b023      	add	sp, #140	@ 0x8c
 8023e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023e88:	2a20      	cmp	r2, #32
 8023e8a:	d1c7      	bne.n	8023e1c <_strtod_l+0x28>
 8023e8c:	3101      	adds	r1, #1
 8023e8e:	e7ba      	b.n	8023e06 <_strtod_l+0x12>
 8023e90:	2a2d      	cmp	r2, #45	@ 0x2d
 8023e92:	d1c3      	bne.n	8023e1c <_strtod_l+0x28>
 8023e94:	3a2c      	subs	r2, #44	@ 0x2c
 8023e96:	9212      	str	r2, [sp, #72]	@ 0x48
 8023e98:	1c4a      	adds	r2, r1, #1
 8023e9a:	921d      	str	r2, [sp, #116]	@ 0x74
 8023e9c:	784a      	ldrb	r2, [r1, #1]
 8023e9e:	2a00      	cmp	r2, #0
 8023ea0:	d1be      	bne.n	8023e20 <_strtod_l+0x2c>
 8023ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ea4:	931d      	str	r3, [sp, #116]	@ 0x74
 8023ea6:	2300      	movs	r3, #0
 8023ea8:	9312      	str	r3, [sp, #72]	@ 0x48
 8023eaa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023eac:	2b00      	cmp	r3, #0
 8023eae:	d1df      	bne.n	8023e70 <_strtod_l+0x7c>
 8023eb0:	0030      	movs	r0, r6
 8023eb2:	0039      	movs	r1, r7
 8023eb4:	e7e6      	b.n	8023e84 <_strtod_l+0x90>
 8023eb6:	2200      	movs	r2, #0
 8023eb8:	e7ed      	b.n	8023e96 <_strtod_l+0xa2>
 8023eba:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023ebc:	2a00      	cmp	r2, #0
 8023ebe:	d007      	beq.n	8023ed0 <_strtod_l+0xdc>
 8023ec0:	2135      	movs	r1, #53	@ 0x35
 8023ec2:	a820      	add	r0, sp, #128	@ 0x80
 8023ec4:	f003 fd88 	bl	80279d8 <__copybits>
 8023ec8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023eca:	9805      	ldr	r0, [sp, #20]
 8023ecc:	f003 f94a 	bl	8027164 <_Bfree>
 8023ed0:	9806      	ldr	r0, [sp, #24]
 8023ed2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023ed4:	3801      	subs	r0, #1
 8023ed6:	2804      	cmp	r0, #4
 8023ed8:	d806      	bhi.n	8023ee8 <_strtod_l+0xf4>
 8023eda:	f7dc f94f 	bl	800017c <__gnu_thumb1_case_uqi>
 8023ede:	0312      	.short	0x0312
 8023ee0:	1e1c      	.short	0x1e1c
 8023ee2:	12          	.byte	0x12
 8023ee3:	00          	.byte	0x00
 8023ee4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023ee6:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8023ee8:	05e4      	lsls	r4, r4, #23
 8023eea:	d502      	bpl.n	8023ef2 <_strtod_l+0xfe>
 8023eec:	2380      	movs	r3, #128	@ 0x80
 8023eee:	061b      	lsls	r3, r3, #24
 8023ef0:	431f      	orrs	r7, r3
 8023ef2:	4b6f      	ldr	r3, [pc, #444]	@ (80240b0 <_strtod_l+0x2bc>)
 8023ef4:	423b      	tst	r3, r7
 8023ef6:	d1b8      	bne.n	8023e6a <_strtod_l+0x76>
 8023ef8:	f001 fdc0 	bl	8025a7c <__errno>
 8023efc:	2322      	movs	r3, #34	@ 0x22
 8023efe:	6003      	str	r3, [r0, #0]
 8023f00:	e7b3      	b.n	8023e6a <_strtod_l+0x76>
 8023f02:	496c      	ldr	r1, [pc, #432]	@ (80240b4 <_strtod_l+0x2c0>)
 8023f04:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023f06:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023f08:	400a      	ands	r2, r1
 8023f0a:	496b      	ldr	r1, [pc, #428]	@ (80240b8 <_strtod_l+0x2c4>)
 8023f0c:	185b      	adds	r3, r3, r1
 8023f0e:	051b      	lsls	r3, r3, #20
 8023f10:	431a      	orrs	r2, r3
 8023f12:	0017      	movs	r7, r2
 8023f14:	e7e8      	b.n	8023ee8 <_strtod_l+0xf4>
 8023f16:	4f66      	ldr	r7, [pc, #408]	@ (80240b0 <_strtod_l+0x2bc>)
 8023f18:	e7e6      	b.n	8023ee8 <_strtod_l+0xf4>
 8023f1a:	2601      	movs	r6, #1
 8023f1c:	4f67      	ldr	r7, [pc, #412]	@ (80240bc <_strtod_l+0x2c8>)
 8023f1e:	4276      	negs	r6, r6
 8023f20:	e7e2      	b.n	8023ee8 <_strtod_l+0xf4>
 8023f22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023f24:	1c5a      	adds	r2, r3, #1
 8023f26:	921d      	str	r2, [sp, #116]	@ 0x74
 8023f28:	785b      	ldrb	r3, [r3, #1]
 8023f2a:	2b30      	cmp	r3, #48	@ 0x30
 8023f2c:	d0f9      	beq.n	8023f22 <_strtod_l+0x12e>
 8023f2e:	2b00      	cmp	r3, #0
 8023f30:	d09b      	beq.n	8023e6a <_strtod_l+0x76>
 8023f32:	2301      	movs	r3, #1
 8023f34:	930c      	str	r3, [sp, #48]	@ 0x30
 8023f36:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023f38:	220a      	movs	r2, #10
 8023f3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023f3c:	2300      	movs	r3, #0
 8023f3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8023f40:	930d      	str	r3, [sp, #52]	@ 0x34
 8023f42:	9308      	str	r3, [sp, #32]
 8023f44:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8023f46:	7804      	ldrb	r4, [r0, #0]
 8023f48:	0023      	movs	r3, r4
 8023f4a:	3b30      	subs	r3, #48	@ 0x30
 8023f4c:	b2d9      	uxtb	r1, r3
 8023f4e:	2909      	cmp	r1, #9
 8023f50:	d927      	bls.n	8023fa2 <_strtod_l+0x1ae>
 8023f52:	2201      	movs	r2, #1
 8023f54:	495a      	ldr	r1, [pc, #360]	@ (80240c0 <_strtod_l+0x2cc>)
 8023f56:	f001 fd03 	bl	8025960 <strncmp>
 8023f5a:	2800      	cmp	r0, #0
 8023f5c:	d033      	beq.n	8023fc6 <_strtod_l+0x1d2>
 8023f5e:	2000      	movs	r0, #0
 8023f60:	0023      	movs	r3, r4
 8023f62:	4684      	mov	ip, r0
 8023f64:	9a08      	ldr	r2, [sp, #32]
 8023f66:	900e      	str	r0, [sp, #56]	@ 0x38
 8023f68:	9206      	str	r2, [sp, #24]
 8023f6a:	2220      	movs	r2, #32
 8023f6c:	0019      	movs	r1, r3
 8023f6e:	4391      	bics	r1, r2
 8023f70:	000a      	movs	r2, r1
 8023f72:	2100      	movs	r1, #0
 8023f74:	9107      	str	r1, [sp, #28]
 8023f76:	2a45      	cmp	r2, #69	@ 0x45
 8023f78:	d000      	beq.n	8023f7c <_strtod_l+0x188>
 8023f7a:	e0cb      	b.n	8024114 <_strtod_l+0x320>
 8023f7c:	9b06      	ldr	r3, [sp, #24]
 8023f7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023f80:	4303      	orrs	r3, r0
 8023f82:	4313      	orrs	r3, r2
 8023f84:	428b      	cmp	r3, r1
 8023f86:	d08c      	beq.n	8023ea2 <_strtod_l+0xae>
 8023f88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f8c:	3301      	adds	r3, #1
 8023f8e:	931d      	str	r3, [sp, #116]	@ 0x74
 8023f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f92:	785b      	ldrb	r3, [r3, #1]
 8023f94:	2b2b      	cmp	r3, #43	@ 0x2b
 8023f96:	d07b      	beq.n	8024090 <_strtod_l+0x29c>
 8023f98:	000c      	movs	r4, r1
 8023f9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8023f9c:	d17e      	bne.n	802409c <_strtod_l+0x2a8>
 8023f9e:	2401      	movs	r4, #1
 8023fa0:	e077      	b.n	8024092 <_strtod_l+0x29e>
 8023fa2:	9908      	ldr	r1, [sp, #32]
 8023fa4:	2908      	cmp	r1, #8
 8023fa6:	dc09      	bgt.n	8023fbc <_strtod_l+0x1c8>
 8023fa8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023faa:	4351      	muls	r1, r2
 8023fac:	185b      	adds	r3, r3, r1
 8023fae:	930d      	str	r3, [sp, #52]	@ 0x34
 8023fb0:	9b08      	ldr	r3, [sp, #32]
 8023fb2:	3001      	adds	r0, #1
 8023fb4:	3301      	adds	r3, #1
 8023fb6:	9308      	str	r3, [sp, #32]
 8023fb8:	901d      	str	r0, [sp, #116]	@ 0x74
 8023fba:	e7c3      	b.n	8023f44 <_strtod_l+0x150>
 8023fbc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023fbe:	4355      	muls	r5, r2
 8023fc0:	195b      	adds	r3, r3, r5
 8023fc2:	9310      	str	r3, [sp, #64]	@ 0x40
 8023fc4:	e7f4      	b.n	8023fb0 <_strtod_l+0x1bc>
 8023fc6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023fc8:	1c5a      	adds	r2, r3, #1
 8023fca:	921d      	str	r2, [sp, #116]	@ 0x74
 8023fcc:	9a08      	ldr	r2, [sp, #32]
 8023fce:	785b      	ldrb	r3, [r3, #1]
 8023fd0:	2a00      	cmp	r2, #0
 8023fd2:	d03e      	beq.n	8024052 <_strtod_l+0x25e>
 8023fd4:	900e      	str	r0, [sp, #56]	@ 0x38
 8023fd6:	9206      	str	r2, [sp, #24]
 8023fd8:	001a      	movs	r2, r3
 8023fda:	3a30      	subs	r2, #48	@ 0x30
 8023fdc:	2a09      	cmp	r2, #9
 8023fde:	d912      	bls.n	8024006 <_strtod_l+0x212>
 8023fe0:	2201      	movs	r2, #1
 8023fe2:	4694      	mov	ip, r2
 8023fe4:	e7c1      	b.n	8023f6a <_strtod_l+0x176>
 8023fe6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023fe8:	3001      	adds	r0, #1
 8023fea:	1c5a      	adds	r2, r3, #1
 8023fec:	921d      	str	r2, [sp, #116]	@ 0x74
 8023fee:	785b      	ldrb	r3, [r3, #1]
 8023ff0:	2b30      	cmp	r3, #48	@ 0x30
 8023ff2:	d0f8      	beq.n	8023fe6 <_strtod_l+0x1f2>
 8023ff4:	001a      	movs	r2, r3
 8023ff6:	3a31      	subs	r2, #49	@ 0x31
 8023ff8:	2a08      	cmp	r2, #8
 8023ffa:	d844      	bhi.n	8024086 <_strtod_l+0x292>
 8023ffc:	900e      	str	r0, [sp, #56]	@ 0x38
 8023ffe:	2000      	movs	r0, #0
 8024000:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024002:	9006      	str	r0, [sp, #24]
 8024004:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024006:	001c      	movs	r4, r3
 8024008:	1c42      	adds	r2, r0, #1
 802400a:	3c30      	subs	r4, #48	@ 0x30
 802400c:	2b30      	cmp	r3, #48	@ 0x30
 802400e:	d01a      	beq.n	8024046 <_strtod_l+0x252>
 8024010:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024012:	9906      	ldr	r1, [sp, #24]
 8024014:	189b      	adds	r3, r3, r2
 8024016:	930e      	str	r3, [sp, #56]	@ 0x38
 8024018:	230a      	movs	r3, #10
 802401a:	469c      	mov	ip, r3
 802401c:	9d06      	ldr	r5, [sp, #24]
 802401e:	1c4b      	adds	r3, r1, #1
 8024020:	1b5d      	subs	r5, r3, r5
 8024022:	42aa      	cmp	r2, r5
 8024024:	dc17      	bgt.n	8024056 <_strtod_l+0x262>
 8024026:	43c3      	mvns	r3, r0
 8024028:	9a06      	ldr	r2, [sp, #24]
 802402a:	17db      	asrs	r3, r3, #31
 802402c:	4003      	ands	r3, r0
 802402e:	18d1      	adds	r1, r2, r3
 8024030:	3201      	adds	r2, #1
 8024032:	18d3      	adds	r3, r2, r3
 8024034:	9306      	str	r3, [sp, #24]
 8024036:	2908      	cmp	r1, #8
 8024038:	dc1c      	bgt.n	8024074 <_strtod_l+0x280>
 802403a:	230a      	movs	r3, #10
 802403c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802403e:	4353      	muls	r3, r2
 8024040:	2200      	movs	r2, #0
 8024042:	18e3      	adds	r3, r4, r3
 8024044:	930d      	str	r3, [sp, #52]	@ 0x34
 8024046:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024048:	0010      	movs	r0, r2
 802404a:	1c59      	adds	r1, r3, #1
 802404c:	911d      	str	r1, [sp, #116]	@ 0x74
 802404e:	785b      	ldrb	r3, [r3, #1]
 8024050:	e7c2      	b.n	8023fd8 <_strtod_l+0x1e4>
 8024052:	9808      	ldr	r0, [sp, #32]
 8024054:	e7cc      	b.n	8023ff0 <_strtod_l+0x1fc>
 8024056:	2908      	cmp	r1, #8
 8024058:	dc05      	bgt.n	8024066 <_strtod_l+0x272>
 802405a:	4665      	mov	r5, ip
 802405c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802405e:	4369      	muls	r1, r5
 8024060:	910d      	str	r1, [sp, #52]	@ 0x34
 8024062:	0019      	movs	r1, r3
 8024064:	e7da      	b.n	802401c <_strtod_l+0x228>
 8024066:	2b10      	cmp	r3, #16
 8024068:	dcfb      	bgt.n	8024062 <_strtod_l+0x26e>
 802406a:	4661      	mov	r1, ip
 802406c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802406e:	434d      	muls	r5, r1
 8024070:	9510      	str	r5, [sp, #64]	@ 0x40
 8024072:	e7f6      	b.n	8024062 <_strtod_l+0x26e>
 8024074:	2200      	movs	r2, #0
 8024076:	290f      	cmp	r1, #15
 8024078:	dce5      	bgt.n	8024046 <_strtod_l+0x252>
 802407a:	230a      	movs	r3, #10
 802407c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802407e:	435d      	muls	r5, r3
 8024080:	1963      	adds	r3, r4, r5
 8024082:	9310      	str	r3, [sp, #64]	@ 0x40
 8024084:	e7df      	b.n	8024046 <_strtod_l+0x252>
 8024086:	2200      	movs	r2, #0
 8024088:	920e      	str	r2, [sp, #56]	@ 0x38
 802408a:	9206      	str	r2, [sp, #24]
 802408c:	3201      	adds	r2, #1
 802408e:	e7a8      	b.n	8023fe2 <_strtod_l+0x1ee>
 8024090:	2400      	movs	r4, #0
 8024092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024094:	3302      	adds	r3, #2
 8024096:	931d      	str	r3, [sp, #116]	@ 0x74
 8024098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802409a:	789b      	ldrb	r3, [r3, #2]
 802409c:	001a      	movs	r2, r3
 802409e:	3a30      	subs	r2, #48	@ 0x30
 80240a0:	2a09      	cmp	r2, #9
 80240a2:	d913      	bls.n	80240cc <_strtod_l+0x2d8>
 80240a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80240a6:	921d      	str	r2, [sp, #116]	@ 0x74
 80240a8:	2200      	movs	r2, #0
 80240aa:	e032      	b.n	8024112 <_strtod_l+0x31e>
 80240ac:	0802e5ac 	.word	0x0802e5ac
 80240b0:	7ff00000 	.word	0x7ff00000
 80240b4:	ffefffff 	.word	0xffefffff
 80240b8:	00000433 	.word	0x00000433
 80240bc:	7fffffff 	.word	0x7fffffff
 80240c0:	0802e3c4 	.word	0x0802e3c4
 80240c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80240c6:	1c5a      	adds	r2, r3, #1
 80240c8:	921d      	str	r2, [sp, #116]	@ 0x74
 80240ca:	785b      	ldrb	r3, [r3, #1]
 80240cc:	2b30      	cmp	r3, #48	@ 0x30
 80240ce:	d0f9      	beq.n	80240c4 <_strtod_l+0x2d0>
 80240d0:	2200      	movs	r2, #0
 80240d2:	9207      	str	r2, [sp, #28]
 80240d4:	001a      	movs	r2, r3
 80240d6:	3a31      	subs	r2, #49	@ 0x31
 80240d8:	2a08      	cmp	r2, #8
 80240da:	d81b      	bhi.n	8024114 <_strtod_l+0x320>
 80240dc:	3b30      	subs	r3, #48	@ 0x30
 80240de:	001a      	movs	r2, r3
 80240e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80240e2:	9307      	str	r3, [sp, #28]
 80240e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80240e6:	1c59      	adds	r1, r3, #1
 80240e8:	911d      	str	r1, [sp, #116]	@ 0x74
 80240ea:	785b      	ldrb	r3, [r3, #1]
 80240ec:	001d      	movs	r5, r3
 80240ee:	3d30      	subs	r5, #48	@ 0x30
 80240f0:	2d09      	cmp	r5, #9
 80240f2:	d93a      	bls.n	802416a <_strtod_l+0x376>
 80240f4:	9d07      	ldr	r5, [sp, #28]
 80240f6:	1b49      	subs	r1, r1, r5
 80240f8:	000d      	movs	r5, r1
 80240fa:	49b3      	ldr	r1, [pc, #716]	@ (80243c8 <_strtod_l+0x5d4>)
 80240fc:	9107      	str	r1, [sp, #28]
 80240fe:	2d08      	cmp	r5, #8
 8024100:	dc03      	bgt.n	802410a <_strtod_l+0x316>
 8024102:	9207      	str	r2, [sp, #28]
 8024104:	428a      	cmp	r2, r1
 8024106:	dd00      	ble.n	802410a <_strtod_l+0x316>
 8024108:	9107      	str	r1, [sp, #28]
 802410a:	2c00      	cmp	r4, #0
 802410c:	d002      	beq.n	8024114 <_strtod_l+0x320>
 802410e:	9a07      	ldr	r2, [sp, #28]
 8024110:	4252      	negs	r2, r2
 8024112:	9207      	str	r2, [sp, #28]
 8024114:	9a06      	ldr	r2, [sp, #24]
 8024116:	2a00      	cmp	r2, #0
 8024118:	d14b      	bne.n	80241b2 <_strtod_l+0x3be>
 802411a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802411c:	4310      	orrs	r0, r2
 802411e:	d000      	beq.n	8024122 <_strtod_l+0x32e>
 8024120:	e6a3      	b.n	8023e6a <_strtod_l+0x76>
 8024122:	4662      	mov	r2, ip
 8024124:	2a00      	cmp	r2, #0
 8024126:	d000      	beq.n	802412a <_strtod_l+0x336>
 8024128:	e6bb      	b.n	8023ea2 <_strtod_l+0xae>
 802412a:	2b69      	cmp	r3, #105	@ 0x69
 802412c:	d025      	beq.n	802417a <_strtod_l+0x386>
 802412e:	dc21      	bgt.n	8024174 <_strtod_l+0x380>
 8024130:	2b49      	cmp	r3, #73	@ 0x49
 8024132:	d022      	beq.n	802417a <_strtod_l+0x386>
 8024134:	2b4e      	cmp	r3, #78	@ 0x4e
 8024136:	d000      	beq.n	802413a <_strtod_l+0x346>
 8024138:	e6b3      	b.n	8023ea2 <_strtod_l+0xae>
 802413a:	49a4      	ldr	r1, [pc, #656]	@ (80243cc <_strtod_l+0x5d8>)
 802413c:	a81d      	add	r0, sp, #116	@ 0x74
 802413e:	f002 fe43 	bl	8026dc8 <__match>
 8024142:	2800      	cmp	r0, #0
 8024144:	d100      	bne.n	8024148 <_strtod_l+0x354>
 8024146:	e6ac      	b.n	8023ea2 <_strtod_l+0xae>
 8024148:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802414a:	781b      	ldrb	r3, [r3, #0]
 802414c:	2b28      	cmp	r3, #40	@ 0x28
 802414e:	d12a      	bne.n	80241a6 <_strtod_l+0x3b2>
 8024150:	499f      	ldr	r1, [pc, #636]	@ (80243d0 <_strtod_l+0x5dc>)
 8024152:	aa20      	add	r2, sp, #128	@ 0x80
 8024154:	a81d      	add	r0, sp, #116	@ 0x74
 8024156:	f002 fe4b 	bl	8026df0 <__hexnan>
 802415a:	2805      	cmp	r0, #5
 802415c:	d123      	bne.n	80241a6 <_strtod_l+0x3b2>
 802415e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024160:	4a9c      	ldr	r2, [pc, #624]	@ (80243d4 <_strtod_l+0x5e0>)
 8024162:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024164:	431a      	orrs	r2, r3
 8024166:	0017      	movs	r7, r2
 8024168:	e67f      	b.n	8023e6a <_strtod_l+0x76>
 802416a:	210a      	movs	r1, #10
 802416c:	434a      	muls	r2, r1
 802416e:	18d2      	adds	r2, r2, r3
 8024170:	3a30      	subs	r2, #48	@ 0x30
 8024172:	e7b7      	b.n	80240e4 <_strtod_l+0x2f0>
 8024174:	2b6e      	cmp	r3, #110	@ 0x6e
 8024176:	d0e0      	beq.n	802413a <_strtod_l+0x346>
 8024178:	e693      	b.n	8023ea2 <_strtod_l+0xae>
 802417a:	4997      	ldr	r1, [pc, #604]	@ (80243d8 <_strtod_l+0x5e4>)
 802417c:	a81d      	add	r0, sp, #116	@ 0x74
 802417e:	f002 fe23 	bl	8026dc8 <__match>
 8024182:	2800      	cmp	r0, #0
 8024184:	d100      	bne.n	8024188 <_strtod_l+0x394>
 8024186:	e68c      	b.n	8023ea2 <_strtod_l+0xae>
 8024188:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802418a:	4994      	ldr	r1, [pc, #592]	@ (80243dc <_strtod_l+0x5e8>)
 802418c:	3b01      	subs	r3, #1
 802418e:	a81d      	add	r0, sp, #116	@ 0x74
 8024190:	931d      	str	r3, [sp, #116]	@ 0x74
 8024192:	f002 fe19 	bl	8026dc8 <__match>
 8024196:	2800      	cmp	r0, #0
 8024198:	d102      	bne.n	80241a0 <_strtod_l+0x3ac>
 802419a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802419c:	3301      	adds	r3, #1
 802419e:	931d      	str	r3, [sp, #116]	@ 0x74
 80241a0:	2600      	movs	r6, #0
 80241a2:	4f8c      	ldr	r7, [pc, #560]	@ (80243d4 <_strtod_l+0x5e0>)
 80241a4:	e661      	b.n	8023e6a <_strtod_l+0x76>
 80241a6:	488e      	ldr	r0, [pc, #568]	@ (80243e0 <_strtod_l+0x5ec>)
 80241a8:	f001 fcaa 	bl	8025b00 <nan>
 80241ac:	0006      	movs	r6, r0
 80241ae:	000f      	movs	r7, r1
 80241b0:	e65b      	b.n	8023e6a <_strtod_l+0x76>
 80241b2:	9b07      	ldr	r3, [sp, #28]
 80241b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80241b6:	1a9b      	subs	r3, r3, r2
 80241b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80241ba:	9b08      	ldr	r3, [sp, #32]
 80241bc:	2b00      	cmp	r3, #0
 80241be:	d101      	bne.n	80241c4 <_strtod_l+0x3d0>
 80241c0:	9b06      	ldr	r3, [sp, #24]
 80241c2:	9308      	str	r3, [sp, #32]
 80241c4:	9c06      	ldr	r4, [sp, #24]
 80241c6:	2c10      	cmp	r4, #16
 80241c8:	dd00      	ble.n	80241cc <_strtod_l+0x3d8>
 80241ca:	2410      	movs	r4, #16
 80241cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80241ce:	f7df fb3d 	bl	800384c <__aeabi_ui2d>
 80241d2:	9b06      	ldr	r3, [sp, #24]
 80241d4:	0006      	movs	r6, r0
 80241d6:	000f      	movs	r7, r1
 80241d8:	2b09      	cmp	r3, #9
 80241da:	dc13      	bgt.n	8024204 <_strtod_l+0x410>
 80241dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80241de:	2b00      	cmp	r3, #0
 80241e0:	d100      	bne.n	80241e4 <_strtod_l+0x3f0>
 80241e2:	e642      	b.n	8023e6a <_strtod_l+0x76>
 80241e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80241e6:	2b00      	cmp	r3, #0
 80241e8:	dc00      	bgt.n	80241ec <_strtod_l+0x3f8>
 80241ea:	e07e      	b.n	80242ea <_strtod_l+0x4f6>
 80241ec:	2b16      	cmp	r3, #22
 80241ee:	dc63      	bgt.n	80242b8 <_strtod_l+0x4c4>
 80241f0:	497c      	ldr	r1, [pc, #496]	@ (80243e4 <_strtod_l+0x5f0>)
 80241f2:	00db      	lsls	r3, r3, #3
 80241f4:	18c9      	adds	r1, r1, r3
 80241f6:	0032      	movs	r2, r6
 80241f8:	6808      	ldr	r0, [r1, #0]
 80241fa:	6849      	ldr	r1, [r1, #4]
 80241fc:	003b      	movs	r3, r7
 80241fe:	f7de fba9 	bl	8002954 <__aeabi_dmul>
 8024202:	e7d3      	b.n	80241ac <_strtod_l+0x3b8>
 8024204:	0022      	movs	r2, r4
 8024206:	4b77      	ldr	r3, [pc, #476]	@ (80243e4 <_strtod_l+0x5f0>)
 8024208:	3a09      	subs	r2, #9
 802420a:	00d2      	lsls	r2, r2, #3
 802420c:	189b      	adds	r3, r3, r2
 802420e:	681a      	ldr	r2, [r3, #0]
 8024210:	685b      	ldr	r3, [r3, #4]
 8024212:	f7de fb9f 	bl	8002954 <__aeabi_dmul>
 8024216:	0006      	movs	r6, r0
 8024218:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802421a:	000f      	movs	r7, r1
 802421c:	f7df fb16 	bl	800384c <__aeabi_ui2d>
 8024220:	000b      	movs	r3, r1
 8024222:	0002      	movs	r2, r0
 8024224:	0039      	movs	r1, r7
 8024226:	0030      	movs	r0, r6
 8024228:	f7dd fb94 	bl	8001954 <__aeabi_dadd>
 802422c:	9b06      	ldr	r3, [sp, #24]
 802422e:	0006      	movs	r6, r0
 8024230:	000f      	movs	r7, r1
 8024232:	2b0f      	cmp	r3, #15
 8024234:	ddd2      	ble.n	80241dc <_strtod_l+0x3e8>
 8024236:	9b06      	ldr	r3, [sp, #24]
 8024238:	1b1c      	subs	r4, r3, r4
 802423a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802423c:	18e4      	adds	r4, r4, r3
 802423e:	2c00      	cmp	r4, #0
 8024240:	dc00      	bgt.n	8024244 <_strtod_l+0x450>
 8024242:	e09b      	b.n	802437c <_strtod_l+0x588>
 8024244:	220f      	movs	r2, #15
 8024246:	0023      	movs	r3, r4
 8024248:	4013      	ands	r3, r2
 802424a:	4214      	tst	r4, r2
 802424c:	d00a      	beq.n	8024264 <_strtod_l+0x470>
 802424e:	4965      	ldr	r1, [pc, #404]	@ (80243e4 <_strtod_l+0x5f0>)
 8024250:	00db      	lsls	r3, r3, #3
 8024252:	18c9      	adds	r1, r1, r3
 8024254:	0032      	movs	r2, r6
 8024256:	6808      	ldr	r0, [r1, #0]
 8024258:	6849      	ldr	r1, [r1, #4]
 802425a:	003b      	movs	r3, r7
 802425c:	f7de fb7a 	bl	8002954 <__aeabi_dmul>
 8024260:	0006      	movs	r6, r0
 8024262:	000f      	movs	r7, r1
 8024264:	230f      	movs	r3, #15
 8024266:	439c      	bics	r4, r3
 8024268:	d073      	beq.n	8024352 <_strtod_l+0x55e>
 802426a:	3326      	adds	r3, #38	@ 0x26
 802426c:	33ff      	adds	r3, #255	@ 0xff
 802426e:	429c      	cmp	r4, r3
 8024270:	dd4b      	ble.n	802430a <_strtod_l+0x516>
 8024272:	2300      	movs	r3, #0
 8024274:	9306      	str	r3, [sp, #24]
 8024276:	9307      	str	r3, [sp, #28]
 8024278:	930d      	str	r3, [sp, #52]	@ 0x34
 802427a:	9308      	str	r3, [sp, #32]
 802427c:	2322      	movs	r3, #34	@ 0x22
 802427e:	2600      	movs	r6, #0
 8024280:	9a05      	ldr	r2, [sp, #20]
 8024282:	4f54      	ldr	r7, [pc, #336]	@ (80243d4 <_strtod_l+0x5e0>)
 8024284:	6013      	str	r3, [r2, #0]
 8024286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024288:	42b3      	cmp	r3, r6
 802428a:	d100      	bne.n	802428e <_strtod_l+0x49a>
 802428c:	e5ed      	b.n	8023e6a <_strtod_l+0x76>
 802428e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024290:	9805      	ldr	r0, [sp, #20]
 8024292:	f002 ff67 	bl	8027164 <_Bfree>
 8024296:	9908      	ldr	r1, [sp, #32]
 8024298:	9805      	ldr	r0, [sp, #20]
 802429a:	f002 ff63 	bl	8027164 <_Bfree>
 802429e:	9907      	ldr	r1, [sp, #28]
 80242a0:	9805      	ldr	r0, [sp, #20]
 80242a2:	f002 ff5f 	bl	8027164 <_Bfree>
 80242a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80242a8:	9805      	ldr	r0, [sp, #20]
 80242aa:	f002 ff5b 	bl	8027164 <_Bfree>
 80242ae:	9906      	ldr	r1, [sp, #24]
 80242b0:	9805      	ldr	r0, [sp, #20]
 80242b2:	f002 ff57 	bl	8027164 <_Bfree>
 80242b6:	e5d8      	b.n	8023e6a <_strtod_l+0x76>
 80242b8:	2325      	movs	r3, #37	@ 0x25
 80242ba:	9a06      	ldr	r2, [sp, #24]
 80242bc:	1a9b      	subs	r3, r3, r2
 80242be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80242c0:	4293      	cmp	r3, r2
 80242c2:	dbb8      	blt.n	8024236 <_strtod_l+0x442>
 80242c4:	240f      	movs	r4, #15
 80242c6:	9b06      	ldr	r3, [sp, #24]
 80242c8:	4d46      	ldr	r5, [pc, #280]	@ (80243e4 <_strtod_l+0x5f0>)
 80242ca:	1ae4      	subs	r4, r4, r3
 80242cc:	00e1      	lsls	r1, r4, #3
 80242ce:	1869      	adds	r1, r5, r1
 80242d0:	0032      	movs	r2, r6
 80242d2:	6808      	ldr	r0, [r1, #0]
 80242d4:	6849      	ldr	r1, [r1, #4]
 80242d6:	003b      	movs	r3, r7
 80242d8:	f7de fb3c 	bl	8002954 <__aeabi_dmul>
 80242dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80242de:	1b1c      	subs	r4, r3, r4
 80242e0:	00e4      	lsls	r4, r4, #3
 80242e2:	192d      	adds	r5, r5, r4
 80242e4:	682a      	ldr	r2, [r5, #0]
 80242e6:	686b      	ldr	r3, [r5, #4]
 80242e8:	e789      	b.n	80241fe <_strtod_l+0x40a>
 80242ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80242ec:	3316      	adds	r3, #22
 80242ee:	dba2      	blt.n	8024236 <_strtod_l+0x442>
 80242f0:	9907      	ldr	r1, [sp, #28]
 80242f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80242f4:	4b3b      	ldr	r3, [pc, #236]	@ (80243e4 <_strtod_l+0x5f0>)
 80242f6:	1a52      	subs	r2, r2, r1
 80242f8:	00d2      	lsls	r2, r2, #3
 80242fa:	189b      	adds	r3, r3, r2
 80242fc:	0030      	movs	r0, r6
 80242fe:	681a      	ldr	r2, [r3, #0]
 8024300:	685b      	ldr	r3, [r3, #4]
 8024302:	0039      	movs	r1, r7
 8024304:	f7dd feec 	bl	80020e0 <__aeabi_ddiv>
 8024308:	e750      	b.n	80241ac <_strtod_l+0x3b8>
 802430a:	2300      	movs	r3, #0
 802430c:	0030      	movs	r0, r6
 802430e:	0039      	movs	r1, r7
 8024310:	4d35      	ldr	r5, [pc, #212]	@ (80243e8 <_strtod_l+0x5f4>)
 8024312:	1124      	asrs	r4, r4, #4
 8024314:	9309      	str	r3, [sp, #36]	@ 0x24
 8024316:	2c01      	cmp	r4, #1
 8024318:	dc1e      	bgt.n	8024358 <_strtod_l+0x564>
 802431a:	2b00      	cmp	r3, #0
 802431c:	d001      	beq.n	8024322 <_strtod_l+0x52e>
 802431e:	0006      	movs	r6, r0
 8024320:	000f      	movs	r7, r1
 8024322:	4b32      	ldr	r3, [pc, #200]	@ (80243ec <_strtod_l+0x5f8>)
 8024324:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024326:	18ff      	adds	r7, r7, r3
 8024328:	4b2f      	ldr	r3, [pc, #188]	@ (80243e8 <_strtod_l+0x5f4>)
 802432a:	00d5      	lsls	r5, r2, #3
 802432c:	195d      	adds	r5, r3, r5
 802432e:	0032      	movs	r2, r6
 8024330:	6828      	ldr	r0, [r5, #0]
 8024332:	6869      	ldr	r1, [r5, #4]
 8024334:	003b      	movs	r3, r7
 8024336:	f7de fb0d 	bl	8002954 <__aeabi_dmul>
 802433a:	4b26      	ldr	r3, [pc, #152]	@ (80243d4 <_strtod_l+0x5e0>)
 802433c:	4a2c      	ldr	r2, [pc, #176]	@ (80243f0 <_strtod_l+0x5fc>)
 802433e:	0006      	movs	r6, r0
 8024340:	400b      	ands	r3, r1
 8024342:	4293      	cmp	r3, r2
 8024344:	d895      	bhi.n	8024272 <_strtod_l+0x47e>
 8024346:	4a2b      	ldr	r2, [pc, #172]	@ (80243f4 <_strtod_l+0x600>)
 8024348:	4293      	cmp	r3, r2
 802434a:	d913      	bls.n	8024374 <_strtod_l+0x580>
 802434c:	2601      	movs	r6, #1
 802434e:	4f2a      	ldr	r7, [pc, #168]	@ (80243f8 <_strtod_l+0x604>)
 8024350:	4276      	negs	r6, r6
 8024352:	2300      	movs	r3, #0
 8024354:	9309      	str	r3, [sp, #36]	@ 0x24
 8024356:	e086      	b.n	8024466 <_strtod_l+0x672>
 8024358:	2201      	movs	r2, #1
 802435a:	4214      	tst	r4, r2
 802435c:	d004      	beq.n	8024368 <_strtod_l+0x574>
 802435e:	682a      	ldr	r2, [r5, #0]
 8024360:	686b      	ldr	r3, [r5, #4]
 8024362:	f7de faf7 	bl	8002954 <__aeabi_dmul>
 8024366:	2301      	movs	r3, #1
 8024368:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802436a:	1064      	asrs	r4, r4, #1
 802436c:	3201      	adds	r2, #1
 802436e:	9209      	str	r2, [sp, #36]	@ 0x24
 8024370:	3508      	adds	r5, #8
 8024372:	e7d0      	b.n	8024316 <_strtod_l+0x522>
 8024374:	23d4      	movs	r3, #212	@ 0xd4
 8024376:	049b      	lsls	r3, r3, #18
 8024378:	18cf      	adds	r7, r1, r3
 802437a:	e7ea      	b.n	8024352 <_strtod_l+0x55e>
 802437c:	2c00      	cmp	r4, #0
 802437e:	d0e8      	beq.n	8024352 <_strtod_l+0x55e>
 8024380:	4264      	negs	r4, r4
 8024382:	230f      	movs	r3, #15
 8024384:	0022      	movs	r2, r4
 8024386:	401a      	ands	r2, r3
 8024388:	421c      	tst	r4, r3
 802438a:	d00a      	beq.n	80243a2 <_strtod_l+0x5ae>
 802438c:	4b15      	ldr	r3, [pc, #84]	@ (80243e4 <_strtod_l+0x5f0>)
 802438e:	00d2      	lsls	r2, r2, #3
 8024390:	189b      	adds	r3, r3, r2
 8024392:	0030      	movs	r0, r6
 8024394:	681a      	ldr	r2, [r3, #0]
 8024396:	685b      	ldr	r3, [r3, #4]
 8024398:	0039      	movs	r1, r7
 802439a:	f7dd fea1 	bl	80020e0 <__aeabi_ddiv>
 802439e:	0006      	movs	r6, r0
 80243a0:	000f      	movs	r7, r1
 80243a2:	1124      	asrs	r4, r4, #4
 80243a4:	d0d5      	beq.n	8024352 <_strtod_l+0x55e>
 80243a6:	2c1f      	cmp	r4, #31
 80243a8:	dd28      	ble.n	80243fc <_strtod_l+0x608>
 80243aa:	2300      	movs	r3, #0
 80243ac:	9306      	str	r3, [sp, #24]
 80243ae:	9307      	str	r3, [sp, #28]
 80243b0:	930d      	str	r3, [sp, #52]	@ 0x34
 80243b2:	9308      	str	r3, [sp, #32]
 80243b4:	2322      	movs	r3, #34	@ 0x22
 80243b6:	9a05      	ldr	r2, [sp, #20]
 80243b8:	2600      	movs	r6, #0
 80243ba:	6013      	str	r3, [r2, #0]
 80243bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80243be:	2700      	movs	r7, #0
 80243c0:	2b00      	cmp	r3, #0
 80243c2:	d000      	beq.n	80243c6 <_strtod_l+0x5d2>
 80243c4:	e763      	b.n	802428e <_strtod_l+0x49a>
 80243c6:	e550      	b.n	8023e6a <_strtod_l+0x76>
 80243c8:	00004e1f 	.word	0x00004e1f
 80243cc:	0802e3d3 	.word	0x0802e3d3
 80243d0:	0802e598 	.word	0x0802e598
 80243d4:	7ff00000 	.word	0x7ff00000
 80243d8:	0802e3cb 	.word	0x0802e3cb
 80243dc:	0802e405 	.word	0x0802e405
 80243e0:	0802e594 	.word	0x0802e594
 80243e4:	0802e720 	.word	0x0802e720
 80243e8:	0802e6f8 	.word	0x0802e6f8
 80243ec:	fcb00000 	.word	0xfcb00000
 80243f0:	7ca00000 	.word	0x7ca00000
 80243f4:	7c900000 	.word	0x7c900000
 80243f8:	7fefffff 	.word	0x7fefffff
 80243fc:	2310      	movs	r3, #16
 80243fe:	0022      	movs	r2, r4
 8024400:	401a      	ands	r2, r3
 8024402:	9209      	str	r2, [sp, #36]	@ 0x24
 8024404:	421c      	tst	r4, r3
 8024406:	d001      	beq.n	802440c <_strtod_l+0x618>
 8024408:	335a      	adds	r3, #90	@ 0x5a
 802440a:	9309      	str	r3, [sp, #36]	@ 0x24
 802440c:	0030      	movs	r0, r6
 802440e:	0039      	movs	r1, r7
 8024410:	2300      	movs	r3, #0
 8024412:	4dc0      	ldr	r5, [pc, #768]	@ (8024714 <_strtod_l+0x920>)
 8024414:	2201      	movs	r2, #1
 8024416:	4214      	tst	r4, r2
 8024418:	d004      	beq.n	8024424 <_strtod_l+0x630>
 802441a:	682a      	ldr	r2, [r5, #0]
 802441c:	686b      	ldr	r3, [r5, #4]
 802441e:	f7de fa99 	bl	8002954 <__aeabi_dmul>
 8024422:	2301      	movs	r3, #1
 8024424:	1064      	asrs	r4, r4, #1
 8024426:	3508      	adds	r5, #8
 8024428:	2c00      	cmp	r4, #0
 802442a:	d1f3      	bne.n	8024414 <_strtod_l+0x620>
 802442c:	2b00      	cmp	r3, #0
 802442e:	d001      	beq.n	8024434 <_strtod_l+0x640>
 8024430:	0006      	movs	r6, r0
 8024432:	000f      	movs	r7, r1
 8024434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024436:	2b00      	cmp	r3, #0
 8024438:	d00d      	beq.n	8024456 <_strtod_l+0x662>
 802443a:	236b      	movs	r3, #107	@ 0x6b
 802443c:	007a      	lsls	r2, r7, #1
 802443e:	0d52      	lsrs	r2, r2, #21
 8024440:	0039      	movs	r1, r7
 8024442:	1a9b      	subs	r3, r3, r2
 8024444:	2b00      	cmp	r3, #0
 8024446:	dd06      	ble.n	8024456 <_strtod_l+0x662>
 8024448:	2b1f      	cmp	r3, #31
 802444a:	dd5c      	ble.n	8024506 <_strtod_l+0x712>
 802444c:	2600      	movs	r6, #0
 802444e:	2b34      	cmp	r3, #52	@ 0x34
 8024450:	dd52      	ble.n	80244f8 <_strtod_l+0x704>
 8024452:	27dc      	movs	r7, #220	@ 0xdc
 8024454:	04bf      	lsls	r7, r7, #18
 8024456:	2200      	movs	r2, #0
 8024458:	2300      	movs	r3, #0
 802445a:	0030      	movs	r0, r6
 802445c:	0039      	movs	r1, r7
 802445e:	f7dc f827 	bl	80004b0 <__aeabi_dcmpeq>
 8024462:	2800      	cmp	r0, #0
 8024464:	d1a1      	bne.n	80243aa <_strtod_l+0x5b6>
 8024466:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024468:	9a08      	ldr	r2, [sp, #32]
 802446a:	9300      	str	r3, [sp, #0]
 802446c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802446e:	9b06      	ldr	r3, [sp, #24]
 8024470:	9805      	ldr	r0, [sp, #20]
 8024472:	f002 fedf 	bl	8027234 <__s2b>
 8024476:	900d      	str	r0, [sp, #52]	@ 0x34
 8024478:	2800      	cmp	r0, #0
 802447a:	d100      	bne.n	802447e <_strtod_l+0x68a>
 802447c:	e6f9      	b.n	8024272 <_strtod_l+0x47e>
 802447e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024480:	9907      	ldr	r1, [sp, #28]
 8024482:	43db      	mvns	r3, r3
 8024484:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024486:	17db      	asrs	r3, r3, #31
 8024488:	1a52      	subs	r2, r2, r1
 802448a:	9214      	str	r2, [sp, #80]	@ 0x50
 802448c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802448e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8024490:	17d2      	asrs	r2, r2, #31
 8024492:	4011      	ands	r1, r2
 8024494:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024496:	9114      	str	r1, [sp, #80]	@ 0x50
 8024498:	401a      	ands	r2, r3
 802449a:	2300      	movs	r3, #0
 802449c:	921a      	str	r2, [sp, #104]	@ 0x68
 802449e:	9306      	str	r3, [sp, #24]
 80244a0:	9307      	str	r3, [sp, #28]
 80244a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80244a4:	9805      	ldr	r0, [sp, #20]
 80244a6:	6859      	ldr	r1, [r3, #4]
 80244a8:	f002 fe18 	bl	80270dc <_Balloc>
 80244ac:	9008      	str	r0, [sp, #32]
 80244ae:	2800      	cmp	r0, #0
 80244b0:	d100      	bne.n	80244b4 <_strtod_l+0x6c0>
 80244b2:	e6e3      	b.n	802427c <_strtod_l+0x488>
 80244b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80244b6:	300c      	adds	r0, #12
 80244b8:	0019      	movs	r1, r3
 80244ba:	691a      	ldr	r2, [r3, #16]
 80244bc:	310c      	adds	r1, #12
 80244be:	3202      	adds	r2, #2
 80244c0:	0092      	lsls	r2, r2, #2
 80244c2:	f001 fb13 	bl	8025aec <memcpy>
 80244c6:	ab20      	add	r3, sp, #128	@ 0x80
 80244c8:	9301      	str	r3, [sp, #4]
 80244ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80244cc:	9300      	str	r3, [sp, #0]
 80244ce:	0032      	movs	r2, r6
 80244d0:	003b      	movs	r3, r7
 80244d2:	9805      	ldr	r0, [sp, #20]
 80244d4:	9610      	str	r6, [sp, #64]	@ 0x40
 80244d6:	9711      	str	r7, [sp, #68]	@ 0x44
 80244d8:	f003 f9f4 	bl	80278c4 <__d2b>
 80244dc:	901e      	str	r0, [sp, #120]	@ 0x78
 80244de:	2800      	cmp	r0, #0
 80244e0:	d100      	bne.n	80244e4 <_strtod_l+0x6f0>
 80244e2:	e6cb      	b.n	802427c <_strtod_l+0x488>
 80244e4:	2101      	movs	r1, #1
 80244e6:	9805      	ldr	r0, [sp, #20]
 80244e8:	f002 ff40 	bl	802736c <__i2b>
 80244ec:	9007      	str	r0, [sp, #28]
 80244ee:	2800      	cmp	r0, #0
 80244f0:	d10e      	bne.n	8024510 <_strtod_l+0x71c>
 80244f2:	2300      	movs	r3, #0
 80244f4:	9307      	str	r3, [sp, #28]
 80244f6:	e6c1      	b.n	802427c <_strtod_l+0x488>
 80244f8:	234b      	movs	r3, #75	@ 0x4b
 80244fa:	1a9a      	subs	r2, r3, r2
 80244fc:	3b4c      	subs	r3, #76	@ 0x4c
 80244fe:	4093      	lsls	r3, r2
 8024500:	4019      	ands	r1, r3
 8024502:	000f      	movs	r7, r1
 8024504:	e7a7      	b.n	8024456 <_strtod_l+0x662>
 8024506:	2201      	movs	r2, #1
 8024508:	4252      	negs	r2, r2
 802450a:	409a      	lsls	r2, r3
 802450c:	4016      	ands	r6, r2
 802450e:	e7a2      	b.n	8024456 <_strtod_l+0x662>
 8024510:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024512:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024514:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8024516:	1ad4      	subs	r4, r2, r3
 8024518:	2b00      	cmp	r3, #0
 802451a:	db01      	blt.n	8024520 <_strtod_l+0x72c>
 802451c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 802451e:	195d      	adds	r5, r3, r5
 8024520:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024522:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024524:	1a5b      	subs	r3, r3, r1
 8024526:	2136      	movs	r1, #54	@ 0x36
 8024528:	189b      	adds	r3, r3, r2
 802452a:	1a8a      	subs	r2, r1, r2
 802452c:	497a      	ldr	r1, [pc, #488]	@ (8024718 <_strtod_l+0x924>)
 802452e:	2001      	movs	r0, #1
 8024530:	468c      	mov	ip, r1
 8024532:	2100      	movs	r1, #0
 8024534:	3b01      	subs	r3, #1
 8024536:	9115      	str	r1, [sp, #84]	@ 0x54
 8024538:	9016      	str	r0, [sp, #88]	@ 0x58
 802453a:	4563      	cmp	r3, ip
 802453c:	da06      	bge.n	802454c <_strtod_l+0x758>
 802453e:	4661      	mov	r1, ip
 8024540:	1ac9      	subs	r1, r1, r3
 8024542:	1a52      	subs	r2, r2, r1
 8024544:	291f      	cmp	r1, #31
 8024546:	dc3f      	bgt.n	80245c8 <_strtod_l+0x7d4>
 8024548:	4088      	lsls	r0, r1
 802454a:	9016      	str	r0, [sp, #88]	@ 0x58
 802454c:	18ab      	adds	r3, r5, r2
 802454e:	930e      	str	r3, [sp, #56]	@ 0x38
 8024550:	18a4      	adds	r4, r4, r2
 8024552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024554:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024556:	191c      	adds	r4, r3, r4
 8024558:	002b      	movs	r3, r5
 802455a:	4295      	cmp	r5, r2
 802455c:	dd00      	ble.n	8024560 <_strtod_l+0x76c>
 802455e:	0013      	movs	r3, r2
 8024560:	42a3      	cmp	r3, r4
 8024562:	dd00      	ble.n	8024566 <_strtod_l+0x772>
 8024564:	0023      	movs	r3, r4
 8024566:	2b00      	cmp	r3, #0
 8024568:	dd04      	ble.n	8024574 <_strtod_l+0x780>
 802456a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802456c:	1ae4      	subs	r4, r4, r3
 802456e:	1ad2      	subs	r2, r2, r3
 8024570:	920e      	str	r2, [sp, #56]	@ 0x38
 8024572:	1aed      	subs	r5, r5, r3
 8024574:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024576:	2b00      	cmp	r3, #0
 8024578:	dd16      	ble.n	80245a8 <_strtod_l+0x7b4>
 802457a:	001a      	movs	r2, r3
 802457c:	9907      	ldr	r1, [sp, #28]
 802457e:	9805      	ldr	r0, [sp, #20]
 8024580:	f002 ffb6 	bl	80274f0 <__pow5mult>
 8024584:	9007      	str	r0, [sp, #28]
 8024586:	2800      	cmp	r0, #0
 8024588:	d0b3      	beq.n	80244f2 <_strtod_l+0x6fe>
 802458a:	0001      	movs	r1, r0
 802458c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802458e:	9805      	ldr	r0, [sp, #20]
 8024590:	f002 ff04 	bl	802739c <__multiply>
 8024594:	9013      	str	r0, [sp, #76]	@ 0x4c
 8024596:	2800      	cmp	r0, #0
 8024598:	d100      	bne.n	802459c <_strtod_l+0x7a8>
 802459a:	e66f      	b.n	802427c <_strtod_l+0x488>
 802459c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802459e:	9805      	ldr	r0, [sp, #20]
 80245a0:	f002 fde0 	bl	8027164 <_Bfree>
 80245a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80245a6:	931e      	str	r3, [sp, #120]	@ 0x78
 80245a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80245aa:	2b00      	cmp	r3, #0
 80245ac:	dc12      	bgt.n	80245d4 <_strtod_l+0x7e0>
 80245ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80245b0:	2b00      	cmp	r3, #0
 80245b2:	dd18      	ble.n	80245e6 <_strtod_l+0x7f2>
 80245b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80245b6:	9908      	ldr	r1, [sp, #32]
 80245b8:	9805      	ldr	r0, [sp, #20]
 80245ba:	f002 ff99 	bl	80274f0 <__pow5mult>
 80245be:	9008      	str	r0, [sp, #32]
 80245c0:	2800      	cmp	r0, #0
 80245c2:	d110      	bne.n	80245e6 <_strtod_l+0x7f2>
 80245c4:	2300      	movs	r3, #0
 80245c6:	e658      	b.n	802427a <_strtod_l+0x486>
 80245c8:	4954      	ldr	r1, [pc, #336]	@ (802471c <_strtod_l+0x928>)
 80245ca:	1acb      	subs	r3, r1, r3
 80245cc:	0001      	movs	r1, r0
 80245ce:	4099      	lsls	r1, r3
 80245d0:	9115      	str	r1, [sp, #84]	@ 0x54
 80245d2:	e7ba      	b.n	802454a <_strtod_l+0x756>
 80245d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80245d6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80245d8:	9805      	ldr	r0, [sp, #20]
 80245da:	f002 ffe5 	bl	80275a8 <__lshift>
 80245de:	901e      	str	r0, [sp, #120]	@ 0x78
 80245e0:	2800      	cmp	r0, #0
 80245e2:	d1e4      	bne.n	80245ae <_strtod_l+0x7ba>
 80245e4:	e64a      	b.n	802427c <_strtod_l+0x488>
 80245e6:	2c00      	cmp	r4, #0
 80245e8:	dd07      	ble.n	80245fa <_strtod_l+0x806>
 80245ea:	0022      	movs	r2, r4
 80245ec:	9908      	ldr	r1, [sp, #32]
 80245ee:	9805      	ldr	r0, [sp, #20]
 80245f0:	f002 ffda 	bl	80275a8 <__lshift>
 80245f4:	9008      	str	r0, [sp, #32]
 80245f6:	2800      	cmp	r0, #0
 80245f8:	d0e4      	beq.n	80245c4 <_strtod_l+0x7d0>
 80245fa:	2d00      	cmp	r5, #0
 80245fc:	dd08      	ble.n	8024610 <_strtod_l+0x81c>
 80245fe:	002a      	movs	r2, r5
 8024600:	9907      	ldr	r1, [sp, #28]
 8024602:	9805      	ldr	r0, [sp, #20]
 8024604:	f002 ffd0 	bl	80275a8 <__lshift>
 8024608:	9007      	str	r0, [sp, #28]
 802460a:	2800      	cmp	r0, #0
 802460c:	d100      	bne.n	8024610 <_strtod_l+0x81c>
 802460e:	e635      	b.n	802427c <_strtod_l+0x488>
 8024610:	9a08      	ldr	r2, [sp, #32]
 8024612:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024614:	9805      	ldr	r0, [sp, #20]
 8024616:	f003 f84f 	bl	80276b8 <__mdiff>
 802461a:	9006      	str	r0, [sp, #24]
 802461c:	2800      	cmp	r0, #0
 802461e:	d100      	bne.n	8024622 <_strtod_l+0x82e>
 8024620:	e62c      	b.n	802427c <_strtod_l+0x488>
 8024622:	68c3      	ldr	r3, [r0, #12]
 8024624:	9907      	ldr	r1, [sp, #28]
 8024626:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024628:	2300      	movs	r3, #0
 802462a:	60c3      	str	r3, [r0, #12]
 802462c:	f003 f828 	bl	8027680 <__mcmp>
 8024630:	2800      	cmp	r0, #0
 8024632:	da3b      	bge.n	80246ac <_strtod_l+0x8b8>
 8024634:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024636:	4333      	orrs	r3, r6
 8024638:	d167      	bne.n	802470a <_strtod_l+0x916>
 802463a:	033b      	lsls	r3, r7, #12
 802463c:	d165      	bne.n	802470a <_strtod_l+0x916>
 802463e:	22d6      	movs	r2, #214	@ 0xd6
 8024640:	4b37      	ldr	r3, [pc, #220]	@ (8024720 <_strtod_l+0x92c>)
 8024642:	04d2      	lsls	r2, r2, #19
 8024644:	403b      	ands	r3, r7
 8024646:	4293      	cmp	r3, r2
 8024648:	d95f      	bls.n	802470a <_strtod_l+0x916>
 802464a:	9b06      	ldr	r3, [sp, #24]
 802464c:	695b      	ldr	r3, [r3, #20]
 802464e:	2b00      	cmp	r3, #0
 8024650:	d103      	bne.n	802465a <_strtod_l+0x866>
 8024652:	9b06      	ldr	r3, [sp, #24]
 8024654:	691b      	ldr	r3, [r3, #16]
 8024656:	2b01      	cmp	r3, #1
 8024658:	dd57      	ble.n	802470a <_strtod_l+0x916>
 802465a:	9906      	ldr	r1, [sp, #24]
 802465c:	2201      	movs	r2, #1
 802465e:	9805      	ldr	r0, [sp, #20]
 8024660:	f002 ffa2 	bl	80275a8 <__lshift>
 8024664:	9907      	ldr	r1, [sp, #28]
 8024666:	9006      	str	r0, [sp, #24]
 8024668:	f003 f80a 	bl	8027680 <__mcmp>
 802466c:	2800      	cmp	r0, #0
 802466e:	dd4c      	ble.n	802470a <_strtod_l+0x916>
 8024670:	4b2b      	ldr	r3, [pc, #172]	@ (8024720 <_strtod_l+0x92c>)
 8024672:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024674:	403b      	ands	r3, r7
 8024676:	2a00      	cmp	r2, #0
 8024678:	d074      	beq.n	8024764 <_strtod_l+0x970>
 802467a:	22d6      	movs	r2, #214	@ 0xd6
 802467c:	04d2      	lsls	r2, r2, #19
 802467e:	4293      	cmp	r3, r2
 8024680:	d870      	bhi.n	8024764 <_strtod_l+0x970>
 8024682:	22dc      	movs	r2, #220	@ 0xdc
 8024684:	0492      	lsls	r2, r2, #18
 8024686:	4293      	cmp	r3, r2
 8024688:	d800      	bhi.n	802468c <_strtod_l+0x898>
 802468a:	e693      	b.n	80243b4 <_strtod_l+0x5c0>
 802468c:	0030      	movs	r0, r6
 802468e:	0039      	movs	r1, r7
 8024690:	4b24      	ldr	r3, [pc, #144]	@ (8024724 <_strtod_l+0x930>)
 8024692:	2200      	movs	r2, #0
 8024694:	f7de f95e 	bl	8002954 <__aeabi_dmul>
 8024698:	4b21      	ldr	r3, [pc, #132]	@ (8024720 <_strtod_l+0x92c>)
 802469a:	0006      	movs	r6, r0
 802469c:	000f      	movs	r7, r1
 802469e:	420b      	tst	r3, r1
 80246a0:	d000      	beq.n	80246a4 <_strtod_l+0x8b0>
 80246a2:	e5f4      	b.n	802428e <_strtod_l+0x49a>
 80246a4:	2322      	movs	r3, #34	@ 0x22
 80246a6:	9a05      	ldr	r2, [sp, #20]
 80246a8:	6013      	str	r3, [r2, #0]
 80246aa:	e5f0      	b.n	802428e <_strtod_l+0x49a>
 80246ac:	970e      	str	r7, [sp, #56]	@ 0x38
 80246ae:	2800      	cmp	r0, #0
 80246b0:	d175      	bne.n	802479e <_strtod_l+0x9aa>
 80246b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80246b4:	033b      	lsls	r3, r7, #12
 80246b6:	0b1b      	lsrs	r3, r3, #12
 80246b8:	2a00      	cmp	r2, #0
 80246ba:	d039      	beq.n	8024730 <_strtod_l+0x93c>
 80246bc:	4a1a      	ldr	r2, [pc, #104]	@ (8024728 <_strtod_l+0x934>)
 80246be:	4293      	cmp	r3, r2
 80246c0:	d138      	bne.n	8024734 <_strtod_l+0x940>
 80246c2:	2101      	movs	r1, #1
 80246c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80246c6:	4249      	negs	r1, r1
 80246c8:	0032      	movs	r2, r6
 80246ca:	0008      	movs	r0, r1
 80246cc:	2b00      	cmp	r3, #0
 80246ce:	d00b      	beq.n	80246e8 <_strtod_l+0x8f4>
 80246d0:	24d4      	movs	r4, #212	@ 0xd4
 80246d2:	4b13      	ldr	r3, [pc, #76]	@ (8024720 <_strtod_l+0x92c>)
 80246d4:	0008      	movs	r0, r1
 80246d6:	403b      	ands	r3, r7
 80246d8:	04e4      	lsls	r4, r4, #19
 80246da:	42a3      	cmp	r3, r4
 80246dc:	d804      	bhi.n	80246e8 <_strtod_l+0x8f4>
 80246de:	306c      	adds	r0, #108	@ 0x6c
 80246e0:	0d1b      	lsrs	r3, r3, #20
 80246e2:	1ac3      	subs	r3, r0, r3
 80246e4:	4099      	lsls	r1, r3
 80246e6:	0008      	movs	r0, r1
 80246e8:	4282      	cmp	r2, r0
 80246ea:	d123      	bne.n	8024734 <_strtod_l+0x940>
 80246ec:	4b0f      	ldr	r3, [pc, #60]	@ (802472c <_strtod_l+0x938>)
 80246ee:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80246f0:	4299      	cmp	r1, r3
 80246f2:	d102      	bne.n	80246fa <_strtod_l+0x906>
 80246f4:	3201      	adds	r2, #1
 80246f6:	d100      	bne.n	80246fa <_strtod_l+0x906>
 80246f8:	e5c0      	b.n	802427c <_strtod_l+0x488>
 80246fa:	4b09      	ldr	r3, [pc, #36]	@ (8024720 <_strtod_l+0x92c>)
 80246fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80246fe:	2600      	movs	r6, #0
 8024700:	401a      	ands	r2, r3
 8024702:	0013      	movs	r3, r2
 8024704:	2280      	movs	r2, #128	@ 0x80
 8024706:	0352      	lsls	r2, r2, #13
 8024708:	189f      	adds	r7, r3, r2
 802470a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802470c:	2b00      	cmp	r3, #0
 802470e:	d1bd      	bne.n	802468c <_strtod_l+0x898>
 8024710:	e5bd      	b.n	802428e <_strtod_l+0x49a>
 8024712:	46c0      	nop			@ (mov r8, r8)
 8024714:	0802e5c0 	.word	0x0802e5c0
 8024718:	fffffc02 	.word	0xfffffc02
 802471c:	fffffbe2 	.word	0xfffffbe2
 8024720:	7ff00000 	.word	0x7ff00000
 8024724:	39500000 	.word	0x39500000
 8024728:	000fffff 	.word	0x000fffff
 802472c:	7fefffff 	.word	0x7fefffff
 8024730:	4333      	orrs	r3, r6
 8024732:	d09d      	beq.n	8024670 <_strtod_l+0x87c>
 8024734:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024736:	2b00      	cmp	r3, #0
 8024738:	d01c      	beq.n	8024774 <_strtod_l+0x980>
 802473a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802473c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802473e:	4213      	tst	r3, r2
 8024740:	d0e3      	beq.n	802470a <_strtod_l+0x916>
 8024742:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024744:	0030      	movs	r0, r6
 8024746:	0039      	movs	r1, r7
 8024748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802474a:	2b00      	cmp	r3, #0
 802474c:	d016      	beq.n	802477c <_strtod_l+0x988>
 802474e:	f7ff fb39 	bl	8023dc4 <sulp>
 8024752:	0002      	movs	r2, r0
 8024754:	000b      	movs	r3, r1
 8024756:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024758:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802475a:	f7dd f8fb 	bl	8001954 <__aeabi_dadd>
 802475e:	0006      	movs	r6, r0
 8024760:	000f      	movs	r7, r1
 8024762:	e7d2      	b.n	802470a <_strtod_l+0x916>
 8024764:	2601      	movs	r6, #1
 8024766:	4a92      	ldr	r2, [pc, #584]	@ (80249b0 <_strtod_l+0xbbc>)
 8024768:	4276      	negs	r6, r6
 802476a:	189b      	adds	r3, r3, r2
 802476c:	4a91      	ldr	r2, [pc, #580]	@ (80249b4 <_strtod_l+0xbc0>)
 802476e:	431a      	orrs	r2, r3
 8024770:	0017      	movs	r7, r2
 8024772:	e7ca      	b.n	802470a <_strtod_l+0x916>
 8024774:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024776:	4233      	tst	r3, r6
 8024778:	d0c7      	beq.n	802470a <_strtod_l+0x916>
 802477a:	e7e2      	b.n	8024742 <_strtod_l+0x94e>
 802477c:	f7ff fb22 	bl	8023dc4 <sulp>
 8024780:	0002      	movs	r2, r0
 8024782:	000b      	movs	r3, r1
 8024784:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024786:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024788:	f7de fbca 	bl	8002f20 <__aeabi_dsub>
 802478c:	2200      	movs	r2, #0
 802478e:	2300      	movs	r3, #0
 8024790:	0006      	movs	r6, r0
 8024792:	000f      	movs	r7, r1
 8024794:	f7db fe8c 	bl	80004b0 <__aeabi_dcmpeq>
 8024798:	2800      	cmp	r0, #0
 802479a:	d0b6      	beq.n	802470a <_strtod_l+0x916>
 802479c:	e60a      	b.n	80243b4 <_strtod_l+0x5c0>
 802479e:	9907      	ldr	r1, [sp, #28]
 80247a0:	9806      	ldr	r0, [sp, #24]
 80247a2:	f003 f8ef 	bl	8027984 <__ratio>
 80247a6:	2380      	movs	r3, #128	@ 0x80
 80247a8:	2200      	movs	r2, #0
 80247aa:	05db      	lsls	r3, r3, #23
 80247ac:	0004      	movs	r4, r0
 80247ae:	000d      	movs	r5, r1
 80247b0:	f7db fe8e 	bl	80004d0 <__aeabi_dcmple>
 80247b4:	2800      	cmp	r0, #0
 80247b6:	d06c      	beq.n	8024892 <_strtod_l+0xa9e>
 80247b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80247ba:	2b00      	cmp	r3, #0
 80247bc:	d177      	bne.n	80248ae <_strtod_l+0xaba>
 80247be:	2e00      	cmp	r6, #0
 80247c0:	d157      	bne.n	8024872 <_strtod_l+0xa7e>
 80247c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80247c4:	031b      	lsls	r3, r3, #12
 80247c6:	d15a      	bne.n	802487e <_strtod_l+0xa8a>
 80247c8:	2200      	movs	r2, #0
 80247ca:	0020      	movs	r0, r4
 80247cc:	0029      	movs	r1, r5
 80247ce:	4b7a      	ldr	r3, [pc, #488]	@ (80249b8 <_strtod_l+0xbc4>)
 80247d0:	f7db fe74 	bl	80004bc <__aeabi_dcmplt>
 80247d4:	2800      	cmp	r0, #0
 80247d6:	d159      	bne.n	802488c <_strtod_l+0xa98>
 80247d8:	0020      	movs	r0, r4
 80247da:	0029      	movs	r1, r5
 80247dc:	2200      	movs	r2, #0
 80247de:	4b77      	ldr	r3, [pc, #476]	@ (80249bc <_strtod_l+0xbc8>)
 80247e0:	f7de f8b8 	bl	8002954 <__aeabi_dmul>
 80247e4:	0004      	movs	r4, r0
 80247e6:	000d      	movs	r5, r1
 80247e8:	2380      	movs	r3, #128	@ 0x80
 80247ea:	061b      	lsls	r3, r3, #24
 80247ec:	18eb      	adds	r3, r5, r3
 80247ee:	940a      	str	r4, [sp, #40]	@ 0x28
 80247f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80247f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80247f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80247f6:	9216      	str	r2, [sp, #88]	@ 0x58
 80247f8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80247fa:	4a71      	ldr	r2, [pc, #452]	@ (80249c0 <_strtod_l+0xbcc>)
 80247fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80247fe:	4013      	ands	r3, r2
 8024800:	9315      	str	r3, [sp, #84]	@ 0x54
 8024802:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024804:	4b6f      	ldr	r3, [pc, #444]	@ (80249c4 <_strtod_l+0xbd0>)
 8024806:	429a      	cmp	r2, r3
 8024808:	d000      	beq.n	802480c <_strtod_l+0xa18>
 802480a:	e087      	b.n	802491c <_strtod_l+0xb28>
 802480c:	4a6e      	ldr	r2, [pc, #440]	@ (80249c8 <_strtod_l+0xbd4>)
 802480e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024810:	4694      	mov	ip, r2
 8024812:	4463      	add	r3, ip
 8024814:	001f      	movs	r7, r3
 8024816:	0030      	movs	r0, r6
 8024818:	0019      	movs	r1, r3
 802481a:	f002 ffe7 	bl	80277ec <__ulp>
 802481e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024820:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024822:	f7de f897 	bl	8002954 <__aeabi_dmul>
 8024826:	0032      	movs	r2, r6
 8024828:	003b      	movs	r3, r7
 802482a:	f7dd f893 	bl	8001954 <__aeabi_dadd>
 802482e:	4a64      	ldr	r2, [pc, #400]	@ (80249c0 <_strtod_l+0xbcc>)
 8024830:	4b66      	ldr	r3, [pc, #408]	@ (80249cc <_strtod_l+0xbd8>)
 8024832:	0006      	movs	r6, r0
 8024834:	400a      	ands	r2, r1
 8024836:	429a      	cmp	r2, r3
 8024838:	d940      	bls.n	80248bc <_strtod_l+0xac8>
 802483a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802483c:	4a64      	ldr	r2, [pc, #400]	@ (80249d0 <_strtod_l+0xbdc>)
 802483e:	4293      	cmp	r3, r2
 8024840:	d103      	bne.n	802484a <_strtod_l+0xa56>
 8024842:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024844:	3301      	adds	r3, #1
 8024846:	d100      	bne.n	802484a <_strtod_l+0xa56>
 8024848:	e518      	b.n	802427c <_strtod_l+0x488>
 802484a:	2601      	movs	r6, #1
 802484c:	4f60      	ldr	r7, [pc, #384]	@ (80249d0 <_strtod_l+0xbdc>)
 802484e:	4276      	negs	r6, r6
 8024850:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024852:	9805      	ldr	r0, [sp, #20]
 8024854:	f002 fc86 	bl	8027164 <_Bfree>
 8024858:	9908      	ldr	r1, [sp, #32]
 802485a:	9805      	ldr	r0, [sp, #20]
 802485c:	f002 fc82 	bl	8027164 <_Bfree>
 8024860:	9907      	ldr	r1, [sp, #28]
 8024862:	9805      	ldr	r0, [sp, #20]
 8024864:	f002 fc7e 	bl	8027164 <_Bfree>
 8024868:	9906      	ldr	r1, [sp, #24]
 802486a:	9805      	ldr	r0, [sp, #20]
 802486c:	f002 fc7a 	bl	8027164 <_Bfree>
 8024870:	e617      	b.n	80244a2 <_strtod_l+0x6ae>
 8024872:	2e01      	cmp	r6, #1
 8024874:	d103      	bne.n	802487e <_strtod_l+0xa8a>
 8024876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024878:	2b00      	cmp	r3, #0
 802487a:	d100      	bne.n	802487e <_strtod_l+0xa8a>
 802487c:	e59a      	b.n	80243b4 <_strtod_l+0x5c0>
 802487e:	2300      	movs	r3, #0
 8024880:	4c54      	ldr	r4, [pc, #336]	@ (80249d4 <_strtod_l+0xbe0>)
 8024882:	4d4d      	ldr	r5, [pc, #308]	@ (80249b8 <_strtod_l+0xbc4>)
 8024884:	930a      	str	r3, [sp, #40]	@ 0x28
 8024886:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024888:	2400      	movs	r4, #0
 802488a:	e7b2      	b.n	80247f2 <_strtod_l+0x9fe>
 802488c:	2400      	movs	r4, #0
 802488e:	4d4b      	ldr	r5, [pc, #300]	@ (80249bc <_strtod_l+0xbc8>)
 8024890:	e7aa      	b.n	80247e8 <_strtod_l+0x9f4>
 8024892:	0020      	movs	r0, r4
 8024894:	0029      	movs	r1, r5
 8024896:	4b49      	ldr	r3, [pc, #292]	@ (80249bc <_strtod_l+0xbc8>)
 8024898:	2200      	movs	r2, #0
 802489a:	f7de f85b 	bl	8002954 <__aeabi_dmul>
 802489e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80248a0:	0004      	movs	r4, r0
 80248a2:	000d      	movs	r5, r1
 80248a4:	2b00      	cmp	r3, #0
 80248a6:	d09f      	beq.n	80247e8 <_strtod_l+0x9f4>
 80248a8:	940a      	str	r4, [sp, #40]	@ 0x28
 80248aa:	950b      	str	r5, [sp, #44]	@ 0x2c
 80248ac:	e7a1      	b.n	80247f2 <_strtod_l+0x9fe>
 80248ae:	2300      	movs	r3, #0
 80248b0:	4c41      	ldr	r4, [pc, #260]	@ (80249b8 <_strtod_l+0xbc4>)
 80248b2:	0025      	movs	r5, r4
 80248b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80248b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80248b8:	001c      	movs	r4, r3
 80248ba:	e79a      	b.n	80247f2 <_strtod_l+0x9fe>
 80248bc:	23d4      	movs	r3, #212	@ 0xd4
 80248be:	049b      	lsls	r3, r3, #18
 80248c0:	18cf      	adds	r7, r1, r3
 80248c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248c4:	9710      	str	r7, [sp, #64]	@ 0x40
 80248c6:	2b00      	cmp	r3, #0
 80248c8:	d1c2      	bne.n	8024850 <_strtod_l+0xa5c>
 80248ca:	4b3d      	ldr	r3, [pc, #244]	@ (80249c0 <_strtod_l+0xbcc>)
 80248cc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80248ce:	403b      	ands	r3, r7
 80248d0:	429a      	cmp	r2, r3
 80248d2:	d1bd      	bne.n	8024850 <_strtod_l+0xa5c>
 80248d4:	0020      	movs	r0, r4
 80248d6:	0029      	movs	r1, r5
 80248d8:	f7db fed6 	bl	8000688 <__aeabi_d2lz>
 80248dc:	f7db ff0e 	bl	80006fc <__aeabi_l2d>
 80248e0:	0002      	movs	r2, r0
 80248e2:	000b      	movs	r3, r1
 80248e4:	0020      	movs	r0, r4
 80248e6:	0029      	movs	r1, r5
 80248e8:	f7de fb1a 	bl	8002f20 <__aeabi_dsub>
 80248ec:	033c      	lsls	r4, r7, #12
 80248ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80248f0:	0b24      	lsrs	r4, r4, #12
 80248f2:	4334      	orrs	r4, r6
 80248f4:	900e      	str	r0, [sp, #56]	@ 0x38
 80248f6:	910f      	str	r1, [sp, #60]	@ 0x3c
 80248f8:	4a37      	ldr	r2, [pc, #220]	@ (80249d8 <_strtod_l+0xbe4>)
 80248fa:	431c      	orrs	r4, r3
 80248fc:	d052      	beq.n	80249a4 <_strtod_l+0xbb0>
 80248fe:	4b37      	ldr	r3, [pc, #220]	@ (80249dc <_strtod_l+0xbe8>)
 8024900:	f7db fddc 	bl	80004bc <__aeabi_dcmplt>
 8024904:	2800      	cmp	r0, #0
 8024906:	d000      	beq.n	802490a <_strtod_l+0xb16>
 8024908:	e4c1      	b.n	802428e <_strtod_l+0x49a>
 802490a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802490c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802490e:	4a34      	ldr	r2, [pc, #208]	@ (80249e0 <_strtod_l+0xbec>)
 8024910:	4b2a      	ldr	r3, [pc, #168]	@ (80249bc <_strtod_l+0xbc8>)
 8024912:	f7db fde7 	bl	80004e4 <__aeabi_dcmpgt>
 8024916:	2800      	cmp	r0, #0
 8024918:	d09a      	beq.n	8024850 <_strtod_l+0xa5c>
 802491a:	e4b8      	b.n	802428e <_strtod_l+0x49a>
 802491c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802491e:	2b00      	cmp	r3, #0
 8024920:	d02a      	beq.n	8024978 <_strtod_l+0xb84>
 8024922:	23d4      	movs	r3, #212	@ 0xd4
 8024924:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024926:	04db      	lsls	r3, r3, #19
 8024928:	429a      	cmp	r2, r3
 802492a:	d825      	bhi.n	8024978 <_strtod_l+0xb84>
 802492c:	0020      	movs	r0, r4
 802492e:	0029      	movs	r1, r5
 8024930:	4a2c      	ldr	r2, [pc, #176]	@ (80249e4 <_strtod_l+0xbf0>)
 8024932:	4b2d      	ldr	r3, [pc, #180]	@ (80249e8 <_strtod_l+0xbf4>)
 8024934:	f7db fdcc 	bl	80004d0 <__aeabi_dcmple>
 8024938:	2800      	cmp	r0, #0
 802493a:	d016      	beq.n	802496a <_strtod_l+0xb76>
 802493c:	0020      	movs	r0, r4
 802493e:	0029      	movs	r1, r5
 8024940:	f7db fe84 	bl	800064c <__aeabi_d2uiz>
 8024944:	2800      	cmp	r0, #0
 8024946:	d100      	bne.n	802494a <_strtod_l+0xb56>
 8024948:	3001      	adds	r0, #1
 802494a:	f7de ff7f 	bl	800384c <__aeabi_ui2d>
 802494e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024950:	0004      	movs	r4, r0
 8024952:	000d      	movs	r5, r1
 8024954:	2b00      	cmp	r3, #0
 8024956:	d122      	bne.n	802499e <_strtod_l+0xbaa>
 8024958:	2380      	movs	r3, #128	@ 0x80
 802495a:	061b      	lsls	r3, r3, #24
 802495c:	18cb      	adds	r3, r1, r3
 802495e:	9018      	str	r0, [sp, #96]	@ 0x60
 8024960:	9319      	str	r3, [sp, #100]	@ 0x64
 8024962:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024964:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024966:	9216      	str	r2, [sp, #88]	@ 0x58
 8024968:	9317      	str	r3, [sp, #92]	@ 0x5c
 802496a:	22d6      	movs	r2, #214	@ 0xd6
 802496c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802496e:	04d2      	lsls	r2, r2, #19
 8024970:	189b      	adds	r3, r3, r2
 8024972:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024974:	1a9b      	subs	r3, r3, r2
 8024976:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024978:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802497a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802497c:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 802497e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8024980:	f002 ff34 	bl	80277ec <__ulp>
 8024984:	0002      	movs	r2, r0
 8024986:	000b      	movs	r3, r1
 8024988:	0030      	movs	r0, r6
 802498a:	0039      	movs	r1, r7
 802498c:	f7dd ffe2 	bl	8002954 <__aeabi_dmul>
 8024990:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8024992:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024994:	f7dc ffde 	bl	8001954 <__aeabi_dadd>
 8024998:	0006      	movs	r6, r0
 802499a:	000f      	movs	r7, r1
 802499c:	e791      	b.n	80248c2 <_strtod_l+0xace>
 802499e:	9418      	str	r4, [sp, #96]	@ 0x60
 80249a0:	9519      	str	r5, [sp, #100]	@ 0x64
 80249a2:	e7de      	b.n	8024962 <_strtod_l+0xb6e>
 80249a4:	4b11      	ldr	r3, [pc, #68]	@ (80249ec <_strtod_l+0xbf8>)
 80249a6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80249a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80249aa:	f7db fd87 	bl	80004bc <__aeabi_dcmplt>
 80249ae:	e7b2      	b.n	8024916 <_strtod_l+0xb22>
 80249b0:	fff00000 	.word	0xfff00000
 80249b4:	000fffff 	.word	0x000fffff
 80249b8:	3ff00000 	.word	0x3ff00000
 80249bc:	3fe00000 	.word	0x3fe00000
 80249c0:	7ff00000 	.word	0x7ff00000
 80249c4:	7fe00000 	.word	0x7fe00000
 80249c8:	fcb00000 	.word	0xfcb00000
 80249cc:	7c9fffff 	.word	0x7c9fffff
 80249d0:	7fefffff 	.word	0x7fefffff
 80249d4:	bff00000 	.word	0xbff00000
 80249d8:	94a03595 	.word	0x94a03595
 80249dc:	3fdfffff 	.word	0x3fdfffff
 80249e0:	35afe535 	.word	0x35afe535
 80249e4:	ffc00000 	.word	0xffc00000
 80249e8:	41dfffff 	.word	0x41dfffff
 80249ec:	3fcfffff 	.word	0x3fcfffff

080249f0 <strtod>:
 80249f0:	b510      	push	{r4, lr}
 80249f2:	4c04      	ldr	r4, [pc, #16]	@ (8024a04 <strtod+0x14>)
 80249f4:	000a      	movs	r2, r1
 80249f6:	0001      	movs	r1, r0
 80249f8:	4b03      	ldr	r3, [pc, #12]	@ (8024a08 <strtod+0x18>)
 80249fa:	6820      	ldr	r0, [r4, #0]
 80249fc:	f7ff f9fa 	bl	8023df4 <_strtod_l>
 8024a00:	bd10      	pop	{r4, pc}
 8024a02:	46c0      	nop			@ (mov r8, r8)
 8024a04:	200003e0 	.word	0x200003e0
 8024a08:	20000274 	.word	0x20000274

08024a0c <_strtol_l.isra.0>:
 8024a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a0e:	b085      	sub	sp, #20
 8024a10:	0017      	movs	r7, r2
 8024a12:	001e      	movs	r6, r3
 8024a14:	9003      	str	r0, [sp, #12]
 8024a16:	9101      	str	r1, [sp, #4]
 8024a18:	2b24      	cmp	r3, #36	@ 0x24
 8024a1a:	d823      	bhi.n	8024a64 <_strtol_l.isra.0+0x58>
 8024a1c:	000c      	movs	r4, r1
 8024a1e:	2b01      	cmp	r3, #1
 8024a20:	d020      	beq.n	8024a64 <_strtol_l.isra.0+0x58>
 8024a22:	4b3d      	ldr	r3, [pc, #244]	@ (8024b18 <_strtol_l.isra.0+0x10c>)
 8024a24:	2208      	movs	r2, #8
 8024a26:	469c      	mov	ip, r3
 8024a28:	0023      	movs	r3, r4
 8024a2a:	4661      	mov	r1, ip
 8024a2c:	781d      	ldrb	r5, [r3, #0]
 8024a2e:	3401      	adds	r4, #1
 8024a30:	5d48      	ldrb	r0, [r1, r5]
 8024a32:	0001      	movs	r1, r0
 8024a34:	4011      	ands	r1, r2
 8024a36:	4210      	tst	r0, r2
 8024a38:	d1f6      	bne.n	8024a28 <_strtol_l.isra.0+0x1c>
 8024a3a:	2d2d      	cmp	r5, #45	@ 0x2d
 8024a3c:	d119      	bne.n	8024a72 <_strtol_l.isra.0+0x66>
 8024a3e:	7825      	ldrb	r5, [r4, #0]
 8024a40:	1c9c      	adds	r4, r3, #2
 8024a42:	2301      	movs	r3, #1
 8024a44:	9300      	str	r3, [sp, #0]
 8024a46:	2210      	movs	r2, #16
 8024a48:	0033      	movs	r3, r6
 8024a4a:	4393      	bics	r3, r2
 8024a4c:	d11d      	bne.n	8024a8a <_strtol_l.isra.0+0x7e>
 8024a4e:	2d30      	cmp	r5, #48	@ 0x30
 8024a50:	d115      	bne.n	8024a7e <_strtol_l.isra.0+0x72>
 8024a52:	2120      	movs	r1, #32
 8024a54:	7823      	ldrb	r3, [r4, #0]
 8024a56:	438b      	bics	r3, r1
 8024a58:	2b58      	cmp	r3, #88	@ 0x58
 8024a5a:	d110      	bne.n	8024a7e <_strtol_l.isra.0+0x72>
 8024a5c:	7865      	ldrb	r5, [r4, #1]
 8024a5e:	3402      	adds	r4, #2
 8024a60:	2610      	movs	r6, #16
 8024a62:	e012      	b.n	8024a8a <_strtol_l.isra.0+0x7e>
 8024a64:	f001 f80a 	bl	8025a7c <__errno>
 8024a68:	2316      	movs	r3, #22
 8024a6a:	6003      	str	r3, [r0, #0]
 8024a6c:	2000      	movs	r0, #0
 8024a6e:	b005      	add	sp, #20
 8024a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a72:	9100      	str	r1, [sp, #0]
 8024a74:	2d2b      	cmp	r5, #43	@ 0x2b
 8024a76:	d1e6      	bne.n	8024a46 <_strtol_l.isra.0+0x3a>
 8024a78:	7825      	ldrb	r5, [r4, #0]
 8024a7a:	1c9c      	adds	r4, r3, #2
 8024a7c:	e7e3      	b.n	8024a46 <_strtol_l.isra.0+0x3a>
 8024a7e:	2e00      	cmp	r6, #0
 8024a80:	d1ee      	bne.n	8024a60 <_strtol_l.isra.0+0x54>
 8024a82:	360a      	adds	r6, #10
 8024a84:	2d30      	cmp	r5, #48	@ 0x30
 8024a86:	d100      	bne.n	8024a8a <_strtol_l.isra.0+0x7e>
 8024a88:	3e02      	subs	r6, #2
 8024a8a:	4a24      	ldr	r2, [pc, #144]	@ (8024b1c <_strtol_l.isra.0+0x110>)
 8024a8c:	9b00      	ldr	r3, [sp, #0]
 8024a8e:	4694      	mov	ip, r2
 8024a90:	4463      	add	r3, ip
 8024a92:	0031      	movs	r1, r6
 8024a94:	0018      	movs	r0, r3
 8024a96:	9302      	str	r3, [sp, #8]
 8024a98:	f7db fc0a 	bl	80002b0 <__aeabi_uidivmod>
 8024a9c:	2200      	movs	r2, #0
 8024a9e:	4684      	mov	ip, r0
 8024aa0:	0010      	movs	r0, r2
 8024aa2:	002b      	movs	r3, r5
 8024aa4:	3b30      	subs	r3, #48	@ 0x30
 8024aa6:	2b09      	cmp	r3, #9
 8024aa8:	d811      	bhi.n	8024ace <_strtol_l.isra.0+0xc2>
 8024aaa:	001d      	movs	r5, r3
 8024aac:	42ae      	cmp	r6, r5
 8024aae:	dd1d      	ble.n	8024aec <_strtol_l.isra.0+0xe0>
 8024ab0:	1c53      	adds	r3, r2, #1
 8024ab2:	d009      	beq.n	8024ac8 <_strtol_l.isra.0+0xbc>
 8024ab4:	2201      	movs	r2, #1
 8024ab6:	4252      	negs	r2, r2
 8024ab8:	4584      	cmp	ip, r0
 8024aba:	d305      	bcc.n	8024ac8 <_strtol_l.isra.0+0xbc>
 8024abc:	d101      	bne.n	8024ac2 <_strtol_l.isra.0+0xb6>
 8024abe:	42a9      	cmp	r1, r5
 8024ac0:	db11      	blt.n	8024ae6 <_strtol_l.isra.0+0xda>
 8024ac2:	2201      	movs	r2, #1
 8024ac4:	4370      	muls	r0, r6
 8024ac6:	1828      	adds	r0, r5, r0
 8024ac8:	7825      	ldrb	r5, [r4, #0]
 8024aca:	3401      	adds	r4, #1
 8024acc:	e7e9      	b.n	8024aa2 <_strtol_l.isra.0+0x96>
 8024ace:	002b      	movs	r3, r5
 8024ad0:	3b41      	subs	r3, #65	@ 0x41
 8024ad2:	2b19      	cmp	r3, #25
 8024ad4:	d801      	bhi.n	8024ada <_strtol_l.isra.0+0xce>
 8024ad6:	3d37      	subs	r5, #55	@ 0x37
 8024ad8:	e7e8      	b.n	8024aac <_strtol_l.isra.0+0xa0>
 8024ada:	002b      	movs	r3, r5
 8024adc:	3b61      	subs	r3, #97	@ 0x61
 8024ade:	2b19      	cmp	r3, #25
 8024ae0:	d804      	bhi.n	8024aec <_strtol_l.isra.0+0xe0>
 8024ae2:	3d57      	subs	r5, #87	@ 0x57
 8024ae4:	e7e2      	b.n	8024aac <_strtol_l.isra.0+0xa0>
 8024ae6:	2201      	movs	r2, #1
 8024ae8:	4252      	negs	r2, r2
 8024aea:	e7ed      	b.n	8024ac8 <_strtol_l.isra.0+0xbc>
 8024aec:	1c53      	adds	r3, r2, #1
 8024aee:	d108      	bne.n	8024b02 <_strtol_l.isra.0+0xf6>
 8024af0:	2322      	movs	r3, #34	@ 0x22
 8024af2:	9a03      	ldr	r2, [sp, #12]
 8024af4:	9802      	ldr	r0, [sp, #8]
 8024af6:	6013      	str	r3, [r2, #0]
 8024af8:	2f00      	cmp	r7, #0
 8024afa:	d0b8      	beq.n	8024a6e <_strtol_l.isra.0+0x62>
 8024afc:	1e63      	subs	r3, r4, #1
 8024afe:	9301      	str	r3, [sp, #4]
 8024b00:	e007      	b.n	8024b12 <_strtol_l.isra.0+0x106>
 8024b02:	9b00      	ldr	r3, [sp, #0]
 8024b04:	2b00      	cmp	r3, #0
 8024b06:	d000      	beq.n	8024b0a <_strtol_l.isra.0+0xfe>
 8024b08:	4240      	negs	r0, r0
 8024b0a:	2f00      	cmp	r7, #0
 8024b0c:	d0af      	beq.n	8024a6e <_strtol_l.isra.0+0x62>
 8024b0e:	2a00      	cmp	r2, #0
 8024b10:	d1f4      	bne.n	8024afc <_strtol_l.isra.0+0xf0>
 8024b12:	9b01      	ldr	r3, [sp, #4]
 8024b14:	603b      	str	r3, [r7, #0]
 8024b16:	e7aa      	b.n	8024a6e <_strtol_l.isra.0+0x62>
 8024b18:	0802e5e9 	.word	0x0802e5e9
 8024b1c:	7fffffff 	.word	0x7fffffff

08024b20 <strtol>:
 8024b20:	b510      	push	{r4, lr}
 8024b22:	4c04      	ldr	r4, [pc, #16]	@ (8024b34 <strtol+0x14>)
 8024b24:	0013      	movs	r3, r2
 8024b26:	000a      	movs	r2, r1
 8024b28:	0001      	movs	r1, r0
 8024b2a:	6820      	ldr	r0, [r4, #0]
 8024b2c:	f7ff ff6e 	bl	8024a0c <_strtol_l.isra.0>
 8024b30:	bd10      	pop	{r4, pc}
 8024b32:	46c0      	nop			@ (mov r8, r8)
 8024b34:	200003e0 	.word	0x200003e0

08024b38 <__cvt>:
 8024b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b3a:	001f      	movs	r7, r3
 8024b3c:	2300      	movs	r3, #0
 8024b3e:	0016      	movs	r6, r2
 8024b40:	b08b      	sub	sp, #44	@ 0x2c
 8024b42:	429f      	cmp	r7, r3
 8024b44:	da04      	bge.n	8024b50 <__cvt+0x18>
 8024b46:	2180      	movs	r1, #128	@ 0x80
 8024b48:	0609      	lsls	r1, r1, #24
 8024b4a:	187b      	adds	r3, r7, r1
 8024b4c:	001f      	movs	r7, r3
 8024b4e:	232d      	movs	r3, #45	@ 0x2d
 8024b50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024b52:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8024b54:	7013      	strb	r3, [r2, #0]
 8024b56:	2320      	movs	r3, #32
 8024b58:	2203      	movs	r2, #3
 8024b5a:	439d      	bics	r5, r3
 8024b5c:	2d46      	cmp	r5, #70	@ 0x46
 8024b5e:	d007      	beq.n	8024b70 <__cvt+0x38>
 8024b60:	002b      	movs	r3, r5
 8024b62:	3b45      	subs	r3, #69	@ 0x45
 8024b64:	4259      	negs	r1, r3
 8024b66:	414b      	adcs	r3, r1
 8024b68:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8024b6a:	3a01      	subs	r2, #1
 8024b6c:	18cb      	adds	r3, r1, r3
 8024b6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8024b70:	ab09      	add	r3, sp, #36	@ 0x24
 8024b72:	9304      	str	r3, [sp, #16]
 8024b74:	ab08      	add	r3, sp, #32
 8024b76:	9303      	str	r3, [sp, #12]
 8024b78:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024b7a:	9200      	str	r2, [sp, #0]
 8024b7c:	9302      	str	r3, [sp, #8]
 8024b7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024b80:	0032      	movs	r2, r6
 8024b82:	9301      	str	r3, [sp, #4]
 8024b84:	003b      	movs	r3, r7
 8024b86:	f001 f847 	bl	8025c18 <_dtoa_r>
 8024b8a:	0004      	movs	r4, r0
 8024b8c:	2d47      	cmp	r5, #71	@ 0x47
 8024b8e:	d11b      	bne.n	8024bc8 <__cvt+0x90>
 8024b90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024b92:	07db      	lsls	r3, r3, #31
 8024b94:	d511      	bpl.n	8024bba <__cvt+0x82>
 8024b96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024b98:	18c3      	adds	r3, r0, r3
 8024b9a:	9307      	str	r3, [sp, #28]
 8024b9c:	2200      	movs	r2, #0
 8024b9e:	2300      	movs	r3, #0
 8024ba0:	0030      	movs	r0, r6
 8024ba2:	0039      	movs	r1, r7
 8024ba4:	f7db fc84 	bl	80004b0 <__aeabi_dcmpeq>
 8024ba8:	2800      	cmp	r0, #0
 8024baa:	d001      	beq.n	8024bb0 <__cvt+0x78>
 8024bac:	9b07      	ldr	r3, [sp, #28]
 8024bae:	9309      	str	r3, [sp, #36]	@ 0x24
 8024bb0:	2230      	movs	r2, #48	@ 0x30
 8024bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024bb4:	9907      	ldr	r1, [sp, #28]
 8024bb6:	428b      	cmp	r3, r1
 8024bb8:	d320      	bcc.n	8024bfc <__cvt+0xc4>
 8024bba:	0020      	movs	r0, r4
 8024bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024bbe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024bc0:	1b1b      	subs	r3, r3, r4
 8024bc2:	6013      	str	r3, [r2, #0]
 8024bc4:	b00b      	add	sp, #44	@ 0x2c
 8024bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024bc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024bca:	18c3      	adds	r3, r0, r3
 8024bcc:	9307      	str	r3, [sp, #28]
 8024bce:	2d46      	cmp	r5, #70	@ 0x46
 8024bd0:	d1e4      	bne.n	8024b9c <__cvt+0x64>
 8024bd2:	7803      	ldrb	r3, [r0, #0]
 8024bd4:	2b30      	cmp	r3, #48	@ 0x30
 8024bd6:	d10c      	bne.n	8024bf2 <__cvt+0xba>
 8024bd8:	2200      	movs	r2, #0
 8024bda:	2300      	movs	r3, #0
 8024bdc:	0030      	movs	r0, r6
 8024bde:	0039      	movs	r1, r7
 8024be0:	f7db fc66 	bl	80004b0 <__aeabi_dcmpeq>
 8024be4:	2800      	cmp	r0, #0
 8024be6:	d104      	bne.n	8024bf2 <__cvt+0xba>
 8024be8:	2301      	movs	r3, #1
 8024bea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8024bec:	1a9b      	subs	r3, r3, r2
 8024bee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024bf0:	6013      	str	r3, [r2, #0]
 8024bf2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024bf4:	9a07      	ldr	r2, [sp, #28]
 8024bf6:	681b      	ldr	r3, [r3, #0]
 8024bf8:	18d3      	adds	r3, r2, r3
 8024bfa:	e7ce      	b.n	8024b9a <__cvt+0x62>
 8024bfc:	1c59      	adds	r1, r3, #1
 8024bfe:	9109      	str	r1, [sp, #36]	@ 0x24
 8024c00:	701a      	strb	r2, [r3, #0]
 8024c02:	e7d6      	b.n	8024bb2 <__cvt+0x7a>

08024c04 <__exponent>:
 8024c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024c06:	232b      	movs	r3, #43	@ 0x2b
 8024c08:	b085      	sub	sp, #20
 8024c0a:	0005      	movs	r5, r0
 8024c0c:	1e0c      	subs	r4, r1, #0
 8024c0e:	7002      	strb	r2, [r0, #0]
 8024c10:	da01      	bge.n	8024c16 <__exponent+0x12>
 8024c12:	424c      	negs	r4, r1
 8024c14:	3302      	adds	r3, #2
 8024c16:	706b      	strb	r3, [r5, #1]
 8024c18:	2c09      	cmp	r4, #9
 8024c1a:	dd2c      	ble.n	8024c76 <__exponent+0x72>
 8024c1c:	ab02      	add	r3, sp, #8
 8024c1e:	1dde      	adds	r6, r3, #7
 8024c20:	0020      	movs	r0, r4
 8024c22:	210a      	movs	r1, #10
 8024c24:	f7db fc2e 	bl	8000484 <__aeabi_idivmod>
 8024c28:	0037      	movs	r7, r6
 8024c2a:	3130      	adds	r1, #48	@ 0x30
 8024c2c:	3e01      	subs	r6, #1
 8024c2e:	0020      	movs	r0, r4
 8024c30:	7031      	strb	r1, [r6, #0]
 8024c32:	210a      	movs	r1, #10
 8024c34:	9401      	str	r4, [sp, #4]
 8024c36:	f7db fb3f 	bl	80002b8 <__divsi3>
 8024c3a:	9b01      	ldr	r3, [sp, #4]
 8024c3c:	0004      	movs	r4, r0
 8024c3e:	2b63      	cmp	r3, #99	@ 0x63
 8024c40:	dcee      	bgt.n	8024c20 <__exponent+0x1c>
 8024c42:	1eba      	subs	r2, r7, #2
 8024c44:	1ca8      	adds	r0, r5, #2
 8024c46:	0001      	movs	r1, r0
 8024c48:	0013      	movs	r3, r2
 8024c4a:	3430      	adds	r4, #48	@ 0x30
 8024c4c:	7014      	strb	r4, [r2, #0]
 8024c4e:	ac02      	add	r4, sp, #8
 8024c50:	3407      	adds	r4, #7
 8024c52:	429c      	cmp	r4, r3
 8024c54:	d80a      	bhi.n	8024c6c <__exponent+0x68>
 8024c56:	2300      	movs	r3, #0
 8024c58:	4294      	cmp	r4, r2
 8024c5a:	d303      	bcc.n	8024c64 <__exponent+0x60>
 8024c5c:	3309      	adds	r3, #9
 8024c5e:	aa02      	add	r2, sp, #8
 8024c60:	189b      	adds	r3, r3, r2
 8024c62:	1bdb      	subs	r3, r3, r7
 8024c64:	18c0      	adds	r0, r0, r3
 8024c66:	1b40      	subs	r0, r0, r5
 8024c68:	b005      	add	sp, #20
 8024c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c6c:	781c      	ldrb	r4, [r3, #0]
 8024c6e:	3301      	adds	r3, #1
 8024c70:	700c      	strb	r4, [r1, #0]
 8024c72:	3101      	adds	r1, #1
 8024c74:	e7eb      	b.n	8024c4e <__exponent+0x4a>
 8024c76:	2330      	movs	r3, #48	@ 0x30
 8024c78:	18e4      	adds	r4, r4, r3
 8024c7a:	70ab      	strb	r3, [r5, #2]
 8024c7c:	1d28      	adds	r0, r5, #4
 8024c7e:	70ec      	strb	r4, [r5, #3]
 8024c80:	e7f1      	b.n	8024c66 <__exponent+0x62>
	...

08024c84 <_printf_float>:
 8024c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024c86:	b097      	sub	sp, #92	@ 0x5c
 8024c88:	000d      	movs	r5, r1
 8024c8a:	920a      	str	r2, [sp, #40]	@ 0x28
 8024c8c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8024c8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024c90:	9009      	str	r0, [sp, #36]	@ 0x24
 8024c92:	f000 fea1 	bl	80259d8 <_localeconv_r>
 8024c96:	6803      	ldr	r3, [r0, #0]
 8024c98:	0018      	movs	r0, r3
 8024c9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8024c9c:	f7db fa66 	bl	800016c <strlen>
 8024ca0:	2300      	movs	r3, #0
 8024ca2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8024ca4:	9314      	str	r3, [sp, #80]	@ 0x50
 8024ca6:	7e2b      	ldrb	r3, [r5, #24]
 8024ca8:	2207      	movs	r2, #7
 8024caa:	930c      	str	r3, [sp, #48]	@ 0x30
 8024cac:	682b      	ldr	r3, [r5, #0]
 8024cae:	930e      	str	r3, [sp, #56]	@ 0x38
 8024cb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8024cb2:	6823      	ldr	r3, [r4, #0]
 8024cb4:	05c9      	lsls	r1, r1, #23
 8024cb6:	d545      	bpl.n	8024d44 <_printf_float+0xc0>
 8024cb8:	189b      	adds	r3, r3, r2
 8024cba:	4393      	bics	r3, r2
 8024cbc:	001a      	movs	r2, r3
 8024cbe:	3208      	adds	r2, #8
 8024cc0:	6022      	str	r2, [r4, #0]
 8024cc2:	2201      	movs	r2, #1
 8024cc4:	681e      	ldr	r6, [r3, #0]
 8024cc6:	685f      	ldr	r7, [r3, #4]
 8024cc8:	007b      	lsls	r3, r7, #1
 8024cca:	085b      	lsrs	r3, r3, #1
 8024ccc:	9311      	str	r3, [sp, #68]	@ 0x44
 8024cce:	9610      	str	r6, [sp, #64]	@ 0x40
 8024cd0:	64ae      	str	r6, [r5, #72]	@ 0x48
 8024cd2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8024cd4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024cd6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024cd8:	4ba7      	ldr	r3, [pc, #668]	@ (8024f78 <_printf_float+0x2f4>)
 8024cda:	4252      	negs	r2, r2
 8024cdc:	f7de fd2a 	bl	8003734 <__aeabi_dcmpun>
 8024ce0:	2800      	cmp	r0, #0
 8024ce2:	d131      	bne.n	8024d48 <_printf_float+0xc4>
 8024ce4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024ce6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024ce8:	2201      	movs	r2, #1
 8024cea:	4ba3      	ldr	r3, [pc, #652]	@ (8024f78 <_printf_float+0x2f4>)
 8024cec:	4252      	negs	r2, r2
 8024cee:	f7db fbef 	bl	80004d0 <__aeabi_dcmple>
 8024cf2:	2800      	cmp	r0, #0
 8024cf4:	d128      	bne.n	8024d48 <_printf_float+0xc4>
 8024cf6:	2200      	movs	r2, #0
 8024cf8:	2300      	movs	r3, #0
 8024cfa:	0030      	movs	r0, r6
 8024cfc:	0039      	movs	r1, r7
 8024cfe:	f7db fbdd 	bl	80004bc <__aeabi_dcmplt>
 8024d02:	2800      	cmp	r0, #0
 8024d04:	d003      	beq.n	8024d0e <_printf_float+0x8a>
 8024d06:	002b      	movs	r3, r5
 8024d08:	222d      	movs	r2, #45	@ 0x2d
 8024d0a:	3343      	adds	r3, #67	@ 0x43
 8024d0c:	701a      	strb	r2, [r3, #0]
 8024d0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024d10:	4f9a      	ldr	r7, [pc, #616]	@ (8024f7c <_printf_float+0x2f8>)
 8024d12:	2b47      	cmp	r3, #71	@ 0x47
 8024d14:	d800      	bhi.n	8024d18 <_printf_float+0x94>
 8024d16:	4f9a      	ldr	r7, [pc, #616]	@ (8024f80 <_printf_float+0x2fc>)
 8024d18:	2303      	movs	r3, #3
 8024d1a:	2400      	movs	r4, #0
 8024d1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024d1e:	612b      	str	r3, [r5, #16]
 8024d20:	3301      	adds	r3, #1
 8024d22:	439a      	bics	r2, r3
 8024d24:	602a      	str	r2, [r5, #0]
 8024d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024d28:	0029      	movs	r1, r5
 8024d2a:	9300      	str	r3, [sp, #0]
 8024d2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024d30:	aa15      	add	r2, sp, #84	@ 0x54
 8024d32:	f000 f9e5 	bl	8025100 <_printf_common>
 8024d36:	3001      	adds	r0, #1
 8024d38:	d000      	beq.n	8024d3c <_printf_float+0xb8>
 8024d3a:	e09e      	b.n	8024e7a <_printf_float+0x1f6>
 8024d3c:	2001      	movs	r0, #1
 8024d3e:	4240      	negs	r0, r0
 8024d40:	b017      	add	sp, #92	@ 0x5c
 8024d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024d44:	3307      	adds	r3, #7
 8024d46:	e7b8      	b.n	8024cba <_printf_float+0x36>
 8024d48:	0032      	movs	r2, r6
 8024d4a:	003b      	movs	r3, r7
 8024d4c:	0030      	movs	r0, r6
 8024d4e:	0039      	movs	r1, r7
 8024d50:	f7de fcf0 	bl	8003734 <__aeabi_dcmpun>
 8024d54:	2800      	cmp	r0, #0
 8024d56:	d00b      	beq.n	8024d70 <_printf_float+0xec>
 8024d58:	2f00      	cmp	r7, #0
 8024d5a:	da03      	bge.n	8024d64 <_printf_float+0xe0>
 8024d5c:	002b      	movs	r3, r5
 8024d5e:	222d      	movs	r2, #45	@ 0x2d
 8024d60:	3343      	adds	r3, #67	@ 0x43
 8024d62:	701a      	strb	r2, [r3, #0]
 8024d64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024d66:	4f87      	ldr	r7, [pc, #540]	@ (8024f84 <_printf_float+0x300>)
 8024d68:	2b47      	cmp	r3, #71	@ 0x47
 8024d6a:	d8d5      	bhi.n	8024d18 <_printf_float+0x94>
 8024d6c:	4f86      	ldr	r7, [pc, #536]	@ (8024f88 <_printf_float+0x304>)
 8024d6e:	e7d3      	b.n	8024d18 <_printf_float+0x94>
 8024d70:	2220      	movs	r2, #32
 8024d72:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024d74:	686b      	ldr	r3, [r5, #4]
 8024d76:	4394      	bics	r4, r2
 8024d78:	1c5a      	adds	r2, r3, #1
 8024d7a:	d146      	bne.n	8024e0a <_printf_float+0x186>
 8024d7c:	3307      	adds	r3, #7
 8024d7e:	606b      	str	r3, [r5, #4]
 8024d80:	2380      	movs	r3, #128	@ 0x80
 8024d82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024d84:	00db      	lsls	r3, r3, #3
 8024d86:	4313      	orrs	r3, r2
 8024d88:	2200      	movs	r2, #0
 8024d8a:	602b      	str	r3, [r5, #0]
 8024d8c:	9206      	str	r2, [sp, #24]
 8024d8e:	aa14      	add	r2, sp, #80	@ 0x50
 8024d90:	9205      	str	r2, [sp, #20]
 8024d92:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024d94:	a90a      	add	r1, sp, #40	@ 0x28
 8024d96:	9204      	str	r2, [sp, #16]
 8024d98:	aa13      	add	r2, sp, #76	@ 0x4c
 8024d9a:	9203      	str	r2, [sp, #12]
 8024d9c:	2223      	movs	r2, #35	@ 0x23
 8024d9e:	1852      	adds	r2, r2, r1
 8024da0:	9202      	str	r2, [sp, #8]
 8024da2:	9301      	str	r3, [sp, #4]
 8024da4:	686b      	ldr	r3, [r5, #4]
 8024da6:	0032      	movs	r2, r6
 8024da8:	9300      	str	r3, [sp, #0]
 8024daa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024dac:	003b      	movs	r3, r7
 8024dae:	f7ff fec3 	bl	8024b38 <__cvt>
 8024db2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024db4:	0007      	movs	r7, r0
 8024db6:	2c47      	cmp	r4, #71	@ 0x47
 8024db8:	d12d      	bne.n	8024e16 <_printf_float+0x192>
 8024dba:	1cd3      	adds	r3, r2, #3
 8024dbc:	db02      	blt.n	8024dc4 <_printf_float+0x140>
 8024dbe:	686b      	ldr	r3, [r5, #4]
 8024dc0:	429a      	cmp	r2, r3
 8024dc2:	dd47      	ble.n	8024e54 <_printf_float+0x1d0>
 8024dc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024dc6:	3b02      	subs	r3, #2
 8024dc8:	b2db      	uxtb	r3, r3
 8024dca:	930c      	str	r3, [sp, #48]	@ 0x30
 8024dcc:	0028      	movs	r0, r5
 8024dce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024dd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024dd2:	3901      	subs	r1, #1
 8024dd4:	3050      	adds	r0, #80	@ 0x50
 8024dd6:	9113      	str	r1, [sp, #76]	@ 0x4c
 8024dd8:	f7ff ff14 	bl	8024c04 <__exponent>
 8024ddc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024dde:	0004      	movs	r4, r0
 8024de0:	1813      	adds	r3, r2, r0
 8024de2:	612b      	str	r3, [r5, #16]
 8024de4:	2a01      	cmp	r2, #1
 8024de6:	dc02      	bgt.n	8024dee <_printf_float+0x16a>
 8024de8:	682a      	ldr	r2, [r5, #0]
 8024dea:	07d2      	lsls	r2, r2, #31
 8024dec:	d501      	bpl.n	8024df2 <_printf_float+0x16e>
 8024dee:	3301      	adds	r3, #1
 8024df0:	612b      	str	r3, [r5, #16]
 8024df2:	2323      	movs	r3, #35	@ 0x23
 8024df4:	aa0a      	add	r2, sp, #40	@ 0x28
 8024df6:	189b      	adds	r3, r3, r2
 8024df8:	781b      	ldrb	r3, [r3, #0]
 8024dfa:	2b00      	cmp	r3, #0
 8024dfc:	d100      	bne.n	8024e00 <_printf_float+0x17c>
 8024dfe:	e792      	b.n	8024d26 <_printf_float+0xa2>
 8024e00:	002b      	movs	r3, r5
 8024e02:	222d      	movs	r2, #45	@ 0x2d
 8024e04:	3343      	adds	r3, #67	@ 0x43
 8024e06:	701a      	strb	r2, [r3, #0]
 8024e08:	e78d      	b.n	8024d26 <_printf_float+0xa2>
 8024e0a:	2c47      	cmp	r4, #71	@ 0x47
 8024e0c:	d1b8      	bne.n	8024d80 <_printf_float+0xfc>
 8024e0e:	2b00      	cmp	r3, #0
 8024e10:	d1b6      	bne.n	8024d80 <_printf_float+0xfc>
 8024e12:	3301      	adds	r3, #1
 8024e14:	e7b3      	b.n	8024d7e <_printf_float+0xfa>
 8024e16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e18:	2b65      	cmp	r3, #101	@ 0x65
 8024e1a:	d9d7      	bls.n	8024dcc <_printf_float+0x148>
 8024e1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e1e:	2b66      	cmp	r3, #102	@ 0x66
 8024e20:	d11a      	bne.n	8024e58 <_printf_float+0x1d4>
 8024e22:	686b      	ldr	r3, [r5, #4]
 8024e24:	2a00      	cmp	r2, #0
 8024e26:	dd09      	ble.n	8024e3c <_printf_float+0x1b8>
 8024e28:	612a      	str	r2, [r5, #16]
 8024e2a:	2b00      	cmp	r3, #0
 8024e2c:	d102      	bne.n	8024e34 <_printf_float+0x1b0>
 8024e2e:	6829      	ldr	r1, [r5, #0]
 8024e30:	07c9      	lsls	r1, r1, #31
 8024e32:	d50b      	bpl.n	8024e4c <_printf_float+0x1c8>
 8024e34:	3301      	adds	r3, #1
 8024e36:	189b      	adds	r3, r3, r2
 8024e38:	612b      	str	r3, [r5, #16]
 8024e3a:	e007      	b.n	8024e4c <_printf_float+0x1c8>
 8024e3c:	2b00      	cmp	r3, #0
 8024e3e:	d103      	bne.n	8024e48 <_printf_float+0x1c4>
 8024e40:	2201      	movs	r2, #1
 8024e42:	6829      	ldr	r1, [r5, #0]
 8024e44:	4211      	tst	r1, r2
 8024e46:	d000      	beq.n	8024e4a <_printf_float+0x1c6>
 8024e48:	1c9a      	adds	r2, r3, #2
 8024e4a:	612a      	str	r2, [r5, #16]
 8024e4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024e4e:	2400      	movs	r4, #0
 8024e50:	65ab      	str	r3, [r5, #88]	@ 0x58
 8024e52:	e7ce      	b.n	8024df2 <_printf_float+0x16e>
 8024e54:	2367      	movs	r3, #103	@ 0x67
 8024e56:	930c      	str	r3, [sp, #48]	@ 0x30
 8024e58:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024e5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024e5c:	4299      	cmp	r1, r3
 8024e5e:	db06      	blt.n	8024e6e <_printf_float+0x1ea>
 8024e60:	682b      	ldr	r3, [r5, #0]
 8024e62:	6129      	str	r1, [r5, #16]
 8024e64:	07db      	lsls	r3, r3, #31
 8024e66:	d5f1      	bpl.n	8024e4c <_printf_float+0x1c8>
 8024e68:	3101      	adds	r1, #1
 8024e6a:	6129      	str	r1, [r5, #16]
 8024e6c:	e7ee      	b.n	8024e4c <_printf_float+0x1c8>
 8024e6e:	2201      	movs	r2, #1
 8024e70:	2900      	cmp	r1, #0
 8024e72:	dce0      	bgt.n	8024e36 <_printf_float+0x1b2>
 8024e74:	1892      	adds	r2, r2, r2
 8024e76:	1a52      	subs	r2, r2, r1
 8024e78:	e7dd      	b.n	8024e36 <_printf_float+0x1b2>
 8024e7a:	682a      	ldr	r2, [r5, #0]
 8024e7c:	0553      	lsls	r3, r2, #21
 8024e7e:	d408      	bmi.n	8024e92 <_printf_float+0x20e>
 8024e80:	692b      	ldr	r3, [r5, #16]
 8024e82:	003a      	movs	r2, r7
 8024e84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024e86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024e88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024e8a:	47a0      	blx	r4
 8024e8c:	3001      	adds	r0, #1
 8024e8e:	d129      	bne.n	8024ee4 <_printf_float+0x260>
 8024e90:	e754      	b.n	8024d3c <_printf_float+0xb8>
 8024e92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e94:	2b65      	cmp	r3, #101	@ 0x65
 8024e96:	d800      	bhi.n	8024e9a <_printf_float+0x216>
 8024e98:	e0db      	b.n	8025052 <_printf_float+0x3ce>
 8024e9a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8024e9c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8024e9e:	2200      	movs	r2, #0
 8024ea0:	2300      	movs	r3, #0
 8024ea2:	f7db fb05 	bl	80004b0 <__aeabi_dcmpeq>
 8024ea6:	2800      	cmp	r0, #0
 8024ea8:	d033      	beq.n	8024f12 <_printf_float+0x28e>
 8024eaa:	2301      	movs	r3, #1
 8024eac:	4a37      	ldr	r2, [pc, #220]	@ (8024f8c <_printf_float+0x308>)
 8024eae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024eb0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024eb2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024eb4:	47a0      	blx	r4
 8024eb6:	3001      	adds	r0, #1
 8024eb8:	d100      	bne.n	8024ebc <_printf_float+0x238>
 8024eba:	e73f      	b.n	8024d3c <_printf_float+0xb8>
 8024ebc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8024ebe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024ec0:	42b3      	cmp	r3, r6
 8024ec2:	db02      	blt.n	8024eca <_printf_float+0x246>
 8024ec4:	682b      	ldr	r3, [r5, #0]
 8024ec6:	07db      	lsls	r3, r3, #31
 8024ec8:	d50c      	bpl.n	8024ee4 <_printf_float+0x260>
 8024eca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024ece:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024ed0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024ed4:	47a0      	blx	r4
 8024ed6:	2400      	movs	r4, #0
 8024ed8:	3001      	adds	r0, #1
 8024eda:	d100      	bne.n	8024ede <_printf_float+0x25a>
 8024edc:	e72e      	b.n	8024d3c <_printf_float+0xb8>
 8024ede:	1e73      	subs	r3, r6, #1
 8024ee0:	42a3      	cmp	r3, r4
 8024ee2:	dc0a      	bgt.n	8024efa <_printf_float+0x276>
 8024ee4:	682b      	ldr	r3, [r5, #0]
 8024ee6:	079b      	lsls	r3, r3, #30
 8024ee8:	d500      	bpl.n	8024eec <_printf_float+0x268>
 8024eea:	e106      	b.n	80250fa <_printf_float+0x476>
 8024eec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024eee:	68e8      	ldr	r0, [r5, #12]
 8024ef0:	4298      	cmp	r0, r3
 8024ef2:	db00      	blt.n	8024ef6 <_printf_float+0x272>
 8024ef4:	e724      	b.n	8024d40 <_printf_float+0xbc>
 8024ef6:	0018      	movs	r0, r3
 8024ef8:	e722      	b.n	8024d40 <_printf_float+0xbc>
 8024efa:	002a      	movs	r2, r5
 8024efc:	2301      	movs	r3, #1
 8024efe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024f00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024f02:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024f04:	321a      	adds	r2, #26
 8024f06:	47b8      	blx	r7
 8024f08:	3001      	adds	r0, #1
 8024f0a:	d100      	bne.n	8024f0e <_printf_float+0x28a>
 8024f0c:	e716      	b.n	8024d3c <_printf_float+0xb8>
 8024f0e:	3401      	adds	r4, #1
 8024f10:	e7e5      	b.n	8024ede <_printf_float+0x25a>
 8024f12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024f14:	2b00      	cmp	r3, #0
 8024f16:	dc3b      	bgt.n	8024f90 <_printf_float+0x30c>
 8024f18:	2301      	movs	r3, #1
 8024f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8024f8c <_printf_float+0x308>)
 8024f1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024f1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024f20:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024f22:	47a0      	blx	r4
 8024f24:	3001      	adds	r0, #1
 8024f26:	d100      	bne.n	8024f2a <_printf_float+0x2a6>
 8024f28:	e708      	b.n	8024d3c <_printf_float+0xb8>
 8024f2a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8024f2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024f2e:	4333      	orrs	r3, r6
 8024f30:	d102      	bne.n	8024f38 <_printf_float+0x2b4>
 8024f32:	682b      	ldr	r3, [r5, #0]
 8024f34:	07db      	lsls	r3, r3, #31
 8024f36:	d5d5      	bpl.n	8024ee4 <_printf_float+0x260>
 8024f38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024f3a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024f3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024f40:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024f42:	47a0      	blx	r4
 8024f44:	2300      	movs	r3, #0
 8024f46:	3001      	adds	r0, #1
 8024f48:	d100      	bne.n	8024f4c <_printf_float+0x2c8>
 8024f4a:	e6f7      	b.n	8024d3c <_printf_float+0xb8>
 8024f4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8024f4e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024f50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024f52:	425b      	negs	r3, r3
 8024f54:	4293      	cmp	r3, r2
 8024f56:	dc01      	bgt.n	8024f5c <_printf_float+0x2d8>
 8024f58:	0033      	movs	r3, r6
 8024f5a:	e792      	b.n	8024e82 <_printf_float+0x1fe>
 8024f5c:	002a      	movs	r2, r5
 8024f5e:	2301      	movs	r3, #1
 8024f60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024f64:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024f66:	321a      	adds	r2, #26
 8024f68:	47a0      	blx	r4
 8024f6a:	3001      	adds	r0, #1
 8024f6c:	d100      	bne.n	8024f70 <_printf_float+0x2ec>
 8024f6e:	e6e5      	b.n	8024d3c <_printf_float+0xb8>
 8024f70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024f72:	3301      	adds	r3, #1
 8024f74:	e7ea      	b.n	8024f4c <_printf_float+0x2c8>
 8024f76:	46c0      	nop			@ (mov r8, r8)
 8024f78:	7fefffff 	.word	0x7fefffff
 8024f7c:	0802e3ca 	.word	0x0802e3ca
 8024f80:	0802e3c6 	.word	0x0802e3c6
 8024f84:	0802e3d2 	.word	0x0802e3d2
 8024f88:	0802e3ce 	.word	0x0802e3ce
 8024f8c:	0802e3d6 	.word	0x0802e3d6
 8024f90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024f92:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8024f94:	930c      	str	r3, [sp, #48]	@ 0x30
 8024f96:	429e      	cmp	r6, r3
 8024f98:	dd00      	ble.n	8024f9c <_printf_float+0x318>
 8024f9a:	001e      	movs	r6, r3
 8024f9c:	2e00      	cmp	r6, #0
 8024f9e:	dc31      	bgt.n	8025004 <_printf_float+0x380>
 8024fa0:	43f3      	mvns	r3, r6
 8024fa2:	2400      	movs	r4, #0
 8024fa4:	17db      	asrs	r3, r3, #31
 8024fa6:	4033      	ands	r3, r6
 8024fa8:	930e      	str	r3, [sp, #56]	@ 0x38
 8024faa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8024fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024fae:	1af3      	subs	r3, r6, r3
 8024fb0:	42a3      	cmp	r3, r4
 8024fb2:	dc30      	bgt.n	8025016 <_printf_float+0x392>
 8024fb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024fb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024fb8:	429a      	cmp	r2, r3
 8024fba:	dc38      	bgt.n	802502e <_printf_float+0x3aa>
 8024fbc:	682b      	ldr	r3, [r5, #0]
 8024fbe:	07db      	lsls	r3, r3, #31
 8024fc0:	d435      	bmi.n	802502e <_printf_float+0x3aa>
 8024fc2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024fc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024fc6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024fc8:	1b9b      	subs	r3, r3, r6
 8024fca:	1b14      	subs	r4, r2, r4
 8024fcc:	429c      	cmp	r4, r3
 8024fce:	dd00      	ble.n	8024fd2 <_printf_float+0x34e>
 8024fd0:	001c      	movs	r4, r3
 8024fd2:	2c00      	cmp	r4, #0
 8024fd4:	dc34      	bgt.n	8025040 <_printf_float+0x3bc>
 8024fd6:	43e3      	mvns	r3, r4
 8024fd8:	2600      	movs	r6, #0
 8024fda:	17db      	asrs	r3, r3, #31
 8024fdc:	401c      	ands	r4, r3
 8024fde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024fe0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024fe2:	1ad3      	subs	r3, r2, r3
 8024fe4:	1b1b      	subs	r3, r3, r4
 8024fe6:	42b3      	cmp	r3, r6
 8024fe8:	dc00      	bgt.n	8024fec <_printf_float+0x368>
 8024fea:	e77b      	b.n	8024ee4 <_printf_float+0x260>
 8024fec:	002a      	movs	r2, r5
 8024fee:	2301      	movs	r3, #1
 8024ff0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024ff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024ff4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024ff6:	321a      	adds	r2, #26
 8024ff8:	47b8      	blx	r7
 8024ffa:	3001      	adds	r0, #1
 8024ffc:	d100      	bne.n	8025000 <_printf_float+0x37c>
 8024ffe:	e69d      	b.n	8024d3c <_printf_float+0xb8>
 8025000:	3601      	adds	r6, #1
 8025002:	e7ec      	b.n	8024fde <_printf_float+0x35a>
 8025004:	0033      	movs	r3, r6
 8025006:	003a      	movs	r2, r7
 8025008:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802500a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802500c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802500e:	47a0      	blx	r4
 8025010:	3001      	adds	r0, #1
 8025012:	d1c5      	bne.n	8024fa0 <_printf_float+0x31c>
 8025014:	e692      	b.n	8024d3c <_printf_float+0xb8>
 8025016:	002a      	movs	r2, r5
 8025018:	2301      	movs	r3, #1
 802501a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802501c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802501e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025020:	321a      	adds	r2, #26
 8025022:	47b0      	blx	r6
 8025024:	3001      	adds	r0, #1
 8025026:	d100      	bne.n	802502a <_printf_float+0x3a6>
 8025028:	e688      	b.n	8024d3c <_printf_float+0xb8>
 802502a:	3401      	adds	r4, #1
 802502c:	e7bd      	b.n	8024faa <_printf_float+0x326>
 802502e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025030:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025032:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025034:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025036:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025038:	47a0      	blx	r4
 802503a:	3001      	adds	r0, #1
 802503c:	d1c1      	bne.n	8024fc2 <_printf_float+0x33e>
 802503e:	e67d      	b.n	8024d3c <_printf_float+0xb8>
 8025040:	19ba      	adds	r2, r7, r6
 8025042:	0023      	movs	r3, r4
 8025044:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025048:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802504a:	47b0      	blx	r6
 802504c:	3001      	adds	r0, #1
 802504e:	d1c2      	bne.n	8024fd6 <_printf_float+0x352>
 8025050:	e674      	b.n	8024d3c <_printf_float+0xb8>
 8025052:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025054:	930c      	str	r3, [sp, #48]	@ 0x30
 8025056:	2b01      	cmp	r3, #1
 8025058:	dc02      	bgt.n	8025060 <_printf_float+0x3dc>
 802505a:	2301      	movs	r3, #1
 802505c:	421a      	tst	r2, r3
 802505e:	d039      	beq.n	80250d4 <_printf_float+0x450>
 8025060:	2301      	movs	r3, #1
 8025062:	003a      	movs	r2, r7
 8025064:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025066:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025068:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802506a:	47b0      	blx	r6
 802506c:	3001      	adds	r0, #1
 802506e:	d100      	bne.n	8025072 <_printf_float+0x3ee>
 8025070:	e664      	b.n	8024d3c <_printf_float+0xb8>
 8025072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025074:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025076:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025078:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802507a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802507c:	47b0      	blx	r6
 802507e:	3001      	adds	r0, #1
 8025080:	d100      	bne.n	8025084 <_printf_float+0x400>
 8025082:	e65b      	b.n	8024d3c <_printf_float+0xb8>
 8025084:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025086:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802508a:	2200      	movs	r2, #0
 802508c:	3b01      	subs	r3, #1
 802508e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025090:	2300      	movs	r3, #0
 8025092:	f7db fa0d 	bl	80004b0 <__aeabi_dcmpeq>
 8025096:	2800      	cmp	r0, #0
 8025098:	d11a      	bne.n	80250d0 <_printf_float+0x44c>
 802509a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802509c:	1c7a      	adds	r2, r7, #1
 802509e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80250a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80250a2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80250a4:	47b0      	blx	r6
 80250a6:	3001      	adds	r0, #1
 80250a8:	d10e      	bne.n	80250c8 <_printf_float+0x444>
 80250aa:	e647      	b.n	8024d3c <_printf_float+0xb8>
 80250ac:	002a      	movs	r2, r5
 80250ae:	2301      	movs	r3, #1
 80250b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80250b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80250b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80250b6:	321a      	adds	r2, #26
 80250b8:	47b8      	blx	r7
 80250ba:	3001      	adds	r0, #1
 80250bc:	d100      	bne.n	80250c0 <_printf_float+0x43c>
 80250be:	e63d      	b.n	8024d3c <_printf_float+0xb8>
 80250c0:	3601      	adds	r6, #1
 80250c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80250c4:	429e      	cmp	r6, r3
 80250c6:	dbf1      	blt.n	80250ac <_printf_float+0x428>
 80250c8:	002a      	movs	r2, r5
 80250ca:	0023      	movs	r3, r4
 80250cc:	3250      	adds	r2, #80	@ 0x50
 80250ce:	e6d9      	b.n	8024e84 <_printf_float+0x200>
 80250d0:	2600      	movs	r6, #0
 80250d2:	e7f6      	b.n	80250c2 <_printf_float+0x43e>
 80250d4:	003a      	movs	r2, r7
 80250d6:	e7e2      	b.n	802509e <_printf_float+0x41a>
 80250d8:	002a      	movs	r2, r5
 80250da:	2301      	movs	r3, #1
 80250dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80250de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80250e0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80250e2:	3219      	adds	r2, #25
 80250e4:	47b0      	blx	r6
 80250e6:	3001      	adds	r0, #1
 80250e8:	d100      	bne.n	80250ec <_printf_float+0x468>
 80250ea:	e627      	b.n	8024d3c <_printf_float+0xb8>
 80250ec:	3401      	adds	r4, #1
 80250ee:	68eb      	ldr	r3, [r5, #12]
 80250f0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80250f2:	1a9b      	subs	r3, r3, r2
 80250f4:	42a3      	cmp	r3, r4
 80250f6:	dcef      	bgt.n	80250d8 <_printf_float+0x454>
 80250f8:	e6f8      	b.n	8024eec <_printf_float+0x268>
 80250fa:	2400      	movs	r4, #0
 80250fc:	e7f7      	b.n	80250ee <_printf_float+0x46a>
 80250fe:	46c0      	nop			@ (mov r8, r8)

08025100 <_printf_common>:
 8025100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025102:	0016      	movs	r6, r2
 8025104:	9301      	str	r3, [sp, #4]
 8025106:	688a      	ldr	r2, [r1, #8]
 8025108:	690b      	ldr	r3, [r1, #16]
 802510a:	000c      	movs	r4, r1
 802510c:	9000      	str	r0, [sp, #0]
 802510e:	4293      	cmp	r3, r2
 8025110:	da00      	bge.n	8025114 <_printf_common+0x14>
 8025112:	0013      	movs	r3, r2
 8025114:	0022      	movs	r2, r4
 8025116:	6033      	str	r3, [r6, #0]
 8025118:	3243      	adds	r2, #67	@ 0x43
 802511a:	7812      	ldrb	r2, [r2, #0]
 802511c:	2a00      	cmp	r2, #0
 802511e:	d001      	beq.n	8025124 <_printf_common+0x24>
 8025120:	3301      	adds	r3, #1
 8025122:	6033      	str	r3, [r6, #0]
 8025124:	6823      	ldr	r3, [r4, #0]
 8025126:	069b      	lsls	r3, r3, #26
 8025128:	d502      	bpl.n	8025130 <_printf_common+0x30>
 802512a:	6833      	ldr	r3, [r6, #0]
 802512c:	3302      	adds	r3, #2
 802512e:	6033      	str	r3, [r6, #0]
 8025130:	6822      	ldr	r2, [r4, #0]
 8025132:	2306      	movs	r3, #6
 8025134:	0015      	movs	r5, r2
 8025136:	401d      	ands	r5, r3
 8025138:	421a      	tst	r2, r3
 802513a:	d027      	beq.n	802518c <_printf_common+0x8c>
 802513c:	0023      	movs	r3, r4
 802513e:	3343      	adds	r3, #67	@ 0x43
 8025140:	781b      	ldrb	r3, [r3, #0]
 8025142:	1e5a      	subs	r2, r3, #1
 8025144:	4193      	sbcs	r3, r2
 8025146:	6822      	ldr	r2, [r4, #0]
 8025148:	0692      	lsls	r2, r2, #26
 802514a:	d430      	bmi.n	80251ae <_printf_common+0xae>
 802514c:	0022      	movs	r2, r4
 802514e:	9901      	ldr	r1, [sp, #4]
 8025150:	9800      	ldr	r0, [sp, #0]
 8025152:	9d08      	ldr	r5, [sp, #32]
 8025154:	3243      	adds	r2, #67	@ 0x43
 8025156:	47a8      	blx	r5
 8025158:	3001      	adds	r0, #1
 802515a:	d025      	beq.n	80251a8 <_printf_common+0xa8>
 802515c:	2206      	movs	r2, #6
 802515e:	6823      	ldr	r3, [r4, #0]
 8025160:	2500      	movs	r5, #0
 8025162:	4013      	ands	r3, r2
 8025164:	2b04      	cmp	r3, #4
 8025166:	d105      	bne.n	8025174 <_printf_common+0x74>
 8025168:	6833      	ldr	r3, [r6, #0]
 802516a:	68e5      	ldr	r5, [r4, #12]
 802516c:	1aed      	subs	r5, r5, r3
 802516e:	43eb      	mvns	r3, r5
 8025170:	17db      	asrs	r3, r3, #31
 8025172:	401d      	ands	r5, r3
 8025174:	68a3      	ldr	r3, [r4, #8]
 8025176:	6922      	ldr	r2, [r4, #16]
 8025178:	4293      	cmp	r3, r2
 802517a:	dd01      	ble.n	8025180 <_printf_common+0x80>
 802517c:	1a9b      	subs	r3, r3, r2
 802517e:	18ed      	adds	r5, r5, r3
 8025180:	2600      	movs	r6, #0
 8025182:	42b5      	cmp	r5, r6
 8025184:	d120      	bne.n	80251c8 <_printf_common+0xc8>
 8025186:	2000      	movs	r0, #0
 8025188:	e010      	b.n	80251ac <_printf_common+0xac>
 802518a:	3501      	adds	r5, #1
 802518c:	68e3      	ldr	r3, [r4, #12]
 802518e:	6832      	ldr	r2, [r6, #0]
 8025190:	1a9b      	subs	r3, r3, r2
 8025192:	42ab      	cmp	r3, r5
 8025194:	ddd2      	ble.n	802513c <_printf_common+0x3c>
 8025196:	0022      	movs	r2, r4
 8025198:	2301      	movs	r3, #1
 802519a:	9901      	ldr	r1, [sp, #4]
 802519c:	9800      	ldr	r0, [sp, #0]
 802519e:	9f08      	ldr	r7, [sp, #32]
 80251a0:	3219      	adds	r2, #25
 80251a2:	47b8      	blx	r7
 80251a4:	3001      	adds	r0, #1
 80251a6:	d1f0      	bne.n	802518a <_printf_common+0x8a>
 80251a8:	2001      	movs	r0, #1
 80251aa:	4240      	negs	r0, r0
 80251ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80251ae:	2030      	movs	r0, #48	@ 0x30
 80251b0:	18e1      	adds	r1, r4, r3
 80251b2:	3143      	adds	r1, #67	@ 0x43
 80251b4:	7008      	strb	r0, [r1, #0]
 80251b6:	0021      	movs	r1, r4
 80251b8:	1c5a      	adds	r2, r3, #1
 80251ba:	3145      	adds	r1, #69	@ 0x45
 80251bc:	7809      	ldrb	r1, [r1, #0]
 80251be:	18a2      	adds	r2, r4, r2
 80251c0:	3243      	adds	r2, #67	@ 0x43
 80251c2:	3302      	adds	r3, #2
 80251c4:	7011      	strb	r1, [r2, #0]
 80251c6:	e7c1      	b.n	802514c <_printf_common+0x4c>
 80251c8:	0022      	movs	r2, r4
 80251ca:	2301      	movs	r3, #1
 80251cc:	9901      	ldr	r1, [sp, #4]
 80251ce:	9800      	ldr	r0, [sp, #0]
 80251d0:	9f08      	ldr	r7, [sp, #32]
 80251d2:	321a      	adds	r2, #26
 80251d4:	47b8      	blx	r7
 80251d6:	3001      	adds	r0, #1
 80251d8:	d0e6      	beq.n	80251a8 <_printf_common+0xa8>
 80251da:	3601      	adds	r6, #1
 80251dc:	e7d1      	b.n	8025182 <_printf_common+0x82>
	...

080251e0 <_printf_i>:
 80251e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80251e2:	b08b      	sub	sp, #44	@ 0x2c
 80251e4:	9206      	str	r2, [sp, #24]
 80251e6:	000a      	movs	r2, r1
 80251e8:	3243      	adds	r2, #67	@ 0x43
 80251ea:	9307      	str	r3, [sp, #28]
 80251ec:	9005      	str	r0, [sp, #20]
 80251ee:	9203      	str	r2, [sp, #12]
 80251f0:	7e0a      	ldrb	r2, [r1, #24]
 80251f2:	000c      	movs	r4, r1
 80251f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80251f6:	2a78      	cmp	r2, #120	@ 0x78
 80251f8:	d809      	bhi.n	802520e <_printf_i+0x2e>
 80251fa:	2a62      	cmp	r2, #98	@ 0x62
 80251fc:	d80b      	bhi.n	8025216 <_printf_i+0x36>
 80251fe:	2a00      	cmp	r2, #0
 8025200:	d100      	bne.n	8025204 <_printf_i+0x24>
 8025202:	e0ba      	b.n	802537a <_printf_i+0x19a>
 8025204:	497a      	ldr	r1, [pc, #488]	@ (80253f0 <_printf_i+0x210>)
 8025206:	9104      	str	r1, [sp, #16]
 8025208:	2a58      	cmp	r2, #88	@ 0x58
 802520a:	d100      	bne.n	802520e <_printf_i+0x2e>
 802520c:	e08e      	b.n	802532c <_printf_i+0x14c>
 802520e:	0025      	movs	r5, r4
 8025210:	3542      	adds	r5, #66	@ 0x42
 8025212:	702a      	strb	r2, [r5, #0]
 8025214:	e022      	b.n	802525c <_printf_i+0x7c>
 8025216:	0010      	movs	r0, r2
 8025218:	3863      	subs	r0, #99	@ 0x63
 802521a:	2815      	cmp	r0, #21
 802521c:	d8f7      	bhi.n	802520e <_printf_i+0x2e>
 802521e:	f7da ffb7 	bl	8000190 <__gnu_thumb1_case_shi>
 8025222:	0016      	.short	0x0016
 8025224:	fff6001f 	.word	0xfff6001f
 8025228:	fff6fff6 	.word	0xfff6fff6
 802522c:	001ffff6 	.word	0x001ffff6
 8025230:	fff6fff6 	.word	0xfff6fff6
 8025234:	fff6fff6 	.word	0xfff6fff6
 8025238:	0036009f 	.word	0x0036009f
 802523c:	fff6007e 	.word	0xfff6007e
 8025240:	00b0fff6 	.word	0x00b0fff6
 8025244:	0036fff6 	.word	0x0036fff6
 8025248:	fff6fff6 	.word	0xfff6fff6
 802524c:	0082      	.short	0x0082
 802524e:	0025      	movs	r5, r4
 8025250:	681a      	ldr	r2, [r3, #0]
 8025252:	3542      	adds	r5, #66	@ 0x42
 8025254:	1d11      	adds	r1, r2, #4
 8025256:	6019      	str	r1, [r3, #0]
 8025258:	6813      	ldr	r3, [r2, #0]
 802525a:	702b      	strb	r3, [r5, #0]
 802525c:	2301      	movs	r3, #1
 802525e:	e09e      	b.n	802539e <_printf_i+0x1be>
 8025260:	6818      	ldr	r0, [r3, #0]
 8025262:	6809      	ldr	r1, [r1, #0]
 8025264:	1d02      	adds	r2, r0, #4
 8025266:	060d      	lsls	r5, r1, #24
 8025268:	d50b      	bpl.n	8025282 <_printf_i+0xa2>
 802526a:	6806      	ldr	r6, [r0, #0]
 802526c:	601a      	str	r2, [r3, #0]
 802526e:	2e00      	cmp	r6, #0
 8025270:	da03      	bge.n	802527a <_printf_i+0x9a>
 8025272:	232d      	movs	r3, #45	@ 0x2d
 8025274:	9a03      	ldr	r2, [sp, #12]
 8025276:	4276      	negs	r6, r6
 8025278:	7013      	strb	r3, [r2, #0]
 802527a:	4b5d      	ldr	r3, [pc, #372]	@ (80253f0 <_printf_i+0x210>)
 802527c:	270a      	movs	r7, #10
 802527e:	9304      	str	r3, [sp, #16]
 8025280:	e018      	b.n	80252b4 <_printf_i+0xd4>
 8025282:	6806      	ldr	r6, [r0, #0]
 8025284:	601a      	str	r2, [r3, #0]
 8025286:	0649      	lsls	r1, r1, #25
 8025288:	d5f1      	bpl.n	802526e <_printf_i+0x8e>
 802528a:	b236      	sxth	r6, r6
 802528c:	e7ef      	b.n	802526e <_printf_i+0x8e>
 802528e:	6808      	ldr	r0, [r1, #0]
 8025290:	6819      	ldr	r1, [r3, #0]
 8025292:	c940      	ldmia	r1!, {r6}
 8025294:	0605      	lsls	r5, r0, #24
 8025296:	d402      	bmi.n	802529e <_printf_i+0xbe>
 8025298:	0640      	lsls	r0, r0, #25
 802529a:	d500      	bpl.n	802529e <_printf_i+0xbe>
 802529c:	b2b6      	uxth	r6, r6
 802529e:	6019      	str	r1, [r3, #0]
 80252a0:	4b53      	ldr	r3, [pc, #332]	@ (80253f0 <_printf_i+0x210>)
 80252a2:	270a      	movs	r7, #10
 80252a4:	9304      	str	r3, [sp, #16]
 80252a6:	2a6f      	cmp	r2, #111	@ 0x6f
 80252a8:	d100      	bne.n	80252ac <_printf_i+0xcc>
 80252aa:	3f02      	subs	r7, #2
 80252ac:	0023      	movs	r3, r4
 80252ae:	2200      	movs	r2, #0
 80252b0:	3343      	adds	r3, #67	@ 0x43
 80252b2:	701a      	strb	r2, [r3, #0]
 80252b4:	6863      	ldr	r3, [r4, #4]
 80252b6:	60a3      	str	r3, [r4, #8]
 80252b8:	2b00      	cmp	r3, #0
 80252ba:	db06      	blt.n	80252ca <_printf_i+0xea>
 80252bc:	2104      	movs	r1, #4
 80252be:	6822      	ldr	r2, [r4, #0]
 80252c0:	9d03      	ldr	r5, [sp, #12]
 80252c2:	438a      	bics	r2, r1
 80252c4:	6022      	str	r2, [r4, #0]
 80252c6:	4333      	orrs	r3, r6
 80252c8:	d00c      	beq.n	80252e4 <_printf_i+0x104>
 80252ca:	9d03      	ldr	r5, [sp, #12]
 80252cc:	0030      	movs	r0, r6
 80252ce:	0039      	movs	r1, r7
 80252d0:	f7da ffee 	bl	80002b0 <__aeabi_uidivmod>
 80252d4:	9b04      	ldr	r3, [sp, #16]
 80252d6:	3d01      	subs	r5, #1
 80252d8:	5c5b      	ldrb	r3, [r3, r1]
 80252da:	702b      	strb	r3, [r5, #0]
 80252dc:	0033      	movs	r3, r6
 80252de:	0006      	movs	r6, r0
 80252e0:	429f      	cmp	r7, r3
 80252e2:	d9f3      	bls.n	80252cc <_printf_i+0xec>
 80252e4:	2f08      	cmp	r7, #8
 80252e6:	d109      	bne.n	80252fc <_printf_i+0x11c>
 80252e8:	6823      	ldr	r3, [r4, #0]
 80252ea:	07db      	lsls	r3, r3, #31
 80252ec:	d506      	bpl.n	80252fc <_printf_i+0x11c>
 80252ee:	6862      	ldr	r2, [r4, #4]
 80252f0:	6923      	ldr	r3, [r4, #16]
 80252f2:	429a      	cmp	r2, r3
 80252f4:	dc02      	bgt.n	80252fc <_printf_i+0x11c>
 80252f6:	2330      	movs	r3, #48	@ 0x30
 80252f8:	3d01      	subs	r5, #1
 80252fa:	702b      	strb	r3, [r5, #0]
 80252fc:	9b03      	ldr	r3, [sp, #12]
 80252fe:	1b5b      	subs	r3, r3, r5
 8025300:	6123      	str	r3, [r4, #16]
 8025302:	9b07      	ldr	r3, [sp, #28]
 8025304:	0021      	movs	r1, r4
 8025306:	9300      	str	r3, [sp, #0]
 8025308:	9805      	ldr	r0, [sp, #20]
 802530a:	9b06      	ldr	r3, [sp, #24]
 802530c:	aa09      	add	r2, sp, #36	@ 0x24
 802530e:	f7ff fef7 	bl	8025100 <_printf_common>
 8025312:	3001      	adds	r0, #1
 8025314:	d148      	bne.n	80253a8 <_printf_i+0x1c8>
 8025316:	2001      	movs	r0, #1
 8025318:	4240      	negs	r0, r0
 802531a:	b00b      	add	sp, #44	@ 0x2c
 802531c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802531e:	2220      	movs	r2, #32
 8025320:	6809      	ldr	r1, [r1, #0]
 8025322:	430a      	orrs	r2, r1
 8025324:	6022      	str	r2, [r4, #0]
 8025326:	2278      	movs	r2, #120	@ 0x78
 8025328:	4932      	ldr	r1, [pc, #200]	@ (80253f4 <_printf_i+0x214>)
 802532a:	9104      	str	r1, [sp, #16]
 802532c:	0021      	movs	r1, r4
 802532e:	3145      	adds	r1, #69	@ 0x45
 8025330:	700a      	strb	r2, [r1, #0]
 8025332:	6819      	ldr	r1, [r3, #0]
 8025334:	6822      	ldr	r2, [r4, #0]
 8025336:	c940      	ldmia	r1!, {r6}
 8025338:	0610      	lsls	r0, r2, #24
 802533a:	d402      	bmi.n	8025342 <_printf_i+0x162>
 802533c:	0650      	lsls	r0, r2, #25
 802533e:	d500      	bpl.n	8025342 <_printf_i+0x162>
 8025340:	b2b6      	uxth	r6, r6
 8025342:	6019      	str	r1, [r3, #0]
 8025344:	07d3      	lsls	r3, r2, #31
 8025346:	d502      	bpl.n	802534e <_printf_i+0x16e>
 8025348:	2320      	movs	r3, #32
 802534a:	4313      	orrs	r3, r2
 802534c:	6023      	str	r3, [r4, #0]
 802534e:	2e00      	cmp	r6, #0
 8025350:	d001      	beq.n	8025356 <_printf_i+0x176>
 8025352:	2710      	movs	r7, #16
 8025354:	e7aa      	b.n	80252ac <_printf_i+0xcc>
 8025356:	2220      	movs	r2, #32
 8025358:	6823      	ldr	r3, [r4, #0]
 802535a:	4393      	bics	r3, r2
 802535c:	6023      	str	r3, [r4, #0]
 802535e:	e7f8      	b.n	8025352 <_printf_i+0x172>
 8025360:	681a      	ldr	r2, [r3, #0]
 8025362:	680d      	ldr	r5, [r1, #0]
 8025364:	1d10      	adds	r0, r2, #4
 8025366:	6949      	ldr	r1, [r1, #20]
 8025368:	6018      	str	r0, [r3, #0]
 802536a:	6813      	ldr	r3, [r2, #0]
 802536c:	062e      	lsls	r6, r5, #24
 802536e:	d501      	bpl.n	8025374 <_printf_i+0x194>
 8025370:	6019      	str	r1, [r3, #0]
 8025372:	e002      	b.n	802537a <_printf_i+0x19a>
 8025374:	066d      	lsls	r5, r5, #25
 8025376:	d5fb      	bpl.n	8025370 <_printf_i+0x190>
 8025378:	8019      	strh	r1, [r3, #0]
 802537a:	2300      	movs	r3, #0
 802537c:	9d03      	ldr	r5, [sp, #12]
 802537e:	6123      	str	r3, [r4, #16]
 8025380:	e7bf      	b.n	8025302 <_printf_i+0x122>
 8025382:	681a      	ldr	r2, [r3, #0]
 8025384:	1d11      	adds	r1, r2, #4
 8025386:	6019      	str	r1, [r3, #0]
 8025388:	6815      	ldr	r5, [r2, #0]
 802538a:	2100      	movs	r1, #0
 802538c:	0028      	movs	r0, r5
 802538e:	6862      	ldr	r2, [r4, #4]
 8025390:	f000 fba1 	bl	8025ad6 <memchr>
 8025394:	2800      	cmp	r0, #0
 8025396:	d001      	beq.n	802539c <_printf_i+0x1bc>
 8025398:	1b40      	subs	r0, r0, r5
 802539a:	6060      	str	r0, [r4, #4]
 802539c:	6863      	ldr	r3, [r4, #4]
 802539e:	6123      	str	r3, [r4, #16]
 80253a0:	2300      	movs	r3, #0
 80253a2:	9a03      	ldr	r2, [sp, #12]
 80253a4:	7013      	strb	r3, [r2, #0]
 80253a6:	e7ac      	b.n	8025302 <_printf_i+0x122>
 80253a8:	002a      	movs	r2, r5
 80253aa:	6923      	ldr	r3, [r4, #16]
 80253ac:	9906      	ldr	r1, [sp, #24]
 80253ae:	9805      	ldr	r0, [sp, #20]
 80253b0:	9d07      	ldr	r5, [sp, #28]
 80253b2:	47a8      	blx	r5
 80253b4:	3001      	adds	r0, #1
 80253b6:	d0ae      	beq.n	8025316 <_printf_i+0x136>
 80253b8:	6823      	ldr	r3, [r4, #0]
 80253ba:	079b      	lsls	r3, r3, #30
 80253bc:	d415      	bmi.n	80253ea <_printf_i+0x20a>
 80253be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80253c0:	68e0      	ldr	r0, [r4, #12]
 80253c2:	4298      	cmp	r0, r3
 80253c4:	daa9      	bge.n	802531a <_printf_i+0x13a>
 80253c6:	0018      	movs	r0, r3
 80253c8:	e7a7      	b.n	802531a <_printf_i+0x13a>
 80253ca:	0022      	movs	r2, r4
 80253cc:	2301      	movs	r3, #1
 80253ce:	9906      	ldr	r1, [sp, #24]
 80253d0:	9805      	ldr	r0, [sp, #20]
 80253d2:	9e07      	ldr	r6, [sp, #28]
 80253d4:	3219      	adds	r2, #25
 80253d6:	47b0      	blx	r6
 80253d8:	3001      	adds	r0, #1
 80253da:	d09c      	beq.n	8025316 <_printf_i+0x136>
 80253dc:	3501      	adds	r5, #1
 80253de:	68e3      	ldr	r3, [r4, #12]
 80253e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80253e2:	1a9b      	subs	r3, r3, r2
 80253e4:	42ab      	cmp	r3, r5
 80253e6:	dcf0      	bgt.n	80253ca <_printf_i+0x1ea>
 80253e8:	e7e9      	b.n	80253be <_printf_i+0x1de>
 80253ea:	2500      	movs	r5, #0
 80253ec:	e7f7      	b.n	80253de <_printf_i+0x1fe>
 80253ee:	46c0      	nop			@ (mov r8, r8)
 80253f0:	0802e3d8 	.word	0x0802e3d8
 80253f4:	0802e3e9 	.word	0x0802e3e9

080253f8 <std>:
 80253f8:	2300      	movs	r3, #0
 80253fa:	b510      	push	{r4, lr}
 80253fc:	0004      	movs	r4, r0
 80253fe:	6003      	str	r3, [r0, #0]
 8025400:	6043      	str	r3, [r0, #4]
 8025402:	6083      	str	r3, [r0, #8]
 8025404:	8181      	strh	r1, [r0, #12]
 8025406:	6643      	str	r3, [r0, #100]	@ 0x64
 8025408:	81c2      	strh	r2, [r0, #14]
 802540a:	6103      	str	r3, [r0, #16]
 802540c:	6143      	str	r3, [r0, #20]
 802540e:	6183      	str	r3, [r0, #24]
 8025410:	0019      	movs	r1, r3
 8025412:	2208      	movs	r2, #8
 8025414:	305c      	adds	r0, #92	@ 0x5c
 8025416:	f000 fa8d 	bl	8025934 <memset>
 802541a:	4b0b      	ldr	r3, [pc, #44]	@ (8025448 <std+0x50>)
 802541c:	6224      	str	r4, [r4, #32]
 802541e:	6263      	str	r3, [r4, #36]	@ 0x24
 8025420:	4b0a      	ldr	r3, [pc, #40]	@ (802544c <std+0x54>)
 8025422:	62a3      	str	r3, [r4, #40]	@ 0x28
 8025424:	4b0a      	ldr	r3, [pc, #40]	@ (8025450 <std+0x58>)
 8025426:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025428:	4b0a      	ldr	r3, [pc, #40]	@ (8025454 <std+0x5c>)
 802542a:	6323      	str	r3, [r4, #48]	@ 0x30
 802542c:	4b0a      	ldr	r3, [pc, #40]	@ (8025458 <std+0x60>)
 802542e:	429c      	cmp	r4, r3
 8025430:	d005      	beq.n	802543e <std+0x46>
 8025432:	4b0a      	ldr	r3, [pc, #40]	@ (802545c <std+0x64>)
 8025434:	429c      	cmp	r4, r3
 8025436:	d002      	beq.n	802543e <std+0x46>
 8025438:	4b09      	ldr	r3, [pc, #36]	@ (8025460 <std+0x68>)
 802543a:	429c      	cmp	r4, r3
 802543c:	d103      	bne.n	8025446 <std+0x4e>
 802543e:	0020      	movs	r0, r4
 8025440:	3058      	adds	r0, #88	@ 0x58
 8025442:	f000 fb45 	bl	8025ad0 <__retarget_lock_init_recursive>
 8025446:	bd10      	pop	{r4, pc}
 8025448:	080256a5 	.word	0x080256a5
 802544c:	080256cd 	.word	0x080256cd
 8025450:	08025705 	.word	0x08025705
 8025454:	08025731 	.word	0x08025731
 8025458:	200034e0 	.word	0x200034e0
 802545c:	20003548 	.word	0x20003548
 8025460:	200035b0 	.word	0x200035b0

08025464 <stdio_exit_handler>:
 8025464:	b510      	push	{r4, lr}
 8025466:	4a03      	ldr	r2, [pc, #12]	@ (8025474 <stdio_exit_handler+0x10>)
 8025468:	4903      	ldr	r1, [pc, #12]	@ (8025478 <stdio_exit_handler+0x14>)
 802546a:	4804      	ldr	r0, [pc, #16]	@ (802547c <stdio_exit_handler+0x18>)
 802546c:	f000 f86c 	bl	8025548 <_fwalk_sglue>
 8025470:	bd10      	pop	{r4, pc}
 8025472:	46c0      	nop			@ (mov r8, r8)
 8025474:	20000268 	.word	0x20000268
 8025478:	080280cd 	.word	0x080280cd
 802547c:	200003e4 	.word	0x200003e4

08025480 <cleanup_stdio>:
 8025480:	6841      	ldr	r1, [r0, #4]
 8025482:	4b0b      	ldr	r3, [pc, #44]	@ (80254b0 <cleanup_stdio+0x30>)
 8025484:	b510      	push	{r4, lr}
 8025486:	0004      	movs	r4, r0
 8025488:	4299      	cmp	r1, r3
 802548a:	d001      	beq.n	8025490 <cleanup_stdio+0x10>
 802548c:	f002 fe1e 	bl	80280cc <_fflush_r>
 8025490:	68a1      	ldr	r1, [r4, #8]
 8025492:	4b08      	ldr	r3, [pc, #32]	@ (80254b4 <cleanup_stdio+0x34>)
 8025494:	4299      	cmp	r1, r3
 8025496:	d002      	beq.n	802549e <cleanup_stdio+0x1e>
 8025498:	0020      	movs	r0, r4
 802549a:	f002 fe17 	bl	80280cc <_fflush_r>
 802549e:	68e1      	ldr	r1, [r4, #12]
 80254a0:	4b05      	ldr	r3, [pc, #20]	@ (80254b8 <cleanup_stdio+0x38>)
 80254a2:	4299      	cmp	r1, r3
 80254a4:	d002      	beq.n	80254ac <cleanup_stdio+0x2c>
 80254a6:	0020      	movs	r0, r4
 80254a8:	f002 fe10 	bl	80280cc <_fflush_r>
 80254ac:	bd10      	pop	{r4, pc}
 80254ae:	46c0      	nop			@ (mov r8, r8)
 80254b0:	200034e0 	.word	0x200034e0
 80254b4:	20003548 	.word	0x20003548
 80254b8:	200035b0 	.word	0x200035b0

080254bc <global_stdio_init.part.0>:
 80254bc:	b510      	push	{r4, lr}
 80254be:	4b09      	ldr	r3, [pc, #36]	@ (80254e4 <global_stdio_init.part.0+0x28>)
 80254c0:	4a09      	ldr	r2, [pc, #36]	@ (80254e8 <global_stdio_init.part.0+0x2c>)
 80254c2:	2104      	movs	r1, #4
 80254c4:	601a      	str	r2, [r3, #0]
 80254c6:	4809      	ldr	r0, [pc, #36]	@ (80254ec <global_stdio_init.part.0+0x30>)
 80254c8:	2200      	movs	r2, #0
 80254ca:	f7ff ff95 	bl	80253f8 <std>
 80254ce:	2201      	movs	r2, #1
 80254d0:	2109      	movs	r1, #9
 80254d2:	4807      	ldr	r0, [pc, #28]	@ (80254f0 <global_stdio_init.part.0+0x34>)
 80254d4:	f7ff ff90 	bl	80253f8 <std>
 80254d8:	2202      	movs	r2, #2
 80254da:	2112      	movs	r1, #18
 80254dc:	4805      	ldr	r0, [pc, #20]	@ (80254f4 <global_stdio_init.part.0+0x38>)
 80254de:	f7ff ff8b 	bl	80253f8 <std>
 80254e2:	bd10      	pop	{r4, pc}
 80254e4:	20003618 	.word	0x20003618
 80254e8:	08025465 	.word	0x08025465
 80254ec:	200034e0 	.word	0x200034e0
 80254f0:	20003548 	.word	0x20003548
 80254f4:	200035b0 	.word	0x200035b0

080254f8 <__sfp_lock_acquire>:
 80254f8:	b510      	push	{r4, lr}
 80254fa:	4802      	ldr	r0, [pc, #8]	@ (8025504 <__sfp_lock_acquire+0xc>)
 80254fc:	f000 fae9 	bl	8025ad2 <__retarget_lock_acquire_recursive>
 8025500:	bd10      	pop	{r4, pc}
 8025502:	46c0      	nop			@ (mov r8, r8)
 8025504:	20003621 	.word	0x20003621

08025508 <__sfp_lock_release>:
 8025508:	b510      	push	{r4, lr}
 802550a:	4802      	ldr	r0, [pc, #8]	@ (8025514 <__sfp_lock_release+0xc>)
 802550c:	f000 fae2 	bl	8025ad4 <__retarget_lock_release_recursive>
 8025510:	bd10      	pop	{r4, pc}
 8025512:	46c0      	nop			@ (mov r8, r8)
 8025514:	20003621 	.word	0x20003621

08025518 <__sinit>:
 8025518:	b510      	push	{r4, lr}
 802551a:	0004      	movs	r4, r0
 802551c:	f7ff ffec 	bl	80254f8 <__sfp_lock_acquire>
 8025520:	6a23      	ldr	r3, [r4, #32]
 8025522:	2b00      	cmp	r3, #0
 8025524:	d002      	beq.n	802552c <__sinit+0x14>
 8025526:	f7ff ffef 	bl	8025508 <__sfp_lock_release>
 802552a:	bd10      	pop	{r4, pc}
 802552c:	4b04      	ldr	r3, [pc, #16]	@ (8025540 <__sinit+0x28>)
 802552e:	6223      	str	r3, [r4, #32]
 8025530:	4b04      	ldr	r3, [pc, #16]	@ (8025544 <__sinit+0x2c>)
 8025532:	681b      	ldr	r3, [r3, #0]
 8025534:	2b00      	cmp	r3, #0
 8025536:	d1f6      	bne.n	8025526 <__sinit+0xe>
 8025538:	f7ff ffc0 	bl	80254bc <global_stdio_init.part.0>
 802553c:	e7f3      	b.n	8025526 <__sinit+0xe>
 802553e:	46c0      	nop			@ (mov r8, r8)
 8025540:	08025481 	.word	0x08025481
 8025544:	20003618 	.word	0x20003618

08025548 <_fwalk_sglue>:
 8025548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802554a:	0014      	movs	r4, r2
 802554c:	2600      	movs	r6, #0
 802554e:	9000      	str	r0, [sp, #0]
 8025550:	9101      	str	r1, [sp, #4]
 8025552:	68a5      	ldr	r5, [r4, #8]
 8025554:	6867      	ldr	r7, [r4, #4]
 8025556:	3f01      	subs	r7, #1
 8025558:	d504      	bpl.n	8025564 <_fwalk_sglue+0x1c>
 802555a:	6824      	ldr	r4, [r4, #0]
 802555c:	2c00      	cmp	r4, #0
 802555e:	d1f8      	bne.n	8025552 <_fwalk_sglue+0xa>
 8025560:	0030      	movs	r0, r6
 8025562:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025564:	89ab      	ldrh	r3, [r5, #12]
 8025566:	2b01      	cmp	r3, #1
 8025568:	d908      	bls.n	802557c <_fwalk_sglue+0x34>
 802556a:	220e      	movs	r2, #14
 802556c:	5eab      	ldrsh	r3, [r5, r2]
 802556e:	3301      	adds	r3, #1
 8025570:	d004      	beq.n	802557c <_fwalk_sglue+0x34>
 8025572:	0029      	movs	r1, r5
 8025574:	9800      	ldr	r0, [sp, #0]
 8025576:	9b01      	ldr	r3, [sp, #4]
 8025578:	4798      	blx	r3
 802557a:	4306      	orrs	r6, r0
 802557c:	3568      	adds	r5, #104	@ 0x68
 802557e:	e7ea      	b.n	8025556 <_fwalk_sglue+0xe>

08025580 <iprintf>:
 8025580:	b40f      	push	{r0, r1, r2, r3}
 8025582:	b507      	push	{r0, r1, r2, lr}
 8025584:	4905      	ldr	r1, [pc, #20]	@ (802559c <iprintf+0x1c>)
 8025586:	ab04      	add	r3, sp, #16
 8025588:	6808      	ldr	r0, [r1, #0]
 802558a:	cb04      	ldmia	r3!, {r2}
 802558c:	6881      	ldr	r1, [r0, #8]
 802558e:	9301      	str	r3, [sp, #4]
 8025590:	f002 fbfa 	bl	8027d88 <_vfiprintf_r>
 8025594:	b003      	add	sp, #12
 8025596:	bc08      	pop	{r3}
 8025598:	b004      	add	sp, #16
 802559a:	4718      	bx	r3
 802559c:	200003e0 	.word	0x200003e0

080255a0 <_puts_r>:
 80255a0:	6a03      	ldr	r3, [r0, #32]
 80255a2:	b570      	push	{r4, r5, r6, lr}
 80255a4:	0005      	movs	r5, r0
 80255a6:	000e      	movs	r6, r1
 80255a8:	6884      	ldr	r4, [r0, #8]
 80255aa:	2b00      	cmp	r3, #0
 80255ac:	d101      	bne.n	80255b2 <_puts_r+0x12>
 80255ae:	f7ff ffb3 	bl	8025518 <__sinit>
 80255b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80255b4:	07db      	lsls	r3, r3, #31
 80255b6:	d405      	bmi.n	80255c4 <_puts_r+0x24>
 80255b8:	89a3      	ldrh	r3, [r4, #12]
 80255ba:	059b      	lsls	r3, r3, #22
 80255bc:	d402      	bmi.n	80255c4 <_puts_r+0x24>
 80255be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80255c0:	f000 fa87 	bl	8025ad2 <__retarget_lock_acquire_recursive>
 80255c4:	89a3      	ldrh	r3, [r4, #12]
 80255c6:	071b      	lsls	r3, r3, #28
 80255c8:	d502      	bpl.n	80255d0 <_puts_r+0x30>
 80255ca:	6923      	ldr	r3, [r4, #16]
 80255cc:	2b00      	cmp	r3, #0
 80255ce:	d11f      	bne.n	8025610 <_puts_r+0x70>
 80255d0:	0021      	movs	r1, r4
 80255d2:	0028      	movs	r0, r5
 80255d4:	f000 f950 	bl	8025878 <__swsetup_r>
 80255d8:	2800      	cmp	r0, #0
 80255da:	d019      	beq.n	8025610 <_puts_r+0x70>
 80255dc:	2501      	movs	r5, #1
 80255de:	426d      	negs	r5, r5
 80255e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80255e2:	07db      	lsls	r3, r3, #31
 80255e4:	d405      	bmi.n	80255f2 <_puts_r+0x52>
 80255e6:	89a3      	ldrh	r3, [r4, #12]
 80255e8:	059b      	lsls	r3, r3, #22
 80255ea:	d402      	bmi.n	80255f2 <_puts_r+0x52>
 80255ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80255ee:	f000 fa71 	bl	8025ad4 <__retarget_lock_release_recursive>
 80255f2:	0028      	movs	r0, r5
 80255f4:	bd70      	pop	{r4, r5, r6, pc}
 80255f6:	3601      	adds	r6, #1
 80255f8:	60a3      	str	r3, [r4, #8]
 80255fa:	2b00      	cmp	r3, #0
 80255fc:	da04      	bge.n	8025608 <_puts_r+0x68>
 80255fe:	69a2      	ldr	r2, [r4, #24]
 8025600:	429a      	cmp	r2, r3
 8025602:	dc16      	bgt.n	8025632 <_puts_r+0x92>
 8025604:	290a      	cmp	r1, #10
 8025606:	d014      	beq.n	8025632 <_puts_r+0x92>
 8025608:	6823      	ldr	r3, [r4, #0]
 802560a:	1c5a      	adds	r2, r3, #1
 802560c:	6022      	str	r2, [r4, #0]
 802560e:	7019      	strb	r1, [r3, #0]
 8025610:	68a3      	ldr	r3, [r4, #8]
 8025612:	7831      	ldrb	r1, [r6, #0]
 8025614:	3b01      	subs	r3, #1
 8025616:	2900      	cmp	r1, #0
 8025618:	d1ed      	bne.n	80255f6 <_puts_r+0x56>
 802561a:	60a3      	str	r3, [r4, #8]
 802561c:	2b00      	cmp	r3, #0
 802561e:	da0f      	bge.n	8025640 <_puts_r+0xa0>
 8025620:	0022      	movs	r2, r4
 8025622:	0028      	movs	r0, r5
 8025624:	310a      	adds	r1, #10
 8025626:	f000 f8e5 	bl	80257f4 <__swbuf_r>
 802562a:	3001      	adds	r0, #1
 802562c:	d0d6      	beq.n	80255dc <_puts_r+0x3c>
 802562e:	250a      	movs	r5, #10
 8025630:	e7d6      	b.n	80255e0 <_puts_r+0x40>
 8025632:	0022      	movs	r2, r4
 8025634:	0028      	movs	r0, r5
 8025636:	f000 f8dd 	bl	80257f4 <__swbuf_r>
 802563a:	3001      	adds	r0, #1
 802563c:	d1e8      	bne.n	8025610 <_puts_r+0x70>
 802563e:	e7cd      	b.n	80255dc <_puts_r+0x3c>
 8025640:	6823      	ldr	r3, [r4, #0]
 8025642:	1c5a      	adds	r2, r3, #1
 8025644:	6022      	str	r2, [r4, #0]
 8025646:	220a      	movs	r2, #10
 8025648:	701a      	strb	r2, [r3, #0]
 802564a:	e7f0      	b.n	802562e <_puts_r+0x8e>

0802564c <puts>:
 802564c:	b510      	push	{r4, lr}
 802564e:	4b03      	ldr	r3, [pc, #12]	@ (802565c <puts+0x10>)
 8025650:	0001      	movs	r1, r0
 8025652:	6818      	ldr	r0, [r3, #0]
 8025654:	f7ff ffa4 	bl	80255a0 <_puts_r>
 8025658:	bd10      	pop	{r4, pc}
 802565a:	46c0      	nop			@ (mov r8, r8)
 802565c:	200003e0 	.word	0x200003e0

08025660 <siprintf>:
 8025660:	b40e      	push	{r1, r2, r3}
 8025662:	b510      	push	{r4, lr}
 8025664:	2400      	movs	r4, #0
 8025666:	490c      	ldr	r1, [pc, #48]	@ (8025698 <siprintf+0x38>)
 8025668:	b09d      	sub	sp, #116	@ 0x74
 802566a:	ab1f      	add	r3, sp, #124	@ 0x7c
 802566c:	9002      	str	r0, [sp, #8]
 802566e:	9006      	str	r0, [sp, #24]
 8025670:	9107      	str	r1, [sp, #28]
 8025672:	9104      	str	r1, [sp, #16]
 8025674:	4809      	ldr	r0, [pc, #36]	@ (802569c <siprintf+0x3c>)
 8025676:	490a      	ldr	r1, [pc, #40]	@ (80256a0 <siprintf+0x40>)
 8025678:	cb04      	ldmia	r3!, {r2}
 802567a:	9105      	str	r1, [sp, #20]
 802567c:	6800      	ldr	r0, [r0, #0]
 802567e:	a902      	add	r1, sp, #8
 8025680:	9301      	str	r3, [sp, #4]
 8025682:	941b      	str	r4, [sp, #108]	@ 0x6c
 8025684:	f002 fa5a 	bl	8027b3c <_svfiprintf_r>
 8025688:	9b02      	ldr	r3, [sp, #8]
 802568a:	701c      	strb	r4, [r3, #0]
 802568c:	b01d      	add	sp, #116	@ 0x74
 802568e:	bc10      	pop	{r4}
 8025690:	bc08      	pop	{r3}
 8025692:	b003      	add	sp, #12
 8025694:	4718      	bx	r3
 8025696:	46c0      	nop			@ (mov r8, r8)
 8025698:	7fffffff 	.word	0x7fffffff
 802569c:	200003e0 	.word	0x200003e0
 80256a0:	ffff0208 	.word	0xffff0208

080256a4 <__sread>:
 80256a4:	b570      	push	{r4, r5, r6, lr}
 80256a6:	000c      	movs	r4, r1
 80256a8:	250e      	movs	r5, #14
 80256aa:	5f49      	ldrsh	r1, [r1, r5]
 80256ac:	f000 f9be 	bl	8025a2c <_read_r>
 80256b0:	2800      	cmp	r0, #0
 80256b2:	db03      	blt.n	80256bc <__sread+0x18>
 80256b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80256b6:	181b      	adds	r3, r3, r0
 80256b8:	6563      	str	r3, [r4, #84]	@ 0x54
 80256ba:	bd70      	pop	{r4, r5, r6, pc}
 80256bc:	89a3      	ldrh	r3, [r4, #12]
 80256be:	4a02      	ldr	r2, [pc, #8]	@ (80256c8 <__sread+0x24>)
 80256c0:	4013      	ands	r3, r2
 80256c2:	81a3      	strh	r3, [r4, #12]
 80256c4:	e7f9      	b.n	80256ba <__sread+0x16>
 80256c6:	46c0      	nop			@ (mov r8, r8)
 80256c8:	ffffefff 	.word	0xffffefff

080256cc <__swrite>:
 80256cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80256ce:	001f      	movs	r7, r3
 80256d0:	898b      	ldrh	r3, [r1, #12]
 80256d2:	0005      	movs	r5, r0
 80256d4:	000c      	movs	r4, r1
 80256d6:	0016      	movs	r6, r2
 80256d8:	05db      	lsls	r3, r3, #23
 80256da:	d505      	bpl.n	80256e8 <__swrite+0x1c>
 80256dc:	230e      	movs	r3, #14
 80256de:	5ec9      	ldrsh	r1, [r1, r3]
 80256e0:	2200      	movs	r2, #0
 80256e2:	2302      	movs	r3, #2
 80256e4:	f000 f98e 	bl	8025a04 <_lseek_r>
 80256e8:	89a3      	ldrh	r3, [r4, #12]
 80256ea:	4a05      	ldr	r2, [pc, #20]	@ (8025700 <__swrite+0x34>)
 80256ec:	0028      	movs	r0, r5
 80256ee:	4013      	ands	r3, r2
 80256f0:	81a3      	strh	r3, [r4, #12]
 80256f2:	0032      	movs	r2, r6
 80256f4:	230e      	movs	r3, #14
 80256f6:	5ee1      	ldrsh	r1, [r4, r3]
 80256f8:	003b      	movs	r3, r7
 80256fa:	f000 f9ab 	bl	8025a54 <_write_r>
 80256fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025700:	ffffefff 	.word	0xffffefff

08025704 <__sseek>:
 8025704:	b570      	push	{r4, r5, r6, lr}
 8025706:	000c      	movs	r4, r1
 8025708:	250e      	movs	r5, #14
 802570a:	5f49      	ldrsh	r1, [r1, r5]
 802570c:	f000 f97a 	bl	8025a04 <_lseek_r>
 8025710:	89a3      	ldrh	r3, [r4, #12]
 8025712:	1c42      	adds	r2, r0, #1
 8025714:	d103      	bne.n	802571e <__sseek+0x1a>
 8025716:	4a05      	ldr	r2, [pc, #20]	@ (802572c <__sseek+0x28>)
 8025718:	4013      	ands	r3, r2
 802571a:	81a3      	strh	r3, [r4, #12]
 802571c:	bd70      	pop	{r4, r5, r6, pc}
 802571e:	2280      	movs	r2, #128	@ 0x80
 8025720:	0152      	lsls	r2, r2, #5
 8025722:	4313      	orrs	r3, r2
 8025724:	81a3      	strh	r3, [r4, #12]
 8025726:	6560      	str	r0, [r4, #84]	@ 0x54
 8025728:	e7f8      	b.n	802571c <__sseek+0x18>
 802572a:	46c0      	nop			@ (mov r8, r8)
 802572c:	ffffefff 	.word	0xffffefff

08025730 <__sclose>:
 8025730:	b510      	push	{r4, lr}
 8025732:	230e      	movs	r3, #14
 8025734:	5ec9      	ldrsh	r1, [r1, r3]
 8025736:	f000 f953 	bl	80259e0 <_close_r>
 802573a:	bd10      	pop	{r4, pc}

0802573c <_vsniprintf_r>:
 802573c:	b530      	push	{r4, r5, lr}
 802573e:	0005      	movs	r5, r0
 8025740:	0014      	movs	r4, r2
 8025742:	0008      	movs	r0, r1
 8025744:	001a      	movs	r2, r3
 8025746:	b09b      	sub	sp, #108	@ 0x6c
 8025748:	2c00      	cmp	r4, #0
 802574a:	da05      	bge.n	8025758 <_vsniprintf_r+0x1c>
 802574c:	238b      	movs	r3, #139	@ 0x8b
 802574e:	2001      	movs	r0, #1
 8025750:	602b      	str	r3, [r5, #0]
 8025752:	4240      	negs	r0, r0
 8025754:	b01b      	add	sp, #108	@ 0x6c
 8025756:	bd30      	pop	{r4, r5, pc}
 8025758:	2382      	movs	r3, #130	@ 0x82
 802575a:	4669      	mov	r1, sp
 802575c:	009b      	lsls	r3, r3, #2
 802575e:	818b      	strh	r3, [r1, #12]
 8025760:	2100      	movs	r1, #0
 8025762:	9000      	str	r0, [sp, #0]
 8025764:	9119      	str	r1, [sp, #100]	@ 0x64
 8025766:	9004      	str	r0, [sp, #16]
 8025768:	428c      	cmp	r4, r1
 802576a:	d000      	beq.n	802576e <_vsniprintf_r+0x32>
 802576c:	1e61      	subs	r1, r4, #1
 802576e:	2301      	movs	r3, #1
 8025770:	9102      	str	r1, [sp, #8]
 8025772:	9105      	str	r1, [sp, #20]
 8025774:	4669      	mov	r1, sp
 8025776:	425b      	negs	r3, r3
 8025778:	81cb      	strh	r3, [r1, #14]
 802577a:	0028      	movs	r0, r5
 802577c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802577e:	f002 f9dd 	bl	8027b3c <_svfiprintf_r>
 8025782:	1c43      	adds	r3, r0, #1
 8025784:	da01      	bge.n	802578a <_vsniprintf_r+0x4e>
 8025786:	238b      	movs	r3, #139	@ 0x8b
 8025788:	602b      	str	r3, [r5, #0]
 802578a:	2c00      	cmp	r4, #0
 802578c:	d0e2      	beq.n	8025754 <_vsniprintf_r+0x18>
 802578e:	2200      	movs	r2, #0
 8025790:	9b00      	ldr	r3, [sp, #0]
 8025792:	701a      	strb	r2, [r3, #0]
 8025794:	e7de      	b.n	8025754 <_vsniprintf_r+0x18>
	...

08025798 <vsniprintf>:
 8025798:	b513      	push	{r0, r1, r4, lr}
 802579a:	4c04      	ldr	r4, [pc, #16]	@ (80257ac <vsniprintf+0x14>)
 802579c:	9300      	str	r3, [sp, #0]
 802579e:	0013      	movs	r3, r2
 80257a0:	000a      	movs	r2, r1
 80257a2:	0001      	movs	r1, r0
 80257a4:	6820      	ldr	r0, [r4, #0]
 80257a6:	f7ff ffc9 	bl	802573c <_vsniprintf_r>
 80257aa:	bd16      	pop	{r1, r2, r4, pc}
 80257ac:	200003e0 	.word	0x200003e0

080257b0 <_vsiprintf_r>:
 80257b0:	b510      	push	{r4, lr}
 80257b2:	2400      	movs	r4, #0
 80257b4:	b09a      	sub	sp, #104	@ 0x68
 80257b6:	9100      	str	r1, [sp, #0]
 80257b8:	9104      	str	r1, [sp, #16]
 80257ba:	4906      	ldr	r1, [pc, #24]	@ (80257d4 <_vsiprintf_r+0x24>)
 80257bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80257be:	9105      	str	r1, [sp, #20]
 80257c0:	9102      	str	r1, [sp, #8]
 80257c2:	4905      	ldr	r1, [pc, #20]	@ (80257d8 <_vsiprintf_r+0x28>)
 80257c4:	9103      	str	r1, [sp, #12]
 80257c6:	4669      	mov	r1, sp
 80257c8:	f002 f9b8 	bl	8027b3c <_svfiprintf_r>
 80257cc:	9b00      	ldr	r3, [sp, #0]
 80257ce:	701c      	strb	r4, [r3, #0]
 80257d0:	b01a      	add	sp, #104	@ 0x68
 80257d2:	bd10      	pop	{r4, pc}
 80257d4:	7fffffff 	.word	0x7fffffff
 80257d8:	ffff0208 	.word	0xffff0208

080257dc <vsiprintf>:
 80257dc:	b510      	push	{r4, lr}
 80257de:	4c04      	ldr	r4, [pc, #16]	@ (80257f0 <vsiprintf+0x14>)
 80257e0:	0013      	movs	r3, r2
 80257e2:	000a      	movs	r2, r1
 80257e4:	0001      	movs	r1, r0
 80257e6:	6820      	ldr	r0, [r4, #0]
 80257e8:	f7ff ffe2 	bl	80257b0 <_vsiprintf_r>
 80257ec:	bd10      	pop	{r4, pc}
 80257ee:	46c0      	nop			@ (mov r8, r8)
 80257f0:	200003e0 	.word	0x200003e0

080257f4 <__swbuf_r>:
 80257f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80257f6:	0006      	movs	r6, r0
 80257f8:	000d      	movs	r5, r1
 80257fa:	0014      	movs	r4, r2
 80257fc:	2800      	cmp	r0, #0
 80257fe:	d004      	beq.n	802580a <__swbuf_r+0x16>
 8025800:	6a03      	ldr	r3, [r0, #32]
 8025802:	2b00      	cmp	r3, #0
 8025804:	d101      	bne.n	802580a <__swbuf_r+0x16>
 8025806:	f7ff fe87 	bl	8025518 <__sinit>
 802580a:	69a3      	ldr	r3, [r4, #24]
 802580c:	60a3      	str	r3, [r4, #8]
 802580e:	89a3      	ldrh	r3, [r4, #12]
 8025810:	071b      	lsls	r3, r3, #28
 8025812:	d502      	bpl.n	802581a <__swbuf_r+0x26>
 8025814:	6923      	ldr	r3, [r4, #16]
 8025816:	2b00      	cmp	r3, #0
 8025818:	d109      	bne.n	802582e <__swbuf_r+0x3a>
 802581a:	0021      	movs	r1, r4
 802581c:	0030      	movs	r0, r6
 802581e:	f000 f82b 	bl	8025878 <__swsetup_r>
 8025822:	2800      	cmp	r0, #0
 8025824:	d003      	beq.n	802582e <__swbuf_r+0x3a>
 8025826:	2501      	movs	r5, #1
 8025828:	426d      	negs	r5, r5
 802582a:	0028      	movs	r0, r5
 802582c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802582e:	6923      	ldr	r3, [r4, #16]
 8025830:	6820      	ldr	r0, [r4, #0]
 8025832:	b2ef      	uxtb	r7, r5
 8025834:	1ac0      	subs	r0, r0, r3
 8025836:	6963      	ldr	r3, [r4, #20]
 8025838:	b2ed      	uxtb	r5, r5
 802583a:	4283      	cmp	r3, r0
 802583c:	dc05      	bgt.n	802584a <__swbuf_r+0x56>
 802583e:	0021      	movs	r1, r4
 8025840:	0030      	movs	r0, r6
 8025842:	f002 fc43 	bl	80280cc <_fflush_r>
 8025846:	2800      	cmp	r0, #0
 8025848:	d1ed      	bne.n	8025826 <__swbuf_r+0x32>
 802584a:	68a3      	ldr	r3, [r4, #8]
 802584c:	3001      	adds	r0, #1
 802584e:	3b01      	subs	r3, #1
 8025850:	60a3      	str	r3, [r4, #8]
 8025852:	6823      	ldr	r3, [r4, #0]
 8025854:	1c5a      	adds	r2, r3, #1
 8025856:	6022      	str	r2, [r4, #0]
 8025858:	701f      	strb	r7, [r3, #0]
 802585a:	6963      	ldr	r3, [r4, #20]
 802585c:	4283      	cmp	r3, r0
 802585e:	d004      	beq.n	802586a <__swbuf_r+0x76>
 8025860:	89a3      	ldrh	r3, [r4, #12]
 8025862:	07db      	lsls	r3, r3, #31
 8025864:	d5e1      	bpl.n	802582a <__swbuf_r+0x36>
 8025866:	2d0a      	cmp	r5, #10
 8025868:	d1df      	bne.n	802582a <__swbuf_r+0x36>
 802586a:	0021      	movs	r1, r4
 802586c:	0030      	movs	r0, r6
 802586e:	f002 fc2d 	bl	80280cc <_fflush_r>
 8025872:	2800      	cmp	r0, #0
 8025874:	d0d9      	beq.n	802582a <__swbuf_r+0x36>
 8025876:	e7d6      	b.n	8025826 <__swbuf_r+0x32>

08025878 <__swsetup_r>:
 8025878:	4b2d      	ldr	r3, [pc, #180]	@ (8025930 <__swsetup_r+0xb8>)
 802587a:	b570      	push	{r4, r5, r6, lr}
 802587c:	0005      	movs	r5, r0
 802587e:	6818      	ldr	r0, [r3, #0]
 8025880:	000c      	movs	r4, r1
 8025882:	2800      	cmp	r0, #0
 8025884:	d004      	beq.n	8025890 <__swsetup_r+0x18>
 8025886:	6a03      	ldr	r3, [r0, #32]
 8025888:	2b00      	cmp	r3, #0
 802588a:	d101      	bne.n	8025890 <__swsetup_r+0x18>
 802588c:	f7ff fe44 	bl	8025518 <__sinit>
 8025890:	220c      	movs	r2, #12
 8025892:	5ea3      	ldrsh	r3, [r4, r2]
 8025894:	071a      	lsls	r2, r3, #28
 8025896:	d423      	bmi.n	80258e0 <__swsetup_r+0x68>
 8025898:	06da      	lsls	r2, r3, #27
 802589a:	d407      	bmi.n	80258ac <__swsetup_r+0x34>
 802589c:	2209      	movs	r2, #9
 802589e:	602a      	str	r2, [r5, #0]
 80258a0:	2240      	movs	r2, #64	@ 0x40
 80258a2:	2001      	movs	r0, #1
 80258a4:	4313      	orrs	r3, r2
 80258a6:	81a3      	strh	r3, [r4, #12]
 80258a8:	4240      	negs	r0, r0
 80258aa:	e03a      	b.n	8025922 <__swsetup_r+0xaa>
 80258ac:	075b      	lsls	r3, r3, #29
 80258ae:	d513      	bpl.n	80258d8 <__swsetup_r+0x60>
 80258b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80258b2:	2900      	cmp	r1, #0
 80258b4:	d008      	beq.n	80258c8 <__swsetup_r+0x50>
 80258b6:	0023      	movs	r3, r4
 80258b8:	3344      	adds	r3, #68	@ 0x44
 80258ba:	4299      	cmp	r1, r3
 80258bc:	d002      	beq.n	80258c4 <__swsetup_r+0x4c>
 80258be:	0028      	movs	r0, r5
 80258c0:	f000 ff9a 	bl	80267f8 <_free_r>
 80258c4:	2300      	movs	r3, #0
 80258c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80258c8:	2224      	movs	r2, #36	@ 0x24
 80258ca:	89a3      	ldrh	r3, [r4, #12]
 80258cc:	4393      	bics	r3, r2
 80258ce:	81a3      	strh	r3, [r4, #12]
 80258d0:	2300      	movs	r3, #0
 80258d2:	6063      	str	r3, [r4, #4]
 80258d4:	6923      	ldr	r3, [r4, #16]
 80258d6:	6023      	str	r3, [r4, #0]
 80258d8:	2308      	movs	r3, #8
 80258da:	89a2      	ldrh	r2, [r4, #12]
 80258dc:	4313      	orrs	r3, r2
 80258de:	81a3      	strh	r3, [r4, #12]
 80258e0:	6923      	ldr	r3, [r4, #16]
 80258e2:	2b00      	cmp	r3, #0
 80258e4:	d10b      	bne.n	80258fe <__swsetup_r+0x86>
 80258e6:	21a0      	movs	r1, #160	@ 0xa0
 80258e8:	2280      	movs	r2, #128	@ 0x80
 80258ea:	89a3      	ldrh	r3, [r4, #12]
 80258ec:	0089      	lsls	r1, r1, #2
 80258ee:	0092      	lsls	r2, r2, #2
 80258f0:	400b      	ands	r3, r1
 80258f2:	4293      	cmp	r3, r2
 80258f4:	d003      	beq.n	80258fe <__swsetup_r+0x86>
 80258f6:	0021      	movs	r1, r4
 80258f8:	0028      	movs	r0, r5
 80258fa:	f002 fc3d 	bl	8028178 <__smakebuf_r>
 80258fe:	220c      	movs	r2, #12
 8025900:	5ea3      	ldrsh	r3, [r4, r2]
 8025902:	2101      	movs	r1, #1
 8025904:	001a      	movs	r2, r3
 8025906:	400a      	ands	r2, r1
 8025908:	420b      	tst	r3, r1
 802590a:	d00b      	beq.n	8025924 <__swsetup_r+0xac>
 802590c:	2200      	movs	r2, #0
 802590e:	60a2      	str	r2, [r4, #8]
 8025910:	6962      	ldr	r2, [r4, #20]
 8025912:	4252      	negs	r2, r2
 8025914:	61a2      	str	r2, [r4, #24]
 8025916:	2000      	movs	r0, #0
 8025918:	6922      	ldr	r2, [r4, #16]
 802591a:	4282      	cmp	r2, r0
 802591c:	d101      	bne.n	8025922 <__swsetup_r+0xaa>
 802591e:	061a      	lsls	r2, r3, #24
 8025920:	d4be      	bmi.n	80258a0 <__swsetup_r+0x28>
 8025922:	bd70      	pop	{r4, r5, r6, pc}
 8025924:	0799      	lsls	r1, r3, #30
 8025926:	d400      	bmi.n	802592a <__swsetup_r+0xb2>
 8025928:	6962      	ldr	r2, [r4, #20]
 802592a:	60a2      	str	r2, [r4, #8]
 802592c:	e7f3      	b.n	8025916 <__swsetup_r+0x9e>
 802592e:	46c0      	nop			@ (mov r8, r8)
 8025930:	200003e0 	.word	0x200003e0

08025934 <memset>:
 8025934:	0003      	movs	r3, r0
 8025936:	1882      	adds	r2, r0, r2
 8025938:	4293      	cmp	r3, r2
 802593a:	d100      	bne.n	802593e <memset+0xa>
 802593c:	4770      	bx	lr
 802593e:	7019      	strb	r1, [r3, #0]
 8025940:	3301      	adds	r3, #1
 8025942:	e7f9      	b.n	8025938 <memset+0x4>

08025944 <strchr>:
 8025944:	b2c9      	uxtb	r1, r1
 8025946:	7803      	ldrb	r3, [r0, #0]
 8025948:	2b00      	cmp	r3, #0
 802594a:	d004      	beq.n	8025956 <strchr+0x12>
 802594c:	428b      	cmp	r3, r1
 802594e:	d100      	bne.n	8025952 <strchr+0xe>
 8025950:	4770      	bx	lr
 8025952:	3001      	adds	r0, #1
 8025954:	e7f7      	b.n	8025946 <strchr+0x2>
 8025956:	424b      	negs	r3, r1
 8025958:	4159      	adcs	r1, r3
 802595a:	4249      	negs	r1, r1
 802595c:	4008      	ands	r0, r1
 802595e:	e7f7      	b.n	8025950 <strchr+0xc>

08025960 <strncmp>:
 8025960:	b530      	push	{r4, r5, lr}
 8025962:	0005      	movs	r5, r0
 8025964:	1e10      	subs	r0, r2, #0
 8025966:	d00b      	beq.n	8025980 <strncmp+0x20>
 8025968:	2400      	movs	r4, #0
 802596a:	3a01      	subs	r2, #1
 802596c:	5d2b      	ldrb	r3, [r5, r4]
 802596e:	5d08      	ldrb	r0, [r1, r4]
 8025970:	4283      	cmp	r3, r0
 8025972:	d104      	bne.n	802597e <strncmp+0x1e>
 8025974:	4294      	cmp	r4, r2
 8025976:	d002      	beq.n	802597e <strncmp+0x1e>
 8025978:	3401      	adds	r4, #1
 802597a:	2b00      	cmp	r3, #0
 802597c:	d1f6      	bne.n	802596c <strncmp+0xc>
 802597e:	1a18      	subs	r0, r3, r0
 8025980:	bd30      	pop	{r4, r5, pc}

08025982 <strncpy>:
 8025982:	0003      	movs	r3, r0
 8025984:	b530      	push	{r4, r5, lr}
 8025986:	001d      	movs	r5, r3
 8025988:	2a00      	cmp	r2, #0
 802598a:	d006      	beq.n	802599a <strncpy+0x18>
 802598c:	780c      	ldrb	r4, [r1, #0]
 802598e:	3a01      	subs	r2, #1
 8025990:	3301      	adds	r3, #1
 8025992:	702c      	strb	r4, [r5, #0]
 8025994:	3101      	adds	r1, #1
 8025996:	2c00      	cmp	r4, #0
 8025998:	d1f5      	bne.n	8025986 <strncpy+0x4>
 802599a:	2100      	movs	r1, #0
 802599c:	189a      	adds	r2, r3, r2
 802599e:	4293      	cmp	r3, r2
 80259a0:	d100      	bne.n	80259a4 <strncpy+0x22>
 80259a2:	bd30      	pop	{r4, r5, pc}
 80259a4:	7019      	strb	r1, [r3, #0]
 80259a6:	3301      	adds	r3, #1
 80259a8:	e7f9      	b.n	802599e <strncpy+0x1c>

080259aa <strstr>:
 80259aa:	780a      	ldrb	r2, [r1, #0]
 80259ac:	b530      	push	{r4, r5, lr}
 80259ae:	2a00      	cmp	r2, #0
 80259b0:	d10c      	bne.n	80259cc <strstr+0x22>
 80259b2:	bd30      	pop	{r4, r5, pc}
 80259b4:	429a      	cmp	r2, r3
 80259b6:	d108      	bne.n	80259ca <strstr+0x20>
 80259b8:	2301      	movs	r3, #1
 80259ba:	5ccc      	ldrb	r4, [r1, r3]
 80259bc:	2c00      	cmp	r4, #0
 80259be:	d0f8      	beq.n	80259b2 <strstr+0x8>
 80259c0:	5cc5      	ldrb	r5, [r0, r3]
 80259c2:	42a5      	cmp	r5, r4
 80259c4:	d101      	bne.n	80259ca <strstr+0x20>
 80259c6:	3301      	adds	r3, #1
 80259c8:	e7f7      	b.n	80259ba <strstr+0x10>
 80259ca:	3001      	adds	r0, #1
 80259cc:	7803      	ldrb	r3, [r0, #0]
 80259ce:	2b00      	cmp	r3, #0
 80259d0:	d1f0      	bne.n	80259b4 <strstr+0xa>
 80259d2:	0018      	movs	r0, r3
 80259d4:	e7ed      	b.n	80259b2 <strstr+0x8>
	...

080259d8 <_localeconv_r>:
 80259d8:	4800      	ldr	r0, [pc, #0]	@ (80259dc <_localeconv_r+0x4>)
 80259da:	4770      	bx	lr
 80259dc:	20000364 	.word	0x20000364

080259e0 <_close_r>:
 80259e0:	2300      	movs	r3, #0
 80259e2:	b570      	push	{r4, r5, r6, lr}
 80259e4:	4d06      	ldr	r5, [pc, #24]	@ (8025a00 <_close_r+0x20>)
 80259e6:	0004      	movs	r4, r0
 80259e8:	0008      	movs	r0, r1
 80259ea:	602b      	str	r3, [r5, #0]
 80259ec:	f7ed f850 	bl	8012a90 <_close>
 80259f0:	1c43      	adds	r3, r0, #1
 80259f2:	d103      	bne.n	80259fc <_close_r+0x1c>
 80259f4:	682b      	ldr	r3, [r5, #0]
 80259f6:	2b00      	cmp	r3, #0
 80259f8:	d000      	beq.n	80259fc <_close_r+0x1c>
 80259fa:	6023      	str	r3, [r4, #0]
 80259fc:	bd70      	pop	{r4, r5, r6, pc}
 80259fe:	46c0      	nop			@ (mov r8, r8)
 8025a00:	2000361c 	.word	0x2000361c

08025a04 <_lseek_r>:
 8025a04:	b570      	push	{r4, r5, r6, lr}
 8025a06:	0004      	movs	r4, r0
 8025a08:	0008      	movs	r0, r1
 8025a0a:	0011      	movs	r1, r2
 8025a0c:	001a      	movs	r2, r3
 8025a0e:	2300      	movs	r3, #0
 8025a10:	4d05      	ldr	r5, [pc, #20]	@ (8025a28 <_lseek_r+0x24>)
 8025a12:	602b      	str	r3, [r5, #0]
 8025a14:	f7ed f85d 	bl	8012ad2 <_lseek>
 8025a18:	1c43      	adds	r3, r0, #1
 8025a1a:	d103      	bne.n	8025a24 <_lseek_r+0x20>
 8025a1c:	682b      	ldr	r3, [r5, #0]
 8025a1e:	2b00      	cmp	r3, #0
 8025a20:	d000      	beq.n	8025a24 <_lseek_r+0x20>
 8025a22:	6023      	str	r3, [r4, #0]
 8025a24:	bd70      	pop	{r4, r5, r6, pc}
 8025a26:	46c0      	nop			@ (mov r8, r8)
 8025a28:	2000361c 	.word	0x2000361c

08025a2c <_read_r>:
 8025a2c:	b570      	push	{r4, r5, r6, lr}
 8025a2e:	0004      	movs	r4, r0
 8025a30:	0008      	movs	r0, r1
 8025a32:	0011      	movs	r1, r2
 8025a34:	001a      	movs	r2, r3
 8025a36:	2300      	movs	r3, #0
 8025a38:	4d05      	ldr	r5, [pc, #20]	@ (8025a50 <_read_r+0x24>)
 8025a3a:	602b      	str	r3, [r5, #0]
 8025a3c:	f7ed f80b 	bl	8012a56 <_read>
 8025a40:	1c43      	adds	r3, r0, #1
 8025a42:	d103      	bne.n	8025a4c <_read_r+0x20>
 8025a44:	682b      	ldr	r3, [r5, #0]
 8025a46:	2b00      	cmp	r3, #0
 8025a48:	d000      	beq.n	8025a4c <_read_r+0x20>
 8025a4a:	6023      	str	r3, [r4, #0]
 8025a4c:	bd70      	pop	{r4, r5, r6, pc}
 8025a4e:	46c0      	nop			@ (mov r8, r8)
 8025a50:	2000361c 	.word	0x2000361c

08025a54 <_write_r>:
 8025a54:	b570      	push	{r4, r5, r6, lr}
 8025a56:	0004      	movs	r4, r0
 8025a58:	0008      	movs	r0, r1
 8025a5a:	0011      	movs	r1, r2
 8025a5c:	001a      	movs	r2, r3
 8025a5e:	2300      	movs	r3, #0
 8025a60:	4d05      	ldr	r5, [pc, #20]	@ (8025a78 <_write_r+0x24>)
 8025a62:	602b      	str	r3, [r5, #0]
 8025a64:	f7ed fcc8 	bl	80133f8 <_write>
 8025a68:	1c43      	adds	r3, r0, #1
 8025a6a:	d103      	bne.n	8025a74 <_write_r+0x20>
 8025a6c:	682b      	ldr	r3, [r5, #0]
 8025a6e:	2b00      	cmp	r3, #0
 8025a70:	d000      	beq.n	8025a74 <_write_r+0x20>
 8025a72:	6023      	str	r3, [r4, #0]
 8025a74:	bd70      	pop	{r4, r5, r6, pc}
 8025a76:	46c0      	nop			@ (mov r8, r8)
 8025a78:	2000361c 	.word	0x2000361c

08025a7c <__errno>:
 8025a7c:	4b01      	ldr	r3, [pc, #4]	@ (8025a84 <__errno+0x8>)
 8025a7e:	6818      	ldr	r0, [r3, #0]
 8025a80:	4770      	bx	lr
 8025a82:	46c0      	nop			@ (mov r8, r8)
 8025a84:	200003e0 	.word	0x200003e0

08025a88 <__libc_init_array>:
 8025a88:	b570      	push	{r4, r5, r6, lr}
 8025a8a:	2600      	movs	r6, #0
 8025a8c:	4c0c      	ldr	r4, [pc, #48]	@ (8025ac0 <__libc_init_array+0x38>)
 8025a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8025ac4 <__libc_init_array+0x3c>)
 8025a90:	1b64      	subs	r4, r4, r5
 8025a92:	10a4      	asrs	r4, r4, #2
 8025a94:	42a6      	cmp	r6, r4
 8025a96:	d109      	bne.n	8025aac <__libc_init_array+0x24>
 8025a98:	2600      	movs	r6, #0
 8025a9a:	f003 ffcb 	bl	8029a34 <_init>
 8025a9e:	4c0a      	ldr	r4, [pc, #40]	@ (8025ac8 <__libc_init_array+0x40>)
 8025aa0:	4d0a      	ldr	r5, [pc, #40]	@ (8025acc <__libc_init_array+0x44>)
 8025aa2:	1b64      	subs	r4, r4, r5
 8025aa4:	10a4      	asrs	r4, r4, #2
 8025aa6:	42a6      	cmp	r6, r4
 8025aa8:	d105      	bne.n	8025ab6 <__libc_init_array+0x2e>
 8025aaa:	bd70      	pop	{r4, r5, r6, pc}
 8025aac:	00b3      	lsls	r3, r6, #2
 8025aae:	58eb      	ldr	r3, [r5, r3]
 8025ab0:	4798      	blx	r3
 8025ab2:	3601      	adds	r6, #1
 8025ab4:	e7ee      	b.n	8025a94 <__libc_init_array+0xc>
 8025ab6:	00b3      	lsls	r3, r6, #2
 8025ab8:	58eb      	ldr	r3, [r5, r3]
 8025aba:	4798      	blx	r3
 8025abc:	3601      	adds	r6, #1
 8025abe:	e7f2      	b.n	8025aa6 <__libc_init_array+0x1e>
 8025ac0:	0802e850 	.word	0x0802e850
 8025ac4:	0802e850 	.word	0x0802e850
 8025ac8:	0802e854 	.word	0x0802e854
 8025acc:	0802e850 	.word	0x0802e850

08025ad0 <__retarget_lock_init_recursive>:
 8025ad0:	4770      	bx	lr

08025ad2 <__retarget_lock_acquire_recursive>:
 8025ad2:	4770      	bx	lr

08025ad4 <__retarget_lock_release_recursive>:
 8025ad4:	4770      	bx	lr

08025ad6 <memchr>:
 8025ad6:	b2c9      	uxtb	r1, r1
 8025ad8:	1882      	adds	r2, r0, r2
 8025ada:	4290      	cmp	r0, r2
 8025adc:	d101      	bne.n	8025ae2 <memchr+0xc>
 8025ade:	2000      	movs	r0, #0
 8025ae0:	4770      	bx	lr
 8025ae2:	7803      	ldrb	r3, [r0, #0]
 8025ae4:	428b      	cmp	r3, r1
 8025ae6:	d0fb      	beq.n	8025ae0 <memchr+0xa>
 8025ae8:	3001      	adds	r0, #1
 8025aea:	e7f6      	b.n	8025ada <memchr+0x4>

08025aec <memcpy>:
 8025aec:	2300      	movs	r3, #0
 8025aee:	b510      	push	{r4, lr}
 8025af0:	429a      	cmp	r2, r3
 8025af2:	d100      	bne.n	8025af6 <memcpy+0xa>
 8025af4:	bd10      	pop	{r4, pc}
 8025af6:	5ccc      	ldrb	r4, [r1, r3]
 8025af8:	54c4      	strb	r4, [r0, r3]
 8025afa:	3301      	adds	r3, #1
 8025afc:	e7f8      	b.n	8025af0 <memcpy+0x4>
	...

08025b00 <nan>:
 8025b00:	2000      	movs	r0, #0
 8025b02:	4901      	ldr	r1, [pc, #4]	@ (8025b08 <nan+0x8>)
 8025b04:	4770      	bx	lr
 8025b06:	46c0      	nop			@ (mov r8, r8)
 8025b08:	7ff80000 	.word	0x7ff80000

08025b0c <quorem>:
 8025b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b0e:	6903      	ldr	r3, [r0, #16]
 8025b10:	690c      	ldr	r4, [r1, #16]
 8025b12:	b089      	sub	sp, #36	@ 0x24
 8025b14:	9003      	str	r0, [sp, #12]
 8025b16:	9106      	str	r1, [sp, #24]
 8025b18:	2000      	movs	r0, #0
 8025b1a:	42a3      	cmp	r3, r4
 8025b1c:	db63      	blt.n	8025be6 <quorem+0xda>
 8025b1e:	000b      	movs	r3, r1
 8025b20:	3c01      	subs	r4, #1
 8025b22:	3314      	adds	r3, #20
 8025b24:	00a5      	lsls	r5, r4, #2
 8025b26:	9304      	str	r3, [sp, #16]
 8025b28:	195b      	adds	r3, r3, r5
 8025b2a:	9305      	str	r3, [sp, #20]
 8025b2c:	9b03      	ldr	r3, [sp, #12]
 8025b2e:	3314      	adds	r3, #20
 8025b30:	9301      	str	r3, [sp, #4]
 8025b32:	195d      	adds	r5, r3, r5
 8025b34:	9b05      	ldr	r3, [sp, #20]
 8025b36:	682f      	ldr	r7, [r5, #0]
 8025b38:	681e      	ldr	r6, [r3, #0]
 8025b3a:	0038      	movs	r0, r7
 8025b3c:	3601      	adds	r6, #1
 8025b3e:	0031      	movs	r1, r6
 8025b40:	f7da fb30 	bl	80001a4 <__udivsi3>
 8025b44:	9002      	str	r0, [sp, #8]
 8025b46:	42b7      	cmp	r7, r6
 8025b48:	d327      	bcc.n	8025b9a <quorem+0x8e>
 8025b4a:	9b04      	ldr	r3, [sp, #16]
 8025b4c:	2700      	movs	r7, #0
 8025b4e:	469c      	mov	ip, r3
 8025b50:	9e01      	ldr	r6, [sp, #4]
 8025b52:	9707      	str	r7, [sp, #28]
 8025b54:	4662      	mov	r2, ip
 8025b56:	ca08      	ldmia	r2!, {r3}
 8025b58:	6830      	ldr	r0, [r6, #0]
 8025b5a:	4694      	mov	ip, r2
 8025b5c:	9a02      	ldr	r2, [sp, #8]
 8025b5e:	b299      	uxth	r1, r3
 8025b60:	4351      	muls	r1, r2
 8025b62:	0c1b      	lsrs	r3, r3, #16
 8025b64:	4353      	muls	r3, r2
 8025b66:	19c9      	adds	r1, r1, r7
 8025b68:	0c0a      	lsrs	r2, r1, #16
 8025b6a:	189b      	adds	r3, r3, r2
 8025b6c:	b289      	uxth	r1, r1
 8025b6e:	b282      	uxth	r2, r0
 8025b70:	1a52      	subs	r2, r2, r1
 8025b72:	9907      	ldr	r1, [sp, #28]
 8025b74:	0c1f      	lsrs	r7, r3, #16
 8025b76:	1852      	adds	r2, r2, r1
 8025b78:	0c00      	lsrs	r0, r0, #16
 8025b7a:	b29b      	uxth	r3, r3
 8025b7c:	1411      	asrs	r1, r2, #16
 8025b7e:	1ac3      	subs	r3, r0, r3
 8025b80:	185b      	adds	r3, r3, r1
 8025b82:	1419      	asrs	r1, r3, #16
 8025b84:	b292      	uxth	r2, r2
 8025b86:	041b      	lsls	r3, r3, #16
 8025b88:	431a      	orrs	r2, r3
 8025b8a:	9b05      	ldr	r3, [sp, #20]
 8025b8c:	9107      	str	r1, [sp, #28]
 8025b8e:	c604      	stmia	r6!, {r2}
 8025b90:	4563      	cmp	r3, ip
 8025b92:	d2df      	bcs.n	8025b54 <quorem+0x48>
 8025b94:	682b      	ldr	r3, [r5, #0]
 8025b96:	2b00      	cmp	r3, #0
 8025b98:	d02b      	beq.n	8025bf2 <quorem+0xe6>
 8025b9a:	9906      	ldr	r1, [sp, #24]
 8025b9c:	9803      	ldr	r0, [sp, #12]
 8025b9e:	f001 fd6f 	bl	8027680 <__mcmp>
 8025ba2:	2800      	cmp	r0, #0
 8025ba4:	db1e      	blt.n	8025be4 <quorem+0xd8>
 8025ba6:	2600      	movs	r6, #0
 8025ba8:	9d01      	ldr	r5, [sp, #4]
 8025baa:	9904      	ldr	r1, [sp, #16]
 8025bac:	c901      	ldmia	r1!, {r0}
 8025bae:	682b      	ldr	r3, [r5, #0]
 8025bb0:	b287      	uxth	r7, r0
 8025bb2:	b29a      	uxth	r2, r3
 8025bb4:	1bd2      	subs	r2, r2, r7
 8025bb6:	1992      	adds	r2, r2, r6
 8025bb8:	0c00      	lsrs	r0, r0, #16
 8025bba:	0c1b      	lsrs	r3, r3, #16
 8025bbc:	1a1b      	subs	r3, r3, r0
 8025bbe:	1410      	asrs	r0, r2, #16
 8025bc0:	181b      	adds	r3, r3, r0
 8025bc2:	141e      	asrs	r6, r3, #16
 8025bc4:	b292      	uxth	r2, r2
 8025bc6:	041b      	lsls	r3, r3, #16
 8025bc8:	431a      	orrs	r2, r3
 8025bca:	9b05      	ldr	r3, [sp, #20]
 8025bcc:	c504      	stmia	r5!, {r2}
 8025bce:	428b      	cmp	r3, r1
 8025bd0:	d2ec      	bcs.n	8025bac <quorem+0xa0>
 8025bd2:	9a01      	ldr	r2, [sp, #4]
 8025bd4:	00a3      	lsls	r3, r4, #2
 8025bd6:	18d3      	adds	r3, r2, r3
 8025bd8:	681a      	ldr	r2, [r3, #0]
 8025bda:	2a00      	cmp	r2, #0
 8025bdc:	d014      	beq.n	8025c08 <quorem+0xfc>
 8025bde:	9b02      	ldr	r3, [sp, #8]
 8025be0:	3301      	adds	r3, #1
 8025be2:	9302      	str	r3, [sp, #8]
 8025be4:	9802      	ldr	r0, [sp, #8]
 8025be6:	b009      	add	sp, #36	@ 0x24
 8025be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025bea:	682b      	ldr	r3, [r5, #0]
 8025bec:	2b00      	cmp	r3, #0
 8025bee:	d104      	bne.n	8025bfa <quorem+0xee>
 8025bf0:	3c01      	subs	r4, #1
 8025bf2:	9b01      	ldr	r3, [sp, #4]
 8025bf4:	3d04      	subs	r5, #4
 8025bf6:	42ab      	cmp	r3, r5
 8025bf8:	d3f7      	bcc.n	8025bea <quorem+0xde>
 8025bfa:	9b03      	ldr	r3, [sp, #12]
 8025bfc:	611c      	str	r4, [r3, #16]
 8025bfe:	e7cc      	b.n	8025b9a <quorem+0x8e>
 8025c00:	681a      	ldr	r2, [r3, #0]
 8025c02:	2a00      	cmp	r2, #0
 8025c04:	d104      	bne.n	8025c10 <quorem+0x104>
 8025c06:	3c01      	subs	r4, #1
 8025c08:	9a01      	ldr	r2, [sp, #4]
 8025c0a:	3b04      	subs	r3, #4
 8025c0c:	429a      	cmp	r2, r3
 8025c0e:	d3f7      	bcc.n	8025c00 <quorem+0xf4>
 8025c10:	9b03      	ldr	r3, [sp, #12]
 8025c12:	611c      	str	r4, [r3, #16]
 8025c14:	e7e3      	b.n	8025bde <quorem+0xd2>
	...

08025c18 <_dtoa_r>:
 8025c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025c1a:	0014      	movs	r4, r2
 8025c1c:	001d      	movs	r5, r3
 8025c1e:	69c6      	ldr	r6, [r0, #28]
 8025c20:	b09d      	sub	sp, #116	@ 0x74
 8025c22:	940a      	str	r4, [sp, #40]	@ 0x28
 8025c24:	950b      	str	r5, [sp, #44]	@ 0x2c
 8025c26:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8025c28:	9003      	str	r0, [sp, #12]
 8025c2a:	2e00      	cmp	r6, #0
 8025c2c:	d10f      	bne.n	8025c4e <_dtoa_r+0x36>
 8025c2e:	2010      	movs	r0, #16
 8025c30:	f001 f986 	bl	8026f40 <malloc>
 8025c34:	9b03      	ldr	r3, [sp, #12]
 8025c36:	1e02      	subs	r2, r0, #0
 8025c38:	61d8      	str	r0, [r3, #28]
 8025c3a:	d104      	bne.n	8025c46 <_dtoa_r+0x2e>
 8025c3c:	21ef      	movs	r1, #239	@ 0xef
 8025c3e:	4bc7      	ldr	r3, [pc, #796]	@ (8025f5c <_dtoa_r+0x344>)
 8025c40:	48c7      	ldr	r0, [pc, #796]	@ (8025f60 <_dtoa_r+0x348>)
 8025c42:	f002 fb23 	bl	802828c <__assert_func>
 8025c46:	6046      	str	r6, [r0, #4]
 8025c48:	6086      	str	r6, [r0, #8]
 8025c4a:	6006      	str	r6, [r0, #0]
 8025c4c:	60c6      	str	r6, [r0, #12]
 8025c4e:	9b03      	ldr	r3, [sp, #12]
 8025c50:	69db      	ldr	r3, [r3, #28]
 8025c52:	6819      	ldr	r1, [r3, #0]
 8025c54:	2900      	cmp	r1, #0
 8025c56:	d00b      	beq.n	8025c70 <_dtoa_r+0x58>
 8025c58:	685a      	ldr	r2, [r3, #4]
 8025c5a:	2301      	movs	r3, #1
 8025c5c:	4093      	lsls	r3, r2
 8025c5e:	604a      	str	r2, [r1, #4]
 8025c60:	608b      	str	r3, [r1, #8]
 8025c62:	9803      	ldr	r0, [sp, #12]
 8025c64:	f001 fa7e 	bl	8027164 <_Bfree>
 8025c68:	2200      	movs	r2, #0
 8025c6a:	9b03      	ldr	r3, [sp, #12]
 8025c6c:	69db      	ldr	r3, [r3, #28]
 8025c6e:	601a      	str	r2, [r3, #0]
 8025c70:	2d00      	cmp	r5, #0
 8025c72:	da1e      	bge.n	8025cb2 <_dtoa_r+0x9a>
 8025c74:	2301      	movs	r3, #1
 8025c76:	603b      	str	r3, [r7, #0]
 8025c78:	006b      	lsls	r3, r5, #1
 8025c7a:	085b      	lsrs	r3, r3, #1
 8025c7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025c7e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025c80:	4bb8      	ldr	r3, [pc, #736]	@ (8025f64 <_dtoa_r+0x34c>)
 8025c82:	4ab8      	ldr	r2, [pc, #736]	@ (8025f64 <_dtoa_r+0x34c>)
 8025c84:	403b      	ands	r3, r7
 8025c86:	4293      	cmp	r3, r2
 8025c88:	d116      	bne.n	8025cb8 <_dtoa_r+0xa0>
 8025c8a:	4bb7      	ldr	r3, [pc, #732]	@ (8025f68 <_dtoa_r+0x350>)
 8025c8c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025c8e:	6013      	str	r3, [r2, #0]
 8025c90:	033b      	lsls	r3, r7, #12
 8025c92:	0b1b      	lsrs	r3, r3, #12
 8025c94:	4323      	orrs	r3, r4
 8025c96:	d101      	bne.n	8025c9c <_dtoa_r+0x84>
 8025c98:	f000 fd80 	bl	802679c <_dtoa_r+0xb84>
 8025c9c:	4bb3      	ldr	r3, [pc, #716]	@ (8025f6c <_dtoa_r+0x354>)
 8025c9e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025ca0:	9308      	str	r3, [sp, #32]
 8025ca2:	2a00      	cmp	r2, #0
 8025ca4:	d002      	beq.n	8025cac <_dtoa_r+0x94>
 8025ca6:	4bb2      	ldr	r3, [pc, #712]	@ (8025f70 <_dtoa_r+0x358>)
 8025ca8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025caa:	6013      	str	r3, [r2, #0]
 8025cac:	9808      	ldr	r0, [sp, #32]
 8025cae:	b01d      	add	sp, #116	@ 0x74
 8025cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025cb2:	2300      	movs	r3, #0
 8025cb4:	603b      	str	r3, [r7, #0]
 8025cb6:	e7e2      	b.n	8025c7e <_dtoa_r+0x66>
 8025cb8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025cba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025cbc:	9212      	str	r2, [sp, #72]	@ 0x48
 8025cbe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025cc0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025cc2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025cc4:	2200      	movs	r2, #0
 8025cc6:	2300      	movs	r3, #0
 8025cc8:	f7da fbf2 	bl	80004b0 <__aeabi_dcmpeq>
 8025ccc:	1e06      	subs	r6, r0, #0
 8025cce:	d00b      	beq.n	8025ce8 <_dtoa_r+0xd0>
 8025cd0:	2301      	movs	r3, #1
 8025cd2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025cd4:	6013      	str	r3, [r2, #0]
 8025cd6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025cd8:	2b00      	cmp	r3, #0
 8025cda:	d002      	beq.n	8025ce2 <_dtoa_r+0xca>
 8025cdc:	4ba5      	ldr	r3, [pc, #660]	@ (8025f74 <_dtoa_r+0x35c>)
 8025cde:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025ce0:	6013      	str	r3, [r2, #0]
 8025ce2:	4ba5      	ldr	r3, [pc, #660]	@ (8025f78 <_dtoa_r+0x360>)
 8025ce4:	9308      	str	r3, [sp, #32]
 8025ce6:	e7e1      	b.n	8025cac <_dtoa_r+0x94>
 8025ce8:	ab1a      	add	r3, sp, #104	@ 0x68
 8025cea:	9301      	str	r3, [sp, #4]
 8025cec:	ab1b      	add	r3, sp, #108	@ 0x6c
 8025cee:	9300      	str	r3, [sp, #0]
 8025cf0:	9803      	ldr	r0, [sp, #12]
 8025cf2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025cf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025cf6:	f001 fde5 	bl	80278c4 <__d2b>
 8025cfa:	007a      	lsls	r2, r7, #1
 8025cfc:	9005      	str	r0, [sp, #20]
 8025cfe:	0d52      	lsrs	r2, r2, #21
 8025d00:	d100      	bne.n	8025d04 <_dtoa_r+0xec>
 8025d02:	e07b      	b.n	8025dfc <_dtoa_r+0x1e4>
 8025d04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025d06:	9618      	str	r6, [sp, #96]	@ 0x60
 8025d08:	0319      	lsls	r1, r3, #12
 8025d0a:	4b9c      	ldr	r3, [pc, #624]	@ (8025f7c <_dtoa_r+0x364>)
 8025d0c:	0b09      	lsrs	r1, r1, #12
 8025d0e:	430b      	orrs	r3, r1
 8025d10:	499b      	ldr	r1, [pc, #620]	@ (8025f80 <_dtoa_r+0x368>)
 8025d12:	1857      	adds	r7, r2, r1
 8025d14:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025d16:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025d18:	0019      	movs	r1, r3
 8025d1a:	2200      	movs	r2, #0
 8025d1c:	4b99      	ldr	r3, [pc, #612]	@ (8025f84 <_dtoa_r+0x36c>)
 8025d1e:	f7dd f8ff 	bl	8002f20 <__aeabi_dsub>
 8025d22:	4a99      	ldr	r2, [pc, #612]	@ (8025f88 <_dtoa_r+0x370>)
 8025d24:	4b99      	ldr	r3, [pc, #612]	@ (8025f8c <_dtoa_r+0x374>)
 8025d26:	f7dc fe15 	bl	8002954 <__aeabi_dmul>
 8025d2a:	4a99      	ldr	r2, [pc, #612]	@ (8025f90 <_dtoa_r+0x378>)
 8025d2c:	4b99      	ldr	r3, [pc, #612]	@ (8025f94 <_dtoa_r+0x37c>)
 8025d2e:	f7db fe11 	bl	8001954 <__aeabi_dadd>
 8025d32:	0004      	movs	r4, r0
 8025d34:	0038      	movs	r0, r7
 8025d36:	000d      	movs	r5, r1
 8025d38:	f7dd fd5a 	bl	80037f0 <__aeabi_i2d>
 8025d3c:	4a96      	ldr	r2, [pc, #600]	@ (8025f98 <_dtoa_r+0x380>)
 8025d3e:	4b97      	ldr	r3, [pc, #604]	@ (8025f9c <_dtoa_r+0x384>)
 8025d40:	f7dc fe08 	bl	8002954 <__aeabi_dmul>
 8025d44:	0002      	movs	r2, r0
 8025d46:	000b      	movs	r3, r1
 8025d48:	0020      	movs	r0, r4
 8025d4a:	0029      	movs	r1, r5
 8025d4c:	f7db fe02 	bl	8001954 <__aeabi_dadd>
 8025d50:	0004      	movs	r4, r0
 8025d52:	000d      	movs	r5, r1
 8025d54:	f7dd fd10 	bl	8003778 <__aeabi_d2iz>
 8025d58:	2200      	movs	r2, #0
 8025d5a:	9004      	str	r0, [sp, #16]
 8025d5c:	2300      	movs	r3, #0
 8025d5e:	0020      	movs	r0, r4
 8025d60:	0029      	movs	r1, r5
 8025d62:	f7da fbab 	bl	80004bc <__aeabi_dcmplt>
 8025d66:	2800      	cmp	r0, #0
 8025d68:	d00b      	beq.n	8025d82 <_dtoa_r+0x16a>
 8025d6a:	9804      	ldr	r0, [sp, #16]
 8025d6c:	f7dd fd40 	bl	80037f0 <__aeabi_i2d>
 8025d70:	002b      	movs	r3, r5
 8025d72:	0022      	movs	r2, r4
 8025d74:	f7da fb9c 	bl	80004b0 <__aeabi_dcmpeq>
 8025d78:	4243      	negs	r3, r0
 8025d7a:	4158      	adcs	r0, r3
 8025d7c:	9b04      	ldr	r3, [sp, #16]
 8025d7e:	1a1b      	subs	r3, r3, r0
 8025d80:	9304      	str	r3, [sp, #16]
 8025d82:	2301      	movs	r3, #1
 8025d84:	9315      	str	r3, [sp, #84]	@ 0x54
 8025d86:	9b04      	ldr	r3, [sp, #16]
 8025d88:	2b16      	cmp	r3, #22
 8025d8a:	d810      	bhi.n	8025dae <_dtoa_r+0x196>
 8025d8c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025d8e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025d90:	9a04      	ldr	r2, [sp, #16]
 8025d92:	4b83      	ldr	r3, [pc, #524]	@ (8025fa0 <_dtoa_r+0x388>)
 8025d94:	00d2      	lsls	r2, r2, #3
 8025d96:	189b      	adds	r3, r3, r2
 8025d98:	681a      	ldr	r2, [r3, #0]
 8025d9a:	685b      	ldr	r3, [r3, #4]
 8025d9c:	f7da fb8e 	bl	80004bc <__aeabi_dcmplt>
 8025da0:	2800      	cmp	r0, #0
 8025da2:	d047      	beq.n	8025e34 <_dtoa_r+0x21c>
 8025da4:	9b04      	ldr	r3, [sp, #16]
 8025da6:	3b01      	subs	r3, #1
 8025da8:	9304      	str	r3, [sp, #16]
 8025daa:	2300      	movs	r3, #0
 8025dac:	9315      	str	r3, [sp, #84]	@ 0x54
 8025dae:	2200      	movs	r2, #0
 8025db0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025db2:	9206      	str	r2, [sp, #24]
 8025db4:	1bdb      	subs	r3, r3, r7
 8025db6:	1e5a      	subs	r2, r3, #1
 8025db8:	d53e      	bpl.n	8025e38 <_dtoa_r+0x220>
 8025dba:	2201      	movs	r2, #1
 8025dbc:	1ad3      	subs	r3, r2, r3
 8025dbe:	9306      	str	r3, [sp, #24]
 8025dc0:	2300      	movs	r3, #0
 8025dc2:	930d      	str	r3, [sp, #52]	@ 0x34
 8025dc4:	9b04      	ldr	r3, [sp, #16]
 8025dc6:	2b00      	cmp	r3, #0
 8025dc8:	db38      	blt.n	8025e3c <_dtoa_r+0x224>
 8025dca:	9a04      	ldr	r2, [sp, #16]
 8025dcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025dce:	4694      	mov	ip, r2
 8025dd0:	4463      	add	r3, ip
 8025dd2:	930d      	str	r3, [sp, #52]	@ 0x34
 8025dd4:	2300      	movs	r3, #0
 8025dd6:	9214      	str	r2, [sp, #80]	@ 0x50
 8025dd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025dda:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025ddc:	2401      	movs	r4, #1
 8025dde:	2b09      	cmp	r3, #9
 8025de0:	d862      	bhi.n	8025ea8 <_dtoa_r+0x290>
 8025de2:	2b05      	cmp	r3, #5
 8025de4:	dd02      	ble.n	8025dec <_dtoa_r+0x1d4>
 8025de6:	2400      	movs	r4, #0
 8025de8:	3b04      	subs	r3, #4
 8025dea:	9322      	str	r3, [sp, #136]	@ 0x88
 8025dec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025dee:	1e98      	subs	r0, r3, #2
 8025df0:	2803      	cmp	r0, #3
 8025df2:	d863      	bhi.n	8025ebc <_dtoa_r+0x2a4>
 8025df4:	f7da f9c2 	bl	800017c <__gnu_thumb1_case_uqi>
 8025df8:	2b385654 	.word	0x2b385654
 8025dfc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025dfe:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8025e00:	18f6      	adds	r6, r6, r3
 8025e02:	4b68      	ldr	r3, [pc, #416]	@ (8025fa4 <_dtoa_r+0x38c>)
 8025e04:	18f2      	adds	r2, r6, r3
 8025e06:	2a20      	cmp	r2, #32
 8025e08:	dd0f      	ble.n	8025e2a <_dtoa_r+0x212>
 8025e0a:	2340      	movs	r3, #64	@ 0x40
 8025e0c:	1a9b      	subs	r3, r3, r2
 8025e0e:	409f      	lsls	r7, r3
 8025e10:	4b65      	ldr	r3, [pc, #404]	@ (8025fa8 <_dtoa_r+0x390>)
 8025e12:	0038      	movs	r0, r7
 8025e14:	18f3      	adds	r3, r6, r3
 8025e16:	40dc      	lsrs	r4, r3
 8025e18:	4320      	orrs	r0, r4
 8025e1a:	f7dd fd17 	bl	800384c <__aeabi_ui2d>
 8025e1e:	2201      	movs	r2, #1
 8025e20:	4b62      	ldr	r3, [pc, #392]	@ (8025fac <_dtoa_r+0x394>)
 8025e22:	1e77      	subs	r7, r6, #1
 8025e24:	18cb      	adds	r3, r1, r3
 8025e26:	9218      	str	r2, [sp, #96]	@ 0x60
 8025e28:	e776      	b.n	8025d18 <_dtoa_r+0x100>
 8025e2a:	2320      	movs	r3, #32
 8025e2c:	0020      	movs	r0, r4
 8025e2e:	1a9b      	subs	r3, r3, r2
 8025e30:	4098      	lsls	r0, r3
 8025e32:	e7f2      	b.n	8025e1a <_dtoa_r+0x202>
 8025e34:	9015      	str	r0, [sp, #84]	@ 0x54
 8025e36:	e7ba      	b.n	8025dae <_dtoa_r+0x196>
 8025e38:	920d      	str	r2, [sp, #52]	@ 0x34
 8025e3a:	e7c3      	b.n	8025dc4 <_dtoa_r+0x1ac>
 8025e3c:	9b06      	ldr	r3, [sp, #24]
 8025e3e:	9a04      	ldr	r2, [sp, #16]
 8025e40:	1a9b      	subs	r3, r3, r2
 8025e42:	9306      	str	r3, [sp, #24]
 8025e44:	4253      	negs	r3, r2
 8025e46:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025e48:	2300      	movs	r3, #0
 8025e4a:	9314      	str	r3, [sp, #80]	@ 0x50
 8025e4c:	e7c5      	b.n	8025dda <_dtoa_r+0x1c2>
 8025e4e:	2301      	movs	r3, #1
 8025e50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025e52:	9310      	str	r3, [sp, #64]	@ 0x40
 8025e54:	4694      	mov	ip, r2
 8025e56:	9b04      	ldr	r3, [sp, #16]
 8025e58:	4463      	add	r3, ip
 8025e5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8025e5c:	3301      	adds	r3, #1
 8025e5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025e60:	2b00      	cmp	r3, #0
 8025e62:	dc08      	bgt.n	8025e76 <_dtoa_r+0x25e>
 8025e64:	2301      	movs	r3, #1
 8025e66:	e006      	b.n	8025e76 <_dtoa_r+0x25e>
 8025e68:	2301      	movs	r3, #1
 8025e6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8025e6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025e6e:	2b00      	cmp	r3, #0
 8025e70:	dd28      	ble.n	8025ec4 <_dtoa_r+0x2ac>
 8025e72:	930e      	str	r3, [sp, #56]	@ 0x38
 8025e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8025e76:	9a03      	ldr	r2, [sp, #12]
 8025e78:	2100      	movs	r1, #0
 8025e7a:	69d0      	ldr	r0, [r2, #28]
 8025e7c:	2204      	movs	r2, #4
 8025e7e:	0015      	movs	r5, r2
 8025e80:	3514      	adds	r5, #20
 8025e82:	429d      	cmp	r5, r3
 8025e84:	d923      	bls.n	8025ece <_dtoa_r+0x2b6>
 8025e86:	6041      	str	r1, [r0, #4]
 8025e88:	9803      	ldr	r0, [sp, #12]
 8025e8a:	f001 f927 	bl	80270dc <_Balloc>
 8025e8e:	9008      	str	r0, [sp, #32]
 8025e90:	2800      	cmp	r0, #0
 8025e92:	d11f      	bne.n	8025ed4 <_dtoa_r+0x2bc>
 8025e94:	21b0      	movs	r1, #176	@ 0xb0
 8025e96:	4b46      	ldr	r3, [pc, #280]	@ (8025fb0 <_dtoa_r+0x398>)
 8025e98:	4831      	ldr	r0, [pc, #196]	@ (8025f60 <_dtoa_r+0x348>)
 8025e9a:	9a08      	ldr	r2, [sp, #32]
 8025e9c:	31ff      	adds	r1, #255	@ 0xff
 8025e9e:	e6d0      	b.n	8025c42 <_dtoa_r+0x2a>
 8025ea0:	2300      	movs	r3, #0
 8025ea2:	e7e2      	b.n	8025e6a <_dtoa_r+0x252>
 8025ea4:	2300      	movs	r3, #0
 8025ea6:	e7d3      	b.n	8025e50 <_dtoa_r+0x238>
 8025ea8:	2300      	movs	r3, #0
 8025eaa:	9410      	str	r4, [sp, #64]	@ 0x40
 8025eac:	9322      	str	r3, [sp, #136]	@ 0x88
 8025eae:	3b01      	subs	r3, #1
 8025eb0:	2200      	movs	r2, #0
 8025eb2:	930e      	str	r3, [sp, #56]	@ 0x38
 8025eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8025eb6:	3313      	adds	r3, #19
 8025eb8:	9223      	str	r2, [sp, #140]	@ 0x8c
 8025eba:	e7dc      	b.n	8025e76 <_dtoa_r+0x25e>
 8025ebc:	2301      	movs	r3, #1
 8025ebe:	9310      	str	r3, [sp, #64]	@ 0x40
 8025ec0:	3b02      	subs	r3, #2
 8025ec2:	e7f5      	b.n	8025eb0 <_dtoa_r+0x298>
 8025ec4:	2301      	movs	r3, #1
 8025ec6:	001a      	movs	r2, r3
 8025ec8:	930e      	str	r3, [sp, #56]	@ 0x38
 8025eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8025ecc:	e7f4      	b.n	8025eb8 <_dtoa_r+0x2a0>
 8025ece:	3101      	adds	r1, #1
 8025ed0:	0052      	lsls	r2, r2, #1
 8025ed2:	e7d4      	b.n	8025e7e <_dtoa_r+0x266>
 8025ed4:	9b03      	ldr	r3, [sp, #12]
 8025ed6:	9a08      	ldr	r2, [sp, #32]
 8025ed8:	69db      	ldr	r3, [r3, #28]
 8025eda:	601a      	str	r2, [r3, #0]
 8025edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025ede:	2b0e      	cmp	r3, #14
 8025ee0:	d900      	bls.n	8025ee4 <_dtoa_r+0x2cc>
 8025ee2:	e0d6      	b.n	8026092 <_dtoa_r+0x47a>
 8025ee4:	2c00      	cmp	r4, #0
 8025ee6:	d100      	bne.n	8025eea <_dtoa_r+0x2d2>
 8025ee8:	e0d3      	b.n	8026092 <_dtoa_r+0x47a>
 8025eea:	9b04      	ldr	r3, [sp, #16]
 8025eec:	2b00      	cmp	r3, #0
 8025eee:	dd63      	ble.n	8025fb8 <_dtoa_r+0x3a0>
 8025ef0:	210f      	movs	r1, #15
 8025ef2:	9a04      	ldr	r2, [sp, #16]
 8025ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8025fa0 <_dtoa_r+0x388>)
 8025ef6:	400a      	ands	r2, r1
 8025ef8:	00d2      	lsls	r2, r2, #3
 8025efa:	189b      	adds	r3, r3, r2
 8025efc:	681e      	ldr	r6, [r3, #0]
 8025efe:	685f      	ldr	r7, [r3, #4]
 8025f00:	9b04      	ldr	r3, [sp, #16]
 8025f02:	2402      	movs	r4, #2
 8025f04:	111d      	asrs	r5, r3, #4
 8025f06:	05db      	lsls	r3, r3, #23
 8025f08:	d50a      	bpl.n	8025f20 <_dtoa_r+0x308>
 8025f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8025fb4 <_dtoa_r+0x39c>)
 8025f0c:	400d      	ands	r5, r1
 8025f0e:	6a1a      	ldr	r2, [r3, #32]
 8025f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025f12:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025f14:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025f16:	f7dc f8e3 	bl	80020e0 <__aeabi_ddiv>
 8025f1a:	900a      	str	r0, [sp, #40]	@ 0x28
 8025f1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025f1e:	3401      	adds	r4, #1
 8025f20:	4b24      	ldr	r3, [pc, #144]	@ (8025fb4 <_dtoa_r+0x39c>)
 8025f22:	930c      	str	r3, [sp, #48]	@ 0x30
 8025f24:	2d00      	cmp	r5, #0
 8025f26:	d108      	bne.n	8025f3a <_dtoa_r+0x322>
 8025f28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025f2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025f2c:	0032      	movs	r2, r6
 8025f2e:	003b      	movs	r3, r7
 8025f30:	f7dc f8d6 	bl	80020e0 <__aeabi_ddiv>
 8025f34:	900a      	str	r0, [sp, #40]	@ 0x28
 8025f36:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025f38:	e059      	b.n	8025fee <_dtoa_r+0x3d6>
 8025f3a:	2301      	movs	r3, #1
 8025f3c:	421d      	tst	r5, r3
 8025f3e:	d009      	beq.n	8025f54 <_dtoa_r+0x33c>
 8025f40:	18e4      	adds	r4, r4, r3
 8025f42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025f44:	0030      	movs	r0, r6
 8025f46:	681a      	ldr	r2, [r3, #0]
 8025f48:	685b      	ldr	r3, [r3, #4]
 8025f4a:	0039      	movs	r1, r7
 8025f4c:	f7dc fd02 	bl	8002954 <__aeabi_dmul>
 8025f50:	0006      	movs	r6, r0
 8025f52:	000f      	movs	r7, r1
 8025f54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025f56:	106d      	asrs	r5, r5, #1
 8025f58:	3308      	adds	r3, #8
 8025f5a:	e7e2      	b.n	8025f22 <_dtoa_r+0x30a>
 8025f5c:	0802e40f 	.word	0x0802e40f
 8025f60:	0802e426 	.word	0x0802e426
 8025f64:	7ff00000 	.word	0x7ff00000
 8025f68:	0000270f 	.word	0x0000270f
 8025f6c:	0802e40b 	.word	0x0802e40b
 8025f70:	0802e40e 	.word	0x0802e40e
 8025f74:	0802e3d7 	.word	0x0802e3d7
 8025f78:	0802e3d6 	.word	0x0802e3d6
 8025f7c:	3ff00000 	.word	0x3ff00000
 8025f80:	fffffc01 	.word	0xfffffc01
 8025f84:	3ff80000 	.word	0x3ff80000
 8025f88:	636f4361 	.word	0x636f4361
 8025f8c:	3fd287a7 	.word	0x3fd287a7
 8025f90:	8b60c8b3 	.word	0x8b60c8b3
 8025f94:	3fc68a28 	.word	0x3fc68a28
 8025f98:	509f79fb 	.word	0x509f79fb
 8025f9c:	3fd34413 	.word	0x3fd34413
 8025fa0:	0802e720 	.word	0x0802e720
 8025fa4:	00000432 	.word	0x00000432
 8025fa8:	00000412 	.word	0x00000412
 8025fac:	fe100000 	.word	0xfe100000
 8025fb0:	0802e47e 	.word	0x0802e47e
 8025fb4:	0802e6f8 	.word	0x0802e6f8
 8025fb8:	9b04      	ldr	r3, [sp, #16]
 8025fba:	2402      	movs	r4, #2
 8025fbc:	2b00      	cmp	r3, #0
 8025fbe:	d016      	beq.n	8025fee <_dtoa_r+0x3d6>
 8025fc0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025fc2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025fc4:	220f      	movs	r2, #15
 8025fc6:	425d      	negs	r5, r3
 8025fc8:	402a      	ands	r2, r5
 8025fca:	4bd5      	ldr	r3, [pc, #852]	@ (8026320 <_dtoa_r+0x708>)
 8025fcc:	00d2      	lsls	r2, r2, #3
 8025fce:	189b      	adds	r3, r3, r2
 8025fd0:	681a      	ldr	r2, [r3, #0]
 8025fd2:	685b      	ldr	r3, [r3, #4]
 8025fd4:	f7dc fcbe 	bl	8002954 <__aeabi_dmul>
 8025fd8:	2701      	movs	r7, #1
 8025fda:	2300      	movs	r3, #0
 8025fdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8025fde:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025fe0:	4ed0      	ldr	r6, [pc, #832]	@ (8026324 <_dtoa_r+0x70c>)
 8025fe2:	112d      	asrs	r5, r5, #4
 8025fe4:	2d00      	cmp	r5, #0
 8025fe6:	d000      	beq.n	8025fea <_dtoa_r+0x3d2>
 8025fe8:	e095      	b.n	8026116 <_dtoa_r+0x4fe>
 8025fea:	2b00      	cmp	r3, #0
 8025fec:	d1a2      	bne.n	8025f34 <_dtoa_r+0x31c>
 8025fee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8025ff0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025ff2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025ff4:	2b00      	cmp	r3, #0
 8025ff6:	d100      	bne.n	8025ffa <_dtoa_r+0x3e2>
 8025ff8:	e098      	b.n	802612c <_dtoa_r+0x514>
 8025ffa:	2200      	movs	r2, #0
 8025ffc:	0030      	movs	r0, r6
 8025ffe:	0039      	movs	r1, r7
 8026000:	4bc9      	ldr	r3, [pc, #804]	@ (8026328 <_dtoa_r+0x710>)
 8026002:	f7da fa5b 	bl	80004bc <__aeabi_dcmplt>
 8026006:	2800      	cmp	r0, #0
 8026008:	d100      	bne.n	802600c <_dtoa_r+0x3f4>
 802600a:	e08f      	b.n	802612c <_dtoa_r+0x514>
 802600c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802600e:	2b00      	cmp	r3, #0
 8026010:	d100      	bne.n	8026014 <_dtoa_r+0x3fc>
 8026012:	e08b      	b.n	802612c <_dtoa_r+0x514>
 8026014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026016:	2b00      	cmp	r3, #0
 8026018:	dd37      	ble.n	802608a <_dtoa_r+0x472>
 802601a:	9b04      	ldr	r3, [sp, #16]
 802601c:	2200      	movs	r2, #0
 802601e:	3b01      	subs	r3, #1
 8026020:	930c      	str	r3, [sp, #48]	@ 0x30
 8026022:	0030      	movs	r0, r6
 8026024:	4bc1      	ldr	r3, [pc, #772]	@ (802632c <_dtoa_r+0x714>)
 8026026:	0039      	movs	r1, r7
 8026028:	f7dc fc94 	bl	8002954 <__aeabi_dmul>
 802602c:	900a      	str	r0, [sp, #40]	@ 0x28
 802602e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026030:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026032:	3401      	adds	r4, #1
 8026034:	0020      	movs	r0, r4
 8026036:	9311      	str	r3, [sp, #68]	@ 0x44
 8026038:	f7dd fbda 	bl	80037f0 <__aeabi_i2d>
 802603c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802603e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026040:	f7dc fc88 	bl	8002954 <__aeabi_dmul>
 8026044:	4bba      	ldr	r3, [pc, #744]	@ (8026330 <_dtoa_r+0x718>)
 8026046:	2200      	movs	r2, #0
 8026048:	f7db fc84 	bl	8001954 <__aeabi_dadd>
 802604c:	4bb9      	ldr	r3, [pc, #740]	@ (8026334 <_dtoa_r+0x71c>)
 802604e:	0006      	movs	r6, r0
 8026050:	18cf      	adds	r7, r1, r3
 8026052:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026054:	2b00      	cmp	r3, #0
 8026056:	d16d      	bne.n	8026134 <_dtoa_r+0x51c>
 8026058:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802605a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802605c:	2200      	movs	r2, #0
 802605e:	4bb6      	ldr	r3, [pc, #728]	@ (8026338 <_dtoa_r+0x720>)
 8026060:	f7dc ff5e 	bl	8002f20 <__aeabi_dsub>
 8026064:	0032      	movs	r2, r6
 8026066:	003b      	movs	r3, r7
 8026068:	0004      	movs	r4, r0
 802606a:	000d      	movs	r5, r1
 802606c:	f7da fa3a 	bl	80004e4 <__aeabi_dcmpgt>
 8026070:	2800      	cmp	r0, #0
 8026072:	d000      	beq.n	8026076 <_dtoa_r+0x45e>
 8026074:	e2b6      	b.n	80265e4 <_dtoa_r+0x9cc>
 8026076:	2180      	movs	r1, #128	@ 0x80
 8026078:	0609      	lsls	r1, r1, #24
 802607a:	187b      	adds	r3, r7, r1
 802607c:	0032      	movs	r2, r6
 802607e:	0020      	movs	r0, r4
 8026080:	0029      	movs	r1, r5
 8026082:	f7da fa1b 	bl	80004bc <__aeabi_dcmplt>
 8026086:	2800      	cmp	r0, #0
 8026088:	d128      	bne.n	80260dc <_dtoa_r+0x4c4>
 802608a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802608c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802608e:	930a      	str	r3, [sp, #40]	@ 0x28
 8026090:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026092:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026094:	2b00      	cmp	r3, #0
 8026096:	da00      	bge.n	802609a <_dtoa_r+0x482>
 8026098:	e174      	b.n	8026384 <_dtoa_r+0x76c>
 802609a:	9a04      	ldr	r2, [sp, #16]
 802609c:	2a0e      	cmp	r2, #14
 802609e:	dd00      	ble.n	80260a2 <_dtoa_r+0x48a>
 80260a0:	e170      	b.n	8026384 <_dtoa_r+0x76c>
 80260a2:	4b9f      	ldr	r3, [pc, #636]	@ (8026320 <_dtoa_r+0x708>)
 80260a4:	00d2      	lsls	r2, r2, #3
 80260a6:	189b      	adds	r3, r3, r2
 80260a8:	685c      	ldr	r4, [r3, #4]
 80260aa:	681b      	ldr	r3, [r3, #0]
 80260ac:	9306      	str	r3, [sp, #24]
 80260ae:	9407      	str	r4, [sp, #28]
 80260b0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80260b2:	2b00      	cmp	r3, #0
 80260b4:	db00      	blt.n	80260b8 <_dtoa_r+0x4a0>
 80260b6:	e0e7      	b.n	8026288 <_dtoa_r+0x670>
 80260b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80260ba:	2b00      	cmp	r3, #0
 80260bc:	dd00      	ble.n	80260c0 <_dtoa_r+0x4a8>
 80260be:	e0e3      	b.n	8026288 <_dtoa_r+0x670>
 80260c0:	d10c      	bne.n	80260dc <_dtoa_r+0x4c4>
 80260c2:	9806      	ldr	r0, [sp, #24]
 80260c4:	9907      	ldr	r1, [sp, #28]
 80260c6:	2200      	movs	r2, #0
 80260c8:	4b9b      	ldr	r3, [pc, #620]	@ (8026338 <_dtoa_r+0x720>)
 80260ca:	f7dc fc43 	bl	8002954 <__aeabi_dmul>
 80260ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80260d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80260d2:	f7da fa11 	bl	80004f8 <__aeabi_dcmpge>
 80260d6:	2800      	cmp	r0, #0
 80260d8:	d100      	bne.n	80260dc <_dtoa_r+0x4c4>
 80260da:	e286      	b.n	80265ea <_dtoa_r+0x9d2>
 80260dc:	2600      	movs	r6, #0
 80260de:	0037      	movs	r7, r6
 80260e0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80260e2:	9c08      	ldr	r4, [sp, #32]
 80260e4:	43db      	mvns	r3, r3
 80260e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80260e8:	9704      	str	r7, [sp, #16]
 80260ea:	2700      	movs	r7, #0
 80260ec:	0031      	movs	r1, r6
 80260ee:	9803      	ldr	r0, [sp, #12]
 80260f0:	f001 f838 	bl	8027164 <_Bfree>
 80260f4:	9b04      	ldr	r3, [sp, #16]
 80260f6:	2b00      	cmp	r3, #0
 80260f8:	d100      	bne.n	80260fc <_dtoa_r+0x4e4>
 80260fa:	e0bb      	b.n	8026274 <_dtoa_r+0x65c>
 80260fc:	2f00      	cmp	r7, #0
 80260fe:	d005      	beq.n	802610c <_dtoa_r+0x4f4>
 8026100:	429f      	cmp	r7, r3
 8026102:	d003      	beq.n	802610c <_dtoa_r+0x4f4>
 8026104:	0039      	movs	r1, r7
 8026106:	9803      	ldr	r0, [sp, #12]
 8026108:	f001 f82c 	bl	8027164 <_Bfree>
 802610c:	9904      	ldr	r1, [sp, #16]
 802610e:	9803      	ldr	r0, [sp, #12]
 8026110:	f001 f828 	bl	8027164 <_Bfree>
 8026114:	e0ae      	b.n	8026274 <_dtoa_r+0x65c>
 8026116:	423d      	tst	r5, r7
 8026118:	d005      	beq.n	8026126 <_dtoa_r+0x50e>
 802611a:	6832      	ldr	r2, [r6, #0]
 802611c:	6873      	ldr	r3, [r6, #4]
 802611e:	f7dc fc19 	bl	8002954 <__aeabi_dmul>
 8026122:	003b      	movs	r3, r7
 8026124:	3401      	adds	r4, #1
 8026126:	106d      	asrs	r5, r5, #1
 8026128:	3608      	adds	r6, #8
 802612a:	e75b      	b.n	8025fe4 <_dtoa_r+0x3cc>
 802612c:	9b04      	ldr	r3, [sp, #16]
 802612e:	930c      	str	r3, [sp, #48]	@ 0x30
 8026130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026132:	e77f      	b.n	8026034 <_dtoa_r+0x41c>
 8026134:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026136:	4b7a      	ldr	r3, [pc, #488]	@ (8026320 <_dtoa_r+0x708>)
 8026138:	3a01      	subs	r2, #1
 802613a:	00d2      	lsls	r2, r2, #3
 802613c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802613e:	189b      	adds	r3, r3, r2
 8026140:	681a      	ldr	r2, [r3, #0]
 8026142:	685b      	ldr	r3, [r3, #4]
 8026144:	2900      	cmp	r1, #0
 8026146:	d04c      	beq.n	80261e2 <_dtoa_r+0x5ca>
 8026148:	2000      	movs	r0, #0
 802614a:	497c      	ldr	r1, [pc, #496]	@ (802633c <_dtoa_r+0x724>)
 802614c:	f7db ffc8 	bl	80020e0 <__aeabi_ddiv>
 8026150:	0032      	movs	r2, r6
 8026152:	003b      	movs	r3, r7
 8026154:	f7dc fee4 	bl	8002f20 <__aeabi_dsub>
 8026158:	9a08      	ldr	r2, [sp, #32]
 802615a:	0006      	movs	r6, r0
 802615c:	4694      	mov	ip, r2
 802615e:	000f      	movs	r7, r1
 8026160:	9b08      	ldr	r3, [sp, #32]
 8026162:	9316      	str	r3, [sp, #88]	@ 0x58
 8026164:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026166:	4463      	add	r3, ip
 8026168:	9311      	str	r3, [sp, #68]	@ 0x44
 802616a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802616c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802616e:	f7dd fb03 	bl	8003778 <__aeabi_d2iz>
 8026172:	0005      	movs	r5, r0
 8026174:	f7dd fb3c 	bl	80037f0 <__aeabi_i2d>
 8026178:	0002      	movs	r2, r0
 802617a:	000b      	movs	r3, r1
 802617c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802617e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026180:	f7dc fece 	bl	8002f20 <__aeabi_dsub>
 8026184:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026186:	3530      	adds	r5, #48	@ 0x30
 8026188:	1c5c      	adds	r4, r3, #1
 802618a:	701d      	strb	r5, [r3, #0]
 802618c:	0032      	movs	r2, r6
 802618e:	003b      	movs	r3, r7
 8026190:	900a      	str	r0, [sp, #40]	@ 0x28
 8026192:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026194:	f7da f992 	bl	80004bc <__aeabi_dcmplt>
 8026198:	2800      	cmp	r0, #0
 802619a:	d16b      	bne.n	8026274 <_dtoa_r+0x65c>
 802619c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802619e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80261a0:	2000      	movs	r0, #0
 80261a2:	4961      	ldr	r1, [pc, #388]	@ (8026328 <_dtoa_r+0x710>)
 80261a4:	f7dc febc 	bl	8002f20 <__aeabi_dsub>
 80261a8:	0032      	movs	r2, r6
 80261aa:	003b      	movs	r3, r7
 80261ac:	f7da f986 	bl	80004bc <__aeabi_dcmplt>
 80261b0:	2800      	cmp	r0, #0
 80261b2:	d000      	beq.n	80261b6 <_dtoa_r+0x59e>
 80261b4:	e0c6      	b.n	8026344 <_dtoa_r+0x72c>
 80261b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80261b8:	42a3      	cmp	r3, r4
 80261ba:	d100      	bne.n	80261be <_dtoa_r+0x5a6>
 80261bc:	e765      	b.n	802608a <_dtoa_r+0x472>
 80261be:	2200      	movs	r2, #0
 80261c0:	0030      	movs	r0, r6
 80261c2:	0039      	movs	r1, r7
 80261c4:	4b59      	ldr	r3, [pc, #356]	@ (802632c <_dtoa_r+0x714>)
 80261c6:	f7dc fbc5 	bl	8002954 <__aeabi_dmul>
 80261ca:	2200      	movs	r2, #0
 80261cc:	0006      	movs	r6, r0
 80261ce:	000f      	movs	r7, r1
 80261d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80261d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80261d4:	4b55      	ldr	r3, [pc, #340]	@ (802632c <_dtoa_r+0x714>)
 80261d6:	f7dc fbbd 	bl	8002954 <__aeabi_dmul>
 80261da:	9416      	str	r4, [sp, #88]	@ 0x58
 80261dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80261de:	910b      	str	r1, [sp, #44]	@ 0x2c
 80261e0:	e7c3      	b.n	802616a <_dtoa_r+0x552>
 80261e2:	0030      	movs	r0, r6
 80261e4:	0039      	movs	r1, r7
 80261e6:	f7dc fbb5 	bl	8002954 <__aeabi_dmul>
 80261ea:	9d08      	ldr	r5, [sp, #32]
 80261ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80261ee:	002b      	movs	r3, r5
 80261f0:	4694      	mov	ip, r2
 80261f2:	9016      	str	r0, [sp, #88]	@ 0x58
 80261f4:	9117      	str	r1, [sp, #92]	@ 0x5c
 80261f6:	4463      	add	r3, ip
 80261f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80261fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80261fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80261fe:	f7dd fabb 	bl	8003778 <__aeabi_d2iz>
 8026202:	0004      	movs	r4, r0
 8026204:	f7dd faf4 	bl	80037f0 <__aeabi_i2d>
 8026208:	000b      	movs	r3, r1
 802620a:	0002      	movs	r2, r0
 802620c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802620e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026210:	f7dc fe86 	bl	8002f20 <__aeabi_dsub>
 8026214:	3430      	adds	r4, #48	@ 0x30
 8026216:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026218:	702c      	strb	r4, [r5, #0]
 802621a:	3501      	adds	r5, #1
 802621c:	0006      	movs	r6, r0
 802621e:	000f      	movs	r7, r1
 8026220:	42ab      	cmp	r3, r5
 8026222:	d12a      	bne.n	802627a <_dtoa_r+0x662>
 8026224:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8026226:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8026228:	9b08      	ldr	r3, [sp, #32]
 802622a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802622c:	469c      	mov	ip, r3
 802622e:	2200      	movs	r2, #0
 8026230:	4b42      	ldr	r3, [pc, #264]	@ (802633c <_dtoa_r+0x724>)
 8026232:	4464      	add	r4, ip
 8026234:	f7db fb8e 	bl	8001954 <__aeabi_dadd>
 8026238:	0002      	movs	r2, r0
 802623a:	000b      	movs	r3, r1
 802623c:	0030      	movs	r0, r6
 802623e:	0039      	movs	r1, r7
 8026240:	f7da f950 	bl	80004e4 <__aeabi_dcmpgt>
 8026244:	2800      	cmp	r0, #0
 8026246:	d000      	beq.n	802624a <_dtoa_r+0x632>
 8026248:	e07c      	b.n	8026344 <_dtoa_r+0x72c>
 802624a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802624c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802624e:	2000      	movs	r0, #0
 8026250:	493a      	ldr	r1, [pc, #232]	@ (802633c <_dtoa_r+0x724>)
 8026252:	f7dc fe65 	bl	8002f20 <__aeabi_dsub>
 8026256:	0002      	movs	r2, r0
 8026258:	000b      	movs	r3, r1
 802625a:	0030      	movs	r0, r6
 802625c:	0039      	movs	r1, r7
 802625e:	f7da f92d 	bl	80004bc <__aeabi_dcmplt>
 8026262:	2800      	cmp	r0, #0
 8026264:	d100      	bne.n	8026268 <_dtoa_r+0x650>
 8026266:	e710      	b.n	802608a <_dtoa_r+0x472>
 8026268:	0023      	movs	r3, r4
 802626a:	3c01      	subs	r4, #1
 802626c:	7822      	ldrb	r2, [r4, #0]
 802626e:	2a30      	cmp	r2, #48	@ 0x30
 8026270:	d0fa      	beq.n	8026268 <_dtoa_r+0x650>
 8026272:	001c      	movs	r4, r3
 8026274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026276:	9304      	str	r3, [sp, #16]
 8026278:	e042      	b.n	8026300 <_dtoa_r+0x6e8>
 802627a:	2200      	movs	r2, #0
 802627c:	4b2b      	ldr	r3, [pc, #172]	@ (802632c <_dtoa_r+0x714>)
 802627e:	f7dc fb69 	bl	8002954 <__aeabi_dmul>
 8026282:	900a      	str	r0, [sp, #40]	@ 0x28
 8026284:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026286:	e7b8      	b.n	80261fa <_dtoa_r+0x5e2>
 8026288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802628a:	9d08      	ldr	r5, [sp, #32]
 802628c:	3b01      	subs	r3, #1
 802628e:	195b      	adds	r3, r3, r5
 8026290:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026292:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026294:	930a      	str	r3, [sp, #40]	@ 0x28
 8026296:	9a06      	ldr	r2, [sp, #24]
 8026298:	9b07      	ldr	r3, [sp, #28]
 802629a:	0030      	movs	r0, r6
 802629c:	0039      	movs	r1, r7
 802629e:	f7db ff1f 	bl	80020e0 <__aeabi_ddiv>
 80262a2:	f7dd fa69 	bl	8003778 <__aeabi_d2iz>
 80262a6:	9009      	str	r0, [sp, #36]	@ 0x24
 80262a8:	f7dd faa2 	bl	80037f0 <__aeabi_i2d>
 80262ac:	9a06      	ldr	r2, [sp, #24]
 80262ae:	9b07      	ldr	r3, [sp, #28]
 80262b0:	f7dc fb50 	bl	8002954 <__aeabi_dmul>
 80262b4:	0002      	movs	r2, r0
 80262b6:	000b      	movs	r3, r1
 80262b8:	0030      	movs	r0, r6
 80262ba:	0039      	movs	r1, r7
 80262bc:	f7dc fe30 	bl	8002f20 <__aeabi_dsub>
 80262c0:	002b      	movs	r3, r5
 80262c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80262c4:	3501      	adds	r5, #1
 80262c6:	3230      	adds	r2, #48	@ 0x30
 80262c8:	701a      	strb	r2, [r3, #0]
 80262ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80262cc:	002c      	movs	r4, r5
 80262ce:	429a      	cmp	r2, r3
 80262d0:	d14b      	bne.n	802636a <_dtoa_r+0x752>
 80262d2:	0002      	movs	r2, r0
 80262d4:	000b      	movs	r3, r1
 80262d6:	f7db fb3d 	bl	8001954 <__aeabi_dadd>
 80262da:	9a06      	ldr	r2, [sp, #24]
 80262dc:	9b07      	ldr	r3, [sp, #28]
 80262de:	0006      	movs	r6, r0
 80262e0:	000f      	movs	r7, r1
 80262e2:	f7da f8ff 	bl	80004e4 <__aeabi_dcmpgt>
 80262e6:	2800      	cmp	r0, #0
 80262e8:	d12a      	bne.n	8026340 <_dtoa_r+0x728>
 80262ea:	9a06      	ldr	r2, [sp, #24]
 80262ec:	9b07      	ldr	r3, [sp, #28]
 80262ee:	0030      	movs	r0, r6
 80262f0:	0039      	movs	r1, r7
 80262f2:	f7da f8dd 	bl	80004b0 <__aeabi_dcmpeq>
 80262f6:	2800      	cmp	r0, #0
 80262f8:	d002      	beq.n	8026300 <_dtoa_r+0x6e8>
 80262fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262fc:	07dd      	lsls	r5, r3, #31
 80262fe:	d41f      	bmi.n	8026340 <_dtoa_r+0x728>
 8026300:	9905      	ldr	r1, [sp, #20]
 8026302:	9803      	ldr	r0, [sp, #12]
 8026304:	f000 ff2e 	bl	8027164 <_Bfree>
 8026308:	2300      	movs	r3, #0
 802630a:	7023      	strb	r3, [r4, #0]
 802630c:	9b04      	ldr	r3, [sp, #16]
 802630e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026310:	3301      	adds	r3, #1
 8026312:	6013      	str	r3, [r2, #0]
 8026314:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026316:	2b00      	cmp	r3, #0
 8026318:	d100      	bne.n	802631c <_dtoa_r+0x704>
 802631a:	e4c7      	b.n	8025cac <_dtoa_r+0x94>
 802631c:	601c      	str	r4, [r3, #0]
 802631e:	e4c5      	b.n	8025cac <_dtoa_r+0x94>
 8026320:	0802e720 	.word	0x0802e720
 8026324:	0802e6f8 	.word	0x0802e6f8
 8026328:	3ff00000 	.word	0x3ff00000
 802632c:	40240000 	.word	0x40240000
 8026330:	401c0000 	.word	0x401c0000
 8026334:	fcc00000 	.word	0xfcc00000
 8026338:	40140000 	.word	0x40140000
 802633c:	3fe00000 	.word	0x3fe00000
 8026340:	9b04      	ldr	r3, [sp, #16]
 8026342:	930c      	str	r3, [sp, #48]	@ 0x30
 8026344:	0023      	movs	r3, r4
 8026346:	001c      	movs	r4, r3
 8026348:	3b01      	subs	r3, #1
 802634a:	781a      	ldrb	r2, [r3, #0]
 802634c:	2a39      	cmp	r2, #57	@ 0x39
 802634e:	d108      	bne.n	8026362 <_dtoa_r+0x74a>
 8026350:	9a08      	ldr	r2, [sp, #32]
 8026352:	429a      	cmp	r2, r3
 8026354:	d1f7      	bne.n	8026346 <_dtoa_r+0x72e>
 8026356:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026358:	9908      	ldr	r1, [sp, #32]
 802635a:	3201      	adds	r2, #1
 802635c:	920c      	str	r2, [sp, #48]	@ 0x30
 802635e:	2230      	movs	r2, #48	@ 0x30
 8026360:	700a      	strb	r2, [r1, #0]
 8026362:	781a      	ldrb	r2, [r3, #0]
 8026364:	3201      	adds	r2, #1
 8026366:	701a      	strb	r2, [r3, #0]
 8026368:	e784      	b.n	8026274 <_dtoa_r+0x65c>
 802636a:	2200      	movs	r2, #0
 802636c:	4bc6      	ldr	r3, [pc, #792]	@ (8026688 <_dtoa_r+0xa70>)
 802636e:	f7dc faf1 	bl	8002954 <__aeabi_dmul>
 8026372:	2200      	movs	r2, #0
 8026374:	2300      	movs	r3, #0
 8026376:	0006      	movs	r6, r0
 8026378:	000f      	movs	r7, r1
 802637a:	f7da f899 	bl	80004b0 <__aeabi_dcmpeq>
 802637e:	2800      	cmp	r0, #0
 8026380:	d089      	beq.n	8026296 <_dtoa_r+0x67e>
 8026382:	e7bd      	b.n	8026300 <_dtoa_r+0x6e8>
 8026384:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8026386:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026388:	9c06      	ldr	r4, [sp, #24]
 802638a:	2f00      	cmp	r7, #0
 802638c:	d014      	beq.n	80263b8 <_dtoa_r+0x7a0>
 802638e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026390:	2a01      	cmp	r2, #1
 8026392:	dd00      	ble.n	8026396 <_dtoa_r+0x77e>
 8026394:	e0e4      	b.n	8026560 <_dtoa_r+0x948>
 8026396:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8026398:	2a00      	cmp	r2, #0
 802639a:	d100      	bne.n	802639e <_dtoa_r+0x786>
 802639c:	e0da      	b.n	8026554 <_dtoa_r+0x93c>
 802639e:	4abb      	ldr	r2, [pc, #748]	@ (802668c <_dtoa_r+0xa74>)
 80263a0:	189b      	adds	r3, r3, r2
 80263a2:	9a06      	ldr	r2, [sp, #24]
 80263a4:	2101      	movs	r1, #1
 80263a6:	18d2      	adds	r2, r2, r3
 80263a8:	9206      	str	r2, [sp, #24]
 80263aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80263ac:	9803      	ldr	r0, [sp, #12]
 80263ae:	18d3      	adds	r3, r2, r3
 80263b0:	930d      	str	r3, [sp, #52]	@ 0x34
 80263b2:	f000 ffdb 	bl	802736c <__i2b>
 80263b6:	0007      	movs	r7, r0
 80263b8:	2c00      	cmp	r4, #0
 80263ba:	d00e      	beq.n	80263da <_dtoa_r+0x7c2>
 80263bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80263be:	2b00      	cmp	r3, #0
 80263c0:	dd0b      	ble.n	80263da <_dtoa_r+0x7c2>
 80263c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80263c4:	0023      	movs	r3, r4
 80263c6:	4294      	cmp	r4, r2
 80263c8:	dd00      	ble.n	80263cc <_dtoa_r+0x7b4>
 80263ca:	0013      	movs	r3, r2
 80263cc:	9a06      	ldr	r2, [sp, #24]
 80263ce:	1ae4      	subs	r4, r4, r3
 80263d0:	1ad2      	subs	r2, r2, r3
 80263d2:	9206      	str	r2, [sp, #24]
 80263d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80263d6:	1ad3      	subs	r3, r2, r3
 80263d8:	930d      	str	r3, [sp, #52]	@ 0x34
 80263da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80263dc:	2b00      	cmp	r3, #0
 80263de:	d021      	beq.n	8026424 <_dtoa_r+0x80c>
 80263e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80263e2:	2b00      	cmp	r3, #0
 80263e4:	d100      	bne.n	80263e8 <_dtoa_r+0x7d0>
 80263e6:	e0d3      	b.n	8026590 <_dtoa_r+0x978>
 80263e8:	9e05      	ldr	r6, [sp, #20]
 80263ea:	2d00      	cmp	r5, #0
 80263ec:	d014      	beq.n	8026418 <_dtoa_r+0x800>
 80263ee:	0039      	movs	r1, r7
 80263f0:	002a      	movs	r2, r5
 80263f2:	9803      	ldr	r0, [sp, #12]
 80263f4:	f001 f87c 	bl	80274f0 <__pow5mult>
 80263f8:	9a05      	ldr	r2, [sp, #20]
 80263fa:	0001      	movs	r1, r0
 80263fc:	0007      	movs	r7, r0
 80263fe:	9803      	ldr	r0, [sp, #12]
 8026400:	f000 ffcc 	bl	802739c <__multiply>
 8026404:	0006      	movs	r6, r0
 8026406:	9905      	ldr	r1, [sp, #20]
 8026408:	9803      	ldr	r0, [sp, #12]
 802640a:	f000 feab 	bl	8027164 <_Bfree>
 802640e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026410:	9605      	str	r6, [sp, #20]
 8026412:	1b5b      	subs	r3, r3, r5
 8026414:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026416:	d005      	beq.n	8026424 <_dtoa_r+0x80c>
 8026418:	0031      	movs	r1, r6
 802641a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802641c:	9803      	ldr	r0, [sp, #12]
 802641e:	f001 f867 	bl	80274f0 <__pow5mult>
 8026422:	9005      	str	r0, [sp, #20]
 8026424:	2101      	movs	r1, #1
 8026426:	9803      	ldr	r0, [sp, #12]
 8026428:	f000 ffa0 	bl	802736c <__i2b>
 802642c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802642e:	0006      	movs	r6, r0
 8026430:	2b00      	cmp	r3, #0
 8026432:	d100      	bne.n	8026436 <_dtoa_r+0x81e>
 8026434:	e1bc      	b.n	80267b0 <_dtoa_r+0xb98>
 8026436:	001a      	movs	r2, r3
 8026438:	0001      	movs	r1, r0
 802643a:	9803      	ldr	r0, [sp, #12]
 802643c:	f001 f858 	bl	80274f0 <__pow5mult>
 8026440:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026442:	0006      	movs	r6, r0
 8026444:	2500      	movs	r5, #0
 8026446:	2b01      	cmp	r3, #1
 8026448:	dc16      	bgt.n	8026478 <_dtoa_r+0x860>
 802644a:	2500      	movs	r5, #0
 802644c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802644e:	42ab      	cmp	r3, r5
 8026450:	d10e      	bne.n	8026470 <_dtoa_r+0x858>
 8026452:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026454:	031b      	lsls	r3, r3, #12
 8026456:	42ab      	cmp	r3, r5
 8026458:	d10a      	bne.n	8026470 <_dtoa_r+0x858>
 802645a:	4b8d      	ldr	r3, [pc, #564]	@ (8026690 <_dtoa_r+0xa78>)
 802645c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802645e:	4213      	tst	r3, r2
 8026460:	d006      	beq.n	8026470 <_dtoa_r+0x858>
 8026462:	9b06      	ldr	r3, [sp, #24]
 8026464:	3501      	adds	r5, #1
 8026466:	3301      	adds	r3, #1
 8026468:	9306      	str	r3, [sp, #24]
 802646a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802646c:	3301      	adds	r3, #1
 802646e:	930d      	str	r3, [sp, #52]	@ 0x34
 8026470:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026472:	2001      	movs	r0, #1
 8026474:	2b00      	cmp	r3, #0
 8026476:	d008      	beq.n	802648a <_dtoa_r+0x872>
 8026478:	6933      	ldr	r3, [r6, #16]
 802647a:	3303      	adds	r3, #3
 802647c:	009b      	lsls	r3, r3, #2
 802647e:	18f3      	adds	r3, r6, r3
 8026480:	6858      	ldr	r0, [r3, #4]
 8026482:	f000 ff23 	bl	80272cc <__hi0bits>
 8026486:	2320      	movs	r3, #32
 8026488:	1a18      	subs	r0, r3, r0
 802648a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802648c:	1818      	adds	r0, r3, r0
 802648e:	0002      	movs	r2, r0
 8026490:	231f      	movs	r3, #31
 8026492:	401a      	ands	r2, r3
 8026494:	4218      	tst	r0, r3
 8026496:	d100      	bne.n	802649a <_dtoa_r+0x882>
 8026498:	e081      	b.n	802659e <_dtoa_r+0x986>
 802649a:	3301      	adds	r3, #1
 802649c:	1a9b      	subs	r3, r3, r2
 802649e:	2b04      	cmp	r3, #4
 80264a0:	dd79      	ble.n	8026596 <_dtoa_r+0x97e>
 80264a2:	231c      	movs	r3, #28
 80264a4:	1a9b      	subs	r3, r3, r2
 80264a6:	9a06      	ldr	r2, [sp, #24]
 80264a8:	18e4      	adds	r4, r4, r3
 80264aa:	18d2      	adds	r2, r2, r3
 80264ac:	9206      	str	r2, [sp, #24]
 80264ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80264b0:	18d3      	adds	r3, r2, r3
 80264b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80264b4:	9b06      	ldr	r3, [sp, #24]
 80264b6:	2b00      	cmp	r3, #0
 80264b8:	dd05      	ble.n	80264c6 <_dtoa_r+0x8ae>
 80264ba:	001a      	movs	r2, r3
 80264bc:	9905      	ldr	r1, [sp, #20]
 80264be:	9803      	ldr	r0, [sp, #12]
 80264c0:	f001 f872 	bl	80275a8 <__lshift>
 80264c4:	9005      	str	r0, [sp, #20]
 80264c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80264c8:	2b00      	cmp	r3, #0
 80264ca:	dd05      	ble.n	80264d8 <_dtoa_r+0x8c0>
 80264cc:	0031      	movs	r1, r6
 80264ce:	001a      	movs	r2, r3
 80264d0:	9803      	ldr	r0, [sp, #12]
 80264d2:	f001 f869 	bl	80275a8 <__lshift>
 80264d6:	0006      	movs	r6, r0
 80264d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80264da:	2b00      	cmp	r3, #0
 80264dc:	d061      	beq.n	80265a2 <_dtoa_r+0x98a>
 80264de:	0031      	movs	r1, r6
 80264e0:	9805      	ldr	r0, [sp, #20]
 80264e2:	f001 f8cd 	bl	8027680 <__mcmp>
 80264e6:	2800      	cmp	r0, #0
 80264e8:	da5b      	bge.n	80265a2 <_dtoa_r+0x98a>
 80264ea:	9b04      	ldr	r3, [sp, #16]
 80264ec:	220a      	movs	r2, #10
 80264ee:	3b01      	subs	r3, #1
 80264f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80264f2:	9905      	ldr	r1, [sp, #20]
 80264f4:	2300      	movs	r3, #0
 80264f6:	9803      	ldr	r0, [sp, #12]
 80264f8:	f000 fe58 	bl	80271ac <__multadd>
 80264fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80264fe:	9005      	str	r0, [sp, #20]
 8026500:	2b00      	cmp	r3, #0
 8026502:	d100      	bne.n	8026506 <_dtoa_r+0x8ee>
 8026504:	e15b      	b.n	80267be <_dtoa_r+0xba6>
 8026506:	2300      	movs	r3, #0
 8026508:	0039      	movs	r1, r7
 802650a:	220a      	movs	r2, #10
 802650c:	9803      	ldr	r0, [sp, #12]
 802650e:	f000 fe4d 	bl	80271ac <__multadd>
 8026512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026514:	0007      	movs	r7, r0
 8026516:	2b00      	cmp	r3, #0
 8026518:	dc4d      	bgt.n	80265b6 <_dtoa_r+0x99e>
 802651a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802651c:	2b02      	cmp	r3, #2
 802651e:	dd46      	ble.n	80265ae <_dtoa_r+0x996>
 8026520:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026522:	2b00      	cmp	r3, #0
 8026524:	d000      	beq.n	8026528 <_dtoa_r+0x910>
 8026526:	e5db      	b.n	80260e0 <_dtoa_r+0x4c8>
 8026528:	0031      	movs	r1, r6
 802652a:	2205      	movs	r2, #5
 802652c:	9803      	ldr	r0, [sp, #12]
 802652e:	f000 fe3d 	bl	80271ac <__multadd>
 8026532:	0006      	movs	r6, r0
 8026534:	0001      	movs	r1, r0
 8026536:	9805      	ldr	r0, [sp, #20]
 8026538:	f001 f8a2 	bl	8027680 <__mcmp>
 802653c:	2800      	cmp	r0, #0
 802653e:	dc00      	bgt.n	8026542 <_dtoa_r+0x92a>
 8026540:	e5ce      	b.n	80260e0 <_dtoa_r+0x4c8>
 8026542:	9b08      	ldr	r3, [sp, #32]
 8026544:	9a08      	ldr	r2, [sp, #32]
 8026546:	1c5c      	adds	r4, r3, #1
 8026548:	2331      	movs	r3, #49	@ 0x31
 802654a:	7013      	strb	r3, [r2, #0]
 802654c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802654e:	3301      	adds	r3, #1
 8026550:	930c      	str	r3, [sp, #48]	@ 0x30
 8026552:	e5c9      	b.n	80260e8 <_dtoa_r+0x4d0>
 8026554:	2336      	movs	r3, #54	@ 0x36
 8026556:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8026558:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802655a:	1a9b      	subs	r3, r3, r2
 802655c:	9c06      	ldr	r4, [sp, #24]
 802655e:	e720      	b.n	80263a2 <_dtoa_r+0x78a>
 8026560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026562:	1e5d      	subs	r5, r3, #1
 8026564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026566:	42ab      	cmp	r3, r5
 8026568:	db08      	blt.n	802657c <_dtoa_r+0x964>
 802656a:	1b5d      	subs	r5, r3, r5
 802656c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802656e:	2b00      	cmp	r3, #0
 8026570:	daf4      	bge.n	802655c <_dtoa_r+0x944>
 8026572:	9b06      	ldr	r3, [sp, #24]
 8026574:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026576:	1a9c      	subs	r4, r3, r2
 8026578:	2300      	movs	r3, #0
 802657a:	e712      	b.n	80263a2 <_dtoa_r+0x78a>
 802657c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802657e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8026580:	1aeb      	subs	r3, r5, r3
 8026582:	18d3      	adds	r3, r2, r3
 8026584:	9314      	str	r3, [sp, #80]	@ 0x50
 8026586:	950f      	str	r5, [sp, #60]	@ 0x3c
 8026588:	9c06      	ldr	r4, [sp, #24]
 802658a:	2500      	movs	r5, #0
 802658c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802658e:	e708      	b.n	80263a2 <_dtoa_r+0x78a>
 8026590:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026592:	9905      	ldr	r1, [sp, #20]
 8026594:	e742      	b.n	802641c <_dtoa_r+0x804>
 8026596:	2b04      	cmp	r3, #4
 8026598:	d08c      	beq.n	80264b4 <_dtoa_r+0x89c>
 802659a:	331c      	adds	r3, #28
 802659c:	e783      	b.n	80264a6 <_dtoa_r+0x88e>
 802659e:	0013      	movs	r3, r2
 80265a0:	e7fb      	b.n	802659a <_dtoa_r+0x982>
 80265a2:	9b04      	ldr	r3, [sp, #16]
 80265a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80265a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80265a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80265aa:	2b00      	cmp	r3, #0
 80265ac:	ddb5      	ble.n	802651a <_dtoa_r+0x902>
 80265ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80265b0:	2b00      	cmp	r3, #0
 80265b2:	d100      	bne.n	80265b6 <_dtoa_r+0x99e>
 80265b4:	e107      	b.n	80267c6 <_dtoa_r+0xbae>
 80265b6:	2c00      	cmp	r4, #0
 80265b8:	dd05      	ble.n	80265c6 <_dtoa_r+0x9ae>
 80265ba:	0039      	movs	r1, r7
 80265bc:	0022      	movs	r2, r4
 80265be:	9803      	ldr	r0, [sp, #12]
 80265c0:	f000 fff2 	bl	80275a8 <__lshift>
 80265c4:	0007      	movs	r7, r0
 80265c6:	9704      	str	r7, [sp, #16]
 80265c8:	2d00      	cmp	r5, #0
 80265ca:	d020      	beq.n	802660e <_dtoa_r+0x9f6>
 80265cc:	6879      	ldr	r1, [r7, #4]
 80265ce:	9803      	ldr	r0, [sp, #12]
 80265d0:	f000 fd84 	bl	80270dc <_Balloc>
 80265d4:	1e04      	subs	r4, r0, #0
 80265d6:	d10c      	bne.n	80265f2 <_dtoa_r+0x9da>
 80265d8:	0022      	movs	r2, r4
 80265da:	4b2e      	ldr	r3, [pc, #184]	@ (8026694 <_dtoa_r+0xa7c>)
 80265dc:	482e      	ldr	r0, [pc, #184]	@ (8026698 <_dtoa_r+0xa80>)
 80265de:	492f      	ldr	r1, [pc, #188]	@ (802669c <_dtoa_r+0xa84>)
 80265e0:	f7ff fb2f 	bl	8025c42 <_dtoa_r+0x2a>
 80265e4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80265e6:	0037      	movs	r7, r6
 80265e8:	e7ab      	b.n	8026542 <_dtoa_r+0x92a>
 80265ea:	9b04      	ldr	r3, [sp, #16]
 80265ec:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80265ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80265f0:	e7f9      	b.n	80265e6 <_dtoa_r+0x9ce>
 80265f2:	0039      	movs	r1, r7
 80265f4:	693a      	ldr	r2, [r7, #16]
 80265f6:	310c      	adds	r1, #12
 80265f8:	3202      	adds	r2, #2
 80265fa:	0092      	lsls	r2, r2, #2
 80265fc:	300c      	adds	r0, #12
 80265fe:	f7ff fa75 	bl	8025aec <memcpy>
 8026602:	2201      	movs	r2, #1
 8026604:	0021      	movs	r1, r4
 8026606:	9803      	ldr	r0, [sp, #12]
 8026608:	f000 ffce 	bl	80275a8 <__lshift>
 802660c:	9004      	str	r0, [sp, #16]
 802660e:	9b08      	ldr	r3, [sp, #32]
 8026610:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026612:	9306      	str	r3, [sp, #24]
 8026614:	3b01      	subs	r3, #1
 8026616:	189b      	adds	r3, r3, r2
 8026618:	2201      	movs	r2, #1
 802661a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802661c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802661e:	4013      	ands	r3, r2
 8026620:	930e      	str	r3, [sp, #56]	@ 0x38
 8026622:	0031      	movs	r1, r6
 8026624:	9805      	ldr	r0, [sp, #20]
 8026626:	f7ff fa71 	bl	8025b0c <quorem>
 802662a:	0039      	movs	r1, r7
 802662c:	0005      	movs	r5, r0
 802662e:	900a      	str	r0, [sp, #40]	@ 0x28
 8026630:	9805      	ldr	r0, [sp, #20]
 8026632:	f001 f825 	bl	8027680 <__mcmp>
 8026636:	9a04      	ldr	r2, [sp, #16]
 8026638:	900d      	str	r0, [sp, #52]	@ 0x34
 802663a:	0031      	movs	r1, r6
 802663c:	9803      	ldr	r0, [sp, #12]
 802663e:	f001 f83b 	bl	80276b8 <__mdiff>
 8026642:	2201      	movs	r2, #1
 8026644:	68c3      	ldr	r3, [r0, #12]
 8026646:	0004      	movs	r4, r0
 8026648:	3530      	adds	r5, #48	@ 0x30
 802664a:	9209      	str	r2, [sp, #36]	@ 0x24
 802664c:	2b00      	cmp	r3, #0
 802664e:	d104      	bne.n	802665a <_dtoa_r+0xa42>
 8026650:	0001      	movs	r1, r0
 8026652:	9805      	ldr	r0, [sp, #20]
 8026654:	f001 f814 	bl	8027680 <__mcmp>
 8026658:	9009      	str	r0, [sp, #36]	@ 0x24
 802665a:	0021      	movs	r1, r4
 802665c:	9803      	ldr	r0, [sp, #12]
 802665e:	f000 fd81 	bl	8027164 <_Bfree>
 8026662:	9b06      	ldr	r3, [sp, #24]
 8026664:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026666:	1c5c      	adds	r4, r3, #1
 8026668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802666a:	4313      	orrs	r3, r2
 802666c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802666e:	4313      	orrs	r3, r2
 8026670:	d116      	bne.n	80266a0 <_dtoa_r+0xa88>
 8026672:	2d39      	cmp	r5, #57	@ 0x39
 8026674:	d02f      	beq.n	80266d6 <_dtoa_r+0xabe>
 8026676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026678:	2b00      	cmp	r3, #0
 802667a:	dd01      	ble.n	8026680 <_dtoa_r+0xa68>
 802667c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802667e:	3531      	adds	r5, #49	@ 0x31
 8026680:	9b06      	ldr	r3, [sp, #24]
 8026682:	701d      	strb	r5, [r3, #0]
 8026684:	e532      	b.n	80260ec <_dtoa_r+0x4d4>
 8026686:	46c0      	nop			@ (mov r8, r8)
 8026688:	40240000 	.word	0x40240000
 802668c:	00000433 	.word	0x00000433
 8026690:	7ff00000 	.word	0x7ff00000
 8026694:	0802e47e 	.word	0x0802e47e
 8026698:	0802e426 	.word	0x0802e426
 802669c:	000002ef 	.word	0x000002ef
 80266a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80266a2:	2b00      	cmp	r3, #0
 80266a4:	db04      	blt.n	80266b0 <_dtoa_r+0xa98>
 80266a6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80266a8:	4313      	orrs	r3, r2
 80266aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80266ac:	4313      	orrs	r3, r2
 80266ae:	d11e      	bne.n	80266ee <_dtoa_r+0xad6>
 80266b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80266b2:	2b00      	cmp	r3, #0
 80266b4:	dde4      	ble.n	8026680 <_dtoa_r+0xa68>
 80266b6:	9905      	ldr	r1, [sp, #20]
 80266b8:	2201      	movs	r2, #1
 80266ba:	9803      	ldr	r0, [sp, #12]
 80266bc:	f000 ff74 	bl	80275a8 <__lshift>
 80266c0:	0031      	movs	r1, r6
 80266c2:	9005      	str	r0, [sp, #20]
 80266c4:	f000 ffdc 	bl	8027680 <__mcmp>
 80266c8:	2800      	cmp	r0, #0
 80266ca:	dc02      	bgt.n	80266d2 <_dtoa_r+0xaba>
 80266cc:	d1d8      	bne.n	8026680 <_dtoa_r+0xa68>
 80266ce:	07eb      	lsls	r3, r5, #31
 80266d0:	d5d6      	bpl.n	8026680 <_dtoa_r+0xa68>
 80266d2:	2d39      	cmp	r5, #57	@ 0x39
 80266d4:	d1d2      	bne.n	802667c <_dtoa_r+0xa64>
 80266d6:	2339      	movs	r3, #57	@ 0x39
 80266d8:	9a06      	ldr	r2, [sp, #24]
 80266da:	7013      	strb	r3, [r2, #0]
 80266dc:	0023      	movs	r3, r4
 80266de:	001c      	movs	r4, r3
 80266e0:	3b01      	subs	r3, #1
 80266e2:	781a      	ldrb	r2, [r3, #0]
 80266e4:	2a39      	cmp	r2, #57	@ 0x39
 80266e6:	d050      	beq.n	802678a <_dtoa_r+0xb72>
 80266e8:	3201      	adds	r2, #1
 80266ea:	701a      	strb	r2, [r3, #0]
 80266ec:	e4fe      	b.n	80260ec <_dtoa_r+0x4d4>
 80266ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80266f0:	2b00      	cmp	r3, #0
 80266f2:	dd03      	ble.n	80266fc <_dtoa_r+0xae4>
 80266f4:	2d39      	cmp	r5, #57	@ 0x39
 80266f6:	d0ee      	beq.n	80266d6 <_dtoa_r+0xabe>
 80266f8:	3501      	adds	r5, #1
 80266fa:	e7c1      	b.n	8026680 <_dtoa_r+0xa68>
 80266fc:	9b06      	ldr	r3, [sp, #24]
 80266fe:	9a06      	ldr	r2, [sp, #24]
 8026700:	701d      	strb	r5, [r3, #0]
 8026702:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026704:	4293      	cmp	r3, r2
 8026706:	d02b      	beq.n	8026760 <_dtoa_r+0xb48>
 8026708:	2300      	movs	r3, #0
 802670a:	220a      	movs	r2, #10
 802670c:	9905      	ldr	r1, [sp, #20]
 802670e:	9803      	ldr	r0, [sp, #12]
 8026710:	f000 fd4c 	bl	80271ac <__multadd>
 8026714:	9b04      	ldr	r3, [sp, #16]
 8026716:	9005      	str	r0, [sp, #20]
 8026718:	429f      	cmp	r7, r3
 802671a:	d109      	bne.n	8026730 <_dtoa_r+0xb18>
 802671c:	0039      	movs	r1, r7
 802671e:	2300      	movs	r3, #0
 8026720:	220a      	movs	r2, #10
 8026722:	9803      	ldr	r0, [sp, #12]
 8026724:	f000 fd42 	bl	80271ac <__multadd>
 8026728:	0007      	movs	r7, r0
 802672a:	9004      	str	r0, [sp, #16]
 802672c:	9406      	str	r4, [sp, #24]
 802672e:	e778      	b.n	8026622 <_dtoa_r+0xa0a>
 8026730:	0039      	movs	r1, r7
 8026732:	2300      	movs	r3, #0
 8026734:	220a      	movs	r2, #10
 8026736:	9803      	ldr	r0, [sp, #12]
 8026738:	f000 fd38 	bl	80271ac <__multadd>
 802673c:	2300      	movs	r3, #0
 802673e:	0007      	movs	r7, r0
 8026740:	220a      	movs	r2, #10
 8026742:	9904      	ldr	r1, [sp, #16]
 8026744:	9803      	ldr	r0, [sp, #12]
 8026746:	f000 fd31 	bl	80271ac <__multadd>
 802674a:	9004      	str	r0, [sp, #16]
 802674c:	e7ee      	b.n	802672c <_dtoa_r+0xb14>
 802674e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026750:	2401      	movs	r4, #1
 8026752:	2b00      	cmp	r3, #0
 8026754:	dd00      	ble.n	8026758 <_dtoa_r+0xb40>
 8026756:	001c      	movs	r4, r3
 8026758:	9704      	str	r7, [sp, #16]
 802675a:	2700      	movs	r7, #0
 802675c:	9b08      	ldr	r3, [sp, #32]
 802675e:	191c      	adds	r4, r3, r4
 8026760:	9905      	ldr	r1, [sp, #20]
 8026762:	2201      	movs	r2, #1
 8026764:	9803      	ldr	r0, [sp, #12]
 8026766:	f000 ff1f 	bl	80275a8 <__lshift>
 802676a:	0031      	movs	r1, r6
 802676c:	9005      	str	r0, [sp, #20]
 802676e:	f000 ff87 	bl	8027680 <__mcmp>
 8026772:	2800      	cmp	r0, #0
 8026774:	dcb2      	bgt.n	80266dc <_dtoa_r+0xac4>
 8026776:	d101      	bne.n	802677c <_dtoa_r+0xb64>
 8026778:	07ed      	lsls	r5, r5, #31
 802677a:	d4af      	bmi.n	80266dc <_dtoa_r+0xac4>
 802677c:	0023      	movs	r3, r4
 802677e:	001c      	movs	r4, r3
 8026780:	3b01      	subs	r3, #1
 8026782:	781a      	ldrb	r2, [r3, #0]
 8026784:	2a30      	cmp	r2, #48	@ 0x30
 8026786:	d0fa      	beq.n	802677e <_dtoa_r+0xb66>
 8026788:	e4b0      	b.n	80260ec <_dtoa_r+0x4d4>
 802678a:	9a08      	ldr	r2, [sp, #32]
 802678c:	429a      	cmp	r2, r3
 802678e:	d1a6      	bne.n	80266de <_dtoa_r+0xac6>
 8026790:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026792:	3301      	adds	r3, #1
 8026794:	930c      	str	r3, [sp, #48]	@ 0x30
 8026796:	2331      	movs	r3, #49	@ 0x31
 8026798:	7013      	strb	r3, [r2, #0]
 802679a:	e4a7      	b.n	80260ec <_dtoa_r+0x4d4>
 802679c:	4b14      	ldr	r3, [pc, #80]	@ (80267f0 <_dtoa_r+0xbd8>)
 802679e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80267a0:	9308      	str	r3, [sp, #32]
 80267a2:	4b14      	ldr	r3, [pc, #80]	@ (80267f4 <_dtoa_r+0xbdc>)
 80267a4:	2a00      	cmp	r2, #0
 80267a6:	d001      	beq.n	80267ac <_dtoa_r+0xb94>
 80267a8:	f7ff fa7e 	bl	8025ca8 <_dtoa_r+0x90>
 80267ac:	f7ff fa7e 	bl	8025cac <_dtoa_r+0x94>
 80267b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80267b2:	2b01      	cmp	r3, #1
 80267b4:	dc00      	bgt.n	80267b8 <_dtoa_r+0xba0>
 80267b6:	e648      	b.n	802644a <_dtoa_r+0x832>
 80267b8:	2001      	movs	r0, #1
 80267ba:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80267bc:	e665      	b.n	802648a <_dtoa_r+0x872>
 80267be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80267c0:	2b00      	cmp	r3, #0
 80267c2:	dc00      	bgt.n	80267c6 <_dtoa_r+0xbae>
 80267c4:	e6a9      	b.n	802651a <_dtoa_r+0x902>
 80267c6:	2400      	movs	r4, #0
 80267c8:	0031      	movs	r1, r6
 80267ca:	9805      	ldr	r0, [sp, #20]
 80267cc:	f7ff f99e 	bl	8025b0c <quorem>
 80267d0:	9b08      	ldr	r3, [sp, #32]
 80267d2:	3030      	adds	r0, #48	@ 0x30
 80267d4:	5518      	strb	r0, [r3, r4]
 80267d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80267d8:	3401      	adds	r4, #1
 80267da:	0005      	movs	r5, r0
 80267dc:	42a3      	cmp	r3, r4
 80267de:	ddb6      	ble.n	802674e <_dtoa_r+0xb36>
 80267e0:	2300      	movs	r3, #0
 80267e2:	220a      	movs	r2, #10
 80267e4:	9905      	ldr	r1, [sp, #20]
 80267e6:	9803      	ldr	r0, [sp, #12]
 80267e8:	f000 fce0 	bl	80271ac <__multadd>
 80267ec:	9005      	str	r0, [sp, #20]
 80267ee:	e7eb      	b.n	80267c8 <_dtoa_r+0xbb0>
 80267f0:	0802e402 	.word	0x0802e402
 80267f4:	0802e40a 	.word	0x0802e40a

080267f8 <_free_r>:
 80267f8:	b570      	push	{r4, r5, r6, lr}
 80267fa:	0005      	movs	r5, r0
 80267fc:	1e0c      	subs	r4, r1, #0
 80267fe:	d010      	beq.n	8026822 <_free_r+0x2a>
 8026800:	3c04      	subs	r4, #4
 8026802:	6823      	ldr	r3, [r4, #0]
 8026804:	2b00      	cmp	r3, #0
 8026806:	da00      	bge.n	802680a <_free_r+0x12>
 8026808:	18e4      	adds	r4, r4, r3
 802680a:	0028      	movs	r0, r5
 802680c:	f000 fc56 	bl	80270bc <__malloc_lock>
 8026810:	4a1d      	ldr	r2, [pc, #116]	@ (8026888 <_free_r+0x90>)
 8026812:	6813      	ldr	r3, [r2, #0]
 8026814:	2b00      	cmp	r3, #0
 8026816:	d105      	bne.n	8026824 <_free_r+0x2c>
 8026818:	6063      	str	r3, [r4, #4]
 802681a:	6014      	str	r4, [r2, #0]
 802681c:	0028      	movs	r0, r5
 802681e:	f000 fc55 	bl	80270cc <__malloc_unlock>
 8026822:	bd70      	pop	{r4, r5, r6, pc}
 8026824:	42a3      	cmp	r3, r4
 8026826:	d908      	bls.n	802683a <_free_r+0x42>
 8026828:	6820      	ldr	r0, [r4, #0]
 802682a:	1821      	adds	r1, r4, r0
 802682c:	428b      	cmp	r3, r1
 802682e:	d1f3      	bne.n	8026818 <_free_r+0x20>
 8026830:	6819      	ldr	r1, [r3, #0]
 8026832:	685b      	ldr	r3, [r3, #4]
 8026834:	1809      	adds	r1, r1, r0
 8026836:	6021      	str	r1, [r4, #0]
 8026838:	e7ee      	b.n	8026818 <_free_r+0x20>
 802683a:	001a      	movs	r2, r3
 802683c:	685b      	ldr	r3, [r3, #4]
 802683e:	2b00      	cmp	r3, #0
 8026840:	d001      	beq.n	8026846 <_free_r+0x4e>
 8026842:	42a3      	cmp	r3, r4
 8026844:	d9f9      	bls.n	802683a <_free_r+0x42>
 8026846:	6811      	ldr	r1, [r2, #0]
 8026848:	1850      	adds	r0, r2, r1
 802684a:	42a0      	cmp	r0, r4
 802684c:	d10b      	bne.n	8026866 <_free_r+0x6e>
 802684e:	6820      	ldr	r0, [r4, #0]
 8026850:	1809      	adds	r1, r1, r0
 8026852:	1850      	adds	r0, r2, r1
 8026854:	6011      	str	r1, [r2, #0]
 8026856:	4283      	cmp	r3, r0
 8026858:	d1e0      	bne.n	802681c <_free_r+0x24>
 802685a:	6818      	ldr	r0, [r3, #0]
 802685c:	685b      	ldr	r3, [r3, #4]
 802685e:	1841      	adds	r1, r0, r1
 8026860:	6011      	str	r1, [r2, #0]
 8026862:	6053      	str	r3, [r2, #4]
 8026864:	e7da      	b.n	802681c <_free_r+0x24>
 8026866:	42a0      	cmp	r0, r4
 8026868:	d902      	bls.n	8026870 <_free_r+0x78>
 802686a:	230c      	movs	r3, #12
 802686c:	602b      	str	r3, [r5, #0]
 802686e:	e7d5      	b.n	802681c <_free_r+0x24>
 8026870:	6820      	ldr	r0, [r4, #0]
 8026872:	1821      	adds	r1, r4, r0
 8026874:	428b      	cmp	r3, r1
 8026876:	d103      	bne.n	8026880 <_free_r+0x88>
 8026878:	6819      	ldr	r1, [r3, #0]
 802687a:	685b      	ldr	r3, [r3, #4]
 802687c:	1809      	adds	r1, r1, r0
 802687e:	6021      	str	r1, [r4, #0]
 8026880:	6063      	str	r3, [r4, #4]
 8026882:	6054      	str	r4, [r2, #4]
 8026884:	e7ca      	b.n	802681c <_free_r+0x24>
 8026886:	46c0      	nop			@ (mov r8, r8)
 8026888:	20003628 	.word	0x20003628

0802688c <rshift>:
 802688c:	0002      	movs	r2, r0
 802688e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026890:	6904      	ldr	r4, [r0, #16]
 8026892:	b085      	sub	sp, #20
 8026894:	3214      	adds	r2, #20
 8026896:	114b      	asrs	r3, r1, #5
 8026898:	0016      	movs	r6, r2
 802689a:	9302      	str	r3, [sp, #8]
 802689c:	429c      	cmp	r4, r3
 802689e:	dd31      	ble.n	8026904 <rshift+0x78>
 80268a0:	261f      	movs	r6, #31
 80268a2:	000f      	movs	r7, r1
 80268a4:	009b      	lsls	r3, r3, #2
 80268a6:	00a5      	lsls	r5, r4, #2
 80268a8:	18d3      	adds	r3, r2, r3
 80268aa:	4037      	ands	r7, r6
 80268ac:	1955      	adds	r5, r2, r5
 80268ae:	9300      	str	r3, [sp, #0]
 80268b0:	9701      	str	r7, [sp, #4]
 80268b2:	4231      	tst	r1, r6
 80268b4:	d10d      	bne.n	80268d2 <rshift+0x46>
 80268b6:	0016      	movs	r6, r2
 80268b8:	0019      	movs	r1, r3
 80268ba:	428d      	cmp	r5, r1
 80268bc:	d836      	bhi.n	802692c <rshift+0xa0>
 80268be:	9b00      	ldr	r3, [sp, #0]
 80268c0:	2600      	movs	r6, #0
 80268c2:	3b03      	subs	r3, #3
 80268c4:	429d      	cmp	r5, r3
 80268c6:	d302      	bcc.n	80268ce <rshift+0x42>
 80268c8:	9b02      	ldr	r3, [sp, #8]
 80268ca:	1ae4      	subs	r4, r4, r3
 80268cc:	00a6      	lsls	r6, r4, #2
 80268ce:	1996      	adds	r6, r2, r6
 80268d0:	e018      	b.n	8026904 <rshift+0x78>
 80268d2:	2120      	movs	r1, #32
 80268d4:	9e01      	ldr	r6, [sp, #4]
 80268d6:	9f01      	ldr	r7, [sp, #4]
 80268d8:	1b89      	subs	r1, r1, r6
 80268da:	9e00      	ldr	r6, [sp, #0]
 80268dc:	9103      	str	r1, [sp, #12]
 80268de:	ce02      	ldmia	r6!, {r1}
 80268e0:	4694      	mov	ip, r2
 80268e2:	40f9      	lsrs	r1, r7
 80268e4:	42b5      	cmp	r5, r6
 80268e6:	d816      	bhi.n	8026916 <rshift+0x8a>
 80268e8:	9b00      	ldr	r3, [sp, #0]
 80268ea:	2600      	movs	r6, #0
 80268ec:	3301      	adds	r3, #1
 80268ee:	429d      	cmp	r5, r3
 80268f0:	d303      	bcc.n	80268fa <rshift+0x6e>
 80268f2:	9b02      	ldr	r3, [sp, #8]
 80268f4:	1ae4      	subs	r4, r4, r3
 80268f6:	00a6      	lsls	r6, r4, #2
 80268f8:	3e04      	subs	r6, #4
 80268fa:	1996      	adds	r6, r2, r6
 80268fc:	6031      	str	r1, [r6, #0]
 80268fe:	2900      	cmp	r1, #0
 8026900:	d000      	beq.n	8026904 <rshift+0x78>
 8026902:	3604      	adds	r6, #4
 8026904:	1ab1      	subs	r1, r6, r2
 8026906:	1089      	asrs	r1, r1, #2
 8026908:	6101      	str	r1, [r0, #16]
 802690a:	4296      	cmp	r6, r2
 802690c:	d101      	bne.n	8026912 <rshift+0x86>
 802690e:	2300      	movs	r3, #0
 8026910:	6143      	str	r3, [r0, #20]
 8026912:	b005      	add	sp, #20
 8026914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026916:	6837      	ldr	r7, [r6, #0]
 8026918:	9b03      	ldr	r3, [sp, #12]
 802691a:	409f      	lsls	r7, r3
 802691c:	430f      	orrs	r7, r1
 802691e:	4661      	mov	r1, ip
 8026920:	c180      	stmia	r1!, {r7}
 8026922:	468c      	mov	ip, r1
 8026924:	9b01      	ldr	r3, [sp, #4]
 8026926:	ce02      	ldmia	r6!, {r1}
 8026928:	40d9      	lsrs	r1, r3
 802692a:	e7db      	b.n	80268e4 <rshift+0x58>
 802692c:	c980      	ldmia	r1!, {r7}
 802692e:	c680      	stmia	r6!, {r7}
 8026930:	e7c3      	b.n	80268ba <rshift+0x2e>

08026932 <__hexdig_fun>:
 8026932:	0002      	movs	r2, r0
 8026934:	3a30      	subs	r2, #48	@ 0x30
 8026936:	0003      	movs	r3, r0
 8026938:	2a09      	cmp	r2, #9
 802693a:	d802      	bhi.n	8026942 <__hexdig_fun+0x10>
 802693c:	3b20      	subs	r3, #32
 802693e:	b2d8      	uxtb	r0, r3
 8026940:	4770      	bx	lr
 8026942:	0002      	movs	r2, r0
 8026944:	3a61      	subs	r2, #97	@ 0x61
 8026946:	2a05      	cmp	r2, #5
 8026948:	d801      	bhi.n	802694e <__hexdig_fun+0x1c>
 802694a:	3b47      	subs	r3, #71	@ 0x47
 802694c:	e7f7      	b.n	802693e <__hexdig_fun+0xc>
 802694e:	001a      	movs	r2, r3
 8026950:	3a41      	subs	r2, #65	@ 0x41
 8026952:	2000      	movs	r0, #0
 8026954:	2a05      	cmp	r2, #5
 8026956:	d8f3      	bhi.n	8026940 <__hexdig_fun+0xe>
 8026958:	3b27      	subs	r3, #39	@ 0x27
 802695a:	e7f0      	b.n	802693e <__hexdig_fun+0xc>

0802695c <__gethex>:
 802695c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802695e:	b089      	sub	sp, #36	@ 0x24
 8026960:	9307      	str	r3, [sp, #28]
 8026962:	680b      	ldr	r3, [r1, #0]
 8026964:	9201      	str	r2, [sp, #4]
 8026966:	9003      	str	r0, [sp, #12]
 8026968:	9106      	str	r1, [sp, #24]
 802696a:	1c9a      	adds	r2, r3, #2
 802696c:	0011      	movs	r1, r2
 802696e:	3201      	adds	r2, #1
 8026970:	1e50      	subs	r0, r2, #1
 8026972:	7800      	ldrb	r0, [r0, #0]
 8026974:	2830      	cmp	r0, #48	@ 0x30
 8026976:	d0f9      	beq.n	802696c <__gethex+0x10>
 8026978:	1acb      	subs	r3, r1, r3
 802697a:	3b02      	subs	r3, #2
 802697c:	9305      	str	r3, [sp, #20]
 802697e:	9100      	str	r1, [sp, #0]
 8026980:	f7ff ffd7 	bl	8026932 <__hexdig_fun>
 8026984:	2300      	movs	r3, #0
 8026986:	001d      	movs	r5, r3
 8026988:	9302      	str	r3, [sp, #8]
 802698a:	4298      	cmp	r0, r3
 802698c:	d11e      	bne.n	80269cc <__gethex+0x70>
 802698e:	2201      	movs	r2, #1
 8026990:	49a6      	ldr	r1, [pc, #664]	@ (8026c2c <__gethex+0x2d0>)
 8026992:	9800      	ldr	r0, [sp, #0]
 8026994:	f7fe ffe4 	bl	8025960 <strncmp>
 8026998:	0007      	movs	r7, r0
 802699a:	42a8      	cmp	r0, r5
 802699c:	d000      	beq.n	80269a0 <__gethex+0x44>
 802699e:	e06a      	b.n	8026a76 <__gethex+0x11a>
 80269a0:	9b00      	ldr	r3, [sp, #0]
 80269a2:	7858      	ldrb	r0, [r3, #1]
 80269a4:	1c5c      	adds	r4, r3, #1
 80269a6:	f7ff ffc4 	bl	8026932 <__hexdig_fun>
 80269aa:	2301      	movs	r3, #1
 80269ac:	9302      	str	r3, [sp, #8]
 80269ae:	42a8      	cmp	r0, r5
 80269b0:	d02f      	beq.n	8026a12 <__gethex+0xb6>
 80269b2:	9400      	str	r4, [sp, #0]
 80269b4:	9b00      	ldr	r3, [sp, #0]
 80269b6:	7818      	ldrb	r0, [r3, #0]
 80269b8:	2830      	cmp	r0, #48	@ 0x30
 80269ba:	d009      	beq.n	80269d0 <__gethex+0x74>
 80269bc:	f7ff ffb9 	bl	8026932 <__hexdig_fun>
 80269c0:	4242      	negs	r2, r0
 80269c2:	4142      	adcs	r2, r0
 80269c4:	2301      	movs	r3, #1
 80269c6:	0025      	movs	r5, r4
 80269c8:	9202      	str	r2, [sp, #8]
 80269ca:	9305      	str	r3, [sp, #20]
 80269cc:	9c00      	ldr	r4, [sp, #0]
 80269ce:	e004      	b.n	80269da <__gethex+0x7e>
 80269d0:	9b00      	ldr	r3, [sp, #0]
 80269d2:	3301      	adds	r3, #1
 80269d4:	9300      	str	r3, [sp, #0]
 80269d6:	e7ed      	b.n	80269b4 <__gethex+0x58>
 80269d8:	3401      	adds	r4, #1
 80269da:	7820      	ldrb	r0, [r4, #0]
 80269dc:	f7ff ffa9 	bl	8026932 <__hexdig_fun>
 80269e0:	1e07      	subs	r7, r0, #0
 80269e2:	d1f9      	bne.n	80269d8 <__gethex+0x7c>
 80269e4:	2201      	movs	r2, #1
 80269e6:	0020      	movs	r0, r4
 80269e8:	4990      	ldr	r1, [pc, #576]	@ (8026c2c <__gethex+0x2d0>)
 80269ea:	f7fe ffb9 	bl	8025960 <strncmp>
 80269ee:	2800      	cmp	r0, #0
 80269f0:	d10d      	bne.n	8026a0e <__gethex+0xb2>
 80269f2:	2d00      	cmp	r5, #0
 80269f4:	d106      	bne.n	8026a04 <__gethex+0xa8>
 80269f6:	3401      	adds	r4, #1
 80269f8:	0025      	movs	r5, r4
 80269fa:	7820      	ldrb	r0, [r4, #0]
 80269fc:	f7ff ff99 	bl	8026932 <__hexdig_fun>
 8026a00:	2800      	cmp	r0, #0
 8026a02:	d102      	bne.n	8026a0a <__gethex+0xae>
 8026a04:	1b2d      	subs	r5, r5, r4
 8026a06:	00af      	lsls	r7, r5, #2
 8026a08:	e003      	b.n	8026a12 <__gethex+0xb6>
 8026a0a:	3401      	adds	r4, #1
 8026a0c:	e7f5      	b.n	80269fa <__gethex+0x9e>
 8026a0e:	2d00      	cmp	r5, #0
 8026a10:	d1f8      	bne.n	8026a04 <__gethex+0xa8>
 8026a12:	2220      	movs	r2, #32
 8026a14:	7823      	ldrb	r3, [r4, #0]
 8026a16:	0026      	movs	r6, r4
 8026a18:	4393      	bics	r3, r2
 8026a1a:	2b50      	cmp	r3, #80	@ 0x50
 8026a1c:	d11d      	bne.n	8026a5a <__gethex+0xfe>
 8026a1e:	7863      	ldrb	r3, [r4, #1]
 8026a20:	2b2b      	cmp	r3, #43	@ 0x2b
 8026a22:	d02d      	beq.n	8026a80 <__gethex+0x124>
 8026a24:	2b2d      	cmp	r3, #45	@ 0x2d
 8026a26:	d02f      	beq.n	8026a88 <__gethex+0x12c>
 8026a28:	2300      	movs	r3, #0
 8026a2a:	1c66      	adds	r6, r4, #1
 8026a2c:	9304      	str	r3, [sp, #16]
 8026a2e:	7830      	ldrb	r0, [r6, #0]
 8026a30:	f7ff ff7f 	bl	8026932 <__hexdig_fun>
 8026a34:	1e43      	subs	r3, r0, #1
 8026a36:	b2db      	uxtb	r3, r3
 8026a38:	0005      	movs	r5, r0
 8026a3a:	2b18      	cmp	r3, #24
 8026a3c:	d82a      	bhi.n	8026a94 <__gethex+0x138>
 8026a3e:	7870      	ldrb	r0, [r6, #1]
 8026a40:	f7ff ff77 	bl	8026932 <__hexdig_fun>
 8026a44:	1e43      	subs	r3, r0, #1
 8026a46:	b2db      	uxtb	r3, r3
 8026a48:	3601      	adds	r6, #1
 8026a4a:	3d10      	subs	r5, #16
 8026a4c:	2b18      	cmp	r3, #24
 8026a4e:	d91d      	bls.n	8026a8c <__gethex+0x130>
 8026a50:	9b04      	ldr	r3, [sp, #16]
 8026a52:	2b00      	cmp	r3, #0
 8026a54:	d000      	beq.n	8026a58 <__gethex+0xfc>
 8026a56:	426d      	negs	r5, r5
 8026a58:	197f      	adds	r7, r7, r5
 8026a5a:	9b06      	ldr	r3, [sp, #24]
 8026a5c:	601e      	str	r6, [r3, #0]
 8026a5e:	9b02      	ldr	r3, [sp, #8]
 8026a60:	2b00      	cmp	r3, #0
 8026a62:	d019      	beq.n	8026a98 <__gethex+0x13c>
 8026a64:	9b05      	ldr	r3, [sp, #20]
 8026a66:	2606      	movs	r6, #6
 8026a68:	425a      	negs	r2, r3
 8026a6a:	4153      	adcs	r3, r2
 8026a6c:	425b      	negs	r3, r3
 8026a6e:	401e      	ands	r6, r3
 8026a70:	0030      	movs	r0, r6
 8026a72:	b009      	add	sp, #36	@ 0x24
 8026a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026a76:	2301      	movs	r3, #1
 8026a78:	2700      	movs	r7, #0
 8026a7a:	9c00      	ldr	r4, [sp, #0]
 8026a7c:	9302      	str	r3, [sp, #8]
 8026a7e:	e7c8      	b.n	8026a12 <__gethex+0xb6>
 8026a80:	2300      	movs	r3, #0
 8026a82:	9304      	str	r3, [sp, #16]
 8026a84:	1ca6      	adds	r6, r4, #2
 8026a86:	e7d2      	b.n	8026a2e <__gethex+0xd2>
 8026a88:	2301      	movs	r3, #1
 8026a8a:	e7fa      	b.n	8026a82 <__gethex+0x126>
 8026a8c:	230a      	movs	r3, #10
 8026a8e:	435d      	muls	r5, r3
 8026a90:	182d      	adds	r5, r5, r0
 8026a92:	e7d4      	b.n	8026a3e <__gethex+0xe2>
 8026a94:	0026      	movs	r6, r4
 8026a96:	e7e0      	b.n	8026a5a <__gethex+0xfe>
 8026a98:	9b00      	ldr	r3, [sp, #0]
 8026a9a:	9902      	ldr	r1, [sp, #8]
 8026a9c:	1ae3      	subs	r3, r4, r3
 8026a9e:	3b01      	subs	r3, #1
 8026aa0:	2b07      	cmp	r3, #7
 8026aa2:	dc0a      	bgt.n	8026aba <__gethex+0x15e>
 8026aa4:	9803      	ldr	r0, [sp, #12]
 8026aa6:	f000 fb19 	bl	80270dc <_Balloc>
 8026aaa:	1e05      	subs	r5, r0, #0
 8026aac:	d108      	bne.n	8026ac0 <__gethex+0x164>
 8026aae:	002a      	movs	r2, r5
 8026ab0:	21e4      	movs	r1, #228	@ 0xe4
 8026ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8026c30 <__gethex+0x2d4>)
 8026ab4:	485f      	ldr	r0, [pc, #380]	@ (8026c34 <__gethex+0x2d8>)
 8026ab6:	f001 fbe9 	bl	802828c <__assert_func>
 8026aba:	3101      	adds	r1, #1
 8026abc:	105b      	asrs	r3, r3, #1
 8026abe:	e7ef      	b.n	8026aa0 <__gethex+0x144>
 8026ac0:	0003      	movs	r3, r0
 8026ac2:	3314      	adds	r3, #20
 8026ac4:	9302      	str	r3, [sp, #8]
 8026ac6:	9305      	str	r3, [sp, #20]
 8026ac8:	2300      	movs	r3, #0
 8026aca:	001e      	movs	r6, r3
 8026acc:	9304      	str	r3, [sp, #16]
 8026ace:	9b00      	ldr	r3, [sp, #0]
 8026ad0:	42a3      	cmp	r3, r4
 8026ad2:	d338      	bcc.n	8026b46 <__gethex+0x1ea>
 8026ad4:	9c05      	ldr	r4, [sp, #20]
 8026ad6:	9b02      	ldr	r3, [sp, #8]
 8026ad8:	c440      	stmia	r4!, {r6}
 8026ada:	1ae4      	subs	r4, r4, r3
 8026adc:	10a4      	asrs	r4, r4, #2
 8026ade:	0030      	movs	r0, r6
 8026ae0:	612c      	str	r4, [r5, #16]
 8026ae2:	f000 fbf3 	bl	80272cc <__hi0bits>
 8026ae6:	9b01      	ldr	r3, [sp, #4]
 8026ae8:	0164      	lsls	r4, r4, #5
 8026aea:	681b      	ldr	r3, [r3, #0]
 8026aec:	1a26      	subs	r6, r4, r0
 8026aee:	9300      	str	r3, [sp, #0]
 8026af0:	429e      	cmp	r6, r3
 8026af2:	dd52      	ble.n	8026b9a <__gethex+0x23e>
 8026af4:	1af6      	subs	r6, r6, r3
 8026af6:	0031      	movs	r1, r6
 8026af8:	0028      	movs	r0, r5
 8026afa:	f000 ff8e 	bl	8027a1a <__any_on>
 8026afe:	1e04      	subs	r4, r0, #0
 8026b00:	d00f      	beq.n	8026b22 <__gethex+0x1c6>
 8026b02:	2401      	movs	r4, #1
 8026b04:	211f      	movs	r1, #31
 8026b06:	0020      	movs	r0, r4
 8026b08:	1e73      	subs	r3, r6, #1
 8026b0a:	4019      	ands	r1, r3
 8026b0c:	4088      	lsls	r0, r1
 8026b0e:	0001      	movs	r1, r0
 8026b10:	115a      	asrs	r2, r3, #5
 8026b12:	9802      	ldr	r0, [sp, #8]
 8026b14:	0092      	lsls	r2, r2, #2
 8026b16:	5812      	ldr	r2, [r2, r0]
 8026b18:	420a      	tst	r2, r1
 8026b1a:	d002      	beq.n	8026b22 <__gethex+0x1c6>
 8026b1c:	42a3      	cmp	r3, r4
 8026b1e:	dc34      	bgt.n	8026b8a <__gethex+0x22e>
 8026b20:	2402      	movs	r4, #2
 8026b22:	0031      	movs	r1, r6
 8026b24:	0028      	movs	r0, r5
 8026b26:	f7ff feb1 	bl	802688c <rshift>
 8026b2a:	19bf      	adds	r7, r7, r6
 8026b2c:	9b01      	ldr	r3, [sp, #4]
 8026b2e:	689b      	ldr	r3, [r3, #8]
 8026b30:	42bb      	cmp	r3, r7
 8026b32:	da42      	bge.n	8026bba <__gethex+0x25e>
 8026b34:	0029      	movs	r1, r5
 8026b36:	9803      	ldr	r0, [sp, #12]
 8026b38:	f000 fb14 	bl	8027164 <_Bfree>
 8026b3c:	2300      	movs	r3, #0
 8026b3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026b40:	26a3      	movs	r6, #163	@ 0xa3
 8026b42:	6013      	str	r3, [r2, #0]
 8026b44:	e794      	b.n	8026a70 <__gethex+0x114>
 8026b46:	3c01      	subs	r4, #1
 8026b48:	7823      	ldrb	r3, [r4, #0]
 8026b4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8026b4c:	d012      	beq.n	8026b74 <__gethex+0x218>
 8026b4e:	9b04      	ldr	r3, [sp, #16]
 8026b50:	2b20      	cmp	r3, #32
 8026b52:	d104      	bne.n	8026b5e <__gethex+0x202>
 8026b54:	9b05      	ldr	r3, [sp, #20]
 8026b56:	c340      	stmia	r3!, {r6}
 8026b58:	2600      	movs	r6, #0
 8026b5a:	9305      	str	r3, [sp, #20]
 8026b5c:	9604      	str	r6, [sp, #16]
 8026b5e:	7820      	ldrb	r0, [r4, #0]
 8026b60:	f7ff fee7 	bl	8026932 <__hexdig_fun>
 8026b64:	230f      	movs	r3, #15
 8026b66:	4018      	ands	r0, r3
 8026b68:	9b04      	ldr	r3, [sp, #16]
 8026b6a:	4098      	lsls	r0, r3
 8026b6c:	3304      	adds	r3, #4
 8026b6e:	4306      	orrs	r6, r0
 8026b70:	9304      	str	r3, [sp, #16]
 8026b72:	e7ac      	b.n	8026ace <__gethex+0x172>
 8026b74:	9b00      	ldr	r3, [sp, #0]
 8026b76:	42a3      	cmp	r3, r4
 8026b78:	d8e9      	bhi.n	8026b4e <__gethex+0x1f2>
 8026b7a:	2201      	movs	r2, #1
 8026b7c:	0020      	movs	r0, r4
 8026b7e:	492b      	ldr	r1, [pc, #172]	@ (8026c2c <__gethex+0x2d0>)
 8026b80:	f7fe feee 	bl	8025960 <strncmp>
 8026b84:	2800      	cmp	r0, #0
 8026b86:	d1e2      	bne.n	8026b4e <__gethex+0x1f2>
 8026b88:	e7a1      	b.n	8026ace <__gethex+0x172>
 8026b8a:	0028      	movs	r0, r5
 8026b8c:	1eb1      	subs	r1, r6, #2
 8026b8e:	f000 ff44 	bl	8027a1a <__any_on>
 8026b92:	2800      	cmp	r0, #0
 8026b94:	d0c4      	beq.n	8026b20 <__gethex+0x1c4>
 8026b96:	2403      	movs	r4, #3
 8026b98:	e7c3      	b.n	8026b22 <__gethex+0x1c6>
 8026b9a:	9b00      	ldr	r3, [sp, #0]
 8026b9c:	2400      	movs	r4, #0
 8026b9e:	429e      	cmp	r6, r3
 8026ba0:	dac4      	bge.n	8026b2c <__gethex+0x1d0>
 8026ba2:	1b9e      	subs	r6, r3, r6
 8026ba4:	0029      	movs	r1, r5
 8026ba6:	0032      	movs	r2, r6
 8026ba8:	9803      	ldr	r0, [sp, #12]
 8026baa:	f000 fcfd 	bl	80275a8 <__lshift>
 8026bae:	0003      	movs	r3, r0
 8026bb0:	3314      	adds	r3, #20
 8026bb2:	0005      	movs	r5, r0
 8026bb4:	1bbf      	subs	r7, r7, r6
 8026bb6:	9302      	str	r3, [sp, #8]
 8026bb8:	e7b8      	b.n	8026b2c <__gethex+0x1d0>
 8026bba:	9b01      	ldr	r3, [sp, #4]
 8026bbc:	685e      	ldr	r6, [r3, #4]
 8026bbe:	42be      	cmp	r6, r7
 8026bc0:	dd6f      	ble.n	8026ca2 <__gethex+0x346>
 8026bc2:	9b00      	ldr	r3, [sp, #0]
 8026bc4:	1bf6      	subs	r6, r6, r7
 8026bc6:	42b3      	cmp	r3, r6
 8026bc8:	dc36      	bgt.n	8026c38 <__gethex+0x2dc>
 8026bca:	9b01      	ldr	r3, [sp, #4]
 8026bcc:	68db      	ldr	r3, [r3, #12]
 8026bce:	2b02      	cmp	r3, #2
 8026bd0:	d024      	beq.n	8026c1c <__gethex+0x2c0>
 8026bd2:	2b03      	cmp	r3, #3
 8026bd4:	d026      	beq.n	8026c24 <__gethex+0x2c8>
 8026bd6:	2b01      	cmp	r3, #1
 8026bd8:	d117      	bne.n	8026c0a <__gethex+0x2ae>
 8026bda:	9b00      	ldr	r3, [sp, #0]
 8026bdc:	42b3      	cmp	r3, r6
 8026bde:	d114      	bne.n	8026c0a <__gethex+0x2ae>
 8026be0:	2b01      	cmp	r3, #1
 8026be2:	d10b      	bne.n	8026bfc <__gethex+0x2a0>
 8026be4:	9b01      	ldr	r3, [sp, #4]
 8026be6:	9a07      	ldr	r2, [sp, #28]
 8026be8:	685b      	ldr	r3, [r3, #4]
 8026bea:	2662      	movs	r6, #98	@ 0x62
 8026bec:	6013      	str	r3, [r2, #0]
 8026bee:	2301      	movs	r3, #1
 8026bf0:	9a02      	ldr	r2, [sp, #8]
 8026bf2:	612b      	str	r3, [r5, #16]
 8026bf4:	6013      	str	r3, [r2, #0]
 8026bf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026bf8:	601d      	str	r5, [r3, #0]
 8026bfa:	e739      	b.n	8026a70 <__gethex+0x114>
 8026bfc:	9900      	ldr	r1, [sp, #0]
 8026bfe:	0028      	movs	r0, r5
 8026c00:	3901      	subs	r1, #1
 8026c02:	f000 ff0a 	bl	8027a1a <__any_on>
 8026c06:	2800      	cmp	r0, #0
 8026c08:	d1ec      	bne.n	8026be4 <__gethex+0x288>
 8026c0a:	0029      	movs	r1, r5
 8026c0c:	9803      	ldr	r0, [sp, #12]
 8026c0e:	f000 faa9 	bl	8027164 <_Bfree>
 8026c12:	2300      	movs	r3, #0
 8026c14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026c16:	2650      	movs	r6, #80	@ 0x50
 8026c18:	6013      	str	r3, [r2, #0]
 8026c1a:	e729      	b.n	8026a70 <__gethex+0x114>
 8026c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026c1e:	2b00      	cmp	r3, #0
 8026c20:	d1f3      	bne.n	8026c0a <__gethex+0x2ae>
 8026c22:	e7df      	b.n	8026be4 <__gethex+0x288>
 8026c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026c26:	2b00      	cmp	r3, #0
 8026c28:	d1dc      	bne.n	8026be4 <__gethex+0x288>
 8026c2a:	e7ee      	b.n	8026c0a <__gethex+0x2ae>
 8026c2c:	0802e3c4 	.word	0x0802e3c4
 8026c30:	0802e47e 	.word	0x0802e47e
 8026c34:	0802e48f 	.word	0x0802e48f
 8026c38:	1e77      	subs	r7, r6, #1
 8026c3a:	2c00      	cmp	r4, #0
 8026c3c:	d12f      	bne.n	8026c9e <__gethex+0x342>
 8026c3e:	2f00      	cmp	r7, #0
 8026c40:	d004      	beq.n	8026c4c <__gethex+0x2f0>
 8026c42:	0039      	movs	r1, r7
 8026c44:	0028      	movs	r0, r5
 8026c46:	f000 fee8 	bl	8027a1a <__any_on>
 8026c4a:	0004      	movs	r4, r0
 8026c4c:	231f      	movs	r3, #31
 8026c4e:	117a      	asrs	r2, r7, #5
 8026c50:	401f      	ands	r7, r3
 8026c52:	3b1e      	subs	r3, #30
 8026c54:	40bb      	lsls	r3, r7
 8026c56:	9902      	ldr	r1, [sp, #8]
 8026c58:	0092      	lsls	r2, r2, #2
 8026c5a:	5852      	ldr	r2, [r2, r1]
 8026c5c:	421a      	tst	r2, r3
 8026c5e:	d001      	beq.n	8026c64 <__gethex+0x308>
 8026c60:	2302      	movs	r3, #2
 8026c62:	431c      	orrs	r4, r3
 8026c64:	9b00      	ldr	r3, [sp, #0]
 8026c66:	0031      	movs	r1, r6
 8026c68:	1b9b      	subs	r3, r3, r6
 8026c6a:	2602      	movs	r6, #2
 8026c6c:	0028      	movs	r0, r5
 8026c6e:	9300      	str	r3, [sp, #0]
 8026c70:	f7ff fe0c 	bl	802688c <rshift>
 8026c74:	9b01      	ldr	r3, [sp, #4]
 8026c76:	685f      	ldr	r7, [r3, #4]
 8026c78:	2c00      	cmp	r4, #0
 8026c7a:	d03f      	beq.n	8026cfc <__gethex+0x3a0>
 8026c7c:	9b01      	ldr	r3, [sp, #4]
 8026c7e:	68db      	ldr	r3, [r3, #12]
 8026c80:	2b02      	cmp	r3, #2
 8026c82:	d010      	beq.n	8026ca6 <__gethex+0x34a>
 8026c84:	2b03      	cmp	r3, #3
 8026c86:	d012      	beq.n	8026cae <__gethex+0x352>
 8026c88:	2b01      	cmp	r3, #1
 8026c8a:	d106      	bne.n	8026c9a <__gethex+0x33e>
 8026c8c:	07a2      	lsls	r2, r4, #30
 8026c8e:	d504      	bpl.n	8026c9a <__gethex+0x33e>
 8026c90:	9a02      	ldr	r2, [sp, #8]
 8026c92:	6812      	ldr	r2, [r2, #0]
 8026c94:	4314      	orrs	r4, r2
 8026c96:	421c      	tst	r4, r3
 8026c98:	d10c      	bne.n	8026cb4 <__gethex+0x358>
 8026c9a:	2310      	movs	r3, #16
 8026c9c:	e02d      	b.n	8026cfa <__gethex+0x39e>
 8026c9e:	2401      	movs	r4, #1
 8026ca0:	e7d4      	b.n	8026c4c <__gethex+0x2f0>
 8026ca2:	2601      	movs	r6, #1
 8026ca4:	e7e8      	b.n	8026c78 <__gethex+0x31c>
 8026ca6:	2301      	movs	r3, #1
 8026ca8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026caa:	1a9b      	subs	r3, r3, r2
 8026cac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026cae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026cb0:	2b00      	cmp	r3, #0
 8026cb2:	d0f2      	beq.n	8026c9a <__gethex+0x33e>
 8026cb4:	692b      	ldr	r3, [r5, #16]
 8026cb6:	2000      	movs	r0, #0
 8026cb8:	9302      	str	r3, [sp, #8]
 8026cba:	009b      	lsls	r3, r3, #2
 8026cbc:	9304      	str	r3, [sp, #16]
 8026cbe:	002b      	movs	r3, r5
 8026cc0:	9a04      	ldr	r2, [sp, #16]
 8026cc2:	3314      	adds	r3, #20
 8026cc4:	1899      	adds	r1, r3, r2
 8026cc6:	681a      	ldr	r2, [r3, #0]
 8026cc8:	1c54      	adds	r4, r2, #1
 8026cca:	d01c      	beq.n	8026d06 <__gethex+0x3aa>
 8026ccc:	3201      	adds	r2, #1
 8026cce:	601a      	str	r2, [r3, #0]
 8026cd0:	002b      	movs	r3, r5
 8026cd2:	3314      	adds	r3, #20
 8026cd4:	2e02      	cmp	r6, #2
 8026cd6:	d13f      	bne.n	8026d58 <__gethex+0x3fc>
 8026cd8:	9a01      	ldr	r2, [sp, #4]
 8026cda:	9900      	ldr	r1, [sp, #0]
 8026cdc:	6812      	ldr	r2, [r2, #0]
 8026cde:	3a01      	subs	r2, #1
 8026ce0:	428a      	cmp	r2, r1
 8026ce2:	d109      	bne.n	8026cf8 <__gethex+0x39c>
 8026ce4:	000a      	movs	r2, r1
 8026ce6:	201f      	movs	r0, #31
 8026ce8:	4010      	ands	r0, r2
 8026cea:	2201      	movs	r2, #1
 8026cec:	4082      	lsls	r2, r0
 8026cee:	1149      	asrs	r1, r1, #5
 8026cf0:	0089      	lsls	r1, r1, #2
 8026cf2:	58cb      	ldr	r3, [r1, r3]
 8026cf4:	4213      	tst	r3, r2
 8026cf6:	d13d      	bne.n	8026d74 <__gethex+0x418>
 8026cf8:	2320      	movs	r3, #32
 8026cfa:	431e      	orrs	r6, r3
 8026cfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026cfe:	601d      	str	r5, [r3, #0]
 8026d00:	9b07      	ldr	r3, [sp, #28]
 8026d02:	601f      	str	r7, [r3, #0]
 8026d04:	e6b4      	b.n	8026a70 <__gethex+0x114>
 8026d06:	c301      	stmia	r3!, {r0}
 8026d08:	4299      	cmp	r1, r3
 8026d0a:	d8dc      	bhi.n	8026cc6 <__gethex+0x36a>
 8026d0c:	68ab      	ldr	r3, [r5, #8]
 8026d0e:	9a02      	ldr	r2, [sp, #8]
 8026d10:	429a      	cmp	r2, r3
 8026d12:	db18      	blt.n	8026d46 <__gethex+0x3ea>
 8026d14:	6869      	ldr	r1, [r5, #4]
 8026d16:	9803      	ldr	r0, [sp, #12]
 8026d18:	3101      	adds	r1, #1
 8026d1a:	f000 f9df 	bl	80270dc <_Balloc>
 8026d1e:	1e04      	subs	r4, r0, #0
 8026d20:	d104      	bne.n	8026d2c <__gethex+0x3d0>
 8026d22:	0022      	movs	r2, r4
 8026d24:	2184      	movs	r1, #132	@ 0x84
 8026d26:	4b1d      	ldr	r3, [pc, #116]	@ (8026d9c <__gethex+0x440>)
 8026d28:	481d      	ldr	r0, [pc, #116]	@ (8026da0 <__gethex+0x444>)
 8026d2a:	e6c4      	b.n	8026ab6 <__gethex+0x15a>
 8026d2c:	0029      	movs	r1, r5
 8026d2e:	692a      	ldr	r2, [r5, #16]
 8026d30:	310c      	adds	r1, #12
 8026d32:	3202      	adds	r2, #2
 8026d34:	0092      	lsls	r2, r2, #2
 8026d36:	300c      	adds	r0, #12
 8026d38:	f7fe fed8 	bl	8025aec <memcpy>
 8026d3c:	0029      	movs	r1, r5
 8026d3e:	9803      	ldr	r0, [sp, #12]
 8026d40:	f000 fa10 	bl	8027164 <_Bfree>
 8026d44:	0025      	movs	r5, r4
 8026d46:	692b      	ldr	r3, [r5, #16]
 8026d48:	1c5a      	adds	r2, r3, #1
 8026d4a:	612a      	str	r2, [r5, #16]
 8026d4c:	2201      	movs	r2, #1
 8026d4e:	3304      	adds	r3, #4
 8026d50:	009b      	lsls	r3, r3, #2
 8026d52:	18eb      	adds	r3, r5, r3
 8026d54:	605a      	str	r2, [r3, #4]
 8026d56:	e7bb      	b.n	8026cd0 <__gethex+0x374>
 8026d58:	692a      	ldr	r2, [r5, #16]
 8026d5a:	9902      	ldr	r1, [sp, #8]
 8026d5c:	428a      	cmp	r2, r1
 8026d5e:	dd0b      	ble.n	8026d78 <__gethex+0x41c>
 8026d60:	2101      	movs	r1, #1
 8026d62:	0028      	movs	r0, r5
 8026d64:	f7ff fd92 	bl	802688c <rshift>
 8026d68:	9b01      	ldr	r3, [sp, #4]
 8026d6a:	3701      	adds	r7, #1
 8026d6c:	689b      	ldr	r3, [r3, #8]
 8026d6e:	42bb      	cmp	r3, r7
 8026d70:	da00      	bge.n	8026d74 <__gethex+0x418>
 8026d72:	e6df      	b.n	8026b34 <__gethex+0x1d8>
 8026d74:	2601      	movs	r6, #1
 8026d76:	e7bf      	b.n	8026cf8 <__gethex+0x39c>
 8026d78:	221f      	movs	r2, #31
 8026d7a:	9c00      	ldr	r4, [sp, #0]
 8026d7c:	9900      	ldr	r1, [sp, #0]
 8026d7e:	4014      	ands	r4, r2
 8026d80:	4211      	tst	r1, r2
 8026d82:	d0f7      	beq.n	8026d74 <__gethex+0x418>
 8026d84:	9a04      	ldr	r2, [sp, #16]
 8026d86:	189b      	adds	r3, r3, r2
 8026d88:	3b04      	subs	r3, #4
 8026d8a:	6818      	ldr	r0, [r3, #0]
 8026d8c:	f000 fa9e 	bl	80272cc <__hi0bits>
 8026d90:	2320      	movs	r3, #32
 8026d92:	1b1b      	subs	r3, r3, r4
 8026d94:	4298      	cmp	r0, r3
 8026d96:	dbe3      	blt.n	8026d60 <__gethex+0x404>
 8026d98:	e7ec      	b.n	8026d74 <__gethex+0x418>
 8026d9a:	46c0      	nop			@ (mov r8, r8)
 8026d9c:	0802e47e 	.word	0x0802e47e
 8026da0:	0802e48f 	.word	0x0802e48f

08026da4 <L_shift>:
 8026da4:	2308      	movs	r3, #8
 8026da6:	b570      	push	{r4, r5, r6, lr}
 8026da8:	2520      	movs	r5, #32
 8026daa:	1a9a      	subs	r2, r3, r2
 8026dac:	0092      	lsls	r2, r2, #2
 8026dae:	1aad      	subs	r5, r5, r2
 8026db0:	6843      	ldr	r3, [r0, #4]
 8026db2:	6804      	ldr	r4, [r0, #0]
 8026db4:	001e      	movs	r6, r3
 8026db6:	40ae      	lsls	r6, r5
 8026db8:	40d3      	lsrs	r3, r2
 8026dba:	4334      	orrs	r4, r6
 8026dbc:	6004      	str	r4, [r0, #0]
 8026dbe:	6043      	str	r3, [r0, #4]
 8026dc0:	3004      	adds	r0, #4
 8026dc2:	4288      	cmp	r0, r1
 8026dc4:	d3f4      	bcc.n	8026db0 <L_shift+0xc>
 8026dc6:	bd70      	pop	{r4, r5, r6, pc}

08026dc8 <__match>:
 8026dc8:	b530      	push	{r4, r5, lr}
 8026dca:	6803      	ldr	r3, [r0, #0]
 8026dcc:	780c      	ldrb	r4, [r1, #0]
 8026dce:	3301      	adds	r3, #1
 8026dd0:	2c00      	cmp	r4, #0
 8026dd2:	d102      	bne.n	8026dda <__match+0x12>
 8026dd4:	6003      	str	r3, [r0, #0]
 8026dd6:	2001      	movs	r0, #1
 8026dd8:	bd30      	pop	{r4, r5, pc}
 8026dda:	781a      	ldrb	r2, [r3, #0]
 8026ddc:	0015      	movs	r5, r2
 8026dde:	3d41      	subs	r5, #65	@ 0x41
 8026de0:	2d19      	cmp	r5, #25
 8026de2:	d800      	bhi.n	8026de6 <__match+0x1e>
 8026de4:	3220      	adds	r2, #32
 8026de6:	3101      	adds	r1, #1
 8026de8:	42a2      	cmp	r2, r4
 8026dea:	d0ef      	beq.n	8026dcc <__match+0x4>
 8026dec:	2000      	movs	r0, #0
 8026dee:	e7f3      	b.n	8026dd8 <__match+0x10>

08026df0 <__hexnan>:
 8026df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026df2:	680b      	ldr	r3, [r1, #0]
 8026df4:	b08b      	sub	sp, #44	@ 0x2c
 8026df6:	9201      	str	r2, [sp, #4]
 8026df8:	9901      	ldr	r1, [sp, #4]
 8026dfa:	115a      	asrs	r2, r3, #5
 8026dfc:	0092      	lsls	r2, r2, #2
 8026dfe:	188a      	adds	r2, r1, r2
 8026e00:	9202      	str	r2, [sp, #8]
 8026e02:	0019      	movs	r1, r3
 8026e04:	221f      	movs	r2, #31
 8026e06:	4011      	ands	r1, r2
 8026e08:	9008      	str	r0, [sp, #32]
 8026e0a:	9106      	str	r1, [sp, #24]
 8026e0c:	4213      	tst	r3, r2
 8026e0e:	d002      	beq.n	8026e16 <__hexnan+0x26>
 8026e10:	9b02      	ldr	r3, [sp, #8]
 8026e12:	3304      	adds	r3, #4
 8026e14:	9302      	str	r3, [sp, #8]
 8026e16:	9b02      	ldr	r3, [sp, #8]
 8026e18:	2500      	movs	r5, #0
 8026e1a:	1f1f      	subs	r7, r3, #4
 8026e1c:	003e      	movs	r6, r7
 8026e1e:	003c      	movs	r4, r7
 8026e20:	9b08      	ldr	r3, [sp, #32]
 8026e22:	603d      	str	r5, [r7, #0]
 8026e24:	681b      	ldr	r3, [r3, #0]
 8026e26:	9507      	str	r5, [sp, #28]
 8026e28:	9305      	str	r3, [sp, #20]
 8026e2a:	9503      	str	r5, [sp, #12]
 8026e2c:	9b05      	ldr	r3, [sp, #20]
 8026e2e:	3301      	adds	r3, #1
 8026e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8026e32:	9b05      	ldr	r3, [sp, #20]
 8026e34:	785b      	ldrb	r3, [r3, #1]
 8026e36:	9304      	str	r3, [sp, #16]
 8026e38:	2b00      	cmp	r3, #0
 8026e3a:	d028      	beq.n	8026e8e <__hexnan+0x9e>
 8026e3c:	9804      	ldr	r0, [sp, #16]
 8026e3e:	f7ff fd78 	bl	8026932 <__hexdig_fun>
 8026e42:	2800      	cmp	r0, #0
 8026e44:	d155      	bne.n	8026ef2 <__hexnan+0x102>
 8026e46:	9b04      	ldr	r3, [sp, #16]
 8026e48:	2b20      	cmp	r3, #32
 8026e4a:	d819      	bhi.n	8026e80 <__hexnan+0x90>
 8026e4c:	9b03      	ldr	r3, [sp, #12]
 8026e4e:	9a07      	ldr	r2, [sp, #28]
 8026e50:	4293      	cmp	r3, r2
 8026e52:	dd12      	ble.n	8026e7a <__hexnan+0x8a>
 8026e54:	42b4      	cmp	r4, r6
 8026e56:	d206      	bcs.n	8026e66 <__hexnan+0x76>
 8026e58:	2d07      	cmp	r5, #7
 8026e5a:	dc04      	bgt.n	8026e66 <__hexnan+0x76>
 8026e5c:	002a      	movs	r2, r5
 8026e5e:	0031      	movs	r1, r6
 8026e60:	0020      	movs	r0, r4
 8026e62:	f7ff ff9f 	bl	8026da4 <L_shift>
 8026e66:	9b01      	ldr	r3, [sp, #4]
 8026e68:	2508      	movs	r5, #8
 8026e6a:	429c      	cmp	r4, r3
 8026e6c:	d905      	bls.n	8026e7a <__hexnan+0x8a>
 8026e6e:	1f26      	subs	r6, r4, #4
 8026e70:	2500      	movs	r5, #0
 8026e72:	0034      	movs	r4, r6
 8026e74:	9b03      	ldr	r3, [sp, #12]
 8026e76:	6035      	str	r5, [r6, #0]
 8026e78:	9307      	str	r3, [sp, #28]
 8026e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e7c:	9305      	str	r3, [sp, #20]
 8026e7e:	e7d5      	b.n	8026e2c <__hexnan+0x3c>
 8026e80:	9b04      	ldr	r3, [sp, #16]
 8026e82:	2b29      	cmp	r3, #41	@ 0x29
 8026e84:	d15a      	bne.n	8026f3c <__hexnan+0x14c>
 8026e86:	9b05      	ldr	r3, [sp, #20]
 8026e88:	9a08      	ldr	r2, [sp, #32]
 8026e8a:	3302      	adds	r3, #2
 8026e8c:	6013      	str	r3, [r2, #0]
 8026e8e:	9b03      	ldr	r3, [sp, #12]
 8026e90:	2b00      	cmp	r3, #0
 8026e92:	d053      	beq.n	8026f3c <__hexnan+0x14c>
 8026e94:	42b4      	cmp	r4, r6
 8026e96:	d206      	bcs.n	8026ea6 <__hexnan+0xb6>
 8026e98:	2d07      	cmp	r5, #7
 8026e9a:	dc04      	bgt.n	8026ea6 <__hexnan+0xb6>
 8026e9c:	002a      	movs	r2, r5
 8026e9e:	0031      	movs	r1, r6
 8026ea0:	0020      	movs	r0, r4
 8026ea2:	f7ff ff7f 	bl	8026da4 <L_shift>
 8026ea6:	9b01      	ldr	r3, [sp, #4]
 8026ea8:	429c      	cmp	r4, r3
 8026eaa:	d936      	bls.n	8026f1a <__hexnan+0x12a>
 8026eac:	001a      	movs	r2, r3
 8026eae:	0023      	movs	r3, r4
 8026eb0:	cb02      	ldmia	r3!, {r1}
 8026eb2:	c202      	stmia	r2!, {r1}
 8026eb4:	429f      	cmp	r7, r3
 8026eb6:	d2fb      	bcs.n	8026eb0 <__hexnan+0xc0>
 8026eb8:	9b02      	ldr	r3, [sp, #8]
 8026eba:	1c62      	adds	r2, r4, #1
 8026ebc:	1ed9      	subs	r1, r3, #3
 8026ebe:	2304      	movs	r3, #4
 8026ec0:	4291      	cmp	r1, r2
 8026ec2:	d305      	bcc.n	8026ed0 <__hexnan+0xe0>
 8026ec4:	9b02      	ldr	r3, [sp, #8]
 8026ec6:	3b04      	subs	r3, #4
 8026ec8:	1b1b      	subs	r3, r3, r4
 8026eca:	089b      	lsrs	r3, r3, #2
 8026ecc:	3301      	adds	r3, #1
 8026ece:	009b      	lsls	r3, r3, #2
 8026ed0:	9a01      	ldr	r2, [sp, #4]
 8026ed2:	18d3      	adds	r3, r2, r3
 8026ed4:	2200      	movs	r2, #0
 8026ed6:	c304      	stmia	r3!, {r2}
 8026ed8:	429f      	cmp	r7, r3
 8026eda:	d2fc      	bcs.n	8026ed6 <__hexnan+0xe6>
 8026edc:	683b      	ldr	r3, [r7, #0]
 8026ede:	2b00      	cmp	r3, #0
 8026ee0:	d104      	bne.n	8026eec <__hexnan+0xfc>
 8026ee2:	9b01      	ldr	r3, [sp, #4]
 8026ee4:	429f      	cmp	r7, r3
 8026ee6:	d127      	bne.n	8026f38 <__hexnan+0x148>
 8026ee8:	2301      	movs	r3, #1
 8026eea:	603b      	str	r3, [r7, #0]
 8026eec:	2005      	movs	r0, #5
 8026eee:	b00b      	add	sp, #44	@ 0x2c
 8026ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026ef2:	9b03      	ldr	r3, [sp, #12]
 8026ef4:	3501      	adds	r5, #1
 8026ef6:	3301      	adds	r3, #1
 8026ef8:	9303      	str	r3, [sp, #12]
 8026efa:	2d08      	cmp	r5, #8
 8026efc:	dd06      	ble.n	8026f0c <__hexnan+0x11c>
 8026efe:	9b01      	ldr	r3, [sp, #4]
 8026f00:	429c      	cmp	r4, r3
 8026f02:	d9ba      	bls.n	8026e7a <__hexnan+0x8a>
 8026f04:	2300      	movs	r3, #0
 8026f06:	2501      	movs	r5, #1
 8026f08:	3c04      	subs	r4, #4
 8026f0a:	6023      	str	r3, [r4, #0]
 8026f0c:	220f      	movs	r2, #15
 8026f0e:	6823      	ldr	r3, [r4, #0]
 8026f10:	4010      	ands	r0, r2
 8026f12:	011b      	lsls	r3, r3, #4
 8026f14:	4303      	orrs	r3, r0
 8026f16:	6023      	str	r3, [r4, #0]
 8026f18:	e7af      	b.n	8026e7a <__hexnan+0x8a>
 8026f1a:	9b06      	ldr	r3, [sp, #24]
 8026f1c:	2b00      	cmp	r3, #0
 8026f1e:	d0dd      	beq.n	8026edc <__hexnan+0xec>
 8026f20:	2320      	movs	r3, #32
 8026f22:	9a06      	ldr	r2, [sp, #24]
 8026f24:	9902      	ldr	r1, [sp, #8]
 8026f26:	1a9b      	subs	r3, r3, r2
 8026f28:	2201      	movs	r2, #1
 8026f2a:	4252      	negs	r2, r2
 8026f2c:	40da      	lsrs	r2, r3
 8026f2e:	3904      	subs	r1, #4
 8026f30:	680b      	ldr	r3, [r1, #0]
 8026f32:	4013      	ands	r3, r2
 8026f34:	600b      	str	r3, [r1, #0]
 8026f36:	e7d1      	b.n	8026edc <__hexnan+0xec>
 8026f38:	3f04      	subs	r7, #4
 8026f3a:	e7cf      	b.n	8026edc <__hexnan+0xec>
 8026f3c:	2004      	movs	r0, #4
 8026f3e:	e7d6      	b.n	8026eee <__hexnan+0xfe>

08026f40 <malloc>:
 8026f40:	b510      	push	{r4, lr}
 8026f42:	4b03      	ldr	r3, [pc, #12]	@ (8026f50 <malloc+0x10>)
 8026f44:	0001      	movs	r1, r0
 8026f46:	6818      	ldr	r0, [r3, #0]
 8026f48:	f000 f826 	bl	8026f98 <_malloc_r>
 8026f4c:	bd10      	pop	{r4, pc}
 8026f4e:	46c0      	nop			@ (mov r8, r8)
 8026f50:	200003e0 	.word	0x200003e0

08026f54 <sbrk_aligned>:
 8026f54:	b570      	push	{r4, r5, r6, lr}
 8026f56:	4e0f      	ldr	r6, [pc, #60]	@ (8026f94 <sbrk_aligned+0x40>)
 8026f58:	000d      	movs	r5, r1
 8026f5a:	6831      	ldr	r1, [r6, #0]
 8026f5c:	0004      	movs	r4, r0
 8026f5e:	2900      	cmp	r1, #0
 8026f60:	d102      	bne.n	8026f68 <sbrk_aligned+0x14>
 8026f62:	f001 f981 	bl	8028268 <_sbrk_r>
 8026f66:	6030      	str	r0, [r6, #0]
 8026f68:	0029      	movs	r1, r5
 8026f6a:	0020      	movs	r0, r4
 8026f6c:	f001 f97c 	bl	8028268 <_sbrk_r>
 8026f70:	1c43      	adds	r3, r0, #1
 8026f72:	d103      	bne.n	8026f7c <sbrk_aligned+0x28>
 8026f74:	2501      	movs	r5, #1
 8026f76:	426d      	negs	r5, r5
 8026f78:	0028      	movs	r0, r5
 8026f7a:	bd70      	pop	{r4, r5, r6, pc}
 8026f7c:	2303      	movs	r3, #3
 8026f7e:	1cc5      	adds	r5, r0, #3
 8026f80:	439d      	bics	r5, r3
 8026f82:	42a8      	cmp	r0, r5
 8026f84:	d0f8      	beq.n	8026f78 <sbrk_aligned+0x24>
 8026f86:	1a29      	subs	r1, r5, r0
 8026f88:	0020      	movs	r0, r4
 8026f8a:	f001 f96d 	bl	8028268 <_sbrk_r>
 8026f8e:	3001      	adds	r0, #1
 8026f90:	d1f2      	bne.n	8026f78 <sbrk_aligned+0x24>
 8026f92:	e7ef      	b.n	8026f74 <sbrk_aligned+0x20>
 8026f94:	20003624 	.word	0x20003624

08026f98 <_malloc_r>:
 8026f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026f9a:	2203      	movs	r2, #3
 8026f9c:	1ccb      	adds	r3, r1, #3
 8026f9e:	4393      	bics	r3, r2
 8026fa0:	3308      	adds	r3, #8
 8026fa2:	0005      	movs	r5, r0
 8026fa4:	001f      	movs	r7, r3
 8026fa6:	2b0c      	cmp	r3, #12
 8026fa8:	d234      	bcs.n	8027014 <_malloc_r+0x7c>
 8026faa:	270c      	movs	r7, #12
 8026fac:	42b9      	cmp	r1, r7
 8026fae:	d833      	bhi.n	8027018 <_malloc_r+0x80>
 8026fb0:	0028      	movs	r0, r5
 8026fb2:	f000 f883 	bl	80270bc <__malloc_lock>
 8026fb6:	4e37      	ldr	r6, [pc, #220]	@ (8027094 <_malloc_r+0xfc>)
 8026fb8:	6833      	ldr	r3, [r6, #0]
 8026fba:	001c      	movs	r4, r3
 8026fbc:	2c00      	cmp	r4, #0
 8026fbe:	d12f      	bne.n	8027020 <_malloc_r+0x88>
 8026fc0:	0039      	movs	r1, r7
 8026fc2:	0028      	movs	r0, r5
 8026fc4:	f7ff ffc6 	bl	8026f54 <sbrk_aligned>
 8026fc8:	0004      	movs	r4, r0
 8026fca:	1c43      	adds	r3, r0, #1
 8026fcc:	d15f      	bne.n	802708e <_malloc_r+0xf6>
 8026fce:	6834      	ldr	r4, [r6, #0]
 8026fd0:	9400      	str	r4, [sp, #0]
 8026fd2:	9b00      	ldr	r3, [sp, #0]
 8026fd4:	2b00      	cmp	r3, #0
 8026fd6:	d14a      	bne.n	802706e <_malloc_r+0xd6>
 8026fd8:	2c00      	cmp	r4, #0
 8026fda:	d052      	beq.n	8027082 <_malloc_r+0xea>
 8026fdc:	6823      	ldr	r3, [r4, #0]
 8026fde:	0028      	movs	r0, r5
 8026fe0:	18e3      	adds	r3, r4, r3
 8026fe2:	9900      	ldr	r1, [sp, #0]
 8026fe4:	9301      	str	r3, [sp, #4]
 8026fe6:	f001 f93f 	bl	8028268 <_sbrk_r>
 8026fea:	9b01      	ldr	r3, [sp, #4]
 8026fec:	4283      	cmp	r3, r0
 8026fee:	d148      	bne.n	8027082 <_malloc_r+0xea>
 8026ff0:	6823      	ldr	r3, [r4, #0]
 8026ff2:	0028      	movs	r0, r5
 8026ff4:	1aff      	subs	r7, r7, r3
 8026ff6:	0039      	movs	r1, r7
 8026ff8:	f7ff ffac 	bl	8026f54 <sbrk_aligned>
 8026ffc:	3001      	adds	r0, #1
 8026ffe:	d040      	beq.n	8027082 <_malloc_r+0xea>
 8027000:	6823      	ldr	r3, [r4, #0]
 8027002:	19db      	adds	r3, r3, r7
 8027004:	6023      	str	r3, [r4, #0]
 8027006:	6833      	ldr	r3, [r6, #0]
 8027008:	685a      	ldr	r2, [r3, #4]
 802700a:	2a00      	cmp	r2, #0
 802700c:	d133      	bne.n	8027076 <_malloc_r+0xde>
 802700e:	9b00      	ldr	r3, [sp, #0]
 8027010:	6033      	str	r3, [r6, #0]
 8027012:	e019      	b.n	8027048 <_malloc_r+0xb0>
 8027014:	2b00      	cmp	r3, #0
 8027016:	dac9      	bge.n	8026fac <_malloc_r+0x14>
 8027018:	230c      	movs	r3, #12
 802701a:	602b      	str	r3, [r5, #0]
 802701c:	2000      	movs	r0, #0
 802701e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027020:	6821      	ldr	r1, [r4, #0]
 8027022:	1bc9      	subs	r1, r1, r7
 8027024:	d420      	bmi.n	8027068 <_malloc_r+0xd0>
 8027026:	290b      	cmp	r1, #11
 8027028:	d90a      	bls.n	8027040 <_malloc_r+0xa8>
 802702a:	19e2      	adds	r2, r4, r7
 802702c:	6027      	str	r7, [r4, #0]
 802702e:	42a3      	cmp	r3, r4
 8027030:	d104      	bne.n	802703c <_malloc_r+0xa4>
 8027032:	6032      	str	r2, [r6, #0]
 8027034:	6863      	ldr	r3, [r4, #4]
 8027036:	6011      	str	r1, [r2, #0]
 8027038:	6053      	str	r3, [r2, #4]
 802703a:	e005      	b.n	8027048 <_malloc_r+0xb0>
 802703c:	605a      	str	r2, [r3, #4]
 802703e:	e7f9      	b.n	8027034 <_malloc_r+0x9c>
 8027040:	6862      	ldr	r2, [r4, #4]
 8027042:	42a3      	cmp	r3, r4
 8027044:	d10e      	bne.n	8027064 <_malloc_r+0xcc>
 8027046:	6032      	str	r2, [r6, #0]
 8027048:	0028      	movs	r0, r5
 802704a:	f000 f83f 	bl	80270cc <__malloc_unlock>
 802704e:	0020      	movs	r0, r4
 8027050:	2207      	movs	r2, #7
 8027052:	300b      	adds	r0, #11
 8027054:	1d23      	adds	r3, r4, #4
 8027056:	4390      	bics	r0, r2
 8027058:	1ac2      	subs	r2, r0, r3
 802705a:	4298      	cmp	r0, r3
 802705c:	d0df      	beq.n	802701e <_malloc_r+0x86>
 802705e:	1a1b      	subs	r3, r3, r0
 8027060:	50a3      	str	r3, [r4, r2]
 8027062:	e7dc      	b.n	802701e <_malloc_r+0x86>
 8027064:	605a      	str	r2, [r3, #4]
 8027066:	e7ef      	b.n	8027048 <_malloc_r+0xb0>
 8027068:	0023      	movs	r3, r4
 802706a:	6864      	ldr	r4, [r4, #4]
 802706c:	e7a6      	b.n	8026fbc <_malloc_r+0x24>
 802706e:	9c00      	ldr	r4, [sp, #0]
 8027070:	6863      	ldr	r3, [r4, #4]
 8027072:	9300      	str	r3, [sp, #0]
 8027074:	e7ad      	b.n	8026fd2 <_malloc_r+0x3a>
 8027076:	001a      	movs	r2, r3
 8027078:	685b      	ldr	r3, [r3, #4]
 802707a:	42a3      	cmp	r3, r4
 802707c:	d1fb      	bne.n	8027076 <_malloc_r+0xde>
 802707e:	2300      	movs	r3, #0
 8027080:	e7da      	b.n	8027038 <_malloc_r+0xa0>
 8027082:	230c      	movs	r3, #12
 8027084:	0028      	movs	r0, r5
 8027086:	602b      	str	r3, [r5, #0]
 8027088:	f000 f820 	bl	80270cc <__malloc_unlock>
 802708c:	e7c6      	b.n	802701c <_malloc_r+0x84>
 802708e:	6007      	str	r7, [r0, #0]
 8027090:	e7da      	b.n	8027048 <_malloc_r+0xb0>
 8027092:	46c0      	nop			@ (mov r8, r8)
 8027094:	20003628 	.word	0x20003628

08027098 <__ascii_mbtowc>:
 8027098:	b082      	sub	sp, #8
 802709a:	2900      	cmp	r1, #0
 802709c:	d100      	bne.n	80270a0 <__ascii_mbtowc+0x8>
 802709e:	a901      	add	r1, sp, #4
 80270a0:	1e10      	subs	r0, r2, #0
 80270a2:	d006      	beq.n	80270b2 <__ascii_mbtowc+0x1a>
 80270a4:	2b00      	cmp	r3, #0
 80270a6:	d006      	beq.n	80270b6 <__ascii_mbtowc+0x1e>
 80270a8:	7813      	ldrb	r3, [r2, #0]
 80270aa:	600b      	str	r3, [r1, #0]
 80270ac:	7810      	ldrb	r0, [r2, #0]
 80270ae:	1e43      	subs	r3, r0, #1
 80270b0:	4198      	sbcs	r0, r3
 80270b2:	b002      	add	sp, #8
 80270b4:	4770      	bx	lr
 80270b6:	2002      	movs	r0, #2
 80270b8:	4240      	negs	r0, r0
 80270ba:	e7fa      	b.n	80270b2 <__ascii_mbtowc+0x1a>

080270bc <__malloc_lock>:
 80270bc:	b510      	push	{r4, lr}
 80270be:	4802      	ldr	r0, [pc, #8]	@ (80270c8 <__malloc_lock+0xc>)
 80270c0:	f7fe fd07 	bl	8025ad2 <__retarget_lock_acquire_recursive>
 80270c4:	bd10      	pop	{r4, pc}
 80270c6:	46c0      	nop			@ (mov r8, r8)
 80270c8:	20003620 	.word	0x20003620

080270cc <__malloc_unlock>:
 80270cc:	b510      	push	{r4, lr}
 80270ce:	4802      	ldr	r0, [pc, #8]	@ (80270d8 <__malloc_unlock+0xc>)
 80270d0:	f7fe fd00 	bl	8025ad4 <__retarget_lock_release_recursive>
 80270d4:	bd10      	pop	{r4, pc}
 80270d6:	46c0      	nop			@ (mov r8, r8)
 80270d8:	20003620 	.word	0x20003620

080270dc <_Balloc>:
 80270dc:	b570      	push	{r4, r5, r6, lr}
 80270de:	69c5      	ldr	r5, [r0, #28]
 80270e0:	0006      	movs	r6, r0
 80270e2:	000c      	movs	r4, r1
 80270e4:	2d00      	cmp	r5, #0
 80270e6:	d10e      	bne.n	8027106 <_Balloc+0x2a>
 80270e8:	2010      	movs	r0, #16
 80270ea:	f7ff ff29 	bl	8026f40 <malloc>
 80270ee:	1e02      	subs	r2, r0, #0
 80270f0:	61f0      	str	r0, [r6, #28]
 80270f2:	d104      	bne.n	80270fe <_Balloc+0x22>
 80270f4:	216b      	movs	r1, #107	@ 0x6b
 80270f6:	4b19      	ldr	r3, [pc, #100]	@ (802715c <_Balloc+0x80>)
 80270f8:	4819      	ldr	r0, [pc, #100]	@ (8027160 <_Balloc+0x84>)
 80270fa:	f001 f8c7 	bl	802828c <__assert_func>
 80270fe:	6045      	str	r5, [r0, #4]
 8027100:	6085      	str	r5, [r0, #8]
 8027102:	6005      	str	r5, [r0, #0]
 8027104:	60c5      	str	r5, [r0, #12]
 8027106:	69f5      	ldr	r5, [r6, #28]
 8027108:	68eb      	ldr	r3, [r5, #12]
 802710a:	2b00      	cmp	r3, #0
 802710c:	d013      	beq.n	8027136 <_Balloc+0x5a>
 802710e:	69f3      	ldr	r3, [r6, #28]
 8027110:	00a2      	lsls	r2, r4, #2
 8027112:	68db      	ldr	r3, [r3, #12]
 8027114:	189b      	adds	r3, r3, r2
 8027116:	6818      	ldr	r0, [r3, #0]
 8027118:	2800      	cmp	r0, #0
 802711a:	d118      	bne.n	802714e <_Balloc+0x72>
 802711c:	2101      	movs	r1, #1
 802711e:	000d      	movs	r5, r1
 8027120:	40a5      	lsls	r5, r4
 8027122:	1d6a      	adds	r2, r5, #5
 8027124:	0030      	movs	r0, r6
 8027126:	0092      	lsls	r2, r2, #2
 8027128:	f001 f8ce 	bl	80282c8 <_calloc_r>
 802712c:	2800      	cmp	r0, #0
 802712e:	d00c      	beq.n	802714a <_Balloc+0x6e>
 8027130:	6044      	str	r4, [r0, #4]
 8027132:	6085      	str	r5, [r0, #8]
 8027134:	e00d      	b.n	8027152 <_Balloc+0x76>
 8027136:	2221      	movs	r2, #33	@ 0x21
 8027138:	2104      	movs	r1, #4
 802713a:	0030      	movs	r0, r6
 802713c:	f001 f8c4 	bl	80282c8 <_calloc_r>
 8027140:	69f3      	ldr	r3, [r6, #28]
 8027142:	60e8      	str	r0, [r5, #12]
 8027144:	68db      	ldr	r3, [r3, #12]
 8027146:	2b00      	cmp	r3, #0
 8027148:	d1e1      	bne.n	802710e <_Balloc+0x32>
 802714a:	2000      	movs	r0, #0
 802714c:	bd70      	pop	{r4, r5, r6, pc}
 802714e:	6802      	ldr	r2, [r0, #0]
 8027150:	601a      	str	r2, [r3, #0]
 8027152:	2300      	movs	r3, #0
 8027154:	6103      	str	r3, [r0, #16]
 8027156:	60c3      	str	r3, [r0, #12]
 8027158:	e7f8      	b.n	802714c <_Balloc+0x70>
 802715a:	46c0      	nop			@ (mov r8, r8)
 802715c:	0802e40f 	.word	0x0802e40f
 8027160:	0802e4ef 	.word	0x0802e4ef

08027164 <_Bfree>:
 8027164:	b570      	push	{r4, r5, r6, lr}
 8027166:	69c6      	ldr	r6, [r0, #28]
 8027168:	0005      	movs	r5, r0
 802716a:	000c      	movs	r4, r1
 802716c:	2e00      	cmp	r6, #0
 802716e:	d10e      	bne.n	802718e <_Bfree+0x2a>
 8027170:	2010      	movs	r0, #16
 8027172:	f7ff fee5 	bl	8026f40 <malloc>
 8027176:	1e02      	subs	r2, r0, #0
 8027178:	61e8      	str	r0, [r5, #28]
 802717a:	d104      	bne.n	8027186 <_Bfree+0x22>
 802717c:	218f      	movs	r1, #143	@ 0x8f
 802717e:	4b09      	ldr	r3, [pc, #36]	@ (80271a4 <_Bfree+0x40>)
 8027180:	4809      	ldr	r0, [pc, #36]	@ (80271a8 <_Bfree+0x44>)
 8027182:	f001 f883 	bl	802828c <__assert_func>
 8027186:	6046      	str	r6, [r0, #4]
 8027188:	6086      	str	r6, [r0, #8]
 802718a:	6006      	str	r6, [r0, #0]
 802718c:	60c6      	str	r6, [r0, #12]
 802718e:	2c00      	cmp	r4, #0
 8027190:	d007      	beq.n	80271a2 <_Bfree+0x3e>
 8027192:	69eb      	ldr	r3, [r5, #28]
 8027194:	6862      	ldr	r2, [r4, #4]
 8027196:	68db      	ldr	r3, [r3, #12]
 8027198:	0092      	lsls	r2, r2, #2
 802719a:	189b      	adds	r3, r3, r2
 802719c:	681a      	ldr	r2, [r3, #0]
 802719e:	6022      	str	r2, [r4, #0]
 80271a0:	601c      	str	r4, [r3, #0]
 80271a2:	bd70      	pop	{r4, r5, r6, pc}
 80271a4:	0802e40f 	.word	0x0802e40f
 80271a8:	0802e4ef 	.word	0x0802e4ef

080271ac <__multadd>:
 80271ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80271ae:	000f      	movs	r7, r1
 80271b0:	9001      	str	r0, [sp, #4]
 80271b2:	000c      	movs	r4, r1
 80271b4:	001e      	movs	r6, r3
 80271b6:	2000      	movs	r0, #0
 80271b8:	690d      	ldr	r5, [r1, #16]
 80271ba:	3714      	adds	r7, #20
 80271bc:	683b      	ldr	r3, [r7, #0]
 80271be:	3001      	adds	r0, #1
 80271c0:	b299      	uxth	r1, r3
 80271c2:	4351      	muls	r1, r2
 80271c4:	0c1b      	lsrs	r3, r3, #16
 80271c6:	4353      	muls	r3, r2
 80271c8:	1989      	adds	r1, r1, r6
 80271ca:	0c0e      	lsrs	r6, r1, #16
 80271cc:	199b      	adds	r3, r3, r6
 80271ce:	0c1e      	lsrs	r6, r3, #16
 80271d0:	b289      	uxth	r1, r1
 80271d2:	041b      	lsls	r3, r3, #16
 80271d4:	185b      	adds	r3, r3, r1
 80271d6:	c708      	stmia	r7!, {r3}
 80271d8:	4285      	cmp	r5, r0
 80271da:	dcef      	bgt.n	80271bc <__multadd+0x10>
 80271dc:	2e00      	cmp	r6, #0
 80271de:	d022      	beq.n	8027226 <__multadd+0x7a>
 80271e0:	68a3      	ldr	r3, [r4, #8]
 80271e2:	42ab      	cmp	r3, r5
 80271e4:	dc19      	bgt.n	802721a <__multadd+0x6e>
 80271e6:	6861      	ldr	r1, [r4, #4]
 80271e8:	9801      	ldr	r0, [sp, #4]
 80271ea:	3101      	adds	r1, #1
 80271ec:	f7ff ff76 	bl	80270dc <_Balloc>
 80271f0:	1e07      	subs	r7, r0, #0
 80271f2:	d105      	bne.n	8027200 <__multadd+0x54>
 80271f4:	003a      	movs	r2, r7
 80271f6:	21ba      	movs	r1, #186	@ 0xba
 80271f8:	4b0c      	ldr	r3, [pc, #48]	@ (802722c <__multadd+0x80>)
 80271fa:	480d      	ldr	r0, [pc, #52]	@ (8027230 <__multadd+0x84>)
 80271fc:	f001 f846 	bl	802828c <__assert_func>
 8027200:	0021      	movs	r1, r4
 8027202:	6922      	ldr	r2, [r4, #16]
 8027204:	310c      	adds	r1, #12
 8027206:	3202      	adds	r2, #2
 8027208:	0092      	lsls	r2, r2, #2
 802720a:	300c      	adds	r0, #12
 802720c:	f7fe fc6e 	bl	8025aec <memcpy>
 8027210:	0021      	movs	r1, r4
 8027212:	9801      	ldr	r0, [sp, #4]
 8027214:	f7ff ffa6 	bl	8027164 <_Bfree>
 8027218:	003c      	movs	r4, r7
 802721a:	1d2b      	adds	r3, r5, #4
 802721c:	009b      	lsls	r3, r3, #2
 802721e:	18e3      	adds	r3, r4, r3
 8027220:	3501      	adds	r5, #1
 8027222:	605e      	str	r6, [r3, #4]
 8027224:	6125      	str	r5, [r4, #16]
 8027226:	0020      	movs	r0, r4
 8027228:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802722a:	46c0      	nop			@ (mov r8, r8)
 802722c:	0802e47e 	.word	0x0802e47e
 8027230:	0802e4ef 	.word	0x0802e4ef

08027234 <__s2b>:
 8027234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027236:	0007      	movs	r7, r0
 8027238:	0018      	movs	r0, r3
 802723a:	000c      	movs	r4, r1
 802723c:	3008      	adds	r0, #8
 802723e:	2109      	movs	r1, #9
 8027240:	9301      	str	r3, [sp, #4]
 8027242:	0015      	movs	r5, r2
 8027244:	f7d9 f838 	bl	80002b8 <__divsi3>
 8027248:	2301      	movs	r3, #1
 802724a:	2100      	movs	r1, #0
 802724c:	4283      	cmp	r3, r0
 802724e:	db0a      	blt.n	8027266 <__s2b+0x32>
 8027250:	0038      	movs	r0, r7
 8027252:	f7ff ff43 	bl	80270dc <_Balloc>
 8027256:	1e01      	subs	r1, r0, #0
 8027258:	d108      	bne.n	802726c <__s2b+0x38>
 802725a:	000a      	movs	r2, r1
 802725c:	4b19      	ldr	r3, [pc, #100]	@ (80272c4 <__s2b+0x90>)
 802725e:	481a      	ldr	r0, [pc, #104]	@ (80272c8 <__s2b+0x94>)
 8027260:	31d3      	adds	r1, #211	@ 0xd3
 8027262:	f001 f813 	bl	802828c <__assert_func>
 8027266:	005b      	lsls	r3, r3, #1
 8027268:	3101      	adds	r1, #1
 802726a:	e7ef      	b.n	802724c <__s2b+0x18>
 802726c:	9b08      	ldr	r3, [sp, #32]
 802726e:	6143      	str	r3, [r0, #20]
 8027270:	2301      	movs	r3, #1
 8027272:	6103      	str	r3, [r0, #16]
 8027274:	2d09      	cmp	r5, #9
 8027276:	dd18      	ble.n	80272aa <__s2b+0x76>
 8027278:	0023      	movs	r3, r4
 802727a:	3309      	adds	r3, #9
 802727c:	001e      	movs	r6, r3
 802727e:	9300      	str	r3, [sp, #0]
 8027280:	1964      	adds	r4, r4, r5
 8027282:	7833      	ldrb	r3, [r6, #0]
 8027284:	220a      	movs	r2, #10
 8027286:	0038      	movs	r0, r7
 8027288:	3b30      	subs	r3, #48	@ 0x30
 802728a:	f7ff ff8f 	bl	80271ac <__multadd>
 802728e:	3601      	adds	r6, #1
 8027290:	0001      	movs	r1, r0
 8027292:	42a6      	cmp	r6, r4
 8027294:	d1f5      	bne.n	8027282 <__s2b+0x4e>
 8027296:	002c      	movs	r4, r5
 8027298:	9b00      	ldr	r3, [sp, #0]
 802729a:	3c08      	subs	r4, #8
 802729c:	191c      	adds	r4, r3, r4
 802729e:	002e      	movs	r6, r5
 80272a0:	9b01      	ldr	r3, [sp, #4]
 80272a2:	429e      	cmp	r6, r3
 80272a4:	db04      	blt.n	80272b0 <__s2b+0x7c>
 80272a6:	0008      	movs	r0, r1
 80272a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80272aa:	2509      	movs	r5, #9
 80272ac:	340a      	adds	r4, #10
 80272ae:	e7f6      	b.n	802729e <__s2b+0x6a>
 80272b0:	1b63      	subs	r3, r4, r5
 80272b2:	5d9b      	ldrb	r3, [r3, r6]
 80272b4:	220a      	movs	r2, #10
 80272b6:	0038      	movs	r0, r7
 80272b8:	3b30      	subs	r3, #48	@ 0x30
 80272ba:	f7ff ff77 	bl	80271ac <__multadd>
 80272be:	3601      	adds	r6, #1
 80272c0:	0001      	movs	r1, r0
 80272c2:	e7ed      	b.n	80272a0 <__s2b+0x6c>
 80272c4:	0802e47e 	.word	0x0802e47e
 80272c8:	0802e4ef 	.word	0x0802e4ef

080272cc <__hi0bits>:
 80272cc:	2280      	movs	r2, #128	@ 0x80
 80272ce:	0003      	movs	r3, r0
 80272d0:	0252      	lsls	r2, r2, #9
 80272d2:	2000      	movs	r0, #0
 80272d4:	4293      	cmp	r3, r2
 80272d6:	d201      	bcs.n	80272dc <__hi0bits+0x10>
 80272d8:	041b      	lsls	r3, r3, #16
 80272da:	3010      	adds	r0, #16
 80272dc:	2280      	movs	r2, #128	@ 0x80
 80272de:	0452      	lsls	r2, r2, #17
 80272e0:	4293      	cmp	r3, r2
 80272e2:	d201      	bcs.n	80272e8 <__hi0bits+0x1c>
 80272e4:	3008      	adds	r0, #8
 80272e6:	021b      	lsls	r3, r3, #8
 80272e8:	2280      	movs	r2, #128	@ 0x80
 80272ea:	0552      	lsls	r2, r2, #21
 80272ec:	4293      	cmp	r3, r2
 80272ee:	d201      	bcs.n	80272f4 <__hi0bits+0x28>
 80272f0:	3004      	adds	r0, #4
 80272f2:	011b      	lsls	r3, r3, #4
 80272f4:	2280      	movs	r2, #128	@ 0x80
 80272f6:	05d2      	lsls	r2, r2, #23
 80272f8:	4293      	cmp	r3, r2
 80272fa:	d201      	bcs.n	8027300 <__hi0bits+0x34>
 80272fc:	3002      	adds	r0, #2
 80272fe:	009b      	lsls	r3, r3, #2
 8027300:	2b00      	cmp	r3, #0
 8027302:	db03      	blt.n	802730c <__hi0bits+0x40>
 8027304:	3001      	adds	r0, #1
 8027306:	4213      	tst	r3, r2
 8027308:	d100      	bne.n	802730c <__hi0bits+0x40>
 802730a:	2020      	movs	r0, #32
 802730c:	4770      	bx	lr

0802730e <__lo0bits>:
 802730e:	6803      	ldr	r3, [r0, #0]
 8027310:	0001      	movs	r1, r0
 8027312:	2207      	movs	r2, #7
 8027314:	0018      	movs	r0, r3
 8027316:	4010      	ands	r0, r2
 8027318:	4213      	tst	r3, r2
 802731a:	d00d      	beq.n	8027338 <__lo0bits+0x2a>
 802731c:	3a06      	subs	r2, #6
 802731e:	2000      	movs	r0, #0
 8027320:	4213      	tst	r3, r2
 8027322:	d105      	bne.n	8027330 <__lo0bits+0x22>
 8027324:	3002      	adds	r0, #2
 8027326:	4203      	tst	r3, r0
 8027328:	d003      	beq.n	8027332 <__lo0bits+0x24>
 802732a:	40d3      	lsrs	r3, r2
 802732c:	0010      	movs	r0, r2
 802732e:	600b      	str	r3, [r1, #0]
 8027330:	4770      	bx	lr
 8027332:	089b      	lsrs	r3, r3, #2
 8027334:	600b      	str	r3, [r1, #0]
 8027336:	e7fb      	b.n	8027330 <__lo0bits+0x22>
 8027338:	b29a      	uxth	r2, r3
 802733a:	2a00      	cmp	r2, #0
 802733c:	d101      	bne.n	8027342 <__lo0bits+0x34>
 802733e:	2010      	movs	r0, #16
 8027340:	0c1b      	lsrs	r3, r3, #16
 8027342:	b2da      	uxtb	r2, r3
 8027344:	2a00      	cmp	r2, #0
 8027346:	d101      	bne.n	802734c <__lo0bits+0x3e>
 8027348:	3008      	adds	r0, #8
 802734a:	0a1b      	lsrs	r3, r3, #8
 802734c:	071a      	lsls	r2, r3, #28
 802734e:	d101      	bne.n	8027354 <__lo0bits+0x46>
 8027350:	3004      	adds	r0, #4
 8027352:	091b      	lsrs	r3, r3, #4
 8027354:	079a      	lsls	r2, r3, #30
 8027356:	d101      	bne.n	802735c <__lo0bits+0x4e>
 8027358:	3002      	adds	r0, #2
 802735a:	089b      	lsrs	r3, r3, #2
 802735c:	07da      	lsls	r2, r3, #31
 802735e:	d4e9      	bmi.n	8027334 <__lo0bits+0x26>
 8027360:	3001      	adds	r0, #1
 8027362:	085b      	lsrs	r3, r3, #1
 8027364:	d1e6      	bne.n	8027334 <__lo0bits+0x26>
 8027366:	2020      	movs	r0, #32
 8027368:	e7e2      	b.n	8027330 <__lo0bits+0x22>
	...

0802736c <__i2b>:
 802736c:	b510      	push	{r4, lr}
 802736e:	000c      	movs	r4, r1
 8027370:	2101      	movs	r1, #1
 8027372:	f7ff feb3 	bl	80270dc <_Balloc>
 8027376:	2800      	cmp	r0, #0
 8027378:	d107      	bne.n	802738a <__i2b+0x1e>
 802737a:	2146      	movs	r1, #70	@ 0x46
 802737c:	4c05      	ldr	r4, [pc, #20]	@ (8027394 <__i2b+0x28>)
 802737e:	0002      	movs	r2, r0
 8027380:	4b05      	ldr	r3, [pc, #20]	@ (8027398 <__i2b+0x2c>)
 8027382:	0020      	movs	r0, r4
 8027384:	31ff      	adds	r1, #255	@ 0xff
 8027386:	f000 ff81 	bl	802828c <__assert_func>
 802738a:	2301      	movs	r3, #1
 802738c:	6144      	str	r4, [r0, #20]
 802738e:	6103      	str	r3, [r0, #16]
 8027390:	bd10      	pop	{r4, pc}
 8027392:	46c0      	nop			@ (mov r8, r8)
 8027394:	0802e4ef 	.word	0x0802e4ef
 8027398:	0802e47e 	.word	0x0802e47e

0802739c <__multiply>:
 802739c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802739e:	0014      	movs	r4, r2
 80273a0:	690a      	ldr	r2, [r1, #16]
 80273a2:	6923      	ldr	r3, [r4, #16]
 80273a4:	000d      	movs	r5, r1
 80273a6:	b089      	sub	sp, #36	@ 0x24
 80273a8:	429a      	cmp	r2, r3
 80273aa:	db02      	blt.n	80273b2 <__multiply+0x16>
 80273ac:	0023      	movs	r3, r4
 80273ae:	000c      	movs	r4, r1
 80273b0:	001d      	movs	r5, r3
 80273b2:	6927      	ldr	r7, [r4, #16]
 80273b4:	692e      	ldr	r6, [r5, #16]
 80273b6:	6861      	ldr	r1, [r4, #4]
 80273b8:	19bb      	adds	r3, r7, r6
 80273ba:	9300      	str	r3, [sp, #0]
 80273bc:	68a3      	ldr	r3, [r4, #8]
 80273be:	19ba      	adds	r2, r7, r6
 80273c0:	4293      	cmp	r3, r2
 80273c2:	da00      	bge.n	80273c6 <__multiply+0x2a>
 80273c4:	3101      	adds	r1, #1
 80273c6:	f7ff fe89 	bl	80270dc <_Balloc>
 80273ca:	4684      	mov	ip, r0
 80273cc:	2800      	cmp	r0, #0
 80273ce:	d106      	bne.n	80273de <__multiply+0x42>
 80273d0:	21b1      	movs	r1, #177	@ 0xb1
 80273d2:	4662      	mov	r2, ip
 80273d4:	4b44      	ldr	r3, [pc, #272]	@ (80274e8 <__multiply+0x14c>)
 80273d6:	4845      	ldr	r0, [pc, #276]	@ (80274ec <__multiply+0x150>)
 80273d8:	0049      	lsls	r1, r1, #1
 80273da:	f000 ff57 	bl	802828c <__assert_func>
 80273de:	0002      	movs	r2, r0
 80273e0:	19bb      	adds	r3, r7, r6
 80273e2:	3214      	adds	r2, #20
 80273e4:	009b      	lsls	r3, r3, #2
 80273e6:	18d3      	adds	r3, r2, r3
 80273e8:	9301      	str	r3, [sp, #4]
 80273ea:	2100      	movs	r1, #0
 80273ec:	0013      	movs	r3, r2
 80273ee:	9801      	ldr	r0, [sp, #4]
 80273f0:	4283      	cmp	r3, r0
 80273f2:	d328      	bcc.n	8027446 <__multiply+0xaa>
 80273f4:	0023      	movs	r3, r4
 80273f6:	00bf      	lsls	r7, r7, #2
 80273f8:	3314      	adds	r3, #20
 80273fa:	9304      	str	r3, [sp, #16]
 80273fc:	3514      	adds	r5, #20
 80273fe:	19db      	adds	r3, r3, r7
 8027400:	00b6      	lsls	r6, r6, #2
 8027402:	9302      	str	r3, [sp, #8]
 8027404:	19ab      	adds	r3, r5, r6
 8027406:	9307      	str	r3, [sp, #28]
 8027408:	2304      	movs	r3, #4
 802740a:	9305      	str	r3, [sp, #20]
 802740c:	0023      	movs	r3, r4
 802740e:	9902      	ldr	r1, [sp, #8]
 8027410:	3315      	adds	r3, #21
 8027412:	4299      	cmp	r1, r3
 8027414:	d305      	bcc.n	8027422 <__multiply+0x86>
 8027416:	1b0c      	subs	r4, r1, r4
 8027418:	3c15      	subs	r4, #21
 802741a:	08a4      	lsrs	r4, r4, #2
 802741c:	3401      	adds	r4, #1
 802741e:	00a3      	lsls	r3, r4, #2
 8027420:	9305      	str	r3, [sp, #20]
 8027422:	9b07      	ldr	r3, [sp, #28]
 8027424:	429d      	cmp	r5, r3
 8027426:	d310      	bcc.n	802744a <__multiply+0xae>
 8027428:	9b00      	ldr	r3, [sp, #0]
 802742a:	2b00      	cmp	r3, #0
 802742c:	dd05      	ble.n	802743a <__multiply+0x9e>
 802742e:	9b01      	ldr	r3, [sp, #4]
 8027430:	3b04      	subs	r3, #4
 8027432:	9301      	str	r3, [sp, #4]
 8027434:	681b      	ldr	r3, [r3, #0]
 8027436:	2b00      	cmp	r3, #0
 8027438:	d052      	beq.n	80274e0 <__multiply+0x144>
 802743a:	4663      	mov	r3, ip
 802743c:	4660      	mov	r0, ip
 802743e:	9a00      	ldr	r2, [sp, #0]
 8027440:	611a      	str	r2, [r3, #16]
 8027442:	b009      	add	sp, #36	@ 0x24
 8027444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027446:	c302      	stmia	r3!, {r1}
 8027448:	e7d1      	b.n	80273ee <__multiply+0x52>
 802744a:	682c      	ldr	r4, [r5, #0]
 802744c:	b2a4      	uxth	r4, r4
 802744e:	2c00      	cmp	r4, #0
 8027450:	d01f      	beq.n	8027492 <__multiply+0xf6>
 8027452:	2300      	movs	r3, #0
 8027454:	0017      	movs	r7, r2
 8027456:	9e04      	ldr	r6, [sp, #16]
 8027458:	9303      	str	r3, [sp, #12]
 802745a:	ce08      	ldmia	r6!, {r3}
 802745c:	6839      	ldr	r1, [r7, #0]
 802745e:	9306      	str	r3, [sp, #24]
 8027460:	466b      	mov	r3, sp
 8027462:	8b1b      	ldrh	r3, [r3, #24]
 8027464:	b288      	uxth	r0, r1
 8027466:	4363      	muls	r3, r4
 8027468:	181b      	adds	r3, r3, r0
 802746a:	9803      	ldr	r0, [sp, #12]
 802746c:	0c09      	lsrs	r1, r1, #16
 802746e:	181b      	adds	r3, r3, r0
 8027470:	9806      	ldr	r0, [sp, #24]
 8027472:	0c00      	lsrs	r0, r0, #16
 8027474:	4360      	muls	r0, r4
 8027476:	1840      	adds	r0, r0, r1
 8027478:	0c19      	lsrs	r1, r3, #16
 802747a:	1841      	adds	r1, r0, r1
 802747c:	0c08      	lsrs	r0, r1, #16
 802747e:	b29b      	uxth	r3, r3
 8027480:	0409      	lsls	r1, r1, #16
 8027482:	4319      	orrs	r1, r3
 8027484:	9b02      	ldr	r3, [sp, #8]
 8027486:	9003      	str	r0, [sp, #12]
 8027488:	c702      	stmia	r7!, {r1}
 802748a:	42b3      	cmp	r3, r6
 802748c:	d8e5      	bhi.n	802745a <__multiply+0xbe>
 802748e:	9b05      	ldr	r3, [sp, #20]
 8027490:	50d0      	str	r0, [r2, r3]
 8027492:	682c      	ldr	r4, [r5, #0]
 8027494:	0c24      	lsrs	r4, r4, #16
 8027496:	d020      	beq.n	80274da <__multiply+0x13e>
 8027498:	2100      	movs	r1, #0
 802749a:	0010      	movs	r0, r2
 802749c:	6813      	ldr	r3, [r2, #0]
 802749e:	9e04      	ldr	r6, [sp, #16]
 80274a0:	9103      	str	r1, [sp, #12]
 80274a2:	6831      	ldr	r1, [r6, #0]
 80274a4:	6807      	ldr	r7, [r0, #0]
 80274a6:	b289      	uxth	r1, r1
 80274a8:	4361      	muls	r1, r4
 80274aa:	0c3f      	lsrs	r7, r7, #16
 80274ac:	19c9      	adds	r1, r1, r7
 80274ae:	9f03      	ldr	r7, [sp, #12]
 80274b0:	b29b      	uxth	r3, r3
 80274b2:	19c9      	adds	r1, r1, r7
 80274b4:	040f      	lsls	r7, r1, #16
 80274b6:	431f      	orrs	r7, r3
 80274b8:	6007      	str	r7, [r0, #0]
 80274ba:	ce80      	ldmia	r6!, {r7}
 80274bc:	6843      	ldr	r3, [r0, #4]
 80274be:	0c3f      	lsrs	r7, r7, #16
 80274c0:	4367      	muls	r7, r4
 80274c2:	b29b      	uxth	r3, r3
 80274c4:	0c09      	lsrs	r1, r1, #16
 80274c6:	18fb      	adds	r3, r7, r3
 80274c8:	185b      	adds	r3, r3, r1
 80274ca:	0c19      	lsrs	r1, r3, #16
 80274cc:	9103      	str	r1, [sp, #12]
 80274ce:	9902      	ldr	r1, [sp, #8]
 80274d0:	3004      	adds	r0, #4
 80274d2:	42b1      	cmp	r1, r6
 80274d4:	d8e5      	bhi.n	80274a2 <__multiply+0x106>
 80274d6:	9905      	ldr	r1, [sp, #20]
 80274d8:	5053      	str	r3, [r2, r1]
 80274da:	3504      	adds	r5, #4
 80274dc:	3204      	adds	r2, #4
 80274de:	e7a0      	b.n	8027422 <__multiply+0x86>
 80274e0:	9b00      	ldr	r3, [sp, #0]
 80274e2:	3b01      	subs	r3, #1
 80274e4:	9300      	str	r3, [sp, #0]
 80274e6:	e79f      	b.n	8027428 <__multiply+0x8c>
 80274e8:	0802e47e 	.word	0x0802e47e
 80274ec:	0802e4ef 	.word	0x0802e4ef

080274f0 <__pow5mult>:
 80274f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80274f2:	2303      	movs	r3, #3
 80274f4:	0015      	movs	r5, r2
 80274f6:	0007      	movs	r7, r0
 80274f8:	000e      	movs	r6, r1
 80274fa:	401a      	ands	r2, r3
 80274fc:	421d      	tst	r5, r3
 80274fe:	d008      	beq.n	8027512 <__pow5mult+0x22>
 8027500:	4925      	ldr	r1, [pc, #148]	@ (8027598 <__pow5mult+0xa8>)
 8027502:	3a01      	subs	r2, #1
 8027504:	0092      	lsls	r2, r2, #2
 8027506:	5852      	ldr	r2, [r2, r1]
 8027508:	2300      	movs	r3, #0
 802750a:	0031      	movs	r1, r6
 802750c:	f7ff fe4e 	bl	80271ac <__multadd>
 8027510:	0006      	movs	r6, r0
 8027512:	10ad      	asrs	r5, r5, #2
 8027514:	d03d      	beq.n	8027592 <__pow5mult+0xa2>
 8027516:	69fc      	ldr	r4, [r7, #28]
 8027518:	2c00      	cmp	r4, #0
 802751a:	d10f      	bne.n	802753c <__pow5mult+0x4c>
 802751c:	2010      	movs	r0, #16
 802751e:	f7ff fd0f 	bl	8026f40 <malloc>
 8027522:	1e02      	subs	r2, r0, #0
 8027524:	61f8      	str	r0, [r7, #28]
 8027526:	d105      	bne.n	8027534 <__pow5mult+0x44>
 8027528:	21b4      	movs	r1, #180	@ 0xb4
 802752a:	4b1c      	ldr	r3, [pc, #112]	@ (802759c <__pow5mult+0xac>)
 802752c:	481c      	ldr	r0, [pc, #112]	@ (80275a0 <__pow5mult+0xb0>)
 802752e:	31ff      	adds	r1, #255	@ 0xff
 8027530:	f000 feac 	bl	802828c <__assert_func>
 8027534:	6044      	str	r4, [r0, #4]
 8027536:	6084      	str	r4, [r0, #8]
 8027538:	6004      	str	r4, [r0, #0]
 802753a:	60c4      	str	r4, [r0, #12]
 802753c:	69fb      	ldr	r3, [r7, #28]
 802753e:	689c      	ldr	r4, [r3, #8]
 8027540:	9301      	str	r3, [sp, #4]
 8027542:	2c00      	cmp	r4, #0
 8027544:	d108      	bne.n	8027558 <__pow5mult+0x68>
 8027546:	0038      	movs	r0, r7
 8027548:	4916      	ldr	r1, [pc, #88]	@ (80275a4 <__pow5mult+0xb4>)
 802754a:	f7ff ff0f 	bl	802736c <__i2b>
 802754e:	9b01      	ldr	r3, [sp, #4]
 8027550:	0004      	movs	r4, r0
 8027552:	6098      	str	r0, [r3, #8]
 8027554:	2300      	movs	r3, #0
 8027556:	6003      	str	r3, [r0, #0]
 8027558:	2301      	movs	r3, #1
 802755a:	421d      	tst	r5, r3
 802755c:	d00a      	beq.n	8027574 <__pow5mult+0x84>
 802755e:	0031      	movs	r1, r6
 8027560:	0022      	movs	r2, r4
 8027562:	0038      	movs	r0, r7
 8027564:	f7ff ff1a 	bl	802739c <__multiply>
 8027568:	0031      	movs	r1, r6
 802756a:	9001      	str	r0, [sp, #4]
 802756c:	0038      	movs	r0, r7
 802756e:	f7ff fdf9 	bl	8027164 <_Bfree>
 8027572:	9e01      	ldr	r6, [sp, #4]
 8027574:	106d      	asrs	r5, r5, #1
 8027576:	d00c      	beq.n	8027592 <__pow5mult+0xa2>
 8027578:	6820      	ldr	r0, [r4, #0]
 802757a:	2800      	cmp	r0, #0
 802757c:	d107      	bne.n	802758e <__pow5mult+0x9e>
 802757e:	0022      	movs	r2, r4
 8027580:	0021      	movs	r1, r4
 8027582:	0038      	movs	r0, r7
 8027584:	f7ff ff0a 	bl	802739c <__multiply>
 8027588:	2300      	movs	r3, #0
 802758a:	6020      	str	r0, [r4, #0]
 802758c:	6003      	str	r3, [r0, #0]
 802758e:	0004      	movs	r4, r0
 8027590:	e7e2      	b.n	8027558 <__pow5mult+0x68>
 8027592:	0030      	movs	r0, r6
 8027594:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027596:	46c0      	nop			@ (mov r8, r8)
 8027598:	0802e6ec 	.word	0x0802e6ec
 802759c:	0802e40f 	.word	0x0802e40f
 80275a0:	0802e4ef 	.word	0x0802e4ef
 80275a4:	00000271 	.word	0x00000271

080275a8 <__lshift>:
 80275a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80275aa:	000c      	movs	r4, r1
 80275ac:	0016      	movs	r6, r2
 80275ae:	6923      	ldr	r3, [r4, #16]
 80275b0:	1157      	asrs	r7, r2, #5
 80275b2:	b085      	sub	sp, #20
 80275b4:	18fb      	adds	r3, r7, r3
 80275b6:	9301      	str	r3, [sp, #4]
 80275b8:	3301      	adds	r3, #1
 80275ba:	9300      	str	r3, [sp, #0]
 80275bc:	6849      	ldr	r1, [r1, #4]
 80275be:	68a3      	ldr	r3, [r4, #8]
 80275c0:	9002      	str	r0, [sp, #8]
 80275c2:	9a00      	ldr	r2, [sp, #0]
 80275c4:	4293      	cmp	r3, r2
 80275c6:	db10      	blt.n	80275ea <__lshift+0x42>
 80275c8:	9802      	ldr	r0, [sp, #8]
 80275ca:	f7ff fd87 	bl	80270dc <_Balloc>
 80275ce:	2300      	movs	r3, #0
 80275d0:	0001      	movs	r1, r0
 80275d2:	0005      	movs	r5, r0
 80275d4:	001a      	movs	r2, r3
 80275d6:	3114      	adds	r1, #20
 80275d8:	4298      	cmp	r0, r3
 80275da:	d10c      	bne.n	80275f6 <__lshift+0x4e>
 80275dc:	21ef      	movs	r1, #239	@ 0xef
 80275de:	002a      	movs	r2, r5
 80275e0:	4b25      	ldr	r3, [pc, #148]	@ (8027678 <__lshift+0xd0>)
 80275e2:	4826      	ldr	r0, [pc, #152]	@ (802767c <__lshift+0xd4>)
 80275e4:	0049      	lsls	r1, r1, #1
 80275e6:	f000 fe51 	bl	802828c <__assert_func>
 80275ea:	3101      	adds	r1, #1
 80275ec:	005b      	lsls	r3, r3, #1
 80275ee:	e7e8      	b.n	80275c2 <__lshift+0x1a>
 80275f0:	0098      	lsls	r0, r3, #2
 80275f2:	500a      	str	r2, [r1, r0]
 80275f4:	3301      	adds	r3, #1
 80275f6:	42bb      	cmp	r3, r7
 80275f8:	dbfa      	blt.n	80275f0 <__lshift+0x48>
 80275fa:	43fb      	mvns	r3, r7
 80275fc:	17db      	asrs	r3, r3, #31
 80275fe:	401f      	ands	r7, r3
 8027600:	00bf      	lsls	r7, r7, #2
 8027602:	0023      	movs	r3, r4
 8027604:	201f      	movs	r0, #31
 8027606:	19c9      	adds	r1, r1, r7
 8027608:	0037      	movs	r7, r6
 802760a:	6922      	ldr	r2, [r4, #16]
 802760c:	3314      	adds	r3, #20
 802760e:	0092      	lsls	r2, r2, #2
 8027610:	189a      	adds	r2, r3, r2
 8027612:	4007      	ands	r7, r0
 8027614:	4206      	tst	r6, r0
 8027616:	d029      	beq.n	802766c <__lshift+0xc4>
 8027618:	3001      	adds	r0, #1
 802761a:	1bc0      	subs	r0, r0, r7
 802761c:	9003      	str	r0, [sp, #12]
 802761e:	468c      	mov	ip, r1
 8027620:	2000      	movs	r0, #0
 8027622:	681e      	ldr	r6, [r3, #0]
 8027624:	40be      	lsls	r6, r7
 8027626:	4306      	orrs	r6, r0
 8027628:	4660      	mov	r0, ip
 802762a:	c040      	stmia	r0!, {r6}
 802762c:	4684      	mov	ip, r0
 802762e:	9e03      	ldr	r6, [sp, #12]
 8027630:	cb01      	ldmia	r3!, {r0}
 8027632:	40f0      	lsrs	r0, r6
 8027634:	429a      	cmp	r2, r3
 8027636:	d8f4      	bhi.n	8027622 <__lshift+0x7a>
 8027638:	0026      	movs	r6, r4
 802763a:	3615      	adds	r6, #21
 802763c:	2304      	movs	r3, #4
 802763e:	42b2      	cmp	r2, r6
 8027640:	d304      	bcc.n	802764c <__lshift+0xa4>
 8027642:	1b13      	subs	r3, r2, r4
 8027644:	3b15      	subs	r3, #21
 8027646:	089b      	lsrs	r3, r3, #2
 8027648:	3301      	adds	r3, #1
 802764a:	009b      	lsls	r3, r3, #2
 802764c:	50c8      	str	r0, [r1, r3]
 802764e:	2800      	cmp	r0, #0
 8027650:	d002      	beq.n	8027658 <__lshift+0xb0>
 8027652:	9b01      	ldr	r3, [sp, #4]
 8027654:	3302      	adds	r3, #2
 8027656:	9300      	str	r3, [sp, #0]
 8027658:	9b00      	ldr	r3, [sp, #0]
 802765a:	9802      	ldr	r0, [sp, #8]
 802765c:	3b01      	subs	r3, #1
 802765e:	0021      	movs	r1, r4
 8027660:	612b      	str	r3, [r5, #16]
 8027662:	f7ff fd7f 	bl	8027164 <_Bfree>
 8027666:	0028      	movs	r0, r5
 8027668:	b005      	add	sp, #20
 802766a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802766c:	cb01      	ldmia	r3!, {r0}
 802766e:	c101      	stmia	r1!, {r0}
 8027670:	429a      	cmp	r2, r3
 8027672:	d8fb      	bhi.n	802766c <__lshift+0xc4>
 8027674:	e7f0      	b.n	8027658 <__lshift+0xb0>
 8027676:	46c0      	nop			@ (mov r8, r8)
 8027678:	0802e47e 	.word	0x0802e47e
 802767c:	0802e4ef 	.word	0x0802e4ef

08027680 <__mcmp>:
 8027680:	b530      	push	{r4, r5, lr}
 8027682:	690b      	ldr	r3, [r1, #16]
 8027684:	6904      	ldr	r4, [r0, #16]
 8027686:	0002      	movs	r2, r0
 8027688:	1ae0      	subs	r0, r4, r3
 802768a:	429c      	cmp	r4, r3
 802768c:	d10f      	bne.n	80276ae <__mcmp+0x2e>
 802768e:	3214      	adds	r2, #20
 8027690:	009b      	lsls	r3, r3, #2
 8027692:	3114      	adds	r1, #20
 8027694:	0014      	movs	r4, r2
 8027696:	18c9      	adds	r1, r1, r3
 8027698:	18d2      	adds	r2, r2, r3
 802769a:	3a04      	subs	r2, #4
 802769c:	3904      	subs	r1, #4
 802769e:	6815      	ldr	r5, [r2, #0]
 80276a0:	680b      	ldr	r3, [r1, #0]
 80276a2:	429d      	cmp	r5, r3
 80276a4:	d004      	beq.n	80276b0 <__mcmp+0x30>
 80276a6:	2001      	movs	r0, #1
 80276a8:	429d      	cmp	r5, r3
 80276aa:	d200      	bcs.n	80276ae <__mcmp+0x2e>
 80276ac:	3802      	subs	r0, #2
 80276ae:	bd30      	pop	{r4, r5, pc}
 80276b0:	4294      	cmp	r4, r2
 80276b2:	d3f2      	bcc.n	802769a <__mcmp+0x1a>
 80276b4:	e7fb      	b.n	80276ae <__mcmp+0x2e>
	...

080276b8 <__mdiff>:
 80276b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80276ba:	000c      	movs	r4, r1
 80276bc:	b087      	sub	sp, #28
 80276be:	9000      	str	r0, [sp, #0]
 80276c0:	0011      	movs	r1, r2
 80276c2:	0020      	movs	r0, r4
 80276c4:	0017      	movs	r7, r2
 80276c6:	f7ff ffdb 	bl	8027680 <__mcmp>
 80276ca:	1e05      	subs	r5, r0, #0
 80276cc:	d110      	bne.n	80276f0 <__mdiff+0x38>
 80276ce:	0001      	movs	r1, r0
 80276d0:	9800      	ldr	r0, [sp, #0]
 80276d2:	f7ff fd03 	bl	80270dc <_Balloc>
 80276d6:	1e02      	subs	r2, r0, #0
 80276d8:	d104      	bne.n	80276e4 <__mdiff+0x2c>
 80276da:	4b40      	ldr	r3, [pc, #256]	@ (80277dc <__mdiff+0x124>)
 80276dc:	4840      	ldr	r0, [pc, #256]	@ (80277e0 <__mdiff+0x128>)
 80276de:	4941      	ldr	r1, [pc, #260]	@ (80277e4 <__mdiff+0x12c>)
 80276e0:	f000 fdd4 	bl	802828c <__assert_func>
 80276e4:	2301      	movs	r3, #1
 80276e6:	6145      	str	r5, [r0, #20]
 80276e8:	6103      	str	r3, [r0, #16]
 80276ea:	0010      	movs	r0, r2
 80276ec:	b007      	add	sp, #28
 80276ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80276f0:	2600      	movs	r6, #0
 80276f2:	42b0      	cmp	r0, r6
 80276f4:	da03      	bge.n	80276fe <__mdiff+0x46>
 80276f6:	0023      	movs	r3, r4
 80276f8:	003c      	movs	r4, r7
 80276fa:	001f      	movs	r7, r3
 80276fc:	3601      	adds	r6, #1
 80276fe:	6861      	ldr	r1, [r4, #4]
 8027700:	9800      	ldr	r0, [sp, #0]
 8027702:	f7ff fceb 	bl	80270dc <_Balloc>
 8027706:	1e02      	subs	r2, r0, #0
 8027708:	d103      	bne.n	8027712 <__mdiff+0x5a>
 802770a:	4b34      	ldr	r3, [pc, #208]	@ (80277dc <__mdiff+0x124>)
 802770c:	4834      	ldr	r0, [pc, #208]	@ (80277e0 <__mdiff+0x128>)
 802770e:	4936      	ldr	r1, [pc, #216]	@ (80277e8 <__mdiff+0x130>)
 8027710:	e7e6      	b.n	80276e0 <__mdiff+0x28>
 8027712:	6923      	ldr	r3, [r4, #16]
 8027714:	3414      	adds	r4, #20
 8027716:	9300      	str	r3, [sp, #0]
 8027718:	009b      	lsls	r3, r3, #2
 802771a:	18e3      	adds	r3, r4, r3
 802771c:	0021      	movs	r1, r4
 802771e:	9401      	str	r4, [sp, #4]
 8027720:	003c      	movs	r4, r7
 8027722:	9302      	str	r3, [sp, #8]
 8027724:	693b      	ldr	r3, [r7, #16]
 8027726:	3414      	adds	r4, #20
 8027728:	009b      	lsls	r3, r3, #2
 802772a:	18e3      	adds	r3, r4, r3
 802772c:	9303      	str	r3, [sp, #12]
 802772e:	0003      	movs	r3, r0
 8027730:	60c6      	str	r6, [r0, #12]
 8027732:	468c      	mov	ip, r1
 8027734:	2000      	movs	r0, #0
 8027736:	3314      	adds	r3, #20
 8027738:	9304      	str	r3, [sp, #16]
 802773a:	9305      	str	r3, [sp, #20]
 802773c:	4663      	mov	r3, ip
 802773e:	cb20      	ldmia	r3!, {r5}
 8027740:	b2a9      	uxth	r1, r5
 8027742:	000e      	movs	r6, r1
 8027744:	469c      	mov	ip, r3
 8027746:	cc08      	ldmia	r4!, {r3}
 8027748:	0c2d      	lsrs	r5, r5, #16
 802774a:	b299      	uxth	r1, r3
 802774c:	1a71      	subs	r1, r6, r1
 802774e:	1809      	adds	r1, r1, r0
 8027750:	0c1b      	lsrs	r3, r3, #16
 8027752:	1408      	asrs	r0, r1, #16
 8027754:	1aeb      	subs	r3, r5, r3
 8027756:	181b      	adds	r3, r3, r0
 8027758:	1418      	asrs	r0, r3, #16
 802775a:	b289      	uxth	r1, r1
 802775c:	041b      	lsls	r3, r3, #16
 802775e:	4319      	orrs	r1, r3
 8027760:	9b05      	ldr	r3, [sp, #20]
 8027762:	c302      	stmia	r3!, {r1}
 8027764:	9305      	str	r3, [sp, #20]
 8027766:	9b03      	ldr	r3, [sp, #12]
 8027768:	42a3      	cmp	r3, r4
 802776a:	d8e7      	bhi.n	802773c <__mdiff+0x84>
 802776c:	0039      	movs	r1, r7
 802776e:	9c03      	ldr	r4, [sp, #12]
 8027770:	3115      	adds	r1, #21
 8027772:	2304      	movs	r3, #4
 8027774:	428c      	cmp	r4, r1
 8027776:	d304      	bcc.n	8027782 <__mdiff+0xca>
 8027778:	1be3      	subs	r3, r4, r7
 802777a:	3b15      	subs	r3, #21
 802777c:	089b      	lsrs	r3, r3, #2
 802777e:	3301      	adds	r3, #1
 8027780:	009b      	lsls	r3, r3, #2
 8027782:	9901      	ldr	r1, [sp, #4]
 8027784:	18cd      	adds	r5, r1, r3
 8027786:	9904      	ldr	r1, [sp, #16]
 8027788:	002e      	movs	r6, r5
 802778a:	18cb      	adds	r3, r1, r3
 802778c:	001f      	movs	r7, r3
 802778e:	9902      	ldr	r1, [sp, #8]
 8027790:	428e      	cmp	r6, r1
 8027792:	d311      	bcc.n	80277b8 <__mdiff+0x100>
 8027794:	9c02      	ldr	r4, [sp, #8]
 8027796:	1ee9      	subs	r1, r5, #3
 8027798:	2000      	movs	r0, #0
 802779a:	428c      	cmp	r4, r1
 802779c:	d304      	bcc.n	80277a8 <__mdiff+0xf0>
 802779e:	0021      	movs	r1, r4
 80277a0:	3103      	adds	r1, #3
 80277a2:	1b49      	subs	r1, r1, r5
 80277a4:	0889      	lsrs	r1, r1, #2
 80277a6:	0088      	lsls	r0, r1, #2
 80277a8:	181b      	adds	r3, r3, r0
 80277aa:	3b04      	subs	r3, #4
 80277ac:	6819      	ldr	r1, [r3, #0]
 80277ae:	2900      	cmp	r1, #0
 80277b0:	d010      	beq.n	80277d4 <__mdiff+0x11c>
 80277b2:	9b00      	ldr	r3, [sp, #0]
 80277b4:	6113      	str	r3, [r2, #16]
 80277b6:	e798      	b.n	80276ea <__mdiff+0x32>
 80277b8:	4684      	mov	ip, r0
 80277ba:	ce02      	ldmia	r6!, {r1}
 80277bc:	b288      	uxth	r0, r1
 80277be:	4460      	add	r0, ip
 80277c0:	1400      	asrs	r0, r0, #16
 80277c2:	0c0c      	lsrs	r4, r1, #16
 80277c4:	1904      	adds	r4, r0, r4
 80277c6:	4461      	add	r1, ip
 80277c8:	1420      	asrs	r0, r4, #16
 80277ca:	b289      	uxth	r1, r1
 80277cc:	0424      	lsls	r4, r4, #16
 80277ce:	4321      	orrs	r1, r4
 80277d0:	c702      	stmia	r7!, {r1}
 80277d2:	e7dc      	b.n	802778e <__mdiff+0xd6>
 80277d4:	9900      	ldr	r1, [sp, #0]
 80277d6:	3901      	subs	r1, #1
 80277d8:	9100      	str	r1, [sp, #0]
 80277da:	e7e6      	b.n	80277aa <__mdiff+0xf2>
 80277dc:	0802e47e 	.word	0x0802e47e
 80277e0:	0802e4ef 	.word	0x0802e4ef
 80277e4:	00000237 	.word	0x00000237
 80277e8:	00000245 	.word	0x00000245

080277ec <__ulp>:
 80277ec:	b510      	push	{r4, lr}
 80277ee:	2400      	movs	r4, #0
 80277f0:	4b0c      	ldr	r3, [pc, #48]	@ (8027824 <__ulp+0x38>)
 80277f2:	4a0d      	ldr	r2, [pc, #52]	@ (8027828 <__ulp+0x3c>)
 80277f4:	400b      	ands	r3, r1
 80277f6:	189b      	adds	r3, r3, r2
 80277f8:	42a3      	cmp	r3, r4
 80277fa:	dc06      	bgt.n	802780a <__ulp+0x1e>
 80277fc:	425b      	negs	r3, r3
 80277fe:	151a      	asrs	r2, r3, #20
 8027800:	2a13      	cmp	r2, #19
 8027802:	dc05      	bgt.n	8027810 <__ulp+0x24>
 8027804:	2380      	movs	r3, #128	@ 0x80
 8027806:	031b      	lsls	r3, r3, #12
 8027808:	4113      	asrs	r3, r2
 802780a:	0019      	movs	r1, r3
 802780c:	0020      	movs	r0, r4
 802780e:	bd10      	pop	{r4, pc}
 8027810:	3a14      	subs	r2, #20
 8027812:	2401      	movs	r4, #1
 8027814:	2a1e      	cmp	r2, #30
 8027816:	dc02      	bgt.n	802781e <__ulp+0x32>
 8027818:	2480      	movs	r4, #128	@ 0x80
 802781a:	0624      	lsls	r4, r4, #24
 802781c:	40d4      	lsrs	r4, r2
 802781e:	2300      	movs	r3, #0
 8027820:	e7f3      	b.n	802780a <__ulp+0x1e>
 8027822:	46c0      	nop			@ (mov r8, r8)
 8027824:	7ff00000 	.word	0x7ff00000
 8027828:	fcc00000 	.word	0xfcc00000

0802782c <__b2d>:
 802782c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802782e:	0006      	movs	r6, r0
 8027830:	6903      	ldr	r3, [r0, #16]
 8027832:	3614      	adds	r6, #20
 8027834:	009b      	lsls	r3, r3, #2
 8027836:	18f3      	adds	r3, r6, r3
 8027838:	1f1d      	subs	r5, r3, #4
 802783a:	682c      	ldr	r4, [r5, #0]
 802783c:	000f      	movs	r7, r1
 802783e:	0020      	movs	r0, r4
 8027840:	9301      	str	r3, [sp, #4]
 8027842:	f7ff fd43 	bl	80272cc <__hi0bits>
 8027846:	2220      	movs	r2, #32
 8027848:	1a12      	subs	r2, r2, r0
 802784a:	603a      	str	r2, [r7, #0]
 802784c:	0003      	movs	r3, r0
 802784e:	4a1c      	ldr	r2, [pc, #112]	@ (80278c0 <__b2d+0x94>)
 8027850:	280a      	cmp	r0, #10
 8027852:	dc15      	bgt.n	8027880 <__b2d+0x54>
 8027854:	210b      	movs	r1, #11
 8027856:	0027      	movs	r7, r4
 8027858:	1a09      	subs	r1, r1, r0
 802785a:	40cf      	lsrs	r7, r1
 802785c:	433a      	orrs	r2, r7
 802785e:	468c      	mov	ip, r1
 8027860:	0011      	movs	r1, r2
 8027862:	2200      	movs	r2, #0
 8027864:	42ae      	cmp	r6, r5
 8027866:	d202      	bcs.n	802786e <__b2d+0x42>
 8027868:	9a01      	ldr	r2, [sp, #4]
 802786a:	3a08      	subs	r2, #8
 802786c:	6812      	ldr	r2, [r2, #0]
 802786e:	3315      	adds	r3, #21
 8027870:	409c      	lsls	r4, r3
 8027872:	4663      	mov	r3, ip
 8027874:	0027      	movs	r7, r4
 8027876:	40da      	lsrs	r2, r3
 8027878:	4317      	orrs	r7, r2
 802787a:	0038      	movs	r0, r7
 802787c:	b003      	add	sp, #12
 802787e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027880:	2700      	movs	r7, #0
 8027882:	42ae      	cmp	r6, r5
 8027884:	d202      	bcs.n	802788c <__b2d+0x60>
 8027886:	9d01      	ldr	r5, [sp, #4]
 8027888:	3d08      	subs	r5, #8
 802788a:	682f      	ldr	r7, [r5, #0]
 802788c:	210b      	movs	r1, #11
 802788e:	4249      	negs	r1, r1
 8027890:	468c      	mov	ip, r1
 8027892:	449c      	add	ip, r3
 8027894:	2b0b      	cmp	r3, #11
 8027896:	d010      	beq.n	80278ba <__b2d+0x8e>
 8027898:	4661      	mov	r1, ip
 802789a:	2320      	movs	r3, #32
 802789c:	408c      	lsls	r4, r1
 802789e:	1a5b      	subs	r3, r3, r1
 80278a0:	0039      	movs	r1, r7
 80278a2:	40d9      	lsrs	r1, r3
 80278a4:	430c      	orrs	r4, r1
 80278a6:	4322      	orrs	r2, r4
 80278a8:	0011      	movs	r1, r2
 80278aa:	2200      	movs	r2, #0
 80278ac:	42b5      	cmp	r5, r6
 80278ae:	d901      	bls.n	80278b4 <__b2d+0x88>
 80278b0:	3d04      	subs	r5, #4
 80278b2:	682a      	ldr	r2, [r5, #0]
 80278b4:	4664      	mov	r4, ip
 80278b6:	40a7      	lsls	r7, r4
 80278b8:	e7dd      	b.n	8027876 <__b2d+0x4a>
 80278ba:	4322      	orrs	r2, r4
 80278bc:	0011      	movs	r1, r2
 80278be:	e7dc      	b.n	802787a <__b2d+0x4e>
 80278c0:	3ff00000 	.word	0x3ff00000

080278c4 <__d2b>:
 80278c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80278c6:	2101      	movs	r1, #1
 80278c8:	0016      	movs	r6, r2
 80278ca:	001f      	movs	r7, r3
 80278cc:	f7ff fc06 	bl	80270dc <_Balloc>
 80278d0:	1e04      	subs	r4, r0, #0
 80278d2:	d105      	bne.n	80278e0 <__d2b+0x1c>
 80278d4:	0022      	movs	r2, r4
 80278d6:	4b25      	ldr	r3, [pc, #148]	@ (802796c <__d2b+0xa8>)
 80278d8:	4825      	ldr	r0, [pc, #148]	@ (8027970 <__d2b+0xac>)
 80278da:	4926      	ldr	r1, [pc, #152]	@ (8027974 <__d2b+0xb0>)
 80278dc:	f000 fcd6 	bl	802828c <__assert_func>
 80278e0:	033b      	lsls	r3, r7, #12
 80278e2:	007d      	lsls	r5, r7, #1
 80278e4:	0b1b      	lsrs	r3, r3, #12
 80278e6:	0d6d      	lsrs	r5, r5, #21
 80278e8:	d002      	beq.n	80278f0 <__d2b+0x2c>
 80278ea:	2280      	movs	r2, #128	@ 0x80
 80278ec:	0352      	lsls	r2, r2, #13
 80278ee:	4313      	orrs	r3, r2
 80278f0:	9301      	str	r3, [sp, #4]
 80278f2:	2e00      	cmp	r6, #0
 80278f4:	d025      	beq.n	8027942 <__d2b+0x7e>
 80278f6:	4668      	mov	r0, sp
 80278f8:	9600      	str	r6, [sp, #0]
 80278fa:	f7ff fd08 	bl	802730e <__lo0bits>
 80278fe:	9b01      	ldr	r3, [sp, #4]
 8027900:	9900      	ldr	r1, [sp, #0]
 8027902:	2800      	cmp	r0, #0
 8027904:	d01b      	beq.n	802793e <__d2b+0x7a>
 8027906:	2220      	movs	r2, #32
 8027908:	001e      	movs	r6, r3
 802790a:	1a12      	subs	r2, r2, r0
 802790c:	4096      	lsls	r6, r2
 802790e:	0032      	movs	r2, r6
 8027910:	40c3      	lsrs	r3, r0
 8027912:	430a      	orrs	r2, r1
 8027914:	6162      	str	r2, [r4, #20]
 8027916:	9301      	str	r3, [sp, #4]
 8027918:	9e01      	ldr	r6, [sp, #4]
 802791a:	61a6      	str	r6, [r4, #24]
 802791c:	1e73      	subs	r3, r6, #1
 802791e:	419e      	sbcs	r6, r3
 8027920:	3601      	adds	r6, #1
 8027922:	6126      	str	r6, [r4, #16]
 8027924:	2d00      	cmp	r5, #0
 8027926:	d014      	beq.n	8027952 <__d2b+0x8e>
 8027928:	2635      	movs	r6, #53	@ 0x35
 802792a:	4b13      	ldr	r3, [pc, #76]	@ (8027978 <__d2b+0xb4>)
 802792c:	18ed      	adds	r5, r5, r3
 802792e:	9b08      	ldr	r3, [sp, #32]
 8027930:	182d      	adds	r5, r5, r0
 8027932:	601d      	str	r5, [r3, #0]
 8027934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027936:	1a36      	subs	r6, r6, r0
 8027938:	601e      	str	r6, [r3, #0]
 802793a:	0020      	movs	r0, r4
 802793c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802793e:	6161      	str	r1, [r4, #20]
 8027940:	e7ea      	b.n	8027918 <__d2b+0x54>
 8027942:	a801      	add	r0, sp, #4
 8027944:	f7ff fce3 	bl	802730e <__lo0bits>
 8027948:	9b01      	ldr	r3, [sp, #4]
 802794a:	2601      	movs	r6, #1
 802794c:	6163      	str	r3, [r4, #20]
 802794e:	3020      	adds	r0, #32
 8027950:	e7e7      	b.n	8027922 <__d2b+0x5e>
 8027952:	4b0a      	ldr	r3, [pc, #40]	@ (802797c <__d2b+0xb8>)
 8027954:	18c0      	adds	r0, r0, r3
 8027956:	9b08      	ldr	r3, [sp, #32]
 8027958:	6018      	str	r0, [r3, #0]
 802795a:	4b09      	ldr	r3, [pc, #36]	@ (8027980 <__d2b+0xbc>)
 802795c:	18f3      	adds	r3, r6, r3
 802795e:	009b      	lsls	r3, r3, #2
 8027960:	18e3      	adds	r3, r4, r3
 8027962:	6958      	ldr	r0, [r3, #20]
 8027964:	f7ff fcb2 	bl	80272cc <__hi0bits>
 8027968:	0176      	lsls	r6, r6, #5
 802796a:	e7e3      	b.n	8027934 <__d2b+0x70>
 802796c:	0802e47e 	.word	0x0802e47e
 8027970:	0802e4ef 	.word	0x0802e4ef
 8027974:	0000030f 	.word	0x0000030f
 8027978:	fffffbcd 	.word	0xfffffbcd
 802797c:	fffffbce 	.word	0xfffffbce
 8027980:	3fffffff 	.word	0x3fffffff

08027984 <__ratio>:
 8027984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027986:	b087      	sub	sp, #28
 8027988:	000f      	movs	r7, r1
 802798a:	a904      	add	r1, sp, #16
 802798c:	0006      	movs	r6, r0
 802798e:	f7ff ff4d 	bl	802782c <__b2d>
 8027992:	9000      	str	r0, [sp, #0]
 8027994:	9101      	str	r1, [sp, #4]
 8027996:	9b00      	ldr	r3, [sp, #0]
 8027998:	9c01      	ldr	r4, [sp, #4]
 802799a:	0038      	movs	r0, r7
 802799c:	a905      	add	r1, sp, #20
 802799e:	9302      	str	r3, [sp, #8]
 80279a0:	9403      	str	r4, [sp, #12]
 80279a2:	f7ff ff43 	bl	802782c <__b2d>
 80279a6:	000d      	movs	r5, r1
 80279a8:	0002      	movs	r2, r0
 80279aa:	000b      	movs	r3, r1
 80279ac:	6930      	ldr	r0, [r6, #16]
 80279ae:	6939      	ldr	r1, [r7, #16]
 80279b0:	9e04      	ldr	r6, [sp, #16]
 80279b2:	1a40      	subs	r0, r0, r1
 80279b4:	9905      	ldr	r1, [sp, #20]
 80279b6:	0140      	lsls	r0, r0, #5
 80279b8:	1a71      	subs	r1, r6, r1
 80279ba:	1841      	adds	r1, r0, r1
 80279bc:	0508      	lsls	r0, r1, #20
 80279be:	2900      	cmp	r1, #0
 80279c0:	dd08      	ble.n	80279d4 <__ratio+0x50>
 80279c2:	9901      	ldr	r1, [sp, #4]
 80279c4:	1841      	adds	r1, r0, r1
 80279c6:	9103      	str	r1, [sp, #12]
 80279c8:	9802      	ldr	r0, [sp, #8]
 80279ca:	9903      	ldr	r1, [sp, #12]
 80279cc:	f7da fb88 	bl	80020e0 <__aeabi_ddiv>
 80279d0:	b007      	add	sp, #28
 80279d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80279d4:	1a2b      	subs	r3, r5, r0
 80279d6:	e7f7      	b.n	80279c8 <__ratio+0x44>

080279d8 <__copybits>:
 80279d8:	b570      	push	{r4, r5, r6, lr}
 80279da:	0014      	movs	r4, r2
 80279dc:	0005      	movs	r5, r0
 80279de:	3901      	subs	r1, #1
 80279e0:	6913      	ldr	r3, [r2, #16]
 80279e2:	1149      	asrs	r1, r1, #5
 80279e4:	3101      	adds	r1, #1
 80279e6:	0089      	lsls	r1, r1, #2
 80279e8:	3414      	adds	r4, #20
 80279ea:	009b      	lsls	r3, r3, #2
 80279ec:	1841      	adds	r1, r0, r1
 80279ee:	18e3      	adds	r3, r4, r3
 80279f0:	42a3      	cmp	r3, r4
 80279f2:	d80d      	bhi.n	8027a10 <__copybits+0x38>
 80279f4:	0014      	movs	r4, r2
 80279f6:	3411      	adds	r4, #17
 80279f8:	2500      	movs	r5, #0
 80279fa:	42a3      	cmp	r3, r4
 80279fc:	d303      	bcc.n	8027a06 <__copybits+0x2e>
 80279fe:	1a9b      	subs	r3, r3, r2
 8027a00:	3b11      	subs	r3, #17
 8027a02:	089b      	lsrs	r3, r3, #2
 8027a04:	009d      	lsls	r5, r3, #2
 8027a06:	2300      	movs	r3, #0
 8027a08:	1940      	adds	r0, r0, r5
 8027a0a:	4281      	cmp	r1, r0
 8027a0c:	d803      	bhi.n	8027a16 <__copybits+0x3e>
 8027a0e:	bd70      	pop	{r4, r5, r6, pc}
 8027a10:	cc40      	ldmia	r4!, {r6}
 8027a12:	c540      	stmia	r5!, {r6}
 8027a14:	e7ec      	b.n	80279f0 <__copybits+0x18>
 8027a16:	c008      	stmia	r0!, {r3}
 8027a18:	e7f7      	b.n	8027a0a <__copybits+0x32>

08027a1a <__any_on>:
 8027a1a:	0002      	movs	r2, r0
 8027a1c:	6900      	ldr	r0, [r0, #16]
 8027a1e:	b510      	push	{r4, lr}
 8027a20:	3214      	adds	r2, #20
 8027a22:	114b      	asrs	r3, r1, #5
 8027a24:	4298      	cmp	r0, r3
 8027a26:	db13      	blt.n	8027a50 <__any_on+0x36>
 8027a28:	dd0c      	ble.n	8027a44 <__any_on+0x2a>
 8027a2a:	241f      	movs	r4, #31
 8027a2c:	0008      	movs	r0, r1
 8027a2e:	4020      	ands	r0, r4
 8027a30:	4221      	tst	r1, r4
 8027a32:	d007      	beq.n	8027a44 <__any_on+0x2a>
 8027a34:	0099      	lsls	r1, r3, #2
 8027a36:	588c      	ldr	r4, [r1, r2]
 8027a38:	0021      	movs	r1, r4
 8027a3a:	40c1      	lsrs	r1, r0
 8027a3c:	4081      	lsls	r1, r0
 8027a3e:	2001      	movs	r0, #1
 8027a40:	428c      	cmp	r4, r1
 8027a42:	d104      	bne.n	8027a4e <__any_on+0x34>
 8027a44:	009b      	lsls	r3, r3, #2
 8027a46:	18d3      	adds	r3, r2, r3
 8027a48:	4293      	cmp	r3, r2
 8027a4a:	d803      	bhi.n	8027a54 <__any_on+0x3a>
 8027a4c:	2000      	movs	r0, #0
 8027a4e:	bd10      	pop	{r4, pc}
 8027a50:	0003      	movs	r3, r0
 8027a52:	e7f7      	b.n	8027a44 <__any_on+0x2a>
 8027a54:	3b04      	subs	r3, #4
 8027a56:	6819      	ldr	r1, [r3, #0]
 8027a58:	2900      	cmp	r1, #0
 8027a5a:	d0f5      	beq.n	8027a48 <__any_on+0x2e>
 8027a5c:	2001      	movs	r0, #1
 8027a5e:	e7f6      	b.n	8027a4e <__any_on+0x34>

08027a60 <__ascii_wctomb>:
 8027a60:	0003      	movs	r3, r0
 8027a62:	1e08      	subs	r0, r1, #0
 8027a64:	d005      	beq.n	8027a72 <__ascii_wctomb+0x12>
 8027a66:	2aff      	cmp	r2, #255	@ 0xff
 8027a68:	d904      	bls.n	8027a74 <__ascii_wctomb+0x14>
 8027a6a:	228a      	movs	r2, #138	@ 0x8a
 8027a6c:	2001      	movs	r0, #1
 8027a6e:	601a      	str	r2, [r3, #0]
 8027a70:	4240      	negs	r0, r0
 8027a72:	4770      	bx	lr
 8027a74:	2001      	movs	r0, #1
 8027a76:	700a      	strb	r2, [r1, #0]
 8027a78:	e7fb      	b.n	8027a72 <__ascii_wctomb+0x12>
	...

08027a7c <__ssputs_r>:
 8027a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027a7e:	688e      	ldr	r6, [r1, #8]
 8027a80:	b085      	sub	sp, #20
 8027a82:	001f      	movs	r7, r3
 8027a84:	000c      	movs	r4, r1
 8027a86:	680b      	ldr	r3, [r1, #0]
 8027a88:	9002      	str	r0, [sp, #8]
 8027a8a:	9203      	str	r2, [sp, #12]
 8027a8c:	42be      	cmp	r6, r7
 8027a8e:	d830      	bhi.n	8027af2 <__ssputs_r+0x76>
 8027a90:	210c      	movs	r1, #12
 8027a92:	5e62      	ldrsh	r2, [r4, r1]
 8027a94:	2190      	movs	r1, #144	@ 0x90
 8027a96:	00c9      	lsls	r1, r1, #3
 8027a98:	420a      	tst	r2, r1
 8027a9a:	d028      	beq.n	8027aee <__ssputs_r+0x72>
 8027a9c:	2003      	movs	r0, #3
 8027a9e:	6921      	ldr	r1, [r4, #16]
 8027aa0:	1a5b      	subs	r3, r3, r1
 8027aa2:	9301      	str	r3, [sp, #4]
 8027aa4:	6963      	ldr	r3, [r4, #20]
 8027aa6:	4343      	muls	r3, r0
 8027aa8:	9801      	ldr	r0, [sp, #4]
 8027aaa:	0fdd      	lsrs	r5, r3, #31
 8027aac:	18ed      	adds	r5, r5, r3
 8027aae:	1c7b      	adds	r3, r7, #1
 8027ab0:	181b      	adds	r3, r3, r0
 8027ab2:	106d      	asrs	r5, r5, #1
 8027ab4:	42ab      	cmp	r3, r5
 8027ab6:	d900      	bls.n	8027aba <__ssputs_r+0x3e>
 8027ab8:	001d      	movs	r5, r3
 8027aba:	0552      	lsls	r2, r2, #21
 8027abc:	d528      	bpl.n	8027b10 <__ssputs_r+0x94>
 8027abe:	0029      	movs	r1, r5
 8027ac0:	9802      	ldr	r0, [sp, #8]
 8027ac2:	f7ff fa69 	bl	8026f98 <_malloc_r>
 8027ac6:	1e06      	subs	r6, r0, #0
 8027ac8:	d02c      	beq.n	8027b24 <__ssputs_r+0xa8>
 8027aca:	9a01      	ldr	r2, [sp, #4]
 8027acc:	6921      	ldr	r1, [r4, #16]
 8027ace:	f7fe f80d 	bl	8025aec <memcpy>
 8027ad2:	89a2      	ldrh	r2, [r4, #12]
 8027ad4:	4b18      	ldr	r3, [pc, #96]	@ (8027b38 <__ssputs_r+0xbc>)
 8027ad6:	401a      	ands	r2, r3
 8027ad8:	2380      	movs	r3, #128	@ 0x80
 8027ada:	4313      	orrs	r3, r2
 8027adc:	81a3      	strh	r3, [r4, #12]
 8027ade:	9b01      	ldr	r3, [sp, #4]
 8027ae0:	6126      	str	r6, [r4, #16]
 8027ae2:	18f6      	adds	r6, r6, r3
 8027ae4:	6026      	str	r6, [r4, #0]
 8027ae6:	003e      	movs	r6, r7
 8027ae8:	6165      	str	r5, [r4, #20]
 8027aea:	1aed      	subs	r5, r5, r3
 8027aec:	60a5      	str	r5, [r4, #8]
 8027aee:	42be      	cmp	r6, r7
 8027af0:	d900      	bls.n	8027af4 <__ssputs_r+0x78>
 8027af2:	003e      	movs	r6, r7
 8027af4:	0032      	movs	r2, r6
 8027af6:	9903      	ldr	r1, [sp, #12]
 8027af8:	6820      	ldr	r0, [r4, #0]
 8027afa:	f000 fb7e 	bl	80281fa <memmove>
 8027afe:	2000      	movs	r0, #0
 8027b00:	68a3      	ldr	r3, [r4, #8]
 8027b02:	1b9b      	subs	r3, r3, r6
 8027b04:	60a3      	str	r3, [r4, #8]
 8027b06:	6823      	ldr	r3, [r4, #0]
 8027b08:	199b      	adds	r3, r3, r6
 8027b0a:	6023      	str	r3, [r4, #0]
 8027b0c:	b005      	add	sp, #20
 8027b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027b10:	002a      	movs	r2, r5
 8027b12:	9802      	ldr	r0, [sp, #8]
 8027b14:	f000 fc05 	bl	8028322 <_realloc_r>
 8027b18:	1e06      	subs	r6, r0, #0
 8027b1a:	d1e0      	bne.n	8027ade <__ssputs_r+0x62>
 8027b1c:	6921      	ldr	r1, [r4, #16]
 8027b1e:	9802      	ldr	r0, [sp, #8]
 8027b20:	f7fe fe6a 	bl	80267f8 <_free_r>
 8027b24:	230c      	movs	r3, #12
 8027b26:	2001      	movs	r0, #1
 8027b28:	9a02      	ldr	r2, [sp, #8]
 8027b2a:	4240      	negs	r0, r0
 8027b2c:	6013      	str	r3, [r2, #0]
 8027b2e:	89a2      	ldrh	r2, [r4, #12]
 8027b30:	3334      	adds	r3, #52	@ 0x34
 8027b32:	4313      	orrs	r3, r2
 8027b34:	81a3      	strh	r3, [r4, #12]
 8027b36:	e7e9      	b.n	8027b0c <__ssputs_r+0x90>
 8027b38:	fffffb7f 	.word	0xfffffb7f

08027b3c <_svfiprintf_r>:
 8027b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027b3e:	b0a1      	sub	sp, #132	@ 0x84
 8027b40:	9003      	str	r0, [sp, #12]
 8027b42:	001d      	movs	r5, r3
 8027b44:	898b      	ldrh	r3, [r1, #12]
 8027b46:	000f      	movs	r7, r1
 8027b48:	0016      	movs	r6, r2
 8027b4a:	061b      	lsls	r3, r3, #24
 8027b4c:	d511      	bpl.n	8027b72 <_svfiprintf_r+0x36>
 8027b4e:	690b      	ldr	r3, [r1, #16]
 8027b50:	2b00      	cmp	r3, #0
 8027b52:	d10e      	bne.n	8027b72 <_svfiprintf_r+0x36>
 8027b54:	2140      	movs	r1, #64	@ 0x40
 8027b56:	f7ff fa1f 	bl	8026f98 <_malloc_r>
 8027b5a:	6038      	str	r0, [r7, #0]
 8027b5c:	6138      	str	r0, [r7, #16]
 8027b5e:	2800      	cmp	r0, #0
 8027b60:	d105      	bne.n	8027b6e <_svfiprintf_r+0x32>
 8027b62:	230c      	movs	r3, #12
 8027b64:	9a03      	ldr	r2, [sp, #12]
 8027b66:	6013      	str	r3, [r2, #0]
 8027b68:	2001      	movs	r0, #1
 8027b6a:	4240      	negs	r0, r0
 8027b6c:	e0cf      	b.n	8027d0e <_svfiprintf_r+0x1d2>
 8027b6e:	2340      	movs	r3, #64	@ 0x40
 8027b70:	617b      	str	r3, [r7, #20]
 8027b72:	2300      	movs	r3, #0
 8027b74:	ac08      	add	r4, sp, #32
 8027b76:	6163      	str	r3, [r4, #20]
 8027b78:	3320      	adds	r3, #32
 8027b7a:	7663      	strb	r3, [r4, #25]
 8027b7c:	3310      	adds	r3, #16
 8027b7e:	76a3      	strb	r3, [r4, #26]
 8027b80:	9507      	str	r5, [sp, #28]
 8027b82:	0035      	movs	r5, r6
 8027b84:	782b      	ldrb	r3, [r5, #0]
 8027b86:	2b00      	cmp	r3, #0
 8027b88:	d001      	beq.n	8027b8e <_svfiprintf_r+0x52>
 8027b8a:	2b25      	cmp	r3, #37	@ 0x25
 8027b8c:	d148      	bne.n	8027c20 <_svfiprintf_r+0xe4>
 8027b8e:	1bab      	subs	r3, r5, r6
 8027b90:	9305      	str	r3, [sp, #20]
 8027b92:	42b5      	cmp	r5, r6
 8027b94:	d00b      	beq.n	8027bae <_svfiprintf_r+0x72>
 8027b96:	0032      	movs	r2, r6
 8027b98:	0039      	movs	r1, r7
 8027b9a:	9803      	ldr	r0, [sp, #12]
 8027b9c:	f7ff ff6e 	bl	8027a7c <__ssputs_r>
 8027ba0:	3001      	adds	r0, #1
 8027ba2:	d100      	bne.n	8027ba6 <_svfiprintf_r+0x6a>
 8027ba4:	e0ae      	b.n	8027d04 <_svfiprintf_r+0x1c8>
 8027ba6:	6963      	ldr	r3, [r4, #20]
 8027ba8:	9a05      	ldr	r2, [sp, #20]
 8027baa:	189b      	adds	r3, r3, r2
 8027bac:	6163      	str	r3, [r4, #20]
 8027bae:	782b      	ldrb	r3, [r5, #0]
 8027bb0:	2b00      	cmp	r3, #0
 8027bb2:	d100      	bne.n	8027bb6 <_svfiprintf_r+0x7a>
 8027bb4:	e0a6      	b.n	8027d04 <_svfiprintf_r+0x1c8>
 8027bb6:	2201      	movs	r2, #1
 8027bb8:	2300      	movs	r3, #0
 8027bba:	4252      	negs	r2, r2
 8027bbc:	6062      	str	r2, [r4, #4]
 8027bbe:	a904      	add	r1, sp, #16
 8027bc0:	3254      	adds	r2, #84	@ 0x54
 8027bc2:	1852      	adds	r2, r2, r1
 8027bc4:	1c6e      	adds	r6, r5, #1
 8027bc6:	6023      	str	r3, [r4, #0]
 8027bc8:	60e3      	str	r3, [r4, #12]
 8027bca:	60a3      	str	r3, [r4, #8]
 8027bcc:	7013      	strb	r3, [r2, #0]
 8027bce:	65a3      	str	r3, [r4, #88]	@ 0x58
 8027bd0:	4b54      	ldr	r3, [pc, #336]	@ (8027d24 <_svfiprintf_r+0x1e8>)
 8027bd2:	2205      	movs	r2, #5
 8027bd4:	0018      	movs	r0, r3
 8027bd6:	7831      	ldrb	r1, [r6, #0]
 8027bd8:	9305      	str	r3, [sp, #20]
 8027bda:	f7fd ff7c 	bl	8025ad6 <memchr>
 8027bde:	1c75      	adds	r5, r6, #1
 8027be0:	2800      	cmp	r0, #0
 8027be2:	d11f      	bne.n	8027c24 <_svfiprintf_r+0xe8>
 8027be4:	6822      	ldr	r2, [r4, #0]
 8027be6:	06d3      	lsls	r3, r2, #27
 8027be8:	d504      	bpl.n	8027bf4 <_svfiprintf_r+0xb8>
 8027bea:	2353      	movs	r3, #83	@ 0x53
 8027bec:	a904      	add	r1, sp, #16
 8027bee:	185b      	adds	r3, r3, r1
 8027bf0:	2120      	movs	r1, #32
 8027bf2:	7019      	strb	r1, [r3, #0]
 8027bf4:	0713      	lsls	r3, r2, #28
 8027bf6:	d504      	bpl.n	8027c02 <_svfiprintf_r+0xc6>
 8027bf8:	2353      	movs	r3, #83	@ 0x53
 8027bfa:	a904      	add	r1, sp, #16
 8027bfc:	185b      	adds	r3, r3, r1
 8027bfe:	212b      	movs	r1, #43	@ 0x2b
 8027c00:	7019      	strb	r1, [r3, #0]
 8027c02:	7833      	ldrb	r3, [r6, #0]
 8027c04:	2b2a      	cmp	r3, #42	@ 0x2a
 8027c06:	d016      	beq.n	8027c36 <_svfiprintf_r+0xfa>
 8027c08:	0035      	movs	r5, r6
 8027c0a:	2100      	movs	r1, #0
 8027c0c:	200a      	movs	r0, #10
 8027c0e:	68e3      	ldr	r3, [r4, #12]
 8027c10:	782a      	ldrb	r2, [r5, #0]
 8027c12:	1c6e      	adds	r6, r5, #1
 8027c14:	3a30      	subs	r2, #48	@ 0x30
 8027c16:	2a09      	cmp	r2, #9
 8027c18:	d950      	bls.n	8027cbc <_svfiprintf_r+0x180>
 8027c1a:	2900      	cmp	r1, #0
 8027c1c:	d111      	bne.n	8027c42 <_svfiprintf_r+0x106>
 8027c1e:	e017      	b.n	8027c50 <_svfiprintf_r+0x114>
 8027c20:	3501      	adds	r5, #1
 8027c22:	e7af      	b.n	8027b84 <_svfiprintf_r+0x48>
 8027c24:	9b05      	ldr	r3, [sp, #20]
 8027c26:	6822      	ldr	r2, [r4, #0]
 8027c28:	1ac0      	subs	r0, r0, r3
 8027c2a:	2301      	movs	r3, #1
 8027c2c:	4083      	lsls	r3, r0
 8027c2e:	4313      	orrs	r3, r2
 8027c30:	002e      	movs	r6, r5
 8027c32:	6023      	str	r3, [r4, #0]
 8027c34:	e7cc      	b.n	8027bd0 <_svfiprintf_r+0x94>
 8027c36:	9b07      	ldr	r3, [sp, #28]
 8027c38:	1d19      	adds	r1, r3, #4
 8027c3a:	681b      	ldr	r3, [r3, #0]
 8027c3c:	9107      	str	r1, [sp, #28]
 8027c3e:	2b00      	cmp	r3, #0
 8027c40:	db01      	blt.n	8027c46 <_svfiprintf_r+0x10a>
 8027c42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027c44:	e004      	b.n	8027c50 <_svfiprintf_r+0x114>
 8027c46:	425b      	negs	r3, r3
 8027c48:	60e3      	str	r3, [r4, #12]
 8027c4a:	2302      	movs	r3, #2
 8027c4c:	4313      	orrs	r3, r2
 8027c4e:	6023      	str	r3, [r4, #0]
 8027c50:	782b      	ldrb	r3, [r5, #0]
 8027c52:	2b2e      	cmp	r3, #46	@ 0x2e
 8027c54:	d10c      	bne.n	8027c70 <_svfiprintf_r+0x134>
 8027c56:	786b      	ldrb	r3, [r5, #1]
 8027c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8027c5a:	d134      	bne.n	8027cc6 <_svfiprintf_r+0x18a>
 8027c5c:	9b07      	ldr	r3, [sp, #28]
 8027c5e:	3502      	adds	r5, #2
 8027c60:	1d1a      	adds	r2, r3, #4
 8027c62:	681b      	ldr	r3, [r3, #0]
 8027c64:	9207      	str	r2, [sp, #28]
 8027c66:	2b00      	cmp	r3, #0
 8027c68:	da01      	bge.n	8027c6e <_svfiprintf_r+0x132>
 8027c6a:	2301      	movs	r3, #1
 8027c6c:	425b      	negs	r3, r3
 8027c6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8027c70:	4e2d      	ldr	r6, [pc, #180]	@ (8027d28 <_svfiprintf_r+0x1ec>)
 8027c72:	2203      	movs	r2, #3
 8027c74:	0030      	movs	r0, r6
 8027c76:	7829      	ldrb	r1, [r5, #0]
 8027c78:	f7fd ff2d 	bl	8025ad6 <memchr>
 8027c7c:	2800      	cmp	r0, #0
 8027c7e:	d006      	beq.n	8027c8e <_svfiprintf_r+0x152>
 8027c80:	2340      	movs	r3, #64	@ 0x40
 8027c82:	1b80      	subs	r0, r0, r6
 8027c84:	4083      	lsls	r3, r0
 8027c86:	6822      	ldr	r2, [r4, #0]
 8027c88:	3501      	adds	r5, #1
 8027c8a:	4313      	orrs	r3, r2
 8027c8c:	6023      	str	r3, [r4, #0]
 8027c8e:	7829      	ldrb	r1, [r5, #0]
 8027c90:	2206      	movs	r2, #6
 8027c92:	4826      	ldr	r0, [pc, #152]	@ (8027d2c <_svfiprintf_r+0x1f0>)
 8027c94:	1c6e      	adds	r6, r5, #1
 8027c96:	7621      	strb	r1, [r4, #24]
 8027c98:	f7fd ff1d 	bl	8025ad6 <memchr>
 8027c9c:	2800      	cmp	r0, #0
 8027c9e:	d038      	beq.n	8027d12 <_svfiprintf_r+0x1d6>
 8027ca0:	4b23      	ldr	r3, [pc, #140]	@ (8027d30 <_svfiprintf_r+0x1f4>)
 8027ca2:	2b00      	cmp	r3, #0
 8027ca4:	d122      	bne.n	8027cec <_svfiprintf_r+0x1b0>
 8027ca6:	2207      	movs	r2, #7
 8027ca8:	9b07      	ldr	r3, [sp, #28]
 8027caa:	3307      	adds	r3, #7
 8027cac:	4393      	bics	r3, r2
 8027cae:	3308      	adds	r3, #8
 8027cb0:	9307      	str	r3, [sp, #28]
 8027cb2:	6963      	ldr	r3, [r4, #20]
 8027cb4:	9a04      	ldr	r2, [sp, #16]
 8027cb6:	189b      	adds	r3, r3, r2
 8027cb8:	6163      	str	r3, [r4, #20]
 8027cba:	e762      	b.n	8027b82 <_svfiprintf_r+0x46>
 8027cbc:	4343      	muls	r3, r0
 8027cbe:	0035      	movs	r5, r6
 8027cc0:	2101      	movs	r1, #1
 8027cc2:	189b      	adds	r3, r3, r2
 8027cc4:	e7a4      	b.n	8027c10 <_svfiprintf_r+0xd4>
 8027cc6:	2300      	movs	r3, #0
 8027cc8:	200a      	movs	r0, #10
 8027cca:	0019      	movs	r1, r3
 8027ccc:	3501      	adds	r5, #1
 8027cce:	6063      	str	r3, [r4, #4]
 8027cd0:	782a      	ldrb	r2, [r5, #0]
 8027cd2:	1c6e      	adds	r6, r5, #1
 8027cd4:	3a30      	subs	r2, #48	@ 0x30
 8027cd6:	2a09      	cmp	r2, #9
 8027cd8:	d903      	bls.n	8027ce2 <_svfiprintf_r+0x1a6>
 8027cda:	2b00      	cmp	r3, #0
 8027cdc:	d0c8      	beq.n	8027c70 <_svfiprintf_r+0x134>
 8027cde:	9109      	str	r1, [sp, #36]	@ 0x24
 8027ce0:	e7c6      	b.n	8027c70 <_svfiprintf_r+0x134>
 8027ce2:	4341      	muls	r1, r0
 8027ce4:	0035      	movs	r5, r6
 8027ce6:	2301      	movs	r3, #1
 8027ce8:	1889      	adds	r1, r1, r2
 8027cea:	e7f1      	b.n	8027cd0 <_svfiprintf_r+0x194>
 8027cec:	aa07      	add	r2, sp, #28
 8027cee:	9200      	str	r2, [sp, #0]
 8027cf0:	0021      	movs	r1, r4
 8027cf2:	003a      	movs	r2, r7
 8027cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8027d34 <_svfiprintf_r+0x1f8>)
 8027cf6:	9803      	ldr	r0, [sp, #12]
 8027cf8:	f7fc ffc4 	bl	8024c84 <_printf_float>
 8027cfc:	9004      	str	r0, [sp, #16]
 8027cfe:	9b04      	ldr	r3, [sp, #16]
 8027d00:	3301      	adds	r3, #1
 8027d02:	d1d6      	bne.n	8027cb2 <_svfiprintf_r+0x176>
 8027d04:	89bb      	ldrh	r3, [r7, #12]
 8027d06:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027d08:	065b      	lsls	r3, r3, #25
 8027d0a:	d500      	bpl.n	8027d0e <_svfiprintf_r+0x1d2>
 8027d0c:	e72c      	b.n	8027b68 <_svfiprintf_r+0x2c>
 8027d0e:	b021      	add	sp, #132	@ 0x84
 8027d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027d12:	aa07      	add	r2, sp, #28
 8027d14:	9200      	str	r2, [sp, #0]
 8027d16:	0021      	movs	r1, r4
 8027d18:	003a      	movs	r2, r7
 8027d1a:	4b06      	ldr	r3, [pc, #24]	@ (8027d34 <_svfiprintf_r+0x1f8>)
 8027d1c:	9803      	ldr	r0, [sp, #12]
 8027d1e:	f7fd fa5f 	bl	80251e0 <_printf_i>
 8027d22:	e7eb      	b.n	8027cfc <_svfiprintf_r+0x1c0>
 8027d24:	0802e548 	.word	0x0802e548
 8027d28:	0802e54e 	.word	0x0802e54e
 8027d2c:	0802e552 	.word	0x0802e552
 8027d30:	08024c85 	.word	0x08024c85
 8027d34:	08027a7d 	.word	0x08027a7d

08027d38 <__sfputc_r>:
 8027d38:	6893      	ldr	r3, [r2, #8]
 8027d3a:	b510      	push	{r4, lr}
 8027d3c:	3b01      	subs	r3, #1
 8027d3e:	6093      	str	r3, [r2, #8]
 8027d40:	2b00      	cmp	r3, #0
 8027d42:	da04      	bge.n	8027d4e <__sfputc_r+0x16>
 8027d44:	6994      	ldr	r4, [r2, #24]
 8027d46:	42a3      	cmp	r3, r4
 8027d48:	db07      	blt.n	8027d5a <__sfputc_r+0x22>
 8027d4a:	290a      	cmp	r1, #10
 8027d4c:	d005      	beq.n	8027d5a <__sfputc_r+0x22>
 8027d4e:	6813      	ldr	r3, [r2, #0]
 8027d50:	1c58      	adds	r0, r3, #1
 8027d52:	6010      	str	r0, [r2, #0]
 8027d54:	7019      	strb	r1, [r3, #0]
 8027d56:	0008      	movs	r0, r1
 8027d58:	bd10      	pop	{r4, pc}
 8027d5a:	f7fd fd4b 	bl	80257f4 <__swbuf_r>
 8027d5e:	0001      	movs	r1, r0
 8027d60:	e7f9      	b.n	8027d56 <__sfputc_r+0x1e>

08027d62 <__sfputs_r>:
 8027d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d64:	0006      	movs	r6, r0
 8027d66:	000f      	movs	r7, r1
 8027d68:	0014      	movs	r4, r2
 8027d6a:	18d5      	adds	r5, r2, r3
 8027d6c:	42ac      	cmp	r4, r5
 8027d6e:	d101      	bne.n	8027d74 <__sfputs_r+0x12>
 8027d70:	2000      	movs	r0, #0
 8027d72:	e007      	b.n	8027d84 <__sfputs_r+0x22>
 8027d74:	7821      	ldrb	r1, [r4, #0]
 8027d76:	003a      	movs	r2, r7
 8027d78:	0030      	movs	r0, r6
 8027d7a:	f7ff ffdd 	bl	8027d38 <__sfputc_r>
 8027d7e:	3401      	adds	r4, #1
 8027d80:	1c43      	adds	r3, r0, #1
 8027d82:	d1f3      	bne.n	8027d6c <__sfputs_r+0xa>
 8027d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027d88 <_vfiprintf_r>:
 8027d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027d8a:	b0a1      	sub	sp, #132	@ 0x84
 8027d8c:	000f      	movs	r7, r1
 8027d8e:	0015      	movs	r5, r2
 8027d90:	001e      	movs	r6, r3
 8027d92:	9003      	str	r0, [sp, #12]
 8027d94:	2800      	cmp	r0, #0
 8027d96:	d004      	beq.n	8027da2 <_vfiprintf_r+0x1a>
 8027d98:	6a03      	ldr	r3, [r0, #32]
 8027d9a:	2b00      	cmp	r3, #0
 8027d9c:	d101      	bne.n	8027da2 <_vfiprintf_r+0x1a>
 8027d9e:	f7fd fbbb 	bl	8025518 <__sinit>
 8027da2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027da4:	07db      	lsls	r3, r3, #31
 8027da6:	d405      	bmi.n	8027db4 <_vfiprintf_r+0x2c>
 8027da8:	89bb      	ldrh	r3, [r7, #12]
 8027daa:	059b      	lsls	r3, r3, #22
 8027dac:	d402      	bmi.n	8027db4 <_vfiprintf_r+0x2c>
 8027dae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027db0:	f7fd fe8f 	bl	8025ad2 <__retarget_lock_acquire_recursive>
 8027db4:	89bb      	ldrh	r3, [r7, #12]
 8027db6:	071b      	lsls	r3, r3, #28
 8027db8:	d502      	bpl.n	8027dc0 <_vfiprintf_r+0x38>
 8027dba:	693b      	ldr	r3, [r7, #16]
 8027dbc:	2b00      	cmp	r3, #0
 8027dbe:	d113      	bne.n	8027de8 <_vfiprintf_r+0x60>
 8027dc0:	0039      	movs	r1, r7
 8027dc2:	9803      	ldr	r0, [sp, #12]
 8027dc4:	f7fd fd58 	bl	8025878 <__swsetup_r>
 8027dc8:	2800      	cmp	r0, #0
 8027dca:	d00d      	beq.n	8027de8 <_vfiprintf_r+0x60>
 8027dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027dce:	07db      	lsls	r3, r3, #31
 8027dd0:	d503      	bpl.n	8027dda <_vfiprintf_r+0x52>
 8027dd2:	2001      	movs	r0, #1
 8027dd4:	4240      	negs	r0, r0
 8027dd6:	b021      	add	sp, #132	@ 0x84
 8027dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027dda:	89bb      	ldrh	r3, [r7, #12]
 8027ddc:	059b      	lsls	r3, r3, #22
 8027dde:	d4f8      	bmi.n	8027dd2 <_vfiprintf_r+0x4a>
 8027de0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027de2:	f7fd fe77 	bl	8025ad4 <__retarget_lock_release_recursive>
 8027de6:	e7f4      	b.n	8027dd2 <_vfiprintf_r+0x4a>
 8027de8:	2300      	movs	r3, #0
 8027dea:	ac08      	add	r4, sp, #32
 8027dec:	6163      	str	r3, [r4, #20]
 8027dee:	3320      	adds	r3, #32
 8027df0:	7663      	strb	r3, [r4, #25]
 8027df2:	3310      	adds	r3, #16
 8027df4:	76a3      	strb	r3, [r4, #26]
 8027df6:	9607      	str	r6, [sp, #28]
 8027df8:	002e      	movs	r6, r5
 8027dfa:	7833      	ldrb	r3, [r6, #0]
 8027dfc:	2b00      	cmp	r3, #0
 8027dfe:	d001      	beq.n	8027e04 <_vfiprintf_r+0x7c>
 8027e00:	2b25      	cmp	r3, #37	@ 0x25
 8027e02:	d148      	bne.n	8027e96 <_vfiprintf_r+0x10e>
 8027e04:	1b73      	subs	r3, r6, r5
 8027e06:	9305      	str	r3, [sp, #20]
 8027e08:	42ae      	cmp	r6, r5
 8027e0a:	d00b      	beq.n	8027e24 <_vfiprintf_r+0x9c>
 8027e0c:	002a      	movs	r2, r5
 8027e0e:	0039      	movs	r1, r7
 8027e10:	9803      	ldr	r0, [sp, #12]
 8027e12:	f7ff ffa6 	bl	8027d62 <__sfputs_r>
 8027e16:	3001      	adds	r0, #1
 8027e18:	d100      	bne.n	8027e1c <_vfiprintf_r+0x94>
 8027e1a:	e0ae      	b.n	8027f7a <_vfiprintf_r+0x1f2>
 8027e1c:	6963      	ldr	r3, [r4, #20]
 8027e1e:	9a05      	ldr	r2, [sp, #20]
 8027e20:	189b      	adds	r3, r3, r2
 8027e22:	6163      	str	r3, [r4, #20]
 8027e24:	7833      	ldrb	r3, [r6, #0]
 8027e26:	2b00      	cmp	r3, #0
 8027e28:	d100      	bne.n	8027e2c <_vfiprintf_r+0xa4>
 8027e2a:	e0a6      	b.n	8027f7a <_vfiprintf_r+0x1f2>
 8027e2c:	2201      	movs	r2, #1
 8027e2e:	2300      	movs	r3, #0
 8027e30:	4252      	negs	r2, r2
 8027e32:	6062      	str	r2, [r4, #4]
 8027e34:	a904      	add	r1, sp, #16
 8027e36:	3254      	adds	r2, #84	@ 0x54
 8027e38:	1852      	adds	r2, r2, r1
 8027e3a:	1c75      	adds	r5, r6, #1
 8027e3c:	6023      	str	r3, [r4, #0]
 8027e3e:	60e3      	str	r3, [r4, #12]
 8027e40:	60a3      	str	r3, [r4, #8]
 8027e42:	7013      	strb	r3, [r2, #0]
 8027e44:	65a3      	str	r3, [r4, #88]	@ 0x58
 8027e46:	4b59      	ldr	r3, [pc, #356]	@ (8027fac <_vfiprintf_r+0x224>)
 8027e48:	2205      	movs	r2, #5
 8027e4a:	0018      	movs	r0, r3
 8027e4c:	7829      	ldrb	r1, [r5, #0]
 8027e4e:	9305      	str	r3, [sp, #20]
 8027e50:	f7fd fe41 	bl	8025ad6 <memchr>
 8027e54:	1c6e      	adds	r6, r5, #1
 8027e56:	2800      	cmp	r0, #0
 8027e58:	d11f      	bne.n	8027e9a <_vfiprintf_r+0x112>
 8027e5a:	6822      	ldr	r2, [r4, #0]
 8027e5c:	06d3      	lsls	r3, r2, #27
 8027e5e:	d504      	bpl.n	8027e6a <_vfiprintf_r+0xe2>
 8027e60:	2353      	movs	r3, #83	@ 0x53
 8027e62:	a904      	add	r1, sp, #16
 8027e64:	185b      	adds	r3, r3, r1
 8027e66:	2120      	movs	r1, #32
 8027e68:	7019      	strb	r1, [r3, #0]
 8027e6a:	0713      	lsls	r3, r2, #28
 8027e6c:	d504      	bpl.n	8027e78 <_vfiprintf_r+0xf0>
 8027e6e:	2353      	movs	r3, #83	@ 0x53
 8027e70:	a904      	add	r1, sp, #16
 8027e72:	185b      	adds	r3, r3, r1
 8027e74:	212b      	movs	r1, #43	@ 0x2b
 8027e76:	7019      	strb	r1, [r3, #0]
 8027e78:	782b      	ldrb	r3, [r5, #0]
 8027e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8027e7c:	d016      	beq.n	8027eac <_vfiprintf_r+0x124>
 8027e7e:	002e      	movs	r6, r5
 8027e80:	2100      	movs	r1, #0
 8027e82:	200a      	movs	r0, #10
 8027e84:	68e3      	ldr	r3, [r4, #12]
 8027e86:	7832      	ldrb	r2, [r6, #0]
 8027e88:	1c75      	adds	r5, r6, #1
 8027e8a:	3a30      	subs	r2, #48	@ 0x30
 8027e8c:	2a09      	cmp	r2, #9
 8027e8e:	d950      	bls.n	8027f32 <_vfiprintf_r+0x1aa>
 8027e90:	2900      	cmp	r1, #0
 8027e92:	d111      	bne.n	8027eb8 <_vfiprintf_r+0x130>
 8027e94:	e017      	b.n	8027ec6 <_vfiprintf_r+0x13e>
 8027e96:	3601      	adds	r6, #1
 8027e98:	e7af      	b.n	8027dfa <_vfiprintf_r+0x72>
 8027e9a:	9b05      	ldr	r3, [sp, #20]
 8027e9c:	6822      	ldr	r2, [r4, #0]
 8027e9e:	1ac0      	subs	r0, r0, r3
 8027ea0:	2301      	movs	r3, #1
 8027ea2:	4083      	lsls	r3, r0
 8027ea4:	4313      	orrs	r3, r2
 8027ea6:	0035      	movs	r5, r6
 8027ea8:	6023      	str	r3, [r4, #0]
 8027eaa:	e7cc      	b.n	8027e46 <_vfiprintf_r+0xbe>
 8027eac:	9b07      	ldr	r3, [sp, #28]
 8027eae:	1d19      	adds	r1, r3, #4
 8027eb0:	681b      	ldr	r3, [r3, #0]
 8027eb2:	9107      	str	r1, [sp, #28]
 8027eb4:	2b00      	cmp	r3, #0
 8027eb6:	db01      	blt.n	8027ebc <_vfiprintf_r+0x134>
 8027eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027eba:	e004      	b.n	8027ec6 <_vfiprintf_r+0x13e>
 8027ebc:	425b      	negs	r3, r3
 8027ebe:	60e3      	str	r3, [r4, #12]
 8027ec0:	2302      	movs	r3, #2
 8027ec2:	4313      	orrs	r3, r2
 8027ec4:	6023      	str	r3, [r4, #0]
 8027ec6:	7833      	ldrb	r3, [r6, #0]
 8027ec8:	2b2e      	cmp	r3, #46	@ 0x2e
 8027eca:	d10c      	bne.n	8027ee6 <_vfiprintf_r+0x15e>
 8027ecc:	7873      	ldrb	r3, [r6, #1]
 8027ece:	2b2a      	cmp	r3, #42	@ 0x2a
 8027ed0:	d134      	bne.n	8027f3c <_vfiprintf_r+0x1b4>
 8027ed2:	9b07      	ldr	r3, [sp, #28]
 8027ed4:	3602      	adds	r6, #2
 8027ed6:	1d1a      	adds	r2, r3, #4
 8027ed8:	681b      	ldr	r3, [r3, #0]
 8027eda:	9207      	str	r2, [sp, #28]
 8027edc:	2b00      	cmp	r3, #0
 8027ede:	da01      	bge.n	8027ee4 <_vfiprintf_r+0x15c>
 8027ee0:	2301      	movs	r3, #1
 8027ee2:	425b      	negs	r3, r3
 8027ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8027ee6:	4d32      	ldr	r5, [pc, #200]	@ (8027fb0 <_vfiprintf_r+0x228>)
 8027ee8:	2203      	movs	r2, #3
 8027eea:	0028      	movs	r0, r5
 8027eec:	7831      	ldrb	r1, [r6, #0]
 8027eee:	f7fd fdf2 	bl	8025ad6 <memchr>
 8027ef2:	2800      	cmp	r0, #0
 8027ef4:	d006      	beq.n	8027f04 <_vfiprintf_r+0x17c>
 8027ef6:	2340      	movs	r3, #64	@ 0x40
 8027ef8:	1b40      	subs	r0, r0, r5
 8027efa:	4083      	lsls	r3, r0
 8027efc:	6822      	ldr	r2, [r4, #0]
 8027efe:	3601      	adds	r6, #1
 8027f00:	4313      	orrs	r3, r2
 8027f02:	6023      	str	r3, [r4, #0]
 8027f04:	7831      	ldrb	r1, [r6, #0]
 8027f06:	2206      	movs	r2, #6
 8027f08:	482a      	ldr	r0, [pc, #168]	@ (8027fb4 <_vfiprintf_r+0x22c>)
 8027f0a:	1c75      	adds	r5, r6, #1
 8027f0c:	7621      	strb	r1, [r4, #24]
 8027f0e:	f7fd fde2 	bl	8025ad6 <memchr>
 8027f12:	2800      	cmp	r0, #0
 8027f14:	d040      	beq.n	8027f98 <_vfiprintf_r+0x210>
 8027f16:	4b28      	ldr	r3, [pc, #160]	@ (8027fb8 <_vfiprintf_r+0x230>)
 8027f18:	2b00      	cmp	r3, #0
 8027f1a:	d122      	bne.n	8027f62 <_vfiprintf_r+0x1da>
 8027f1c:	2207      	movs	r2, #7
 8027f1e:	9b07      	ldr	r3, [sp, #28]
 8027f20:	3307      	adds	r3, #7
 8027f22:	4393      	bics	r3, r2
 8027f24:	3308      	adds	r3, #8
 8027f26:	9307      	str	r3, [sp, #28]
 8027f28:	6963      	ldr	r3, [r4, #20]
 8027f2a:	9a04      	ldr	r2, [sp, #16]
 8027f2c:	189b      	adds	r3, r3, r2
 8027f2e:	6163      	str	r3, [r4, #20]
 8027f30:	e762      	b.n	8027df8 <_vfiprintf_r+0x70>
 8027f32:	4343      	muls	r3, r0
 8027f34:	002e      	movs	r6, r5
 8027f36:	2101      	movs	r1, #1
 8027f38:	189b      	adds	r3, r3, r2
 8027f3a:	e7a4      	b.n	8027e86 <_vfiprintf_r+0xfe>
 8027f3c:	2300      	movs	r3, #0
 8027f3e:	200a      	movs	r0, #10
 8027f40:	0019      	movs	r1, r3
 8027f42:	3601      	adds	r6, #1
 8027f44:	6063      	str	r3, [r4, #4]
 8027f46:	7832      	ldrb	r2, [r6, #0]
 8027f48:	1c75      	adds	r5, r6, #1
 8027f4a:	3a30      	subs	r2, #48	@ 0x30
 8027f4c:	2a09      	cmp	r2, #9
 8027f4e:	d903      	bls.n	8027f58 <_vfiprintf_r+0x1d0>
 8027f50:	2b00      	cmp	r3, #0
 8027f52:	d0c8      	beq.n	8027ee6 <_vfiprintf_r+0x15e>
 8027f54:	9109      	str	r1, [sp, #36]	@ 0x24
 8027f56:	e7c6      	b.n	8027ee6 <_vfiprintf_r+0x15e>
 8027f58:	4341      	muls	r1, r0
 8027f5a:	002e      	movs	r6, r5
 8027f5c:	2301      	movs	r3, #1
 8027f5e:	1889      	adds	r1, r1, r2
 8027f60:	e7f1      	b.n	8027f46 <_vfiprintf_r+0x1be>
 8027f62:	aa07      	add	r2, sp, #28
 8027f64:	9200      	str	r2, [sp, #0]
 8027f66:	0021      	movs	r1, r4
 8027f68:	003a      	movs	r2, r7
 8027f6a:	4b14      	ldr	r3, [pc, #80]	@ (8027fbc <_vfiprintf_r+0x234>)
 8027f6c:	9803      	ldr	r0, [sp, #12]
 8027f6e:	f7fc fe89 	bl	8024c84 <_printf_float>
 8027f72:	9004      	str	r0, [sp, #16]
 8027f74:	9b04      	ldr	r3, [sp, #16]
 8027f76:	3301      	adds	r3, #1
 8027f78:	d1d6      	bne.n	8027f28 <_vfiprintf_r+0x1a0>
 8027f7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027f7c:	07db      	lsls	r3, r3, #31
 8027f7e:	d405      	bmi.n	8027f8c <_vfiprintf_r+0x204>
 8027f80:	89bb      	ldrh	r3, [r7, #12]
 8027f82:	059b      	lsls	r3, r3, #22
 8027f84:	d402      	bmi.n	8027f8c <_vfiprintf_r+0x204>
 8027f86:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027f88:	f7fd fda4 	bl	8025ad4 <__retarget_lock_release_recursive>
 8027f8c:	89bb      	ldrh	r3, [r7, #12]
 8027f8e:	065b      	lsls	r3, r3, #25
 8027f90:	d500      	bpl.n	8027f94 <_vfiprintf_r+0x20c>
 8027f92:	e71e      	b.n	8027dd2 <_vfiprintf_r+0x4a>
 8027f94:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027f96:	e71e      	b.n	8027dd6 <_vfiprintf_r+0x4e>
 8027f98:	aa07      	add	r2, sp, #28
 8027f9a:	9200      	str	r2, [sp, #0]
 8027f9c:	0021      	movs	r1, r4
 8027f9e:	003a      	movs	r2, r7
 8027fa0:	4b06      	ldr	r3, [pc, #24]	@ (8027fbc <_vfiprintf_r+0x234>)
 8027fa2:	9803      	ldr	r0, [sp, #12]
 8027fa4:	f7fd f91c 	bl	80251e0 <_printf_i>
 8027fa8:	e7e3      	b.n	8027f72 <_vfiprintf_r+0x1ea>
 8027faa:	46c0      	nop			@ (mov r8, r8)
 8027fac:	0802e548 	.word	0x0802e548
 8027fb0:	0802e54e 	.word	0x0802e54e
 8027fb4:	0802e552 	.word	0x0802e552
 8027fb8:	08024c85 	.word	0x08024c85
 8027fbc:	08027d63 	.word	0x08027d63

08027fc0 <__sflush_r>:
 8027fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027fc2:	220c      	movs	r2, #12
 8027fc4:	5e8b      	ldrsh	r3, [r1, r2]
 8027fc6:	0005      	movs	r5, r0
 8027fc8:	000c      	movs	r4, r1
 8027fca:	071a      	lsls	r2, r3, #28
 8027fcc:	d456      	bmi.n	802807c <__sflush_r+0xbc>
 8027fce:	684a      	ldr	r2, [r1, #4]
 8027fd0:	2a00      	cmp	r2, #0
 8027fd2:	dc02      	bgt.n	8027fda <__sflush_r+0x1a>
 8027fd4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8027fd6:	2a00      	cmp	r2, #0
 8027fd8:	dd4e      	ble.n	8028078 <__sflush_r+0xb8>
 8027fda:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8027fdc:	2f00      	cmp	r7, #0
 8027fde:	d04b      	beq.n	8028078 <__sflush_r+0xb8>
 8027fe0:	2200      	movs	r2, #0
 8027fe2:	2080      	movs	r0, #128	@ 0x80
 8027fe4:	682e      	ldr	r6, [r5, #0]
 8027fe6:	602a      	str	r2, [r5, #0]
 8027fe8:	001a      	movs	r2, r3
 8027fea:	0140      	lsls	r0, r0, #5
 8027fec:	6a21      	ldr	r1, [r4, #32]
 8027fee:	4002      	ands	r2, r0
 8027ff0:	4203      	tst	r3, r0
 8027ff2:	d033      	beq.n	802805c <__sflush_r+0x9c>
 8027ff4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8027ff6:	89a3      	ldrh	r3, [r4, #12]
 8027ff8:	075b      	lsls	r3, r3, #29
 8027ffa:	d506      	bpl.n	802800a <__sflush_r+0x4a>
 8027ffc:	6863      	ldr	r3, [r4, #4]
 8027ffe:	1ad2      	subs	r2, r2, r3
 8028000:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028002:	2b00      	cmp	r3, #0
 8028004:	d001      	beq.n	802800a <__sflush_r+0x4a>
 8028006:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028008:	1ad2      	subs	r2, r2, r3
 802800a:	2300      	movs	r3, #0
 802800c:	0028      	movs	r0, r5
 802800e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028010:	6a21      	ldr	r1, [r4, #32]
 8028012:	47b8      	blx	r7
 8028014:	89a2      	ldrh	r2, [r4, #12]
 8028016:	1c43      	adds	r3, r0, #1
 8028018:	d106      	bne.n	8028028 <__sflush_r+0x68>
 802801a:	6829      	ldr	r1, [r5, #0]
 802801c:	291d      	cmp	r1, #29
 802801e:	d846      	bhi.n	80280ae <__sflush_r+0xee>
 8028020:	4b29      	ldr	r3, [pc, #164]	@ (80280c8 <__sflush_r+0x108>)
 8028022:	40cb      	lsrs	r3, r1
 8028024:	07db      	lsls	r3, r3, #31
 8028026:	d542      	bpl.n	80280ae <__sflush_r+0xee>
 8028028:	2300      	movs	r3, #0
 802802a:	6063      	str	r3, [r4, #4]
 802802c:	6923      	ldr	r3, [r4, #16]
 802802e:	6023      	str	r3, [r4, #0]
 8028030:	04d2      	lsls	r2, r2, #19
 8028032:	d505      	bpl.n	8028040 <__sflush_r+0x80>
 8028034:	1c43      	adds	r3, r0, #1
 8028036:	d102      	bne.n	802803e <__sflush_r+0x7e>
 8028038:	682b      	ldr	r3, [r5, #0]
 802803a:	2b00      	cmp	r3, #0
 802803c:	d100      	bne.n	8028040 <__sflush_r+0x80>
 802803e:	6560      	str	r0, [r4, #84]	@ 0x54
 8028040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028042:	602e      	str	r6, [r5, #0]
 8028044:	2900      	cmp	r1, #0
 8028046:	d017      	beq.n	8028078 <__sflush_r+0xb8>
 8028048:	0023      	movs	r3, r4
 802804a:	3344      	adds	r3, #68	@ 0x44
 802804c:	4299      	cmp	r1, r3
 802804e:	d002      	beq.n	8028056 <__sflush_r+0x96>
 8028050:	0028      	movs	r0, r5
 8028052:	f7fe fbd1 	bl	80267f8 <_free_r>
 8028056:	2300      	movs	r3, #0
 8028058:	6363      	str	r3, [r4, #52]	@ 0x34
 802805a:	e00d      	b.n	8028078 <__sflush_r+0xb8>
 802805c:	2301      	movs	r3, #1
 802805e:	0028      	movs	r0, r5
 8028060:	47b8      	blx	r7
 8028062:	0002      	movs	r2, r0
 8028064:	1c43      	adds	r3, r0, #1
 8028066:	d1c6      	bne.n	8027ff6 <__sflush_r+0x36>
 8028068:	682b      	ldr	r3, [r5, #0]
 802806a:	2b00      	cmp	r3, #0
 802806c:	d0c3      	beq.n	8027ff6 <__sflush_r+0x36>
 802806e:	2b1d      	cmp	r3, #29
 8028070:	d001      	beq.n	8028076 <__sflush_r+0xb6>
 8028072:	2b16      	cmp	r3, #22
 8028074:	d11a      	bne.n	80280ac <__sflush_r+0xec>
 8028076:	602e      	str	r6, [r5, #0]
 8028078:	2000      	movs	r0, #0
 802807a:	e01e      	b.n	80280ba <__sflush_r+0xfa>
 802807c:	690e      	ldr	r6, [r1, #16]
 802807e:	2e00      	cmp	r6, #0
 8028080:	d0fa      	beq.n	8028078 <__sflush_r+0xb8>
 8028082:	680f      	ldr	r7, [r1, #0]
 8028084:	600e      	str	r6, [r1, #0]
 8028086:	1bba      	subs	r2, r7, r6
 8028088:	9201      	str	r2, [sp, #4]
 802808a:	2200      	movs	r2, #0
 802808c:	079b      	lsls	r3, r3, #30
 802808e:	d100      	bne.n	8028092 <__sflush_r+0xd2>
 8028090:	694a      	ldr	r2, [r1, #20]
 8028092:	60a2      	str	r2, [r4, #8]
 8028094:	9b01      	ldr	r3, [sp, #4]
 8028096:	2b00      	cmp	r3, #0
 8028098:	ddee      	ble.n	8028078 <__sflush_r+0xb8>
 802809a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802809c:	0032      	movs	r2, r6
 802809e:	001f      	movs	r7, r3
 80280a0:	0028      	movs	r0, r5
 80280a2:	9b01      	ldr	r3, [sp, #4]
 80280a4:	6a21      	ldr	r1, [r4, #32]
 80280a6:	47b8      	blx	r7
 80280a8:	2800      	cmp	r0, #0
 80280aa:	dc07      	bgt.n	80280bc <__sflush_r+0xfc>
 80280ac:	89a2      	ldrh	r2, [r4, #12]
 80280ae:	2340      	movs	r3, #64	@ 0x40
 80280b0:	2001      	movs	r0, #1
 80280b2:	4313      	orrs	r3, r2
 80280b4:	b21b      	sxth	r3, r3
 80280b6:	81a3      	strh	r3, [r4, #12]
 80280b8:	4240      	negs	r0, r0
 80280ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80280bc:	9b01      	ldr	r3, [sp, #4]
 80280be:	1836      	adds	r6, r6, r0
 80280c0:	1a1b      	subs	r3, r3, r0
 80280c2:	9301      	str	r3, [sp, #4]
 80280c4:	e7e6      	b.n	8028094 <__sflush_r+0xd4>
 80280c6:	46c0      	nop			@ (mov r8, r8)
 80280c8:	20400001 	.word	0x20400001

080280cc <_fflush_r>:
 80280cc:	690b      	ldr	r3, [r1, #16]
 80280ce:	b570      	push	{r4, r5, r6, lr}
 80280d0:	0005      	movs	r5, r0
 80280d2:	000c      	movs	r4, r1
 80280d4:	2b00      	cmp	r3, #0
 80280d6:	d102      	bne.n	80280de <_fflush_r+0x12>
 80280d8:	2500      	movs	r5, #0
 80280da:	0028      	movs	r0, r5
 80280dc:	bd70      	pop	{r4, r5, r6, pc}
 80280de:	2800      	cmp	r0, #0
 80280e0:	d004      	beq.n	80280ec <_fflush_r+0x20>
 80280e2:	6a03      	ldr	r3, [r0, #32]
 80280e4:	2b00      	cmp	r3, #0
 80280e6:	d101      	bne.n	80280ec <_fflush_r+0x20>
 80280e8:	f7fd fa16 	bl	8025518 <__sinit>
 80280ec:	220c      	movs	r2, #12
 80280ee:	5ea3      	ldrsh	r3, [r4, r2]
 80280f0:	2b00      	cmp	r3, #0
 80280f2:	d0f1      	beq.n	80280d8 <_fflush_r+0xc>
 80280f4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80280f6:	07d2      	lsls	r2, r2, #31
 80280f8:	d404      	bmi.n	8028104 <_fflush_r+0x38>
 80280fa:	059b      	lsls	r3, r3, #22
 80280fc:	d402      	bmi.n	8028104 <_fflush_r+0x38>
 80280fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028100:	f7fd fce7 	bl	8025ad2 <__retarget_lock_acquire_recursive>
 8028104:	0028      	movs	r0, r5
 8028106:	0021      	movs	r1, r4
 8028108:	f7ff ff5a 	bl	8027fc0 <__sflush_r>
 802810c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802810e:	0005      	movs	r5, r0
 8028110:	07db      	lsls	r3, r3, #31
 8028112:	d4e2      	bmi.n	80280da <_fflush_r+0xe>
 8028114:	89a3      	ldrh	r3, [r4, #12]
 8028116:	059b      	lsls	r3, r3, #22
 8028118:	d4df      	bmi.n	80280da <_fflush_r+0xe>
 802811a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802811c:	f7fd fcda 	bl	8025ad4 <__retarget_lock_release_recursive>
 8028120:	e7db      	b.n	80280da <_fflush_r+0xe>
	...

08028124 <__swhatbuf_r>:
 8028124:	b570      	push	{r4, r5, r6, lr}
 8028126:	000e      	movs	r6, r1
 8028128:	001d      	movs	r5, r3
 802812a:	230e      	movs	r3, #14
 802812c:	5ec9      	ldrsh	r1, [r1, r3]
 802812e:	0014      	movs	r4, r2
 8028130:	b096      	sub	sp, #88	@ 0x58
 8028132:	2900      	cmp	r1, #0
 8028134:	da0c      	bge.n	8028150 <__swhatbuf_r+0x2c>
 8028136:	89b2      	ldrh	r2, [r6, #12]
 8028138:	2380      	movs	r3, #128	@ 0x80
 802813a:	0011      	movs	r1, r2
 802813c:	4019      	ands	r1, r3
 802813e:	421a      	tst	r2, r3
 8028140:	d114      	bne.n	802816c <__swhatbuf_r+0x48>
 8028142:	2380      	movs	r3, #128	@ 0x80
 8028144:	00db      	lsls	r3, r3, #3
 8028146:	2000      	movs	r0, #0
 8028148:	6029      	str	r1, [r5, #0]
 802814a:	6023      	str	r3, [r4, #0]
 802814c:	b016      	add	sp, #88	@ 0x58
 802814e:	bd70      	pop	{r4, r5, r6, pc}
 8028150:	466a      	mov	r2, sp
 8028152:	f000 f865 	bl	8028220 <_fstat_r>
 8028156:	2800      	cmp	r0, #0
 8028158:	dbed      	blt.n	8028136 <__swhatbuf_r+0x12>
 802815a:	23f0      	movs	r3, #240	@ 0xf0
 802815c:	9901      	ldr	r1, [sp, #4]
 802815e:	021b      	lsls	r3, r3, #8
 8028160:	4019      	ands	r1, r3
 8028162:	4b04      	ldr	r3, [pc, #16]	@ (8028174 <__swhatbuf_r+0x50>)
 8028164:	18c9      	adds	r1, r1, r3
 8028166:	424b      	negs	r3, r1
 8028168:	4159      	adcs	r1, r3
 802816a:	e7ea      	b.n	8028142 <__swhatbuf_r+0x1e>
 802816c:	2100      	movs	r1, #0
 802816e:	2340      	movs	r3, #64	@ 0x40
 8028170:	e7e9      	b.n	8028146 <__swhatbuf_r+0x22>
 8028172:	46c0      	nop			@ (mov r8, r8)
 8028174:	ffffe000 	.word	0xffffe000

08028178 <__smakebuf_r>:
 8028178:	b5f0      	push	{r4, r5, r6, r7, lr}
 802817a:	2602      	movs	r6, #2
 802817c:	898b      	ldrh	r3, [r1, #12]
 802817e:	0005      	movs	r5, r0
 8028180:	000c      	movs	r4, r1
 8028182:	b085      	sub	sp, #20
 8028184:	4233      	tst	r3, r6
 8028186:	d007      	beq.n	8028198 <__smakebuf_r+0x20>
 8028188:	0023      	movs	r3, r4
 802818a:	3347      	adds	r3, #71	@ 0x47
 802818c:	6023      	str	r3, [r4, #0]
 802818e:	6123      	str	r3, [r4, #16]
 8028190:	2301      	movs	r3, #1
 8028192:	6163      	str	r3, [r4, #20]
 8028194:	b005      	add	sp, #20
 8028196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028198:	ab03      	add	r3, sp, #12
 802819a:	aa02      	add	r2, sp, #8
 802819c:	f7ff ffc2 	bl	8028124 <__swhatbuf_r>
 80281a0:	9f02      	ldr	r7, [sp, #8]
 80281a2:	9001      	str	r0, [sp, #4]
 80281a4:	0039      	movs	r1, r7
 80281a6:	0028      	movs	r0, r5
 80281a8:	f7fe fef6 	bl	8026f98 <_malloc_r>
 80281ac:	2800      	cmp	r0, #0
 80281ae:	d108      	bne.n	80281c2 <__smakebuf_r+0x4a>
 80281b0:	220c      	movs	r2, #12
 80281b2:	5ea3      	ldrsh	r3, [r4, r2]
 80281b4:	059a      	lsls	r2, r3, #22
 80281b6:	d4ed      	bmi.n	8028194 <__smakebuf_r+0x1c>
 80281b8:	2203      	movs	r2, #3
 80281ba:	4393      	bics	r3, r2
 80281bc:	431e      	orrs	r6, r3
 80281be:	81a6      	strh	r6, [r4, #12]
 80281c0:	e7e2      	b.n	8028188 <__smakebuf_r+0x10>
 80281c2:	2380      	movs	r3, #128	@ 0x80
 80281c4:	89a2      	ldrh	r2, [r4, #12]
 80281c6:	6020      	str	r0, [r4, #0]
 80281c8:	4313      	orrs	r3, r2
 80281ca:	81a3      	strh	r3, [r4, #12]
 80281cc:	9b03      	ldr	r3, [sp, #12]
 80281ce:	6120      	str	r0, [r4, #16]
 80281d0:	6167      	str	r7, [r4, #20]
 80281d2:	2b00      	cmp	r3, #0
 80281d4:	d00c      	beq.n	80281f0 <__smakebuf_r+0x78>
 80281d6:	0028      	movs	r0, r5
 80281d8:	230e      	movs	r3, #14
 80281da:	5ee1      	ldrsh	r1, [r4, r3]
 80281dc:	f000 f832 	bl	8028244 <_isatty_r>
 80281e0:	2800      	cmp	r0, #0
 80281e2:	d005      	beq.n	80281f0 <__smakebuf_r+0x78>
 80281e4:	2303      	movs	r3, #3
 80281e6:	89a2      	ldrh	r2, [r4, #12]
 80281e8:	439a      	bics	r2, r3
 80281ea:	3b02      	subs	r3, #2
 80281ec:	4313      	orrs	r3, r2
 80281ee:	81a3      	strh	r3, [r4, #12]
 80281f0:	89a3      	ldrh	r3, [r4, #12]
 80281f2:	9a01      	ldr	r2, [sp, #4]
 80281f4:	4313      	orrs	r3, r2
 80281f6:	81a3      	strh	r3, [r4, #12]
 80281f8:	e7cc      	b.n	8028194 <__smakebuf_r+0x1c>

080281fa <memmove>:
 80281fa:	b510      	push	{r4, lr}
 80281fc:	4288      	cmp	r0, r1
 80281fe:	d902      	bls.n	8028206 <memmove+0xc>
 8028200:	188b      	adds	r3, r1, r2
 8028202:	4298      	cmp	r0, r3
 8028204:	d308      	bcc.n	8028218 <memmove+0x1e>
 8028206:	2300      	movs	r3, #0
 8028208:	429a      	cmp	r2, r3
 802820a:	d007      	beq.n	802821c <memmove+0x22>
 802820c:	5ccc      	ldrb	r4, [r1, r3]
 802820e:	54c4      	strb	r4, [r0, r3]
 8028210:	3301      	adds	r3, #1
 8028212:	e7f9      	b.n	8028208 <memmove+0xe>
 8028214:	5c8b      	ldrb	r3, [r1, r2]
 8028216:	5483      	strb	r3, [r0, r2]
 8028218:	3a01      	subs	r2, #1
 802821a:	d2fb      	bcs.n	8028214 <memmove+0x1a>
 802821c:	bd10      	pop	{r4, pc}
	...

08028220 <_fstat_r>:
 8028220:	2300      	movs	r3, #0
 8028222:	b570      	push	{r4, r5, r6, lr}
 8028224:	4d06      	ldr	r5, [pc, #24]	@ (8028240 <_fstat_r+0x20>)
 8028226:	0004      	movs	r4, r0
 8028228:	0008      	movs	r0, r1
 802822a:	0011      	movs	r1, r2
 802822c:	602b      	str	r3, [r5, #0]
 802822e:	f7ea fc39 	bl	8012aa4 <_fstat>
 8028232:	1c43      	adds	r3, r0, #1
 8028234:	d103      	bne.n	802823e <_fstat_r+0x1e>
 8028236:	682b      	ldr	r3, [r5, #0]
 8028238:	2b00      	cmp	r3, #0
 802823a:	d000      	beq.n	802823e <_fstat_r+0x1e>
 802823c:	6023      	str	r3, [r4, #0]
 802823e:	bd70      	pop	{r4, r5, r6, pc}
 8028240:	2000361c 	.word	0x2000361c

08028244 <_isatty_r>:
 8028244:	2300      	movs	r3, #0
 8028246:	b570      	push	{r4, r5, r6, lr}
 8028248:	4d06      	ldr	r5, [pc, #24]	@ (8028264 <_isatty_r+0x20>)
 802824a:	0004      	movs	r4, r0
 802824c:	0008      	movs	r0, r1
 802824e:	602b      	str	r3, [r5, #0]
 8028250:	f7ea fc36 	bl	8012ac0 <_isatty>
 8028254:	1c43      	adds	r3, r0, #1
 8028256:	d103      	bne.n	8028260 <_isatty_r+0x1c>
 8028258:	682b      	ldr	r3, [r5, #0]
 802825a:	2b00      	cmp	r3, #0
 802825c:	d000      	beq.n	8028260 <_isatty_r+0x1c>
 802825e:	6023      	str	r3, [r4, #0]
 8028260:	bd70      	pop	{r4, r5, r6, pc}
 8028262:	46c0      	nop			@ (mov r8, r8)
 8028264:	2000361c 	.word	0x2000361c

08028268 <_sbrk_r>:
 8028268:	2300      	movs	r3, #0
 802826a:	b570      	push	{r4, r5, r6, lr}
 802826c:	4d06      	ldr	r5, [pc, #24]	@ (8028288 <_sbrk_r+0x20>)
 802826e:	0004      	movs	r4, r0
 8028270:	0008      	movs	r0, r1
 8028272:	602b      	str	r3, [r5, #0]
 8028274:	f7ea fc38 	bl	8012ae8 <_sbrk>
 8028278:	1c43      	adds	r3, r0, #1
 802827a:	d103      	bne.n	8028284 <_sbrk_r+0x1c>
 802827c:	682b      	ldr	r3, [r5, #0]
 802827e:	2b00      	cmp	r3, #0
 8028280:	d000      	beq.n	8028284 <_sbrk_r+0x1c>
 8028282:	6023      	str	r3, [r4, #0]
 8028284:	bd70      	pop	{r4, r5, r6, pc}
 8028286:	46c0      	nop			@ (mov r8, r8)
 8028288:	2000361c 	.word	0x2000361c

0802828c <__assert_func>:
 802828c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802828e:	0014      	movs	r4, r2
 8028290:	001a      	movs	r2, r3
 8028292:	4b09      	ldr	r3, [pc, #36]	@ (80282b8 <__assert_func+0x2c>)
 8028294:	0005      	movs	r5, r0
 8028296:	681b      	ldr	r3, [r3, #0]
 8028298:	000e      	movs	r6, r1
 802829a:	68d8      	ldr	r0, [r3, #12]
 802829c:	4b07      	ldr	r3, [pc, #28]	@ (80282bc <__assert_func+0x30>)
 802829e:	2c00      	cmp	r4, #0
 80282a0:	d101      	bne.n	80282a6 <__assert_func+0x1a>
 80282a2:	4b07      	ldr	r3, [pc, #28]	@ (80282c0 <__assert_func+0x34>)
 80282a4:	001c      	movs	r4, r3
 80282a6:	4907      	ldr	r1, [pc, #28]	@ (80282c4 <__assert_func+0x38>)
 80282a8:	9301      	str	r3, [sp, #4]
 80282aa:	9402      	str	r4, [sp, #8]
 80282ac:	002b      	movs	r3, r5
 80282ae:	9600      	str	r6, [sp, #0]
 80282b0:	f000 f868 	bl	8028384 <fiprintf>
 80282b4:	f000 f876 	bl	80283a4 <abort>
 80282b8:	200003e0 	.word	0x200003e0
 80282bc:	0802e559 	.word	0x0802e559
 80282c0:	0802e594 	.word	0x0802e594
 80282c4:	0802e566 	.word	0x0802e566

080282c8 <_calloc_r>:
 80282c8:	b570      	push	{r4, r5, r6, lr}
 80282ca:	0c0b      	lsrs	r3, r1, #16
 80282cc:	0c15      	lsrs	r5, r2, #16
 80282ce:	2b00      	cmp	r3, #0
 80282d0:	d11e      	bne.n	8028310 <_calloc_r+0x48>
 80282d2:	2d00      	cmp	r5, #0
 80282d4:	d10c      	bne.n	80282f0 <_calloc_r+0x28>
 80282d6:	b289      	uxth	r1, r1
 80282d8:	b294      	uxth	r4, r2
 80282da:	434c      	muls	r4, r1
 80282dc:	0021      	movs	r1, r4
 80282de:	f7fe fe5b 	bl	8026f98 <_malloc_r>
 80282e2:	1e05      	subs	r5, r0, #0
 80282e4:	d01b      	beq.n	802831e <_calloc_r+0x56>
 80282e6:	0022      	movs	r2, r4
 80282e8:	2100      	movs	r1, #0
 80282ea:	f7fd fb23 	bl	8025934 <memset>
 80282ee:	e016      	b.n	802831e <_calloc_r+0x56>
 80282f0:	1c2b      	adds	r3, r5, #0
 80282f2:	1c0c      	adds	r4, r1, #0
 80282f4:	b289      	uxth	r1, r1
 80282f6:	b292      	uxth	r2, r2
 80282f8:	434a      	muls	r2, r1
 80282fa:	b29b      	uxth	r3, r3
 80282fc:	b2a1      	uxth	r1, r4
 80282fe:	4359      	muls	r1, r3
 8028300:	0c14      	lsrs	r4, r2, #16
 8028302:	190c      	adds	r4, r1, r4
 8028304:	0c23      	lsrs	r3, r4, #16
 8028306:	d107      	bne.n	8028318 <_calloc_r+0x50>
 8028308:	0424      	lsls	r4, r4, #16
 802830a:	b292      	uxth	r2, r2
 802830c:	4314      	orrs	r4, r2
 802830e:	e7e5      	b.n	80282dc <_calloc_r+0x14>
 8028310:	2d00      	cmp	r5, #0
 8028312:	d101      	bne.n	8028318 <_calloc_r+0x50>
 8028314:	1c14      	adds	r4, r2, #0
 8028316:	e7ed      	b.n	80282f4 <_calloc_r+0x2c>
 8028318:	230c      	movs	r3, #12
 802831a:	2500      	movs	r5, #0
 802831c:	6003      	str	r3, [r0, #0]
 802831e:	0028      	movs	r0, r5
 8028320:	bd70      	pop	{r4, r5, r6, pc}

08028322 <_realloc_r>:
 8028322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028324:	0006      	movs	r6, r0
 8028326:	000c      	movs	r4, r1
 8028328:	0015      	movs	r5, r2
 802832a:	2900      	cmp	r1, #0
 802832c:	d105      	bne.n	802833a <_realloc_r+0x18>
 802832e:	0011      	movs	r1, r2
 8028330:	f7fe fe32 	bl	8026f98 <_malloc_r>
 8028334:	0004      	movs	r4, r0
 8028336:	0020      	movs	r0, r4
 8028338:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802833a:	2a00      	cmp	r2, #0
 802833c:	d103      	bne.n	8028346 <_realloc_r+0x24>
 802833e:	f7fe fa5b 	bl	80267f8 <_free_r>
 8028342:	002c      	movs	r4, r5
 8028344:	e7f7      	b.n	8028336 <_realloc_r+0x14>
 8028346:	f000 f834 	bl	80283b2 <_malloc_usable_size_r>
 802834a:	0007      	movs	r7, r0
 802834c:	4285      	cmp	r5, r0
 802834e:	d802      	bhi.n	8028356 <_realloc_r+0x34>
 8028350:	0843      	lsrs	r3, r0, #1
 8028352:	42ab      	cmp	r3, r5
 8028354:	d3ef      	bcc.n	8028336 <_realloc_r+0x14>
 8028356:	0029      	movs	r1, r5
 8028358:	0030      	movs	r0, r6
 802835a:	f7fe fe1d 	bl	8026f98 <_malloc_r>
 802835e:	9001      	str	r0, [sp, #4]
 8028360:	2800      	cmp	r0, #0
 8028362:	d101      	bne.n	8028368 <_realloc_r+0x46>
 8028364:	9c01      	ldr	r4, [sp, #4]
 8028366:	e7e6      	b.n	8028336 <_realloc_r+0x14>
 8028368:	002a      	movs	r2, r5
 802836a:	42bd      	cmp	r5, r7
 802836c:	d900      	bls.n	8028370 <_realloc_r+0x4e>
 802836e:	003a      	movs	r2, r7
 8028370:	0021      	movs	r1, r4
 8028372:	9801      	ldr	r0, [sp, #4]
 8028374:	f7fd fbba 	bl	8025aec <memcpy>
 8028378:	0021      	movs	r1, r4
 802837a:	0030      	movs	r0, r6
 802837c:	f7fe fa3c 	bl	80267f8 <_free_r>
 8028380:	e7f0      	b.n	8028364 <_realloc_r+0x42>
	...

08028384 <fiprintf>:
 8028384:	b40e      	push	{r1, r2, r3}
 8028386:	b517      	push	{r0, r1, r2, r4, lr}
 8028388:	4c05      	ldr	r4, [pc, #20]	@ (80283a0 <fiprintf+0x1c>)
 802838a:	ab05      	add	r3, sp, #20
 802838c:	cb04      	ldmia	r3!, {r2}
 802838e:	0001      	movs	r1, r0
 8028390:	6820      	ldr	r0, [r4, #0]
 8028392:	9301      	str	r3, [sp, #4]
 8028394:	f7ff fcf8 	bl	8027d88 <_vfiprintf_r>
 8028398:	bc1e      	pop	{r1, r2, r3, r4}
 802839a:	bc08      	pop	{r3}
 802839c:	b003      	add	sp, #12
 802839e:	4718      	bx	r3
 80283a0:	200003e0 	.word	0x200003e0

080283a4 <abort>:
 80283a4:	2006      	movs	r0, #6
 80283a6:	b510      	push	{r4, lr}
 80283a8:	f000 f834 	bl	8028414 <raise>
 80283ac:	2001      	movs	r0, #1
 80283ae:	f7ea fb45 	bl	8012a3c <_exit>

080283b2 <_malloc_usable_size_r>:
 80283b2:	1f0b      	subs	r3, r1, #4
 80283b4:	681b      	ldr	r3, [r3, #0]
 80283b6:	1f18      	subs	r0, r3, #4
 80283b8:	2b00      	cmp	r3, #0
 80283ba:	da01      	bge.n	80283c0 <_malloc_usable_size_r+0xe>
 80283bc:	580b      	ldr	r3, [r1, r0]
 80283be:	18c0      	adds	r0, r0, r3
 80283c0:	4770      	bx	lr

080283c2 <_raise_r>:
 80283c2:	b570      	push	{r4, r5, r6, lr}
 80283c4:	0004      	movs	r4, r0
 80283c6:	000d      	movs	r5, r1
 80283c8:	291f      	cmp	r1, #31
 80283ca:	d904      	bls.n	80283d6 <_raise_r+0x14>
 80283cc:	2316      	movs	r3, #22
 80283ce:	6003      	str	r3, [r0, #0]
 80283d0:	2001      	movs	r0, #1
 80283d2:	4240      	negs	r0, r0
 80283d4:	bd70      	pop	{r4, r5, r6, pc}
 80283d6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80283d8:	2b00      	cmp	r3, #0
 80283da:	d004      	beq.n	80283e6 <_raise_r+0x24>
 80283dc:	008a      	lsls	r2, r1, #2
 80283de:	189b      	adds	r3, r3, r2
 80283e0:	681a      	ldr	r2, [r3, #0]
 80283e2:	2a00      	cmp	r2, #0
 80283e4:	d108      	bne.n	80283f8 <_raise_r+0x36>
 80283e6:	0020      	movs	r0, r4
 80283e8:	f000 f830 	bl	802844c <_getpid_r>
 80283ec:	002a      	movs	r2, r5
 80283ee:	0001      	movs	r1, r0
 80283f0:	0020      	movs	r0, r4
 80283f2:	f000 f819 	bl	8028428 <_kill_r>
 80283f6:	e7ed      	b.n	80283d4 <_raise_r+0x12>
 80283f8:	2a01      	cmp	r2, #1
 80283fa:	d009      	beq.n	8028410 <_raise_r+0x4e>
 80283fc:	1c51      	adds	r1, r2, #1
 80283fe:	d103      	bne.n	8028408 <_raise_r+0x46>
 8028400:	2316      	movs	r3, #22
 8028402:	6003      	str	r3, [r0, #0]
 8028404:	2001      	movs	r0, #1
 8028406:	e7e5      	b.n	80283d4 <_raise_r+0x12>
 8028408:	2100      	movs	r1, #0
 802840a:	0028      	movs	r0, r5
 802840c:	6019      	str	r1, [r3, #0]
 802840e:	4790      	blx	r2
 8028410:	2000      	movs	r0, #0
 8028412:	e7df      	b.n	80283d4 <_raise_r+0x12>

08028414 <raise>:
 8028414:	b510      	push	{r4, lr}
 8028416:	4b03      	ldr	r3, [pc, #12]	@ (8028424 <raise+0x10>)
 8028418:	0001      	movs	r1, r0
 802841a:	6818      	ldr	r0, [r3, #0]
 802841c:	f7ff ffd1 	bl	80283c2 <_raise_r>
 8028420:	bd10      	pop	{r4, pc}
 8028422:	46c0      	nop			@ (mov r8, r8)
 8028424:	200003e0 	.word	0x200003e0

08028428 <_kill_r>:
 8028428:	2300      	movs	r3, #0
 802842a:	b570      	push	{r4, r5, r6, lr}
 802842c:	4d06      	ldr	r5, [pc, #24]	@ (8028448 <_kill_r+0x20>)
 802842e:	0004      	movs	r4, r0
 8028430:	0008      	movs	r0, r1
 8028432:	0011      	movs	r1, r2
 8028434:	602b      	str	r3, [r5, #0]
 8028436:	f7ea faf1 	bl	8012a1c <_kill>
 802843a:	1c43      	adds	r3, r0, #1
 802843c:	d103      	bne.n	8028446 <_kill_r+0x1e>
 802843e:	682b      	ldr	r3, [r5, #0]
 8028440:	2b00      	cmp	r3, #0
 8028442:	d000      	beq.n	8028446 <_kill_r+0x1e>
 8028444:	6023      	str	r3, [r4, #0]
 8028446:	bd70      	pop	{r4, r5, r6, pc}
 8028448:	2000361c 	.word	0x2000361c

0802844c <_getpid_r>:
 802844c:	b510      	push	{r4, lr}
 802844e:	f7ea fadf 	bl	8012a10 <_getpid>
 8028452:	bd10      	pop	{r4, pc}

08028454 <log>:
 8028454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028456:	0004      	movs	r4, r0
 8028458:	000d      	movs	r5, r1
 802845a:	f000 f98d 	bl	8028778 <__ieee754_log>
 802845e:	0022      	movs	r2, r4
 8028460:	0006      	movs	r6, r0
 8028462:	000f      	movs	r7, r1
 8028464:	002b      	movs	r3, r5
 8028466:	0020      	movs	r0, r4
 8028468:	0029      	movs	r1, r5
 802846a:	f7db f963 	bl	8003734 <__aeabi_dcmpun>
 802846e:	2800      	cmp	r0, #0
 8028470:	d115      	bne.n	802849e <log+0x4a>
 8028472:	2200      	movs	r2, #0
 8028474:	2300      	movs	r3, #0
 8028476:	0020      	movs	r0, r4
 8028478:	0029      	movs	r1, r5
 802847a:	f7d8 f833 	bl	80004e4 <__aeabi_dcmpgt>
 802847e:	2800      	cmp	r0, #0
 8028480:	d10d      	bne.n	802849e <log+0x4a>
 8028482:	2200      	movs	r2, #0
 8028484:	2300      	movs	r3, #0
 8028486:	0020      	movs	r0, r4
 8028488:	0029      	movs	r1, r5
 802848a:	f7d8 f811 	bl	80004b0 <__aeabi_dcmpeq>
 802848e:	2800      	cmp	r0, #0
 8028490:	d008      	beq.n	80284a4 <log+0x50>
 8028492:	f7fd faf3 	bl	8025a7c <__errno>
 8028496:	2322      	movs	r3, #34	@ 0x22
 8028498:	2600      	movs	r6, #0
 802849a:	4f07      	ldr	r7, [pc, #28]	@ (80284b8 <log+0x64>)
 802849c:	6003      	str	r3, [r0, #0]
 802849e:	0030      	movs	r0, r6
 80284a0:	0039      	movs	r1, r7
 80284a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80284a4:	f7fd faea 	bl	8025a7c <__errno>
 80284a8:	2321      	movs	r3, #33	@ 0x21
 80284aa:	6003      	str	r3, [r0, #0]
 80284ac:	4803      	ldr	r0, [pc, #12]	@ (80284bc <log+0x68>)
 80284ae:	f7fd fb27 	bl	8025b00 <nan>
 80284b2:	0006      	movs	r6, r0
 80284b4:	000f      	movs	r7, r1
 80284b6:	e7f2      	b.n	802849e <log+0x4a>
 80284b8:	fff00000 	.word	0xfff00000
 80284bc:	0802e594 	.word	0x0802e594

080284c0 <pow>:
 80284c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80284c2:	0014      	movs	r4, r2
 80284c4:	001d      	movs	r5, r3
 80284c6:	9000      	str	r0, [sp, #0]
 80284c8:	9101      	str	r1, [sp, #4]
 80284ca:	f000 fb07 	bl	8028adc <__ieee754_pow>
 80284ce:	0022      	movs	r2, r4
 80284d0:	0006      	movs	r6, r0
 80284d2:	000f      	movs	r7, r1
 80284d4:	002b      	movs	r3, r5
 80284d6:	0020      	movs	r0, r4
 80284d8:	0029      	movs	r1, r5
 80284da:	f7db f92b 	bl	8003734 <__aeabi_dcmpun>
 80284de:	2800      	cmp	r0, #0
 80284e0:	d13f      	bne.n	8028562 <pow+0xa2>
 80284e2:	9800      	ldr	r0, [sp, #0]
 80284e4:	9901      	ldr	r1, [sp, #4]
 80284e6:	2200      	movs	r2, #0
 80284e8:	2300      	movs	r3, #0
 80284ea:	f7d7 ffe1 	bl	80004b0 <__aeabi_dcmpeq>
 80284ee:	2800      	cmp	r0, #0
 80284f0:	d019      	beq.n	8028526 <pow+0x66>
 80284f2:	2200      	movs	r2, #0
 80284f4:	2300      	movs	r3, #0
 80284f6:	0020      	movs	r0, r4
 80284f8:	0029      	movs	r1, r5
 80284fa:	f7d7 ffd9 	bl	80004b0 <__aeabi_dcmpeq>
 80284fe:	2800      	cmp	r0, #0
 8028500:	d146      	bne.n	8028590 <pow+0xd0>
 8028502:	0020      	movs	r0, r4
 8028504:	0029      	movs	r1, r5
 8028506:	f000 f88d 	bl	8028624 <finite>
 802850a:	2800      	cmp	r0, #0
 802850c:	d029      	beq.n	8028562 <pow+0xa2>
 802850e:	2200      	movs	r2, #0
 8028510:	2300      	movs	r3, #0
 8028512:	0020      	movs	r0, r4
 8028514:	0029      	movs	r1, r5
 8028516:	f7d7 ffd1 	bl	80004bc <__aeabi_dcmplt>
 802851a:	2800      	cmp	r0, #0
 802851c:	d021      	beq.n	8028562 <pow+0xa2>
 802851e:	f7fd faad 	bl	8025a7c <__errno>
 8028522:	2322      	movs	r3, #34	@ 0x22
 8028524:	e01c      	b.n	8028560 <pow+0xa0>
 8028526:	0030      	movs	r0, r6
 8028528:	0039      	movs	r1, r7
 802852a:	f000 f87b 	bl	8028624 <finite>
 802852e:	2800      	cmp	r0, #0
 8028530:	d11b      	bne.n	802856a <pow+0xaa>
 8028532:	9800      	ldr	r0, [sp, #0]
 8028534:	9901      	ldr	r1, [sp, #4]
 8028536:	f000 f875 	bl	8028624 <finite>
 802853a:	2800      	cmp	r0, #0
 802853c:	d015      	beq.n	802856a <pow+0xaa>
 802853e:	0020      	movs	r0, r4
 8028540:	0029      	movs	r1, r5
 8028542:	f000 f86f 	bl	8028624 <finite>
 8028546:	2800      	cmp	r0, #0
 8028548:	d00f      	beq.n	802856a <pow+0xaa>
 802854a:	0032      	movs	r2, r6
 802854c:	003b      	movs	r3, r7
 802854e:	0030      	movs	r0, r6
 8028550:	0039      	movs	r1, r7
 8028552:	f7db f8ef 	bl	8003734 <__aeabi_dcmpun>
 8028556:	2800      	cmp	r0, #0
 8028558:	d0e1      	beq.n	802851e <pow+0x5e>
 802855a:	f7fd fa8f 	bl	8025a7c <__errno>
 802855e:	2321      	movs	r3, #33	@ 0x21
 8028560:	6003      	str	r3, [r0, #0]
 8028562:	0030      	movs	r0, r6
 8028564:	0039      	movs	r1, r7
 8028566:	b003      	add	sp, #12
 8028568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802856a:	2200      	movs	r2, #0
 802856c:	2300      	movs	r3, #0
 802856e:	0030      	movs	r0, r6
 8028570:	0039      	movs	r1, r7
 8028572:	f7d7 ff9d 	bl	80004b0 <__aeabi_dcmpeq>
 8028576:	2800      	cmp	r0, #0
 8028578:	d0f3      	beq.n	8028562 <pow+0xa2>
 802857a:	9800      	ldr	r0, [sp, #0]
 802857c:	9901      	ldr	r1, [sp, #4]
 802857e:	f000 f851 	bl	8028624 <finite>
 8028582:	2800      	cmp	r0, #0
 8028584:	d0ed      	beq.n	8028562 <pow+0xa2>
 8028586:	0020      	movs	r0, r4
 8028588:	0029      	movs	r1, r5
 802858a:	f000 f84b 	bl	8028624 <finite>
 802858e:	e7c4      	b.n	802851a <pow+0x5a>
 8028590:	2600      	movs	r6, #0
 8028592:	4f01      	ldr	r7, [pc, #4]	@ (8028598 <pow+0xd8>)
 8028594:	e7e5      	b.n	8028562 <pow+0xa2>
 8028596:	46c0      	nop			@ (mov r8, r8)
 8028598:	3ff00000 	.word	0x3ff00000

0802859c <expf>:
 802859c:	b570      	push	{r4, r5, r6, lr}
 802859e:	1c04      	adds	r4, r0, #0
 80285a0:	f000 ffb8 	bl	8029514 <__ieee754_expf>
 80285a4:	1c05      	adds	r5, r0, #0
 80285a6:	1c20      	adds	r0, r4, #0
 80285a8:	f000 f844 	bl	8028634 <finitef>
 80285ac:	2800      	cmp	r0, #0
 80285ae:	d00b      	beq.n	80285c8 <expf+0x2c>
 80285b0:	490c      	ldr	r1, [pc, #48]	@ (80285e4 <expf+0x48>)
 80285b2:	1c20      	adds	r0, r4, #0
 80285b4:	f7d7 ffd0 	bl	8000558 <__aeabi_fcmpgt>
 80285b8:	2800      	cmp	r0, #0
 80285ba:	d007      	beq.n	80285cc <expf+0x30>
 80285bc:	f7fd fa5e 	bl	8025a7c <__errno>
 80285c0:	25ff      	movs	r5, #255	@ 0xff
 80285c2:	2322      	movs	r3, #34	@ 0x22
 80285c4:	05ed      	lsls	r5, r5, #23
 80285c6:	6003      	str	r3, [r0, #0]
 80285c8:	1c28      	adds	r0, r5, #0
 80285ca:	bd70      	pop	{r4, r5, r6, pc}
 80285cc:	4906      	ldr	r1, [pc, #24]	@ (80285e8 <expf+0x4c>)
 80285ce:	1c20      	adds	r0, r4, #0
 80285d0:	f7d7 ffae 	bl	8000530 <__aeabi_fcmplt>
 80285d4:	2800      	cmp	r0, #0
 80285d6:	d0f7      	beq.n	80285c8 <expf+0x2c>
 80285d8:	f7fd fa50 	bl	8025a7c <__errno>
 80285dc:	2322      	movs	r3, #34	@ 0x22
 80285de:	2500      	movs	r5, #0
 80285e0:	6003      	str	r3, [r0, #0]
 80285e2:	e7f1      	b.n	80285c8 <expf+0x2c>
 80285e4:	42b17217 	.word	0x42b17217
 80285e8:	c2cff1b5 	.word	0xc2cff1b5

080285ec <sqrtf>:
 80285ec:	b570      	push	{r4, r5, r6, lr}
 80285ee:	1c05      	adds	r5, r0, #0
 80285f0:	f000 f82a 	bl	8028648 <__ieee754_sqrtf>
 80285f4:	1c29      	adds	r1, r5, #0
 80285f6:	1c04      	adds	r4, r0, #0
 80285f8:	1c28      	adds	r0, r5, #0
 80285fa:	f7d9 f8df 	bl	80017bc <__aeabi_fcmpun>
 80285fe:	2800      	cmp	r0, #0
 8028600:	d10e      	bne.n	8028620 <sqrtf+0x34>
 8028602:	2100      	movs	r1, #0
 8028604:	1c28      	adds	r0, r5, #0
 8028606:	f7d7 ff93 	bl	8000530 <__aeabi_fcmplt>
 802860a:	2800      	cmp	r0, #0
 802860c:	d008      	beq.n	8028620 <sqrtf+0x34>
 802860e:	f7fd fa35 	bl	8025a7c <__errno>
 8028612:	2321      	movs	r3, #33	@ 0x21
 8028614:	2100      	movs	r1, #0
 8028616:	6003      	str	r3, [r0, #0]
 8028618:	1c08      	adds	r0, r1, #0
 802861a:	f7d8 fb43 	bl	8000ca4 <__aeabi_fdiv>
 802861e:	1c04      	adds	r4, r0, #0
 8028620:	1c20      	adds	r0, r4, #0
 8028622:	bd70      	pop	{r4, r5, r6, pc}

08028624 <finite>:
 8028624:	4b02      	ldr	r3, [pc, #8]	@ (8028630 <finite+0xc>)
 8028626:	0048      	lsls	r0, r1, #1
 8028628:	0840      	lsrs	r0, r0, #1
 802862a:	18c0      	adds	r0, r0, r3
 802862c:	0fc0      	lsrs	r0, r0, #31
 802862e:	4770      	bx	lr
 8028630:	80100000 	.word	0x80100000

08028634 <finitef>:
 8028634:	22ff      	movs	r2, #255	@ 0xff
 8028636:	0043      	lsls	r3, r0, #1
 8028638:	085b      	lsrs	r3, r3, #1
 802863a:	2001      	movs	r0, #1
 802863c:	05d2      	lsls	r2, r2, #23
 802863e:	4293      	cmp	r3, r2
 8028640:	db00      	blt.n	8028644 <finitef+0x10>
 8028642:	2000      	movs	r0, #0
 8028644:	4770      	bx	lr
	...

08028648 <__ieee754_sqrtf>:
 8028648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802864a:	21ff      	movs	r1, #255	@ 0xff
 802864c:	0042      	lsls	r2, r0, #1
 802864e:	0003      	movs	r3, r0
 8028650:	1c04      	adds	r4, r0, #0
 8028652:	0852      	lsrs	r2, r2, #1
 8028654:	05c9      	lsls	r1, r1, #23
 8028656:	428a      	cmp	r2, r1
 8028658:	d309      	bcc.n	802866e <__ieee754_sqrtf+0x26>
 802865a:	1c01      	adds	r1, r0, #0
 802865c:	f7d8 fcf0 	bl	8001040 <__aeabi_fmul>
 8028660:	1c01      	adds	r1, r0, #0
 8028662:	1c20      	adds	r0, r4, #0
 8028664:	f7d8 f92c 	bl	80008c0 <__aeabi_fadd>
 8028668:	1c04      	adds	r4, r0, #0
 802866a:	1c20      	adds	r0, r4, #0
 802866c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802866e:	2a00      	cmp	r2, #0
 8028670:	d0fb      	beq.n	802866a <__ieee754_sqrtf+0x22>
 8028672:	2800      	cmp	r0, #0
 8028674:	da06      	bge.n	8028684 <__ieee754_sqrtf+0x3c>
 8028676:	1c01      	adds	r1, r0, #0
 8028678:	f7d8 fe3c 	bl	80012f4 <__aeabi_fsub>
 802867c:	1c01      	adds	r1, r0, #0
 802867e:	f7d8 fb11 	bl	8000ca4 <__aeabi_fdiv>
 8028682:	e7f1      	b.n	8028668 <__ieee754_sqrtf+0x20>
 8028684:	0002      	movs	r2, r0
 8028686:	400a      	ands	r2, r1
 8028688:	4208      	tst	r0, r1
 802868a:	d040      	beq.n	802870e <__ieee754_sqrtf+0xc6>
 802868c:	15c1      	asrs	r1, r0, #23
 802868e:	2280      	movs	r2, #128	@ 0x80
 8028690:	000f      	movs	r7, r1
 8028692:	025b      	lsls	r3, r3, #9
 8028694:	0a5b      	lsrs	r3, r3, #9
 8028696:	0412      	lsls	r2, r2, #16
 8028698:	3f7f      	subs	r7, #127	@ 0x7f
 802869a:	4313      	orrs	r3, r2
 802869c:	07c9      	lsls	r1, r1, #31
 802869e:	d400      	bmi.n	80286a2 <__ieee754_sqrtf+0x5a>
 80286a0:	005b      	lsls	r3, r3, #1
 80286a2:	2400      	movs	r4, #0
 80286a4:	2180      	movs	r1, #128	@ 0x80
 80286a6:	2019      	movs	r0, #25
 80286a8:	0026      	movs	r6, r4
 80286aa:	107f      	asrs	r7, r7, #1
 80286ac:	005b      	lsls	r3, r3, #1
 80286ae:	0449      	lsls	r1, r1, #17
 80286b0:	1875      	adds	r5, r6, r1
 80286b2:	001a      	movs	r2, r3
 80286b4:	429d      	cmp	r5, r3
 80286b6:	dc02      	bgt.n	80286be <__ieee754_sqrtf+0x76>
 80286b8:	186e      	adds	r6, r5, r1
 80286ba:	1b5a      	subs	r2, r3, r5
 80286bc:	1864      	adds	r4, r4, r1
 80286be:	3801      	subs	r0, #1
 80286c0:	0053      	lsls	r3, r2, #1
 80286c2:	0849      	lsrs	r1, r1, #1
 80286c4:	2800      	cmp	r0, #0
 80286c6:	d1f3      	bne.n	80286b0 <__ieee754_sqrtf+0x68>
 80286c8:	2a00      	cmp	r2, #0
 80286ca:	d019      	beq.n	8028700 <__ieee754_sqrtf+0xb8>
 80286cc:	4d16      	ldr	r5, [pc, #88]	@ (8028728 <__ieee754_sqrtf+0xe0>)
 80286ce:	4e17      	ldr	r6, [pc, #92]	@ (802872c <__ieee754_sqrtf+0xe4>)
 80286d0:	6828      	ldr	r0, [r5, #0]
 80286d2:	6831      	ldr	r1, [r6, #0]
 80286d4:	682b      	ldr	r3, [r5, #0]
 80286d6:	9301      	str	r3, [sp, #4]
 80286d8:	f7d8 fe0c 	bl	80012f4 <__aeabi_fsub>
 80286dc:	1c01      	adds	r1, r0, #0
 80286de:	9801      	ldr	r0, [sp, #4]
 80286e0:	f7d7 ff30 	bl	8000544 <__aeabi_fcmple>
 80286e4:	2800      	cmp	r0, #0
 80286e6:	d00b      	beq.n	8028700 <__ieee754_sqrtf+0xb8>
 80286e8:	6828      	ldr	r0, [r5, #0]
 80286ea:	6831      	ldr	r1, [r6, #0]
 80286ec:	f7d8 f8e8 	bl	80008c0 <__aeabi_fadd>
 80286f0:	682d      	ldr	r5, [r5, #0]
 80286f2:	1c01      	adds	r1, r0, #0
 80286f4:	1c28      	adds	r0, r5, #0
 80286f6:	f7d7 ff1b 	bl	8000530 <__aeabi_fcmplt>
 80286fa:	2800      	cmp	r0, #0
 80286fc:	d010      	beq.n	8028720 <__ieee754_sqrtf+0xd8>
 80286fe:	3402      	adds	r4, #2
 8028700:	23fc      	movs	r3, #252	@ 0xfc
 8028702:	1064      	asrs	r4, r4, #1
 8028704:	059b      	lsls	r3, r3, #22
 8028706:	18e3      	adds	r3, r4, r3
 8028708:	05fc      	lsls	r4, r7, #23
 802870a:	18e4      	adds	r4, r4, r3
 802870c:	e7ad      	b.n	802866a <__ieee754_sqrtf+0x22>
 802870e:	2080      	movs	r0, #128	@ 0x80
 8028710:	0400      	lsls	r0, r0, #16
 8028712:	005b      	lsls	r3, r3, #1
 8028714:	0011      	movs	r1, r2
 8028716:	3201      	adds	r2, #1
 8028718:	4203      	tst	r3, r0
 802871a:	d0fa      	beq.n	8028712 <__ieee754_sqrtf+0xca>
 802871c:	4249      	negs	r1, r1
 802871e:	e7b6      	b.n	802868e <__ieee754_sqrtf+0x46>
 8028720:	2301      	movs	r3, #1
 8028722:	3401      	adds	r4, #1
 8028724:	439c      	bics	r4, r3
 8028726:	e7eb      	b.n	8028700 <__ieee754_sqrtf+0xb8>
 8028728:	0802e7ec 	.word	0x0802e7ec
 802872c:	0802e7e8 	.word	0x0802e7e8

08028730 <roundf>:
 8028730:	0dc3      	lsrs	r3, r0, #23
 8028732:	b2db      	uxtb	r3, r3
 8028734:	3b7f      	subs	r3, #127	@ 0x7f
 8028736:	0002      	movs	r2, r0
 8028738:	b510      	push	{r4, lr}
 802873a:	2b16      	cmp	r3, #22
 802873c:	dc13      	bgt.n	8028766 <roundf+0x36>
 802873e:	2b00      	cmp	r3, #0
 8028740:	da07      	bge.n	8028752 <roundf+0x22>
 8028742:	0fc2      	lsrs	r2, r0, #31
 8028744:	07d0      	lsls	r0, r2, #31
 8028746:	3301      	adds	r3, #1
 8028748:	d102      	bne.n	8028750 <roundf+0x20>
 802874a:	23fe      	movs	r3, #254	@ 0xfe
 802874c:	059b      	lsls	r3, r3, #22
 802874e:	4318      	orrs	r0, r3
 8028750:	bd10      	pop	{r4, pc}
 8028752:	4908      	ldr	r1, [pc, #32]	@ (8028774 <roundf+0x44>)
 8028754:	4119      	asrs	r1, r3
 8028756:	4208      	tst	r0, r1
 8028758:	d0fa      	beq.n	8028750 <roundf+0x20>
 802875a:	2080      	movs	r0, #128	@ 0x80
 802875c:	03c0      	lsls	r0, r0, #15
 802875e:	4118      	asrs	r0, r3
 8028760:	1880      	adds	r0, r0, r2
 8028762:	4388      	bics	r0, r1
 8028764:	e7f4      	b.n	8028750 <roundf+0x20>
 8028766:	2b80      	cmp	r3, #128	@ 0x80
 8028768:	d1f2      	bne.n	8028750 <roundf+0x20>
 802876a:	1c01      	adds	r1, r0, #0
 802876c:	f7d8 f8a8 	bl	80008c0 <__aeabi_fadd>
 8028770:	e7ee      	b.n	8028750 <roundf+0x20>
 8028772:	46c0      	nop			@ (mov r8, r8)
 8028774:	007fffff 	.word	0x007fffff

08028778 <__ieee754_log>:
 8028778:	2380      	movs	r3, #128	@ 0x80
 802877a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802877c:	035b      	lsls	r3, r3, #13
 802877e:	000e      	movs	r6, r1
 8028780:	b08d      	sub	sp, #52	@ 0x34
 8028782:	4299      	cmp	r1, r3
 8028784:	da23      	bge.n	80287ce <__ieee754_log+0x56>
 8028786:	004b      	lsls	r3, r1, #1
 8028788:	085b      	lsrs	r3, r3, #1
 802878a:	4303      	orrs	r3, r0
 802878c:	d107      	bne.n	802879e <__ieee754_log+0x26>
 802878e:	2200      	movs	r2, #0
 8028790:	2300      	movs	r3, #0
 8028792:	2000      	movs	r0, #0
 8028794:	49b4      	ldr	r1, [pc, #720]	@ (8028a68 <__ieee754_log+0x2f0>)
 8028796:	f7d9 fca3 	bl	80020e0 <__aeabi_ddiv>
 802879a:	b00d      	add	sp, #52	@ 0x34
 802879c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802879e:	2900      	cmp	r1, #0
 80287a0:	da06      	bge.n	80287b0 <__ieee754_log+0x38>
 80287a2:	0002      	movs	r2, r0
 80287a4:	000b      	movs	r3, r1
 80287a6:	f7da fbbb 	bl	8002f20 <__aeabi_dsub>
 80287aa:	2200      	movs	r2, #0
 80287ac:	2300      	movs	r3, #0
 80287ae:	e7f2      	b.n	8028796 <__ieee754_log+0x1e>
 80287b0:	4bae      	ldr	r3, [pc, #696]	@ (8028a6c <__ieee754_log+0x2f4>)
 80287b2:	2200      	movs	r2, #0
 80287b4:	f7da f8ce 	bl	8002954 <__aeabi_dmul>
 80287b8:	2336      	movs	r3, #54	@ 0x36
 80287ba:	000e      	movs	r6, r1
 80287bc:	425b      	negs	r3, r3
 80287be:	4aac      	ldr	r2, [pc, #688]	@ (8028a70 <__ieee754_log+0x2f8>)
 80287c0:	4296      	cmp	r6, r2
 80287c2:	dd06      	ble.n	80287d2 <__ieee754_log+0x5a>
 80287c4:	0002      	movs	r2, r0
 80287c6:	000b      	movs	r3, r1
 80287c8:	f7d9 f8c4 	bl	8001954 <__aeabi_dadd>
 80287cc:	e7e5      	b.n	802879a <__ieee754_log+0x22>
 80287ce:	2300      	movs	r3, #0
 80287d0:	e7f5      	b.n	80287be <__ieee754_log+0x46>
 80287d2:	4ca8      	ldr	r4, [pc, #672]	@ (8028a74 <__ieee754_log+0x2fc>)
 80287d4:	1532      	asrs	r2, r6, #20
 80287d6:	1912      	adds	r2, r2, r4
 80287d8:	0336      	lsls	r6, r6, #12
 80287da:	4ca7      	ldr	r4, [pc, #668]	@ (8028a78 <__ieee754_log+0x300>)
 80287dc:	18d2      	adds	r2, r2, r3
 80287de:	0b33      	lsrs	r3, r6, #12
 80287e0:	9302      	str	r3, [sp, #8]
 80287e2:	191b      	adds	r3, r3, r4
 80287e4:	2480      	movs	r4, #128	@ 0x80
 80287e6:	0364      	lsls	r4, r4, #13
 80287e8:	4023      	ands	r3, r4
 80287ea:	4ca4      	ldr	r4, [pc, #656]	@ (8028a7c <__ieee754_log+0x304>)
 80287ec:	9d02      	ldr	r5, [sp, #8]
 80287ee:	405c      	eors	r4, r3
 80287f0:	151b      	asrs	r3, r3, #20
 80287f2:	189b      	adds	r3, r3, r2
 80287f4:	4325      	orrs	r5, r4
 80287f6:	2200      	movs	r2, #0
 80287f8:	9300      	str	r3, [sp, #0]
 80287fa:	0029      	movs	r1, r5
 80287fc:	4b9f      	ldr	r3, [pc, #636]	@ (8028a7c <__ieee754_log+0x304>)
 80287fe:	f7da fb8f 	bl	8002f20 <__aeabi_dsub>
 8028802:	9b02      	ldr	r3, [sp, #8]
 8028804:	0006      	movs	r6, r0
 8028806:	3302      	adds	r3, #2
 8028808:	031b      	lsls	r3, r3, #12
 802880a:	000f      	movs	r7, r1
 802880c:	2200      	movs	r2, #0
 802880e:	0b1b      	lsrs	r3, r3, #12
 8028810:	2b02      	cmp	r3, #2
 8028812:	dc64      	bgt.n	80288de <__ieee754_log+0x166>
 8028814:	2300      	movs	r3, #0
 8028816:	f7d7 fe4b 	bl	80004b0 <__aeabi_dcmpeq>
 802881a:	2800      	cmp	r0, #0
 802881c:	d019      	beq.n	8028852 <__ieee754_log+0xda>
 802881e:	9b00      	ldr	r3, [sp, #0]
 8028820:	2b00      	cmp	r3, #0
 8028822:	d100      	bne.n	8028826 <__ieee754_log+0xae>
 8028824:	e11c      	b.n	8028a60 <__ieee754_log+0x2e8>
 8028826:	0018      	movs	r0, r3
 8028828:	f7da ffe2 	bl	80037f0 <__aeabi_i2d>
 802882c:	4a94      	ldr	r2, [pc, #592]	@ (8028a80 <__ieee754_log+0x308>)
 802882e:	4b95      	ldr	r3, [pc, #596]	@ (8028a84 <__ieee754_log+0x30c>)
 8028830:	0004      	movs	r4, r0
 8028832:	000d      	movs	r5, r1
 8028834:	f7da f88e 	bl	8002954 <__aeabi_dmul>
 8028838:	4a93      	ldr	r2, [pc, #588]	@ (8028a88 <__ieee754_log+0x310>)
 802883a:	0006      	movs	r6, r0
 802883c:	000f      	movs	r7, r1
 802883e:	4b93      	ldr	r3, [pc, #588]	@ (8028a8c <__ieee754_log+0x314>)
 8028840:	0020      	movs	r0, r4
 8028842:	0029      	movs	r1, r5
 8028844:	f7da f886 	bl	8002954 <__aeabi_dmul>
 8028848:	0002      	movs	r2, r0
 802884a:	000b      	movs	r3, r1
 802884c:	0030      	movs	r0, r6
 802884e:	0039      	movs	r1, r7
 8028850:	e7ba      	b.n	80287c8 <__ieee754_log+0x50>
 8028852:	4a8f      	ldr	r2, [pc, #572]	@ (8028a90 <__ieee754_log+0x318>)
 8028854:	4b8f      	ldr	r3, [pc, #572]	@ (8028a94 <__ieee754_log+0x31c>)
 8028856:	0030      	movs	r0, r6
 8028858:	0039      	movs	r1, r7
 802885a:	f7da f87b 	bl	8002954 <__aeabi_dmul>
 802885e:	0002      	movs	r2, r0
 8028860:	000b      	movs	r3, r1
 8028862:	2000      	movs	r0, #0
 8028864:	498c      	ldr	r1, [pc, #560]	@ (8028a98 <__ieee754_log+0x320>)
 8028866:	f7da fb5b 	bl	8002f20 <__aeabi_dsub>
 802886a:	0032      	movs	r2, r6
 802886c:	0004      	movs	r4, r0
 802886e:	000d      	movs	r5, r1
 8028870:	003b      	movs	r3, r7
 8028872:	0030      	movs	r0, r6
 8028874:	0039      	movs	r1, r7
 8028876:	f7da f86d 	bl	8002954 <__aeabi_dmul>
 802887a:	000b      	movs	r3, r1
 802887c:	0002      	movs	r2, r0
 802887e:	0029      	movs	r1, r5
 8028880:	0020      	movs	r0, r4
 8028882:	f7da f867 	bl	8002954 <__aeabi_dmul>
 8028886:	9b00      	ldr	r3, [sp, #0]
 8028888:	9002      	str	r0, [sp, #8]
 802888a:	9103      	str	r1, [sp, #12]
 802888c:	2b00      	cmp	r3, #0
 802888e:	d106      	bne.n	802889e <__ieee754_log+0x126>
 8028890:	0002      	movs	r2, r0
 8028892:	000b      	movs	r3, r1
 8028894:	0030      	movs	r0, r6
 8028896:	0039      	movs	r1, r7
 8028898:	f7da fb42 	bl	8002f20 <__aeabi_dsub>
 802889c:	e77d      	b.n	802879a <__ieee754_log+0x22>
 802889e:	9800      	ldr	r0, [sp, #0]
 80288a0:	f7da ffa6 	bl	80037f0 <__aeabi_i2d>
 80288a4:	4a76      	ldr	r2, [pc, #472]	@ (8028a80 <__ieee754_log+0x308>)
 80288a6:	4b77      	ldr	r3, [pc, #476]	@ (8028a84 <__ieee754_log+0x30c>)
 80288a8:	0004      	movs	r4, r0
 80288aa:	000d      	movs	r5, r1
 80288ac:	f7da f852 	bl	8002954 <__aeabi_dmul>
 80288b0:	4a75      	ldr	r2, [pc, #468]	@ (8028a88 <__ieee754_log+0x310>)
 80288b2:	9000      	str	r0, [sp, #0]
 80288b4:	9101      	str	r1, [sp, #4]
 80288b6:	4b75      	ldr	r3, [pc, #468]	@ (8028a8c <__ieee754_log+0x314>)
 80288b8:	0020      	movs	r0, r4
 80288ba:	0029      	movs	r1, r5
 80288bc:	f7da f84a 	bl	8002954 <__aeabi_dmul>
 80288c0:	0002      	movs	r2, r0
 80288c2:	000b      	movs	r3, r1
 80288c4:	9802      	ldr	r0, [sp, #8]
 80288c6:	9903      	ldr	r1, [sp, #12]
 80288c8:	f7da fb2a 	bl	8002f20 <__aeabi_dsub>
 80288cc:	0032      	movs	r2, r6
 80288ce:	003b      	movs	r3, r7
 80288d0:	f7da fb26 	bl	8002f20 <__aeabi_dsub>
 80288d4:	0002      	movs	r2, r0
 80288d6:	000b      	movs	r3, r1
 80288d8:	9800      	ldr	r0, [sp, #0]
 80288da:	9901      	ldr	r1, [sp, #4]
 80288dc:	e7dc      	b.n	8028898 <__ieee754_log+0x120>
 80288de:	2380      	movs	r3, #128	@ 0x80
 80288e0:	05db      	lsls	r3, r3, #23
 80288e2:	f7d9 f837 	bl	8001954 <__aeabi_dadd>
 80288e6:	0002      	movs	r2, r0
 80288e8:	000b      	movs	r3, r1
 80288ea:	0030      	movs	r0, r6
 80288ec:	0039      	movs	r1, r7
 80288ee:	f7d9 fbf7 	bl	80020e0 <__aeabi_ddiv>
 80288f2:	9004      	str	r0, [sp, #16]
 80288f4:	9105      	str	r1, [sp, #20]
 80288f6:	9800      	ldr	r0, [sp, #0]
 80288f8:	f7da ff7a 	bl	80037f0 <__aeabi_i2d>
 80288fc:	9a04      	ldr	r2, [sp, #16]
 80288fe:	9b05      	ldr	r3, [sp, #20]
 8028900:	9006      	str	r0, [sp, #24]
 8028902:	9107      	str	r1, [sp, #28]
 8028904:	0010      	movs	r0, r2
 8028906:	0019      	movs	r1, r3
 8028908:	f7da f824 	bl	8002954 <__aeabi_dmul>
 802890c:	4a63      	ldr	r2, [pc, #396]	@ (8028a9c <__ieee754_log+0x324>)
 802890e:	9b02      	ldr	r3, [sp, #8]
 8028910:	4694      	mov	ip, r2
 8028912:	4463      	add	r3, ip
 8028914:	0002      	movs	r2, r0
 8028916:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028918:	000b      	movs	r3, r1
 802891a:	9008      	str	r0, [sp, #32]
 802891c:	9109      	str	r1, [sp, #36]	@ 0x24
 802891e:	f7da f819 	bl	8002954 <__aeabi_dmul>
 8028922:	0004      	movs	r4, r0
 8028924:	000d      	movs	r5, r1
 8028926:	4a5e      	ldr	r2, [pc, #376]	@ (8028aa0 <__ieee754_log+0x328>)
 8028928:	4b5e      	ldr	r3, [pc, #376]	@ (8028aa4 <__ieee754_log+0x32c>)
 802892a:	f7da f813 	bl	8002954 <__aeabi_dmul>
 802892e:	4a5e      	ldr	r2, [pc, #376]	@ (8028aa8 <__ieee754_log+0x330>)
 8028930:	4b5e      	ldr	r3, [pc, #376]	@ (8028aac <__ieee754_log+0x334>)
 8028932:	f7d9 f80f 	bl	8001954 <__aeabi_dadd>
 8028936:	0022      	movs	r2, r4
 8028938:	002b      	movs	r3, r5
 802893a:	f7da f80b 	bl	8002954 <__aeabi_dmul>
 802893e:	4a5c      	ldr	r2, [pc, #368]	@ (8028ab0 <__ieee754_log+0x338>)
 8028940:	4b5c      	ldr	r3, [pc, #368]	@ (8028ab4 <__ieee754_log+0x33c>)
 8028942:	f7d9 f807 	bl	8001954 <__aeabi_dadd>
 8028946:	0022      	movs	r2, r4
 8028948:	002b      	movs	r3, r5
 802894a:	f7da f803 	bl	8002954 <__aeabi_dmul>
 802894e:	4a5a      	ldr	r2, [pc, #360]	@ (8028ab8 <__ieee754_log+0x340>)
 8028950:	4b5a      	ldr	r3, [pc, #360]	@ (8028abc <__ieee754_log+0x344>)
 8028952:	f7d8 ffff 	bl	8001954 <__aeabi_dadd>
 8028956:	9a08      	ldr	r2, [sp, #32]
 8028958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802895a:	f7d9 fffb 	bl	8002954 <__aeabi_dmul>
 802895e:	4a58      	ldr	r2, [pc, #352]	@ (8028ac0 <__ieee754_log+0x348>)
 8028960:	9008      	str	r0, [sp, #32]
 8028962:	9109      	str	r1, [sp, #36]	@ 0x24
 8028964:	4b57      	ldr	r3, [pc, #348]	@ (8028ac4 <__ieee754_log+0x34c>)
 8028966:	0020      	movs	r0, r4
 8028968:	0029      	movs	r1, r5
 802896a:	f7d9 fff3 	bl	8002954 <__aeabi_dmul>
 802896e:	4a56      	ldr	r2, [pc, #344]	@ (8028ac8 <__ieee754_log+0x350>)
 8028970:	4b56      	ldr	r3, [pc, #344]	@ (8028acc <__ieee754_log+0x354>)
 8028972:	f7d8 ffef 	bl	8001954 <__aeabi_dadd>
 8028976:	0022      	movs	r2, r4
 8028978:	002b      	movs	r3, r5
 802897a:	f7d9 ffeb 	bl	8002954 <__aeabi_dmul>
 802897e:	4a54      	ldr	r2, [pc, #336]	@ (8028ad0 <__ieee754_log+0x358>)
 8028980:	4b54      	ldr	r3, [pc, #336]	@ (8028ad4 <__ieee754_log+0x35c>)
 8028982:	f7d8 ffe7 	bl	8001954 <__aeabi_dadd>
 8028986:	0022      	movs	r2, r4
 8028988:	002b      	movs	r3, r5
 802898a:	f7d9 ffe3 	bl	8002954 <__aeabi_dmul>
 802898e:	0002      	movs	r2, r0
 8028990:	000b      	movs	r3, r1
 8028992:	9808      	ldr	r0, [sp, #32]
 8028994:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028996:	f7d8 ffdd 	bl	8001954 <__aeabi_dadd>
 802899a:	9a02      	ldr	r2, [sp, #8]
 802899c:	4b4e      	ldr	r3, [pc, #312]	@ (8028ad8 <__ieee754_log+0x360>)
 802899e:	0004      	movs	r4, r0
 80289a0:	1a9b      	subs	r3, r3, r2
 80289a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80289a4:	000d      	movs	r5, r1
 80289a6:	4313      	orrs	r3, r2
 80289a8:	2b00      	cmp	r3, #0
 80289aa:	dd34      	ble.n	8028a16 <__ieee754_log+0x29e>
 80289ac:	2200      	movs	r2, #0
 80289ae:	4b3a      	ldr	r3, [pc, #232]	@ (8028a98 <__ieee754_log+0x320>)
 80289b0:	0030      	movs	r0, r6
 80289b2:	0039      	movs	r1, r7
 80289b4:	f7d9 ffce 	bl	8002954 <__aeabi_dmul>
 80289b8:	0032      	movs	r2, r6
 80289ba:	003b      	movs	r3, r7
 80289bc:	f7d9 ffca 	bl	8002954 <__aeabi_dmul>
 80289c0:	0002      	movs	r2, r0
 80289c2:	000b      	movs	r3, r1
 80289c4:	9002      	str	r0, [sp, #8]
 80289c6:	9103      	str	r1, [sp, #12]
 80289c8:	0020      	movs	r0, r4
 80289ca:	0029      	movs	r1, r5
 80289cc:	f7d8 ffc2 	bl	8001954 <__aeabi_dadd>
 80289d0:	9a04      	ldr	r2, [sp, #16]
 80289d2:	9b05      	ldr	r3, [sp, #20]
 80289d4:	f7d9 ffbe 	bl	8002954 <__aeabi_dmul>
 80289d8:	9b00      	ldr	r3, [sp, #0]
 80289da:	0004      	movs	r4, r0
 80289dc:	000d      	movs	r5, r1
 80289de:	2b00      	cmp	r3, #0
 80289e0:	d106      	bne.n	80289f0 <__ieee754_log+0x278>
 80289e2:	0002      	movs	r2, r0
 80289e4:	000b      	movs	r3, r1
 80289e6:	9802      	ldr	r0, [sp, #8]
 80289e8:	9903      	ldr	r1, [sp, #12]
 80289ea:	f7da fa99 	bl	8002f20 <__aeabi_dsub>
 80289ee:	e74f      	b.n	8028890 <__ieee754_log+0x118>
 80289f0:	4a23      	ldr	r2, [pc, #140]	@ (8028a80 <__ieee754_log+0x308>)
 80289f2:	4b24      	ldr	r3, [pc, #144]	@ (8028a84 <__ieee754_log+0x30c>)
 80289f4:	9806      	ldr	r0, [sp, #24]
 80289f6:	9907      	ldr	r1, [sp, #28]
 80289f8:	f7d9 ffac 	bl	8002954 <__aeabi_dmul>
 80289fc:	4a22      	ldr	r2, [pc, #136]	@ (8028a88 <__ieee754_log+0x310>)
 80289fe:	9000      	str	r0, [sp, #0]
 8028a00:	9101      	str	r1, [sp, #4]
 8028a02:	9806      	ldr	r0, [sp, #24]
 8028a04:	9907      	ldr	r1, [sp, #28]
 8028a06:	4b21      	ldr	r3, [pc, #132]	@ (8028a8c <__ieee754_log+0x314>)
 8028a08:	f7d9 ffa4 	bl	8002954 <__aeabi_dmul>
 8028a0c:	0022      	movs	r2, r4
 8028a0e:	002b      	movs	r3, r5
 8028a10:	f7d8 ffa0 	bl	8001954 <__aeabi_dadd>
 8028a14:	e754      	b.n	80288c0 <__ieee754_log+0x148>
 8028a16:	0002      	movs	r2, r0
 8028a18:	000b      	movs	r3, r1
 8028a1a:	0030      	movs	r0, r6
 8028a1c:	0039      	movs	r1, r7
 8028a1e:	f7da fa7f 	bl	8002f20 <__aeabi_dsub>
 8028a22:	9a04      	ldr	r2, [sp, #16]
 8028a24:	9b05      	ldr	r3, [sp, #20]
 8028a26:	f7d9 ff95 	bl	8002954 <__aeabi_dmul>
 8028a2a:	9b00      	ldr	r3, [sp, #0]
 8028a2c:	0004      	movs	r4, r0
 8028a2e:	000d      	movs	r5, r1
 8028a30:	2b00      	cmp	r3, #0
 8028a32:	d102      	bne.n	8028a3a <__ieee754_log+0x2c2>
 8028a34:	0002      	movs	r2, r0
 8028a36:	000b      	movs	r3, r1
 8028a38:	e72c      	b.n	8028894 <__ieee754_log+0x11c>
 8028a3a:	4a11      	ldr	r2, [pc, #68]	@ (8028a80 <__ieee754_log+0x308>)
 8028a3c:	4b11      	ldr	r3, [pc, #68]	@ (8028a84 <__ieee754_log+0x30c>)
 8028a3e:	9806      	ldr	r0, [sp, #24]
 8028a40:	9907      	ldr	r1, [sp, #28]
 8028a42:	f7d9 ff87 	bl	8002954 <__aeabi_dmul>
 8028a46:	4a10      	ldr	r2, [pc, #64]	@ (8028a88 <__ieee754_log+0x310>)
 8028a48:	9000      	str	r0, [sp, #0]
 8028a4a:	9101      	str	r1, [sp, #4]
 8028a4c:	9806      	ldr	r0, [sp, #24]
 8028a4e:	9907      	ldr	r1, [sp, #28]
 8028a50:	4b0e      	ldr	r3, [pc, #56]	@ (8028a8c <__ieee754_log+0x314>)
 8028a52:	f7d9 ff7f 	bl	8002954 <__aeabi_dmul>
 8028a56:	0002      	movs	r2, r0
 8028a58:	000b      	movs	r3, r1
 8028a5a:	0020      	movs	r0, r4
 8028a5c:	0029      	movs	r1, r5
 8028a5e:	e733      	b.n	80288c8 <__ieee754_log+0x150>
 8028a60:	2000      	movs	r0, #0
 8028a62:	2100      	movs	r1, #0
 8028a64:	e699      	b.n	802879a <__ieee754_log+0x22>
 8028a66:	46c0      	nop			@ (mov r8, r8)
 8028a68:	c3500000 	.word	0xc3500000
 8028a6c:	43500000 	.word	0x43500000
 8028a70:	7fefffff 	.word	0x7fefffff
 8028a74:	fffffc01 	.word	0xfffffc01
 8028a78:	00095f64 	.word	0x00095f64
 8028a7c:	3ff00000 	.word	0x3ff00000
 8028a80:	fee00000 	.word	0xfee00000
 8028a84:	3fe62e42 	.word	0x3fe62e42
 8028a88:	35793c76 	.word	0x35793c76
 8028a8c:	3dea39ef 	.word	0x3dea39ef
 8028a90:	55555555 	.word	0x55555555
 8028a94:	3fd55555 	.word	0x3fd55555
 8028a98:	3fe00000 	.word	0x3fe00000
 8028a9c:	fff9eb86 	.word	0xfff9eb86
 8028aa0:	df3e5244 	.word	0xdf3e5244
 8028aa4:	3fc2f112 	.word	0x3fc2f112
 8028aa8:	96cb03de 	.word	0x96cb03de
 8028aac:	3fc74664 	.word	0x3fc74664
 8028ab0:	94229359 	.word	0x94229359
 8028ab4:	3fd24924 	.word	0x3fd24924
 8028ab8:	55555593 	.word	0x55555593
 8028abc:	3fe55555 	.word	0x3fe55555
 8028ac0:	d078c69f 	.word	0xd078c69f
 8028ac4:	3fc39a09 	.word	0x3fc39a09
 8028ac8:	1d8e78af 	.word	0x1d8e78af
 8028acc:	3fcc71c5 	.word	0x3fcc71c5
 8028ad0:	9997fa04 	.word	0x9997fa04
 8028ad4:	3fd99999 	.word	0x3fd99999
 8028ad8:	0006b851 	.word	0x0006b851

08028adc <__ieee754_pow>:
 8028adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028ade:	b095      	sub	sp, #84	@ 0x54
 8028ae0:	9204      	str	r2, [sp, #16]
 8028ae2:	9305      	str	r3, [sp, #20]
 8028ae4:	9b04      	ldr	r3, [sp, #16]
 8028ae6:	9f05      	ldr	r7, [sp, #20]
 8028ae8:	001a      	movs	r2, r3
 8028aea:	007d      	lsls	r5, r7, #1
 8028aec:	086d      	lsrs	r5, r5, #1
 8028aee:	9002      	str	r0, [sp, #8]
 8028af0:	9103      	str	r1, [sp, #12]
 8028af2:	432a      	orrs	r2, r5
 8028af4:	d11a      	bne.n	8028b2c <__ieee754_pow+0x50>
 8028af6:	2180      	movs	r1, #128	@ 0x80
 8028af8:	9a02      	ldr	r2, [sp, #8]
 8028afa:	9803      	ldr	r0, [sp, #12]
 8028afc:	0309      	lsls	r1, r1, #12
 8028afe:	4048      	eors	r0, r1
 8028b00:	0003      	movs	r3, r0
 8028b02:	1892      	adds	r2, r2, r2
 8028b04:	415b      	adcs	r3, r3
 8028b06:	4996      	ldr	r1, [pc, #600]	@ (8028d60 <__ieee754_pow+0x284>)
 8028b08:	428b      	cmp	r3, r1
 8028b0a:	d806      	bhi.n	8028b1a <__ieee754_pow+0x3e>
 8028b0c:	d001      	beq.n	8028b12 <__ieee754_pow+0x36>
 8028b0e:	f000 fcce 	bl	80294ae <__ieee754_pow+0x9d2>
 8028b12:	2a00      	cmp	r2, #0
 8028b14:	d101      	bne.n	8028b1a <__ieee754_pow+0x3e>
 8028b16:	f000 fcca 	bl	80294ae <__ieee754_pow+0x9d2>
 8028b1a:	9a04      	ldr	r2, [sp, #16]
 8028b1c:	9b05      	ldr	r3, [sp, #20]
 8028b1e:	9802      	ldr	r0, [sp, #8]
 8028b20:	9903      	ldr	r1, [sp, #12]
 8028b22:	f7d8 ff17 	bl	8001954 <__aeabi_dadd>
 8028b26:	9000      	str	r0, [sp, #0]
 8028b28:	9101      	str	r1, [sp, #4]
 8028b2a:	e08e      	b.n	8028c4a <__ieee754_pow+0x16e>
 8028b2c:	9a03      	ldr	r2, [sp, #12]
 8028b2e:	9206      	str	r2, [sp, #24]
 8028b30:	9a02      	ldr	r2, [sp, #8]
 8028b32:	920a      	str	r2, [sp, #40]	@ 0x28
 8028b34:	9a03      	ldr	r2, [sp, #12]
 8028b36:	0054      	lsls	r4, r2, #1
 8028b38:	4a8a      	ldr	r2, [pc, #552]	@ (8028d64 <__ieee754_pow+0x288>)
 8028b3a:	0864      	lsrs	r4, r4, #1
 8028b3c:	4294      	cmp	r4, r2
 8028b3e:	d80e      	bhi.n	8028b5e <__ieee754_pow+0x82>
 8028b40:	d105      	bne.n	8028b4e <__ieee754_pow+0x72>
 8028b42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028b44:	2a00      	cmp	r2, #0
 8028b46:	d1e8      	bne.n	8028b1a <__ieee754_pow+0x3e>
 8028b48:	42a5      	cmp	r5, r4
 8028b4a:	d8e6      	bhi.n	8028b1a <__ieee754_pow+0x3e>
 8028b4c:	e002      	b.n	8028b54 <__ieee754_pow+0x78>
 8028b4e:	4a85      	ldr	r2, [pc, #532]	@ (8028d64 <__ieee754_pow+0x288>)
 8028b50:	4295      	cmp	r5, r2
 8028b52:	d804      	bhi.n	8028b5e <__ieee754_pow+0x82>
 8028b54:	4a83      	ldr	r2, [pc, #524]	@ (8028d64 <__ieee754_pow+0x288>)
 8028b56:	4295      	cmp	r5, r2
 8028b58:	d10c      	bne.n	8028b74 <__ieee754_pow+0x98>
 8028b5a:	2b00      	cmp	r3, #0
 8028b5c:	d00a      	beq.n	8028b74 <__ieee754_pow+0x98>
 8028b5e:	4a82      	ldr	r2, [pc, #520]	@ (8028d68 <__ieee754_pow+0x28c>)
 8028b60:	9b03      	ldr	r3, [sp, #12]
 8028b62:	189b      	adds	r3, r3, r2
 8028b64:	9a02      	ldr	r2, [sp, #8]
 8028b66:	4313      	orrs	r3, r2
 8028b68:	d1d7      	bne.n	8028b1a <__ieee754_pow+0x3e>
 8028b6a:	2180      	movs	r1, #128	@ 0x80
 8028b6c:	9a04      	ldr	r2, [sp, #16]
 8028b6e:	9805      	ldr	r0, [sp, #20]
 8028b70:	0309      	lsls	r1, r1, #12
 8028b72:	e7c4      	b.n	8028afe <__ieee754_pow+0x22>
 8028b74:	2600      	movs	r6, #0
 8028b76:	9a06      	ldr	r2, [sp, #24]
 8028b78:	9408      	str	r4, [sp, #32]
 8028b7a:	42b2      	cmp	r2, r6
 8028b7c:	da42      	bge.n	8028c04 <__ieee754_pow+0x128>
 8028b7e:	4a7b      	ldr	r2, [pc, #492]	@ (8028d6c <__ieee754_pow+0x290>)
 8028b80:	4295      	cmp	r5, r2
 8028b82:	d83e      	bhi.n	8028c02 <__ieee754_pow+0x126>
 8028b84:	4a7a      	ldr	r2, [pc, #488]	@ (8028d70 <__ieee754_pow+0x294>)
 8028b86:	4295      	cmp	r5, r2
 8028b88:	d910      	bls.n	8028bac <__ieee754_pow+0xd0>
 8028b8a:	497a      	ldr	r1, [pc, #488]	@ (8028d74 <__ieee754_pow+0x298>)
 8028b8c:	152a      	asrs	r2, r5, #20
 8028b8e:	1852      	adds	r2, r2, r1
 8028b90:	2a14      	cmp	r2, #20
 8028b92:	dd18      	ble.n	8028bc6 <__ieee754_pow+0xea>
 8028b94:	2134      	movs	r1, #52	@ 0x34
 8028b96:	1a89      	subs	r1, r1, r2
 8028b98:	9a04      	ldr	r2, [sp, #16]
 8028b9a:	40ca      	lsrs	r2, r1
 8028b9c:	0010      	movs	r0, r2
 8028b9e:	4088      	lsls	r0, r1
 8028ba0:	4298      	cmp	r0, r3
 8028ba2:	d103      	bne.n	8028bac <__ieee754_pow+0xd0>
 8028ba4:	2101      	movs	r1, #1
 8028ba6:	3602      	adds	r6, #2
 8028ba8:	400a      	ands	r2, r1
 8028baa:	1ab6      	subs	r6, r6, r2
 8028bac:	2b00      	cmp	r3, #0
 8028bae:	d15b      	bne.n	8028c68 <__ieee754_pow+0x18c>
 8028bb0:	2380      	movs	r3, #128	@ 0x80
 8028bb2:	05db      	lsls	r3, r3, #23
 8028bb4:	429f      	cmp	r7, r3
 8028bb6:	d14c      	bne.n	8028c52 <__ieee754_pow+0x176>
 8028bb8:	9a02      	ldr	r2, [sp, #8]
 8028bba:	9b03      	ldr	r3, [sp, #12]
 8028bbc:	0010      	movs	r0, r2
 8028bbe:	0019      	movs	r1, r3
 8028bc0:	f7d9 fec8 	bl	8002954 <__aeabi_dmul>
 8028bc4:	e7af      	b.n	8028b26 <__ieee754_pow+0x4a>
 8028bc6:	2b00      	cmp	r3, #0
 8028bc8:	d14e      	bne.n	8028c68 <__ieee754_pow+0x18c>
 8028bca:	3314      	adds	r3, #20
 8028bcc:	1a9a      	subs	r2, r3, r2
 8028bce:	002b      	movs	r3, r5
 8028bd0:	4113      	asrs	r3, r2
 8028bd2:	0019      	movs	r1, r3
 8028bd4:	4091      	lsls	r1, r2
 8028bd6:	42a9      	cmp	r1, r5
 8028bd8:	d103      	bne.n	8028be2 <__ieee754_pow+0x106>
 8028bda:	2201      	movs	r2, #1
 8028bdc:	2602      	movs	r6, #2
 8028bde:	4013      	ands	r3, r2
 8028be0:	1af6      	subs	r6, r6, r3
 8028be2:	4b65      	ldr	r3, [pc, #404]	@ (8028d78 <__ieee754_pow+0x29c>)
 8028be4:	429d      	cmp	r5, r3
 8028be6:	d1e3      	bne.n	8028bb0 <__ieee754_pow+0xd4>
 8028be8:	9b02      	ldr	r3, [sp, #8]
 8028bea:	9c03      	ldr	r4, [sp, #12]
 8028bec:	9300      	str	r3, [sp, #0]
 8028bee:	9401      	str	r4, [sp, #4]
 8028bf0:	2f00      	cmp	r7, #0
 8028bf2:	da2a      	bge.n	8028c4a <__ieee754_pow+0x16e>
 8028bf4:	001a      	movs	r2, r3
 8028bf6:	2000      	movs	r0, #0
 8028bf8:	0023      	movs	r3, r4
 8028bfa:	495f      	ldr	r1, [pc, #380]	@ (8028d78 <__ieee754_pow+0x29c>)
 8028bfc:	f7d9 fa70 	bl	80020e0 <__aeabi_ddiv>
 8028c00:	e791      	b.n	8028b26 <__ieee754_pow+0x4a>
 8028c02:	2602      	movs	r6, #2
 8028c04:	2b00      	cmp	r3, #0
 8028c06:	d12f      	bne.n	8028c68 <__ieee754_pow+0x18c>
 8028c08:	4b56      	ldr	r3, [pc, #344]	@ (8028d64 <__ieee754_pow+0x288>)
 8028c0a:	429d      	cmp	r5, r3
 8028c0c:	d1e9      	bne.n	8028be2 <__ieee754_pow+0x106>
 8028c0e:	4b56      	ldr	r3, [pc, #344]	@ (8028d68 <__ieee754_pow+0x28c>)
 8028c10:	9a02      	ldr	r2, [sp, #8]
 8028c12:	18e3      	adds	r3, r4, r3
 8028c14:	4313      	orrs	r3, r2
 8028c16:	d101      	bne.n	8028c1c <__ieee754_pow+0x140>
 8028c18:	f000 fc49 	bl	80294ae <__ieee754_pow+0x9d2>
 8028c1c:	4b54      	ldr	r3, [pc, #336]	@ (8028d70 <__ieee754_pow+0x294>)
 8028c1e:	429c      	cmp	r4, r3
 8028c20:	d909      	bls.n	8028c36 <__ieee754_pow+0x15a>
 8028c22:	9b04      	ldr	r3, [sp, #16]
 8028c24:	9c05      	ldr	r4, [sp, #20]
 8028c26:	9300      	str	r3, [sp, #0]
 8028c28:	9401      	str	r4, [sp, #4]
 8028c2a:	2f00      	cmp	r7, #0
 8028c2c:	da0d      	bge.n	8028c4a <__ieee754_pow+0x16e>
 8028c2e:	2300      	movs	r3, #0
 8028c30:	2400      	movs	r4, #0
 8028c32:	f000 fc3e 	bl	80294b2 <__ieee754_pow+0x9d6>
 8028c36:	2f00      	cmp	r7, #0
 8028c38:	daf9      	bge.n	8028c2e <__ieee754_pow+0x152>
 8028c3a:	2280      	movs	r2, #128	@ 0x80
 8028c3c:	0612      	lsls	r2, r2, #24
 8028c3e:	4694      	mov	ip, r2
 8028c40:	9b04      	ldr	r3, [sp, #16]
 8028c42:	9300      	str	r3, [sp, #0]
 8028c44:	9b05      	ldr	r3, [sp, #20]
 8028c46:	4463      	add	r3, ip
 8028c48:	9301      	str	r3, [sp, #4]
 8028c4a:	9800      	ldr	r0, [sp, #0]
 8028c4c:	9901      	ldr	r1, [sp, #4]
 8028c4e:	b015      	add	sp, #84	@ 0x54
 8028c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028c52:	4b4a      	ldr	r3, [pc, #296]	@ (8028d7c <__ieee754_pow+0x2a0>)
 8028c54:	429f      	cmp	r7, r3
 8028c56:	d107      	bne.n	8028c68 <__ieee754_pow+0x18c>
 8028c58:	9b06      	ldr	r3, [sp, #24]
 8028c5a:	2b00      	cmp	r3, #0
 8028c5c:	db04      	blt.n	8028c68 <__ieee754_pow+0x18c>
 8028c5e:	9802      	ldr	r0, [sp, #8]
 8028c60:	9903      	ldr	r1, [sp, #12]
 8028c62:	f000 fe03 	bl	802986c <__ieee754_sqrt>
 8028c66:	e75e      	b.n	8028b26 <__ieee754_pow+0x4a>
 8028c68:	9802      	ldr	r0, [sp, #8]
 8028c6a:	9903      	ldr	r1, [sp, #12]
 8028c6c:	f000 fc4e 	bl	802950c <fabs>
 8028c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028c72:	9000      	str	r0, [sp, #0]
 8028c74:	9101      	str	r1, [sp, #4]
 8028c76:	2b00      	cmp	r3, #0
 8028c78:	d12c      	bne.n	8028cd4 <__ieee754_pow+0x1f8>
 8028c7a:	9b03      	ldr	r3, [sp, #12]
 8028c7c:	4a3e      	ldr	r2, [pc, #248]	@ (8028d78 <__ieee754_pow+0x29c>)
 8028c7e:	009b      	lsls	r3, r3, #2
 8028c80:	089b      	lsrs	r3, r3, #2
 8028c82:	4293      	cmp	r3, r2
 8028c84:	d001      	beq.n	8028c8a <__ieee754_pow+0x1ae>
 8028c86:	2c00      	cmp	r4, #0
 8028c88:	d124      	bne.n	8028cd4 <__ieee754_pow+0x1f8>
 8028c8a:	2f00      	cmp	r7, #0
 8028c8c:	da07      	bge.n	8028c9e <__ieee754_pow+0x1c2>
 8028c8e:	9a00      	ldr	r2, [sp, #0]
 8028c90:	9b01      	ldr	r3, [sp, #4]
 8028c92:	2000      	movs	r0, #0
 8028c94:	4938      	ldr	r1, [pc, #224]	@ (8028d78 <__ieee754_pow+0x29c>)
 8028c96:	f7d9 fa23 	bl	80020e0 <__aeabi_ddiv>
 8028c9a:	9000      	str	r0, [sp, #0]
 8028c9c:	9101      	str	r1, [sp, #4]
 8028c9e:	9b06      	ldr	r3, [sp, #24]
 8028ca0:	2b00      	cmp	r3, #0
 8028ca2:	dad2      	bge.n	8028c4a <__ieee754_pow+0x16e>
 8028ca4:	4b30      	ldr	r3, [pc, #192]	@ (8028d68 <__ieee754_pow+0x28c>)
 8028ca6:	18e4      	adds	r4, r4, r3
 8028ca8:	4334      	orrs	r4, r6
 8028caa:	d108      	bne.n	8028cbe <__ieee754_pow+0x1e2>
 8028cac:	9a00      	ldr	r2, [sp, #0]
 8028cae:	9b01      	ldr	r3, [sp, #4]
 8028cb0:	0010      	movs	r0, r2
 8028cb2:	0019      	movs	r1, r3
 8028cb4:	f7da f934 	bl	8002f20 <__aeabi_dsub>
 8028cb8:	0002      	movs	r2, r0
 8028cba:	000b      	movs	r3, r1
 8028cbc:	e79e      	b.n	8028bfc <__ieee754_pow+0x120>
 8028cbe:	2e01      	cmp	r6, #1
 8028cc0:	d1c3      	bne.n	8028c4a <__ieee754_pow+0x16e>
 8028cc2:	9800      	ldr	r0, [sp, #0]
 8028cc4:	2180      	movs	r1, #128	@ 0x80
 8028cc6:	0002      	movs	r2, r0
 8028cc8:	9801      	ldr	r0, [sp, #4]
 8028cca:	0609      	lsls	r1, r1, #24
 8028ccc:	1843      	adds	r3, r0, r1
 8028cce:	9200      	str	r2, [sp, #0]
 8028cd0:	9301      	str	r3, [sp, #4]
 8028cd2:	e7ba      	b.n	8028c4a <__ieee754_pow+0x16e>
 8028cd4:	9b03      	ldr	r3, [sp, #12]
 8028cd6:	0fdb      	lsrs	r3, r3, #31
 8028cd8:	3b01      	subs	r3, #1
 8028cda:	001a      	movs	r2, r3
 8028cdc:	4332      	orrs	r2, r6
 8028cde:	d102      	bne.n	8028ce6 <__ieee754_pow+0x20a>
 8028ce0:	9a02      	ldr	r2, [sp, #8]
 8028ce2:	9b03      	ldr	r3, [sp, #12]
 8028ce4:	e7e4      	b.n	8028cb0 <__ieee754_pow+0x1d4>
 8028ce6:	3e01      	subs	r6, #1
 8028ce8:	2200      	movs	r2, #0
 8028cea:	431e      	orrs	r6, r3
 8028cec:	d013      	beq.n	8028d16 <__ieee754_pow+0x23a>
 8028cee:	4b22      	ldr	r3, [pc, #136]	@ (8028d78 <__ieee754_pow+0x29c>)
 8028cf0:	9206      	str	r2, [sp, #24]
 8028cf2:	9307      	str	r3, [sp, #28]
 8028cf4:	2384      	movs	r3, #132	@ 0x84
 8028cf6:	05db      	lsls	r3, r3, #23
 8028cf8:	429d      	cmp	r5, r3
 8028cfa:	d800      	bhi.n	8028cfe <__ieee754_pow+0x222>
 8028cfc:	e0fa      	b.n	8028ef4 <__ieee754_pow+0x418>
 8028cfe:	4b20      	ldr	r3, [pc, #128]	@ (8028d80 <__ieee754_pow+0x2a4>)
 8028d00:	429d      	cmp	r5, r3
 8028d02:	d910      	bls.n	8028d26 <__ieee754_pow+0x24a>
 8028d04:	4b1a      	ldr	r3, [pc, #104]	@ (8028d70 <__ieee754_pow+0x294>)
 8028d06:	429c      	cmp	r4, r3
 8028d08:	d807      	bhi.n	8028d1a <__ieee754_pow+0x23e>
 8028d0a:	2f00      	cmp	r7, #0
 8028d0c:	da07      	bge.n	8028d1e <__ieee754_pow+0x242>
 8028d0e:	2000      	movs	r0, #0
 8028d10:	f000 fd82 	bl	8029818 <__math_oflow>
 8028d14:	e707      	b.n	8028b26 <__ieee754_pow+0x4a>
 8028d16:	4b1b      	ldr	r3, [pc, #108]	@ (8028d84 <__ieee754_pow+0x2a8>)
 8028d18:	e7ea      	b.n	8028cf0 <__ieee754_pow+0x214>
 8028d1a:	2f00      	cmp	r7, #0
 8028d1c:	dcf7      	bgt.n	8028d0e <__ieee754_pow+0x232>
 8028d1e:	2000      	movs	r0, #0
 8028d20:	f000 fd73 	bl	802980a <__math_uflow>
 8028d24:	e6ff      	b.n	8028b26 <__ieee754_pow+0x4a>
 8028d26:	4b18      	ldr	r3, [pc, #96]	@ (8028d88 <__ieee754_pow+0x2ac>)
 8028d28:	429c      	cmp	r4, r3
 8028d2a:	d80a      	bhi.n	8028d42 <__ieee754_pow+0x266>
 8028d2c:	9806      	ldr	r0, [sp, #24]
 8028d2e:	9907      	ldr	r1, [sp, #28]
 8028d30:	2300      	movs	r3, #0
 8028d32:	2200      	movs	r2, #0
 8028d34:	f7d7 fbc2 	bl	80004bc <__aeabi_dcmplt>
 8028d38:	1e43      	subs	r3, r0, #1
 8028d3a:	4198      	sbcs	r0, r3
 8028d3c:	2f00      	cmp	r7, #0
 8028d3e:	daef      	bge.n	8028d20 <__ieee754_pow+0x244>
 8028d40:	e7e6      	b.n	8028d10 <__ieee754_pow+0x234>
 8028d42:	4b0d      	ldr	r3, [pc, #52]	@ (8028d78 <__ieee754_pow+0x29c>)
 8028d44:	2200      	movs	r2, #0
 8028d46:	429c      	cmp	r4, r3
 8028d48:	d920      	bls.n	8028d8c <__ieee754_pow+0x2b0>
 8028d4a:	9806      	ldr	r0, [sp, #24]
 8028d4c:	9907      	ldr	r1, [sp, #28]
 8028d4e:	2300      	movs	r3, #0
 8028d50:	f7d7 fbb4 	bl	80004bc <__aeabi_dcmplt>
 8028d54:	1e43      	subs	r3, r0, #1
 8028d56:	4198      	sbcs	r0, r3
 8028d58:	2f00      	cmp	r7, #0
 8028d5a:	dcd9      	bgt.n	8028d10 <__ieee754_pow+0x234>
 8028d5c:	e7e0      	b.n	8028d20 <__ieee754_pow+0x244>
 8028d5e:	46c0      	nop			@ (mov r8, r8)
 8028d60:	fff00000 	.word	0xfff00000
 8028d64:	7ff00000 	.word	0x7ff00000
 8028d68:	c0100000 	.word	0xc0100000
 8028d6c:	433fffff 	.word	0x433fffff
 8028d70:	3fefffff 	.word	0x3fefffff
 8028d74:	fffffc01 	.word	0xfffffc01
 8028d78:	3ff00000 	.word	0x3ff00000
 8028d7c:	3fe00000 	.word	0x3fe00000
 8028d80:	43f00000 	.word	0x43f00000
 8028d84:	bff00000 	.word	0xbff00000
 8028d88:	3feffffe 	.word	0x3feffffe
 8028d8c:	9800      	ldr	r0, [sp, #0]
 8028d8e:	9901      	ldr	r1, [sp, #4]
 8028d90:	4b4d      	ldr	r3, [pc, #308]	@ (8028ec8 <__ieee754_pow+0x3ec>)
 8028d92:	f7da f8c5 	bl	8002f20 <__aeabi_dsub>
 8028d96:	22c0      	movs	r2, #192	@ 0xc0
 8028d98:	4b4c      	ldr	r3, [pc, #304]	@ (8028ecc <__ieee754_pow+0x3f0>)
 8028d9a:	05d2      	lsls	r2, r2, #23
 8028d9c:	0006      	movs	r6, r0
 8028d9e:	000f      	movs	r7, r1
 8028da0:	f7d9 fdd8 	bl	8002954 <__aeabi_dmul>
 8028da4:	4a4a      	ldr	r2, [pc, #296]	@ (8028ed0 <__ieee754_pow+0x3f4>)
 8028da6:	9002      	str	r0, [sp, #8]
 8028da8:	9103      	str	r1, [sp, #12]
 8028daa:	4b4a      	ldr	r3, [pc, #296]	@ (8028ed4 <__ieee754_pow+0x3f8>)
 8028dac:	0030      	movs	r0, r6
 8028dae:	0039      	movs	r1, r7
 8028db0:	f7d9 fdd0 	bl	8002954 <__aeabi_dmul>
 8028db4:	2200      	movs	r2, #0
 8028db6:	9000      	str	r0, [sp, #0]
 8028db8:	9101      	str	r1, [sp, #4]
 8028dba:	4b47      	ldr	r3, [pc, #284]	@ (8028ed8 <__ieee754_pow+0x3fc>)
 8028dbc:	0030      	movs	r0, r6
 8028dbe:	0039      	movs	r1, r7
 8028dc0:	f7d9 fdc8 	bl	8002954 <__aeabi_dmul>
 8028dc4:	0002      	movs	r2, r0
 8028dc6:	000b      	movs	r3, r1
 8028dc8:	4844      	ldr	r0, [pc, #272]	@ (8028edc <__ieee754_pow+0x400>)
 8028dca:	4945      	ldr	r1, [pc, #276]	@ (8028ee0 <__ieee754_pow+0x404>)
 8028dcc:	f7da f8a8 	bl	8002f20 <__aeabi_dsub>
 8028dd0:	0032      	movs	r2, r6
 8028dd2:	003b      	movs	r3, r7
 8028dd4:	f7d9 fdbe 	bl	8002954 <__aeabi_dmul>
 8028dd8:	0002      	movs	r2, r0
 8028dda:	000b      	movs	r3, r1
 8028ddc:	2000      	movs	r0, #0
 8028dde:	4941      	ldr	r1, [pc, #260]	@ (8028ee4 <__ieee754_pow+0x408>)
 8028de0:	f7da f89e 	bl	8002f20 <__aeabi_dsub>
 8028de4:	0032      	movs	r2, r6
 8028de6:	0004      	movs	r4, r0
 8028de8:	000d      	movs	r5, r1
 8028dea:	003b      	movs	r3, r7
 8028dec:	0030      	movs	r0, r6
 8028dee:	0039      	movs	r1, r7
 8028df0:	f7d9 fdb0 	bl	8002954 <__aeabi_dmul>
 8028df4:	0002      	movs	r2, r0
 8028df6:	000b      	movs	r3, r1
 8028df8:	0020      	movs	r0, r4
 8028dfa:	0029      	movs	r1, r5
 8028dfc:	f7d9 fdaa 	bl	8002954 <__aeabi_dmul>
 8028e00:	4a39      	ldr	r2, [pc, #228]	@ (8028ee8 <__ieee754_pow+0x40c>)
 8028e02:	4b32      	ldr	r3, [pc, #200]	@ (8028ecc <__ieee754_pow+0x3f0>)
 8028e04:	f7d9 fda6 	bl	8002954 <__aeabi_dmul>
 8028e08:	0002      	movs	r2, r0
 8028e0a:	000b      	movs	r3, r1
 8028e0c:	9800      	ldr	r0, [sp, #0]
 8028e0e:	9901      	ldr	r1, [sp, #4]
 8028e10:	f7da f886 	bl	8002f20 <__aeabi_dsub>
 8028e14:	0002      	movs	r2, r0
 8028e16:	000b      	movs	r3, r1
 8028e18:	0004      	movs	r4, r0
 8028e1a:	000d      	movs	r5, r1
 8028e1c:	9802      	ldr	r0, [sp, #8]
 8028e1e:	9903      	ldr	r1, [sp, #12]
 8028e20:	f7d8 fd98 	bl	8001954 <__aeabi_dadd>
 8028e24:	9a02      	ldr	r2, [sp, #8]
 8028e26:	9b03      	ldr	r3, [sp, #12]
 8028e28:	2000      	movs	r0, #0
 8028e2a:	9000      	str	r0, [sp, #0]
 8028e2c:	9101      	str	r1, [sp, #4]
 8028e2e:	f7da f877 	bl	8002f20 <__aeabi_dsub>
 8028e32:	0002      	movs	r2, r0
 8028e34:	000b      	movs	r3, r1
 8028e36:	0020      	movs	r0, r4
 8028e38:	0029      	movs	r1, r5
 8028e3a:	f7da f871 	bl	8002f20 <__aeabi_dsub>
 8028e3e:	9c04      	ldr	r4, [sp, #16]
 8028e40:	9d05      	ldr	r5, [sp, #20]
 8028e42:	2400      	movs	r4, #0
 8028e44:	0006      	movs	r6, r0
 8028e46:	000f      	movs	r7, r1
 8028e48:	9804      	ldr	r0, [sp, #16]
 8028e4a:	9905      	ldr	r1, [sp, #20]
 8028e4c:	0022      	movs	r2, r4
 8028e4e:	002b      	movs	r3, r5
 8028e50:	9402      	str	r4, [sp, #8]
 8028e52:	9503      	str	r5, [sp, #12]
 8028e54:	f7da f864 	bl	8002f20 <__aeabi_dsub>
 8028e58:	9a00      	ldr	r2, [sp, #0]
 8028e5a:	9b01      	ldr	r3, [sp, #4]
 8028e5c:	f7d9 fd7a 	bl	8002954 <__aeabi_dmul>
 8028e60:	9a04      	ldr	r2, [sp, #16]
 8028e62:	9b05      	ldr	r3, [sp, #20]
 8028e64:	9008      	str	r0, [sp, #32]
 8028e66:	9109      	str	r1, [sp, #36]	@ 0x24
 8028e68:	0030      	movs	r0, r6
 8028e6a:	0039      	movs	r1, r7
 8028e6c:	f7d9 fd72 	bl	8002954 <__aeabi_dmul>
 8028e70:	0002      	movs	r2, r0
 8028e72:	000b      	movs	r3, r1
 8028e74:	9808      	ldr	r0, [sp, #32]
 8028e76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028e78:	f7d8 fd6c 	bl	8001954 <__aeabi_dadd>
 8028e7c:	0022      	movs	r2, r4
 8028e7e:	002b      	movs	r3, r5
 8028e80:	9004      	str	r0, [sp, #16]
 8028e82:	9105      	str	r1, [sp, #20]
 8028e84:	9800      	ldr	r0, [sp, #0]
 8028e86:	9901      	ldr	r1, [sp, #4]
 8028e88:	f7d9 fd64 	bl	8002954 <__aeabi_dmul>
 8028e8c:	000b      	movs	r3, r1
 8028e8e:	0002      	movs	r2, r0
 8028e90:	9000      	str	r0, [sp, #0]
 8028e92:	9101      	str	r1, [sp, #4]
 8028e94:	9804      	ldr	r0, [sp, #16]
 8028e96:	9905      	ldr	r1, [sp, #20]
 8028e98:	f7d8 fd5c 	bl	8001954 <__aeabi_dadd>
 8028e9c:	4b13      	ldr	r3, [pc, #76]	@ (8028eec <__ieee754_pow+0x410>)
 8028e9e:	0006      	movs	r6, r0
 8028ea0:	000f      	movs	r7, r1
 8028ea2:	9108      	str	r1, [sp, #32]
 8028ea4:	4299      	cmp	r1, r3
 8028ea6:	dc00      	bgt.n	8028eaa <__ieee754_pow+0x3ce>
 8028ea8:	e1c0      	b.n	802922c <__ieee754_pow+0x750>
 8028eaa:	4b11      	ldr	r3, [pc, #68]	@ (8028ef0 <__ieee754_pow+0x414>)
 8028eac:	18cb      	adds	r3, r1, r3
 8028eae:	4303      	orrs	r3, r0
 8028eb0:	42a3      	cmp	r3, r4
 8028eb2:	d100      	bne.n	8028eb6 <__ieee754_pow+0x3da>
 8028eb4:	e1a1      	b.n	80291fa <__ieee754_pow+0x71e>
 8028eb6:	9806      	ldr	r0, [sp, #24]
 8028eb8:	9907      	ldr	r1, [sp, #28]
 8028eba:	2300      	movs	r3, #0
 8028ebc:	2200      	movs	r2, #0
 8028ebe:	f7d7 fafd 	bl	80004bc <__aeabi_dcmplt>
 8028ec2:	1e43      	subs	r3, r0, #1
 8028ec4:	4198      	sbcs	r0, r3
 8028ec6:	e723      	b.n	8028d10 <__ieee754_pow+0x234>
 8028ec8:	3ff00000 	.word	0x3ff00000
 8028ecc:	3ff71547 	.word	0x3ff71547
 8028ed0:	f85ddf44 	.word	0xf85ddf44
 8028ed4:	3e54ae0b 	.word	0x3e54ae0b
 8028ed8:	3fd00000 	.word	0x3fd00000
 8028edc:	55555555 	.word	0x55555555
 8028ee0:	3fd55555 	.word	0x3fd55555
 8028ee4:	3fe00000 	.word	0x3fe00000
 8028ee8:	652b82fe 	.word	0x652b82fe
 8028eec:	408fffff 	.word	0x408fffff
 8028ef0:	bf700000 	.word	0xbf700000
 8028ef4:	4bdc      	ldr	r3, [pc, #880]	@ (8029268 <__ieee754_pow+0x78c>)
 8028ef6:	9903      	ldr	r1, [sp, #12]
 8028ef8:	2200      	movs	r2, #0
 8028efa:	420b      	tst	r3, r1
 8028efc:	d10b      	bne.n	8028f16 <__ieee754_pow+0x43a>
 8028efe:	9800      	ldr	r0, [sp, #0]
 8028f00:	9901      	ldr	r1, [sp, #4]
 8028f02:	2200      	movs	r2, #0
 8028f04:	4bd9      	ldr	r3, [pc, #868]	@ (802926c <__ieee754_pow+0x790>)
 8028f06:	f7d9 fd25 	bl	8002954 <__aeabi_dmul>
 8028f0a:	2235      	movs	r2, #53	@ 0x35
 8028f0c:	9000      	str	r0, [sp, #0]
 8028f0e:	9101      	str	r1, [sp, #4]
 8028f10:	9b01      	ldr	r3, [sp, #4]
 8028f12:	4252      	negs	r2, r2
 8028f14:	9308      	str	r3, [sp, #32]
 8028f16:	9b08      	ldr	r3, [sp, #32]
 8028f18:	49d5      	ldr	r1, [pc, #852]	@ (8029270 <__ieee754_pow+0x794>)
 8028f1a:	151b      	asrs	r3, r3, #20
 8028f1c:	185b      	adds	r3, r3, r1
 8028f1e:	189b      	adds	r3, r3, r2
 8028f20:	930e      	str	r3, [sp, #56]	@ 0x38
 8028f22:	9b08      	ldr	r3, [sp, #32]
 8028f24:	4dd3      	ldr	r5, [pc, #844]	@ (8029274 <__ieee754_pow+0x798>)
 8028f26:	031b      	lsls	r3, r3, #12
 8028f28:	4ad3      	ldr	r2, [pc, #844]	@ (8029278 <__ieee754_pow+0x79c>)
 8028f2a:	0b1b      	lsrs	r3, r3, #12
 8028f2c:	2600      	movs	r6, #0
 8028f2e:	431d      	orrs	r5, r3
 8028f30:	4293      	cmp	r3, r2
 8028f32:	dd09      	ble.n	8028f48 <__ieee754_pow+0x46c>
 8028f34:	4ad1      	ldr	r2, [pc, #836]	@ (802927c <__ieee754_pow+0x7a0>)
 8028f36:	3601      	adds	r6, #1
 8028f38:	4293      	cmp	r3, r2
 8028f3a:	dd05      	ble.n	8028f48 <__ieee754_pow+0x46c>
 8028f3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028f3e:	199b      	adds	r3, r3, r6
 8028f40:	2600      	movs	r6, #0
 8028f42:	930e      	str	r3, [sp, #56]	@ 0x38
 8028f44:	4bce      	ldr	r3, [pc, #824]	@ (8029280 <__ieee754_pow+0x7a4>)
 8028f46:	18ed      	adds	r5, r5, r3
 8028f48:	9800      	ldr	r0, [sp, #0]
 8028f4a:	9901      	ldr	r1, [sp, #4]
 8028f4c:	0029      	movs	r1, r5
 8028f4e:	4bcd      	ldr	r3, [pc, #820]	@ (8029284 <__ieee754_pow+0x7a8>)
 8028f50:	00f2      	lsls	r2, r6, #3
 8028f52:	189b      	adds	r3, r3, r2
 8028f54:	685c      	ldr	r4, [r3, #4]
 8028f56:	681b      	ldr	r3, [r3, #0]
 8028f58:	920f      	str	r2, [sp, #60]	@ 0x3c
 8028f5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8028f5c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8028f5e:	001a      	movs	r2, r3
 8028f60:	0023      	movs	r3, r4
 8028f62:	900c      	str	r0, [sp, #48]	@ 0x30
 8028f64:	910d      	str	r1, [sp, #52]	@ 0x34
 8028f66:	f7d9 ffdb 	bl	8002f20 <__aeabi_dsub>
 8028f6a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028f6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028f6e:	9010      	str	r0, [sp, #64]	@ 0x40
 8028f70:	9111      	str	r1, [sp, #68]	@ 0x44
 8028f72:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028f74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028f76:	f7d8 fced 	bl	8001954 <__aeabi_dadd>
 8028f7a:	0002      	movs	r2, r0
 8028f7c:	000b      	movs	r3, r1
 8028f7e:	2000      	movs	r0, #0
 8028f80:	49bc      	ldr	r1, [pc, #752]	@ (8029274 <__ieee754_pow+0x798>)
 8028f82:	f7d9 f8ad 	bl	80020e0 <__aeabi_ddiv>
 8028f86:	0002      	movs	r2, r0
 8028f88:	000b      	movs	r3, r1
 8028f8a:	9012      	str	r0, [sp, #72]	@ 0x48
 8028f8c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8028f8e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8028f90:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8028f92:	f7d9 fcdf 	bl	8002954 <__aeabi_dmul>
 8028f96:	9008      	str	r0, [sp, #32]
 8028f98:	9109      	str	r1, [sp, #36]	@ 0x24
 8028f9a:	9b08      	ldr	r3, [sp, #32]
 8028f9c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8028f9e:	2180      	movs	r1, #128	@ 0x80
 8028fa0:	9302      	str	r3, [sp, #8]
 8028fa2:	9403      	str	r4, [sp, #12]
 8028fa4:	2080      	movs	r0, #128	@ 0x80
 8028fa6:	2300      	movs	r3, #0
 8028fa8:	2200      	movs	r2, #0
 8028faa:	106d      	asrs	r5, r5, #1
 8028fac:	0589      	lsls	r1, r1, #22
 8028fae:	9302      	str	r3, [sp, #8]
 8028fb0:	4329      	orrs	r1, r5
 8028fb2:	0300      	lsls	r0, r0, #12
 8028fb4:	9b02      	ldr	r3, [sp, #8]
 8028fb6:	9c03      	ldr	r4, [sp, #12]
 8028fb8:	1809      	adds	r1, r1, r0
 8028fba:	9300      	str	r3, [sp, #0]
 8028fbc:	9401      	str	r4, [sp, #4]
 8028fbe:	04b6      	lsls	r6, r6, #18
 8028fc0:	198b      	adds	r3, r1, r6
 8028fc2:	9800      	ldr	r0, [sp, #0]
 8028fc4:	9901      	ldr	r1, [sp, #4]
 8028fc6:	0014      	movs	r4, r2
 8028fc8:	001d      	movs	r5, r3
 8028fca:	f7d9 fcc3 	bl	8002954 <__aeabi_dmul>
 8028fce:	0002      	movs	r2, r0
 8028fd0:	000b      	movs	r3, r1
 8028fd2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8028fd4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8028fd6:	f7d9 ffa3 	bl	8002f20 <__aeabi_dsub>
 8028fda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028fdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028fde:	0006      	movs	r6, r0
 8028fe0:	000f      	movs	r7, r1
 8028fe2:	0020      	movs	r0, r4
 8028fe4:	0029      	movs	r1, r5
 8028fe6:	f7d9 ff9b 	bl	8002f20 <__aeabi_dsub>
 8028fea:	0002      	movs	r2, r0
 8028fec:	000b      	movs	r3, r1
 8028fee:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028ff0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8028ff2:	f7d9 ff95 	bl	8002f20 <__aeabi_dsub>
 8028ff6:	9a00      	ldr	r2, [sp, #0]
 8028ff8:	9b01      	ldr	r3, [sp, #4]
 8028ffa:	f7d9 fcab 	bl	8002954 <__aeabi_dmul>
 8028ffe:	0002      	movs	r2, r0
 8029000:	000b      	movs	r3, r1
 8029002:	0030      	movs	r0, r6
 8029004:	0039      	movs	r1, r7
 8029006:	f7d9 ff8b 	bl	8002f20 <__aeabi_dsub>
 802900a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802900c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802900e:	f7d9 fca1 	bl	8002954 <__aeabi_dmul>
 8029012:	9a08      	ldr	r2, [sp, #32]
 8029014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029016:	900a      	str	r0, [sp, #40]	@ 0x28
 8029018:	910b      	str	r1, [sp, #44]	@ 0x2c
 802901a:	0010      	movs	r0, r2
 802901c:	0019      	movs	r1, r3
 802901e:	f7d9 fc99 	bl	8002954 <__aeabi_dmul>
 8029022:	0006      	movs	r6, r0
 8029024:	000f      	movs	r7, r1
 8029026:	4a98      	ldr	r2, [pc, #608]	@ (8029288 <__ieee754_pow+0x7ac>)
 8029028:	4b98      	ldr	r3, [pc, #608]	@ (802928c <__ieee754_pow+0x7b0>)
 802902a:	f7d9 fc93 	bl	8002954 <__aeabi_dmul>
 802902e:	4a98      	ldr	r2, [pc, #608]	@ (8029290 <__ieee754_pow+0x7b4>)
 8029030:	4b98      	ldr	r3, [pc, #608]	@ (8029294 <__ieee754_pow+0x7b8>)
 8029032:	f7d8 fc8f 	bl	8001954 <__aeabi_dadd>
 8029036:	0032      	movs	r2, r6
 8029038:	003b      	movs	r3, r7
 802903a:	f7d9 fc8b 	bl	8002954 <__aeabi_dmul>
 802903e:	4a96      	ldr	r2, [pc, #600]	@ (8029298 <__ieee754_pow+0x7bc>)
 8029040:	4b96      	ldr	r3, [pc, #600]	@ (802929c <__ieee754_pow+0x7c0>)
 8029042:	f7d8 fc87 	bl	8001954 <__aeabi_dadd>
 8029046:	0032      	movs	r2, r6
 8029048:	003b      	movs	r3, r7
 802904a:	f7d9 fc83 	bl	8002954 <__aeabi_dmul>
 802904e:	4a94      	ldr	r2, [pc, #592]	@ (80292a0 <__ieee754_pow+0x7c4>)
 8029050:	4b94      	ldr	r3, [pc, #592]	@ (80292a4 <__ieee754_pow+0x7c8>)
 8029052:	f7d8 fc7f 	bl	8001954 <__aeabi_dadd>
 8029056:	0032      	movs	r2, r6
 8029058:	003b      	movs	r3, r7
 802905a:	f7d9 fc7b 	bl	8002954 <__aeabi_dmul>
 802905e:	4a92      	ldr	r2, [pc, #584]	@ (80292a8 <__ieee754_pow+0x7cc>)
 8029060:	4b92      	ldr	r3, [pc, #584]	@ (80292ac <__ieee754_pow+0x7d0>)
 8029062:	f7d8 fc77 	bl	8001954 <__aeabi_dadd>
 8029066:	0032      	movs	r2, r6
 8029068:	003b      	movs	r3, r7
 802906a:	f7d9 fc73 	bl	8002954 <__aeabi_dmul>
 802906e:	4a90      	ldr	r2, [pc, #576]	@ (80292b0 <__ieee754_pow+0x7d4>)
 8029070:	4b90      	ldr	r3, [pc, #576]	@ (80292b4 <__ieee754_pow+0x7d8>)
 8029072:	f7d8 fc6f 	bl	8001954 <__aeabi_dadd>
 8029076:	0032      	movs	r2, r6
 8029078:	0004      	movs	r4, r0
 802907a:	000d      	movs	r5, r1
 802907c:	003b      	movs	r3, r7
 802907e:	0030      	movs	r0, r6
 8029080:	0039      	movs	r1, r7
 8029082:	f7d9 fc67 	bl	8002954 <__aeabi_dmul>
 8029086:	0002      	movs	r2, r0
 8029088:	000b      	movs	r3, r1
 802908a:	0020      	movs	r0, r4
 802908c:	0029      	movs	r1, r5
 802908e:	f7d9 fc61 	bl	8002954 <__aeabi_dmul>
 8029092:	9a00      	ldr	r2, [sp, #0]
 8029094:	9b01      	ldr	r3, [sp, #4]
 8029096:	0004      	movs	r4, r0
 8029098:	000d      	movs	r5, r1
 802909a:	9808      	ldr	r0, [sp, #32]
 802909c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802909e:	f7d8 fc59 	bl	8001954 <__aeabi_dadd>
 80290a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80290a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80290a6:	f7d9 fc55 	bl	8002954 <__aeabi_dmul>
 80290aa:	0022      	movs	r2, r4
 80290ac:	002b      	movs	r3, r5
 80290ae:	f7d8 fc51 	bl	8001954 <__aeabi_dadd>
 80290b2:	9a00      	ldr	r2, [sp, #0]
 80290b4:	9b01      	ldr	r3, [sp, #4]
 80290b6:	900c      	str	r0, [sp, #48]	@ 0x30
 80290b8:	910d      	str	r1, [sp, #52]	@ 0x34
 80290ba:	0010      	movs	r0, r2
 80290bc:	0019      	movs	r1, r3
 80290be:	f7d9 fc49 	bl	8002954 <__aeabi_dmul>
 80290c2:	2200      	movs	r2, #0
 80290c4:	4b7c      	ldr	r3, [pc, #496]	@ (80292b8 <__ieee754_pow+0x7dc>)
 80290c6:	0004      	movs	r4, r0
 80290c8:	000d      	movs	r5, r1
 80290ca:	f7d8 fc43 	bl	8001954 <__aeabi_dadd>
 80290ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80290d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80290d2:	f7d8 fc3f 	bl	8001954 <__aeabi_dadd>
 80290d6:	2000      	movs	r0, #0
 80290d8:	000f      	movs	r7, r1
 80290da:	0006      	movs	r6, r0
 80290dc:	0002      	movs	r2, r0
 80290de:	000b      	movs	r3, r1
 80290e0:	9800      	ldr	r0, [sp, #0]
 80290e2:	9901      	ldr	r1, [sp, #4]
 80290e4:	f7d9 fc36 	bl	8002954 <__aeabi_dmul>
 80290e8:	2200      	movs	r2, #0
 80290ea:	9000      	str	r0, [sp, #0]
 80290ec:	9101      	str	r1, [sp, #4]
 80290ee:	4b72      	ldr	r3, [pc, #456]	@ (80292b8 <__ieee754_pow+0x7dc>)
 80290f0:	0030      	movs	r0, r6
 80290f2:	0039      	movs	r1, r7
 80290f4:	f7d9 ff14 	bl	8002f20 <__aeabi_dsub>
 80290f8:	0022      	movs	r2, r4
 80290fa:	002b      	movs	r3, r5
 80290fc:	f7d9 ff10 	bl	8002f20 <__aeabi_dsub>
 8029100:	0002      	movs	r2, r0
 8029102:	000b      	movs	r3, r1
 8029104:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029106:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029108:	f7d9 ff0a 	bl	8002f20 <__aeabi_dsub>
 802910c:	9a08      	ldr	r2, [sp, #32]
 802910e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029110:	f7d9 fc20 	bl	8002954 <__aeabi_dmul>
 8029114:	0032      	movs	r2, r6
 8029116:	0004      	movs	r4, r0
 8029118:	000d      	movs	r5, r1
 802911a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802911c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802911e:	003b      	movs	r3, r7
 8029120:	f7d9 fc18 	bl	8002954 <__aeabi_dmul>
 8029124:	0002      	movs	r2, r0
 8029126:	000b      	movs	r3, r1
 8029128:	0020      	movs	r0, r4
 802912a:	0029      	movs	r1, r5
 802912c:	f7d8 fc12 	bl	8001954 <__aeabi_dadd>
 8029130:	0004      	movs	r4, r0
 8029132:	000d      	movs	r5, r1
 8029134:	0002      	movs	r2, r0
 8029136:	000b      	movs	r3, r1
 8029138:	9800      	ldr	r0, [sp, #0]
 802913a:	9901      	ldr	r1, [sp, #4]
 802913c:	f7d8 fc0a 	bl	8001954 <__aeabi_dadd>
 8029140:	22e0      	movs	r2, #224	@ 0xe0
 8029142:	2000      	movs	r0, #0
 8029144:	4b5d      	ldr	r3, [pc, #372]	@ (80292bc <__ieee754_pow+0x7e0>)
 8029146:	0612      	lsls	r2, r2, #24
 8029148:	0006      	movs	r6, r0
 802914a:	000f      	movs	r7, r1
 802914c:	f7d9 fc02 	bl	8002954 <__aeabi_dmul>
 8029150:	9008      	str	r0, [sp, #32]
 8029152:	9109      	str	r1, [sp, #36]	@ 0x24
 8029154:	9a00      	ldr	r2, [sp, #0]
 8029156:	9b01      	ldr	r3, [sp, #4]
 8029158:	0030      	movs	r0, r6
 802915a:	0039      	movs	r1, r7
 802915c:	f7d9 fee0 	bl	8002f20 <__aeabi_dsub>
 8029160:	0002      	movs	r2, r0
 8029162:	000b      	movs	r3, r1
 8029164:	0020      	movs	r0, r4
 8029166:	0029      	movs	r1, r5
 8029168:	f7d9 feda 	bl	8002f20 <__aeabi_dsub>
 802916c:	4a54      	ldr	r2, [pc, #336]	@ (80292c0 <__ieee754_pow+0x7e4>)
 802916e:	4b53      	ldr	r3, [pc, #332]	@ (80292bc <__ieee754_pow+0x7e0>)
 8029170:	f7d9 fbf0 	bl	8002954 <__aeabi_dmul>
 8029174:	4a53      	ldr	r2, [pc, #332]	@ (80292c4 <__ieee754_pow+0x7e8>)
 8029176:	0004      	movs	r4, r0
 8029178:	000d      	movs	r5, r1
 802917a:	0030      	movs	r0, r6
 802917c:	0039      	movs	r1, r7
 802917e:	4b52      	ldr	r3, [pc, #328]	@ (80292c8 <__ieee754_pow+0x7ec>)
 8029180:	f7d9 fbe8 	bl	8002954 <__aeabi_dmul>
 8029184:	0002      	movs	r2, r0
 8029186:	000b      	movs	r3, r1
 8029188:	0020      	movs	r0, r4
 802918a:	0029      	movs	r1, r5
 802918c:	f7d8 fbe2 	bl	8001954 <__aeabi_dadd>
 8029190:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029192:	4b4e      	ldr	r3, [pc, #312]	@ (80292cc <__ieee754_pow+0x7f0>)
 8029194:	189b      	adds	r3, r3, r2
 8029196:	681a      	ldr	r2, [r3, #0]
 8029198:	685b      	ldr	r3, [r3, #4]
 802919a:	f7d8 fbdb 	bl	8001954 <__aeabi_dadd>
 802919e:	900a      	str	r0, [sp, #40]	@ 0x28
 80291a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80291a2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80291a4:	f7da fb24 	bl	80037f0 <__aeabi_i2d>
 80291a8:	0004      	movs	r4, r0
 80291aa:	000d      	movs	r5, r1
 80291ac:	9808      	ldr	r0, [sp, #32]
 80291ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80291b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80291b2:	4b47      	ldr	r3, [pc, #284]	@ (80292d0 <__ieee754_pow+0x7f4>)
 80291b4:	189b      	adds	r3, r3, r2
 80291b6:	681e      	ldr	r6, [r3, #0]
 80291b8:	685f      	ldr	r7, [r3, #4]
 80291ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80291bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80291be:	f7d8 fbc9 	bl	8001954 <__aeabi_dadd>
 80291c2:	0032      	movs	r2, r6
 80291c4:	003b      	movs	r3, r7
 80291c6:	f7d8 fbc5 	bl	8001954 <__aeabi_dadd>
 80291ca:	0022      	movs	r2, r4
 80291cc:	002b      	movs	r3, r5
 80291ce:	f7d8 fbc1 	bl	8001954 <__aeabi_dadd>
 80291d2:	2000      	movs	r0, #0
 80291d4:	0022      	movs	r2, r4
 80291d6:	002b      	movs	r3, r5
 80291d8:	9000      	str	r0, [sp, #0]
 80291da:	9101      	str	r1, [sp, #4]
 80291dc:	f7d9 fea0 	bl	8002f20 <__aeabi_dsub>
 80291e0:	0032      	movs	r2, r6
 80291e2:	003b      	movs	r3, r7
 80291e4:	f7d9 fe9c 	bl	8002f20 <__aeabi_dsub>
 80291e8:	9a08      	ldr	r2, [sp, #32]
 80291ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80291ec:	f7d9 fe98 	bl	8002f20 <__aeabi_dsub>
 80291f0:	0002      	movs	r2, r0
 80291f2:	000b      	movs	r3, r1
 80291f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80291f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80291f8:	e61f      	b.n	8028e3a <__ieee754_pow+0x35e>
 80291fa:	4a36      	ldr	r2, [pc, #216]	@ (80292d4 <__ieee754_pow+0x7f8>)
 80291fc:	4b36      	ldr	r3, [pc, #216]	@ (80292d8 <__ieee754_pow+0x7fc>)
 80291fe:	9804      	ldr	r0, [sp, #16]
 8029200:	9905      	ldr	r1, [sp, #20]
 8029202:	f7d8 fba7 	bl	8001954 <__aeabi_dadd>
 8029206:	9a00      	ldr	r2, [sp, #0]
 8029208:	9b01      	ldr	r3, [sp, #4]
 802920a:	0004      	movs	r4, r0
 802920c:	000d      	movs	r5, r1
 802920e:	0030      	movs	r0, r6
 8029210:	0039      	movs	r1, r7
 8029212:	f7d9 fe85 	bl	8002f20 <__aeabi_dsub>
 8029216:	0002      	movs	r2, r0
 8029218:	000b      	movs	r3, r1
 802921a:	0020      	movs	r0, r4
 802921c:	0029      	movs	r1, r5
 802921e:	f7d7 f961 	bl	80004e4 <__aeabi_dcmpgt>
 8029222:	2800      	cmp	r0, #0
 8029224:	d000      	beq.n	8029228 <__ieee754_pow+0x74c>
 8029226:	e646      	b.n	8028eb6 <__ieee754_pow+0x3da>
 8029228:	4b2c      	ldr	r3, [pc, #176]	@ (80292dc <__ieee754_pow+0x800>)
 802922a:	e063      	b.n	80292f4 <__ieee754_pow+0x818>
 802922c:	4a2c      	ldr	r2, [pc, #176]	@ (80292e0 <__ieee754_pow+0x804>)
 802922e:	004b      	lsls	r3, r1, #1
 8029230:	085b      	lsrs	r3, r3, #1
 8029232:	4293      	cmp	r3, r2
 8029234:	d95a      	bls.n	80292ec <__ieee754_pow+0x810>
 8029236:	4b2b      	ldr	r3, [pc, #172]	@ (80292e4 <__ieee754_pow+0x808>)
 8029238:	18cb      	adds	r3, r1, r3
 802923a:	4303      	orrs	r3, r0
 802923c:	d008      	beq.n	8029250 <__ieee754_pow+0x774>
 802923e:	9806      	ldr	r0, [sp, #24]
 8029240:	9907      	ldr	r1, [sp, #28]
 8029242:	2300      	movs	r3, #0
 8029244:	2200      	movs	r2, #0
 8029246:	f7d7 f939 	bl	80004bc <__aeabi_dcmplt>
 802924a:	1e43      	subs	r3, r0, #1
 802924c:	4198      	sbcs	r0, r3
 802924e:	e567      	b.n	8028d20 <__ieee754_pow+0x244>
 8029250:	9a00      	ldr	r2, [sp, #0]
 8029252:	9b01      	ldr	r3, [sp, #4]
 8029254:	f7d9 fe64 	bl	8002f20 <__aeabi_dsub>
 8029258:	9a04      	ldr	r2, [sp, #16]
 802925a:	9b05      	ldr	r3, [sp, #20]
 802925c:	f7d7 f94c 	bl	80004f8 <__aeabi_dcmpge>
 8029260:	2800      	cmp	r0, #0
 8029262:	d1ec      	bne.n	802923e <__ieee754_pow+0x762>
 8029264:	4b20      	ldr	r3, [pc, #128]	@ (80292e8 <__ieee754_pow+0x80c>)
 8029266:	e045      	b.n	80292f4 <__ieee754_pow+0x818>
 8029268:	7ff00000 	.word	0x7ff00000
 802926c:	43400000 	.word	0x43400000
 8029270:	fffffc01 	.word	0xfffffc01
 8029274:	3ff00000 	.word	0x3ff00000
 8029278:	0003988e 	.word	0x0003988e
 802927c:	000bb679 	.word	0x000bb679
 8029280:	fff00000 	.word	0xfff00000
 8029284:	0802e810 	.word	0x0802e810
 8029288:	4a454eef 	.word	0x4a454eef
 802928c:	3fca7e28 	.word	0x3fca7e28
 8029290:	93c9db65 	.word	0x93c9db65
 8029294:	3fcd864a 	.word	0x3fcd864a
 8029298:	a91d4101 	.word	0xa91d4101
 802929c:	3fd17460 	.word	0x3fd17460
 80292a0:	518f264d 	.word	0x518f264d
 80292a4:	3fd55555 	.word	0x3fd55555
 80292a8:	db6fabff 	.word	0xdb6fabff
 80292ac:	3fdb6db6 	.word	0x3fdb6db6
 80292b0:	33333303 	.word	0x33333303
 80292b4:	3fe33333 	.word	0x3fe33333
 80292b8:	40080000 	.word	0x40080000
 80292bc:	3feec709 	.word	0x3feec709
 80292c0:	dc3a03fd 	.word	0xdc3a03fd
 80292c4:	145b01f5 	.word	0x145b01f5
 80292c8:	be3e2fe0 	.word	0xbe3e2fe0
 80292cc:	0802e7f0 	.word	0x0802e7f0
 80292d0:	0802e800 	.word	0x0802e800
 80292d4:	652b82fe 	.word	0x652b82fe
 80292d8:	3c971547 	.word	0x3c971547
 80292dc:	40900000 	.word	0x40900000
 80292e0:	4090cbff 	.word	0x4090cbff
 80292e4:	3f6f3400 	.word	0x3f6f3400
 80292e8:	4090cc00 	.word	0x4090cc00
 80292ec:	4a73      	ldr	r2, [pc, #460]	@ (80294bc <__ieee754_pow+0x9e0>)
 80292ee:	9402      	str	r4, [sp, #8]
 80292f0:	4293      	cmp	r3, r2
 80292f2:	d925      	bls.n	8029340 <__ieee754_pow+0x864>
 80292f4:	4a72      	ldr	r2, [pc, #456]	@ (80294c0 <__ieee754_pow+0x9e4>)
 80292f6:	151b      	asrs	r3, r3, #20
 80292f8:	189b      	adds	r3, r3, r2
 80292fa:	2280      	movs	r2, #128	@ 0x80
 80292fc:	0352      	lsls	r2, r2, #13
 80292fe:	0011      	movs	r1, r2
 8029300:	4119      	asrs	r1, r3
 8029302:	19cb      	adds	r3, r1, r7
 8029304:	005c      	lsls	r4, r3, #1
 8029306:	496f      	ldr	r1, [pc, #444]	@ (80294c4 <__ieee754_pow+0x9e8>)
 8029308:	4d6f      	ldr	r5, [pc, #444]	@ (80294c8 <__ieee754_pow+0x9ec>)
 802930a:	0d64      	lsrs	r4, r4, #21
 802930c:	1864      	adds	r4, r4, r1
 802930e:	4125      	asrs	r5, r4
 8029310:	401d      	ands	r5, r3
 8029312:	031b      	lsls	r3, r3, #12
 8029314:	0b1b      	lsrs	r3, r3, #12
 8029316:	4313      	orrs	r3, r2
 8029318:	2214      	movs	r2, #20
 802931a:	1b12      	subs	r2, r2, r4
 802931c:	4113      	asrs	r3, r2
 802931e:	9302      	str	r3, [sp, #8]
 8029320:	9b08      	ldr	r3, [sp, #32]
 8029322:	2000      	movs	r0, #0
 8029324:	0029      	movs	r1, r5
 8029326:	2b00      	cmp	r3, #0
 8029328:	da02      	bge.n	8029330 <__ieee754_pow+0x854>
 802932a:	9b02      	ldr	r3, [sp, #8]
 802932c:	425b      	negs	r3, r3
 802932e:	9302      	str	r3, [sp, #8]
 8029330:	0002      	movs	r2, r0
 8029332:	000b      	movs	r3, r1
 8029334:	9800      	ldr	r0, [sp, #0]
 8029336:	9901      	ldr	r1, [sp, #4]
 8029338:	f7d9 fdf2 	bl	8002f20 <__aeabi_dsub>
 802933c:	9000      	str	r0, [sp, #0]
 802933e:	9101      	str	r1, [sp, #4]
 8029340:	9a04      	ldr	r2, [sp, #16]
 8029342:	9b05      	ldr	r3, [sp, #20]
 8029344:	9800      	ldr	r0, [sp, #0]
 8029346:	9901      	ldr	r1, [sp, #4]
 8029348:	f7d8 fb04 	bl	8001954 <__aeabi_dadd>
 802934c:	2000      	movs	r0, #0
 802934e:	2200      	movs	r2, #0
 8029350:	4b5e      	ldr	r3, [pc, #376]	@ (80294cc <__ieee754_pow+0x9f0>)
 8029352:	0006      	movs	r6, r0
 8029354:	000f      	movs	r7, r1
 8029356:	f7d9 fafd 	bl	8002954 <__aeabi_dmul>
 802935a:	9a00      	ldr	r2, [sp, #0]
 802935c:	9b01      	ldr	r3, [sp, #4]
 802935e:	9008      	str	r0, [sp, #32]
 8029360:	9109      	str	r1, [sp, #36]	@ 0x24
 8029362:	0030      	movs	r0, r6
 8029364:	0039      	movs	r1, r7
 8029366:	f7d9 fddb 	bl	8002f20 <__aeabi_dsub>
 802936a:	0002      	movs	r2, r0
 802936c:	000b      	movs	r3, r1
 802936e:	9804      	ldr	r0, [sp, #16]
 8029370:	9905      	ldr	r1, [sp, #20]
 8029372:	f7d9 fdd5 	bl	8002f20 <__aeabi_dsub>
 8029376:	4a56      	ldr	r2, [pc, #344]	@ (80294d0 <__ieee754_pow+0x9f4>)
 8029378:	4b56      	ldr	r3, [pc, #344]	@ (80294d4 <__ieee754_pow+0x9f8>)
 802937a:	f7d9 faeb 	bl	8002954 <__aeabi_dmul>
 802937e:	4a56      	ldr	r2, [pc, #344]	@ (80294d8 <__ieee754_pow+0x9fc>)
 8029380:	0004      	movs	r4, r0
 8029382:	000d      	movs	r5, r1
 8029384:	0030      	movs	r0, r6
 8029386:	0039      	movs	r1, r7
 8029388:	4b54      	ldr	r3, [pc, #336]	@ (80294dc <__ieee754_pow+0xa00>)
 802938a:	f7d9 fae3 	bl	8002954 <__aeabi_dmul>
 802938e:	0002      	movs	r2, r0
 8029390:	000b      	movs	r3, r1
 8029392:	0020      	movs	r0, r4
 8029394:	0029      	movs	r1, r5
 8029396:	f7d8 fadd 	bl	8001954 <__aeabi_dadd>
 802939a:	0004      	movs	r4, r0
 802939c:	000d      	movs	r5, r1
 802939e:	0002      	movs	r2, r0
 80293a0:	000b      	movs	r3, r1
 80293a2:	9808      	ldr	r0, [sp, #32]
 80293a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80293a6:	f7d8 fad5 	bl	8001954 <__aeabi_dadd>
 80293aa:	9a08      	ldr	r2, [sp, #32]
 80293ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80293ae:	0006      	movs	r6, r0
 80293b0:	000f      	movs	r7, r1
 80293b2:	f7d9 fdb5 	bl	8002f20 <__aeabi_dsub>
 80293b6:	0002      	movs	r2, r0
 80293b8:	000b      	movs	r3, r1
 80293ba:	0020      	movs	r0, r4
 80293bc:	0029      	movs	r1, r5
 80293be:	f7d9 fdaf 	bl	8002f20 <__aeabi_dsub>
 80293c2:	0032      	movs	r2, r6
 80293c4:	9000      	str	r0, [sp, #0]
 80293c6:	9101      	str	r1, [sp, #4]
 80293c8:	003b      	movs	r3, r7
 80293ca:	0030      	movs	r0, r6
 80293cc:	0039      	movs	r1, r7
 80293ce:	f7d9 fac1 	bl	8002954 <__aeabi_dmul>
 80293d2:	0004      	movs	r4, r0
 80293d4:	000d      	movs	r5, r1
 80293d6:	4a42      	ldr	r2, [pc, #264]	@ (80294e0 <__ieee754_pow+0xa04>)
 80293d8:	4b42      	ldr	r3, [pc, #264]	@ (80294e4 <__ieee754_pow+0xa08>)
 80293da:	f7d9 fabb 	bl	8002954 <__aeabi_dmul>
 80293de:	4a42      	ldr	r2, [pc, #264]	@ (80294e8 <__ieee754_pow+0xa0c>)
 80293e0:	4b42      	ldr	r3, [pc, #264]	@ (80294ec <__ieee754_pow+0xa10>)
 80293e2:	f7d9 fd9d 	bl	8002f20 <__aeabi_dsub>
 80293e6:	0022      	movs	r2, r4
 80293e8:	002b      	movs	r3, r5
 80293ea:	f7d9 fab3 	bl	8002954 <__aeabi_dmul>
 80293ee:	4a40      	ldr	r2, [pc, #256]	@ (80294f0 <__ieee754_pow+0xa14>)
 80293f0:	4b40      	ldr	r3, [pc, #256]	@ (80294f4 <__ieee754_pow+0xa18>)
 80293f2:	f7d8 faaf 	bl	8001954 <__aeabi_dadd>
 80293f6:	0022      	movs	r2, r4
 80293f8:	002b      	movs	r3, r5
 80293fa:	f7d9 faab 	bl	8002954 <__aeabi_dmul>
 80293fe:	4a3e      	ldr	r2, [pc, #248]	@ (80294f8 <__ieee754_pow+0xa1c>)
 8029400:	4b3e      	ldr	r3, [pc, #248]	@ (80294fc <__ieee754_pow+0xa20>)
 8029402:	f7d9 fd8d 	bl	8002f20 <__aeabi_dsub>
 8029406:	0022      	movs	r2, r4
 8029408:	002b      	movs	r3, r5
 802940a:	f7d9 faa3 	bl	8002954 <__aeabi_dmul>
 802940e:	4a3c      	ldr	r2, [pc, #240]	@ (8029500 <__ieee754_pow+0xa24>)
 8029410:	4b3c      	ldr	r3, [pc, #240]	@ (8029504 <__ieee754_pow+0xa28>)
 8029412:	f7d8 fa9f 	bl	8001954 <__aeabi_dadd>
 8029416:	0022      	movs	r2, r4
 8029418:	002b      	movs	r3, r5
 802941a:	f7d9 fa9b 	bl	8002954 <__aeabi_dmul>
 802941e:	0002      	movs	r2, r0
 8029420:	000b      	movs	r3, r1
 8029422:	0030      	movs	r0, r6
 8029424:	0039      	movs	r1, r7
 8029426:	f7d9 fd7b 	bl	8002f20 <__aeabi_dsub>
 802942a:	0004      	movs	r4, r0
 802942c:	000d      	movs	r5, r1
 802942e:	0002      	movs	r2, r0
 8029430:	000b      	movs	r3, r1
 8029432:	0030      	movs	r0, r6
 8029434:	0039      	movs	r1, r7
 8029436:	f7d9 fa8d 	bl	8002954 <__aeabi_dmul>
 802943a:	2380      	movs	r3, #128	@ 0x80
 802943c:	9004      	str	r0, [sp, #16]
 802943e:	9105      	str	r1, [sp, #20]
 8029440:	2200      	movs	r2, #0
 8029442:	0020      	movs	r0, r4
 8029444:	0029      	movs	r1, r5
 8029446:	05db      	lsls	r3, r3, #23
 8029448:	f7d9 fd6a 	bl	8002f20 <__aeabi_dsub>
 802944c:	0002      	movs	r2, r0
 802944e:	000b      	movs	r3, r1
 8029450:	9804      	ldr	r0, [sp, #16]
 8029452:	9905      	ldr	r1, [sp, #20]
 8029454:	f7d8 fe44 	bl	80020e0 <__aeabi_ddiv>
 8029458:	9a00      	ldr	r2, [sp, #0]
 802945a:	9b01      	ldr	r3, [sp, #4]
 802945c:	0004      	movs	r4, r0
 802945e:	000d      	movs	r5, r1
 8029460:	0030      	movs	r0, r6
 8029462:	0039      	movs	r1, r7
 8029464:	f7d9 fa76 	bl	8002954 <__aeabi_dmul>
 8029468:	9a00      	ldr	r2, [sp, #0]
 802946a:	9b01      	ldr	r3, [sp, #4]
 802946c:	f7d8 fa72 	bl	8001954 <__aeabi_dadd>
 8029470:	0002      	movs	r2, r0
 8029472:	000b      	movs	r3, r1
 8029474:	0020      	movs	r0, r4
 8029476:	0029      	movs	r1, r5
 8029478:	f7d9 fd52 	bl	8002f20 <__aeabi_dsub>
 802947c:	0032      	movs	r2, r6
 802947e:	003b      	movs	r3, r7
 8029480:	f7d9 fd4e 	bl	8002f20 <__aeabi_dsub>
 8029484:	0002      	movs	r2, r0
 8029486:	000b      	movs	r3, r1
 8029488:	2000      	movs	r0, #0
 802948a:	491f      	ldr	r1, [pc, #124]	@ (8029508 <__ieee754_pow+0xa2c>)
 802948c:	f7d9 fd48 	bl	8002f20 <__aeabi_dsub>
 8029490:	9b02      	ldr	r3, [sp, #8]
 8029492:	051b      	lsls	r3, r3, #20
 8029494:	185b      	adds	r3, r3, r1
 8029496:	151a      	asrs	r2, r3, #20
 8029498:	2a00      	cmp	r2, #0
 802949a:	dc06      	bgt.n	80294aa <__ieee754_pow+0x9ce>
 802949c:	9a02      	ldr	r2, [sp, #8]
 802949e:	f000 f929 	bl	80296f4 <scalbn>
 80294a2:	9a06      	ldr	r2, [sp, #24]
 80294a4:	9b07      	ldr	r3, [sp, #28]
 80294a6:	f7ff fb8b 	bl	8028bc0 <__ieee754_pow+0xe4>
 80294aa:	0019      	movs	r1, r3
 80294ac:	e7f9      	b.n	80294a2 <__ieee754_pow+0x9c6>
 80294ae:	2300      	movs	r3, #0
 80294b0:	4c15      	ldr	r4, [pc, #84]	@ (8029508 <__ieee754_pow+0xa2c>)
 80294b2:	9300      	str	r3, [sp, #0]
 80294b4:	9401      	str	r4, [sp, #4]
 80294b6:	f7ff fbc8 	bl	8028c4a <__ieee754_pow+0x16e>
 80294ba:	46c0      	nop			@ (mov r8, r8)
 80294bc:	3fe00000 	.word	0x3fe00000
 80294c0:	fffffc02 	.word	0xfffffc02
 80294c4:	fffffc01 	.word	0xfffffc01
 80294c8:	fff00000 	.word	0xfff00000
 80294cc:	3fe62e43 	.word	0x3fe62e43
 80294d0:	fefa39ef 	.word	0xfefa39ef
 80294d4:	3fe62e42 	.word	0x3fe62e42
 80294d8:	0ca86c39 	.word	0x0ca86c39
 80294dc:	be205c61 	.word	0xbe205c61
 80294e0:	72bea4d0 	.word	0x72bea4d0
 80294e4:	3e663769 	.word	0x3e663769
 80294e8:	c5d26bf1 	.word	0xc5d26bf1
 80294ec:	3ebbbd41 	.word	0x3ebbbd41
 80294f0:	af25de2c 	.word	0xaf25de2c
 80294f4:	3f11566a 	.word	0x3f11566a
 80294f8:	16bebd93 	.word	0x16bebd93
 80294fc:	3f66c16c 	.word	0x3f66c16c
 8029500:	5555553e 	.word	0x5555553e
 8029504:	3fc55555 	.word	0x3fc55555
 8029508:	3ff00000 	.word	0x3ff00000

0802950c <fabs>:
 802950c:	0049      	lsls	r1, r1, #1
 802950e:	084b      	lsrs	r3, r1, #1
 8029510:	0019      	movs	r1, r3
 8029512:	4770      	bx	lr

08029514 <__ieee754_expf>:
 8029514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029516:	21ff      	movs	r1, #255	@ 0xff
 8029518:	0043      	lsls	r3, r0, #1
 802951a:	1c04      	adds	r4, r0, #0
 802951c:	085b      	lsrs	r3, r3, #1
 802951e:	05c9      	lsls	r1, r1, #23
 8029520:	428b      	cmp	r3, r1
 8029522:	d904      	bls.n	802952e <__ieee754_expf+0x1a>
 8029524:	1c01      	adds	r1, r0, #0
 8029526:	1c20      	adds	r0, r4, #0
 8029528:	f7d7 f9ca 	bl	80008c0 <__aeabi_fadd>
 802952c:	e00d      	b.n	802954a <__ieee754_expf+0x36>
 802952e:	0fc6      	lsrs	r6, r0, #31
 8029530:	428b      	cmp	r3, r1
 8029532:	d104      	bne.n	802953e <__ieee754_expf+0x2a>
 8029534:	2e00      	cmp	r6, #0
 8029536:	d000      	beq.n	802953a <__ieee754_expf+0x26>
 8029538:	e0ba      	b.n	80296b0 <__ieee754_expf+0x19c>
 802953a:	1c20      	adds	r0, r4, #0
 802953c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802953e:	495d      	ldr	r1, [pc, #372]	@ (80296b4 <__ieee754_expf+0x1a0>)
 8029540:	4288      	cmp	r0, r1
 8029542:	dd04      	ble.n	802954e <__ieee754_expf+0x3a>
 8029544:	2000      	movs	r0, #0
 8029546:	f000 f98a 	bl	802985e <__math_oflowf>
 802954a:	1c04      	adds	r4, r0, #0
 802954c:	e7f5      	b.n	802953a <__ieee754_expf+0x26>
 802954e:	2800      	cmp	r0, #0
 8029550:	da06      	bge.n	8029560 <__ieee754_expf+0x4c>
 8029552:	4a59      	ldr	r2, [pc, #356]	@ (80296b8 <__ieee754_expf+0x1a4>)
 8029554:	4293      	cmp	r3, r2
 8029556:	d903      	bls.n	8029560 <__ieee754_expf+0x4c>
 8029558:	2000      	movs	r0, #0
 802955a:	f000 f97a 	bl	8029852 <__math_uflowf>
 802955e:	e7f4      	b.n	802954a <__ieee754_expf+0x36>
 8029560:	4a56      	ldr	r2, [pc, #344]	@ (80296bc <__ieee754_expf+0x1a8>)
 8029562:	4293      	cmp	r3, r2
 8029564:	d96e      	bls.n	8029644 <__ieee754_expf+0x130>
 8029566:	4a56      	ldr	r2, [pc, #344]	@ (80296c0 <__ieee754_expf+0x1ac>)
 8029568:	00b5      	lsls	r5, r6, #2
 802956a:	4293      	cmp	r3, r2
 802956c:	d84e      	bhi.n	802960c <__ieee754_expf+0xf8>
 802956e:	4b55      	ldr	r3, [pc, #340]	@ (80296c4 <__ieee754_expf+0x1b0>)
 8029570:	1c20      	adds	r0, r4, #0
 8029572:	5959      	ldr	r1, [r3, r5]
 8029574:	f7d7 febe 	bl	80012f4 <__aeabi_fsub>
 8029578:	4b53      	ldr	r3, [pc, #332]	@ (80296c8 <__ieee754_expf+0x1b4>)
 802957a:	1c07      	adds	r7, r0, #0
 802957c:	595b      	ldr	r3, [r3, r5]
 802957e:	2501      	movs	r5, #1
 8029580:	4075      	eors	r5, r6
 8029582:	9300      	str	r3, [sp, #0]
 8029584:	1bad      	subs	r5, r5, r6
 8029586:	9900      	ldr	r1, [sp, #0]
 8029588:	1c38      	adds	r0, r7, #0
 802958a:	f7d7 feb3 	bl	80012f4 <__aeabi_fsub>
 802958e:	1c04      	adds	r4, r0, #0
 8029590:	1c21      	adds	r1, r4, #0
 8029592:	1c20      	adds	r0, r4, #0
 8029594:	f7d7 fd54 	bl	8001040 <__aeabi_fmul>
 8029598:	494c      	ldr	r1, [pc, #304]	@ (80296cc <__ieee754_expf+0x1b8>)
 802959a:	1c06      	adds	r6, r0, #0
 802959c:	f7d7 fd50 	bl	8001040 <__aeabi_fmul>
 80295a0:	494b      	ldr	r1, [pc, #300]	@ (80296d0 <__ieee754_expf+0x1bc>)
 80295a2:	f7d7 fea7 	bl	80012f4 <__aeabi_fsub>
 80295a6:	1c31      	adds	r1, r6, #0
 80295a8:	f7d7 fd4a 	bl	8001040 <__aeabi_fmul>
 80295ac:	4949      	ldr	r1, [pc, #292]	@ (80296d4 <__ieee754_expf+0x1c0>)
 80295ae:	f7d7 f987 	bl	80008c0 <__aeabi_fadd>
 80295b2:	1c31      	adds	r1, r6, #0
 80295b4:	f7d7 fd44 	bl	8001040 <__aeabi_fmul>
 80295b8:	4947      	ldr	r1, [pc, #284]	@ (80296d8 <__ieee754_expf+0x1c4>)
 80295ba:	f7d7 fe9b 	bl	80012f4 <__aeabi_fsub>
 80295be:	1c31      	adds	r1, r6, #0
 80295c0:	f7d7 fd3e 	bl	8001040 <__aeabi_fmul>
 80295c4:	4945      	ldr	r1, [pc, #276]	@ (80296dc <__ieee754_expf+0x1c8>)
 80295c6:	f7d7 f97b 	bl	80008c0 <__aeabi_fadd>
 80295ca:	1c31      	adds	r1, r6, #0
 80295cc:	f7d7 fd38 	bl	8001040 <__aeabi_fmul>
 80295d0:	1c01      	adds	r1, r0, #0
 80295d2:	1c20      	adds	r0, r4, #0
 80295d4:	f7d7 fe8e 	bl	80012f4 <__aeabi_fsub>
 80295d8:	1c01      	adds	r1, r0, #0
 80295da:	1c06      	adds	r6, r0, #0
 80295dc:	1c20      	adds	r0, r4, #0
 80295de:	f7d7 fd2f 	bl	8001040 <__aeabi_fmul>
 80295e2:	9001      	str	r0, [sp, #4]
 80295e4:	2d00      	cmp	r5, #0
 80295e6:	d140      	bne.n	802966a <__ieee754_expf+0x156>
 80295e8:	2180      	movs	r1, #128	@ 0x80
 80295ea:	1c30      	adds	r0, r6, #0
 80295ec:	05c9      	lsls	r1, r1, #23
 80295ee:	f7d7 fe81 	bl	80012f4 <__aeabi_fsub>
 80295f2:	1c01      	adds	r1, r0, #0
 80295f4:	9801      	ldr	r0, [sp, #4]
 80295f6:	f7d7 fb55 	bl	8000ca4 <__aeabi_fdiv>
 80295fa:	1c21      	adds	r1, r4, #0
 80295fc:	f7d7 fe7a 	bl	80012f4 <__aeabi_fsub>
 8029600:	1c01      	adds	r1, r0, #0
 8029602:	20fe      	movs	r0, #254	@ 0xfe
 8029604:	0580      	lsls	r0, r0, #22
 8029606:	f7d7 fe75 	bl	80012f4 <__aeabi_fsub>
 802960a:	e79e      	b.n	802954a <__ieee754_expf+0x36>
 802960c:	4934      	ldr	r1, [pc, #208]	@ (80296e0 <__ieee754_expf+0x1cc>)
 802960e:	1c20      	adds	r0, r4, #0
 8029610:	f7d7 fd16 	bl	8001040 <__aeabi_fmul>
 8029614:	4b33      	ldr	r3, [pc, #204]	@ (80296e4 <__ieee754_expf+0x1d0>)
 8029616:	5959      	ldr	r1, [r3, r5]
 8029618:	f7d7 f952 	bl	80008c0 <__aeabi_fadd>
 802961c:	f7d8 f8e4 	bl	80017e8 <__aeabi_f2iz>
 8029620:	0005      	movs	r5, r0
 8029622:	f7d8 f901 	bl	8001828 <__aeabi_i2f>
 8029626:	4930      	ldr	r1, [pc, #192]	@ (80296e8 <__ieee754_expf+0x1d4>)
 8029628:	1c06      	adds	r6, r0, #0
 802962a:	f7d7 fd09 	bl	8001040 <__aeabi_fmul>
 802962e:	1c01      	adds	r1, r0, #0
 8029630:	1c20      	adds	r0, r4, #0
 8029632:	f7d7 fe5f 	bl	80012f4 <__aeabi_fsub>
 8029636:	492d      	ldr	r1, [pc, #180]	@ (80296ec <__ieee754_expf+0x1d8>)
 8029638:	1c07      	adds	r7, r0, #0
 802963a:	1c30      	adds	r0, r6, #0
 802963c:	f7d7 fd00 	bl	8001040 <__aeabi_fmul>
 8029640:	9000      	str	r0, [sp, #0]
 8029642:	e7a0      	b.n	8029586 <__ieee754_expf+0x72>
 8029644:	22d0      	movs	r2, #208	@ 0xd0
 8029646:	0592      	lsls	r2, r2, #22
 8029648:	4293      	cmp	r3, r2
 802964a:	d20c      	bcs.n	8029666 <__ieee754_expf+0x152>
 802964c:	4928      	ldr	r1, [pc, #160]	@ (80296f0 <__ieee754_expf+0x1dc>)
 802964e:	1c20      	adds	r0, r4, #0
 8029650:	f7d7 f936 	bl	80008c0 <__aeabi_fadd>
 8029654:	21fe      	movs	r1, #254	@ 0xfe
 8029656:	0589      	lsls	r1, r1, #22
 8029658:	f7d6 ff7e 	bl	8000558 <__aeabi_fcmpgt>
 802965c:	1e05      	subs	r5, r0, #0
 802965e:	d097      	beq.n	8029590 <__ieee754_expf+0x7c>
 8029660:	21fe      	movs	r1, #254	@ 0xfe
 8029662:	0589      	lsls	r1, r1, #22
 8029664:	e75f      	b.n	8029526 <__ieee754_expf+0x12>
 8029666:	2500      	movs	r5, #0
 8029668:	e792      	b.n	8029590 <__ieee754_expf+0x7c>
 802966a:	2080      	movs	r0, #128	@ 0x80
 802966c:	1c31      	adds	r1, r6, #0
 802966e:	05c0      	lsls	r0, r0, #23
 8029670:	f7d7 fe40 	bl	80012f4 <__aeabi_fsub>
 8029674:	1c01      	adds	r1, r0, #0
 8029676:	9801      	ldr	r0, [sp, #4]
 8029678:	f7d7 fb14 	bl	8000ca4 <__aeabi_fdiv>
 802967c:	1c01      	adds	r1, r0, #0
 802967e:	9800      	ldr	r0, [sp, #0]
 8029680:	f7d7 fe38 	bl	80012f4 <__aeabi_fsub>
 8029684:	1c39      	adds	r1, r7, #0
 8029686:	f7d7 fe35 	bl	80012f4 <__aeabi_fsub>
 802968a:	1c01      	adds	r1, r0, #0
 802968c:	20fe      	movs	r0, #254	@ 0xfe
 802968e:	0580      	lsls	r0, r0, #22
 8029690:	f7d7 fe30 	bl	80012f4 <__aeabi_fsub>
 8029694:	002b      	movs	r3, r5
 8029696:	337d      	adds	r3, #125	@ 0x7d
 8029698:	db02      	blt.n	80296a0 <__ieee754_expf+0x18c>
 802969a:	05ec      	lsls	r4, r5, #23
 802969c:	1824      	adds	r4, r4, r0
 802969e:	e74c      	b.n	802953a <__ieee754_expf+0x26>
 80296a0:	21d8      	movs	r1, #216	@ 0xd8
 80296a2:	3564      	adds	r5, #100	@ 0x64
 80296a4:	05ed      	lsls	r5, r5, #23
 80296a6:	1828      	adds	r0, r5, r0
 80296a8:	0509      	lsls	r1, r1, #20
 80296aa:	f7d7 fcc9 	bl	8001040 <__aeabi_fmul>
 80296ae:	e74c      	b.n	802954a <__ieee754_expf+0x36>
 80296b0:	2400      	movs	r4, #0
 80296b2:	e742      	b.n	802953a <__ieee754_expf+0x26>
 80296b4:	42b17217 	.word	0x42b17217
 80296b8:	42cff1b5 	.word	0x42cff1b5
 80296bc:	3eb17218 	.word	0x3eb17218
 80296c0:	3f851591 	.word	0x3f851591
 80296c4:	0802e828 	.word	0x0802e828
 80296c8:	0802e820 	.word	0x0802e820
 80296cc:	3331bb4c 	.word	0x3331bb4c
 80296d0:	35ddea0e 	.word	0x35ddea0e
 80296d4:	388ab355 	.word	0x388ab355
 80296d8:	3b360b61 	.word	0x3b360b61
 80296dc:	3e2aaaab 	.word	0x3e2aaaab
 80296e0:	3fb8aa3b 	.word	0x3fb8aa3b
 80296e4:	0802e830 	.word	0x0802e830
 80296e8:	3f317180 	.word	0x3f317180
 80296ec:	3717f7d1 	.word	0x3717f7d1
 80296f0:	7149f2ca 	.word	0x7149f2ca

080296f4 <scalbn>:
 80296f4:	004b      	lsls	r3, r1, #1
 80296f6:	b570      	push	{r4, r5, r6, lr}
 80296f8:	0d5b      	lsrs	r3, r3, #21
 80296fa:	0014      	movs	r4, r2
 80296fc:	000d      	movs	r5, r1
 80296fe:	2b00      	cmp	r3, #0
 8029700:	d10f      	bne.n	8029722 <scalbn+0x2e>
 8029702:	004b      	lsls	r3, r1, #1
 8029704:	085b      	lsrs	r3, r3, #1
 8029706:	4303      	orrs	r3, r0
 8029708:	d012      	beq.n	8029730 <scalbn+0x3c>
 802970a:	4b23      	ldr	r3, [pc, #140]	@ (8029798 <scalbn+0xa4>)
 802970c:	2200      	movs	r2, #0
 802970e:	f7d9 f921 	bl	8002954 <__aeabi_dmul>
 8029712:	4b22      	ldr	r3, [pc, #136]	@ (802979c <scalbn+0xa8>)
 8029714:	429c      	cmp	r4, r3
 8029716:	da0c      	bge.n	8029732 <scalbn+0x3e>
 8029718:	4a21      	ldr	r2, [pc, #132]	@ (80297a0 <scalbn+0xac>)
 802971a:	4b22      	ldr	r3, [pc, #136]	@ (80297a4 <scalbn+0xb0>)
 802971c:	f7d9 f91a 	bl	8002954 <__aeabi_dmul>
 8029720:	e006      	b.n	8029730 <scalbn+0x3c>
 8029722:	4a21      	ldr	r2, [pc, #132]	@ (80297a8 <scalbn+0xb4>)
 8029724:	4293      	cmp	r3, r2
 8029726:	d108      	bne.n	802973a <scalbn+0x46>
 8029728:	0002      	movs	r2, r0
 802972a:	000b      	movs	r3, r1
 802972c:	f7d8 f912 	bl	8001954 <__aeabi_dadd>
 8029730:	bd70      	pop	{r4, r5, r6, pc}
 8029732:	000d      	movs	r5, r1
 8029734:	004b      	lsls	r3, r1, #1
 8029736:	0d5b      	lsrs	r3, r3, #21
 8029738:	3b36      	subs	r3, #54	@ 0x36
 802973a:	4a1c      	ldr	r2, [pc, #112]	@ (80297ac <scalbn+0xb8>)
 802973c:	4294      	cmp	r4, r2
 802973e:	dd0a      	ble.n	8029756 <scalbn+0x62>
 8029740:	4c1b      	ldr	r4, [pc, #108]	@ (80297b0 <scalbn+0xbc>)
 8029742:	4d1c      	ldr	r5, [pc, #112]	@ (80297b4 <scalbn+0xc0>)
 8029744:	2900      	cmp	r1, #0
 8029746:	da01      	bge.n	802974c <scalbn+0x58>
 8029748:	4c19      	ldr	r4, [pc, #100]	@ (80297b0 <scalbn+0xbc>)
 802974a:	4d1b      	ldr	r5, [pc, #108]	@ (80297b8 <scalbn+0xc4>)
 802974c:	4a18      	ldr	r2, [pc, #96]	@ (80297b0 <scalbn+0xbc>)
 802974e:	4b19      	ldr	r3, [pc, #100]	@ (80297b4 <scalbn+0xc0>)
 8029750:	0020      	movs	r0, r4
 8029752:	0029      	movs	r1, r5
 8029754:	e7e2      	b.n	802971c <scalbn+0x28>
 8029756:	18e2      	adds	r2, r4, r3
 8029758:	4b18      	ldr	r3, [pc, #96]	@ (80297bc <scalbn+0xc8>)
 802975a:	429a      	cmp	r2, r3
 802975c:	dcf0      	bgt.n	8029740 <scalbn+0x4c>
 802975e:	2a00      	cmp	r2, #0
 8029760:	dd05      	ble.n	802976e <scalbn+0x7a>
 8029762:	4b17      	ldr	r3, [pc, #92]	@ (80297c0 <scalbn+0xcc>)
 8029764:	0512      	lsls	r2, r2, #20
 8029766:	402b      	ands	r3, r5
 8029768:	4313      	orrs	r3, r2
 802976a:	0019      	movs	r1, r3
 802976c:	e7e0      	b.n	8029730 <scalbn+0x3c>
 802976e:	0013      	movs	r3, r2
 8029770:	3335      	adds	r3, #53	@ 0x35
 8029772:	da08      	bge.n	8029786 <scalbn+0x92>
 8029774:	4c0a      	ldr	r4, [pc, #40]	@ (80297a0 <scalbn+0xac>)
 8029776:	4d0b      	ldr	r5, [pc, #44]	@ (80297a4 <scalbn+0xb0>)
 8029778:	2900      	cmp	r1, #0
 802977a:	da01      	bge.n	8029780 <scalbn+0x8c>
 802977c:	4c08      	ldr	r4, [pc, #32]	@ (80297a0 <scalbn+0xac>)
 802977e:	4d11      	ldr	r5, [pc, #68]	@ (80297c4 <scalbn+0xd0>)
 8029780:	4a07      	ldr	r2, [pc, #28]	@ (80297a0 <scalbn+0xac>)
 8029782:	4b08      	ldr	r3, [pc, #32]	@ (80297a4 <scalbn+0xb0>)
 8029784:	e7e4      	b.n	8029750 <scalbn+0x5c>
 8029786:	4b0e      	ldr	r3, [pc, #56]	@ (80297c0 <scalbn+0xcc>)
 8029788:	3236      	adds	r2, #54	@ 0x36
 802978a:	401d      	ands	r5, r3
 802978c:	0512      	lsls	r2, r2, #20
 802978e:	432a      	orrs	r2, r5
 8029790:	0011      	movs	r1, r2
 8029792:	4b0d      	ldr	r3, [pc, #52]	@ (80297c8 <scalbn+0xd4>)
 8029794:	2200      	movs	r2, #0
 8029796:	e7c1      	b.n	802971c <scalbn+0x28>
 8029798:	43500000 	.word	0x43500000
 802979c:	ffff3cb0 	.word	0xffff3cb0
 80297a0:	c2f8f359 	.word	0xc2f8f359
 80297a4:	01a56e1f 	.word	0x01a56e1f
 80297a8:	000007ff 	.word	0x000007ff
 80297ac:	0000c350 	.word	0x0000c350
 80297b0:	8800759c 	.word	0x8800759c
 80297b4:	7e37e43c 	.word	0x7e37e43c
 80297b8:	fe37e43c 	.word	0xfe37e43c
 80297bc:	000007fe 	.word	0x000007fe
 80297c0:	800fffff 	.word	0x800fffff
 80297c4:	81a56e1f 	.word	0x81a56e1f
 80297c8:	3c900000 	.word	0x3c900000

080297cc <with_errno>:
 80297cc:	b570      	push	{r4, r5, r6, lr}
 80297ce:	000d      	movs	r5, r1
 80297d0:	0016      	movs	r6, r2
 80297d2:	0004      	movs	r4, r0
 80297d4:	f7fc f952 	bl	8025a7c <__errno>
 80297d8:	0029      	movs	r1, r5
 80297da:	6006      	str	r6, [r0, #0]
 80297dc:	0020      	movs	r0, r4
 80297de:	bd70      	pop	{r4, r5, r6, pc}

080297e0 <xflow>:
 80297e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80297e2:	0014      	movs	r4, r2
 80297e4:	001d      	movs	r5, r3
 80297e6:	2800      	cmp	r0, #0
 80297e8:	d002      	beq.n	80297f0 <xflow+0x10>
 80297ea:	2180      	movs	r1, #128	@ 0x80
 80297ec:	0609      	lsls	r1, r1, #24
 80297ee:	185b      	adds	r3, r3, r1
 80297f0:	9200      	str	r2, [sp, #0]
 80297f2:	9301      	str	r3, [sp, #4]
 80297f4:	9a00      	ldr	r2, [sp, #0]
 80297f6:	9b01      	ldr	r3, [sp, #4]
 80297f8:	0020      	movs	r0, r4
 80297fa:	0029      	movs	r1, r5
 80297fc:	f7d9 f8aa 	bl	8002954 <__aeabi_dmul>
 8029800:	2222      	movs	r2, #34	@ 0x22
 8029802:	f7ff ffe3 	bl	80297cc <with_errno>
 8029806:	b003      	add	sp, #12
 8029808:	bd30      	pop	{r4, r5, pc}

0802980a <__math_uflow>:
 802980a:	2380      	movs	r3, #128	@ 0x80
 802980c:	b510      	push	{r4, lr}
 802980e:	2200      	movs	r2, #0
 8029810:	055b      	lsls	r3, r3, #21
 8029812:	f7ff ffe5 	bl	80297e0 <xflow>
 8029816:	bd10      	pop	{r4, pc}

08029818 <__math_oflow>:
 8029818:	23e0      	movs	r3, #224	@ 0xe0
 802981a:	b510      	push	{r4, lr}
 802981c:	2200      	movs	r2, #0
 802981e:	05db      	lsls	r3, r3, #23
 8029820:	f7ff ffde 	bl	80297e0 <xflow>
 8029824:	bd10      	pop	{r4, pc}

08029826 <with_errnof>:
 8029826:	b570      	push	{r4, r5, r6, lr}
 8029828:	000d      	movs	r5, r1
 802982a:	1c04      	adds	r4, r0, #0
 802982c:	f7fc f926 	bl	8025a7c <__errno>
 8029830:	6005      	str	r5, [r0, #0]
 8029832:	1c20      	adds	r0, r4, #0
 8029834:	bd70      	pop	{r4, r5, r6, pc}

08029836 <xflowf>:
 8029836:	b510      	push	{r4, lr}
 8029838:	1c0b      	adds	r3, r1, #0
 802983a:	2800      	cmp	r0, #0
 802983c:	d002      	beq.n	8029844 <xflowf+0xe>
 802983e:	2380      	movs	r3, #128	@ 0x80
 8029840:	061b      	lsls	r3, r3, #24
 8029842:	18cb      	adds	r3, r1, r3
 8029844:	1c18      	adds	r0, r3, #0
 8029846:	f7d7 fbfb 	bl	8001040 <__aeabi_fmul>
 802984a:	2122      	movs	r1, #34	@ 0x22
 802984c:	f7ff ffeb 	bl	8029826 <with_errnof>
 8029850:	bd10      	pop	{r4, pc}

08029852 <__math_uflowf>:
 8029852:	2180      	movs	r1, #128	@ 0x80
 8029854:	b510      	push	{r4, lr}
 8029856:	0549      	lsls	r1, r1, #21
 8029858:	f7ff ffed 	bl	8029836 <xflowf>
 802985c:	bd10      	pop	{r4, pc}

0802985e <__math_oflowf>:
 802985e:	21e0      	movs	r1, #224	@ 0xe0
 8029860:	b510      	push	{r4, lr}
 8029862:	05c9      	lsls	r1, r1, #23
 8029864:	f7ff ffe7 	bl	8029836 <xflowf>
 8029868:	bd10      	pop	{r4, pc}
	...

0802986c <__ieee754_sqrt>:
 802986c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802986e:	000a      	movs	r2, r1
 8029870:	000d      	movs	r5, r1
 8029872:	496b      	ldr	r1, [pc, #428]	@ (8029a20 <__ieee754_sqrt+0x1b4>)
 8029874:	0004      	movs	r4, r0
 8029876:	0003      	movs	r3, r0
 8029878:	0008      	movs	r0, r1
 802987a:	b087      	sub	sp, #28
 802987c:	4028      	ands	r0, r5
 802987e:	4288      	cmp	r0, r1
 8029880:	d111      	bne.n	80298a6 <__ieee754_sqrt+0x3a>
 8029882:	0022      	movs	r2, r4
 8029884:	002b      	movs	r3, r5
 8029886:	0020      	movs	r0, r4
 8029888:	0029      	movs	r1, r5
 802988a:	f7d9 f863 	bl	8002954 <__aeabi_dmul>
 802988e:	0002      	movs	r2, r0
 8029890:	000b      	movs	r3, r1
 8029892:	0020      	movs	r0, r4
 8029894:	0029      	movs	r1, r5
 8029896:	f7d8 f85d 	bl	8001954 <__aeabi_dadd>
 802989a:	0004      	movs	r4, r0
 802989c:	000d      	movs	r5, r1
 802989e:	0020      	movs	r0, r4
 80298a0:	0029      	movs	r1, r5
 80298a2:	b007      	add	sp, #28
 80298a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80298a6:	2d00      	cmp	r5, #0
 80298a8:	dc11      	bgt.n	80298ce <__ieee754_sqrt+0x62>
 80298aa:	0069      	lsls	r1, r5, #1
 80298ac:	0849      	lsrs	r1, r1, #1
 80298ae:	4321      	orrs	r1, r4
 80298b0:	d0f5      	beq.n	802989e <__ieee754_sqrt+0x32>
 80298b2:	2000      	movs	r0, #0
 80298b4:	4285      	cmp	r5, r0
 80298b6:	d010      	beq.n	80298da <__ieee754_sqrt+0x6e>
 80298b8:	0022      	movs	r2, r4
 80298ba:	002b      	movs	r3, r5
 80298bc:	0020      	movs	r0, r4
 80298be:	0029      	movs	r1, r5
 80298c0:	f7d9 fb2e 	bl	8002f20 <__aeabi_dsub>
 80298c4:	0002      	movs	r2, r0
 80298c6:	000b      	movs	r3, r1
 80298c8:	f7d8 fc0a 	bl	80020e0 <__aeabi_ddiv>
 80298cc:	e7e5      	b.n	802989a <__ieee754_sqrt+0x2e>
 80298ce:	1528      	asrs	r0, r5, #20
 80298d0:	d115      	bne.n	80298fe <__ieee754_sqrt+0x92>
 80298d2:	2480      	movs	r4, #128	@ 0x80
 80298d4:	2100      	movs	r1, #0
 80298d6:	0364      	lsls	r4, r4, #13
 80298d8:	e007      	b.n	80298ea <__ieee754_sqrt+0x7e>
 80298da:	0ada      	lsrs	r2, r3, #11
 80298dc:	3815      	subs	r0, #21
 80298de:	055b      	lsls	r3, r3, #21
 80298e0:	2a00      	cmp	r2, #0
 80298e2:	d0fa      	beq.n	80298da <__ieee754_sqrt+0x6e>
 80298e4:	e7f5      	b.n	80298d2 <__ieee754_sqrt+0x66>
 80298e6:	0052      	lsls	r2, r2, #1
 80298e8:	3101      	adds	r1, #1
 80298ea:	4222      	tst	r2, r4
 80298ec:	d0fb      	beq.n	80298e6 <__ieee754_sqrt+0x7a>
 80298ee:	1e4c      	subs	r4, r1, #1
 80298f0:	1b00      	subs	r0, r0, r4
 80298f2:	2420      	movs	r4, #32
 80298f4:	001d      	movs	r5, r3
 80298f6:	1a64      	subs	r4, r4, r1
 80298f8:	40e5      	lsrs	r5, r4
 80298fa:	408b      	lsls	r3, r1
 80298fc:	432a      	orrs	r2, r5
 80298fe:	4949      	ldr	r1, [pc, #292]	@ (8029a24 <__ieee754_sqrt+0x1b8>)
 8029900:	0312      	lsls	r2, r2, #12
 8029902:	1844      	adds	r4, r0, r1
 8029904:	2180      	movs	r1, #128	@ 0x80
 8029906:	0b12      	lsrs	r2, r2, #12
 8029908:	0349      	lsls	r1, r1, #13
 802990a:	4311      	orrs	r1, r2
 802990c:	07c0      	lsls	r0, r0, #31
 802990e:	d403      	bmi.n	8029918 <__ieee754_sqrt+0xac>
 8029910:	0fda      	lsrs	r2, r3, #31
 8029912:	0049      	lsls	r1, r1, #1
 8029914:	1851      	adds	r1, r2, r1
 8029916:	005b      	lsls	r3, r3, #1
 8029918:	2500      	movs	r5, #0
 802991a:	1062      	asrs	r2, r4, #1
 802991c:	0049      	lsls	r1, r1, #1
 802991e:	2480      	movs	r4, #128	@ 0x80
 8029920:	9205      	str	r2, [sp, #20]
 8029922:	0fda      	lsrs	r2, r3, #31
 8029924:	1852      	adds	r2, r2, r1
 8029926:	2016      	movs	r0, #22
 8029928:	0029      	movs	r1, r5
 802992a:	005b      	lsls	r3, r3, #1
 802992c:	03a4      	lsls	r4, r4, #14
 802992e:	190e      	adds	r6, r1, r4
 8029930:	4296      	cmp	r6, r2
 8029932:	dc02      	bgt.n	802993a <__ieee754_sqrt+0xce>
 8029934:	1931      	adds	r1, r6, r4
 8029936:	1b92      	subs	r2, r2, r6
 8029938:	192d      	adds	r5, r5, r4
 802993a:	0fde      	lsrs	r6, r3, #31
 802993c:	0052      	lsls	r2, r2, #1
 802993e:	3801      	subs	r0, #1
 8029940:	1992      	adds	r2, r2, r6
 8029942:	005b      	lsls	r3, r3, #1
 8029944:	0864      	lsrs	r4, r4, #1
 8029946:	2800      	cmp	r0, #0
 8029948:	d1f1      	bne.n	802992e <__ieee754_sqrt+0xc2>
 802994a:	2620      	movs	r6, #32
 802994c:	2780      	movs	r7, #128	@ 0x80
 802994e:	0004      	movs	r4, r0
 8029950:	9604      	str	r6, [sp, #16]
 8029952:	063f      	lsls	r7, r7, #24
 8029954:	183e      	adds	r6, r7, r0
 8029956:	46b4      	mov	ip, r6
 8029958:	428a      	cmp	r2, r1
 802995a:	dc02      	bgt.n	8029962 <__ieee754_sqrt+0xf6>
 802995c:	d114      	bne.n	8029988 <__ieee754_sqrt+0x11c>
 802995e:	429e      	cmp	r6, r3
 8029960:	d812      	bhi.n	8029988 <__ieee754_sqrt+0x11c>
 8029962:	4660      	mov	r0, ip
 8029964:	4666      	mov	r6, ip
 8029966:	19c0      	adds	r0, r0, r7
 8029968:	9100      	str	r1, [sp, #0]
 802996a:	2e00      	cmp	r6, #0
 802996c:	da03      	bge.n	8029976 <__ieee754_sqrt+0x10a>
 802996e:	43c6      	mvns	r6, r0
 8029970:	0ff6      	lsrs	r6, r6, #31
 8029972:	198e      	adds	r6, r1, r6
 8029974:	9600      	str	r6, [sp, #0]
 8029976:	1a52      	subs	r2, r2, r1
 8029978:	4563      	cmp	r3, ip
 802997a:	4189      	sbcs	r1, r1
 802997c:	4249      	negs	r1, r1
 802997e:	1a52      	subs	r2, r2, r1
 8029980:	4661      	mov	r1, ip
 8029982:	1a5b      	subs	r3, r3, r1
 8029984:	9900      	ldr	r1, [sp, #0]
 8029986:	19e4      	adds	r4, r4, r7
 8029988:	0fde      	lsrs	r6, r3, #31
 802998a:	0052      	lsls	r2, r2, #1
 802998c:	1992      	adds	r2, r2, r6
 802998e:	9e04      	ldr	r6, [sp, #16]
 8029990:	005b      	lsls	r3, r3, #1
 8029992:	3e01      	subs	r6, #1
 8029994:	087f      	lsrs	r7, r7, #1
 8029996:	9604      	str	r6, [sp, #16]
 8029998:	2e00      	cmp	r6, #0
 802999a:	d1db      	bne.n	8029954 <__ieee754_sqrt+0xe8>
 802999c:	431a      	orrs	r2, r3
 802999e:	d01f      	beq.n	80299e0 <__ieee754_sqrt+0x174>
 80299a0:	4e21      	ldr	r6, [pc, #132]	@ (8029a28 <__ieee754_sqrt+0x1bc>)
 80299a2:	4f22      	ldr	r7, [pc, #136]	@ (8029a2c <__ieee754_sqrt+0x1c0>)
 80299a4:	6830      	ldr	r0, [r6, #0]
 80299a6:	6871      	ldr	r1, [r6, #4]
 80299a8:	683a      	ldr	r2, [r7, #0]
 80299aa:	687b      	ldr	r3, [r7, #4]
 80299ac:	9200      	str	r2, [sp, #0]
 80299ae:	9301      	str	r3, [sp, #4]
 80299b0:	6832      	ldr	r2, [r6, #0]
 80299b2:	6873      	ldr	r3, [r6, #4]
 80299b4:	9202      	str	r2, [sp, #8]
 80299b6:	9303      	str	r3, [sp, #12]
 80299b8:	9a00      	ldr	r2, [sp, #0]
 80299ba:	9b01      	ldr	r3, [sp, #4]
 80299bc:	f7d9 fab0 	bl	8002f20 <__aeabi_dsub>
 80299c0:	0002      	movs	r2, r0
 80299c2:	000b      	movs	r3, r1
 80299c4:	9802      	ldr	r0, [sp, #8]
 80299c6:	9903      	ldr	r1, [sp, #12]
 80299c8:	f7d6 fd82 	bl	80004d0 <__aeabi_dcmple>
 80299cc:	2800      	cmp	r0, #0
 80299ce:	d007      	beq.n	80299e0 <__ieee754_sqrt+0x174>
 80299d0:	6830      	ldr	r0, [r6, #0]
 80299d2:	6871      	ldr	r1, [r6, #4]
 80299d4:	683a      	ldr	r2, [r7, #0]
 80299d6:	687b      	ldr	r3, [r7, #4]
 80299d8:	1c67      	adds	r7, r4, #1
 80299da:	d10c      	bne.n	80299f6 <__ieee754_sqrt+0x18a>
 80299dc:	9c04      	ldr	r4, [sp, #16]
 80299de:	3501      	adds	r5, #1
 80299e0:	4a13      	ldr	r2, [pc, #76]	@ (8029a30 <__ieee754_sqrt+0x1c4>)
 80299e2:	106b      	asrs	r3, r5, #1
 80299e4:	189b      	adds	r3, r3, r2
 80299e6:	9a05      	ldr	r2, [sp, #20]
 80299e8:	07ed      	lsls	r5, r5, #31
 80299ea:	0864      	lsrs	r4, r4, #1
 80299ec:	0512      	lsls	r2, r2, #20
 80299ee:	4325      	orrs	r5, r4
 80299f0:	0028      	movs	r0, r5
 80299f2:	18d1      	adds	r1, r2, r3
 80299f4:	e751      	b.n	802989a <__ieee754_sqrt+0x2e>
 80299f6:	f7d7 ffad 	bl	8001954 <__aeabi_dadd>
 80299fa:	6877      	ldr	r7, [r6, #4]
 80299fc:	6836      	ldr	r6, [r6, #0]
 80299fe:	0002      	movs	r2, r0
 8029a00:	000b      	movs	r3, r1
 8029a02:	0030      	movs	r0, r6
 8029a04:	0039      	movs	r1, r7
 8029a06:	f7d6 fd59 	bl	80004bc <__aeabi_dcmplt>
 8029a0a:	2800      	cmp	r0, #0
 8029a0c:	d004      	beq.n	8029a18 <__ieee754_sqrt+0x1ac>
 8029a0e:	3402      	adds	r4, #2
 8029a10:	4263      	negs	r3, r4
 8029a12:	4163      	adcs	r3, r4
 8029a14:	18ed      	adds	r5, r5, r3
 8029a16:	e7e3      	b.n	80299e0 <__ieee754_sqrt+0x174>
 8029a18:	2301      	movs	r3, #1
 8029a1a:	3401      	adds	r4, #1
 8029a1c:	439c      	bics	r4, r3
 8029a1e:	e7df      	b.n	80299e0 <__ieee754_sqrt+0x174>
 8029a20:	7ff00000 	.word	0x7ff00000
 8029a24:	fffffc01 	.word	0xfffffc01
 8029a28:	0802e840 	.word	0x0802e840
 8029a2c:	0802e838 	.word	0x0802e838
 8029a30:	3fe00000 	.word	0x3fe00000

08029a34 <_init>:
 8029a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a36:	46c0      	nop			@ (mov r8, r8)
 8029a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029a3a:	bc08      	pop	{r3}
 8029a3c:	469e      	mov	lr, r3
 8029a3e:	4770      	bx	lr

08029a40 <_fini>:
 8029a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a42:	46c0      	nop			@ (mov r8, r8)
 8029a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029a46:	bc08      	pop	{r3}
 8029a48:	469e      	mov	lr, r3
 8029a4a:	4770      	bx	lr
