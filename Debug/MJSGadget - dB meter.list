
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a4c0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004868  0802a580  0802a580  0002b580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ede8  0802ede8  0003043c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802ede8  0802ede8  0002fde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802edf0  0802edf0  0003043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802edf0  0802edf0  0002fdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802edf4  0802edf4  0002fdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000043c  20000000  0802edf8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034dc  2000043c  0802f234  0003043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003918  0802f234  00030918  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036f1e  00000000  00000000  00030464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009e7b  00000000  00000000  00067382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dc8  00000000  00000000  00071200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002224  00000000  00000000  00073fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002464b  00000000  00000000  000761ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000469ba  00000000  00000000  0009a837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a35ba  00000000  00000000  000e11f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  001847ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bbfc  00000000  00000000  0018485c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00190458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  001904c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00192a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000043c 	.word	0x2000043c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802a568 	.word	0x0802a568

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000440 	.word	0x20000440
 8000104:	0802a568 	.word	0x0802a568

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802dbcc 	.word	0x0802dbcc
 8000ec8:	0802dc0c 	.word	0x0802dc0c
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802dc48 	.word	0x0802dc48
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	20000468 	.word	0x20000468
 8003ad8:	20000498 	.word	0x20000498

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000464 	.word	0x20000464
 8003b38:	20000498 	.word	0x20000498

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000460 	.word	0x20000460

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f010 fe8c 	bl	8014874 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	2000045c 	.word	0x2000045c

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000464 	.word	0x20000464
 8003b98:	20000468 	.word	0x20000468

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f010 fe63 	bl	8014888 <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f010 f8a3 	bl	8013d84 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000458 	.word	0x20000458
 8003c80:	0802a580 	.word	0x0802a580
 8003c84:	0802a58c 	.word	0x0802a58c
 8003c88:	0802a590 	.word	0x0802a590
 8003c8c:	0802a59c 	.word	0x0802a59c
 8003c90:	0802a5bc 	.word	0x0802a5bc
 8003c94:	20000498 	.word	0x20000498

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f010 fde8 	bl	8014888 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f010 fdd4 	bl	8014888 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f010 f82f 	bl	8013d84 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f010 fdae 	bl	8014888 <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	200004a0 	.word	0x200004a0
 8003d40:	200004a1 	.word	0x200004a1
 8003d44:	20000458 	.word	0x20000458
 8003d48:	0802a5c0 	.word	0x0802a5c0
 8003d4c:	0802a58c 	.word	0x0802a58c
 8003d50:	0802a5c4 	.word	0x0802a5c4
 8003d54:	0802a5bc 	.word	0x0802a5bc

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f010 fd90 	bl	8014888 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f010 fd84 	bl	8014888 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f00f ffd1 	bl	8013d84 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f010 fd50 	bl	8014888 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	20000498 	.word	0x20000498
 8003e00:	20000458 	.word	0x20000458
 8003e04:	0802a5f0 	.word	0x0802a5f0
 8003e08:	0802a5bc 	.word	0x0802a5bc

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f010 fd1d 	bl	8014888 <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	20000498 	.word	0x20000498

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f00f ff5e 	bl	8013d84 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f00f ff1f 	bl	8013d84 <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000498 	.word	0x20000498
 8003f58:	0802a60c 	.word	0x0802a60c
 8003f5c:	0802a62c 	.word	0x0802a62c
 8003f60:	20000458 	.word	0x20000458
 8003f64:	0802a630 	.word	0x0802a630
 8003f68:	0802a5bc 	.word	0x0802a5bc

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f00f fef8 	bl	8013d84 <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000458 	.word	0x20000458
 8003fa4:	0802a664 	.word	0x0802a664
 8003fa8:	0802a5bc 	.word	0x0802a5bc

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f00f fed8 	bl	8013d84 <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f010 fc53 	bl	8014888 <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f010 fc42 	bl	8014888 <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	20000458 	.word	0x20000458
 8004094:	0802a678 	.word	0x0802a678
 8004098:	0802a5bc 	.word	0x0802a5bc
 800409c:	20000490 	.word	0x20000490
 80040a0:	20000498 	.word	0x20000498

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00f fe5c 	bl	8013d84 <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f010 fbd7 	bl	8014888 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f024 ff5d 	bl	8028ff4 <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f024 ff39 	bl	8028ff4 <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f024 ff15 	bl	8028ff4 <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f024 fef1 	bl	8028ff4 <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f024 fec7 	bl	8028ff4 <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f024 fea3 	bl	8028ff4 <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f024 fe7f 	bl	8028ff4 <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f024 fe5b 	bl	8028ff4 <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	20000458 	.word	0x20000458
 8004378:	0802a694 	.word	0x0802a694
 800437c:	0802a5bc 	.word	0x0802a5bc
 8004380:	2000046c 	.word	0x2000046c

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bc5      	ldr	r3, [pc, #788]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00f fc38 	bl	8013cd8 <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc0      	ldr	r3, [pc, #768]	@ (8004778 <ENS_Upkeep+0x320>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e1fb      	b.n	8004874 <ENS_Upkeep+0x41c>
  }
  switch(ENSState) {
 800447c:	4bbe      	ldr	r3, [pc, #760]	@ (8004778 <ENS_Upkeep+0x320>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e1dd      	b.n	8004842 <ENS_Upkeep+0x3ea>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bbc      	ldr	r3, [pc, #752]	@ (800477c <ENS_Upkeep+0x324>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4abb      	ldr	r2, [pc, #748]	@ (8004780 <ENS_Upkeep+0x328>)
 8004492:	4bbc      	ldr	r3, [pc, #752]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00f fc74 	bl	8013d84 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 780000;  // 4 times an hour
 800449c:	f010 f9ea 	bl	8014874 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4ab9      	ldr	r2, [pc, #740]	@ (8004788 <ENS_Upkeep+0x330>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bb3      	ldr	r3, [pc, #716]	@ (8004774 <ENS_Upkeep+0x31c>)
 80044a8:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 80044aa:	4bb8      	ldr	r3, [pc, #736]	@ (800478c <ENS_Upkeep+0x334>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	4bb8      	ldr	r3, [pc, #736]	@ (8004790 <ENS_Upkeep+0x338>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d100      	bne.n	80044b8 <ENS_Upkeep+0x60>
 80044b6:	e1d0      	b.n	800485a <ENS_Upkeep+0x402>
      ENSState = ENS_STATE_WAIT;
 80044b8:	4baf      	ldr	r3, [pc, #700]	@ (8004778 <ENS_Upkeep+0x320>)
 80044ba:	2208      	movs	r2, #8
 80044bc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80044be:	e1cc      	b.n	800485a <ENS_Upkeep+0x402>

  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044c0:	f009 fc9e 	bl	800de00 <getSensorLock>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d000      	beq.n	80044ca <ENS_Upkeep+0x72>
 80044c8:	e1c9      	b.n	800485e <ENS_Upkeep+0x406>
      break;
    }
    setSensorLock(ENS160);
 80044ca:	2004      	movs	r0, #4
 80044cc:	f009 fc84 	bl	800ddd8 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044d0:	1d3c      	adds	r4, r7, #4
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7ff fc9a 	bl	8003e0c <ENS160_setMode>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <ENS_Upkeep+0x90>
 80044e4:	4bab      	ldr	r3, [pc, #684]	@ (8004794 <ENS_Upkeep+0x33c>)
 80044e6:	e000      	b.n	80044ea <ENS_Upkeep+0x92>
 80044e8:	4bab      	ldr	r3, [pc, #684]	@ (8004798 <ENS_Upkeep+0x340>)
 80044ea:	4aac      	ldr	r2, [pc, #688]	@ (800479c <ENS_Upkeep+0x344>)
 80044ec:	49a5      	ldr	r1, [pc, #660]	@ (8004784 <ENS_Upkeep+0x32c>)
 80044ee:	2003      	movs	r0, #3
 80044f0:	f00f fc48 	bl	8013d84 <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044f4:	200a      	movs	r0, #10
 80044f6:	f010 f9c7 	bl	8014888 <HAL_Delay>
    setSensorLock(FREE);
 80044fa:	2000      	movs	r0, #0
 80044fc:	f009 fc6c 	bl	800ddd8 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 8004500:	4b9d      	ldr	r3, [pc, #628]	@ (8004778 <ENS_Upkeep+0x320>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004506:	f010 f9b5 	bl	8014874 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	22fa      	movs	r2, #250	@ 0xfa
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	189a      	adds	r2, r3, r2
 8004512:	4b98      	ldr	r3, [pc, #608]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004514:	601a      	str	r2, [r3, #0]
    break;
 8004516:	e1ab      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004518:	f009 fc72 	bl	800de00 <getSensorLock>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d000      	beq.n	8004522 <ENS_Upkeep+0xca>
 8004520:	e19f      	b.n	8004862 <ENS_Upkeep+0x40a>
      break;
    }
    setSensorLock(ENS160);
 8004522:	2004      	movs	r0, #4
 8004524:	f009 fc58 	bl	800ddd8 <setSensorLock>
    status = ENS160_readStatus();
 8004528:	1d7c      	adds	r4, r7, #5
 800452a:	f7ff fd1f 	bl	8003f6c <ENS160_readStatus>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 8004532:	200a      	movs	r0, #10
 8004534:	f010 f9a8 	bl	8014888 <HAL_Delay>
    setSensorLock(FREE);
 8004538:	2000      	movs	r0, #0
 800453a:	f009 fc4d 	bl	800ddd8 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800453e:	1d7b      	adds	r3, r7, #5
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	220c      	movs	r2, #12
 8004544:	4013      	ands	r3, r2
 8004546:	d02e      	beq.n	80045a6 <ENS_Upkeep+0x14e>
      switch (status >> 2) {
 8004548:	1d7b      	adds	r3, r7, #5
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d013      	beq.n	800457c <ENS_Upkeep+0x124>
 8004554:	dc19      	bgt.n	800458a <ENS_Upkeep+0x132>
 8004556:	2b01      	cmp	r3, #1
 8004558:	d002      	beq.n	8004560 <ENS_Upkeep+0x108>
 800455a:	2b02      	cmp	r3, #2
 800455c:	d007      	beq.n	800456e <ENS_Upkeep+0x116>
 800455e:	e014      	b.n	800458a <ENS_Upkeep+0x132>
      case 1:
        Debug("ENS160 Warm-Up phase");
 8004560:	4a8f      	ldr	r2, [pc, #572]	@ (80047a0 <ENS_Upkeep+0x348>)
 8004562:	4b88      	ldr	r3, [pc, #544]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004564:	0019      	movs	r1, r3
 8004566:	2003      	movs	r0, #3
 8004568:	f00f fc0c 	bl	8013d84 <CreateLine>
        break;
 800456c:	e00d      	b.n	800458a <ENS_Upkeep+0x132>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800456e:	4a8d      	ldr	r2, [pc, #564]	@ (80047a4 <ENS_Upkeep+0x34c>)
 8004570:	4b84      	ldr	r3, [pc, #528]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004572:	0019      	movs	r1, r3
 8004574:	2003      	movs	r0, #3
 8004576:	f00f fc05 	bl	8013d84 <CreateLine>
        break;
 800457a:	e006      	b.n	800458a <ENS_Upkeep+0x132>
      case 3:
        Debug("ENS160 Invalid output");
 800457c:	4a8a      	ldr	r2, [pc, #552]	@ (80047a8 <ENS_Upkeep+0x350>)
 800457e:	4b81      	ldr	r3, [pc, #516]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004580:	0019      	movs	r1, r3
 8004582:	2003      	movs	r0, #3
 8004584:	f00f fbfe 	bl	8013d84 <CreateLine>
        break;
 8004588:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 800458a:	1d7b      	adds	r3, r7, #5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	4013      	ands	r3, r2
 8004592:	d108      	bne.n	80045a6 <ENS_Upkeep+0x14e>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004594:	f010 f96e 	bl	8014874 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	22fa      	movs	r2, #250	@ 0xfa
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	189a      	adds	r2, r3, r2
 80045a0:	4b74      	ldr	r3, [pc, #464]	@ (8004774 <ENS_Upkeep+0x31c>)
 80045a2:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 80045a4:	e164      	b.n	8004870 <ENS_Upkeep+0x418>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 80045a6:	4b74      	ldr	r3, [pc, #464]	@ (8004778 <ENS_Upkeep+0x320>)
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
    break;
 80045ac:	e160      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 80045ae:	f009 fc27 	bl	800de00 <getSensorLock>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d036      	beq.n	8004624 <ENS_Upkeep+0x1cc>
 80045b6:	f009 fc23 	bl	800de00 <getSensorLock>
 80045ba:	0003      	movs	r3, r0
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d031      	beq.n	8004624 <ENS_Upkeep+0x1cc>
      uint8_t locktype = getSensorLock();
 80045c0:	1dbc      	adds	r4, r7, #6
 80045c2:	f009 fc1d 	bl	800de00 <getSensorLock>
 80045c6:	0003      	movs	r3, r0
 80045c8:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <ENS_Upkeep+0x1ae>
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d013      	beq.n	8004602 <ENS_Upkeep+0x1aa>
 80045da:	1dbb      	adds	r3, r7, #6
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d00d      	beq.n	80045fe <ENS_Upkeep+0x1a6>
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d007      	beq.n	80045fa <ENS_Upkeep+0x1a2>
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d101      	bne.n	80045f6 <ENS_Upkeep+0x19e>
 80045f2:	4b6e      	ldr	r3, [pc, #440]	@ (80047ac <ENS_Upkeep+0x354>)
 80045f4:	e008      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045f6:	4b6e      	ldr	r3, [pc, #440]	@ (80047b0 <ENS_Upkeep+0x358>)
 80045f8:	e006      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fa:	4b6e      	ldr	r3, [pc, #440]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80045fc:	e004      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fe:	4b6e      	ldr	r3, [pc, #440]	@ (80047b8 <ENS_Upkeep+0x360>)
 8004600:	e002      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004602:	4b6e      	ldr	r3, [pc, #440]	@ (80047bc <ENS_Upkeep+0x364>)
 8004604:	e000      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004606:	4b6e      	ldr	r3, [pc, #440]	@ (80047c0 <ENS_Upkeep+0x368>)
 8004608:	4a6e      	ldr	r2, [pc, #440]	@ (80047c4 <ENS_Upkeep+0x36c>)
 800460a:	495e      	ldr	r1, [pc, #376]	@ (8004784 <ENS_Upkeep+0x32c>)
 800460c:	2003      	movs	r0, #3
 800460e:	f00f fbb9 	bl	8013d84 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 8004612:	f010 f92f 	bl	8014874 <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	334e      	adds	r3, #78	@ 0x4e
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	001a      	movs	r2, r3
 800461e:	4b55      	ldr	r3, [pc, #340]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004620:	601a      	str	r2, [r3, #0]
      break;
 8004622:	e125      	b.n	8004870 <ENS_Upkeep+0x418>
    }
    setSensorLock(ENS160);
 8004624:	2004      	movs	r0, #4
 8004626:	f009 fbd7 	bl	800ddd8 <setSensorLock>
    status = ENS160_readStatus();
 800462a:	1d7c      	adds	r4, r7, #5
 800462c:	f7ff fc9e 	bl	8003f6c <ENS160_readStatus>
 8004630:	0003      	movs	r3, r0
 8004632:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004634:	1d7b      	adds	r3, r7, #5
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d10e      	bne.n	800465c <ENS_Upkeep+0x204>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800463e:	f010 f919 	bl	8014874 <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	33f5      	adds	r3, #245	@ 0xf5
 8004646:	33ff      	adds	r3, #255	@ 0xff
 8004648:	001a      	movs	r2, r3
 800464a:	4b4a      	ldr	r3, [pc, #296]	@ (8004774 <ENS_Upkeep+0x31c>)
 800464c:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800464e:	200a      	movs	r0, #10
 8004650:	f010 f91a 	bl	8014888 <HAL_Delay>
      setSensorLock(FREE);
 8004654:	2000      	movs	r0, #0
 8004656:	f009 fbbf 	bl	800ddd8 <setSensorLock>
      break;
 800465a:	e109      	b.n	8004870 <ENS_Upkeep+0x418>
    }
    ENS160_measure(false);
 800465c:	2000      	movs	r0, #0
 800465e:	f7ff fca5 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 8004662:	200a      	movs	r0, #10
 8004664:	f010 f910 	bl	8014888 <HAL_Delay>
    ENS160_measureRaw(false);
 8004668:	2000      	movs	r0, #0
 800466a:	f7ff fd1b 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800466e:	200a      	movs	r0, #10
 8004670:	f010 f90a 	bl	8014888 <HAL_Delay>
    setSensorLock(FREE);
 8004674:	2000      	movs	r0, #0
 8004676:	f009 fbaf 	bl	800ddd8 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 800467a:	4b3f      	ldr	r3, [pc, #252]	@ (8004778 <ENS_Upkeep+0x320>)
 800467c:	2206      	movs	r2, #6
 800467e:	701a      	strb	r2, [r3, #0]
    break;
 8004680:	e0f6      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 8004682:	4b51      	ldr	r3, [pc, #324]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10f      	bne.n	80046aa <ENS_Upkeep+0x252>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800468a:	4b50      	ldr	r3, [pc, #320]	@ (80047cc <ENS_Upkeep+0x374>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	001c      	movs	r4, r3
 8004690:	4b4e      	ldr	r3, [pc, #312]	@ (80047cc <ENS_Upkeep+0x374>)
 8004692:	885b      	ldrh	r3, [r3, #2]
 8004694:	0018      	movs	r0, r3
 8004696:	4b4d      	ldr	r3, [pc, #308]	@ (80047cc <ENS_Upkeep+0x374>)
 8004698:	889b      	ldrh	r3, [r3, #4]
 800469a:	4a4d      	ldr	r2, [pc, #308]	@ (80047d0 <ENS_Upkeep+0x378>)
 800469c:	494d      	ldr	r1, [pc, #308]	@ (80047d4 <ENS_Upkeep+0x37c>)
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	9000      	str	r0, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	2002      	movs	r0, #2
 80046a6:	f00f fb6d 	bl	8013d84 <CreateLine>
//    Debug("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
//    Debug("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
//    Debug("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
//    Debug("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 80046aa:	4b47      	ldr	r3, [pc, #284]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d103      	bne.n	80046ba <ENS_Upkeep+0x262>
 80046b2:	4b45      	ldr	r3, [pc, #276]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e005      	b.n	80046c6 <ENS_Upkeep+0x26e>
 80046ba:	4b43      	ldr	r3, [pc, #268]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046c4:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 80046c6:	4b41      	ldr	r3, [pc, #260]	@ (80047cc <ENS_Upkeep+0x374>)
 80046c8:	7818      	ldrb	r0, [r3, #0]
 80046ca:	4b40      	ldr	r3, [pc, #256]	@ (80047cc <ENS_Upkeep+0x374>)
 80046cc:	8859      	ldrh	r1, [r3, #2]
 80046ce:	4b3f      	ldr	r3, [pc, #252]	@ (80047cc <ENS_Upkeep+0x374>)
 80046d0:	889b      	ldrh	r3, [r3, #4]
 80046d2:	001a      	movs	r2, r3
 80046d4:	f000 fa24 	bl	8004b20 <setENS160>
    ENSState = ENS_LOW_POWER;
 80046d8:	4b27      	ldr	r3, [pc, #156]	@ (8004778 <ENS_Upkeep+0x320>)
 80046da:	2201      	movs	r2, #1
 80046dc:	701a      	strb	r2, [r3, #0]
    break;
 80046de:	e0c7      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80046e0:	f010 f8c8 	bl	8014874 <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	22fa      	movs	r2, #250	@ 0xfa
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	189a      	adds	r2, r3, r2
 80046ec:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <ENS_Upkeep+0x31c>)
 80046ee:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 80046f0:	4b39      	ldr	r3, [pc, #228]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2201      	movs	r2, #1
 80046f6:	4053      	eors	r3, r2
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d035      	beq.n	800476a <ENS_Upkeep+0x312>
 80046fe:	4b37      	ldr	r3, [pc, #220]	@ (80047dc <ENS_Upkeep+0x384>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2201      	movs	r2, #1
 8004704:	4053      	eors	r3, r2
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d02e      	beq.n	800476a <ENS_Upkeep+0x312>
 800470c:	4b2e      	ldr	r3, [pc, #184]	@ (80047c8 <ENS_Upkeep+0x370>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d92a      	bls.n	800476a <ENS_Upkeep+0x312>
      if (getSensorLock() != FREE) {
 8004714:	f009 fb74 	bl	800de00 <getSensorLock>
 8004718:	1e03      	subs	r3, r0, #0
 800471a:	d000      	beq.n	800471e <ENS_Upkeep+0x2c6>
 800471c:	e0a3      	b.n	8004866 <ENS_Upkeep+0x40e>
        break;
      }
      setSensorLock(ENS160);
 800471e:	2004      	movs	r0, #4
 8004720:	f009 fb5a 	bl	800ddd8 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004724:	1cfc      	adds	r4, r7, #3
 8004726:	2000      	movs	r0, #0
 8004728:	f7ff fb70 	bl	8003e0c <ENS160_setMode>
 800472c:	0003      	movs	r3, r0
 800472e:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 8004730:	1cfb      	adds	r3, r7, #3
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <ENS_Upkeep+0x2e4>
 8004738:	4b16      	ldr	r3, [pc, #88]	@ (8004794 <ENS_Upkeep+0x33c>)
 800473a:	e000      	b.n	800473e <ENS_Upkeep+0x2e6>
 800473c:	4b16      	ldr	r3, [pc, #88]	@ (8004798 <ENS_Upkeep+0x340>)
 800473e:	4a22      	ldr	r2, [pc, #136]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	0010      	movs	r0, r2
 8004744:	4a26      	ldr	r2, [pc, #152]	@ (80047e0 <ENS_Upkeep+0x388>)
 8004746:	490f      	ldr	r1, [pc, #60]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	2003      	movs	r0, #3
 800474c:	f00f fb1a 	bl	8013d84 <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 8004750:	200a      	movs	r0, #10
 8004752:	f010 f899 	bl	8014888 <HAL_Delay>
      setSensorLock(FREE);
 8004756:	2000      	movs	r0, #0
 8004758:	f009 fb3e 	bl	800ddd8 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 800475c:	f010 f88a 	bl	8014874 <HAL_GetTick>
 8004760:	0003      	movs	r3, r0
 8004762:	4a20      	ldr	r2, [pc, #128]	@ (80047e4 <ENS_Upkeep+0x38c>)
 8004764:	189a      	adds	r2, r3, r2
 8004766:	4b03      	ldr	r3, [pc, #12]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004768:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 800476a:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <ENS_Upkeep+0x320>)
 800476c:	2208      	movs	r2, #8
 800476e:	701a      	strb	r2, [r3, #0]
    break;
 8004770:	e07e      	b.n	8004870 <ENS_Upkeep+0x418>
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	2000045c 	.word	0x2000045c
 8004778:	20000000 	.word	0x20000000
 800477c:	0802dc88 	.word	0x0802dc88
 8004780:	0802a6b4 	.word	0x0802a6b4
 8004784:	0802a5bc 	.word	0x0802a5bc
 8004788:	000be6e0 	.word	0x000be6e0
 800478c:	20000e43 	.word	0x20000e43
 8004790:	20000461 	.word	0x20000461
 8004794:	0802a6e8 	.word	0x0802a6e8
 8004798:	0802a6f0 	.word	0x0802a6f0
 800479c:	0802a6f8 	.word	0x0802a6f8
 80047a0:	0802a71c 	.word	0x0802a71c
 80047a4:	0802a734 	.word	0x0802a734
 80047a8:	0802a754 	.word	0x0802a754
 80047ac:	0802a76c 	.word	0x0802a76c
 80047b0:	0802a774 	.word	0x0802a774
 80047b4:	0802a77c 	.word	0x0802a77c
 80047b8:	0802a784 	.word	0x0802a784
 80047bc:	0802a78c 	.word	0x0802a78c
 80047c0:	0802a794 	.word	0x0802a794
 80047c4:	0802a79c 	.word	0x0802a79c
 80047c8:	20000460 	.word	0x20000460
 80047cc:	20000490 	.word	0x20000490
 80047d0:	0802a7c4 	.word	0x0802a7c4
 80047d4:	0802a62c 	.word	0x0802a62c
 80047d8:	2000214d 	.word	0x2000214d
 80047dc:	2000214e 	.word	0x2000214e
 80047e0:	0802a7f0 	.word	0x0802a7f0
 80047e4:	0000afc8 	.word	0x0000afc8

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 80047e8:	f009 fb0a 	bl	800de00 <getSensorLock>
 80047ec:	1e03      	subs	r3, r0, #0
 80047ee:	d13c      	bne.n	800486a <ENS_Upkeep+0x412>
        break;
      }
      setSensorLock(ENS160);
 80047f0:	2004      	movs	r0, #4
 80047f2:	f009 faf1 	bl	800ddd8 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 80047f6:	1cba      	adds	r2, r7, #2
 80047f8:	2301      	movs	r3, #1
 80047fa:	2101      	movs	r1, #1
 80047fc:	2010      	movs	r0, #16
 80047fe:	f7ff f96d 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004802:	1cbb      	adds	r3, r7, #2
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d111      	bne.n	800482e <ENS_Upkeep+0x3d6>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 800480a:	1dfc      	adds	r4, r7, #7
 800480c:	2002      	movs	r0, #2
 800480e:	f7ff fafd 	bl	8003e0c <ENS160_setMode>
 8004812:	0003      	movs	r3, r0
 8004814:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <ENS_Upkeep+0x3ca>
 800481e:	4b17      	ldr	r3, [pc, #92]	@ (800487c <ENS_Upkeep+0x424>)
 8004820:	e000      	b.n	8004824 <ENS_Upkeep+0x3cc>
 8004822:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <ENS_Upkeep+0x428>)
 8004824:	4a17      	ldr	r2, [pc, #92]	@ (8004884 <ENS_Upkeep+0x42c>)
 8004826:	4918      	ldr	r1, [pc, #96]	@ (8004888 <ENS_Upkeep+0x430>)
 8004828:	2003      	movs	r0, #3
 800482a:	f00f faab 	bl	8013d84 <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 800482e:	200a      	movs	r0, #10
 8004830:	f010 f82a 	bl	8014888 <HAL_Delay>
      setSensorLock(FREE);
 8004834:	2000      	movs	r0, #0
 8004836:	f009 facf 	bl	800ddd8 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 800483a:	4b14      	ldr	r3, [pc, #80]	@ (800488c <ENS_Upkeep+0x434>)
 800483c:	2203      	movs	r2, #3
 800483e:	701a      	strb	r2, [r3, #0]
    break;
 8004840:	e016      	b.n	8004870 <ENS_Upkeep+0x418>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004842:	4b12      	ldr	r3, [pc, #72]	@ (800488c <ENS_Upkeep+0x434>)
 8004844:	2202      	movs	r2, #2
 8004846:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 8004848:	f009 fada 	bl	800de00 <getSensorLock>
 800484c:	0003      	movs	r3, r0
 800484e:	2b04      	cmp	r3, #4
 8004850:	d00d      	beq.n	800486e <ENS_Upkeep+0x416>
      setSensorLock(FREE);
 8004852:	2000      	movs	r0, #0
 8004854:	f009 fac0 	bl	800ddd8 <setSensorLock>
    }
    break;
 8004858:	e009      	b.n	800486e <ENS_Upkeep+0x416>
    break;
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	e008      	b.n	8004870 <ENS_Upkeep+0x418>
      break;
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	e006      	b.n	8004870 <ENS_Upkeep+0x418>
      break;
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	e004      	b.n	8004870 <ENS_Upkeep+0x418>
        break;
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	e002      	b.n	8004870 <ENS_Upkeep+0x418>
        break;
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	e000      	b.n	8004870 <ENS_Upkeep+0x418>
    break;
 800486e:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <ENS_Upkeep+0x434>)
 8004872:	781b      	ldrb	r3, [r3, #0]
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b003      	add	sp, #12
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	0802a6e8 	.word	0x0802a6e8
 8004880:	0802a6f0 	.word	0x0802a6f0
 8004884:	0802a828 	.word	0x0802a828
 8004888:	0802a5bc 	.word	0x0802a5bc
 800488c:	20000000 	.word	0x20000000

08004890 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8004894:	4b02      	ldr	r3, [pc, #8]	@ (80048a0 <forceNTPupdate+0x10>)
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000698 	.word	0x20000698

080048a4 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80048ac:	f00f ffe2 	bl	8014874 <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	18d2      	adds	r2, r2, r3
 80048b6:	4b03      	ldr	r3, [pc, #12]	@ (80048c4 <setESPTimeStamp+0x20>)
 80048b8:	601a      	str	r2, [r3, #0]
}
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b002      	add	sp, #8
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	20000694 	.word	0x20000694

080048c8 <setCharges>:

void setCharges(){
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  solarCharge = ReadSolarVoltage() / 1000.0;
 80048cc:	f005 f950 	bl	8009b70 <ReadSolarVoltage>
 80048d0:	0003      	movs	r3, r0
 80048d2:	0018      	movs	r0, r3
 80048d4:	f7fe ff8c 	bl	80037f0 <__aeabi_i2d>
 80048d8:	2200      	movs	r2, #0
 80048da:	4b07      	ldr	r3, [pc, #28]	@ (80048f8 <setCharges+0x30>)
 80048dc:	f7fd fc00 	bl	80020e0 <__aeabi_ddiv>
 80048e0:	0002      	movs	r2, r0
 80048e2:	000b      	movs	r3, r1
 80048e4:	0010      	movs	r0, r2
 80048e6:	0019      	movs	r1, r3
 80048e8:	f7ff f81c 	bl	8003924 <__aeabi_d2f>
 80048ec:	1c02      	adds	r2, r0, #0
 80048ee:	4b03      	ldr	r3, [pc, #12]	@ (80048fc <setCharges+0x34>)
 80048f0:	601a      	str	r2, [r3, #0]
}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	408f4000 	.word	0x408f4000
 80048fc:	200005c0 	.word	0x200005c0

08004900 <getWifiCred>:

void getWifiCred(void){
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  ReadUint8ArrayEEprom(SSIDConfigAddr, (uint8_t*)Credentials.SSID, SSIDMaxLength);
 8004904:	4b14      	ldr	r3, [pc, #80]	@ (8004958 <getWifiCred+0x58>)
 8004906:	4815      	ldr	r0, [pc, #84]	@ (800495c <getWifiCred+0x5c>)
 8004908:	2220      	movs	r2, #32
 800490a:	0019      	movs	r1, r3
 800490c:	f007 fbf4 	bl	800c0f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(pwdConfigAddr, (uint8_t*)Credentials.Password, pwdMaxLength);
 8004910:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <getWifiCred+0x60>)
 8004912:	4814      	ldr	r0, [pc, #80]	@ (8004964 <getWifiCred+0x64>)
 8004914:	2240      	movs	r2, #64	@ 0x40
 8004916:	0019      	movs	r1, r3
 8004918:	f007 fbee 	bl	800c0f8 <ReadUint8ArrayEEprom>
  if ((Credentials.SSID[0] == 0) || (Credentials.Password[0] == 0)) {
 800491c:	4b0e      	ldr	r3, [pc, #56]	@ (8004958 <getWifiCred+0x58>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d004      	beq.n	800492e <getWifiCred+0x2e>
 8004924:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <getWifiCred+0x58>)
 8004926:	2220      	movs	r2, #32
 8004928:	5c9b      	ldrb	r3, [r3, r2]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <getWifiCred+0x3a>
    Error("Wifi credentials not found, reprogram or connect to PC and type Helpme");
 800492e:	4a0e      	ldr	r2, [pc, #56]	@ (8004968 <getWifiCred+0x68>)
 8004930:	4b0e      	ldr	r3, [pc, #56]	@ (800496c <getWifiCred+0x6c>)
 8004932:	0019      	movs	r1, r3
 8004934:	2001      	movs	r0, #1
 8004936:	f00f fa25 	bl	8013d84 <CreateLine>
  }
  Info("The SSID is: %s", Credentials.SSID);
 800493a:	4b07      	ldr	r3, [pc, #28]	@ (8004958 <getWifiCred+0x58>)
 800493c:	4a0c      	ldr	r2, [pc, #48]	@ (8004970 <getWifiCred+0x70>)
 800493e:	490d      	ldr	r1, [pc, #52]	@ (8004974 <getWifiCred+0x74>)
 8004940:	2002      	movs	r0, #2
 8004942:	f00f fa1f 	bl	8013d84 <CreateLine>
  Info("The Password is: %s", Credentials.Password);
 8004946:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <getWifiCred+0x60>)
 8004948:	4a0b      	ldr	r2, [pc, #44]	@ (8004978 <getWifiCred+0x78>)
 800494a:	490a      	ldr	r1, [pc, #40]	@ (8004974 <getWifiCred+0x74>)
 800494c:	2002      	movs	r0, #2
 800494e:	f00f fa19 	bl	8013d84 <CreateLine>
}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	200006a0 	.word	0x200006a0
 800495c:	08080200 	.word	0x08080200
 8004960:	200006c0 	.word	0x200006c0
 8004964:	08080220 	.word	0x08080220
 8004968:	0802a858 	.word	0x0802a858
 800496c:	0802a8a0 	.word	0x0802a8a0
 8004970:	0802a8a4 	.word	0x0802a8a4
 8004974:	0802a8b4 	.word	0x0802a8b4
 8004978:	0802a8b8 	.word	0x0802a8b8

0800497c <checkName>:
  }
  test = (configSum == 0);
  return test;
}

bool checkName(){
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004982:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <checkName+0x5c>)
 8004984:	4815      	ldr	r0, [pc, #84]	@ (80049dc <checkName+0x60>)
 8004986:	2220      	movs	r2, #32
 8004988:	0019      	movs	r1, r3
 800498a:	f007 fbb5 	bl	800c0f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800498e:	1dfb      	adds	r3, r7, #7
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	e00e      	b.n	80049b4 <checkName+0x38>
    configSum += nameConfig[i];
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	4a0f      	ldr	r2, [pc, #60]	@ (80049d8 <checkName+0x5c>)
 800499c:	5cd3      	ldrb	r3, [r2, r3]
 800499e:	001a      	movs	r2, r3
 80049a0:	4b0f      	ldr	r3, [pc, #60]	@ (80049e0 <checkName+0x64>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	18d2      	adds	r2, r2, r3
 80049a6:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <checkName+0x64>)
 80049a8:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80049aa:	1dfb      	adds	r3, r7, #7
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	1dfb      	adds	r3, r7, #7
 80049b0:	3201      	adds	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	1dfb      	adds	r3, r7, #7
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b0b      	cmp	r3, #11
 80049ba:	d9ec      	bls.n	8004996 <checkName+0x1a>
  }
  test = (configSum != 0);
 80049bc:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <checkName+0x64>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1e5a      	subs	r2, r3, #1
 80049c2:	4193      	sbcs	r3, r2
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	4b07      	ldr	r3, [pc, #28]	@ (80049e4 <checkName+0x68>)
 80049c8:	701a      	strb	r2, [r3, #0]
  return test;
 80049ca:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <checkName+0x68>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	20000768 	.word	0x20000768
 80049dc:	08080090 	.word	0x08080090
 80049e0:	20000788 	.word	0x20000788
 80049e4:	2000078c 	.word	0x2000078c

080049e8 <setModePowerMail>:

#ifdef USE_MAIL
void setModePowerMail() {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08c      	sub	sp, #48	@ 0x30
 80049ec:	af00      	add	r7, sp, #0
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 80049ee:	003b      	movs	r3, r7
 80049f0:	4814      	ldr	r0, [pc, #80]	@ (8004a44 <setModePowerMail+0x5c>)
 80049f2:	2230      	movs	r2, #48	@ 0x30
 80049f4:	0019      	movs	r1, r3
 80049f6:	f007 fb7f 	bl	800c0f8 <ReadUint8ArrayEEprom>
  if ( strlen((char*)MailAPIKeyConfig) == 0) {
 80049fa:	003b      	movs	r3, r7
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <setModePowerMail+0x28>
    Error("No mail API key defined");
 8004a02:	4a11      	ldr	r2, [pc, #68]	@ (8004a48 <setModePowerMail+0x60>)
 8004a04:	4b11      	ldr	r3, [pc, #68]	@ (8004a4c <setModePowerMail+0x64>)
 8004a06:	0019      	movs	r1, r3
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f00f f9bb 	bl	8013d84 <CreateLine>
 8004a0e:	e015      	b.n	8004a3c <setModePowerMail+0x54>
    return;
  }
//  Debug("Powermail is forced.");
  sendpwremail = DO_PWR_MAIL;
 8004a10:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <setModePowerMail+0x68>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
  Mode = AT_MODE_MAIL;
 8004a16:	4b0f      	ldr	r3, [pc, #60]	@ (8004a54 <setModePowerMail+0x6c>)
 8004a18:	2206      	movs	r2, #6
 8004a1a:	701a      	strb	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a58 <setModePowerMail+0x70>)
 8004a1e:	2202      	movs	r2, #2
 8004a20:	701a      	strb	r2, [r3, #0]
  savedESPTimeStamp = ESPTimeStamp;
 8004a22:	4b0e      	ldr	r3, [pc, #56]	@ (8004a5c <setModePowerMail+0x74>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b0e      	ldr	r3, [pc, #56]	@ (8004a60 <setModePowerMail+0x78>)
 8004a28:	601a      	str	r2, [r3, #0]
  ESPTimeStamp = 0;
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <setModePowerMail+0x74>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
  sendpwrmaildate = getDate();
 8004a30:	f005 f9a8 	bl	8009d84 <getDate>
 8004a34:	0003      	movs	r3, r0
 8004a36:	001a      	movs	r2, r3
 8004a38:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <setModePowerMail+0x7c>)
 8004a3a:	701a      	strb	r2, [r3, #0]
}
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b00c      	add	sp, #48	@ 0x30
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	080802c0 	.word	0x080802c0
 8004a48:	0802a8cc 	.word	0x0802a8cc
 8004a4c:	0802a8a0 	.word	0x0802a8a0
 8004a50:	200010f9 	.word	0x200010f9
 8004a54:	20000702 	.word	0x20000702
 8004a58:	20000030 	.word	0x20000030
 8004a5c:	20000694 	.word	0x20000694
 8004a60:	2000002c 	.word	0x2000002c
 8004a64:	20001110 	.word	0x20001110

08004a68 <pwrmailTodaySend>:

void pwrmailTodaySend() {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  if (sendpwrmaildate != getDate()) {
 8004a6c:	f005 f98a 	bl	8009d84 <getDate>
 8004a70:	0003      	movs	r3, r0
 8004a72:	001a      	movs	r2, r3
 8004a74:	4b04      	ldr	r3, [pc, #16]	@ (8004a88 <pwrmailTodaySend+0x20>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d002      	beq.n	8004a82 <pwrmailTodaySend+0x1a>
    sendpwremail = CLEAR;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	@ (8004a8c <pwrmailTodaySend+0x24>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
  }
}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20001110 	.word	0x20001110
 8004a8c:	200010f9 	.word	0x200010f9

08004a90 <setHIDS>:
#endif

void setHIDS(float temp, float humid){
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004a9a:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <setHIDS+0x20>)
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004aa0:	4b03      	ldr	r3, [pc, #12]	@ (8004ab0 <setHIDS+0x20>)
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b002      	add	sp, #8
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	20000704 	.word	0x20000704

08004ab4 <setVOC>:

void setVOC(uint16_t voc) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	0002      	movs	r2, r0
 8004abc:	1dbb      	adds	r3, r7, #6
 8004abe:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004ac0:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <setVOC+0x20>)
 8004ac2:	1dba      	adds	r2, r7, #6
 8004ac4:	2148      	movs	r1, #72	@ 0x48
 8004ac6:	8812      	ldrh	r2, [r2, #0]
 8004ac8:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004aca:	46c0      	nop			@ (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b002      	add	sp, #8
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	20000704 	.word	0x20000704

08004ad8 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004ae2:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <setAHT2x+0x20>)
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  MeasVal.AHT2x_temperature = airtemp;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	@ (8004af8 <setAHT2x+0x20>)
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	20000704 	.word	0x20000704

08004afc <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004b06:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <setBMP280+0x20>)
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	641a      	str	r2, [r3, #64]	@ 0x40
  MeasVal.BMP280_airpressure = airhpa;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	@ (8004b1c <setBMP280+0x20>)
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b002      	add	sp, #8
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	20000704 	.word	0x20000704

08004b20 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	0004      	movs	r4, r0
 8004b28:	0008      	movs	r0, r1
 8004b2a:	0011      	movs	r1, r2
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	1c22      	adds	r2, r4, #0
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	1d3b      	adds	r3, r7, #4
 8004b34:	1c02      	adds	r2, r0, #0
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	1cbb      	adds	r3, r7, #2
 8004b3a:	1c0a      	adds	r2, r1, #0
 8004b3c:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004b3e:	4b15      	ldr	r3, [pc, #84]	@ (8004b94 <setENS160+0x74>)
 8004b40:	1dfa      	adds	r2, r7, #7
 8004b42:	2154      	movs	r1, #84	@ 0x54
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004b48:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <setENS160+0x74>)
 8004b4a:	2255      	movs	r2, #85	@ 0x55
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	1dfa      	adds	r2, r7, #7
 8004b50:	7812      	ldrb	r2, [r2, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d904      	bls.n	8004b60 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004b56:	4b0f      	ldr	r3, [pc, #60]	@ (8004b94 <setENS160+0x74>)
 8004b58:	1dfa      	adds	r2, r7, #7
 8004b5a:	2155      	movs	r1, #85	@ 0x55
 8004b5c:	7812      	ldrb	r2, [r2, #0]
 8004b5e:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004b60:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <setENS160+0x74>)
 8004b62:	1d3a      	adds	r2, r7, #4
 8004b64:	214a      	movs	r1, #74	@ 0x4a
 8004b66:	8812      	ldrh	r2, [r2, #0]
 8004b68:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b94 <setENS160+0x74>)
 8004b6c:	1cba      	adds	r2, r7, #2
 8004b6e:	2150      	movs	r1, #80	@ 0x50
 8004b70:	8812      	ldrh	r2, [r2, #0]
 8004b72:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004b74:	4b07      	ldr	r3, [pc, #28]	@ (8004b94 <setENS160+0x74>)
 8004b76:	2252      	movs	r2, #82	@ 0x52
 8004b78:	5a9b      	ldrh	r3, [r3, r2]
 8004b7a:	1cba      	adds	r2, r7, #2
 8004b7c:	8812      	ldrh	r2, [r2, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d904      	bls.n	8004b8c <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004b82:	4b04      	ldr	r3, [pc, #16]	@ (8004b94 <setENS160+0x74>)
 8004b84:	1cba      	adds	r2, r7, #2
 8004b86:	2152      	movs	r1, #82	@ 0x52
 8004b88:	8812      	ldrh	r2, [r2, #0]
 8004b8a:	525a      	strh	r2, [r3, r1]
  }
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b003      	add	sp, #12
 8004b92:	bd90      	pop	{r4, r7, pc}
 8004b94:	20000704 	.word	0x20000704

08004b98 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004ba4:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <setMic+0x28>)
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	659a      	str	r2, [r3, #88]	@ 0x58
  MeasVal.dBApeak = dBmax;
 8004baa:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <setMic+0x28>)
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	65da      	str	r2, [r3, #92]	@ 0x5c
  MeasVal.dBAaverage = dBAavg;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <setMic+0x28>)
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b004      	add	sp, #16
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	20000704 	.word	0x20000704

08004bc4 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	0002      	movs	r2, r0
 8004bcc:	1dbb      	adds	r3, r7, #6
 8004bce:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004bd0:	1dbb      	adds	r3, r7, #6
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7fc fe27 	bl	8001828 <__aeabi_i2f>
 8004bda:	1c03      	adds	r3, r0, #0
 8004bdc:	490d      	ldr	r1, [pc, #52]	@ (8004c14 <setPM1p0+0x50>)
 8004bde:	1c18      	adds	r0, r3, #0
 8004be0:	f7fc f860 	bl	8000ca4 <__aeabi_fdiv>
 8004be4:	1c03      	adds	r3, r0, #0
 8004be6:	1c1a      	adds	r2, r3, #0
 8004be8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <setPM1p0+0x54>)
 8004bea:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004bec:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <setPM1p0+0x54>)
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <setPM1p0+0x54>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	1c19      	adds	r1, r3, #0
 8004bf6:	1c10      	adds	r0, r2, #0
 8004bf8:	f7fb fcae 	bl	8000558 <__aeabi_fcmpgt>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	d100      	bne.n	8004c02 <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004c00:	e003      	b.n	8004c0a <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004c02:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <setPM1p0+0x54>)
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	4b04      	ldr	r3, [pc, #16]	@ (8004c18 <setPM1p0+0x54>)
 8004c08:	60da      	str	r2, [r3, #12]
}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b002      	add	sp, #8
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	41200000 	.word	0x41200000
 8004c18:	20000704 	.word	0x20000704

08004c1c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	0002      	movs	r2, r0
 8004c24:	1dbb      	adds	r3, r7, #6
 8004c26:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004c28:	1dbb      	adds	r3, r7, #6
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fc fdfb 	bl	8001828 <__aeabi_i2f>
 8004c32:	1c03      	adds	r3, r0, #0
 8004c34:	490d      	ldr	r1, [pc, #52]	@ (8004c6c <setPM2p5+0x50>)
 8004c36:	1c18      	adds	r0, r3, #0
 8004c38:	f7fc f834 	bl	8000ca4 <__aeabi_fdiv>
 8004c3c:	1c03      	adds	r3, r0, #0
 8004c3e:	1c1a      	adds	r2, r3, #0
 8004c40:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <setPM2p5+0x54>)
 8004c42:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004c44:	4b0a      	ldr	r3, [pc, #40]	@ (8004c70 <setPM2p5+0x54>)
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	4b09      	ldr	r3, [pc, #36]	@ (8004c70 <setPM2p5+0x54>)
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	1c19      	adds	r1, r3, #0
 8004c4e:	1c10      	adds	r0, r2, #0
 8004c50:	f7fb fc82 	bl	8000558 <__aeabi_fcmpgt>
 8004c54:	1e03      	subs	r3, r0, #0
 8004c56:	d100      	bne.n	8004c5a <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004c58:	e003      	b.n	8004c62 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004c5a:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <setPM2p5+0x54>)
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	4b04      	ldr	r3, [pc, #16]	@ (8004c70 <setPM2p5+0x54>)
 8004c60:	615a      	str	r2, [r3, #20]
}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b002      	add	sp, #8
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	41200000 	.word	0x41200000
 8004c70:	20000704 	.word	0x20000704

08004c74 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	0002      	movs	r2, r0
 8004c7c:	1dbb      	adds	r3, r7, #6
 8004c7e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004c80:	1dbb      	adds	r3, r7, #6
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f7fc fdcf 	bl	8001828 <__aeabi_i2f>
 8004c8a:	1c03      	adds	r3, r0, #0
 8004c8c:	490d      	ldr	r1, [pc, #52]	@ (8004cc4 <setPM4p0+0x50>)
 8004c8e:	1c18      	adds	r0, r3, #0
 8004c90:	f7fc f808 	bl	8000ca4 <__aeabi_fdiv>
 8004c94:	1c03      	adds	r3, r0, #0
 8004c96:	1c1a      	adds	r2, r3, #0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <setPM4p0+0x54>)
 8004c9a:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <setPM4p0+0x54>)
 8004c9e:	699a      	ldr	r2, [r3, #24]
 8004ca0:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <setPM4p0+0x54>)
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	1c19      	adds	r1, r3, #0
 8004ca6:	1c10      	adds	r0, r2, #0
 8004ca8:	f7fb fc56 	bl	8000558 <__aeabi_fcmpgt>
 8004cac:	1e03      	subs	r3, r0, #0
 8004cae:	d100      	bne.n	8004cb2 <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004cb0:	e003      	b.n	8004cba <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004cb2:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <setPM4p0+0x54>)
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	4b04      	ldr	r3, [pc, #16]	@ (8004cc8 <setPM4p0+0x54>)
 8004cb8:	61da      	str	r2, [r3, #28]
}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b002      	add	sp, #8
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	41200000 	.word	0x41200000
 8004cc8:	20000704 	.word	0x20000704

08004ccc <setPM10>:

void setPM10(uint16_t PM10) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	0002      	movs	r2, r0
 8004cd4:	1dbb      	adds	r3, r7, #6
 8004cd6:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f7fc fda3 	bl	8001828 <__aeabi_i2f>
 8004ce2:	1c03      	adds	r3, r0, #0
 8004ce4:	490d      	ldr	r1, [pc, #52]	@ (8004d1c <setPM10+0x50>)
 8004ce6:	1c18      	adds	r0, r3, #0
 8004ce8:	f7fb ffdc 	bl	8000ca4 <__aeabi_fdiv>
 8004cec:	1c03      	adds	r3, r0, #0
 8004cee:	1c1a      	adds	r2, r3, #0
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <setPM10+0x54>)
 8004cf2:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <setPM10+0x54>)
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <setPM10+0x54>)
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	1c19      	adds	r1, r3, #0
 8004cfe:	1c10      	adds	r0, r2, #0
 8004d00:	f7fb fc2a 	bl	8000558 <__aeabi_fcmpgt>
 8004d04:	1e03      	subs	r3, r0, #0
 8004d06:	d100      	bne.n	8004d0a <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004d08:	e003      	b.n	8004d12 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004d0a:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <setPM10+0x54>)
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <setPM10+0x54>)
 8004d10:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d12:	46c0      	nop			@ (mov r8, r8)
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b002      	add	sp, #8
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			@ (mov r8, r8)
 8004d1c:	41200000 	.word	0x41200000
 8004d20:	20000704 	.word	0x20000704

08004d24 <setNOx>:

void setNOx(uint16_t nox) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	0002      	movs	r2, r0
 8004d2c:	1dbb      	adds	r3, r7, #6
 8004d2e:	801a      	strh	r2, [r3, #0]
  MeasVal.airNOx = nox;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <setNOx+0x38>)
 8004d32:	1dba      	adds	r2, r7, #6
 8004d34:	214c      	movs	r1, #76	@ 0x4c
 8004d36:	8812      	ldrh	r2, [r2, #0]
 8004d38:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004d3a:	4b08      	ldr	r3, [pc, #32]	@ (8004d5c <setNOx+0x38>)
 8004d3c:	224e      	movs	r2, #78	@ 0x4e
 8004d3e:	5a9b      	ldrh	r3, [r3, r2]
 8004d40:	1dba      	adds	r2, r7, #6
 8004d42:	8812      	ldrh	r2, [r2, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d904      	bls.n	8004d52 <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004d48:	4b04      	ldr	r3, [pc, #16]	@ (8004d5c <setNOx+0x38>)
 8004d4a:	1dba      	adds	r2, r7, #6
 8004d4c:	214e      	movs	r1, #78	@ 0x4e
 8004d4e:	8812      	ldrh	r2, [r2, #0]
 8004d50:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayNOx();
  }
#endif
}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b002      	add	sp, #8
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	20000704 	.word	0x20000704

08004d60 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004d6a:	490a      	ldr	r1, [pc, #40]	@ (8004d94 <SetSEN545temphum+0x34>)
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fb ff99 	bl	8000ca4 <__aeabi_fdiv>
 8004d72:	1c03      	adds	r3, r0, #0
 8004d74:	1c1a      	adds	r2, r3, #0
 8004d76:	4b08      	ldr	r3, [pc, #32]	@ (8004d98 <SetSEN545temphum+0x38>)
 8004d78:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004d7a:	4908      	ldr	r1, [pc, #32]	@ (8004d9c <SetSEN545temphum+0x3c>)
 8004d7c:	6838      	ldr	r0, [r7, #0]
 8004d7e:	f7fb ff91 	bl	8000ca4 <__aeabi_fdiv>
 8004d82:	1c03      	adds	r3, r0, #0
 8004d84:	1c1a      	adds	r2, r3, #0
 8004d86:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <SetSEN545temphum+0x38>)
 8004d88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b002      	add	sp, #8
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	43480000 	.word	0x43480000
 8004d98:	20000704 	.word	0x20000704
 8004d9c:	42c80000 	.word	0x42c80000

08004da0 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004da4:	f009 fbe6 	bl	800e574 <sen5x_Get_sen5x_enable_state>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d00f      	beq.n	8004dcc <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004dac:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004db2:	4b0c      	ldr	r3, [pc, #48]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004dbe:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004dc4:	4b07      	ldr	r3, [pc, #28]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dc6:	224e      	movs	r2, #78	@ 0x4e
 8004dc8:	2100      	movs	r1, #0
 8004dca:	5299      	strh	r1, [r3, r2]
  }
  MeasVal.eCO2Indexmax = 0;
 8004dcc:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dce:	2252      	movs	r2, #82	@ 0x52
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004dd4:	4b03      	ldr	r3, [pc, #12]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dd6:	2255      	movs	r2, #85	@ 0x55
 8004dd8:	2100      	movs	r1, #0
 8004dda:	5499      	strb	r1, [r3, r2]
}
 8004ddc:	46c0      	nop			@ (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	20000704 	.word	0x20000704

08004de8 <SetConfigMode>:

void SetConfigMode(){
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004dec:	4b0a      	ldr	r3, [pc, #40]	@ (8004e18 <SetConfigMode+0x30>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	4053      	eors	r3, r2
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004dfa:	4a08      	ldr	r2, [pc, #32]	@ (8004e1c <SetConfigMode+0x34>)
 8004dfc:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <SetConfigMode+0x38>)
 8004dfe:	0019      	movs	r1, r3
 8004e00:	2003      	movs	r0, #3
 8004e02:	f00e ffbf 	bl	8013d84 <CreateLine>
  }
  ReconfigSet = true;
 8004e06:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <SetConfigMode+0x30>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <SetConfigMode+0x3c>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	200005af 	.word	0x200005af
 8004e1c:	0802a8e4 	.word	0x0802a8e4
 8004e20:	0802a904 	.word	0x0802a904
 8004e24:	200010f7 	.word	0x200010f7

08004e28 <GetReconfigMode>:

bool GetReconfigMode() {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004e2c:	4b02      	ldr	r3, [pc, #8]	@ (8004e38 <GetReconfigMode+0x10>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	200005af 	.word	0x200005af

08004e3c <ESP_Init>:
  uid[1] = HAL_GetUIDw1();
  uid[2] = HAL_GetUIDw2();
}
#endif

void ESP_Init(UART_HandleTypeDef* espUart) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004e44:	4b04      	ldr	r3, [pc, #16]	@ (8004e58 <ESP_Init+0x1c>)
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004e4a:	4b04      	ldr	r3, [pc, #16]	@ (8004e5c <ESP_Init+0x20>)
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	701a      	strb	r2, [r3, #0]
#ifndef OPENSENSEMAP
  ESP_GetUID();
#endif
}
 8004e50:	46c0      	nop			@ (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b002      	add	sp, #8
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	200004a4 	.word	0x200004a4
 8004e5c:	20000030 	.word	0x20000030

08004e60 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004e60:	b5b0      	push	{r4, r5, r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	000a      	movs	r2, r1
 8004e6a:	1cbb      	adds	r3, r7, #2
 8004e6c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004e6e:	4b27      	ldr	r3, [pc, #156]	@ (8004f0c <ESP_Send+0xac>)
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	250f      	movs	r5, #15
 8004e74:	197c      	adds	r4, r7, r5
 8004e76:	1cbb      	adds	r3, r7, #2
 8004e78:	881a      	ldrh	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	f018 fba9 	bl	801d5d4 <HAL_UART_Transmit_DMA>
 8004e82:	0003      	movs	r3, r0
 8004e84:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004e86:	197b      	adds	r3, r7, r5
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004e8e:	4a20      	ldr	r2, [pc, #128]	@ (8004f10 <ESP_Send+0xb0>)
 8004e90:	4b20      	ldr	r3, [pc, #128]	@ (8004f14 <ESP_Send+0xb4>)
 8004e92:	0019      	movs	r1, r3
 8004e94:	2001      	movs	r0, #1
 8004e96:	f00e ff75 	bl	8013d84 <CreateLine>
    return false;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e032      	b.n	8004f04 <ESP_Send+0xa4>
  }
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004e9e:	1cbb      	adds	r3, r7, #2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	2b5a      	cmp	r3, #90	@ 0x5a
 8004ea4:	d927      	bls.n	8004ef6 <ESP_Send+0x96>
 8004ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f18 <ESP_Send+0xb8>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d023      	beq.n	8004ef6 <ESP_Send+0x96>
 8004eae:	f004 feb3 	bl	8009c18 <Check_USB_PowerOn>
 8004eb2:	1e03      	subs	r3, r0, #0
 8004eb4:	d01f      	beq.n	8004ef6 <ESP_Send+0x96>
    char splitchar;
    splitchar = command[SPLIT_POS];
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	334c      	adds	r3, #76	@ 0x4c
 8004eba:	001a      	movs	r2, r3
 8004ebc:	240e      	movs	r4, #14
 8004ebe:	193b      	adds	r3, r7, r4
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	701a      	strb	r2, [r3, #0]
    command[SPLIT_POS] = '\0';
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	334c      	adds	r3, #76	@ 0x4c
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
    printf_USB((char*)command);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f003 fde8 	bl	8008aa4 <printf_USB>
    command[SPLIT_POS] = splitchar;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	334c      	adds	r3, #76	@ 0x4c
 8004ed8:	193a      	adds	r2, r7, r4
 8004eda:	7812      	ldrb	r2, [r2, #0]
 8004edc:	701a      	strb	r2, [r3, #0]
    printf_USB((char*)&command[SPLIT_POS]);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	334c      	adds	r3, #76	@ 0x4c
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f003 fdde 	bl	8008aa4 <printf_USB>
    printf("ESP_Send: %s", command);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <ESP_Send+0xbc>)
 8004eec:	0011      	movs	r1, r2
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f021 f902 	bl	80260f8 <iprintf>
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004ef4:	e005      	b.n	8004f02 <ESP_Send+0xa2>
  }
  else
    Debug("ESP_Send: %s", command);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a08      	ldr	r2, [pc, #32]	@ (8004f1c <ESP_Send+0xbc>)
 8004efa:	4909      	ldr	r1, [pc, #36]	@ (8004f20 <ESP_Send+0xc0>)
 8004efc:	2003      	movs	r0, #3
 8004efe:	f00e ff41 	bl	8013d84 <CreateLine>
  return true;
 8004f02:	2301      	movs	r3, #1
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b004      	add	sp, #16
 8004f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0c:	200004a4 	.word	0x200004a4
 8004f10:	0802a908 	.word	0x0802a908
 8004f14:	0802a8a0 	.word	0x0802a8a0
 8004f18:	200010f7 	.word	0x200010f7
 8004f1c:	0802a928 	.word	0x0802a928
 8004f20:	0802a904 	.word	0x0802a904

08004f24 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f26:	b08b      	sub	sp, #44	@ 0x2c
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	000a      	movs	r2, r1
 8004f2e:	1cbb      	adds	r3, r7, #2
 8004f30:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004f32:	4b6c      	ldr	r3, [pc, #432]	@ (80050e4 <ESP_Receive+0x1c0>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004f38:	2627      	movs	r6, #39	@ 0x27
 8004f3a:	19bb      	adds	r3, r7, r6
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004f40:	4b69      	ldr	r3, [pc, #420]	@ (80050e8 <ESP_Receive+0x1c4>)
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	2525      	movs	r5, #37	@ 0x25
 8004f46:	197c      	adds	r4, r7, r5
 8004f48:	1cbb      	adds	r3, r7, #2
 8004f4a:	881a      	ldrh	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	0019      	movs	r1, r3
 8004f50:	f018 fbd0 	bl	801d6f4 <HAL_UART_Receive_DMA>
 8004f54:	0003      	movs	r3, r0
 8004f56:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f58:	197b      	adds	r3, r7, r5
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d100      	bne.n	8004f62 <ESP_Receive+0x3e>
 8004f60:	e0ba      	b.n	80050d8 <ESP_Receive+0x1b4>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004f62:	4b61      	ldr	r3, [pc, #388]	@ (80050e8 <ESP_Receive+0x1c4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2284      	movs	r2, #132	@ 0x84
 8004f68:	589b      	ldr	r3, [r3, r2]
 8004f6a:	4a60      	ldr	r2, [pc, #384]	@ (80050ec <ESP_Receive+0x1c8>)
 8004f6c:	4960      	ldr	r1, [pc, #384]	@ (80050f0 <ESP_Receive+0x1cc>)
 8004f6e:	2001      	movs	r0, #1
 8004f70:	f00e ff08 	bl	8013d84 <CreateLine>
#ifndef SMALLBUILD
    char uartespmod[] =" error in UART to ESP module";
 8004f74:	2308      	movs	r3, #8
 8004f76:	18fb      	adds	r3, r7, r3
 8004f78:	4a5e      	ldr	r2, [pc, #376]	@ (80050f4 <ESP_Receive+0x1d0>)
 8004f7a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f7c:	c313      	stmia	r3!, {r0, r1, r4}
 8004f7e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f80:	c313      	stmia	r3!, {r0, r1, r4}
 8004f82:	6811      	ldr	r1, [r2, #0]
 8004f84:	6019      	str	r1, [r3, #0]
 8004f86:	7912      	ldrb	r2, [r2, #4]
 8004f88:	711a      	strb	r2, [r3, #4]
    if (status & HAL_UART_ERROR_PE) {
 8004f8a:	197b      	adds	r3, r7, r5
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4013      	ands	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <ESP_Receive+0x84>
      Error("Parity%s", uartespmod);
 8004f94:	2308      	movs	r3, #8
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	4a57      	ldr	r2, [pc, #348]	@ (80050f8 <ESP_Receive+0x1d4>)
 8004f9a:	4955      	ldr	r1, [pc, #340]	@ (80050f0 <ESP_Receive+0x1cc>)
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	f00e fef1 	bl	8013d84 <CreateLine>
      reset = true;
 8004fa2:	19bb      	adds	r3, r7, r6
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8004fa8:	2325      	movs	r3, #37	@ 0x25
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d00a      	beq.n	8004fca <ESP_Receive+0xa6>
      Error("Noise%s", uartespmod);
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	4a50      	ldr	r2, [pc, #320]	@ (80050fc <ESP_Receive+0x1d8>)
 8004fba:	494d      	ldr	r1, [pc, #308]	@ (80050f0 <ESP_Receive+0x1cc>)
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	f00e fee1 	bl	8013d84 <CreateLine>
      reset = true;
 8004fc2:	2327      	movs	r3, #39	@ 0x27
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_FE) {
 8004fca:	2325      	movs	r3, #37	@ 0x25
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d006      	beq.n	8004fe4 <ESP_Receive+0xc0>
      Error("Frame%s", uartespmod);
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	4a49      	ldr	r2, [pc, #292]	@ (8005100 <ESP_Receive+0x1dc>)
 8004fdc:	4944      	ldr	r1, [pc, #272]	@ (80050f0 <ESP_Receive+0x1cc>)
 8004fde:	2001      	movs	r0, #1
 8004fe0:	f00e fed0 	bl	8013d84 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004fe4:	2325      	movs	r3, #37	@ 0x25
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2208      	movs	r2, #8
 8004fec:	4013      	ands	r3, r2
 8004fee:	d006      	beq.n	8004ffe <ESP_Receive+0xda>
      Error("Overrun%s", uartespmod);
 8004ff0:	2308      	movs	r3, #8
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	4a43      	ldr	r2, [pc, #268]	@ (8005104 <ESP_Receive+0x1e0>)
 8004ff6:	493e      	ldr	r1, [pc, #248]	@ (80050f0 <ESP_Receive+0x1cc>)
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	f00e fec3 	bl	8013d84 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004ffe:	2325      	movs	r3, #37	@ 0x25
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2210      	movs	r2, #16
 8005006:	4013      	ands	r3, r2
 8005008:	d006      	beq.n	8005018 <ESP_Receive+0xf4>
      Error("DMA transfer%s", uartespmod);
 800500a:	2308      	movs	r3, #8
 800500c:	18fb      	adds	r3, r7, r3
 800500e:	4a3e      	ldr	r2, [pc, #248]	@ (8005108 <ESP_Receive+0x1e4>)
 8005010:	4937      	ldr	r1, [pc, #220]	@ (80050f0 <ESP_Receive+0x1cc>)
 8005012:	2001      	movs	r0, #1
 8005014:	f00e feb6 	bl	8013d84 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8005018:	2325      	movs	r3, #37	@ 0x25
 800501a:	18fb      	adds	r3, r7, r3
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2220      	movs	r2, #32
 8005020:	4013      	ands	r3, r2
 8005022:	d006      	beq.n	8005032 <ESP_Receive+0x10e>
      Error("Receiver Timeout%s", uartespmod);
 8005024:	2308      	movs	r3, #8
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	4a38      	ldr	r2, [pc, #224]	@ (800510c <ESP_Receive+0x1e8>)
 800502a:	4931      	ldr	r1, [pc, #196]	@ (80050f0 <ESP_Receive+0x1cc>)
 800502c:	2001      	movs	r0, #1
 800502e:	f00e fea9 	bl	8013d84 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8005032:	2325      	movs	r3, #37	@ 0x25
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2240      	movs	r2, #64	@ 0x40
 800503a:	4013      	ands	r3, r2
 800503c:	d006      	beq.n	800504c <ESP_Receive+0x128>
      Error("Invalid Callback%s", uartespmod);
 800503e:	2308      	movs	r3, #8
 8005040:	18fb      	adds	r3, r7, r3
 8005042:	4a33      	ldr	r2, [pc, #204]	@ (8005110 <ESP_Receive+0x1ec>)
 8005044:	492a      	ldr	r1, [pc, #168]	@ (80050f0 <ESP_Receive+0x1cc>)
 8005046:	2001      	movs	r0, #1
 8005048:	f00e fe9c 	bl	8013d84 <CreateLine>
    }
#endif
    if (reset) {
 800504c:	2327      	movs	r3, #39	@ 0x27
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d03b      	beq.n	80050ce <ESP_Receive+0x1aa>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005056:	4b2f      	ldr	r3, [pc, #188]	@ (8005114 <ESP_Receive+0x1f0>)
 8005058:	2200      	movs	r2, #0
 800505a:	2101      	movs	r1, #1
 800505c:	0018      	movs	r0, r3
 800505e:	f010 fe7c 	bl	8015d5a <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8005062:	200a      	movs	r0, #10
 8005064:	f00f fc10 	bl	8014888 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005068:	2380      	movs	r3, #128	@ 0x80
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	482a      	ldr	r0, [pc, #168]	@ (8005118 <ESP_Receive+0x1f4>)
 800506e:	2200      	movs	r2, #0
 8005070:	0019      	movs	r1, r3
 8005072:	f010 fe72 	bl	8015d5a <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8005076:	200a      	movs	r0, #10
 8005078:	f00f fc06 	bl	8014888 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800507c:	4b25      	ldr	r3, [pc, #148]	@ (8005114 <ESP_Receive+0x1f0>)
 800507e:	2200      	movs	r2, #0
 8005080:	2102      	movs	r1, #2
 8005082:	0018      	movs	r0, r3
 8005084:	f010 fe69 	bl	8015d5a <HAL_GPIO_WritePin>
      // line below from: https://stackoverflow.com/questions/71287996/stm32-uart-in-dma-mode-stops-receiving-after-receiving-from-a-host-with-wrong-ba
      UART_Start_Receive_DMA(EspUart, EspUart->pRxBuffPtr, EspUart->RxXferSize);
 8005088:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <ESP_Receive+0x1c4>)
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	4b16      	ldr	r3, [pc, #88]	@ (80050e8 <ESP_Receive+0x1c4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005092:	4b15      	ldr	r3, [pc, #84]	@ (80050e8 <ESP_Receive+0x1c4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2258      	movs	r2, #88	@ 0x58
 8005098:	5a9b      	ldrh	r3, [r3, r2]
 800509a:	001a      	movs	r2, r3
 800509c:	f019 fc22 	bl	801e8e4 <UART_Start_Receive_DMA>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 80050a0:	2326      	movs	r3, #38	@ 0x26
 80050a2:	18fb      	adds	r3, r7, r3
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e00a      	b.n	80050c0 <ESP_Receive+0x19c>
        SetAllREDLED();
 80050aa:	f00d fcf7 	bl	8012a9c <SetAllREDLED>
        HAL_Delay(100);
 80050ae:	2064      	movs	r0, #100	@ 0x64
 80050b0:	f00f fbea 	bl	8014888 <HAL_Delay>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 80050b4:	2126      	movs	r1, #38	@ 0x26
 80050b6:	187b      	adds	r3, r7, r1
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	187b      	adds	r3, r7, r1
 80050bc:	3201      	adds	r2, #1
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	2326      	movs	r3, #38	@ 0x26
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b09      	cmp	r3, #9
 80050c8:	d9ef      	bls.n	80050aa <ESP_Receive+0x186>
      }
      HAL_NVIC_SystemReset();
 80050ca:	f010 f87e 	bl	80151ca <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 80050ce:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <ESP_Receive+0x1c0>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
    return false;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e000      	b.n	80050da <ESP_Receive+0x1b6>
#endif
  }
  return true;
 80050d8:	2301      	movs	r3, #1
}
 80050da:	0018      	movs	r0, r3
 80050dc:	46bd      	mov	sp, r7
 80050de:	b00b      	add	sp, #44	@ 0x2c
 80050e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e2:	46c0      	nop			@ (mov r8, r8)
 80050e4:	200004a8 	.word	0x200004a8
 80050e8:	200004a4 	.word	0x200004a4
 80050ec:	0802a938 	.word	0x0802a938
 80050f0:	0802a8a0 	.word	0x0802a8a0
 80050f4:	0802a9c8 	.word	0x0802a9c8
 80050f8:	0802a968 	.word	0x0802a968
 80050fc:	0802a974 	.word	0x0802a974
 8005100:	0802a97c 	.word	0x0802a97c
 8005104:	0802a984 	.word	0x0802a984
 8005108:	0802a990 	.word	0x0802a990
 800510c:	0802a9a0 	.word	0x0802a9a0
 8005110:	0802a9b4 	.word	0x0802a9b4
 8005114:	50001c00 	.word	0x50001c00
 8005118:	50000800 	.word	0x50000800

0800511c <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b093      	sub	sp, #76	@ 0x4c
 8005120:	af02      	add	r7, sp, #8
 8005122:	6078      	str	r0, [r7, #4]
  char espconnuart[] = "ESP connection UART ";
 8005124:	2328      	movs	r3, #40	@ 0x28
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	4a6b      	ldr	r2, [pc, #428]	@ (80052d8 <HAL_UART_ErrorCallback+0x1bc>)
 800512a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800512c:	c313      	stmia	r3!, {r0, r1, r4}
 800512e:	ca03      	ldmia	r2!, {r0, r1}
 8005130:	c303      	stmia	r3!, {r0, r1}
 8005132:	7812      	ldrb	r2, [r2, #0]
 8005134:	701a      	strb	r2, [r3, #0]
  char comcalb[] = " Complete";
 8005136:	231c      	movs	r3, #28
 8005138:	18fb      	adds	r3, r7, r3
 800513a:	4a68      	ldr	r2, [pc, #416]	@ (80052dc <HAL_UART_ErrorCallback+0x1c0>)
 800513c:	ca03      	ldmia	r2!, {r0, r1}
 800513e:	c303      	stmia	r3!, {r0, r1}
 8005140:	8812      	ldrh	r2, [r2, #0]
 8005142:	801a      	strh	r2, [r3, #0]
  char cid[] = " Callback ID";
 8005144:	230c      	movs	r3, #12
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	4a65      	ldr	r2, [pc, #404]	@ (80052e0 <HAL_UART_ErrorCallback+0x1c4>)
 800514a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800514c:	c313      	stmia	r3!, {r0, r1, r4}
 800514e:	7812      	ldrb	r2, [r2, #0]
 8005150:	701a      	strb	r2, [r3, #0]
  if (huart == EspUart) {
 8005152:	4b64      	ldr	r3, [pc, #400]	@ (80052e4 <HAL_UART_ErrorCallback+0x1c8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	d000      	beq.n	800515e <HAL_UART_ErrorCallback+0x42>
 800515c:	e0b9      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
    if (huart->ErrorCode == 4) {
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2284      	movs	r2, #132	@ 0x84
 8005162:	589b      	ldr	r3, [r3, r2]
 8005164:	2b04      	cmp	r3, #4
 8005166:	d100      	bne.n	800516a <HAL_UART_ErrorCallback+0x4e>
 8005168:	e0b2      	b.n	80052d0 <HAL_UART_ErrorCallback+0x1b4>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2284      	movs	r2, #132	@ 0x84
 800516e:	589b      	ldr	r3, [r3, r2]
 8005170:	4a5d      	ldr	r2, [pc, #372]	@ (80052e8 <HAL_UART_ErrorCallback+0x1cc>)
 8005172:	495e      	ldr	r1, [pc, #376]	@ (80052ec <HAL_UART_ErrorCallback+0x1d0>)
 8005174:	2003      	movs	r0, #3
 8005176:	f00e fe05 	bl	8013d84 <CreateLine>
    switch (huart->ErrorCode) {
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2284      	movs	r2, #132	@ 0x84
 800517e:	589b      	ldr	r3, [r3, r2]
 8005180:	2b0c      	cmp	r3, #12
 8005182:	d900      	bls.n	8005186 <HAL_UART_ErrorCallback+0x6a>
 8005184:	e09d      	b.n	80052c2 <HAL_UART_ErrorCallback+0x1a6>
 8005186:	009a      	lsls	r2, r3, #2
 8005188:	4b59      	ldr	r3, [pc, #356]	@ (80052f0 <HAL_UART_ErrorCallback+0x1d4>)
 800518a:	18d3      	adds	r3, r2, r3
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("%sTx Half%s%s", espconnuart, comcalb, cid);
 8005190:	2328      	movs	r3, #40	@ 0x28
 8005192:	18f8      	adds	r0, r7, r3
 8005194:	4a57      	ldr	r2, [pc, #348]	@ (80052f4 <HAL_UART_ErrorCallback+0x1d8>)
 8005196:	4958      	ldr	r1, [pc, #352]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 8005198:	230c      	movs	r3, #12
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	231c      	movs	r3, #28
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	0003      	movs	r3, r0
 80051a6:	2001      	movs	r0, #1
 80051a8:	f00e fdec 	bl	8013d84 <CreateLine>
        break;
 80051ac:	e091      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("%sTx%s%s", espconnuart, comcalb, cid);
 80051ae:	2328      	movs	r3, #40	@ 0x28
 80051b0:	18f8      	adds	r0, r7, r3
 80051b2:	4a52      	ldr	r2, [pc, #328]	@ (80052fc <HAL_UART_ErrorCallback+0x1e0>)
 80051b4:	4950      	ldr	r1, [pc, #320]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 80051b6:	230c      	movs	r3, #12
 80051b8:	18fb      	adds	r3, r7, r3
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	231c      	movs	r3, #28
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	0003      	movs	r3, r0
 80051c4:	2001      	movs	r0, #1
 80051c6:	f00e fddd 	bl	8013d84 <CreateLine>
        break;
 80051ca:	e082      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("%sRx Half%s%s", espconnuart, comcalb, cid);
 80051cc:	2328      	movs	r3, #40	@ 0x28
 80051ce:	18f8      	adds	r0, r7, r3
 80051d0:	4a4b      	ldr	r2, [pc, #300]	@ (8005300 <HAL_UART_ErrorCallback+0x1e4>)
 80051d2:	4949      	ldr	r1, [pc, #292]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 80051d4:	230c      	movs	r3, #12
 80051d6:	18fb      	adds	r3, r7, r3
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	231c      	movs	r3, #28
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	0003      	movs	r3, r0
 80051e2:	2001      	movs	r0, #1
 80051e4:	f00e fdce 	bl	8013d84 <CreateLine>
        break;
 80051e8:	e073      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("%sRx%s%s", espconnuart, comcalb, cid);
 80051ea:	2328      	movs	r3, #40	@ 0x28
 80051ec:	18f8      	adds	r0, r7, r3
 80051ee:	4a45      	ldr	r2, [pc, #276]	@ (8005304 <HAL_UART_ErrorCallback+0x1e8>)
 80051f0:	4941      	ldr	r1, [pc, #260]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 80051f2:	230c      	movs	r3, #12
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	231c      	movs	r3, #28
 80051fa:	18fb      	adds	r3, r7, r3
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	0003      	movs	r3, r0
 8005200:	2001      	movs	r0, #1
 8005202:	f00e fdbf 	bl	8013d84 <CreateLine>
        break;
 8005206:	e064      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ERROR_CB_ID:
        Error("%sError%s", espconnuart, cid);
 8005208:	2328      	movs	r3, #40	@ 0x28
 800520a:	18f8      	adds	r0, r7, r3
 800520c:	4a3e      	ldr	r2, [pc, #248]	@ (8005308 <HAL_UART_ErrorCallback+0x1ec>)
 800520e:	493a      	ldr	r1, [pc, #232]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 8005210:	230c      	movs	r3, #12
 8005212:	18fb      	adds	r3, r7, r3
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	0003      	movs	r3, r0
 8005218:	2001      	movs	r0, #1
 800521a:	f00e fdb3 	bl	8013d84 <CreateLine>
        break;
 800521e:	e058      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("%sAbort%s%s", espconnuart, comcalb, cid);
 8005220:	2328      	movs	r3, #40	@ 0x28
 8005222:	18f8      	adds	r0, r7, r3
 8005224:	4a39      	ldr	r2, [pc, #228]	@ (800530c <HAL_UART_ErrorCallback+0x1f0>)
 8005226:	4934      	ldr	r1, [pc, #208]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 8005228:	230c      	movs	r3, #12
 800522a:	18fb      	adds	r3, r7, r3
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	231c      	movs	r3, #28
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	0003      	movs	r3, r0
 8005236:	2001      	movs	r0, #1
 8005238:	f00e fda4 	bl	8013d84 <CreateLine>
        break;
 800523c:	e049      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("%sAbort Transmit%s%s", espconnuart, comcalb, cid);
 800523e:	2328      	movs	r3, #40	@ 0x28
 8005240:	18f8      	adds	r0, r7, r3
 8005242:	4a33      	ldr	r2, [pc, #204]	@ (8005310 <HAL_UART_ErrorCallback+0x1f4>)
 8005244:	492c      	ldr	r1, [pc, #176]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 8005246:	230c      	movs	r3, #12
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	231c      	movs	r3, #28
 800524e:	18fb      	adds	r3, r7, r3
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	0003      	movs	r3, r0
 8005254:	2001      	movs	r0, #1
 8005256:	f00e fd95 	bl	8013d84 <CreateLine>
        break;
 800525a:	e03a      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("%sAbort Receive%s%s", espconnuart, comcalb, cid);
 800525c:	2328      	movs	r3, #40	@ 0x28
 800525e:	18f8      	adds	r0, r7, r3
 8005260:	4a2c      	ldr	r2, [pc, #176]	@ (8005314 <HAL_UART_ErrorCallback+0x1f8>)
 8005262:	4925      	ldr	r1, [pc, #148]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 8005264:	230c      	movs	r3, #12
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	231c      	movs	r3, #28
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	0003      	movs	r3, r0
 8005272:	2001      	movs	r0, #1
 8005274:	f00e fd86 	bl	8013d84 <CreateLine>
        break;
 8005278:	e02b      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_WAKEUP_CB_ID:
        Error("%sWakeup%s", espconnuart, cid);
 800527a:	2328      	movs	r3, #40	@ 0x28
 800527c:	18f8      	adds	r0, r7, r3
 800527e:	4a26      	ldr	r2, [pc, #152]	@ (8005318 <HAL_UART_ErrorCallback+0x1fc>)
 8005280:	491d      	ldr	r1, [pc, #116]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 8005282:	230c      	movs	r3, #12
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	0003      	movs	r3, r0
 800528a:	2001      	movs	r0, #1
 800528c:	f00e fd7a 	bl	8013d84 <CreateLine>
        break;
 8005290:	e01f      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_MSPINIT_CB_ID:
        Error("%sMspInit%s", espconnuart, cid);
 8005292:	2328      	movs	r3, #40	@ 0x28
 8005294:	18f8      	adds	r0, r7, r3
 8005296:	4a21      	ldr	r2, [pc, #132]	@ (800531c <HAL_UART_ErrorCallback+0x200>)
 8005298:	4917      	ldr	r1, [pc, #92]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 800529a:	230c      	movs	r3, #12
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	0003      	movs	r3, r0
 80052a2:	2001      	movs	r0, #1
 80052a4:	f00e fd6e 	bl	8013d84 <CreateLine>
        break;
 80052a8:	e013      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("%sMspDeInit%s", espconnuart, cid);
 80052aa:	2328      	movs	r3, #40	@ 0x28
 80052ac:	18f8      	adds	r0, r7, r3
 80052ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005320 <HAL_UART_ErrorCallback+0x204>)
 80052b0:	4911      	ldr	r1, [pc, #68]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 80052b2:	230c      	movs	r3, #12
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	0003      	movs	r3, r0
 80052ba:	2001      	movs	r0, #1
 80052bc:	f00e fd62 	bl	8013d84 <CreateLine>
        break;
 80052c0:	e007      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      default:
        Error("%sUnknown error");
 80052c2:	4a18      	ldr	r2, [pc, #96]	@ (8005324 <HAL_UART_ErrorCallback+0x208>)
 80052c4:	4b0c      	ldr	r3, [pc, #48]	@ (80052f8 <HAL_UART_ErrorCallback+0x1dc>)
 80052c6:	0019      	movs	r1, r3
 80052c8:	2001      	movs	r0, #1
 80052ca:	f00e fd5b 	bl	8013d84 <CreateLine>
 80052ce:	e000      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1b6>
      return;
 80052d0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b011      	add	sp, #68	@ 0x44
 80052d6:	bd90      	pop	{r4, r7, pc}
 80052d8:	0802aacc 	.word	0x0802aacc
 80052dc:	0802aae4 	.word	0x0802aae4
 80052e0:	0802aaf0 	.word	0x0802aaf0
 80052e4:	200004a4 	.word	0x200004a4
 80052e8:	0802a9e8 	.word	0x0802a9e8
 80052ec:	0802a904 	.word	0x0802a904
 80052f0:	0802dcdc 	.word	0x0802dcdc
 80052f4:	0802aa18 	.word	0x0802aa18
 80052f8:	0802a8a0 	.word	0x0802a8a0
 80052fc:	0802aa28 	.word	0x0802aa28
 8005300:	0802aa34 	.word	0x0802aa34
 8005304:	0802aa44 	.word	0x0802aa44
 8005308:	0802aa50 	.word	0x0802aa50
 800530c:	0802aa5c 	.word	0x0802aa5c
 8005310:	0802aa68 	.word	0x0802aa68
 8005314:	0802aa80 	.word	0x0802aa80
 8005318:	0802aa94 	.word	0x0802aa94
 800531c:	0802aaa0 	.word	0x0802aaa0
 8005320:	0802aaac 	.word	0x0802aaac
 8005324:	0802aabc 	.word	0x0802aabc

08005328 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b42      	cmp	r3, #66	@ 0x42
 800533a:	d905      	bls.n	8005348 <isKeyValid+0x20>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2bff      	cmp	r3, #255	@ 0xff
 8005342:	d001      	beq.n	8005348 <isKeyValid+0x20>
    return true;
 8005344:	2301      	movs	r3, #1
 8005346:	e03e      	b.n	80053c6 <isKeyValid+0x9e>
  else {
    Error("Error sensor %s has no stored key for %s: ", sensormodel, sensortype);
 8005348:	68b8      	ldr	r0, [r7, #8]
 800534a:	4a21      	ldr	r2, [pc, #132]	@ (80053d0 <isKeyValid+0xa8>)
 800534c:	4921      	ldr	r1, [pc, #132]	@ (80053d4 <isKeyValid+0xac>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	0003      	movs	r3, r0
 8005354:	2001      	movs	r0, #1
 8005356:	f00e fd15 	bl	8013d84 <CreateLine>
    for (int i = 0; i < 12; i++) {
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e01e      	b.n	800539e <isKeyValid+0x76>
      if (usblog && Check_USB_PowerOn()) {
 8005360:	4b1d      	ldr	r3, [pc, #116]	@ (80053d8 <isKeyValid+0xb0>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00d      	beq.n	8005384 <isKeyValid+0x5c>
 8005368:	f004 fc56 	bl	8009c18 <Check_USB_PowerOn>
 800536c:	1e03      	subs	r3, r0, #0
 800536e:	d009      	beq.n	8005384 <isKeyValid+0x5c>
        printf_USB("%02x", data[i]);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	18d3      	adds	r3, r2, r3
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	001a      	movs	r2, r3
 800537a:	4b18      	ldr	r3, [pc, #96]	@ (80053dc <isKeyValid+0xb4>)
 800537c:	0011      	movs	r1, r2
 800537e:	0018      	movs	r0, r3
 8005380:	f003 fb90 	bl	8008aa4 <printf_USB>
      }
      printf("%02x", data[i]);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	18d3      	adds	r3, r2, r3
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	001a      	movs	r2, r3
 800538e:	4b13      	ldr	r3, [pc, #76]	@ (80053dc <isKeyValid+0xb4>)
 8005390:	0011      	movs	r1, r2
 8005392:	0018      	movs	r0, r3
 8005394:	f020 feb0 	bl	80260f8 <iprintf>
    for (int i = 0; i < 12; i++) {
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	3301      	adds	r3, #1
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b0b      	cmp	r3, #11
 80053a2:	dddd      	ble.n	8005360 <isKeyValid+0x38>
    }
    if (usblog && Check_USB_PowerOn()) {
 80053a4:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <isKeyValid+0xb0>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <isKeyValid+0x94>
 80053ac:	f004 fc34 	bl	8009c18 <Check_USB_PowerOn>
 80053b0:	1e03      	subs	r3, r0, #0
 80053b2:	d003      	beq.n	80053bc <isKeyValid+0x94>
      printf_USB("\r\n");
 80053b4:	4b0a      	ldr	r3, [pc, #40]	@ (80053e0 <isKeyValid+0xb8>)
 80053b6:	0018      	movs	r0, r3
 80053b8:	f003 fb74 	bl	8008aa4 <printf_USB>
    }
    printf("\r\n");
 80053bc:	4b09      	ldr	r3, [pc, #36]	@ (80053e4 <isKeyValid+0xbc>)
 80053be:	0018      	movs	r0, r3
 80053c0:	f020 ff00 	bl	80261c4 <puts>
    return false;
 80053c4:	2300      	movs	r3, #0
  }
}
 80053c6:	0018      	movs	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b006      	add	sp, #24
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	46c0      	nop			@ (mov r8, r8)
 80053d0:	0802ab00 	.word	0x0802ab00
 80053d4:	0802a8a0 	.word	0x0802a8a0
 80053d8:	200010f7 	.word	0x200010f7
 80053dc:	0802ab2c 	.word	0x0802ab2c
 80053e0:	0802ab34 	.word	0x0802ab34
 80053e4:	0802ab38 	.word	0x0802ab38

080053e8 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e010      	b.n	800541a <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	001a      	movs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	1898      	adds	r0, r3, r2
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	18d3      	adds	r3, r2, r3
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	001a      	movs	r2, r3
 800540c:	4b07      	ldr	r3, [pc, #28]	@ (800542c <uint8ArrayToString+0x44>)
 800540e:	0019      	movs	r1, r3
 8005410:	f020 fee2 	bl	80261d8 <siprintf>
  for (int i = 0; i < 12; i++) {
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3301      	adds	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b0b      	cmp	r3, #11
 800541e:	ddeb      	ble.n	80053f8 <uint8ArrayToString+0x10>
  }
}
 8005420:	46c0      	nop			@ (mov r8, r8)
 8005422:	46c0      	nop			@ (mov r8, r8)
 8005424:	46bd      	mov	sp, r7
 8005426:	b004      	add	sp, #16
 8005428:	bd80      	pop	{r7, pc}
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	0802ab2c 	.word	0x0802ab2c

08005430 <CreateMailMessage>:

#ifdef USE_MAIL
uint16_t CreateMailMessage(bool *txstat, bool send) {
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b087      	sub	sp, #28
 8005434:	af02      	add	r7, sp, #8
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	000a      	movs	r2, r1
 800543a:	1cfb      	adds	r3, r7, #3
 800543c:	701a      	strb	r2, [r3, #0]
  static bool status = false;
  static bool retstat = true;
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint8_t SendFromnameConfig[SendFromNameMaxLength];
  static uint8_t SendTonameConfig[SendToNameMaxLength];
  uint16_t lngth = 0;
 800543e:	240e      	movs	r4, #14
 8005440:	193b      	adds	r3, r7, r4
 8005442:	2200      	movs	r2, #0
 8005444:	801a      	strh	r2, [r3, #0]
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8005446:	4b41      	ldr	r3, [pc, #260]	@ (800554c <CreateMailMessage+0x11c>)
 8005448:	4841      	ldr	r0, [pc, #260]	@ (8005550 <CreateMailMessage+0x120>)
 800544a:	2220      	movs	r2, #32
 800544c:	0019      	movs	r1, r3
 800544e:	f006 fe53 	bl	800c0f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 8005452:	4b40      	ldr	r3, [pc, #256]	@ (8005554 <CreateMailMessage+0x124>)
 8005454:	4840      	ldr	r0, [pc, #256]	@ (8005558 <CreateMailMessage+0x128>)
 8005456:	2230      	movs	r2, #48	@ 0x30
 8005458:	0019      	movs	r1, r3
 800545a:	f006 fe4d 	bl	800c0f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 800545e:	4b3f      	ldr	r3, [pc, #252]	@ (800555c <CreateMailMessage+0x12c>)
 8005460:	483f      	ldr	r0, [pc, #252]	@ (8005560 <CreateMailMessage+0x130>)
 8005462:	2230      	movs	r2, #48	@ 0x30
 8005464:	0019      	movs	r1, r3
 8005466:	f006 fe47 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(message, "{\r\n\"sender\": \"%s\",\r\n\"to\": [\r\n\"%s\"\r\n],\r\n\"subject\": \"Battery status\",\r\n", (char*)SendFromnameConfig, (char*)SendTonameConfig);
 800546a:	4b3c      	ldr	r3, [pc, #240]	@ (800555c <CreateMailMessage+0x12c>)
 800546c:	4a39      	ldr	r2, [pc, #228]	@ (8005554 <CreateMailMessage+0x124>)
 800546e:	493d      	ldr	r1, [pc, #244]	@ (8005564 <CreateMailMessage+0x134>)
 8005470:	483d      	ldr	r0, [pc, #244]	@ (8005568 <CreateMailMessage+0x138>)
 8005472:	f020 feb1 	bl	80261d8 <siprintf>
  lngth = strlen(message);
 8005476:	4b3c      	ldr	r3, [pc, #240]	@ (8005568 <CreateMailMessage+0x138>)
 8005478:	0018      	movs	r0, r3
 800547a:	f7fa fe77 	bl	800016c <strlen>
 800547e:	0002      	movs	r2, r0
 8005480:	193b      	adds	r3, r7, r4
 8005482:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005484:	1cfb      	adds	r3, r7, #3
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d019      	beq.n	80054c0 <CreateMailMessage+0x90>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800548c:	4b36      	ldr	r3, [pc, #216]	@ (8005568 <CreateMailMessage+0x138>)
 800548e:	0018      	movs	r0, r3
 8005490:	f7fa fe6c 	bl	800016c <strlen>
 8005494:	0003      	movs	r3, r0
 8005496:	b29a      	uxth	r2, r3
 8005498:	4b33      	ldr	r3, [pc, #204]	@ (8005568 <CreateMailMessage+0x138>)
 800549a:	0011      	movs	r1, r2
 800549c:	0018      	movs	r0, r3
 800549e:	f7ff fcdf 	bl	8004e60 <ESP_Send>
 80054a2:	0003      	movs	r3, r0
 80054a4:	001a      	movs	r2, r3
 80054a6:	4b31      	ldr	r3, [pc, #196]	@ (800556c <CreateMailMessage+0x13c>)
 80054a8:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80054aa:	4b31      	ldr	r3, [pc, #196]	@ (8005570 <CreateMailMessage+0x140>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	001a      	movs	r2, r3
 80054b0:	4b2e      	ldr	r3, [pc, #184]	@ (800556c <CreateMailMessage+0x13c>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	4013      	ands	r3, r2
 80054b6:	1e5a      	subs	r2, r3, #1
 80054b8:	4193      	sbcs	r3, r2
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005570 <CreateMailMessage+0x140>)
 80054be:	701a      	strb	r2, [r3, #0]
  }
  sprintf(message, "\"text_body\": \"Battery of device %s is nearly empty. Actual voltage is %.2fV\"\r\n}\r\n", (char*)nameConfig, ReadBatteryVoltage());
 80054c0:	f004 faf4 	bl	8009aac <ReadBatteryVoltage>
 80054c4:	1c03      	adds	r3, r0, #0
 80054c6:	1c18      	adds	r0, r3, #0
 80054c8:	f7fe f9e4 	bl	8003894 <__aeabi_f2d>
 80054cc:	0002      	movs	r2, r0
 80054ce:	000b      	movs	r3, r1
 80054d0:	4c1e      	ldr	r4, [pc, #120]	@ (800554c <CreateMailMessage+0x11c>)
 80054d2:	4928      	ldr	r1, [pc, #160]	@ (8005574 <CreateMailMessage+0x144>)
 80054d4:	4824      	ldr	r0, [pc, #144]	@ (8005568 <CreateMailMessage+0x138>)
 80054d6:	9200      	str	r2, [sp, #0]
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	0022      	movs	r2, r4
 80054dc:	f020 fe7c 	bl	80261d8 <siprintf>
  lngth += strlen(message);
 80054e0:	4b21      	ldr	r3, [pc, #132]	@ (8005568 <CreateMailMessage+0x138>)
 80054e2:	0018      	movs	r0, r3
 80054e4:	f7fa fe42 	bl	800016c <strlen>
 80054e8:	0003      	movs	r3, r0
 80054ea:	b299      	uxth	r1, r3
 80054ec:	220e      	movs	r2, #14
 80054ee:	18bb      	adds	r3, r7, r2
 80054f0:	18ba      	adds	r2, r7, r2
 80054f2:	8812      	ldrh	r2, [r2, #0]
 80054f4:	188a      	adds	r2, r1, r2
 80054f6:	801a      	strh	r2, [r3, #0]
  if (send) {
 80054f8:	1cfb      	adds	r3, r7, #3
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d019      	beq.n	8005534 <CreateMailMessage+0x104>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005500:	4b19      	ldr	r3, [pc, #100]	@ (8005568 <CreateMailMessage+0x138>)
 8005502:	0018      	movs	r0, r3
 8005504:	f7fa fe32 	bl	800016c <strlen>
 8005508:	0003      	movs	r3, r0
 800550a:	b29a      	uxth	r2, r3
 800550c:	4b16      	ldr	r3, [pc, #88]	@ (8005568 <CreateMailMessage+0x138>)
 800550e:	0011      	movs	r1, r2
 8005510:	0018      	movs	r0, r3
 8005512:	f7ff fca5 	bl	8004e60 <ESP_Send>
 8005516:	0003      	movs	r3, r0
 8005518:	001a      	movs	r2, r3
 800551a:	4b14      	ldr	r3, [pc, #80]	@ (800556c <CreateMailMessage+0x13c>)
 800551c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800551e:	4b14      	ldr	r3, [pc, #80]	@ (8005570 <CreateMailMessage+0x140>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	001a      	movs	r2, r3
 8005524:	4b11      	ldr	r3, [pc, #68]	@ (800556c <CreateMailMessage+0x13c>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	4013      	ands	r3, r2
 800552a:	1e5a      	subs	r2, r3, #1
 800552c:	4193      	sbcs	r3, r2
 800552e:	b2da      	uxtb	r2, r3
 8005530:	4b0f      	ldr	r3, [pc, #60]	@ (8005570 <CreateMailMessage+0x140>)
 8005532:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8005534:	4b0e      	ldr	r3, [pc, #56]	@ (8005570 <CreateMailMessage+0x140>)
 8005536:	781a      	ldrb	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	701a      	strb	r2, [r3, #0]
  return lngth;
 800553c:	230e      	movs	r3, #14
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	881b      	ldrh	r3, [r3, #0]
}
 8005542:	0018      	movs	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	b005      	add	sp, #20
 8005548:	bd90      	pop	{r4, r7, pc}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	20000790 	.word	0x20000790
 8005550:	08080090 	.word	0x08080090
 8005554:	200007b0 	.word	0x200007b0
 8005558:	08080260 	.word	0x08080260
 800555c:	200007e0 	.word	0x200007e0
 8005560:	08080290 	.word	0x08080290
 8005564:	0802ab3c 	.word	0x0802ab3c
 8005568:	200005c4 	.word	0x200005c4
 800556c:	20000810 	.word	0x20000810
 8005570:	20000031 	.word	0x20000031
 8005574:	0802ab84 	.word	0x0802ab84

08005578 <CreateMessage>:
#endif

uint16_t CreateMessage(bool *txstat, bool send) {
 8005578:	b5b0      	push	{r4, r5, r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af02      	add	r7, sp, #8
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	000a      	movs	r2, r1
 8005582:	1cfb      	adds	r3, r7, #3
 8005584:	701a      	strb	r2, [r3, #0]
  static char uptimeBuf[14];
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 8005586:	f7ff f9f9 	bl	800497c <checkName>
 800558a:	1e03      	subs	r3, r0, #0
 800558c:	d00a      	beq.n	80055a4 <CreateMessage+0x2c>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800558e:	4b03      	ldr	r3, [pc, #12]	@ (800559c <CreateMessage+0x24>)
 8005590:	4803      	ldr	r0, [pc, #12]	@ (80055a0 <CreateMessage+0x28>)
 8005592:	2220      	movs	r2, #32
 8005594:	0019      	movs	r1, r3
 8005596:	f006 fdaf 	bl	800c0f8 <ReadUint8ArrayEEprom>
 800559a:	e009      	b.n	80055b0 <CreateMessage+0x38>
 800559c:	20000814 	.word	0x20000814
 80055a0:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 80055a4:	4beb      	ldr	r3, [pc, #940]	@ (8005954 <CreateMessage+0x3dc>)
 80055a6:	4aec      	ldr	r2, [pc, #944]	@ (8005958 <CreateMessage+0x3e0>)
 80055a8:	6811      	ldr	r1, [r2, #0]
 80055aa:	6019      	str	r1, [r3, #0]
 80055ac:	7912      	ldrb	r2, [r2, #4]
 80055ae:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 80055b0:	f7ff f98a 	bl	80048c8 <setCharges>
  uint16_t index = 0;
 80055b4:	250e      	movs	r5, #14
 80055b6:	197b      	adds	r3, r7, r5
 80055b8:	2200      	movs	r2, #0
 80055ba:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 80055bc:	197b      	adds	r3, r7, r5
 80055be:	881a      	ldrh	r2, [r3, #0]
 80055c0:	4be6      	ldr	r3, [pc, #920]	@ (800595c <CreateMessage+0x3e4>)
 80055c2:	18d3      	adds	r3, r2, r3
 80055c4:	4ae6      	ldr	r2, [pc, #920]	@ (8005960 <CreateMessage+0x3e8>)
 80055c6:	0011      	movs	r1, r2
 80055c8:	0018      	movs	r0, r3
 80055ca:	f020 fe05 	bl	80261d8 <siprintf>
#ifdef LONGDATAGRAM
  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 80055ce:	4be5      	ldr	r3, [pc, #916]	@ (8005964 <CreateMessage+0x3ec>)
 80055d0:	48e5      	ldr	r0, [pc, #916]	@ (8005968 <CreateMessage+0x3f0>)
 80055d2:	220c      	movs	r2, #12
 80055d4:	0019      	movs	r1, r3
 80055d6:	f006 fd8f 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80055da:	4ae2      	ldr	r2, [pc, #904]	@ (8005964 <CreateMessage+0x3ec>)
 80055dc:	4be3      	ldr	r3, [pc, #908]	@ (800596c <CreateMessage+0x3f4>)
 80055de:	0011      	movs	r1, r2
 80055e0:	0018      	movs	r0, r3
 80055e2:	f7ff ff01 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
 80055e6:	4be2      	ldr	r3, [pc, #904]	@ (8005970 <CreateMessage+0x3f8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	1c18      	adds	r0, r3, #0
 80055ec:	f7fe f952 	bl	8003894 <__aeabi_f2d>
 80055f0:	0002      	movs	r2, r0
 80055f2:	000b      	movs	r3, r1
 80055f4:	4cdd      	ldr	r4, [pc, #884]	@ (800596c <CreateMessage+0x3f4>)
 80055f6:	49df      	ldr	r1, [pc, #892]	@ (8005974 <CreateMessage+0x3fc>)
 80055f8:	48df      	ldr	r0, [pc, #892]	@ (8005978 <CreateMessage+0x400>)
 80055fa:	9200      	str	r2, [sp, #0]
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	0022      	movs	r2, r4
 8005600:	f020 fdea 	bl	80261d8 <siprintf>
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
#endif
index = strlen(message);
 8005604:	4bd5      	ldr	r3, [pc, #852]	@ (800595c <CreateMessage+0x3e4>)
 8005606:	0018      	movs	r0, r3
 8005608:	f7fa fdb0 	bl	800016c <strlen>
 800560c:	0002      	movs	r2, r0
 800560e:	197b      	adds	r3, r7, r5
 8005610:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005612:	1cfb      	adds	r3, r7, #3
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d019      	beq.n	800564e <CreateMessage+0xd6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800561a:	4bd0      	ldr	r3, [pc, #832]	@ (800595c <CreateMessage+0x3e4>)
 800561c:	0018      	movs	r0, r3
 800561e:	f7fa fda5 	bl	800016c <strlen>
 8005622:	0003      	movs	r3, r0
 8005624:	b29a      	uxth	r2, r3
 8005626:	4bcd      	ldr	r3, [pc, #820]	@ (800595c <CreateMessage+0x3e4>)
 8005628:	0011      	movs	r1, r2
 800562a:	0018      	movs	r0, r3
 800562c:	f7ff fc18 	bl	8004e60 <ESP_Send>
 8005630:	0003      	movs	r3, r0
 8005632:	001a      	movs	r2, r3
 8005634:	4bd1      	ldr	r3, [pc, #836]	@ (800597c <CreateMessage+0x404>)
 8005636:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005638:	4bd1      	ldr	r3, [pc, #836]	@ (8005980 <CreateMessage+0x408>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	001a      	movs	r2, r3
 800563e:	4bcf      	ldr	r3, [pc, #828]	@ (800597c <CreateMessage+0x404>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	4013      	ands	r3, r2
 8005644:	1e5a      	subs	r2, r3, #1
 8005646:	4193      	sbcs	r3, r2
 8005648:	b2da      	uxtb	r2, r3
 800564a:	4bcd      	ldr	r3, [pc, #820]	@ (8005980 <CreateMessage+0x408>)
 800564c:	701a      	strb	r2, [r3, #0]
  }
  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 800564e:	4bc5      	ldr	r3, [pc, #788]	@ (8005964 <CreateMessage+0x3ec>)
 8005650:	48cc      	ldr	r0, [pc, #816]	@ (8005984 <CreateMessage+0x40c>)
 8005652:	220c      	movs	r2, #12
 8005654:	0019      	movs	r1, r3
 8005656:	f006 fd4f 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800565a:	4ac2      	ldr	r2, [pc, #776]	@ (8005964 <CreateMessage+0x3ec>)
 800565c:	4bc3      	ldr	r3, [pc, #780]	@ (800596c <CreateMessage+0x3f4>)
 800565e:	0011      	movs	r1, r2
 8005660:	0018      	movs	r0, r3
 8005662:	f7ff fec1 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
 8005666:	4bc2      	ldr	r3, [pc, #776]	@ (8005970 <CreateMessage+0x3f8>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	1c18      	adds	r0, r3, #0
 800566c:	f7fe f912 	bl	8003894 <__aeabi_f2d>
 8005670:	0002      	movs	r2, r0
 8005672:	000b      	movs	r3, r1
 8005674:	4cbd      	ldr	r4, [pc, #756]	@ (800596c <CreateMessage+0x3f4>)
 8005676:	49c4      	ldr	r1, [pc, #784]	@ (8005988 <CreateMessage+0x410>)
 8005678:	48b8      	ldr	r0, [pc, #736]	@ (800595c <CreateMessage+0x3e4>)
 800567a:	9200      	str	r2, [sp, #0]
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	0022      	movs	r2, r4
 8005680:	f020 fdaa 	bl	80261d8 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
#endif
  index += strlen(message);
 8005684:	4bb5      	ldr	r3, [pc, #724]	@ (800595c <CreateMessage+0x3e4>)
 8005686:	0018      	movs	r0, r3
 8005688:	f7fa fd70 	bl	800016c <strlen>
 800568c:	0003      	movs	r3, r0
 800568e:	b299      	uxth	r1, r3
 8005690:	220e      	movs	r2, #14
 8005692:	18bb      	adds	r3, r7, r2
 8005694:	18ba      	adds	r2, r7, r2
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	188a      	adds	r2, r1, r2
 800569a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800569c:	1cfb      	adds	r3, r7, #3
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d019      	beq.n	80056d8 <CreateMessage+0x160>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80056a4:	4bad      	ldr	r3, [pc, #692]	@ (800595c <CreateMessage+0x3e4>)
 80056a6:	0018      	movs	r0, r3
 80056a8:	f7fa fd60 	bl	800016c <strlen>
 80056ac:	0003      	movs	r3, r0
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	4baa      	ldr	r3, [pc, #680]	@ (800595c <CreateMessage+0x3e4>)
 80056b2:	0011      	movs	r1, r2
 80056b4:	0018      	movs	r0, r3
 80056b6:	f7ff fbd3 	bl	8004e60 <ESP_Send>
 80056ba:	0003      	movs	r3, r0
 80056bc:	001a      	movs	r2, r3
 80056be:	4baf      	ldr	r3, [pc, #700]	@ (800597c <CreateMessage+0x404>)
 80056c0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80056c2:	4baf      	ldr	r3, [pc, #700]	@ (8005980 <CreateMessage+0x408>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	001a      	movs	r2, r3
 80056c8:	4bac      	ldr	r3, [pc, #688]	@ (800597c <CreateMessage+0x404>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	4013      	ands	r3, r2
 80056ce:	1e5a      	subs	r2, r3, #1
 80056d0:	4193      	sbcs	r3, r2
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	4baa      	ldr	r3, [pc, #680]	@ (8005980 <CreateMessage+0x408>)
 80056d6:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 80056d8:	4ba2      	ldr	r3, [pc, #648]	@ (8005964 <CreateMessage+0x3ec>)
 80056da:	48ac      	ldr	r0, [pc, #688]	@ (800598c <CreateMessage+0x414>)
 80056dc:	220c      	movs	r2, #12
 80056de:	0019      	movs	r1, r3
 80056e0:	f006 fd0a 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80056e4:	4a9f      	ldr	r2, [pc, #636]	@ (8005964 <CreateMessage+0x3ec>)
 80056e6:	4ba1      	ldr	r3, [pc, #644]	@ (800596c <CreateMessage+0x3f4>)
 80056e8:	0011      	movs	r1, r2
 80056ea:	0018      	movs	r0, r3
 80056ec:	f7ff fe7c 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
 80056f0:	4b9f      	ldr	r3, [pc, #636]	@ (8005970 <CreateMessage+0x3f8>)
 80056f2:	2248      	movs	r2, #72	@ 0x48
 80056f4:	5a9b      	ldrh	r3, [r3, r2]
 80056f6:	4a9d      	ldr	r2, [pc, #628]	@ (800596c <CreateMessage+0x3f4>)
 80056f8:	49a5      	ldr	r1, [pc, #660]	@ (8005990 <CreateMessage+0x418>)
 80056fa:	4898      	ldr	r0, [pc, #608]	@ (800595c <CreateMessage+0x3e4>)
 80056fc:	f020 fd6c 	bl	80261d8 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
#endif
  index += strlen(message);
 8005700:	4b96      	ldr	r3, [pc, #600]	@ (800595c <CreateMessage+0x3e4>)
 8005702:	0018      	movs	r0, r3
 8005704:	f7fa fd32 	bl	800016c <strlen>
 8005708:	0003      	movs	r3, r0
 800570a:	b299      	uxth	r1, r3
 800570c:	220e      	movs	r2, #14
 800570e:	18bb      	adds	r3, r7, r2
 8005710:	18ba      	adds	r2, r7, r2
 8005712:	8812      	ldrh	r2, [r2, #0]
 8005714:	188a      	adds	r2, r1, r2
 8005716:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005718:	1cfb      	adds	r3, r7, #3
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d019      	beq.n	8005754 <CreateMessage+0x1dc>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005720:	4b8e      	ldr	r3, [pc, #568]	@ (800595c <CreateMessage+0x3e4>)
 8005722:	0018      	movs	r0, r3
 8005724:	f7fa fd22 	bl	800016c <strlen>
 8005728:	0003      	movs	r3, r0
 800572a:	b29a      	uxth	r2, r3
 800572c:	4b8b      	ldr	r3, [pc, #556]	@ (800595c <CreateMessage+0x3e4>)
 800572e:	0011      	movs	r1, r2
 8005730:	0018      	movs	r0, r3
 8005732:	f7ff fb95 	bl	8004e60 <ESP_Send>
 8005736:	0003      	movs	r3, r0
 8005738:	001a      	movs	r2, r3
 800573a:	4b90      	ldr	r3, [pc, #576]	@ (800597c <CreateMessage+0x404>)
 800573c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800573e:	4b90      	ldr	r3, [pc, #576]	@ (8005980 <CreateMessage+0x408>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	001a      	movs	r2, r3
 8005744:	4b8d      	ldr	r3, [pc, #564]	@ (800597c <CreateMessage+0x404>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	4013      	ands	r3, r2
 800574a:	1e5a      	subs	r2, r3, #1
 800574c:	4193      	sbcs	r3, r2
 800574e:	b2da      	uxtb	r2, r3
 8005750:	4b8b      	ldr	r3, [pc, #556]	@ (8005980 <CreateMessage+0x408>)
 8005752:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, keybuffer, IdSize);
 8005754:	4b83      	ldr	r3, [pc, #524]	@ (8005964 <CreateMessage+0x3ec>)
 8005756:	488f      	ldr	r0, [pc, #572]	@ (8005994 <CreateMessage+0x41c>)
 8005758:	220c      	movs	r2, #12
 800575a:	0019      	movs	r1, r3
 800575c:	f006 fccc 	bl	800c0f8 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "ChargeStat", "true/false")) {
 8005760:	4a8d      	ldr	r2, [pc, #564]	@ (8005998 <CreateMessage+0x420>)
 8005762:	498e      	ldr	r1, [pc, #568]	@ (800599c <CreateMessage+0x424>)
 8005764:	4b7f      	ldr	r3, [pc, #508]	@ (8005964 <CreateMessage+0x3ec>)
 8005766:	0018      	movs	r0, r3
 8005768:	f7ff fdde 	bl	8005328 <isKeyValid>
 800576c:	1e03      	subs	r3, r0, #0
 800576e:	d036      	beq.n	80057de <CreateMessage+0x266>
    uint8ArrayToString(Buffer, keybuffer);
 8005770:	4a7c      	ldr	r2, [pc, #496]	@ (8005964 <CreateMessage+0x3ec>)
 8005772:	4b7e      	ldr	r3, [pc, #504]	@ (800596c <CreateMessage+0x3f4>)
 8005774:	0011      	movs	r1, r2
 8005776:	0018      	movs	r0, r3
 8005778:	f7ff fe36 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%d\"}", Buffer, batteryChargeMode);
 800577c:	4b88      	ldr	r3, [pc, #544]	@ (80059a0 <CreateMessage+0x428>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	4a7a      	ldr	r2, [pc, #488]	@ (800596c <CreateMessage+0x3f4>)
 8005782:	4988      	ldr	r1, [pc, #544]	@ (80059a4 <CreateMessage+0x42c>)
 8005784:	4875      	ldr	r0, [pc, #468]	@ (800595c <CreateMessage+0x3e4>)
 8005786:	f020 fd27 	bl	80261d8 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"charging\", \"sensor\": \"%s\", \"value\":\"%d\"}", Buffer, batteryChargeMode);
#endif
    index += strlen(message);
 800578a:	4b74      	ldr	r3, [pc, #464]	@ (800595c <CreateMessage+0x3e4>)
 800578c:	0018      	movs	r0, r3
 800578e:	f7fa fced 	bl	800016c <strlen>
 8005792:	0003      	movs	r3, r0
 8005794:	b299      	uxth	r1, r3
 8005796:	220e      	movs	r2, #14
 8005798:	18bb      	adds	r3, r7, r2
 800579a:	18ba      	adds	r2, r7, r2
 800579c:	8812      	ldrh	r2, [r2, #0]
 800579e:	188a      	adds	r2, r1, r2
 80057a0:	801a      	strh	r2, [r3, #0]
    if (send) {
 80057a2:	1cfb      	adds	r3, r7, #3
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d019      	beq.n	80057de <CreateMessage+0x266>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80057aa:	4b6c      	ldr	r3, [pc, #432]	@ (800595c <CreateMessage+0x3e4>)
 80057ac:	0018      	movs	r0, r3
 80057ae:	f7fa fcdd 	bl	800016c <strlen>
 80057b2:	0003      	movs	r3, r0
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	4b69      	ldr	r3, [pc, #420]	@ (800595c <CreateMessage+0x3e4>)
 80057b8:	0011      	movs	r1, r2
 80057ba:	0018      	movs	r0, r3
 80057bc:	f7ff fb50 	bl	8004e60 <ESP_Send>
 80057c0:	0003      	movs	r3, r0
 80057c2:	001a      	movs	r2, r3
 80057c4:	4b6d      	ldr	r3, [pc, #436]	@ (800597c <CreateMessage+0x404>)
 80057c6:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80057c8:	4b6d      	ldr	r3, [pc, #436]	@ (8005980 <CreateMessage+0x408>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	001a      	movs	r2, r3
 80057ce:	4b6b      	ldr	r3, [pc, #428]	@ (800597c <CreateMessage+0x404>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	4013      	ands	r3, r2
 80057d4:	1e5a      	subs	r2, r3, #1
 80057d6:	4193      	sbcs	r3, r2
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	4b69      	ldr	r3, [pc, #420]	@ (8005980 <CreateMessage+0x408>)
 80057dc:	701a      	strb	r2, [r3, #0]
    }
  }

  ReadUint8ArrayEEprom(UptimeConfigAddr, keybuffer, IdSize);
 80057de:	4b61      	ldr	r3, [pc, #388]	@ (8005964 <CreateMessage+0x3ec>)
 80057e0:	4871      	ldr	r0, [pc, #452]	@ (80059a8 <CreateMessage+0x430>)
 80057e2:	220c      	movs	r2, #12
 80057e4:	0019      	movs	r1, r3
 80057e6:	f006 fc87 	bl	800c0f8 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "Uptime", "dhhmm")) {
 80057ea:	4a70      	ldr	r2, [pc, #448]	@ (80059ac <CreateMessage+0x434>)
 80057ec:	4970      	ldr	r1, [pc, #448]	@ (80059b0 <CreateMessage+0x438>)
 80057ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005964 <CreateMessage+0x3ec>)
 80057f0:	0018      	movs	r0, r3
 80057f2:	f7ff fd99 	bl	8005328 <isKeyValid>
 80057f6:	1e03      	subs	r3, r0, #0
 80057f8:	d039      	beq.n	800586e <CreateMessage+0x2f6>
    uint8ArrayToString(Buffer, keybuffer);
 80057fa:	4a5a      	ldr	r2, [pc, #360]	@ (8005964 <CreateMessage+0x3ec>)
 80057fc:	4b5b      	ldr	r3, [pc, #364]	@ (800596c <CreateMessage+0x3f4>)
 80057fe:	0011      	movs	r1, r2
 8005800:	0018      	movs	r0, r3
 8005802:	f7ff fdf1 	bl	80053e8 <uint8ArrayToString>
    getUptime(uptimeBuf);
 8005806:	4b6b      	ldr	r3, [pc, #428]	@ (80059b4 <CreateMessage+0x43c>)
 8005808:	0018      	movs	r0, r3
 800580a:	f004 faa1 	bl	8009d50 <getUptime>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
 800580e:	4b69      	ldr	r3, [pc, #420]	@ (80059b4 <CreateMessage+0x43c>)
 8005810:	4a56      	ldr	r2, [pc, #344]	@ (800596c <CreateMessage+0x3f4>)
 8005812:	4969      	ldr	r1, [pc, #420]	@ (80059b8 <CreateMessage+0x440>)
 8005814:	4851      	ldr	r0, [pc, #324]	@ (800595c <CreateMessage+0x3e4>)
 8005816:	f020 fcdf 	bl	80261d8 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"uptime\", \"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
#endif
    index += strlen(message);
 800581a:	4b50      	ldr	r3, [pc, #320]	@ (800595c <CreateMessage+0x3e4>)
 800581c:	0018      	movs	r0, r3
 800581e:	f7fa fca5 	bl	800016c <strlen>
 8005822:	0003      	movs	r3, r0
 8005824:	b299      	uxth	r1, r3
 8005826:	220e      	movs	r2, #14
 8005828:	18bb      	adds	r3, r7, r2
 800582a:	18ba      	adds	r2, r7, r2
 800582c:	8812      	ldrh	r2, [r2, #0]
 800582e:	188a      	adds	r2, r1, r2
 8005830:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005832:	1cfb      	adds	r3, r7, #3
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d019      	beq.n	800586e <CreateMessage+0x2f6>
      status = ESP_Send((uint8_t*)message, strlen(message));
 800583a:	4b48      	ldr	r3, [pc, #288]	@ (800595c <CreateMessage+0x3e4>)
 800583c:	0018      	movs	r0, r3
 800583e:	f7fa fc95 	bl	800016c <strlen>
 8005842:	0003      	movs	r3, r0
 8005844:	b29a      	uxth	r2, r3
 8005846:	4b45      	ldr	r3, [pc, #276]	@ (800595c <CreateMessage+0x3e4>)
 8005848:	0011      	movs	r1, r2
 800584a:	0018      	movs	r0, r3
 800584c:	f7ff fb08 	bl	8004e60 <ESP_Send>
 8005850:	0003      	movs	r3, r0
 8005852:	001a      	movs	r2, r3
 8005854:	4b49      	ldr	r3, [pc, #292]	@ (800597c <CreateMessage+0x404>)
 8005856:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005858:	4b49      	ldr	r3, [pc, #292]	@ (8005980 <CreateMessage+0x408>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	001a      	movs	r2, r3
 800585e:	4b47      	ldr	r3, [pc, #284]	@ (800597c <CreateMessage+0x404>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	4013      	ands	r3, r2
 8005864:	1e5a      	subs	r2, r3, #1
 8005866:	4193      	sbcs	r3, r2
 8005868:	b2da      	uxtb	r2, r3
 800586a:	4b45      	ldr	r3, [pc, #276]	@ (8005980 <CreateMessage+0x408>)
 800586c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (IsBMP280SensorPresent()) {
 800586e:	f007 fe0b 	bl	800d488 <IsBMP280SensorPresent>
 8005872:	1e03      	subs	r3, r0, #0
 8005874:	d100      	bne.n	8005878 <CreateMessage+0x300>
 8005876:	e0e1      	b.n	8005a3c <CreateMessage+0x4c4>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 8005878:	4b3a      	ldr	r3, [pc, #232]	@ (8005964 <CreateMessage+0x3ec>)
 800587a:	4850      	ldr	r0, [pc, #320]	@ (80059bc <CreateMessage+0x444>)
 800587c:	220c      	movs	r2, #12
 800587e:	0019      	movs	r1, r3
 8005880:	f006 fc3a 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && MeasVal.BMP280_airpressure) {
 8005884:	4a4e      	ldr	r2, [pc, #312]	@ (80059c0 <CreateMessage+0x448>)
 8005886:	494f      	ldr	r1, [pc, #316]	@ (80059c4 <CreateMessage+0x44c>)
 8005888:	4b36      	ldr	r3, [pc, #216]	@ (8005964 <CreateMessage+0x3ec>)
 800588a:	0018      	movs	r0, r3
 800588c:	f7ff fd4c 	bl	8005328 <isKeyValid>
 8005890:	1e03      	subs	r3, r0, #0
 8005892:	d046      	beq.n	8005922 <CreateMessage+0x3aa>
 8005894:	4b36      	ldr	r3, [pc, #216]	@ (8005970 <CreateMessage+0x3f8>)
 8005896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005898:	2100      	movs	r1, #0
 800589a:	1c18      	adds	r0, r3, #0
 800589c:	f7fa fe42 	bl	8000524 <__aeabi_fcmpeq>
 80058a0:	1e03      	subs	r3, r0, #0
 80058a2:	d13e      	bne.n	8005922 <CreateMessage+0x3aa>
      uint8ArrayToString(Buffer, keybuffer);
 80058a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005964 <CreateMessage+0x3ec>)
 80058a6:	4b31      	ldr	r3, [pc, #196]	@ (800596c <CreateMessage+0x3f4>)
 80058a8:	0011      	movs	r1, r2
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7ff fd9c 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_airpressure);
 80058b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005970 <CreateMessage+0x3f8>)
 80058b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b4:	1c18      	adds	r0, r3, #0
 80058b6:	f7fd ffed 	bl	8003894 <__aeabi_f2d>
 80058ba:	0002      	movs	r2, r0
 80058bc:	000b      	movs	r3, r1
 80058be:	4c2b      	ldr	r4, [pc, #172]	@ (800596c <CreateMessage+0x3f4>)
 80058c0:	4931      	ldr	r1, [pc, #196]	@ (8005988 <CreateMessage+0x410>)
 80058c2:	4826      	ldr	r0, [pc, #152]	@ (800595c <CreateMessage+0x3e4>)
 80058c4:	9200      	str	r2, [sp, #0]
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	0022      	movs	r2, r4
 80058ca:	f020 fc85 	bl	80261d8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_airpressure);
#endif
      index += strlen(message);
 80058ce:	4b23      	ldr	r3, [pc, #140]	@ (800595c <CreateMessage+0x3e4>)
 80058d0:	0018      	movs	r0, r3
 80058d2:	f7fa fc4b 	bl	800016c <strlen>
 80058d6:	0003      	movs	r3, r0
 80058d8:	b299      	uxth	r1, r3
 80058da:	220e      	movs	r2, #14
 80058dc:	18bb      	adds	r3, r7, r2
 80058de:	18ba      	adds	r2, r7, r2
 80058e0:	8812      	ldrh	r2, [r2, #0]
 80058e2:	188a      	adds	r2, r1, r2
 80058e4:	801a      	strh	r2, [r3, #0]
      if (send) {
 80058e6:	1cfb      	adds	r3, r7, #3
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d019      	beq.n	8005922 <CreateMessage+0x3aa>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80058ee:	4b1b      	ldr	r3, [pc, #108]	@ (800595c <CreateMessage+0x3e4>)
 80058f0:	0018      	movs	r0, r3
 80058f2:	f7fa fc3b 	bl	800016c <strlen>
 80058f6:	0003      	movs	r3, r0
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	4b18      	ldr	r3, [pc, #96]	@ (800595c <CreateMessage+0x3e4>)
 80058fc:	0011      	movs	r1, r2
 80058fe:	0018      	movs	r0, r3
 8005900:	f7ff faae 	bl	8004e60 <ESP_Send>
 8005904:	0003      	movs	r3, r0
 8005906:	001a      	movs	r2, r3
 8005908:	4b1c      	ldr	r3, [pc, #112]	@ (800597c <CreateMessage+0x404>)
 800590a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800590c:	4b1c      	ldr	r3, [pc, #112]	@ (8005980 <CreateMessage+0x408>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	001a      	movs	r2, r3
 8005912:	4b1a      	ldr	r3, [pc, #104]	@ (800597c <CreateMessage+0x404>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	4013      	ands	r3, r2
 8005918:	1e5a      	subs	r2, r3, #1
 800591a:	4193      	sbcs	r3, r2
 800591c:	b2da      	uxtb	r2, r3
 800591e:	4b18      	ldr	r3, [pc, #96]	@ (8005980 <CreateMessage+0x408>)
 8005920:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 8005922:	4b10      	ldr	r3, [pc, #64]	@ (8005964 <CreateMessage+0x3ec>)
 8005924:	4828      	ldr	r0, [pc, #160]	@ (80059c8 <CreateMessage+0x450>)
 8005926:	220c      	movs	r2, #12
 8005928:	0019      	movs	r1, r3
 800592a:	f006 fbe5 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 800592e:	4a27      	ldr	r2, [pc, #156]	@ (80059cc <CreateMessage+0x454>)
 8005930:	4924      	ldr	r1, [pc, #144]	@ (80059c4 <CreateMessage+0x44c>)
 8005932:	4b0c      	ldr	r3, [pc, #48]	@ (8005964 <CreateMessage+0x3ec>)
 8005934:	0018      	movs	r0, r3
 8005936:	f7ff fcf7 	bl	8005328 <isKeyValid>
 800593a:	1e03      	subs	r3, r0, #0
 800593c:	d100      	bne.n	8005940 <CreateMessage+0x3c8>
 800593e:	e07d      	b.n	8005a3c <CreateMessage+0x4c4>
      uint8ArrayToString(Buffer, keybuffer);
 8005940:	4a08      	ldr	r2, [pc, #32]	@ (8005964 <CreateMessage+0x3ec>)
 8005942:	4b0a      	ldr	r3, [pc, #40]	@ (800596c <CreateMessage+0x3f4>)
 8005944:	0011      	movs	r1, r2
 8005946:	0018      	movs	r0, r3
 8005948:	f7ff fd4e 	bl	80053e8 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperature);
 800594c:	4b08      	ldr	r3, [pc, #32]	@ (8005970 <CreateMessage+0x3f8>)
 800594e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005950:	1c18      	adds	r0, r3, #0
 8005952:	e03d      	b.n	80059d0 <CreateMessage+0x458>
 8005954:	20000814 	.word	0x20000814
 8005958:	0802dcac 	.word	0x0802dcac
 800595c:	200005c4 	.word	0x200005c4
 8005960:	0802abd8 	.word	0x0802abd8
 8005964:	20000834 	.word	0x20000834
 8005968:	0808000c 	.word	0x0808000c
 800596c:	20000840 	.word	0x20000840
 8005970:	20000704 	.word	0x20000704
 8005974:	0802abdc 	.word	0x0802abdc
 8005978:	200005c5 	.word	0x200005c5
 800597c:	20000859 	.word	0x20000859
 8005980:	20000032 	.word	0x20000032
 8005984:	08080018 	.word	0x08080018
 8005988:	0802abfc 	.word	0x0802abfc
 800598c:	08080030 	.word	0x08080030
 8005990:	0802ac1c 	.word	0x0802ac1c
 8005994:	08080084 	.word	0x08080084
 8005998:	0802ac3c 	.word	0x0802ac3c
 800599c:	0802ac48 	.word	0x0802ac48
 80059a0:	2000215c 	.word	0x2000215c
 80059a4:	0802ac54 	.word	0x0802ac54
 80059a8:	080801a0 	.word	0x080801a0
 80059ac:	0802ac74 	.word	0x0802ac74
 80059b0:	0802ac7c 	.word	0x0802ac7c
 80059b4:	2000085c 	.word	0x2000085c
 80059b8:	0802ac84 	.word	0x0802ac84
 80059bc:	08080188 	.word	0x08080188
 80059c0:	0802aca4 	.word	0x0802aca4
 80059c4:	0802aca8 	.word	0x0802aca8
 80059c8:	080800e0 	.word	0x080800e0
 80059cc:	0802acb0 	.word	0x0802acb0
 80059d0:	f7fd ff60 	bl	8003894 <__aeabi_f2d>
 80059d4:	0002      	movs	r2, r0
 80059d6:	000b      	movs	r3, r1
 80059d8:	4ce6      	ldr	r4, [pc, #920]	@ (8005d74 <CreateMessage+0x7fc>)
 80059da:	49e7      	ldr	r1, [pc, #924]	@ (8005d78 <CreateMessage+0x800>)
 80059dc:	48e7      	ldr	r0, [pc, #924]	@ (8005d7c <CreateMessage+0x804>)
 80059de:	9200      	str	r2, [sp, #0]
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	0022      	movs	r2, r4
 80059e4:	f020 fbf8 	bl	80261d8 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperature);
  #endif
      index += strlen(message);
 80059e8:	4be4      	ldr	r3, [pc, #912]	@ (8005d7c <CreateMessage+0x804>)
 80059ea:	0018      	movs	r0, r3
 80059ec:	f7fa fbbe 	bl	800016c <strlen>
 80059f0:	0003      	movs	r3, r0
 80059f2:	b299      	uxth	r1, r3
 80059f4:	220e      	movs	r2, #14
 80059f6:	18bb      	adds	r3, r7, r2
 80059f8:	18ba      	adds	r2, r7, r2
 80059fa:	8812      	ldrh	r2, [r2, #0]
 80059fc:	188a      	adds	r2, r1, r2
 80059fe:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005a00:	1cfb      	adds	r3, r7, #3
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d019      	beq.n	8005a3c <CreateMessage+0x4c4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005a08:	4bdc      	ldr	r3, [pc, #880]	@ (8005d7c <CreateMessage+0x804>)
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f7fa fbae 	bl	800016c <strlen>
 8005a10:	0003      	movs	r3, r0
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	4bd9      	ldr	r3, [pc, #868]	@ (8005d7c <CreateMessage+0x804>)
 8005a16:	0011      	movs	r1, r2
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f7ff fa21 	bl	8004e60 <ESP_Send>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	001a      	movs	r2, r3
 8005a22:	4bd7      	ldr	r3, [pc, #860]	@ (8005d80 <CreateMessage+0x808>)
 8005a24:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005a26:	4bd7      	ldr	r3, [pc, #860]	@ (8005d84 <CreateMessage+0x80c>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	001a      	movs	r2, r3
 8005a2c:	4bd4      	ldr	r3, [pc, #848]	@ (8005d80 <CreateMessage+0x808>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4013      	ands	r3, r2
 8005a32:	1e5a      	subs	r2, r3, #1
 8005a34:	4193      	sbcs	r3, r2
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	4bd2      	ldr	r3, [pc, #840]	@ (8005d84 <CreateMessage+0x80c>)
 8005a3a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 8005a3c:	4bd2      	ldr	r3, [pc, #840]	@ (8005d88 <CreateMessage+0x810>)
 8005a3e:	48d3      	ldr	r0, [pc, #844]	@ (8005d8c <CreateMessage+0x814>)
 8005a40:	220c      	movs	r2, #12
 8005a42:	0019      	movs	r1, r3
 8005a44:	f006 fb58 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005a48:	4acf      	ldr	r2, [pc, #828]	@ (8005d88 <CreateMessage+0x810>)
 8005a4a:	4bca      	ldr	r3, [pc, #808]	@ (8005d74 <CreateMessage+0x7fc>)
 8005a4c:	0011      	movs	r1, r2
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f7ff fcca 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
 8005a54:	4bce      	ldr	r3, [pc, #824]	@ (8005d90 <CreateMessage+0x818>)
 8005a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a58:	1c18      	adds	r0, r3, #0
 8005a5a:	f7fd ff1b 	bl	8003894 <__aeabi_f2d>
 8005a5e:	0002      	movs	r2, r0
 8005a60:	000b      	movs	r3, r1
 8005a62:	4cc4      	ldr	r4, [pc, #784]	@ (8005d74 <CreateMessage+0x7fc>)
 8005a64:	49c4      	ldr	r1, [pc, #784]	@ (8005d78 <CreateMessage+0x800>)
 8005a66:	48c5      	ldr	r0, [pc, #788]	@ (8005d7c <CreateMessage+0x804>)
 8005a68:	9200      	str	r2, [sp, #0]
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	0022      	movs	r2, r4
 8005a6e:	f020 fbb3 	bl	80261d8 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
#endif
  index += strlen(message);
 8005a72:	4bc2      	ldr	r3, [pc, #776]	@ (8005d7c <CreateMessage+0x804>)
 8005a74:	0018      	movs	r0, r3
 8005a76:	f7fa fb79 	bl	800016c <strlen>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	b299      	uxth	r1, r3
 8005a7e:	220e      	movs	r2, #14
 8005a80:	18bb      	adds	r3, r7, r2
 8005a82:	18ba      	adds	r2, r7, r2
 8005a84:	8812      	ldrh	r2, [r2, #0]
 8005a86:	188a      	adds	r2, r1, r2
 8005a88:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005a8a:	1cfb      	adds	r3, r7, #3
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d019      	beq.n	8005ac6 <CreateMessage+0x54e>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005a92:	4bba      	ldr	r3, [pc, #744]	@ (8005d7c <CreateMessage+0x804>)
 8005a94:	0018      	movs	r0, r3
 8005a96:	f7fa fb69 	bl	800016c <strlen>
 8005a9a:	0003      	movs	r3, r0
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	4bb7      	ldr	r3, [pc, #732]	@ (8005d7c <CreateMessage+0x804>)
 8005aa0:	0011      	movs	r1, r2
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f7ff f9dc 	bl	8004e60 <ESP_Send>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	001a      	movs	r2, r3
 8005aac:	4bb4      	ldr	r3, [pc, #720]	@ (8005d80 <CreateMessage+0x808>)
 8005aae:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005ab0:	4bb4      	ldr	r3, [pc, #720]	@ (8005d84 <CreateMessage+0x80c>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	001a      	movs	r2, r3
 8005ab6:	4bb2      	ldr	r3, [pc, #712]	@ (8005d80 <CreateMessage+0x808>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	4013      	ands	r3, r2
 8005abc:	1e5a      	subs	r2, r3, #1
 8005abe:	4193      	sbcs	r3, r2
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	4bb0      	ldr	r3, [pc, #704]	@ (8005d84 <CreateMessage+0x80c>)
 8005ac4:	701a      	strb	r2, [r3, #0]
  }

    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 8005ac6:	4bb0      	ldr	r3, [pc, #704]	@ (8005d88 <CreateMessage+0x810>)
 8005ac8:	48b2      	ldr	r0, [pc, #712]	@ (8005d94 <CreateMessage+0x81c>)
 8005aca:	220c      	movs	r2, #12
 8005acc:	0019      	movs	r1, r3
 8005ace:	f006 fb13 	bl	800c0f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 8005ad2:	4aad      	ldr	r2, [pc, #692]	@ (8005d88 <CreateMessage+0x810>)
 8005ad4:	4ba7      	ldr	r3, [pc, #668]	@ (8005d74 <CreateMessage+0x7fc>)
 8005ad6:	0011      	movs	r1, r2
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f7ff fc85 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
 8005ade:	4bae      	ldr	r3, [pc, #696]	@ (8005d98 <CreateMessage+0x820>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	1c18      	adds	r0, r3, #0
 8005ae4:	f7fd fed6 	bl	8003894 <__aeabi_f2d>
 8005ae8:	0002      	movs	r2, r0
 8005aea:	000b      	movs	r3, r1
 8005aec:	4ca1      	ldr	r4, [pc, #644]	@ (8005d74 <CreateMessage+0x7fc>)
 8005aee:	49a2      	ldr	r1, [pc, #648]	@ (8005d78 <CreateMessage+0x800>)
 8005af0:	48a2      	ldr	r0, [pc, #648]	@ (8005d7c <CreateMessage+0x804>)
 8005af2:	9200      	str	r2, [sp, #0]
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	0022      	movs	r2, r4
 8005af8:	f020 fb6e 	bl	80261d8 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
#endif
    index += strlen(message);
 8005afc:	4b9f      	ldr	r3, [pc, #636]	@ (8005d7c <CreateMessage+0x804>)
 8005afe:	0018      	movs	r0, r3
 8005b00:	f7fa fb34 	bl	800016c <strlen>
 8005b04:	0003      	movs	r3, r0
 8005b06:	b299      	uxth	r1, r3
 8005b08:	220e      	movs	r2, #14
 8005b0a:	18bb      	adds	r3, r7, r2
 8005b0c:	18ba      	adds	r2, r7, r2
 8005b0e:	8812      	ldrh	r2, [r2, #0]
 8005b10:	188a      	adds	r2, r1, r2
 8005b12:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005b14:	1cfb      	adds	r3, r7, #3
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d019      	beq.n	8005b50 <CreateMessage+0x5d8>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005b1c:	4b97      	ldr	r3, [pc, #604]	@ (8005d7c <CreateMessage+0x804>)
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f7fa fb24 	bl	800016c <strlen>
 8005b24:	0003      	movs	r3, r0
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	4b94      	ldr	r3, [pc, #592]	@ (8005d7c <CreateMessage+0x804>)
 8005b2a:	0011      	movs	r1, r2
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f7ff f997 	bl	8004e60 <ESP_Send>
 8005b32:	0003      	movs	r3, r0
 8005b34:	001a      	movs	r2, r3
 8005b36:	4b92      	ldr	r3, [pc, #584]	@ (8005d80 <CreateMessage+0x808>)
 8005b38:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005b3a:	4b92      	ldr	r3, [pc, #584]	@ (8005d84 <CreateMessage+0x80c>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	001a      	movs	r2, r3
 8005b40:	4b8f      	ldr	r3, [pc, #572]	@ (8005d80 <CreateMessage+0x808>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	4013      	ands	r3, r2
 8005b46:	1e5a      	subs	r2, r3, #1
 8005b48:	4193      	sbcs	r3, r2
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	4b8d      	ldr	r3, [pc, #564]	@ (8005d84 <CreateMessage+0x80c>)
 8005b4e:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8005b50:	4b92      	ldr	r3, [pc, #584]	@ (8005d9c <CreateMessage+0x824>)
 8005b52:	791b      	ldrb	r3, [r3, #4]
 8005b54:	2b35      	cmp	r3, #53	@ 0x35
 8005b56:	d141      	bne.n	8005bdc <CreateMessage+0x664>
 8005b58:	f004 f85e 	bl	8009c18 <Check_USB_PowerOn>
 8005b5c:	1e03      	subs	r3, r0, #0
 8005b5e:	d03d      	beq.n	8005bdc <CreateMessage+0x664>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 8005b60:	4b89      	ldr	r3, [pc, #548]	@ (8005d88 <CreateMessage+0x810>)
 8005b62:	488f      	ldr	r0, [pc, #572]	@ (8005da0 <CreateMessage+0x828>)
 8005b64:	220c      	movs	r2, #12
 8005b66:	0019      	movs	r1, r3
 8005b68:	f006 fac6 	bl	800c0f8 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005b6c:	4a86      	ldr	r2, [pc, #536]	@ (8005d88 <CreateMessage+0x810>)
 8005b6e:	4b81      	ldr	r3, [pc, #516]	@ (8005d74 <CreateMessage+0x7fc>)
 8005b70:	0011      	movs	r1, r2
 8005b72:	0018      	movs	r0, r3
 8005b74:	f7ff fc38 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
 8005b78:	4b85      	ldr	r3, [pc, #532]	@ (8005d90 <CreateMessage+0x818>)
 8005b7a:	224e      	movs	r2, #78	@ 0x4e
 8005b7c:	5a9b      	ldrh	r3, [r3, r2]
 8005b7e:	4a7d      	ldr	r2, [pc, #500]	@ (8005d74 <CreateMessage+0x7fc>)
 8005b80:	4988      	ldr	r1, [pc, #544]	@ (8005da4 <CreateMessage+0x82c>)
 8005b82:	487e      	ldr	r0, [pc, #504]	@ (8005d7c <CreateMessage+0x804>)
 8005b84:	f020 fb28 	bl	80261d8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
#endif
      index += strlen(message);
 8005b88:	4b7c      	ldr	r3, [pc, #496]	@ (8005d7c <CreateMessage+0x804>)
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f7fa faee 	bl	800016c <strlen>
 8005b90:	0003      	movs	r3, r0
 8005b92:	b299      	uxth	r1, r3
 8005b94:	220e      	movs	r2, #14
 8005b96:	18bb      	adds	r3, r7, r2
 8005b98:	18ba      	adds	r2, r7, r2
 8005b9a:	8812      	ldrh	r2, [r2, #0]
 8005b9c:	188a      	adds	r2, r1, r2
 8005b9e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005ba0:	1cfb      	adds	r3, r7, #3
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d019      	beq.n	8005bdc <CreateMessage+0x664>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005ba8:	4b74      	ldr	r3, [pc, #464]	@ (8005d7c <CreateMessage+0x804>)
 8005baa:	0018      	movs	r0, r3
 8005bac:	f7fa fade 	bl	800016c <strlen>
 8005bb0:	0003      	movs	r3, r0
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	4b71      	ldr	r3, [pc, #452]	@ (8005d7c <CreateMessage+0x804>)
 8005bb6:	0011      	movs	r1, r2
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f7ff f951 	bl	8004e60 <ESP_Send>
 8005bbe:	0003      	movs	r3, r0
 8005bc0:	001a      	movs	r2, r3
 8005bc2:	4b6f      	ldr	r3, [pc, #444]	@ (8005d80 <CreateMessage+0x808>)
 8005bc4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8005d84 <CreateMessage+0x80c>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	001a      	movs	r2, r3
 8005bcc:	4b6c      	ldr	r3, [pc, #432]	@ (8005d80 <CreateMessage+0x808>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	1e5a      	subs	r2, r3, #1
 8005bd4:	4193      	sbcs	r3, r2
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8005d84 <CreateMessage+0x80c>)
 8005bda:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 8005bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8005d88 <CreateMessage+0x810>)
 8005bde:	4872      	ldr	r0, [pc, #456]	@ (8005da8 <CreateMessage+0x830>)
 8005be0:	220c      	movs	r2, #12
 8005be2:	0019      	movs	r1, r3
 8005be4:	f006 fa88 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005be8:	4b6c      	ldr	r3, [pc, #432]	@ (8005d9c <CreateMessage+0x824>)
 8005bea:	791b      	ldrb	r3, [r3, #4]
 8005bec:	2b34      	cmp	r3, #52	@ 0x34
 8005bee:	d003      	beq.n	8005bf8 <CreateMessage+0x680>
 8005bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8005d9c <CreateMessage+0x824>)
 8005bf2:	791b      	ldrb	r3, [r3, #4]
 8005bf4:	2b35      	cmp	r3, #53	@ 0x35
 8005bf6:	d146      	bne.n	8005c86 <CreateMessage+0x70e>
 8005bf8:	4a6c      	ldr	r2, [pc, #432]	@ (8005dac <CreateMessage+0x834>)
 8005bfa:	496d      	ldr	r1, [pc, #436]	@ (8005db0 <CreateMessage+0x838>)
 8005bfc:	4b62      	ldr	r3, [pc, #392]	@ (8005d88 <CreateMessage+0x810>)
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f7ff fb92 	bl	8005328 <isKeyValid>
 8005c04:	1e03      	subs	r3, r0, #0
 8005c06:	d03e      	beq.n	8005c86 <CreateMessage+0x70e>
      uint8ArrayToString(Buffer, keybuffer);
 8005c08:	4a5f      	ldr	r2, [pc, #380]	@ (8005d88 <CreateMessage+0x810>)
 8005c0a:	4b5a      	ldr	r3, [pc, #360]	@ (8005d74 <CreateMessage+0x7fc>)
 8005c0c:	0011      	movs	r1, r2
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f7ff fbea 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_temperature);
 8005c14:	4b5e      	ldr	r3, [pc, #376]	@ (8005d90 <CreateMessage+0x818>)
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	1c18      	adds	r0, r3, #0
 8005c1a:	f7fd fe3b 	bl	8003894 <__aeabi_f2d>
 8005c1e:	0002      	movs	r2, r0
 8005c20:	000b      	movs	r3, r1
 8005c22:	4c54      	ldr	r4, [pc, #336]	@ (8005d74 <CreateMessage+0x7fc>)
 8005c24:	4963      	ldr	r1, [pc, #396]	@ (8005db4 <CreateMessage+0x83c>)
 8005c26:	4855      	ldr	r0, [pc, #340]	@ (8005d7c <CreateMessage+0x804>)
 8005c28:	9200      	str	r2, [sp, #0]
 8005c2a:	9301      	str	r3, [sp, #4]
 8005c2c:	0022      	movs	r2, r4
 8005c2e:	f020 fad3 	bl	80261d8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
#endif
      index += strlen(message);
 8005c32:	4b52      	ldr	r3, [pc, #328]	@ (8005d7c <CreateMessage+0x804>)
 8005c34:	0018      	movs	r0, r3
 8005c36:	f7fa fa99 	bl	800016c <strlen>
 8005c3a:	0003      	movs	r3, r0
 8005c3c:	b299      	uxth	r1, r3
 8005c3e:	220e      	movs	r2, #14
 8005c40:	18bb      	adds	r3, r7, r2
 8005c42:	18ba      	adds	r2, r7, r2
 8005c44:	8812      	ldrh	r2, [r2, #0]
 8005c46:	188a      	adds	r2, r1, r2
 8005c48:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005c4a:	1cfb      	adds	r3, r7, #3
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d019      	beq.n	8005c86 <CreateMessage+0x70e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005c52:	4b4a      	ldr	r3, [pc, #296]	@ (8005d7c <CreateMessage+0x804>)
 8005c54:	0018      	movs	r0, r3
 8005c56:	f7fa fa89 	bl	800016c <strlen>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	4b47      	ldr	r3, [pc, #284]	@ (8005d7c <CreateMessage+0x804>)
 8005c60:	0011      	movs	r1, r2
 8005c62:	0018      	movs	r0, r3
 8005c64:	f7ff f8fc 	bl	8004e60 <ESP_Send>
 8005c68:	0003      	movs	r3, r0
 8005c6a:	001a      	movs	r2, r3
 8005c6c:	4b44      	ldr	r3, [pc, #272]	@ (8005d80 <CreateMessage+0x808>)
 8005c6e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005c70:	4b44      	ldr	r3, [pc, #272]	@ (8005d84 <CreateMessage+0x80c>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	001a      	movs	r2, r3
 8005c76:	4b42      	ldr	r3, [pc, #264]	@ (8005d80 <CreateMessage+0x808>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	1e5a      	subs	r2, r3, #1
 8005c7e:	4193      	sbcs	r3, r2
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	4b40      	ldr	r3, [pc, #256]	@ (8005d84 <CreateMessage+0x80c>)
 8005c84:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 8005c86:	4b40      	ldr	r3, [pc, #256]	@ (8005d88 <CreateMessage+0x810>)
 8005c88:	484b      	ldr	r0, [pc, #300]	@ (8005db8 <CreateMessage+0x840>)
 8005c8a:	220c      	movs	r2, #12
 8005c8c:	0019      	movs	r1, r3
 8005c8e:	f006 fa33 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 8005c92:	4b42      	ldr	r3, [pc, #264]	@ (8005d9c <CreateMessage+0x824>)
 8005c94:	791b      	ldrb	r3, [r3, #4]
 8005c96:	2b34      	cmp	r3, #52	@ 0x34
 8005c98:	d003      	beq.n	8005ca2 <CreateMessage+0x72a>
 8005c9a:	4b40      	ldr	r3, [pc, #256]	@ (8005d9c <CreateMessage+0x824>)
 8005c9c:	791b      	ldrb	r3, [r3, #4]
 8005c9e:	2b35      	cmp	r3, #53	@ 0x35
 8005ca0:	d146      	bne.n	8005d30 <CreateMessage+0x7b8>
 8005ca2:	4a46      	ldr	r2, [pc, #280]	@ (8005dbc <CreateMessage+0x844>)
 8005ca4:	4942      	ldr	r1, [pc, #264]	@ (8005db0 <CreateMessage+0x838>)
 8005ca6:	4b38      	ldr	r3, [pc, #224]	@ (8005d88 <CreateMessage+0x810>)
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f7ff fb3d 	bl	8005328 <isKeyValid>
 8005cae:	1e03      	subs	r3, r0, #0
 8005cb0:	d03e      	beq.n	8005d30 <CreateMessage+0x7b8>
      uint8ArrayToString(Buffer, keybuffer);
 8005cb2:	4a35      	ldr	r2, [pc, #212]	@ (8005d88 <CreateMessage+0x810>)
 8005cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8005d74 <CreateMessage+0x7fc>)
 8005cb6:	0011      	movs	r1, r2
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f7ff fb95 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_humidity);
 8005cbe:	4b34      	ldr	r3, [pc, #208]	@ (8005d90 <CreateMessage+0x818>)
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc2:	1c18      	adds	r0, r3, #0
 8005cc4:	f7fd fde6 	bl	8003894 <__aeabi_f2d>
 8005cc8:	0002      	movs	r2, r0
 8005cca:	000b      	movs	r3, r1
 8005ccc:	4c29      	ldr	r4, [pc, #164]	@ (8005d74 <CreateMessage+0x7fc>)
 8005cce:	4939      	ldr	r1, [pc, #228]	@ (8005db4 <CreateMessage+0x83c>)
 8005cd0:	482a      	ldr	r0, [pc, #168]	@ (8005d7c <CreateMessage+0x804>)
 8005cd2:	9200      	str	r2, [sp, #0]
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	0022      	movs	r2, r4
 8005cd8:	f020 fa7e 	bl	80261d8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
#endif
      index += strlen(message);
 8005cdc:	4b27      	ldr	r3, [pc, #156]	@ (8005d7c <CreateMessage+0x804>)
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7fa fa44 	bl	800016c <strlen>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	b299      	uxth	r1, r3
 8005ce8:	220e      	movs	r2, #14
 8005cea:	18bb      	adds	r3, r7, r2
 8005cec:	18ba      	adds	r2, r7, r2
 8005cee:	8812      	ldrh	r2, [r2, #0]
 8005cf0:	188a      	adds	r2, r1, r2
 8005cf2:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005cf4:	1cfb      	adds	r3, r7, #3
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d019      	beq.n	8005d30 <CreateMessage+0x7b8>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8005d7c <CreateMessage+0x804>)
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f7fa fa34 	bl	800016c <strlen>
 8005d04:	0003      	movs	r3, r0
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	4b1c      	ldr	r3, [pc, #112]	@ (8005d7c <CreateMessage+0x804>)
 8005d0a:	0011      	movs	r1, r2
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f7ff f8a7 	bl	8004e60 <ESP_Send>
 8005d12:	0003      	movs	r3, r0
 8005d14:	001a      	movs	r2, r3
 8005d16:	4b1a      	ldr	r3, [pc, #104]	@ (8005d80 <CreateMessage+0x808>)
 8005d18:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005d84 <CreateMessage+0x80c>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	001a      	movs	r2, r3
 8005d20:	4b17      	ldr	r3, [pc, #92]	@ (8005d80 <CreateMessage+0x808>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	4013      	ands	r3, r2
 8005d26:	1e5a      	subs	r2, r3, #1
 8005d28:	4193      	sbcs	r3, r2
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	4b15      	ldr	r3, [pc, #84]	@ (8005d84 <CreateMessage+0x80c>)
 8005d2e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (sen5x_Get_sen5x_enable_state() && (batteryStatus > BATTERY_LOW)) {
 8005d30:	f008 fc20 	bl	800e574 <sen5x_Get_sen5x_enable_state>
 8005d34:	1e03      	subs	r3, r0, #0
 8005d36:	d100      	bne.n	8005d3a <CreateMessage+0x7c2>
 8005d38:	e157      	b.n	8005fea <CreateMessage+0xa72>
 8005d3a:	4b21      	ldr	r3, [pc, #132]	@ (8005dc0 <CreateMessage+0x848>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d800      	bhi.n	8005d44 <CreateMessage+0x7cc>
 8005d42:	e152      	b.n	8005fea <CreateMessage+0xa72>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005d44:	4b10      	ldr	r3, [pc, #64]	@ (8005d88 <CreateMessage+0x810>)
 8005d46:	481f      	ldr	r0, [pc, #124]	@ (8005dc4 <CreateMessage+0x84c>)
 8005d48:	220c      	movs	r2, #12
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	f006 f9d4 	bl	800c0f8 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005d50:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc8 <CreateMessage+0x850>)
 8005d52:	491e      	ldr	r1, [pc, #120]	@ (8005dcc <CreateMessage+0x854>)
 8005d54:	4b0c      	ldr	r3, [pc, #48]	@ (8005d88 <CreateMessage+0x810>)
 8005d56:	0018      	movs	r0, r3
 8005d58:	f7ff fae6 	bl	8005328 <isKeyValid>
 8005d5c:	1e03      	subs	r3, r0, #0
 8005d5e:	d06d      	beq.n	8005e3c <CreateMessage+0x8c4>
        uint8ArrayToString(Buffer, keybuffer);
 8005d60:	4a09      	ldr	r2, [pc, #36]	@ (8005d88 <CreateMessage+0x810>)
 8005d62:	4b04      	ldr	r3, [pc, #16]	@ (8005d74 <CreateMessage+0x7fc>)
 8005d64:	0011      	movs	r1, r2
 8005d66:	0018      	movs	r0, r3
 8005d68:	f7ff fb3e 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
 8005d6c:	4b08      	ldr	r3, [pc, #32]	@ (8005d90 <CreateMessage+0x818>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	1c18      	adds	r0, r3, #0
 8005d72:	e02d      	b.n	8005dd0 <CreateMessage+0x858>
 8005d74:	20000840 	.word	0x20000840
 8005d78:	0802abfc 	.word	0x0802abfc
 8005d7c:	200005c4 	.word	0x200005c4
 8005d80:	20000859 	.word	0x20000859
 8005d84:	20000032 	.word	0x20000032
 8005d88:	20000834 	.word	0x20000834
 8005d8c:	08080048 	.word	0x08080048
 8005d90:	20000704 	.word	0x20000704
 8005d94:	08080078 	.word	0x08080078
 8005d98:	200005c0 	.word	0x200005c0
 8005d9c:	200011c0 	.word	0x200011c0
 8005da0:	08080024 	.word	0x08080024
 8005da4:	0802ac1c 	.word	0x0802ac1c
 8005da8:	08080170 	.word	0x08080170
 8005dac:	0802acbc 	.word	0x0802acbc
 8005db0:	0802acc8 	.word	0x0802acc8
 8005db4:	0802acd0 	.word	0x0802acd0
 8005db8:	0808017c 	.word	0x0808017c
 8005dbc:	0802acf0 	.word	0x0802acf0
 8005dc0:	2000215d 	.word	0x2000215d
 8005dc4:	080800b0 	.word	0x080800b0
 8005dc8:	0802acfc 	.word	0x0802acfc
 8005dcc:	0802ad08 	.word	0x0802ad08
 8005dd0:	f7fd fd60 	bl	8003894 <__aeabi_f2d>
 8005dd4:	0002      	movs	r2, r0
 8005dd6:	000b      	movs	r3, r1
 8005dd8:	4ceb      	ldr	r4, [pc, #940]	@ (8006188 <CreateMessage+0xc10>)
 8005dda:	49ec      	ldr	r1, [pc, #944]	@ (800618c <CreateMessage+0xc14>)
 8005ddc:	48ec      	ldr	r0, [pc, #944]	@ (8006190 <CreateMessage+0xc18>)
 8005dde:	9200      	str	r2, [sp, #0]
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	0022      	movs	r2, r4
 8005de4:	f020 f9f8 	bl	80261d8 <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
#endif
        index += strlen(message);
 8005de8:	4be9      	ldr	r3, [pc, #932]	@ (8006190 <CreateMessage+0xc18>)
 8005dea:	0018      	movs	r0, r3
 8005dec:	f7fa f9be 	bl	800016c <strlen>
 8005df0:	0003      	movs	r3, r0
 8005df2:	b299      	uxth	r1, r3
 8005df4:	220e      	movs	r2, #14
 8005df6:	18bb      	adds	r3, r7, r2
 8005df8:	18ba      	adds	r2, r7, r2
 8005dfa:	8812      	ldrh	r2, [r2, #0]
 8005dfc:	188a      	adds	r2, r1, r2
 8005dfe:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005e00:	1cfb      	adds	r3, r7, #3
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d019      	beq.n	8005e3c <CreateMessage+0x8c4>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005e08:	4be1      	ldr	r3, [pc, #900]	@ (8006190 <CreateMessage+0xc18>)
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f7fa f9ae 	bl	800016c <strlen>
 8005e10:	0003      	movs	r3, r0
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	4bde      	ldr	r3, [pc, #888]	@ (8006190 <CreateMessage+0xc18>)
 8005e16:	0011      	movs	r1, r2
 8005e18:	0018      	movs	r0, r3
 8005e1a:	f7ff f821 	bl	8004e60 <ESP_Send>
 8005e1e:	0003      	movs	r3, r0
 8005e20:	001a      	movs	r2, r3
 8005e22:	4bdc      	ldr	r3, [pc, #880]	@ (8006194 <CreateMessage+0xc1c>)
 8005e24:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005e26:	4bdc      	ldr	r3, [pc, #880]	@ (8006198 <CreateMessage+0xc20>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	001a      	movs	r2, r3
 8005e2c:	4bd9      	ldr	r3, [pc, #868]	@ (8006194 <CreateMessage+0xc1c>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	4013      	ands	r3, r2
 8005e32:	1e5a      	subs	r2, r3, #1
 8005e34:	4193      	sbcs	r3, r2
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	4bd7      	ldr	r3, [pc, #860]	@ (8006198 <CreateMessage+0xc20>)
 8005e3a:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005e3c:	4bd7      	ldr	r3, [pc, #860]	@ (800619c <CreateMessage+0xc24>)
 8005e3e:	48d8      	ldr	r0, [pc, #864]	@ (80061a0 <CreateMessage+0xc28>)
 8005e40:	220c      	movs	r2, #12
 8005e42:	0019      	movs	r1, r3
 8005e44:	f006 f958 	bl	800c0f8 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005e48:	4ad4      	ldr	r2, [pc, #848]	@ (800619c <CreateMessage+0xc24>)
 8005e4a:	4bcf      	ldr	r3, [pc, #828]	@ (8006188 <CreateMessage+0xc10>)
 8005e4c:	0011      	movs	r1, r2
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f7ff faca 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
 8005e54:	4bd3      	ldr	r3, [pc, #844]	@ (80061a4 <CreateMessage+0xc2c>)
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	1c18      	adds	r0, r3, #0
 8005e5a:	f7fd fd1b 	bl	8003894 <__aeabi_f2d>
 8005e5e:	0002      	movs	r2, r0
 8005e60:	000b      	movs	r3, r1
 8005e62:	4cc9      	ldr	r4, [pc, #804]	@ (8006188 <CreateMessage+0xc10>)
 8005e64:	49c9      	ldr	r1, [pc, #804]	@ (800618c <CreateMessage+0xc14>)
 8005e66:	48ca      	ldr	r0, [pc, #808]	@ (8006190 <CreateMessage+0xc18>)
 8005e68:	9200      	str	r2, [sp, #0]
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	0022      	movs	r2, r4
 8005e6e:	f020 f9b3 	bl	80261d8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
#endif
      index += strlen(message);
 8005e72:	4bc7      	ldr	r3, [pc, #796]	@ (8006190 <CreateMessage+0xc18>)
 8005e74:	0018      	movs	r0, r3
 8005e76:	f7fa f979 	bl	800016c <strlen>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	b299      	uxth	r1, r3
 8005e7e:	220e      	movs	r2, #14
 8005e80:	18bb      	adds	r3, r7, r2
 8005e82:	18ba      	adds	r2, r7, r2
 8005e84:	8812      	ldrh	r2, [r2, #0]
 8005e86:	188a      	adds	r2, r1, r2
 8005e88:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005e8a:	1cfb      	adds	r3, r7, #3
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d019      	beq.n	8005ec6 <CreateMessage+0x94e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e92:	4bbf      	ldr	r3, [pc, #764]	@ (8006190 <CreateMessage+0xc18>)
 8005e94:	0018      	movs	r0, r3
 8005e96:	f7fa f969 	bl	800016c <strlen>
 8005e9a:	0003      	movs	r3, r0
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	4bbc      	ldr	r3, [pc, #752]	@ (8006190 <CreateMessage+0xc18>)
 8005ea0:	0011      	movs	r1, r2
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f7fe ffdc 	bl	8004e60 <ESP_Send>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	001a      	movs	r2, r3
 8005eac:	4bb9      	ldr	r3, [pc, #740]	@ (8006194 <CreateMessage+0xc1c>)
 8005eae:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005eb0:	4bb9      	ldr	r3, [pc, #740]	@ (8006198 <CreateMessage+0xc20>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	001a      	movs	r2, r3
 8005eb6:	4bb7      	ldr	r3, [pc, #732]	@ (8006194 <CreateMessage+0xc1c>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	1e5a      	subs	r2, r3, #1
 8005ebe:	4193      	sbcs	r3, r2
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	4bb5      	ldr	r3, [pc, #724]	@ (8006198 <CreateMessage+0xc20>)
 8005ec4:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005ec6:	4bb5      	ldr	r3, [pc, #724]	@ (800619c <CreateMessage+0xc24>)
 8005ec8:	48b7      	ldr	r0, [pc, #732]	@ (80061a8 <CreateMessage+0xc30>)
 8005eca:	220c      	movs	r2, #12
 8005ecc:	0019      	movs	r1, r3
 8005ece:	f006 f913 	bl	800c0f8 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005ed2:	4ab6      	ldr	r2, [pc, #728]	@ (80061ac <CreateMessage+0xc34>)
 8005ed4:	49b6      	ldr	r1, [pc, #728]	@ (80061b0 <CreateMessage+0xc38>)
 8005ed6:	4bb1      	ldr	r3, [pc, #708]	@ (800619c <CreateMessage+0xc24>)
 8005ed8:	0018      	movs	r0, r3
 8005eda:	f7ff fa25 	bl	8005328 <isKeyValid>
 8005ede:	1e03      	subs	r3, r0, #0
 8005ee0:	d03e      	beq.n	8005f60 <CreateMessage+0x9e8>
        uint8ArrayToString(Buffer, keybuffer);
 8005ee2:	4aae      	ldr	r2, [pc, #696]	@ (800619c <CreateMessage+0xc24>)
 8005ee4:	4ba8      	ldr	r3, [pc, #672]	@ (8006188 <CreateMessage+0xc10>)
 8005ee6:	0011      	movs	r1, r2
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f7ff fa7d 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
 8005eee:	4bad      	ldr	r3, [pc, #692]	@ (80061a4 <CreateMessage+0xc2c>)
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	1c18      	adds	r0, r3, #0
 8005ef4:	f7fd fcce 	bl	8003894 <__aeabi_f2d>
 8005ef8:	0002      	movs	r2, r0
 8005efa:	000b      	movs	r3, r1
 8005efc:	4ca2      	ldr	r4, [pc, #648]	@ (8006188 <CreateMessage+0xc10>)
 8005efe:	49a3      	ldr	r1, [pc, #652]	@ (800618c <CreateMessage+0xc14>)
 8005f00:	48a3      	ldr	r0, [pc, #652]	@ (8006190 <CreateMessage+0xc18>)
 8005f02:	9200      	str	r2, [sp, #0]
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	0022      	movs	r2, r4
 8005f08:	f020 f966 	bl	80261d8 <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
#endif
        index += strlen(message);
 8005f0c:	4ba0      	ldr	r3, [pc, #640]	@ (8006190 <CreateMessage+0xc18>)
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f7fa f92c 	bl	800016c <strlen>
 8005f14:	0003      	movs	r3, r0
 8005f16:	b299      	uxth	r1, r3
 8005f18:	220e      	movs	r2, #14
 8005f1a:	18bb      	adds	r3, r7, r2
 8005f1c:	18ba      	adds	r2, r7, r2
 8005f1e:	8812      	ldrh	r2, [r2, #0]
 8005f20:	188a      	adds	r2, r1, r2
 8005f22:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005f24:	1cfb      	adds	r3, r7, #3
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d019      	beq.n	8005f60 <CreateMessage+0x9e8>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005f2c:	4b98      	ldr	r3, [pc, #608]	@ (8006190 <CreateMessage+0xc18>)
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f7fa f91c 	bl	800016c <strlen>
 8005f34:	0003      	movs	r3, r0
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	4b95      	ldr	r3, [pc, #596]	@ (8006190 <CreateMessage+0xc18>)
 8005f3a:	0011      	movs	r1, r2
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f7fe ff8f 	bl	8004e60 <ESP_Send>
 8005f42:	0003      	movs	r3, r0
 8005f44:	001a      	movs	r2, r3
 8005f46:	4b93      	ldr	r3, [pc, #588]	@ (8006194 <CreateMessage+0xc1c>)
 8005f48:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005f4a:	4b93      	ldr	r3, [pc, #588]	@ (8006198 <CreateMessage+0xc20>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	001a      	movs	r2, r3
 8005f50:	4b90      	ldr	r3, [pc, #576]	@ (8006194 <CreateMessage+0xc1c>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	4013      	ands	r3, r2
 8005f56:	1e5a      	subs	r2, r3, #1
 8005f58:	4193      	sbcs	r3, r2
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	4b8e      	ldr	r3, [pc, #568]	@ (8006198 <CreateMessage+0xc20>)
 8005f5e:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005f60:	4b8e      	ldr	r3, [pc, #568]	@ (800619c <CreateMessage+0xc24>)
 8005f62:	4894      	ldr	r0, [pc, #592]	@ (80061b4 <CreateMessage+0xc3c>)
 8005f64:	220c      	movs	r2, #12
 8005f66:	0019      	movs	r1, r3
 8005f68:	f006 f8c6 	bl	800c0f8 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005f6c:	4a8b      	ldr	r2, [pc, #556]	@ (800619c <CreateMessage+0xc24>)
 8005f6e:	4b86      	ldr	r3, [pc, #536]	@ (8006188 <CreateMessage+0xc10>)
 8005f70:	0011      	movs	r1, r2
 8005f72:	0018      	movs	r0, r3
 8005f74:	f7ff fa38 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
 8005f78:	4b8a      	ldr	r3, [pc, #552]	@ (80061a4 <CreateMessage+0xc2c>)
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	1c18      	adds	r0, r3, #0
 8005f7e:	f7fd fc89 	bl	8003894 <__aeabi_f2d>
 8005f82:	0002      	movs	r2, r0
 8005f84:	000b      	movs	r3, r1
 8005f86:	4c80      	ldr	r4, [pc, #512]	@ (8006188 <CreateMessage+0xc10>)
 8005f88:	4980      	ldr	r1, [pc, #512]	@ (800618c <CreateMessage+0xc14>)
 8005f8a:	4881      	ldr	r0, [pc, #516]	@ (8006190 <CreateMessage+0xc18>)
 8005f8c:	9200      	str	r2, [sp, #0]
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	0022      	movs	r2, r4
 8005f92:	f020 f921 	bl	80261d8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
#endif
      index += strlen(message);
 8005f96:	4b7e      	ldr	r3, [pc, #504]	@ (8006190 <CreateMessage+0xc18>)
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f7fa f8e7 	bl	800016c <strlen>
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	b299      	uxth	r1, r3
 8005fa2:	220e      	movs	r2, #14
 8005fa4:	18bb      	adds	r3, r7, r2
 8005fa6:	18ba      	adds	r2, r7, r2
 8005fa8:	8812      	ldrh	r2, [r2, #0]
 8005faa:	188a      	adds	r2, r1, r2
 8005fac:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005fae:	1cfb      	adds	r3, r7, #3
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d019      	beq.n	8005fea <CreateMessage+0xa72>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fb6:	4b76      	ldr	r3, [pc, #472]	@ (8006190 <CreateMessage+0xc18>)
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f7fa f8d7 	bl	800016c <strlen>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	4b73      	ldr	r3, [pc, #460]	@ (8006190 <CreateMessage+0xc18>)
 8005fc4:	0011      	movs	r1, r2
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f7fe ff4a 	bl	8004e60 <ESP_Send>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	001a      	movs	r2, r3
 8005fd0:	4b70      	ldr	r3, [pc, #448]	@ (8006194 <CreateMessage+0xc1c>)
 8005fd2:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005fd4:	4b70      	ldr	r3, [pc, #448]	@ (8006198 <CreateMessage+0xc20>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	001a      	movs	r2, r3
 8005fda:	4b6e      	ldr	r3, [pc, #440]	@ (8006194 <CreateMessage+0xc1c>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	1e5a      	subs	r2, r3, #1
 8005fe2:	4193      	sbcs	r3, r2
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	4b6c      	ldr	r3, [pc, #432]	@ (8006198 <CreateMessage+0xc20>)
 8005fe8:	701a      	strb	r2, [r3, #0]
      }
    }

  if (IsAHT20SensorPresent()) {
 8005fea:	f007 fa43 	bl	800d474 <IsAHT20SensorPresent>
 8005fee:	1e03      	subs	r3, r0, #0
 8005ff0:	d100      	bne.n	8005ff4 <CreateMessage+0xa7c>
 8005ff2:	e099      	b.n	8006128 <CreateMessage+0xbb0>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005ff4:	4b69      	ldr	r3, [pc, #420]	@ (800619c <CreateMessage+0xc24>)
 8005ff6:	4870      	ldr	r0, [pc, #448]	@ (80061b8 <CreateMessage+0xc40>)
 8005ff8:	220c      	movs	r2, #12
 8005ffa:	0019      	movs	r1, r3
 8005ffc:	f006 f87c 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8006000:	4a6e      	ldr	r2, [pc, #440]	@ (80061bc <CreateMessage+0xc44>)
 8006002:	496f      	ldr	r1, [pc, #444]	@ (80061c0 <CreateMessage+0xc48>)
 8006004:	4b65      	ldr	r3, [pc, #404]	@ (800619c <CreateMessage+0xc24>)
 8006006:	0018      	movs	r0, r3
 8006008:	f7ff f98e 	bl	8005328 <isKeyValid>
 800600c:	1e03      	subs	r3, r0, #0
 800600e:	d03e      	beq.n	800608e <CreateMessage+0xb16>
      uint8ArrayToString(Buffer, keybuffer);
 8006010:	4a62      	ldr	r2, [pc, #392]	@ (800619c <CreateMessage+0xc24>)
 8006012:	4b5d      	ldr	r3, [pc, #372]	@ (8006188 <CreateMessage+0xc10>)
 8006014:	0011      	movs	r1, r2
 8006016:	0018      	movs	r0, r3
 8006018:	f7ff f9e6 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperature);
 800601c:	4b61      	ldr	r3, [pc, #388]	@ (80061a4 <CreateMessage+0xc2c>)
 800601e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006020:	1c18      	adds	r0, r3, #0
 8006022:	f7fd fc37 	bl	8003894 <__aeabi_f2d>
 8006026:	0002      	movs	r2, r0
 8006028:	000b      	movs	r3, r1
 800602a:	4c57      	ldr	r4, [pc, #348]	@ (8006188 <CreateMessage+0xc10>)
 800602c:	4957      	ldr	r1, [pc, #348]	@ (800618c <CreateMessage+0xc14>)
 800602e:	4858      	ldr	r0, [pc, #352]	@ (8006190 <CreateMessage+0xc18>)
 8006030:	9200      	str	r2, [sp, #0]
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	0022      	movs	r2, r4
 8006036:	f020 f8cf 	bl	80261d8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperature);
#endif
      index += strlen(message);
 800603a:	4b55      	ldr	r3, [pc, #340]	@ (8006190 <CreateMessage+0xc18>)
 800603c:	0018      	movs	r0, r3
 800603e:	f7fa f895 	bl	800016c <strlen>
 8006042:	0003      	movs	r3, r0
 8006044:	b299      	uxth	r1, r3
 8006046:	220e      	movs	r2, #14
 8006048:	18bb      	adds	r3, r7, r2
 800604a:	18ba      	adds	r2, r7, r2
 800604c:	8812      	ldrh	r2, [r2, #0]
 800604e:	188a      	adds	r2, r1, r2
 8006050:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006052:	1cfb      	adds	r3, r7, #3
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d019      	beq.n	800608e <CreateMessage+0xb16>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800605a:	4b4d      	ldr	r3, [pc, #308]	@ (8006190 <CreateMessage+0xc18>)
 800605c:	0018      	movs	r0, r3
 800605e:	f7fa f885 	bl	800016c <strlen>
 8006062:	0003      	movs	r3, r0
 8006064:	b29a      	uxth	r2, r3
 8006066:	4b4a      	ldr	r3, [pc, #296]	@ (8006190 <CreateMessage+0xc18>)
 8006068:	0011      	movs	r1, r2
 800606a:	0018      	movs	r0, r3
 800606c:	f7fe fef8 	bl	8004e60 <ESP_Send>
 8006070:	0003      	movs	r3, r0
 8006072:	001a      	movs	r2, r3
 8006074:	4b47      	ldr	r3, [pc, #284]	@ (8006194 <CreateMessage+0xc1c>)
 8006076:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006078:	4b47      	ldr	r3, [pc, #284]	@ (8006198 <CreateMessage+0xc20>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	001a      	movs	r2, r3
 800607e:	4b45      	ldr	r3, [pc, #276]	@ (8006194 <CreateMessage+0xc1c>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	4013      	ands	r3, r2
 8006084:	1e5a      	subs	r2, r3, #1
 8006086:	4193      	sbcs	r3, r2
 8006088:	b2da      	uxtb	r2, r3
 800608a:	4b43      	ldr	r3, [pc, #268]	@ (8006198 <CreateMessage+0xc20>)
 800608c:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 800608e:	4b43      	ldr	r3, [pc, #268]	@ (800619c <CreateMessage+0xc24>)
 8006090:	484c      	ldr	r0, [pc, #304]	@ (80061c4 <CreateMessage+0xc4c>)
 8006092:	220c      	movs	r2, #12
 8006094:	0019      	movs	r1, r3
 8006096:	f006 f82f 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 800609a:	4a4b      	ldr	r2, [pc, #300]	@ (80061c8 <CreateMessage+0xc50>)
 800609c:	4948      	ldr	r1, [pc, #288]	@ (80061c0 <CreateMessage+0xc48>)
 800609e:	4b3f      	ldr	r3, [pc, #252]	@ (800619c <CreateMessage+0xc24>)
 80060a0:	0018      	movs	r0, r3
 80060a2:	f7ff f941 	bl	8005328 <isKeyValid>
 80060a6:	1e03      	subs	r3, r0, #0
 80060a8:	d03e      	beq.n	8006128 <CreateMessage+0xbb0>
      uint8ArrayToString(Buffer, keybuffer);
 80060aa:	4a3c      	ldr	r2, [pc, #240]	@ (800619c <CreateMessage+0xc24>)
 80060ac:	4b36      	ldr	r3, [pc, #216]	@ (8006188 <CreateMessage+0xc10>)
 80060ae:	0011      	movs	r1, r2
 80060b0:	0018      	movs	r0, r3
 80060b2:	f7ff f999 	bl	80053e8 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humidity);
 80060b6:	4b3b      	ldr	r3, [pc, #236]	@ (80061a4 <CreateMessage+0xc2c>)
 80060b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ba:	1c18      	adds	r0, r3, #0
 80060bc:	f7fd fbea 	bl	8003894 <__aeabi_f2d>
 80060c0:	0002      	movs	r2, r0
 80060c2:	000b      	movs	r3, r1
 80060c4:	4c30      	ldr	r4, [pc, #192]	@ (8006188 <CreateMessage+0xc10>)
 80060c6:	4931      	ldr	r1, [pc, #196]	@ (800618c <CreateMessage+0xc14>)
 80060c8:	4831      	ldr	r0, [pc, #196]	@ (8006190 <CreateMessage+0xc18>)
 80060ca:	9200      	str	r2, [sp, #0]
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	0022      	movs	r2, r4
 80060d0:	f020 f882 	bl	80261d8 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humidity);
  #endif
      index += strlen(message);
 80060d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006190 <CreateMessage+0xc18>)
 80060d6:	0018      	movs	r0, r3
 80060d8:	f7fa f848 	bl	800016c <strlen>
 80060dc:	0003      	movs	r3, r0
 80060de:	b299      	uxth	r1, r3
 80060e0:	220e      	movs	r2, #14
 80060e2:	18bb      	adds	r3, r7, r2
 80060e4:	18ba      	adds	r2, r7, r2
 80060e6:	8812      	ldrh	r2, [r2, #0]
 80060e8:	188a      	adds	r2, r1, r2
 80060ea:	801a      	strh	r2, [r3, #0]
      if (send) {
 80060ec:	1cfb      	adds	r3, r7, #3
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d019      	beq.n	8006128 <CreateMessage+0xbb0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80060f4:	4b26      	ldr	r3, [pc, #152]	@ (8006190 <CreateMessage+0xc18>)
 80060f6:	0018      	movs	r0, r3
 80060f8:	f7fa f838 	bl	800016c <strlen>
 80060fc:	0003      	movs	r3, r0
 80060fe:	b29a      	uxth	r2, r3
 8006100:	4b23      	ldr	r3, [pc, #140]	@ (8006190 <CreateMessage+0xc18>)
 8006102:	0011      	movs	r1, r2
 8006104:	0018      	movs	r0, r3
 8006106:	f7fe feab 	bl	8004e60 <ESP_Send>
 800610a:	0003      	movs	r3, r0
 800610c:	001a      	movs	r2, r3
 800610e:	4b21      	ldr	r3, [pc, #132]	@ (8006194 <CreateMessage+0xc1c>)
 8006110:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006112:	4b21      	ldr	r3, [pc, #132]	@ (8006198 <CreateMessage+0xc20>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	001a      	movs	r2, r3
 8006118:	4b1e      	ldr	r3, [pc, #120]	@ (8006194 <CreateMessage+0xc1c>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	4013      	ands	r3, r2
 800611e:	1e5a      	subs	r2, r3, #1
 8006120:	4193      	sbcs	r3, r2
 8006122:	b2da      	uxtb	r2, r3
 8006124:	4b1c      	ldr	r3, [pc, #112]	@ (8006198 <CreateMessage+0xc20>)
 8006126:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8006128:	f007 f9b8 	bl	800d49c <IsENS160SensorPresent>
 800612c:	1e03      	subs	r3, r0, #0
 800612e:	d100      	bne.n	8006132 <CreateMessage+0xbba>
 8006130:	e0fc      	b.n	800632c <CreateMessage+0xdb4>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 8006132:	4b1a      	ldr	r3, [pc, #104]	@ (800619c <CreateMessage+0xc24>)
 8006134:	4825      	ldr	r0, [pc, #148]	@ (80061cc <CreateMessage+0xc54>)
 8006136:	220c      	movs	r2, #12
 8006138:	0019      	movs	r1, r3
 800613a:	f005 ffdd 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 800613e:	4a24      	ldr	r2, [pc, #144]	@ (80061d0 <CreateMessage+0xc58>)
 8006140:	4924      	ldr	r1, [pc, #144]	@ (80061d4 <CreateMessage+0xc5c>)
 8006142:	4b16      	ldr	r3, [pc, #88]	@ (800619c <CreateMessage+0xc24>)
 8006144:	0018      	movs	r0, r3
 8006146:	f7ff f8ef 	bl	8005328 <isKeyValid>
 800614a:	1e03      	subs	r3, r0, #0
 800614c:	d062      	beq.n	8006214 <CreateMessage+0xc9c>
      uint8ArrayToString(Buffer, keybuffer);
 800614e:	4a13      	ldr	r2, [pc, #76]	@ (800619c <CreateMessage+0xc24>)
 8006150:	4b0d      	ldr	r3, [pc, #52]	@ (8006188 <CreateMessage+0xc10>)
 8006152:	0011      	movs	r1, r2
 8006154:	0018      	movs	r0, r3
 8006156:	f7ff f947 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
 800615a:	4b12      	ldr	r3, [pc, #72]	@ (80061a4 <CreateMessage+0xc2c>)
 800615c:	2255      	movs	r2, #85	@ 0x55
 800615e:	5c9b      	ldrb	r3, [r3, r2]
 8006160:	4a09      	ldr	r2, [pc, #36]	@ (8006188 <CreateMessage+0xc10>)
 8006162:	491d      	ldr	r1, [pc, #116]	@ (80061d8 <CreateMessage+0xc60>)
 8006164:	480a      	ldr	r0, [pc, #40]	@ (8006190 <CreateMessage+0xc18>)
 8006166:	f020 f837 	bl	80261d8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
#endif
      index += strlen(message);
 800616a:	4b09      	ldr	r3, [pc, #36]	@ (8006190 <CreateMessage+0xc18>)
 800616c:	0018      	movs	r0, r3
 800616e:	f7f9 fffd 	bl	800016c <strlen>
 8006172:	0003      	movs	r3, r0
 8006174:	b299      	uxth	r1, r3
 8006176:	220e      	movs	r2, #14
 8006178:	18bb      	adds	r3, r7, r2
 800617a:	18ba      	adds	r2, r7, r2
 800617c:	8812      	ldrh	r2, [r2, #0]
 800617e:	188a      	adds	r2, r1, r2
 8006180:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006182:	1cfb      	adds	r3, r7, #3
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	e029      	b.n	80061dc <CreateMessage+0xc64>
 8006188:	20000840 	.word	0x20000840
 800618c:	0802abfc 	.word	0x0802abfc
 8006190:	200005c4 	.word	0x200005c4
 8006194:	20000859 	.word	0x20000859
 8006198:	20000032 	.word	0x20000032
 800619c:	20000834 	.word	0x20000834
 80061a0:	08080054 	.word	0x08080054
 80061a4:	20000704 	.word	0x20000704
 80061a8:	080800bc 	.word	0x080800bc
 80061ac:	0802acfc 	.word	0x0802acfc
 80061b0:	0802ad0c 	.word	0x0802ad0c
 80061b4:	08080060 	.word	0x08080060
 80061b8:	080800c8 	.word	0x080800c8
 80061bc:	0802acbc 	.word	0x0802acbc
 80061c0:	0802ad10 	.word	0x0802ad10
 80061c4:	080800d4 	.word	0x080800d4
 80061c8:	0802acf0 	.word	0x0802acf0
 80061cc:	080800ec 	.word	0x080800ec
 80061d0:	0802ad18 	.word	0x0802ad18
 80061d4:	0802ad2c 	.word	0x0802ad2c
 80061d8:	0802ac1c 	.word	0x0802ac1c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d019      	beq.n	8006214 <CreateMessage+0xc9c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80061e0:	4b80      	ldr	r3, [pc, #512]	@ (80063e4 <CreateMessage+0xe6c>)
 80061e2:	0018      	movs	r0, r3
 80061e4:	f7f9 ffc2 	bl	800016c <strlen>
 80061e8:	0003      	movs	r3, r0
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	4b7d      	ldr	r3, [pc, #500]	@ (80063e4 <CreateMessage+0xe6c>)
 80061ee:	0011      	movs	r1, r2
 80061f0:	0018      	movs	r0, r3
 80061f2:	f7fe fe35 	bl	8004e60 <ESP_Send>
 80061f6:	0003      	movs	r3, r0
 80061f8:	001a      	movs	r2, r3
 80061fa:	4b7b      	ldr	r3, [pc, #492]	@ (80063e8 <CreateMessage+0xe70>)
 80061fc:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80061fe:	4b7b      	ldr	r3, [pc, #492]	@ (80063ec <CreateMessage+0xe74>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	001a      	movs	r2, r3
 8006204:	4b78      	ldr	r3, [pc, #480]	@ (80063e8 <CreateMessage+0xe70>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	4013      	ands	r3, r2
 800620a:	1e5a      	subs	r2, r3, #1
 800620c:	4193      	sbcs	r3, r2
 800620e:	b2da      	uxtb	r2, r3
 8006210:	4b76      	ldr	r3, [pc, #472]	@ (80063ec <CreateMessage+0xe74>)
 8006212:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 8006214:	4b76      	ldr	r3, [pc, #472]	@ (80063f0 <CreateMessage+0xe78>)
 8006216:	4877      	ldr	r0, [pc, #476]	@ (80063f4 <CreateMessage+0xe7c>)
 8006218:	220c      	movs	r2, #12
 800621a:	0019      	movs	r1, r3
 800621c:	f005 ff6c 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 8006220:	4a75      	ldr	r2, [pc, #468]	@ (80063f8 <CreateMessage+0xe80>)
 8006222:	4976      	ldr	r1, [pc, #472]	@ (80063fc <CreateMessage+0xe84>)
 8006224:	4b72      	ldr	r3, [pc, #456]	@ (80063f0 <CreateMessage+0xe78>)
 8006226:	0018      	movs	r0, r3
 8006228:	f7ff f87e 	bl	8005328 <isKeyValid>
 800622c:	1e03      	subs	r3, r0, #0
 800622e:	d037      	beq.n	80062a0 <CreateMessage+0xd28>
      uint8ArrayToString(Buffer, keybuffer);
 8006230:	4a6f      	ldr	r2, [pc, #444]	@ (80063f0 <CreateMessage+0xe78>)
 8006232:	4b73      	ldr	r3, [pc, #460]	@ (8006400 <CreateMessage+0xe88>)
 8006234:	0011      	movs	r1, r2
 8006236:	0018      	movs	r0, r3
 8006238:	f7ff f8d6 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
 800623c:	4b71      	ldr	r3, [pc, #452]	@ (8006404 <CreateMessage+0xe8c>)
 800623e:	224a      	movs	r2, #74	@ 0x4a
 8006240:	5a9b      	ldrh	r3, [r3, r2]
 8006242:	4a6f      	ldr	r2, [pc, #444]	@ (8006400 <CreateMessage+0xe88>)
 8006244:	4970      	ldr	r1, [pc, #448]	@ (8006408 <CreateMessage+0xe90>)
 8006246:	4867      	ldr	r0, [pc, #412]	@ (80063e4 <CreateMessage+0xe6c>)
 8006248:	f01f ffc6 	bl	80261d8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
#endif
      index += strlen(message);
 800624c:	4b65      	ldr	r3, [pc, #404]	@ (80063e4 <CreateMessage+0xe6c>)
 800624e:	0018      	movs	r0, r3
 8006250:	f7f9 ff8c 	bl	800016c <strlen>
 8006254:	0003      	movs	r3, r0
 8006256:	b299      	uxth	r1, r3
 8006258:	220e      	movs	r2, #14
 800625a:	18bb      	adds	r3, r7, r2
 800625c:	18ba      	adds	r2, r7, r2
 800625e:	8812      	ldrh	r2, [r2, #0]
 8006260:	188a      	adds	r2, r1, r2
 8006262:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006264:	1cfb      	adds	r3, r7, #3
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d019      	beq.n	80062a0 <CreateMessage+0xd28>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800626c:	4b5d      	ldr	r3, [pc, #372]	@ (80063e4 <CreateMessage+0xe6c>)
 800626e:	0018      	movs	r0, r3
 8006270:	f7f9 ff7c 	bl	800016c <strlen>
 8006274:	0003      	movs	r3, r0
 8006276:	b29a      	uxth	r2, r3
 8006278:	4b5a      	ldr	r3, [pc, #360]	@ (80063e4 <CreateMessage+0xe6c>)
 800627a:	0011      	movs	r1, r2
 800627c:	0018      	movs	r0, r3
 800627e:	f7fe fdef 	bl	8004e60 <ESP_Send>
 8006282:	0003      	movs	r3, r0
 8006284:	001a      	movs	r2, r3
 8006286:	4b58      	ldr	r3, [pc, #352]	@ (80063e8 <CreateMessage+0xe70>)
 8006288:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800628a:	4b58      	ldr	r3, [pc, #352]	@ (80063ec <CreateMessage+0xe74>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	001a      	movs	r2, r3
 8006290:	4b55      	ldr	r3, [pc, #340]	@ (80063e8 <CreateMessage+0xe70>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	4013      	ands	r3, r2
 8006296:	1e5a      	subs	r2, r3, #1
 8006298:	4193      	sbcs	r3, r2
 800629a:	b2da      	uxtb	r2, r3
 800629c:	4b53      	ldr	r3, [pc, #332]	@ (80063ec <CreateMessage+0xe74>)
 800629e:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 80062a0:	4b53      	ldr	r3, [pc, #332]	@ (80063f0 <CreateMessage+0xe78>)
 80062a2:	485a      	ldr	r0, [pc, #360]	@ (800640c <CreateMessage+0xe94>)
 80062a4:	220c      	movs	r2, #12
 80062a6:	0019      	movs	r1, r3
 80062a8:	f005 ff26 	bl	800c0f8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 80062ac:	4a58      	ldr	r2, [pc, #352]	@ (8006410 <CreateMessage+0xe98>)
 80062ae:	4953      	ldr	r1, [pc, #332]	@ (80063fc <CreateMessage+0xe84>)
 80062b0:	4b4f      	ldr	r3, [pc, #316]	@ (80063f0 <CreateMessage+0xe78>)
 80062b2:	0018      	movs	r0, r3
 80062b4:	f7ff f838 	bl	8005328 <isKeyValid>
 80062b8:	1e03      	subs	r3, r0, #0
 80062ba:	d037      	beq.n	800632c <CreateMessage+0xdb4>
      uint8ArrayToString(Buffer, keybuffer);
 80062bc:	4a4c      	ldr	r2, [pc, #304]	@ (80063f0 <CreateMessage+0xe78>)
 80062be:	4b50      	ldr	r3, [pc, #320]	@ (8006400 <CreateMessage+0xe88>)
 80062c0:	0011      	movs	r1, r2
 80062c2:	0018      	movs	r0, r3
 80062c4:	f7ff f890 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
 80062c8:	4b4e      	ldr	r3, [pc, #312]	@ (8006404 <CreateMessage+0xe8c>)
 80062ca:	2252      	movs	r2, #82	@ 0x52
 80062cc:	5a9b      	ldrh	r3, [r3, r2]
 80062ce:	4a4c      	ldr	r2, [pc, #304]	@ (8006400 <CreateMessage+0xe88>)
 80062d0:	494d      	ldr	r1, [pc, #308]	@ (8006408 <CreateMessage+0xe90>)
 80062d2:	4844      	ldr	r0, [pc, #272]	@ (80063e4 <CreateMessage+0xe6c>)
 80062d4:	f01f ff80 	bl	80261d8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
#endif
      index += strlen(message);
 80062d8:	4b42      	ldr	r3, [pc, #264]	@ (80063e4 <CreateMessage+0xe6c>)
 80062da:	0018      	movs	r0, r3
 80062dc:	f7f9 ff46 	bl	800016c <strlen>
 80062e0:	0003      	movs	r3, r0
 80062e2:	b299      	uxth	r1, r3
 80062e4:	220e      	movs	r2, #14
 80062e6:	18bb      	adds	r3, r7, r2
 80062e8:	18ba      	adds	r2, r7, r2
 80062ea:	8812      	ldrh	r2, [r2, #0]
 80062ec:	188a      	adds	r2, r1, r2
 80062ee:	801a      	strh	r2, [r3, #0]
      if (send) {
 80062f0:	1cfb      	adds	r3, r7, #3
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d019      	beq.n	800632c <CreateMessage+0xdb4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80062f8:	4b3a      	ldr	r3, [pc, #232]	@ (80063e4 <CreateMessage+0xe6c>)
 80062fa:	0018      	movs	r0, r3
 80062fc:	f7f9 ff36 	bl	800016c <strlen>
 8006300:	0003      	movs	r3, r0
 8006302:	b29a      	uxth	r2, r3
 8006304:	4b37      	ldr	r3, [pc, #220]	@ (80063e4 <CreateMessage+0xe6c>)
 8006306:	0011      	movs	r1, r2
 8006308:	0018      	movs	r0, r3
 800630a:	f7fe fda9 	bl	8004e60 <ESP_Send>
 800630e:	0003      	movs	r3, r0
 8006310:	001a      	movs	r2, r3
 8006312:	4b35      	ldr	r3, [pc, #212]	@ (80063e8 <CreateMessage+0xe70>)
 8006314:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006316:	4b35      	ldr	r3, [pc, #212]	@ (80063ec <CreateMessage+0xe74>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	001a      	movs	r2, r3
 800631c:	4b32      	ldr	r3, [pc, #200]	@ (80063e8 <CreateMessage+0xe70>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	4013      	ands	r3, r2
 8006322:	1e5a      	subs	r2, r3, #1
 8006324:	4193      	sbcs	r3, r2
 8006326:	b2da      	uxtb	r2, r3
 8006328:	4b30      	ldr	r3, [pc, #192]	@ (80063ec <CreateMessage+0xe74>)
 800632a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 800632c:	4b30      	ldr	r3, [pc, #192]	@ (80063f0 <CreateMessage+0xe78>)
 800632e:	4839      	ldr	r0, [pc, #228]	@ (8006414 <CreateMessage+0xe9c>)
 8006330:	220c      	movs	r2, #12
 8006332:	0019      	movs	r1, r3
 8006334:	f005 fee0 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8006338:	4a2d      	ldr	r2, [pc, #180]	@ (80063f0 <CreateMessage+0xe78>)
 800633a:	4b31      	ldr	r3, [pc, #196]	@ (8006400 <CreateMessage+0xe88>)
 800633c:	0011      	movs	r1, r2
 800633e:	0018      	movs	r0, r3
 8006340:	f7ff f852 	bl	80053e8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
 8006344:	4b34      	ldr	r3, [pc, #208]	@ (8006418 <CreateMessage+0xea0>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	1c18      	adds	r0, r3, #0
 800634a:	f7fd faa3 	bl	8003894 <__aeabi_f2d>
 800634e:	0002      	movs	r2, r0
 8006350:	000b      	movs	r3, r1
 8006352:	4c2b      	ldr	r4, [pc, #172]	@ (8006400 <CreateMessage+0xe88>)
 8006354:	4931      	ldr	r1, [pc, #196]	@ (800641c <CreateMessage+0xea4>)
 8006356:	4823      	ldr	r0, [pc, #140]	@ (80063e4 <CreateMessage+0xe6c>)
 8006358:	9200      	str	r2, [sp, #0]
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	0022      	movs	r2, r4
 800635e:	f01f ff3b 	bl	80261d8 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8006362:	4b20      	ldr	r3, [pc, #128]	@ (80063e4 <CreateMessage+0xe6c>)
 8006364:	0018      	movs	r0, r3
 8006366:	f7f9 ff01 	bl	800016c <strlen>
 800636a:	0002      	movs	r2, r0
 800636c:	4b1d      	ldr	r3, [pc, #116]	@ (80063e4 <CreateMessage+0xe6c>)
 800636e:	18d3      	adds	r3, r2, r3
 8006370:	4a2b      	ldr	r2, [pc, #172]	@ (8006420 <CreateMessage+0xea8>)
 8006372:	0011      	movs	r1, r2
 8006374:	0018      	movs	r0, r3
 8006376:	f01f ff2f 	bl	80261d8 <siprintf>
  index += strlen(message);
 800637a:	4b1a      	ldr	r3, [pc, #104]	@ (80063e4 <CreateMessage+0xe6c>)
 800637c:	0018      	movs	r0, r3
 800637e:	f7f9 fef5 	bl	800016c <strlen>
 8006382:	0003      	movs	r3, r0
 8006384:	b299      	uxth	r1, r3
 8006386:	220e      	movs	r2, #14
 8006388:	18bb      	adds	r3, r7, r2
 800638a:	18ba      	adds	r2, r7, r2
 800638c:	8812      	ldrh	r2, [r2, #0]
 800638e:	188a      	adds	r2, r1, r2
 8006390:	801a      	strh	r2, [r3, #0]
  if (send) {
 8006392:	1cfb      	adds	r3, r7, #3
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d019      	beq.n	80063ce <CreateMessage+0xe56>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800639a:	4b12      	ldr	r3, [pc, #72]	@ (80063e4 <CreateMessage+0xe6c>)
 800639c:	0018      	movs	r0, r3
 800639e:	f7f9 fee5 	bl	800016c <strlen>
 80063a2:	0003      	movs	r3, r0
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	4b0f      	ldr	r3, [pc, #60]	@ (80063e4 <CreateMessage+0xe6c>)
 80063a8:	0011      	movs	r1, r2
 80063aa:	0018      	movs	r0, r3
 80063ac:	f7fe fd58 	bl	8004e60 <ESP_Send>
 80063b0:	0003      	movs	r3, r0
 80063b2:	001a      	movs	r2, r3
 80063b4:	4b0c      	ldr	r3, [pc, #48]	@ (80063e8 <CreateMessage+0xe70>)
 80063b6:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80063b8:	4b0c      	ldr	r3, [pc, #48]	@ (80063ec <CreateMessage+0xe74>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	001a      	movs	r2, r3
 80063be:	4b0a      	ldr	r3, [pc, #40]	@ (80063e8 <CreateMessage+0xe70>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	4013      	ands	r3, r2
 80063c4:	1e5a      	subs	r2, r3, #1
 80063c6:	4193      	sbcs	r3, r2
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	4b08      	ldr	r3, [pc, #32]	@ (80063ec <CreateMessage+0xe74>)
 80063cc:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 80063ce:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <CreateMessage+0xe74>)
 80063d0:	781a      	ldrb	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	701a      	strb	r2, [r3, #0]
  return index;
 80063d6:	230e      	movs	r3, #14
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	881b      	ldrh	r3, [r3, #0]
}
 80063dc:	0018      	movs	r0, r3
 80063de:	46bd      	mov	sp, r7
 80063e0:	b004      	add	sp, #16
 80063e2:	bdb0      	pop	{r4, r5, r7, pc}
 80063e4:	200005c4 	.word	0x200005c4
 80063e8:	20000859 	.word	0x20000859
 80063ec:	20000032 	.word	0x20000032
 80063f0:	20000834 	.word	0x20000834
 80063f4:	080800f8 	.word	0x080800f8
 80063f8:	0802ad34 	.word	0x0802ad34
 80063fc:	0802ad2c 	.word	0x0802ad2c
 8006400:	20000840 	.word	0x20000840
 8006404:	20000704 	.word	0x20000704
 8006408:	0802ac1c 	.word	0x0802ac1c
 800640c:	08080104 	.word	0x08080104
 8006410:	0802ad3c 	.word	0x0802ad3c
 8006414:	0808006c 	.word	0x0808006c
 8006418:	20002158 	.word	0x20002158
 800641c:	0802abfc 	.word	0x0802abfc
 8006420:	0802ad44 	.word	0x0802ad44

08006424 <StartProg>:

void StartProg(){
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8006428:	2064      	movs	r0, #100	@ 0x64
 800642a:	f00e fa2d 	bl	8014888 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800642e:	4b15      	ldr	r3, [pc, #84]	@ (8006484 <StartProg+0x60>)
 8006430:	2200      	movs	r2, #0
 8006432:	2101      	movs	r1, #1
 8006434:	0018      	movs	r0, r3
 8006436:	f00f fc90 	bl	8015d5a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800643a:	2064      	movs	r0, #100	@ 0x64
 800643c:	f00e fa24 	bl	8014888 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8006440:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <StartProg+0x60>)
 8006442:	2200      	movs	r2, #0
 8006444:	2102      	movs	r1, #2
 8006446:	0018      	movs	r0, r3
 8006448:	f00f fc87 	bl	8015d5a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800644c:	23fa      	movs	r3, #250	@ 0xfa
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	0018      	movs	r0, r3
 8006452:	f00e fa19 	bl	8014888 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006456:	4b0b      	ldr	r3, [pc, #44]	@ (8006484 <StartProg+0x60>)
 8006458:	2201      	movs	r2, #1
 800645a:	2101      	movs	r1, #1
 800645c:	0018      	movs	r0, r3
 800645e:	f00f fc7c 	bl	8015d5a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8006462:	23fa      	movs	r3, #250	@ 0xfa
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	0018      	movs	r0, r3
 8006468:	f00e fa0e 	bl	8014888 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 800646c:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <StartProg+0x60>)
 800646e:	2201      	movs	r2, #1
 8006470:	2102      	movs	r1, #2
 8006472:	0018      	movs	r0, r3
 8006474:	f00f fc71 	bl	8015d5a <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8006478:	2028      	movs	r0, #40	@ 0x28
 800647a:	f00e fa05 	bl	8014888 <HAL_Delay>
}
 800647e:	46c0      	nop			@ (mov r8, r8)
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	50001c00 	.word	0x50001c00

08006488 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8006488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648a:	b0d9      	sub	sp, #356	@ 0x164
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	0008      	movs	r0, r1
 8006492:	0011      	movs	r1, r2
 8006494:	4bab      	ldr	r3, [pc, #684]	@ (8006744 <ParseBuffer+0x2bc>)
 8006496:	24b0      	movs	r4, #176	@ 0xb0
 8006498:	0064      	lsls	r4, r4, #1
 800649a:	191b      	adds	r3, r3, r4
 800649c:	19db      	adds	r3, r3, r7
 800649e:	1c02      	adds	r2, r0, #0
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	4ba9      	ldr	r3, [pc, #676]	@ (8006748 <ParseBuffer+0x2c0>)
 80064a4:	191b      	adds	r3, r3, r4
 80064a6:	19db      	adds	r3, r3, r7
 80064a8:	1c0a      	adds	r2, r1, #0
 80064aa:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 80064ac:	2380      	movs	r3, #128	@ 0x80
 80064ae:	005a      	lsls	r2, r3, #1
 80064b0:	2348      	movs	r3, #72	@ 0x48
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	2100      	movs	r1, #0
 80064b6:	0018      	movs	r0, r3
 80064b8:	f01f ffd6 	bl	8026468 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 80064bc:	2360      	movs	r3, #96	@ 0x60
 80064be:	33ff      	adds	r3, #255	@ 0xff
 80064c0:	18fb      	adds	r3, r7, r3
 80064c2:	2203      	movs	r2, #3
 80064c4:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80064c6:	23ae      	movs	r3, #174	@ 0xae
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	2200      	movs	r2, #0
 80064ce:	801a      	strh	r2, [r3, #0]
 80064d0:	e013      	b.n	80064fa <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80064d2:	20ae      	movs	r0, #174	@ 0xae
 80064d4:	0040      	lsls	r0, r0, #1
 80064d6:	183b      	adds	r3, r7, r0
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	18d2      	adds	r2, r2, r3
 80064de:	183b      	adds	r3, r7, r0
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	7811      	ldrb	r1, [r2, #0]
 80064e4:	4a99      	ldr	r2, [pc, #612]	@ (800674c <ParseBuffer+0x2c4>)
 80064e6:	24b0      	movs	r4, #176	@ 0xb0
 80064e8:	0064      	lsls	r4, r4, #1
 80064ea:	1912      	adds	r2, r2, r4
 80064ec:	19d2      	adds	r2, r2, r7
 80064ee:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80064f0:	183b      	adds	r3, r7, r0
 80064f2:	881a      	ldrh	r2, [r3, #0]
 80064f4:	183b      	adds	r3, r7, r0
 80064f6:	3201      	adds	r2, #1
 80064f8:	801a      	strh	r2, [r3, #0]
 80064fa:	23ae      	movs	r3, #174	@ 0xae
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	18fa      	adds	r2, r7, r3
 8006500:	4b90      	ldr	r3, [pc, #576]	@ (8006744 <ParseBuffer+0x2bc>)
 8006502:	21b0      	movs	r1, #176	@ 0xb0
 8006504:	0049      	lsls	r1, r1, #1
 8006506:	185b      	adds	r3, r3, r1
 8006508:	19db      	adds	r3, r3, r7
 800650a:	8812      	ldrh	r2, [r2, #0]
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d3df      	bcc.n	80064d2 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8006512:	4b8c      	ldr	r3, [pc, #560]	@ (8006744 <ParseBuffer+0x2bc>)
 8006514:	185b      	adds	r3, r3, r1
 8006516:	19db      	adds	r3, r3, r7
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	4a8c      	ldr	r2, [pc, #560]	@ (800674c <ParseBuffer+0x2c4>)
 800651c:	1852      	adds	r2, r2, r1
 800651e:	19d2      	adds	r2, r2, r7
 8006520:	2100      	movs	r1, #0
 8006522:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8006524:	f00d fcb8 	bl	8013e98 <GetVerboseLevel>
 8006528:	0003      	movs	r3, r0
 800652a:	2b03      	cmp	r3, #3
 800652c:	d115      	bne.n	800655a <ParseBuffer+0xd2>
#ifdef LONGMESSAGES
  if (usblog && Check_USB_PowerOn()) {
 800652e:	4b88      	ldr	r3, [pc, #544]	@ (8006750 <ParseBuffer+0x2c8>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <ParseBuffer+0xc4>
 8006536:	f003 fb6f 	bl	8009c18 <Check_USB_PowerOn>
 800653a:	1e03      	subs	r3, r0, #0
 800653c:	d006      	beq.n	800654c <ParseBuffer+0xc4>
    printf_USB("%s\r\n", tempBuf);
 800653e:	2348      	movs	r3, #72	@ 0x48
 8006540:	18fa      	adds	r2, r7, r3
 8006542:	4b84      	ldr	r3, [pc, #528]	@ (8006754 <ParseBuffer+0x2cc>)
 8006544:	0011      	movs	r1, r2
 8006546:	0018      	movs	r0, r3
 8006548:	f002 faac 	bl	8008aa4 <printf_USB>
  }
  printf("Receive ParseBuffer: %s\r\n", tempBuf );
 800654c:	2348      	movs	r3, #72	@ 0x48
 800654e:	18fa      	adds	r2, r7, r3
 8006550:	4b81      	ldr	r3, [pc, #516]	@ (8006758 <ParseBuffer+0x2d0>)
 8006552:	0011      	movs	r1, r2
 8006554:	0018      	movs	r0, r3
 8006556:	f01f fdcf 	bl	80260f8 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	26ac      	movs	r6, #172	@ 0xac
 800655e:	0076      	lsls	r6, r6, #1
 8006560:	19ba      	adds	r2, r7, r6
 8006562:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8006564:	4b7d      	ldr	r3, [pc, #500]	@ (800675c <ParseBuffer+0x2d4>)
 8006566:	25b0      	movs	r5, #176	@ 0xb0
 8006568:	006d      	lsls	r5, r5, #1
 800656a:	195b      	adds	r3, r3, r5
 800656c:	19db      	adds	r3, r3, r7
 800656e:	4a7c      	ldr	r2, [pc, #496]	@ (8006760 <ParseBuffer+0x2d8>)
 8006570:	8811      	ldrh	r1, [r2, #0]
 8006572:	8019      	strh	r1, [r3, #0]
 8006574:	7892      	ldrb	r2, [r2, #2]
 8006576:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8006578:	4b7a      	ldr	r3, [pc, #488]	@ (8006764 <ParseBuffer+0x2dc>)
 800657a:	195b      	adds	r3, r3, r5
 800657c:	19db      	adds	r3, r3, r7
 800657e:	4a7a      	ldr	r2, [pc, #488]	@ (8006768 <ParseBuffer+0x2e0>)
 8006580:	6811      	ldr	r1, [r2, #0]
 8006582:	6019      	str	r1, [r3, #0]
 8006584:	8892      	ldrh	r2, [r2, #4]
 8006586:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8006588:	4b78      	ldr	r3, [pc, #480]	@ (800676c <ParseBuffer+0x2e4>)
 800658a:	195b      	adds	r3, r3, r5
 800658c:	19db      	adds	r3, r3, r7
 800658e:	4a78      	ldr	r2, [pc, #480]	@ (8006770 <ParseBuffer+0x2e8>)
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	2200      	movs	r2, #0
 8006594:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8006596:	4b77      	ldr	r3, [pc, #476]	@ (8006774 <ParseBuffer+0x2ec>)
 8006598:	195b      	adds	r3, r3, r5
 800659a:	19db      	adds	r3, r3, r7
 800659c:	4a76      	ldr	r2, [pc, #472]	@ (8006778 <ParseBuffer+0x2f0>)
 800659e:	6811      	ldr	r1, [r2, #0]
 80065a0:	6019      	str	r1, [r3, #0]
 80065a2:	8892      	ldrh	r2, [r2, #4]
 80065a4:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 80065a6:	4b75      	ldr	r3, [pc, #468]	@ (800677c <ParseBuffer+0x2f4>)
 80065a8:	195b      	adds	r3, r3, r5
 80065aa:	19db      	adds	r3, r3, r7
 80065ac:	223e      	movs	r2, #62	@ 0x3e
 80065ae:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 80065b0:	4b73      	ldr	r3, [pc, #460]	@ (8006780 <ParseBuffer+0x2f8>)
 80065b2:	195b      	adds	r3, r3, r5
 80065b4:	19db      	adds	r3, r3, r7
 80065b6:	4a73      	ldr	r2, [pc, #460]	@ (8006784 <ParseBuffer+0x2fc>)
 80065b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80065ba:	c313      	stmia	r3!, {r0, r1, r4}
 80065bc:	8811      	ldrh	r1, [r2, #0]
 80065be:	8019      	strh	r1, [r3, #0]
 80065c0:	7892      	ldrb	r2, [r2, #2]
 80065c2:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 80065c4:	4b70      	ldr	r3, [pc, #448]	@ (8006788 <ParseBuffer+0x300>)
 80065c6:	195b      	adds	r3, r3, r5
 80065c8:	19db      	adds	r3, r3, r7
 80065ca:	4a70      	ldr	r2, [pc, #448]	@ (800678c <ParseBuffer+0x304>)
 80065cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80065ce:	c313      	stmia	r3!, {r0, r1, r4}
 80065d0:	8812      	ldrh	r2, [r2, #0]
 80065d2:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80065d4:	4b5c      	ldr	r3, [pc, #368]	@ (8006748 <ParseBuffer+0x2c0>)
 80065d6:	195b      	adds	r3, r3, r5
 80065d8:	19db      	adds	r3, r3, r7
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <ParseBuffer+0x16e>
    ParsePoint = strstr(tempBuf, OK);
 80065e0:	2344      	movs	r3, #68	@ 0x44
 80065e2:	18fa      	adds	r2, r7, r3
 80065e4:	2348      	movs	r3, #72	@ 0x48
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	0011      	movs	r1, r2
 80065ea:	0018      	movs	r0, r3
 80065ec:	f01f ff77 	bl	80264de <strstr>
 80065f0:	0003      	movs	r3, r0
 80065f2:	19ba      	adds	r2, r7, r6
 80065f4:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80065f6:	4b54      	ldr	r3, [pc, #336]	@ (8006748 <ParseBuffer+0x2c0>)
 80065f8:	22b0      	movs	r2, #176	@ 0xb0
 80065fa:	0052      	lsls	r2, r2, #1
 80065fc:	189b      	adds	r3, r3, r2
 80065fe:	19db      	adds	r3, r3, r7
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d10c      	bne.n	8006620 <ParseBuffer+0x198>
    ParsePoint = strstr(tempBuf, ready);
 8006606:	232c      	movs	r3, #44	@ 0x2c
 8006608:	18fa      	adds	r2, r7, r3
 800660a:	2348      	movs	r3, #72	@ 0x48
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	0011      	movs	r1, r2
 8006610:	0018      	movs	r0, r3
 8006612:	f01f ff64 	bl	80264de <strstr>
 8006616:	0003      	movs	r3, r0
 8006618:	22ac      	movs	r2, #172	@ 0xac
 800661a:	0052      	lsls	r2, r2, #1
 800661c:	18ba      	adds	r2, r7, r2
 800661e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8006620:	4b49      	ldr	r3, [pc, #292]	@ (8006748 <ParseBuffer+0x2c0>)
 8006622:	22b0      	movs	r2, #176	@ 0xb0
 8006624:	0052      	lsls	r2, r2, #1
 8006626:	189b      	adds	r3, r3, r2
 8006628:	19db      	adds	r3, r3, r7
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d10c      	bne.n	800664a <ParseBuffer+0x1c2>
    ParsePoint = strstr(tempBuf, start);
 8006630:	2328      	movs	r3, #40	@ 0x28
 8006632:	18fa      	adds	r2, r7, r3
 8006634:	2348      	movs	r3, #72	@ 0x48
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	0011      	movs	r1, r2
 800663a:	0018      	movs	r0, r3
 800663c:	f01f ff4f 	bl	80264de <strstr>
 8006640:	0003      	movs	r3, r0
 8006642:	22ac      	movs	r2, #172	@ 0xac
 8006644:	0052      	lsls	r2, r2, #1
 8006646:	18ba      	adds	r2, r7, r2
 8006648:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 800664a:	4b3f      	ldr	r3, [pc, #252]	@ (8006748 <ParseBuffer+0x2c0>)
 800664c:	22b0      	movs	r2, #176	@ 0xb0
 800664e:	0052      	lsls	r2, r2, #1
 8006650:	189b      	adds	r3, r3, r2
 8006652:	19db      	adds	r3, r3, r7
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b05      	cmp	r3, #5
 8006658:	d10c      	bne.n	8006674 <ParseBuffer+0x1ec>
    ParsePoint = strstr(tempBuf, TIME);
 800665a:	2308      	movs	r3, #8
 800665c:	18fa      	adds	r2, r7, r3
 800665e:	2348      	movs	r3, #72	@ 0x48
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	0011      	movs	r1, r2
 8006664:	0018      	movs	r0, r3
 8006666:	f01f ff3a 	bl	80264de <strstr>
 800666a:	0003      	movs	r3, r0
 800666c:	22ac      	movs	r2, #172	@ 0xac
 800666e:	0052      	lsls	r2, r2, #1
 8006670:	18ba      	adds	r2, r7, r2
 8006672:	6013      	str	r3, [r2, #0]
  }
  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8006674:	233c      	movs	r3, #60	@ 0x3c
 8006676:	18fa      	adds	r2, r7, r3
 8006678:	2448      	movs	r4, #72	@ 0x48
 800667a:	193b      	adds	r3, r7, r4
 800667c:	0011      	movs	r1, r2
 800667e:	0018      	movs	r0, r3
 8006680:	f01f ff2d 	bl	80264de <strstr>
 8006684:	0003      	movs	r3, r0
 8006686:	22aa      	movs	r2, #170	@ 0xaa
 8006688:	0052      	lsls	r2, r2, #1
 800668a:	18ba      	adds	r2, r7, r2
 800668c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800668e:	2318      	movs	r3, #24
 8006690:	18fa      	adds	r2, r7, r3
 8006692:	193b      	adds	r3, r7, r4
 8006694:	0011      	movs	r1, r2
 8006696:	0018      	movs	r0, r3
 8006698:	f01f ff21 	bl	80264de <strstr>
 800669c:	0003      	movs	r3, r0
 800669e:	22a8      	movs	r2, #168	@ 0xa8
 80066a0:	0052      	lsls	r2, r2, #1
 80066a2:	18ba      	adds	r2, r7, r2
 80066a4:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, Credentials.SSID);
 80066a6:	4a3a      	ldr	r2, [pc, #232]	@ (8006790 <ParseBuffer+0x308>)
 80066a8:	193b      	adds	r3, r7, r4
 80066aa:	0011      	movs	r1, r2
 80066ac:	0018      	movs	r0, r3
 80066ae:	f01f ff16 	bl	80264de <strstr>
 80066b2:	0003      	movs	r3, r0
 80066b4:	22a6      	movs	r2, #166	@ 0xa6
 80066b6:	0052      	lsls	r2, r2, #1
 80066b8:	18ba      	adds	r2, r7, r2
 80066ba:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80066bc:	2334      	movs	r3, #52	@ 0x34
 80066be:	18fa      	adds	r2, r7, r3
 80066c0:	193b      	adds	r3, r7, r4
 80066c2:	0011      	movs	r1, r2
 80066c4:	0018      	movs	r0, r3
 80066c6:	f01f ff0a 	bl	80264de <strstr>
 80066ca:	0003      	movs	r3, r0
 80066cc:	22a4      	movs	r2, #164	@ 0xa4
 80066ce:	0052      	lsls	r2, r2, #1
 80066d0:	18ba      	adds	r2, r7, r2
 80066d2:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80066d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006744 <ParseBuffer+0x2bc>)
 80066d6:	21b0      	movs	r1, #176	@ 0xb0
 80066d8:	0049      	lsls	r1, r1, #1
 80066da:	185b      	adds	r3, r3, r1
 80066dc:	19db      	adds	r3, r3, r7
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d800      	bhi.n	80066e6 <ParseBuffer+0x25e>
 80066e4:	e0b5      	b.n	8006852 <ParseBuffer+0x3ca>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80066e6:	22ac      	movs	r2, #172	@ 0xac
 80066e8:	0052      	lsls	r2, r2, #1
 80066ea:	18bb      	adds	r3, r7, r2
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d056      	beq.n	80067a0 <ParseBuffer+0x318>
 80066f2:	18bb      	adds	r3, r7, r2
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b4f      	cmp	r3, #79	@ 0x4f
 80066fa:	d151      	bne.n	80067a0 <ParseBuffer+0x318>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80066fc:	2360      	movs	r3, #96	@ 0x60
 80066fe:	33ff      	adds	r3, #255	@ 0xff
 8006700:	18fb      	adds	r3, r7, r3
 8006702:	2200      	movs	r2, #0
 8006704:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8006706:	4b23      	ldr	r3, [pc, #140]	@ (8006794 <ParseBuffer+0x30c>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b12      	cmp	r3, #18
 800670c:	d148      	bne.n	80067a0 <ParseBuffer+0x318>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800670e:	4b0d      	ldr	r3, [pc, #52]	@ (8006744 <ParseBuffer+0x2bc>)
 8006710:	185b      	adds	r3, r3, r1
 8006712:	19db      	adds	r3, r3, r7
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	2b2b      	cmp	r3, #43	@ 0x2b
 8006718:	d10b      	bne.n	8006732 <ParseBuffer+0x2aa>
 800671a:	4b0c      	ldr	r3, [pc, #48]	@ (800674c <ParseBuffer+0x2c4>)
 800671c:	185b      	adds	r3, r3, r1
 800671e:	19db      	adds	r3, r3, r7
 8006720:	2221      	movs	r2, #33	@ 0x21
 8006722:	5c9b      	ldrb	r3, [r3, r2]
 8006724:	2b32      	cmp	r3, #50	@ 0x32
 8006726:	d104      	bne.n	8006732 <ParseBuffer+0x2aa>
          ParseTime(tempBuf);
 8006728:	193b      	adds	r3, r7, r4
 800672a:	0018      	movs	r0, r3
 800672c:	f003 fd22 	bl	800a174 <ParseTime>
 8006730:	e036      	b.n	80067a0 <ParseBuffer+0x318>
        }
        else {
          Error("Error getting time");
 8006732:	4a19      	ldr	r2, [pc, #100]	@ (8006798 <ParseBuffer+0x310>)
 8006734:	4b19      	ldr	r3, [pc, #100]	@ (800679c <ParseBuffer+0x314>)
 8006736:	0019      	movs	r1, r3
 8006738:	2001      	movs	r0, #1
 800673a:	f00d fb23 	bl	8013d84 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800673e:	2306      	movs	r3, #6
 8006740:	e08b      	b.n	800685a <ParseBuffer+0x3d2>
 8006742:	46c0      	nop			@ (mov r8, r8)
 8006744:	fffffea2 	.word	0xfffffea2
 8006748:	fffffea1 	.word	0xfffffea1
 800674c:	fffffee8 	.word	0xfffffee8
 8006750:	200010f7 	.word	0x200010f7
 8006754:	0802ad48 	.word	0x0802ad48
 8006758:	0802ad50 	.word	0x0802ad50
 800675c:	fffffee4 	.word	0xfffffee4
 8006760:	0802ad80 	.word	0x0802ad80
 8006764:	fffffedc 	.word	0xfffffedc
 8006768:	0802ad84 	.word	0x0802ad84
 800676c:	fffffed4 	.word	0xfffffed4
 8006770:	4c494146 	.word	0x4c494146
 8006774:	fffffecc 	.word	0xfffffecc
 8006778:	0802ad8c 	.word	0x0802ad8c
 800677c:	fffffec8 	.word	0xfffffec8
 8006780:	fffffeb8 	.word	0xfffffeb8
 8006784:	0802ad94 	.word	0x0802ad94
 8006788:	fffffea8 	.word	0xfffffea8
 800678c:	0802ada4 	.word	0x0802ada4
 8006790:	200006a0 	.word	0x200006a0
 8006794:	20000701 	.word	0x20000701
 8006798:	0802ad6c 	.word	0x0802ad6c
 800679c:	0802a8a0 	.word	0x0802a8a0
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80067a0:	22ac      	movs	r2, #172	@ 0xac
 80067a2:	0052      	lsls	r2, r2, #1
 80067a4:	18bb      	adds	r3, r7, r2
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <ParseBuffer+0x338>
 80067ac:	18bb      	adds	r3, r7, r2
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b72      	cmp	r3, #114	@ 0x72
 80067b4:	d104      	bne.n	80067c0 <ParseBuffer+0x338>
      status = RECEIVE_STATUS_READY;
 80067b6:	2360      	movs	r3, #96	@ 0x60
 80067b8:	33ff      	adds	r3, #255	@ 0xff
 80067ba:	18fb      	adds	r3, r7, r3
 80067bc:	2202      	movs	r2, #2
 80067be:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80067c0:	22ac      	movs	r2, #172	@ 0xac
 80067c2:	0052      	lsls	r2, r2, #1
 80067c4:	18bb      	adds	r3, r7, r2
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d009      	beq.n	80067e0 <ParseBuffer+0x358>
 80067cc:	18bb      	adds	r3, r7, r2
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80067d4:	d104      	bne.n	80067e0 <ParseBuffer+0x358>
      status = RECEIVE_STATUS_START;
 80067d6:	2360      	movs	r3, #96	@ 0x60
 80067d8:	33ff      	adds	r3, #255	@ 0xff
 80067da:	18fb      	adds	r3, r7, r3
 80067dc:	2205      	movs	r2, #5
 80067de:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80067e0:	22ac      	movs	r2, #172	@ 0xac
 80067e2:	0052      	lsls	r2, r2, #1
 80067e4:	18bb      	adds	r3, r7, r2
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d009      	beq.n	8006800 <ParseBuffer+0x378>
 80067ec:	18bb      	adds	r3, r7, r2
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80067f4:	d104      	bne.n	8006800 <ParseBuffer+0x378>
      status = RECEIVE_STATUS_TIME;
 80067f6:	2360      	movs	r3, #96	@ 0x60
 80067f8:	33ff      	adds	r3, #255	@ 0xff
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	220b      	movs	r2, #11
 80067fe:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8006800:	22aa      	movs	r2, #170	@ 0xaa
 8006802:	0052      	lsls	r2, r2, #1
 8006804:	18bb      	adds	r3, r7, r2
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d004      	beq.n	8006816 <ParseBuffer+0x38e>
 800680c:	18bb      	adds	r3, r7, r2
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b45      	cmp	r3, #69	@ 0x45
 8006814:	d00a      	beq.n	800682c <ParseBuffer+0x3a4>
 8006816:	22a4      	movs	r2, #164	@ 0xa4
 8006818:	0052      	lsls	r2, r2, #1
 800681a:	18bb      	adds	r3, r7, r2
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <ParseBuffer+0x3ae>
 8006822:	18bb      	adds	r3, r7, r2
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b46      	cmp	r3, #70	@ 0x46
 800682a:	d104      	bne.n	8006836 <ParseBuffer+0x3ae>
      status = RECEIVE_STATUS_ERROR;
 800682c:	2360      	movs	r3, #96	@ 0x60
 800682e:	33ff      	adds	r3, #255	@ 0xff
 8006830:	18fb      	adds	r3, r7, r3
 8006832:	2201      	movs	r2, #1
 8006834:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8006836:	22a8      	movs	r2, #168	@ 0xa8
 8006838:	0052      	lsls	r2, r2, #1
 800683a:	18bb      	adds	r3, r7, r2
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d007      	beq.n	8006852 <ParseBuffer+0x3ca>
 8006842:	18bb      	adds	r3, r7, r2
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b57      	cmp	r3, #87	@ 0x57
 800684a:	d102      	bne.n	8006852 <ParseBuffer+0x3ca>
      ConnectionMade = true;
 800684c:	4b05      	ldr	r3, [pc, #20]	@ (8006864 <ParseBuffer+0x3dc>)
 800684e:	2201      	movs	r2, #1
 8006850:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
    }
  }
  return(status);
 8006852:	2360      	movs	r3, #96	@ 0x60
 8006854:	33ff      	adds	r3, #255	@ 0xff
 8006856:	18fb      	adds	r3, r7, r3
 8006858:	781b      	ldrb	r3, [r3, #0]

}
 800685a:	0018      	movs	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	b059      	add	sp, #356	@ 0x164
 8006860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006862:	46c0      	nop			@ (mov r8, r8)
 8006864:	200005b0 	.word	0x200005b0

08006868 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800686e:	4b0b      	ldr	r3, [pc, #44]	@ (800689c <PollAwake+0x34>)
 8006870:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0018      	movs	r0, r3
 8006876:	f7f9 fc79 	bl	800016c <strlen>
 800687a:	0003      	movs	r3, r0
 800687c:	b29a      	uxth	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	0011      	movs	r1, r2
 8006882:	0018      	movs	r0, r3
 8006884:	f7fe faec 	bl	8004e60 <ESP_Send>
 8006888:	1e03      	subs	r3, r0, #0
 800688a:	d001      	beq.n	8006890 <PollAwake+0x28>
    return true;
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <PollAwake+0x2a>
  }
  else{
    return false;
 8006890:	2300      	movs	r3, #0
  }
}
 8006892:	0018      	movs	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	b002      	add	sp, #8
 8006898:	bd80      	pop	{r7, pc}
 800689a:	46c0      	nop			@ (mov r8, r8)
 800689c:	0802adb4 	.word	0x0802adb4

080068a0 <RFPower>:

bool RFPower(){
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80068a6:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <RFPower+0x34>)
 80068a8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	0018      	movs	r0, r3
 80068ae:	f7f9 fc5d 	bl	800016c <strlen>
 80068b2:	0003      	movs	r3, r0
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0011      	movs	r1, r2
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7fe fad0 	bl	8004e60 <ESP_Send>
 80068c0:	1e03      	subs	r3, r0, #0
 80068c2:	d001      	beq.n	80068c8 <RFPower+0x28>
    return true;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <RFPower+0x2a>
  }
  else{
    return false;
 80068c8:	2300      	movs	r3, #0
  }
}
 80068ca:	0018      	movs	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b002      	add	sp, #8
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	0802adbc 	.word	0x0802adbc

080068d8 <CheckRFPower>:

bool CheckRFPower(){
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80068de:	4b0b      	ldr	r3, [pc, #44]	@ (800690c <CheckRFPower+0x34>)
 80068e0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	0018      	movs	r0, r3
 80068e6:	f7f9 fc41 	bl	800016c <strlen>
 80068ea:	0003      	movs	r3, r0
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	0011      	movs	r1, r2
 80068f2:	0018      	movs	r0, r3
 80068f4:	f7fe fab4 	bl	8004e60 <ESP_Send>
 80068f8:	1e03      	subs	r3, r0, #0
 80068fa:	d001      	beq.n	8006900 <CheckRFPower+0x28>
    return true;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8006900:	2300      	movs	r3, #0
  }
}
 8006902:	0018      	movs	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	b002      	add	sp, #8
 8006908:	bd80      	pop	{r7, pc}
 800690a:	46c0      	nop			@ (mov r8, r8)
 800690c:	0802adcc 	.word	0x0802adcc

08006910 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8006916:	4b0b      	ldr	r3, [pc, #44]	@ (8006944 <ATRestore+0x34>)
 8006918:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	0018      	movs	r0, r3
 800691e:	f7f9 fc25 	bl	800016c <strlen>
 8006922:	0003      	movs	r3, r0
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	0011      	movs	r1, r2
 800692a:	0018      	movs	r0, r3
 800692c:	f7fe fa98 	bl	8004e60 <ESP_Send>
 8006930:	1e03      	subs	r3, r0, #0
 8006932:	d001      	beq.n	8006938 <ATRestore+0x28>
    return true;
 8006934:	2301      	movs	r3, #1
 8006936:	e000      	b.n	800693a <ATRestore+0x2a>
  }
  else{
    return false;
 8006938:	2300      	movs	r3, #0
  }
}
 800693a:	0018      	movs	r0, r3
 800693c:	46bd      	mov	sp, r7
 800693e:	b002      	add	sp, #8
 8006940:	bd80      	pop	{r7, pc}
 8006942:	46c0      	nop			@ (mov r8, r8)
 8006944:	0802addc 	.word	0x0802addc

08006948 <CWINIT>:

bool CWINIT(){
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800694e:	4b0b      	ldr	r3, [pc, #44]	@ (800697c <CWINIT+0x34>)
 8006950:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	0018      	movs	r0, r3
 8006956:	f7f9 fc09 	bl	800016c <strlen>
 800695a:	0003      	movs	r3, r0
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	0011      	movs	r1, r2
 8006962:	0018      	movs	r0, r3
 8006964:	f7fe fa7c 	bl	8004e60 <ESP_Send>
 8006968:	1e03      	subs	r3, r0, #0
 800696a:	d001      	beq.n	8006970 <CWINIT+0x28>
    return true;
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <CWINIT+0x2a>
  }
  else{
    return false;
 8006970:	2300      	movs	r3, #0
  }
}
 8006972:	0018      	movs	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	b002      	add	sp, #8
 8006978:	bd80      	pop	{r7, pc}
 800697a:	46c0      	nop			@ (mov r8, r8)
 800697c:	0802adec 	.word	0x0802adec

08006980 <CWMODE1>:

bool CWMODE1(){
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8006986:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <CWMODE1+0x34>)
 8006988:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	0018      	movs	r0, r3
 800698e:	f7f9 fbed 	bl	800016c <strlen>
 8006992:	0003      	movs	r3, r0
 8006994:	b29a      	uxth	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	0011      	movs	r1, r2
 800699a:	0018      	movs	r0, r3
 800699c:	f7fe fa60 	bl	8004e60 <ESP_Send>
 80069a0:	1e03      	subs	r3, r0, #0
 80069a2:	d001      	beq.n	80069a8 <CWMODE1+0x28>
    return true;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <CWMODE1+0x2a>
  }
  else{
    return false;
 80069a8:	2300      	movs	r3, #0
  }
}
 80069aa:	0018      	movs	r0, r3
 80069ac:	46bd      	mov	sp, r7
 80069ae:	b002      	add	sp, #8
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	46c0      	nop			@ (mov r8, r8)
 80069b4:	0802adfc 	.word	0x0802adfc

080069b8 <CWMODE2>:

bool CWMODE2(){
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80069be:	4b0b      	ldr	r3, [pc, #44]	@ (80069ec <CWMODE2+0x34>)
 80069c0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	0018      	movs	r0, r3
 80069c6:	f7f9 fbd1 	bl	800016c <strlen>
 80069ca:	0003      	movs	r3, r0
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	0011      	movs	r1, r2
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7fe fa44 	bl	8004e60 <ESP_Send>
 80069d8:	1e03      	subs	r3, r0, #0
 80069da:	d001      	beq.n	80069e0 <CWMODE2+0x28>
    return true;
 80069dc:	2301      	movs	r3, #1
 80069de:	e000      	b.n	80069e2 <CWMODE2+0x2a>
  }
  else{
    return false;
 80069e0:	2300      	movs	r3, #0
  }
}
 80069e2:	0018      	movs	r0, r3
 80069e4:	46bd      	mov	sp, r7
 80069e6:	b002      	add	sp, #8
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	46c0      	nop			@ (mov r8, r8)
 80069ec:	0802ae0c 	.word	0x0802ae0c

080069f0 <CWAUTOCONN>:

bool CWAUTOCONN(){
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80069f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a24 <CWAUTOCONN+0x34>)
 80069f8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	0018      	movs	r0, r3
 80069fe:	f7f9 fbb5 	bl	800016c <strlen>
 8006a02:	0003      	movs	r3, r0
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	0011      	movs	r1, r2
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f7fe fa28 	bl	8004e60 <ESP_Send>
 8006a10:	1e03      	subs	r3, r0, #0
 8006a12:	d001      	beq.n	8006a18 <CWAUTOCONN+0x28>
    return true;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8006a18:	2300      	movs	r3, #0
  }
}
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b002      	add	sp, #8
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	46c0      	nop			@ (mov r8, r8)
 8006a24:	0802ae1c 	.word	0x0802ae1c

08006a28 <CWJAP>:

bool CWJAP()
{
 8006a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a2a:	46c6      	mov	lr, r8
 8006a2c:	b500      	push	{lr}
 8006a2e:	b08a      	sub	sp, #40	@ 0x28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	466b      	mov	r3, sp
 8006a34:	4698      	mov	r8, r3
  APtested = true;
 8006a36:	4b36      	ldr	r3, [pc, #216]	@ (8006b10 <CWJAP+0xe8>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	701a      	strb	r2, [r3, #0]
  getWifiCred();
 8006a3c:	f7fd ff60 	bl	8004900 <getWifiCred>
  static char atCommandBuff[112];
  memset(atCommandBuff, '\0', 112);
 8006a40:	4b34      	ldr	r3, [pc, #208]	@ (8006b14 <CWJAP+0xec>)
 8006a42:	2270      	movs	r2, #112	@ 0x70
 8006a44:	2100      	movs	r1, #0
 8006a46:	0018      	movs	r0, r3
 8006a48:	f01f fd0e 	bl	8026468 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", Credentials.SSID, Credentials.Password);
 8006a4c:	4b32      	ldr	r3, [pc, #200]	@ (8006b18 <CWJAP+0xf0>)
 8006a4e:	4a33      	ldr	r2, [pc, #204]	@ (8006b1c <CWJAP+0xf4>)
 8006a50:	4933      	ldr	r1, [pc, #204]	@ (8006b20 <CWJAP+0xf8>)
 8006a52:	4830      	ldr	r0, [pc, #192]	@ (8006b14 <CWJAP+0xec>)
 8006a54:	f01f fbc0 	bl	80261d8 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8006a58:	4b2e      	ldr	r3, [pc, #184]	@ (8006b14 <CWJAP+0xec>)
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f7f9 fb86 	bl	800016c <strlen>
 8006a60:	0002      	movs	r2, r0
 8006a62:	210f      	movs	r1, #15
 8006a64:	2018      	movs	r0, #24
 8006a66:	180b      	adds	r3, r1, r0
 8006a68:	19db      	adds	r3, r3, r7
 8006a6a:	701a      	strb	r2, [r3, #0]
  char atCommand[len + 1];
 8006a6c:	180b      	adds	r3, r1, r0
 8006a6e:	19db      	adds	r3, r3, r7
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	3301      	adds	r3, #1
 8006a74:	1e5a      	subs	r2, r3, #1
 8006a76:	623a      	str	r2, [r7, #32]
 8006a78:	001a      	movs	r2, r3
 8006a7a:	60ba      	str	r2, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	60fa      	str	r2, [r7, #12]
 8006a80:	68b8      	ldr	r0, [r7, #8]
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	0002      	movs	r2, r0
 8006a86:	0f52      	lsrs	r2, r2, #29
 8006a88:	000e      	movs	r6, r1
 8006a8a:	00f6      	lsls	r6, r6, #3
 8006a8c:	617e      	str	r6, [r7, #20]
 8006a8e:	697e      	ldr	r6, [r7, #20]
 8006a90:	4316      	orrs	r6, r2
 8006a92:	617e      	str	r6, [r7, #20]
 8006a94:	0002      	movs	r2, r0
 8006a96:	00d2      	lsls	r2, r2, #3
 8006a98:	613a      	str	r2, [r7, #16]
 8006a9a:	001a      	movs	r2, r3
 8006a9c:	603a      	str	r2, [r7, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	607a      	str	r2, [r7, #4]
 8006aa2:	6838      	ldr	r0, [r7, #0]
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	0002      	movs	r2, r0
 8006aa8:	0f52      	lsrs	r2, r2, #29
 8006aaa:	000e      	movs	r6, r1
 8006aac:	00f5      	lsls	r5, r6, #3
 8006aae:	4315      	orrs	r5, r2
 8006ab0:	0002      	movs	r2, r0
 8006ab2:	00d4      	lsls	r4, r2, #3
 8006ab4:	3307      	adds	r3, #7
 8006ab6:	08db      	lsrs	r3, r3, #3
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	466a      	mov	r2, sp
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	469d      	mov	sp, r3
 8006ac0:	466b      	mov	r3, sp
 8006ac2:	3300      	adds	r3, #0
 8006ac4:	61fb      	str	r3, [r7, #28]
  memset(atCommand, '\0', len + 1);
 8006ac6:	240f      	movs	r4, #15
 8006ac8:	2518      	movs	r5, #24
 8006aca:	1963      	adds	r3, r4, r5
 8006acc:	19db      	adds	r3, r3, r7
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	001a      	movs	r2, r3
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f01f fcc5 	bl	8026468 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8006ade:	1963      	adds	r3, r4, r5
 8006ae0:	19db      	adds	r3, r3, r7
 8006ae2:	781a      	ldrb	r2, [r3, #0]
 8006ae4:	490b      	ldr	r1, [pc, #44]	@ (8006b14 <CWJAP+0xec>)
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f01f fce4 	bl	80264b6 <strncpy>
  return ESP_Send((uint8_t*)atCommand, len);
 8006aee:	1963      	adds	r3, r4, r5
 8006af0:	19db      	adds	r3, r3, r7
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	0011      	movs	r1, r2
 8006afa:	0018      	movs	r0, r3
 8006afc:	f7fe f9b0 	bl	8004e60 <ESP_Send>
 8006b00:	0003      	movs	r3, r0
 8006b02:	46c5      	mov	sp, r8
}
 8006b04:	0018      	movs	r0, r3
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b00a      	add	sp, #40	@ 0x28
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	46b8      	mov	r8, r7
 8006b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b10:	200005b1 	.word	0x200005b1
 8006b14:	2000086c 	.word	0x2000086c
 8006b18:	200006c0 	.word	0x200006c0
 8006b1c:	200006a0 	.word	0x200006a0
 8006b20:	0802ae30 	.word	0x0802ae30

08006b24 <CWMODE3>:


bool CWMODE3(){
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8006b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b58 <CWMODE3+0x34>)
 8006b2c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7f9 fb1b 	bl	800016c <strlen>
 8006b36:	0003      	movs	r3, r0
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	0011      	movs	r1, r2
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f7fe f98e 	bl	8004e60 <ESP_Send>
 8006b44:	1e03      	subs	r3, r0, #0
 8006b46:	d001      	beq.n	8006b4c <CWMODE3+0x28>
    return true;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <CWMODE3+0x2a>
  }
  else{
    return false;
 8006b4c:	2300      	movs	r3, #0
  }
}
 8006b4e:	0018      	movs	r0, r3
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b002      	add	sp, #8
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	0802ae48 	.word	0x0802ae48

08006b5c <CWSTATE>:

bool CWSTATE(){
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8006b62:	4b0b      	ldr	r3, [pc, #44]	@ (8006b90 <CWSTATE+0x34>)
 8006b64:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f7f9 faff 	bl	800016c <strlen>
 8006b6e:	0003      	movs	r3, r0
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	0011      	movs	r1, r2
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7fe f972 	bl	8004e60 <ESP_Send>
 8006b7c:	1e03      	subs	r3, r0, #0
 8006b7e:	d001      	beq.n	8006b84 <CWSTATE+0x28>
    return true;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <CWSTATE+0x2a>
  }
  else{
    return false;
 8006b84:	2300      	movs	r3, #0
  }
}
 8006b86:	0018      	movs	r0, r3
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	b002      	add	sp, #8
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	46c0      	nop			@ (mov r8, r8)
 8006b90:	0802ae58 	.word	0x0802ae58

08006b94 <CWSAP>:

bool CWSAP(){
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc8 <CWSAP+0x34>)
 8006b9c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f7f9 fae3 	bl	800016c <strlen>
 8006ba6:	0003      	movs	r3, r0
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	0011      	movs	r1, r2
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f7fe f956 	bl	8004e60 <ESP_Send>
 8006bb4:	1e03      	subs	r3, r0, #0
 8006bb6:	d001      	beq.n	8006bbc <CWSAP+0x28>
    return true;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <CWSAP+0x2a>
  }
  else{
    return false;
 8006bbc:	2300      	movs	r3, #0
  }
}
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b002      	add	sp, #8
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			@ (mov r8, r8)
 8006bc8:	0802ae68 	.word	0x0802ae68

08006bcc <CIPMUX>:

bool CIPMUX(){
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006c00 <CIPMUX+0x34>)
 8006bd4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f7f9 fac7 	bl	800016c <strlen>
 8006bde:	0003      	movs	r3, r0
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	0011      	movs	r1, r2
 8006be6:	0018      	movs	r0, r3
 8006be8:	f7fe f93a 	bl	8004e60 <ESP_Send>
 8006bec:	1e03      	subs	r3, r0, #0
 8006bee:	d001      	beq.n	8006bf4 <CIPMUX+0x28>
    return true;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e000      	b.n	8006bf6 <CIPMUX+0x2a>
  }
  else{
    return false;
 8006bf4:	2300      	movs	r3, #0
  }
}
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	b002      	add	sp, #8
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	0802ae8c 	.word	0x0802ae8c

08006c04 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c38 <WEBSERVER+0x34>)
 8006c0c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	0018      	movs	r0, r3
 8006c12:	f7f9 faab 	bl	800016c <strlen>
 8006c16:	0003      	movs	r3, r0
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	0011      	movs	r1, r2
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f7fe f91e 	bl	8004e60 <ESP_Send>
 8006c24:	1e03      	subs	r3, r0, #0
 8006c26:	d001      	beq.n	8006c2c <WEBSERVER+0x28>
    return true;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e000      	b.n	8006c2e <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006c2c:	2300      	movs	r3, #0
  }
}
 8006c2e:	0018      	movs	r0, r3
 8006c30:	46bd      	mov	sp, r7
 8006c32:	b002      	add	sp, #8
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	46c0      	nop			@ (mov r8, r8)
 8006c38:	0802ae9c 	.word	0x0802ae9c

08006c3c <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006c3c:	b5b0      	push	{r4, r5, r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006c42:	1cfb      	adds	r3, r7, #3
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
  uint16_t length = CreateMessage(&txresult, false);
 8006c48:	1dbc      	adds	r4, r7, #6
 8006c4a:	1cfb      	adds	r3, r7, #3
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f7fe fc92 	bl	8005578 <CreateMessage>
 8006c54:	0003      	movs	r3, r0
 8006c56:	8023      	strh	r3, [r4, #0]
  static uint8_t boxConfig[IdSize];
  static char Buffer[1+(2*IdSize)];
  static uint8_t URLToUpload[URLToUploadMaxLength];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006c58:	4b22      	ldr	r3, [pc, #136]	@ (8006ce4 <HTTPCPOST+0xa8>)
 8006c5a:	4823      	ldr	r0, [pc, #140]	@ (8006ce8 <HTTPCPOST+0xac>)
 8006c5c:	220c      	movs	r2, #12
 8006c5e:	0019      	movs	r1, r3
 8006c60:	f005 fa4a 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8006c64:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce4 <HTTPCPOST+0xa8>)
 8006c66:	4b21      	ldr	r3, [pc, #132]	@ (8006cec <HTTPCPOST+0xb0>)
 8006c68:	0011      	movs	r1, r2
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f7fe fbbc 	bl	80053e8 <uint8ArrayToString>
//  sprintf(message, "AT+HTTPCPOST=%s/%s/data\",%d,1,%s\r\n", API, Buffer, length, header1);
  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUpload, URLToUploadMaxLength);
 8006c70:	4b1f      	ldr	r3, [pc, #124]	@ (8006cf0 <HTTPCPOST+0xb4>)
 8006c72:	4820      	ldr	r0, [pc, #128]	@ (8006cf4 <HTTPCPOST+0xb8>)
 8006c74:	2230      	movs	r2, #48	@ 0x30
 8006c76:	0019      	movs	r1, r3
 8006c78:	f005 fa3e 	bl	800c0f8 <ReadUint8ArrayEEprom>
  if (strlen((char*)URLToUpload) == 0) {
 8006c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8006cf0 <HTTPCPOST+0xb4>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10b      	bne.n	8006c9c <HTTPCPOST+0x60>
    strcpy ((char*)URLToUpload,API);
 8006c84:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf0 <HTTPCPOST+0xb4>)
 8006c86:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf8 <HTTPCPOST+0xbc>)
 8006c88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c8a:	c313      	stmia	r3!, {r0, r1, r4}
 8006c8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c8e:	c313      	stmia	r3!, {r0, r1, r4}
 8006c90:	ca03      	ldmia	r2!, {r0, r1}
 8006c92:	c303      	stmia	r3!, {r0, r1}
 8006c94:	8811      	ldrh	r1, [r2, #0]
 8006c96:	8019      	strh	r1, [r3, #0]
 8006c98:	7892      	ldrb	r2, [r2, #2]
 8006c9a:	709a      	strb	r2, [r3, #2]
  }
  sprintf(message, "AT+HTTPCPOST=\"%s/%s/data\",%d,1,%s\r\n", (char*)URLToUpload, Buffer, length, HEADER1);
 8006c9c:	1dbb      	adds	r3, r7, #6
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	4d12      	ldr	r5, [pc, #72]	@ (8006cec <HTTPCPOST+0xb0>)
 8006ca2:	4c13      	ldr	r4, [pc, #76]	@ (8006cf0 <HTTPCPOST+0xb4>)
 8006ca4:	4915      	ldr	r1, [pc, #84]	@ (8006cfc <HTTPCPOST+0xc0>)
 8006ca6:	4816      	ldr	r0, [pc, #88]	@ (8006d00 <HTTPCPOST+0xc4>)
 8006ca8:	4a16      	ldr	r2, [pc, #88]	@ (8006d04 <HTTPCPOST+0xc8>)
 8006caa:	9201      	str	r2, [sp, #4]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	002b      	movs	r3, r5
 8006cb0:	0022      	movs	r2, r4
 8006cb2:	f01f fa91 	bl	80261d8 <siprintf>
  uint16_t len = strlen(message);
 8006cb6:	4b12      	ldr	r3, [pc, #72]	@ (8006d00 <HTTPCPOST+0xc4>)
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f7f9 fa57 	bl	800016c <strlen>
 8006cbe:	0002      	movs	r2, r0
 8006cc0:	1d3b      	adds	r3, r7, #4
 8006cc2:	801a      	strh	r2, [r3, #0]
//  Debug("ESP_send result of header: %d, transmitted data %d chars", txresult, len);
  if(ESP_Send((uint8_t*)message, len)){
 8006cc4:	1d3b      	adds	r3, r7, #4
 8006cc6:	881a      	ldrh	r2, [r3, #0]
 8006cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8006d00 <HTTPCPOST+0xc4>)
 8006cca:	0011      	movs	r1, r2
 8006ccc:	0018      	movs	r0, r3
 8006cce:	f7fe f8c7 	bl	8004e60 <ESP_Send>
 8006cd2:	1e03      	subs	r3, r0, #0
 8006cd4:	d001      	beq.n	8006cda <HTTPCPOST+0x9e>
    return true;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8006cda:	2300      	movs	r3, #0
  }
}
 8006cdc:	0018      	movs	r0, r3
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	b002      	add	sp, #8
 8006ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8006ce4:	200008dc 	.word	0x200008dc
 8006ce8:	08080000 	.word	0x08080000
 8006cec:	200008e8 	.word	0x200008e8
 8006cf0:	20000904 	.word	0x20000904
 8006cf4:	08080110 	.word	0x08080110
 8006cf8:	0802aeb4 	.word	0x0802aeb4
 8006cfc:	0802aed8 	.word	0x0802aed8
 8006d00:	200005c4 	.word	0x200005c4
 8006d04:	0802aefc 	.word	0x0802aefc

08006d08 <SENDMAIL>:

#ifdef USE_MAIL
bool SENDMAIL() {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
  bool result = false;
 8006d0e:	1dfb      	adds	r3, r7, #7
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
  txLength = CreateMailMessage(&result, true);
 8006d14:	1dfb      	adds	r3, r7, #7
 8006d16:	2101      	movs	r1, #1
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f7fe fb89 	bl	8005430 <CreateMailMessage>
 8006d1e:	0003      	movs	r3, r0
 8006d20:	001a      	movs	r2, r3
 8006d22:	4b04      	ldr	r3, [pc, #16]	@ (8006d34 <SENDMAIL+0x2c>)
 8006d24:	801a      	strh	r2, [r3, #0]
//  Debug("SENDMAIL ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006d26:	1dfb      	adds	r3, r7, #7
 8006d28:	781b      	ldrb	r3, [r3, #0]
}
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b002      	add	sp, #8
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	46c0      	nop			@ (mov r8, r8)
 8006d34:	200005bc 	.word	0x200005bc

08006d38 <HTTPCPOST_MAILAPI>:

bool HTTPCPOST_MAILAPI() {
 8006d38:	b5b0      	push	{r4, r5, r7, lr}
 8006d3a:	b090      	sub	sp, #64	@ 0x40
 8006d3c:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006d3e:	2133      	movs	r1, #51	@ 0x33
 8006d40:	187b      	adds	r3, r7, r1
 8006d42:	2200      	movs	r2, #0
 8006d44:	701a      	strb	r2, [r3, #0]
  uint16_t maillength = CreateMailMessage(&txresult, false);
 8006d46:	2536      	movs	r5, #54	@ 0x36
 8006d48:	197c      	adds	r4, r7, r5
 8006d4a:	187b      	adds	r3, r7, r1
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7fe fb6e 	bl	8005430 <CreateMailMessage>
 8006d54:	0003      	movs	r3, r0
 8006d56:	8023      	strh	r3, [r4, #0]
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8006d58:	003b      	movs	r3, r7
 8006d5a:	4814      	ldr	r0, [pc, #80]	@ (8006dac <HTTPCPOST_MAILAPI+0x74>)
 8006d5c:	2230      	movs	r2, #48	@ 0x30
 8006d5e:	0019      	movs	r1, r3
 8006d60:	f005 f9ca 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(message, "AT+HTTPCPOST=%s,%d,3,%s,\"accept: application/json\",\"X-Smtp2go-Api-Key: %s\"\r\n", APIMail, maillength, HEADER1, (char*)MailAPIKeyConfig);
 8006d64:	197b      	adds	r3, r7, r5
 8006d66:	881c      	ldrh	r4, [r3, #0]
 8006d68:	4a11      	ldr	r2, [pc, #68]	@ (8006db0 <HTTPCPOST_MAILAPI+0x78>)
 8006d6a:	4912      	ldr	r1, [pc, #72]	@ (8006db4 <HTTPCPOST_MAILAPI+0x7c>)
 8006d6c:	4812      	ldr	r0, [pc, #72]	@ (8006db8 <HTTPCPOST_MAILAPI+0x80>)
 8006d6e:	003b      	movs	r3, r7
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	4b12      	ldr	r3, [pc, #72]	@ (8006dbc <HTTPCPOST_MAILAPI+0x84>)
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	0023      	movs	r3, r4
 8006d78:	f01f fa2e 	bl	80261d8 <siprintf>
  uint16_t len = strlen(message);
 8006d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006db8 <HTTPCPOST_MAILAPI+0x80>)
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f7f9 f9f4 	bl	800016c <strlen>
 8006d84:	0002      	movs	r2, r0
 8006d86:	2134      	movs	r1, #52	@ 0x34
 8006d88:	187b      	adds	r3, r7, r1
 8006d8a:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)){
 8006d8c:	187b      	adds	r3, r7, r1
 8006d8e:	881a      	ldrh	r2, [r3, #0]
 8006d90:	4b09      	ldr	r3, [pc, #36]	@ (8006db8 <HTTPCPOST_MAILAPI+0x80>)
 8006d92:	0011      	movs	r1, r2
 8006d94:	0018      	movs	r0, r3
 8006d96:	f7fe f863 	bl	8004e60 <ESP_Send>
 8006d9a:	1e03      	subs	r3, r0, #0
 8006d9c:	d001      	beq.n	8006da2 <HTTPCPOST_MAILAPI+0x6a>
    return true;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <HTTPCPOST_MAILAPI+0x6c>
  }
  return false;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	0018      	movs	r0, r3
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b00e      	add	sp, #56	@ 0x38
 8006daa:	bdb0      	pop	{r4, r5, r7, pc}
 8006dac:	080802c0 	.word	0x080802c0
 8006db0:	0802dcb4 	.word	0x0802dcb4
 8006db4:	0802af20 	.word	0x0802af20
 8006db8:	200005c4 	.word	0x200005c4
 8006dbc:	0802aefc 	.word	0x0802aefc

08006dc0 <SENDDATA>:
#endif

bool SENDDATA(){
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
  bool result = false;
 8006dc6:	1dfb      	adds	r3, r7, #7
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
  txLength = CreateMessage(&result, true);
 8006dcc:	1dfb      	adds	r3, r7, #7
 8006dce:	2101      	movs	r1, #1
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f7fe fbd1 	bl	8005578 <CreateMessage>
 8006dd6:	0003      	movs	r3, r0
 8006dd8:	001a      	movs	r2, r3
 8006dda:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <SENDDATA+0x2c>)
 8006ddc:	801a      	strh	r2, [r3, #0]
//  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006dde:	1dfb      	adds	r3, r7, #7
 8006de0:	781b      	ldrb	r3, [r3, #0]
}
 8006de2:	0018      	movs	r0, r3
 8006de4:	46bd      	mov	sp, r7
 8006de6:	b002      	add	sp, #8
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	46c0      	nop			@ (mov r8, r8)
 8006dec:	200005bc 	.word	0x200005bc

08006df0 <SLEEP>:

bool SLEEP(){
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006df6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <SLEEP+0x34>)
 8006df8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f7f9 f9b5 	bl	800016c <strlen>
 8006e02:	0003      	movs	r3, r0
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	0011      	movs	r1, r2
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f7fe f828 	bl	8004e60 <ESP_Send>
 8006e10:	1e03      	subs	r3, r0, #0
 8006e12:	d001      	beq.n	8006e18 <SLEEP+0x28>
    return true;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e000      	b.n	8006e1a <SLEEP+0x2a>
  }
  else{
    return false;
 8006e18:	2300      	movs	r3, #0
  }
}
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b002      	add	sp, #8
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	0802af70 	.word	0x0802af70

08006e28 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e64 <CIPSNTPCFG+0x3c>)
 8006e30:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	0018      	movs	r0, r3
 8006e36:	f7f9 f999 	bl	800016c <strlen>
 8006e3a:	0003      	movs	r3, r0
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	0011      	movs	r1, r2
 8006e42:	0018      	movs	r0, r3
 8006e44:	f7fe f80c 	bl	8004e60 <ESP_Send>
 8006e48:	1e03      	subs	r3, r0, #0
 8006e4a:	d006      	beq.n	8006e5a <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006e4c:	23fa      	movs	r3, #250	@ 0xfa
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	0018      	movs	r0, r3
 8006e52:	f00d fd19 	bl	8014888 <HAL_Delay>
    return true;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006e5a:	2300      	movs	r3, #0
  }
}
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	b002      	add	sp, #8
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	0802af80 	.word	0x0802af80

08006e68 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e9c <CIPSNTPTIME+0x34>)
 8006e70:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7f9 f979 	bl	800016c <strlen>
 8006e7a:	0003      	movs	r3, r0
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	0011      	movs	r1, r2
 8006e82:	0018      	movs	r0, r3
 8006e84:	f7fd ffec 	bl	8004e60 <ESP_Send>
 8006e88:	1e03      	subs	r3, r0, #0
 8006e8a:	d001      	beq.n	8006e90 <CIPSNTPTIME+0x28>
    return true;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006e90:	2300      	movs	r3, #0
  }
}
 8006e92:	0018      	movs	r0, r3
 8006e94:	46bd      	mov	sp, r7
 8006e96:	b002      	add	sp, #8
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	46c0      	nop			@ (mov r8, r8)
 8006e9c:	0802afd0 	.word	0x0802afd0

08006ea0 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed4 <CIPSNTPINTV+0x34>)
 8006ea8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	0018      	movs	r0, r3
 8006eae:	f7f9 f95d 	bl	800016c <strlen>
 8006eb2:	0003      	movs	r3, r0
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	0011      	movs	r1, r2
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f7fd ffd0 	bl	8004e60 <ESP_Send>
 8006ec0:	1e03      	subs	r3, r0, #0
 8006ec2:	d001      	beq.n	8006ec8 <CIPSNTPINTV+0x28>
    return true;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006ec8:	2300      	movs	r3, #0
  }
}
 8006eca:	0018      	movs	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b002      	add	sp, #8
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	46c0      	nop			@ (mov r8, r8)
 8006ed4:	0802afe4 	.word	0x0802afe4

08006ed8 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006ed8:	b5b0      	push	{r4, r5, r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	0002      	movs	r2, r0
 8006ee0:	1dfb      	adds	r3, r7, #7
 8006ee2:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006ee4:	4b6c      	ldr	r3, [pc, #432]	@ (8007098 <DMA_ProcessBuffer+0x1c0>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	200e      	movs	r0, #14
 8006eee:	183b      	adds	r3, r7, r0
 8006ef0:	2180      	movs	r1, #128	@ 0x80
 8006ef2:	0049      	lsls	r1, r1, #1
 8006ef4:	1a8a      	subs	r2, r1, r2
 8006ef6:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006ef8:	230d      	movs	r3, #13
 8006efa:	18fb      	adds	r3, r7, r3
 8006efc:	2203      	movs	r2, #3
 8006efe:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006f00:	183b      	adds	r3, r7, r0
 8006f02:	881a      	ldrh	r2, [r3, #0]
 8006f04:	2380      	movs	r3, #128	@ 0x80
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d903      	bls.n	8006f14 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006f0c:	183b      	adds	r3, r7, r0
 8006f0e:	2280      	movs	r2, #128	@ 0x80
 8006f10:	0052      	lsls	r2, r2, #1
 8006f12:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006f14:	4b61      	ldr	r3, [pc, #388]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	001a      	movs	r2, r3
 8006f1c:	230e      	movs	r3, #14
 8006f1e:	18fb      	adds	r3, r7, r3
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d131      	bne.n	8006f8a <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006f26:	4b5e      	ldr	r3, [pc, #376]	@ (80070a0 <DMA_ProcessBuffer+0x1c8>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	2b14      	cmp	r3, #20
 8006f2c:	d91b      	bls.n	8006f66 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006f2e:	4b5c      	ldr	r3, [pc, #368]	@ (80070a0 <DMA_ProcessBuffer+0x1c8>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006f34:	4b5b      	ldr	r3, [pc, #364]	@ (80070a4 <DMA_ProcessBuffer+0x1cc>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d107      	bne.n	8006f4c <DMA_ProcessBuffer+0x74>
 8006f3c:	4b5a      	ldr	r3, [pc, #360]	@ (80070a8 <DMA_ProcessBuffer+0x1d0>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006f44:	230d      	movs	r3, #13
 8006f46:	18fb      	adds	r3, r7, r3
 8006f48:	2207      	movs	r2, #7
 8006f4a:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006f4c:	4b55      	ldr	r3, [pc, #340]	@ (80070a4 <DMA_ProcessBuffer+0x1cc>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d103      	bne.n	8006f5c <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006f54:	4b55      	ldr	r3, [pc, #340]	@ (80070ac <DMA_ProcessBuffer+0x1d4>)
 8006f56:	220b      	movs	r2, #11
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	e016      	b.n	8006f8a <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006f5c:	230d      	movs	r3, #13
 8006f5e:	18fb      	adds	r3, r7, r3
 8006f60:	2206      	movs	r2, #6
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	e011      	b.n	8006f8a <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006f66:	4b4e      	ldr	r3, [pc, #312]	@ (80070a0 <DMA_ProcessBuffer+0x1c8>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80070a0 <DMA_ProcessBuffer+0x1c8>)
 8006f70:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006f72:	f00d fc7f 	bl	8014874 <HAL_GetTick>
 8006f76:	0003      	movs	r3, r0
 8006f78:	33f5      	adds	r3, #245	@ 0xf5
 8006f7a:	33ff      	adds	r3, #255	@ 0xff
 8006f7c:	001a      	movs	r2, r3
 8006f7e:	4b4c      	ldr	r3, [pc, #304]	@ (80070b0 <DMA_ProcessBuffer+0x1d8>)
 8006f80:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006f82:	230d      	movs	r3, #13
 8006f84:	18fb      	adds	r3, r7, r3
 8006f86:	2204      	movs	r2, #4
 8006f88:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006f8a:	4b44      	ldr	r3, [pc, #272]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	001a      	movs	r2, r3
 8006f92:	210e      	movs	r1, #14
 8006f94:	187b      	adds	r3, r7, r1
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d100      	bne.n	8006f9e <DMA_ProcessBuffer+0xc6>
 8006f9c:	e075      	b.n	800708a <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006f9e:	4b40      	ldr	r3, [pc, #256]	@ (80070a0 <DMA_ProcessBuffer+0x1c8>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006fa4:	4b43      	ldr	r3, [pc, #268]	@ (80070b4 <DMA_ProcessBuffer+0x1dc>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	4b3c      	ldr	r3, [pc, #240]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d109      	bne.n	8006fc8 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006fb4:	187b      	adds	r3, r7, r1
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	4b3e      	ldr	r3, [pc, #248]	@ (80070b4 <DMA_ProcessBuffer+0x1dc>)
 8006fbc:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006fbe:	230d      	movs	r3, #13
 8006fc0:	18fb      	adds	r3, r7, r3
 8006fc2:	220a      	movs	r2, #10
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e060      	b.n	800708a <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80070b4 <DMA_ProcessBuffer+0x1dc>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	001a      	movs	r2, r3
 8006fd0:	210e      	movs	r1, #14
 8006fd2:	187b      	adds	r3, r7, r1
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d009      	beq.n	8006fee <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006fda:	187b      	adds	r3, r7, r1
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	4b34      	ldr	r3, [pc, #208]	@ (80070b4 <DMA_ProcessBuffer+0x1dc>)
 8006fe2:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006fe4:	230d      	movs	r3, #13
 8006fe6:	18fb      	adds	r3, r7, r3
 8006fe8:	220a      	movs	r2, #10
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	e04d      	b.n	800708a <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006fee:	4b2b      	ldr	r3, [pc, #172]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	001a      	movs	r2, r3
 8006ff6:	210e      	movs	r1, #14
 8006ff8:	187b      	adds	r3, r7, r1
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d917      	bls.n	8007030 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8007000:	4b26      	ldr	r3, [pc, #152]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	001a      	movs	r2, r3
 8007008:	4b2b      	ldr	r3, [pc, #172]	@ (80070b8 <DMA_ProcessBuffer+0x1e0>)
 800700a:	18d0      	adds	r0, r2, r3
 800700c:	4b23      	ldr	r3, [pc, #140]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	001a      	movs	r2, r3
 8007014:	187b      	adds	r3, r7, r1
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	1a9b      	subs	r3, r3, r2
 800701a:	b299      	uxth	r1, r3
 800701c:	230d      	movs	r3, #13
 800701e:	18fc      	adds	r4, r7, r3
 8007020:	1dfb      	adds	r3, r7, #7
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	001a      	movs	r2, r3
 8007026:	f7ff fa2f 	bl	8006488 <ParseBuffer>
 800702a:	0003      	movs	r3, r0
 800702c:	7023      	strb	r3, [r4, #0]
 800702e:	e026      	b.n	800707e <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8007030:	4b1a      	ldr	r3, [pc, #104]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	001a      	movs	r2, r3
 8007038:	4b1f      	ldr	r3, [pc, #124]	@ (80070b8 <DMA_ProcessBuffer+0x1e0>)
 800703a:	18d0      	adds	r0, r2, r3
 800703c:	4b17      	ldr	r3, [pc, #92]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	001a      	movs	r2, r3
 8007044:	2380      	movs	r3, #128	@ 0x80
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	1a9b      	subs	r3, r3, r2
 800704a:	b299      	uxth	r1, r3
 800704c:	250d      	movs	r5, #13
 800704e:	197c      	adds	r4, r7, r5
 8007050:	1dfb      	adds	r3, r7, #7
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	001a      	movs	r2, r3
 8007056:	f7ff fa17 	bl	8006488 <ParseBuffer>
 800705a:	0003      	movs	r3, r0
 800705c:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 800705e:	210e      	movs	r1, #14
 8007060:	187b      	adds	r3, r7, r1
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8007068:	197c      	adds	r4, r7, r5
 800706a:	1dfb      	adds	r3, r7, #7
 800706c:	781a      	ldrb	r2, [r3, #0]
 800706e:	187b      	adds	r3, r7, r1
 8007070:	8819      	ldrh	r1, [r3, #0]
 8007072:	4b11      	ldr	r3, [pc, #68]	@ (80070b8 <DMA_ProcessBuffer+0x1e0>)
 8007074:	0018      	movs	r0, r3
 8007076:	f7ff fa07 	bl	8006488 <ParseBuffer>
 800707a:	0003      	movs	r3, r0
 800707c:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 800707e:	230e      	movs	r3, #14
 8007080:	18fb      	adds	r3, r7, r3
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	b2da      	uxtb	r2, r3
 8007086:	4b05      	ldr	r3, [pc, #20]	@ (800709c <DMA_ProcessBuffer+0x1c4>)
 8007088:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 800708a:	230d      	movs	r3, #13
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	781b      	ldrb	r3, [r3, #0]
}
 8007090:	0018      	movs	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	b004      	add	sp, #16
 8007096:	bdb0      	pop	{r4, r5, r7, pc}
 8007098:	20002454 	.word	0x20002454
 800709c:	20000934 	.word	0x20000934
 80070a0:	2000069c 	.word	0x2000069c
 80070a4:	20000701 	.word	0x20000701
 80070a8:	20000001 	.word	0x20000001
 80070ac:	20000030 	.word	0x20000030
 80070b0:	20000694 	.word	0x20000694
 80070b4:	20000935 	.word	0x20000935
 80070b8:	200004ac 	.word	0x200004ac

080070bc <clearDMABuffer>:

void clearDMABuffer(){
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 80070c0:	2380      	movs	r3, #128	@ 0x80
 80070c2:	005a      	lsls	r2, r3, #1
 80070c4:	4b03      	ldr	r3, [pc, #12]	@ (80070d4 <clearDMABuffer+0x18>)
 80070c6:	2100      	movs	r1, #0
 80070c8:	0018      	movs	r0, r3
 80070ca:	f01f f9cd 	bl	8026468 <memset>
}
 80070ce:	46c0      	nop			@ (mov r8, r8)
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	200004ac 	.word	0x200004ac

080070d8 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	0002      	movs	r2, r0
 80070e0:	1dfb      	adds	r3, r7, #7
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	1dbb      	adds	r3, r7, #6
 80070e6:	1c0a      	adds	r2, r1, #0
 80070e8:	701a      	strb	r2, [r3, #0]
  bool value = false;
 80070ea:	210f      	movs	r1, #15
 80070ec:	187b      	adds	r3, r7, r1
 80070ee:	2200      	movs	r2, #0
 80070f0:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 80070f2:	1dbb      	adds	r3, r7, #6
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d105      	bne.n	8007106 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 80070fa:	187b      	adds	r3, r7, r1
 80070fc:	1dfa      	adds	r2, r7, #7
 80070fe:	7812      	ldrb	r2, [r2, #0]
 8007100:	4251      	negs	r1, r2
 8007102:	414a      	adcs	r2, r1
 8007104:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8007106:	1dbb      	adds	r3, r7, #6
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d107      	bne.n	800711e <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800710e:	230f      	movs	r3, #15
 8007110:	18fb      	adds	r3, r7, r3
 8007112:	1dfa      	adds	r2, r7, #7
 8007114:	7812      	ldrb	r2, [r2, #0]
 8007116:	3a02      	subs	r2, #2
 8007118:	4251      	negs	r1, r2
 800711a:	414a      	adcs	r2, r1
 800711c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800711e:	1dbb      	adds	r3, r7, #6
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d107      	bne.n	8007136 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8007126:	230f      	movs	r3, #15
 8007128:	18fb      	adds	r3, r7, r3
 800712a:	1dfa      	adds	r2, r7, #7
 800712c:	7812      	ldrb	r2, [r2, #0]
 800712e:	3a05      	subs	r2, #5
 8007130:	4251      	negs	r1, r2
 8007132:	414a      	adcs	r2, r1
 8007134:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8007136:	1dbb      	adds	r3, r7, #6
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b05      	cmp	r3, #5
 800713c:	d107      	bne.n	800714e <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 800713e:	230f      	movs	r3, #15
 8007140:	18fb      	adds	r3, r7, r3
 8007142:	1dfa      	adds	r2, r7, #7
 8007144:	7812      	ldrb	r2, [r2, #0]
 8007146:	3a0b      	subs	r2, #11
 8007148:	4251      	negs	r1, r2
 800714a:	414a      	adcs	r2, r1
 800714c:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 800714e:	230f      	movs	r3, #15
 8007150:	18fb      	adds	r3, r7, r3
 8007152:	781b      	ldrb	r3, [r3, #0]
}
 8007154:	0018      	movs	r0, r3
 8007156:	46bd      	mov	sp, r7
 8007158:	b004      	add	sp, #16
 800715a:	bd80      	pop	{r7, pc}

0800715c <AT_Send>:

bool AT_Send(AT_Commands state){
 800715c:	b590      	push	{r4, r7, lr}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	0002      	movs	r2, r0
 8007164:	1dfb      	adds	r3, r7, #7
 8007166:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8007168:	230f      	movs	r3, #15
 800716a:	18fb      	adds	r3, r7, r3
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
  switch (state){
 8007170:	1dfb      	adds	r3, r7, #7
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b16      	cmp	r3, #22
 8007176:	d900      	bls.n	800717a <AT_Send+0x1e>
 8007178:	e161      	b.n	800743e <AT_Send+0x2e2>
 800717a:	009a      	lsls	r2, r3, #2
 800717c:	4bb3      	ldr	r3, [pc, #716]	@ (800744c <AT_Send+0x2f0>)
 800717e:	18d3      	adds	r3, r2, r3
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8007184:	4bb2      	ldr	r3, [pc, #712]	@ (8007450 <AT_Send+0x2f4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	0018      	movs	r0, r3
 800718a:	f00c fda5 	bl	8013cd8 <TimestampIsReached>
 800718e:	1e03      	subs	r3, r0, #0
 8007190:	d100      	bne.n	8007194 <AT_Send+0x38>
 8007192:	e153      	b.n	800743c <AT_Send+0x2e0>
    Debug("AT_WAKEUP");
 8007194:	4aaf      	ldr	r2, [pc, #700]	@ (8007454 <AT_Send+0x2f8>)
 8007196:	4bb0      	ldr	r3, [pc, #704]	@ (8007458 <AT_Send+0x2fc>)
 8007198:	0019      	movs	r1, r3
 800719a:	2003      	movs	r0, #3
 800719c:	f00c fdf2 	bl	8013d84 <CreateLine>
    ATCommandSend = PollAwake();
 80071a0:	230f      	movs	r3, #15
 80071a2:	18fc      	adds	r4, r7, r3
 80071a4:	f7ff fb60 	bl	8006868 <PollAwake>
 80071a8:	0003      	movs	r3, r0
 80071aa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80071ac:	f00d fb62 	bl	8014874 <HAL_GetTick>
 80071b0:	0003      	movs	r3, r0
 80071b2:	3332      	adds	r3, #50	@ 0x32
 80071b4:	001a      	movs	r2, r3
 80071b6:	4ba6      	ldr	r3, [pc, #664]	@ (8007450 <AT_Send+0x2f4>)
 80071b8:	601a      	str	r2, [r3, #0]
  }
  break;
 80071ba:	e13f      	b.n	800743c <AT_Send+0x2e0>

  case AT_SET_RFPOWER:
//    Debug("Setting RF Power");
    ATCommandSend = RFPower();
 80071bc:	230f      	movs	r3, #15
 80071be:	18fc      	adds	r4, r7, r3
 80071c0:	f7ff fb6e 	bl	80068a0 <RFPower>
 80071c4:	0003      	movs	r3, r0
 80071c6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071c8:	f00d fb54 	bl	8014874 <HAL_GetTick>
 80071cc:	0003      	movs	r3, r0
 80071ce:	330a      	adds	r3, #10
 80071d0:	001a      	movs	r2, r3
 80071d2:	4b9f      	ldr	r3, [pc, #636]	@ (8007450 <AT_Send+0x2f4>)
 80071d4:	601a      	str	r2, [r3, #0]
    break;
 80071d6:	e132      	b.n	800743e <AT_Send+0x2e2>

  case AT_CHECK_RFPOWER:
//    Debug("Checking RF Power");
    ATCommandSend = CheckRFPower();
 80071d8:	230f      	movs	r3, #15
 80071da:	18fc      	adds	r4, r7, r3
 80071dc:	f7ff fb7c 	bl	80068d8 <CheckRFPower>
 80071e0:	0003      	movs	r3, r0
 80071e2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071e4:	f00d fb46 	bl	8014874 <HAL_GetTick>
 80071e8:	0003      	movs	r3, r0
 80071ea:	330a      	adds	r3, #10
 80071ec:	001a      	movs	r2, r3
 80071ee:	4b98      	ldr	r3, [pc, #608]	@ (8007450 <AT_Send+0x2f4>)
 80071f0:	601a      	str	r2, [r3, #0]
    break;
 80071f2:	e124      	b.n	800743e <AT_Send+0x2e2>

  case AT_RESTORE:
//    Debug("Restoring ESP");
    ATCommandSend = ATRestore();
 80071f4:	230f      	movs	r3, #15
 80071f6:	18fc      	adds	r4, r7, r3
 80071f8:	f7ff fb8a 	bl	8006910 <ATRestore>
 80071fc:	0003      	movs	r3, r0
 80071fe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007200:	f00d fb38 	bl	8014874 <HAL_GetTick>
 8007204:	0003      	movs	r3, r0
 8007206:	3332      	adds	r3, #50	@ 0x32
 8007208:	001a      	movs	r2, r3
 800720a:	4b91      	ldr	r3, [pc, #580]	@ (8007450 <AT_Send+0x2f4>)
 800720c:	601a      	str	r2, [r3, #0]
    break;
 800720e:	e116      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWINIT:
//    Debug("Initializing Wi-Fi");
    ATCommandSend = CWINIT();
 8007210:	230f      	movs	r3, #15
 8007212:	18fc      	adds	r4, r7, r3
 8007214:	f7ff fb98 	bl	8006948 <CWINIT>
 8007218:	0003      	movs	r3, r0
 800721a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800721c:	f00d fb2a 	bl	8014874 <HAL_GetTick>
 8007220:	0003      	movs	r3, r0
 8007222:	33f5      	adds	r3, #245	@ 0xf5
 8007224:	33ff      	adds	r3, #255	@ 0xff
 8007226:	001a      	movs	r2, r3
 8007228:	4b89      	ldr	r3, [pc, #548]	@ (8007450 <AT_Send+0x2f4>)
 800722a:	601a      	str	r2, [r3, #0]
    break;
 800722c:	e107      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWSTATE:
//    Debug("Checking current SSID");
    ATCommandSend = CWSTATE();
 800722e:	230f      	movs	r3, #15
 8007230:	18fc      	adds	r4, r7, r3
 8007232:	f7ff fc93 	bl	8006b5c <CWSTATE>
 8007236:	0003      	movs	r3, r0
 8007238:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800723a:	f00d fb1b 	bl	8014874 <HAL_GetTick>
 800723e:	0003      	movs	r3, r0
 8007240:	33f5      	adds	r3, #245	@ 0xf5
 8007242:	33ff      	adds	r3, #255	@ 0xff
 8007244:	001a      	movs	r2, r3
 8007246:	4b82      	ldr	r3, [pc, #520]	@ (8007450 <AT_Send+0x2f4>)
 8007248:	601a      	str	r2, [r3, #0]
    break;
 800724a:	e0f8      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWMODE1:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE1();
 800724c:	230f      	movs	r3, #15
 800724e:	18fc      	adds	r4, r7, r3
 8007250:	f7ff fb96 	bl	8006980 <CWMODE1>
 8007254:	0003      	movs	r3, r0
 8007256:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007258:	f00d fb0c 	bl	8014874 <HAL_GetTick>
 800725c:	0003      	movs	r3, r0
 800725e:	330a      	adds	r3, #10
 8007260:	001a      	movs	r2, r3
 8007262:	4b7b      	ldr	r3, [pc, #492]	@ (8007450 <AT_Send+0x2f4>)
 8007264:	601a      	str	r2, [r3, #0]
    break;
 8007266:	e0ea      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWMODE2:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE2();
 8007268:	230f      	movs	r3, #15
 800726a:	18fc      	adds	r4, r7, r3
 800726c:	f7ff fba4 	bl	80069b8 <CWMODE2>
 8007270:	0003      	movs	r3, r0
 8007272:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007274:	f00d fafe 	bl	8014874 <HAL_GetTick>
 8007278:	0003      	movs	r3, r0
 800727a:	330a      	adds	r3, #10
 800727c:	001a      	movs	r2, r3
 800727e:	4b74      	ldr	r3, [pc, #464]	@ (8007450 <AT_Send+0x2f4>)
 8007280:	601a      	str	r2, [r3, #0]
    break;
 8007282:	e0dc      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWAUTOCONN:
//    Debug("Setting auto connect");
    ATCommandSend = CWAUTOCONN();
 8007284:	230f      	movs	r3, #15
 8007286:	18fc      	adds	r4, r7, r3
 8007288:	f7ff fbb2 	bl	80069f0 <CWAUTOCONN>
 800728c:	0003      	movs	r3, r0
 800728e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007290:	f00d faf0 	bl	8014874 <HAL_GetTick>
 8007294:	0003      	movs	r3, r0
 8007296:	330a      	adds	r3, #10
 8007298:	001a      	movs	r2, r3
 800729a:	4b6d      	ldr	r3, [pc, #436]	@ (8007450 <AT_Send+0x2f4>)
 800729c:	601a      	str	r2, [r3, #0]
    break;
 800729e:	e0ce      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 80072a0:	4a6e      	ldr	r2, [pc, #440]	@ (800745c <AT_Send+0x300>)
 80072a2:	4b6d      	ldr	r3, [pc, #436]	@ (8007458 <AT_Send+0x2fc>)
 80072a4:	0019      	movs	r1, r3
 80072a6:	2003      	movs	r0, #3
 80072a8:	f00c fd6c 	bl	8013d84 <CreateLine>
    ATCommandSend = CWJAP();
 80072ac:	230f      	movs	r3, #15
 80072ae:	18fc      	adds	r4, r7, r3
 80072b0:	f7ff fbba 	bl	8006a28 <CWJAP>
 80072b4:	0003      	movs	r3, r0
 80072b6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80072b8:	f00d fadc 	bl	8014874 <HAL_GetTick>
 80072bc:	0003      	movs	r3, r0
 80072be:	3332      	adds	r3, #50	@ 0x32
 80072c0:	001a      	movs	r2, r3
 80072c2:	4b63      	ldr	r3, [pc, #396]	@ (8007450 <AT_Send+0x2f4>)
 80072c4:	601a      	str	r2, [r3, #0]
    break;
 80072c6:	e0ba      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWMODE3:
//    Debug("SET in station/soft-ap mode");
    ATCommandSend = CWMODE3();
 80072c8:	230f      	movs	r3, #15
 80072ca:	18fc      	adds	r4, r7, r3
 80072cc:	f7ff fc2a 	bl	8006b24 <CWMODE3>
 80072d0:	0003      	movs	r3, r0
 80072d2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072d4:	f00d face 	bl	8014874 <HAL_GetTick>
 80072d8:	0003      	movs	r3, r0
 80072da:	330a      	adds	r3, #10
 80072dc:	001a      	movs	r2, r3
 80072de:	4b5c      	ldr	r3, [pc, #368]	@ (8007450 <AT_Send+0x2f4>)
 80072e0:	601a      	str	r2, [r3, #0]
    break;
 80072e2:	e0ac      	b.n	800743e <AT_Send+0x2e2>

  case AT_CWSAP:
//    Debug("SET soft AP mode parameters");
    ATCommandSend = CWSAP();
 80072e4:	230f      	movs	r3, #15
 80072e6:	18fc      	adds	r4, r7, r3
 80072e8:	f7ff fc54 	bl	8006b94 <CWSAP>
 80072ec:	0003      	movs	r3, r0
 80072ee:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072f0:	f00d fac0 	bl	8014874 <HAL_GetTick>
 80072f4:	0003      	movs	r3, r0
 80072f6:	330a      	adds	r3, #10
 80072f8:	001a      	movs	r2, r3
 80072fa:	4b55      	ldr	r3, [pc, #340]	@ (8007450 <AT_Send+0x2f4>)
 80072fc:	601a      	str	r2, [r3, #0]
    break;
 80072fe:	e09e      	b.n	800743e <AT_Send+0x2e2>

  case AT_CIPMUX:
//    Debug("ATCommandSend = CIPMUX()");
    ATCommandSend = CIPMUX();
 8007300:	230f      	movs	r3, #15
 8007302:	18fc      	adds	r4, r7, r3
 8007304:	f7ff fc62 	bl	8006bcc <CIPMUX>
 8007308:	0003      	movs	r3, r0
 800730a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800730c:	f00d fab2 	bl	8014874 <HAL_GetTick>
 8007310:	0003      	movs	r3, r0
 8007312:	330a      	adds	r3, #10
 8007314:	001a      	movs	r2, r3
 8007316:	4b4e      	ldr	r3, [pc, #312]	@ (8007450 <AT_Send+0x2f4>)
 8007318:	601a      	str	r2, [r3, #0]
    break;
 800731a:	e090      	b.n	800743e <AT_Send+0x2e2>

  case AT_WEBSERVER:
//    Debug("ATCommandSend = WEBSERVER()");
    ATCommandSend = WEBSERVER();
 800731c:	230f      	movs	r3, #15
 800731e:	18fc      	adds	r4, r7, r3
 8007320:	f7ff fc70 	bl	8006c04 <WEBSERVER>
 8007324:	0003      	movs	r3, r0
 8007326:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007328:	f00d faa4 	bl	8014874 <HAL_GetTick>
 800732c:	0003      	movs	r3, r0
 800732e:	330a      	adds	r3, #10
 8007330:	001a      	movs	r2, r3
 8007332:	4b47      	ldr	r3, [pc, #284]	@ (8007450 <AT_Send+0x2f4>)
 8007334:	601a      	str	r2, [r3, #0]
    break;
 8007336:	e082      	b.n	800743e <AT_Send+0x2e2>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8007338:	230f      	movs	r3, #15
 800733a:	18fc      	adds	r4, r7, r3
 800733c:	f7ff fc7e 	bl	8006c3c <HTTPCPOST>
 8007340:	0003      	movs	r3, r0
 8007342:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007344:	f00d fa96 	bl	8014874 <HAL_GetTick>
 8007348:	0003      	movs	r3, r0
 800734a:	33f5      	adds	r3, #245	@ 0xf5
 800734c:	33ff      	adds	r3, #255	@ 0xff
 800734e:	001a      	movs	r2, r3
 8007350:	4b3f      	ldr	r3, [pc, #252]	@ (8007450 <AT_Send+0x2f4>)
 8007352:	601a      	str	r2, [r3, #0]
    break;
 8007354:	e073      	b.n	800743e <AT_Send+0x2e2>

  case AT_SENDDATA:
//    Debug("Send the data");
    ATCommandSend = SENDDATA();
 8007356:	230f      	movs	r3, #15
 8007358:	18fc      	adds	r4, r7, r3
 800735a:	f7ff fd31 	bl	8006dc0 <SENDDATA>
 800735e:	0003      	movs	r3, r0
 8007360:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8007362:	f00d fa87 	bl	8014874 <HAL_GetTick>
 8007366:	0003      	movs	r3, r0
 8007368:	33f5      	adds	r3, #245	@ 0xf5
 800736a:	33ff      	adds	r3, #255	@ 0xff
 800736c:	001a      	movs	r2, r3
 800736e:	4b38      	ldr	r3, [pc, #224]	@ (8007450 <AT_Send+0x2f4>)
 8007370:	601a      	str	r2, [r3, #0]
    break;
 8007372:	e064      	b.n	800743e <AT_Send+0x2e2>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8007374:	4a3a      	ldr	r2, [pc, #232]	@ (8007460 <AT_Send+0x304>)
 8007376:	4b38      	ldr	r3, [pc, #224]	@ (8007458 <AT_Send+0x2fc>)
 8007378:	0019      	movs	r1, r3
 800737a:	2003      	movs	r0, #3
 800737c:	f00c fd02 	bl	8013d84 <CreateLine>
    ATCommandSend = SLEEP();
 8007380:	230f      	movs	r3, #15
 8007382:	18fc      	adds	r4, r7, r3
 8007384:	f7ff fd34 	bl	8006df0 <SLEEP>
 8007388:	0003      	movs	r3, r0
 800738a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800738c:	f00d fa72 	bl	8014874 <HAL_GetTick>
 8007390:	0003      	movs	r3, r0
 8007392:	330a      	adds	r3, #10
 8007394:	001a      	movs	r2, r3
 8007396:	4b2e      	ldr	r3, [pc, #184]	@ (8007450 <AT_Send+0x2f4>)
 8007398:	601a      	str	r2, [r3, #0]
    break;
 800739a:	e050      	b.n	800743e <AT_Send+0x2e2>

  case AT_CIPSNTPCFG:
//    Debug("Config SNTP client");
    ATCommandSend = CIPSNTPCFG();
 800739c:	230f      	movs	r3, #15
 800739e:	18fc      	adds	r4, r7, r3
 80073a0:	f7ff fd42 	bl	8006e28 <CIPSNTPCFG>
 80073a4:	0003      	movs	r3, r0
 80073a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80073a8:	f00d fa64 	bl	8014874 <HAL_GetTick>
 80073ac:	0003      	movs	r3, r0
 80073ae:	330a      	adds	r3, #10
 80073b0:	001a      	movs	r2, r3
 80073b2:	4b27      	ldr	r3, [pc, #156]	@ (8007450 <AT_Send+0x2f4>)
 80073b4:	601a      	str	r2, [r3, #0]
    break;
 80073b6:	e042      	b.n	800743e <AT_Send+0x2e2>

  case AT_CIPSNTPTIME:
//    Debug("Get time from internet");
    ATCommandSend = CIPSNTPTIME();
 80073b8:	230f      	movs	r3, #15
 80073ba:	18fc      	adds	r4, r7, r3
 80073bc:	f7ff fd54 	bl	8006e68 <CIPSNTPTIME>
 80073c0:	0003      	movs	r3, r0
 80073c2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80073c4:	f00d fa56 	bl	8014874 <HAL_GetTick>
 80073c8:	0003      	movs	r3, r0
 80073ca:	33f5      	adds	r3, #245	@ 0xf5
 80073cc:	33ff      	adds	r3, #255	@ 0xff
 80073ce:	001a      	movs	r2, r3
 80073d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007450 <AT_Send+0x2f4>)
 80073d2:	601a      	str	r2, [r3, #0]
    break;
 80073d4:	e033      	b.n	800743e <AT_Send+0x2e2>

  case AT_CIPSNTPINTV:
//    Debug("Set the interval to timesync");
    ATCommandSend = CIPSNTPINTV();
 80073d6:	230f      	movs	r3, #15
 80073d8:	18fc      	adds	r4, r7, r3
 80073da:	f7ff fd61 	bl	8006ea0 <CIPSNTPINTV>
 80073de:	0003      	movs	r3, r0
 80073e0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80073e2:	f00d fa47 	bl	8014874 <HAL_GetTick>
 80073e6:	0003      	movs	r3, r0
 80073e8:	330a      	adds	r3, #10
 80073ea:	001a      	movs	r2, r3
 80073ec:	4b18      	ldr	r3, [pc, #96]	@ (8007450 <AT_Send+0x2f4>)
 80073ee:	601a      	str	r2, [r3, #0]
    break;
 80073f0:	e025      	b.n	800743e <AT_Send+0x2e2>
#ifdef USE_MAIL
  case AT_HTTPCPOST_MAILAPI:
    Debug("Start EMAIL via API");
 80073f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007464 <AT_Send+0x308>)
 80073f4:	4b18      	ldr	r3, [pc, #96]	@ (8007458 <AT_Send+0x2fc>)
 80073f6:	0019      	movs	r1, r3
 80073f8:	2003      	movs	r0, #3
 80073fa:	f00c fcc3 	bl	8013d84 <CreateLine>
    ATCommandSend = HTTPCPOST_MAILAPI();
 80073fe:	230f      	movs	r3, #15
 8007400:	18fc      	adds	r4, r7, r3
 8007402:	f7ff fc99 	bl	8006d38 <HTTPCPOST_MAILAPI>
 8007406:	0003      	movs	r3, r0
 8007408:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800740a:	f00d fa33 	bl	8014874 <HAL_GetTick>
 800740e:	0003      	movs	r3, r0
 8007410:	3332      	adds	r3, #50	@ 0x32
 8007412:	001a      	movs	r2, r3
 8007414:	4b0e      	ldr	r3, [pc, #56]	@ (8007450 <AT_Send+0x2f4>)
 8007416:	601a      	str	r2, [r3, #0]
    break;
 8007418:	e011      	b.n	800743e <AT_Send+0x2e2>

  case AT_SENDMAIL:
//    Debug("Send Email content");
    ATCommandSend = SENDMAIL();
 800741a:	230f      	movs	r3, #15
 800741c:	18fc      	adds	r4, r7, r3
 800741e:	f7ff fc73 	bl	8006d08 <SENDMAIL>
 8007422:	0003      	movs	r3, r0
 8007424:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8007426:	f00d fa25 	bl	8014874 <HAL_GetTick>
 800742a:	0003      	movs	r3, r0
 800742c:	33f5      	adds	r3, #245	@ 0xf5
 800742e:	33ff      	adds	r3, #255	@ 0xff
 8007430:	001a      	movs	r2, r3
 8007432:	4b07      	ldr	r3, [pc, #28]	@ (8007450 <AT_Send+0x2f4>)
 8007434:	601a      	str	r2, [r3, #0]
    break;
 8007436:	e002      	b.n	800743e <AT_Send+0x2e2>
#endif

  case AT_END:
    break;
 8007438:	46c0      	nop			@ (mov r8, r8)
 800743a:	e000      	b.n	800743e <AT_Send+0x2e2>
  break;
 800743c:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800743e:	230f      	movs	r3, #15
 8007440:	18fb      	adds	r3, r7, r3
 8007442:	781b      	ldrb	r3, [r3, #0]
}
 8007444:	0018      	movs	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	b005      	add	sp, #20
 800744a:	bd90      	pop	{r4, r7, pc}
 800744c:	0802dd10 	.word	0x0802dd10
 8007450:	20000694 	.word	0x20000694
 8007454:	0802affc 	.word	0x0802affc
 8007458:	0802a904 	.word	0x0802a904
 800745c:	0802b008 	.word	0x0802b008
 8007460:	0802b01c 	.word	0x0802b01c
 8007464:	0802b040 	.word	0x0802b040

08007468 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800746e:	1dfb      	adds	r3, r7, #7
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8007474:	4b82      	ldr	r3, [pc, #520]	@ (8007680 <ESP_WakeTest+0x218>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b05      	cmp	r3, #5
 800747a:	d900      	bls.n	800747e <ESP_WakeTest+0x16>
 800747c:	e0e4      	b.n	8007648 <ESP_WakeTest+0x1e0>
 800747e:	009a      	lsls	r2, r3, #2
 8007480:	4b80      	ldr	r3, [pc, #512]	@ (8007684 <ESP_WakeTest+0x21c>)
 8007482:	18d3      	adds	r3, r2, r3
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8007488:	4b7f      	ldr	r3, [pc, #508]	@ (8007688 <ESP_WakeTest+0x220>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2201      	movs	r2, #1
 800748e:	4053      	eors	r3, r2
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d041      	beq.n	800751a <ESP_WakeTest+0xb2>
        EspTurnedOn = true;
 8007496:	4b7c      	ldr	r3, [pc, #496]	@ (8007688 <ESP_WakeTest+0x220>)
 8007498:	2201      	movs	r2, #1
 800749a:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800749c:	2380      	movs	r3, #128	@ 0x80
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	487a      	ldr	r0, [pc, #488]	@ (800768c <ESP_WakeTest+0x224>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	0019      	movs	r1, r3
 80074a6:	f00e fc58 	bl	8015d5a <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80074aa:	2032      	movs	r0, #50	@ 0x32
 80074ac:	f00d f9ec 	bl	8014888 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80074b0:	2380      	movs	r3, #128	@ 0x80
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	4875      	ldr	r0, [pc, #468]	@ (800768c <ESP_WakeTest+0x224>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	0019      	movs	r1, r3
 80074ba:	f00e fc4e 	bl	8015d5a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80074be:	200a      	movs	r0, #10
 80074c0:	f00d f9e2 	bl	8014888 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80074c4:	4b72      	ldr	r3, [pc, #456]	@ (8007690 <ESP_WakeTest+0x228>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	2101      	movs	r1, #1
 80074ca:	0018      	movs	r0, r3
 80074cc:	f00e fc45 	bl	8015d5a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80074d0:	200a      	movs	r0, #10
 80074d2:	f00d f9d9 	bl	8014888 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80074d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007690 <ESP_WakeTest+0x228>)
 80074d8:	2201      	movs	r2, #1
 80074da:	2102      	movs	r1, #2
 80074dc:	0018      	movs	r0, r3
 80074de:	f00e fc3c 	bl	8015d5a <HAL_GPIO_WritePin>
        HAL_Delay(50); // wait for 5RC
 80074e2:	2032      	movs	r0, #50	@ 0x32
 80074e4:	f00d f9d0 	bl	8014888 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80074e8:	4b69      	ldr	r3, [pc, #420]	@ (8007690 <ESP_WakeTest+0x228>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	2101      	movs	r1, #1
 80074ee:	0018      	movs	r0, r3
 80074f0:	f00e fc33 	bl	8015d5a <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80074f4:	2064      	movs	r0, #100	@ 0x64
 80074f6:	f00d f9c7 	bl	8014888 <HAL_Delay>
        batteryCharge = ReadBatteryVoltage();  // read voltage in loaded condition
 80074fa:	f002 fad7 	bl	8009aac <ReadBatteryVoltage>
 80074fe:	1c02      	adds	r2, r0, #0
 8007500:	4b64      	ldr	r3, [pc, #400]	@ (8007694 <ESP_WakeTest+0x22c>)
 8007502:	601a      	str	r2, [r3, #0]
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8007504:	f00d f9b6 	bl	8014874 <HAL_GetTick>
 8007508:	0003      	movs	r3, r0
 800750a:	22e1      	movs	r2, #225	@ 0xe1
 800750c:	0092      	lsls	r2, r2, #2
 800750e:	189a      	adds	r2, r3, r2
 8007510:	4b61      	ldr	r3, [pc, #388]	@ (8007698 <ESP_WakeTest+0x230>)
 8007512:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8007514:	4b5c      	ldr	r3, [pc, #368]	@ (8007688 <ESP_WakeTest+0x220>)
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800751a:	2380      	movs	r3, #128	@ 0x80
 800751c:	005a      	lsls	r2, r3, #1
 800751e:	4b5f      	ldr	r3, [pc, #380]	@ (800769c <ESP_WakeTest+0x234>)
 8007520:	0011      	movs	r1, r2
 8007522:	0018      	movs	r0, r3
 8007524:	f7fd fcfe 	bl	8004f24 <ESP_Receive>
 8007528:	1e03      	subs	r3, r0, #0
 800752a:	d100      	bne.n	800752e <ESP_WakeTest+0xc6>
 800752c:	e09f      	b.n	800766e <ESP_WakeTest+0x206>
        TestState = ESP_TEST_SEND;
 800752e:	4b54      	ldr	r3, [pc, #336]	@ (8007680 <ESP_WakeTest+0x218>)
 8007530:	2201      	movs	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007534:	e09b      	b.n	800766e <ESP_WakeTest+0x206>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8007536:	4b58      	ldr	r3, [pc, #352]	@ (8007698 <ESP_WakeTest+0x230>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	0018      	movs	r0, r3
 800753c:	f00c fbcc 	bl	8013cd8 <TimestampIsReached>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d100      	bne.n	8007546 <ESP_WakeTest+0xde>
 8007544:	e095      	b.n	8007672 <ESP_WakeTest+0x20a>
        ATSend = AT_Send(ATCommand);
 8007546:	4b56      	ldr	r3, [pc, #344]	@ (80076a0 <ESP_WakeTest+0x238>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	1dfc      	adds	r4, r7, #7
 800754c:	0018      	movs	r0, r3
 800754e:	f7ff fe05 	bl	800715c <AT_Send>
 8007552:	0003      	movs	r3, r0
 8007554:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007556:	1dfb      	adds	r3, r7, #7
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d100      	bne.n	8007560 <ESP_WakeTest+0xf8>
 800755e:	e088      	b.n	8007672 <ESP_WakeTest+0x20a>
          TestState = ESP_TEST_RECEIVE;
 8007560:	4b47      	ldr	r3, [pc, #284]	@ (8007680 <ESP_WakeTest+0x218>)
 8007562:	2202      	movs	r2, #2
 8007564:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007566:	e084      	b.n	8007672 <ESP_WakeTest+0x20a>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8007568:	4b4b      	ldr	r3, [pc, #300]	@ (8007698 <ESP_WakeTest+0x230>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	0018      	movs	r0, r3
 800756e:	f00c fbb3 	bl	8013cd8 <TimestampIsReached>
 8007572:	1e03      	subs	r3, r0, #0
 8007574:	d100      	bne.n	8007578 <ESP_WakeTest+0x110>
 8007576:	e07e      	b.n	8007676 <ESP_WakeTest+0x20e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007578:	4b4a      	ldr	r3, [pc, #296]	@ (80076a4 <ESP_WakeTest+0x23c>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	0018      	movs	r0, r3
 800757e:	f7ff fcab 	bl	8006ed8 <DMA_ProcessBuffer>
 8007582:	0003      	movs	r3, r0
 8007584:	001a      	movs	r2, r3
 8007586:	4b48      	ldr	r3, [pc, #288]	@ (80076a8 <ESP_WakeTest+0x240>)
 8007588:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800758a:	4b47      	ldr	r3, [pc, #284]	@ (80076a8 <ESP_WakeTest+0x240>)
 800758c:	781a      	ldrb	r2, [r3, #0]
 800758e:	4b45      	ldr	r3, [pc, #276]	@ (80076a4 <ESP_WakeTest+0x23c>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	1dbc      	adds	r4, r7, #6
 8007594:	0019      	movs	r1, r3
 8007596:	0010      	movs	r0, r2
 8007598:	f7ff fd9e 	bl	80070d8 <ATCompare>
 800759c:	0003      	movs	r3, r0
 800759e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80075a0:	4b41      	ldr	r3, [pc, #260]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d102      	bne.n	80075ae <ESP_WakeTest+0x146>
          TestState = ESP_TEST_SEND;
 80075a8:	4b35      	ldr	r3, [pc, #212]	@ (8007680 <ESP_WakeTest+0x218>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80075ae:	4b3e      	ldr	r3, [pc, #248]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b07      	cmp	r3, #7
 80075b4:	d104      	bne.n	80075c0 <ESP_WakeTest+0x158>
          StartProg();
 80075b6:	f7fe ff35 	bl	8006424 <StartProg>
          TestState = ESP_TEST_BOOT;
 80075ba:	4b31      	ldr	r3, [pc, #196]	@ (8007680 <ESP_WakeTest+0x218>)
 80075bc:	2205      	movs	r2, #5
 80075be:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80075c0:	4b39      	ldr	r3, [pc, #228]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d109      	bne.n	80075dc <ESP_WakeTest+0x174>
          ESPTimeStamp = HAL_GetTick() + 50;
 80075c8:	f00d f954 	bl	8014874 <HAL_GetTick>
 80075cc:	0003      	movs	r3, r0
 80075ce:	3332      	adds	r3, #50	@ 0x32
 80075d0:	001a      	movs	r2, r3
 80075d2:	4b31      	ldr	r3, [pc, #196]	@ (8007698 <ESP_WakeTest+0x230>)
 80075d4:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80075d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007680 <ESP_WakeTest+0x218>)
 80075d8:	2201      	movs	r2, #1
 80075da:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80075dc:	1dbb      	adds	r3, r7, #6
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d048      	beq.n	8007676 <ESP_WakeTest+0x20e>
          TestState = ESP_TEST_VALIDATE;
 80075e4:	4b26      	ldr	r3, [pc, #152]	@ (8007680 <ESP_WakeTest+0x218>)
 80075e6:	2203      	movs	r2, #3
 80075e8:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80075ea:	e044      	b.n	8007676 <ESP_WakeTest+0x20e>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80075ec:	4b2f      	ldr	r3, [pc, #188]	@ (80076ac <ESP_WakeTest+0x244>)
 80075ee:	22fa      	movs	r2, #250	@ 0xfa
 80075f0:	0112      	lsls	r2, r2, #4
 80075f2:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80075f4:	f00b f880 	bl	80126f8 <Calculate_LED_ON>
 80075f8:	0003      	movs	r3, r0
 80075fa:	001a      	movs	r2, r3
 80075fc:	4b2b      	ldr	r3, [pc, #172]	@ (80076ac <ESP_WakeTest+0x244>)
 80075fe:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8007600:	4b2a      	ldr	r3, [pc, #168]	@ (80076ac <ESP_WakeTest+0x244>)
 8007602:	22fa      	movs	r2, #250	@ 0xfa
 8007604:	0112      	lsls	r2, r2, #4
 8007606:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8007608:	4b1d      	ldr	r3, [pc, #116]	@ (8007680 <ESP_WakeTest+0x218>)
 800760a:	2204      	movs	r2, #4
 800760c:	701a      	strb	r2, [r3, #0]

      break;
 800760e:	e033      	b.n	8007678 <ESP_WakeTest+0x210>

    case ESP_TEST_DEINIT:
      testRound = false;
 8007610:	4b27      	ldr	r3, [pc, #156]	@ (80076b0 <ESP_WakeTest+0x248>)
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007616:	4b1e      	ldr	r3, [pc, #120]	@ (8007690 <ESP_WakeTest+0x228>)
 8007618:	2200      	movs	r2, #0
 800761a:	2101      	movs	r1, #1
 800761c:	0018      	movs	r0, r3
 800761e:	f00e fb9c 	bl	8015d5a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007622:	2380      	movs	r3, #128	@ 0x80
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	4819      	ldr	r0, [pc, #100]	@ (800768c <ESP_WakeTest+0x224>)
 8007628:	2200      	movs	r2, #0
 800762a:	0019      	movs	r1, r3
 800762c:	f00e fb95 	bl	8015d5a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007630:	4b17      	ldr	r3, [pc, #92]	@ (8007690 <ESP_WakeTest+0x228>)
 8007632:	2200      	movs	r2, #0
 8007634:	2102      	movs	r1, #2
 8007636:	0018      	movs	r0, r3
 8007638:	f00e fb8f 	bl	8015d5a <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 800763c:	f005 ff9c 	bl	800d578 <SetESPMeasurementDone>
      EspTurnedOn = false;
 8007640:	4b11      	ldr	r3, [pc, #68]	@ (8007688 <ESP_WakeTest+0x220>)
 8007642:	2200      	movs	r2, #0
 8007644:	701a      	strb	r2, [r3, #0]
      break;
 8007646:	e017      	b.n	8007678 <ESP_WakeTest+0x210>

    default:
      TestState = ESP_TEST_INIT;
 8007648:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <ESP_WakeTest+0x218>)
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
      break;
 800764e:	e013      	b.n	8007678 <ESP_WakeTest+0x210>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8007650:	4b16      	ldr	r3, [pc, #88]	@ (80076ac <ESP_WakeTest+0x244>)
 8007652:	22fa      	movs	r2, #250	@ 0xfa
 8007654:	0112      	lsls	r2, r2, #4
 8007656:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8007658:	4b14      	ldr	r3, [pc, #80]	@ (80076ac <ESP_WakeTest+0x244>)
 800765a:	22fa      	movs	r2, #250	@ 0xfa
 800765c:	0112      	lsls	r2, r2, #4
 800765e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8007660:	f00b f84a 	bl	80126f8 <Calculate_LED_ON>
 8007664:	0003      	movs	r3, r0
 8007666:	001a      	movs	r2, r3
 8007668:	4b10      	ldr	r3, [pc, #64]	@ (80076ac <ESP_WakeTest+0x244>)
 800766a:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800766c:	e004      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 800766e:	46c0      	nop			@ (mov r8, r8)
 8007670:	e002      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 8007672:	46c0      	nop			@ (mov r8, r8)
 8007674:	e000      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 8007676:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007678:	46c0      	nop			@ (mov r8, r8)
 800767a:	46bd      	mov	sp, r7
 800767c:	b003      	add	sp, #12
 800767e:	bd90      	pop	{r4, r7, pc}
 8007680:	20000703 	.word	0x20000703
 8007684:	0802dd6c 	.word	0x0802dd6c
 8007688:	200005ac 	.word	0x200005ac
 800768c:	50000800 	.word	0x50000800
 8007690:	50001c00 	.word	0x50001c00
 8007694:	20002158 	.word	0x20002158
 8007698:	20000694 	.word	0x20000694
 800769c:	200004ac 	.word	0x200004ac
 80076a0:	20000701 	.word	0x20000701
 80076a4:	20000700 	.word	0x20000700
 80076a8:	20000033 	.word	0x20000033
 80076ac:	40000400 	.word	0x40000400
 80076b0:	20000001 	.word	0x20000001

080076b4 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80076b4:	b5b0      	push	{r4, r5, r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80076ba:	1dfb      	adds	r3, r7, #7
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
// Het lijkt er op dat ESP32  niet meer start indien de batterijspanning onder de 3,77 Volt daalt.
// Om uart fouten te voorkomen mogelijk ESP niet meer afhandelen.
  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80076c0:	4b6a      	ldr	r3, [pc, #424]	@ (800786c <ESP_Upkeep+0x1b8>)
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d028      	beq.n	800771e <ESP_Upkeep+0x6a>
 80076cc:	f00c fbe4 	bl	8013e98 <GetVerboseLevel>
 80076d0:	0003      	movs	r3, r0
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d123      	bne.n	800771e <ESP_Upkeep+0x6a>
    oldEspState = EspState;
 80076d6:	4b65      	ldr	r3, [pc, #404]	@ (800786c <ESP_Upkeep+0x1b8>)
 80076d8:	781a      	ldrb	r2, [r3, #0]
 80076da:	4b65      	ldr	r3, [pc, #404]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076dc:	701a      	strb	r2, [r3, #0]
#ifdef USE_MAIL
    if ( !((oldEspState == 3) && ((ATCommand == AT_HTTPCPOST) || (ATCommand == AT_HTTPCPOST_MAILAPI))) ) {
 80076de:	4b64      	ldr	r3, [pc, #400]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d107      	bne.n	80076f6 <ESP_Upkeep+0x42>
 80076e6:	4b63      	ldr	r3, [pc, #396]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b0e      	cmp	r3, #14
 80076ec:	d017      	beq.n	800771e <ESP_Upkeep+0x6a>
 80076ee:	4b61      	ldr	r3, [pc, #388]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b14      	cmp	r3, #20
 80076f4:	d013      	beq.n	800771e <ESP_Upkeep+0x6a>
#else
      if ( !((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
#endif
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80076f6:	4b5e      	ldr	r3, [pc, #376]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	001d      	movs	r5, r3
 80076fc:	4b5d      	ldr	r3, [pc, #372]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	0018      	movs	r0, r3
 8007702:	4b5d      	ldr	r3, [pc, #372]	@ (8007878 <ESP_Upkeep+0x1c4>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	001c      	movs	r4, r3
 8007708:	4b5c      	ldr	r3, [pc, #368]	@ (800787c <ESP_Upkeep+0x1c8>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	4a5c      	ldr	r2, [pc, #368]	@ (8007880 <ESP_Upkeep+0x1cc>)
 800770e:	495d      	ldr	r1, [pc, #372]	@ (8007884 <ESP_Upkeep+0x1d0>)
 8007710:	9302      	str	r3, [sp, #8]
 8007712:	9401      	str	r4, [sp, #4]
 8007714:	9000      	str	r0, [sp, #0]
 8007716:	002b      	movs	r3, r5
 8007718:	2003      	movs	r0, #3
 800771a:	f00c fb33 	bl	8013d84 <CreateLine>
    }
  }
  switch (EspState) {
 800771e:	4b53      	ldr	r3, [pc, #332]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b0f      	cmp	r3, #15
 8007724:	d901      	bls.n	800772a <ESP_Upkeep+0x76>
 8007726:	f000 fcf0 	bl	800810a <ESP_Upkeep+0xa56>
 800772a:	009a      	lsls	r2, r3, #2
 800772c:	4b56      	ldr	r3, [pc, #344]	@ (8007888 <ESP_Upkeep+0x1d4>)
 800772e:	18d3      	adds	r3, r2, r3
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8007734:	4b4d      	ldr	r3, [pc, #308]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007736:	2201      	movs	r2, #1
 8007738:	701a      	strb	r2, [r3, #0]
      break;
 800773a:	f000 fd01 	bl	8008140 <ESP_Upkeep+0xa8c>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 800773e:	4b53      	ldr	r3, [pc, #332]	@ (800788c <ESP_Upkeep+0x1d8>)
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 8007744:	f006 f978 	bl	800da38 <AllDevicesReady>
 8007748:	0003      	movs	r3, r0
 800774a:	001a      	movs	r2, r3
 800774c:	2301      	movs	r3, #1
 800774e:	4053      	eors	r3, r2
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <ESP_Upkeep+0xa6>
 8007756:	f000 fce4 	bl	8008122 <ESP_Upkeep+0xa6e>
//        Debug("Waiting for all devices ready");
        break;
      }
      SetESPIndicator();
 800775a:	f00b f927 	bl	80129ac <SetESPIndicator>
      if(!EspTurnedOn){
 800775e:	4b4c      	ldr	r3, [pc, #304]	@ (8007890 <ESP_Upkeep+0x1dc>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2201      	movs	r2, #1
 8007764:	4053      	eors	r3, r2
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d044      	beq.n	80077f6 <ESP_Upkeep+0x142>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800776c:	2380      	movs	r3, #128	@ 0x80
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	4848      	ldr	r0, [pc, #288]	@ (8007894 <ESP_Upkeep+0x1e0>)
 8007772:	2200      	movs	r2, #0
 8007774:	0019      	movs	r1, r3
 8007776:	f00e faf0 	bl	8015d5a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800777a:	200a      	movs	r0, #10
 800777c:	f00d f884 	bl	8014888 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007780:	2380      	movs	r3, #128	@ 0x80
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	4843      	ldr	r0, [pc, #268]	@ (8007894 <ESP_Upkeep+0x1e0>)
 8007786:	2201      	movs	r2, #1
 8007788:	0019      	movs	r1, r3
 800778a:	f00e fae6 	bl	8015d5a <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800778e:	2032      	movs	r0, #50	@ 0x32
 8007790:	f00d f87a 	bl	8014888 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007794:	4b40      	ldr	r3, [pc, #256]	@ (8007898 <ESP_Upkeep+0x1e4>)
 8007796:	2200      	movs	r2, #0
 8007798:	2101      	movs	r1, #1
 800779a:	0018      	movs	r0, r3
 800779c:	f00e fadd 	bl	8015d5a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80077a0:	200a      	movs	r0, #10
 80077a2:	f00d f871 	bl	8014888 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80077a6:	4b3c      	ldr	r3, [pc, #240]	@ (8007898 <ESP_Upkeep+0x1e4>)
 80077a8:	2201      	movs	r2, #1
 80077aa:	2102      	movs	r1, #2
 80077ac:	0018      	movs	r0, r3
 80077ae:	f00e fad4 	bl	8015d5a <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80077b2:	2032      	movs	r0, #50	@ 0x32
 80077b4:	f00d f868 	bl	8014888 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80077b8:	4b37      	ldr	r3, [pc, #220]	@ (8007898 <ESP_Upkeep+0x1e4>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	2101      	movs	r1, #1
 80077be:	0018      	movs	r0, r3
 80077c0:	f00e facb 	bl	8015d5a <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80077c4:	2032      	movs	r0, #50	@ 0x32
 80077c6:	f00d f85f 	bl	8014888 <HAL_Delay>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80077ca:	f00d f853 	bl	8014874 <HAL_GetTick>
 80077ce:	0003      	movs	r3, r0
 80077d0:	22e1      	movs	r2, #225	@ 0xe1
 80077d2:	0092      	lsls	r2, r2, #2
 80077d4:	189a      	adds	r2, r3, r2
 80077d6:	4b31      	ldr	r3, [pc, #196]	@ (800789c <ESP_Upkeep+0x1e8>)
 80077d8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80077da:	4b2d      	ldr	r3, [pc, #180]	@ (8007890 <ESP_Upkeep+0x1dc>)
 80077dc:	2201      	movs	r2, #1
 80077de:	701a      	strb	r2, [r3, #0]
        Debug("ESP powered on.");
 80077e0:	4a2f      	ldr	r2, [pc, #188]	@ (80078a0 <ESP_Upkeep+0x1ec>)
 80077e2:	4b28      	ldr	r3, [pc, #160]	@ (8007884 <ESP_Upkeep+0x1d0>)
 80077e4:	0019      	movs	r1, r3
 80077e6:	2003      	movs	r0, #3
 80077e8:	f00c facc 	bl	8013d84 <CreateLine>
        SetBatteryReadTimer(ESP_START_UP_TIME/2);  // read battery voltage during boot of ESP32
 80077ec:	23e1      	movs	r3, #225	@ 0xe1
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	0018      	movs	r0, r3
 80077f2:	f005 f951 	bl	800ca98 <SetBatteryReadTimer>
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80077f6:	2380      	movs	r3, #128	@ 0x80
 80077f8:	005a      	lsls	r2, r3, #1
 80077fa:	4b2a      	ldr	r3, [pc, #168]	@ (80078a4 <ESP_Upkeep+0x1f0>)
 80077fc:	0011      	movs	r1, r2
 80077fe:	0018      	movs	r0, r3
 8007800:	f7fd fb90 	bl	8004f24 <ESP_Receive>
 8007804:	1e03      	subs	r3, r0, #0
 8007806:	d101      	bne.n	800780c <ESP_Upkeep+0x158>
 8007808:	f000 fc8d 	bl	8008126 <ESP_Upkeep+0xa72>
        EspState = ESP_STATE_WAIT_AWAKE;
 800780c:	4b17      	ldr	r3, [pc, #92]	@ (800786c <ESP_Upkeep+0x1b8>)
 800780e:	220f      	movs	r2, #15
 8007810:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8007812:	f00d f82f 	bl	8014874 <HAL_GetTick>
 8007816:	0003      	movs	r3, r0
 8007818:	22fa      	movs	r2, #250	@ 0xfa
 800781a:	00d2      	lsls	r2, r2, #3
 800781c:	189a      	adds	r2, r3, r2
 800781e:	4b22      	ldr	r3, [pc, #136]	@ (80078a8 <ESP_Upkeep+0x1f4>)
 8007820:	601a      	str	r2, [r3, #0]
      }
      break;
 8007822:	f000 fc80 	bl	8008126 <ESP_Upkeep+0xa72>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8007826:	2001      	movs	r0, #1
 8007828:	f7ff fb56 	bl	8006ed8 <DMA_ProcessBuffer>
 800782c:	0003      	movs	r3, r0
 800782e:	001a      	movs	r2, r3
 8007830:	4b1e      	ldr	r3, [pc, #120]	@ (80078ac <ESP_Upkeep+0x1f8>)
 8007832:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8007834:	4b1d      	ldr	r3, [pc, #116]	@ (80078ac <ESP_Upkeep+0x1f8>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	1dbc      	adds	r4, r7, #6
 800783a:	2101      	movs	r1, #1
 800783c:	0018      	movs	r0, r3
 800783e:	f7ff fc4b 	bl	80070d8 <ATCompare>
 8007842:	0003      	movs	r3, r0
 8007844:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8007846:	1dbb      	adds	r3, r7, #6
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d108      	bne.n	8007860 <ESP_Upkeep+0x1ac>
 800784e:	4b16      	ldr	r3, [pc, #88]	@ (80078a8 <ESP_Upkeep+0x1f4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	0018      	movs	r0, r3
 8007854:	f00c fa40 	bl	8013cd8 <TimestampIsReached>
 8007858:	1e03      	subs	r3, r0, #0
 800785a:	d101      	bne.n	8007860 <ESP_Upkeep+0x1ac>
 800785c:	f000 fc65 	bl	800812a <ESP_Upkeep+0xa76>
          EspState = ESP_STATE_MODE_SELECT;
 8007860:	4b02      	ldr	r3, [pc, #8]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007862:	220b      	movs	r2, #11
 8007864:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007866:	f000 fc60 	bl	800812a <ESP_Upkeep+0xa76>
 800786a:	46c0      	nop			@ (mov r8, r8)
 800786c:	20000030 	.word	0x20000030
 8007870:	20000003 	.word	0x20000003
 8007874:	20000701 	.word	0x20000701
 8007878:	20000702 	.word	0x20000702
 800787c:	20000700 	.word	0x20000700
 8007880:	0802b054 	.word	0x0802b054
 8007884:	0802a904 	.word	0x0802a904
 8007888:	0802dd84 	.word	0x0802dd84
 800788c:	20001114 	.word	0x20001114
 8007890:	200005ac 	.word	0x200005ac
 8007894:	50000800 	.word	0x50000800
 8007898:	50001c00 	.word	0x50001c00
 800789c:	20000694 	.word	0x20000694
 80078a0:	0802b080 	.word	0x0802b080
 80078a4:	200004ac 	.word	0x200004ac
 80078a8:	20000938 	.word	0x20000938
 80078ac:	20000034 	.word	0x20000034

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80078b0:	4bd6      	ldr	r3, [pc, #856]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078b2:	2209      	movs	r2, #9
 80078b4:	2116      	movs	r1, #22
 80078b6:	0018      	movs	r0, r3
 80078b8:	f01e fdd6 	bl	8026468 <memset>
      if(!InitIsDone || WifiReset){
 80078bc:	4bd4      	ldr	r3, [pc, #848]	@ (8007c10 <ESP_Upkeep+0x55c>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2201      	movs	r2, #1
 80078c2:	4053      	eors	r3, r2
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <ESP_Upkeep+0x21e>
 80078ca:	4bd2      	ldr	r3, [pc, #840]	@ (8007c14 <ESP_Upkeep+0x560>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d016      	beq.n	8007900 <ESP_Upkeep+0x24c>
        memcpy(ATCommandArray, AT_INIT, sizeof(AT_INIT));
 80078d2:	4bce      	ldr	r3, [pc, #824]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078d4:	4ad0      	ldr	r2, [pc, #832]	@ (8007c18 <ESP_Upkeep+0x564>)
 80078d6:	ca03      	ldmia	r2!, {r0, r1}
 80078d8:	c303      	stmia	r3!, {r0, r1}
        EspState = ESP_STATE_SEND;
 80078da:	4bd0      	ldr	r3, [pc, #832]	@ (8007c1c <ESP_Upkeep+0x568>)
 80078dc:	2204      	movs	r2, #4
 80078de:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80078e0:	4bcf      	ldr	r3, [pc, #828]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80078e6:	4bcf      	ldr	r3, [pc, #828]	@ (8007c24 <ESP_Upkeep+0x570>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80078ec:	4bcc      	ldr	r3, [pc, #816]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	001a      	movs	r2, r3
 80078f2:	4bc6      	ldr	r3, [pc, #792]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078f4:	5c9a      	ldrb	r2, [r3, r2]
 80078f6:	4bcc      	ldr	r3, [pc, #816]	@ (8007c28 <ESP_Upkeep+0x574>)
 80078f8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80078fa:	4bcc      	ldr	r3, [pc, #816]	@ (8007c2c <ESP_Upkeep+0x578>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8007900:	4bc3      	ldr	r3, [pc, #780]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01f      	beq.n	8007948 <ESP_Upkeep+0x294>
 8007908:	4bc9      	ldr	r3, [pc, #804]	@ (8007c30 <ESP_Upkeep+0x57c>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2201      	movs	r2, #1
 800790e:	4053      	eors	r3, r2
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d018      	beq.n	8007948 <ESP_Upkeep+0x294>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8007916:	4bbd      	ldr	r3, [pc, #756]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007918:	4ac6      	ldr	r2, [pc, #792]	@ (8007c34 <ESP_Upkeep+0x580>)
 800791a:	6811      	ldr	r1, [r2, #0]
 800791c:	6019      	str	r1, [r3, #0]
 800791e:	8892      	ldrh	r2, [r2, #4]
 8007920:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8007922:	4bbe      	ldr	r3, [pc, #760]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007924:	2204      	movs	r2, #4
 8007926:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007928:	4bbd      	ldr	r3, [pc, #756]	@ (8007c20 <ESP_Upkeep+0x56c>)
 800792a:	2200      	movs	r2, #0
 800792c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800792e:	4bbd      	ldr	r3, [pc, #756]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007930:	2201      	movs	r2, #1
 8007932:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007934:	4bba      	ldr	r3, [pc, #744]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	001a      	movs	r2, r3
 800793a:	4bb4      	ldr	r3, [pc, #720]	@ (8007c0c <ESP_Upkeep+0x558>)
 800793c:	5c9a      	ldrb	r2, [r3, r2]
 800793e:	4bba      	ldr	r3, [pc, #744]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007940:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007942:	4bba      	ldr	r3, [pc, #744]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !APtested){
 8007948:	4bb1      	ldr	r3, [pc, #708]	@ (8007c10 <ESP_Upkeep+0x55c>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d021      	beq.n	8007994 <ESP_Upkeep+0x2e0>
 8007950:	4bb7      	ldr	r3, [pc, #732]	@ (8007c30 <ESP_Upkeep+0x57c>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01d      	beq.n	8007994 <ESP_Upkeep+0x2e0>
 8007958:	4bb7      	ldr	r3, [pc, #732]	@ (8007c38 <ESP_Upkeep+0x584>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2201      	movs	r2, #1
 800795e:	4053      	eors	r3, r2
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d016      	beq.n	8007994 <ESP_Upkeep+0x2e0>
        memcpy(ATCommandArray, AT_TEST, 2);
 8007966:	4bb5      	ldr	r3, [pc, #724]	@ (8007c3c <ESP_Upkeep+0x588>)
 8007968:	881a      	ldrh	r2, [r3, #0]
 800796a:	4ba8      	ldr	r3, [pc, #672]	@ (8007c0c <ESP_Upkeep+0x558>)
 800796c:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800796e:	4bab      	ldr	r3, [pc, #684]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007970:	2204      	movs	r2, #4
 8007972:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007974:	4baa      	ldr	r3, [pc, #680]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800797a:	4baa      	ldr	r3, [pc, #680]	@ (8007c24 <ESP_Upkeep+0x570>)
 800797c:	2204      	movs	r2, #4
 800797e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007980:	4ba7      	ldr	r3, [pc, #668]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	001a      	movs	r2, r3
 8007986:	4ba1      	ldr	r3, [pc, #644]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007988:	5c9a      	ldrb	r2, [r3, r2]
 800798a:	4ba7      	ldr	r3, [pc, #668]	@ (8007c28 <ESP_Upkeep+0x574>)
 800798c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800798e:	4ba7      	ldr	r3, [pc, #668]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007990:	2200      	movs	r2, #0
 8007992:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(InitIsDone && ConnectionMade && APtested && (sendpwremail == DO_PWR_MAIL)){
 8007994:	4b9e      	ldr	r3, [pc, #632]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d024      	beq.n	80079e6 <ESP_Upkeep+0x332>
 800799c:	4ba4      	ldr	r3, [pc, #656]	@ (8007c30 <ESP_Upkeep+0x57c>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d020      	beq.n	80079e6 <ESP_Upkeep+0x332>
 80079a4:	4ba4      	ldr	r3, [pc, #656]	@ (8007c38 <ESP_Upkeep+0x584>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01c      	beq.n	80079e6 <ESP_Upkeep+0x332>
 80079ac:	4ba4      	ldr	r3, [pc, #656]	@ (8007c40 <ESP_Upkeep+0x58c>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d118      	bne.n	80079e6 <ESP_Upkeep+0x332>
        memcpy(ATCommandArray, AT_MAIL, 3);
 80079b4:	4b95      	ldr	r3, [pc, #596]	@ (8007c0c <ESP_Upkeep+0x558>)
 80079b6:	4aa3      	ldr	r2, [pc, #652]	@ (8007c44 <ESP_Upkeep+0x590>)
 80079b8:	8811      	ldrh	r1, [r2, #0]
 80079ba:	8019      	strh	r1, [r3, #0]
 80079bc:	7892      	ldrb	r2, [r2, #2]
 80079be:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80079c0:	4b96      	ldr	r3, [pc, #600]	@ (8007c1c <ESP_Upkeep+0x568>)
 80079c2:	2204      	movs	r2, #4
 80079c4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80079c6:	4b96      	ldr	r3, [pc, #600]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_MAIL;
 80079cc:	4b95      	ldr	r3, [pc, #596]	@ (8007c24 <ESP_Upkeep+0x570>)
 80079ce:	2206      	movs	r2, #6
 80079d0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80079d2:	4b93      	ldr	r3, [pc, #588]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	001a      	movs	r2, r3
 80079d8:	4b8c      	ldr	r3, [pc, #560]	@ (8007c0c <ESP_Upkeep+0x558>)
 80079da:	5c9a      	ldrb	r2, [r3, r2]
 80079dc:	4b92      	ldr	r3, [pc, #584]	@ (8007c28 <ESP_Upkeep+0x574>)
 80079de:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80079e0:	4b92      	ldr	r3, [pc, #584]	@ (8007c2c <ESP_Upkeep+0x578>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
      }
#endif
      if(InitIsDone && ConnectionMade && APtested && !setTime && (sendpwremail != DO_PWR_MAIL)){
 80079e6:	4b8a      	ldr	r3, [pc, #552]	@ (8007c10 <ESP_Upkeep+0x55c>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d030      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079ee:	4b90      	ldr	r3, [pc, #576]	@ (8007c30 <ESP_Upkeep+0x57c>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d02c      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079f6:	4b90      	ldr	r3, [pc, #576]	@ (8007c38 <ESP_Upkeep+0x584>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d028      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079fe:	4b92      	ldr	r3, [pc, #584]	@ (8007c48 <ESP_Upkeep+0x594>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2201      	movs	r2, #1
 8007a04:	4053      	eors	r3, r2
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d021      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 8007a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8007c40 <ESP_Upkeep+0x58c>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d01d      	beq.n	8007a50 <ESP_Upkeep+0x39c>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007a14:	4b7d      	ldr	r3, [pc, #500]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a16:	4a8d      	ldr	r2, [pc, #564]	@ (8007c4c <ESP_Upkeep+0x598>)
 8007a18:	8811      	ldrh	r1, [r2, #0]
 8007a1a:	8019      	strh	r1, [r3, #0]
 8007a1c:	7892      	ldrb	r2, [r2, #2]
 8007a1e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8007a20:	4b7e      	ldr	r3, [pc, #504]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007a22:	2204      	movs	r2, #4
 8007a24:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a26:	4b7e      	ldr	r3, [pc, #504]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007a2c:	4b7d      	ldr	r3, [pc, #500]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007a2e:	2202      	movs	r2, #2
 8007a30:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007a32:	f00c ff1f 	bl	8014874 <HAL_GetTick>
 8007a36:	0002      	movs	r2, r0
 8007a38:	4b85      	ldr	r3, [pc, #532]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007a3a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a3c:	4b78      	ldr	r3, [pc, #480]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	001a      	movs	r2, r3
 8007a42:	4b72      	ldr	r3, [pc, #456]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a44:	5c9a      	ldrb	r2, [r3, r2]
 8007a46:	4b78      	ldr	r3, [pc, #480]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007a48:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a4a:	4b78      	ldr	r3, [pc, #480]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && APtested && setTime && (sendpwremail != DO_PWR_MAIL)){
 8007a50:	4b6f      	ldr	r3, [pc, #444]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d02b      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a58:	4b75      	ldr	r3, [pc, #468]	@ (8007c30 <ESP_Upkeep+0x57c>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d027      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a60:	4b75      	ldr	r3, [pc, #468]	@ (8007c38 <ESP_Upkeep+0x584>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d023      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a68:	4b77      	ldr	r3, [pc, #476]	@ (8007c48 <ESP_Upkeep+0x594>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01f      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a70:	4b73      	ldr	r3, [pc, #460]	@ (8007c40 <ESP_Upkeep+0x58c>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d01b      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8007a78:	4b76      	ldr	r3, [pc, #472]	@ (8007c54 <ESP_Upkeep+0x5a0>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4b63      	ldr	r3, [pc, #396]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a7e:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007a80:	4b66      	ldr	r3, [pc, #408]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007a82:	2204      	movs	r2, #4
 8007a84:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a86:	4b66      	ldr	r3, [pc, #408]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8007a8c:	4b65      	ldr	r3, [pc, #404]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007a8e:	2205      	movs	r2, #5
 8007a90:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007a92:	f00c feef 	bl	8014874 <HAL_GetTick>
 8007a96:	0002      	movs	r2, r0
 8007a98:	4b6d      	ldr	r3, [pc, #436]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007a9a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a9c:	4b60      	ldr	r3, [pc, #384]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	001a      	movs	r2, r3
 8007aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007aa4:	5c9a      	ldrb	r2, [r3, r2]
 8007aa6:	4b60      	ldr	r3, [pc, #384]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007aa8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007aaa:	4b60      	ldr	r3, [pc, #384]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8007ab0:	4b69      	ldr	r3, [pc, #420]	@ (8007c58 <ESP_Upkeep+0x5a4>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d100      	bne.n	8007aba <ESP_Upkeep+0x406>
 8007ab8:	e339      	b.n	800812e <ESP_Upkeep+0xa7a>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8007aba:	4b54      	ldr	r3, [pc, #336]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007abc:	4a67      	ldr	r2, [pc, #412]	@ (8007c5c <ESP_Upkeep+0x5a8>)
 8007abe:	6811      	ldr	r1, [r2, #0]
 8007ac0:	6019      	str	r1, [r3, #0]
 8007ac2:	7912      	ldrb	r2, [r2, #4]
 8007ac4:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode for local wifi config selected");
 8007ac6:	4a66      	ldr	r2, [pc, #408]	@ (8007c60 <ESP_Upkeep+0x5ac>)
 8007ac8:	4b66      	ldr	r3, [pc, #408]	@ (8007c64 <ESP_Upkeep+0x5b0>)
 8007aca:	0019      	movs	r1, r3
 8007acc:	2003      	movs	r0, #3
 8007ace:	f00c f959 	bl	8013d84 <CreateLine>
        DisableConnectedDevices();
 8007ad2:	f006 f95b 	bl	800dd8c <DisableConnectedDevices>
        usblog = false;
 8007ad6:	4b64      	ldr	r3, [pc, #400]	@ (8007c68 <ESP_Upkeep+0x5b4>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007adc:	4b4f      	ldr	r3, [pc, #316]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007ade:	2204      	movs	r2, #4
 8007ae0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8007ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007aea:	2203      	movs	r2, #3
 8007aec:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007aee:	4b4c      	ldr	r3, [pc, #304]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	001a      	movs	r2, r3
 8007af4:	4b45      	ldr	r3, [pc, #276]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007af6:	5c9a      	ldrb	r2, [r3, r2]
 8007af8:	4b4b      	ldr	r3, [pc, #300]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007afa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007afc:	4b4b      	ldr	r3, [pc, #300]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
      }
    break;
 8007b02:	e314      	b.n	800812e <ESP_Upkeep+0xa7a>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8007b04:	4b48      	ldr	r3, [pc, #288]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	1dfc      	adds	r4, r7, #7
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f7ff fb26 	bl	800715c <AT_Send>
 8007b10:	0003      	movs	r3, r0
 8007b12:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007b14:	1dfb      	adds	r3, r7, #7
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d100      	bne.n	8007b1e <ESP_Upkeep+0x46a>
 8007b1c:	e309      	b.n	8008132 <ESP_Upkeep+0xa7e>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8007b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007b20:	2203      	movs	r2, #3
 8007b22:	701a      	strb	r2, [r3, #0]
        }
    break;
 8007b24:	e305      	b.n	8008132 <ESP_Upkeep+0xa7e>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007b26:	4b4c      	ldr	r3, [pc, #304]	@ (8007c58 <ESP_Upkeep+0x5a4>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <ESP_Upkeep+0x48a>
 8007b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d003      	beq.n	8007b3e <ESP_Upkeep+0x48a>
        EspState = ESP_STATE_MODE_SELECT;
 8007b36:	4b39      	ldr	r3, [pc, #228]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007b38:	220b      	movs	r2, #11
 8007b3a:	701a      	strb	r2, [r3, #0]
        break;
 8007b3c:	e300      	b.n	8008140 <ESP_Upkeep+0xa8c>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8007b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8007c6c <ESP_Upkeep+0x5b8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	0018      	movs	r0, r3
 8007b44:	f00c f8c8 	bl	8013cd8 <TimestampIsReached>
 8007b48:	1e03      	subs	r3, r0, #0
 8007b4a:	d100      	bne.n	8007b4e <ESP_Upkeep+0x49a>
 8007b4c:	e2f3      	b.n	8008136 <ESP_Upkeep+0xa82>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007b4e:	4b37      	ldr	r3, [pc, #220]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	0018      	movs	r0, r3
 8007b54:	f7ff f9c0 	bl	8006ed8 <DMA_ProcessBuffer>
 8007b58:	0003      	movs	r3, r0
 8007b5a:	001a      	movs	r2, r3
 8007b5c:	4b44      	ldr	r3, [pc, #272]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b5e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007b60:	4b43      	ldr	r3, [pc, #268]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	4b31      	ldr	r3, [pc, #196]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	1d7c      	adds	r4, r7, #5
 8007b6a:	0019      	movs	r1, r3
 8007b6c:	0010      	movs	r0, r2
 8007b6e:	f7ff fab3 	bl	80070d8 <ATCompare>
 8007b72:	0003      	movs	r3, r0
 8007b74:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007b76:	4b3e      	ldr	r3, [pc, #248]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d000      	beq.n	8007b80 <ESP_Upkeep+0x4cc>
 8007b7e:	e085      	b.n	8007c8c <ESP_Upkeep+0x5d8>
          if(ATCommand == AT_SENDDATA){
 8007b80:	4b29      	ldr	r3, [pc, #164]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b0f      	cmp	r3, #15
 8007b86:	d108      	bne.n	8007b9a <ESP_Upkeep+0x4e6>
            ATCommand = AT_HTTPCPOST;
 8007b88:	4b27      	ldr	r3, [pc, #156]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b8a:	220e      	movs	r2, #14
 8007b8c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007b8e:	4b27      	ldr	r3, [pc, #156]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b90:	2202      	movs	r2, #2
 8007b92:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007b94:	4b22      	ldr	r3, [pc, #136]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007b96:	2201      	movs	r2, #1
 8007b98:	701a      	strb	r2, [r3, #0]
          }
          if(ATCommand == AT_SENDMAIL){
 8007b9a:	4b23      	ldr	r3, [pc, #140]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b15      	cmp	r3, #21
 8007ba0:	d108      	bne.n	8007bb4 <ESP_Upkeep+0x500>
            ATCommand = AT_HTTPCPOST_MAILAPI;
 8007ba2:	4b21      	ldr	r3, [pc, #132]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007ba4:	2214      	movs	r2, #20
 8007ba6:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007ba8:	4b20      	ldr	r3, [pc, #128]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007baa:	2202      	movs	r2, #2
 8007bac:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007bae:	4b1c      	ldr	r3, [pc, #112]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007bb4:	4b19      	ldr	r3, [pc, #100]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007bb6:	2204      	movs	r2, #4
 8007bb8:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8007bba:	4b2e      	ldr	r3, [pc, #184]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bc4:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8007bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d95e      	bls.n	8007c8c <ESP_Upkeep+0x5d8>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007bce:	f00c fe51 	bl	8014874 <HAL_GetTick>
 8007bd2:	0003      	movs	r3, r0
 8007bd4:	4a28      	ldr	r2, [pc, #160]	@ (8007c78 <ESP_Upkeep+0x5c4>)
 8007bd6:	189a      	adds	r2, r3, r2
 8007bd8:	4b24      	ldr	r3, [pc, #144]	@ (8007c6c <ESP_Upkeep+0x5b8>)
 8007bda:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007bdc:	4b27      	ldr	r3, [pc, #156]	@ (8007c7c <ESP_Upkeep+0x5c8>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007be2:	f7ff fa6b 	bl	80070bc <clearDMABuffer>
            stop = HAL_GetTick();
 8007be6:	f00c fe45 	bl	8014874 <HAL_GetTick>
 8007bea:	0002      	movs	r2, r0
 8007bec:	4b24      	ldr	r3, [pc, #144]	@ (8007c80 <ESP_Upkeep+0x5cc>)
 8007bee:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007bf0:	4b23      	ldr	r3, [pc, #140]	@ (8007c80 <ESP_Upkeep+0x5cc>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	4b16      	ldr	r3, [pc, #88]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	4a22      	ldr	r2, [pc, #136]	@ (8007c84 <ESP_Upkeep+0x5d0>)
 8007bfc:	4922      	ldr	r1, [pc, #136]	@ (8007c88 <ESP_Upkeep+0x5d4>)
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f00c f8c0 	bl	8013d84 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007c04:	4b05      	ldr	r3, [pc, #20]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007c06:	220d      	movs	r2, #13
 8007c08:	701a      	strb	r2, [r3, #0]
            break;
 8007c0a:	e299      	b.n	8008140 <ESP_Upkeep+0xa8c>
 8007c0c:	20000684 	.word	0x20000684
 8007c10:	200005ad 	.word	0x200005ad
 8007c14:	200005ae 	.word	0x200005ae
 8007c18:	20000004 	.word	0x20000004
 8007c1c:	20000030 	.word	0x20000030
 8007c20:	2000068e 	.word	0x2000068e
 8007c24:	20000702 	.word	0x20000702
 8007c28:	20000701 	.word	0x20000701
 8007c2c:	20000700 	.word	0x20000700
 8007c30:	200005b0 	.word	0x200005b0
 8007c34:	20000014 	.word	0x20000014
 8007c38:	200005b1 	.word	0x200005b1
 8007c3c:	20000010 	.word	0x20000010
 8007c40:	200010f9 	.word	0x200010f9
 8007c44:	20000028 	.word	0x20000028
 8007c48:	20000002 	.word	0x20000002
 8007c4c:	2000000c 	.word	0x2000000c
 8007c50:	200005b4 	.word	0x200005b4
 8007c54:	20000024 	.word	0x20000024
 8007c58:	200005af 	.word	0x200005af
 8007c5c:	2000001c 	.word	0x2000001c
 8007c60:	0802b090 	.word	0x0802b090
 8007c64:	0802a904 	.word	0x0802a904
 8007c68:	200010f7 	.word	0x200010f7
 8007c6c:	20000694 	.word	0x20000694
 8007c70:	20000034 	.word	0x20000034
 8007c74:	2000068f 	.word	0x2000068f
 8007c78:	0003a980 	.word	0x0003a980
 8007c7c:	200005b3 	.word	0x200005b3
 8007c80:	200005b8 	.word	0x200005b8
 8007c84:	0802b0c0 	.word	0x0802b0c0
 8007c88:	0802a8a0 	.word	0x0802a8a0
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007c8c:	4bb3      	ldr	r3, [pc, #716]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d106      	bne.n	8007ca2 <ESP_Upkeep+0x5ee>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007c94:	f00c fdee 	bl	8014874 <HAL_GetTick>
 8007c98:	0003      	movs	r3, r0
 8007c9a:	330a      	adds	r3, #10
 8007c9c:	001a      	movs	r2, r3
 8007c9e:	4bb0      	ldr	r3, [pc, #704]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007ca0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8007ca2:	4bae      	ldr	r3, [pc, #696]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b0a      	cmp	r3, #10
 8007ca8:	d106      	bne.n	8007cb8 <ESP_Upkeep+0x604>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007caa:	f00c fde3 	bl	8014874 <HAL_GetTick>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	330a      	adds	r3, #10
 8007cb2:	001a      	movs	r2, r3
 8007cb4:	4baa      	ldr	r3, [pc, #680]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007cb6:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007cb8:	4ba8      	ldr	r3, [pc, #672]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b06      	cmp	r3, #6
 8007cbe:	d14b      	bne.n	8007d58 <ESP_Upkeep+0x6a4>
          timeoutcntr++;
 8007cc0:	4ba8      	ldr	r3, [pc, #672]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	4ba6      	ldr	r3, [pc, #664]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cca:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8007ccc:	4aa6      	ldr	r2, [pc, #664]	@ (8007f68 <ESP_Upkeep+0x8b4>)
 8007cce:	4ba7      	ldr	r3, [pc, #668]	@ (8007f6c <ESP_Upkeep+0x8b8>)
 8007cd0:	0019      	movs	r1, r3
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	f00c f856 	bl	8013d84 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007cd8:	4ba2      	ldr	r3, [pc, #648]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d924      	bls.n	8007d2a <ESP_Upkeep+0x676>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8007ce0:	f00c fdc8 	bl	8014874 <HAL_GetTick>
 8007ce4:	0003      	movs	r3, r0
 8007ce6:	4aa2      	ldr	r2, [pc, #648]	@ (8007f70 <ESP_Upkeep+0x8bc>)
 8007ce8:	189a      	adds	r2, r3, r2
 8007cea:	4b9d      	ldr	r3, [pc, #628]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007cec:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007cee:	4ba1      	ldr	r3, [pc, #644]	@ (8007f74 <ESP_Upkeep+0x8c0>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007cf4:	f7ff f9e2 	bl	80070bc <clearDMABuffer>
            stop = HAL_GetTick();
 8007cf8:	f00c fdbc 	bl	8014874 <HAL_GetTick>
 8007cfc:	0002      	movs	r2, r0
 8007cfe:	4b9e      	ldr	r3, [pc, #632]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007d00:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8007d02:	4b9d      	ldr	r3, [pc, #628]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b9d      	ldr	r3, [pc, #628]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	4a9c      	ldr	r2, [pc, #624]	@ (8007f80 <ESP_Upkeep+0x8cc>)
 8007d0e:	4997      	ldr	r1, [pc, #604]	@ (8007f6c <ESP_Upkeep+0x8b8>)
 8007d10:	2001      	movs	r0, #1
 8007d12:	f00c f837 	bl	8013d84 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007d16:	4b9b      	ldr	r3, [pc, #620]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d18:	220d      	movs	r2, #13
 8007d1a:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007d1c:	4b9a      	ldr	r3, [pc, #616]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d1e:	2216      	movs	r2, #22
 8007d20:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007d22:	4b9a      	ldr	r3, [pc, #616]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
            break;
 8007d28:	e20a      	b.n	8008140 <ESP_Upkeep+0xa8c>
          }
          if(ATCommand != AT_SENDDATA){
 8007d2a:	4b97      	ldr	r3, [pc, #604]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b0f      	cmp	r3, #15
 8007d30:	d003      	beq.n	8007d3a <ESP_Upkeep+0x686>
            EspState = ESP_STATE_SEND;
 8007d32:	4b94      	ldr	r3, [pc, #592]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d34:	2204      	movs	r2, #4
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	e00e      	b.n	8007d58 <ESP_Upkeep+0x6a4>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8007d3a:	4b93      	ldr	r3, [pc, #588]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d3c:	220e      	movs	r2, #14
 8007d3e:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007d40:	4b93      	ldr	r3, [pc, #588]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	4b91      	ldr	r3, [pc, #580]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d4a:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d4e:	2202      	movs	r2, #2
 8007d50:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007d52:	4b8c      	ldr	r3, [pc, #560]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d54:	2204      	movs	r2, #4
 8007d56:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8007d58:	1d7b      	adds	r3, r7, #5
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d100      	bne.n	8007d62 <ESP_Upkeep+0x6ae>
 8007d60:	e1e9      	b.n	8008136 <ESP_Upkeep+0xa82>
          EspState = ESP_STATE_NEXT_AT;
 8007d62:	4b88      	ldr	r3, [pc, #544]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d64:	2205      	movs	r2, #5
 8007d66:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007d68:	e1e5      	b.n	8008136 <ESP_Upkeep+0xa82>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8007d6a:	4b89      	ldr	r3, [pc, #548]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	4b87      	ldr	r3, [pc, #540]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d74:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8007d76:	4b86      	ldr	r3, [pc, #536]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	001a      	movs	r2, r3
 8007d7c:	4b85      	ldr	r3, [pc, #532]	@ (8007f94 <ESP_Upkeep+0x8e0>)
 8007d7e:	5c9a      	ldrb	r2, [r3, r2]
 8007d80:	4b81      	ldr	r3, [pc, #516]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d82:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007d84:	4b80      	ldr	r3, [pc, #512]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d102      	bne.n	8007d92 <ESP_Upkeep+0x6de>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007d8c:	4b7f      	ldr	r3, [pc, #508]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d8e:	2201      	movs	r2, #1
 8007d90:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007d92:	4b7d      	ldr	r3, [pc, #500]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b0e      	cmp	r3, #14
 8007d98:	d102      	bne.n	8007da0 <ESP_Upkeep+0x6ec>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8007d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007da0:	4b79      	ldr	r3, [pc, #484]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b0e      	cmp	r3, #14
 8007da6:	d006      	beq.n	8007db6 <ESP_Upkeep+0x702>
 8007da8:	4b77      	ldr	r3, [pc, #476]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d002      	beq.n	8007db6 <ESP_Upkeep+0x702>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007db0:	4b76      	ldr	r3, [pc, #472]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007db6:	4b74      	ldr	r3, [pc, #464]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b11      	cmp	r3, #17
 8007dbc:	d102      	bne.n	8007dc4 <ESP_Upkeep+0x710>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8007dbe:	4b73      	ldr	r3, [pc, #460]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007dc0:	2205      	movs	r2, #5
 8007dc2:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(ATCommand == AT_SENDMAIL){
 8007dc4:	4b70      	ldr	r3, [pc, #448]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b15      	cmp	r3, #21
 8007dca:	d102      	bne.n	8007dd2 <ESP_Upkeep+0x71e>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
      }
#endif
      EspState = ESP_STATE_SEND;
 8007dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8007dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b16      	cmp	r3, #22
 8007dde:	d000      	beq.n	8007de2 <ESP_Upkeep+0x72e>
 8007de0:	e1ab      	b.n	800813a <ESP_Upkeep+0xa86>
        if(Mode == AT_MODE_SEND){
 8007de2:	4b6d      	ldr	r3, [pc, #436]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d124      	bne.n	8007e34 <ESP_Upkeep+0x780>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007dea:	f00c fd43 	bl	8014874 <HAL_GetTick>
 8007dee:	0003      	movs	r3, r0
 8007df0:	4a6a      	ldr	r2, [pc, #424]	@ (8007f9c <ESP_Upkeep+0x8e8>)
 8007df2:	189a      	adds	r2, r3, r2
 8007df4:	4b5a      	ldr	r3, [pc, #360]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007df6:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8007df8:	f7ff f960 	bl	80070bc <clearDMABuffer>
          stop = HAL_GetTick();
 8007dfc:	f00c fd3a 	bl	8014874 <HAL_GetTick>
 8007e00:	0002      	movs	r2, r0
 8007e02:	4b5d      	ldr	r3, [pc, #372]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e04:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007e06:	4b5c      	ldr	r3, [pc, #368]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	4a63      	ldr	r2, [pc, #396]	@ (8007fa0 <ESP_Upkeep+0x8ec>)
 8007e12:	4964      	ldr	r1, [pc, #400]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e14:	2002      	movs	r0, #2
 8007e16:	f00b ffb5 	bl	8013d84 <CreateLine>
          ResetdBAmax();
 8007e1a:	f006 f83f 	bl	800de9c <ResetdBAmax>
          resetMaxMeasurementValues();
 8007e1e:	f7fc ffbf 	bl	8004da0 <resetMaxMeasurementValues>
          showTime();
 8007e22:	f002 f801 	bl	8009e28 <showTime>
          ESPTransmitDone = true;
 8007e26:	4b53      	ldr	r3, [pc, #332]	@ (8007f74 <ESP_Upkeep+0x8c0>)
 8007e28:	2201      	movs	r2, #1
 8007e2a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007e2c:	4b55      	ldr	r3, [pc, #340]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007e2e:	220d      	movs	r2, #13
 8007e30:	701a      	strb	r2, [r3, #0]
#endif
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007e32:	e182      	b.n	800813a <ESP_Upkeep+0xa86>
        else if (Mode == AT_MODE_GETTIME) {
 8007e34:	4b58      	ldr	r3, [pc, #352]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b05      	cmp	r3, #5
 8007e3a:	d13a      	bne.n	8007eb2 <ESP_Upkeep+0x7fe>
            setTime = false;
 8007e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8007fa8 <ESP_Upkeep+0x8f4>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007e42:	f002 f893 	bl	8009f6c <calculateNextNTPTime>
 8007e46:	0002      	movs	r2, r0
 8007e48:	4b58      	ldr	r3, [pc, #352]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e4a:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007e4c:	4b57      	ldr	r3, [pc, #348]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a57      	ldr	r2, [pc, #348]	@ (8007fb0 <ESP_Upkeep+0x8fc>)
 8007e52:	189a      	adds	r2, r3, r2
 8007e54:	4b55      	ldr	r3, [pc, #340]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e56:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007e58:	4b55      	ldr	r3, [pc, #340]	@ (8007fb0 <ESP_Upkeep+0x8fc>)
 8007e5a:	4a56      	ldr	r2, [pc, #344]	@ (8007fb4 <ESP_Upkeep+0x900>)
 8007e5c:	4951      	ldr	r1, [pc, #324]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e5e:	2002      	movs	r0, #2
 8007e60:	f00b ff90 	bl	8013d84 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007e64:	4b54      	ldr	r3, [pc, #336]	@ (8007fb8 <ESP_Upkeep+0x904>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	4b3d      	ldr	r3, [pc, #244]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007e6a:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007e6c:	f7ff f926 	bl	80070bc <clearDMABuffer>
            stop = HAL_GetTick();
 8007e70:	f00c fd00 	bl	8014874 <HAL_GetTick>
 8007e74:	0002      	movs	r2, r0
 8007e76:	4b40      	ldr	r3, [pc, #256]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e78:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	4a4d      	ldr	r2, [pc, #308]	@ (8007fbc <ESP_Upkeep+0x908>)
 8007e86:	4947      	ldr	r1, [pc, #284]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e88:	2002      	movs	r0, #2
 8007e8a:	f00b ff7b 	bl	8013d84 <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007e8e:	f00c fcf1 	bl	8014874 <HAL_GetTick>
 8007e92:	0003      	movs	r3, r0
 8007e94:	4a4a      	ldr	r2, [pc, #296]	@ (8007fc0 <ESP_Upkeep+0x90c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d804      	bhi.n	8007ea4 <ESP_Upkeep+0x7f0>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8007fc4 <ESP_Upkeep+0x910>)
 8007e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8007fc8 <ESP_Upkeep+0x914>)
 8007e9e:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007ea0:	f005 ff16 	bl	800dcd0 <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007ea4:	4b37      	ldr	r3, [pc, #220]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ea6:	220d      	movs	r2, #13
 8007ea8:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007eac:	2202      	movs	r2, #2
 8007eae:	701a      	strb	r2, [r3, #0]
    break;
 8007eb0:	e143      	b.n	800813a <ESP_Upkeep+0xa86>
        else if (Mode == AT_MODE_MAIL) {
 8007eb2:	4b39      	ldr	r3, [pc, #228]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b06      	cmp	r3, #6
 8007eb8:	d111      	bne.n	8007ede <ESP_Upkeep+0x82a>
            clearDMABuffer();
 8007eba:	f7ff f8ff 	bl	80070bc <clearDMABuffer>
            ESPTimeStamp = savedESPTimeStamp;
 8007ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8007fb8 <ESP_Upkeep+0x904>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	4b27      	ldr	r3, [pc, #156]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007ec4:	601a      	str	r2, [r3, #0]
            sendpwremail = DONE;
 8007ec6:	4b41      	ldr	r3, [pc, #260]	@ (8007fcc <ESP_Upkeep+0x918>)
 8007ec8:	2202      	movs	r2, #2
 8007eca:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_DEINIT;
 8007ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ece:	220d      	movs	r2, #13
 8007ed0:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007ed2:	4b31      	ldr	r3, [pc, #196]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	701a      	strb	r2, [r3, #0]
            EnabledConnectedDevices();
 8007ed8:	f005 fefa 	bl	800dcd0 <EnabledConnectedDevices>
    break;
 8007edc:	e12d      	b.n	800813a <ESP_Upkeep+0xa86>
          EspState = ESP_STATE_RESET;
 8007ede:	4b29      	ldr	r3, [pc, #164]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ee0:	2209      	movs	r2, #9
 8007ee2:	701a      	strb	r2, [r3, #0]
    break;
 8007ee4:	e129      	b.n	800813a <ESP_Upkeep+0xa86>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8007fd0 <ESP_Upkeep+0x91c>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007eec:	4b39      	ldr	r3, [pc, #228]	@ (8007fd4 <ESP_Upkeep+0x920>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f00d ff31 	bl	8015d5a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007ef8:	2001      	movs	r0, #1
 8007efa:	f00c fcc5 	bl	8014888 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007efe:	2380      	movs	r3, #128	@ 0x80
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	4835      	ldr	r0, [pc, #212]	@ (8007fd8 <ESP_Upkeep+0x924>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	0019      	movs	r1, r3
 8007f08:	f00d ff27 	bl	8015d5a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007f0c:	2001      	movs	r0, #1
 8007f0e:	f00c fcbb 	bl	8014888 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007f12:	4b30      	ldr	r3, [pc, #192]	@ (8007fd4 <ESP_Upkeep+0x920>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	2102      	movs	r1, #2
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f00d ff1e 	bl	8015d5a <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007f1e:	4b19      	ldr	r3, [pc, #100]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007f20:	2209      	movs	r2, #9
 8007f22:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007f24:	2001      	movs	r0, #1
 8007f26:	f00c fcaf 	bl	8014888 <HAL_Delay>
      ResetESPIndicator();
 8007f2a:	f00a fd51 	bl	80129d0 <ResetESPIndicator>
      Debug("ESP powered off.");
 8007f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8007fdc <ESP_Upkeep+0x928>)
 8007f30:	4b2b      	ldr	r3, [pc, #172]	@ (8007fe0 <ESP_Upkeep+0x92c>)
 8007f32:	0019      	movs	r1, r3
 8007f34:	2003      	movs	r0, #3
 8007f36:	f00b ff25 	bl	8013d84 <CreateLine>
      if (Check_USB_PowerOn() || userToggle) {
 8007f3a:	f001 fe6d 	bl	8009c18 <Check_USB_PowerOn>
 8007f3e:	1e03      	subs	r3, r0, #0
 8007f40:	d103      	bne.n	8007f4a <ESP_Upkeep+0x896>
 8007f42:	4b28      	ldr	r3, [pc, #160]	@ (8007fe4 <ESP_Upkeep+0x930>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <ESP_Upkeep+0x89a>
        EnabledConnectedDevices();
 8007f4a:	f005 fec1 	bl	800dcd0 <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007f4e:	4b26      	ldr	r3, [pc, #152]	@ (8007fe8 <ESP_Upkeep+0x934>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007f54:	4b03      	ldr	r3, [pc, #12]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
      break;
 8007f5a:	e0f1      	b.n	8008140 <ESP_Upkeep+0xa8c>
 8007f5c:	20000034 	.word	0x20000034
 8007f60:	20000694 	.word	0x20000694
 8007f64:	20000690 	.word	0x20000690
 8007f68:	0802b0f4 	.word	0x0802b0f4
 8007f6c:	0802a8a0 	.word	0x0802a8a0
 8007f70:	0000c350 	.word	0x0000c350
 8007f74:	200005b3 	.word	0x200005b3
 8007f78:	200005b8 	.word	0x200005b8
 8007f7c:	200005b4 	.word	0x200005b4
 8007f80:	0802b130 	.word	0x0802b130
 8007f84:	20000030 	.word	0x20000030
 8007f88:	20000701 	.word	0x20000701
 8007f8c:	20000700 	.word	0x20000700
 8007f90:	2000068e 	.word	0x2000068e
 8007f94:	20000684 	.word	0x20000684
 8007f98:	20000702 	.word	0x20000702
 8007f9c:	0003a980 	.word	0x0003a980
 8007fa0:	0802b160 	.word	0x0802b160
 8007fa4:	0802a8b4 	.word	0x0802a8b4
 8007fa8:	20000002 	.word	0x20000002
 8007fac:	20000698 	.word	0x20000698
 8007fb0:	00012686 	.word	0x00012686
 8007fb4:	0802b178 	.word	0x0802b178
 8007fb8:	2000002c 	.word	0x2000002c
 8007fbc:	0802b1bc 	.word	0x0802b1bc
 8007fc0:	000061a7 	.word	0x000061a7
 8007fc4:	20001114 	.word	0x20001114
 8007fc8:	000061a8 	.word	0x000061a8
 8007fcc:	200010f9 	.word	0x200010f9
 8007fd0:	200005ac 	.word	0x200005ac
 8007fd4:	50001c00 	.word	0x50001c00
 8007fd8:	50000800 	.word	0x50000800
 8007fdc:	0802b1dc 	.word	0x0802b1dc
 8007fe0:	0802a904 	.word	0x0802a904
 8007fe4:	2000214e 	.word	0x2000214e
 8007fe8:	2000068f 	.word	0x2000068f

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007fec:	4b57      	ldr	r3, [pc, #348]	@ (800814c <ESP_Upkeep+0xa98>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	f00b fe71 	bl	8013cd8 <TimestampIsReached>
 8007ff6:	1e03      	subs	r3, r0, #0
 8007ff8:	d103      	bne.n	8008002 <ESP_Upkeep+0x94e>
 8007ffa:	4b55      	ldr	r3, [pc, #340]	@ (8008150 <ESP_Upkeep+0xa9c>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d047      	beq.n	8008092 <ESP_Upkeep+0x9de>
        ESPTransmitDone = false;
 8008002:	4b54      	ldr	r3, [pc, #336]	@ (8008154 <ESP_Upkeep+0xaa0>)
 8008004:	2200      	movs	r2, #0
 8008006:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8008008:	4b53      	ldr	r3, [pc, #332]	@ (8008158 <ESP_Upkeep+0xaa4>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d105      	bne.n	800801c <ESP_Upkeep+0x968>
          InitIsDone = true;
 8008010:	4b52      	ldr	r3, [pc, #328]	@ (800815c <ESP_Upkeep+0xaa8>)
 8008012:	2201      	movs	r2, #1
 8008014:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8008016:	4b52      	ldr	r3, [pc, #328]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008018:	220b      	movs	r2, #11
 800801a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 800801c:	4b4e      	ldr	r3, [pc, #312]	@ (8008158 <ESP_Upkeep+0xaa4>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d105      	bne.n	8008030 <ESP_Upkeep+0x97c>
          ConnectionMade = true;
 8008024:	4b4f      	ldr	r3, [pc, #316]	@ (8008164 <ESP_Upkeep+0xab0>)
 8008026:	2201      	movs	r2, #1
 8008028:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800802a:	4b4d      	ldr	r3, [pc, #308]	@ (8008160 <ESP_Upkeep+0xaac>)
 800802c:	220b      	movs	r2, #11
 800802e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8008030:	4b49      	ldr	r3, [pc, #292]	@ (8008158 <ESP_Upkeep+0xaa4>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b02      	cmp	r3, #2
 8008036:	d102      	bne.n	800803e <ESP_Upkeep+0x98a>
          EspState = ESP_STATE_INIT;
 8008038:	4b49      	ldr	r3, [pc, #292]	@ (8008160 <ESP_Upkeep+0xaac>)
 800803a:	2202      	movs	r2, #2
 800803c:	701a      	strb	r2, [r3, #0]
        }
#ifdef USE_MAIL
        if(Mode == AT_MODE_MAIL){
 800803e:	4b46      	ldr	r3, [pc, #280]	@ (8008158 <ESP_Upkeep+0xaa4>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	2b06      	cmp	r3, #6
 8008044:	d102      	bne.n	800804c <ESP_Upkeep+0x998>
          EspState = ESP_STATE_CONFIG;
 8008046:	4b46      	ldr	r3, [pc, #280]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008048:	220e      	movs	r2, #14
 800804a:	701a      	strb	r2, [r3, #0]
        }
#endif
        if(Mode == AT_MODE_RECONFIG){
 800804c:	4b42      	ldr	r3, [pc, #264]	@ (8008158 <ESP_Upkeep+0xaa4>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b03      	cmp	r3, #3
 8008052:	d108      	bne.n	8008066 <ESP_Upkeep+0x9b2>
          EspState = ESP_STATE_CONFIG;
 8008054:	4b42      	ldr	r3, [pc, #264]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008056:	220e      	movs	r2, #14
 8008058:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 800805a:	4a43      	ldr	r2, [pc, #268]	@ (8008168 <ESP_Upkeep+0xab4>)
 800805c:	4b43      	ldr	r3, [pc, #268]	@ (800816c <ESP_Upkeep+0xab8>)
 800805e:	0019      	movs	r1, r3
 8008060:	2002      	movs	r0, #2
 8008062:	f00b fe8f 	bl	8013d84 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8008066:	4b3c      	ldr	r3, [pc, #240]	@ (8008158 <ESP_Upkeep+0xaa4>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b04      	cmp	r3, #4
 800806c:	d105      	bne.n	800807a <ESP_Upkeep+0x9c6>
          EspState = ESP_STATE_MODE_SELECT;
 800806e:	4b3c      	ldr	r3, [pc, #240]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008070:	220b      	movs	r2, #11
 8008072:	701a      	strb	r2, [r3, #0]
          APtested = true;  // deze lijkt mij dubieus wordt in CWJAP gezet.
 8008074:	4b3e      	ldr	r3, [pc, #248]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008076:	2201      	movs	r2, #1
 8008078:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800807a:	4b35      	ldr	r3, [pc, #212]	@ (8008150 <ESP_Upkeep+0xa9c>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d020      	beq.n	80080c4 <ESP_Upkeep+0xa10>
 8008082:	4b35      	ldr	r3, [pc, #212]	@ (8008158 <ESP_Upkeep+0xaa4>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2b03      	cmp	r3, #3
 8008088:	d01c      	beq.n	80080c4 <ESP_Upkeep+0xa10>
          EspState = ESP_STATE_INIT;
 800808a:	4b35      	ldr	r3, [pc, #212]	@ (8008160 <ESP_Upkeep+0xaac>)
 800808c:	2202      	movs	r2, #2
 800808e:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8008090:	e018      	b.n	80080c4 <ESP_Upkeep+0xa10>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8008092:	f001 ff6b 	bl	8009f6c <calculateNextNTPTime>
 8008096:	0002      	movs	r2, r0
 8008098:	4b36      	ldr	r3, [pc, #216]	@ (8008174 <ESP_Upkeep+0xac0>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d94e      	bls.n	800813e <ESP_Upkeep+0xa8a>
        if(Mode == AT_MODE_SEND ) {
 80080a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008158 <ESP_Upkeep+0xaa4>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d14a      	bne.n	800813e <ESP_Upkeep+0xa8a>
           Mode = AT_MODE_GETTIME;
 80080a8:	4b2b      	ldr	r3, [pc, #172]	@ (8008158 <ESP_Upkeep+0xaa4>)
 80080aa:	2205      	movs	r2, #5
 80080ac:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 80080ae:	4b2c      	ldr	r3, [pc, #176]	@ (8008160 <ESP_Upkeep+0xaac>)
 80080b0:	2202      	movs	r2, #2
 80080b2:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 80080b4:	4b25      	ldr	r3, [pc, #148]	@ (800814c <ESP_Upkeep+0xa98>)
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	4b2f      	ldr	r3, [pc, #188]	@ (8008178 <ESP_Upkeep+0xac4>)
 80080ba:	601a      	str	r2, [r3, #0]
           setTime = true;
 80080bc:	4b2f      	ldr	r3, [pc, #188]	@ (800817c <ESP_Upkeep+0xac8>)
 80080be:	2201      	movs	r2, #1
 80080c0:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80080c2:	e03c      	b.n	800813e <ESP_Upkeep+0xa8a>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80080c4:	46c0      	nop			@ (mov r8, r8)
      break;
 80080c6:	e03a      	b.n	800813e <ESP_Upkeep+0xa8a>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 80080c8:	4b2d      	ldr	r3, [pc, #180]	@ (8008180 <ESP_Upkeep+0xacc>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2201      	movs	r2, #1
 80080ce:	4053      	eors	r3, r2
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <ESP_Upkeep+0xa34>
        Info("Do nothing until reset");
 80080d6:	4a24      	ldr	r2, [pc, #144]	@ (8008168 <ESP_Upkeep+0xab4>)
 80080d8:	4b24      	ldr	r3, [pc, #144]	@ (800816c <ESP_Upkeep+0xab8>)
 80080da:	0019      	movs	r1, r3
 80080dc:	2002      	movs	r0, #2
 80080de:	f00b fe51 	bl	8013d84 <CreateLine>
        msgdone = true;
 80080e2:	4b27      	ldr	r3, [pc, #156]	@ (8008180 <ESP_Upkeep+0xacc>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 80080e8:	f01a ff98 	bl	802301c <GetUsbRxPointer>
 80080ec:	0003      	movs	r3, r0
 80080ee:	0018      	movs	r0, r3
 80080f0:	f000 f98c 	bl	800840c <Process_PC_Config>
      break;
 80080f4:	e024      	b.n	8008140 <ESP_Upkeep+0xa8c>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 80080f6:	4a23      	ldr	r2, [pc, #140]	@ (8008184 <ESP_Upkeep+0xad0>)
 80080f8:	4b23      	ldr	r3, [pc, #140]	@ (8008188 <ESP_Upkeep+0xad4>)
 80080fa:	0019      	movs	r1, r3
 80080fc:	2001      	movs	r0, #1
 80080fe:	f00b fe41 	bl	8013d84 <CreateLine>
      EspState = ESP_STATE_INIT;
 8008102:	4b17      	ldr	r3, [pc, #92]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008104:	2202      	movs	r2, #2
 8008106:	701a      	strb	r2, [r3, #0]
      break;
 8008108:	e01a      	b.n	8008140 <ESP_Upkeep+0xa8c>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 800810a:	4a20      	ldr	r2, [pc, #128]	@ (800818c <ESP_Upkeep+0xad8>)
 800810c:	4b1e      	ldr	r3, [pc, #120]	@ (8008188 <ESP_Upkeep+0xad4>)
 800810e:	0019      	movs	r1, r3
 8008110:	2001      	movs	r0, #1
 8008112:	f00b fe37 	bl	8013d84 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8008116:	4b12      	ldr	r3, [pc, #72]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008118:	2207      	movs	r2, #7
 800811a:	701a      	strb	r2, [r3, #0]
      break;
 800811c:	e010      	b.n	8008140 <ESP_Upkeep+0xa8c>
      break;
 800811e:	46c0      	nop			@ (mov r8, r8)
 8008120:	e00e      	b.n	8008140 <ESP_Upkeep+0xa8c>
        break;
 8008122:	46c0      	nop			@ (mov r8, r8)
 8008124:	e00c      	b.n	8008140 <ESP_Upkeep+0xa8c>
      break;
 8008126:	46c0      	nop			@ (mov r8, r8)
 8008128:	e00a      	b.n	8008140 <ESP_Upkeep+0xa8c>
        break;
 800812a:	46c0      	nop			@ (mov r8, r8)
 800812c:	e008      	b.n	8008140 <ESP_Upkeep+0xa8c>
    break;
 800812e:	46c0      	nop			@ (mov r8, r8)
 8008130:	e006      	b.n	8008140 <ESP_Upkeep+0xa8c>
    break;
 8008132:	46c0      	nop			@ (mov r8, r8)
 8008134:	e004      	b.n	8008140 <ESP_Upkeep+0xa8c>
      break;
 8008136:	46c0      	nop			@ (mov r8, r8)
 8008138:	e002      	b.n	8008140 <ESP_Upkeep+0xa8c>
    break;
 800813a:	46c0      	nop			@ (mov r8, r8)
 800813c:	e000      	b.n	8008140 <ESP_Upkeep+0xa8c>
      break;
 800813e:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8008140:	4b07      	ldr	r3, [pc, #28]	@ (8008160 <ESP_Upkeep+0xaac>)
 8008142:	781b      	ldrb	r3, [r3, #0]
}
 8008144:	0018      	movs	r0, r3
 8008146:	46bd      	mov	sp, r7
 8008148:	b002      	add	sp, #8
 800814a:	bdb0      	pop	{r4, r5, r7, pc}
 800814c:	20000694 	.word	0x20000694
 8008150:	200005af 	.word	0x200005af
 8008154:	200005b3 	.word	0x200005b3
 8008158:	20000702 	.word	0x20000702
 800815c:	200005ad 	.word	0x200005ad
 8008160:	20000030 	.word	0x20000030
 8008164:	200005b0 	.word	0x200005b0
 8008168:	0802b1f0 	.word	0x0802b1f0
 800816c:	0802a8b4 	.word	0x0802a8b4
 8008170:	200005b1 	.word	0x200005b1
 8008174:	20000698 	.word	0x20000698
 8008178:	2000002c 	.word	0x2000002c
 800817c:	20000002 	.word	0x20000002
 8008180:	200005b2 	.word	0x200005b2
 8008184:	0802b208 	.word	0x0802b208
 8008188:	0802a8a0 	.word	0x0802a8a0
 800818c:	0802b21c 	.word	0x0802b21c

08008190 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8008198:	4b12      	ldr	r3, [pc, #72]	@ (80081e4 <I2CSensors_Init+0x54>)
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 800819e:	4a12      	ldr	r2, [pc, #72]	@ (80081e8 <I2CSensors_Init+0x58>)
 80081a0:	4b12      	ldr	r3, [pc, #72]	@ (80081ec <I2CSensors_Init+0x5c>)
 80081a2:	0011      	movs	r1, r2
 80081a4:	0018      	movs	r0, r3
 80081a6:	f00c f823 	bl	80141f0 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 80081aa:	4a0f      	ldr	r2, [pc, #60]	@ (80081e8 <I2CSensors_Init+0x58>)
 80081ac:	4b0f      	ldr	r3, [pc, #60]	@ (80081ec <I2CSensors_Init+0x5c>)
 80081ae:	0011      	movs	r1, r2
 80081b0:	0018      	movs	r0, r3
 80081b2:	f008 fdf9 	bl	8010da8 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 80081b6:	4a0e      	ldr	r2, [pc, #56]	@ (80081f0 <I2CSensors_Init+0x60>)
 80081b8:	490b      	ldr	r1, [pc, #44]	@ (80081e8 <I2CSensors_Init+0x58>)
 80081ba:	4b0c      	ldr	r3, [pc, #48]	@ (80081ec <I2CSensors_Init+0x5c>)
 80081bc:	0018      	movs	r0, r3
 80081be:	f002 febd 	bl	800af3c <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 80081c2:	4a0c      	ldr	r2, [pc, #48]	@ (80081f4 <I2CSensors_Init+0x64>)
 80081c4:	4b0c      	ldr	r3, [pc, #48]	@ (80081f8 <I2CSensors_Init+0x68>)
 80081c6:	0011      	movs	r1, r2
 80081c8:	0018      	movs	r0, r3
 80081ca:	f003 fa93 	bl	800b6f4 <BMP_Init>
//    BMP_Init(ReadI2CDirect, WriteI2CDirect);
    ENS_Init(ReadI2CMem, WriteI2CMem);
 80081ce:	4a09      	ldr	r2, [pc, #36]	@ (80081f4 <I2CSensors_Init+0x64>)
 80081d0:	4b09      	ldr	r3, [pc, #36]	@ (80081f8 <I2CSensors_Init+0x68>)
 80081d2:	0011      	movs	r1, r2
 80081d4:	0018      	movs	r0, r3
 80081d6:	f7fb fccd 	bl	8003b74 <ENS_Init>
}
 80081da:	46c0      	nop			@ (mov r8, r8)
 80081dc:	46bd      	mov	sp, r7
 80081de:	b002      	add	sp, #8
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	46c0      	nop			@ (mov r8, r8)
 80081e4:	2000093c 	.word	0x2000093c
 80081e8:	080082b5 	.word	0x080082b5
 80081ec:	0800825d 	.word	0x0800825d
 80081f0:	080081fd 	.word	0x080081fd
 80081f4:	0800838d 	.word	0x0800838d
 80081f8:	08008309 	.word	0x08008309

080081fc <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80081fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081fe:	b087      	sub	sp, #28
 8008200:	af02      	add	r7, sp, #8
 8008202:	6039      	str	r1, [r7, #0]
 8008204:	0011      	movs	r1, r2
 8008206:	1dfb      	adds	r3, r7, #7
 8008208:	1c02      	adds	r2, r0, #0
 800820a:	701a      	strb	r2, [r3, #0]
 800820c:	1dbb      	adds	r3, r7, #6
 800820e:	1c0a      	adds	r2, r1, #0
 8008210:	701a      	strb	r2, [r3, #0]
//  Debug("ReadI2CDirect address 0x%02X", address);
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, ((address << 1)+1), buffer, nrBytes, 1000);
 8008212:	4b11      	ldr	r3, [pc, #68]	@ (8008258 <ReadI2CDirect+0x5c>)
 8008214:	6818      	ldr	r0, [r3, #0]
 8008216:	1dfb      	adds	r3, r7, #7
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	18db      	adds	r3, r3, r3
 800821e:	b29b      	uxth	r3, r3
 8008220:	3301      	adds	r3, #1
 8008222:	b299      	uxth	r1, r3
 8008224:	1dbb      	adds	r3, r7, #6
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	b29d      	uxth	r5, r3
 800822a:	260f      	movs	r6, #15
 800822c:	19bc      	adds	r4, r7, r6
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	23fa      	movs	r3, #250	@ 0xfa
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	002b      	movs	r3, r5
 8008238:	f00d ff66 	bl	8016108 <HAL_I2C_Master_Receive>
 800823c:	0003      	movs	r3, r0
 800823e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008240:	19bb      	adds	r3, r7, r6
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <ReadI2CDirect+0x50>
        return false;
 8008248:	2300      	movs	r3, #0
 800824a:	e000      	b.n	800824e <ReadI2CDirect+0x52>
    }
    return true;
 800824c:	2301      	movs	r3, #1
}
 800824e:	0018      	movs	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	b005      	add	sp, #20
 8008254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008256:	46c0      	nop			@ (mov r8, r8)
 8008258:	2000093c 	.word	0x2000093c

0800825c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800825c:	b5b0      	push	{r4, r5, r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6039      	str	r1, [r7, #0]
 8008264:	0011      	movs	r1, r2
 8008266:	1dfb      	adds	r3, r7, #7
 8008268:	1c02      	adds	r2, r0, #0
 800826a:	701a      	strb	r2, [r3, #0]
 800826c:	1dbb      	adds	r3, r7, #6
 800826e:	1c0a      	adds	r2, r1, #0
 8008270:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, ((address << 1)+1), buffer, nrBytes);
 8008272:	4b0f      	ldr	r3, [pc, #60]	@ (80082b0 <ReadI2C+0x54>)
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	1dfb      	adds	r3, r7, #7
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	b29b      	uxth	r3, r3
 800827c:	18db      	adds	r3, r3, r3
 800827e:	b29b      	uxth	r3, r3
 8008280:	3301      	adds	r3, #1
 8008282:	b299      	uxth	r1, r3
 8008284:	1dbb      	adds	r3, r7, #6
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	b29b      	uxth	r3, r3
 800828a:	250f      	movs	r5, #15
 800828c:	197c      	adds	r4, r7, r5
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	f00e f948 	bl	8016524 <HAL_I2C_Master_Receive_DMA>
 8008294:	0003      	movs	r3, r0
 8008296:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008298:	197b      	adds	r3, r7, r5
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <ReadI2C+0x48>
        return false;
 80082a0:	2300      	movs	r3, #0
 80082a2:	e000      	b.n	80082a6 <ReadI2C+0x4a>
    }
    return true;
 80082a4:	2301      	movs	r3, #1
}
 80082a6:	0018      	movs	r0, r3
 80082a8:	46bd      	mov	sp, r7
 80082aa:	b004      	add	sp, #16
 80082ac:	bdb0      	pop	{r4, r5, r7, pc}
 80082ae:	46c0      	nop			@ (mov r8, r8)
 80082b0:	2000093c 	.word	0x2000093c

080082b4 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80082b4:	b5b0      	push	{r4, r5, r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6039      	str	r1, [r7, #0]
 80082bc:	0011      	movs	r1, r2
 80082be:	1dfb      	adds	r3, r7, #7
 80082c0:	1c02      	adds	r2, r0, #0
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	1dbb      	adds	r3, r7, #6
 80082c6:	1c0a      	adds	r2, r1, #0
 80082c8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80082ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008304 <WriteI2C+0x50>)
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	1dfb      	adds	r3, r7, #7
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	18db      	adds	r3, r3, r3
 80082d6:	b299      	uxth	r1, r3
 80082d8:	1dbb      	adds	r3, r7, #6
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	250f      	movs	r5, #15
 80082e0:	197c      	adds	r4, r7, r5
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	f00e f818 	bl	8016318 <HAL_I2C_Master_Transmit_DMA>
 80082e8:	0003      	movs	r3, r0
 80082ea:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80082ec:	197b      	adds	r3, r7, r5
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <WriteI2C+0x44>
        return false;
 80082f4:	2300      	movs	r3, #0
 80082f6:	e000      	b.n	80082fa <WriteI2C+0x46>
    }
    return true;
 80082f8:	2301      	movs	r3, #1
}
 80082fa:	0018      	movs	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	b004      	add	sp, #16
 8008300:	bdb0      	pop	{r4, r5, r7, pc}
 8008302:	46c0      	nop			@ (mov r8, r8)
 8008304:	2000093c 	.word	0x2000093c

08008308 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800830a:	b08b      	sub	sp, #44	@ 0x2c
 800830c:	af04      	add	r7, sp, #16
 800830e:	0004      	movs	r4, r0
 8008310:	0008      	movs	r0, r1
 8008312:	0011      	movs	r1, r2
 8008314:	607b      	str	r3, [r7, #4]
 8008316:	250f      	movs	r5, #15
 8008318:	197b      	adds	r3, r7, r5
 800831a:	1c22      	adds	r2, r4, #0
 800831c:	701a      	strb	r2, [r3, #0]
 800831e:	260c      	movs	r6, #12
 8008320:	19bb      	adds	r3, r7, r6
 8008322:	1c02      	adds	r2, r0, #0
 8008324:	801a      	strh	r2, [r3, #0]
 8008326:	230a      	movs	r3, #10
 8008328:	18fb      	adds	r3, r7, r3
 800832a:	1c0a      	adds	r2, r1, #0
 800832c:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, ((address << 1)+1), MemAddress, MemSize, buffer, nrBytes,1000);
 800832e:	4b16      	ldr	r3, [pc, #88]	@ (8008388 <ReadI2CMem+0x80>)
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	197b      	adds	r3, r7, r5
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	18db      	adds	r3, r3, r3
 800833a:	b29b      	uxth	r3, r3
 800833c:	3301      	adds	r3, #1
 800833e:	b299      	uxth	r1, r3
 8008340:	2217      	movs	r2, #23
 8008342:	18bc      	adds	r4, r7, r2
 8008344:	230a      	movs	r3, #10
 8008346:	18fb      	adds	r3, r7, r3
 8008348:	881d      	ldrh	r5, [r3, #0]
 800834a:	19bb      	adds	r3, r7, r6
 800834c:	881a      	ldrh	r2, [r3, #0]
 800834e:	23fa      	movs	r3, #250	@ 0xfa
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	9302      	str	r3, [sp, #8]
 8008354:	2328      	movs	r3, #40	@ 0x28
 8008356:	2608      	movs	r6, #8
 8008358:	199b      	adds	r3, r3, r6
 800835a:	19db      	adds	r3, r3, r7
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	002b      	movs	r3, r5
 8008366:	f00e fb11 	bl	801698c <HAL_I2C_Mem_Read>
 800836a:	0003      	movs	r3, r0
 800836c:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 800836e:	2217      	movs	r2, #23
 8008370:	18bb      	adds	r3, r7, r2
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <ReadI2CMem+0x74>
     return false;
 8008378:	2300      	movs	r3, #0
 800837a:	e000      	b.n	800837e <ReadI2CMem+0x76>
   }
   return true;
 800837c:	2301      	movs	r3, #1
}
 800837e:	0018      	movs	r0, r3
 8008380:	46bd      	mov	sp, r7
 8008382:	b007      	add	sp, #28
 8008384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008386:	46c0      	nop			@ (mov r8, r8)
 8008388:	2000093c 	.word	0x2000093c

0800838c <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800838c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838e:	b08b      	sub	sp, #44	@ 0x2c
 8008390:	af04      	add	r7, sp, #16
 8008392:	0004      	movs	r4, r0
 8008394:	0008      	movs	r0, r1
 8008396:	0011      	movs	r1, r2
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	250f      	movs	r5, #15
 800839c:	197b      	adds	r3, r7, r5
 800839e:	1c22      	adds	r2, r4, #0
 80083a0:	701a      	strb	r2, [r3, #0]
 80083a2:	260c      	movs	r6, #12
 80083a4:	19bb      	adds	r3, r7, r6
 80083a6:	1c02      	adds	r2, r0, #0
 80083a8:	801a      	strh	r2, [r3, #0]
 80083aa:	230a      	movs	r3, #10
 80083ac:	18fb      	adds	r3, r7, r3
 80083ae:	1c0a      	adds	r2, r1, #0
 80083b0:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,1000);  // de dma verwijderd 16-8-2025
 80083b2:	4b15      	ldr	r3, [pc, #84]	@ (8008408 <WriteI2CMem+0x7c>)
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	197b      	adds	r3, r7, r5
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	18db      	adds	r3, r3, r3
 80083be:	b299      	uxth	r1, r3
 80083c0:	2217      	movs	r2, #23
 80083c2:	18bc      	adds	r4, r7, r2
 80083c4:	230a      	movs	r3, #10
 80083c6:	18fb      	adds	r3, r7, r3
 80083c8:	881d      	ldrh	r5, [r3, #0]
 80083ca:	19bb      	adds	r3, r7, r6
 80083cc:	881a      	ldrh	r2, [r3, #0]
 80083ce:	23fa      	movs	r3, #250	@ 0xfa
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	9302      	str	r3, [sp, #8]
 80083d4:	2328      	movs	r3, #40	@ 0x28
 80083d6:	2608      	movs	r6, #8
 80083d8:	199b      	adds	r3, r3, r6
 80083da:	19db      	adds	r3, r3, r7
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	002b      	movs	r3, r5
 80083e6:	f00e f9a3 	bl	8016730 <HAL_I2C_Mem_Write>
 80083ea:	0003      	movs	r3, r0
 80083ec:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80083ee:	2217      	movs	r2, #23
 80083f0:	18bb      	adds	r3, r7, r2
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <WriteI2CMem+0x70>
     return false;
 80083f8:	2300      	movs	r3, #0
 80083fa:	e000      	b.n	80083fe <WriteI2CMem+0x72>
   }
   return true;
 80083fc:	2301      	movs	r3, #1
}
 80083fe:	0018      	movs	r0, r3
 8008400:	46bd      	mov	sp, r7
 8008402:	b007      	add	sp, #28
 8008404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008406:	46c0      	nop			@ (mov r8, r8)
 8008408:	2000093c 	.word	0x2000093c

0800840c <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 800840c:	b590      	push	{r4, r7, lr}
 800840e:	b0c3      	sub	sp, #268	@ 0x10c
 8008410:	af3e      	add	r7, sp, #248	@ 0xf8
 8008412:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8008414:	f01a fe22 	bl	802305c <GetUsbRxDataSize>
 8008418:	0003      	movs	r3, r0
 800841a:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b05      	cmp	r3, #5
 8008420:	d972      	bls.n	8008508 <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2123      	movs	r1, #35	@ 0x23
 8008426:	0018      	movs	r0, r3
 8008428:	f01e f826 	bl	8026478 <strchr>
 800842c:	0003      	movs	r3, r0
 800842e:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d066      	beq.n	8008504 <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	785a      	ldrb	r2, [r3, #1]
 800843a:	4b35      	ldr	r3, [pc, #212]	@ (8008510 <Process_PC_Config+0x104>)
 800843c:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	789a      	ldrb	r2, [r3, #2]
 8008442:	4b33      	ldr	r3, [pc, #204]	@ (8008510 <Process_PC_Config+0x104>)
 8008444:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8008446:	4b32      	ldr	r3, [pc, #200]	@ (8008510 <Process_PC_Config+0x104>)
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	3305      	adds	r3, #5
 800844c:	001a      	movs	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4293      	cmp	r3, r2
 8008452:	d352      	bcc.n	80084fa <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	1cd9      	adds	r1, r3, #3
 8008458:	4b2d      	ldr	r3, [pc, #180]	@ (8008510 <Process_PC_Config+0x104>)
 800845a:	785b      	ldrb	r3, [r3, #1]
 800845c:	001a      	movs	r2, r3
 800845e:	4b2d      	ldr	r3, [pc, #180]	@ (8008514 <Process_PC_Config+0x108>)
 8008460:	0018      	movs	r0, r3
 8008462:	f01e f8dd 	bl	8026620 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8008466:	4b2a      	ldr	r3, [pc, #168]	@ (8008510 <Process_PC_Config+0x104>)
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	3303      	adds	r3, #3
 800846c:	001a      	movs	r2, r3
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	189b      	adds	r3, r3, r2
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	b21b      	sxth	r3, r3
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	b21a      	sxth	r2, r3
 800847a:	4b25      	ldr	r3, [pc, #148]	@ (8008510 <Process_PC_Config+0x104>)
 800847c:	785b      	ldrb	r3, [r3, #1]
 800847e:	3304      	adds	r3, #4
 8008480:	68b9      	ldr	r1, [r7, #8]
 8008482:	18cb      	adds	r3, r1, r3
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	b21b      	sxth	r3, r3
 8008488:	4313      	orrs	r3, r2
 800848a:	b21b      	sxth	r3, r3
 800848c:	b299      	uxth	r1, r3
 800848e:	4a20      	ldr	r2, [pc, #128]	@ (8008510 <Process_PC_Config+0x104>)
 8008490:	2381      	movs	r3, #129	@ 0x81
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8008496:	4a1e      	ldr	r2, [pc, #120]	@ (8008510 <Process_PC_Config+0x104>)
 8008498:	2381      	movs	r3, #129	@ 0x81
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	5ad4      	ldrh	r4, [r2, r3]
 800849e:	4b1c      	ldr	r3, [pc, #112]	@ (8008510 <Process_PC_Config+0x104>)
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	3303      	adds	r3, #3
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	0011      	movs	r1, r2
 80084aa:	0018      	movs	r0, r3
 80084ac:	f000 faae 	bl	8008a0c <CRC16_ARC>
 80084b0:	0003      	movs	r3, r0
 80084b2:	429c      	cmp	r4, r3
 80084b4:	d007      	beq.n	80084c6 <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80084b6:	4b16      	ldr	r3, [pc, #88]	@ (8008510 <Process_PC_Config+0x104>)
 80084b8:	785a      	ldrb	r2, [r3, #1]
 80084ba:	4b16      	ldr	r3, [pc, #88]	@ (8008514 <Process_PC_Config+0x108>)
 80084bc:	0019      	movs	r1, r3
 80084be:	2001      	movs	r0, #1
 80084c0:	f000 fa52 	bl	8008968 <Create_Message>
 80084c4:	e016      	b.n	80084f4 <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80084c6:	4c12      	ldr	r4, [pc, #72]	@ (8008510 <Process_PC_Config+0x104>)
 80084c8:	466b      	mov	r3, sp
 80084ca:	0018      	movs	r0, r3
 80084cc:	0023      	movs	r3, r4
 80084ce:	3310      	adds	r3, #16
 80084d0:	22f4      	movs	r2, #244	@ 0xf4
 80084d2:	0019      	movs	r1, r3
 80084d4:	f01e f8a4 	bl	8026620 <memcpy>
 80084d8:	6820      	ldr	r0, [r4, #0]
 80084da:	6861      	ldr	r1, [r4, #4]
 80084dc:	68a2      	ldr	r2, [r4, #8]
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	f000 f81a 	bl	8008518 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80084e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008510 <Process_PC_Config+0x104>)
 80084e6:	7818      	ldrb	r0, [r3, #0]
 80084e8:	4b09      	ldr	r3, [pc, #36]	@ (8008510 <Process_PC_Config+0x104>)
 80084ea:	785a      	ldrb	r2, [r3, #1]
 80084ec:	4b09      	ldr	r3, [pc, #36]	@ (8008514 <Process_PC_Config+0x108>)
 80084ee:	0019      	movs	r1, r3
 80084f0:	f000 fa3a 	bl	8008968 <Create_Message>
                }
                ResetUsbRxDataSize();
 80084f4:	f01a fd9a 	bl	802302c <ResetUsbRxDataSize>
                return;
 80084f8:	e006      	b.n	8008508 <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	0018      	movs	r0, r3
 80084fe:	f01a fdb7 	bl	8023070 <GetUsbRxNextChunk>
 8008502:	e001      	b.n	8008508 <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 8008504:	f01a fd92 	bl	802302c <ResetUsbRxDataSize>
        }
    }
}
 8008508:	46bd      	mov	sp, r7
 800850a:	b005      	add	sp, #20
 800850c:	bd90      	pop	{r4, r7, pc}
 800850e:	46c0      	nop			@ (mov r8, r8)
 8008510:	20000940 	.word	0x20000940
 8008514:	20000942 	.word	0x20000942

08008518 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8008518:	b084      	sub	sp, #16
 800851a:	b5b0      	push	{r4, r5, r7, lr}
 800851c:	b082      	sub	sp, #8
 800851e:	af00      	add	r7, sp, #0
 8008520:	2518      	movs	r5, #24
 8008522:	197c      	adds	r4, r7, r5
 8008524:	6020      	str	r0, [r4, #0]
 8008526:	6061      	str	r1, [r4, #4]
 8008528:	60a2      	str	r2, [r4, #8]
 800852a:	60e3      	str	r3, [r4, #12]
  switch (msg.Command)
 800852c:	197b      	adds	r3, r7, r5
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2bfe      	cmp	r3, #254	@ 0xfe
 8008532:	d900      	bls.n	8008536 <ProcessCmd+0x1e>
 8008534:	e20e      	b.n	8008954 <ProcessCmd+0x43c>
 8008536:	009a      	lsls	r2, r3, #2
 8008538:	4be1      	ldr	r3, [pc, #900]	@ (80088c0 <ProcessCmd+0x3a8>)
 800853a:	18d3      	adds	r3, r2, r3
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	469f      	mov	pc, r3
    {
        case BoxConfigCmd:  // 0
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008540:	2118      	movs	r1, #24
 8008542:	187b      	adds	r3, r7, r1
 8008544:	785b      	ldrb	r3, [r3, #1]
 8008546:	001a      	movs	r2, r3
 8008548:	187b      	adds	r3, r7, r1
 800854a:	1c99      	adds	r1, r3, #2
 800854c:	48dd      	ldr	r0, [pc, #884]	@ (80088c4 <ProcessCmd+0x3ac>)
 800854e:	230c      	movs	r3, #12
 8008550:	f003 fdb6 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008554:	e1fe      	b.n	8008954 <ProcessCmd+0x43c>
        case TempConfigCmd:  // 1
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008556:	2118      	movs	r1, #24
 8008558:	187b      	adds	r3, r7, r1
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	001a      	movs	r2, r3
 800855e:	187b      	adds	r3, r7, r1
 8008560:	1c99      	adds	r1, r3, #2
 8008562:	48d9      	ldr	r0, [pc, #868]	@ (80088c8 <ProcessCmd+0x3b0>)
 8008564:	230c      	movs	r3, #12
 8008566:	f003 fdab 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800856a:	e1f3      	b.n	8008954 <ProcessCmd+0x43c>
        case HumidConfigCmd:  // 2
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800856c:	2118      	movs	r1, #24
 800856e:	187b      	adds	r3, r7, r1
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	001a      	movs	r2, r3
 8008574:	187b      	adds	r3, r7, r1
 8008576:	1c99      	adds	r1, r3, #2
 8008578:	48d4      	ldr	r0, [pc, #848]	@ (80088cc <ProcessCmd+0x3b4>)
 800857a:	230c      	movs	r3, #12
 800857c:	f003 fda0 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008580:	e1e8      	b.n	8008954 <ProcessCmd+0x43c>
        case NOxIndexConfigCmd:  // 3
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008582:	2118      	movs	r1, #24
 8008584:	187b      	adds	r3, r7, r1
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	001a      	movs	r2, r3
 800858a:	187b      	adds	r3, r7, r1
 800858c:	1c99      	adds	r1, r3, #2
 800858e:	48d0      	ldr	r0, [pc, #832]	@ (80088d0 <ProcessCmd+0x3b8>)
 8008590:	230c      	movs	r3, #12
 8008592:	f003 fd95 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008596:	e1dd      	b.n	8008954 <ProcessCmd+0x43c>
        case VocIndexConfigCmd:  // 4
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008598:	2118      	movs	r1, #24
 800859a:	187b      	adds	r3, r7, r1
 800859c:	785b      	ldrb	r3, [r3, #1]
 800859e:	001a      	movs	r2, r3
 80085a0:	187b      	adds	r3, r7, r1
 80085a2:	1c99      	adds	r1, r3, #2
 80085a4:	48cb      	ldr	r0, [pc, #812]	@ (80088d4 <ProcessCmd+0x3bc>)
 80085a6:	230c      	movs	r3, #12
 80085a8:	f003 fd8a 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80085ac:	e1d2      	b.n	8008954 <ProcessCmd+0x43c>
        case dBAConfigCmd: // 5 was 6 will be dBAConfigCMD
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085ae:	2118      	movs	r1, #24
 80085b0:	187b      	adds	r3, r7, r1
 80085b2:	785b      	ldrb	r3, [r3, #1]
 80085b4:	001a      	movs	r2, r3
 80085b6:	187b      	adds	r3, r7, r1
 80085b8:	1c99      	adds	r1, r3, #2
 80085ba:	48c7      	ldr	r0, [pc, #796]	@ (80088d8 <ProcessCmd+0x3c0>)
 80085bc:	230c      	movs	r3, #12
 80085be:	f003 fd7f 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80085c2:	e1c7      	b.n	8008954 <ProcessCmd+0x43c>
        case dBcConfigCmd:  // 6
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085c4:	2118      	movs	r1, #24
 80085c6:	187b      	adds	r3, r7, r1
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	001a      	movs	r2, r3
 80085cc:	187b      	adds	r3, r7, r1
 80085ce:	1c99      	adds	r1, r3, #2
 80085d0:	48c2      	ldr	r0, [pc, #776]	@ (80088dc <ProcessCmd+0x3c4>)
 80085d2:	230c      	movs	r3, #12
 80085d4:	f003 fd74 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80085d8:	e1bc      	b.n	8008954 <ProcessCmd+0x43c>
        case PM2ConfigCmd:  // 7
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085da:	2118      	movs	r1, #24
 80085dc:	187b      	adds	r3, r7, r1
 80085de:	785b      	ldrb	r3, [r3, #1]
 80085e0:	001a      	movs	r2, r3
 80085e2:	187b      	adds	r3, r7, r1
 80085e4:	1c99      	adds	r1, r3, #2
 80085e6:	48be      	ldr	r0, [pc, #760]	@ (80088e0 <ProcessCmd+0x3c8>)
 80085e8:	230c      	movs	r3, #12
 80085ea:	f003 fd69 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80085ee:	e1b1      	b.n	8008954 <ProcessCmd+0x43c>
        case PM10ConfigCmd:  // 8
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085f0:	2118      	movs	r1, #24
 80085f2:	187b      	adds	r3, r7, r1
 80085f4:	785b      	ldrb	r3, [r3, #1]
 80085f6:	001a      	movs	r2, r3
 80085f8:	187b      	adds	r3, r7, r1
 80085fa:	1c99      	adds	r1, r3, #2
 80085fc:	48b9      	ldr	r0, [pc, #740]	@ (80088e4 <ProcessCmd+0x3cc>)
 80085fe:	230c      	movs	r3, #12
 8008600:	f003 fd5e 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008604:	e1a6      	b.n	8008954 <ProcessCmd+0x43c>
        case BatVoltConfigCmd:  // 9
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008606:	2118      	movs	r1, #24
 8008608:	187b      	adds	r3, r7, r1
 800860a:	785b      	ldrb	r3, [r3, #1]
 800860c:	001a      	movs	r2, r3
 800860e:	187b      	adds	r3, r7, r1
 8008610:	1c99      	adds	r1, r3, #2
 8008612:	48b5      	ldr	r0, [pc, #724]	@ (80088e8 <ProcessCmd+0x3d0>)
 8008614:	230c      	movs	r3, #12
 8008616:	f003 fd53 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800861a:	e19b      	b.n	8008954 <ProcessCmd+0x43c>
        case SolVoltConfigCmd:  // 10
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800861c:	2118      	movs	r1, #24
 800861e:	187b      	adds	r3, r7, r1
 8008620:	785b      	ldrb	r3, [r3, #1]
 8008622:	001a      	movs	r2, r3
 8008624:	187b      	adds	r3, r7, r1
 8008626:	1c99      	adds	r1, r3, #2
 8008628:	48b0      	ldr	r0, [pc, #704]	@ (80088ec <ProcessCmd+0x3d4>)
 800862a:	230c      	movs	r3, #12
 800862c:	f003 fd48 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008630:	e190      	b.n	8008954 <ProcessCmd+0x43c>
        case ChargerStatConfigCmd:  // 11
            WriteUint8ArrayEepromSafe(ChargerStatConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008632:	2118      	movs	r1, #24
 8008634:	187b      	adds	r3, r7, r1
 8008636:	785b      	ldrb	r3, [r3, #1]
 8008638:	001a      	movs	r2, r3
 800863a:	187b      	adds	r3, r7, r1
 800863c:	1c99      	adds	r1, r3, #2
 800863e:	48ac      	ldr	r0, [pc, #688]	@ (80088f0 <ProcessCmd+0x3d8>)
 8008640:	230c      	movs	r3, #12
 8008642:	f003 fd3d 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008646:	e185      	b.n	8008954 <ProcessCmd+0x43c>
        case CustomNameConfigCmd:  // 12
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8008648:	2118      	movs	r1, #24
 800864a:	187b      	adds	r3, r7, r1
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	001a      	movs	r2, r3
 8008650:	187b      	adds	r3, r7, r1
 8008652:	1c99      	adds	r1, r3, #2
 8008654:	48a7      	ldr	r0, [pc, #668]	@ (80088f4 <ProcessCmd+0x3dc>)
 8008656:	2320      	movs	r3, #32
 8008658:	f003 fd32 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800865c:	e17a      	b.n	8008954 <ProcessCmd+0x43c>
        case SSIDConfigCmd: // 13 was 21
          ClearEEprom(SSIDConfigAddr, SSIDMaxLength);
 800865e:	4ba6      	ldr	r3, [pc, #664]	@ (80088f8 <ProcessCmd+0x3e0>)
 8008660:	2120      	movs	r1, #32
 8008662:	0018      	movs	r0, r3
 8008664:	f003 fd71 	bl	800c14a <ClearEEprom>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, SSIDMaxLength);
 8008668:	2118      	movs	r1, #24
 800866a:	187b      	adds	r3, r7, r1
 800866c:	785b      	ldrb	r3, [r3, #1]
 800866e:	001a      	movs	r2, r3
 8008670:	187b      	adds	r3, r7, r1
 8008672:	1c99      	adds	r1, r3, #2
 8008674:	48a0      	ldr	r0, [pc, #640]	@ (80088f8 <ProcessCmd+0x3e0>)
 8008676:	2320      	movs	r3, #32
 8008678:	f003 fd22 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800867c:	e16a      	b.n	8008954 <ProcessCmd+0x43c>
        case PasswordConfigCmd: // 14 was 22
          ClearEEprom(pwdConfigAddr, pwdMaxLength);
 800867e:	4b9f      	ldr	r3, [pc, #636]	@ (80088fc <ProcessCmd+0x3e4>)
 8008680:	2140      	movs	r1, #64	@ 0x40
 8008682:	0018      	movs	r0, r3
 8008684:	f003 fd61 	bl	800c14a <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 8008688:	2218      	movs	r2, #24
 800868a:	18bb      	adds	r3, r7, r2
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	0019      	movs	r1, r3
 8008690:	18bb      	adds	r3, r7, r2
 8008692:	785b      	ldrb	r3, [r3, #1]
 8008694:	001c      	movs	r4, r3
 8008696:	0015      	movs	r5, r2
 8008698:	18bb      	adds	r3, r7, r2
 800869a:	1c9a      	adds	r2, r3, #2
 800869c:	4898      	ldr	r0, [pc, #608]	@ (8008900 <ProcessCmd+0x3e8>)
 800869e:	0023      	movs	r3, r4
 80086a0:	f000 fa00 	bl	8008aa4 <printf_USB>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, pwdMaxLength);
 80086a4:	0029      	movs	r1, r5
 80086a6:	187b      	adds	r3, r7, r1
 80086a8:	785b      	ldrb	r3, [r3, #1]
 80086aa:	001a      	movs	r2, r3
 80086ac:	187b      	adds	r3, r7, r1
 80086ae:	1c99      	adds	r1, r3, #2
 80086b0:	4892      	ldr	r0, [pc, #584]	@ (80088fc <ProcessCmd+0x3e4>)
 80086b2:	2340      	movs	r3, #64	@ 0x40
 80086b4:	f003 fd04 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80086b8:	e14c      	b.n	8008954 <ProcessCmd+0x43c>
        case PM1ConfigCmd:  // 21 was 13
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086ba:	2118      	movs	r1, #24
 80086bc:	187b      	adds	r3, r7, r1
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	001a      	movs	r2, r3
 80086c2:	187b      	adds	r3, r7, r1
 80086c4:	1c99      	adds	r1, r3, #2
 80086c6:	488f      	ldr	r0, [pc, #572]	@ (8008904 <ProcessCmd+0x3ec>)
 80086c8:	230c      	movs	r3, #12
 80086ca:	f003 fcf9 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80086ce:	e141      	b.n	8008954 <ProcessCmd+0x43c>
        case PM4ConfigCmd:  // 22 was 14
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086d0:	2118      	movs	r1, #24
 80086d2:	187b      	adds	r3, r7, r1
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	001a      	movs	r2, r3
 80086d8:	187b      	adds	r3, r7, r1
 80086da:	1c99      	adds	r1, r3, #2
 80086dc:	488a      	ldr	r0, [pc, #552]	@ (8008908 <ProcessCmd+0x3f0>)
 80086de:	230c      	movs	r3, #12
 80086e0:	f003 fcee 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80086e4:	e136      	b.n	8008954 <ProcessCmd+0x43c>
        case AHTTempConfigCmd: // 15
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086e6:	2118      	movs	r1, #24
 80086e8:	187b      	adds	r3, r7, r1
 80086ea:	785b      	ldrb	r3, [r3, #1]
 80086ec:	001a      	movs	r2, r3
 80086ee:	187b      	adds	r3, r7, r1
 80086f0:	1c99      	adds	r1, r3, #2
 80086f2:	4886      	ldr	r0, [pc, #536]	@ (800890c <ProcessCmd+0x3f4>)
 80086f4:	230c      	movs	r3, #12
 80086f6:	f003 fce3 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80086fa:	e12b      	b.n	8008954 <ProcessCmd+0x43c>
        case AHTHumidConfigCmd: // 16
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086fc:	2118      	movs	r1, #24
 80086fe:	187b      	adds	r3, r7, r1
 8008700:	785b      	ldrb	r3, [r3, #1]
 8008702:	001a      	movs	r2, r3
 8008704:	187b      	adds	r3, r7, r1
 8008706:	1c99      	adds	r1, r3, #2
 8008708:	4881      	ldr	r0, [pc, #516]	@ (8008910 <ProcessCmd+0x3f8>)
 800870a:	230c      	movs	r3, #12
 800870c:	f003 fcd8 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008710:	e120      	b.n	8008954 <ProcessCmd+0x43c>
        case BMPTempConfigCmd: // 17
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008712:	2118      	movs	r1, #24
 8008714:	187b      	adds	r3, r7, r1
 8008716:	785b      	ldrb	r3, [r3, #1]
 8008718:	001a      	movs	r2, r3
 800871a:	187b      	adds	r3, r7, r1
 800871c:	1c99      	adds	r1, r3, #2
 800871e:	487d      	ldr	r0, [pc, #500]	@ (8008914 <ProcessCmd+0x3fc>)
 8008720:	230c      	movs	r3, #12
 8008722:	f003 fccd 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008726:	e115      	b.n	8008954 <ProcessCmd+0x43c>
        case ENSAQIConfigCmd: // 18
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008728:	2118      	movs	r1, #24
 800872a:	187b      	adds	r3, r7, r1
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	001a      	movs	r2, r3
 8008730:	187b      	adds	r3, r7, r1
 8008732:	1c99      	adds	r1, r3, #2
 8008734:	4878      	ldr	r0, [pc, #480]	@ (8008918 <ProcessCmd+0x400>)
 8008736:	230c      	movs	r3, #12
 8008738:	f003 fcc2 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800873c:	e10a      	b.n	8008954 <ProcessCmd+0x43c>
        case ENSTVOCConfigCmd: // 19
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800873e:	2118      	movs	r1, #24
 8008740:	187b      	adds	r3, r7, r1
 8008742:	785b      	ldrb	r3, [r3, #1]
 8008744:	001a      	movs	r2, r3
 8008746:	187b      	adds	r3, r7, r1
 8008748:	1c99      	adds	r1, r3, #2
 800874a:	4874      	ldr	r0, [pc, #464]	@ (800891c <ProcessCmd+0x404>)
 800874c:	230c      	movs	r3, #12
 800874e:	f003 fcb7 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008752:	e0ff      	b.n	8008954 <ProcessCmd+0x43c>
        case ENSeCO2ConfigCmd: // 20
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008754:	2118      	movs	r1, #24
 8008756:	187b      	adds	r3, r7, r1
 8008758:	785b      	ldrb	r3, [r3, #1]
 800875a:	001a      	movs	r2, r3
 800875c:	187b      	adds	r3, r7, r1
 800875e:	1c99      	adds	r1, r3, #2
 8008760:	486f      	ldr	r0, [pc, #444]	@ (8008920 <ProcessCmd+0x408>)
 8008762:	230c      	movs	r3, #12
 8008764:	f003 fcac 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008768:	e0f4      	b.n	8008954 <ProcessCmd+0x43c>
        case SEN55TempConfigCmd: // 23
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800876a:	2118      	movs	r1, #24
 800876c:	187b      	adds	r3, r7, r1
 800876e:	785b      	ldrb	r3, [r3, #1]
 8008770:	001a      	movs	r2, r3
 8008772:	187b      	adds	r3, r7, r1
 8008774:	1c99      	adds	r1, r3, #2
 8008776:	486b      	ldr	r0, [pc, #428]	@ (8008924 <ProcessCmd+0x40c>)
 8008778:	230c      	movs	r3, #12
 800877a:	f003 fca1 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800877e:	e0e9      	b.n	8008954 <ProcessCmd+0x43c>
        case SEN55HumidConfigCmd: // 24
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008780:	2118      	movs	r1, #24
 8008782:	187b      	adds	r3, r7, r1
 8008784:	785b      	ldrb	r3, [r3, #1]
 8008786:	001a      	movs	r2, r3
 8008788:	187b      	adds	r3, r7, r1
 800878a:	1c99      	adds	r1, r3, #2
 800878c:	4866      	ldr	r0, [pc, #408]	@ (8008928 <ProcessCmd+0x410>)
 800878e:	230c      	movs	r3, #12
 8008790:	f003 fc96 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008794:	e0de      	b.n	8008954 <ProcessCmd+0x43c>
        case SendFromNameConfigCmd:  // 25
          ClearEEprom(SendFromNameConfigAddr, SendFromNameMaxLength);
 8008796:	4b65      	ldr	r3, [pc, #404]	@ (800892c <ProcessCmd+0x414>)
 8008798:	2130      	movs	r1, #48	@ 0x30
 800879a:	0018      	movs	r0, r3
 800879c:	f003 fcd5 	bl	800c14a <ClearEEprom>
          WriteUint8ArrayEepromSafe(SendFromNameConfigAddr, msg.Payload, msg.PayloadLength, SendFromNameMaxLength);
 80087a0:	2118      	movs	r1, #24
 80087a2:	187b      	adds	r3, r7, r1
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	001a      	movs	r2, r3
 80087a8:	187b      	adds	r3, r7, r1
 80087aa:	1c99      	adds	r1, r3, #2
 80087ac:	485f      	ldr	r0, [pc, #380]	@ (800892c <ProcessCmd+0x414>)
 80087ae:	2330      	movs	r3, #48	@ 0x30
 80087b0:	f003 fc86 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80087b4:	e0ce      	b.n	8008954 <ProcessCmd+0x43c>
        case SendToNameConfigCmd:  // 26
          ClearEEprom(SendToNameConfigAddr, SendToNameMaxLength);
 80087b6:	4b5e      	ldr	r3, [pc, #376]	@ (8008930 <ProcessCmd+0x418>)
 80087b8:	2130      	movs	r1, #48	@ 0x30
 80087ba:	0018      	movs	r0, r3
 80087bc:	f003 fcc5 	bl	800c14a <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 80087c0:	2218      	movs	r2, #24
 80087c2:	18bb      	adds	r3, r7, r2
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	0019      	movs	r1, r3
 80087c8:	18bb      	adds	r3, r7, r2
 80087ca:	785b      	ldrb	r3, [r3, #1]
 80087cc:	001c      	movs	r4, r3
 80087ce:	0015      	movs	r5, r2
 80087d0:	18bb      	adds	r3, r7, r2
 80087d2:	1c9a      	adds	r2, r3, #2
 80087d4:	484a      	ldr	r0, [pc, #296]	@ (8008900 <ProcessCmd+0x3e8>)
 80087d6:	0023      	movs	r3, r4
 80087d8:	f000 f964 	bl	8008aa4 <printf_USB>
          WriteUint8ArrayEepromSafe(SendToNameConfigAddr, msg.Payload, msg.PayloadLength, SendToNameMaxLength);
 80087dc:	0029      	movs	r1, r5
 80087de:	187b      	adds	r3, r7, r1
 80087e0:	785b      	ldrb	r3, [r3, #1]
 80087e2:	001a      	movs	r2, r3
 80087e4:	187b      	adds	r3, r7, r1
 80087e6:	1c99      	adds	r1, r3, #2
 80087e8:	4851      	ldr	r0, [pc, #324]	@ (8008930 <ProcessCmd+0x418>)
 80087ea:	2330      	movs	r3, #48	@ 0x30
 80087ec:	f003 fc68 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 80087f0:	e0b0      	b.n	8008954 <ProcessCmd+0x43c>
        case MailAPIKeyConfigCmd:  // 27
          ClearEEprom(MailAPIKeyConfigAddr, MailAPIKeyMaxLength);
 80087f2:	4b50      	ldr	r3, [pc, #320]	@ (8008934 <ProcessCmd+0x41c>)
 80087f4:	2130      	movs	r1, #48	@ 0x30
 80087f6:	0018      	movs	r0, r3
 80087f8:	f003 fca7 	bl	800c14a <ClearEEprom>
          WriteUint8ArrayEepromSafe(MailAPIKeyConfigAddr, msg.Payload, msg.PayloadLength, MailAPIKeyMaxLength);
 80087fc:	2118      	movs	r1, #24
 80087fe:	187b      	adds	r3, r7, r1
 8008800:	785b      	ldrb	r3, [r3, #1]
 8008802:	001a      	movs	r2, r3
 8008804:	187b      	adds	r3, r7, r1
 8008806:	1c99      	adds	r1, r3, #2
 8008808:	484a      	ldr	r0, [pc, #296]	@ (8008934 <ProcessCmd+0x41c>)
 800880a:	2330      	movs	r3, #48	@ 0x30
 800880c:	f003 fc58 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008810:	e0a0      	b.n	8008954 <ProcessCmd+0x43c>
        case hPaConfigCmd:  // 28 will be airpressure => hPaconfigCMD hPaConfigAddr ??
          WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008812:	2118      	movs	r1, #24
 8008814:	187b      	adds	r3, r7, r1
 8008816:	785b      	ldrb	r3, [r3, #1]
 8008818:	001a      	movs	r2, r3
 800881a:	187b      	adds	r3, r7, r1
 800881c:	1c99      	adds	r1, r3, #2
 800881e:	4846      	ldr	r0, [pc, #280]	@ (8008938 <ProcessCmd+0x420>)
 8008820:	230c      	movs	r3, #12
 8008822:	f003 fc4d 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 8008826:	e095      	b.n	8008954 <ProcessCmd+0x43c>
        case UptimeConfigCmd: // 29
          WriteUint8ArrayEepromSafe(UptimeConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008828:	2118      	movs	r1, #24
 800882a:	187b      	adds	r3, r7, r1
 800882c:	785b      	ldrb	r3, [r3, #1]
 800882e:	001a      	movs	r2, r3
 8008830:	187b      	adds	r3, r7, r1
 8008832:	1c99      	adds	r1, r3, #2
 8008834:	4841      	ldr	r0, [pc, #260]	@ (800893c <ProcessCmd+0x424>)
 8008836:	230c      	movs	r3, #12
 8008838:	f003 fc42 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800883c:	e08a      	b.n	8008954 <ProcessCmd+0x43c>
        case URLToUploadConfigCmd: // 30
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 800883e:	2218      	movs	r2, #24
 8008840:	18bb      	adds	r3, r7, r2
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	0019      	movs	r1, r3
 8008846:	18bb      	adds	r3, r7, r2
 8008848:	785b      	ldrb	r3, [r3, #1]
 800884a:	001c      	movs	r4, r3
 800884c:	0015      	movs	r5, r2
 800884e:	18bb      	adds	r3, r7, r2
 8008850:	1c9a      	adds	r2, r3, #2
 8008852:	482b      	ldr	r0, [pc, #172]	@ (8008900 <ProcessCmd+0x3e8>)
 8008854:	0023      	movs	r3, r4
 8008856:	f000 f925 	bl	8008aa4 <printf_USB>
          WriteUint8ArrayEepromSafe(URLToUploadConfigAddr, msg.Payload, msg.PayloadLength, URLToUploadMaxLength);
 800885a:	0029      	movs	r1, r5
 800885c:	187b      	adds	r3, r7, r1
 800885e:	785b      	ldrb	r3, [r3, #1]
 8008860:	001a      	movs	r2, r3
 8008862:	187b      	adds	r3, r7, r1
 8008864:	1c99      	adds	r1, r3, #2
 8008866:	4836      	ldr	r0, [pc, #216]	@ (8008940 <ProcessCmd+0x428>)
 8008868:	2330      	movs	r3, #48	@ 0x30
 800886a:	f003 fc29 	bl	800c0c0 <WriteUint8ArrayEepromSafe>
        break;
 800886e:	e071      	b.n	8008954 <ProcessCmd+0x43c>

        case ClearConfigCmd: // 253
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8008870:	2396      	movs	r3, #150	@ 0x96
 8008872:	33ff      	adds	r3, #255	@ 0xff
 8008874:	4a13      	ldr	r2, [pc, #76]	@ (80088c4 <ProcessCmd+0x3ac>)
 8008876:	0019      	movs	r1, r3
 8008878:	0010      	movs	r0, r2
 800887a:	f003 fc66 	bl	800c14a <ClearEEprom>
            ClearEEprom(SSIDStartAddr, IPrelatedConfigSize);
 800887e:	4b1e      	ldr	r3, [pc, #120]	@ (80088f8 <ProcessCmd+0x3e0>)
 8008880:	21f0      	movs	r1, #240	@ 0xf0
 8008882:	0018      	movs	r0, r3
 8008884:	f003 fc61 	bl	800c14a <ClearEEprom>
        break;
 8008888:	e064      	b.n	8008954 <ProcessCmd+0x43c>
        case ClearEepromCmd: //254
        {
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 800888a:	2118      	movs	r1, #24
 800888c:	187b      	adds	r3, r7, r1
 800888e:	789b      	ldrb	r3, [r3, #2]
 8008890:	b21b      	sxth	r3, r3
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	b21a      	sxth	r2, r3
 8008896:	187b      	adds	r3, r7, r1
 8008898:	78db      	ldrb	r3, [r3, #3]
 800889a:	b21b      	sxth	r3, r3
 800889c:	4313      	orrs	r3, r2
 800889e:	b21a      	sxth	r2, r3
 80088a0:	1dbb      	adds	r3, r7, #6
 80088a2:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80088a4:	1dbb      	adds	r3, r7, #6
 80088a6:	881a      	ldrh	r2, [r3, #0]
 80088a8:	23c0      	movs	r3, #192	@ 0xc0
 80088aa:	015b      	lsls	r3, r3, #5
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d249      	bcs.n	8008944 <ProcessCmd+0x42c>
            {
                ClearEEprom(EEPromStartAddr, size);
 80088b0:	1dbb      	adds	r3, r7, #6
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	4a03      	ldr	r2, [pc, #12]	@ (80088c4 <ProcessCmd+0x3ac>)
 80088b6:	0019      	movs	r1, r3
 80088b8:	0010      	movs	r0, r2
 80088ba:	f003 fc46 	bl	800c14a <ClearEEprom>
            }
            else
            {
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
 80088be:	e048      	b.n	8008952 <ProcessCmd+0x43a>
 80088c0:	0802ddc4 	.word	0x0802ddc4
 80088c4:	08080000 	.word	0x08080000
 80088c8:	0808000c 	.word	0x0808000c
 80088cc:	08080018 	.word	0x08080018
 80088d0:	08080024 	.word	0x08080024
 80088d4:	08080030 	.word	0x08080030
 80088d8:	08080048 	.word	0x08080048
 80088dc:	0808003c 	.word	0x0808003c
 80088e0:	08080054 	.word	0x08080054
 80088e4:	08080060 	.word	0x08080060
 80088e8:	0808006c 	.word	0x0808006c
 80088ec:	08080078 	.word	0x08080078
 80088f0:	08080084 	.word	0x08080084
 80088f4:	08080090 	.word	0x08080090
 80088f8:	08080200 	.word	0x08080200
 80088fc:	08080220 	.word	0x08080220
 8008900:	0802b24c 	.word	0x0802b24c
 8008904:	080800b0 	.word	0x080800b0
 8008908:	080800bc 	.word	0x080800bc
 800890c:	080800c8 	.word	0x080800c8
 8008910:	080800d4 	.word	0x080800d4
 8008914:	080800e0 	.word	0x080800e0
 8008918:	080800ec 	.word	0x080800ec
 800891c:	080800f8 	.word	0x080800f8
 8008920:	08080104 	.word	0x08080104
 8008924:	08080170 	.word	0x08080170
 8008928:	0808017c 	.word	0x0808017c
 800892c:	08080260 	.word	0x08080260
 8008930:	08080290 	.word	0x08080290
 8008934:	080802c0 	.word	0x080802c0
 8008938:	08080188 	.word	0x08080188
 800893c:	080801a0 	.word	0x080801a0
 8008940:	08080110 	.word	0x08080110
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8008944:	23c0      	movs	r3, #192	@ 0xc0
 8008946:	015b      	lsls	r3, r3, #5
 8008948:	4a06      	ldr	r2, [pc, #24]	@ (8008964 <ProcessCmd+0x44c>)
 800894a:	0019      	movs	r1, r3
 800894c:	0010      	movs	r0, r2
 800894e:	f003 fbfc 	bl	800c14a <ClearEEprom>
            break;
 8008952:	46c0      	nop			@ (mov r8, r8)
        }
    }

}
 8008954:	46c0      	nop			@ (mov r8, r8)
 8008956:	46bd      	mov	sp, r7
 8008958:	b002      	add	sp, #8
 800895a:	bcb0      	pop	{r4, r5, r7}
 800895c:	bc08      	pop	{r3}
 800895e:	b004      	add	sp, #16
 8008960:	4718      	bx	r3
 8008962:	46c0      	nop			@ (mov r8, r8)
 8008964:	08080000 	.word	0x08080000

08008968 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8008968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6039      	str	r1, [r7, #0]
 8008970:	0011      	movs	r1, r2
 8008972:	1dfb      	adds	r3, r7, #7
 8008974:	1c02      	adds	r2, r0, #0
 8008976:	701a      	strb	r2, [r3, #0]
 8008978:	1dbb      	adds	r3, r7, #6
 800897a:	1c0a      	adds	r2, r1, #0
 800897c:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 800897e:	2223      	movs	r2, #35	@ 0x23
 8008980:	4b20      	ldr	r3, [pc, #128]	@ (8008a04 <Create_Message+0x9c>)
 8008982:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8008984:	4b1f      	ldr	r3, [pc, #124]	@ (8008a04 <Create_Message+0x9c>)
 8008986:	1dfa      	adds	r2, r7, #7
 8008988:	7812      	ldrb	r2, [r2, #0]
 800898a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 800898c:	4b1d      	ldr	r3, [pc, #116]	@ (8008a04 <Create_Message+0x9c>)
 800898e:	1dba      	adds	r2, r7, #6
 8008990:	7812      	ldrb	r2, [r2, #0]
 8008992:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8008994:	1dbb      	adds	r3, r7, #6
 8008996:	781a      	ldrb	r2, [r3, #0]
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	4b1b      	ldr	r3, [pc, #108]	@ (8008a08 <Create_Message+0xa0>)
 800899c:	0018      	movs	r0, r3
 800899e:	f01d fe3f 	bl	8026620 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80089a2:	1dbb      	adds	r3, r7, #6
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	250e      	movs	r5, #14
 80089aa:	197b      	adds	r3, r7, r5
 80089ac:	3203      	adds	r2, #3
 80089ae:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80089b0:	260c      	movs	r6, #12
 80089b2:	19bc      	adds	r4, r7, r6
 80089b4:	197b      	adds	r3, r7, r5
 80089b6:	881a      	ldrh	r2, [r3, #0]
 80089b8:	4b12      	ldr	r3, [pc, #72]	@ (8008a04 <Create_Message+0x9c>)
 80089ba:	0011      	movs	r1, r2
 80089bc:	0018      	movs	r0, r3
 80089be:	f000 f825 	bl	8008a0c <CRC16_ARC>
 80089c2:	0003      	movs	r3, r0
 80089c4:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 80089c6:	0030      	movs	r0, r6
 80089c8:	183b      	adds	r3, r7, r0
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	0a1b      	lsrs	r3, r3, #8
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	197b      	adds	r3, r7, r5
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	b2d1      	uxtb	r1, r2
 80089d6:	4a0b      	ldr	r2, [pc, #44]	@ (8008a04 <Create_Message+0x9c>)
 80089d8:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 80089da:	197b      	adds	r3, r7, r5
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	3301      	adds	r3, #1
 80089e0:	183a      	adds	r2, r7, r0
 80089e2:	8812      	ldrh	r2, [r2, #0]
 80089e4:	b2d1      	uxtb	r1, r2
 80089e6:	4a07      	ldr	r2, [pc, #28]	@ (8008a04 <Create_Message+0x9c>)
 80089e8:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80089ea:	197b      	adds	r3, r7, r5
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	3302      	adds	r3, #2
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	4b04      	ldr	r3, [pc, #16]	@ (8008a04 <Create_Message+0x9c>)
 80089f4:	0011      	movs	r1, r2
 80089f6:	0018      	movs	r0, r3
 80089f8:	f01a fad6 	bl	8022fa8 <CDC_Transmit_FS>
}
 80089fc:	46c0      	nop			@ (mov r8, r8)
 80089fe:	46bd      	mov	sp, r7
 8008a00:	b005      	add	sp, #20
 8008a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a04:	20000a4c 	.word	0x20000a4c
 8008a08:	20000a4f 	.word	0x20000a4f

08008a0c <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	000a      	movs	r2, r1
 8008a16:	1cbb      	adds	r3, r7, #2
 8008a18:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8008a1a:	2316      	movs	r3, #22
 8008a1c:	18fb      	adds	r3, r7, r3
 8008a1e:	2200      	movs	r2, #0
 8008a20:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8008a22:	2300      	movs	r3, #0
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	e02e      	b.n	8008a86 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	18d3      	adds	r3, r2, r3
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	0019      	movs	r1, r3
 8008a32:	2216      	movs	r2, #22
 8008a34:	18bb      	adds	r3, r7, r2
 8008a36:	18ba      	adds	r2, r7, r2
 8008a38:	8812      	ldrh	r2, [r2, #0]
 8008a3a:	404a      	eors	r2, r1
 8008a3c:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008a3e:	2300      	movs	r3, #0
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	e01a      	b.n	8008a7a <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8008a44:	2116      	movs	r1, #22
 8008a46:	187b      	adds	r3, r7, r1
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	d00b      	beq.n	8008a68 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8008a50:	187b      	adds	r3, r7, r1
 8008a52:	187a      	adds	r2, r7, r1
 8008a54:	8812      	ldrh	r2, [r2, #0]
 8008a56:	0852      	lsrs	r2, r2, #1
 8008a58:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8008a5a:	187b      	adds	r3, r7, r1
 8008a5c:	187a      	adds	r2, r7, r1
 8008a5e:	8812      	ldrh	r2, [r2, #0]
 8008a60:	490f      	ldr	r1, [pc, #60]	@ (8008aa0 <CRC16_ARC+0x94>)
 8008a62:	404a      	eors	r2, r1
 8008a64:	801a      	strh	r2, [r3, #0]
 8008a66:	e005      	b.n	8008a74 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8008a68:	2216      	movs	r2, #22
 8008a6a:	18bb      	adds	r3, r7, r2
 8008a6c:	18ba      	adds	r2, r7, r2
 8008a6e:	8812      	ldrh	r2, [r2, #0]
 8008a70:	0852      	lsrs	r2, r2, #1
 8008a72:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3301      	adds	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b07      	cmp	r3, #7
 8008a7e:	dde1      	ble.n	8008a44 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	3301      	adds	r3, #1
 8008a84:	613b      	str	r3, [r7, #16]
 8008a86:	1cbb      	adds	r3, r7, #2
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	dbcb      	blt.n	8008a28 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008a90:	2316      	movs	r3, #22
 8008a92:	18fb      	adds	r3, r7, r3
 8008a94:	881b      	ldrh	r3, [r3, #0]
}
 8008a96:	0018      	movs	r0, r3
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	b006      	add	sp, #24
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	46c0      	nop			@ (mov r8, r8)
 8008aa0:	ffffa001 	.word	0xffffa001

08008aa4 <printf_USB>:

void printf_USB(const char* message, ...)
{
 8008aa4:	b40f      	push	{r0, r1, r2, r3}
 8008aa6:	b590      	push	{r4, r7, lr}
 8008aa8:	b0a9      	sub	sp, #164	@ 0xa4
 8008aaa:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8008aac:	23ac      	movs	r3, #172	@ 0xac
 8008aae:	2108      	movs	r1, #8
 8008ab0:	185b      	adds	r3, r3, r1
 8008ab2:	19db      	adds	r3, r3, r7
 8008ab4:	607b      	str	r3, [r7, #4]
  vsnprintf(string, 150, message, args);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	22a8      	movs	r2, #168	@ 0xa8
 8008aba:	1852      	adds	r2, r2, r1
 8008abc:	19d2      	adds	r2, r2, r7
 8008abe:	6812      	ldr	r2, [r2, #0]
 8008ac0:	2408      	movs	r4, #8
 8008ac2:	1938      	adds	r0, r7, r4
 8008ac4:	2196      	movs	r1, #150	@ 0x96
 8008ac6:	f01d fc23 	bl	8026310 <vsniprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008aca:	193b      	adds	r3, r7, r4
 8008acc:	0018      	movs	r0, r3
 8008ace:	f7f7 fb4d 	bl	800016c <strlen>
 8008ad2:	0003      	movs	r3, r0
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	193b      	adds	r3, r7, r4
 8008ad8:	0011      	movs	r1, r2
 8008ada:	0018      	movs	r0, r3
 8008adc:	f01a fa64 	bl	8022fa8 <CDC_Transmit_FS>
}
 8008ae0:	46c0      	nop			@ (mov r8, r8)
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	b029      	add	sp, #164	@ 0xa4
 8008ae6:	bc90      	pop	{r4, r7}
 8008ae8:	bc08      	pop	{r3}
 8008aea:	b004      	add	sp, #16
 8008aec:	4718      	bx	r3

08008aee <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	000a      	movs	r2, r1
 8008af8:	1cfb      	adds	r3, r7, #3
 8008afa:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008afc:	1cfb      	adds	r3, r7, #3
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d006      	beq.n	8008b12 <PC_selectout+0x24>
    printf_USB(msg);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	0018      	movs	r0, r3
 8008b08:	f7ff ffcc 	bl	8008aa4 <printf_USB>
    HAL_Delay(10); //wait for the host poll of the USB buffer
 8008b0c:	200a      	movs	r0, #10
 8008b0e:	f00b febb 	bl	8014888 <HAL_Delay>
  }
//  else {
    printf(msg);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	0018      	movs	r0, r3
 8008b16:	f01d faef 	bl	80260f8 <iprintf>
//  }
}
 8008b1a:	46c0      	nop			@ (mov r8, r8)
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	b002      	add	sp, #8
 8008b20:	bd80      	pop	{r7, pc}
	...

08008b24 <PC_show_Keys>:

void PC_show_Keys() {
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
  static uint8_t hPaConfig[IdSize];               // 28 was 5
  static uint8_t UptimeConfig[IdSize];            // 29
  static uint8_t URLToUploadConfig[URLToUploadMaxLength]; // 30
  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8008b28:	f001 f876 	bl	8009c18 <Check_USB_PowerOn>
 8008b2c:	1e03      	subs	r3, r0, #0
 8008b2e:	d005      	beq.n	8008b3c <PC_show_Keys+0x18>
    usb_out = true;
 8008b30:	4b01      	ldr	r3, [pc, #4]	@ (8008b38 <PC_show_Keys+0x14>)
 8008b32:	2201      	movs	r2, #1
 8008b34:	701a      	strb	r2, [r3, #0]
 8008b36:	e004      	b.n	8008b42 <PC_show_Keys+0x1e>
 8008b38:	20000b51 	.word	0x20000b51
  }
  else {
    usb_out = false;
 8008b3c:	4bfd      	ldr	r3, [pc, #1012]	@ (8008f34 <PC_show_Keys+0x410>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "\r\nOverview of stored keys:\r\n");
 8008b42:	4afd      	ldr	r2, [pc, #1012]	@ (8008f38 <PC_show_Keys+0x414>)
 8008b44:	4bfd      	ldr	r3, [pc, #1012]	@ (8008f3c <PC_show_Keys+0x418>)
 8008b46:	0011      	movs	r1, r2
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f01d fb45 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b4e:	4bf9      	ldr	r3, [pc, #996]	@ (8008f34 <PC_show_Keys+0x410>)
 8008b50:	781a      	ldrb	r2, [r3, #0]
 8008b52:	4bfa      	ldr	r3, [pc, #1000]	@ (8008f3c <PC_show_Keys+0x418>)
 8008b54:	0011      	movs	r1, r2
 8008b56:	0018      	movs	r0, r3
 8008b58:	f7ff ffc9 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008b5c:	4bf8      	ldr	r3, [pc, #992]	@ (8008f40 <PC_show_Keys+0x41c>)
 8008b5e:	48f9      	ldr	r0, [pc, #996]	@ (8008f44 <PC_show_Keys+0x420>)
 8008b60:	220c      	movs	r2, #12
 8008b62:	0019      	movs	r1, r3
 8008b64:	f003 fac8 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8008b68:	4af5      	ldr	r2, [pc, #980]	@ (8008f40 <PC_show_Keys+0x41c>)
 8008b6a:	4bf7      	ldr	r3, [pc, #988]	@ (8008f48 <PC_show_Keys+0x424>)
 8008b6c:	0011      	movs	r1, r2
 8008b6e:	0018      	movs	r0, r3
 8008b70:	f7fc fc3a 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Box id ------------------------: %s\r\n", BoxConfigCmd, Buffer);
 8008b74:	4bf4      	ldr	r3, [pc, #976]	@ (8008f48 <PC_show_Keys+0x424>)
 8008b76:	49f5      	ldr	r1, [pc, #980]	@ (8008f4c <PC_show_Keys+0x428>)
 8008b78:	48f0      	ldr	r0, [pc, #960]	@ (8008f3c <PC_show_Keys+0x418>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f01d fb2c 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b80:	4bec      	ldr	r3, [pc, #944]	@ (8008f34 <PC_show_Keys+0x410>)
 8008b82:	781a      	ldrb	r2, [r3, #0]
 8008b84:	4bed      	ldr	r3, [pc, #948]	@ (8008f3c <PC_show_Keys+0x418>)
 8008b86:	0011      	movs	r1, r2
 8008b88:	0018      	movs	r0, r3
 8008b8a:	f7ff ffb0 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8008b8e:	4bf0      	ldr	r3, [pc, #960]	@ (8008f50 <PC_show_Keys+0x42c>)
 8008b90:	48f0      	ldr	r0, [pc, #960]	@ (8008f54 <PC_show_Keys+0x430>)
 8008b92:	220c      	movs	r2, #12
 8008b94:	0019      	movs	r1, r3
 8008b96:	f003 faaf 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8008b9a:	4aed      	ldr	r2, [pc, #948]	@ (8008f50 <PC_show_Keys+0x42c>)
 8008b9c:	4bea      	ldr	r3, [pc, #936]	@ (8008f48 <PC_show_Keys+0x424>)
 8008b9e:	0011      	movs	r1, r2
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f7fc fc21 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Temperature sensor id: --------: %s\r\n", TempConfigCmd, Buffer);
 8008ba6:	4be8      	ldr	r3, [pc, #928]	@ (8008f48 <PC_show_Keys+0x424>)
 8008ba8:	49eb      	ldr	r1, [pc, #940]	@ (8008f58 <PC_show_Keys+0x434>)
 8008baa:	48e4      	ldr	r0, [pc, #912]	@ (8008f3c <PC_show_Keys+0x418>)
 8008bac:	2201      	movs	r2, #1
 8008bae:	f01d fb13 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008bb2:	4be0      	ldr	r3, [pc, #896]	@ (8008f34 <PC_show_Keys+0x410>)
 8008bb4:	781a      	ldrb	r2, [r3, #0]
 8008bb6:	4be1      	ldr	r3, [pc, #900]	@ (8008f3c <PC_show_Keys+0x418>)
 8008bb8:	0011      	movs	r1, r2
 8008bba:	0018      	movs	r0, r3
 8008bbc:	f7ff ff97 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008bc0:	4be6      	ldr	r3, [pc, #920]	@ (8008f5c <PC_show_Keys+0x438>)
 8008bc2:	48e7      	ldr	r0, [pc, #924]	@ (8008f60 <PC_show_Keys+0x43c>)
 8008bc4:	220c      	movs	r2, #12
 8008bc6:	0019      	movs	r1, r3
 8008bc8:	f003 fa96 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008bcc:	4ae3      	ldr	r2, [pc, #908]	@ (8008f5c <PC_show_Keys+0x438>)
 8008bce:	4bde      	ldr	r3, [pc, #888]	@ (8008f48 <PC_show_Keys+0x424>)
 8008bd0:	0011      	movs	r1, r2
 8008bd2:	0018      	movs	r0, r3
 8008bd4:	f7fc fc08 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Humidity sensor id ------------: %s\r\n", HumidConfigCmd, Buffer);
 8008bd8:	4bdb      	ldr	r3, [pc, #876]	@ (8008f48 <PC_show_Keys+0x424>)
 8008bda:	49e2      	ldr	r1, [pc, #904]	@ (8008f64 <PC_show_Keys+0x440>)
 8008bdc:	48d7      	ldr	r0, [pc, #860]	@ (8008f3c <PC_show_Keys+0x418>)
 8008bde:	2202      	movs	r2, #2
 8008be0:	f01d fafa 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008be4:	4bd3      	ldr	r3, [pc, #844]	@ (8008f34 <PC_show_Keys+0x410>)
 8008be6:	781a      	ldrb	r2, [r3, #0]
 8008be8:	4bd4      	ldr	r3, [pc, #848]	@ (8008f3c <PC_show_Keys+0x418>)
 8008bea:	0011      	movs	r1, r2
 8008bec:	0018      	movs	r0, r3
 8008bee:	f7ff ff7e 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8008bf2:	4bdd      	ldr	r3, [pc, #884]	@ (8008f68 <PC_show_Keys+0x444>)
 8008bf4:	48dd      	ldr	r0, [pc, #884]	@ (8008f6c <PC_show_Keys+0x448>)
 8008bf6:	220c      	movs	r2, #12
 8008bf8:	0019      	movs	r1, r3
 8008bfa:	f003 fa7d 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008bfe:	4ada      	ldr	r2, [pc, #872]	@ (8008f68 <PC_show_Keys+0x444>)
 8008c00:	4bd1      	ldr	r3, [pc, #836]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c02:	0011      	movs	r1, r2
 8008c04:	0018      	movs	r0, r3
 8008c06:	f7fc fbef 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - NOx sensor id -----------------: %s\r\n", NOxIndexConfigCmd, Buffer);
 8008c0a:	4bcf      	ldr	r3, [pc, #828]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c0c:	49d8      	ldr	r1, [pc, #864]	@ (8008f70 <PC_show_Keys+0x44c>)
 8008c0e:	48cb      	ldr	r0, [pc, #812]	@ (8008f3c <PC_show_Keys+0x418>)
 8008c10:	2203      	movs	r2, #3
 8008c12:	f01d fae1 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c16:	4bc7      	ldr	r3, [pc, #796]	@ (8008f34 <PC_show_Keys+0x410>)
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	4bc8      	ldr	r3, [pc, #800]	@ (8008f3c <PC_show_Keys+0x418>)
 8008c1c:	0011      	movs	r1, r2
 8008c1e:	0018      	movs	r0, r3
 8008c20:	f7ff ff65 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8008c24:	4bd3      	ldr	r3, [pc, #844]	@ (8008f74 <PC_show_Keys+0x450>)
 8008c26:	48d4      	ldr	r0, [pc, #848]	@ (8008f78 <PC_show_Keys+0x454>)
 8008c28:	220c      	movs	r2, #12
 8008c2a:	0019      	movs	r1, r3
 8008c2c:	f003 fa64 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008c30:	4ad0      	ldr	r2, [pc, #832]	@ (8008f74 <PC_show_Keys+0x450>)
 8008c32:	4bc5      	ldr	r3, [pc, #788]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c34:	0011      	movs	r1, r2
 8008c36:	0018      	movs	r0, r3
 8008c38:	f7fc fbd6 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - VOC sensor id -----------------: %s\r\n", VocIndexConfigCmd, Buffer);
 8008c3c:	4bc2      	ldr	r3, [pc, #776]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c3e:	49cf      	ldr	r1, [pc, #828]	@ (8008f7c <PC_show_Keys+0x458>)
 8008c40:	48be      	ldr	r0, [pc, #760]	@ (8008f3c <PC_show_Keys+0x418>)
 8008c42:	2204      	movs	r2, #4
 8008c44:	f01d fac8 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c48:	4bba      	ldr	r3, [pc, #744]	@ (8008f34 <PC_show_Keys+0x410>)
 8008c4a:	781a      	ldrb	r2, [r3, #0]
 8008c4c:	4bbb      	ldr	r3, [pc, #748]	@ (8008f3c <PC_show_Keys+0x418>)
 8008c4e:	0011      	movs	r1, r2
 8008c50:	0018      	movs	r0, r3
 8008c52:	f7ff ff4c 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8008c56:	4bca      	ldr	r3, [pc, #808]	@ (8008f80 <PC_show_Keys+0x45c>)
 8008c58:	48ca      	ldr	r0, [pc, #808]	@ (8008f84 <PC_show_Keys+0x460>)
 8008c5a:	220c      	movs	r2, #12
 8008c5c:	0019      	movs	r1, r3
 8008c5e:	f003 fa4b 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008c62:	4ac7      	ldr	r2, [pc, #796]	@ (8008f80 <PC_show_Keys+0x45c>)
 8008c64:	4bb8      	ldr	r3, [pc, #736]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c66:	0011      	movs	r1, r2
 8008c68:	0018      	movs	r0, r3
 8008c6a:	f7fc fbbd 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - dBA sensor id -----------------: %s\r\n", dBAConfigCmd, Buffer);
 8008c6e:	4bb6      	ldr	r3, [pc, #728]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c70:	49c5      	ldr	r1, [pc, #788]	@ (8008f88 <PC_show_Keys+0x464>)
 8008c72:	48b2      	ldr	r0, [pc, #712]	@ (8008f3c <PC_show_Keys+0x418>)
 8008c74:	2205      	movs	r2, #5
 8008c76:	f01d faaf 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c7a:	4bae      	ldr	r3, [pc, #696]	@ (8008f34 <PC_show_Keys+0x410>)
 8008c7c:	781a      	ldrb	r2, [r3, #0]
 8008c7e:	4baf      	ldr	r3, [pc, #700]	@ (8008f3c <PC_show_Keys+0x418>)
 8008c80:	0011      	movs	r1, r2
 8008c82:	0018      	movs	r0, r3
 8008c84:	f7ff ff33 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(dBcConfigAddr, dBcConfig, IdSize);
 8008c88:	4bc0      	ldr	r3, [pc, #768]	@ (8008f8c <PC_show_Keys+0x468>)
 8008c8a:	48c1      	ldr	r0, [pc, #772]	@ (8008f90 <PC_show_Keys+0x46c>)
 8008c8c:	220c      	movs	r2, #12
 8008c8e:	0019      	movs	r1, r3
 8008c90:	f003 fa32 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, dBcConfig);
 8008c94:	4abd      	ldr	r2, [pc, #756]	@ (8008f8c <PC_show_Keys+0x468>)
 8008c96:	4bac      	ldr	r3, [pc, #688]	@ (8008f48 <PC_show_Keys+0x424>)
 8008c98:	0011      	movs	r1, r2
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	f7fc fba4 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Sound dBc sensor id -----------: %s\r\n", dBcConfigCmd, Buffer);
 8008ca0:	4ba9      	ldr	r3, [pc, #676]	@ (8008f48 <PC_show_Keys+0x424>)
 8008ca2:	49bc      	ldr	r1, [pc, #752]	@ (8008f94 <PC_show_Keys+0x470>)
 8008ca4:	48a5      	ldr	r0, [pc, #660]	@ (8008f3c <PC_show_Keys+0x418>)
 8008ca6:	2206      	movs	r2, #6
 8008ca8:	f01d fa96 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cac:	4ba1      	ldr	r3, [pc, #644]	@ (8008f34 <PC_show_Keys+0x410>)
 8008cae:	781a      	ldrb	r2, [r3, #0]
 8008cb0:	4ba2      	ldr	r3, [pc, #648]	@ (8008f3c <PC_show_Keys+0x418>)
 8008cb2:	0011      	movs	r1, r2
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	f7ff ff1a 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008cba:	4bb7      	ldr	r3, [pc, #732]	@ (8008f98 <PC_show_Keys+0x474>)
 8008cbc:	48b7      	ldr	r0, [pc, #732]	@ (8008f9c <PC_show_Keys+0x478>)
 8008cbe:	220c      	movs	r2, #12
 8008cc0:	0019      	movs	r1, r3
 8008cc2:	f003 fa19 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008cc6:	4ab4      	ldr	r2, [pc, #720]	@ (8008f98 <PC_show_Keys+0x474>)
 8008cc8:	4b9f      	ldr	r3, [pc, #636]	@ (8008f48 <PC_show_Keys+0x424>)
 8008cca:	0011      	movs	r1, r2
 8008ccc:	0018      	movs	r0, r3
 8008cce:	f7fc fb8b 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - PM2p5 sensor id ---------------: %s\r\n", PM2ConfigCmd, Buffer);
 8008cd2:	4b9d      	ldr	r3, [pc, #628]	@ (8008f48 <PC_show_Keys+0x424>)
 8008cd4:	49b2      	ldr	r1, [pc, #712]	@ (8008fa0 <PC_show_Keys+0x47c>)
 8008cd6:	4899      	ldr	r0, [pc, #612]	@ (8008f3c <PC_show_Keys+0x418>)
 8008cd8:	2207      	movs	r2, #7
 8008cda:	f01d fa7d 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cde:	4b95      	ldr	r3, [pc, #596]	@ (8008f34 <PC_show_Keys+0x410>)
 8008ce0:	781a      	ldrb	r2, [r3, #0]
 8008ce2:	4b96      	ldr	r3, [pc, #600]	@ (8008f3c <PC_show_Keys+0x418>)
 8008ce4:	0011      	movs	r1, r2
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	f7ff ff01 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008cec:	4bad      	ldr	r3, [pc, #692]	@ (8008fa4 <PC_show_Keys+0x480>)
 8008cee:	48ae      	ldr	r0, [pc, #696]	@ (8008fa8 <PC_show_Keys+0x484>)
 8008cf0:	220c      	movs	r2, #12
 8008cf2:	0019      	movs	r1, r3
 8008cf4:	f003 fa00 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8008cf8:	4aaa      	ldr	r2, [pc, #680]	@ (8008fa4 <PC_show_Keys+0x480>)
 8008cfa:	4b93      	ldr	r3, [pc, #588]	@ (8008f48 <PC_show_Keys+0x424>)
 8008cfc:	0011      	movs	r1, r2
 8008cfe:	0018      	movs	r0, r3
 8008d00:	f7fc fb72 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - PM10 sensor id ----------------: %s\r\n", PM10ConfigCmd, Buffer);
 8008d04:	4b90      	ldr	r3, [pc, #576]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d06:	49a9      	ldr	r1, [pc, #676]	@ (8008fac <PC_show_Keys+0x488>)
 8008d08:	488c      	ldr	r0, [pc, #560]	@ (8008f3c <PC_show_Keys+0x418>)
 8008d0a:	2208      	movs	r2, #8
 8008d0c:	f01d fa64 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d10:	4b88      	ldr	r3, [pc, #544]	@ (8008f34 <PC_show_Keys+0x410>)
 8008d12:	781a      	ldrb	r2, [r3, #0]
 8008d14:	4b89      	ldr	r3, [pc, #548]	@ (8008f3c <PC_show_Keys+0x418>)
 8008d16:	0011      	movs	r1, r2
 8008d18:	0018      	movs	r0, r3
 8008d1a:	f7ff fee8 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8008d1e:	4ba4      	ldr	r3, [pc, #656]	@ (8008fb0 <PC_show_Keys+0x48c>)
 8008d20:	48a4      	ldr	r0, [pc, #656]	@ (8008fb4 <PC_show_Keys+0x490>)
 8008d22:	220c      	movs	r2, #12
 8008d24:	0019      	movs	r1, r3
 8008d26:	f003 f9e7 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 8008d2a:	4aa1      	ldr	r2, [pc, #644]	@ (8008fb0 <PC_show_Keys+0x48c>)
 8008d2c:	4b86      	ldr	r3, [pc, #536]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d2e:	0011      	movs	r1, r2
 8008d30:	0018      	movs	r0, r3
 8008d32:	f7fc fb59 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Battery voltage sensor id -----: %s\r\n", BatVoltConfigCmd, Buffer);
 8008d36:	4b84      	ldr	r3, [pc, #528]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d38:	499f      	ldr	r1, [pc, #636]	@ (8008fb8 <PC_show_Keys+0x494>)
 8008d3a:	4880      	ldr	r0, [pc, #512]	@ (8008f3c <PC_show_Keys+0x418>)
 8008d3c:	2209      	movs	r2, #9
 8008d3e:	f01d fa4b 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d42:	4b7c      	ldr	r3, [pc, #496]	@ (8008f34 <PC_show_Keys+0x410>)
 8008d44:	781a      	ldrb	r2, [r3, #0]
 8008d46:	4b7d      	ldr	r3, [pc, #500]	@ (8008f3c <PC_show_Keys+0x418>)
 8008d48:	0011      	movs	r1, r2
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	f7ff fecf 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8008d50:	4b9a      	ldr	r3, [pc, #616]	@ (8008fbc <PC_show_Keys+0x498>)
 8008d52:	489b      	ldr	r0, [pc, #620]	@ (8008fc0 <PC_show_Keys+0x49c>)
 8008d54:	220c      	movs	r2, #12
 8008d56:	0019      	movs	r1, r3
 8008d58:	f003 f9ce 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008d5c:	4a97      	ldr	r2, [pc, #604]	@ (8008fbc <PC_show_Keys+0x498>)
 8008d5e:	4b7a      	ldr	r3, [pc, #488]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d60:	0011      	movs	r1, r2
 8008d62:	0018      	movs	r0, r3
 8008d64:	f7fc fb40 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Solar voltage sensor id -------: %s\r\n", SolVoltConfigCmd, Buffer);
 8008d68:	4b77      	ldr	r3, [pc, #476]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d6a:	4996      	ldr	r1, [pc, #600]	@ (8008fc4 <PC_show_Keys+0x4a0>)
 8008d6c:	4873      	ldr	r0, [pc, #460]	@ (8008f3c <PC_show_Keys+0x418>)
 8008d6e:	220a      	movs	r2, #10
 8008d70:	f01d fa32 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d74:	4b6f      	ldr	r3, [pc, #444]	@ (8008f34 <PC_show_Keys+0x410>)
 8008d76:	781a      	ldrb	r2, [r3, #0]
 8008d78:	4b70      	ldr	r3, [pc, #448]	@ (8008f3c <PC_show_Keys+0x418>)
 8008d7a:	0011      	movs	r1, r2
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	f7ff feb6 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 8008d82:	4b91      	ldr	r3, [pc, #580]	@ (8008fc8 <PC_show_Keys+0x4a4>)
 8008d84:	4891      	ldr	r0, [pc, #580]	@ (8008fcc <PC_show_Keys+0x4a8>)
 8008d86:	220c      	movs	r2, #12
 8008d88:	0019      	movs	r1, r3
 8008d8a:	f003 f9b5 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 8008d8e:	4a8e      	ldr	r2, [pc, #568]	@ (8008fc8 <PC_show_Keys+0x4a4>)
 8008d90:	4b6d      	ldr	r3, [pc, #436]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d92:	0011      	movs	r1, r2
 8008d94:	0018      	movs	r0, r3
 8008d96:	f7fc fb27 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Charger status ----------------: %s\r\n", ChargerStatConfigCmd, Buffer);
 8008d9a:	4b6b      	ldr	r3, [pc, #428]	@ (8008f48 <PC_show_Keys+0x424>)
 8008d9c:	498c      	ldr	r1, [pc, #560]	@ (8008fd0 <PC_show_Keys+0x4ac>)
 8008d9e:	4867      	ldr	r0, [pc, #412]	@ (8008f3c <PC_show_Keys+0x418>)
 8008da0:	220b      	movs	r2, #11
 8008da2:	f01d fa19 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008da6:	4b63      	ldr	r3, [pc, #396]	@ (8008f34 <PC_show_Keys+0x410>)
 8008da8:	781a      	ldrb	r2, [r3, #0]
 8008daa:	4b64      	ldr	r3, [pc, #400]	@ (8008f3c <PC_show_Keys+0x418>)
 8008dac:	0011      	movs	r1, r2
 8008dae:	0018      	movs	r0, r3
 8008db0:	f7ff fe9d 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008db4:	4b87      	ldr	r3, [pc, #540]	@ (8008fd4 <PC_show_Keys+0x4b0>)
 8008db6:	4888      	ldr	r0, [pc, #544]	@ (8008fd8 <PC_show_Keys+0x4b4>)
 8008db8:	2220      	movs	r2, #32
 8008dba:	0019      	movs	r1, r3
 8008dbc:	f003 f99c 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Box name ---max 12 char--------: ", CustomNameConfigCmd);
 8008dc0:	4986      	ldr	r1, [pc, #536]	@ (8008fdc <PC_show_Keys+0x4b8>)
 8008dc2:	4b5e      	ldr	r3, [pc, #376]	@ (8008f3c <PC_show_Keys+0x418>)
 8008dc4:	220c      	movs	r2, #12
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f01d fa06 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008dcc:	4b59      	ldr	r3, [pc, #356]	@ (8008f34 <PC_show_Keys+0x410>)
 8008dce:	781a      	ldrb	r2, [r3, #0]
 8008dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8008f3c <PC_show_Keys+0x418>)
 8008dd2:	0011      	movs	r1, r2
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f7ff fe8a 	bl	8008aee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008dda:	4a7e      	ldr	r2, [pc, #504]	@ (8008fd4 <PC_show_Keys+0x4b0>)
 8008ddc:	4980      	ldr	r1, [pc, #512]	@ (8008fe0 <PC_show_Keys+0x4bc>)
 8008dde:	4b57      	ldr	r3, [pc, #348]	@ (8008f3c <PC_show_Keys+0x418>)
 8008de0:	0018      	movs	r0, r3
 8008de2:	f01d f9f9 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008de6:	4b53      	ldr	r3, [pc, #332]	@ (8008f34 <PC_show_Keys+0x410>)
 8008de8:	781a      	ldrb	r2, [r3, #0]
 8008dea:	4b54      	ldr	r3, [pc, #336]	@ (8008f3c <PC_show_Keys+0x418>)
 8008dec:	0011      	movs	r1, r2
 8008dee:	0018      	movs	r0, r3
 8008df0:	f7ff fe7d 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(SSIDConfigAddr, SSIDConfig, SSIDMaxLength);
 8008df4:	4b7b      	ldr	r3, [pc, #492]	@ (8008fe4 <PC_show_Keys+0x4c0>)
 8008df6:	487c      	ldr	r0, [pc, #496]	@ (8008fe8 <PC_show_Keys+0x4c4>)
 8008df8:	2220      	movs	r2, #32
 8008dfa:	0019      	movs	r1, r3
 8008dfc:	f003 f97c 	bl	800c0f8 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, SSIDConfig);
  sprintf(msg, "%02d - SSID name ---------------------: ", SSIDConfigCmd);
 8008e00:	497a      	ldr	r1, [pc, #488]	@ (8008fec <PC_show_Keys+0x4c8>)
 8008e02:	4b4e      	ldr	r3, [pc, #312]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e04:	220d      	movs	r2, #13
 8008e06:	0018      	movs	r0, r3
 8008e08:	f01d f9e6 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e0c:	4b49      	ldr	r3, [pc, #292]	@ (8008f34 <PC_show_Keys+0x410>)
 8008e0e:	781a      	ldrb	r2, [r3, #0]
 8008e10:	4b4a      	ldr	r3, [pc, #296]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e12:	0011      	movs	r1, r2
 8008e14:	0018      	movs	r0, r3
 8008e16:	f7ff fe6a 	bl	8008aee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SSIDConfig);  // probably too long to held in same buffer
 8008e1a:	4a72      	ldr	r2, [pc, #456]	@ (8008fe4 <PC_show_Keys+0x4c0>)
 8008e1c:	4970      	ldr	r1, [pc, #448]	@ (8008fe0 <PC_show_Keys+0x4bc>)
 8008e1e:	4b47      	ldr	r3, [pc, #284]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e20:	0018      	movs	r0, r3
 8008e22:	f01d f9d9 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e26:	4b43      	ldr	r3, [pc, #268]	@ (8008f34 <PC_show_Keys+0x410>)
 8008e28:	781a      	ldrb	r2, [r3, #0]
 8008e2a:	4b44      	ldr	r3, [pc, #272]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e2c:	0011      	movs	r1, r2
 8008e2e:	0018      	movs	r0, r3
 8008e30:	f7ff fe5d 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(pwdConfigAddr, pwdConfig, pwdMaxLength);
 8008e34:	4b6e      	ldr	r3, [pc, #440]	@ (8008ff0 <PC_show_Keys+0x4cc>)
 8008e36:	486f      	ldr	r0, [pc, #444]	@ (8008ff4 <PC_show_Keys+0x4d0>)
 8008e38:	2240      	movs	r2, #64	@ 0x40
 8008e3a:	0019      	movs	r1, r3
 8008e3c:	f003 f95c 	bl	800c0f8 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, pwdConfig);
  sprintf(msg, "%02d - WiFi password -----------------: ", PasswordConfigCmd);
 8008e40:	496d      	ldr	r1, [pc, #436]	@ (8008ff8 <PC_show_Keys+0x4d4>)
 8008e42:	4b3e      	ldr	r3, [pc, #248]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e44:	220e      	movs	r2, #14
 8008e46:	0018      	movs	r0, r3
 8008e48:	f01d f9c6 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e4c:	4b39      	ldr	r3, [pc, #228]	@ (8008f34 <PC_show_Keys+0x410>)
 8008e4e:	781a      	ldrb	r2, [r3, #0]
 8008e50:	4b3a      	ldr	r3, [pc, #232]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e52:	0011      	movs	r1, r2
 8008e54:	0018      	movs	r0, r3
 8008e56:	f7ff fe4a 	bl	8008aee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)pwdConfig);  // probably too long to held in same buffer
 8008e5a:	4a65      	ldr	r2, [pc, #404]	@ (8008ff0 <PC_show_Keys+0x4cc>)
 8008e5c:	4960      	ldr	r1, [pc, #384]	@ (8008fe0 <PC_show_Keys+0x4bc>)
 8008e5e:	4b37      	ldr	r3, [pc, #220]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e60:	0018      	movs	r0, r3
 8008e62:	f01d f9b9 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e66:	4b33      	ldr	r3, [pc, #204]	@ (8008f34 <PC_show_Keys+0x410>)
 8008e68:	781a      	ldrb	r2, [r3, #0]
 8008e6a:	4b34      	ldr	r3, [pc, #208]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e6c:	0011      	movs	r1, r2
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f7ff fe3d 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 8008e74:	4b61      	ldr	r3, [pc, #388]	@ (8008ffc <PC_show_Keys+0x4d8>)
 8008e76:	4862      	ldr	r0, [pc, #392]	@ (8009000 <PC_show_Keys+0x4dc>)
 8008e78:	220c      	movs	r2, #12
 8008e7a:	0019      	movs	r1, r3
 8008e7c:	f003 f93c 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008e80:	4a5e      	ldr	r2, [pc, #376]	@ (8008ffc <PC_show_Keys+0x4d8>)
 8008e82:	4b31      	ldr	r3, [pc, #196]	@ (8008f48 <PC_show_Keys+0x424>)
 8008e84:	0011      	movs	r1, r2
 8008e86:	0018      	movs	r0, r3
 8008e88:	f7fc faae 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Temperature sensor id ---: %s\r\n", AHTTempConfigCmd, Buffer);
 8008e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8008f48 <PC_show_Keys+0x424>)
 8008e8e:	495d      	ldr	r1, [pc, #372]	@ (8009004 <PC_show_Keys+0x4e0>)
 8008e90:	482a      	ldr	r0, [pc, #168]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e92:	220f      	movs	r2, #15
 8008e94:	f01d f9a0 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e98:	4b26      	ldr	r3, [pc, #152]	@ (8008f34 <PC_show_Keys+0x410>)
 8008e9a:	781a      	ldrb	r2, [r3, #0]
 8008e9c:	4b27      	ldr	r3, [pc, #156]	@ (8008f3c <PC_show_Keys+0x418>)
 8008e9e:	0011      	movs	r1, r2
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7ff fe24 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008ea6:	4b58      	ldr	r3, [pc, #352]	@ (8009008 <PC_show_Keys+0x4e4>)
 8008ea8:	4858      	ldr	r0, [pc, #352]	@ (800900c <PC_show_Keys+0x4e8>)
 8008eaa:	220c      	movs	r2, #12
 8008eac:	0019      	movs	r1, r3
 8008eae:	f003 f923 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008eb2:	4a55      	ldr	r2, [pc, #340]	@ (8009008 <PC_show_Keys+0x4e4>)
 8008eb4:	4b24      	ldr	r3, [pc, #144]	@ (8008f48 <PC_show_Keys+0x424>)
 8008eb6:	0011      	movs	r1, r2
 8008eb8:	0018      	movs	r0, r3
 8008eba:	f7fc fa95 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Humidity sensor id ------: %s\r\n", AHTHumidConfigCmd, Buffer);
 8008ebe:	4b22      	ldr	r3, [pc, #136]	@ (8008f48 <PC_show_Keys+0x424>)
 8008ec0:	4953      	ldr	r1, [pc, #332]	@ (8009010 <PC_show_Keys+0x4ec>)
 8008ec2:	481e      	ldr	r0, [pc, #120]	@ (8008f3c <PC_show_Keys+0x418>)
 8008ec4:	2210      	movs	r2, #16
 8008ec6:	f01d f987 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008eca:	4b1a      	ldr	r3, [pc, #104]	@ (8008f34 <PC_show_Keys+0x410>)
 8008ecc:	781a      	ldrb	r2, [r3, #0]
 8008ece:	4b1b      	ldr	r3, [pc, #108]	@ (8008f3c <PC_show_Keys+0x418>)
 8008ed0:	0011      	movs	r1, r2
 8008ed2:	0018      	movs	r0, r3
 8008ed4:	f7ff fe0b 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008ed8:	4b4e      	ldr	r3, [pc, #312]	@ (8009014 <PC_show_Keys+0x4f0>)
 8008eda:	484f      	ldr	r0, [pc, #316]	@ (8009018 <PC_show_Keys+0x4f4>)
 8008edc:	220c      	movs	r2, #12
 8008ede:	0019      	movs	r1, r3
 8008ee0:	f003 f90a 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008ee4:	4a4b      	ldr	r2, [pc, #300]	@ (8009014 <PC_show_Keys+0x4f0>)
 8008ee6:	4b18      	ldr	r3, [pc, #96]	@ (8008f48 <PC_show_Keys+0x424>)
 8008ee8:	0011      	movs	r1, r2
 8008eea:	0018      	movs	r0, r3
 8008eec:	f7fc fa7c 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Temperature sensor id --: %s\r\n", BMPTempConfigCmd, Buffer);
 8008ef0:	4b15      	ldr	r3, [pc, #84]	@ (8008f48 <PC_show_Keys+0x424>)
 8008ef2:	494a      	ldr	r1, [pc, #296]	@ (800901c <PC_show_Keys+0x4f8>)
 8008ef4:	4811      	ldr	r0, [pc, #68]	@ (8008f3c <PC_show_Keys+0x418>)
 8008ef6:	2211      	movs	r2, #17
 8008ef8:	f01d f96e 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008efc:	4b0d      	ldr	r3, [pc, #52]	@ (8008f34 <PC_show_Keys+0x410>)
 8008efe:	781a      	ldrb	r2, [r3, #0]
 8008f00:	4b0e      	ldr	r3, [pc, #56]	@ (8008f3c <PC_show_Keys+0x418>)
 8008f02:	0011      	movs	r1, r2
 8008f04:	0018      	movs	r0, r3
 8008f06:	f7ff fdf2 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 8008f0a:	4b45      	ldr	r3, [pc, #276]	@ (8009020 <PC_show_Keys+0x4fc>)
 8008f0c:	4845      	ldr	r0, [pc, #276]	@ (8009024 <PC_show_Keys+0x500>)
 8008f0e:	220c      	movs	r2, #12
 8008f10:	0019      	movs	r1, r3
 8008f12:	f003 f8f1 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008f16:	4a42      	ldr	r2, [pc, #264]	@ (8009020 <PC_show_Keys+0x4fc>)
 8008f18:	4b0b      	ldr	r3, [pc, #44]	@ (8008f48 <PC_show_Keys+0x424>)
 8008f1a:	0011      	movs	r1, r2
 8008f1c:	0018      	movs	r0, r3
 8008f1e:	f7fc fa63 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 AQI sensor id ----------: %s\r\n", ENSAQIConfigCmd, Buffer);
 8008f22:	4b09      	ldr	r3, [pc, #36]	@ (8008f48 <PC_show_Keys+0x424>)
 8008f24:	4940      	ldr	r1, [pc, #256]	@ (8009028 <PC_show_Keys+0x504>)
 8008f26:	4805      	ldr	r0, [pc, #20]	@ (8008f3c <PC_show_Keys+0x418>)
 8008f28:	2212      	movs	r2, #18
 8008f2a:	f01d f955 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f2e:	4b01      	ldr	r3, [pc, #4]	@ (8008f34 <PC_show_Keys+0x410>)
 8008f30:	781a      	ldrb	r2, [r3, #0]
 8008f32:	e07b      	b.n	800902c <PC_show_Keys+0x508>
 8008f34:	20000b51 	.word	0x20000b51
 8008f38:	0802b280 	.word	0x0802b280
 8008f3c:	20000b54 	.word	0x20000b54
 8008f40:	20000b9c 	.word	0x20000b9c
 8008f44:	08080000 	.word	0x08080000
 8008f48:	20000ba8 	.word	0x20000ba8
 8008f4c:	0802b2a0 	.word	0x0802b2a0
 8008f50:	20000bc4 	.word	0x20000bc4
 8008f54:	0808000c 	.word	0x0808000c
 8008f58:	0802b2d0 	.word	0x0802b2d0
 8008f5c:	20000bd0 	.word	0x20000bd0
 8008f60:	08080018 	.word	0x08080018
 8008f64:	0802b300 	.word	0x0802b300
 8008f68:	20000bdc 	.word	0x20000bdc
 8008f6c:	08080024 	.word	0x08080024
 8008f70:	0802b330 	.word	0x0802b330
 8008f74:	20000be8 	.word	0x20000be8
 8008f78:	08080030 	.word	0x08080030
 8008f7c:	0802b360 	.word	0x0802b360
 8008f80:	20000bf4 	.word	0x20000bf4
 8008f84:	08080048 	.word	0x08080048
 8008f88:	0802b390 	.word	0x0802b390
 8008f8c:	20000c00 	.word	0x20000c00
 8008f90:	0808003c 	.word	0x0808003c
 8008f94:	0802b3c0 	.word	0x0802b3c0
 8008f98:	20000c0c 	.word	0x20000c0c
 8008f9c:	08080054 	.word	0x08080054
 8008fa0:	0802b3f0 	.word	0x0802b3f0
 8008fa4:	20000c18 	.word	0x20000c18
 8008fa8:	08080060 	.word	0x08080060
 8008fac:	0802b420 	.word	0x0802b420
 8008fb0:	20000c24 	.word	0x20000c24
 8008fb4:	0808006c 	.word	0x0808006c
 8008fb8:	0802b450 	.word	0x0802b450
 8008fbc:	20000c30 	.word	0x20000c30
 8008fc0:	08080078 	.word	0x08080078
 8008fc4:	0802b480 	.word	0x0802b480
 8008fc8:	20000c3c 	.word	0x20000c3c
 8008fcc:	08080084 	.word	0x08080084
 8008fd0:	0802b4b0 	.word	0x0802b4b0
 8008fd4:	20000c48 	.word	0x20000c48
 8008fd8:	08080090 	.word	0x08080090
 8008fdc:	0802b4e0 	.word	0x0802b4e0
 8008fe0:	0802b50c 	.word	0x0802b50c
 8008fe4:	20000c68 	.word	0x20000c68
 8008fe8:	08080200 	.word	0x08080200
 8008fec:	0802b514 	.word	0x0802b514
 8008ff0:	20000c88 	.word	0x20000c88
 8008ff4:	08080220 	.word	0x08080220
 8008ff8:	0802b540 	.word	0x0802b540
 8008ffc:	20000cc8 	.word	0x20000cc8
 8009000:	080800c8 	.word	0x080800c8
 8009004:	0802b56c 	.word	0x0802b56c
 8009008:	20000cd4 	.word	0x20000cd4
 800900c:	080800d4 	.word	0x080800d4
 8009010:	0802b59c 	.word	0x0802b59c
 8009014:	20000ce0 	.word	0x20000ce0
 8009018:	080800e0 	.word	0x080800e0
 800901c:	0802b5cc 	.word	0x0802b5cc
 8009020:	20000cec 	.word	0x20000cec
 8009024:	080800ec 	.word	0x080800ec
 8009028:	0802b5fc 	.word	0x0802b5fc
 800902c:	4be2      	ldr	r3, [pc, #904]	@ (80093b8 <PC_show_Keys+0x894>)
 800902e:	0011      	movs	r1, r2
 8009030:	0018      	movs	r0, r3
 8009032:	f7ff fd5c 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 8009036:	4be1      	ldr	r3, [pc, #900]	@ (80093bc <PC_show_Keys+0x898>)
 8009038:	48e1      	ldr	r0, [pc, #900]	@ (80093c0 <PC_show_Keys+0x89c>)
 800903a:	220c      	movs	r2, #12
 800903c:	0019      	movs	r1, r3
 800903e:	f003 f85b 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8009042:	4ade      	ldr	r2, [pc, #888]	@ (80093bc <PC_show_Keys+0x898>)
 8009044:	4bdf      	ldr	r3, [pc, #892]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009046:	0011      	movs	r1, r2
 8009048:	0018      	movs	r0, r3
 800904a:	f7fc f9cd 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 TVOC sensor id ---------: %s\r\n", ENSTVOCConfigCmd, Buffer);
 800904e:	4bdd      	ldr	r3, [pc, #884]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009050:	49dd      	ldr	r1, [pc, #884]	@ (80093c8 <PC_show_Keys+0x8a4>)
 8009052:	48d9      	ldr	r0, [pc, #868]	@ (80093b8 <PC_show_Keys+0x894>)
 8009054:	2213      	movs	r2, #19
 8009056:	f01d f8bf 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800905a:	4bdc      	ldr	r3, [pc, #880]	@ (80093cc <PC_show_Keys+0x8a8>)
 800905c:	781a      	ldrb	r2, [r3, #0]
 800905e:	4bd6      	ldr	r3, [pc, #856]	@ (80093b8 <PC_show_Keys+0x894>)
 8009060:	0011      	movs	r1, r2
 8009062:	0018      	movs	r0, r3
 8009064:	f7ff fd43 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 8009068:	4bd9      	ldr	r3, [pc, #868]	@ (80093d0 <PC_show_Keys+0x8ac>)
 800906a:	48da      	ldr	r0, [pc, #872]	@ (80093d4 <PC_show_Keys+0x8b0>)
 800906c:	220c      	movs	r2, #12
 800906e:	0019      	movs	r1, r3
 8009070:	f003 f842 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 8009074:	4ad6      	ldr	r2, [pc, #856]	@ (80093d0 <PC_show_Keys+0x8ac>)
 8009076:	4bd3      	ldr	r3, [pc, #844]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009078:	0011      	movs	r1, r2
 800907a:	0018      	movs	r0, r3
 800907c:	f7fc f9b4 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 eCO2 sensor id ---------: %s\r\n", ENSeCO2ConfigCmd, Buffer);
 8009080:	4bd0      	ldr	r3, [pc, #832]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009082:	49d5      	ldr	r1, [pc, #852]	@ (80093d8 <PC_show_Keys+0x8b4>)
 8009084:	48cc      	ldr	r0, [pc, #816]	@ (80093b8 <PC_show_Keys+0x894>)
 8009086:	2214      	movs	r2, #20
 8009088:	f01d f8a6 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800908c:	4bcf      	ldr	r3, [pc, #828]	@ (80093cc <PC_show_Keys+0x8a8>)
 800908e:	781a      	ldrb	r2, [r3, #0]
 8009090:	4bc9      	ldr	r3, [pc, #804]	@ (80093b8 <PC_show_Keys+0x894>)
 8009092:	0011      	movs	r1, r2
 8009094:	0018      	movs	r0, r3
 8009096:	f7ff fd2a 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 800909a:	4bd0      	ldr	r3, [pc, #832]	@ (80093dc <PC_show_Keys+0x8b8>)
 800909c:	48d0      	ldr	r0, [pc, #832]	@ (80093e0 <PC_show_Keys+0x8bc>)
 800909e:	220c      	movs	r2, #12
 80090a0:	0019      	movs	r1, r3
 80090a2:	f003 f829 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 80090a6:	4acd      	ldr	r2, [pc, #820]	@ (80093dc <PC_show_Keys+0x8b8>)
 80090a8:	4bc6      	ldr	r3, [pc, #792]	@ (80093c4 <PC_show_Keys+0x8a0>)
 80090aa:	0011      	movs	r1, r2
 80090ac:	0018      	movs	r0, r3
 80090ae:	f7fc f99b 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - PM1p0 sensor id ---------------: %s\r\n", PM1ConfigCmd, Buffer);
 80090b2:	4bc4      	ldr	r3, [pc, #784]	@ (80093c4 <PC_show_Keys+0x8a0>)
 80090b4:	49cb      	ldr	r1, [pc, #812]	@ (80093e4 <PC_show_Keys+0x8c0>)
 80090b6:	48c0      	ldr	r0, [pc, #768]	@ (80093b8 <PC_show_Keys+0x894>)
 80090b8:	2215      	movs	r2, #21
 80090ba:	f01d f88d 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090be:	4bc3      	ldr	r3, [pc, #780]	@ (80093cc <PC_show_Keys+0x8a8>)
 80090c0:	781a      	ldrb	r2, [r3, #0]
 80090c2:	4bbd      	ldr	r3, [pc, #756]	@ (80093b8 <PC_show_Keys+0x894>)
 80090c4:	0011      	movs	r1, r2
 80090c6:	0018      	movs	r0, r3
 80090c8:	f7ff fd11 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 80090cc:	4bc6      	ldr	r3, [pc, #792]	@ (80093e8 <PC_show_Keys+0x8c4>)
 80090ce:	48c7      	ldr	r0, [pc, #796]	@ (80093ec <PC_show_Keys+0x8c8>)
 80090d0:	220c      	movs	r2, #12
 80090d2:	0019      	movs	r1, r3
 80090d4:	f003 f810 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 80090d8:	4ac3      	ldr	r2, [pc, #780]	@ (80093e8 <PC_show_Keys+0x8c4>)
 80090da:	4bba      	ldr	r3, [pc, #744]	@ (80093c4 <PC_show_Keys+0x8a0>)
 80090dc:	0011      	movs	r1, r2
 80090de:	0018      	movs	r0, r3
 80090e0:	f7fc f982 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - PM4p0 sensor id ---------------: %s\r\n", PM4ConfigCmd, Buffer);
 80090e4:	4bb7      	ldr	r3, [pc, #732]	@ (80093c4 <PC_show_Keys+0x8a0>)
 80090e6:	49c2      	ldr	r1, [pc, #776]	@ (80093f0 <PC_show_Keys+0x8cc>)
 80090e8:	48b3      	ldr	r0, [pc, #716]	@ (80093b8 <PC_show_Keys+0x894>)
 80090ea:	2216      	movs	r2, #22
 80090ec:	f01d f874 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090f0:	4bb6      	ldr	r3, [pc, #728]	@ (80093cc <PC_show_Keys+0x8a8>)
 80090f2:	781a      	ldrb	r2, [r3, #0]
 80090f4:	4bb0      	ldr	r3, [pc, #704]	@ (80093b8 <PC_show_Keys+0x894>)
 80090f6:	0011      	movs	r1, r2
 80090f8:	0018      	movs	r0, r3
 80090fa:	f7ff fcf8 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 80090fe:	4bbd      	ldr	r3, [pc, #756]	@ (80093f4 <PC_show_Keys+0x8d0>)
 8009100:	48bd      	ldr	r0, [pc, #756]	@ (80093f8 <PC_show_Keys+0x8d4>)
 8009102:	220c      	movs	r2, #12
 8009104:	0019      	movs	r1, r3
 8009106:	f002 fff7 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 800910a:	4aba      	ldr	r2, [pc, #744]	@ (80093f4 <PC_show_Keys+0x8d0>)
 800910c:	4bad      	ldr	r3, [pc, #692]	@ (80093c4 <PC_show_Keys+0x8a0>)
 800910e:	0011      	movs	r1, r2
 8009110:	0018      	movs	r0, r3
 8009112:	f7fc f969 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Temperature sensor id : %s\r\n", SEN55TempConfigCmd, Buffer);
 8009116:	4bab      	ldr	r3, [pc, #684]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009118:	49b8      	ldr	r1, [pc, #736]	@ (80093fc <PC_show_Keys+0x8d8>)
 800911a:	48a7      	ldr	r0, [pc, #668]	@ (80093b8 <PC_show_Keys+0x894>)
 800911c:	2217      	movs	r2, #23
 800911e:	f01d f85b 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009122:	4baa      	ldr	r3, [pc, #680]	@ (80093cc <PC_show_Keys+0x8a8>)
 8009124:	781a      	ldrb	r2, [r3, #0]
 8009126:	4ba4      	ldr	r3, [pc, #656]	@ (80093b8 <PC_show_Keys+0x894>)
 8009128:	0011      	movs	r1, r2
 800912a:	0018      	movs	r0, r3
 800912c:	f7ff fcdf 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 8009130:	4bb3      	ldr	r3, [pc, #716]	@ (8009400 <PC_show_Keys+0x8dc>)
 8009132:	48b4      	ldr	r0, [pc, #720]	@ (8009404 <PC_show_Keys+0x8e0>)
 8009134:	220c      	movs	r2, #12
 8009136:	0019      	movs	r1, r3
 8009138:	f002 ffde 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 800913c:	4ab0      	ldr	r2, [pc, #704]	@ (8009400 <PC_show_Keys+0x8dc>)
 800913e:	4ba1      	ldr	r3, [pc, #644]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009140:	0011      	movs	r1, r2
 8009142:	0018      	movs	r0, r3
 8009144:	f7fc f950 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Humidity sensor id ---: %s\r\n", SEN55HumidConfigCmd, Buffer);
 8009148:	4b9e      	ldr	r3, [pc, #632]	@ (80093c4 <PC_show_Keys+0x8a0>)
 800914a:	49af      	ldr	r1, [pc, #700]	@ (8009408 <PC_show_Keys+0x8e4>)
 800914c:	489a      	ldr	r0, [pc, #616]	@ (80093b8 <PC_show_Keys+0x894>)
 800914e:	2218      	movs	r2, #24
 8009150:	f01d f842 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009154:	4b9d      	ldr	r3, [pc, #628]	@ (80093cc <PC_show_Keys+0x8a8>)
 8009156:	781a      	ldrb	r2, [r3, #0]
 8009158:	4b97      	ldr	r3, [pc, #604]	@ (80093b8 <PC_show_Keys+0x894>)
 800915a:	0011      	movs	r1, r2
 800915c:	0018      	movs	r0, r3
 800915e:	f7ff fcc6 	bl	8008aee <PC_selectout>

#ifdef USE_MAIL
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 8009162:	4baa      	ldr	r3, [pc, #680]	@ (800940c <PC_show_Keys+0x8e8>)
 8009164:	48aa      	ldr	r0, [pc, #680]	@ (8009410 <PC_show_Keys+0x8ec>)
 8009166:	2230      	movs	r2, #48	@ 0x30
 8009168:	0019      	movs	r1, r3
 800916a:	f002 ffc5 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send from name ---------: ", SendFromNameConfigCmd);
 800916e:	49a9      	ldr	r1, [pc, #676]	@ (8009414 <PC_show_Keys+0x8f0>)
 8009170:	4b91      	ldr	r3, [pc, #580]	@ (80093b8 <PC_show_Keys+0x894>)
 8009172:	2219      	movs	r2, #25
 8009174:	0018      	movs	r0, r3
 8009176:	f01d f82f 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800917a:	4b94      	ldr	r3, [pc, #592]	@ (80093cc <PC_show_Keys+0x8a8>)
 800917c:	781a      	ldrb	r2, [r3, #0]
 800917e:	4b8e      	ldr	r3, [pc, #568]	@ (80093b8 <PC_show_Keys+0x894>)
 8009180:	0011      	movs	r1, r2
 8009182:	0018      	movs	r0, r3
 8009184:	f7ff fcb3 	bl	8008aee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendFromnameConfig);  // probably too long to held in same buffer
 8009188:	4aa0      	ldr	r2, [pc, #640]	@ (800940c <PC_show_Keys+0x8e8>)
 800918a:	49a3      	ldr	r1, [pc, #652]	@ (8009418 <PC_show_Keys+0x8f4>)
 800918c:	4b8a      	ldr	r3, [pc, #552]	@ (80093b8 <PC_show_Keys+0x894>)
 800918e:	0018      	movs	r0, r3
 8009190:	f01d f822 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009194:	4b8d      	ldr	r3, [pc, #564]	@ (80093cc <PC_show_Keys+0x8a8>)
 8009196:	781a      	ldrb	r2, [r3, #0]
 8009198:	4b87      	ldr	r3, [pc, #540]	@ (80093b8 <PC_show_Keys+0x894>)
 800919a:	0011      	movs	r1, r2
 800919c:	0018      	movs	r0, r3
 800919e:	f7ff fca6 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 80091a2:	4b9e      	ldr	r3, [pc, #632]	@ (800941c <PC_show_Keys+0x8f8>)
 80091a4:	489e      	ldr	r0, [pc, #632]	@ (8009420 <PC_show_Keys+0x8fc>)
 80091a6:	2230      	movs	r2, #48	@ 0x30
 80091a8:	0019      	movs	r1, r3
 80091aa:	f002 ffa5 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send to name -----------: ", SendToNameConfigCmd);
 80091ae:	499d      	ldr	r1, [pc, #628]	@ (8009424 <PC_show_Keys+0x900>)
 80091b0:	4b81      	ldr	r3, [pc, #516]	@ (80093b8 <PC_show_Keys+0x894>)
 80091b2:	221a      	movs	r2, #26
 80091b4:	0018      	movs	r0, r3
 80091b6:	f01d f80f 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091ba:	4b84      	ldr	r3, [pc, #528]	@ (80093cc <PC_show_Keys+0x8a8>)
 80091bc:	781a      	ldrb	r2, [r3, #0]
 80091be:	4b7e      	ldr	r3, [pc, #504]	@ (80093b8 <PC_show_Keys+0x894>)
 80091c0:	0011      	movs	r1, r2
 80091c2:	0018      	movs	r0, r3
 80091c4:	f7ff fc93 	bl	8008aee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendTonameConfig);  // probably too long to held in same buffer
 80091c8:	4a94      	ldr	r2, [pc, #592]	@ (800941c <PC_show_Keys+0x8f8>)
 80091ca:	4993      	ldr	r1, [pc, #588]	@ (8009418 <PC_show_Keys+0x8f4>)
 80091cc:	4b7a      	ldr	r3, [pc, #488]	@ (80093b8 <PC_show_Keys+0x894>)
 80091ce:	0018      	movs	r0, r3
 80091d0:	f01d f802 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091d4:	4b7d      	ldr	r3, [pc, #500]	@ (80093cc <PC_show_Keys+0x8a8>)
 80091d6:	781a      	ldrb	r2, [r3, #0]
 80091d8:	4b77      	ldr	r3, [pc, #476]	@ (80093b8 <PC_show_Keys+0x894>)
 80091da:	0011      	movs	r1, r2
 80091dc:	0018      	movs	r0, r3
 80091de:	f7ff fc86 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 80091e2:	4b91      	ldr	r3, [pc, #580]	@ (8009428 <PC_show_Keys+0x904>)
 80091e4:	4891      	ldr	r0, [pc, #580]	@ (800942c <PC_show_Keys+0x908>)
 80091e6:	2230      	movs	r2, #48	@ 0x30
 80091e8:	0019      	movs	r1, r3
 80091ea:	f002 ff85 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored SMTP2go API key --------: ", MailAPIKeyConfigCmd);
 80091ee:	4990      	ldr	r1, [pc, #576]	@ (8009430 <PC_show_Keys+0x90c>)
 80091f0:	4b71      	ldr	r3, [pc, #452]	@ (80093b8 <PC_show_Keys+0x894>)
 80091f2:	221b      	movs	r2, #27
 80091f4:	0018      	movs	r0, r3
 80091f6:	f01c ffef 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091fa:	4b74      	ldr	r3, [pc, #464]	@ (80093cc <PC_show_Keys+0x8a8>)
 80091fc:	781a      	ldrb	r2, [r3, #0]
 80091fe:	4b6e      	ldr	r3, [pc, #440]	@ (80093b8 <PC_show_Keys+0x894>)
 8009200:	0011      	movs	r1, r2
 8009202:	0018      	movs	r0, r3
 8009204:	f7ff fc73 	bl	8008aee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)MailAPIKeyConfig);  // probably too long to held in same buffer
 8009208:	4a87      	ldr	r2, [pc, #540]	@ (8009428 <PC_show_Keys+0x904>)
 800920a:	4983      	ldr	r1, [pc, #524]	@ (8009418 <PC_show_Keys+0x8f4>)
 800920c:	4b6a      	ldr	r3, [pc, #424]	@ (80093b8 <PC_show_Keys+0x894>)
 800920e:	0018      	movs	r0, r3
 8009210:	f01c ffe2 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009214:	4b6d      	ldr	r3, [pc, #436]	@ (80093cc <PC_show_Keys+0x8a8>)
 8009216:	781a      	ldrb	r2, [r3, #0]
 8009218:	4b67      	ldr	r3, [pc, #412]	@ (80093b8 <PC_show_Keys+0x894>)
 800921a:	0011      	movs	r1, r2
 800921c:	0018      	movs	r0, r3
 800921e:	f7ff fc66 	bl	8008aee <PC_selectout>
#endif

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8009222:	4b84      	ldr	r3, [pc, #528]	@ (8009434 <PC_show_Keys+0x910>)
 8009224:	4884      	ldr	r0, [pc, #528]	@ (8009438 <PC_show_Keys+0x914>)
 8009226:	220c      	movs	r2, #12
 8009228:	0019      	movs	r1, r3
 800922a:	f002 ff65 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 800922e:	4a81      	ldr	r2, [pc, #516]	@ (8009434 <PC_show_Keys+0x910>)
 8009230:	4b64      	ldr	r3, [pc, #400]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009232:	0011      	movs	r1, r2
 8009234:	0018      	movs	r0, r3
 8009236:	f7fc f8d7 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Air pressure sensor id -: %s\r\n", hPaConfigCmd, Buffer);
 800923a:	4b62      	ldr	r3, [pc, #392]	@ (80093c4 <PC_show_Keys+0x8a0>)
 800923c:	497f      	ldr	r1, [pc, #508]	@ (800943c <PC_show_Keys+0x918>)
 800923e:	485e      	ldr	r0, [pc, #376]	@ (80093b8 <PC_show_Keys+0x894>)
 8009240:	221c      	movs	r2, #28
 8009242:	f01c ffc9 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009246:	4b61      	ldr	r3, [pc, #388]	@ (80093cc <PC_show_Keys+0x8a8>)
 8009248:	781a      	ldrb	r2, [r3, #0]
 800924a:	4b5b      	ldr	r3, [pc, #364]	@ (80093b8 <PC_show_Keys+0x894>)
 800924c:	0011      	movs	r1, r2
 800924e:	0018      	movs	r0, r3
 8009250:	f7ff fc4d 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(UptimeConfigAddr, UptimeConfig, IdSize);
 8009254:	4b7a      	ldr	r3, [pc, #488]	@ (8009440 <PC_show_Keys+0x91c>)
 8009256:	487b      	ldr	r0, [pc, #492]	@ (8009444 <PC_show_Keys+0x920>)
 8009258:	220c      	movs	r2, #12
 800925a:	0019      	movs	r1, r3
 800925c:	f002 ff4c 	bl	800c0f8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, UptimeConfig);
 8009260:	4a77      	ldr	r2, [pc, #476]	@ (8009440 <PC_show_Keys+0x91c>)
 8009262:	4b58      	ldr	r3, [pc, #352]	@ (80093c4 <PC_show_Keys+0x8a0>)
 8009264:	0011      	movs	r1, r2
 8009266:	0018      	movs	r0, r3
 8009268:	f7fc f8be 	bl	80053e8 <uint8ArrayToString>
  sprintf(msg, "%02d - Uptime sensor id --------------: %s\r\n", UptimeConfigCmd, Buffer);
 800926c:	4b55      	ldr	r3, [pc, #340]	@ (80093c4 <PC_show_Keys+0x8a0>)
 800926e:	4976      	ldr	r1, [pc, #472]	@ (8009448 <PC_show_Keys+0x924>)
 8009270:	4851      	ldr	r0, [pc, #324]	@ (80093b8 <PC_show_Keys+0x894>)
 8009272:	221d      	movs	r2, #29
 8009274:	f01c ffb0 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009278:	4b54      	ldr	r3, [pc, #336]	@ (80093cc <PC_show_Keys+0x8a8>)
 800927a:	781a      	ldrb	r2, [r3, #0]
 800927c:	4b4e      	ldr	r3, [pc, #312]	@ (80093b8 <PC_show_Keys+0x894>)
 800927e:	0011      	movs	r1, r2
 8009280:	0018      	movs	r0, r3
 8009282:	f7ff fc34 	bl	8008aee <PC_selectout>

  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUploadConfig, URLToUploadMaxLength);
 8009286:	4b71      	ldr	r3, [pc, #452]	@ (800944c <PC_show_Keys+0x928>)
 8009288:	4871      	ldr	r0, [pc, #452]	@ (8009450 <PC_show_Keys+0x92c>)
 800928a:	2230      	movs	r2, #48	@ 0x30
 800928c:	0019      	movs	r1, r3
 800928e:	f002 ff33 	bl	800c0f8 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - URL to upload -----------------: ", URLToUploadConfigCmd);
 8009292:	4970      	ldr	r1, [pc, #448]	@ (8009454 <PC_show_Keys+0x930>)
 8009294:	4b48      	ldr	r3, [pc, #288]	@ (80093b8 <PC_show_Keys+0x894>)
 8009296:	221e      	movs	r2, #30
 8009298:	0018      	movs	r0, r3
 800929a:	f01c ff9d 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800929e:	4b4b      	ldr	r3, [pc, #300]	@ (80093cc <PC_show_Keys+0x8a8>)
 80092a0:	781a      	ldrb	r2, [r3, #0]
 80092a2:	4b45      	ldr	r3, [pc, #276]	@ (80093b8 <PC_show_Keys+0x894>)
 80092a4:	0011      	movs	r1, r2
 80092a6:	0018      	movs	r0, r3
 80092a8:	f7ff fc21 	bl	8008aee <PC_selectout>
  if (strlen((char*)URLToUploadConfig) == 0) {
 80092ac:	4b67      	ldr	r3, [pc, #412]	@ (800944c <PC_show_Keys+0x928>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d11b      	bne.n	80092ec <PC_show_Keys+0x7c8>
    sprintf(msg, "Undefined, defaulted to ");
 80092b4:	4a68      	ldr	r2, [pc, #416]	@ (8009458 <PC_show_Keys+0x934>)
 80092b6:	4b40      	ldr	r3, [pc, #256]	@ (80093b8 <PC_show_Keys+0x894>)
 80092b8:	0011      	movs	r1, r2
 80092ba:	0018      	movs	r0, r3
 80092bc:	f01c ff8c 	bl	80261d8 <siprintf>
    PC_selectout(&msg[0], usb_out);
 80092c0:	4b42      	ldr	r3, [pc, #264]	@ (80093cc <PC_show_Keys+0x8a8>)
 80092c2:	781a      	ldrb	r2, [r3, #0]
 80092c4:	4b3c      	ldr	r3, [pc, #240]	@ (80093b8 <PC_show_Keys+0x894>)
 80092c6:	0011      	movs	r1, r2
 80092c8:	0018      	movs	r0, r3
 80092ca:	f7ff fc10 	bl	8008aee <PC_selectout>
    PC_selectout((char*)API, usb_out);
 80092ce:	4b3f      	ldr	r3, [pc, #252]	@ (80093cc <PC_show_Keys+0x8a8>)
 80092d0:	781a      	ldrb	r2, [r3, #0]
 80092d2:	4b62      	ldr	r3, [pc, #392]	@ (800945c <PC_show_Keys+0x938>)
 80092d4:	0011      	movs	r1, r2
 80092d6:	0018      	movs	r0, r3
 80092d8:	f7ff fc09 	bl	8008aee <PC_selectout>
    PC_selectout("\r\n\0", usb_out);
 80092dc:	4b3b      	ldr	r3, [pc, #236]	@ (80093cc <PC_show_Keys+0x8a8>)
 80092de:	781a      	ldrb	r2, [r3, #0]
 80092e0:	4b5f      	ldr	r3, [pc, #380]	@ (8009460 <PC_show_Keys+0x93c>)
 80092e2:	0011      	movs	r1, r2
 80092e4:	0018      	movs	r0, r3
 80092e6:	f7ff fc02 	bl	8008aee <PC_selectout>
 80092ea:	e00c      	b.n	8009306 <PC_show_Keys+0x7e2>
  }
  else {
    sprintf(msg, "%s\r\n", (char*)URLToUploadConfig);  // probably too long to held in same buffer
 80092ec:	4a57      	ldr	r2, [pc, #348]	@ (800944c <PC_show_Keys+0x928>)
 80092ee:	494a      	ldr	r1, [pc, #296]	@ (8009418 <PC_show_Keys+0x8f4>)
 80092f0:	4b31      	ldr	r3, [pc, #196]	@ (80093b8 <PC_show_Keys+0x894>)
 80092f2:	0018      	movs	r0, r3
 80092f4:	f01c ff70 	bl	80261d8 <siprintf>
    PC_selectout(&msg[0], usb_out);
 80092f8:	4b34      	ldr	r3, [pc, #208]	@ (80093cc <PC_show_Keys+0x8a8>)
 80092fa:	781a      	ldrb	r2, [r3, #0]
 80092fc:	4b2e      	ldr	r3, [pc, #184]	@ (80093b8 <PC_show_Keys+0x894>)
 80092fe:	0011      	movs	r1, r2
 8009300:	0018      	movs	r0, r3
 8009302:	f7ff fbf4 	bl	8008aee <PC_selectout>
  }

  sprintf(msg, "%02d - Clear all definitions in EEPROM\r\n", clearDefsCmd);
 8009306:	4957      	ldr	r1, [pc, #348]	@ (8009464 <PC_show_Keys+0x940>)
 8009308:	4b2b      	ldr	r3, [pc, #172]	@ (80093b8 <PC_show_Keys+0x894>)
 800930a:	221f      	movs	r2, #31
 800930c:	0018      	movs	r0, r3
 800930e:	f01c ff63 	bl	80261d8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009312:	4b2e      	ldr	r3, [pc, #184]	@ (80093cc <PC_show_Keys+0x8a8>)
 8009314:	781a      	ldrb	r2, [r3, #0]
 8009316:	4b28      	ldr	r3, [pc, #160]	@ (80093b8 <PC_show_Keys+0x894>)
 8009318:	0011      	movs	r1, r2
 800931a:	0018      	movs	r0, r3
 800931c:	f7ff fbe7 	bl	8008aee <PC_selectout>

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 8009320:	4b51      	ldr	r3, [pc, #324]	@ (8009468 <PC_show_Keys+0x944>)
 8009322:	0018      	movs	r0, r3
 8009324:	f7ff fbbe 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 8009328:	200a      	movs	r0, #10
 800932a:	f00b faad 	bl	8014888 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 800932e:	4b4f      	ldr	r3, [pc, #316]	@ (800946c <PC_show_Keys+0x948>)
 8009330:	0018      	movs	r0, r3
 8009332:	f7ff fbb7 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 8009336:	200a      	movs	r0, #10
 8009338:	f00b faa6 	bl	8014888 <HAL_Delay>
  printf_USB(" command example for air pressure => #28,6a\r\n");
 800933c:	4b4c      	ldr	r3, [pc, #304]	@ (8009470 <PC_show_Keys+0x94c>)
 800933e:	0018      	movs	r0, r3
 8009340:	f7ff fbb0 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 8009344:	200a      	movs	r0, #10
 8009346:	f00b fa9f 	bl	8014888 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 800934a:	4b4a      	ldr	r3, [pc, #296]	@ (8009474 <PC_show_Keys+0x950>)
 800934c:	0018      	movs	r0, r3
 800934e:	f7ff fba9 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 8009352:	200a      	movs	r0, #10
 8009354:	f00b fa98 	bl	8014888 <HAL_Delay>
  printf_USB(" from opensensemap.org in your account to this input.\r\n");
 8009358:	4b47      	ldr	r3, [pc, #284]	@ (8009478 <PC_show_Keys+0x954>)
 800935a:	0018      	movs	r0, r3
 800935c:	f7ff fba2 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 8009360:	200a      	movs	r0, #10
 8009362:	f00b fa91 	bl	8014888 <HAL_Delay>
  printf_USB("Command example for a full key for PM10 sensor =>");
 8009366:	4b45      	ldr	r3, [pc, #276]	@ (800947c <PC_show_Keys+0x958>)
 8009368:	0018      	movs	r0, r3
 800936a:	f7ff fb9b 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 800936e:	200a      	movs	r0, #10
 8009370:	f00b fa8a 	bl	8014888 <HAL_Delay>
  printf_USB(" $08,67af09374cdef30007b35055\r\n");
 8009374:	4b42      	ldr	r3, [pc, #264]	@ (8009480 <PC_show_Keys+0x95c>)
 8009376:	0018      	movs	r0, r3
 8009378:	f7ff fb94 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 800937c:	200a      	movs	r0, #10
 800937e:	f00b fa83 	bl	8014888 <HAL_Delay>
  printf_USB("For changing string entries use prefix S, example: ");
 8009382:	4b40      	ldr	r3, [pc, #256]	@ (8009484 <PC_show_Keys+0x960>)
 8009384:	0018      	movs	r0, r3
 8009386:	f7ff fb8d 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 800938a:	200a      	movs	r0, #10
 800938c:	f00b fa7c 	bl	8014888 <HAL_Delay>
  printf_USB("S12,Testsysteem (max 12 chars)\r\n");
 8009390:	4b3d      	ldr	r3, [pc, #244]	@ (8009488 <PC_show_Keys+0x964>)
 8009392:	0018      	movs	r0, r3
 8009394:	f7ff fb86 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 8009398:	200a      	movs	r0, #10
 800939a:	f00b fa75 	bl	8014888 <HAL_Delay>
  printf_USB("To clear a string: $30,000000000000000000000000\r\n");
 800939e:	4b3b      	ldr	r3, [pc, #236]	@ (800948c <PC_show_Keys+0x968>)
 80093a0:	0018      	movs	r0, r3
 80093a2:	f7ff fb7f 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 80093a6:	200a      	movs	r0, #10
 80093a8:	f00b fa6e 	bl	8014888 <HAL_Delay>
  printf_USB("L - toggle logging on/off, current: %s\r\n", usblog?"on":"off");
 80093ac:	4b38      	ldr	r3, [pc, #224]	@ (8009490 <PC_show_Keys+0x96c>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d071      	beq.n	8009498 <PC_show_Keys+0x974>
 80093b4:	4b37      	ldr	r3, [pc, #220]	@ (8009494 <PC_show_Keys+0x970>)
 80093b6:	e070      	b.n	800949a <PC_show_Keys+0x976>
 80093b8:	20000b54 	.word	0x20000b54
 80093bc:	20000cf8 	.word	0x20000cf8
 80093c0:	080800f8 	.word	0x080800f8
 80093c4:	20000ba8 	.word	0x20000ba8
 80093c8:	0802b62c 	.word	0x0802b62c
 80093cc:	20000b51 	.word	0x20000b51
 80093d0:	20000d04 	.word	0x20000d04
 80093d4:	08080104 	.word	0x08080104
 80093d8:	0802b65c 	.word	0x0802b65c
 80093dc:	20000d10 	.word	0x20000d10
 80093e0:	080800b0 	.word	0x080800b0
 80093e4:	0802b68c 	.word	0x0802b68c
 80093e8:	20000d1c 	.word	0x20000d1c
 80093ec:	080800bc 	.word	0x080800bc
 80093f0:	0802b6bc 	.word	0x0802b6bc
 80093f4:	20000d28 	.word	0x20000d28
 80093f8:	08080170 	.word	0x08080170
 80093fc:	0802b6ec 	.word	0x0802b6ec
 8009400:	20000d34 	.word	0x20000d34
 8009404:	0808017c 	.word	0x0808017c
 8009408:	0802b71c 	.word	0x0802b71c
 800940c:	20000d40 	.word	0x20000d40
 8009410:	08080260 	.word	0x08080260
 8009414:	0802b74c 	.word	0x0802b74c
 8009418:	0802b50c 	.word	0x0802b50c
 800941c:	20000d70 	.word	0x20000d70
 8009420:	08080290 	.word	0x08080290
 8009424:	0802b778 	.word	0x0802b778
 8009428:	20000da0 	.word	0x20000da0
 800942c:	080802c0 	.word	0x080802c0
 8009430:	0802b7a4 	.word	0x0802b7a4
 8009434:	20000dd0 	.word	0x20000dd0
 8009438:	08080188 	.word	0x08080188
 800943c:	0802b7d0 	.word	0x0802b7d0
 8009440:	20000ddc 	.word	0x20000ddc
 8009444:	080801a0 	.word	0x080801a0
 8009448:	0802b800 	.word	0x0802b800
 800944c:	20000de8 	.word	0x20000de8
 8009450:	08080110 	.word	0x08080110
 8009454:	0802b830 	.word	0x0802b830
 8009458:	0802b85c 	.word	0x0802b85c
 800945c:	0802b878 	.word	0x0802b878
 8009460:	0802b89c 	.word	0x0802b89c
 8009464:	0802b8a0 	.word	0x0802b8a0
 8009468:	0802b8cc 	.word	0x0802b8cc
 800946c:	0802b8e4 	.word	0x0802b8e4
 8009470:	0802b910 	.word	0x0802b910
 8009474:	0802b940 	.word	0x0802b940
 8009478:	0802b97c 	.word	0x0802b97c
 800947c:	0802b9b4 	.word	0x0802b9b4
 8009480:	0802b9e8 	.word	0x0802b9e8
 8009484:	0802ba08 	.word	0x0802ba08
 8009488:	0802ba3c 	.word	0x0802ba3c
 800948c:	0802ba60 	.word	0x0802ba60
 8009490:	200010f7 	.word	0x200010f7
 8009494:	0802ba94 	.word	0x0802ba94
 8009498:	4b0e      	ldr	r3, [pc, #56]	@ (80094d4 <PC_show_Keys+0x9b0>)
 800949a:	4a0f      	ldr	r2, [pc, #60]	@ (80094d8 <PC_show_Keys+0x9b4>)
 800949c:	0019      	movs	r1, r3
 800949e:	0010      	movs	r0, r2
 80094a0:	f7ff fb00 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 80094a4:	200a      	movs	r0, #10
 80094a6:	f00b f9ef 	bl	8014888 <HAL_Delay>
  printf_USB("B - show build information\r\n");
 80094aa:	4b0c      	ldr	r3, [pc, #48]	@ (80094dc <PC_show_Keys+0x9b8>)
 80094ac:	0018      	movs	r0, r3
 80094ae:	f7ff faf9 	bl	8008aa4 <printf_USB>
  HAL_Delay(10);
 80094b2:	200a      	movs	r0, #10
 80094b4:	f00b f9e8 	bl	8014888 <HAL_Delay>
  if (!usb_out) {
 80094b8:	4b09      	ldr	r3, [pc, #36]	@ (80094e0 <PC_show_Keys+0x9bc>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	2201      	movs	r2, #1
 80094be:	4053      	eors	r3, r2
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <PC_show_Keys+0x9aa>
    printf("A sensor key can only be changed by USB input or the by configuration programm.\r\n");
 80094c6:	4b07      	ldr	r3, [pc, #28]	@ (80094e4 <PC_show_Keys+0x9c0>)
 80094c8:	0018      	movs	r0, r3
 80094ca:	f01c fe7b 	bl	80261c4 <puts>
  }
}
 80094ce:	46c0      	nop			@ (mov r8, r8)
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	0802ba98 	.word	0x0802ba98
 80094d8:	0802ba9c 	.word	0x0802ba9c
 80094dc:	0802bac8 	.word	0x0802bac8
 80094e0:	20000b51 	.word	0x20000b51
 80094e4:	0802bae8 	.word	0x0802bae8

080094e8 <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	1c5a      	adds	r2, r3, #1
 80094f6:	4b20      	ldr	r3, [pc, #128]	@ (8009578 <ascii_to_uint8+0x90>)
 80094f8:	18d3      	adds	r3, r2, r3
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	001a      	movs	r2, r3
 80094fe:	2304      	movs	r3, #4
 8009500:	4013      	ands	r3, r2
 8009502:	d00a      	beq.n	800951a <ascii_to_uint8+0x32>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3301      	adds	r3, #1
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	1c5a      	adds	r2, r3, #1
 800950c:	4b1a      	ldr	r3, [pc, #104]	@ (8009578 <ascii_to_uint8+0x90>)
 800950e:	18d3      	adds	r3, r2, r3
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	001a      	movs	r2, r3
 8009514:	2304      	movs	r3, #4
 8009516:	4013      	ands	r3, r2
 8009518:	d105      	bne.n	8009526 <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 800951a:	4b18      	ldr	r3, [pc, #96]	@ (800957c <ascii_to_uint8+0x94>)
 800951c:	0018      	movs	r0, r3
 800951e:	f7ff fac1 	bl	8008aa4 <printf_USB>
    return 100;
 8009522:	2364      	movs	r3, #100	@ 0x64
 8009524:	e024      	b.n	8009570 <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	1c1a      	adds	r2, r3, #0
 800952c:	0092      	lsls	r2, r2, #2
 800952e:	18d3      	adds	r3, r2, r3
 8009530:	18db      	adds	r3, r3, r3
 8009532:	b2da      	uxtb	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	3301      	adds	r3, #1
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	18d3      	adds	r3, r2, r3
 800953c:	b2da      	uxtb	r2, r3
 800953e:	210f      	movs	r1, #15
 8009540:	187b      	adds	r3, r7, r1
 8009542:	3a10      	subs	r2, #16
 8009544:	701a      	strb	r2, [r3, #0]

  if (value >= maxCmd) {
 8009546:	187b      	adds	r3, r7, r1
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b1f      	cmp	r3, #31
 800954c:	d905      	bls.n	800955a <ascii_to_uint8+0x72>
    printf_USB("Error: value out of range\r\n");
 800954e:	4b0c      	ldr	r3, [pc, #48]	@ (8009580 <ascii_to_uint8+0x98>)
 8009550:	0018      	movs	r0, r3
 8009552:	f7ff faa7 	bl	8008aa4 <printf_USB>
    return 100;
 8009556:	2364      	movs	r3, #100	@ 0x64
 8009558:	e00a      	b.n	8009570 <ascii_to_uint8+0x88>
  }
  if (value == clearDefsCmd) {
 800955a:	220f      	movs	r2, #15
 800955c:	18bb      	adds	r3, r7, r2
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	2b1f      	cmp	r3, #31
 8009562:	d102      	bne.n	800956a <ascii_to_uint8+0x82>
    value = ClearConfigCmd;
 8009564:	18bb      	adds	r3, r7, r2
 8009566:	22fd      	movs	r2, #253	@ 0xfd
 8009568:	701a      	strb	r2, [r3, #0]
  }
  return (uint8_t)value;
 800956a:	230f      	movs	r3, #15
 800956c:	18fb      	adds	r3, r7, r3
 800956e:	781b      	ldrb	r3, [r3, #0]
}
 8009570:	0018      	movs	r0, r3
 8009572:	46bd      	mov	sp, r7
 8009574:	b004      	add	sp, #16
 8009576:	bd80      	pop	{r7, pc}
 8009578:	0802eb88 	.word	0x0802eb88
 800957c:	0802bb3c 	.word	0x0802bb3c
 8009580:	0802bb64 	.word	0x0802bb64

08009584 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8009584:	b590      	push	{r4, r7, lr}
 8009586:	b0d9      	sub	sp, #356	@ 0x164
 8009588:	af3e      	add	r7, sp, #248	@ 0xf8
 800958a:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 800958c:	f019 fd66 	bl	802305c <GetUsbRxDataSize>
 8009590:	0003      	movs	r3, r0
 8009592:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint8_t r = 0;
 8009594:	2367      	movs	r3, #103	@ 0x67
 8009596:	18fb      	adds	r3, r7, r3
 8009598:	2200      	movs	r2, #0
 800959a:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
 800959c:	2366      	movs	r3, #102	@ 0x66
 800959e:	18fb      	adds	r3, r7, r3
 80095a0:	2200      	movs	r2, #0
 80095a2:	701a      	strb	r2, [r3, #0]
  char Buffer[pwdMaxLength];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2124      	movs	r1, #36	@ 0x24
 80095a8:	0018      	movs	r0, r3
 80095aa:	f01c ff65 	bl	8026478 <strchr>
 80095ae:	0003      	movs	r3, r0
 80095b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != 28)){
 80095b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d109      	bne.n	80095cc <Process_USB_input+0x48>
 80095b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d006      	beq.n	80095cc <Process_USB_input+0x48>
 80095be:	4bc6      	ldr	r3, [pc, #792]	@ (80098d8 <Process_USB_input+0x354>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b1c      	cmp	r3, #28
 80095c4:	d002      	beq.n	80095cc <Process_USB_input+0x48>
      len = 28;
 80095c6:	4bc4      	ldr	r3, [pc, #784]	@ (80098d8 <Process_USB_input+0x354>)
 80095c8:	221c      	movs	r2, #28
 80095ca:	601a      	str	r2, [r3, #0]
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_S);  // zoek op S
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2153      	movs	r1, #83	@ 0x53
 80095d0:	0018      	movs	r0, r3
 80095d2:	f01c ff51 	bl	8026478 <strchr>
 80095d6:	0003      	movs	r3, r0
 80095d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != pwdMaxLength)){
 80095da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d109      	bne.n	80095f4 <Process_USB_input+0x70>
 80095e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d006      	beq.n	80095f4 <Process_USB_input+0x70>
 80095e6:	4bbc      	ldr	r3, [pc, #752]	@ (80098d8 <Process_USB_input+0x354>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b40      	cmp	r3, #64	@ 0x40
 80095ec:	d002      	beq.n	80095f4 <Process_USB_input+0x70>
      len = pwdMaxLength;
 80095ee:	4bba      	ldr	r3, [pc, #744]	@ (80098d8 <Process_USB_input+0x354>)
 80095f0:	2240      	movs	r2, #64	@ 0x40
 80095f2:	601a      	str	r2, [r3, #0]
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_L);  // Search for 'L'to toggle USB logging
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	214c      	movs	r1, #76	@ 0x4c
 80095f8:	0018      	movs	r0, r3
 80095fa:	f01c ff3d 	bl	8026478 <strchr>
 80095fe:	0003      	movs	r3, r0
 8009600:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 8009602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009604:	2b01      	cmp	r3, #1
 8009606:	d131      	bne.n	800966c <Process_USB_input+0xe8>
 8009608:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800960a:	2b00      	cmp	r3, #0
 800960c:	d02e      	beq.n	800966c <Process_USB_input+0xe8>
    usblog = !usblog; // log info to usb too
 800960e:	4bb3      	ldr	r3, [pc, #716]	@ (80098dc <Process_USB_input+0x358>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	1e5a      	subs	r2, r3, #1
 8009614:	4193      	sbcs	r3, r2
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2201      	movs	r2, #1
 800961a:	4053      	eors	r3, r2
 800961c:	b2db      	uxtb	r3, r3
 800961e:	1c1a      	adds	r2, r3, #0
 8009620:	2301      	movs	r3, #1
 8009622:	4013      	ands	r3, r2
 8009624:	b2da      	uxtb	r2, r3
 8009626:	4bad      	ldr	r3, [pc, #692]	@ (80098dc <Process_USB_input+0x358>)
 8009628:	701a      	strb	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800962a:	f00c f93b 	bl	80158a4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, USBlogstatusConfigAddr, usblog);
 800962e:	4bab      	ldr	r3, [pc, #684]	@ (80098dc <Process_USB_input+0x358>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	001a      	movs	r2, r3
 8009634:	4baa      	ldr	r3, [pc, #680]	@ (80098e0 <Process_USB_input+0x35c>)
 8009636:	0019      	movs	r1, r3
 8009638:	2000      	movs	r0, #0
 800963a:	f00c f99b 	bl	8015974 <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Lock();
 800963e:	f00c f95f 	bl	8015900 <HAL_FLASHEx_DATAEEPROM_Lock>
    printf_USB("\r\nSwitching USB logging to %s\r\n", usblog?"on":"off");
 8009642:	4ba6      	ldr	r3, [pc, #664]	@ (80098dc <Process_USB_input+0x358>)
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <Process_USB_input+0xca>
 800964a:	4ba6      	ldr	r3, [pc, #664]	@ (80098e4 <Process_USB_input+0x360>)
 800964c:	e000      	b.n	8009650 <Process_USB_input+0xcc>
 800964e:	4ba6      	ldr	r3, [pc, #664]	@ (80098e8 <Process_USB_input+0x364>)
 8009650:	4aa6      	ldr	r2, [pc, #664]	@ (80098ec <Process_USB_input+0x368>)
 8009652:	0019      	movs	r1, r3
 8009654:	0010      	movs	r0, r2
 8009656:	f7ff fa25 	bl	8008aa4 <printf_USB>
    length = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 8009664:	f019 fce2 	bl	802302c <ResetUsbRxDataSize>
    return true;
 8009668:	2301      	movs	r3, #1
 800966a:	e20b      	b.n	8009a84 <Process_USB_input+0x500>
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_B);  // Search for 'B'to show the build
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2142      	movs	r1, #66	@ 0x42
 8009670:	0018      	movs	r0, r3
 8009672:	f01c ff01 	bl	8026478 <strchr>
 8009676:	0003      	movs	r3, r0
 8009678:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 800967a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800967c:	2b01      	cmp	r3, #1
 800967e:	d10f      	bne.n	80096a0 <Process_USB_input+0x11c>
 8009680:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00c      	beq.n	80096a0 <Process_USB_input+0x11c>
    BinaryReleaseInfo();
 8009686:	f00a fc11 	bl	8013eac <BinaryReleaseInfo>
    showUpTime();
 800968a:	f000 fb8d 	bl	8009da8 <showUpTime>
    length = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 8009698:	f019 fcc8 	bl	802302c <ResetUsbRxDataSize>
    return true;
 800969c:	2301      	movs	r3, #1
 800969e:	e1f1      	b.n	8009a84 <Process_USB_input+0x500>
  }
  if ((length >= len) || (data[length-1] == 13)) {
 80096a0:	4b8d      	ldr	r3, [pc, #564]	@ (80098d8 <Process_USB_input+0x354>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d207      	bcs.n	80096ba <Process_USB_input+0x136>
 80096aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096ac:	3b01      	subs	r3, #1
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	18d3      	adds	r3, r2, r3
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	2b0d      	cmp	r3, #13
 80096b6:	d000      	beq.n	80096ba <Process_USB_input+0x136>
 80096b8:	e1d1      	b.n	8009a5e <Process_USB_input+0x4da>
    // 'S' is for entering a ASCII string
    if (data[length-1] == 13) {
 80096ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096bc:	3b01      	subs	r3, #1
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	18d3      	adds	r3, r2, r3
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b0d      	cmp	r3, #13
 80096c6:	d109      	bne.n	80096dc <Process_USB_input+0x158>
      printf_USB("Inputstring detected, string terminated\r\n");
 80096c8:	4b89      	ldr	r3, [pc, #548]	@ (80098f0 <Process_USB_input+0x36c>)
 80096ca:	0018      	movs	r0, r3
 80096cc:	f7ff f9ea 	bl	8008aa4 <printf_USB>
      data[length-1] = 0;
 80096d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096d2:	3b01      	subs	r3, #1
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	18d3      	adds	r3, r2, r3
 80096d8:	2200      	movs	r2, #0
 80096da:	701a      	strb	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$') || (data[0] == 'S') || (data[0] == 'E')) {
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b23      	cmp	r3, #35	@ 0x23
 80096e2:	d00c      	beq.n	80096fe <Process_USB_input+0x17a>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2b24      	cmp	r3, #36	@ 0x24
 80096ea:	d008      	beq.n	80096fe <Process_USB_input+0x17a>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b53      	cmp	r3, #83	@ 0x53
 80096f2:	d004      	beq.n	80096fe <Process_USB_input+0x17a>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b45      	cmp	r3, #69	@ 0x45
 80096fa:	d000      	beq.n	80096fe <Process_USB_input+0x17a>
 80096fc:	e191      	b.n	8009a22 <Process_USB_input+0x49e>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	3301      	adds	r3, #1
 8009702:	0018      	movs	r0, r3
 8009704:	f7ff fef0 	bl	80094e8 <ascii_to_uint8>
 8009708:	0003      	movs	r3, r0
 800970a:	001a      	movs	r2, r3
 800970c:	4b79      	ldr	r3, [pc, #484]	@ (80098f4 <Process_USB_input+0x370>)
 800970e:	701a      	strb	r2, [r3, #0]
      printf_USB("Command nr determined: %d", received.Command);
 8009710:	4b78      	ldr	r3, [pc, #480]	@ (80098f4 <Process_USB_input+0x370>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	001a      	movs	r2, r3
 8009716:	4b78      	ldr	r3, [pc, #480]	@ (80098f8 <Process_USB_input+0x374>)
 8009718:	0011      	movs	r1, r2
 800971a:	0018      	movs	r0, r3
 800971c:	f7ff f9c2 	bl	8008aa4 <printf_USB>
      if (received.Command == 100) {
 8009720:	4b74      	ldr	r3, [pc, #464]	@ (80098f4 <Process_USB_input+0x370>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b64      	cmp	r3, #100	@ 0x64
 8009726:	d11f      	bne.n	8009768 <Process_USB_input+0x1e4>
        printf_USB("\r\nCommandvalue out of range.\r\n");
 8009728:	4b74      	ldr	r3, [pc, #464]	@ (80098fc <Process_USB_input+0x378>)
 800972a:	0018      	movs	r0, r3
 800972c:	f7ff f9ba 	bl	8008aa4 <printf_USB>
        ResetUsbRxDataSize();
 8009730:	f019 fc7c 	bl	802302c <ResetUsbRxDataSize>
        PC_show_Keys();
 8009734:	f7ff f9f6 	bl	8008b24 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8009738:	2365      	movs	r3, #101	@ 0x65
 800973a:	18fb      	adds	r3, r7, r3
 800973c:	2200      	movs	r2, #0
 800973e:	701a      	strb	r2, [r3, #0]
 8009740:	e00b      	b.n	800975a <Process_USB_input+0x1d6>
          data[i] = '\0';
 8009742:	2165      	movs	r1, #101	@ 0x65
 8009744:	187b      	adds	r3, r7, r1
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	18d3      	adds	r3, r2, r3
 800974c:	2200      	movs	r2, #0
 800974e:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8009750:	187b      	adds	r3, r7, r1
 8009752:	781a      	ldrb	r2, [r3, #0]
 8009754:	187b      	adds	r3, r7, r1
 8009756:	3201      	adds	r2, #1
 8009758:	701a      	strb	r2, [r3, #0]
 800975a:	2365      	movs	r3, #101	@ 0x65
 800975c:	18fb      	adds	r3, r7, r3
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	2b1f      	cmp	r3, #31
 8009762:	d9ee      	bls.n	8009742 <Process_USB_input+0x1be>
        }
        return false; // value out of range
 8009764:	2300      	movs	r3, #0
 8009766:	e18d      	b.n	8009a84 <Process_USB_input+0x500>
      }
      if (data[3] == ',') {
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3303      	adds	r3, #3
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b2c      	cmp	r3, #44	@ 0x2c
 8009770:	d000      	beq.n	8009774 <Process_USB_input+0x1f0>
 8009772:	e152      	b.n	8009a1a <Process_USB_input+0x496>
        if ((data[0] == 'S') || (data[0] == 'E')) {
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	2b53      	cmp	r3, #83	@ 0x53
 800977a:	d003      	beq.n	8009784 <Process_USB_input+0x200>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2b45      	cmp	r3, #69	@ 0x45
 8009782:	d10a      	bne.n	800979a <Process_USB_input+0x216>
          if ((data[0] == 'E') && (received.Command == clearDefsCmd)) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	2b45      	cmp	r3, #69	@ 0x45
 800978a:	d106      	bne.n	800979a <Process_USB_input+0x216>
 800978c:	4b59      	ldr	r3, [pc, #356]	@ (80098f4 <Process_USB_input+0x370>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b1f      	cmp	r3, #31
 8009792:	d102      	bne.n	800979a <Process_USB_input+0x216>
//            printf_USB("\r\nClear EEPROM request\r\n");
            received.Command = ClearConfigCmd;
 8009794:	4b57      	ldr	r3, [pc, #348]	@ (80098f4 <Process_USB_input+0x370>)
 8009796:	22fd      	movs	r2, #253	@ 0xfd
 8009798:	701a      	strb	r2, [r3, #0]
          }
        }
        if ((data[0] == '$') || (data[0] == '#')) {
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b24      	cmp	r3, #36	@ 0x24
 80097a0:	d004      	beq.n	80097ac <Process_USB_input+0x228>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	2b23      	cmp	r3, #35	@ 0x23
 80097a8:	d000      	beq.n	80097ac <Process_USB_input+0x228>
 80097aa:	e0bd      	b.n	8009928 <Process_USB_input+0x3a4>
          for (i=4; i < len; i++) {
 80097ac:	2366      	movs	r3, #102	@ 0x66
 80097ae:	18fb      	adds	r3, r7, r3
 80097b0:	2204      	movs	r2, #4
 80097b2:	701a      	strb	r2, [r3, #0]
 80097b4:	e0b0      	b.n	8009918 <Process_USB_input+0x394>
            HAL_Delay(10);
 80097b6:	200a      	movs	r0, #10
 80097b8:	f00b f866 	bl	8014888 <HAL_Delay>
            if (isxdigit(data[i])) {
 80097bc:	2166      	movs	r1, #102	@ 0x66
 80097be:	187b      	adds	r3, r7, r1
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	18d3      	adds	r3, r2, r3
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	1c5a      	adds	r2, r3, #1
 80097ca:	4b4d      	ldr	r3, [pc, #308]	@ (8009900 <Process_USB_input+0x37c>)
 80097cc:	18d3      	adds	r3, r2, r3
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	001a      	movs	r2, r3
 80097d2:	2344      	movs	r3, #68	@ 0x44
 80097d4:	4013      	ands	r3, r2
 80097d6:	d05c      	beq.n	8009892 <Process_USB_input+0x30e>
              result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 80097d8:	4b4a      	ldr	r3, [pc, #296]	@ (8009904 <Process_USB_input+0x380>)
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	b25b      	sxtb	r3, r3
 80097de:	011b      	lsls	r3, r3, #4
 80097e0:	b25a      	sxtb	r2, r3
 80097e2:	0008      	movs	r0, r1
 80097e4:	187b      	adds	r3, r7, r1
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	6879      	ldr	r1, [r7, #4]
 80097ea:	18cb      	adds	r3, r1, r3
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	1c59      	adds	r1, r3, #1
 80097f0:	4b43      	ldr	r3, [pc, #268]	@ (8009900 <Process_USB_input+0x37c>)
 80097f2:	18cb      	adds	r3, r1, r3
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	0019      	movs	r1, r3
 80097f8:	2304      	movs	r3, #4
 80097fa:	400b      	ands	r3, r1
 80097fc:	d008      	beq.n	8009810 <Process_USB_input+0x28c>
 80097fe:	183b      	adds	r3, r7, r0
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	18cb      	adds	r3, r1, r3
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	3b30      	subs	r3, #48	@ 0x30
 800980a:	b2db      	uxtb	r3, r3
 800980c:	b25b      	sxtb	r3, r3
 800980e:	e01e      	b.n	800984e <Process_USB_input+0x2ca>
 8009810:	2366      	movs	r3, #102	@ 0x66
 8009812:	18fb      	adds	r3, r7, r3
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	18c9      	adds	r1, r1, r3
 800981a:	2056      	movs	r0, #86	@ 0x56
 800981c:	183b      	adds	r3, r7, r0
 800981e:	7809      	ldrb	r1, [r1, #0]
 8009820:	7019      	strb	r1, [r3, #0]
 8009822:	183b      	adds	r3, r7, r0
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	1c59      	adds	r1, r3, #1
 8009828:	4b35      	ldr	r3, [pc, #212]	@ (8009900 <Process_USB_input+0x37c>)
 800982a:	18cb      	adds	r3, r1, r3
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	0019      	movs	r1, r3
 8009830:	2303      	movs	r3, #3
 8009832:	400b      	ands	r3, r1
 8009834:	2b02      	cmp	r3, #2
 8009836:	d103      	bne.n	8009840 <Process_USB_input+0x2bc>
 8009838:	183b      	adds	r3, r7, r0
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	3b20      	subs	r3, #32
 800983e:	e002      	b.n	8009846 <Process_USB_input+0x2c2>
 8009840:	2356      	movs	r3, #86	@ 0x56
 8009842:	18fb      	adds	r3, r7, r3
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	b2db      	uxtb	r3, r3
 8009848:	3b37      	subs	r3, #55	@ 0x37
 800984a:	b2db      	uxtb	r3, r3
 800984c:	b25b      	sxtb	r3, r3
 800984e:	4313      	orrs	r3, r2
 8009850:	b25b      	sxtb	r3, r3
 8009852:	b2da      	uxtb	r2, r3
 8009854:	4b2b      	ldr	r3, [pc, #172]	@ (8009904 <Process_USB_input+0x380>)
 8009856:	701a      	strb	r2, [r3, #0]
//              printf_USB("Result is 0x%02X\r\n", result);
              HAL_Delay(10);
 8009858:	200a      	movs	r0, #10
 800985a:	f00b f815 	bl	8014888 <HAL_Delay>
              if (len == 28) {
 800985e:	4b1e      	ldr	r3, [pc, #120]	@ (80098d8 <Process_USB_input+0x354>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b1c      	cmp	r3, #28
 8009864:	d152      	bne.n	800990c <Process_USB_input+0x388>
                if ((i % 2) == 1) {
 8009866:	2366      	movs	r3, #102	@ 0x66
 8009868:	18fb      	adds	r3, r7, r3
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2201      	movs	r2, #1
 800986e:	4013      	ands	r3, r2
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d04a      	beq.n	800990c <Process_USB_input+0x388>
                  data[r] = result;
 8009876:	2167      	movs	r1, #103	@ 0x67
 8009878:	187b      	adds	r3, r7, r1
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	18d3      	adds	r3, r2, r3
 8009880:	4a20      	ldr	r2, [pc, #128]	@ (8009904 <Process_USB_input+0x380>)
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	701a      	strb	r2, [r3, #0]
//                  printf_USB("data[%d] = 0x%02X",r, data[r]);
                  r++;
 8009886:	187b      	adds	r3, r7, r1
 8009888:	781a      	ldrb	r2, [r3, #0]
 800988a:	187b      	adds	r3, r7, r1
 800988c:	3201      	adds	r2, #1
 800988e:	701a      	strb	r2, [r3, #0]
 8009890:	e03c      	b.n	800990c <Process_USB_input+0x388>
                }
              }
            }
            else {
              printf_USB("\r\nInvalid hexadecimal character: '%c at position %d\r\n", data[i], i);
 8009892:	2066      	movs	r0, #102	@ 0x66
 8009894:	183b      	adds	r3, r7, r0
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	18d3      	adds	r3, r2, r3
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	0019      	movs	r1, r3
 80098a0:	183b      	adds	r3, r7, r0
 80098a2:	781a      	ldrb	r2, [r3, #0]
 80098a4:	4b18      	ldr	r3, [pc, #96]	@ (8009908 <Process_USB_input+0x384>)
 80098a6:	0018      	movs	r0, r3
 80098a8:	f7ff f8fc 	bl	8008aa4 <printf_USB>
              ResetUsbRxDataSize();
 80098ac:	f019 fbbe 	bl	802302c <ResetUsbRxDataSize>
              PC_show_Keys();
 80098b0:	f7ff f938 	bl	8008b24 <PC_show_Keys>
              for (uint8_t i=0; i < length; i++) {
 80098b4:	2157      	movs	r1, #87	@ 0x57
 80098b6:	187b      	adds	r3, r7, r1
 80098b8:	2200      	movs	r2, #0
 80098ba:	701a      	strb	r2, [r3, #0]
 80098bc:	46c0      	nop			@ (mov r8, r8)
 80098be:	187b      	adds	r3, r7, r1
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d921      	bls.n	800990c <Process_USB_input+0x388>
                data[i] = '\0';
 80098c8:	187b      	adds	r3, r7, r1
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	18d3      	adds	r3, r2, r3
 80098d0:	2200      	movs	r2, #0
 80098d2:	701a      	strb	r2, [r3, #0]
                return false; // Of een andere foutwaarde
 80098d4:	2300      	movs	r3, #0
 80098d6:	e0d5      	b.n	8009a84 <Process_USB_input+0x500>
 80098d8:	20000038 	.word	0x20000038
 80098dc:	200010f7 	.word	0x200010f7
 80098e0:	08080194 	.word	0x08080194
 80098e4:	0802ba94 	.word	0x0802ba94
 80098e8:	0802ba98 	.word	0x0802ba98
 80098ec:	0802bb80 	.word	0x0802bb80
 80098f0:	0802bba0 	.word	0x0802bba0
 80098f4:	20000940 	.word	0x20000940
 80098f8:	0802bbcc 	.word	0x0802bbcc
 80098fc:	0802bbe8 	.word	0x0802bbe8
 8009900:	0802eb88 	.word	0x0802eb88
 8009904:	20000a44 	.word	0x20000a44
 8009908:	0802bc08 	.word	0x0802bc08
          for (i=4; i < len; i++) {
 800990c:	2166      	movs	r1, #102	@ 0x66
 800990e:	187b      	adds	r3, r7, r1
 8009910:	781a      	ldrb	r2, [r3, #0]
 8009912:	187b      	adds	r3, r7, r1
 8009914:	3201      	adds	r2, #1
 8009916:	701a      	strb	r2, [r3, #0]
 8009918:	2366      	movs	r3, #102	@ 0x66
 800991a:	18fb      	adds	r3, r7, r3
 800991c:	781a      	ldrb	r2, [r3, #0]
 800991e:	4b5b      	ldr	r3, [pc, #364]	@ (8009a8c <Process_USB_input+0x508>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d200      	bcs.n	8009928 <Process_USB_input+0x3a4>
 8009926:	e746      	b.n	80097b6 <Process_USB_input+0x232>
              }
            }
          }  // end for
//          printf_USB("\r\n");
        }
        if (len < pwdMaxLength) {
 8009928:	4b58      	ldr	r3, [pc, #352]	@ (8009a8c <Process_USB_input+0x508>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b3f      	cmp	r3, #63	@ 0x3f
 800992e:	d825      	bhi.n	800997c <Process_USB_input+0x3f8>
          if (len == 6) {
 8009930:	4b56      	ldr	r3, [pc, #344]	@ (8009a8c <Process_USB_input+0x508>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b06      	cmp	r3, #6
 8009936:	d114      	bne.n	8009962 <Process_USB_input+0x3de>
            ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8009938:	2448      	movs	r4, #72	@ 0x48
 800993a:	193b      	adds	r3, r7, r4
 800993c:	4854      	ldr	r0, [pc, #336]	@ (8009a90 <Process_USB_input+0x50c>)
 800993e:	220c      	movs	r2, #12
 8009940:	0019      	movs	r1, r3
 8009942:	f002 fbd9 	bl	800c0f8 <ReadUint8ArrayEEprom>
            boxConfig[11] = result; //overwrite the last byte of the key
 8009946:	4b53      	ldr	r3, [pc, #332]	@ (8009a94 <Process_USB_input+0x510>)
 8009948:	781a      	ldrb	r2, [r3, #0]
 800994a:	0021      	movs	r1, r4
 800994c:	187b      	adds	r3, r7, r1
 800994e:	72da      	strb	r2, [r3, #11]
            memcpy(received.Payload, boxConfig, IdSize);
 8009950:	4b51      	ldr	r3, [pc, #324]	@ (8009a98 <Process_USB_input+0x514>)
 8009952:	2202      	movs	r2, #2
 8009954:	1879      	adds	r1, r7, r1
 8009956:	189b      	adds	r3, r3, r2
 8009958:	220c      	movs	r2, #12
 800995a:	0018      	movs	r0, r3
 800995c:	f01c fe60 	bl	8026620 <memcpy>
 8009960:	e005      	b.n	800996e <Process_USB_input+0x3ea>
          }
          else {
            memcpy(received.Payload, data, IdSize);
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	4b4d      	ldr	r3, [pc, #308]	@ (8009a9c <Process_USB_input+0x518>)
 8009966:	220c      	movs	r2, #12
 8009968:	0018      	movs	r0, r3
 800996a:	f01c fe59 	bl	8026620 <memcpy>
          }
          received.Payload[12] = '\0';
 800996e:	4b4a      	ldr	r3, [pc, #296]	@ (8009a98 <Process_USB_input+0x514>)
 8009970:	2200      	movs	r2, #0
 8009972:	739a      	strb	r2, [r3, #14]
          received.PayloadLength = IdSize;
 8009974:	4b48      	ldr	r3, [pc, #288]	@ (8009a98 <Process_USB_input+0x514>)
 8009976:	220c      	movs	r2, #12
 8009978:	705a      	strb	r2, [r3, #1]
 800997a:	e005      	b.n	8009988 <Process_USB_input+0x404>
        }
        else {
          received.PayloadLength = length-4;  // The string terminator counts
 800997c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800997e:	b2db      	uxtb	r3, r3
 8009980:	3b04      	subs	r3, #4
 8009982:	b2da      	uxtb	r2, r3
 8009984:	4b44      	ldr	r3, [pc, #272]	@ (8009a98 <Process_USB_input+0x514>)
 8009986:	705a      	strb	r2, [r3, #1]
        }
        if ((len < pwdMaxLength) && (len != 6))  {
 8009988:	4b40      	ldr	r3, [pc, #256]	@ (8009a8c <Process_USB_input+0x508>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b3f      	cmp	r3, #63	@ 0x3f
 800998e:	d80b      	bhi.n	80099a8 <Process_USB_input+0x424>
 8009990:	4b3e      	ldr	r3, [pc, #248]	@ (8009a8c <Process_USB_input+0x508>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b06      	cmp	r3, #6
 8009996:	d007      	beq.n	80099a8 <Process_USB_input+0x424>
          uint8ArrayToString(Buffer, received.Payload);
 8009998:	4a40      	ldr	r2, [pc, #256]	@ (8009a9c <Process_USB_input+0x518>)
 800999a:	2308      	movs	r3, #8
 800999c:	18fb      	adds	r3, r7, r3
 800999e:	0011      	movs	r1, r2
 80099a0:	0018      	movs	r0, r3
 80099a2:	f7fb fd21 	bl	80053e8 <uint8ArrayToString>
 80099a6:	e00c      	b.n	80099c2 <Process_USB_input+0x43e>
        }
        else if (len == pwdMaxLength) {
 80099a8:	4b38      	ldr	r3, [pc, #224]	@ (8009a8c <Process_USB_input+0x508>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b40      	cmp	r3, #64	@ 0x40
 80099ae:	d108      	bne.n	80099c2 <Process_USB_input+0x43e>
          memcpy(received.Payload, &data[4], received.PayloadLength);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	1d19      	adds	r1, r3, #4
 80099b4:	4b38      	ldr	r3, [pc, #224]	@ (8009a98 <Process_USB_input+0x514>)
 80099b6:	785b      	ldrb	r3, [r3, #1]
 80099b8:	001a      	movs	r2, r3
 80099ba:	4b38      	ldr	r3, [pc, #224]	@ (8009a9c <Process_USB_input+0x518>)
 80099bc:	0018      	movs	r0, r3
 80099be:	f01c fe2f 	bl	8026620 <memcpy>
        }
        ProcessCmd(received);
 80099c2:	4c35      	ldr	r4, [pc, #212]	@ (8009a98 <Process_USB_input+0x514>)
 80099c4:	466b      	mov	r3, sp
 80099c6:	0018      	movs	r0, r3
 80099c8:	0023      	movs	r3, r4
 80099ca:	3310      	adds	r3, #16
 80099cc:	22f4      	movs	r2, #244	@ 0xf4
 80099ce:	0019      	movs	r1, r3
 80099d0:	f01c fe26 	bl	8026620 <memcpy>
 80099d4:	6820      	ldr	r0, [r4, #0]
 80099d6:	6861      	ldr	r1, [r4, #4]
 80099d8:	68a2      	ldr	r2, [r4, #8]
 80099da:	68e3      	ldr	r3, [r4, #12]
 80099dc:	f7fe fd9c 	bl	8008518 <ProcessCmd>
        ResetUsbRxDataSize();
 80099e0:	f019 fb24 	bl	802302c <ResetUsbRxDataSize>
        PC_show_Keys();
 80099e4:	f7ff f89e 	bl	8008b24 <PC_show_Keys>
        for (uint8_t i=0; i < length; i++) {
 80099e8:	2364      	movs	r3, #100	@ 0x64
 80099ea:	18fb      	adds	r3, r7, r3
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]
 80099f0:	e00b      	b.n	8009a0a <Process_USB_input+0x486>
          data[i] = '\0';
 80099f2:	2164      	movs	r1, #100	@ 0x64
 80099f4:	187b      	adds	r3, r7, r1
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	18d3      	adds	r3, r2, r3
 80099fc:	2200      	movs	r2, #0
 80099fe:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < length; i++) {
 8009a00:	187b      	adds	r3, r7, r1
 8009a02:	781a      	ldrb	r2, [r3, #0]
 8009a04:	187b      	adds	r3, r7, r1
 8009a06:	3201      	adds	r2, #1
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	2364      	movs	r3, #100	@ 0x64
 8009a0c:	18fb      	adds	r3, r7, r3
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d8ed      	bhi.n	80099f2 <Process_USB_input+0x46e>
        }
        return true;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e034      	b.n	8009a84 <Process_USB_input+0x500>
      }
      else {
        printf_USB("\r\nInvalid input; comma not found\r\n");
 8009a1a:	4b21      	ldr	r3, [pc, #132]	@ (8009aa0 <Process_USB_input+0x51c>)
 8009a1c:	0018      	movs	r0, r3
 8009a1e:	f7ff f841 	bl	8008aa4 <printf_USB>
//        for (uint8_t i=0; i < length; i++) {
//          data[i] = '\0';
//        }
      }
    }
    PC_show_Keys();
 8009a22:	f7ff f87f 	bl	8008b24 <PC_show_Keys>
    ResetUsbRxDataSize();
 8009a26:	f019 fb01 	bl	802302c <ResetUsbRxDataSize>
    for (uint8_t i=0; i < length; i++) {
 8009a2a:	2363      	movs	r3, #99	@ 0x63
 8009a2c:	18fb      	adds	r3, r7, r3
 8009a2e:	2200      	movs	r2, #0
 8009a30:	701a      	strb	r2, [r3, #0]
 8009a32:	e00b      	b.n	8009a4c <Process_USB_input+0x4c8>
      data[i] = '\0';
 8009a34:	2163      	movs	r1, #99	@ 0x63
 8009a36:	187b      	adds	r3, r7, r1
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	18d3      	adds	r3, r2, r3
 8009a3e:	2200      	movs	r2, #0
 8009a40:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < length; i++) {
 8009a42:	187b      	adds	r3, r7, r1
 8009a44:	781a      	ldrb	r2, [r3, #0]
 8009a46:	187b      	adds	r3, r7, r1
 8009a48:	3201      	adds	r2, #1
 8009a4a:	701a      	strb	r2, [r3, #0]
 8009a4c:	2363      	movs	r3, #99	@ 0x63
 8009a4e:	18fb      	adds	r3, r7, r3
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d8ed      	bhi.n	8009a34 <Process_USB_input+0x4b0>
    }
    len = 6;
 8009a58:	4b0c      	ldr	r3, [pc, #48]	@ (8009a8c <Process_USB_input+0x508>)
 8009a5a:	2206      	movs	r2, #6
 8009a5c:	601a      	str	r2, [r3, #0]
  }
  if (formerlength != length) {
 8009a5e:	4b11      	ldr	r3, [pc, #68]	@ (8009aa4 <Process_USB_input+0x520>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d008      	beq.n	8009a7a <Process_USB_input+0x4f6>
    printf_USB("USB input: %s\r", (const char*)data);
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009aa8 <Process_USB_input+0x524>)
 8009a6c:	0011      	movs	r1, r2
 8009a6e:	0018      	movs	r0, r3
 8009a70:	f7ff f818 	bl	8008aa4 <printf_USB>
    formerlength = length;
 8009a74:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa4 <Process_USB_input+0x520>)
 8009a76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a78:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8009a7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f019 faf7 	bl	8023070 <GetUsbRxNextChunk>
  return false;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	0018      	movs	r0, r3
 8009a86:	46bd      	mov	sp, r7
 8009a88:	b01b      	add	sp, #108	@ 0x6c
 8009a8a:	bd90      	pop	{r4, r7, pc}
 8009a8c:	20000038 	.word	0x20000038
 8009a90:	08080000 	.word	0x08080000
 8009a94:	20000a44 	.word	0x20000a44
 8009a98:	20000940 	.word	0x20000940
 8009a9c:	20000942 	.word	0x20000942
 8009aa0:	0802bc40 	.word	0x0802bc40
 8009aa4:	20000a48 	.word	0x20000a48
 8009aa8:	0802bc64 	.word	0x0802bc64

08009aac <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8009ab0:	4b26      	ldr	r3, [pc, #152]	@ (8009b4c <ReadBatteryVoltage+0xa0>)
 8009ab2:	4a27      	ldr	r2, [pc, #156]	@ (8009b50 <ReadBatteryVoltage+0xa4>)
 8009ab4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009ab6:	4b25      	ldr	r3, [pc, #148]	@ (8009b4c <ReadBatteryVoltage+0xa0>)
 8009ab8:	2280      	movs	r2, #128	@ 0x80
 8009aba:	0152      	lsls	r2, r2, #5
 8009abc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009abe:	4a23      	ldr	r2, [pc, #140]	@ (8009b4c <ReadBatteryVoltage+0xa0>)
 8009ac0:	4b24      	ldr	r3, [pc, #144]	@ (8009b54 <ReadBatteryVoltage+0xa8>)
 8009ac2:	0011      	movs	r1, r2
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f00b f98f 	bl	8014de8 <HAL_ADC_ConfigChannel>
 8009aca:	1e03      	subs	r3, r0, #0
 8009acc:	d001      	beq.n	8009ad2 <ReadBatteryVoltage+0x26>
    Error_Handler();
 8009ace:	f003 fc6b 	bl	800d3a8 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009ad2:	4b20      	ldr	r3, [pc, #128]	@ (8009b54 <ReadBatteryVoltage+0xa8>)
 8009ad4:	0018      	movs	r0, r3
 8009ad6:	f00b f88b 	bl	8014bf0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009ada:	4b1e      	ldr	r3, [pc, #120]	@ (8009b54 <ReadBatteryVoltage+0xa8>)
 8009adc:	2101      	movs	r1, #1
 8009ade:	0018      	movs	r0, r3
 8009ae0:	f00b f8da 	bl	8014c98 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8009ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8009b54 <ReadBatteryVoltage+0xa8>)
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	f00b f972 	bl	8014dd0 <HAL_ADC_GetValue>
 8009aec:	0002      	movs	r2, r0
 8009aee:	4b1a      	ldr	r3, [pc, #104]	@ (8009b58 <ReadBatteryVoltage+0xac>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4353      	muls	r3, r2
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	4919      	ldr	r1, [pc, #100]	@ (8009b5c <ReadBatteryVoltage+0xb0>)
 8009af8:	0018      	movs	r0, r3
 8009afa:	f7f6 fb53 	bl	80001a4 <__udivsi3>
 8009afe:	0003      	movs	r3, r0
 8009b00:	001a      	movs	r2, r3
 8009b02:	4b17      	ldr	r3, [pc, #92]	@ (8009b60 <ReadBatteryVoltage+0xb4>)
 8009b04:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8009b06:	4b16      	ldr	r3, [pc, #88]	@ (8009b60 <ReadBatteryVoltage+0xb4>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	0018      	movs	r0, r3
 8009b0c:	f7f7 fedc 	bl	80018c8 <__aeabi_ui2f>
 8009b10:	1c03      	adds	r3, r0, #0
 8009b12:	4914      	ldr	r1, [pc, #80]	@ (8009b64 <ReadBatteryVoltage+0xb8>)
 8009b14:	1c18      	adds	r0, r3, #0
 8009b16:	f7f7 f8c5 	bl	8000ca4 <__aeabi_fdiv>
 8009b1a:	1c03      	adds	r3, r0, #0
 8009b1c:	1c1a      	adds	r2, r3, #0
 8009b1e:	4b12      	ldr	r3, [pc, #72]	@ (8009b68 <ReadBatteryVoltage+0xbc>)
 8009b20:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8009b22:	4b0a      	ldr	r3, [pc, #40]	@ (8009b4c <ReadBatteryVoltage+0xa0>)
 8009b24:	4a0a      	ldr	r2, [pc, #40]	@ (8009b50 <ReadBatteryVoltage+0xa4>)
 8009b26:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009b28:	4b08      	ldr	r3, [pc, #32]	@ (8009b4c <ReadBatteryVoltage+0xa0>)
 8009b2a:	4a10      	ldr	r2, [pc, #64]	@ (8009b6c <ReadBatteryVoltage+0xc0>)
 8009b2c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009b2e:	4a07      	ldr	r2, [pc, #28]	@ (8009b4c <ReadBatteryVoltage+0xa0>)
 8009b30:	4b08      	ldr	r3, [pc, #32]	@ (8009b54 <ReadBatteryVoltage+0xa8>)
 8009b32:	0011      	movs	r1, r2
 8009b34:	0018      	movs	r0, r3
 8009b36:	f00b f957 	bl	8014de8 <HAL_ADC_ConfigChannel>
 8009b3a:	1e03      	subs	r3, r0, #0
 8009b3c:	d001      	beq.n	8009b42 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8009b3e:	f003 fc33 	bl	800d3a8 <Error_Handler>
  }
  return trueValue;
 8009b42:	4b09      	ldr	r3, [pc, #36]	@ (8009b68 <ReadBatteryVoltage+0xbc>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 }
 8009b46:	1c18      	adds	r0, r3, #0
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20000e18 	.word	0x20000e18
 8009b50:	38004000 	.word	0x38004000
 8009b54:	20000e84 	.word	0x20000e84
 8009b58:	2000003c 	.word	0x2000003c
 8009b5c:	00000fff 	.word	0x00000fff
 8009b60:	20000e34 	.word	0x20000e34
 8009b64:	447a0000 	.word	0x447a0000
 8009b68:	20000e38 	.word	0x20000e38
 8009b6c:	00001001 	.word	0x00001001

08009b70 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8009b70:	b580      	push	{r7, lr}
 8009b72:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8009b74:	4b21      	ldr	r3, [pc, #132]	@ (8009bfc <ReadSolarVoltage+0x8c>)
 8009b76:	4a22      	ldr	r2, [pc, #136]	@ (8009c00 <ReadSolarVoltage+0x90>)
 8009b78:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009b7a:	4b20      	ldr	r3, [pc, #128]	@ (8009bfc <ReadSolarVoltage+0x8c>)
 8009b7c:	2280      	movs	r2, #128	@ 0x80
 8009b7e:	0152      	lsls	r2, r2, #5
 8009b80:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009b82:	4a1e      	ldr	r2, [pc, #120]	@ (8009bfc <ReadSolarVoltage+0x8c>)
 8009b84:	4b1f      	ldr	r3, [pc, #124]	@ (8009c04 <ReadSolarVoltage+0x94>)
 8009b86:	0011      	movs	r1, r2
 8009b88:	0018      	movs	r0, r3
 8009b8a:	f00b f92d 	bl	8014de8 <HAL_ADC_ConfigChannel>
 8009b8e:	1e03      	subs	r3, r0, #0
 8009b90:	d001      	beq.n	8009b96 <ReadSolarVoltage+0x26>
    Error_Handler();
 8009b92:	f003 fc09 	bl	800d3a8 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009b96:	4b1b      	ldr	r3, [pc, #108]	@ (8009c04 <ReadSolarVoltage+0x94>)
 8009b98:	0018      	movs	r0, r3
 8009b9a:	f00b f829 	bl	8014bf0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009b9e:	4b19      	ldr	r3, [pc, #100]	@ (8009c04 <ReadSolarVoltage+0x94>)
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	0018      	movs	r0, r3
 8009ba4:	f00b f878 	bl	8014c98 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8009ba8:	4b16      	ldr	r3, [pc, #88]	@ (8009c04 <ReadSolarVoltage+0x94>)
 8009baa:	0018      	movs	r0, r3
 8009bac:	f00b f910 	bl	8014dd0 <HAL_ADC_GetValue>
 8009bb0:	0002      	movs	r2, r0
 8009bb2:	4b15      	ldr	r3, [pc, #84]	@ (8009c08 <ReadSolarVoltage+0x98>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	435a      	muls	r2, r3
 8009bb8:	0013      	movs	r3, r2
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	189b      	adds	r3, r3, r2
 8009bbe:	4913      	ldr	r1, [pc, #76]	@ (8009c0c <ReadSolarVoltage+0x9c>)
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	f7f6 faef 	bl	80001a4 <__udivsi3>
 8009bc6:	0003      	movs	r3, r0
 8009bc8:	001a      	movs	r2, r3
 8009bca:	4b11      	ldr	r3, [pc, #68]	@ (8009c10 <ReadSolarVoltage+0xa0>)
 8009bcc:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8009bce:	4b0b      	ldr	r3, [pc, #44]	@ (8009bfc <ReadSolarVoltage+0x8c>)
 8009bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8009c00 <ReadSolarVoltage+0x90>)
 8009bd2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009bd4:	4b09      	ldr	r3, [pc, #36]	@ (8009bfc <ReadSolarVoltage+0x8c>)
 8009bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8009c14 <ReadSolarVoltage+0xa4>)
 8009bd8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009bda:	4a08      	ldr	r2, [pc, #32]	@ (8009bfc <ReadSolarVoltage+0x8c>)
 8009bdc:	4b09      	ldr	r3, [pc, #36]	@ (8009c04 <ReadSolarVoltage+0x94>)
 8009bde:	0011      	movs	r1, r2
 8009be0:	0018      	movs	r0, r3
 8009be2:	f00b f901 	bl	8014de8 <HAL_ADC_ConfigChannel>
 8009be6:	1e03      	subs	r3, r0, #0
 8009be8:	d001      	beq.n	8009bee <ReadSolarVoltage+0x7e>
    Error_Handler();
 8009bea:	f003 fbdd 	bl	800d3a8 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8009bee:	4b08      	ldr	r3, [pc, #32]	@ (8009c10 <ReadSolarVoltage+0xa0>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	b29b      	uxth	r3, r3
 }
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	46c0      	nop			@ (mov r8, r8)
 8009bfc:	20000e18 	.word	0x20000e18
 8009c00:	3c008000 	.word	0x3c008000
 8009c04:	20000e84 	.word	0x20000e84
 8009c08:	2000003c 	.word	0x2000003c
 8009c0c:	00000fff 	.word	0x00000fff
 8009c10:	20000e3c 	.word	0x20000e3c
 8009c14:	00001001 	.word	0x00001001

08009c18 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	af00      	add	r7, sp, #0
   if (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin)) {
 8009c1c:	23a0      	movs	r3, #160	@ 0xa0
 8009c1e:	05db      	lsls	r3, r3, #23
 8009c20:	2180      	movs	r1, #128	@ 0x80
 8009c22:	0018      	movs	r0, r3
 8009c24:	f00c f87c 	bl	8015d20 <HAL_GPIO_ReadPin>
 8009c28:	1e03      	subs	r3, r0, #0
 8009c2a:	d00b      	beq.n	8009c44 <Check_USB_PowerOn+0x2c>
     if (sendpwremail == DONE) {
 8009c2c:	4b07      	ldr	r3, [pc, #28]	@ (8009c4c <Check_USB_PowerOn+0x34>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d105      	bne.n	8009c40 <Check_USB_PowerOn+0x28>
       sendpwremail = CLEAR;
 8009c34:	4b05      	ldr	r3, [pc, #20]	@ (8009c4c <Check_USB_PowerOn+0x34>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	701a      	strb	r2, [r3, #0]
       sendpwrmaildate = 0;
 8009c3a:	4b05      	ldr	r3, [pc, #20]	@ (8009c50 <Check_USB_PowerOn+0x38>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	701a      	strb	r2, [r3, #0]
     }
     return true;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e000      	b.n	8009c46 <Check_USB_PowerOn+0x2e>
   }
   return false;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	0018      	movs	r0, r3
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	200010f9 	.word	0x200010f9
 8009c50:	20001110 	.word	0x20001110

08009c54 <Read_Charge_Status>:
//  CHARGING_OFF  = 0
//  CHARGING_ON   = 1
//  CHARGING_FULL = 2
//  Function returns Chargestatus

ChargeStatus Read_Charge_Status(void){
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
  bool PulledUpStatus   = true  ;
 8009c5a:	1dfb      	adds	r3, r7, #7
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	701a      	strb	r2, [r3, #0]
  bool PulledDownStatus = false ;
 8009c60:	1dbb      	adds	r3, r7, #6
 8009c62:	2200      	movs	r2, #0
 8009c64:	701a      	strb	r2, [r3, #0]
  //Read with Pull Up
  //Charge_Pin_Up();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009c66:	4b27      	ldr	r3, [pc, #156]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009c68:	2280      	movs	r2, #128	@ 0x80
 8009c6a:	0092      	lsls	r2, r2, #2
 8009c6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c6e:	4b25      	ldr	r3, [pc, #148]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009c74:	4b23      	ldr	r3, [pc, #140]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009c76:	2201      	movs	r2, #1
 8009c78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009c7a:	4b22      	ldr	r3, [pc, #136]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009c7c:	4a22      	ldr	r2, [pc, #136]	@ (8009d08 <Read_Charge_Status+0xb4>)
 8009c7e:	0019      	movs	r1, r3
 8009c80:	0010      	movs	r0, r2
 8009c82:	f00b fecf 	bl	8015a24 <HAL_GPIO_Init>

  PulledUpStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009c86:	2380      	movs	r3, #128	@ 0x80
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8009d08 <Read_Charge_Status+0xb4>)
 8009c8c:	0019      	movs	r1, r3
 8009c8e:	0010      	movs	r0, r2
 8009c90:	f00c f846 	bl	8015d20 <HAL_GPIO_ReadPin>
 8009c94:	0003      	movs	r3, r0
 8009c96:	001a      	movs	r2, r3
 8009c98:	1dfb      	adds	r3, r7, #7
 8009c9a:	1e51      	subs	r1, r2, #1
 8009c9c:	418a      	sbcs	r2, r1
 8009c9e:	701a      	strb	r2, [r3, #0]

  //Read with Pull Down
  // Charge_Pin_Down();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009ca0:	4b18      	ldr	r3, [pc, #96]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009ca2:	2280      	movs	r2, #128	@ 0x80
 8009ca4:	0092      	lsls	r2, r2, #2
 8009ca6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ca8:	4b16      	ldr	r3, [pc, #88]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009cae:	4b15      	ldr	r3, [pc, #84]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009cb4:	4b13      	ldr	r3, [pc, #76]	@ (8009d04 <Read_Charge_Status+0xb0>)
 8009cb6:	4a14      	ldr	r2, [pc, #80]	@ (8009d08 <Read_Charge_Status+0xb4>)
 8009cb8:	0019      	movs	r1, r3
 8009cba:	0010      	movs	r0, r2
 8009cbc:	f00b feb2 	bl	8015a24 <HAL_GPIO_Init>

  PulledDownStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009cc0:	2380      	movs	r3, #128	@ 0x80
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4a10      	ldr	r2, [pc, #64]	@ (8009d08 <Read_Charge_Status+0xb4>)
 8009cc6:	0019      	movs	r1, r3
 8009cc8:	0010      	movs	r0, r2
 8009cca:	f00c f829 	bl	8015d20 <HAL_GPIO_ReadPin>
 8009cce:	0003      	movs	r3, r0
 8009cd0:	001a      	movs	r2, r3
 8009cd2:	1dbb      	adds	r3, r7, #6
 8009cd4:	1e51      	subs	r1, r2, #1
 8009cd6:	418a      	sbcs	r2, r1
 8009cd8:	701a      	strb	r2, [r3, #0]

  if (PulledUpStatus==false) {
 8009cda:	1dfb      	adds	r3, r7, #7
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	4053      	eors	r3, r2
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <Read_Charge_Status+0x98>
    return CHARGING_ON;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e006      	b.n	8009cfa <Read_Charge_Status+0xa6>
  }
  if (PulledDownStatus==true){
 8009cec:	1dbb      	adds	r3, r7, #6
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <Read_Charge_Status+0xa4>
    return CHARGING_FULL;
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	e000      	b.n	8009cfa <Read_Charge_Status+0xa6>
  }
  return CHARGING_OFF;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	0018      	movs	r0, r3
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	b002      	add	sp, #8
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	46c0      	nop			@ (mov r8, r8)
 8009d04:	20000e20 	.word	0x20000e20
 8009d08:	50000800 	.word	0x50000800

08009d0c <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8009d10:	2380      	movs	r3, #128	@ 0x80
 8009d12:	021a      	lsls	r2, r3, #8
 8009d14:	23a0      	movs	r3, #160	@ 0xa0
 8009d16:	05db      	lsls	r3, r3, #23
 8009d18:	0011      	movs	r1, r2
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	f00c f800 	bl	8015d20 <HAL_GPIO_ReadPin>
 8009d20:	0003      	movs	r3, r0
 8009d22:	1e5a      	subs	r2, r3, #1
 8009d24:	4193      	sbcs	r3, r2
 8009d26:	b2db      	uxtb	r3, r3
}
 8009d28:	0018      	movs	r0, r3
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
	...

08009d30 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009d34:	4b05      	ldr	r3, [pc, #20]	@ (8009d4c <UserButton_Pressed+0x1c>)
 8009d36:	2104      	movs	r1, #4
 8009d38:	0018      	movs	r0, r3
 8009d3a:	f00b fff1 	bl	8015d20 <HAL_GPIO_ReadPin>
 8009d3e:	0003      	movs	r3, r0
 8009d40:	425a      	negs	r2, r3
 8009d42:	4153      	adcs	r3, r2
 8009d44:	b2db      	uxtb	r3, r3
}
 8009d46:	0018      	movs	r0, r3
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	50000c00 	.word	0x50000c00

08009d50 <getUptime>:

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

#ifndef PUBLIC
void getUptime(char* uptbuffer) {
 8009d50:	b590      	push	{r4, r7, lr}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	6078      	str	r0, [r7, #4]
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
 8009d58:	4b08      	ldr	r3, [pc, #32]	@ (8009d7c <getUptime+0x2c>)
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	001a      	movs	r2, r3
 8009d5e:	4b07      	ldr	r3, [pc, #28]	@ (8009d7c <getUptime+0x2c>)
 8009d60:	789b      	ldrb	r3, [r3, #2]
 8009d62:	001c      	movs	r4, r3
 8009d64:	4b05      	ldr	r3, [pc, #20]	@ (8009d7c <getUptime+0x2c>)
 8009d66:	78db      	ldrb	r3, [r3, #3]
 8009d68:	4905      	ldr	r1, [pc, #20]	@ (8009d80 <getUptime+0x30>)
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	0023      	movs	r3, r4
 8009d70:	f01c fa32 	bl	80261d8 <siprintf>
}
 8009d74:	46c0      	nop			@ (mov r8, r8)
 8009d76:	46bd      	mov	sp, r7
 8009d78:	b003      	add	sp, #12
 8009d7a:	bd90      	pop	{r4, r7, pc}
 8009d7c:	20000e48 	.word	0x20000e48
 8009d80:	0802bcc0 	.word	0x0802bcc0

08009d84 <getDate>:
#endif

uint8_t getDate() {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009d88:	4a05      	ldr	r2, [pc, #20]	@ (8009da0 <getDate+0x1c>)
 8009d8a:	4b06      	ldr	r3, [pc, #24]	@ (8009da4 <getDate+0x20>)
 8009d8c:	0011      	movs	r1, r2
 8009d8e:	0018      	movs	r0, r3
 8009d90:	f000 fb66 	bl	800a460 <RTC_GetTime>
  return currentDate.Date;
 8009d94:	4b02      	ldr	r3, [pc, #8]	@ (8009da0 <getDate+0x1c>)
 8009d96:	789b      	ldrb	r3, [r3, #2]
}
 8009d98:	0018      	movs	r0, r3
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	46c0      	nop			@ (mov r8, r8)
 8009da0:	20000e68 	.word	0x20000e68
 8009da4:	20000e54 	.word	0x20000e54

08009da8 <showUpTime>:

void showUpTime() {
 8009da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009daa:	46ce      	mov	lr, r9
 8009dac:	4647      	mov	r7, r8
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b087      	sub	sp, #28
 8009db2:	af06      	add	r7, sp, #24
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009db4:	4b17      	ldr	r3, [pc, #92]	@ (8009e14 <showUpTime+0x6c>)
 8009db6:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009db8:	4698      	mov	r8, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009dba:	4b16      	ldr	r3, [pc, #88]	@ (8009e14 <showUpTime+0x6c>)
 8009dbc:	785b      	ldrb	r3, [r3, #1]
 8009dbe:	1e5a      	subs	r2, r3, #1
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009dc0:	4b15      	ldr	r3, [pc, #84]	@ (8009e18 <showUpTime+0x70>)
 8009dc2:	0092      	lsls	r2, r2, #2
 8009dc4:	58d2      	ldr	r2, [r2, r3]
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009dc6:	4b13      	ldr	r3, [pc, #76]	@ (8009e14 <showUpTime+0x6c>)
 8009dc8:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009dca:	4699      	mov	r9, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009dcc:	4b13      	ldr	r3, [pc, #76]	@ (8009e1c <showUpTime+0x74>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009dd0:	0019      	movs	r1, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009dd2:	4b12      	ldr	r3, [pc, #72]	@ (8009e1c <showUpTime+0x74>)
 8009dd4:	785b      	ldrb	r3, [r3, #1]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009dd6:	001c      	movs	r4, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009dd8:	4b10      	ldr	r3, [pc, #64]	@ (8009e1c <showUpTime+0x74>)
 8009dda:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009ddc:	001d      	movs	r5, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009dde:	4b10      	ldr	r3, [pc, #64]	@ (8009e20 <showUpTime+0x78>)
 8009de0:	881b      	ldrh	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009de2:	001e      	movs	r6, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009de4:	4b0e      	ldr	r3, [pc, #56]	@ (8009e20 <showUpTime+0x78>)
 8009de6:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009de8:	469c      	mov	ip, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009dea:	4b0d      	ldr	r3, [pc, #52]	@ (8009e20 <showUpTime+0x78>)
 8009dec:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009dee:	480d      	ldr	r0, [pc, #52]	@ (8009e24 <showUpTime+0x7c>)
 8009df0:	9305      	str	r3, [sp, #20]
 8009df2:	4663      	mov	r3, ip
 8009df4:	9304      	str	r3, [sp, #16]
 8009df6:	9603      	str	r6, [sp, #12]
 8009df8:	9502      	str	r5, [sp, #8]
 8009dfa:	9401      	str	r4, [sp, #4]
 8009dfc:	9100      	str	r1, [sp, #0]
 8009dfe:	464b      	mov	r3, r9
 8009e00:	4641      	mov	r1, r8
 8009e02:	f7fe fe4f 	bl	8008aa4 <printf_USB>
}
 8009e06:	46c0      	nop			@ (mov r8, r8)
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	b001      	add	sp, #4
 8009e0c:	bcc0      	pop	{r6, r7}
 8009e0e:	46b9      	mov	r9, r7
 8009e10:	46b0      	mov	r8, r6
 8009e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e14:	20000e68 	.word	0x20000e68
 8009e18:	2000005c 	.word	0x2000005c
 8009e1c:	20000e54 	.word	0x20000e54
 8009e20:	20000e48 	.word	0x20000e48
 8009e24:	0802bccc 	.word	0x0802bccc

08009e28 <showTime>:

void showTime() {
 8009e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e2a:	46de      	mov	lr, fp
 8009e2c:	4657      	mov	r7, sl
 8009e2e:	464e      	mov	r6, r9
 8009e30:	4645      	mov	r5, r8
 8009e32:	b5e0      	push	{r5, r6, r7, lr}
 8009e34:	b08d      	sub	sp, #52	@ 0x34
 8009e36:	af0a      	add	r7, sp, #40	@ 0x28
  if (posixBootTime == 0) {
 8009e38:	4b41      	ldr	r3, [pc, #260]	@ (8009f40 <showTime+0x118>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d100      	bne.n	8009e42 <showTime+0x1a>
 8009e40:	e075      	b.n	8009f2e <showTime+0x106>
    return;
  }
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009e42:	4a40      	ldr	r2, [pc, #256]	@ (8009f44 <showTime+0x11c>)
 8009e44:	4b40      	ldr	r3, [pc, #256]	@ (8009f48 <showTime+0x120>)
 8009e46:	0011      	movs	r1, r2
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f000 fb09 	bl	800a460 <RTC_GetTime>
  lasthour = currentTime.Hours;
 8009e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8009f48 <showTime+0x120>)
 8009e50:	781a      	ldrb	r2, [r3, #0]
 8009e52:	4b3e      	ldr	r3, [pc, #248]	@ (8009f4c <showTime+0x124>)
 8009e54:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 8009e56:	4b3b      	ldr	r3, [pc, #236]	@ (8009f44 <showTime+0x11c>)
 8009e58:	781a      	ldrb	r2, [r3, #0]
 8009e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8009f50 <showTime+0x128>)
 8009e5c:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 8009e5e:	f000 f89b 	bl	8009f98 <UpdateSystemUptime>
  if (lastminute != currentTime.Minutes) {
 8009e62:	4b39      	ldr	r3, [pc, #228]	@ (8009f48 <showTime+0x120>)
 8009e64:	785a      	ldrb	r2, [r3, #1]
 8009e66:	4b3b      	ldr	r3, [pc, #236]	@ (8009f54 <showTime+0x12c>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d039      	beq.n	8009ee2 <showTime+0xba>
    lastminute = currentTime.Minutes;
 8009e6e:	4b36      	ldr	r3, [pc, #216]	@ (8009f48 <showTime+0x120>)
 8009e70:	785a      	ldrb	r2, [r3, #1]
 8009e72:	4b38      	ldr	r3, [pc, #224]	@ (8009f54 <showTime+0x12c>)
 8009e74:	701a      	strb	r2, [r3, #0]
    Info("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds",
 8009e76:	4b33      	ldr	r3, [pc, #204]	@ (8009f44 <showTime+0x11c>)
 8009e78:	789b      	ldrb	r3, [r3, #2]
 8009e7a:	469b      	mov	fp, r3
 8009e7c:	4b31      	ldr	r3, [pc, #196]	@ (8009f44 <showTime+0x11c>)
 8009e7e:	785b      	ldrb	r3, [r3, #1]
 8009e80:	1e5a      	subs	r2, r3, #1
 8009e82:	4b35      	ldr	r3, [pc, #212]	@ (8009f58 <showTime+0x130>)
 8009e84:	0092      	lsls	r2, r2, #2
 8009e86:	58d3      	ldr	r3, [r2, r3]
 8009e88:	607b      	str	r3, [r7, #4]
 8009e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8009f44 <showTime+0x11c>)
 8009e8c:	78d2      	ldrb	r2, [r2, #3]
 8009e8e:	0010      	movs	r0, r2
 8009e90:	4a2d      	ldr	r2, [pc, #180]	@ (8009f48 <showTime+0x120>)
 8009e92:	7812      	ldrb	r2, [r2, #0]
 8009e94:	0014      	movs	r4, r2
 8009e96:	4a2c      	ldr	r2, [pc, #176]	@ (8009f48 <showTime+0x120>)
 8009e98:	7852      	ldrb	r2, [r2, #1]
 8009e9a:	0015      	movs	r5, r2
 8009e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8009f48 <showTime+0x120>)
 8009e9e:	7892      	ldrb	r2, [r2, #2]
 8009ea0:	0016      	movs	r6, r2
 8009ea2:	4a2e      	ldr	r2, [pc, #184]	@ (8009f5c <showTime+0x134>)
 8009ea4:	8812      	ldrh	r2, [r2, #0]
 8009ea6:	4694      	mov	ip, r2
 8009ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8009f5c <showTime+0x134>)
 8009eaa:	7892      	ldrb	r2, [r2, #2]
 8009eac:	4690      	mov	r8, r2
 8009eae:	4a2b      	ldr	r2, [pc, #172]	@ (8009f5c <showTime+0x134>)
 8009eb0:	78d2      	ldrb	r2, [r2, #3]
 8009eb2:	4691      	mov	r9, r2
 8009eb4:	4a29      	ldr	r2, [pc, #164]	@ (8009f5c <showTime+0x134>)
 8009eb6:	7912      	ldrb	r2, [r2, #4]
 8009eb8:	4692      	mov	sl, r2
 8009eba:	4a29      	ldr	r2, [pc, #164]	@ (8009f60 <showTime+0x138>)
 8009ebc:	4929      	ldr	r1, [pc, #164]	@ (8009f64 <showTime+0x13c>)
 8009ebe:	4653      	mov	r3, sl
 8009ec0:	9308      	str	r3, [sp, #32]
 8009ec2:	464b      	mov	r3, r9
 8009ec4:	9307      	str	r3, [sp, #28]
 8009ec6:	4643      	mov	r3, r8
 8009ec8:	9306      	str	r3, [sp, #24]
 8009eca:	4663      	mov	r3, ip
 8009ecc:	9305      	str	r3, [sp, #20]
 8009ece:	9604      	str	r6, [sp, #16]
 8009ed0:	9503      	str	r5, [sp, #12]
 8009ed2:	9402      	str	r4, [sp, #8]
 8009ed4:	9001      	str	r0, [sp, #4]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	465b      	mov	r3, fp
 8009edc:	2002      	movs	r0, #2
 8009ede:	f009 ff51 	bl	8013d84 <CreateLine>
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
  }
  if ((weekday == 7) && (lasthour == 3) && (currentTime.Minutes < 17) && !dstchkd && (currentDate.Date > 24) && ((currentDate.Month == 3) || (currentDate.Month == 10))) {
 8009ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f50 <showTime+0x128>)
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b07      	cmp	r3, #7
 8009ee8:	d122      	bne.n	8009f30 <showTime+0x108>
 8009eea:	4b18      	ldr	r3, [pc, #96]	@ (8009f4c <showTime+0x124>)
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d11e      	bne.n	8009f30 <showTime+0x108>
 8009ef2:	4b15      	ldr	r3, [pc, #84]	@ (8009f48 <showTime+0x120>)
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	2b10      	cmp	r3, #16
 8009ef8:	d81a      	bhi.n	8009f30 <showTime+0x108>
 8009efa:	4b1b      	ldr	r3, [pc, #108]	@ (8009f68 <showTime+0x140>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	2201      	movs	r2, #1
 8009f00:	4053      	eors	r3, r2
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d013      	beq.n	8009f30 <showTime+0x108>
 8009f08:	4b0e      	ldr	r3, [pc, #56]	@ (8009f44 <showTime+0x11c>)
 8009f0a:	789b      	ldrb	r3, [r3, #2]
 8009f0c:	2b18      	cmp	r3, #24
 8009f0e:	d90f      	bls.n	8009f30 <showTime+0x108>
 8009f10:	4b0c      	ldr	r3, [pc, #48]	@ (8009f44 <showTime+0x11c>)
 8009f12:	785b      	ldrb	r3, [r3, #1]
 8009f14:	2b03      	cmp	r3, #3
 8009f16:	d003      	beq.n	8009f20 <showTime+0xf8>
 8009f18:	4b0a      	ldr	r3, [pc, #40]	@ (8009f44 <showTime+0x11c>)
 8009f1a:	785b      	ldrb	r3, [r3, #1]
 8009f1c:	2b0a      	cmp	r3, #10
 8009f1e:	d107      	bne.n	8009f30 <showTime+0x108>
    dstchkd = true;
 8009f20:	4b11      	ldr	r3, [pc, #68]	@ (8009f68 <showTime+0x140>)
 8009f22:	2201      	movs	r2, #1
 8009f24:	701a      	strb	r2, [r3, #0]
    setESPTimeStamp(0); // check for summer/wintertime
 8009f26:	2000      	movs	r0, #0
 8009f28:	f7fa fcbc 	bl	80048a4 <setESPTimeStamp>
 8009f2c:	e000      	b.n	8009f30 <showTime+0x108>
    return;
 8009f2e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009f30:	46bd      	mov	sp, r7
 8009f32:	b003      	add	sp, #12
 8009f34:	bcf0      	pop	{r4, r5, r6, r7}
 8009f36:	46bb      	mov	fp, r7
 8009f38:	46b2      	mov	sl, r6
 8009f3a:	46a9      	mov	r9, r5
 8009f3c:	46a0      	mov	r8, r4
 8009f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f40:	20000e44 	.word	0x20000e44
 8009f44:	20000e68 	.word	0x20000e68
 8009f48:	20000e54 	.word	0x20000e54
 8009f4c:	20000e42 	.word	0x20000e42
 8009f50:	20000e43 	.word	0x20000e43
 8009f54:	20000e41 	.word	0x20000e41
 8009f58:	2000005c 	.word	0x2000005c
 8009f5c:	20000e48 	.word	0x20000e48
 8009f60:	0802bd20 	.word	0x0802bd20
 8009f64:	0802bd78 	.word	0x0802bd78
 8009f68:	20000e40 	.word	0x20000e40

08009f6c <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009f70:	4a07      	ldr	r2, [pc, #28]	@ (8009f90 <calculateNextNTPTime+0x24>)
 8009f72:	4b08      	ldr	r3, [pc, #32]	@ (8009f94 <calculateNextNTPTime+0x28>)
 8009f74:	0011      	movs	r1, r2
 8009f76:	0018      	movs	r0, r3
 8009f78:	f000 fa72 	bl	800a460 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8009f7c:	4a05      	ldr	r2, [pc, #20]	@ (8009f94 <calculateNextNTPTime+0x28>)
 8009f7e:	4b04      	ldr	r3, [pc, #16]	@ (8009f90 <calculateNextNTPTime+0x24>)
 8009f80:	0011      	movs	r1, r2
 8009f82:	0018      	movs	r0, r3
 8009f84:	f000 fc6c 	bl	800a860 <makeTime>
 8009f88:	0003      	movs	r3, r0
}
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20000e68 	.word	0x20000e68
 8009f94:	20000e54 	.word	0x20000e54

08009f98 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8009f9e:	4a25      	ldr	r2, [pc, #148]	@ (800a034 <UpdateSystemUptime+0x9c>)
 8009fa0:	4b25      	ldr	r3, [pc, #148]	@ (800a038 <UpdateSystemUptime+0xa0>)
 8009fa2:	0011      	movs	r1, r2
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	f000 fa5b 	bl	800a460 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8009faa:	4a23      	ldr	r2, [pc, #140]	@ (800a038 <UpdateSystemUptime+0xa0>)
 8009fac:	4b21      	ldr	r3, [pc, #132]	@ (800a034 <UpdateSystemUptime+0x9c>)
 8009fae:	0011      	movs	r1, r2
 8009fb0:	0018      	movs	r0, r3
 8009fb2:	f000 fc55 	bl	800a860 <makeTime>
 8009fb6:	0002      	movs	r2, r0
 8009fb8:	4b20      	ldr	r3, [pc, #128]	@ (800a03c <UpdateSystemUptime+0xa4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	607b      	str	r3, [r7, #4]
  time = uxUptime;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	603b      	str	r3, [r7, #0]
  myUpTime.Seconds = time % 60;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	213c      	movs	r1, #60	@ 0x3c
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f7f6 f971 	bl	80002b0 <__aeabi_uidivmod>
 8009fce:	000b      	movs	r3, r1
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	4b1b      	ldr	r3, [pc, #108]	@ (800a040 <UpdateSystemUptime+0xa8>)
 8009fd4:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	213c      	movs	r1, #60	@ 0x3c
 8009fda:	0018      	movs	r0, r3
 8009fdc:	f7f6 f8e2 	bl	80001a4 <__udivsi3>
 8009fe0:	0003      	movs	r3, r0
 8009fe2:	603b      	str	r3, [r7, #0]
  myUpTime.Minutes = time % 60;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	213c      	movs	r1, #60	@ 0x3c
 8009fe8:	0018      	movs	r0, r3
 8009fea:	f7f6 f961 	bl	80002b0 <__aeabi_uidivmod>
 8009fee:	000b      	movs	r3, r1
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	4b13      	ldr	r3, [pc, #76]	@ (800a040 <UpdateSystemUptime+0xa8>)
 8009ff4:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	213c      	movs	r1, #60	@ 0x3c
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	f7f6 f8d2 	bl	80001a4 <__udivsi3>
 800a000:	0003      	movs	r3, r0
 800a002:	603b      	str	r3, [r7, #0]
  myUpTime.Hour = time % 24;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2118      	movs	r1, #24
 800a008:	0018      	movs	r0, r3
 800a00a:	f7f6 f951 	bl	80002b0 <__aeabi_uidivmod>
 800a00e:	000b      	movs	r3, r1
 800a010:	b2da      	uxtb	r2, r3
 800a012:	4b0b      	ldr	r3, [pc, #44]	@ (800a040 <UpdateSystemUptime+0xa8>)
 800a014:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2118      	movs	r1, #24
 800a01a:	0018      	movs	r0, r3
 800a01c:	f7f6 f8c2 	bl	80001a4 <__udivsi3>
 800a020:	0003      	movs	r3, r0
 800a022:	603b      	str	r3, [r7, #0]
  myUpTime.Day = time; // now it is days
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	b29a      	uxth	r2, r3
 800a028:	4b05      	ldr	r3, [pc, #20]	@ (800a040 <UpdateSystemUptime+0xa8>)
 800a02a:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800a02c:	46c0      	nop			@ (mov r8, r8)
 800a02e:	46bd      	mov	sp, r7
 800a030:	b002      	add	sp, #8
 800a032:	bd80      	pop	{r7, pc}
 800a034:	20000e68 	.word	0x20000e68
 800a038:	20000e54 	.word	0x20000e54
 800a03c:	20000e44 	.word	0x20000e44
 800a040:	20000e48 	.word	0x20000e48

0800a044 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800a044:	b590      	push	{r4, r7, lr}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	0008      	movs	r0, r1
 800a04e:	0011      	movs	r1, r2
 800a050:	1cfb      	adds	r3, r7, #3
 800a052:	1c02      	adds	r2, r0, #0
 800a054:	701a      	strb	r2, [r3, #0]
 800a056:	1cbb      	adds	r3, r7, #2
 800a058:	1c0a      	adds	r2, r1, #0
 800a05a:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 800a05c:	230e      	movs	r3, #14
 800a05e:	18fb      	adds	r3, r7, r3
 800a060:	2200      	movs	r2, #0
 800a062:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a064:	230f      	movs	r3, #15
 800a066:	18fb      	adds	r3, r7, r3
 800a068:	1cfa      	adds	r2, r7, #3
 800a06a:	7812      	ldrb	r2, [r2, #0]
 800a06c:	701a      	strb	r2, [r3, #0]
 800a06e:	e015      	b.n	800a09c <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 800a070:	200f      	movs	r0, #15
 800a072:	183b      	adds	r3, r7, r0
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	18d2      	adds	r2, r2, r3
 800a07a:	240e      	movs	r4, #14
 800a07c:	193b      	adds	r3, r7, r4
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	7811      	ldrb	r1, [r2, #0]
 800a082:	2208      	movs	r2, #8
 800a084:	18ba      	adds	r2, r7, r2
 800a086:	54d1      	strb	r1, [r2, r3]
    pos++;
 800a088:	193b      	adds	r3, r7, r4
 800a08a:	781a      	ldrb	r2, [r3, #0]
 800a08c:	193b      	adds	r3, r7, r4
 800a08e:	3201      	adds	r2, #1
 800a090:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a092:	183b      	adds	r3, r7, r0
 800a094:	781a      	ldrb	r2, [r3, #0]
 800a096:	183b      	adds	r3, r7, r0
 800a098:	3201      	adds	r2, #1
 800a09a:	701a      	strb	r2, [r3, #0]
 800a09c:	200f      	movs	r0, #15
 800a09e:	183a      	adds	r2, r7, r0
 800a0a0:	1cbb      	adds	r3, r7, #2
 800a0a2:	7812      	ldrb	r2, [r2, #0]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d9e2      	bls.n	800a070 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800a0aa:	230e      	movs	r3, #14
 800a0ac:	18fb      	adds	r3, r7, r3
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2208      	movs	r2, #8
 800a0b2:	18ba      	adds	r2, r7, r2
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 800a0b8:	1cfb      	adds	r3, r7, #3
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	2b13      	cmp	r3, #19
 800a0be:	d849      	bhi.n	800a154 <aBuff2int+0x110>
    if (start == 17) { //month
 800a0c0:	1cfb      	adds	r3, r7, #3
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	2b11      	cmp	r3, #17
 800a0c6:	d122      	bne.n	800a10e <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 800a0c8:	183b      	adds	r3, r7, r0
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	701a      	strb	r2, [r3, #0]
 800a0ce:	e018      	b.n	800a102 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800a0d0:	240f      	movs	r4, #15
 800a0d2:	193b      	adds	r3, r7, r4
 800a0d4:	781a      	ldrb	r2, [r3, #0]
 800a0d6:	4b25      	ldr	r3, [pc, #148]	@ (800a16c <aBuff2int+0x128>)
 800a0d8:	0092      	lsls	r2, r2, #2
 800a0da:	58d2      	ldr	r2, [r2, r3]
 800a0dc:	2308      	movs	r3, #8
 800a0de:	18fb      	adds	r3, r7, r3
 800a0e0:	0011      	movs	r1, r2
 800a0e2:	0018      	movs	r0, r3
 800a0e4:	f7f6 f838 	bl	8000158 <strcmp>
 800a0e8:	1e03      	subs	r3, r0, #0
 800a0ea:	d104      	bne.n	800a0f6 <aBuff2int+0xb2>
          return i+1;
 800a0ec:	193b      	adds	r3, r7, r4
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	e035      	b.n	800a162 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800a0f6:	210f      	movs	r1, #15
 800a0f8:	187b      	adds	r3, r7, r1
 800a0fa:	781a      	ldrb	r2, [r3, #0]
 800a0fc:	187b      	adds	r3, r7, r1
 800a0fe:	3201      	adds	r2, #1
 800a100:	701a      	strb	r2, [r3, #0]
 800a102:	230f      	movs	r3, #15
 800a104:	18fb      	adds	r3, r7, r3
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b0b      	cmp	r3, #11
 800a10a:	d9e1      	bls.n	800a0d0 <aBuff2int+0x8c>
 800a10c:	e022      	b.n	800a154 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800a10e:	230f      	movs	r3, #15
 800a110:	18fb      	adds	r3, r7, r3
 800a112:	2200      	movs	r2, #0
 800a114:	701a      	strb	r2, [r3, #0]
 800a116:	e018      	b.n	800a14a <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 800a118:	240f      	movs	r4, #15
 800a11a:	193b      	adds	r3, r7, r4
 800a11c:	781a      	ldrb	r2, [r3, #0]
 800a11e:	4b14      	ldr	r3, [pc, #80]	@ (800a170 <aBuff2int+0x12c>)
 800a120:	0092      	lsls	r2, r2, #2
 800a122:	58d2      	ldr	r2, [r2, r3]
 800a124:	2308      	movs	r3, #8
 800a126:	18fb      	adds	r3, r7, r3
 800a128:	0011      	movs	r1, r2
 800a12a:	0018      	movs	r0, r3
 800a12c:	f7f6 f814 	bl	8000158 <strcmp>
 800a130:	1e03      	subs	r3, r0, #0
 800a132:	d104      	bne.n	800a13e <aBuff2int+0xfa>
          return i+1;
 800a134:	193b      	adds	r3, r7, r4
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	3301      	adds	r3, #1
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	e011      	b.n	800a162 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800a13e:	210f      	movs	r1, #15
 800a140:	187b      	adds	r3, r7, r1
 800a142:	781a      	ldrb	r2, [r3, #0]
 800a144:	187b      	adds	r3, r7, r1
 800a146:	3201      	adds	r2, #1
 800a148:	701a      	strb	r2, [r3, #0]
 800a14a:	230f      	movs	r3, #15
 800a14c:	18fb      	adds	r3, r7, r3
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2b06      	cmp	r3, #6
 800a152:	d9e1      	bls.n	800a118 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800a154:	2308      	movs	r3, #8
 800a156:	18fb      	adds	r3, r7, r3
 800a158:	0018      	movs	r0, r3
 800a15a:	f01a fbe8 	bl	802492e <atoi>
 800a15e:	0003      	movs	r3, r0
 800a160:	b2db      	uxtb	r3, r3
}
 800a162:	0018      	movs	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	b005      	add	sp, #20
 800a168:	bd90      	pop	{r4, r7, pc}
 800a16a:	46c0      	nop			@ (mov r8, r8)
 800a16c:	2000005c 	.word	0x2000005c
 800a170:	20000040 	.word	0x20000040

0800a174 <ParseTime>:

void ParseTime(char* buffer) {
 800a174:	b590      	push	{r4, r7, lr}
 800a176:	b087      	sub	sp, #28
 800a178:	af02      	add	r7, sp, #8
 800a17a:	6078      	str	r0, [r7, #4]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a17c:	4a7b      	ldr	r2, [pc, #492]	@ (800a36c <ParseTime+0x1f8>)
 800a17e:	4b7c      	ldr	r3, [pc, #496]	@ (800a370 <ParseTime+0x1fc>)
 800a180:	0011      	movs	r1, r2
 800a182:	0018      	movs	r0, r3
 800a184:	f000 f96c 	bl	800a460 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2219      	movs	r2, #25
 800a18c:	2118      	movs	r1, #24
 800a18e:	0018      	movs	r0, r3
 800a190:	f7ff ff58 	bl	800a044 <aBuff2int>
 800a194:	0003      	movs	r3, r0
 800a196:	001a      	movs	r2, r3
 800a198:	4b75      	ldr	r3, [pc, #468]	@ (800a370 <ParseTime+0x1fc>)
 800a19a:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	221c      	movs	r2, #28
 800a1a0:	211b      	movs	r1, #27
 800a1a2:	0018      	movs	r0, r3
 800a1a4:	f7ff ff4e 	bl	800a044 <aBuff2int>
 800a1a8:	0003      	movs	r3, r0
 800a1aa:	001a      	movs	r2, r3
 800a1ac:	4b70      	ldr	r3, [pc, #448]	@ (800a370 <ParseTime+0x1fc>)
 800a1ae:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	221f      	movs	r2, #31
 800a1b4:	211e      	movs	r1, #30
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f7ff ff44 	bl	800a044 <aBuff2int>
 800a1bc:	0003      	movs	r3, r0
 800a1be:	001a      	movs	r2, r3
 800a1c0:	4b6b      	ldr	r3, [pc, #428]	@ (800a370 <ParseTime+0x1fc>)
 800a1c2:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2224      	movs	r2, #36	@ 0x24
 800a1c8:	2123      	movs	r1, #35	@ 0x23
 800a1ca:	0018      	movs	r0, r3
 800a1cc:	f7ff ff3a 	bl	800a044 <aBuff2int>
 800a1d0:	0003      	movs	r3, r0
 800a1d2:	001a      	movs	r2, r3
 800a1d4:	4b65      	ldr	r3, [pc, #404]	@ (800a36c <ParseTime+0x1f8>)
 800a1d6:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2213      	movs	r2, #19
 800a1dc:	2111      	movs	r1, #17
 800a1de:	0018      	movs	r0, r3
 800a1e0:	f7ff ff30 	bl	800a044 <aBuff2int>
 800a1e4:	0003      	movs	r3, r0
 800a1e6:	001a      	movs	r2, r3
 800a1e8:	4b60      	ldr	r3, [pc, #384]	@ (800a36c <ParseTime+0x1f8>)
 800a1ea:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2216      	movs	r2, #22
 800a1f0:	2115      	movs	r1, #21
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	f7ff ff26 	bl	800a044 <aBuff2int>
 800a1f8:	0003      	movs	r3, r0
 800a1fa:	001a      	movs	r2, r3
 800a1fc:	4b5b      	ldr	r3, [pc, #364]	@ (800a36c <ParseTime+0x1f8>)
 800a1fe:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	220f      	movs	r2, #15
 800a204:	210d      	movs	r1, #13
 800a206:	0018      	movs	r0, r3
 800a208:	f7ff ff1c 	bl	800a044 <aBuff2int>
 800a20c:	0003      	movs	r3, r0
 800a20e:	001a      	movs	r2, r3
 800a210:	4b56      	ldr	r3, [pc, #344]	@ (800a36c <ParseTime+0x1f8>)
 800a212:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a214:	4b56      	ldr	r3, [pc, #344]	@ (800a370 <ParseTime+0x1fc>)
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	001c      	movs	r4, r3
 800a21a:	4b55      	ldr	r3, [pc, #340]	@ (800a370 <ParseTime+0x1fc>)
 800a21c:	785b      	ldrb	r3, [r3, #1]
 800a21e:	0018      	movs	r0, r3
 800a220:	4b53      	ldr	r3, [pc, #332]	@ (800a370 <ParseTime+0x1fc>)
 800a222:	789b      	ldrb	r3, [r3, #2]
 800a224:	4a53      	ldr	r2, [pc, #332]	@ (800a374 <ParseTime+0x200>)
 800a226:	4954      	ldr	r1, [pc, #336]	@ (800a378 <ParseTime+0x204>)
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	9000      	str	r0, [sp, #0]
 800a22c:	0023      	movs	r3, r4
 800a22e:	2003      	movs	r0, #3
 800a230:	f009 fda8 	bl	8013d84 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800a234:	4b4d      	ldr	r3, [pc, #308]	@ (800a36c <ParseTime+0x1f8>)
 800a236:	789b      	ldrb	r3, [r3, #2]
 800a238:	001c      	movs	r4, r3
 800a23a:	4b4c      	ldr	r3, [pc, #304]	@ (800a36c <ParseTime+0x1f8>)
 800a23c:	785b      	ldrb	r3, [r3, #1]
 800a23e:	0018      	movs	r0, r3
 800a240:	4b4a      	ldr	r3, [pc, #296]	@ (800a36c <ParseTime+0x1f8>)
 800a242:	78db      	ldrb	r3, [r3, #3]
 800a244:	4a4d      	ldr	r2, [pc, #308]	@ (800a37c <ParseTime+0x208>)
 800a246:	494c      	ldr	r1, [pc, #304]	@ (800a378 <ParseTime+0x204>)
 800a248:	9301      	str	r3, [sp, #4]
 800a24a:	9000      	str	r0, [sp, #0]
 800a24c:	0023      	movs	r3, r4
 800a24e:	2003      	movs	r0, #3
 800a250:	f009 fd98 	bl	8013d84 <CreateLine>
  RTC_SetTime(&currentTime);
 800a254:	4b46      	ldr	r3, [pc, #280]	@ (800a370 <ParseTime+0x1fc>)
 800a256:	0018      	movs	r0, r3
 800a258:	f000 f89e 	bl	800a398 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800a25c:	4b43      	ldr	r3, [pc, #268]	@ (800a36c <ParseTime+0x1f8>)
 800a25e:	0018      	movs	r0, r3
 800a260:	f000 f8c0 	bl	800a3e4 <RTC_SetDate>
/* DST insert === */
  // DST == DaySavingTime == Zomertijd
  bool dst = false;
 800a264:	230f      	movs	r3, #15
 800a266:	18fb      	adds	r3, r7, r3
 800a268:	2200      	movs	r2, #0
 800a26a:	701a      	strb	r2, [r3, #0]

  int mnd = currentDate.Month;
 800a26c:	4b3f      	ldr	r3, [pc, #252]	@ (800a36c <ParseTime+0x1f8>)
 800a26e:	785b      	ldrb	r3, [r3, #1]
 800a270:	60bb      	str	r3, [r7, #8]
  dst = !((mnd < 3) || (mnd > 10)); // between october and march
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2b02      	cmp	r3, #2
 800a276:	dd04      	ble.n	800a282 <ParseTime+0x10e>
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2b0a      	cmp	r3, #10
 800a27c:	dc01      	bgt.n	800a282 <ParseTime+0x10e>
 800a27e:	2201      	movs	r2, #1
 800a280:	e000      	b.n	800a284 <ParseTime+0x110>
 800a282:	2200      	movs	r2, #0
 800a284:	200f      	movs	r0, #15
 800a286:	183b      	adds	r3, r7, r0
 800a288:	701a      	strb	r2, [r3, #0]
 800a28a:	781a      	ldrb	r2, [r3, #0]
 800a28c:	2101      	movs	r1, #1
 800a28e:	400a      	ands	r2, r1
 800a290:	701a      	strb	r2, [r3, #0]
  if (dst)
 800a292:	0002      	movs	r2, r0
 800a294:	18bb      	adds	r3, r7, r2
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d01d      	beq.n	800a2d8 <ParseTime+0x164>
  {
    if ((mnd == 3) && (currentDate.WeekDay == 7) && (currentDate.Date < 25)) {
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	d10b      	bne.n	800a2ba <ParseTime+0x146>
 800a2a2:	4b32      	ldr	r3, [pc, #200]	@ (800a36c <ParseTime+0x1f8>)
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b07      	cmp	r3, #7
 800a2a8:	d107      	bne.n	800a2ba <ParseTime+0x146>
 800a2aa:	4b30      	ldr	r3, [pc, #192]	@ (800a36c <ParseTime+0x1f8>)
 800a2ac:	789b      	ldrb	r3, [r3, #2]
 800a2ae:	2b18      	cmp	r3, #24
 800a2b0:	d803      	bhi.n	800a2ba <ParseTime+0x146>
      // starts last sunday of march
      // weekday -> sunday returns 7
        dst = false;
 800a2b2:	18bb      	adds	r3, r7, r2
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	701a      	strb	r2, [r3, #0]
 800a2b8:	e00e      	b.n	800a2d8 <ParseTime+0x164>
    }
    else if ((mnd == 10) && (currentDate.WeekDay == 7) && (currentDate.Date < 25))
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	2b0a      	cmp	r3, #10
 800a2be:	d10b      	bne.n	800a2d8 <ParseTime+0x164>
 800a2c0:	4b2a      	ldr	r3, [pc, #168]	@ (800a36c <ParseTime+0x1f8>)
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	2b07      	cmp	r3, #7
 800a2c6:	d107      	bne.n	800a2d8 <ParseTime+0x164>
 800a2c8:	4b28      	ldr	r3, [pc, #160]	@ (800a36c <ParseTime+0x1f8>)
 800a2ca:	789b      	ldrb	r3, [r3, #2]
 800a2cc:	2b18      	cmp	r3, #24
 800a2ce:	d803      	bhi.n	800a2d8 <ParseTime+0x164>
    {
        dst = false;
 800a2d0:	230f      	movs	r3, #15
 800a2d2:	18fb      	adds	r3, r7, r3
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	701a      	strb	r2, [r3, #0]
    }
  }
  if (dst) {
 800a2d8:	230f      	movs	r3, #15
 800a2da:	18fb      	adds	r3, r7, r3
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d02a      	beq.n	800a338 <ParseTime+0x1c4>
    Info("Daylight Saving Time active");
 800a2e2:	4a27      	ldr	r2, [pc, #156]	@ (800a380 <ParseTime+0x20c>)
 800a2e4:	4b27      	ldr	r3, [pc, #156]	@ (800a384 <ParseTime+0x210>)
 800a2e6:	0019      	movs	r1, r3
 800a2e8:	2002      	movs	r0, #2
 800a2ea:	f009 fd4b 	bl	8013d84 <CreateLine>
    HAL_Delay(1000);
 800a2ee:	23fa      	movs	r3, #250	@ 0xfa
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	f00a fac8 	bl	8014888 <HAL_Delay>
    HAL_RTC_DST_Add1Hour(RealTime_Handle); // CEST or CET
 800a2f8:	4b23      	ldr	r3, [pc, #140]	@ (800a388 <ParseTime+0x214>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	f012 f955 	bl	801c5ac <HAL_RTC_DST_Add1Hour>
    HAL_Delay(1000);
 800a302:	23fa      	movs	r3, #250	@ 0xfa
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	0018      	movs	r0, r3
 800a308:	f00a fabe 	bl	8014888 <HAL_Delay>
    RTC_GetTime(&currentTime, &currentDate);
 800a30c:	4a17      	ldr	r2, [pc, #92]	@ (800a36c <ParseTime+0x1f8>)
 800a30e:	4b18      	ldr	r3, [pc, #96]	@ (800a370 <ParseTime+0x1fc>)
 800a310:	0011      	movs	r1, r2
 800a312:	0018      	movs	r0, r3
 800a314:	f000 f8a4 	bl	800a460 <RTC_GetTime>
    Debug("Current RTC time after update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a318:	4b15      	ldr	r3, [pc, #84]	@ (800a370 <ParseTime+0x1fc>)
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	001c      	movs	r4, r3
 800a31e:	4b14      	ldr	r3, [pc, #80]	@ (800a370 <ParseTime+0x1fc>)
 800a320:	785b      	ldrb	r3, [r3, #1]
 800a322:	0018      	movs	r0, r3
 800a324:	4b12      	ldr	r3, [pc, #72]	@ (800a370 <ParseTime+0x1fc>)
 800a326:	789b      	ldrb	r3, [r3, #2]
 800a328:	4a18      	ldr	r2, [pc, #96]	@ (800a38c <ParseTime+0x218>)
 800a32a:	4913      	ldr	r1, [pc, #76]	@ (800a378 <ParseTime+0x204>)
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	9000      	str	r0, [sp, #0]
 800a330:	0023      	movs	r3, r4
 800a332:	2003      	movs	r0, #3
 800a334:	f009 fd26 	bl	8013d84 <CreateLine>
  }

//=================
  if (currentDate.WeekDay == 2) {
 800a338:	4b0c      	ldr	r3, [pc, #48]	@ (800a36c <ParseTime+0x1f8>)
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d104      	bne.n	800a34a <ParseTime+0x1d6>
    reset_fanCleaningDone(); // reset the cleaning flag done
 800a340:	f004 fa0c 	bl	800e75c <reset_fanCleaningDone>
    dstchkd = false; // reset the dst flag done
 800a344:	4b12      	ldr	r3, [pc, #72]	@ (800a390 <ParseTime+0x21c>)
 800a346:	2200      	movs	r2, #0
 800a348:	701a      	strb	r2, [r3, #0]
  }
  if (posixBootTime == 0) {
 800a34a:	4b12      	ldr	r3, [pc, #72]	@ (800a394 <ParseTime+0x220>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d108      	bne.n	800a364 <ParseTime+0x1f0>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800a352:	4a07      	ldr	r2, [pc, #28]	@ (800a370 <ParseTime+0x1fc>)
 800a354:	4b05      	ldr	r3, [pc, #20]	@ (800a36c <ParseTime+0x1f8>)
 800a356:	0011      	movs	r1, r2
 800a358:	0018      	movs	r0, r3
 800a35a:	f000 fa81 	bl	800a860 <makeTime>
 800a35e:	0002      	movs	r2, r0
 800a360:	4b0c      	ldr	r3, [pc, #48]	@ (800a394 <ParseTime+0x220>)
 800a362:	601a      	str	r2, [r3, #0]
  }
}
 800a364:	46c0      	nop			@ (mov r8, r8)
 800a366:	46bd      	mov	sp, r7
 800a368:	b005      	add	sp, #20
 800a36a:	bd90      	pop	{r4, r7, pc}
 800a36c:	20000e68 	.word	0x20000e68
 800a370:	20000e54 	.word	0x20000e54
 800a374:	0802bd7c 	.word	0x0802bd7c
 800a378:	0802bdb4 	.word	0x0802bdb4
 800a37c:	0802bdb8 	.word	0x0802bdb8
 800a380:	0802bdec 	.word	0x0802bdec
 800a384:	0802bd78 	.word	0x0802bd78
 800a388:	20000e50 	.word	0x20000e50
 800a38c:	0802be08 	.word	0x0802be08
 800a390:	20000e40 	.word	0x20000e40
 800a394:	20000e44 	.word	0x20000e44

0800a398 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a3b2:	4b09      	ldr	r3, [pc, #36]	@ (800a3d8 <RTC_SetTime+0x40>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	0018      	movs	r0, r3
 800a3bc:	f011 fee2 	bl	801c184 <HAL_RTC_SetTime>
 800a3c0:	1e03      	subs	r3, r0, #0
 800a3c2:	d005      	beq.n	800a3d0 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 800a3c4:	4a05      	ldr	r2, [pc, #20]	@ (800a3dc <RTC_SetTime+0x44>)
 800a3c6:	4b06      	ldr	r3, [pc, #24]	@ (800a3e0 <RTC_SetTime+0x48>)
 800a3c8:	0019      	movs	r1, r3
 800a3ca:	2001      	movs	r0, #1
 800a3cc:	f009 fcda 	bl	8013d84 <CreateLine>
    }
}
 800a3d0:	46c0      	nop			@ (mov r8, r8)
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	b002      	add	sp, #8
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20000e50 	.word	0x20000e50
 800a3dc:	0802be3c 	.word	0x0802be3c
 800a3e0:	0802be58 	.word	0x0802be58

0800a3e4 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a3ec:	4b16      	ldr	r3, [pc, #88]	@ (800a448 <RTC_SetDate+0x64>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6879      	ldr	r1, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	0018      	movs	r0, r3
 800a3f6:	f011 ffcd 	bl	801c394 <HAL_RTC_SetDate>
 800a3fa:	1e03      	subs	r3, r0, #0
 800a3fc:	d005      	beq.n	800a40a <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800a3fe:	4a13      	ldr	r2, [pc, #76]	@ (800a44c <RTC_SetDate+0x68>)
 800a400:	4b13      	ldr	r3, [pc, #76]	@ (800a450 <RTC_SetDate+0x6c>)
 800a402:	0019      	movs	r1, r3
 800a404:	2001      	movs	r0, #1
 800a406:	f009 fcbd 	bl	8013d84 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800a40a:	4b0f      	ldr	r3, [pc, #60]	@ (800a448 <RTC_SetDate+0x64>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2101      	movs	r1, #1
 800a410:	0018      	movs	r0, r3
 800a412:	f012 fb23 	bl	801ca5c <HAL_RTCEx_BKUPRead>
 800a416:	0003      	movs	r3, r0
 800a418:	4a0e      	ldr	r2, [pc, #56]	@ (800a454 <RTC_SetDate+0x70>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d010      	beq.n	800a440 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800a41e:	4a0e      	ldr	r2, [pc, #56]	@ (800a458 <RTC_SetDate+0x74>)
 800a420:	4b0e      	ldr	r3, [pc, #56]	@ (800a45c <RTC_SetDate+0x78>)
 800a422:	0019      	movs	r1, r3
 800a424:	2003      	movs	r0, #3
 800a426:	f009 fcad 	bl	8013d84 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800a42a:	f010 fe41 	bl	801b0b0 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800a42e:	4b06      	ldr	r3, [pc, #24]	@ (800a448 <RTC_SetDate+0x64>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a08      	ldr	r2, [pc, #32]	@ (800a454 <RTC_SetDate+0x70>)
 800a434:	2101      	movs	r1, #1
 800a436:	0018      	movs	r0, r3
 800a438:	f012 faf8 	bl	801ca2c <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 800a43c:	f010 fe46 	bl	801b0cc <HAL_PWR_DisableBkUpAccess>
    }
}
 800a440:	46c0      	nop			@ (mov r8, r8)
 800a442:	46bd      	mov	sp, r7
 800a444:	b002      	add	sp, #8
 800a446:	bd80      	pop	{r7, pc}
 800a448:	20000e50 	.word	0x20000e50
 800a44c:	0802be5c 	.word	0x0802be5c
 800a450:	0802be58 	.word	0x0802be58
 800a454:	0000bebe 	.word	0x0000bebe
 800a458:	0802be78 	.word	0x0802be78
 800a45c:	0802bdb4 	.word	0x0802bdb4

0800a460 <RTC_GetTime>:

void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800a460:	b590      	push	{r4, r7, lr}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800a46a:	240f      	movs	r4, #15
 800a46c:	193b      	adds	r3, r7, r4
 800a46e:	2201      	movs	r2, #1
 800a470:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800a472:	230e      	movs	r3, #14
 800a474:	18fb      	adds	r3, r7, r3
 800a476:	2200      	movs	r2, #0
 800a478:	701a      	strb	r2, [r3, #0]
// Battery_Status status;
//  status = powerCheck();
//  if ( status == BATTERY_CRITICAL) {
  if (batteryCharge  < 3.77) {
 800a47a:	4b31      	ldr	r3, [pc, #196]	@ (800a540 <RTC_GetTime+0xe0>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	1c18      	adds	r0, r3, #0
 800a480:	f7f9 fa08 	bl	8003894 <__aeabi_f2d>
 800a484:	4a2f      	ldr	r2, [pc, #188]	@ (800a544 <RTC_GetTime+0xe4>)
 800a486:	4b30      	ldr	r3, [pc, #192]	@ (800a548 <RTC_GetTime+0xe8>)
 800a488:	f7f6 f818 	bl	80004bc <__aeabi_dcmplt>
 800a48c:	1e03      	subs	r3, r0, #0
 800a48e:	d004      	beq.n	800a49a <RTC_GetTime+0x3a>
    //    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800a490:	193b      	adds	r3, r7, r4
 800a492:	781a      	ldrb	r2, [r3, #0]
 800a494:	193b      	adds	r3, r7, r4
 800a496:	3201      	adds	r2, #1
 800a498:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800a49a:	230d      	movs	r3, #13
 800a49c:	18fb      	adds	r3, r7, r3
 800a49e:	2200      	movs	r2, #0
 800a4a0:	701a      	strb	r2, [r3, #0]
 800a4a2:	e03f      	b.n	800a524 <RTC_GetTime+0xc4>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a4a4:	4b29      	ldr	r3, [pc, #164]	@ (800a54c <RTC_GetTime+0xec>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6879      	ldr	r1, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	0018      	movs	r0, r3
 800a4ae:	f011 ff13 	bl	801c2d8 <HAL_RTC_GetTime>
 800a4b2:	1e03      	subs	r3, r0, #0
 800a4b4:	d005      	beq.n	800a4c2 <RTC_GetTime+0x62>
      Error("Error getting time from RTC");
 800a4b6:	4a26      	ldr	r2, [pc, #152]	@ (800a550 <RTC_GetTime+0xf0>)
 800a4b8:	4b26      	ldr	r3, [pc, #152]	@ (800a554 <RTC_GetTime+0xf4>)
 800a4ba:	0019      	movs	r1, r3
 800a4bc:	2001      	movs	r0, #1
 800a4be:	f009 fc61 	bl	8013d84 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a4c2:	4b22      	ldr	r3, [pc, #136]	@ (800a54c <RTC_GetTime+0xec>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	f011 fff6 	bl	801c4bc <HAL_RTC_GetDate>
 800a4d0:	1e03      	subs	r3, r0, #0
 800a4d2:	d005      	beq.n	800a4e0 <RTC_GetTime+0x80>
      Error("Error getting date from RTC");
 800a4d4:	4a20      	ldr	r2, [pc, #128]	@ (800a558 <RTC_GetTime+0xf8>)
 800a4d6:	4b1f      	ldr	r3, [pc, #124]	@ (800a554 <RTC_GetTime+0xf4>)
 800a4d8:	0019      	movs	r1, r3
 800a4da:	2001      	movs	r0, #1
 800a4dc:	f009 fc52 	bl	8013d84 <CreateLine>
    }
//    if ( status == BATTERY_CRITICAL) {
    if (batteryCharge  < 3.77) {
 800a4e0:	4b17      	ldr	r3, [pc, #92]	@ (800a540 <RTC_GetTime+0xe0>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	1c18      	adds	r0, r3, #0
 800a4e6:	f7f9 f9d5 	bl	8003894 <__aeabi_f2d>
 800a4ea:	4a16      	ldr	r2, [pc, #88]	@ (800a544 <RTC_GetTime+0xe4>)
 800a4ec:	4b16      	ldr	r3, [pc, #88]	@ (800a548 <RTC_GetTime+0xe8>)
 800a4ee:	f7f5 ffe5 	bl	80004bc <__aeabi_dcmplt>
 800a4f2:	1e03      	subs	r3, r0, #0
 800a4f4:	d010      	beq.n	800a518 <RTC_GetTime+0xb8>
      if (prevValue != gTime->Hours) {
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	210e      	movs	r1, #14
 800a4fc:	187a      	adds	r2, r7, r1
 800a4fe:	7812      	ldrb	r2, [r2, #0]
 800a500:	429a      	cmp	r2, r3
 800a502:	d018      	beq.n	800a536 <RTC_GetTime+0xd6>
        prevValue = gTime->Hours;
 800a504:	187b      	adds	r3, r7, r1
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	7812      	ldrb	r2, [r2, #0]
 800a50a:	701a      	strb	r2, [r3, #0]
        t++;
 800a50c:	210f      	movs	r1, #15
 800a50e:	187b      	adds	r3, r7, r1
 800a510:	781a      	ldrb	r2, [r3, #0]
 800a512:	187b      	adds	r3, r7, r1
 800a514:	3201      	adds	r2, #1
 800a516:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800a518:	210d      	movs	r1, #13
 800a51a:	187b      	adds	r3, r7, r1
 800a51c:	781a      	ldrb	r2, [r3, #0]
 800a51e:	187b      	adds	r3, r7, r1
 800a520:	3201      	adds	r2, #1
 800a522:	701a      	strb	r2, [r3, #0]
 800a524:	230d      	movs	r3, #13
 800a526:	18fa      	adds	r2, r7, r3
 800a528:	230f      	movs	r3, #15
 800a52a:	18fb      	adds	r3, r7, r3
 800a52c:	7812      	ldrb	r2, [r2, #0]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d3b7      	bcc.n	800a4a4 <RTC_GetTime+0x44>
 800a534:	e000      	b.n	800a538 <RTC_GetTime+0xd8>
      }
      else {
        return;
 800a536:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800a538:	46bd      	mov	sp, r7
 800a53a:	b005      	add	sp, #20
 800a53c:	bd90      	pop	{r4, r7, pc}
 800a53e:	46c0      	nop			@ (mov r8, r8)
 800a540:	20002158 	.word	0x20002158
 800a544:	c28f5c29 	.word	0xc28f5c29
 800a548:	400e28f5 	.word	0x400e28f5
 800a54c:	20000e50 	.word	0x20000e50
 800a550:	0802be90 	.word	0x0802be90
 800a554:	0802be58 	.word	0x0802be58
 800a558:	0802beac 	.word	0x0802beac

0800a55c <getPosixTime>:

// Functie om de tijd uit te lezen
uint32_t getPosixTime(void) {
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a560:	4a07      	ldr	r2, [pc, #28]	@ (800a580 <getPosixTime+0x24>)
 800a562:	4b08      	ldr	r3, [pc, #32]	@ (800a584 <getPosixTime+0x28>)
 800a564:	0011      	movs	r1, r2
 800a566:	0018      	movs	r0, r3
 800a568:	f7ff ff7a 	bl	800a460 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800a56c:	4a05      	ldr	r2, [pc, #20]	@ (800a584 <getPosixTime+0x28>)
 800a56e:	4b04      	ldr	r3, [pc, #16]	@ (800a580 <getPosixTime+0x24>)
 800a570:	0011      	movs	r1, r2
 800a572:	0018      	movs	r0, r3
 800a574:	f000 f974 	bl	800a860 <makeTime>
 800a578:	0003      	movs	r3, r0
}
 800a57a:	0018      	movs	r0, r3
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	20000e68 	.word	0x20000e68
 800a584:	20000e54 	.word	0x20000e54

0800a588 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 800a588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a58a:	b087      	sub	sp, #28
 800a58c:	af04      	add	r7, sp, #16
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800a592:	4a12      	ldr	r2, [pc, #72]	@ (800a5dc <getUTCfromPosixTime+0x54>)
 800a594:	4912      	ldr	r1, [pc, #72]	@ (800a5e0 <getUTCfromPosixTime+0x58>)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	0018      	movs	r0, r3
 800a59a:	f000 fa2b 	bl	800a9f4 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a59e:	4b10      	ldr	r3, [pc, #64]	@ (800a5e0 <getUTCfromPosixTime+0x58>)
 800a5a0:	789b      	ldrb	r3, [r3, #2]
 800a5a2:	001e      	movs	r6, r3
 800a5a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a5e0 <getUTCfromPosixTime+0x58>)
 800a5a6:	785b      	ldrb	r3, [r3, #1]
 800a5a8:	469c      	mov	ip, r3
 800a5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e0 <getUTCfromPosixTime+0x58>)
 800a5ac:	78db      	ldrb	r3, [r3, #3]
 800a5ae:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a5dc <getUTCfromPosixTime+0x54>)
 800a5b2:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a5b4:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a5b6:	4b09      	ldr	r3, [pc, #36]	@ (800a5dc <getUTCfromPosixTime+0x54>)
 800a5b8:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a5ba:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a5bc:	4b07      	ldr	r3, [pc, #28]	@ (800a5dc <getUTCfromPosixTime+0x54>)
 800a5be:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a5c0:	4908      	ldr	r1, [pc, #32]	@ (800a5e4 <getUTCfromPosixTime+0x5c>)
 800a5c2:	6838      	ldr	r0, [r7, #0]
 800a5c4:	9303      	str	r3, [sp, #12]
 800a5c6:	9502      	str	r5, [sp, #8]
 800a5c8:	9401      	str	r4, [sp, #4]
 800a5ca:	9200      	str	r2, [sp, #0]
 800a5cc:	4663      	mov	r3, ip
 800a5ce:	0032      	movs	r2, r6
 800a5d0:	f01b fe02 	bl	80261d8 <siprintf>
}
 800a5d4:	46c0      	nop			@ (mov r8, r8)
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	b003      	add	sp, #12
 800a5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5dc:	20000e54 	.word	0x20000e54
 800a5e0:	20000e68 	.word	0x20000e68
 800a5e4:	0802bec8 	.word	0x0802bec8

0800a5e8 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800a5f0:	4b10      	ldr	r3, [pc, #64]	@ (800a634 <RTC_SetWakeUpTimer+0x4c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	0018      	movs	r0, r3
 800a5f6:	f012 f97d 	bl	801c8f4 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800a5fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a634 <RTC_SetWakeUpTimer+0x4c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	22ff      	movs	r2, #255	@ 0xff
 800a604:	401a      	ands	r2, r3
 800a606:	4b0b      	ldr	r3, [pc, #44]	@ (800a634 <RTC_SetWakeUpTimer+0x4c>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	490a      	ldr	r1, [pc, #40]	@ (800a638 <RTC_SetWakeUpTimer+0x50>)
 800a60e:	430a      	orrs	r2, r1
 800a610:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a612:	4b0a      	ldr	r3, [pc, #40]	@ (800a63c <RTC_SetWakeUpTimer+0x54>)
 800a614:	2280      	movs	r2, #128	@ 0x80
 800a616:	0352      	lsls	r2, r2, #13
 800a618:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800a61a:	4b06      	ldr	r3, [pc, #24]	@ (800a634 <RTC_SetWakeUpTimer+0x4c>)
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	3b01      	subs	r3, #1
 800a622:	2204      	movs	r2, #4
 800a624:	0019      	movs	r1, r3
 800a626:	f012 f88d 	bl	801c744 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800a62a:	46c0      	nop			@ (mov r8, r8)
 800a62c:	46bd      	mov	sp, r7
 800a62e:	b002      	add	sp, #8
 800a630:	bd80      	pop	{r7, pc}
 800a632:	46c0      	nop			@ (mov r8, r8)
 800a634:	20000e50 	.word	0x20000e50
 800a638:	fffffb7f 	.word	0xfffffb7f
 800a63c:	40010400 	.word	0x40010400

0800a640 <Enter_Stop_Mode_for_empty_battery>:
  HAL_PWR_EnterSTANDBYMode(); // Not such a good idea, the esp is powered when gpio is high impedance
}
*/

void Enter_Stop_Mode_for_empty_battery(uint16_t sleepTime)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af02      	add	r7, sp, #8
 800a646:	0002      	movs	r2, r0
 800a648:	1dbb      	adds	r3, r7, #6
 800a64a:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a64c:	4b22      	ldr	r3, [pc, #136]	@ (800a6d8 <Enter_Stop_Mode_for_empty_battery+0x98>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d001      	beq.n	800a658 <Enter_Stop_Mode_for_empty_battery+0x18>
    sen5x_Power_Off();
 800a654:	f004 f856 	bl	800e704 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", batteryCharge);
 800a658:	4b20      	ldr	r3, [pc, #128]	@ (800a6dc <Enter_Stop_Mode_for_empty_battery+0x9c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	1c18      	adds	r0, r3, #0
 800a65e:	f7f9 f919 	bl	8003894 <__aeabi_f2d>
 800a662:	0002      	movs	r2, r0
 800a664:	000b      	movs	r3, r1
 800a666:	481e      	ldr	r0, [pc, #120]	@ (800a6e0 <Enter_Stop_Mode_for_empty_battery+0xa0>)
 800a668:	491e      	ldr	r1, [pc, #120]	@ (800a6e4 <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a66a:	9200      	str	r2, [sp, #0]
 800a66c:	9301      	str	r3, [sp, #4]
 800a66e:	0002      	movs	r2, r0
 800a670:	2002      	movs	r0, #2
 800a672:	f009 fb87 	bl	8013d84 <CreateLine>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a676:	1dbb      	adds	r3, r7, #6
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	4a1b      	ldr	r2, [pc, #108]	@ (800a6e8 <Enter_Stop_Mode_for_empty_battery+0xa8>)
 800a67c:	491b      	ldr	r1, [pc, #108]	@ (800a6ec <Enter_Stop_Mode_for_empty_battery+0xac>)
 800a67e:	2003      	movs	r0, #3
 800a680:	f009 fb80 	bl	8013d84 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a684:	f7ff ff6a 	bl	800a55c <getPosixTime>
 800a688:	0002      	movs	r2, r0
 800a68a:	1dbb      	adds	r3, r7, #6
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	18d3      	adds	r3, r2, r3
 800a690:	4a17      	ldr	r2, [pc, #92]	@ (800a6f0 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a692:	0011      	movs	r1, r2
 800a694:	0018      	movs	r0, r3
 800a696:	f7ff ff77 	bl	800a588 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a69a:	4b15      	ldr	r3, [pc, #84]	@ (800a6f0 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a69c:	4a15      	ldr	r2, [pc, #84]	@ (800a6f4 <Enter_Stop_Mode_for_empty_battery+0xb4>)
 800a69e:	4911      	ldr	r1, [pc, #68]	@ (800a6e4 <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a6a0:	2002      	movs	r0, #2
 800a6a2:	f009 fb6f 	bl	8013d84 <CreateLine>
  HAL_Delay(100);
 800a6a6:	2064      	movs	r0, #100	@ 0x64
 800a6a8:	f00a f8ee 	bl	8014888 <HAL_Delay>
  HAL_SuspendTick();
 800a6ac:	f00a f910 	bl	80148d0 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a6b0:	1dbb      	adds	r3, r7, #6
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	f7ff ff97 	bl	800a5e8 <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	2001      	movs	r0, #1
 800a6be:	f010 fd15 	bl	801b0ec <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a6c2:	f002 fd05 	bl	800d0d0 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a6c6:	f00a f911 	bl	80148ec <HAL_ResumeTick>
  showTime();
 800a6ca:	f7ff fbad 	bl	8009e28 <showTime>
}
 800a6ce:	46c0      	nop			@ (mov r8, r8)
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	b002      	add	sp, #8
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	46c0      	nop			@ (mov r8, r8)
 800a6d8:	200011bd 	.word	0x200011bd
 800a6dc:	20002158 	.word	0x20002158
 800a6e0:	0802bf1c 	.word	0x0802bf1c
 800a6e4:	0802bd78 	.word	0x0802bd78
 800a6e8:	0802bf34 	.word	0x0802bf34
 800a6ec:	0802bdb4 	.word	0x0802bdb4
 800a6f0:	20000e6c 	.word	0x20000e6c
 800a6f4:	0802bf58 	.word	0x0802bf58

0800a6f8 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	0002      	movs	r2, r0
 800a700:	1dbb      	adds	r3, r7, #6
 800a702:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a704:	4b45      	ldr	r3, [pc, #276]	@ (800a81c <Enter_Stop_Mode+0x124>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 800a70c:	f003 fffa 	bl	800e704 <sen5x_Power_Off>
  }
//  Info("Battery voltage %.02fV", batteryCharge);
  batteryChargeCheck();
 800a710:	f007 ff80 	bl	8012614 <batteryChargeCheck>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a714:	1dbb      	adds	r3, r7, #6
 800a716:	881b      	ldrh	r3, [r3, #0]
 800a718:	4a41      	ldr	r2, [pc, #260]	@ (800a820 <Enter_Stop_Mode+0x128>)
 800a71a:	4942      	ldr	r1, [pc, #264]	@ (800a824 <Enter_Stop_Mode+0x12c>)
 800a71c:	2003      	movs	r0, #3
 800a71e:	f009 fb31 	bl	8013d84 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a722:	f7ff ff1b 	bl	800a55c <getPosixTime>
 800a726:	0002      	movs	r2, r0
 800a728:	1dbb      	adds	r3, r7, #6
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	18d3      	adds	r3, r2, r3
 800a72e:	4a3e      	ldr	r2, [pc, #248]	@ (800a828 <Enter_Stop_Mode+0x130>)
 800a730:	0011      	movs	r1, r2
 800a732:	0018      	movs	r0, r3
 800a734:	f7ff ff28 	bl	800a588 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a738:	4b3b      	ldr	r3, [pc, #236]	@ (800a828 <Enter_Stop_Mode+0x130>)
 800a73a:	4a3c      	ldr	r2, [pc, #240]	@ (800a82c <Enter_Stop_Mode+0x134>)
 800a73c:	493c      	ldr	r1, [pc, #240]	@ (800a830 <Enter_Stop_Mode+0x138>)
 800a73e:	2002      	movs	r0, #2
 800a740:	f009 fb20 	bl	8013d84 <CreateLine>
  HAL_Delay(100);
 800a744:	2064      	movs	r0, #100	@ 0x64
 800a746:	f00a f89f 	bl	8014888 <HAL_Delay>
  HAL_SuspendTick();
 800a74a:	f00a f8c1 	bl	80148d0 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a74e:	1dbb      	adds	r3, r7, #6
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	0018      	movs	r0, r3
 800a754:	f7ff ff48 	bl	800a5e8 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a758:	2101      	movs	r1, #1
 800a75a:	2001      	movs	r0, #1
 800a75c:	f010 fcc6 	bl	801b0ec <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a760:	f002 fcb6 	bl	800d0d0 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a764:	f00a f8c2 	bl	80148ec <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 800a768:	1dbb      	adds	r3, r7, #6
 800a76a:	881b      	ldrh	r3, [r3, #0]
 800a76c:	0018      	movs	r0, r3
 800a76e:	f003 ff3d 	bl	800e5ec <sen5x_enable>
 800a772:	1e03      	subs	r3, r0, #0
 800a774:	d01e      	beq.n	800a7b4 <Enter_Stop_Mode+0xbc>
    showTime();
 800a776:	f7ff fb57 	bl	8009e28 <showTime>
    set_light_on_state();
 800a77a:	f004 fc93 	bl	800f0a4 <set_light_on_state>
    if (!userToggle) {
 800a77e:	4b2d      	ldr	r3, [pc, #180]	@ (800a834 <Enter_Stop_Mode+0x13c>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2201      	movs	r2, #1
 800a784:	4053      	eors	r3, r2
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d013      	beq.n	800a7b4 <Enter_Stop_Mode+0xbc>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 800a78c:	201c      	movs	r0, #28
 800a78e:	f7ff ff2b 	bl	800a5e8 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 800a792:	4a23      	ldr	r2, [pc, #140]	@ (800a820 <Enter_Stop_Mode+0x128>)
 800a794:	4923      	ldr	r1, [pc, #140]	@ (800a824 <Enter_Stop_Mode+0x12c>)
 800a796:	231c      	movs	r3, #28
 800a798:	2003      	movs	r0, #3
 800a79a:	f009 faf3 	bl	8013d84 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a79e:	2101      	movs	r1, #1
 800a7a0:	2001      	movs	r0, #1
 800a7a2:	f010 fca3 	bl	801b0ec <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800a7a6:	f002 fc93 	bl	800d0d0 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 800a7aa:	f00a f89f 	bl	80148ec <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	f003 fefa 	bl	800e5a8 <setsen5xReadTimer>
    }
  }
  showTime();
 800a7b4:	f7ff fb38 	bl	8009e28 <showTime>
  EnabledConnectedDevices();
 800a7b8:	f003 fa8a 	bl	800dcd0 <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 800a7bc:	f003 fb8a 	bl	800ded4 <ResetDBACalculator>
  ResetSGP40samplecounter();
 800a7c0:	f006 fae8 	bl	8010d94 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 800a7c4:	f7f9 f9ba 	bl	8003b3c <ResetENS160samplecounter>
  SetBatteryReadTimer(0);
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	f002 f965 	bl	800ca98 <SetBatteryReadTimer>
  setsen5xSamplecounter(0);
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	f003 fefc 	bl	800e5cc <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 800a7d4:	4b18      	ldr	r3, [pc, #96]	@ (800a838 <Enter_Stop_Mode+0x140>)
 800a7d6:	0018      	movs	r0, r3
 800a7d8:	f7fa f864 	bl	80048a4 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800a7dc:	201e      	movs	r0, #30
 800a7de:	f006 fac7 	bl	8010d70 <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 800a7e2:	205a      	movs	r0, #90	@ 0x5a
 800a7e4:	f009 fd64 	bl	80142b0 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800a7e8:	203c      	movs	r0, #60	@ 0x3c
 800a7ea:	f000 fb95 	bl	800af18 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 800a7ee:	205a      	movs	r0, #90	@ 0x5a
 800a7f0:	f000 ff6e 	bl	800b6d0 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	f7f9 f9ab 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	f003 fb58 	bl	800deb0 <setMICTimeStamp>
  ESPTransmitDone = false;
 800a800:	4b0e      	ldr	r3, [pc, #56]	@ (800a83c <Enter_Stop_Mode+0x144>)
 800a802:	2200      	movs	r2, #0
 800a804:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800a806:	f00a f835 	bl	8014874 <HAL_GetTick>
 800a80a:	0003      	movs	r3, r0
 800a80c:	4a0a      	ldr	r2, [pc, #40]	@ (800a838 <Enter_Stop_Mode+0x140>)
 800a80e:	189a      	adds	r2, r3, r2
 800a810:	4b0b      	ldr	r3, [pc, #44]	@ (800a840 <Enter_Stop_Mode+0x148>)
 800a812:	601a      	str	r2, [r3, #0]
}
 800a814:	46c0      	nop			@ (mov r8, r8)
 800a816:	46bd      	mov	sp, r7
 800a818:	b002      	add	sp, #8
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	200011bd 	.word	0x200011bd
 800a820:	0802bf34 	.word	0x0802bf34
 800a824:	0802bdb4 	.word	0x0802bdb4
 800a828:	20000e6c 	.word	0x20000e6c
 800a82c:	0802bf58 	.word	0x0802bf58
 800a830:	0802bd78 	.word	0x0802bd78
 800a834:	2000214e 	.word	0x2000214e
 800a838:	00001194 	.word	0x00001194
 800a83c:	200005b3 	.word	0x200005b3
 800a840:	20001114 	.word	0x20001114

0800a844 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800a84c:	4b03      	ldr	r3, [pc, #12]	@ (800a85c <InitClock+0x18>)
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	601a      	str	r2, [r3, #0]
}
 800a852:	46c0      	nop			@ (mov r8, r8)
 800a854:	46bd      	mov	sp, r7
 800a856:	b002      	add	sp, #8
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	46c0      	nop			@ (mov r8, r8)
 800a85c:	20000e50 	.word	0x20000e50

0800a860 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	78db      	ldrb	r3, [r3, #3]
 800a86e:	001a      	movs	r2, r3
 800a870:	0013      	movs	r3, r2
 800a872:	025b      	lsls	r3, r3, #9
 800a874:	189b      	adds	r3, r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	189b      	adds	r3, r3, r2
 800a87a:	00db      	lsls	r3, r3, #3
 800a87c:	189b      	adds	r3, r3, r2
 800a87e:	011a      	lsls	r2, r3, #4
 800a880:	1ad2      	subs	r2, r2, r3
 800a882:	01d3      	lsls	r3, r2, #7
 800a884:	001a      	movs	r2, r3
 800a886:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a888:	2300      	movs	r3, #0
 800a88a:	60fb      	str	r3, [r7, #12]
 800a88c:	e028      	b.n	800a8e0 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	4a53      	ldr	r2, [pc, #332]	@ (800a9e0 <makeTime+0x180>)
 800a892:	4293      	cmp	r3, r2
 800a894:	db21      	blt.n	800a8da <makeTime+0x7a>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	4a52      	ldr	r2, [pc, #328]	@ (800a9e4 <makeTime+0x184>)
 800a89a:	4694      	mov	ip, r2
 800a89c:	4463      	add	r3, ip
 800a89e:	001a      	movs	r2, r3
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	d119      	bne.n	800a8da <makeTime+0x7a>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	4a4e      	ldr	r2, [pc, #312]	@ (800a9e4 <makeTime+0x184>)
 800a8aa:	4694      	mov	ip, r2
 800a8ac:	4463      	add	r3, ip
 800a8ae:	2164      	movs	r1, #100	@ 0x64
 800a8b0:	0018      	movs	r0, r3
 800a8b2:	f7f5 fde7 	bl	8000484 <__aeabi_idivmod>
 800a8b6:	1e0b      	subs	r3, r1, #0
 800a8b8:	d10a      	bne.n	800a8d0 <makeTime+0x70>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	4a49      	ldr	r2, [pc, #292]	@ (800a9e4 <makeTime+0x184>)
 800a8be:	4694      	mov	ip, r2
 800a8c0:	4463      	add	r3, ip
 800a8c2:	22c8      	movs	r2, #200	@ 0xc8
 800a8c4:	0051      	lsls	r1, r2, #1
 800a8c6:	0018      	movs	r0, r3
 800a8c8:	f7f5 fddc 	bl	8000484 <__aeabi_idivmod>
 800a8cc:	1e0b      	subs	r3, r1, #0
 800a8ce:	d104      	bne.n	800a8da <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	4a45      	ldr	r2, [pc, #276]	@ (800a9e8 <makeTime+0x188>)
 800a8d4:	4694      	mov	ip, r2
 800a8d6:	4463      	add	r3, ip
 800a8d8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	78db      	ldrb	r3, [r3, #3]
 800a8e4:	001a      	movs	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	dbd0      	blt.n	800a88e <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	60fb      	str	r3, [r7, #12]
 800a8f0:	e03c      	b.n	800a96c <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d125      	bne.n	800a944 <makeTime+0xe4>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	78db      	ldrb	r3, [r3, #3]
 800a8fc:	4a39      	ldr	r2, [pc, #228]	@ (800a9e4 <makeTime+0x184>)
 800a8fe:	4694      	mov	ip, r2
 800a900:	4463      	add	r3, ip
 800a902:	001a      	movs	r2, r3
 800a904:	2303      	movs	r3, #3
 800a906:	4013      	ands	r3, r2
 800a908:	d11c      	bne.n	800a944 <makeTime+0xe4>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	78db      	ldrb	r3, [r3, #3]
 800a90e:	4a35      	ldr	r2, [pc, #212]	@ (800a9e4 <makeTime+0x184>)
 800a910:	4694      	mov	ip, r2
 800a912:	4463      	add	r3, ip
 800a914:	2164      	movs	r1, #100	@ 0x64
 800a916:	0018      	movs	r0, r3
 800a918:	f7f5 fdb4 	bl	8000484 <__aeabi_idivmod>
 800a91c:	1e0b      	subs	r3, r1, #0
 800a91e:	d10b      	bne.n	800a938 <makeTime+0xd8>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	78db      	ldrb	r3, [r3, #3]
 800a924:	4a2f      	ldr	r2, [pc, #188]	@ (800a9e4 <makeTime+0x184>)
 800a926:	4694      	mov	ip, r2
 800a928:	4463      	add	r3, ip
 800a92a:	22c8      	movs	r2, #200	@ 0xc8
 800a92c:	0051      	lsls	r1, r2, #1
 800a92e:	0018      	movs	r0, r3
 800a930:	f7f5 fda8 	bl	8000484 <__aeabi_idivmod>
 800a934:	1e0b      	subs	r3, r1, #0
 800a936:	d105      	bne.n	800a944 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	4a2c      	ldr	r2, [pc, #176]	@ (800a9ec <makeTime+0x18c>)
 800a93c:	4694      	mov	ip, r2
 800a93e:	4463      	add	r3, ip
 800a940:	60bb      	str	r3, [r7, #8]
 800a942:	e010      	b.n	800a966 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3b01      	subs	r3, #1
 800a948:	4a29      	ldr	r2, [pc, #164]	@ (800a9f0 <makeTime+0x190>)
 800a94a:	5cd3      	ldrb	r3, [r2, r3]
 800a94c:	001a      	movs	r2, r3
 800a94e:	0013      	movs	r3, r2
 800a950:	005b      	lsls	r3, r3, #1
 800a952:	189b      	adds	r3, r3, r2
 800a954:	011a      	lsls	r2, r3, #4
 800a956:	1ad2      	subs	r2, r2, r3
 800a958:	0113      	lsls	r3, r2, #4
 800a95a:	1a9b      	subs	r3, r3, r2
 800a95c:	01db      	lsls	r3, r3, #7
 800a95e:	001a      	movs	r2, r3
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	189b      	adds	r3, r3, r2
 800a964:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3301      	adds	r3, #1
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	785b      	ldrb	r3, [r3, #1]
 800a970:	001a      	movs	r2, r3
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4293      	cmp	r3, r2
 800a976:	dbbc      	blt.n	800a8f2 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	789b      	ldrb	r3, [r3, #2]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	001a      	movs	r2, r3
 800a980:	0013      	movs	r3, r2
 800a982:	005b      	lsls	r3, r3, #1
 800a984:	189b      	adds	r3, r3, r2
 800a986:	011a      	lsls	r2, r3, #4
 800a988:	1ad2      	subs	r2, r2, r3
 800a98a:	0113      	lsls	r3, r2, #4
 800a98c:	1a9b      	subs	r3, r3, r2
 800a98e:	01db      	lsls	r3, r3, #7
 800a990:	001a      	movs	r2, r3
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	189b      	adds	r3, r3, r2
 800a996:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	001a      	movs	r2, r3
 800a99e:	0013      	movs	r3, r2
 800a9a0:	011b      	lsls	r3, r3, #4
 800a9a2:	1a9b      	subs	r3, r3, r2
 800a9a4:	011a      	lsls	r2, r3, #4
 800a9a6:	1ad2      	subs	r2, r2, r3
 800a9a8:	0113      	lsls	r3, r2, #4
 800a9aa:	001a      	movs	r2, r3
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	189b      	adds	r3, r3, r2
 800a9b0:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	785b      	ldrb	r3, [r3, #1]
 800a9b6:	001a      	movs	r2, r3
 800a9b8:	0013      	movs	r3, r2
 800a9ba:	011b      	lsls	r3, r3, #4
 800a9bc:	1a9b      	subs	r3, r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	001a      	movs	r2, r3
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	189b      	adds	r3, r3, r2
 800a9c6:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	789b      	ldrb	r3, [r3, #2]
 800a9cc:	001a      	movs	r2, r3
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	189b      	adds	r3, r3, r2
 800a9d2:	60bb      	str	r3, [r7, #8]
  return seconds;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
}
 800a9d6:	0018      	movs	r0, r3
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	b004      	add	sp, #16
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	46c0      	nop			@ (mov r8, r8)
 800a9e0:	fffff84f 	.word	0xfffff84f
 800a9e4:	000007b2 	.word	0x000007b2
 800a9e8:	00015180 	.word	0x00015180
 800a9ec:	00263b80 	.word	0x00263b80
 800a9f0:	0802e1c0 	.word	0x0802e1c0

0800a9f4 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a9f4:	b590      	push	{r4, r7, lr}
 800a9f6:	b089      	sub	sp, #36	@ 0x24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	213c      	movs	r1, #60	@ 0x3c
 800aa08:	0018      	movs	r0, r3
 800aa0a:	f7f5 fc51 	bl	80002b0 <__aeabi_uidivmod>
 800aa0e:	000b      	movs	r3, r1
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	213c      	movs	r1, #60	@ 0x3c
 800aa1a:	0018      	movs	r0, r3
 800aa1c:	f7f5 fbc2 	bl	80001a4 <__udivsi3>
 800aa20:	0003      	movs	r3, r0
 800aa22:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	213c      	movs	r1, #60	@ 0x3c
 800aa28:	0018      	movs	r0, r3
 800aa2a:	f7f5 fc41 	bl	80002b0 <__aeabi_uidivmod>
 800aa2e:	000b      	movs	r3, r1
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	213c      	movs	r1, #60	@ 0x3c
 800aa3a:	0018      	movs	r0, r3
 800aa3c:	f7f5 fbb2 	bl	80001a4 <__udivsi3>
 800aa40:	0003      	movs	r3, r0
 800aa42:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	2118      	movs	r1, #24
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f7f5 fc31 	bl	80002b0 <__aeabi_uidivmod>
 800aa4e:	000b      	movs	r3, r1
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	2118      	movs	r1, #24
 800aa5a:	0018      	movs	r0, r3
 800aa5c:	f7f5 fba2 	bl	80001a4 <__udivsi3>
 800aa60:	0003      	movs	r3, r0
 800aa62:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	2107      	movs	r1, #7
 800aa6a:	0018      	movs	r0, r3
 800aa6c:	f7f5 fc20 	bl	80002b0 <__aeabi_uidivmod>
 800aa70:	000b      	movs	r3, r1
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	3301      	adds	r3, #1
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	701a      	strb	r2, [r3, #0]
  year = 0;
 800aa7c:	231f      	movs	r3, #31
 800aa7e:	18fb      	adds	r3, r7, r3
 800aa80:	2200      	movs	r2, #0
 800aa82:	701a      	strb	r2, [r3, #0]
  days = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800aa88:	e005      	b.n	800aa96 <breakPosixTime+0xa2>
    year++;
 800aa8a:	211f      	movs	r1, #31
 800aa8c:	187b      	adds	r3, r7, r1
 800aa8e:	781a      	ldrb	r2, [r3, #0]
 800aa90:	187b      	adds	r3, r7, r1
 800aa92:	3201      	adds	r2, #1
 800aa94:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800aa96:	241f      	movs	r4, #31
 800aa98:	193b      	adds	r3, r7, r4
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	4a64      	ldr	r2, [pc, #400]	@ (800ac30 <breakPosixTime+0x23c>)
 800aa9e:	4694      	mov	ip, r2
 800aaa0:	4463      	add	r3, ip
 800aaa2:	001a      	movs	r2, r3
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	d119      	bne.n	800aade <breakPosixTime+0xea>
 800aaaa:	193b      	adds	r3, r7, r4
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	4a60      	ldr	r2, [pc, #384]	@ (800ac30 <breakPosixTime+0x23c>)
 800aab0:	4694      	mov	ip, r2
 800aab2:	4463      	add	r3, ip
 800aab4:	2164      	movs	r1, #100	@ 0x64
 800aab6:	0018      	movs	r0, r3
 800aab8:	f7f5 fce4 	bl	8000484 <__aeabi_idivmod>
 800aabc:	1e0b      	subs	r3, r1, #0
 800aabe:	d10b      	bne.n	800aad8 <breakPosixTime+0xe4>
 800aac0:	193b      	adds	r3, r7, r4
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	4a5a      	ldr	r2, [pc, #360]	@ (800ac30 <breakPosixTime+0x23c>)
 800aac6:	4694      	mov	ip, r2
 800aac8:	4463      	add	r3, ip
 800aaca:	22c8      	movs	r2, #200	@ 0xc8
 800aacc:	0051      	lsls	r1, r2, #1
 800aace:	0018      	movs	r0, r3
 800aad0:	f7f5 fcd8 	bl	8000484 <__aeabi_idivmod>
 800aad4:	1e0b      	subs	r3, r1, #0
 800aad6:	d102      	bne.n	800aade <breakPosixTime+0xea>
 800aad8:	23b7      	movs	r3, #183	@ 0xb7
 800aada:	005b      	lsls	r3, r3, #1
 800aadc:	e001      	b.n	800aae2 <breakPosixTime+0xee>
 800aade:	236e      	movs	r3, #110	@ 0x6e
 800aae0:	33ff      	adds	r3, #255	@ 0xff
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	18d3      	adds	r3, r2, r3
 800aae6:	617b      	str	r3, [r7, #20]
 800aae8:	697a      	ldr	r2, [r7, #20]
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d9cc      	bls.n	800aa8a <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	241f      	movs	r4, #31
 800aaf4:	193a      	adds	r2, r7, r4
 800aaf6:	7812      	ldrb	r2, [r2, #0]
 800aaf8:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800aafa:	193b      	adds	r3, r7, r4
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	4a4c      	ldr	r2, [pc, #304]	@ (800ac30 <breakPosixTime+0x23c>)
 800ab00:	4694      	mov	ip, r2
 800ab02:	4463      	add	r3, ip
 800ab04:	001a      	movs	r2, r3
 800ab06:	2303      	movs	r3, #3
 800ab08:	4013      	ands	r3, r2
 800ab0a:	d119      	bne.n	800ab40 <breakPosixTime+0x14c>
 800ab0c:	193b      	adds	r3, r7, r4
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	4a47      	ldr	r2, [pc, #284]	@ (800ac30 <breakPosixTime+0x23c>)
 800ab12:	4694      	mov	ip, r2
 800ab14:	4463      	add	r3, ip
 800ab16:	2164      	movs	r1, #100	@ 0x64
 800ab18:	0018      	movs	r0, r3
 800ab1a:	f7f5 fcb3 	bl	8000484 <__aeabi_idivmod>
 800ab1e:	1e0b      	subs	r3, r1, #0
 800ab20:	d10b      	bne.n	800ab3a <breakPosixTime+0x146>
 800ab22:	193b      	adds	r3, r7, r4
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	4a42      	ldr	r2, [pc, #264]	@ (800ac30 <breakPosixTime+0x23c>)
 800ab28:	4694      	mov	ip, r2
 800ab2a:	4463      	add	r3, ip
 800ab2c:	22c8      	movs	r2, #200	@ 0xc8
 800ab2e:	0051      	lsls	r1, r2, #1
 800ab30:	0018      	movs	r0, r3
 800ab32:	f7f5 fca7 	bl	8000484 <__aeabi_idivmod>
 800ab36:	1e0b      	subs	r3, r1, #0
 800ab38:	d102      	bne.n	800ab40 <breakPosixTime+0x14c>
 800ab3a:	23b7      	movs	r3, #183	@ 0xb7
 800ab3c:	005b      	lsls	r3, r3, #1
 800ab3e:	e001      	b.n	800ab44 <breakPosixTime+0x150>
 800ab40:	236e      	movs	r3, #110	@ 0x6e
 800ab42:	33ff      	adds	r3, #255	@ 0xff
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800ab4a:	69ba      	ldr	r2, [r7, #24]
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	61bb      	str	r3, [r7, #24]

  days=0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	617b      	str	r3, [r7, #20]
  month=0;
 800ab56:	211e      	movs	r1, #30
 800ab58:	187b      	adds	r3, r7, r1
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 800ab5e:	231d      	movs	r3, #29
 800ab60:	18fb      	adds	r3, r7, r3
 800ab62:	2200      	movs	r2, #0
 800ab64:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800ab66:	187b      	adds	r3, r7, r1
 800ab68:	2200      	movs	r2, #0
 800ab6a:	701a      	strb	r2, [r3, #0]
 800ab6c:	e048      	b.n	800ac00 <breakPosixTime+0x20c>
    if (month==1) { // february
 800ab6e:	231e      	movs	r3, #30
 800ab70:	18fb      	adds	r3, r7, r3
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d12a      	bne.n	800abce <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 800ab78:	241f      	movs	r4, #31
 800ab7a:	193b      	adds	r3, r7, r4
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	4a2c      	ldr	r2, [pc, #176]	@ (800ac30 <breakPosixTime+0x23c>)
 800ab80:	4694      	mov	ip, r2
 800ab82:	4463      	add	r3, ip
 800ab84:	001a      	movs	r2, r3
 800ab86:	2303      	movs	r3, #3
 800ab88:	4013      	ands	r3, r2
 800ab8a:	d11b      	bne.n	800abc4 <breakPosixTime+0x1d0>
 800ab8c:	193b      	adds	r3, r7, r4
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	4a27      	ldr	r2, [pc, #156]	@ (800ac30 <breakPosixTime+0x23c>)
 800ab92:	4694      	mov	ip, r2
 800ab94:	4463      	add	r3, ip
 800ab96:	2164      	movs	r1, #100	@ 0x64
 800ab98:	0018      	movs	r0, r3
 800ab9a:	f7f5 fc73 	bl	8000484 <__aeabi_idivmod>
 800ab9e:	1e0b      	subs	r3, r1, #0
 800aba0:	d10b      	bne.n	800abba <breakPosixTime+0x1c6>
 800aba2:	193b      	adds	r3, r7, r4
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	4a22      	ldr	r2, [pc, #136]	@ (800ac30 <breakPosixTime+0x23c>)
 800aba8:	4694      	mov	ip, r2
 800abaa:	4463      	add	r3, ip
 800abac:	22c8      	movs	r2, #200	@ 0xc8
 800abae:	0051      	lsls	r1, r2, #1
 800abb0:	0018      	movs	r0, r3
 800abb2:	f7f5 fc67 	bl	8000484 <__aeabi_idivmod>
 800abb6:	1e0b      	subs	r3, r1, #0
 800abb8:	d104      	bne.n	800abc4 <breakPosixTime+0x1d0>
        monthLength=29;
 800abba:	231d      	movs	r3, #29
 800abbc:	18fb      	adds	r3, r7, r3
 800abbe:	221d      	movs	r2, #29
 800abc0:	701a      	strb	r2, [r3, #0]
 800abc2:	e00c      	b.n	800abde <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800abc4:	231d      	movs	r3, #29
 800abc6:	18fb      	adds	r3, r7, r3
 800abc8:	221c      	movs	r2, #28
 800abca:	701a      	strb	r2, [r3, #0]
 800abcc:	e007      	b.n	800abde <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800abce:	231e      	movs	r3, #30
 800abd0:	18fb      	adds	r3, r7, r3
 800abd2:	781a      	ldrb	r2, [r3, #0]
 800abd4:	231d      	movs	r3, #29
 800abd6:	18fb      	adds	r3, r7, r3
 800abd8:	4916      	ldr	r1, [pc, #88]	@ (800ac34 <breakPosixTime+0x240>)
 800abda:	5c8a      	ldrb	r2, [r1, r2]
 800abdc:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800abde:	211d      	movs	r1, #29
 800abe0:	187b      	adds	r3, r7, r1
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	69ba      	ldr	r2, [r7, #24]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d310      	bcc.n	800ac0c <breakPosixTime+0x218>
      time -= monthLength;
 800abea:	187b      	adds	r3, r7, r1
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	69ba      	ldr	r2, [r7, #24]
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800abf4:	211e      	movs	r1, #30
 800abf6:	187b      	adds	r3, r7, r1
 800abf8:	781a      	ldrb	r2, [r3, #0]
 800abfa:	187b      	adds	r3, r7, r1
 800abfc:	3201      	adds	r2, #1
 800abfe:	701a      	strb	r2, [r3, #0]
 800ac00:	231e      	movs	r3, #30
 800ac02:	18fb      	adds	r3, r7, r3
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	2b0b      	cmp	r3, #11
 800ac08:	d9b1      	bls.n	800ab6e <breakPosixTime+0x17a>
 800ac0a:	e000      	b.n	800ac0e <breakPosixTime+0x21a>
    } else {
        break;
 800ac0c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800ac0e:	231e      	movs	r3, #30
 800ac10:	18fb      	adds	r3, r7, r3
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	3301      	adds	r3, #1
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	3301      	adds	r3, #1
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	709a      	strb	r2, [r3, #2]
}
 800ac28:	46c0      	nop			@ (mov r8, r8)
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	b009      	add	sp, #36	@ 0x24
 800ac2e:	bd90      	pop	{r4, r7, pc}
 800ac30:	000007b2 	.word	0x000007b2
 800ac34:	0802e1c0 	.word	0x0802e1c0

0800ac38 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ac3e:	003b      	movs	r3, r7
 800ac40:	0018      	movs	r0, r3
 800ac42:	2308      	movs	r3, #8
 800ac44:	001a      	movs	r2, r3
 800ac46:	2100      	movs	r1, #0
 800ac48:	f01b fc0e 	bl	8026468 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800ac4c:	4b30      	ldr	r3, [pc, #192]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac4e:	4a31      	ldr	r2, [pc, #196]	@ (800ad14 <MX_ADC_Init+0xdc>)
 800ac50:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800ac52:	4b2f      	ldr	r3, [pc, #188]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ac58:	4b2d      	ldr	r3, [pc, #180]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac5a:	22c0      	movs	r2, #192	@ 0xc0
 800ac5c:	0612      	lsls	r2, r2, #24
 800ac5e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800ac60:	4b2b      	ldr	r3, [pc, #172]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ac66:	4b2a      	ldr	r3, [pc, #168]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800ac6c:	4b28      	ldr	r3, [pc, #160]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac6e:	2201      	movs	r2, #1
 800ac70:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ac72:	4b27      	ldr	r3, [pc, #156]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800ac78:	4b25      	ldr	r3, [pc, #148]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac7a:	2220      	movs	r2, #32
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800ac80:	4b23      	ldr	r3, [pc, #140]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac82:	2221      	movs	r2, #33	@ 0x21
 800ac84:	2101      	movs	r1, #1
 800ac86:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ac88:	4b21      	ldr	r3, [pc, #132]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ac8e:	4b20      	ldr	r3, [pc, #128]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac90:	22c2      	movs	r2, #194	@ 0xc2
 800ac92:	32ff      	adds	r2, #255	@ 0xff
 800ac94:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800ac96:	4b1e      	ldr	r3, [pc, #120]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800ac98:	222c      	movs	r2, #44	@ 0x2c
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ac9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800aca0:	2204      	movs	r2, #4
 800aca2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800aca4:	4b1a      	ldr	r3, [pc, #104]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800acaa:	4b19      	ldr	r3, [pc, #100]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800acac:	2200      	movs	r2, #0
 800acae:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800acb0:	4b17      	ldr	r3, [pc, #92]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800acb6:	4b16      	ldr	r3, [pc, #88]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800acb8:	2200      	movs	r2, #0
 800acba:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800acbc:	4b14      	ldr	r3, [pc, #80]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800acbe:	0018      	movs	r0, r3
 800acc0:	f009 fe22 	bl	8014908 <HAL_ADC_Init>
 800acc4:	1e03      	subs	r3, r0, #0
 800acc6:	d001      	beq.n	800accc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800acc8:	f002 fb6e 	bl	800d3a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800accc:	003b      	movs	r3, r7
 800acce:	4a12      	ldr	r2, [pc, #72]	@ (800ad18 <MX_ADC_Init+0xe0>)
 800acd0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800acd2:	003b      	movs	r3, r7
 800acd4:	2280      	movs	r2, #128	@ 0x80
 800acd6:	0152      	lsls	r2, r2, #5
 800acd8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800acda:	003a      	movs	r2, r7
 800acdc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800acde:	0011      	movs	r1, r2
 800ace0:	0018      	movs	r0, r3
 800ace2:	f00a f881 	bl	8014de8 <HAL_ADC_ConfigChannel>
 800ace6:	1e03      	subs	r3, r0, #0
 800ace8:	d001      	beq.n	800acee <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800acea:	f002 fb5d 	bl	800d3a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800acee:	003b      	movs	r3, r7
 800acf0:	4a0a      	ldr	r2, [pc, #40]	@ (800ad1c <MX_ADC_Init+0xe4>)
 800acf2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800acf4:	003a      	movs	r2, r7
 800acf6:	4b06      	ldr	r3, [pc, #24]	@ (800ad10 <MX_ADC_Init+0xd8>)
 800acf8:	0011      	movs	r1, r2
 800acfa:	0018      	movs	r0, r3
 800acfc:	f00a f874 	bl	8014de8 <HAL_ADC_ConfigChannel>
 800ad00:	1e03      	subs	r3, r0, #0
 800ad02:	d001      	beq.n	800ad08 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800ad04:	f002 fb50 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800ad08:	46c0      	nop			@ (mov r8, r8)
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	b002      	add	sp, #8
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	20000e84 	.word	0x20000e84
 800ad14:	40012400 	.word	0x40012400
 800ad18:	38004000 	.word	0x38004000
 800ad1c:	3c008000 	.word	0x3c008000

0800ad20 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800ad20:	b590      	push	{r4, r7, lr}
 800ad22:	b089      	sub	sp, #36	@ 0x24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad28:	240c      	movs	r4, #12
 800ad2a:	193b      	adds	r3, r7, r4
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	2314      	movs	r3, #20
 800ad30:	001a      	movs	r2, r3
 800ad32:	2100      	movs	r1, #0
 800ad34:	f01b fb98 	bl	8026468 <memset>
  if(adcHandle->Instance==ADC1)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a14      	ldr	r2, [pc, #80]	@ (800ad90 <HAL_ADC_MspInit+0x70>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d121      	bne.n	800ad86 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ad42:	4b14      	ldr	r3, [pc, #80]	@ (800ad94 <HAL_ADC_MspInit+0x74>)
 800ad44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad46:	4b13      	ldr	r3, [pc, #76]	@ (800ad94 <HAL_ADC_MspInit+0x74>)
 800ad48:	2180      	movs	r1, #128	@ 0x80
 800ad4a:	0089      	lsls	r1, r1, #2
 800ad4c:	430a      	orrs	r2, r1
 800ad4e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad50:	4b10      	ldr	r3, [pc, #64]	@ (800ad94 <HAL_ADC_MspInit+0x74>)
 800ad52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad54:	4b0f      	ldr	r3, [pc, #60]	@ (800ad94 <HAL_ADC_MspInit+0x74>)
 800ad56:	2104      	movs	r1, #4
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ad5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ad94 <HAL_ADC_MspInit+0x74>)
 800ad5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad60:	2204      	movs	r2, #4
 800ad62:	4013      	ands	r3, r2
 800ad64:	60bb      	str	r3, [r7, #8]
 800ad66:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800ad68:	193b      	adds	r3, r7, r4
 800ad6a:	2230      	movs	r2, #48	@ 0x30
 800ad6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ad6e:	193b      	adds	r3, r7, r4
 800ad70:	2203      	movs	r2, #3
 800ad72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad74:	193b      	adds	r3, r7, r4
 800ad76:	2200      	movs	r2, #0
 800ad78:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad7a:	193b      	adds	r3, r7, r4
 800ad7c:	4a06      	ldr	r2, [pc, #24]	@ (800ad98 <HAL_ADC_MspInit+0x78>)
 800ad7e:	0019      	movs	r1, r3
 800ad80:	0010      	movs	r0, r2
 800ad82:	f00a fe4f 	bl	8015a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800ad86:	46c0      	nop			@ (mov r8, r8)
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	b009      	add	sp, #36	@ 0x24
 800ad8c:	bd90      	pop	{r4, r7, pc}
 800ad8e:	46c0      	nop			@ (mov r8, r8)
 800ad90:	40012400 	.word	0x40012400
 800ad94:	40021000 	.word	0x40021000
 800ad98:	50000800 	.word	0x50000800

0800ad9c <ReadDirRegister>:

AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ad9c:	b590      	push	{r4, r7, lr}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6039      	str	r1, [r7, #0]
 800ada4:	0011      	movs	r1, r2
 800ada6:	1dfb      	adds	r3, r7, #7
 800ada8:	1c02      	adds	r2, r0, #0
 800adaa:	701a      	strb	r2, [r3, #0]
 800adac:	1dbb      	adds	r3, r7, #6
 800adae:	1c0a      	adds	r2, r1, #0
 800adb0:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800adb2:	4b0a      	ldr	r3, [pc, #40]	@ (800addc <ReadDirRegister+0x40>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00a      	beq.n	800add0 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800adba:	4b08      	ldr	r3, [pc, #32]	@ (800addc <ReadDirRegister+0x40>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	1dba      	adds	r2, r7, #6
 800adc0:	7814      	ldrb	r4, [r2, #0]
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	1dfa      	adds	r2, r7, #7
 800adc6:	7810      	ldrb	r0, [r2, #0]
 800adc8:	0022      	movs	r2, r4
 800adca:	4798      	blx	r3
 800adcc:	0003      	movs	r3, r0
 800adce:	e000      	b.n	800add2 <ReadDirRegister+0x36>
  }
  return false;
 800add0:	2300      	movs	r3, #0
}
 800add2:	0018      	movs	r0, r3
 800add4:	46bd      	mov	sp, r7
 800add6:	b003      	add	sp, #12
 800add8:	bd90      	pop	{r4, r7, pc}
 800adda:	46c0      	nop			@ (mov r8, r8)
 800addc:	20000ef0 	.word	0x20000ef0

0800ade0 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ade0:	b590      	push	{r4, r7, lr}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6039      	str	r1, [r7, #0]
 800ade8:	0011      	movs	r1, r2
 800adea:	1dfb      	adds	r3, r7, #7
 800adec:	1c02      	adds	r2, r0, #0
 800adee:	701a      	strb	r2, [r3, #0]
 800adf0:	1dbb      	adds	r3, r7, #6
 800adf2:	1c0a      	adds	r2, r1, #0
 800adf4:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800adf6:	4b0a      	ldr	r3, [pc, #40]	@ (800ae20 <ReadRegister+0x40>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00a      	beq.n	800ae14 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800adfe:	4b08      	ldr	r3, [pc, #32]	@ (800ae20 <ReadRegister+0x40>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	1dba      	adds	r2, r7, #6
 800ae04:	7814      	ldrb	r4, [r2, #0]
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	1dfa      	adds	r2, r7, #7
 800ae0a:	7810      	ldrb	r0, [r2, #0]
 800ae0c:	0022      	movs	r2, r4
 800ae0e:	4798      	blx	r3
 800ae10:	0003      	movs	r3, r0
 800ae12:	e000      	b.n	800ae16 <ReadRegister+0x36>
  }
  return false;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	0018      	movs	r0, r3
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	b003      	add	sp, #12
 800ae1c:	bd90      	pop	{r4, r7, pc}
 800ae1e:	46c0      	nop			@ (mov r8, r8)
 800ae20:	20000ee8 	.word	0x20000ee8

0800ae24 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ae24:	b590      	push	{r4, r7, lr}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6039      	str	r1, [r7, #0]
 800ae2c:	0011      	movs	r1, r2
 800ae2e:	1dfb      	adds	r3, r7, #7
 800ae30:	1c02      	adds	r2, r0, #0
 800ae32:	701a      	strb	r2, [r3, #0]
 800ae34:	1dbb      	adds	r3, r7, #6
 800ae36:	1c0a      	adds	r2, r1, #0
 800ae38:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800ae3a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae64 <WriteRegister+0x40>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00a      	beq.n	800ae58 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800ae42:	4b08      	ldr	r3, [pc, #32]	@ (800ae64 <WriteRegister+0x40>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	1dba      	adds	r2, r7, #6
 800ae48:	7814      	ldrb	r4, [r2, #0]
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	1dfa      	adds	r2, r7, #7
 800ae4e:	7810      	ldrb	r0, [r2, #0]
 800ae50:	0022      	movs	r2, r4
 800ae52:	4798      	blx	r3
 800ae54:	0003      	movs	r3, r0
 800ae56:	e000      	b.n	800ae5a <WriteRegister+0x36>
  }
  return false;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	b003      	add	sp, #12
 800ae60:	bd90      	pop	{r4, r7, pc}
 800ae62:	46c0      	nop			@ (mov r8, r8)
 800ae64:	20000eec 	.word	0x20000eec

0800ae68 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	000a      	movs	r2, r1
 800ae72:	1cfb      	adds	r3, r7, #3
 800ae74:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800ae76:	230f      	movs	r3, #15
 800ae78:	18fb      	adds	r3, r7, r3
 800ae7a:	22ff      	movs	r2, #255	@ 0xff
 800ae7c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800ae7e:	230e      	movs	r3, #14
 800ae80:	18fb      	adds	r3, r7, r3
 800ae82:	2200      	movs	r2, #0
 800ae84:	701a      	strb	r2, [r3, #0]
 800ae86:	e038      	b.n	800aefa <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800ae88:	230e      	movs	r3, #14
 800ae8a:	18fb      	adds	r3, r7, r3
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	18d3      	adds	r3, r2, r3
 800ae92:	7819      	ldrb	r1, [r3, #0]
 800ae94:	220f      	movs	r2, #15
 800ae96:	18bb      	adds	r3, r7, r2
 800ae98:	18ba      	adds	r2, r7, r2
 800ae9a:	7812      	ldrb	r2, [r2, #0]
 800ae9c:	404a      	eors	r2, r1
 800ae9e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800aea0:	230d      	movs	r3, #13
 800aea2:	18fb      	adds	r3, r7, r3
 800aea4:	2200      	movs	r2, #0
 800aea6:	701a      	strb	r2, [r3, #0]
 800aea8:	e01c      	b.n	800aee4 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800aeaa:	210f      	movs	r1, #15
 800aeac:	187b      	adds	r3, r7, r1
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	b25b      	sxtb	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	da0a      	bge.n	800aecc <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800aeb6:	187b      	adds	r3, r7, r1
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	b25b      	sxtb	r3, r3
 800aebc:	18db      	adds	r3, r3, r3
 800aebe:	b25b      	sxtb	r3, r3
 800aec0:	2231      	movs	r2, #49	@ 0x31
 800aec2:	4053      	eors	r3, r2
 800aec4:	b25a      	sxtb	r2, r3
 800aec6:	187b      	adds	r3, r7, r1
 800aec8:	701a      	strb	r2, [r3, #0]
 800aeca:	e005      	b.n	800aed8 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800aecc:	230f      	movs	r3, #15
 800aece:	18fa      	adds	r2, r7, r3
 800aed0:	18fb      	adds	r3, r7, r3
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	18db      	adds	r3, r3, r3
 800aed6:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800aed8:	210d      	movs	r1, #13
 800aeda:	187b      	adds	r3, r7, r1
 800aedc:	781a      	ldrb	r2, [r3, #0]
 800aede:	187b      	adds	r3, r7, r1
 800aee0:	3201      	adds	r2, #1
 800aee2:	701a      	strb	r2, [r3, #0]
 800aee4:	230d      	movs	r3, #13
 800aee6:	18fb      	adds	r3, r7, r3
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2b07      	cmp	r3, #7
 800aeec:	d9dd      	bls.n	800aeaa <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800aeee:	210e      	movs	r1, #14
 800aef0:	187b      	adds	r3, r7, r1
 800aef2:	781a      	ldrb	r2, [r3, #0]
 800aef4:	187b      	adds	r3, r7, r1
 800aef6:	3201      	adds	r2, #1
 800aef8:	701a      	strb	r2, [r3, #0]
 800aefa:	230e      	movs	r3, #14
 800aefc:	18fa      	adds	r2, r7, r3
 800aefe:	1cfb      	adds	r3, r7, #3
 800af00:	7812      	ldrb	r2, [r2, #0]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	429a      	cmp	r2, r3
 800af06:	d3bf      	bcc.n	800ae88 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800af08:	230f      	movs	r3, #15
 800af0a:	18fb      	adds	r3, r7, r3
 800af0c:	781b      	ldrb	r3, [r3, #0]
}
 800af0e:	0018      	movs	r0, r3
 800af10:	46bd      	mov	sp, r7
 800af12:	b004      	add	sp, #16
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800af20:	f009 fca8 	bl	8014874 <HAL_GetTick>
 800af24:	0002      	movs	r2, r0
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	18d2      	adds	r2, r2, r3
 800af2a:	4b03      	ldr	r3, [pc, #12]	@ (800af38 <setAHT20TimeStamp+0x20>)
 800af2c:	601a      	str	r2, [r3, #0]
}
 800af2e:	46c0      	nop			@ (mov r8, r8)
 800af30:	46bd      	mov	sp, r7
 800af32:	b002      	add	sp, #8
 800af34:	bd80      	pop	{r7, pc}
 800af36:	46c0      	nop			@ (mov r8, r8)
 800af38:	20000ee0 	.word	0x20000ee0

0800af3c <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800af48:	4b06      	ldr	r3, [pc, #24]	@ (800af64 <AHT_Init+0x28>)
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800af4e:	4b06      	ldr	r3, [pc, #24]	@ (800af68 <AHT_Init+0x2c>)
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800af54:	4b05      	ldr	r3, [pc, #20]	@ (800af6c <AHT_Init+0x30>)
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	601a      	str	r2, [r3, #0]
}
 800af5a:	46c0      	nop			@ (mov r8, r8)
 800af5c:	46bd      	mov	sp, r7
 800af5e:	b004      	add	sp, #16
 800af60:	bd80      	pop	{r7, pc}
 800af62:	46c0      	nop			@ (mov r8, r8)
 800af64:	20000ef0 	.word	0x20000ef0
 800af68:	20000ee8 	.word	0x20000ee8
 800af6c:	20000eec 	.word	0x20000eec

0800af70 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af02      	add	r7, sp, #8
 800af76:	0002      	movs	r2, r0
 800af78:	1dfb      	adds	r3, r7, #7
 800af7a:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800af7c:	4b18      	ldr	r3, [pc, #96]	@ (800afe0 <AHT20_register_reset+0x70>)
 800af7e:	1dfa      	adds	r2, r7, #7
 800af80:	7812      	ldrb	r2, [r2, #0]
 800af82:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800af84:	4b16      	ldr	r3, [pc, #88]	@ (800afe0 <AHT20_register_reset+0x70>)
 800af86:	2203      	movs	r2, #3
 800af88:	0019      	movs	r1, r3
 800af8a:	2038      	movs	r0, #56	@ 0x38
 800af8c:	f7ff ff4a 	bl	800ae24 <WriteRegister>
  HAL_Delay(15);
 800af90:	200f      	movs	r0, #15
 800af92:	f009 fc79 	bl	8014888 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800af96:	4b13      	ldr	r3, [pc, #76]	@ (800afe4 <AHT20_register_reset+0x74>)
 800af98:	2203      	movs	r2, #3
 800af9a:	0019      	movs	r1, r3
 800af9c:	2038      	movs	r0, #56	@ 0x38
 800af9e:	f7ff ff1f 	bl	800ade0 <ReadRegister>
  HAL_Delay(15);
 800afa2:	200f      	movs	r0, #15
 800afa4:	f009 fc70 	bl	8014888 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800afa8:	4b0e      	ldr	r3, [pc, #56]	@ (800afe4 <AHT20_register_reset+0x74>)
 800afaa:	22b0      	movs	r2, #176	@ 0xb0
 800afac:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800afae:	4b0d      	ldr	r3, [pc, #52]	@ (800afe4 <AHT20_register_reset+0x74>)
 800afb0:	789b      	ldrb	r3, [r3, #2]
 800afb2:	0018      	movs	r0, r3
 800afb4:	4b0b      	ldr	r3, [pc, #44]	@ (800afe4 <AHT20_register_reset+0x74>)
 800afb6:	78db      	ldrb	r3, [r3, #3]
 800afb8:	4a0b      	ldr	r2, [pc, #44]	@ (800afe8 <AHT20_register_reset+0x78>)
 800afba:	490c      	ldr	r1, [pc, #48]	@ (800afec <AHT20_register_reset+0x7c>)
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	0003      	movs	r3, r0
 800afc0:	2003      	movs	r0, #3
 800afc2:	f008 fedf 	bl	8013d84 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800afc6:	4b07      	ldr	r3, [pc, #28]	@ (800afe4 <AHT20_register_reset+0x74>)
 800afc8:	2203      	movs	r2, #3
 800afca:	0019      	movs	r1, r3
 800afcc:	2038      	movs	r0, #56	@ 0x38
 800afce:	f7ff ff29 	bl	800ae24 <WriteRegister>
  HAL_Delay(15);
 800afd2:	200f      	movs	r0, #15
 800afd4:	f009 fc58 	bl	8014888 <HAL_Delay>
}
 800afd8:	46c0      	nop			@ (mov r8, r8)
 800afda:	46bd      	mov	sp, r7
 800afdc:	b002      	add	sp, #8
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	2000009c 	.word	0x2000009c
 800afe4:	20000ef4 	.word	0x20000ef4
 800afe8:	0802bf78 	.word	0x0802bf78
 800afec:	0802bfb8 	.word	0x0802bfb8

0800aff0 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800aff4:	201b      	movs	r0, #27
 800aff6:	f7ff ffbb 	bl	800af70 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800affa:	201c      	movs	r0, #28
 800affc:	f7ff ffb8 	bl	800af70 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800b000:	201e      	movs	r0, #30
 800b002:	f7ff ffb5 	bl	800af70 <AHT20_register_reset>
}
 800b006:	46c0      	nop			@ (mov r8, r8)
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800b00c:	b580      	push	{r7, lr}
 800b00e:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800b010:	4b0c      	ldr	r3, [pc, #48]	@ (800b044 <AHT20_read_status+0x38>)
 800b012:	2201      	movs	r2, #1
 800b014:	0019      	movs	r1, r3
 800b016:	2038      	movs	r0, #56	@ 0x38
 800b018:	f7ff ff04 	bl	800ae24 <WriteRegister>
  HAL_Delay(10);
 800b01c:	200a      	movs	r0, #10
 800b01e:	f009 fc33 	bl	8014888 <HAL_Delay>
  airtemphumraw[0] = 0;
 800b022:	4b09      	ldr	r3, [pc, #36]	@ (800b048 <AHT20_read_status+0x3c>)
 800b024:	2200      	movs	r2, #0
 800b026:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800b028:	4b07      	ldr	r3, [pc, #28]	@ (800b048 <AHT20_read_status+0x3c>)
 800b02a:	2201      	movs	r2, #1
 800b02c:	0019      	movs	r1, r3
 800b02e:	2038      	movs	r0, #56	@ 0x38
 800b030:	f7ff fed6 	bl	800ade0 <ReadRegister>
  HAL_Delay(10);
 800b034:	200a      	movs	r0, #10
 800b036:	f009 fc27 	bl	8014888 <HAL_Delay>
  return airtemphumraw[0];
 800b03a:	4b03      	ldr	r3, [pc, #12]	@ (800b048 <AHT20_read_status+0x3c>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
}
 800b03e:	0018      	movs	r0, r3
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	20000098 	.word	0x20000098
 800b048:	20000ef4 	.word	0x20000ef4

0800b04c <AHT20_init>:

bool AHT20_init(void) {
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800b052:	f009 fc0f 	bl	8014874 <HAL_GetTick>
 800b056:	0003      	movs	r3, r0
 800b058:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b77      	cmp	r3, #119	@ 0x77
 800b05e:	d805      	bhi.n	800b06c <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2278      	movs	r2, #120	@ 0x78
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	0018      	movs	r0, r3
 800b068:	f009 fc0e 	bl	8014888 <HAL_Delay>
  }
  AHT20_read_status();
 800b06c:	f7ff ffce 	bl	800b00c <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800b070:	4b0e      	ldr	r3, [pc, #56]	@ (800b0ac <AHT20_init+0x60>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	4a0e      	ldr	r2, [pc, #56]	@ (800b0b0 <AHT20_init+0x64>)
 800b076:	490f      	ldr	r1, [pc, #60]	@ (800b0b4 <AHT20_init+0x68>)
 800b078:	2003      	movs	r0, #3
 800b07a:	f008 fe83 	bl	8013d84 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800b07e:	4b0b      	ldr	r3, [pc, #44]	@ (800b0ac <AHT20_init+0x60>)
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	001a      	movs	r2, r3
 800b084:	2318      	movs	r3, #24
 800b086:	4013      	ands	r3, r2
 800b088:	2b18      	cmp	r3, #24
 800b08a:	d00a      	beq.n	800b0a2 <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800b08c:	4b0a      	ldr	r3, [pc, #40]	@ (800b0b8 <AHT20_init+0x6c>)
 800b08e:	2203      	movs	r2, #3
 800b090:	0019      	movs	r1, r3
 800b092:	2038      	movs	r0, #56	@ 0x38
 800b094:	f7ff fec6 	bl	800ae24 <WriteRegister>
    HAL_Delay(10);
 800b098:	200a      	movs	r0, #10
 800b09a:	f009 fbf5 	bl	8014888 <HAL_Delay>
    AHT20_Start_Init();
 800b09e:	f7ff ffa7 	bl	800aff0 <AHT20_Start_Init>
  }
  return true;
 800b0a2:	2301      	movs	r3, #1
}
 800b0a4:	0018      	movs	r0, r3
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	b002      	add	sp, #8
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	20000ef4 	.word	0x20000ef4
 800b0b0:	0802bfbc 	.word	0x0802bfbc
 800b0b4:	0802bfb8 	.word	0x0802bfb8
 800b0b8:	2000008c 	.word	0x2000008c

0800b0bc <AHT20_calibrate>:


bool AHT20_calibrate() {
 800b0bc:	b590      	push	{r4, r7, lr}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800b0c2:	1dfc      	adds	r4, r7, #7
 800b0c4:	4b10      	ldr	r3, [pc, #64]	@ (800b108 <AHT20_calibrate+0x4c>)
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	0019      	movs	r1, r3
 800b0ca:	2038      	movs	r0, #56	@ 0x38
 800b0cc:	f7ff feaa 	bl	800ae24 <WriteRegister>
 800b0d0:	0003      	movs	r3, r0
 800b0d2:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800b0d4:	1dfb      	adds	r3, r7, #7
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	4053      	eors	r3, r2
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d005      	beq.n	800b0ee <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800b0e2:	4a0a      	ldr	r2, [pc, #40]	@ (800b10c <AHT20_calibrate+0x50>)
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b110 <AHT20_calibrate+0x54>)
 800b0e6:	0019      	movs	r1, r3
 800b0e8:	2001      	movs	r0, #1
 800b0ea:	f008 fe4b 	bl	8013d84 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b0ee:	f009 fbc1 	bl	8014874 <HAL_GetTick>
 800b0f2:	0003      	movs	r3, r0
 800b0f4:	3332      	adds	r3, #50	@ 0x32
 800b0f6:	001a      	movs	r2, r3
 800b0f8:	4b06      	ldr	r3, [pc, #24]	@ (800b114 <AHT20_calibrate+0x58>)
 800b0fa:	601a      	str	r2, [r3, #0]
  return response;
 800b0fc:	1dfb      	adds	r3, r7, #7
 800b0fe:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800b100:	0018      	movs	r0, r3
 800b102:	46bd      	mov	sp, r7
 800b104:	b003      	add	sp, #12
 800b106:	bd90      	pop	{r4, r7, pc}
 800b108:	20000098 	.word	0x20000098
 800b10c:	0802bfe4 	.word	0x0802bfe4
 800b110:	0802c01c 	.word	0x0802c01c
 800b114:	20000ee0 	.word	0x20000ee0

0800b118 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800b118:	b580      	push	{r7, lr}
 800b11a:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800b11c:	4a0a      	ldr	r2, [pc, #40]	@ (800b148 <AHT20_DeviceConnected+0x30>)
 800b11e:	4b0b      	ldr	r3, [pc, #44]	@ (800b14c <AHT20_DeviceConnected+0x34>)
 800b120:	0019      	movs	r1, r3
 800b122:	2003      	movs	r0, #3
 800b124:	f008 fe2e 	bl	8013d84 <CreateLine>
   AHT20_init();
 800b128:	f7ff ff90 	bl	800b04c <AHT20_init>
   HAL_Delay(10);
 800b12c:	200a      	movs	r0, #10
 800b12e:	f009 fbab 	bl	8014888 <HAL_Delay>
   AHT20_calibrate();
 800b132:	f7ff ffc3 	bl	800b0bc <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800b136:	f7ff ff69 	bl	800b00c <AHT20_read_status>
 800b13a:	0003      	movs	r3, r0
 800b13c:	1e5a      	subs	r2, r3, #1
 800b13e:	4193      	sbcs	r3, r2
 800b140:	b2db      	uxtb	r3, r3
 }
 800b142:	0018      	movs	r0, r3
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	0802c020 	.word	0x0802c020
 800b14c:	0802bfb8 	.word	0x0802bfb8

0800b150 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800b150:	b590      	push	{r4, r7, lr}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800b156:	1dfc      	adds	r4, r7, #7
 800b158:	4b10      	ldr	r3, [pc, #64]	@ (800b19c <AHT20_StartMeasurement+0x4c>)
 800b15a:	2203      	movs	r2, #3
 800b15c:	0019      	movs	r1, r3
 800b15e:	2038      	movs	r0, #56	@ 0x38
 800b160:	f7ff fe60 	bl	800ae24 <WriteRegister>
 800b164:	0003      	movs	r3, r0
 800b166:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800b168:	1dfb      	adds	r3, r7, #7
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	2201      	movs	r2, #1
 800b16e:	4053      	eors	r3, r2
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d005      	beq.n	800b182 <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800b176:	4a0a      	ldr	r2, [pc, #40]	@ (800b1a0 <AHT20_StartMeasurement+0x50>)
 800b178:	4b0a      	ldr	r3, [pc, #40]	@ (800b1a4 <AHT20_StartMeasurement+0x54>)
 800b17a:	0019      	movs	r1, r3
 800b17c:	2001      	movs	r0, #1
 800b17e:	f008 fe01 	bl	8013d84 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800b182:	f009 fb77 	bl	8014874 <HAL_GetTick>
 800b186:	0003      	movs	r3, r0
 800b188:	33fa      	adds	r3, #250	@ 0xfa
 800b18a:	001a      	movs	r2, r3
 800b18c:	4b06      	ldr	r3, [pc, #24]	@ (800b1a8 <AHT20_StartMeasurement+0x58>)
 800b18e:	601a      	str	r2, [r3, #0]
  return response;
 800b190:	1dfb      	adds	r3, r7, #7
 800b192:	781b      	ldrb	r3, [r3, #0]
}
 800b194:	0018      	movs	r0, r3
 800b196:	46bd      	mov	sp, r7
 800b198:	b003      	add	sp, #12
 800b19a:	bd90      	pop	{r4, r7, pc}
 800b19c:	20000094 	.word	0x20000094
 800b1a0:	0802c038 	.word	0x0802c038
 800b1a4:	0802c01c 	.word	0x0802c01c
 800b1a8:	20000ee0 	.word	0x20000ee0

0800b1ac <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800b1ac:	b590      	push	{r4, r7, lr}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800b1b2:	f009 fb5f 	bl	8014874 <HAL_GetTick>
 800b1b6:	0003      	movs	r3, r0
 800b1b8:	22fa      	movs	r2, #250	@ 0xfa
 800b1ba:	0092      	lsls	r2, r2, #2
 800b1bc:	189a      	adds	r2, r3, r2
 800b1be:	4b29      	ldr	r3, [pc, #164]	@ (800b264 <AHT20_GetMeasurementValues+0xb8>)
 800b1c0:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b1c2:	e019      	b.n	800b1f8 <AHT20_GetMeasurementValues+0x4c>
//    Info("AHT20 Device busy, waiting for results");
    if (TimestampIsReached(AHT20TimeStamp)) {
 800b1c4:	4b27      	ldr	r3, [pc, #156]	@ (800b264 <AHT20_GetMeasurementValues+0xb8>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	0018      	movs	r0, r3
 800b1ca:	f008 fd85 	bl	8013cd8 <TimestampIsReached>
 800b1ce:	1e03      	subs	r3, r0, #0
 800b1d0:	d00f      	beq.n	800b1f2 <AHT20_GetMeasurementValues+0x46>
      Error("AHT2x timeout for getting values");
 800b1d2:	4a25      	ldr	r2, [pc, #148]	@ (800b268 <AHT20_GetMeasurementValues+0xbc>)
 800b1d4:	4b25      	ldr	r3, [pc, #148]	@ (800b26c <AHT20_GetMeasurementValues+0xc0>)
 800b1d6:	0019      	movs	r1, r3
 800b1d8:	2001      	movs	r0, #1
 800b1da:	f008 fdd3 	bl	8013d84 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800b1de:	f009 fb49 	bl	8014874 <HAL_GetTick>
 800b1e2:	0003      	movs	r3, r0
 800b1e4:	22fa      	movs	r2, #250	@ 0xfa
 800b1e6:	00d2      	lsls	r2, r2, #3
 800b1e8:	189a      	adds	r2, r3, r2
 800b1ea:	4b1e      	ldr	r3, [pc, #120]	@ (800b264 <AHT20_GetMeasurementValues+0xb8>)
 800b1ec:	601a      	str	r2, [r3, #0]
      return false;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	e034      	b.n	800b25c <AHT20_GetMeasurementValues+0xb0>
    }
    HAL_Delay(10);
 800b1f2:	200a      	movs	r0, #10
 800b1f4:	f009 fb48 	bl	8014888 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b1f8:	f7ff ff08 	bl	800b00c <AHT20_read_status>
 800b1fc:	0003      	movs	r3, r0
 800b1fe:	001a      	movs	r2, r3
 800b200:	2380      	movs	r3, #128	@ 0x80
 800b202:	4013      	ands	r3, r2
 800b204:	2b80      	cmp	r3, #128	@ 0x80
 800b206:	d0dd      	beq.n	800b1c4 <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800b208:	200a      	movs	r0, #10
 800b20a:	f009 fb3d 	bl	8014888 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800b20e:	1dfb      	adds	r3, r7, #7
 800b210:	2200      	movs	r2, #0
 800b212:	701a      	strb	r2, [r3, #0]
 800b214:	e009      	b.n	800b22a <AHT20_GetMeasurementValues+0x7e>
    airtemphumraw[g] = 0;
 800b216:	1dfb      	adds	r3, r7, #7
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	4a15      	ldr	r2, [pc, #84]	@ (800b270 <AHT20_GetMeasurementValues+0xc4>)
 800b21c:	2100      	movs	r1, #0
 800b21e:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800b220:	1dfb      	adds	r3, r7, #7
 800b222:	781a      	ldrb	r2, [r3, #0]
 800b224:	1dfb      	adds	r3, r7, #7
 800b226:	3201      	adds	r2, #1
 800b228:	701a      	strb	r2, [r3, #0]
 800b22a:	1dfb      	adds	r3, r7, #7
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	2b06      	cmp	r3, #6
 800b230:	d9f1      	bls.n	800b216 <AHT20_GetMeasurementValues+0x6a>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800b232:	1dbc      	adds	r4, r7, #6
 800b234:	4b0e      	ldr	r3, [pc, #56]	@ (800b270 <AHT20_GetMeasurementValues+0xc4>)
 800b236:	2207      	movs	r2, #7
 800b238:	0019      	movs	r1, r3
 800b23a:	2038      	movs	r0, #56	@ 0x38
 800b23c:	f7ff fdae 	bl	800ad9c <ReadDirRegister>
 800b240:	0003      	movs	r3, r0
 800b242:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800b244:	200a      	movs	r0, #10
 800b246:	f009 fb1f 	bl	8014888 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800b24a:	f009 fb13 	bl	8014874 <HAL_GetTick>
 800b24e:	0003      	movs	r3, r0
 800b250:	3364      	adds	r3, #100	@ 0x64
 800b252:	001a      	movs	r2, r3
 800b254:	4b03      	ldr	r3, [pc, #12]	@ (800b264 <AHT20_GetMeasurementValues+0xb8>)
 800b256:	601a      	str	r2, [r3, #0]
  return response;
 800b258:	1dbb      	adds	r3, r7, #6
 800b25a:	781b      	ldrb	r3, [r3, #0]
}
 800b25c:	0018      	movs	r0, r3
 800b25e:	46bd      	mov	sp, r7
 800b260:	b003      	add	sp, #12
 800b262:	bd90      	pop	{r4, r7, pc}
 800b264:	20000ee0 	.word	0x20000ee0
 800b268:	0802c064 	.word	0x0802c064
 800b26c:	0802c01c 	.word	0x0802c01c
 800b270:	20000ef4 	.word	0x20000ef4

0800b274 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800b274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b276:	46c6      	mov	lr, r8
 800b278:	b500      	push	{lr}
 800b27a:	b08a      	sub	sp, #40	@ 0x28
 800b27c:	af06      	add	r7, sp, #24
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800b282:	4b5a      	ldr	r3, [pc, #360]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b284:	799c      	ldrb	r4, [r3, #6]
 800b286:	4b59      	ldr	r3, [pc, #356]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b288:	2106      	movs	r1, #6
 800b28a:	0018      	movs	r0, r3
 800b28c:	f7ff fdec 	bl	800ae68 <CalculateCRC>
 800b290:	0003      	movs	r3, r0
 800b292:	429c      	cmp	r4, r3
 800b294:	d044      	beq.n	800b320 <AHT20_Calculate+0xac>
 800b296:	4b55      	ldr	r3, [pc, #340]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b298:	799b      	ldrb	r3, [r3, #6]
 800b29a:	2bff      	cmp	r3, #255	@ 0xff
 800b29c:	d040      	beq.n	800b320 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800b29e:	4b53      	ldr	r3, [pc, #332]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	4698      	mov	r8, r3
 800b2a4:	4b51      	ldr	r3, [pc, #324]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2a6:	785b      	ldrb	r3, [r3, #1]
 800b2a8:	0018      	movs	r0, r3
 800b2aa:	4b50      	ldr	r3, [pc, #320]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2ac:	789b      	ldrb	r3, [r3, #2]
 800b2ae:	001c      	movs	r4, r3
 800b2b0:	4b4e      	ldr	r3, [pc, #312]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2b2:	78db      	ldrb	r3, [r3, #3]
 800b2b4:	001d      	movs	r5, r3
 800b2b6:	4b4d      	ldr	r3, [pc, #308]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2b8:	791b      	ldrb	r3, [r3, #4]
 800b2ba:	001e      	movs	r6, r3
 800b2bc:	4b4b      	ldr	r3, [pc, #300]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2be:	795b      	ldrb	r3, [r3, #5]
 800b2c0:	469c      	mov	ip, r3
 800b2c2:	4b4a      	ldr	r3, [pc, #296]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2c4:	799b      	ldrb	r3, [r3, #6]
 800b2c6:	4a4a      	ldr	r2, [pc, #296]	@ (800b3f0 <AHT20_Calculate+0x17c>)
 800b2c8:	494a      	ldr	r1, [pc, #296]	@ (800b3f4 <AHT20_Calculate+0x180>)
 800b2ca:	9305      	str	r3, [sp, #20]
 800b2cc:	4663      	mov	r3, ip
 800b2ce:	9304      	str	r3, [sp, #16]
 800b2d0:	9603      	str	r6, [sp, #12]
 800b2d2:	9502      	str	r5, [sp, #8]
 800b2d4:	9401      	str	r4, [sp, #4]
 800b2d6:	9000      	str	r0, [sp, #0]
 800b2d8:	4643      	mov	r3, r8
 800b2da:	2003      	movs	r0, #3
 800b2dc:	f008 fd52 	bl	8013d84 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800b2e0:	4b42      	ldr	r3, [pc, #264]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2e2:	799b      	ldrb	r3, [r3, #6]
 800b2e4:	001c      	movs	r4, r3
 800b2e6:	4b41      	ldr	r3, [pc, #260]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b2e8:	2106      	movs	r1, #6
 800b2ea:	0018      	movs	r0, r3
 800b2ec:	f7ff fdbc 	bl	800ae68 <CalculateCRC>
 800b2f0:	0003      	movs	r3, r0
 800b2f2:	4a41      	ldr	r2, [pc, #260]	@ (800b3f8 <AHT20_Calculate+0x184>)
 800b2f4:	4941      	ldr	r1, [pc, #260]	@ (800b3fc <AHT20_Calculate+0x188>)
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	0023      	movs	r3, r4
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	f008 fd42 	bl	8013d84 <CreateLine>
    *airtemp = 0.0;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800b30c:	f009 fab2 	bl	8014874 <HAL_GetTick>
 800b310:	0003      	movs	r3, r0
 800b312:	22fa      	movs	r2, #250	@ 0xfa
 800b314:	00d2      	lsls	r2, r2, #3
 800b316:	189a      	adds	r2, r3, r2
 800b318:	4b39      	ldr	r3, [pc, #228]	@ (800b400 <AHT20_Calculate+0x18c>)
 800b31a:	601a      	str	r2, [r3, #0]
    return false;
 800b31c:	2300      	movs	r3, #0
 800b31e:	e05f      	b.n	800b3e0 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800b320:	4b38      	ldr	r3, [pc, #224]	@ (800b404 <AHT20_Calculate+0x190>)
 800b322:	2200      	movs	r2, #0
 800b324:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800b326:	4b31      	ldr	r3, [pc, #196]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b328:	78db      	ldrb	r3, [r3, #3]
 800b32a:	041a      	lsls	r2, r3, #16
 800b32c:	23f0      	movs	r3, #240	@ 0xf0
 800b32e:	031b      	lsls	r3, r3, #12
 800b330:	401a      	ands	r2, r3
 800b332:	4b2e      	ldr	r3, [pc, #184]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b334:	791b      	ldrb	r3, [r3, #4]
 800b336:	021b      	lsls	r3, r3, #8
 800b338:	18d3      	adds	r3, r2, r3
 800b33a:	4a2c      	ldr	r2, [pc, #176]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b33c:	7952      	ldrb	r2, [r2, #5]
 800b33e:	189b      	adds	r3, r3, r2
 800b340:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f7f6 fac0 	bl	80018c8 <__aeabi_ui2f>
 800b348:	1c03      	adds	r3, r0, #0
 800b34a:	2193      	movs	r1, #147	@ 0x93
 800b34c:	05c9      	lsls	r1, r1, #23
 800b34e:	1c18      	adds	r0, r3, #0
 800b350:	f7f5 fca8 	bl	8000ca4 <__aeabi_fdiv>
 800b354:	1c03      	adds	r3, r0, #0
 800b356:	492c      	ldr	r1, [pc, #176]	@ (800b408 <AHT20_Calculate+0x194>)
 800b358:	1c18      	adds	r0, r3, #0
 800b35a:	f7f5 fe71 	bl	8001040 <__aeabi_fmul>
 800b35e:	1c03      	adds	r3, r0, #0
 800b360:	492a      	ldr	r1, [pc, #168]	@ (800b40c <AHT20_Calculate+0x198>)
 800b362:	1c18      	adds	r0, r3, #0
 800b364:	f7f5 ffc6 	bl	80012f4 <__aeabi_fsub>
 800b368:	1c03      	adds	r3, r0, #0
 800b36a:	1c1a      	adds	r2, r3, #0
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800b370:	4b1e      	ldr	r3, [pc, #120]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b372:	785b      	ldrb	r3, [r3, #1]
 800b374:	031a      	lsls	r2, r3, #12
 800b376:	4b1d      	ldr	r3, [pc, #116]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b378:	789b      	ldrb	r3, [r3, #2]
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	18d3      	adds	r3, r2, r3
 800b37e:	4a1b      	ldr	r2, [pc, #108]	@ (800b3ec <AHT20_Calculate+0x178>)
 800b380:	78d2      	ldrb	r2, [r2, #3]
 800b382:	0912      	lsrs	r2, r2, #4
 800b384:	b2d2      	uxtb	r2, r2
 800b386:	189b      	adds	r3, r3, r2
 800b388:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800b38a:	68b8      	ldr	r0, [r7, #8]
 800b38c:	f7f6 fa9c 	bl	80018c8 <__aeabi_ui2f>
 800b390:	1c03      	adds	r3, r0, #0
 800b392:	2193      	movs	r1, #147	@ 0x93
 800b394:	05c9      	lsls	r1, r1, #23
 800b396:	1c18      	adds	r0, r3, #0
 800b398:	f7f5 fc84 	bl	8000ca4 <__aeabi_fdiv>
 800b39c:	1c03      	adds	r3, r0, #0
 800b39e:	491c      	ldr	r1, [pc, #112]	@ (800b410 <AHT20_Calculate+0x19c>)
 800b3a0:	1c18      	adds	r0, r3, #0
 800b3a2:	f7f5 fe4d 	bl	8001040 <__aeabi_fmul>
 800b3a6:	1c03      	adds	r3, r0, #0
 800b3a8:	1c1a      	adds	r2, r3, #0
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	601a      	str	r2, [r3, #0]
  Info("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	1c18      	adds	r0, r3, #0
 800b3b4:	f7f8 fa6e 	bl	8003894 <__aeabi_f2d>
 800b3b8:	0004      	movs	r4, r0
 800b3ba:	000d      	movs	r5, r1
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	1c18      	adds	r0, r3, #0
 800b3c2:	f7f8 fa67 	bl	8003894 <__aeabi_f2d>
 800b3c6:	0002      	movs	r2, r0
 800b3c8:	000b      	movs	r3, r1
 800b3ca:	4812      	ldr	r0, [pc, #72]	@ (800b414 <AHT20_Calculate+0x1a0>)
 800b3cc:	4912      	ldr	r1, [pc, #72]	@ (800b418 <AHT20_Calculate+0x1a4>)
 800b3ce:	9202      	str	r2, [sp, #8]
 800b3d0:	9303      	str	r3, [sp, #12]
 800b3d2:	9400      	str	r4, [sp, #0]
 800b3d4:	9501      	str	r5, [sp, #4]
 800b3d6:	0002      	movs	r2, r0
 800b3d8:	2002      	movs	r0, #2
 800b3da:	f008 fcd3 	bl	8013d84 <CreateLine>
  return true;
 800b3de:	2301      	movs	r3, #1
}
 800b3e0:	0018      	movs	r0, r3
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	b004      	add	sp, #16
 800b3e6:	bc80      	pop	{r7}
 800b3e8:	46b8      	mov	r8, r7
 800b3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ec:	20000ef4 	.word	0x20000ef4
 800b3f0:	0802c088 	.word	0x0802c088
 800b3f4:	0802bfb8 	.word	0x0802bfb8
 800b3f8:	0802c108 	.word	0x0802c108
 800b3fc:	0802c01c 	.word	0x0802c01c
 800b400:	20000ee0 	.word	0x20000ee0
 800b404:	20000efb 	.word	0x20000efb
 800b408:	43480000 	.word	0x43480000
 800b40c:	42480000 	.word	0x42480000
 800b410:	42c80000 	.word	0x42c80000
 800b414:	0802c130 	.word	0x0802c130
 800b418:	0802c164 	.word	0x0802c164

0800b41c <AHT20_reset>:

bool AHT20_reset(void) {
 800b41c:	b580      	push	{r7, lr}
 800b41e:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b420:	f009 fa28 	bl	8014874 <HAL_GetTick>
 800b424:	0003      	movs	r3, r0
 800b426:	3332      	adds	r3, #50	@ 0x32
 800b428:	001a      	movs	r2, r3
 800b42a:	4b07      	ldr	r3, [pc, #28]	@ (800b448 <AHT20_reset+0x2c>)
 800b42c:	601a      	str	r2, [r3, #0]
  calibrated = false;
 800b42e:	4b07      	ldr	r3, [pc, #28]	@ (800b44c <AHT20_reset+0x30>)
 800b430:	2200      	movs	r2, #0
 800b432:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 800b434:	4b06      	ldr	r3, [pc, #24]	@ (800b450 <AHT20_reset+0x34>)
 800b436:	2201      	movs	r2, #1
 800b438:	0019      	movs	r1, r3
 800b43a:	2038      	movs	r0, #56	@ 0x38
 800b43c:	f7ff fcf2 	bl	800ae24 <WriteRegister>
 800b440:	0003      	movs	r3, r0
}
 800b442:	0018      	movs	r0, r3
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	20000ee0 	.word	0x20000ee0
 800b44c:	20000ee4 	.word	0x20000ee4
 800b450:	20000090 	.word	0x20000090

0800b454 <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800b45a:	4b61      	ldr	r3, [pc, #388]	@ (800b5e0 <AHT_Upkeep+0x18c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	0018      	movs	r0, r3
 800b460:	f008 fc3a 	bl	8013cd8 <TimestampIsReached>
 800b464:	0003      	movs	r3, r0
 800b466:	001a      	movs	r2, r3
 800b468:	2301      	movs	r3, #1
 800b46a:	4053      	eors	r3, r2
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d002      	beq.n	800b478 <AHT_Upkeep+0x24>
    return AHTState;
 800b472:	4b5c      	ldr	r3, [pc, #368]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	e0ae      	b.n	800b5d6 <AHT_Upkeep+0x182>
  }
  switch(AHTState) {
 800b478:	4b5a      	ldr	r3, [pc, #360]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	2b05      	cmp	r3, #5
 800b47e:	d900      	bls.n	800b482 <AHT_Upkeep+0x2e>
 800b480:	e07d      	b.n	800b57e <AHT_Upkeep+0x12a>
 800b482:	009a      	lsls	r2, r3, #2
 800b484:	4b58      	ldr	r3, [pc, #352]	@ (800b5e8 <AHT_Upkeep+0x194>)
 800b486:	18d3      	adds	r3, r2, r3
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800b48c:	4a57      	ldr	r2, [pc, #348]	@ (800b5ec <AHT_Upkeep+0x198>)
 800b48e:	4b58      	ldr	r3, [pc, #352]	@ (800b5f0 <AHT_Upkeep+0x19c>)
 800b490:	0019      	movs	r1, r3
 800b492:	2003      	movs	r0, #3
 800b494:	f008 fc76 	bl	8013d84 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800b498:	f009 f9ec 	bl	8014874 <HAL_GetTick>
 800b49c:	0003      	movs	r3, r0
 800b49e:	4a55      	ldr	r2, [pc, #340]	@ (800b5f4 <AHT_Upkeep+0x1a0>)
 800b4a0:	189a      	adds	r2, r3, r2
 800b4a2:	4b4f      	ldr	r3, [pc, #316]	@ (800b5e0 <AHT_Upkeep+0x18c>)
 800b4a4:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800b4a6:	4b54      	ldr	r3, [pc, #336]	@ (800b5f8 <AHT_Upkeep+0x1a4>)
 800b4a8:	781a      	ldrb	r2, [r3, #0]
 800b4aa:	4b54      	ldr	r3, [pc, #336]	@ (800b5fc <AHT_Upkeep+0x1a8>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d100      	bne.n	800b4b4 <AHT_Upkeep+0x60>
 800b4b2:	e087      	b.n	800b5c4 <AHT_Upkeep+0x170>
      AHTState = AHT_STATE_WAIT;
 800b4b4:	4b4b      	ldr	r3, [pc, #300]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b4b6:	2205      	movs	r2, #5
 800b4b8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b4ba:	e083      	b.n	800b5c4 <AHT_Upkeep+0x170>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b4bc:	f002 fca0 	bl	800de00 <getSensorLock>
 800b4c0:	1e03      	subs	r3, r0, #0
 800b4c2:	d000      	beq.n	800b4c6 <AHT_Upkeep+0x72>
 800b4c4:	e080      	b.n	800b5c8 <AHT_Upkeep+0x174>
      break;
    }
    setSensorLock(AHT20);
 800b4c6:	2002      	movs	r0, #2
 800b4c8:	f002 fc86 	bl	800ddd8 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800b4cc:	f7ff fe40 	bl	800b150 <AHT20_StartMeasurement>
 800b4d0:	0003      	movs	r3, r0
 800b4d2:	001a      	movs	r2, r3
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	4053      	eors	r3, r2
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00c      	beq.n	800b4f8 <AHT_Upkeep+0xa4>
      AHT20_reset();
 800b4de:	f7ff ff9d 	bl	800b41c <AHT20_reset>
      AHT20TimeStamp = HAL_GetTick() + 200;
 800b4e2:	f009 f9c7 	bl	8014874 <HAL_GetTick>
 800b4e6:	0003      	movs	r3, r0
 800b4e8:	33c8      	adds	r3, #200	@ 0xc8
 800b4ea:	001a      	movs	r2, r3
 800b4ec:	4b3c      	ldr	r3, [pc, #240]	@ (800b5e0 <AHT_Upkeep+0x18c>)
 800b4ee:	601a      	str	r2, [r3, #0]
      AHTState = AHT20_ERROR;
 800b4f0:	4b3c      	ldr	r3, [pc, #240]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b4f2:	22ff      	movs	r2, #255	@ 0xff
 800b4f4:	701a      	strb	r2, [r3, #0]
 800b4f6:	e002      	b.n	800b4fe <AHT_Upkeep+0xaa>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800b4f8:	4b3a      	ldr	r3, [pc, #232]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b4fa:	2202      	movs	r2, #2
 800b4fc:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b4fe:	200a      	movs	r0, #10
 800b500:	f009 f9c2 	bl	8014888 <HAL_Delay>
    break;
 800b504:	e065      	b.n	800b5d2 <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800b506:	f7ff fe51 	bl	800b1ac <AHT20_GetMeasurementValues>
 800b50a:	1e03      	subs	r3, r0, #0
 800b50c:	d05e      	beq.n	800b5cc <AHT_Upkeep+0x178>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800b50e:	200a      	movs	r0, #10
 800b510:	f009 f9ba 	bl	8014888 <HAL_Delay>
      setSensorLock(FREE);
 800b514:	2000      	movs	r0, #0
 800b516:	f002 fc5f 	bl	800ddd8 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800b51a:	4b32      	ldr	r3, [pc, #200]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b51c:	2203      	movs	r2, #3
 800b51e:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800b520:	e054      	b.n	800b5cc <AHT_Upkeep+0x178>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800b522:	003a      	movs	r2, r7
 800b524:	1d3b      	adds	r3, r7, #4
 800b526:	0011      	movs	r1, r2
 800b528:	0018      	movs	r0, r3
 800b52a:	f7ff fea3 	bl	800b274 <AHT20_Calculate>
 800b52e:	0003      	movs	r3, r0
 800b530:	001a      	movs	r2, r3
 800b532:	2301      	movs	r3, #1
 800b534:	4053      	eors	r3, r2
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d005      	beq.n	800b548 <AHT_Upkeep+0xf4>
      AHTState = AHT20_ERROR;
 800b53c:	4b29      	ldr	r3, [pc, #164]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b53e:	22ff      	movs	r2, #255	@ 0xff
 800b540:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800b542:	4b28      	ldr	r3, [pc, #160]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	e046      	b.n	800b5d6 <AHT_Upkeep+0x182>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	1c11      	adds	r1, r2, #0
 800b54e:	1c18      	adds	r0, r3, #0
 800b550:	f7f9 fac2 	bl	8004ad8 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	1c11      	adds	r1, r2, #0
 800b55a:	1c18      	adds	r0, r3, #0
 800b55c:	f7f8 ff48 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800b560:	4b20      	ldr	r3, [pc, #128]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b562:	2205      	movs	r2, #5
 800b564:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800b566:	f009 f985 	bl	8014874 <HAL_GetTick>
 800b56a:	0003      	movs	r3, r0
 800b56c:	4a24      	ldr	r2, [pc, #144]	@ (800b600 <AHT_Upkeep+0x1ac>)
 800b56e:	189a      	adds	r2, r3, r2
 800b570:	4b1b      	ldr	r3, [pc, #108]	@ (800b5e0 <AHT_Upkeep+0x18c>)
 800b572:	601a      	str	r2, [r3, #0]
    break;
 800b574:	e02d      	b.n	800b5d2 <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b576:	4b1b      	ldr	r3, [pc, #108]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b578:	2201      	movs	r2, #1
 800b57a:	701a      	strb	r2, [r3, #0]
  break;
 800b57c:	e029      	b.n	800b5d2 <AHT_Upkeep+0x17e>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b57e:	4b19      	ldr	r3, [pc, #100]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b580:	2201      	movs	r2, #1
 800b582:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800b584:	f002 fc3c 	bl	800de00 <getSensorLock>
 800b588:	0003      	movs	r3, r0
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d102      	bne.n	800b594 <AHT_Upkeep+0x140>
      setSensorLock(FREE);
 800b58e:	2000      	movs	r0, #0
 800b590:	f002 fc22 	bl	800ddd8 <setSensorLock>
    }
    AHTerrors++;
 800b594:	4b1b      	ldr	r3, [pc, #108]	@ (800b604 <AHT_Upkeep+0x1b0>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	3301      	adds	r3, #1
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	4b19      	ldr	r3, [pc, #100]	@ (800b604 <AHT_Upkeep+0x1b0>)
 800b59e:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800b5a0:	4b18      	ldr	r3, [pc, #96]	@ (800b604 <AHT_Upkeep+0x1b0>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2b19      	cmp	r3, #25
 800b5a6:	d913      	bls.n	800b5d0 <AHT_Upkeep+0x17c>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800b5a8:	4a17      	ldr	r2, [pc, #92]	@ (800b608 <AHT_Upkeep+0x1b4>)
 800b5aa:	4b18      	ldr	r3, [pc, #96]	@ (800b60c <AHT_Upkeep+0x1b8>)
 800b5ac:	0019      	movs	r1, r3
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	f008 fbe8 	bl	8013d84 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800b5b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	701a      	strb	r2, [r3, #0]
      offday = weekday;
 800b5ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b5f8 <AHT_Upkeep+0x1a4>)
 800b5bc:	781a      	ldrb	r2, [r3, #0]
 800b5be:	4b0f      	ldr	r3, [pc, #60]	@ (800b5fc <AHT_Upkeep+0x1a8>)
 800b5c0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b5c2:	e005      	b.n	800b5d0 <AHT_Upkeep+0x17c>
    break;
 800b5c4:	46c0      	nop			@ (mov r8, r8)
 800b5c6:	e004      	b.n	800b5d2 <AHT_Upkeep+0x17e>
      break;
 800b5c8:	46c0      	nop			@ (mov r8, r8)
 800b5ca:	e002      	b.n	800b5d2 <AHT_Upkeep+0x17e>
    break;
 800b5cc:	46c0      	nop			@ (mov r8, r8)
 800b5ce:	e000      	b.n	800b5d2 <AHT_Upkeep+0x17e>
    break;
 800b5d0:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800b5d2:	4b04      	ldr	r3, [pc, #16]	@ (800b5e4 <AHT_Upkeep+0x190>)
 800b5d4:	781b      	ldrb	r3, [r3, #0]
}
 800b5d6:	0018      	movs	r0, r3
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	b002      	add	sp, #8
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	46c0      	nop			@ (mov r8, r8)
 800b5e0:	20000ee0 	.word	0x20000ee0
 800b5e4:	2000009f 	.word	0x2000009f
 800b5e8:	0802e1cc 	.word	0x0802e1cc
 800b5ec:	0802c168 	.word	0x0802c168
 800b5f0:	0802bfb8 	.word	0x0802bfb8
 800b5f4:	000dbba0 	.word	0x000dbba0
 800b5f8:	20000e43 	.word	0x20000e43
 800b5fc:	20000efc 	.word	0x20000efc
 800b600:	0000ea60 	.word	0x0000ea60
 800b604:	20000efb 	.word	0x20000efb
 800b608:	0802c190 	.word	0x0802c190
 800b60c:	0802c01c 	.word	0x0802c01c

0800b610 <WriteMemRegister>:
static bool bmperror = false;
static uint8_t mode = BMP280_FORCED_MODE;
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b612:	b087      	sub	sp, #28
 800b614:	af02      	add	r7, sp, #8
 800b616:	0004      	movs	r4, r0
 800b618:	0008      	movs	r0, r1
 800b61a:	60ba      	str	r2, [r7, #8]
 800b61c:	0019      	movs	r1, r3
 800b61e:	260e      	movs	r6, #14
 800b620:	19bb      	adds	r3, r7, r6
 800b622:	1c22      	adds	r2, r4, #0
 800b624:	801a      	strh	r2, [r3, #0]
 800b626:	230c      	movs	r3, #12
 800b628:	18fb      	adds	r3, r7, r3
 800b62a:	1c02      	adds	r2, r0, #0
 800b62c:	801a      	strh	r2, [r3, #0]
 800b62e:	1dbb      	adds	r3, r7, #6
 800b630:	1c0a      	adds	r2, r1, #0
 800b632:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800b634:	4b0c      	ldr	r3, [pc, #48]	@ (800b668 <WriteMemRegister+0x58>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d010      	beq.n	800b65e <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b63c:	4b0a      	ldr	r3, [pc, #40]	@ (800b668 <WriteMemRegister+0x58>)
 800b63e:	681c      	ldr	r4, [r3, #0]
 800b640:	4b0a      	ldr	r3, [pc, #40]	@ (800b66c <WriteMemRegister+0x5c>)
 800b642:	7818      	ldrb	r0, [r3, #0]
 800b644:	68bd      	ldr	r5, [r7, #8]
 800b646:	230c      	movs	r3, #12
 800b648:	18fb      	adds	r3, r7, r3
 800b64a:	881a      	ldrh	r2, [r3, #0]
 800b64c:	19bb      	adds	r3, r7, r6
 800b64e:	8819      	ldrh	r1, [r3, #0]
 800b650:	1dbb      	adds	r3, r7, #6
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	002b      	movs	r3, r5
 800b658:	47a0      	blx	r4
 800b65a:	0003      	movs	r3, r0
 800b65c:	e000      	b.n	800b660 <WriteMemRegister+0x50>
  }
  return false;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	0018      	movs	r0, r3
 800b662:	46bd      	mov	sp, r7
 800b664:	b005      	add	sp, #20
 800b666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b668:	20000f00 	.word	0x20000f00
 800b66c:	200000a0 	.word	0x200000a0

0800b670 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b672:	b087      	sub	sp, #28
 800b674:	af02      	add	r7, sp, #8
 800b676:	0004      	movs	r4, r0
 800b678:	0008      	movs	r0, r1
 800b67a:	60ba      	str	r2, [r7, #8]
 800b67c:	0019      	movs	r1, r3
 800b67e:	260e      	movs	r6, #14
 800b680:	19bb      	adds	r3, r7, r6
 800b682:	1c22      	adds	r2, r4, #0
 800b684:	801a      	strh	r2, [r3, #0]
 800b686:	230c      	movs	r3, #12
 800b688:	18fb      	adds	r3, r7, r3
 800b68a:	1c02      	adds	r2, r0, #0
 800b68c:	801a      	strh	r2, [r3, #0]
 800b68e:	1dbb      	adds	r3, r7, #6
 800b690:	1c0a      	adds	r2, r1, #0
 800b692:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800b694:	4b0c      	ldr	r3, [pc, #48]	@ (800b6c8 <ReadMemRegister+0x58>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d010      	beq.n	800b6be <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b69c:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c8 <ReadMemRegister+0x58>)
 800b69e:	681c      	ldr	r4, [r3, #0]
 800b6a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b6cc <ReadMemRegister+0x5c>)
 800b6a2:	7818      	ldrb	r0, [r3, #0]
 800b6a4:	68bd      	ldr	r5, [r7, #8]
 800b6a6:	230c      	movs	r3, #12
 800b6a8:	18fb      	adds	r3, r7, r3
 800b6aa:	881a      	ldrh	r2, [r3, #0]
 800b6ac:	19bb      	adds	r3, r7, r6
 800b6ae:	8819      	ldrh	r1, [r3, #0]
 800b6b0:	1dbb      	adds	r3, r7, #6
 800b6b2:	881b      	ldrh	r3, [r3, #0]
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	002b      	movs	r3, r5
 800b6b8:	47a0      	blx	r4
 800b6ba:	0003      	movs	r3, r0
 800b6bc:	e000      	b.n	800b6c0 <ReadMemRegister+0x50>
  }
  return false;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	0018      	movs	r0, r3
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	b005      	add	sp, #20
 800b6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6c8:	20000f04 	.word	0x20000f04
 800b6cc:	200000a0 	.word	0x200000a0

0800b6d0 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800b6d8:	f009 f8cc 	bl	8014874 <HAL_GetTick>
 800b6dc:	0002      	movs	r2, r0
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	18d2      	adds	r2, r2, r3
 800b6e2:	4b03      	ldr	r3, [pc, #12]	@ (800b6f0 <setBMP280TimeStamp+0x20>)
 800b6e4:	601a      	str	r2, [r3, #0]
}
 800b6e6:	46c0      	nop			@ (mov r8, r8)
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	b002      	add	sp, #8
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	46c0      	nop			@ (mov r8, r8)
 800b6f0:	20000f24 	.word	0x20000f24

0800b6f4 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800b6fe:	4b05      	ldr	r3, [pc, #20]	@ (800b714 <BMP_Init+0x20>)
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800b704:	4b04      	ldr	r3, [pc, #16]	@ (800b718 <BMP_Init+0x24>)
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	601a      	str	r2, [r3, #0]
}
 800b70a:	46c0      	nop			@ (mov r8, r8)
 800b70c:	46bd      	mov	sp, r7
 800b70e:	b002      	add	sp, #8
 800b710:	bd80      	pop	{r7, pc}
 800b712:	46c0      	nop			@ (mov r8, r8)
 800b714:	20000f04 	.word	0x20000f04
 800b718:	20000f00 	.word	0x20000f00

0800b71c <BMP280_reset>:

static void BMP280_reset() {
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800b722:	1dfb      	adds	r3, r7, #7
 800b724:	22b6      	movs	r2, #182	@ 0xb6
 800b726:	701a      	strb	r2, [r3, #0]
  bmperror = false;
 800b728:	4b0a      	ldr	r3, [pc, #40]	@ (800b754 <BMP280_reset+0x38>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800b72e:	1dfa      	adds	r2, r7, #7
 800b730:	2301      	movs	r3, #1
 800b732:	2101      	movs	r1, #1
 800b734:	20e0      	movs	r0, #224	@ 0xe0
 800b736:	f7ff ff6b 	bl	800b610 <WriteMemRegister>
  Info("BMP280 has been reset");
 800b73a:	4a07      	ldr	r2, [pc, #28]	@ (800b758 <BMP280_reset+0x3c>)
 800b73c:	4b07      	ldr	r3, [pc, #28]	@ (800b75c <BMP280_reset+0x40>)
 800b73e:	0019      	movs	r1, r3
 800b740:	2002      	movs	r0, #2
 800b742:	f008 fb1f 	bl	8013d84 <CreateLine>
  HAL_Delay(100);
 800b746:	2064      	movs	r0, #100	@ 0x64
 800b748:	f009 f89e 	bl	8014888 <HAL_Delay>
}
 800b74c:	46c0      	nop			@ (mov r8, r8)
 800b74e:	46bd      	mov	sp, r7
 800b750:	b002      	add	sp, #8
 800b752:	bd80      	pop	{r7, pc}
 800b754:	20000f2a 	.word	0x20000f2a
 800b758:	0802c1d4 	.word	0x0802c1d4
 800b75c:	0802c1ec 	.word	0x0802c1ec

0800b760 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800b760:	b590      	push	{r4, r7, lr}
 800b762:	b085      	sub	sp, #20
 800b764:	af02      	add	r7, sp, #8
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, (uint8_t *)&dig, sizeof(dig));
 800b766:	4a30      	ldr	r2, [pc, #192]	@ (800b828 <BMP280_get_calibration+0xc8>)
 800b768:	2318      	movs	r3, #24
 800b76a:	2101      	movs	r1, #1
 800b76c:	2088      	movs	r0, #136	@ 0x88
 800b76e:	f7ff ff7f 	bl	800b670 <ReadMemRegister>
  Debug("BMP280 calibration data:");
 800b772:	4a2e      	ldr	r2, [pc, #184]	@ (800b82c <BMP280_get_calibration+0xcc>)
 800b774:	4b2e      	ldr	r3, [pc, #184]	@ (800b830 <BMP280_get_calibration+0xd0>)
 800b776:	0019      	movs	r1, r3
 800b778:	2003      	movs	r0, #3
 800b77a:	f008 fb03 	bl	8013d84 <CreateLine>
  char stc = 'T';
 800b77e:	1dfb      	adds	r3, r7, #7
 800b780:	2254      	movs	r2, #84	@ 0x54
 800b782:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 1;
 800b784:	1dbb      	adds	r3, r7, #6
 800b786:	2201      	movs	r2, #1
 800b788:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b78a:	1d7b      	adds	r3, r7, #5
 800b78c:	2200      	movs	r2, #0
 800b78e:	701a      	strb	r2, [r3, #0]
 800b790:	e041      	b.n	800b816 <BMP280_get_calibration+0xb6>
    if ((x == 0) || (x == 3)) {
 800b792:	1d7b      	adds	r3, r7, #5
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d003      	beq.n	800b7a2 <BMP280_get_calibration+0x42>
 800b79a:	1d7b      	adds	r3, r7, #5
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d11d      	bne.n	800b7de <BMP280_get_calibration+0x7e>
      if (x==3) {
 800b7a2:	1d7b      	adds	r3, r7, #5
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	2b03      	cmp	r3, #3
 800b7a8:	d105      	bne.n	800b7b6 <BMP280_get_calibration+0x56>
        idx = 1;
 800b7aa:	1dbb      	adds	r3, r7, #6
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	701a      	strb	r2, [r3, #0]
        stc = 'P';
 800b7b0:	1dfb      	adds	r3, r7, #7
 800b7b2:	2250      	movs	r2, #80	@ 0x50
 800b7b4:	701a      	strb	r2, [r3, #0]
      }
      Debug("dig.%c%d: %d", stc, idx, (uint16_t)dig.calarray[x]);
 800b7b6:	1dfb      	adds	r3, r7, #7
 800b7b8:	7818      	ldrb	r0, [r3, #0]
 800b7ba:	1dbb      	adds	r3, r7, #6
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	1d7a      	adds	r2, r7, #5
 800b7c0:	7811      	ldrb	r1, [r2, #0]
 800b7c2:	4a19      	ldr	r2, [pc, #100]	@ (800b828 <BMP280_get_calibration+0xc8>)
 800b7c4:	0049      	lsls	r1, r1, #1
 800b7c6:	5e8a      	ldrsh	r2, [r1, r2]
 800b7c8:	b292      	uxth	r2, r2
 800b7ca:	0014      	movs	r4, r2
 800b7cc:	4a19      	ldr	r2, [pc, #100]	@ (800b834 <BMP280_get_calibration+0xd4>)
 800b7ce:	4918      	ldr	r1, [pc, #96]	@ (800b830 <BMP280_get_calibration+0xd0>)
 800b7d0:	9401      	str	r4, [sp, #4]
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	0003      	movs	r3, r0
 800b7d6:	2003      	movs	r0, #3
 800b7d8:	f008 fad4 	bl	8013d84 <CreateLine>
 800b7dc:	e011      	b.n	800b802 <BMP280_get_calibration+0xa2>
    }
    else {
    Debug("dig.%c%d: %d", stc, idx, dig.calarray[x]);
 800b7de:	1dfb      	adds	r3, r7, #7
 800b7e0:	7818      	ldrb	r0, [r3, #0]
 800b7e2:	1dbb      	adds	r3, r7, #6
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	1d7a      	adds	r2, r7, #5
 800b7e8:	7811      	ldrb	r1, [r2, #0]
 800b7ea:	4a0f      	ldr	r2, [pc, #60]	@ (800b828 <BMP280_get_calibration+0xc8>)
 800b7ec:	0049      	lsls	r1, r1, #1
 800b7ee:	5e8a      	ldrsh	r2, [r1, r2]
 800b7f0:	0014      	movs	r4, r2
 800b7f2:	4a10      	ldr	r2, [pc, #64]	@ (800b834 <BMP280_get_calibration+0xd4>)
 800b7f4:	490e      	ldr	r1, [pc, #56]	@ (800b830 <BMP280_get_calibration+0xd0>)
 800b7f6:	9401      	str	r4, [sp, #4]
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	0003      	movs	r3, r0
 800b7fc:	2003      	movs	r0, #3
 800b7fe:	f008 fac1 	bl	8013d84 <CreateLine>
    }
    idx++;
 800b802:	1dbb      	adds	r3, r7, #6
 800b804:	781a      	ldrb	r2, [r3, #0]
 800b806:	1dbb      	adds	r3, r7, #6
 800b808:	3201      	adds	r2, #1
 800b80a:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b80c:	1d7b      	adds	r3, r7, #5
 800b80e:	781a      	ldrb	r2, [r3, #0]
 800b810:	1d7b      	adds	r3, r7, #5
 800b812:	3201      	adds	r2, #1
 800b814:	701a      	strb	r2, [r3, #0]
 800b816:	1d7b      	adds	r3, r7, #5
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	2b0b      	cmp	r3, #11
 800b81c:	d9b9      	bls.n	800b792 <BMP280_get_calibration+0x32>
  }
}
 800b81e:	46c0      	nop			@ (mov r8, r8)
 800b820:	46c0      	nop			@ (mov r8, r8)
 800b822:	46bd      	mov	sp, r7
 800b824:	b003      	add	sp, #12
 800b826:	bd90      	pop	{r4, r7, pc}
 800b828:	20000f08 	.word	0x20000f08
 800b82c:	0802c1f0 	.word	0x0802c1f0
 800b830:	0802c20c 	.word	0x0802c20c
 800b834:	0802c210 	.word	0x0802c210

0800b838 <BMP280_set_config>:

void BMP280_set_config() {
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_16 | BMP280_SPI_OFF);
 800b83e:	1dfb      	adds	r3, r7, #7
 800b840:	2290      	movs	r2, #144	@ 0x90
 800b842:	701a      	strb	r2, [r3, #0]
  if (!WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1)) {
 800b844:	1dfa      	adds	r2, r7, #7
 800b846:	2301      	movs	r3, #1
 800b848:	2101      	movs	r1, #1
 800b84a:	20f5      	movs	r0, #245	@ 0xf5
 800b84c:	f7ff fee0 	bl	800b610 <WriteMemRegister>
 800b850:	0003      	movs	r3, r0
 800b852:	001a      	movs	r2, r3
 800b854:	2301      	movs	r3, #1
 800b856:	4053      	eors	r3, r2
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d005      	beq.n	800b86a <BMP280_set_config+0x32>
    Error("BMP280 writing to BMP280_REG_CONFIG");
 800b85e:	4a0b      	ldr	r2, [pc, #44]	@ (800b88c <BMP280_set_config+0x54>)
 800b860:	4b0b      	ldr	r3, [pc, #44]	@ (800b890 <BMP280_set_config+0x58>)
 800b862:	0019      	movs	r1, r3
 800b864:	2001      	movs	r0, #1
 800b866:	f008 fa8d 	bl	8013d84 <CreateLine>
  }
  ReadMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800b86a:	1dfa      	adds	r2, r7, #7
 800b86c:	2301      	movs	r3, #1
 800b86e:	2101      	movs	r1, #1
 800b870:	20f5      	movs	r0, #245	@ 0xf5
 800b872:	f7ff fefd 	bl	800b670 <ReadMemRegister>
  Debug("BMP280_REG_CONFIG: 0x%02X", data);
 800b876:	1dfb      	adds	r3, r7, #7
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	4a06      	ldr	r2, [pc, #24]	@ (800b894 <BMP280_set_config+0x5c>)
 800b87c:	4906      	ldr	r1, [pc, #24]	@ (800b898 <BMP280_set_config+0x60>)
 800b87e:	2003      	movs	r0, #3
 800b880:	f008 fa80 	bl	8013d84 <CreateLine>
}
 800b884:	46c0      	nop			@ (mov r8, r8)
 800b886:	46bd      	mov	sp, r7
 800b888:	b002      	add	sp, #8
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	0802c220 	.word	0x0802c220
 800b890:	0802c244 	.word	0x0802c244
 800b894:	0802c248 	.word	0x0802c248
 800b898:	0802c20c 	.word	0x0802c20c

0800b89c <BMP280_DeviceConnected>:

 bool BMP280_DeviceConnected() {
 800b89c:	b590      	push	{r4, r7, lr}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af02      	add	r7, sp, #8
   bool rslt = false;
 800b8a2:	1dfb      	adds	r3, r7, #7
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	701a      	strb	r2, [r3, #0]
    uint8_t bmpData;
    // Read the chip-id of bmp280 sensor
    bmp280I2Caddr = BMP280_ADDRESS;
 800b8a8:	4b28      	ldr	r3, [pc, #160]	@ (800b94c <BMP280_DeviceConnected+0xb0>)
 800b8aa:	2276      	movs	r2, #118	@ 0x76
 800b8ac:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b8ae:	1dfc      	adds	r4, r7, #7
 800b8b0:	1dba      	adds	r2, r7, #6
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	20d0      	movs	r0, #208	@ 0xd0
 800b8b8:	f7ff feda 	bl	800b670 <ReadMemRegister>
 800b8bc:	0003      	movs	r3, r0
 800b8be:	7023      	strb	r3, [r4, #0]
    if (bmpData != BMP280_CHIP_ID) {
 800b8c0:	1dbb      	adds	r3, r7, #6
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	2b58      	cmp	r3, #88	@ 0x58
 800b8c6:	d00e      	beq.n	800b8e6 <BMP280_DeviceConnected+0x4a>
      bmp280I2Caddr++;
 800b8c8:	4b20      	ldr	r3, [pc, #128]	@ (800b94c <BMP280_DeviceConnected+0xb0>)
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	4b1e      	ldr	r3, [pc, #120]	@ (800b94c <BMP280_DeviceConnected+0xb0>)
 800b8d2:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b8d4:	1dfc      	adds	r4, r7, #7
 800b8d6:	1dba      	adds	r2, r7, #6
 800b8d8:	2301      	movs	r3, #1
 800b8da:	2101      	movs	r1, #1
 800b8dc:	20d0      	movs	r0, #208	@ 0xd0
 800b8de:	f7ff fec7 	bl	800b670 <ReadMemRegister>
 800b8e2:	0003      	movs	r3, r0
 800b8e4:	7023      	strb	r3, [r4, #0]
    }
    if (rslt && (bmpData == BMP280_CHIP_ID)) {
 800b8e6:	1dfb      	adds	r3, r7, #7
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d01b      	beq.n	800b926 <BMP280_DeviceConnected+0x8a>
 800b8ee:	1dbb      	adds	r3, r7, #6
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b58      	cmp	r3, #88	@ 0x58
 800b8f4:	d117      	bne.n	800b926 <BMP280_DeviceConnected+0x8a>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800b8f6:	1dbb      	adds	r3, r7, #6
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	0018      	movs	r0, r3
 800b8fc:	4b13      	ldr	r3, [pc, #76]	@ (800b94c <BMP280_DeviceConnected+0xb0>)
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	4a13      	ldr	r2, [pc, #76]	@ (800b950 <BMP280_DeviceConnected+0xb4>)
 800b902:	4914      	ldr	r1, [pc, #80]	@ (800b954 <BMP280_DeviceConnected+0xb8>)
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	0003      	movs	r3, r0
 800b908:	2002      	movs	r0, #2
 800b90a:	f008 fa3b 	bl	8013d84 <CreateLine>
      BMP280_reset(); // get an initial state
 800b90e:	f7ff ff05 	bl	800b71c <BMP280_reset>
      HAL_Delay(3);
 800b912:	2003      	movs	r0, #3
 800b914:	f008 ffb8 	bl	8014888 <HAL_Delay>
      BMP280_get_calibration();
 800b918:	f7ff ff22 	bl	800b760 <BMP280_get_calibration>
      BMP280_set_config();
 800b91c:	f7ff ff8c 	bl	800b838 <BMP280_set_config>
      BMP280_set_mode();
 800b920:	f000 f8f6 	bl	800bb10 <BMP280_set_mode>
 800b924:	e008      	b.n	800b938 <BMP280_DeviceConnected+0x9c>
    }
    else {
      bmp280I2Caddr = 0;
 800b926:	4b09      	ldr	r3, [pc, #36]	@ (800b94c <BMP280_DeviceConnected+0xb0>)
 800b928:	2200      	movs	r2, #0
 800b92a:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800b92c:	4a0a      	ldr	r2, [pc, #40]	@ (800b958 <BMP280_DeviceConnected+0xbc>)
 800b92e:	4b0b      	ldr	r3, [pc, #44]	@ (800b95c <BMP280_DeviceConnected+0xc0>)
 800b930:	0019      	movs	r1, r3
 800b932:	2001      	movs	r0, #1
 800b934:	f008 fa26 	bl	8013d84 <CreateLine>
    }
    return bmp280I2Caddr;
 800b938:	4b04      	ldr	r3, [pc, #16]	@ (800b94c <BMP280_DeviceConnected+0xb0>)
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	1e5a      	subs	r2, r3, #1
 800b93e:	4193      	sbcs	r3, r2
 800b940:	b2db      	uxtb	r3, r3
}
 800b942:	0018      	movs	r0, r3
 800b944:	46bd      	mov	sp, r7
 800b946:	b003      	add	sp, #12
 800b948:	bd90      	pop	{r4, r7, pc}
 800b94a:	46c0      	nop			@ (mov r8, r8)
 800b94c:	200000a0 	.word	0x200000a0
 800b950:	0802c264 	.word	0x0802c264
 800b954:	0802c1ec 	.word	0x0802c1ec
 800b958:	0802c29c 	.word	0x0802c29c
 800b95c:	0802c244 	.word	0x0802c244

0800b960 <BMP280_get_measurement_values>:

static bool BMP280_get_measurement_values() {
 800b960:	b5b0      	push	{r4, r5, r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af04      	add	r7, sp, #16
  int8_t rslt = 1;
 800b966:	1dfb      	adds	r3, r7, #7
 800b968:	2201      	movs	r2, #1
 800b96a:	701a      	strb	r2, [r3, #0]
  uint8_t bmpData[6];
  HAL_Delay(9);
 800b96c:	2009      	movs	r0, #9
 800b96e:	f008 ff8b 	bl	8014888 <HAL_Delay>
  BMP280TimeStamp = HAL_GetTick() + 1500;  // time for local loop
 800b972:	f008 ff7f 	bl	8014874 <HAL_GetTick>
 800b976:	0003      	movs	r3, r0
 800b978:	4a49      	ldr	r2, [pc, #292]	@ (800baa0 <BMP280_get_measurement_values+0x140>)
 800b97a:	189a      	adds	r2, r3, r2
 800b97c:	4b49      	ldr	r3, [pc, #292]	@ (800baa4 <BMP280_get_measurement_values+0x144>)
 800b97e:	601a      	str	r2, [r3, #0]
  do {
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData[0], 1); // store at start address of array
 800b980:	003a      	movs	r2, r7
 800b982:	2301      	movs	r3, #1
 800b984:	2101      	movs	r1, #1
 800b986:	20f3      	movs	r0, #243	@ 0xf3
 800b988:	f7ff fe72 	bl	800b670 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)) {
 800b98c:	4b45      	ldr	r3, [pc, #276]	@ (800baa4 <BMP280_get_measurement_values+0x144>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	0018      	movs	r0, r3
 800b992:	f008 f9a1 	bl	8013cd8 <TimestampIsReached>
 800b996:	1e03      	subs	r3, r0, #0
 800b998:	d007      	beq.n	800b9aa <BMP280_get_measurement_values+0x4a>
      Error("BMP280 timeout while waiting for ready.");
 800b99a:	4a43      	ldr	r2, [pc, #268]	@ (800baa8 <BMP280_get_measurement_values+0x148>)
 800b99c:	4b43      	ldr	r3, [pc, #268]	@ (800baac <BMP280_get_measurement_values+0x14c>)
 800b99e:	0019      	movs	r1, r3
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	f008 f9ef 	bl	8013d84 <CreateLine>
      return false;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	e076      	b.n	800ba98 <BMP280_get_measurement_values+0x138>
    }
    HAL_Delay(10);
 800b9aa:	200a      	movs	r0, #10
 800b9ac:	f008 ff6c 	bl	8014888 <HAL_Delay>
  } while ((bmpData[0] & (BMP280_NVM_RDY | BMP280_MEAS_RDY)) != 0);
 800b9b0:	003b      	movs	r3, r7
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	001a      	movs	r2, r3
 800b9b6:	2309      	movs	r3, #9
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	d1e1      	bne.n	800b980 <BMP280_get_measurement_values+0x20>
  //  } while (((bmpData[0] & BMP280_NVM_RDY) == BMP280_NVM_RDY) || ((bmpData[0] & BMP280_MEAS_RDY) == BMP280_MEAS_RDY));
  rslt = ReadMemRegister(BMP280_REG_PRESS_MSB, 1, &bmpData[0], 6);
 800b9bc:	003a      	movs	r2, r7
 800b9be:	2306      	movs	r3, #6
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	20f7      	movs	r0, #247	@ 0xf7
 800b9c4:	f7ff fe54 	bl	800b670 <ReadMemRegister>
 800b9c8:	0003      	movs	r3, r0
 800b9ca:	001a      	movs	r2, r3
 800b9cc:	1dfb      	adds	r3, r7, #7
 800b9ce:	701a      	strb	r2, [r3, #0]
  raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800b9d0:	003b      	movs	r3, r7
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	031a      	lsls	r2, r3, #12
 800b9d6:	003b      	movs	r3, r7
 800b9d8:	785b      	ldrb	r3, [r3, #1]
 800b9da:	011b      	lsls	r3, r3, #4
 800b9dc:	18d3      	adds	r3, r2, r3
 800b9de:	003a      	movs	r2, r7
 800b9e0:	7892      	ldrb	r2, [r2, #2]
 800b9e2:	0912      	lsrs	r2, r2, #4
 800b9e4:	b2d2      	uxtb	r2, r2
 800b9e6:	189b      	adds	r3, r3, r2
 800b9e8:	001a      	movs	r2, r3
 800b9ea:	4b31      	ldr	r3, [pc, #196]	@ (800bab0 <BMP280_get_measurement_values+0x150>)
 800b9ec:	601a      	str	r2, [r3, #0]
  if (bmpData[0] == 0x80) {
 800b9ee:	003b      	movs	r3, r7
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b80      	cmp	r3, #128	@ 0x80
 800b9f4:	d11b      	bne.n	800ba2e <BMP280_get_measurement_values+0xce>
    Error("BMP280 Invalid read of barometric pressure.");
 800b9f6:	4a2f      	ldr	r2, [pc, #188]	@ (800bab4 <BMP280_get_measurement_values+0x154>)
 800b9f8:	4b2c      	ldr	r3, [pc, #176]	@ (800baac <BMP280_get_measurement_values+0x14c>)
 800b9fa:	0019      	movs	r1, r3
 800b9fc:	2001      	movs	r0, #1
 800b9fe:	f008 f9c1 	bl	8013d84 <CreateLine>
    Debug("Data[0]: 0x%02X, Data[1]: 0x%02X, Data[2]: 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800ba02:	003b      	movs	r3, r7
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	001d      	movs	r5, r3
 800ba08:	003b      	movs	r3, r7
 800ba0a:	785b      	ldrb	r3, [r3, #1]
 800ba0c:	0018      	movs	r0, r3
 800ba0e:	003b      	movs	r3, r7
 800ba10:	789b      	ldrb	r3, [r3, #2]
 800ba12:	001c      	movs	r4, r3
 800ba14:	4b26      	ldr	r3, [pc, #152]	@ (800bab0 <BMP280_get_measurement_values+0x150>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a27      	ldr	r2, [pc, #156]	@ (800bab8 <BMP280_get_measurement_values+0x158>)
 800ba1a:	4928      	ldr	r1, [pc, #160]	@ (800babc <BMP280_get_measurement_values+0x15c>)
 800ba1c:	9302      	str	r3, [sp, #8]
 800ba1e:	9401      	str	r4, [sp, #4]
 800ba20:	9000      	str	r0, [sp, #0]
 800ba22:	002b      	movs	r3, r5
 800ba24:	2003      	movs	r0, #3
 800ba26:	f008 f9ad 	bl	8013d84 <CreateLine>
    SetAllBlueLED();
 800ba2a:	f007 f8db 	bl	8012be4 <SetAllBlueLED>
  }
  raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800ba2e:	003b      	movs	r3, r7
 800ba30:	78db      	ldrb	r3, [r3, #3]
 800ba32:	031a      	lsls	r2, r3, #12
 800ba34:	003b      	movs	r3, r7
 800ba36:	791b      	ldrb	r3, [r3, #4]
 800ba38:	011b      	lsls	r3, r3, #4
 800ba3a:	18d3      	adds	r3, r2, r3
 800ba3c:	003a      	movs	r2, r7
 800ba3e:	7952      	ldrb	r2, [r2, #5]
 800ba40:	0912      	lsrs	r2, r2, #4
 800ba42:	b2d2      	uxtb	r2, r2
 800ba44:	189b      	adds	r3, r3, r2
 800ba46:	001a      	movs	r2, r3
 800ba48:	4b1d      	ldr	r3, [pc, #116]	@ (800bac0 <BMP280_get_measurement_values+0x160>)
 800ba4a:	601a      	str	r2, [r3, #0]
  if (bmpData[3] == 0x80) {
 800ba4c:	003b      	movs	r3, r7
 800ba4e:	78db      	ldrb	r3, [r3, #3]
 800ba50:	2b80      	cmp	r3, #128	@ 0x80
 800ba52:	d11b      	bne.n	800ba8c <BMP280_get_measurement_values+0x12c>
    Error("BMP280 Invalid read of temperature.");
 800ba54:	4a1b      	ldr	r2, [pc, #108]	@ (800bac4 <BMP280_get_measurement_values+0x164>)
 800ba56:	4b15      	ldr	r3, [pc, #84]	@ (800baac <BMP280_get_measurement_values+0x14c>)
 800ba58:	0019      	movs	r1, r3
 800ba5a:	2001      	movs	r0, #1
 800ba5c:	f008 f992 	bl	8013d84 <CreateLine>
    Debug("Data[3]: 0x%02X, Data[4]: 0x%02X, Data[5]: 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800ba60:	003b      	movs	r3, r7
 800ba62:	78db      	ldrb	r3, [r3, #3]
 800ba64:	001d      	movs	r5, r3
 800ba66:	003b      	movs	r3, r7
 800ba68:	791b      	ldrb	r3, [r3, #4]
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	003b      	movs	r3, r7
 800ba6e:	795b      	ldrb	r3, [r3, #5]
 800ba70:	001c      	movs	r4, r3
 800ba72:	4b13      	ldr	r3, [pc, #76]	@ (800bac0 <BMP280_get_measurement_values+0x160>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a14      	ldr	r2, [pc, #80]	@ (800bac8 <BMP280_get_measurement_values+0x168>)
 800ba78:	4910      	ldr	r1, [pc, #64]	@ (800babc <BMP280_get_measurement_values+0x15c>)
 800ba7a:	9302      	str	r3, [sp, #8]
 800ba7c:	9401      	str	r4, [sp, #4]
 800ba7e:	9000      	str	r0, [sp, #0]
 800ba80:	002b      	movs	r3, r5
 800ba82:	2003      	movs	r0, #3
 800ba84:	f008 f97e 	bl	8013d84 <CreateLine>
    SetAllBlueLED();
 800ba88:	f007 f8ac 	bl	8012be4 <SetAllBlueLED>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld, rslt: %s", raw_mpa, raw_temp, rslt?"success":"fail");
  return rslt;
 800ba8c:	1dfb      	adds	r3, r7, #7
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	b25b      	sxtb	r3, r3
 800ba92:	1e5a      	subs	r2, r3, #1
 800ba94:	4193      	sbcs	r3, r2
 800ba96:	b2db      	uxtb	r3, r3
}
 800ba98:	0018      	movs	r0, r3
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	b002      	add	sp, #8
 800ba9e:	bdb0      	pop	{r4, r5, r7, pc}
 800baa0:	000005dc 	.word	0x000005dc
 800baa4:	20000f24 	.word	0x20000f24
 800baa8:	0802c2b0 	.word	0x0802c2b0
 800baac:	0802c244 	.word	0x0802c244
 800bab0:	20000f30 	.word	0x20000f30
 800bab4:	0802c2d8 	.word	0x0802c2d8
 800bab8:	0802c304 	.word	0x0802c304
 800babc:	0802c20c 	.word	0x0802c20c
 800bac0:	20000f2c 	.word	0x20000f2c
 800bac4:	0802c344 	.word	0x0802c344
 800bac8:	0802c368 	.word	0x0802c368

0800bacc <BMP280_get_mode>:

static uint8_t BMP280_get_mode() {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800bad2:	1dba      	adds	r2, r7, #6
 800bad4:	2301      	movs	r3, #1
 800bad6:	2101      	movs	r1, #1
 800bad8:	20f4      	movs	r0, #244	@ 0xf4
 800bada:	f7ff fdc9 	bl	800b670 <ReadMemRegister>
 800bade:	0003      	movs	r3, r0
 800bae0:	001a      	movs	r2, r3
 800bae2:	1dfb      	adds	r3, r7, #7
 800bae4:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800bae6:	1dbb      	adds	r3, r7, #6
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	2203      	movs	r2, #3
 800baec:	4013      	ands	r3, r2
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	1dbb      	adds	r3, r7, #6
 800baf2:	701a      	strb	r2, [r3, #0]
  if (rslt == 0) {
 800baf4:	1dfb      	adds	r3, r7, #7
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	b25b      	sxtb	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d102      	bne.n	800bb04 <BMP280_get_mode+0x38>
    bmpData = 255;
 800bafe:	1dbb      	adds	r3, r7, #6
 800bb00:	22ff      	movs	r2, #255	@ 0xff
 800bb02:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800bb04:	1dbb      	adds	r3, r7, #6
 800bb06:	781b      	ldrb	r3, [r3, #0]
}
 800bb08:	0018      	movs	r0, r3
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	b002      	add	sp, #8
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <BMP280_set_mode>:

static bool BMP280_set_mode() {
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_16 | mode);
 800bb16:	4b1a      	ldr	r3, [pc, #104]	@ (800bb80 <BMP280_set_mode+0x70>)
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	2254      	movs	r2, #84	@ 0x54
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	b2da      	uxtb	r2, r3
 800bb20:	1dfb      	adds	r3, r7, #7
 800bb22:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800bb24:	1dfa      	adds	r2, r7, #7
 800bb26:	2301      	movs	r3, #1
 800bb28:	2101      	movs	r1, #1
 800bb2a:	20f4      	movs	r0, #244	@ 0xf4
 800bb2c:	f7ff fd70 	bl	800b610 <WriteMemRegister>
  HAL_Delay(10);
 800bb30:	200a      	movs	r0, #10
 800bb32:	f008 fea9 	bl	8014888 <HAL_Delay>
  data = BMP280_get_mode();
 800bb36:	f7ff ffc9 	bl	800bacc <BMP280_get_mode>
 800bb3a:	0003      	movs	r3, r0
 800bb3c:	001a      	movs	r2, r3
 800bb3e:	1dfb      	adds	r3, r7, #7
 800bb40:	701a      	strb	r2, [r3, #0]
  data &= BMP280_NORMAL_MODE;
 800bb42:	1dfb      	adds	r3, r7, #7
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	2203      	movs	r2, #3
 800bb48:	4013      	ands	r3, r2
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	1dfb      	adds	r3, r7, #7
 800bb4e:	701a      	strb	r2, [r3, #0]
  Debug("BMP280 Operation mode: %s", data==0?"sleep":data==3?"normal":"forced");
 800bb50:	1dfb      	adds	r3, r7, #7
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d007      	beq.n	800bb68 <BMP280_set_mode+0x58>
 800bb58:	1dfb      	adds	r3, r7, #7
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	2b03      	cmp	r3, #3
 800bb5e:	d101      	bne.n	800bb64 <BMP280_set_mode+0x54>
 800bb60:	4b08      	ldr	r3, [pc, #32]	@ (800bb84 <BMP280_set_mode+0x74>)
 800bb62:	e002      	b.n	800bb6a <BMP280_set_mode+0x5a>
 800bb64:	4b08      	ldr	r3, [pc, #32]	@ (800bb88 <BMP280_set_mode+0x78>)
 800bb66:	e000      	b.n	800bb6a <BMP280_set_mode+0x5a>
 800bb68:	4b08      	ldr	r3, [pc, #32]	@ (800bb8c <BMP280_set_mode+0x7c>)
 800bb6a:	4a09      	ldr	r2, [pc, #36]	@ (800bb90 <BMP280_set_mode+0x80>)
 800bb6c:	4909      	ldr	r1, [pc, #36]	@ (800bb94 <BMP280_set_mode+0x84>)
 800bb6e:	2003      	movs	r0, #3
 800bb70:	f008 f908 	bl	8013d84 <CreateLine>
  return true;
 800bb74:	2301      	movs	r3, #1
}
 800bb76:	0018      	movs	r0, r3
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	b002      	add	sp, #8
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	46c0      	nop			@ (mov r8, r8)
 800bb80:	200000a1 	.word	0x200000a1
 800bb84:	0802c3a8 	.word	0x0802c3a8
 800bb88:	0802c3b0 	.word	0x0802c3b0
 800bb8c:	0802c3b8 	.word	0x0802c3b8
 800bb90:	0802c3c0 	.word	0x0802c3c0
 800bb94:	0802c20c 	.word	0x0802c20c

0800bb98 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade
// copied from datasheet
static float BMP280_calc_temperature() {
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800bb9e:	4b1e      	ldr	r3, [pc, #120]	@ (800bc18 <BMP280_calc_temperature+0x80>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	10da      	asrs	r2, r3, #3
 800bba8:	4b1c      	ldr	r3, [pc, #112]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	4a1a      	ldr	r2, [pc, #104]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbb2:	2102      	movs	r1, #2
 800bbb4:	5e52      	ldrsh	r2, [r2, r1]
 800bbb6:	4353      	muls	r3, r2
 800bbb8:	12db      	asrs	r3, r3, #11
 800bbba:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	111b      	asrs	r3, r3, #4
 800bbc0:	4a16      	ldr	r2, [pc, #88]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbc2:	8812      	ldrh	r2, [r2, #0]
 800bbc4:	1a9b      	subs	r3, r3, r2
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	1112      	asrs	r2, r2, #4
 800bbca:	4914      	ldr	r1, [pc, #80]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbcc:	8809      	ldrh	r1, [r1, #0]
 800bbce:	1a52      	subs	r2, r2, r1
 800bbd0:	4353      	muls	r3, r2
 800bbd2:	131b      	asrs	r3, r3, #12
 800bbd4:	4a11      	ldr	r2, [pc, #68]	@ (800bc1c <BMP280_calc_temperature+0x84>)
 800bbd6:	2104      	movs	r1, #4
 800bbd8:	5e52      	ldrsh	r2, [r2, r1]
 800bbda:	4353      	muls	r3, r2
 800bbdc:	139b      	asrs	r3, r3, #14
 800bbde:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	18d2      	adds	r2, r2, r3
 800bbe6:	4b0e      	ldr	r3, [pc, #56]	@ (800bc20 <BMP280_calc_temperature+0x88>)
 800bbe8:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800bbea:	4b0d      	ldr	r3, [pc, #52]	@ (800bc20 <BMP280_calc_temperature+0x88>)
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	0013      	movs	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	189b      	adds	r3, r3, r2
 800bbf4:	3380      	adds	r3, #128	@ 0x80
 800bbf6:	121b      	asrs	r3, r3, #8
 800bbf8:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800bbfa:	68b8      	ldr	r0, [r7, #8]
 800bbfc:	f7f5 fe14 	bl	8001828 <__aeabi_i2f>
 800bc00:	1c03      	adds	r3, r0, #0
 800bc02:	4908      	ldr	r1, [pc, #32]	@ (800bc24 <BMP280_calc_temperature+0x8c>)
 800bc04:	1c18      	adds	r0, r3, #0
 800bc06:	f7f5 f84d 	bl	8000ca4 <__aeabi_fdiv>
 800bc0a:	1c03      	adds	r3, r0, #0
 800bc0c:	607b      	str	r3, [r7, #4]
  return airTemp;
 800bc0e:	687b      	ldr	r3, [r7, #4]
}
 800bc10:	1c18      	adds	r0, r3, #0
 800bc12:	46bd      	mov	sp, r7
 800bc14:	b006      	add	sp, #24
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	20000f2c 	.word	0x20000f2c
 800bc1c:	20000f08 	.word	0x20000f08
 800bc20:	20000f20 	.word	0x20000f20
 800bc24:	42c80000 	.word	0x42c80000

0800bc28 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800bc2e:	4b4e      	ldr	r3, [pc, #312]	@ (800bd68 <BMP280_calc_pressure+0x140>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800bc34:	4b4d      	ldr	r3, [pc, #308]	@ (800bd6c <BMP280_calc_pressure+0x144>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	105b      	asrs	r3, r3, #1
 800bc3a:	4a4d      	ldr	r2, [pc, #308]	@ (800bd70 <BMP280_calc_pressure+0x148>)
 800bc3c:	4694      	mov	ip, r2
 800bc3e:	4463      	add	r3, ip
 800bc40:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	109b      	asrs	r3, r3, #2
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	1092      	asrs	r2, r2, #2
 800bc4a:	4353      	muls	r3, r2
 800bc4c:	12db      	asrs	r3, r3, #11
 800bc4e:	4a49      	ldr	r2, [pc, #292]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc50:	2110      	movs	r1, #16
 800bc52:	5e52      	ldrsh	r2, [r2, r1]
 800bc54:	4353      	muls	r3, r2
 800bc56:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800bc58:	4b46      	ldr	r3, [pc, #280]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc5a:	220e      	movs	r2, #14
 800bc5c:	5e9b      	ldrsh	r3, [r3, r2]
 800bc5e:	001a      	movs	r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4353      	muls	r3, r2
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	18d3      	adds	r3, r2, r3
 800bc6a:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	109a      	asrs	r2, r3, #2
 800bc70:	4b40      	ldr	r3, [pc, #256]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc72:	210c      	movs	r1, #12
 800bc74:	5e5b      	ldrsh	r3, [r3, r1]
 800bc76:	041b      	lsls	r3, r3, #16
 800bc78:	18d3      	adds	r3, r2, r3
 800bc7a:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800bc7c:	4b3d      	ldr	r3, [pc, #244]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc7e:	220a      	movs	r2, #10
 800bc80:	5e9b      	ldrsh	r3, [r3, r2]
 800bc82:	0019      	movs	r1, r3
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	109b      	asrs	r3, r3, #2
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	1092      	asrs	r2, r2, #2
 800bc8c:	4353      	muls	r3, r2
 800bc8e:	135b      	asrs	r3, r3, #13
 800bc90:	434b      	muls	r3, r1
 800bc92:	10da      	asrs	r2, r3, #3
 800bc94:	4b37      	ldr	r3, [pc, #220]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bc96:	2108      	movs	r1, #8
 800bc98:	5e5b      	ldrsh	r3, [r3, r1]
 800bc9a:	0019      	movs	r1, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	434b      	muls	r3, r1
 800bca0:	105b      	asrs	r3, r3, #1
 800bca2:	18d3      	adds	r3, r2, r3
 800bca4:	149b      	asrs	r3, r3, #18
 800bca6:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2280      	movs	r2, #128	@ 0x80
 800bcac:	0212      	lsls	r2, r2, #8
 800bcae:	4694      	mov	ip, r2
 800bcb0:	4463      	add	r3, ip
 800bcb2:	4a30      	ldr	r2, [pc, #192]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bcb4:	88d2      	ldrh	r2, [r2, #6]
 800bcb6:	4353      	muls	r3, r2
 800bcb8:	13db      	asrs	r3, r3, #15
 800bcba:	60fb      	str	r3, [r7, #12]

  // Avoid exception caused by division with zero
  if (var1 == 0) {
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d101      	bne.n	800bcc6 <BMP280_calc_pressure+0x9e>
    return 0;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	e04b      	b.n	800bd5e <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	2280      	movs	r2, #128	@ 0x80
 800bcca:	0352      	lsls	r2, r2, #13
 800bccc:	1ad2      	subs	r2, r2, r3
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	131b      	asrs	r3, r3, #12
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	001a      	movs	r2, r3
 800bcd6:	4b28      	ldr	r3, [pc, #160]	@ (800bd78 <BMP280_calc_pressure+0x150>)
 800bcd8:	4353      	muls	r3, r2
 800bcda:	617b      	str	r3, [r7, #20]

    // Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1
  if (p < 0x80000000)
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	db09      	blt.n	800bcf6 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	0011      	movs	r1, r2
 800bcea:	0018      	movs	r0, r3
 800bcec:	f7f4 fa5a 	bl	80001a4 <__udivsi3>
 800bcf0:	0003      	movs	r3, r0
 800bcf2:	617b      	str	r3, [r7, #20]
 800bcf4:	e007      	b.n	800bd06 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	0019      	movs	r1, r3
 800bcfa:	6978      	ldr	r0, [r7, #20]
 800bcfc:	f7f4 fa52 	bl	80001a4 <__udivsi3>
 800bd00:	0003      	movs	r3, r0
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800bd06:	4b1b      	ldr	r3, [pc, #108]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bd08:	2216      	movs	r2, #22
 800bd0a:	5e9b      	ldrsh	r3, [r3, r2]
 800bd0c:	0019      	movs	r1, r3
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	08db      	lsrs	r3, r3, #3
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	08d2      	lsrs	r2, r2, #3
 800bd16:	4353      	muls	r3, r2
 800bd18:	0b5b      	lsrs	r3, r3, #13
 800bd1a:	434b      	muls	r3, r1
 800bd1c:	131b      	asrs	r3, r3, #12
 800bd1e:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	089b      	lsrs	r3, r3, #2
 800bd24:	001a      	movs	r2, r3
 800bd26:	4b13      	ldr	r3, [pc, #76]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bd28:	2114      	movs	r1, #20
 800bd2a:	5e5b      	ldrsh	r3, [r3, r1]
 800bd2c:	4353      	muls	r3, r2
 800bd2e:	135b      	asrs	r3, r3, #13
 800bd30:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	18d3      	adds	r3, r2, r3
 800bd38:	4a0e      	ldr	r2, [pc, #56]	@ (800bd74 <BMP280_calc_pressure+0x14c>)
 800bd3a:	2112      	movs	r1, #18
 800bd3c:	5e52      	ldrsh	r2, [r2, r1]
 800bd3e:	189b      	adds	r3, r3, r2
 800bd40:	111a      	asrs	r2, r3, #4
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	18d3      	adds	r3, r2, r3
 800bd46:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800bd48:	6978      	ldr	r0, [r7, #20]
 800bd4a:	f7f5 fdbd 	bl	80018c8 <__aeabi_ui2f>
 800bd4e:	1c03      	adds	r3, r0, #0
 800bd50:	490a      	ldr	r1, [pc, #40]	@ (800bd7c <BMP280_calc_pressure+0x154>)
 800bd52:	1c18      	adds	r0, r3, #0
 800bd54:	f7f4 ffa6 	bl	8000ca4 <__aeabi_fdiv>
 800bd58:	1c03      	adds	r3, r0, #0
 800bd5a:	607b      	str	r3, [r7, #4]
  return airhPa;
 800bd5c:	687b      	ldr	r3, [r7, #4]
}
 800bd5e:	1c18      	adds	r0, r3, #0
 800bd60:	46bd      	mov	sp, r7
 800bd62:	b006      	add	sp, #24
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	46c0      	nop			@ (mov r8, r8)
 800bd68:	20000f30 	.word	0x20000f30
 800bd6c:	20000f20 	.word	0x20000f20
 800bd70:	ffff0600 	.word	0xffff0600
 800bd74:	20000f08 	.word	0x20000f08
 800bd78:	00000c35 	.word	0x00000c35
 800bd7c:	42c80000 	.word	0x42c80000

0800bd80 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800bd80:	b5b0      	push	{r4, r5, r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800bd86:	4b8e      	ldr	r3, [pc, #568]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	0018      	movs	r0, r3
 800bd8c:	f007 ffa4 	bl	8013cd8 <TimestampIsReached>
 800bd90:	0003      	movs	r3, r0
 800bd92:	001a      	movs	r2, r3
 800bd94:	2301      	movs	r3, #1
 800bd96:	4053      	eors	r3, r2
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d002      	beq.n	800bda4 <BMP_Upkeep+0x24>
    return BMPState;
 800bd9e:	4b89      	ldr	r3, [pc, #548]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	e109      	b.n	800bfb8 <BMP_Upkeep+0x238>
  }
  switch(BMPState) {
 800bda4:	4b87      	ldr	r3, [pc, #540]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d100      	bne.n	800bdae <BMP_Upkeep+0x2e>
 800bdac:	e0f2      	b.n	800bf94 <BMP_Upkeep+0x214>
 800bdae:	dd00      	ble.n	800bdb2 <BMP_Upkeep+0x32>
 800bdb0:	e0f4      	b.n	800bf9c <BMP_Upkeep+0x21c>
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d003      	beq.n	800bdbe <BMP_Upkeep+0x3e>
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d100      	bne.n	800bdbc <BMP_Upkeep+0x3c>
 800bdba:	e092      	b.n	800bee2 <BMP_Upkeep+0x162>
 800bdbc:	e0ee      	b.n	800bf9c <BMP_Upkeep+0x21c>
  case BMP_MODE_SELECT:
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800bdbe:	f002 f81f 	bl	800de00 <getSensorLock>
 800bdc2:	1e03      	subs	r3, r0, #0
 800bdc4:	d005      	beq.n	800bdd2 <BMP_Upkeep+0x52>
 800bdc6:	f002 f81b 	bl	800de00 <getSensorLock>
 800bdca:	0003      	movs	r3, r0
 800bdcc:	2b03      	cmp	r3, #3
 800bdce:	d000      	beq.n	800bdd2 <BMP_Upkeep+0x52>
 800bdd0:	e07f      	b.n	800bed2 <BMP_Upkeep+0x152>
      if (getSensorLock() == FREE) {
 800bdd2:	f002 f815 	bl	800de00 <getSensorLock>
 800bdd6:	1e03      	subs	r3, r0, #0
 800bdd8:	d102      	bne.n	800bde0 <BMP_Upkeep+0x60>
        setSensorLock(BMP280);
 800bdda:	2003      	movs	r0, #3
 800bddc:	f001 fffc 	bl	800ddd8 <setSensorLock>
      }
      bmperror = false;
 800bde0:	4b79      	ldr	r3, [pc, #484]	@ (800bfc8 <BMP_Upkeep+0x248>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	701a      	strb	r2, [r3, #0]
      bool changed = false;
 800bde6:	240f      	movs	r4, #15
 800bde8:	193b      	adds	r3, r7, r4
 800bdea:	2200      	movs	r2, #0
 800bdec:	701a      	strb	r2, [r3, #0]
      mode = BMP280_get_mode();
 800bdee:	f7ff fe6d 	bl	800bacc <BMP280_get_mode>
 800bdf2:	0003      	movs	r3, r0
 800bdf4:	001a      	movs	r2, r3
 800bdf6:	4b75      	ldr	r3, [pc, #468]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800bdf8:	701a      	strb	r2, [r3, #0]
      mode &= BMP280_NORMAL_MODE;
 800bdfa:	4b74      	ldr	r3, [pc, #464]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	2203      	movs	r2, #3
 800be00:	4013      	ands	r3, r2
 800be02:	b2da      	uxtb	r2, r3
 800be04:	4b71      	ldr	r3, [pc, #452]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be06:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800be08:	f7fd ff06 	bl	8009c18 <Check_USB_PowerOn>
 800be0c:	1e03      	subs	r3, r0, #0
 800be0e:	d010      	beq.n	800be32 <BMP_Upkeep+0xb2>
        if (mode != BMP280_NORMAL_MODE) {
 800be10:	4b6e      	ldr	r3, [pc, #440]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	2b03      	cmp	r3, #3
 800be16:	d02d      	beq.n	800be74 <BMP_Upkeep+0xf4>
          mode =BMP280_NORMAL_MODE;
 800be18:	4b6c      	ldr	r3, [pc, #432]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be1a:	2203      	movs	r2, #3
 800be1c:	701a      	strb	r2, [r3, #0]
          changed = true;
 800be1e:	193b      	adds	r3, r7, r4
 800be20:	2201      	movs	r2, #1
 800be22:	701a      	strb	r2, [r3, #0]
          Info("BMP280 modus changed to normal");
 800be24:	4a6a      	ldr	r2, [pc, #424]	@ (800bfd0 <BMP_Upkeep+0x250>)
 800be26:	4b6b      	ldr	r3, [pc, #428]	@ (800bfd4 <BMP_Upkeep+0x254>)
 800be28:	0019      	movs	r1, r3
 800be2a:	2002      	movs	r0, #2
 800be2c:	f007 ffaa 	bl	8013d84 <CreateLine>
 800be30:	e020      	b.n	800be74 <BMP_Upkeep+0xf4>
        }
      }
      else {
        if ((mode == BMP280_NORMAL_MODE) || (mode == BMP280_SLEEP_MODE) || (mode == 255)) {
 800be32:	4b66      	ldr	r3, [pc, #408]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	2b03      	cmp	r3, #3
 800be38:	d007      	beq.n	800be4a <BMP_Upkeep+0xca>
 800be3a:	4b64      	ldr	r3, [pc, #400]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d003      	beq.n	800be4a <BMP_Upkeep+0xca>
 800be42:	4b62      	ldr	r3, [pc, #392]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	2bff      	cmp	r3, #255	@ 0xff
 800be48:	d114      	bne.n	800be74 <BMP_Upkeep+0xf4>
          changed = true;
 800be4a:	230f      	movs	r3, #15
 800be4c:	18fb      	adds	r3, r7, r3
 800be4e:	2201      	movs	r2, #1
 800be50:	701a      	strb	r2, [r3, #0]
          mode = BMP280_FORCED_MODE;
 800be52:	4b5e      	ldr	r3, [pc, #376]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be54:	2201      	movs	r2, #1
 800be56:	701a      	strb	r2, [r3, #0]
          if ((mode == BMP280_NORMAL_MODE)|| (mode == 255)) {
 800be58:	4b5c      	ldr	r3, [pc, #368]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	2b03      	cmp	r3, #3
 800be5e:	d003      	beq.n	800be68 <BMP_Upkeep+0xe8>
 800be60:	4b5a      	ldr	r3, [pc, #360]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2bff      	cmp	r3, #255	@ 0xff
 800be66:	d105      	bne.n	800be74 <BMP_Upkeep+0xf4>
           Info("BMP280 modus changed to forced");
 800be68:	4a5b      	ldr	r2, [pc, #364]	@ (800bfd8 <BMP_Upkeep+0x258>)
 800be6a:	4b5a      	ldr	r3, [pc, #360]	@ (800bfd4 <BMP_Upkeep+0x254>)
 800be6c:	0019      	movs	r1, r3
 800be6e:	2002      	movs	r0, #2
 800be70:	f007 ff88 	bl	8013d84 <CreateLine>
          }
        }
      }
      if (changed || (mode == BMP280_FORCED_MODE)) {
 800be74:	230f      	movs	r3, #15
 800be76:	18fb      	adds	r3, r7, r3
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d103      	bne.n	800be86 <BMP_Upkeep+0x106>
 800be7e:	4b53      	ldr	r3, [pc, #332]	@ (800bfcc <BMP_Upkeep+0x24c>)
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	2b01      	cmp	r3, #1
 800be84:	d105      	bne.n	800be92 <BMP_Upkeep+0x112>
        BMP280_set_mode();
 800be86:	f7ff fe43 	bl	800bb10 <BMP280_set_mode>
        changed = false;
 800be8a:	230f      	movs	r3, #15
 800be8c:	18fb      	adds	r3, r7, r3
 800be8e:	2200      	movs	r2, #0
 800be90:	701a      	strb	r2, [r3, #0]
      }
      if (BMP280_get_measurement_values()) {
 800be92:	f7ff fd65 	bl	800b960 <BMP280_get_measurement_values>
 800be96:	1e03      	subs	r3, r0, #0
 800be98:	d003      	beq.n	800bea2 <BMP_Upkeep+0x122>
        BMPState = BMP_STATE_PROCESS_RESULTS;
 800be9a:	4b4a      	ldr	r3, [pc, #296]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800be9c:	2201      	movs	r2, #1
 800be9e:	701a      	strb	r2, [r3, #0]
 800bea0:	e012      	b.n	800bec8 <BMP_Upkeep+0x148>
      }
      else {
        Error("BMP280 Error during reading measurement results array");
 800bea2:	4a4e      	ldr	r2, [pc, #312]	@ (800bfdc <BMP_Upkeep+0x25c>)
 800bea4:	4b4e      	ldr	r3, [pc, #312]	@ (800bfe0 <BMP_Upkeep+0x260>)
 800bea6:	0019      	movs	r1, r3
 800bea8:	2001      	movs	r0, #1
 800beaa:	f007 ff6b 	bl	8013d84 <CreateLine>
        bmperror = true;
 800beae:	4b46      	ldr	r3, [pc, #280]	@ (800bfc8 <BMP_Upkeep+0x248>)
 800beb0:	2201      	movs	r2, #1
 800beb2:	701a      	strb	r2, [r3, #0]
        BMP280TimeStamp = HAL_GetTick() + 5000;
 800beb4:	f008 fcde 	bl	8014874 <HAL_GetTick>
 800beb8:	0003      	movs	r3, r0
 800beba:	4a4a      	ldr	r2, [pc, #296]	@ (800bfe4 <BMP_Upkeep+0x264>)
 800bebc:	189a      	adds	r2, r3, r2
 800bebe:	4b40      	ldr	r3, [pc, #256]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bec0:	601a      	str	r2, [r3, #0]
        BMPState = BMP_STATE_WAIT ;
 800bec2:	4b40      	ldr	r3, [pc, #256]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bec4:	2202      	movs	r2, #2
 800bec6:	701a      	strb	r2, [r3, #0]
      }
      setSensorLock(FREE);
 800bec8:	2000      	movs	r0, #0
 800beca:	f001 ff85 	bl	800ddd8 <setSensorLock>
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800bece:	46c0      	nop			@ (mov r8, r8)
//      uint8_t locktype = getSensorLock();
//      Debug("Lock is not from BMP280, but from %s",
//        locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
    }
    break;
 800bed0:	e070      	b.n	800bfb4 <BMP_Upkeep+0x234>
      BMP280TimeStamp = HAL_GetTick() + 97;
 800bed2:	f008 fccf 	bl	8014874 <HAL_GetTick>
 800bed6:	0003      	movs	r3, r0
 800bed8:	3361      	adds	r3, #97	@ 0x61
 800beda:	001a      	movs	r2, r3
 800bedc:	4b38      	ldr	r3, [pc, #224]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bede:	601a      	str	r2, [r3, #0]
    break;
 800bee0:	e068      	b.n	800bfb4 <BMP_Upkeep+0x234>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800bee2:	f7ff fe59 	bl	800bb98 <BMP280_calc_temperature>
 800bee6:	1c03      	adds	r3, r0, #0
 800bee8:	60bb      	str	r3, [r7, #8]
    airhpa = BMP280_calc_pressure();
 800beea:	f7ff fe9d 	bl	800bc28 <BMP280_calc_pressure>
 800beee:	1c03      	adds	r3, r0, #0
 800bef0:	607b      	str	r3, [r7, #4]
    Info("BMP280 barometric value: %.2fhPa, airtemperature: %2.2fC", airhpa, airtemp);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7f7 fcce 	bl	8003894 <__aeabi_f2d>
 800bef8:	0004      	movs	r4, r0
 800befa:	000d      	movs	r5, r1
 800befc:	68b8      	ldr	r0, [r7, #8]
 800befe:	f7f7 fcc9 	bl	8003894 <__aeabi_f2d>
 800bf02:	0002      	movs	r2, r0
 800bf04:	000b      	movs	r3, r1
 800bf06:	4838      	ldr	r0, [pc, #224]	@ (800bfe8 <BMP_Upkeep+0x268>)
 800bf08:	4932      	ldr	r1, [pc, #200]	@ (800bfd4 <BMP_Upkeep+0x254>)
 800bf0a:	9202      	str	r2, [sp, #8]
 800bf0c:	9303      	str	r3, [sp, #12]
 800bf0e:	9400      	str	r4, [sp, #0]
 800bf10:	9501      	str	r5, [sp, #4]
 800bf12:	0002      	movs	r2, r0
 800bf14:	2002      	movs	r0, #2
 800bf16:	f007 ff35 	bl	8013d84 <CreateLine>

    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800bf1a:	4934      	ldr	r1, [pc, #208]	@ (800bfec <BMP_Upkeep+0x26c>)
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f7f4 fb1b 	bl	8000558 <__aeabi_fcmpgt>
 800bf22:	1e03      	subs	r3, r0, #0
 800bf24:	d022      	beq.n	800bf6c <BMP_Upkeep+0x1ec>
 800bf26:	4932      	ldr	r1, [pc, #200]	@ (800bff0 <BMP_Upkeep+0x270>)
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f7f4 fb01 	bl	8000530 <__aeabi_fcmplt>
 800bf2e:	1e03      	subs	r3, r0, #0
 800bf30:	d01c      	beq.n	800bf6c <BMP_Upkeep+0x1ec>
      setBMP280(airtemp, airhpa);
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	1c11      	adds	r1, r2, #0
 800bf38:	1c18      	adds	r0, r3, #0
 800bf3a:	f7f8 fddf 	bl	8004afc <setBMP280>
      if (Check_USB_PowerOn()) {
 800bf3e:	f7fd fe6b 	bl	8009c18 <Check_USB_PowerOn>
 800bf42:	1e03      	subs	r3, r0, #0
 800bf44:	d00a      	beq.n	800bf5c <BMP_Upkeep+0x1dc>
        BMP280TimeStamp = HAL_GetTick() + 28000;
 800bf46:	f008 fc95 	bl	8014874 <HAL_GetTick>
 800bf4a:	0003      	movs	r3, r0
 800bf4c:	4a29      	ldr	r2, [pc, #164]	@ (800bff4 <BMP_Upkeep+0x274>)
 800bf4e:	189a      	adds	r2, r3, r2
 800bf50:	4b1b      	ldr	r3, [pc, #108]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bf52:	601a      	str	r2, [r3, #0]
        bmp280samplecounter = 1;
 800bf54:	4b28      	ldr	r3, [pc, #160]	@ (800bff8 <BMP_Upkeep+0x278>)
 800bf56:	2201      	movs	r2, #1
 800bf58:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bf5a:	e017      	b.n	800bf8c <BMP_Upkeep+0x20c>
      }
      else {
        BMP280TimeStamp = HAL_GetTick() + 10000;
 800bf5c:	f008 fc8a 	bl	8014874 <HAL_GetTick>
 800bf60:	0003      	movs	r3, r0
 800bf62:	4a26      	ldr	r2, [pc, #152]	@ (800bffc <BMP_Upkeep+0x27c>)
 800bf64:	189a      	adds	r2, r3, r2
 800bf66:	4b16      	ldr	r3, [pc, #88]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bf68:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bf6a:	e00f      	b.n	800bf8c <BMP_Upkeep+0x20c>
      }
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800bf6c:	4a24      	ldr	r2, [pc, #144]	@ (800c000 <BMP_Upkeep+0x280>)
 800bf6e:	4b1c      	ldr	r3, [pc, #112]	@ (800bfe0 <BMP_Upkeep+0x260>)
 800bf70:	0019      	movs	r1, r3
 800bf72:	2001      	movs	r0, #1
 800bf74:	f007 ff06 	bl	8013d84 <CreateLine>
      bmperror = true;
 800bf78:	4b13      	ldr	r3, [pc, #76]	@ (800bfc8 <BMP_Upkeep+0x248>)
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	701a      	strb	r2, [r3, #0]
      BMP280TimeStamp = HAL_GetTick() + 5000;
 800bf7e:	f008 fc79 	bl	8014874 <HAL_GetTick>
 800bf82:	0003      	movs	r3, r0
 800bf84:	4a17      	ldr	r2, [pc, #92]	@ (800bfe4 <BMP_Upkeep+0x264>)
 800bf86:	189a      	adds	r2, r3, r2
 800bf88:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc0 <BMP_Upkeep+0x240>)
 800bf8a:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800bf8c:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bf8e:	2202      	movs	r2, #2
 800bf90:	701a      	strb	r2, [r3, #0]
    break;
 800bf92:	e00f      	b.n	800bfb4 <BMP_Upkeep+0x234>

  case BMP_STATE_WAIT:
      BMPState = BMP_MODE_SELECT;
 800bf94:	4b0b      	ldr	r3, [pc, #44]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bf96:	2200      	movs	r2, #0
 800bf98:	701a      	strb	r2, [r3, #0]
    break;
 800bf9a:	e00b      	b.n	800bfb4 <BMP_Upkeep+0x234>


  default:
    // Handle unexpected state
    BMPState = BMP_MODE_SELECT;
 800bf9c:	4b09      	ldr	r3, [pc, #36]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800bfa2:	f001 ff2d 	bl	800de00 <getSensorLock>
 800bfa6:	0003      	movs	r3, r0
 800bfa8:	2b03      	cmp	r3, #3
 800bfaa:	d102      	bne.n	800bfb2 <BMP_Upkeep+0x232>
      setSensorLock(FREE);
 800bfac:	2000      	movs	r0, #0
 800bfae:	f001 ff13 	bl	800ddd8 <setSensorLock>
    }
    break;
 800bfb2:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800bfb4:	4b03      	ldr	r3, [pc, #12]	@ (800bfc4 <BMP_Upkeep+0x244>)
 800bfb6:	781b      	ldrb	r3, [r3, #0]
}
 800bfb8:	0018      	movs	r0, r3
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	b004      	add	sp, #16
 800bfbe:	bdb0      	pop	{r4, r5, r7, pc}
 800bfc0:	20000f24 	.word	0x20000f24
 800bfc4:	20000f29 	.word	0x20000f29
 800bfc8:	20000f2a 	.word	0x20000f2a
 800bfcc:	200000a1 	.word	0x200000a1
 800bfd0:	0802c3dc 	.word	0x0802c3dc
 800bfd4:	0802c1ec 	.word	0x0802c1ec
 800bfd8:	0802c3fc 	.word	0x0802c3fc
 800bfdc:	0802c41c 	.word	0x0802c41c
 800bfe0:	0802c244 	.word	0x0802c244
 800bfe4:	00001388 	.word	0x00001388
 800bfe8:	0802c454 	.word	0x0802c454
 800bfec:	44548000 	.word	0x44548000
 800bff0:	44898000 	.word	0x44898000
 800bff4:	00006d60 	.word	0x00006d60
 800bff8:	20000f28 	.word	0x20000f28
 800bffc:	00002710 	.word	0x00002710
 800c000:	0802c490 	.word	0x0802c490

0800c004 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c00a:	4b10      	ldr	r3, [pc, #64]	@ (800c04c <MX_DMA_Init+0x48>)
 800c00c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c00e:	4b0f      	ldr	r3, [pc, #60]	@ (800c04c <MX_DMA_Init+0x48>)
 800c010:	2101      	movs	r1, #1
 800c012:	430a      	orrs	r2, r1
 800c014:	631a      	str	r2, [r3, #48]	@ 0x30
 800c016:	4b0d      	ldr	r3, [pc, #52]	@ (800c04c <MX_DMA_Init+0x48>)
 800c018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c01a:	2201      	movs	r2, #1
 800c01c:	4013      	ands	r3, r2
 800c01e:	607b      	str	r3, [r7, #4]
 800c020:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800c022:	2200      	movs	r2, #0
 800c024:	2100      	movs	r1, #0
 800c026:	200a      	movs	r0, #10
 800c028:	f009 f8aa 	bl	8015180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800c02c:	200a      	movs	r0, #10
 800c02e:	f009 f8bc 	bl	80151aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800c032:	2200      	movs	r2, #0
 800c034:	2103      	movs	r1, #3
 800c036:	200b      	movs	r0, #11
 800c038:	f009 f8a2 	bl	8015180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800c03c:	200b      	movs	r0, #11
 800c03e:	f009 f8b4 	bl	80151aa <HAL_NVIC_EnableIRQ>

}
 800c042:	46c0      	nop			@ (mov r8, r8)
 800c044:	46bd      	mov	sp, r7
 800c046:	b002      	add	sp, #8
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	46c0      	nop			@ (mov r8, r8)
 800c04c:	40021000 	.word	0x40021000

0800c050 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c050:	b590      	push	{r4, r7, lr}
 800c052:	b087      	sub	sp, #28
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	1dbb      	adds	r3, r7, #6
 800c05c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800c05e:	4b17      	ldr	r3, [pc, #92]	@ (800c0bc <WriteUint8ArrayEeprom+0x6c>)
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c064:	f009 fc1e 	bl	80158a4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800c068:	2316      	movs	r3, #22
 800c06a:	18fb      	adds	r3, r7, r3
 800c06c:	2200      	movs	r2, #0
 800c06e:	801a      	strh	r2, [r3, #0]
 800c070:	e015      	b.n	800c09e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800c072:	4b12      	ldr	r3, [pc, #72]	@ (800c0bc <WriteUint8ArrayEeprom+0x6c>)
 800c074:	6819      	ldr	r1, [r3, #0]
 800c076:	2416      	movs	r4, #22
 800c078:	193b      	adds	r3, r7, r4
 800c07a:	881b      	ldrh	r3, [r3, #0]
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	18d3      	adds	r3, r2, r3
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	001a      	movs	r2, r3
 800c084:	2000      	movs	r0, #0
 800c086:	f009 fc75 	bl	8015974 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800c08a:	4b0c      	ldr	r3, [pc, #48]	@ (800c0bc <WriteUint8ArrayEeprom+0x6c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	1c5a      	adds	r2, r3, #1
 800c090:	4b0a      	ldr	r3, [pc, #40]	@ (800c0bc <WriteUint8ArrayEeprom+0x6c>)
 800c092:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c094:	193b      	adds	r3, r7, r4
 800c096:	881a      	ldrh	r2, [r3, #0]
 800c098:	193b      	adds	r3, r7, r4
 800c09a:	3201      	adds	r2, #1
 800c09c:	801a      	strh	r2, [r3, #0]
 800c09e:	2316      	movs	r3, #22
 800c0a0:	18fa      	adds	r2, r7, r3
 800c0a2:	1dbb      	adds	r3, r7, #6
 800c0a4:	8812      	ldrh	r2, [r2, #0]
 800c0a6:	881b      	ldrh	r3, [r3, #0]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d3e2      	bcc.n	800c072 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c0ac:	f009 fc28 	bl	8015900 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800c0b0:	4b02      	ldr	r3, [pc, #8]	@ (800c0bc <WriteUint8ArrayEeprom+0x6c>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
}
 800c0b4:	0018      	movs	r0, r3
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	b007      	add	sp, #28
 800c0ba:	bd90      	pop	{r4, r7, pc}
 800c0bc:	20000f34 	.word	0x20000f34

0800c0c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	0019      	movs	r1, r3
 800c0cc:	1dbb      	adds	r3, r7, #6
 800c0ce:	801a      	strh	r2, [r3, #0]
 800c0d0:	1d3b      	adds	r3, r7, #4
 800c0d2:	1c0a      	adds	r2, r1, #0
 800c0d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800c0d6:	1dba      	adds	r2, r7, #6
 800c0d8:	1d3b      	adds	r3, r7, #4
 800c0da:	8812      	ldrh	r2, [r2, #0]
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d806      	bhi.n	800c0f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800c0e2:	1dbb      	adds	r3, r7, #6
 800c0e4:	881a      	ldrh	r2, [r3, #0]
 800c0e6:	68b9      	ldr	r1, [r7, #8]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	0018      	movs	r0, r3
 800c0ec:	f7ff ffb0 	bl	800c050 <WriteUint8ArrayEeprom>
    }
}
 800c0f0:	46c0      	nop			@ (mov r8, r8)
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	b004      	add	sp, #16
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	1dbb      	adds	r3, r7, #6
 800c104:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c106:	2316      	movs	r3, #22
 800c108:	18fb      	adds	r3, r7, r3
 800c10a:	2200      	movs	r2, #0
 800c10c:	801a      	strh	r2, [r3, #0]
 800c10e:	e010      	b.n	800c132 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800c110:	2016      	movs	r0, #22
 800c112:	183b      	adds	r3, r7, r0
 800c114:	881a      	ldrh	r2, [r3, #0]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	18d3      	adds	r3, r2, r3
 800c11a:	0019      	movs	r1, r3
 800c11c:	183b      	adds	r3, r7, r0
 800c11e:	881b      	ldrh	r3, [r3, #0]
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	18d3      	adds	r3, r2, r3
 800c124:	780a      	ldrb	r2, [r1, #0]
 800c126:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c128:	183b      	adds	r3, r7, r0
 800c12a:	881a      	ldrh	r2, [r3, #0]
 800c12c:	183b      	adds	r3, r7, r0
 800c12e:	3201      	adds	r2, #1
 800c130:	801a      	strh	r2, [r3, #0]
 800c132:	2316      	movs	r3, #22
 800c134:	18fa      	adds	r2, r7, r3
 800c136:	1dbb      	adds	r3, r7, #6
 800c138:	8812      	ldrh	r2, [r2, #0]
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d3e7      	bcc.n	800c110 <ReadUint8ArrayEEprom+0x18>
    }
}
 800c140:	46c0      	nop			@ (mov r8, r8)
 800c142:	46c0      	nop			@ (mov r8, r8)
 800c144:	46bd      	mov	sp, r7
 800c146:	b006      	add	sp, #24
 800c148:	bd80      	pop	{r7, pc}

0800c14a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800c14a:	b590      	push	{r4, r7, lr}
 800c14c:	b085      	sub	sp, #20
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
 800c152:	000a      	movs	r2, r1
 800c154:	1cbb      	adds	r3, r7, #2
 800c156:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c158:	f009 fba4 	bl	80158a4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800c15c:	230e      	movs	r3, #14
 800c15e:	18fb      	adds	r3, r7, r3
 800c160:	2200      	movs	r2, #0
 800c162:	801a      	strh	r2, [r3, #0]
 800c164:	e00c      	b.n	800c180 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800c166:	240e      	movs	r4, #14
 800c168:	193b      	adds	r3, r7, r4
 800c16a:	881a      	ldrh	r2, [r3, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	18d3      	adds	r3, r2, r3
 800c170:	0018      	movs	r0, r3
 800c172:	f009 fbd3 	bl	801591c <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800c176:	193b      	adds	r3, r7, r4
 800c178:	193a      	adds	r2, r7, r4
 800c17a:	8812      	ldrh	r2, [r2, #0]
 800c17c:	3204      	adds	r2, #4
 800c17e:	801a      	strh	r2, [r3, #0]
 800c180:	230e      	movs	r3, #14
 800c182:	18fa      	adds	r2, r7, r3
 800c184:	1cbb      	adds	r3, r7, #2
 800c186:	8812      	ldrh	r2, [r2, #0]
 800c188:	881b      	ldrh	r3, [r3, #0]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d3eb      	bcc.n	800c166 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c18e:	f009 fbb7 	bl	8015900 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800c192:	46c0      	nop			@ (mov r8, r8)
 800c194:	46bd      	mov	sp, r7
 800c196:	b005      	add	sp, #20
 800c198:	bd90      	pop	{r4, r7, pc}
	...

0800c19c <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b086      	sub	sp, #24
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1ac:	d901      	bls.n	800c1b2 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800c1ae:	237f      	movs	r3, #127	@ 0x7f
 800c1b0:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800c1b2:	2017      	movs	r0, #23
 800c1b4:	183b      	adds	r3, r7, r0
 800c1b6:	490d      	ldr	r1, [pc, #52]	@ (800c1ec <accessLUT10log10+0x50>)
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	188a      	adds	r2, r1, r2
 800c1bc:	7812      	ldrb	r2, [r2, #0]
 800c1be:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800c1c0:	0001      	movs	r1, r0
 800c1c2:	187b      	adds	r3, r7, r1
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	2206      	movs	r2, #6
 800c1c8:	4113      	asrs	r3, r2
 800c1ca:	001a      	movs	r2, r3
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800c1d0:	187b      	adds	r3, r7, r1
 800c1d2:	781a      	ldrb	r2, [r3, #0]
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2106      	movs	r1, #6
 800c1da:	408b      	lsls	r3, r1
 800c1dc:	1ad2      	subs	r2, r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	601a      	str	r2, [r3, #0]
}
 800c1e2:	46c0      	nop			@ (mov r8, r8)
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	b006      	add	sp, #24
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	46c0      	nop			@ (mov r8, r8)
 800c1ec:	0802e1e4 	.word	0x0802e1e4

0800c1f0 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800c1f0:	b5b0      	push	{r4, r5, r7, lr}
 800c1f2:	b090      	sub	sp, #64	@ 0x40
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6138      	str	r0, [r7, #16]
 800c1f8:	6179      	str	r1, [r7, #20]
 800c1fa:	60fa      	str	r2, [r7, #12]
 800c1fc:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800c1fe:	2308      	movs	r3, #8
 800c200:	001a      	movs	r2, r3
 800c202:	3a20      	subs	r2, #32
 800c204:	2a00      	cmp	r2, #0
 800c206:	db03      	blt.n	800c210 <efficient10log10+0x20>
 800c208:	2101      	movs	r1, #1
 800c20a:	4091      	lsls	r1, r2
 800c20c:	000d      	movs	r5, r1
 800c20e:	e008      	b.n	800c222 <efficient10log10+0x32>
 800c210:	2220      	movs	r2, #32
 800c212:	1ad2      	subs	r2, r2, r3
 800c214:	2101      	movs	r1, #1
 800c216:	40d1      	lsrs	r1, r2
 800c218:	000a      	movs	r2, r1
 800c21a:	2100      	movs	r1, #0
 800c21c:	4099      	lsls	r1, r3
 800c21e:	000d      	movs	r5, r1
 800c220:	4315      	orrs	r5, r2
 800c222:	2201      	movs	r2, #1
 800c224:	409a      	lsls	r2, r3
 800c226:	0014      	movs	r4, r2
 800c228:	2201      	movs	r2, #1
 800c22a:	4252      	negs	r2, r2
 800c22c:	17d3      	asrs	r3, r2, #31
 800c22e:	1912      	adds	r2, r2, r4
 800c230:	416b      	adcs	r3, r5
 800c232:	633a      	str	r2, [r7, #48]	@ 0x30
 800c234:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800c236:	2336      	movs	r3, #54	@ 0x36
 800c238:	2208      	movs	r2, #8
 800c23a:	189b      	adds	r3, r3, r2
 800c23c:	19db      	adds	r3, r3, r7
 800c23e:	2200      	movs	r2, #0
 800c240:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c242:	e017      	b.n	800c274 <efficient10log10+0x84>
    {
        P = P >> 1;
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	07db      	lsls	r3, r3, #31
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	0852      	lsrs	r2, r2, #1
 800c24c:	603a      	str	r2, [r7, #0]
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	431a      	orrs	r2, r3
 800c252:	603a      	str	r2, [r7, #0]
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	085b      	lsrs	r3, r3, #1
 800c258:	607b      	str	r3, [r7, #4]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	687c      	ldr	r4, [r7, #4]
 800c25e:	613b      	str	r3, [r7, #16]
 800c260:	617c      	str	r4, [r7, #20]
        bShift++;
 800c262:	2136      	movs	r1, #54	@ 0x36
 800c264:	2008      	movs	r0, #8
 800c266:	180b      	adds	r3, r1, r0
 800c268:	19db      	adds	r3, r3, r7
 800c26a:	881a      	ldrh	r2, [r3, #0]
 800c26c:	180b      	adds	r3, r1, r0
 800c26e:	19db      	adds	r3, r3, r7
 800c270:	3201      	adds	r2, #1
 800c272:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c274:	697a      	ldr	r2, [r7, #20]
 800c276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c278:	429a      	cmp	r2, r3
 800c27a:	d8e3      	bhi.n	800c244 <efficient10log10+0x54>
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c280:	429a      	cmp	r2, r3
 800c282:	d103      	bne.n	800c28c <efficient10log10+0x9c>
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c288:	429a      	cmp	r2, r3
 800c28a:	d8db      	bhi.n	800c244 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800c28c:	693a      	ldr	r2, [r7, #16]
 800c28e:	2308      	movs	r3, #8
 800c290:	3b01      	subs	r3, #1
 800c292:	2101      	movs	r1, #1
 800c294:	4099      	lsls	r1, r3
 800c296:	000b      	movs	r3, r1
 800c298:	1ad3      	subs	r3, r2, r3
 800c29a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800c2a4:	231c      	movs	r3, #28
 800c2a6:	2408      	movs	r4, #8
 800c2a8:	191b      	adds	r3, r3, r4
 800c2aa:	19da      	adds	r2, r3, r7
 800c2ac:	2320      	movs	r3, #32
 800c2ae:	191b      	adds	r3, r3, r4
 800c2b0:	19d9      	adds	r1, r3, r7
 800c2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b4:	0018      	movs	r0, r3
 800c2b6:	f7ff ff71 	bl	800c19c <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c2ba:	2215      	movs	r2, #21
 800c2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2be:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800c2c0:	2036      	movs	r0, #54	@ 0x36
 800c2c2:	1902      	adds	r2, r0, r4
 800c2c4:	19d2      	adds	r2, r2, r7
 800c2c6:	8812      	ldrh	r2, [r2, #0]
 800c2c8:	2103      	movs	r1, #3
 800c2ca:	434a      	muls	r2, r1
 800c2cc:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c2ce:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800c2d0:	0021      	movs	r1, r4
 800c2d2:	1843      	adds	r3, r0, r1
 800c2d4:	19db      	adds	r3, r3, r7
 800c2d6:	881b      	ldrh	r3, [r3, #0]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	4353      	muls	r3, r2
 800c2dc:	2203      	movs	r2, #3
 800c2de:	4113      	asrs	r3, r2
 800c2e0:	001a      	movs	r2, r3
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e4:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800c2e6:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800c2e8:	2314      	movs	r3, #20
 800c2ea:	185b      	adds	r3, r3, r1
 800c2ec:	19da      	adds	r2, r3, r7
 800c2ee:	2318      	movs	r3, #24
 800c2f0:	185b      	adds	r3, r3, r1
 800c2f2:	19db      	adds	r3, r3, r7
 800c2f4:	0011      	movs	r1, r2
 800c2f6:	0018      	movs	r0, r3
 800c2f8:	f000 f80a 	bl	800c310 <correctIntFracNumber>
    integerPart[0] = intPart;
 800c2fc:	6a3a      	ldr	r2, [r7, #32]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800c302:	69fa      	ldr	r2, [r7, #28]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	601a      	str	r2, [r3, #0]
}
 800c308:	46c0      	nop			@ (mov r8, r8)
 800c30a:	46bd      	mov	sp, r7
 800c30c:	b010      	add	sp, #64	@ 0x40
 800c30e:	bdb0      	pop	{r4, r5, r7, pc}

0800c310 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800c31a:	e00a      	b.n	800c332 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	1c5a      	adds	r2, r3, #1
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	3b0a      	subs	r3, #10
 800c32c:	001a      	movs	r2, r3
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b09      	cmp	r3, #9
 800c338:	dcf0      	bgt.n	800c31c <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800c33a:	e00a      	b.n	800c352 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	1e5a      	subs	r2, r3, #1
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	330a      	adds	r3, #10
 800c34c:	001a      	movs	r2, r3
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	3309      	adds	r3, #9
 800c358:	dbf0      	blt.n	800c33c <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	da0f      	bge.n	800c382 <correctIntFracNumber+0x72>
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	dd0b      	ble.n	800c382 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	1c5a      	adds	r2, r3, #1
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	3b0a      	subs	r3, #10
 800c37a:	001a      	movs	r2, r3
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800c380:	e012      	b.n	800c3a8 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	dd0e      	ble.n	800c3a8 <correctIntFracNumber+0x98>
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	da0a      	bge.n	800c3a8 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	1e5a      	subs	r2, r3, #1
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	330a      	adds	r3, #10
 800c3a2:	001a      	movs	r2, r3
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	601a      	str	r2, [r3, #0]
}
 800c3a8:	46c0      	nop			@ (mov r8, r8)
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	b002      	add	sp, #8
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800c3b0:	b590      	push	{r4, r7, lr}
 800c3b2:	b08b      	sub	sp, #44	@ 0x2c
 800c3b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3b6:	2414      	movs	r4, #20
 800c3b8:	193b      	adds	r3, r7, r4
 800c3ba:	0018      	movs	r0, r3
 800c3bc:	2314      	movs	r3, #20
 800c3be:	001a      	movs	r2, r3
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	f01a f851 	bl	8026468 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c3c6:	4b8a      	ldr	r3, [pc, #552]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3ca:	4b89      	ldr	r3, [pc, #548]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3cc:	2104      	movs	r1, #4
 800c3ce:	430a      	orrs	r2, r1
 800c3d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3d2:	4b87      	ldr	r3, [pc, #540]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d6:	2204      	movs	r2, #4
 800c3d8:	4013      	ands	r3, r2
 800c3da:	613b      	str	r3, [r7, #16]
 800c3dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c3de:	4b84      	ldr	r3, [pc, #528]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3e2:	4b83      	ldr	r3, [pc, #524]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3e4:	2180      	movs	r1, #128	@ 0x80
 800c3e6:	430a      	orrs	r2, r1
 800c3e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3ea:	4b81      	ldr	r3, [pc, #516]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ee:	2280      	movs	r2, #128	@ 0x80
 800c3f0:	4013      	ands	r3, r2
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3f6:	4b7e      	ldr	r3, [pc, #504]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3fa:	4b7d      	ldr	r3, [pc, #500]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c3fc:	2101      	movs	r1, #1
 800c3fe:	430a      	orrs	r2, r1
 800c400:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c402:	4b7b      	ldr	r3, [pc, #492]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c406:	2201      	movs	r2, #1
 800c408:	4013      	ands	r3, r2
 800c40a:	60bb      	str	r3, [r7, #8]
 800c40c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c40e:	4b78      	ldr	r3, [pc, #480]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c412:	4b77      	ldr	r3, [pc, #476]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c414:	2102      	movs	r1, #2
 800c416:	430a      	orrs	r2, r1
 800c418:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c41a:	4b75      	ldr	r3, [pc, #468]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c41e:	2202      	movs	r2, #2
 800c420:	4013      	ands	r3, r2
 800c422:	607b      	str	r3, [r7, #4]
 800c424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c426:	4b72      	ldr	r3, [pc, #456]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c42a:	4b71      	ldr	r3, [pc, #452]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c42c:	2108      	movs	r1, #8
 800c42e:	430a      	orrs	r2, r1
 800c430:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c432:	4b6f      	ldr	r3, [pc, #444]	@ (800c5f0 <MX_GPIO_Init+0x240>)
 800c434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c436:	2208      	movs	r2, #8
 800c438:	4013      	ands	r3, r2
 800c43a:	603b      	str	r3, [r7, #0]
 800c43c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800c43e:	4b6d      	ldr	r3, [pc, #436]	@ (800c5f4 <MX_GPIO_Init+0x244>)
 800c440:	2201      	movs	r2, #1
 800c442:	2101      	movs	r1, #1
 800c444:	0018      	movs	r0, r3
 800c446:	f009 fc88 	bl	8015d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800c44a:	4b6a      	ldr	r3, [pc, #424]	@ (800c5f4 <MX_GPIO_Init+0x244>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	2102      	movs	r1, #2
 800c450:	0018      	movs	r0, r3
 800c452:	f009 fc82 	bl	8015d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800c456:	4968      	ldr	r1, [pc, #416]	@ (800c5f8 <MX_GPIO_Init+0x248>)
 800c458:	4b68      	ldr	r3, [pc, #416]	@ (800c5fc <MX_GPIO_Init+0x24c>)
 800c45a:	2201      	movs	r2, #1
 800c45c:	0018      	movs	r0, r3
 800c45e:	f009 fc7c 	bl	8015d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800c462:	2380      	movs	r3, #128	@ 0x80
 800c464:	011b      	lsls	r3, r3, #4
 800c466:	4866      	ldr	r0, [pc, #408]	@ (800c600 <MX_GPIO_Init+0x250>)
 800c468:	2201      	movs	r2, #1
 800c46a:	0019      	movs	r1, r3
 800c46c:	f009 fc75 	bl	8015d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800c470:	2380      	movs	r3, #128	@ 0x80
 800c472:	015b      	lsls	r3, r3, #5
 800c474:	4862      	ldr	r0, [pc, #392]	@ (800c600 <MX_GPIO_Init+0x250>)
 800c476:	2200      	movs	r2, #0
 800c478:	0019      	movs	r1, r3
 800c47a:	f009 fc6e 	bl	8015d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800c47e:	193b      	adds	r3, r7, r4
 800c480:	4a60      	ldr	r2, [pc, #384]	@ (800c604 <MX_GPIO_Init+0x254>)
 800c482:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c484:	193b      	adds	r3, r7, r4
 800c486:	2203      	movs	r2, #3
 800c488:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c48a:	193b      	adds	r3, r7, r4
 800c48c:	2200      	movs	r2, #0
 800c48e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c490:	193b      	adds	r3, r7, r4
 800c492:	4a5b      	ldr	r2, [pc, #364]	@ (800c600 <MX_GPIO_Init+0x250>)
 800c494:	0019      	movs	r1, r3
 800c496:	0010      	movs	r0, r2
 800c498:	f009 fac4 	bl	8015a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800c49c:	193b      	adds	r3, r7, r4
 800c49e:	2203      	movs	r2, #3
 800c4a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c4a2:	193b      	adds	r3, r7, r4
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4a8:	193b      	adds	r3, r7, r4
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c4ae:	193b      	adds	r3, r7, r4
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c4b4:	193b      	adds	r3, r7, r4
 800c4b6:	4a4f      	ldr	r2, [pc, #316]	@ (800c5f4 <MX_GPIO_Init+0x244>)
 800c4b8:	0019      	movs	r1, r3
 800c4ba:	0010      	movs	r0, r2
 800c4bc:	f009 fab2 	bl	8015a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800c4c0:	193b      	adds	r3, r7, r4
 800c4c2:	2270      	movs	r2, #112	@ 0x70
 800c4c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c4c6:	193b      	adds	r3, r7, r4
 800c4c8:	2203      	movs	r2, #3
 800c4ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4cc:	193b      	adds	r3, r7, r4
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4d2:	193a      	adds	r2, r7, r4
 800c4d4:	23a0      	movs	r3, #160	@ 0xa0
 800c4d6:	05db      	lsls	r3, r3, #23
 800c4d8:	0011      	movs	r1, r2
 800c4da:	0018      	movs	r0, r3
 800c4dc:	f009 faa2 	bl	8015a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800c4e0:	193b      	adds	r3, r7, r4
 800c4e2:	22c0      	movs	r2, #192	@ 0xc0
 800c4e4:	0052      	lsls	r2, r2, #1
 800c4e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c4e8:	193b      	adds	r3, r7, r4
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ee:	193b      	adds	r3, r7, r4
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4f4:	193a      	adds	r2, r7, r4
 800c4f6:	23a0      	movs	r3, #160	@ 0xa0
 800c4f8:	05db      	lsls	r3, r3, #23
 800c4fa:	0011      	movs	r1, r2
 800c4fc:	0018      	movs	r0, r3
 800c4fe:	f009 fa91 	bl	8015a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800c502:	193b      	adds	r3, r7, r4
 800c504:	4a3c      	ldr	r2, [pc, #240]	@ (800c5f8 <MX_GPIO_Init+0x248>)
 800c506:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c508:	193b      	adds	r3, r7, r4
 800c50a:	2201      	movs	r2, #1
 800c50c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c50e:	193b      	adds	r3, r7, r4
 800c510:	2200      	movs	r2, #0
 800c512:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c514:	193b      	adds	r3, r7, r4
 800c516:	2200      	movs	r2, #0
 800c518:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c51a:	193b      	adds	r3, r7, r4
 800c51c:	4a37      	ldr	r2, [pc, #220]	@ (800c5fc <MX_GPIO_Init+0x24c>)
 800c51e:	0019      	movs	r1, r3
 800c520:	0010      	movs	r0, r2
 800c522:	f009 fa7f 	bl	8015a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800c526:	193b      	adds	r3, r7, r4
 800c528:	4a37      	ldr	r2, [pc, #220]	@ (800c608 <MX_GPIO_Init+0x258>)
 800c52a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c52c:	193b      	adds	r3, r7, r4
 800c52e:	2203      	movs	r2, #3
 800c530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c532:	193b      	adds	r3, r7, r4
 800c534:	2200      	movs	r2, #0
 800c536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c538:	193b      	adds	r3, r7, r4
 800c53a:	4a30      	ldr	r2, [pc, #192]	@ (800c5fc <MX_GPIO_Init+0x24c>)
 800c53c:	0019      	movs	r1, r3
 800c53e:	0010      	movs	r0, r2
 800c540:	f009 fa70 	bl	8015a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800c544:	0021      	movs	r1, r4
 800c546:	187b      	adds	r3, r7, r1
 800c548:	2280      	movs	r2, #128	@ 0x80
 800c54a:	0092      	lsls	r2, r2, #2
 800c54c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c54e:	000c      	movs	r4, r1
 800c550:	193b      	adds	r3, r7, r4
 800c552:	2200      	movs	r2, #0
 800c554:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c556:	193b      	adds	r3, r7, r4
 800c558:	2200      	movs	r2, #0
 800c55a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800c55c:	193b      	adds	r3, r7, r4
 800c55e:	4a28      	ldr	r2, [pc, #160]	@ (800c600 <MX_GPIO_Init+0x250>)
 800c560:	0019      	movs	r1, r3
 800c562:	0010      	movs	r0, r2
 800c564:	f009 fa5e 	bl	8015a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800c568:	193b      	adds	r3, r7, r4
 800c56a:	2280      	movs	r2, #128	@ 0x80
 800c56c:	0212      	lsls	r2, r2, #8
 800c56e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c570:	193b      	adds	r3, r7, r4
 800c572:	2288      	movs	r2, #136	@ 0x88
 800c574:	0352      	lsls	r2, r2, #13
 800c576:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c578:	193b      	adds	r3, r7, r4
 800c57a:	2200      	movs	r2, #0
 800c57c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800c57e:	193a      	adds	r2, r7, r4
 800c580:	23a0      	movs	r3, #160	@ 0xa0
 800c582:	05db      	lsls	r3, r3, #23
 800c584:	0011      	movs	r1, r2
 800c586:	0018      	movs	r0, r3
 800c588:	f009 fa4c 	bl	8015a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800c58c:	0021      	movs	r1, r4
 800c58e:	187b      	adds	r3, r7, r1
 800c590:	22c0      	movs	r2, #192	@ 0xc0
 800c592:	0152      	lsls	r2, r2, #5
 800c594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c596:	000c      	movs	r4, r1
 800c598:	193b      	adds	r3, r7, r4
 800c59a:	2201      	movs	r2, #1
 800c59c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c59e:	193b      	adds	r3, r7, r4
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5a4:	193b      	adds	r3, r7, r4
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c5aa:	193b      	adds	r3, r7, r4
 800c5ac:	4a14      	ldr	r2, [pc, #80]	@ (800c600 <MX_GPIO_Init+0x250>)
 800c5ae:	0019      	movs	r1, r3
 800c5b0:	0010      	movs	r0, r2
 800c5b2:	f009 fa37 	bl	8015a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800c5b6:	0021      	movs	r1, r4
 800c5b8:	187b      	adds	r3, r7, r1
 800c5ba:	2204      	movs	r2, #4
 800c5bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c5be:	187b      	adds	r3, r7, r1
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c5c4:	187b      	adds	r3, r7, r1
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800c5ca:	187b      	adds	r3, r7, r1
 800c5cc:	4a0f      	ldr	r2, [pc, #60]	@ (800c60c <MX_GPIO_Init+0x25c>)
 800c5ce:	0019      	movs	r1, r3
 800c5d0:	0010      	movs	r0, r2
 800c5d2:	f009 fa27 	bl	8015a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	2100      	movs	r1, #0
 800c5da:	2007      	movs	r0, #7
 800c5dc:	f008 fdd0 	bl	8015180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800c5e0:	2007      	movs	r0, #7
 800c5e2:	f008 fde2 	bl	80151aa <HAL_NVIC_EnableIRQ>

}
 800c5e6:	46c0      	nop			@ (mov r8, r8)
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	b00b      	add	sp, #44	@ 0x2c
 800c5ec:	bd90      	pop	{r4, r7, pc}
 800c5ee:	46c0      	nop			@ (mov r8, r8)
 800c5f0:	40021000 	.word	0x40021000
 800c5f4:	50001c00 	.word	0x50001c00
 800c5f8:	00000301 	.word	0x00000301
 800c5fc:	50000400 	.word	0x50000400
 800c600:	50000800 	.word	0x50000800
 800c604:	0000200c 	.word	0x0000200c
 800c608:	0000403e 	.word	0x0000403e
 800c60c:	50000c00 	.word	0x50000c00

0800c610 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2100      	movs	r1, #0
 800c61e:	0018      	movs	r0, r3
 800c620:	f010 fb1a 	bl	801cc58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2108      	movs	r1, #8
 800c628:	0018      	movs	r0, r3
 800c62a:	f010 fb15 	bl	801cc58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	210c      	movs	r1, #12
 800c632:	0018      	movs	r0, r3
 800c634:	f010 fb10 	bl	801cc58 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800c638:	2380      	movs	r3, #128	@ 0x80
 800c63a:	05db      	lsls	r3, r3, #23
 800c63c:	22fa      	movs	r2, #250	@ 0xfa
 800c63e:	0112      	lsls	r2, r2, #4
 800c640:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800c642:	2380      	movs	r3, #128	@ 0x80
 800c644:	05db      	lsls	r3, r3, #23
 800c646:	22fa      	movs	r2, #250	@ 0xfa
 800c648:	0112      	lsls	r2, r2, #4
 800c64a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800c64c:	2380      	movs	r3, #128	@ 0x80
 800c64e:	05db      	lsls	r3, r3, #23
 800c650:	22fa      	movs	r2, #250	@ 0xfa
 800c652:	0112      	lsls	r2, r2, #4
 800c654:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800c656:	2380      	movs	r3, #128	@ 0x80
 800c658:	05db      	lsls	r3, r3, #23
 800c65a:	22fa      	movs	r2, #250	@ 0xfa
 800c65c:	0112      	lsls	r2, r2, #4
 800c65e:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	2100      	movs	r1, #0
 800c664:	0018      	movs	r0, r3
 800c666:	f010 faf7 	bl	801cc58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	2104      	movs	r1, #4
 800c66e:	0018      	movs	r0, r3
 800c670:	f010 faf2 	bl	801cc58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	2108      	movs	r1, #8
 800c678:	0018      	movs	r0, r3
 800c67a:	f010 faed 	bl	801cc58 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800c67e:	4b0a      	ldr	r3, [pc, #40]	@ (800c6a8 <GPIO_InitPWMLEDs+0x98>)
 800c680:	22fa      	movs	r2, #250	@ 0xfa
 800c682:	0112      	lsls	r2, r2, #4
 800c684:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800c686:	4b08      	ldr	r3, [pc, #32]	@ (800c6a8 <GPIO_InitPWMLEDs+0x98>)
 800c688:	22fa      	movs	r2, #250	@ 0xfa
 800c68a:	0112      	lsls	r2, r2, #4
 800c68c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800c68e:	4b06      	ldr	r3, [pc, #24]	@ (800c6a8 <GPIO_InitPWMLEDs+0x98>)
 800c690:	22fa      	movs	r2, #250	@ 0xfa
 800c692:	0112      	lsls	r2, r2, #4
 800c694:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800c696:	4b04      	ldr	r3, [pc, #16]	@ (800c6a8 <GPIO_InitPWMLEDs+0x98>)
 800c698:	22fa      	movs	r2, #250	@ 0xfa
 800c69a:	0112      	lsls	r2, r2, #4
 800c69c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c69e:	46c0      	nop			@ (mov r8, r8)
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	b002      	add	sp, #8
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	46c0      	nop			@ (mov r8, r8)
 800c6a8:	40000400 	.word	0x40000400

0800c6ac <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c6b0:	4b1b      	ldr	r3, [pc, #108]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6b2:	4a1c      	ldr	r2, [pc, #112]	@ (800c724 <MX_I2C1_Init+0x78>)
 800c6b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800c6b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6b8:	4a1b      	ldr	r2, [pc, #108]	@ (800c728 <MX_I2C1_Init+0x7c>)
 800c6ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c6bc:	4b18      	ldr	r3, [pc, #96]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c6c2:	4b17      	ldr	r3, [pc, #92]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c6c8:	4b15      	ldr	r3, [pc, #84]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c6ce:	4b14      	ldr	r3, [pc, #80]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c6d4:	4b12      	ldr	r3, [pc, #72]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c6da:	4b11      	ldr	r3, [pc, #68]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c6e0:	4b0f      	ldr	r3, [pc, #60]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c6e6:	4b0e      	ldr	r3, [pc, #56]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6e8:	0018      	movs	r0, r3
 800c6ea:	f009 fb6f 	bl	8015dcc <HAL_I2C_Init>
 800c6ee:	1e03      	subs	r3, r0, #0
 800c6f0:	d001      	beq.n	800c6f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c6f2:	f000 fe59 	bl	800d3a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c6f6:	4b0a      	ldr	r3, [pc, #40]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	0018      	movs	r0, r3
 800c6fc:	f00c fadc 	bl	8018cb8 <HAL_I2CEx_ConfigAnalogFilter>
 800c700:	1e03      	subs	r3, r0, #0
 800c702:	d001      	beq.n	800c708 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c704:	f000 fe50 	bl	800d3a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c708:	4b05      	ldr	r3, [pc, #20]	@ (800c720 <MX_I2C1_Init+0x74>)
 800c70a:	2100      	movs	r1, #0
 800c70c:	0018      	movs	r0, r3
 800c70e:	f00c fb1f 	bl	8018d50 <HAL_I2CEx_ConfigDigitalFilter>
 800c712:	1e03      	subs	r3, r0, #0
 800c714:	d001      	beq.n	800c71a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c716:	f000 fe47 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c71a:	46c0      	nop			@ (mov r8, r8)
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	20000f38 	.word	0x20000f38
 800c724:	40005400 	.word	0x40005400
 800c728:	00503d58 	.word	0x00503d58

0800c72c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800c730:	4b1b      	ldr	r3, [pc, #108]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c732:	4a1c      	ldr	r2, [pc, #112]	@ (800c7a4 <MX_I2C2_Init+0x78>)
 800c734:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800c736:	4b1a      	ldr	r3, [pc, #104]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c738:	4a1b      	ldr	r2, [pc, #108]	@ (800c7a8 <MX_I2C2_Init+0x7c>)
 800c73a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800c73c:	4b18      	ldr	r3, [pc, #96]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c73e:	2200      	movs	r2, #0
 800c740:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c742:	4b17      	ldr	r3, [pc, #92]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c744:	2201      	movs	r2, #1
 800c746:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c748:	4b15      	ldr	r3, [pc, #84]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c74a:	2200      	movs	r2, #0
 800c74c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c74e:	4b14      	ldr	r3, [pc, #80]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c750:	2200      	movs	r2, #0
 800c752:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c754:	4b12      	ldr	r3, [pc, #72]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c756:	2200      	movs	r2, #0
 800c758:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c75a:	4b11      	ldr	r3, [pc, #68]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c760:	4b0f      	ldr	r3, [pc, #60]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c762:	2200      	movs	r2, #0
 800c764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c766:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c768:	0018      	movs	r0, r3
 800c76a:	f009 fb2f 	bl	8015dcc <HAL_I2C_Init>
 800c76e:	1e03      	subs	r3, r0, #0
 800c770:	d001      	beq.n	800c776 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800c772:	f000 fe19 	bl	800d3a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c776:	4b0a      	ldr	r3, [pc, #40]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c778:	2100      	movs	r1, #0
 800c77a:	0018      	movs	r0, r3
 800c77c:	f00c fa9c 	bl	8018cb8 <HAL_I2CEx_ConfigAnalogFilter>
 800c780:	1e03      	subs	r3, r0, #0
 800c782:	d001      	beq.n	800c788 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800c784:	f000 fe10 	bl	800d3a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c788:	4b05      	ldr	r3, [pc, #20]	@ (800c7a0 <MX_I2C2_Init+0x74>)
 800c78a:	2100      	movs	r1, #0
 800c78c:	0018      	movs	r0, r3
 800c78e:	f00c fadf 	bl	8018d50 <HAL_I2CEx_ConfigDigitalFilter>
 800c792:	1e03      	subs	r3, r0, #0
 800c794:	d001      	beq.n	800c79a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800c796:	f000 fe07 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c79a:	46c0      	nop			@ (mov r8, r8)
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	20000f8c 	.word	0x20000f8c
 800c7a4:	40005800 	.word	0x40005800
 800c7a8:	00503d58 	.word	0x00503d58

0800c7ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800c7ac:	b590      	push	{r4, r7, lr}
 800c7ae:	b08b      	sub	sp, #44	@ 0x2c
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7b4:	2414      	movs	r4, #20
 800c7b6:	193b      	adds	r3, r7, r4
 800c7b8:	0018      	movs	r0, r3
 800c7ba:	2314      	movs	r3, #20
 800c7bc:	001a      	movs	r2, r3
 800c7be:	2100      	movs	r1, #0
 800c7c0:	f019 fe52 	bl	8026468 <memset>
  if(i2cHandle->Instance==I2C1)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a5d      	ldr	r2, [pc, #372]	@ (800c940 <HAL_I2C_MspInit+0x194>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d000      	beq.n	800c7d0 <HAL_I2C_MspInit+0x24>
 800c7ce:	e083      	b.n	800c8d8 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c7d0:	4b5c      	ldr	r3, [pc, #368]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c7d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7d4:	4b5b      	ldr	r3, [pc, #364]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c7d6:	2102      	movs	r1, #2
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c7dc:	4b59      	ldr	r3, [pc, #356]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c7de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7e0:	2202      	movs	r2, #2
 800c7e2:	4013      	ands	r3, r2
 800c7e4:	613b      	str	r3, [r7, #16]
 800c7e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c7e8:	0021      	movs	r1, r4
 800c7ea:	187b      	adds	r3, r7, r1
 800c7ec:	22c0      	movs	r2, #192	@ 0xc0
 800c7ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c7f0:	187b      	adds	r3, r7, r1
 800c7f2:	2212      	movs	r2, #18
 800c7f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7f6:	187b      	adds	r3, r7, r1
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7fc:	187b      	adds	r3, r7, r1
 800c7fe:	2203      	movs	r2, #3
 800c800:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800c802:	187b      	adds	r3, r7, r1
 800c804:	2201      	movs	r2, #1
 800c806:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c808:	187b      	adds	r3, r7, r1
 800c80a:	4a4f      	ldr	r2, [pc, #316]	@ (800c948 <HAL_I2C_MspInit+0x19c>)
 800c80c:	0019      	movs	r1, r3
 800c80e:	0010      	movs	r0, r2
 800c810:	f009 f908 	bl	8015a24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c814:	4b4b      	ldr	r3, [pc, #300]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c818:	4b4a      	ldr	r3, [pc, #296]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c81a:	2180      	movs	r1, #128	@ 0x80
 800c81c:	0389      	lsls	r1, r1, #14
 800c81e:	430a      	orrs	r2, r1
 800c820:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800c822:	4b4a      	ldr	r3, [pc, #296]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c824:	4a4a      	ldr	r2, [pc, #296]	@ (800c950 <HAL_I2C_MspInit+0x1a4>)
 800c826:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800c828:	4b48      	ldr	r3, [pc, #288]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c82a:	2206      	movs	r2, #6
 800c82c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c82e:	4b47      	ldr	r3, [pc, #284]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c830:	2200      	movs	r2, #0
 800c832:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c834:	4b45      	ldr	r3, [pc, #276]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c836:	2200      	movs	r2, #0
 800c838:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c83a:	4b44      	ldr	r3, [pc, #272]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c83c:	2280      	movs	r2, #128	@ 0x80
 800c83e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c840:	4b42      	ldr	r3, [pc, #264]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c842:	2200      	movs	r2, #0
 800c844:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c846:	4b41      	ldr	r3, [pc, #260]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c848:	2200      	movs	r2, #0
 800c84a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c84c:	4b3f      	ldr	r3, [pc, #252]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c84e:	2200      	movs	r2, #0
 800c850:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c852:	4b3e      	ldr	r3, [pc, #248]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c854:	2200      	movs	r2, #0
 800c856:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800c858:	4b3c      	ldr	r3, [pc, #240]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c85a:	0018      	movs	r0, r3
 800c85c:	f008 fcc6 	bl	80151ec <HAL_DMA_Init>
 800c860:	1e03      	subs	r3, r0, #0
 800c862:	d001      	beq.n	800c868 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800c864:	f000 fda0 	bl	800d3a8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4a38      	ldr	r2, [pc, #224]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c86c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c86e:	4b37      	ldr	r3, [pc, #220]	@ (800c94c <HAL_I2C_MspInit+0x1a0>)
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800c874:	4b37      	ldr	r3, [pc, #220]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c876:	4a38      	ldr	r2, [pc, #224]	@ (800c958 <HAL_I2C_MspInit+0x1ac>)
 800c878:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800c87a:	4b36      	ldr	r3, [pc, #216]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c87c:	2206      	movs	r2, #6
 800c87e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c880:	4b34      	ldr	r3, [pc, #208]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c882:	2210      	movs	r2, #16
 800c884:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c886:	4b33      	ldr	r3, [pc, #204]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c888:	2200      	movs	r2, #0
 800c88a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c88c:	4b31      	ldr	r3, [pc, #196]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c88e:	2280      	movs	r2, #128	@ 0x80
 800c890:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c892:	4b30      	ldr	r3, [pc, #192]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c894:	2200      	movs	r2, #0
 800c896:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c898:	4b2e      	ldr	r3, [pc, #184]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c89e:	4b2d      	ldr	r3, [pc, #180]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c8a4:	4b2b      	ldr	r3, [pc, #172]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c8aa:	4b2a      	ldr	r3, [pc, #168]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c8ac:	0018      	movs	r0, r3
 800c8ae:	f008 fc9d 	bl	80151ec <HAL_DMA_Init>
 800c8b2:	1e03      	subs	r3, r0, #0
 800c8b4:	d001      	beq.n	800c8ba <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800c8b6:	f000 fd77 	bl	800d3a8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4a25      	ldr	r2, [pc, #148]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c8be:	639a      	str	r2, [r3, #56]	@ 0x38
 800c8c0:	4b24      	ldr	r3, [pc, #144]	@ (800c954 <HAL_I2C_MspInit+0x1a8>)
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	2017      	movs	r0, #23
 800c8cc:	f008 fc58 	bl	8015180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c8d0:	2017      	movs	r0, #23
 800c8d2:	f008 fc6a 	bl	80151aa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800c8d6:	e02e      	b.n	800c936 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a1f      	ldr	r2, [pc, #124]	@ (800c95c <HAL_I2C_MspInit+0x1b0>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d129      	bne.n	800c936 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c8e2:	4b18      	ldr	r3, [pc, #96]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c8e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8e6:	4b17      	ldr	r3, [pc, #92]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c8e8:	2102      	movs	r1, #2
 800c8ea:	430a      	orrs	r2, r1
 800c8ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c8ee:	4b15      	ldr	r3, [pc, #84]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8f2:	2202      	movs	r2, #2
 800c8f4:	4013      	ands	r3, r2
 800c8f6:	60fb      	str	r3, [r7, #12]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c8fa:	2114      	movs	r1, #20
 800c8fc:	187b      	adds	r3, r7, r1
 800c8fe:	22c0      	movs	r2, #192	@ 0xc0
 800c900:	0112      	lsls	r2, r2, #4
 800c902:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c904:	187b      	adds	r3, r7, r1
 800c906:	2212      	movs	r2, #18
 800c908:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c90a:	187b      	adds	r3, r7, r1
 800c90c:	2200      	movs	r2, #0
 800c90e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c910:	187b      	adds	r3, r7, r1
 800c912:	2203      	movs	r2, #3
 800c914:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800c916:	187b      	adds	r3, r7, r1
 800c918:	2206      	movs	r2, #6
 800c91a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c91c:	187b      	adds	r3, r7, r1
 800c91e:	4a0a      	ldr	r2, [pc, #40]	@ (800c948 <HAL_I2C_MspInit+0x19c>)
 800c920:	0019      	movs	r1, r3
 800c922:	0010      	movs	r0, r2
 800c924:	f009 f87e 	bl	8015a24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c928:	4b06      	ldr	r3, [pc, #24]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c92a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c92c:	4b05      	ldr	r3, [pc, #20]	@ (800c944 <HAL_I2C_MspInit+0x198>)
 800c92e:	2180      	movs	r1, #128	@ 0x80
 800c930:	03c9      	lsls	r1, r1, #15
 800c932:	430a      	orrs	r2, r1
 800c934:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c936:	46c0      	nop			@ (mov r8, r8)
 800c938:	46bd      	mov	sp, r7
 800c93a:	b00b      	add	sp, #44	@ 0x2c
 800c93c:	bd90      	pop	{r4, r7, pc}
 800c93e:	46c0      	nop			@ (mov r8, r8)
 800c940:	40005400 	.word	0x40005400
 800c944:	40021000 	.word	0x40021000
 800c948:	50000400 	.word	0x50000400
 800c94c:	20000fe0 	.word	0x20000fe0
 800c950:	40020030 	.word	0x40020030
 800c954:	20001028 	.word	0x20001028
 800c958:	4002001c 	.word	0x4002001c
 800c95c:	40005800 	.word	0x40005800

0800c960 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800c964:	4b10      	ldr	r3, [pc, #64]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c966:	4a11      	ldr	r2, [pc, #68]	@ (800c9ac <MX_I2S2_Init+0x4c>)
 800c968:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800c96a:	4b0f      	ldr	r3, [pc, #60]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c96c:	22c0      	movs	r2, #192	@ 0xc0
 800c96e:	0092      	lsls	r2, r2, #2
 800c970:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800c972:	4b0d      	ldr	r3, [pc, #52]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c974:	2200      	movs	r2, #0
 800c976:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800c978:	4b0b      	ldr	r3, [pc, #44]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c97a:	2203      	movs	r2, #3
 800c97c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800c97e:	4b0a      	ldr	r3, [pc, #40]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c980:	2200      	movs	r2, #0
 800c982:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800c984:	4b08      	ldr	r3, [pc, #32]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c986:	22fa      	movs	r2, #250	@ 0xfa
 800c988:	0192      	lsls	r2, r2, #6
 800c98a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800c98c:	4b06      	ldr	r3, [pc, #24]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c98e:	2200      	movs	r2, #0
 800c990:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800c992:	4b05      	ldr	r3, [pc, #20]	@ (800c9a8 <MX_I2S2_Init+0x48>)
 800c994:	0018      	movs	r0, r3
 800c996:	f00c fa27 	bl	8018de8 <HAL_I2S_Init>
 800c99a:	1e03      	subs	r3, r0, #0
 800c99c:	d001      	beq.n	800c9a2 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800c99e:	f000 fd03 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800c9a2:	46c0      	nop			@ (mov r8, r8)
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	20001070 	.word	0x20001070
 800c9ac:	40003800 	.word	0x40003800

0800c9b0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800c9b0:	b590      	push	{r4, r7, lr}
 800c9b2:	b089      	sub	sp, #36	@ 0x24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9b8:	240c      	movs	r4, #12
 800c9ba:	193b      	adds	r3, r7, r4
 800c9bc:	0018      	movs	r0, r3
 800c9be:	2314      	movs	r3, #20
 800c9c0:	001a      	movs	r2, r3
 800c9c2:	2100      	movs	r1, #0
 800c9c4:	f019 fd50 	bl	8026468 <memset>
  if(i2sHandle->Instance==SPI2)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a2d      	ldr	r2, [pc, #180]	@ (800ca84 <HAL_I2S_MspInit+0xd4>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d154      	bne.n	800ca7c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c9d2:	4b2d      	ldr	r3, [pc, #180]	@ (800ca88 <HAL_I2S_MspInit+0xd8>)
 800c9d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9d6:	4b2c      	ldr	r3, [pc, #176]	@ (800ca88 <HAL_I2S_MspInit+0xd8>)
 800c9d8:	2180      	movs	r1, #128	@ 0x80
 800c9da:	01c9      	lsls	r1, r1, #7
 800c9dc:	430a      	orrs	r2, r1
 800c9de:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9e0:	4b29      	ldr	r3, [pc, #164]	@ (800ca88 <HAL_I2S_MspInit+0xd8>)
 800c9e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9e4:	4b28      	ldr	r3, [pc, #160]	@ (800ca88 <HAL_I2S_MspInit+0xd8>)
 800c9e6:	2102      	movs	r1, #2
 800c9e8:	430a      	orrs	r2, r1
 800c9ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c9ec:	4b26      	ldr	r3, [pc, #152]	@ (800ca88 <HAL_I2S_MspInit+0xd8>)
 800c9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9f0:	2202      	movs	r2, #2
 800c9f2:	4013      	ands	r3, r2
 800c9f4:	60bb      	str	r3, [r7, #8]
 800c9f6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800c9f8:	193b      	adds	r3, r7, r4
 800c9fa:	22b0      	movs	r2, #176	@ 0xb0
 800c9fc:	0212      	lsls	r2, r2, #8
 800c9fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca00:	0021      	movs	r1, r4
 800ca02:	187b      	adds	r3, r7, r1
 800ca04:	2202      	movs	r2, #2
 800ca06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca08:	187b      	adds	r3, r7, r1
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca0e:	187b      	adds	r3, r7, r1
 800ca10:	2200      	movs	r2, #0
 800ca12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800ca14:	187b      	adds	r3, r7, r1
 800ca16:	2200      	movs	r2, #0
 800ca18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca1a:	187b      	adds	r3, r7, r1
 800ca1c:	4a1b      	ldr	r2, [pc, #108]	@ (800ca8c <HAL_I2S_MspInit+0xdc>)
 800ca1e:	0019      	movs	r1, r3
 800ca20:	0010      	movs	r0, r2
 800ca22:	f008 ffff 	bl	8015a24 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800ca26:	4b1a      	ldr	r3, [pc, #104]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca28:	4a1a      	ldr	r2, [pc, #104]	@ (800ca94 <HAL_I2S_MspInit+0xe4>)
 800ca2a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800ca2c:	4b18      	ldr	r3, [pc, #96]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca2e:	2202      	movs	r2, #2
 800ca30:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca32:	4b17      	ldr	r3, [pc, #92]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ca38:	4b15      	ldr	r3, [pc, #84]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ca3e:	4b14      	ldr	r3, [pc, #80]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca40:	2280      	movs	r2, #128	@ 0x80
 800ca42:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ca44:	4b12      	ldr	r3, [pc, #72]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca46:	2280      	movs	r2, #128	@ 0x80
 800ca48:	0052      	lsls	r2, r2, #1
 800ca4a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ca4c:	4b10      	ldr	r3, [pc, #64]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca4e:	2280      	movs	r2, #128	@ 0x80
 800ca50:	00d2      	lsls	r2, r2, #3
 800ca52:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800ca54:	4b0e      	ldr	r3, [pc, #56]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca56:	2220      	movs	r2, #32
 800ca58:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ca5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800ca60:	4b0b      	ldr	r3, [pc, #44]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca62:	0018      	movs	r0, r3
 800ca64:	f008 fbc2 	bl	80151ec <HAL_DMA_Init>
 800ca68:	1e03      	subs	r3, r0, #0
 800ca6a:	d001      	beq.n	800ca70 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800ca6c:	f000 fc9c 	bl	800d3a8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a07      	ldr	r2, [pc, #28]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca74:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca76:	4b06      	ldr	r3, [pc, #24]	@ (800ca90 <HAL_I2S_MspInit+0xe0>)
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800ca7c:	46c0      	nop			@ (mov r8, r8)
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	b009      	add	sp, #36	@ 0x24
 800ca82:	bd90      	pop	{r4, r7, pc}
 800ca84:	40003800 	.word	0x40003800
 800ca88:	40021000 	.word	0x40021000
 800ca8c:	50000400 	.word	0x50000400
 800ca90:	200010ac 	.word	0x200010ac
 800ca94:	40020044 	.word	0x40020044

0800ca98 <SetBatteryReadTimer>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetBatteryReadTimer(uint32_t ticks) {
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  batteryReadTimer  = HAL_GetTick() + ticks;
 800caa0:	f007 fee8 	bl	8014874 <HAL_GetTick>
 800caa4:	0002      	movs	r2, r0
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	18d2      	adds	r2, r2, r3
 800caaa:	4b03      	ldr	r3, [pc, #12]	@ (800cab8 <SetBatteryReadTimer+0x20>)
 800caac:	601a      	str	r2, [r3, #0]
}
 800caae:	46c0      	nop			@ (mov r8, r8)
 800cab0:	46bd      	mov	sp, r7
 800cab2:	b002      	add	sp, #8
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	46c0      	nop			@ (mov r8, r8)
 800cab8:	200000a4 	.word	0x200000a4

0800cabc <SetTestDone>:

void SetTestDone(){
 800cabc:	b580      	push	{r7, lr}
 800cabe:	af00      	add	r7, sp, #0
  testDone = true;
 800cac0:	4b12      	ldr	r3, [pc, #72]	@ (800cb0c <SetTestDone+0x50>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(250);
 800cac6:	20fa      	movs	r0, #250	@ 0xfa
 800cac8:	f007 fede 	bl	8014888 <HAL_Delay>
  SetDBLED(false, false, true);
 800cacc:	2201      	movs	r2, #1
 800cace:	2100      	movs	r1, #0
 800cad0:	2000      	movs	r0, #0
 800cad2:	f005 fe87 	bl	80127e4 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800cad6:	4a0e      	ldr	r2, [pc, #56]	@ (800cb10 <SetTestDone+0x54>)
 800cad8:	23fa      	movs	r3, #250	@ 0xfa
 800cada:	0119      	lsls	r1, r3, #4
 800cadc:	23fa      	movs	r3, #250	@ 0xfa
 800cade:	011b      	lsls	r3, r3, #4
 800cae0:	0018      	movs	r0, r3
 800cae2:	f005 fe51 	bl	8012788 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800cae6:	4a0a      	ldr	r2, [pc, #40]	@ (800cb10 <SetTestDone+0x54>)
 800cae8:	23fa      	movs	r3, #250	@ 0xfa
 800caea:	0119      	lsls	r1, r3, #4
 800caec:	23fa      	movs	r3, #250	@ 0xfa
 800caee:	011b      	lsls	r3, r3, #4
 800caf0:	0018      	movs	r0, r3
 800caf2:	f005 febb 	bl	801286c <SetVocLED>
  HAL_Delay(250);
 800caf6:	20fa      	movs	r0, #250	@ 0xfa
 800caf8:	f007 fec6 	bl	8014888 <HAL_Delay>
  SetLEDsOff();
 800cafc:	f005 ffb2 	bl	8012a64 <SetLEDsOff>
  InitDone();
 800cb00:	f005 fd7e 	bl	8012600 <InitDone>
}
 800cb04:	46c0      	nop			@ (mov r8, r8)
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	46c0      	nop			@ (mov r8, r8)
 800cb0c:	200010f4 	.word	0x200010f4
 800cb10:	00000bb8 	.word	0x00000bb8

0800cb14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cb14:	b5b0      	push	{r4, r5, r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cb1a:	f007 fe45 	bl	80147a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cb1e:	f000 fad7 	bl	800d0d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cb22:	f7ff fc45 	bl	800c3b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800cb26:	f7ff fa6d 	bl	800c004 <MX_DMA_Init>
  MX_I2C1_Init();
 800cb2a:	f7ff fdbf 	bl	800c6ac <MX_I2C1_Init>
  MX_I2S2_Init();
 800cb2e:	f7ff ff17 	bl	800c960 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800cb32:	f006 ff39 	bl	80139a8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800cb36:	f7ff fdf9 	bl	800c72c <MX_I2C2_Init>
  MX_TIM2_Init();
 800cb3a:	f006 fd2d 	bl	8013598 <MX_TIM2_Init>
  MX_TIM3_Init();
 800cb3e:	f006 fd9f 	bl	8013680 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800cb42:	f006 ff61 	bl	8013a08 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800cb46:	f7fe f877 	bl	800ac38 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800cb4a:	f016 f981 	bl	8022e50 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800cb4e:	f001 fc83 	bl	800e458 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800cb52:	f006 fef3 	bl	801393c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800cb56:	f006 fe11 	bl	801377c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  if (Check_USB_PowerOn())
 800cb5a:	f7fd f85d 	bl	8009c18 <Check_USB_PowerOn>
 800cb5e:	1e03      	subs	r3, r0, #0
 800cb60:	d006      	beq.n	800cb70 <main+0x5c>
    while (HAL_GetTick() < 650);  // Wait for the USB to become ready
 800cb62:	46c0      	nop			@ (mov r8, r8)
 800cb64:	f007 fe86 	bl	8014874 <HAL_GetTick>
 800cb68:	0003      	movs	r3, r0
 800cb6a:	4ac1      	ldr	r2, [pc, #772]	@ (800ce70 <main+0x35c>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d9f9      	bls.n	800cb64 <main+0x50>
	/*
	 * : Turn on heater if humidity is too high
	 * : LEDs indicator for air quality
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800cb70:	4ac0      	ldr	r2, [pc, #768]	@ (800ce74 <main+0x360>)
 800cb72:	4bc1      	ldr	r3, [pc, #772]	@ (800ce78 <main+0x364>)
 800cb74:	0011      	movs	r1, r2
 800cb76:	0018      	movs	r0, r3
 800cb78:	f7ff fd4a 	bl	800c610 <GPIO_InitPWMLEDs>
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800cb7c:	4abf      	ldr	r2, [pc, #764]	@ (800ce7c <main+0x368>)
 800cb7e:	4bc0      	ldr	r3, [pc, #768]	@ (800ce80 <main+0x36c>)
 800cb80:	0019      	movs	r1, r3
 800cb82:	2002      	movs	r0, #2
 800cb84:	f007 f8fe 	bl	8013d84 <CreateLine>
  BinaryReleaseInfo();
 800cb88:	f007 f990 	bl	8013eac <BinaryReleaseInfo>
  usblog = *(bool*)(USBlogstatusConfigAddr);
 800cb8c:	4bbd      	ldr	r3, [pc, #756]	@ (800ce84 <main+0x370>)
 800cb8e:	781a      	ldrb	r2, [r3, #0]
 800cb90:	4bbd      	ldr	r3, [pc, #756]	@ (800ce88 <main+0x374>)
 800cb92:	701a      	strb	r2, [r3, #0]
  if(UserButton_Pressed()){
 800cb94:	f7fd f8cc 	bl	8009d30 <UserButton_Pressed>
 800cb98:	1e03      	subs	r3, r0, #0
 800cb9a:	d005      	beq.n	800cba8 <main+0x94>
    EnableESPProg();
 800cb9c:	f016 fa34 	bl	8023008 <EnableESPProg>
    ESP_Programming = true;
 800cba0:	4bba      	ldr	r3, [pc, #744]	@ (800ce8c <main+0x378>)
 800cba2:	2201      	movs	r2, #1
 800cba4:	701a      	strb	r2, [r3, #0]
 800cba6:	e037      	b.n	800cc18 <main+0x104>
  }
  else {
    batteryChargeCheck();
 800cba8:	f005 fd34 	bl	8012614 <batteryChargeCheck>
//    batteryCharge = ReadBatteryVoltage();
    Error("Battery voltage is: %.02fV", batteryCharge);
 800cbac:	4bb8      	ldr	r3, [pc, #736]	@ (800ce90 <main+0x37c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	1c18      	adds	r0, r3, #0
 800cbb2:	f7f6 fe6f 	bl	8003894 <__aeabi_f2d>
 800cbb6:	0002      	movs	r2, r0
 800cbb8:	000b      	movs	r3, r1
 800cbba:	48b6      	ldr	r0, [pc, #728]	@ (800ce94 <main+0x380>)
 800cbbc:	49b6      	ldr	r1, [pc, #728]	@ (800ce98 <main+0x384>)
 800cbbe:	9200      	str	r2, [sp, #0]
 800cbc0:	9301      	str	r3, [sp, #4]
 800cbc2:	0002      	movs	r2, r0
 800cbc4:	2001      	movs	r0, #1
 800cbc6:	f007 f8dd 	bl	8013d84 <CreateLine>
#ifdef LARGEBATTERY
    if(batteryCharge <= 3.58) {
#else
    if(batteryCharge <= 3.68) {
 800cbca:	4bb1      	ldr	r3, [pc, #708]	@ (800ce90 <main+0x37c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	1c18      	adds	r0, r3, #0
 800cbd0:	f7f6 fe60 	bl	8003894 <__aeabi_f2d>
 800cbd4:	4ab1      	ldr	r2, [pc, #708]	@ (800ce9c <main+0x388>)
 800cbd6:	4bb2      	ldr	r3, [pc, #712]	@ (800cea0 <main+0x38c>)
 800cbd8:	f7f3 fc7a 	bl	80004d0 <__aeabi_dcmple>
 800cbdc:	1e03      	subs	r3, r0, #0
 800cbde:	d01b      	beq.n	800cc18 <main+0x104>
#endif
      SetAllREDLED();
 800cbe0:	f005 ff5c 	bl	8012a9c <SetAllREDLED>
      Error("Battery voltage is critical: %.02fV, going in deep sleep. Waking for LED indication %s seconds", batteryCharge, DEEP_SLEEP);
 800cbe4:	4baa      	ldr	r3, [pc, #680]	@ (800ce90 <main+0x37c>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	1c18      	adds	r0, r3, #0
 800cbea:	f7f6 fe53 	bl	8003894 <__aeabi_f2d>
 800cbee:	0002      	movs	r2, r0
 800cbf0:	000b      	movs	r3, r1
 800cbf2:	4cac      	ldr	r4, [pc, #688]	@ (800cea4 <main+0x390>)
 800cbf4:	48a8      	ldr	r0, [pc, #672]	@ (800ce98 <main+0x384>)
 800cbf6:	21e1      	movs	r1, #225	@ 0xe1
 800cbf8:	0109      	lsls	r1, r1, #4
 800cbfa:	9102      	str	r1, [sp, #8]
 800cbfc:	9200      	str	r2, [sp, #0]
 800cbfe:	9301      	str	r3, [sp, #4]
 800cc00:	0022      	movs	r2, r4
 800cc02:	0001      	movs	r1, r0
 800cc04:	2001      	movs	r0, #1
 800cc06:	f007 f8bd 	bl	8013d84 <CreateLine>
      WalkAllRedLED();
 800cc0a:	f005 ff95 	bl	8012b38 <WalkAllRedLED>
#ifndef STLINK_V3PWR
      Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP);
 800cc0e:	23e1      	movs	r3, #225	@ 0xe1
 800cc10:	011b      	lsls	r3, r3, #4
 800cc12:	0018      	movs	r0, r3
 800cc14:	f7fd fd14 	bl	800a640 <Enter_Stop_Mode_for_empty_battery>
#endif
      }

  }
  SetVerboseLevel(VERBOSE_ALL);
 800cc18:	2003      	movs	r0, #3
 800cc1a:	f007 f92d 	bl	8013e78 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800cc1e:	49a2      	ldr	r1, [pc, #648]	@ (800cea8 <main+0x394>)
 800cc20:	4ba2      	ldr	r3, [pc, #648]	@ (800ceac <main+0x398>)
 800cc22:	2201      	movs	r2, #1
 800cc24:	0018      	movs	r0, r3
 800cc26:	f010 fc77 	bl	801d518 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800cc2a:	4ba1      	ldr	r3, [pc, #644]	@ (800ceb0 <main+0x39c>)
 800cc2c:	0018      	movs	r0, r3
 800cc2e:	f7fd fe09 	bl	800a844 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800cc32:	4aa0      	ldr	r2, [pc, #640]	@ (800ceb4 <main+0x3a0>)
 800cc34:	49a0      	ldr	r1, [pc, #640]	@ (800ceb8 <main+0x3a4>)
 800cc36:	48a1      	ldr	r0, [pc, #644]	@ (800cebc <main+0x3a8>)
 800cc38:	230b      	movs	r3, #11
 800cc3a:	f004 fe5b 	bl	80118f4 <soundInit>
 800cc3e:	0003      	movs	r3, r0
 800cc40:	001a      	movs	r2, r3
 800cc42:	2301      	movs	r3, #1
 800cc44:	4053      	eors	r3, r2
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d007      	beq.n	800cc5c <main+0x148>
    errorHandler(__func__, __LINE__, __FILE__);
 800cc4c:	4a9c      	ldr	r2, [pc, #624]	@ (800cec0 <main+0x3ac>)
 800cc4e:	2304      	movs	r3, #4
 800cc50:	33ff      	adds	r3, #255	@ 0xff
 800cc52:	0019      	movs	r1, r3
 800cc54:	4b9b      	ldr	r3, [pc, #620]	@ (800cec4 <main+0x3b0>)
 800cc56:	0018      	movs	r0, r3
 800cc58:	f007 f97c 	bl	8013f54 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800cc5c:	4b9a      	ldr	r3, [pc, #616]	@ (800cec8 <main+0x3b4>)
 800cc5e:	4a9b      	ldr	r2, [pc, #620]	@ (800cecc <main+0x3b8>)
 800cc60:	4995      	ldr	r1, [pc, #596]	@ (800ceb8 <main+0x3a4>)
 800cc62:	489b      	ldr	r0, [pc, #620]	@ (800ced0 <main+0x3bc>)
 800cc64:	f000 fc92 	bl	800d58c <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800cc68:	f007 fe04 	bl	8014874 <HAL_GetTick>
 800cc6c:	0003      	movs	r3, r0
 800cc6e:	4a99      	ldr	r2, [pc, #612]	@ (800ced4 <main+0x3c0>)
 800cc70:	189a      	adds	r2, r3, r2
 800cc72:	4b99      	ldr	r3, [pc, #612]	@ (800ced8 <main+0x3c4>)
 800cc74:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800cc76:	f7fc ffcf 	bl	8009c18 <Check_USB_PowerOn>
 800cc7a:	0003      	movs	r3, r0
 800cc7c:	1e5a      	subs	r2, r3, #1
 800cc7e:	4193      	sbcs	r3, r2
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	2201      	movs	r2, #1
 800cc84:	4053      	eors	r3, r2
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	1c1a      	adds	r2, r3, #0
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	4b92      	ldr	r3, [pc, #584]	@ (800cedc <main+0x3c8>)
 800cc92:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800cc94:	f7fc ffc0 	bl	8009c18 <Check_USB_PowerOn>
 800cc98:	1e03      	subs	r3, r0, #0
 800cc9a:	d003      	beq.n	800cca4 <main+0x190>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800cc9c:	4b90      	ldr	r3, [pc, #576]	@ (800cee0 <main+0x3cc>)
 800cc9e:	0018      	movs	r0, r3
 800cca0:	f7fb ff00 	bl	8008aa4 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800cca4:	4b8f      	ldr	r3, [pc, #572]	@ (800cee4 <main+0x3d0>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	0018      	movs	r0, r3
 800ccaa:	f007 f815 	bl	8013cd8 <TimestampIsReached>
 800ccae:	1e03      	subs	r3, r0, #0
 800ccb0:	d00a      	beq.n	800ccc8 <main+0x1b4>
      Battery_Upkeep();
 800ccb2:	f006 faff 	bl	80132b4 <Battery_Upkeep>
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800ccb6:	f007 fddd 	bl	8014874 <HAL_GetTick>
 800ccba:	0003      	movs	r3, r0
 800ccbc:	4a8a      	ldr	r2, [pc, #552]	@ (800cee8 <main+0x3d4>)
 800ccbe:	189a      	adds	r2, r3, r2
 800ccc0:	4b88      	ldr	r3, [pc, #544]	@ (800cee4 <main+0x3d0>)
 800ccc2:	601a      	str	r2, [r3, #0]
      showTime();
 800ccc4:	f7fd f8b0 	bl	8009e28 <showTime>
    }
    configCheck();
 800ccc8:	f006 f954 	bl	8012f74 <configCheck>
    if ((batteryStatus == BATTERY_LOW || batteryStatus == BATTERY_CRITICAL)  && !EspTurnedOn){
 800cccc:	4b87      	ldr	r3, [pc, #540]	@ (800ceec <main+0x3d8>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d003      	beq.n	800ccdc <main+0x1c8>
 800ccd4:	4b85      	ldr	r3, [pc, #532]	@ (800ceec <main+0x3d8>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d137      	bne.n	800cd4c <main+0x238>
 800ccdc:	4b84      	ldr	r3, [pc, #528]	@ (800cef0 <main+0x3dc>)
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	2201      	movs	r2, #1
 800cce2:	4053      	eors	r3, r2
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d030      	beq.n	800cd4c <main+0x238>
      WalkAllRedLED();
 800ccea:	f005 ff25 	bl	8012b38 <WalkAllRedLED>
      Sensor.PM_measurementEnabled = false;
 800ccee:	4b81      	ldr	r3, [pc, #516]	@ (800cef4 <main+0x3e0>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	709a      	strb	r2, [r3, #2]
#ifdef USE_MAIL
      pwrmailTodaySend();
 800ccf4:	f7f7 feb8 	bl	8004a68 <pwrmailTodaySend>
      if (((batteryStatus == BATTERY_LOW)  || (batteryStatus == BATTERY_CRITICAL)) && (sendpwremail == CLEAR) && !Check_USB_PowerOn()) {
 800ccf8:	4b7c      	ldr	r3, [pc, #496]	@ (800ceec <main+0x3d8>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d003      	beq.n	800cd08 <main+0x1f4>
 800cd00:	4b7a      	ldr	r3, [pc, #488]	@ (800ceec <main+0x3d8>)
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d121      	bne.n	800cd4c <main+0x238>
 800cd08:	4b7b      	ldr	r3, [pc, #492]	@ (800cef8 <main+0x3e4>)
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d11d      	bne.n	800cd4c <main+0x238>
 800cd10:	f7fc ff82 	bl	8009c18 <Check_USB_PowerOn>
 800cd14:	0003      	movs	r3, r0
 800cd16:	001a      	movs	r2, r3
 800cd18:	2301      	movs	r3, #1
 800cd1a:	4053      	eors	r3, r2
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d014      	beq.n	800cd4c <main+0x238>
        Debug("charge: %d, sendpwrmail: %d Check_USB_PowerOn(): %d", batteryStatus, sendpwremail, Check_USB_PowerOn());
 800cd22:	4b72      	ldr	r3, [pc, #456]	@ (800ceec <main+0x3d8>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	001d      	movs	r5, r3
 800cd28:	4b73      	ldr	r3, [pc, #460]	@ (800cef8 <main+0x3e4>)
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	001c      	movs	r4, r3
 800cd2e:	f7fc ff73 	bl	8009c18 <Check_USB_PowerOn>
 800cd32:	0003      	movs	r3, r0
 800cd34:	4a71      	ldr	r2, [pc, #452]	@ (800cefc <main+0x3e8>)
 800cd36:	4972      	ldr	r1, [pc, #456]	@ (800cf00 <main+0x3ec>)
 800cd38:	9301      	str	r3, [sp, #4]
 800cd3a:	9400      	str	r4, [sp, #0]
 800cd3c:	002b      	movs	r3, r5
 800cd3e:	2003      	movs	r0, #3
 800cd40:	f007 f820 	bl	8013d84 <CreateLine>
        setModePowerMail();
 800cd44:	f7f7 fe50 	bl	80049e8 <setModePowerMail>
        ESP_Upkeep();
 800cd48:	f7fa fcb4 	bl	80076b4 <ESP_Upkeep>
    // ==== end of test mail
*/
#endif
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800cd4c:	4b6d      	ldr	r3, [pc, #436]	@ (800cf04 <main+0x3f0>)
 800cd4e:	2200      	movs	r2, #0
 800cd50:	701a      	strb	r2, [r3, #0]
    if (batteryStatus == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800cd52:	4b66      	ldr	r3, [pc, #408]	@ (800ceec <main+0x3d8>)
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d10c      	bne.n	800cd74 <main+0x260>
 800cd5a:	4b6b      	ldr	r3, [pc, #428]	@ (800cf08 <main+0x3f4>)
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	2b09      	cmp	r3, #9
 800cd60:	d108      	bne.n	800cd74 <main+0x260>
       batteryEmpty = true;
 800cd62:	4b6a      	ldr	r3, [pc, #424]	@ (800cf0c <main+0x3f8>)
 800cd64:	2201      	movs	r2, #1
 800cd66:	701a      	strb	r2, [r3, #0]
       // we are going in deep sleep, nearly off and no wakeup from RTC Do not use standby mode,
       // because without a modification on the PCB the ESP32 is activated
       // instead use the stop mode with or without RTC
       //Enter_Standby_Mode();
       Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP); // light up the leds every hour
 800cd68:	23e1      	movs	r3, #225	@ 0xe1
 800cd6a:	011b      	lsls	r3, r3, #4
 800cd6c:	0018      	movs	r0, r3
 800cd6e:	f7fd fc67 	bl	800a640 <Enter_Stop_Mode_for_empty_battery>
 800cd72:	e002      	b.n	800cd7a <main+0x266>
    }
    else{
      batteryEmpty = false;
 800cd74:	4b65      	ldr	r3, [pc, #404]	@ (800cf0c <main+0x3f8>)
 800cd76:	2200      	movs	r2, #0
 800cd78:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800cd7a:	4b65      	ldr	r3, [pc, #404]	@ (800cf10 <main+0x3fc>)
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d100      	bne.n	800cd84 <main+0x270>
 800cd82:	e10b      	b.n	800cf9c <main+0x488>
 800cd84:	4b41      	ldr	r3, [pc, #260]	@ (800ce8c <main+0x378>)
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	4053      	eors	r3, r2
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d100      	bne.n	800cd94 <main+0x280>
 800cd92:	e103      	b.n	800cf9c <main+0x488>
 800cd94:	4b5d      	ldr	r3, [pc, #372]	@ (800cf0c <main+0x3f8>)
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	4053      	eors	r3, r2
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d100      	bne.n	800cda4 <main+0x290>
 800cda2:	e0fb      	b.n	800cf9c <main+0x488>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800cda4:	4b4d      	ldr	r3, [pc, #308]	@ (800cedc <main+0x3c8>)
 800cda6:	781a      	ldrb	r2, [r3, #0]
 800cda8:	4b5a      	ldr	r3, [pc, #360]	@ (800cf14 <main+0x400>)
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d034      	beq.n	800ce1a <main+0x306>
        if (IsSGPPresent() && !usbPluggedIn) {
 800cdb0:	f000 fb7e 	bl	800d4b0 <IsSGPPresent>
 800cdb4:	1e03      	subs	r3, r0, #0
 800cdb6:	d009      	beq.n	800cdcc <main+0x2b8>
 800cdb8:	4b56      	ldr	r3, [pc, #344]	@ (800cf14 <main+0x400>)
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	4053      	eors	r3, r2
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d002      	beq.n	800cdcc <main+0x2b8>
          SetVOCSensorDIS_ENA(true);
 800cdc6:	2001      	movs	r0, #1
 800cdc8:	f000 fb7c 	bl	800d4c4 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800cdcc:	4b52      	ldr	r3, [pc, #328]	@ (800cf18 <main+0x404>)
 800cdce:	791b      	ldrb	r3, [r3, #4]
 800cdd0:	2b34      	cmp	r3, #52	@ 0x34
 800cdd2:	d003      	beq.n	800cddc <main+0x2c8>
 800cdd4:	4b50      	ldr	r3, [pc, #320]	@ (800cf18 <main+0x404>)
 800cdd6:	791b      	ldrb	r3, [r3, #4]
 800cdd8:	2b35      	cmp	r3, #53	@ 0x35
 800cdda:	d106      	bne.n	800cdea <main+0x2d6>
 800cddc:	4b4d      	ldr	r3, [pc, #308]	@ (800cf14 <main+0x400>)
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d002      	beq.n	800cdea <main+0x2d6>
          SetVOCSensorDIS_ENA(false);
 800cde4:	2000      	movs	r0, #0
 800cde6:	f000 fb6d 	bl	800d4c4 <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800cdea:	4b4a      	ldr	r3, [pc, #296]	@ (800cf14 <main+0x400>)
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	4053      	eors	r3, r2
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00c      	beq.n	800ce12 <main+0x2fe>
 800cdf8:	f007 fd3c 	bl	8014874 <HAL_GetTick>
 800cdfc:	0003      	movs	r3, r0
 800cdfe:	4a35      	ldr	r2, [pc, #212]	@ (800ced4 <main+0x3c0>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d906      	bls.n	800ce12 <main+0x2fe>
//          Debug("Device time out set in main due to powerstatus shift");
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800ce04:	f007 fd36 	bl	8014874 <HAL_GetTick>
 800ce08:	0003      	movs	r3, r0
 800ce0a:	4a44      	ldr	r2, [pc, #272]	@ (800cf1c <main+0x408>)
 800ce0c:	189a      	adds	r2, r3, r2
 800ce0e:	4b32      	ldr	r3, [pc, #200]	@ (800ced8 <main+0x3c4>)
 800ce10:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800ce12:	4b40      	ldr	r3, [pc, #256]	@ (800cf14 <main+0x400>)
 800ce14:	781a      	ldrb	r2, [r3, #0]
 800ce16:	4b31      	ldr	r3, [pc, #196]	@ (800cedc <main+0x3c8>)
 800ce18:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800ce1a:	f000 fffb 	bl	800de14 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800ce1e:	4b35      	ldr	r3, [pc, #212]	@ (800cef4 <main+0x3e0>)
 800ce20:	78db      	ldrb	r3, [r3, #3]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d005      	beq.n	800ce32 <main+0x31e>
        MICstate = Mic_Upkeep();
 800ce26:	f001 fa05 	bl	800e234 <Mic_Upkeep>
 800ce2a:	0003      	movs	r3, r0
 800ce2c:	001a      	movs	r2, r3
 800ce2e:	4b3c      	ldr	r3, [pc, #240]	@ (800cf20 <main+0x40c>)
 800ce30:	701a      	strb	r2, [r3, #0]
      }
      if ( ((batteryStatus >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800ce32:	4b2e      	ldr	r3, [pc, #184]	@ (800ceec <main+0x3d8>)
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d803      	bhi.n	800ce42 <main+0x32e>
 800ce3a:	4b32      	ldr	r3, [pc, #200]	@ (800cf04 <main+0x3f0>)
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d070      	beq.n	800cf24 <main+0x410>
 800ce42:	4b2c      	ldr	r3, [pc, #176]	@ (800cef4 <main+0x3e0>)
 800ce44:	789b      	ldrb	r3, [r3, #2]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d06c      	beq.n	800cf24 <main+0x410>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800ce4a:	f001 fb93 	bl	800e574 <sen5x_Get_sen5x_enable_state>
 800ce4e:	0003      	movs	r3, r0
 800ce50:	001a      	movs	r2, r3
 800ce52:	2301      	movs	r3, #1
 800ce54:	4053      	eors	r3, r2
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d006      	beq.n	800ce6a <main+0x356>
 800ce5c:	4b2d      	ldr	r3, [pc, #180]	@ (800cf14 <main+0x400>)
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d002      	beq.n	800ce6a <main+0x356>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800ce64:	2000      	movs	r0, #0
 800ce66:	f001 fbc1 	bl	800e5ec <sen5x_enable>
        }
        sen5x_statemachine();
 800ce6a:	f002 f959 	bl	800f120 <sen5x_statemachine>
 800ce6e:	e07a      	b.n	800cf66 <main+0x452>
 800ce70:	00000289 	.word	0x00000289
 800ce74:	200021ac 	.word	0x200021ac
 800ce78:	2000216c 	.word	0x2000216c
 800ce7c:	0802c4c4 	.word	0x0802c4c4
 800ce80:	0802c4f0 	.word	0x0802c4f0
 800ce84:	08080194 	.word	0x08080194
 800ce88:	200010f7 	.word	0x200010f7
 800ce8c:	200010f5 	.word	0x200010f5
 800ce90:	20002158 	.word	0x20002158
 800ce94:	0802c4f4 	.word	0x0802c4f4
 800ce98:	0802c510 	.word	0x0802c510
 800ce9c:	d70a3d71 	.word	0xd70a3d71
 800cea0:	400d70a3 	.word	0x400d70a3
 800cea4:	0802c514 	.word	0x0802c514
 800cea8:	20001100 	.word	0x20001100
 800ceac:	200022e4 	.word	0x200022e4
 800ceb0:	20001198 	.word	0x20001198
 800ceb4:	200021ec 	.word	0x200021ec
 800ceb8:	20001070 	.word	0x20001070
 800cebc:	200010ac 	.word	0x200010ac
 800cec0:	0802c574 	.word	0x0802c574
 800cec4:	0802e2bc 	.word	0x0802e2bc
 800cec8:	2000239c 	.word	0x2000239c
 800cecc:	20000e84 	.word	0x20000e84
 800ced0:	20000f38 	.word	0x20000f38
 800ced4:	000061a8 	.word	0x000061a8
 800ced8:	20001114 	.word	0x20001114
 800cedc:	200010fa 	.word	0x200010fa
 800cee0:	0802c588 	.word	0x0802c588
 800cee4:	200000a4 	.word	0x200000a4
 800cee8:	0000c350 	.word	0x0000c350
 800ceec:	2000215d 	.word	0x2000215d
 800cef0:	200005ac 	.word	0x200005ac
 800cef4:	20001118 	.word	0x20001118
 800cef8:	200010f9 	.word	0x200010f9
 800cefc:	0802c5bc 	.word	0x0802c5bc
 800cf00:	0802c5f0 	.word	0x0802c5f0
 800cf04:	200000a2 	.word	0x200000a2
 800cf08:	200010fc 	.word	0x200010fc
 800cf0c:	200010f6 	.word	0x200010f6
 800cf10:	200010f4 	.word	0x200010f4
 800cf14:	2000214d 	.word	0x2000214d
 800cf18:	200011c0 	.word	0x200011c0
 800cf1c:	00001194 	.word	0x00001194
 800cf20:	200010fb 	.word	0x200010fb
      }
      else if ((batteryStatus <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800cf24:	4b52      	ldr	r3, [pc, #328]	@ (800d070 <main+0x55c>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d81c      	bhi.n	800cf66 <main+0x452>
 800cf2c:	4b51      	ldr	r3, [pc, #324]	@ (800d074 <main+0x560>)
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	2201      	movs	r2, #1
 800cf32:	4053      	eors	r3, r2
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d015      	beq.n	800cf66 <main+0x452>
 800cf3a:	4b4f      	ldr	r3, [pc, #316]	@ (800d078 <main+0x564>)
 800cf3c:	789b      	ldrb	r3, [r3, #2]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d011      	beq.n	800cf66 <main+0x452>
        Info("Battery level insufficient for sen5x operation");
 800cf42:	4a4e      	ldr	r2, [pc, #312]	@ (800d07c <main+0x568>)
 800cf44:	4b4e      	ldr	r3, [pc, #312]	@ (800d080 <main+0x56c>)
 800cf46:	0019      	movs	r1, r3
 800cf48:	2002      	movs	r0, #2
 800cf4a:	f006 ff1b 	bl	8013d84 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800cf4e:	4b4a      	ldr	r3, [pc, #296]	@ (800d078 <main+0x564>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800cf54:	4b4b      	ldr	r3, [pc, #300]	@ (800d084 <main+0x570>)
 800cf56:	2200      	movs	r2, #0
 800cf58:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800cf5a:	4b4b      	ldr	r3, [pc, #300]	@ (800d088 <main+0x574>)
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d001      	beq.n	800cf66 <main+0x452>
          sen5x_Power_Off();
 800cf62:	f001 fbcf 	bl	800e704 <sen5x_Power_Off>
        }
      }
      if (SensorProbe.ESP_Present && !espfailshown) {
 800cf66:	4b49      	ldr	r3, [pc, #292]	@ (800d08c <main+0x578>)
 800cf68:	79db      	ldrb	r3, [r3, #7]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00d      	beq.n	800cf8a <main+0x476>
 800cf6e:	4b48      	ldr	r3, [pc, #288]	@ (800d090 <main+0x57c>)
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	2201      	movs	r2, #1
 800cf74:	4053      	eors	r3, r2
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d006      	beq.n	800cf8a <main+0x476>
        ESPstate = ESP_Upkeep();
 800cf7c:	f7fa fb9a 	bl	80076b4 <ESP_Upkeep>
 800cf80:	0003      	movs	r3, r0
 800cf82:	001a      	movs	r2, r3
 800cf84:	4b43      	ldr	r3, [pc, #268]	@ (800d094 <main+0x580>)
 800cf86:	701a      	strb	r2, [r3, #0]
 800cf88:	e008      	b.n	800cf9c <main+0x488>
      }
      else {
        Error("ESP failed during init");
 800cf8a:	4a43      	ldr	r2, [pc, #268]	@ (800d098 <main+0x584>)
 800cf8c:	4b43      	ldr	r3, [pc, #268]	@ (800d09c <main+0x588>)
 800cf8e:	0019      	movs	r1, r3
 800cf90:	2001      	movs	r0, #1
 800cf92:	f006 fef7 	bl	8013d84 <CreateLine>
        espfailshown = true;
 800cf96:	4b3e      	ldr	r3, [pc, #248]	@ (800d090 <main+0x57c>)
 800cf98:	2201      	movs	r2, #1
 800cf9a:	701a      	strb	r2, [r3, #0]
      }
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800cf9c:	4b40      	ldr	r3, [pc, #256]	@ (800d0a0 <main+0x58c>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	4053      	eors	r3, r2
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00f      	beq.n	800cfca <main+0x4b6>
 800cfaa:	4b3e      	ldr	r3, [pc, #248]	@ (800d0a4 <main+0x590>)
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	4053      	eors	r3, r2
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d008      	beq.n	800cfca <main+0x4b6>
 800cfb8:	4b3b      	ldr	r3, [pc, #236]	@ (800d0a8 <main+0x594>)
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	4053      	eors	r3, r2
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d001      	beq.n	800cfca <main+0x4b6>
      Device_Test();  // for device with startup time
 800cfc6:	f000 fcb9 	bl	800d93c <Device_Test>
    }
    if (!usbPluggedIn) {
 800cfca:	4b38      	ldr	r3, [pc, #224]	@ (800d0ac <main+0x598>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	4053      	eors	r3, r2
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d030      	beq.n	800d03a <main+0x526>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800cfd8:	4b35      	ldr	r3, [pc, #212]	@ (800d0b0 <main+0x59c>)
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	4053      	eors	r3, r2
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d029      	beq.n	800d03a <main+0x526>
 800cfe6:	f000 fd27 	bl	800da38 <AllDevicesReady>
 800cfea:	1e03      	subs	r3, r0, #0
 800cfec:	d025      	beq.n	800d03a <main+0x526>
 800cfee:	4b31      	ldr	r3, [pc, #196]	@ (800d0b4 <main+0x5a0>)
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d021      	beq.n	800d03a <main+0x526>
        EnabledConnectedDevices();
 800cff6:	f000 fe6b 	bl	800dcd0 <EnabledConnectedDevices>
        Enter_Stop_Mode((batteryCharge<3.90)?SensorProbe.PM_Present?WAIT_WITH_PM+900:WAIT_WITHOUT_PM+900:SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800cffa:	4b2f      	ldr	r3, [pc, #188]	@ (800d0b8 <main+0x5a4>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	1c18      	adds	r0, r3, #0
 800d000:	f7f6 fc48 	bl	8003894 <__aeabi_f2d>
 800d004:	4a2d      	ldr	r2, [pc, #180]	@ (800d0bc <main+0x5a8>)
 800d006:	4b2e      	ldr	r3, [pc, #184]	@ (800d0c0 <main+0x5ac>)
 800d008:	f7f3 fa58 	bl	80004bc <__aeabi_dcmplt>
 800d00c:	1e03      	subs	r3, r0, #0
 800d00e:	d008      	beq.n	800d022 <main+0x50e>
 800d010:	4b1e      	ldr	r3, [pc, #120]	@ (800d08c <main+0x578>)
 800d012:	795b      	ldrb	r3, [r3, #5]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d002      	beq.n	800d01e <main+0x50a>
 800d018:	23dc      	movs	r3, #220	@ 0xdc
 800d01a:	00db      	lsls	r3, r3, #3
 800d01c:	e00a      	b.n	800d034 <main+0x520>
 800d01e:	4b29      	ldr	r3, [pc, #164]	@ (800d0c4 <main+0x5b0>)
 800d020:	e008      	b.n	800d034 <main+0x520>
 800d022:	4b1a      	ldr	r3, [pc, #104]	@ (800d08c <main+0x578>)
 800d024:	795b      	ldrb	r3, [r3, #5]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d002      	beq.n	800d030 <main+0x51c>
 800d02a:	23d7      	movs	r3, #215	@ 0xd7
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	e001      	b.n	800d034 <main+0x520>
 800d030:	23dc      	movs	r3, #220	@ 0xdc
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	0018      	movs	r0, r3
 800d036:	f7fd fb5f 	bl	800a6f8 <Enter_Stop_Mode>
      }
    }
    if (u1_rx_buff[0] != '\0') {
 800d03a:	4b23      	ldr	r3, [pc, #140]	@ (800d0c8 <main+0x5b4>)
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d001      	beq.n	800d046 <main+0x532>
      check_cli_command();
 800d042:	f000 f8cf 	bl	800d1e4 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800d046:	f7fc fde7 	bl	8009c18 <Check_USB_PowerOn>
 800d04a:	1e03      	subs	r3, r0, #0
 800d04c:	d100      	bne.n	800d050 <main+0x53c>
 800d04e:	e629      	b.n	800cca4 <main+0x190>
 800d050:	4b1e      	ldr	r3, [pc, #120]	@ (800d0cc <main+0x5b8>)
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	2201      	movs	r2, #1
 800d056:	4053      	eors	r3, r2
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d100      	bne.n	800d060 <main+0x54c>
 800d05e:	e621      	b.n	800cca4 <main+0x190>
      Process_USB_input(GetUsbRxPointer());
 800d060:	f015 ffdc 	bl	802301c <GetUsbRxPointer>
 800d064:	0003      	movs	r3, r0
 800d066:	0018      	movs	r0, r3
 800d068:	f7fc fa8c 	bl	8009584 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800d06c:	e61a      	b.n	800cca4 <main+0x190>
 800d06e:	46c0      	nop			@ (mov r8, r8)
 800d070:	2000215d 	.word	0x2000215d
 800d074:	200000a2 	.word	0x200000a2
 800d078:	20001118 	.word	0x20001118
 800d07c:	0802c5f4 	.word	0x0802c5f4
 800d080:	0802c4f0 	.word	0x0802c4f0
 800d084:	200011be 	.word	0x200011be
 800d088:	200011bd 	.word	0x200011bd
 800d08c:	20001120 	.word	0x20001120
 800d090:	200010f8 	.word	0x200010f8
 800d094:	200010fc 	.word	0x200010fc
 800d098:	0802c624 	.word	0x0802c624
 800d09c:	0802c510 	.word	0x0802c510
 800d0a0:	200010f4 	.word	0x200010f4
 800d0a4:	200010f5 	.word	0x200010f5
 800d0a8:	200010f6 	.word	0x200010f6
 800d0ac:	2000214d 	.word	0x2000214d
 800d0b0:	2000214e 	.word	0x2000214e
 800d0b4:	200005b3 	.word	0x200005b3
 800d0b8:	20002158 	.word	0x20002158
 800d0bc:	33333333 	.word	0x33333333
 800d0c0:	400f3333 	.word	0x400f3333
 800d0c4:	000006f4 	.word	0x000006f4
 800d0c8:	20001100 	.word	0x20001100
 800d0cc:	200005af 	.word	0x200005af

0800d0d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d0d0:	b590      	push	{r4, r7, lr}
 800d0d2:	b09d      	sub	sp, #116	@ 0x74
 800d0d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d0d6:	2438      	movs	r4, #56	@ 0x38
 800d0d8:	193b      	adds	r3, r7, r4
 800d0da:	0018      	movs	r0, r3
 800d0dc:	2338      	movs	r3, #56	@ 0x38
 800d0de:	001a      	movs	r2, r3
 800d0e0:	2100      	movs	r1, #0
 800d0e2:	f019 f9c1 	bl	8026468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d0e6:	2324      	movs	r3, #36	@ 0x24
 800d0e8:	18fb      	adds	r3, r7, r3
 800d0ea:	0018      	movs	r0, r3
 800d0ec:	2314      	movs	r3, #20
 800d0ee:	001a      	movs	r2, r3
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	f019 f9b9 	bl	8026468 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d0f6:	003b      	movs	r3, r7
 800d0f8:	0018      	movs	r0, r3
 800d0fa:	2324      	movs	r3, #36	@ 0x24
 800d0fc:	001a      	movs	r2, r3
 800d0fe:	2100      	movs	r1, #0
 800d100:	f019 f9b2 	bl	8026468 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d104:	4b34      	ldr	r3, [pc, #208]	@ (800d1d8 <SystemClock_Config+0x108>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a34      	ldr	r2, [pc, #208]	@ (800d1dc <SystemClock_Config+0x10c>)
 800d10a:	401a      	ands	r2, r3
 800d10c:	4b32      	ldr	r3, [pc, #200]	@ (800d1d8 <SystemClock_Config+0x108>)
 800d10e:	2180      	movs	r1, #128	@ 0x80
 800d110:	0109      	lsls	r1, r1, #4
 800d112:	430a      	orrs	r2, r1
 800d114:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800d116:	f00d ffcb 	bl	801b0b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800d11a:	4b31      	ldr	r3, [pc, #196]	@ (800d1e0 <SystemClock_Config+0x110>)
 800d11c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d11e:	4a2f      	ldr	r2, [pc, #188]	@ (800d1dc <SystemClock_Config+0x10c>)
 800d120:	401a      	ands	r2, r3
 800d122:	4b2f      	ldr	r3, [pc, #188]	@ (800d1e0 <SystemClock_Config+0x110>)
 800d124:	2180      	movs	r1, #128	@ 0x80
 800d126:	0149      	lsls	r1, r1, #5
 800d128:	430a      	orrs	r2, r1
 800d12a:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800d12c:	193b      	adds	r3, r7, r4
 800d12e:	2226      	movs	r2, #38	@ 0x26
 800d130:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d132:	193b      	adds	r3, r7, r4
 800d134:	2280      	movs	r2, #128	@ 0x80
 800d136:	0052      	lsls	r2, r2, #1
 800d138:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d13a:	0021      	movs	r1, r4
 800d13c:	187b      	adds	r3, r7, r1
 800d13e:	2201      	movs	r2, #1
 800d140:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d142:	187b      	adds	r3, r7, r1
 800d144:	2210      	movs	r2, #16
 800d146:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800d148:	187b      	adds	r3, r7, r1
 800d14a:	2201      	movs	r2, #1
 800d14c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800d14e:	187b      	adds	r3, r7, r1
 800d150:	2200      	movs	r2, #0
 800d152:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d154:	187b      	adds	r3, r7, r1
 800d156:	0018      	movs	r0, r3
 800d158:	f00e f824 	bl	801b1a4 <HAL_RCC_OscConfig>
 800d15c:	1e03      	subs	r3, r0, #0
 800d15e:	d001      	beq.n	800d164 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d160:	f000 f922 	bl	800d3a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d164:	2124      	movs	r1, #36	@ 0x24
 800d166:	187b      	adds	r3, r7, r1
 800d168:	220f      	movs	r2, #15
 800d16a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800d16c:	187b      	adds	r3, r7, r1
 800d16e:	2201      	movs	r2, #1
 800d170:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d172:	187b      	adds	r3, r7, r1
 800d174:	2200      	movs	r2, #0
 800d176:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800d178:	187b      	adds	r3, r7, r1
 800d17a:	2200      	movs	r2, #0
 800d17c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d17e:	187b      	adds	r3, r7, r1
 800d180:	2200      	movs	r2, #0
 800d182:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800d184:	187b      	adds	r3, r7, r1
 800d186:	2100      	movs	r1, #0
 800d188:	0018      	movs	r0, r3
 800d18a:	f00e fbdf 	bl	801b94c <HAL_RCC_ClockConfig>
 800d18e:	1e03      	subs	r3, r0, #0
 800d190:	d001      	beq.n	800d196 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800d192:	f000 f909 	bl	800d3a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800d196:	003b      	movs	r3, r7
 800d198:	226d      	movs	r2, #109	@ 0x6d
 800d19a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800d19c:	003b      	movs	r3, r7
 800d19e:	2200      	movs	r2, #0
 800d1a0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800d1a2:	003b      	movs	r3, r7
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800d1a8:	003b      	movs	r3, r7
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d1ae:	003b      	movs	r3, r7
 800d1b0:	2280      	movs	r2, #128	@ 0x80
 800d1b2:	0252      	lsls	r2, r2, #9
 800d1b4:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d1b6:	003b      	movs	r3, r7
 800d1b8:	2280      	movs	r2, #128	@ 0x80
 800d1ba:	04d2      	lsls	r2, r2, #19
 800d1bc:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d1be:	003b      	movs	r3, r7
 800d1c0:	0018      	movs	r0, r3
 800d1c2:	f00e fde7 	bl	801bd94 <HAL_RCCEx_PeriphCLKConfig>
 800d1c6:	1e03      	subs	r3, r0, #0
 800d1c8:	d001      	beq.n	800d1ce <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800d1ca:	f000 f8ed 	bl	800d3a8 <Error_Handler>
  }
}
 800d1ce:	46c0      	nop			@ (mov r8, r8)
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	b01d      	add	sp, #116	@ 0x74
 800d1d4:	bd90      	pop	{r4, r7, pc}
 800d1d6:	46c0      	nop			@ (mov r8, r8)
 800d1d8:	40007000 	.word	0x40007000
 800d1dc:	ffffe7ff 	.word	0xffffe7ff
 800d1e0:	40021000 	.word	0x40021000

0800d1e4 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800d1e8:	4b40      	ldr	r3, [pc, #256]	@ (800d2ec <check_cli_command+0x108>)
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	3b61      	subs	r3, #97	@ 0x61
 800d1ee:	2b15      	cmp	r3, #21
 800d1f0:	d845      	bhi.n	800d27e <check_cli_command+0x9a>
 800d1f2:	009a      	lsls	r2, r3, #2
 800d1f4:	4b3e      	ldr	r3, [pc, #248]	@ (800d2f0 <check_cli_command+0x10c>)
 800d1f6:	18d3      	adds	r3, r2, r3
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800d1fc:	4b3d      	ldr	r3, [pc, #244]	@ (800d2f4 <check_cli_command+0x110>)
 800d1fe:	0018      	movs	r0, r3
 800d200:	f018 ffe0 	bl	80261c4 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800d204:	2003      	movs	r0, #3
 800d206:	f006 fe37 	bl	8013e78 <SetVerboseLevel>
      break;
 800d20a:	e069      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800d20c:	f7fb fc8a 	bl	8008b24 <PC_show_Keys>
    break;
 800d210:	e066      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800d212:	f7f7 fb3d 	bl	8004890 <forceNTPupdate>
    break;
 800d216:	e063      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800d218:	4b37      	ldr	r3, [pc, #220]	@ (800d2f8 <check_cli_command+0x114>)
 800d21a:	0018      	movs	r0, r3
 800d21c:	f018 ffd2 	bl	80261c4 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800d220:	2002      	movs	r0, #2
 800d222:	f006 fe29 	bl	8013e78 <SetVerboseLevel>
      break;
 800d226:	e05b      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800d228:	4b34      	ldr	r3, [pc, #208]	@ (800d2fc <check_cli_command+0x118>)
 800d22a:	0018      	movs	r0, r3
 800d22c:	f018 ffca 	bl	80261c4 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800d230:	2001      	movs	r0, #1
 800d232:	f006 fe21 	bl	8013e78 <SetVerboseLevel>
      break;
 800d236:	e053      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800d238:	4b31      	ldr	r3, [pc, #196]	@ (800d300 <check_cli_command+0x11c>)
 800d23a:	0018      	movs	r0, r3
 800d23c:	f018 ffc2 	bl	80261c4 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800d240:	2000      	movs	r0, #0
 800d242:	f006 fe19 	bl	8013e78 <SetVerboseLevel>
      break;
 800d246:	e04b      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800d248:	f007 fb14 	bl	8014874 <HAL_GetTick>
 800d24c:	0002      	movs	r2, r0
 800d24e:	4b2d      	ldr	r3, [pc, #180]	@ (800d304 <check_cli_command+0x120>)
 800d250:	601a      	str	r2, [r3, #0]
      break;
 800d252:	e045      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800d254:	f7fc fde8 	bl	8009e28 <showTime>
      break;
 800d258:	e042      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
 800d25a:	4b2b      	ldr	r3, [pc, #172]	@ (800d308 <check_cli_command+0x124>)
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	1e5a      	subs	r2, r3, #1
 800d260:	4193      	sbcs	r3, r2
 800d262:	b2db      	uxtb	r3, r3
 800d264:	2201      	movs	r2, #1
 800d266:	4053      	eors	r3, r2
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	1c1a      	adds	r2, r3, #0
 800d26c:	2301      	movs	r3, #1
 800d26e:	4013      	ands	r3, r2
 800d270:	b2da      	uxtb	r2, r3
 800d272:	4b25      	ldr	r3, [pc, #148]	@ (800d308 <check_cli_command+0x124>)
 800d274:	701a      	strb	r2, [r3, #0]
      break;
 800d276:	e033      	b.n	800d2e0 <check_cli_command+0xfc>
    case (uint8_t)'v':
      BinaryReleaseInfo(); // show me the build
 800d278:	f006 fe18 	bl	8013eac <BinaryReleaseInfo>
      break;
 800d27c:	e030      	b.n	800d2e0 <check_cli_command+0xfc>
    default:
      printf("Error unknown request from Serial UART1 (TTY)\r\n");
 800d27e:	4b23      	ldr	r3, [pc, #140]	@ (800d30c <check_cli_command+0x128>)
 800d280:	0018      	movs	r0, r3
 800d282:	f018 ff9f 	bl	80261c4 <puts>
      printf("\r\n\r\nPossible commands:\r\n\r\n");
 800d286:	4b22      	ldr	r3, [pc, #136]	@ (800d310 <check_cli_command+0x12c>)
 800d288:	0018      	movs	r0, r3
 800d28a:	f018 ff9b 	bl	80261c4 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800d28e:	4b21      	ldr	r3, [pc, #132]	@ (800d314 <check_cli_command+0x130>)
 800d290:	0018      	movs	r0, r3
 800d292:	f018 ff97 	bl	80261c4 <puts>
      printf("e - show EEPROM\r\n");
 800d296:	4b20      	ldr	r3, [pc, #128]	@ (800d318 <check_cli_command+0x134>)
 800d298:	0018      	movs	r0, r3
 800d29a:	f018 ff93 	bl	80261c4 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800d29e:	4b1f      	ldr	r3, [pc, #124]	@ (800d31c <check_cli_command+0x138>)
 800d2a0:	0018      	movs	r0, r3
 800d2a2:	f018 ff8f 	bl	80261c4 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800d2a6:	4b1e      	ldr	r3, [pc, #120]	@ (800d320 <check_cli_command+0x13c>)
 800d2a8:	0018      	movs	r0, r3
 800d2aa:	f018 ff8b 	bl	80261c4 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800d2ae:	4b1d      	ldr	r3, [pc, #116]	@ (800d324 <check_cli_command+0x140>)
 800d2b0:	0018      	movs	r0, r3
 800d2b2:	f018 ff87 	bl	80261c4 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800d2b6:	4b1c      	ldr	r3, [pc, #112]	@ (800d328 <check_cli_command+0x144>)
 800d2b8:	0018      	movs	r0, r3
 800d2ba:	f018 ff83 	bl	80261c4 <puts>
      printf("s - Start particle measurement\r\n");
 800d2be:	4b1b      	ldr	r3, [pc, #108]	@ (800d32c <check_cli_command+0x148>)
 800d2c0:	0018      	movs	r0, r3
 800d2c2:	f018 ff7f 	bl	80261c4 <puts>
      printf("t - Show actual system time\r\n");
 800d2c6:	4b1a      	ldr	r3, [pc, #104]	@ (800d330 <check_cli_command+0x14c>)
 800d2c8:	0018      	movs	r0, r3
 800d2ca:	f018 ff7b 	bl	80261c4 <puts>
      printf("u - USB logging toggle\r\n");
 800d2ce:	4b19      	ldr	r3, [pc, #100]	@ (800d334 <check_cli_command+0x150>)
 800d2d0:	0018      	movs	r0, r3
 800d2d2:	f018 ff77 	bl	80261c4 <puts>
      printf("v - Show system version\r\n");
 800d2d6:	4b18      	ldr	r3, [pc, #96]	@ (800d338 <check_cli_command+0x154>)
 800d2d8:	0018      	movs	r0, r3
 800d2da:	f018 ff73 	bl	80261c4 <puts>
  break;
 800d2de:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800d2e0:	4b02      	ldr	r3, [pc, #8]	@ (800d2ec <check_cli_command+0x108>)
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	701a      	strb	r2, [r3, #0]
}
 800d2e6:	46c0      	nop			@ (mov r8, r8)
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	20001100 	.word	0x20001100
 800d2f0:	0802e264 	.word	0x0802e264
 800d2f4:	0802c63c 	.word	0x0802c63c
 800d2f8:	0802c658 	.word	0x0802c658
 800d2fc:	0802c674 	.word	0x0802c674
 800d300:	0802c694 	.word	0x0802c694
 800d304:	200011cc 	.word	0x200011cc
 800d308:	200010f7 	.word	0x200010f7
 800d30c:	0802c6b0 	.word	0x0802c6b0
 800d310:	0802c6e0 	.word	0x0802c6e0
 800d314:	0802c6fc 	.word	0x0802c6fc
 800d318:	0802c71c 	.word	0x0802c71c
 800d31c:	0802c730 	.word	0x0802c730
 800d320:	0802c754 	.word	0x0802c754
 800d324:	0802c774 	.word	0x0802c774
 800d328:	0802c798 	.word	0x0802c798
 800d32c:	0802c7b8 	.word	0x0802c7b8
 800d330:	0802c7d8 	.word	0x0802c7d8
 800d334:	0802c7f8 	.word	0x0802c7f8
 800d338:	0802c810 	.word	0x0802c810

0800d33c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800d344:	4907      	ldr	r1, [pc, #28]	@ (800d364 <HAL_UART_RxCpltCallback+0x28>)
 800d346:	4b08      	ldr	r3, [pc, #32]	@ (800d368 <HAL_UART_RxCpltCallback+0x2c>)
 800d348:	2201      	movs	r2, #1
 800d34a:	0018      	movs	r0, r3
 800d34c:	f010 f8e4 	bl	801d518 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800d350:	4904      	ldr	r1, [pc, #16]	@ (800d364 <HAL_UART_RxCpltCallback+0x28>)
 800d352:	4b05      	ldr	r3, [pc, #20]	@ (800d368 <HAL_UART_RxCpltCallback+0x2c>)
 800d354:	2201      	movs	r2, #1
 800d356:	0018      	movs	r0, r3
 800d358:	f010 f8de 	bl	801d518 <HAL_UART_Receive_IT>
}
 800d35c:	46c0      	nop			@ (mov r8, r8)
 800d35e:	46bd      	mov	sp, r7
 800d360:	b002      	add	sp, #8
 800d362:	bd80      	pop	{r7, pc}
 800d364:	20001100 	.word	0x20001100
 800d368:	200022e4 	.word	0x200022e4

0800d36c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	0002      	movs	r2, r0
 800d374:	1dbb      	adds	r3, r7, #6
 800d376:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800d378:	1dbb      	adds	r3, r7, #6
 800d37a:	881a      	ldrh	r2, [r3, #0]
 800d37c:	2380      	movs	r3, #128	@ 0x80
 800d37e:	021b      	lsls	r3, r3, #8
 800d380:	429a      	cmp	r2, r3
 800d382:	d10b      	bne.n	800d39c <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800d384:	f005 ffa0 	bl	80132c8 <setuserToggle>
    if (GetPMSensorPresence()) {
 800d388:	f000 f860 	bl	800d44c <GetPMSensorPresence>
 800d38c:	1e03      	subs	r3, r0, #0
 800d38e:	d005      	beq.n	800d39c <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800d390:	4b04      	ldr	r3, [pc, #16]	@ (800d3a4 <HAL_GPIO_EXTI_Callback+0x38>)
 800d392:	2201      	movs	r2, #1
 800d394:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800d396:	2000      	movs	r0, #0
 800d398:	f001 f8f6 	bl	800e588 <sen5x_Set_sen5x_state>
    }
  }
}
 800d39c:	46c0      	nop			@ (mov r8, r8)
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	b002      	add	sp, #8
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	20001118 	.word	0x20001118

0800d3a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800d3ac:	f005 fb76 	bl	8012a9c <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d3b0:	b672      	cpsid	i
}
 800d3b2:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800d3b4:	4a05      	ldr	r2, [pc, #20]	@ (800d3cc <Error_Handler+0x24>)
 800d3b6:	4b06      	ldr	r3, [pc, #24]	@ (800d3d0 <Error_Handler+0x28>)
 800d3b8:	0019      	movs	r1, r3
 800d3ba:	2001      	movs	r0, #1
 800d3bc:	f006 fce2 	bl	8013d84 <CreateLine>

    HAL_Delay(2500);
 800d3c0:	4b04      	ldr	r3, [pc, #16]	@ (800d3d4 <Error_Handler+0x2c>)
 800d3c2:	0018      	movs	r0, r3
 800d3c4:	f007 fa60 	bl	8014888 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800d3c8:	46c0      	nop			@ (mov r8, r8)
 800d3ca:	e7f3      	b.n	800d3b4 <Error_Handler+0xc>
 800d3cc:	0802c82c 	.word	0x0802c82c
 800d3d0:	0802c510 	.word	0x0802c510
 800d3d4:	000009c4 	.word	0x000009c4

0800d3d8 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800d3dc:	4b19      	ldr	r3, [pc, #100]	@ (800d444 <testInit+0x6c>)
 800d3de:	2200      	movs	r2, #0
 800d3e0:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800d3e2:	4b18      	ldr	r3, [pc, #96]	@ (800d444 <testInit+0x6c>)
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800d3e8:	4b16      	ldr	r3, [pc, #88]	@ (800d444 <testInit+0x6c>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800d3ee:	4b15      	ldr	r3, [pc, #84]	@ (800d444 <testInit+0x6c>)
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800d3f4:	4b13      	ldr	r3, [pc, #76]	@ (800d444 <testInit+0x6c>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800d3fa:	4b12      	ldr	r3, [pc, #72]	@ (800d444 <testInit+0x6c>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800d400:	4b10      	ldr	r3, [pc, #64]	@ (800d444 <testInit+0x6c>)
 800d402:	2200      	movs	r2, #0
 800d404:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800d406:	4b0f      	ldr	r3, [pc, #60]	@ (800d444 <testInit+0x6c>)
 800d408:	2200      	movs	r2, #0
 800d40a:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800d40c:	4b0d      	ldr	r3, [pc, #52]	@ (800d444 <testInit+0x6c>)
 800d40e:	2200      	movs	r2, #0
 800d410:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800d412:	4b0d      	ldr	r3, [pc, #52]	@ (800d448 <testInit+0x70>)
 800d414:	2201      	movs	r2, #1
 800d416:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800d418:	4b0b      	ldr	r3, [pc, #44]	@ (800d448 <testInit+0x70>)
 800d41a:	2201      	movs	r2, #1
 800d41c:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800d41e:	4b0a      	ldr	r3, [pc, #40]	@ (800d448 <testInit+0x70>)
 800d420:	2201      	movs	r2, #1
 800d422:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800d424:	4b08      	ldr	r3, [pc, #32]	@ (800d448 <testInit+0x70>)
 800d426:	2201      	movs	r2, #1
 800d428:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800d42a:	4b07      	ldr	r3, [pc, #28]	@ (800d448 <testInit+0x70>)
 800d42c:	2201      	movs	r2, #1
 800d42e:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800d430:	4b05      	ldr	r3, [pc, #20]	@ (800d448 <testInit+0x70>)
 800d432:	2201      	movs	r2, #1
 800d434:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800d436:	4b04      	ldr	r3, [pc, #16]	@ (800d448 <testInit+0x70>)
 800d438:	2201      	movs	r2, #1
 800d43a:	719a      	strb	r2, [r3, #6]
}
 800d43c:	46c0      	nop			@ (mov r8, r8)
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	46c0      	nop			@ (mov r8, r8)
 800d444:	20001120 	.word	0x20001120
 800d448:	20001118 	.word	0x20001118

0800d44c <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800d44c:	b580      	push	{r7, lr}
 800d44e:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800d450:	4b02      	ldr	r3, [pc, #8]	@ (800d45c <GetPMSensorPresence+0x10>)
 800d452:	795b      	ldrb	r3, [r3, #5]
}
 800d454:	0018      	movs	r0, r3
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	46c0      	nop			@ (mov r8, r8)
 800d45c:	20001120 	.word	0x20001120

0800d460 <DisablePMSensor>:

void DisablePMSensor() {
 800d460:	b580      	push	{r7, lr}
 800d462:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800d464:	4b02      	ldr	r3, [pc, #8]	@ (800d470 <DisablePMSensor+0x10>)
 800d466:	2200      	movs	r2, #0
 800d468:	715a      	strb	r2, [r3, #5]
}
 800d46a:	46c0      	nop			@ (mov r8, r8)
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	20001120 	.word	0x20001120

0800d474 <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800d474:	b580      	push	{r7, lr}
 800d476:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800d478:	4b02      	ldr	r3, [pc, #8]	@ (800d484 <IsAHT20SensorPresent+0x10>)
 800d47a:	789b      	ldrb	r3, [r3, #2]
}
 800d47c:	0018      	movs	r0, r3
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	46c0      	nop			@ (mov r8, r8)
 800d484:	20001120 	.word	0x20001120

0800d488 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800d488:	b580      	push	{r7, lr}
 800d48a:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800d48c:	4b02      	ldr	r3, [pc, #8]	@ (800d498 <IsBMP280SensorPresent+0x10>)
 800d48e:	791b      	ldrb	r3, [r3, #4]
}
 800d490:	0018      	movs	r0, r3
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	46c0      	nop			@ (mov r8, r8)
 800d498:	20001120 	.word	0x20001120

0800d49c <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800d49c:	b580      	push	{r7, lr}
 800d49e:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800d4a0:	4b02      	ldr	r3, [pc, #8]	@ (800d4ac <IsENS160SensorPresent+0x10>)
 800d4a2:	78db      	ldrb	r3, [r3, #3]
}
 800d4a4:	0018      	movs	r0, r3
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	46c0      	nop			@ (mov r8, r8)
 800d4ac:	20001120 	.word	0x20001120

0800d4b0 <IsSGPPresent>:

bool IsSGPPresent() {
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800d4b4:	4b02      	ldr	r3, [pc, #8]	@ (800d4c0 <IsSGPPresent+0x10>)
 800d4b6:	785b      	ldrb	r3, [r3, #1]
}
 800d4b8:	0018      	movs	r0, r3
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	46c0      	nop			@ (mov r8, r8)
 800d4c0:	20001120 	.word	0x20001120

0800d4c4 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	0002      	movs	r2, r0
 800d4cc:	1dfb      	adds	r3, r7, #7
 800d4ce:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800d4d0:	4b0b      	ldr	r3, [pc, #44]	@ (800d500 <SetVOCSensorDIS_ENA+0x3c>)
 800d4d2:	1dfa      	adds	r2, r7, #7
 800d4d4:	7812      	ldrb	r2, [r2, #0]
 800d4d6:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800d4d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d504 <SetVOCSensorDIS_ENA+0x40>)
 800d4da:	1dfa      	adds	r2, r7, #7
 800d4dc:	7812      	ldrb	r2, [r2, #0]
 800d4de:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800d4e0:	1dfb      	adds	r3, r7, #7
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d001      	beq.n	800d4ec <SetVOCSensorDIS_ENA+0x28>
 800d4e8:	4b07      	ldr	r3, [pc, #28]	@ (800d508 <SetVOCSensorDIS_ENA+0x44>)
 800d4ea:	e000      	b.n	800d4ee <SetVOCSensorDIS_ENA+0x2a>
 800d4ec:	4b07      	ldr	r3, [pc, #28]	@ (800d50c <SetVOCSensorDIS_ENA+0x48>)
 800d4ee:	4a08      	ldr	r2, [pc, #32]	@ (800d510 <SetVOCSensorDIS_ENA+0x4c>)
 800d4f0:	4908      	ldr	r1, [pc, #32]	@ (800d514 <SetVOCSensorDIS_ENA+0x50>)
 800d4f2:	2003      	movs	r0, #3
 800d4f4:	f006 fc46 	bl	8013d84 <CreateLine>
}
 800d4f8:	46c0      	nop			@ (mov r8, r8)
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	b002      	add	sp, #8
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	20001120 	.word	0x20001120
 800d504:	20001118 	.word	0x20001118
 800d508:	0802c858 	.word	0x0802c858
 800d50c:	0802c860 	.word	0x0802c860
 800d510:	0802c86c 	.word	0x0802c86c
 800d514:	0802c880 	.word	0x0802c880

0800d518 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800d518:	b580      	push	{r7, lr}
 800d51a:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800d51c:	4b02      	ldr	r3, [pc, #8]	@ (800d528 <IsPMSensorEnabled+0x10>)
 800d51e:	789b      	ldrb	r3, [r3, #2]
}
 800d520:	0018      	movs	r0, r3
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	46c0      	nop			@ (mov r8, r8)
 800d528:	20001118 	.word	0x20001118

0800d52c <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	0002      	movs	r2, r0
 800d534:	1dfb      	adds	r3, r7, #7
 800d536:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800d538:	4b05      	ldr	r3, [pc, #20]	@ (800d550 <SetVOCSensorStatus+0x24>)
 800d53a:	7a1b      	ldrb	r3, [r3, #8]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d003      	beq.n	800d548 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800d540:	4b04      	ldr	r3, [pc, #16]	@ (800d554 <SetVOCSensorStatus+0x28>)
 800d542:	1dfa      	adds	r2, r7, #7
 800d544:	7812      	ldrb	r2, [r2, #0]
 800d546:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800d548:	46c0      	nop			@ (mov r8, r8)
 800d54a:	46bd      	mov	sp, r7
 800d54c:	b002      	add	sp, #8
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	20001120 	.word	0x20001120
 800d554:	20001118 	.word	0x20001118

0800d558 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	0002      	movs	r2, r0
 800d560:	1dfb      	adds	r3, r7, #7
 800d562:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800d564:	4b03      	ldr	r3, [pc, #12]	@ (800d574 <SetPMSensorStatus+0x1c>)
 800d566:	1dfa      	adds	r2, r7, #7
 800d568:	7812      	ldrb	r2, [r2, #0]
 800d56a:	709a      	strb	r2, [r3, #2]
}
 800d56c:	46c0      	nop			@ (mov r8, r8)
 800d56e:	46bd      	mov	sp, r7
 800d570:	b002      	add	sp, #8
 800d572:	bd80      	pop	{r7, pc}
 800d574:	20001118 	.word	0x20001118

0800d578 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800d578:	b580      	push	{r7, lr}
 800d57a:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800d57c:	4b02      	ldr	r3, [pc, #8]	@ (800d588 <SetESPMeasurementDone+0x10>)
 800d57e:	2201      	movs	r2, #1
 800d580:	71da      	strb	r2, [r3, #7]
}
 800d582:	46c0      	nop			@ (mov r8, r8)
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	20001120 	.word	0x20001120

0800d58c <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]
 800d598:	603b      	str	r3, [r7, #0]
  testInit();
 800d59a:	f7ff ff1d 	bl	800d3d8 <testInit>
  I2CSensors_Init(sensorI2C);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	0018      	movs	r0, r3
 800d5a2:	f7fa fdf5 	bl	8008190 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800d5a6:	f006 fef1 	bl	801438c <HIDS_DeviceConnected>
 800d5aa:	0003      	movs	r3, r0
 800d5ac:	001a      	movs	r2, r3
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	4053      	eors	r3, r2
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00c      	beq.n	800d5d2 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800d5b8:	4abf      	ldr	r2, [pc, #764]	@ (800d8b8 <Device_Init+0x32c>)
 800d5ba:	4bc0      	ldr	r3, [pc, #768]	@ (800d8bc <Device_Init+0x330>)
 800d5bc:	0019      	movs	r1, r3
 800d5be:	2001      	movs	r0, #1
 800d5c0:	f006 fbe0 	bl	8013d84 <CreateLine>
     SensorProbe.HT_Present = false;
 800d5c4:	4bbe      	ldr	r3, [pc, #760]	@ (800d8c0 <Device_Init+0x334>)
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800d5ca:	4bbe      	ldr	r3, [pc, #760]	@ (800d8c4 <Device_Init+0x338>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	701a      	strb	r2, [r3, #0]
 800d5d0:	e008      	b.n	800d5e4 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800d5d2:	4bbb      	ldr	r3, [pc, #748]	@ (800d8c0 <Device_Init+0x334>)
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800d5d8:	4abb      	ldr	r2, [pc, #748]	@ (800d8c8 <Device_Init+0x33c>)
 800d5da:	4bbc      	ldr	r3, [pc, #752]	@ (800d8cc <Device_Init+0x340>)
 800d5dc:	0019      	movs	r1, r3
 800d5de:	2003      	movs	r0, #3
 800d5e0:	f006 fbd0 	bl	8013d84 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800d5e4:	f7fe f95a 	bl	800b89c <BMP280_DeviceConnected>
 800d5e8:	0003      	movs	r3, r0
 800d5ea:	001a      	movs	r2, r3
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	4053      	eors	r3, r2
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d00c      	beq.n	800d610 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800d5f6:	4ab6      	ldr	r2, [pc, #728]	@ (800d8d0 <Device_Init+0x344>)
 800d5f8:	4bb0      	ldr	r3, [pc, #704]	@ (800d8bc <Device_Init+0x330>)
 800d5fa:	0019      	movs	r1, r3
 800d5fc:	2001      	movs	r0, #1
 800d5fe:	f006 fbc1 	bl	8013d84 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800d602:	4baf      	ldr	r3, [pc, #700]	@ (800d8c0 <Device_Init+0x334>)
 800d604:	2200      	movs	r2, #0
 800d606:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800d608:	4bae      	ldr	r3, [pc, #696]	@ (800d8c4 <Device_Init+0x338>)
 800d60a:	2200      	movs	r2, #0
 800d60c:	715a      	strb	r2, [r3, #5]
 800d60e:	e008      	b.n	800d622 <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800d610:	4bab      	ldr	r3, [pc, #684]	@ (800d8c0 <Device_Init+0x334>)
 800d612:	2201      	movs	r2, #1
 800d614:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800d616:	4aaf      	ldr	r2, [pc, #700]	@ (800d8d4 <Device_Init+0x348>)
 800d618:	4bac      	ldr	r3, [pc, #688]	@ (800d8cc <Device_Init+0x340>)
 800d61a:	0019      	movs	r1, r3
 800d61c:	2003      	movs	r0, #3
 800d61e:	f006 fbb1 	bl	8013d84 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800d622:	f003 fd99 	bl	8011158 <SGP_DeviceConnected>
 800d626:	0003      	movs	r3, r0
 800d628:	001a      	movs	r2, r3
 800d62a:	2301      	movs	r3, #1
 800d62c:	4053      	eors	r3, r2
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00c      	beq.n	800d64e <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800d634:	4ba2      	ldr	r3, [pc, #648]	@ (800d8c0 <Device_Init+0x334>)
 800d636:	2200      	movs	r2, #0
 800d638:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800d63a:	4aa7      	ldr	r2, [pc, #668]	@ (800d8d8 <Device_Init+0x34c>)
 800d63c:	4b9f      	ldr	r3, [pc, #636]	@ (800d8bc <Device_Init+0x330>)
 800d63e:	0019      	movs	r1, r3
 800d640:	2001      	movs	r0, #1
 800d642:	f006 fb9f 	bl	8013d84 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800d646:	4b9f      	ldr	r3, [pc, #636]	@ (800d8c4 <Device_Init+0x338>)
 800d648:	2200      	movs	r2, #0
 800d64a:	705a      	strb	r2, [r3, #1]
 800d64c:	e00b      	b.n	800d666 <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800d64e:	4b9c      	ldr	r3, [pc, #624]	@ (800d8c0 <Device_Init+0x334>)
 800d650:	2201      	movs	r2, #1
 800d652:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800d654:	4b9a      	ldr	r3, [pc, #616]	@ (800d8c0 <Device_Init+0x334>)
 800d656:	2201      	movs	r2, #1
 800d658:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800d65a:	4aa0      	ldr	r2, [pc, #640]	@ (800d8dc <Device_Init+0x350>)
 800d65c:	4b9b      	ldr	r3, [pc, #620]	@ (800d8cc <Device_Init+0x340>)
 800d65e:	0019      	movs	r1, r3
 800d660:	2003      	movs	r0, #3
 800d662:	f006 fb8f 	bl	8013d84 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800d666:	f7f6 fbff 	bl	8003e68 <ENS_DeviceConnected>
 800d66a:	0003      	movs	r3, r0
 800d66c:	001a      	movs	r2, r3
 800d66e:	2301      	movs	r3, #1
 800d670:	4053      	eors	r3, r2
 800d672:	b2db      	uxtb	r3, r3
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00c      	beq.n	800d692 <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800d678:	4b91      	ldr	r3, [pc, #580]	@ (800d8c0 <Device_Init+0x334>)
 800d67a:	2200      	movs	r2, #0
 800d67c:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800d67e:	4a98      	ldr	r2, [pc, #608]	@ (800d8e0 <Device_Init+0x354>)
 800d680:	4b8e      	ldr	r3, [pc, #568]	@ (800d8bc <Device_Init+0x330>)
 800d682:	0019      	movs	r1, r3
 800d684:	2001      	movs	r0, #1
 800d686:	f006 fb7d 	bl	8013d84 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800d68a:	4b8e      	ldr	r3, [pc, #568]	@ (800d8c4 <Device_Init+0x338>)
 800d68c:	2200      	movs	r2, #0
 800d68e:	719a      	strb	r2, [r3, #6]
 800d690:	e008      	b.n	800d6a4 <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800d692:	4b8b      	ldr	r3, [pc, #556]	@ (800d8c0 <Device_Init+0x334>)
 800d694:	2201      	movs	r2, #1
 800d696:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800d698:	4a92      	ldr	r2, [pc, #584]	@ (800d8e4 <Device_Init+0x358>)
 800d69a:	4b8c      	ldr	r3, [pc, #560]	@ (800d8cc <Device_Init+0x340>)
 800d69c:	0019      	movs	r1, r3
 800d69e:	2003      	movs	r0, #3
 800d6a0:	f006 fb70 	bl	8013d84 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800d6a4:	f7fd fd38 	bl	800b118 <AHT20_DeviceConnected>
 800d6a8:	0003      	movs	r3, r0
 800d6aa:	001a      	movs	r2, r3
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	4053      	eors	r3, r2
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d00c      	beq.n	800d6d0 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800d6b6:	4a8c      	ldr	r2, [pc, #560]	@ (800d8e8 <Device_Init+0x35c>)
 800d6b8:	4b80      	ldr	r3, [pc, #512]	@ (800d8bc <Device_Init+0x330>)
 800d6ba:	0019      	movs	r1, r3
 800d6bc:	2001      	movs	r0, #1
 800d6be:	f006 fb61 	bl	8013d84 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800d6c2:	4b7f      	ldr	r3, [pc, #508]	@ (800d8c0 <Device_Init+0x334>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800d6c8:	4b7e      	ldr	r3, [pc, #504]	@ (800d8c4 <Device_Init+0x338>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	711a      	strb	r2, [r3, #4]
 800d6ce:	e008      	b.n	800d6e2 <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800d6d0:	4b7b      	ldr	r3, [pc, #492]	@ (800d8c0 <Device_Init+0x334>)
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800d6d6:	4a85      	ldr	r2, [pc, #532]	@ (800d8ec <Device_Init+0x360>)
 800d6d8:	4b7c      	ldr	r3, [pc, #496]	@ (800d8cc <Device_Init+0x340>)
 800d6da:	0019      	movs	r1, r3
 800d6dc:	2003      	movs	r0, #3
 800d6de:	f006 fb51 	bl	8013d84 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800d6e2:	4b77      	ldr	r3, [pc, #476]	@ (800d8c0 <Device_Init+0x334>)
 800d6e4:	785b      	ldrb	r3, [r3, #1]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d009      	beq.n	800d6fe <Device_Init+0x172>
 800d6ea:	4b75      	ldr	r3, [pc, #468]	@ (800d8c0 <Device_Init+0x334>)
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d005      	beq.n	800d6fe <Device_Init+0x172>
    SetDBLED(false, true, false);
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	f005 f874 	bl	80127e4 <SetDBLED>
 800d6fc:	e018      	b.n	800d730 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800d6fe:	2200      	movs	r2, #0
 800d700:	2100      	movs	r1, #0
 800d702:	2001      	movs	r0, #1
 800d704:	f005 f86e 	bl	80127e4 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800d708:	4b79      	ldr	r3, [pc, #484]	@ (800d8f0 <Device_Init+0x364>)
 800d70a:	2200      	movs	r2, #0
 800d70c:	2101      	movs	r1, #1
 800d70e:	0018      	movs	r0, r3
 800d710:	f008 fb23 	bl	8015d5a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800d714:	2380      	movs	r3, #128	@ 0x80
 800d716:	005b      	lsls	r3, r3, #1
 800d718:	4875      	ldr	r0, [pc, #468]	@ (800d8f0 <Device_Init+0x364>)
 800d71a:	2201      	movs	r2, #1
 800d71c:	0019      	movs	r1, r3
 800d71e:	f008 fb1c 	bl	8015d5a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800d722:	2380      	movs	r3, #128	@ 0x80
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	4872      	ldr	r0, [pc, #456]	@ (800d8f0 <Device_Init+0x364>)
 800d728:	2201      	movs	r2, #1
 800d72a:	0019      	movs	r1, r3
 800d72c:	f008 fb15 	bl	8015d5a <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800d730:	4b64      	ldr	r3, [pc, #400]	@ (800d8c4 <Device_Init+0x338>)
 800d732:	78db      	ldrb	r3, [r3, #3]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d028      	beq.n	800d78a <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800d738:	4a6e      	ldr	r2, [pc, #440]	@ (800d8f4 <Device_Init+0x368>)
 800d73a:	4b6f      	ldr	r3, [pc, #444]	@ (800d8f8 <Device_Init+0x36c>)
 800d73c:	0019      	movs	r1, r3
 800d73e:	2002      	movs	r0, #2
 800d740:	f006 fb20 	bl	8013d84 <CreateLine>
    if (!enableMicrophone(true)) {
 800d744:	2001      	movs	r0, #1
 800d746:	f004 f937 	bl	80119b8 <enableMicrophone>
 800d74a:	0003      	movs	r3, r0
 800d74c:	001a      	movs	r2, r3
 800d74e:	2301      	movs	r3, #1
 800d750:	4053      	eors	r3, r2
 800d752:	b2db      	uxtb	r3, r3
 800d754:	2b00      	cmp	r3, #0
 800d756:	d00c      	beq.n	800d772 <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800d758:	4a68      	ldr	r2, [pc, #416]	@ (800d8fc <Device_Init+0x370>)
 800d75a:	4b58      	ldr	r3, [pc, #352]	@ (800d8bc <Device_Init+0x330>)
 800d75c:	0019      	movs	r1, r3
 800d75e:	2001      	movs	r0, #1
 800d760:	f006 fb10 	bl	8013d84 <CreateLine>
      SensorProbe.MIC_Present = false;
 800d764:	4b56      	ldr	r3, [pc, #344]	@ (800d8c0 <Device_Init+0x334>)
 800d766:	2200      	movs	r2, #0
 800d768:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800d76a:	4b56      	ldr	r3, [pc, #344]	@ (800d8c4 <Device_Init+0x338>)
 800d76c:	2200      	movs	r2, #0
 800d76e:	70da      	strb	r2, [r3, #3]
 800d770:	e00b      	b.n	800d78a <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800d772:	4b53      	ldr	r3, [pc, #332]	@ (800d8c0 <Device_Init+0x334>)
 800d774:	2201      	movs	r2, #1
 800d776:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d778:	4b52      	ldr	r3, [pc, #328]	@ (800d8c4 <Device_Init+0x338>)
 800d77a:	2201      	movs	r2, #1
 800d77c:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800d77e:	4a60      	ldr	r2, [pc, #384]	@ (800d900 <Device_Init+0x374>)
 800d780:	4b52      	ldr	r3, [pc, #328]	@ (800d8cc <Device_Init+0x340>)
 800d782:	0019      	movs	r1, r3
 800d784:	2003      	movs	r0, #3
 800d786:	f006 fafd 	bl	8013d84 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800d78a:	f000 fff1 	bl	800e770 <probe_sen5x>
 800d78e:	1e03      	subs	r3, r0, #0
 800d790:	d122      	bne.n	800d7d8 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800d792:	4a5c      	ldr	r2, [pc, #368]	@ (800d904 <Device_Init+0x378>)
 800d794:	4b4d      	ldr	r3, [pc, #308]	@ (800d8cc <Device_Init+0x340>)
 800d796:	0019      	movs	r1, r3
 800d798:	2003      	movs	r0, #3
 800d79a:	f006 faf3 	bl	8013d84 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800d79e:	4b48      	ldr	r3, [pc, #288]	@ (800d8c0 <Device_Init+0x334>)
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800d7a4:	4b47      	ldr	r3, [pc, #284]	@ (800d8c4 <Device_Init+0x338>)
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d7aa:	4b57      	ldr	r3, [pc, #348]	@ (800d908 <Device_Init+0x37c>)
 800d7ac:	791b      	ldrb	r3, [r3, #4]
 800d7ae:	2b34      	cmp	r3, #52	@ 0x34
 800d7b0:	d003      	beq.n	800d7ba <Device_Init+0x22e>
 800d7b2:	4b55      	ldr	r3, [pc, #340]	@ (800d908 <Device_Init+0x37c>)
 800d7b4:	791b      	ldrb	r3, [r3, #4]
 800d7b6:	2b35      	cmp	r3, #53	@ 0x35
 800d7b8:	d11c      	bne.n	800d7f4 <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800d7ba:	4a54      	ldr	r2, [pc, #336]	@ (800d90c <Device_Init+0x380>)
 800d7bc:	4b4e      	ldr	r3, [pc, #312]	@ (800d8f8 <Device_Init+0x36c>)
 800d7be:	0019      	movs	r1, r3
 800d7c0:	2002      	movs	r0, #2
 800d7c2:	f006 fadf 	bl	8013d84 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800d7c6:	4b3f      	ldr	r3, [pc, #252]	@ (800d8c4 <Device_Init+0x338>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800d7cc:	4b3c      	ldr	r3, [pc, #240]	@ (800d8c0 <Device_Init+0x334>)
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800d7d2:	f003 fea7 	bl	8011524 <SGP_SoftReset>
 800d7d6:	e00d      	b.n	800d7f4 <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800d7d8:	f000 ff94 	bl	800e704 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800d7dc:	4a4c      	ldr	r2, [pc, #304]	@ (800d910 <Device_Init+0x384>)
 800d7de:	4b3b      	ldr	r3, [pc, #236]	@ (800d8cc <Device_Init+0x340>)
 800d7e0:	0019      	movs	r1, r3
 800d7e2:	2003      	movs	r0, #3
 800d7e4:	f006 face 	bl	8013d84 <CreateLine>
    SensorProbe.PM_Present = false;
 800d7e8:	4b35      	ldr	r3, [pc, #212]	@ (800d8c0 <Device_Init+0x334>)
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800d7ee:	4b35      	ldr	r3, [pc, #212]	@ (800d8c4 <Device_Init+0x338>)
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800d7f4:	4b32      	ldr	r3, [pc, #200]	@ (800d8c0 <Device_Init+0x334>)
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d001      	beq.n	800d800 <Device_Init+0x274>
 800d7fc:	4b45      	ldr	r3, [pc, #276]	@ (800d914 <Device_Init+0x388>)
 800d7fe:	e000      	b.n	800d802 <Device_Init+0x276>
 800d800:	4b45      	ldr	r3, [pc, #276]	@ (800d918 <Device_Init+0x38c>)
 800d802:	4a46      	ldr	r2, [pc, #280]	@ (800d91c <Device_Init+0x390>)
 800d804:	493c      	ldr	r1, [pc, #240]	@ (800d8f8 <Device_Init+0x36c>)
 800d806:	2002      	movs	r0, #2
 800d808:	f006 fabc 	bl	8013d84 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800d80c:	4b2c      	ldr	r3, [pc, #176]	@ (800d8c0 <Device_Init+0x334>)
 800d80e:	785b      	ldrb	r3, [r3, #1]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d001      	beq.n	800d818 <Device_Init+0x28c>
 800d814:	4b3f      	ldr	r3, [pc, #252]	@ (800d914 <Device_Init+0x388>)
 800d816:	e000      	b.n	800d81a <Device_Init+0x28e>
 800d818:	4b3f      	ldr	r3, [pc, #252]	@ (800d918 <Device_Init+0x38c>)
 800d81a:	4a41      	ldr	r2, [pc, #260]	@ (800d920 <Device_Init+0x394>)
 800d81c:	4936      	ldr	r1, [pc, #216]	@ (800d8f8 <Device_Init+0x36c>)
 800d81e:	2002      	movs	r0, #2
 800d820:	f006 fab0 	bl	8013d84 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800d824:	4b26      	ldr	r3, [pc, #152]	@ (800d8c0 <Device_Init+0x334>)
 800d826:	789b      	ldrb	r3, [r3, #2]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d001      	beq.n	800d830 <Device_Init+0x2a4>
 800d82c:	4b39      	ldr	r3, [pc, #228]	@ (800d914 <Device_Init+0x388>)
 800d82e:	e000      	b.n	800d832 <Device_Init+0x2a6>
 800d830:	4b39      	ldr	r3, [pc, #228]	@ (800d918 <Device_Init+0x38c>)
 800d832:	4a3c      	ldr	r2, [pc, #240]	@ (800d924 <Device_Init+0x398>)
 800d834:	4930      	ldr	r1, [pc, #192]	@ (800d8f8 <Device_Init+0x36c>)
 800d836:	2002      	movs	r0, #2
 800d838:	f006 faa4 	bl	8013d84 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800d83c:	4b20      	ldr	r3, [pc, #128]	@ (800d8c0 <Device_Init+0x334>)
 800d83e:	791b      	ldrb	r3, [r3, #4]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d001      	beq.n	800d848 <Device_Init+0x2bc>
 800d844:	4b33      	ldr	r3, [pc, #204]	@ (800d914 <Device_Init+0x388>)
 800d846:	e000      	b.n	800d84a <Device_Init+0x2be>
 800d848:	4b33      	ldr	r3, [pc, #204]	@ (800d918 <Device_Init+0x38c>)
 800d84a:	4a37      	ldr	r2, [pc, #220]	@ (800d928 <Device_Init+0x39c>)
 800d84c:	492a      	ldr	r1, [pc, #168]	@ (800d8f8 <Device_Init+0x36c>)
 800d84e:	2002      	movs	r0, #2
 800d850:	f006 fa98 	bl	8013d84 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800d854:	4b1a      	ldr	r3, [pc, #104]	@ (800d8c0 <Device_Init+0x334>)
 800d856:	78db      	ldrb	r3, [r3, #3]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d001      	beq.n	800d860 <Device_Init+0x2d4>
 800d85c:	4b2d      	ldr	r3, [pc, #180]	@ (800d914 <Device_Init+0x388>)
 800d85e:	e000      	b.n	800d862 <Device_Init+0x2d6>
 800d860:	4b2d      	ldr	r3, [pc, #180]	@ (800d918 <Device_Init+0x38c>)
 800d862:	4a32      	ldr	r2, [pc, #200]	@ (800d92c <Device_Init+0x3a0>)
 800d864:	4924      	ldr	r1, [pc, #144]	@ (800d8f8 <Device_Init+0x36c>)
 800d866:	2002      	movs	r0, #2
 800d868:	f006 fa8c 	bl	8013d84 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800d86c:	4b14      	ldr	r3, [pc, #80]	@ (800d8c0 <Device_Init+0x334>)
 800d86e:	795b      	ldrb	r3, [r3, #5]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d001      	beq.n	800d878 <Device_Init+0x2ec>
 800d874:	4b27      	ldr	r3, [pc, #156]	@ (800d914 <Device_Init+0x388>)
 800d876:	e000      	b.n	800d87a <Device_Init+0x2ee>
 800d878:	4b27      	ldr	r3, [pc, #156]	@ (800d918 <Device_Init+0x38c>)
 800d87a:	4a2d      	ldr	r2, [pc, #180]	@ (800d930 <Device_Init+0x3a4>)
 800d87c:	491e      	ldr	r1, [pc, #120]	@ (800d8f8 <Device_Init+0x36c>)
 800d87e:	2002      	movs	r0, #2
 800d880:	f006 fa80 	bl	8013d84 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800d884:	4b0e      	ldr	r3, [pc, #56]	@ (800d8c0 <Device_Init+0x334>)
 800d886:	799b      	ldrb	r3, [r3, #6]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <Device_Init+0x304>
 800d88c:	4b21      	ldr	r3, [pc, #132]	@ (800d914 <Device_Init+0x388>)
 800d88e:	e000      	b.n	800d892 <Device_Init+0x306>
 800d890:	4b21      	ldr	r3, [pc, #132]	@ (800d918 <Device_Init+0x38c>)
 800d892:	4a28      	ldr	r2, [pc, #160]	@ (800d934 <Device_Init+0x3a8>)
 800d894:	4918      	ldr	r1, [pc, #96]	@ (800d8f8 <Device_Init+0x36c>)
 800d896:	2002      	movs	r0, #2
 800d898:	f006 fa74 	bl	8013d84 <CreateLine>
  ESP_Init(espUart);
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	0018      	movs	r0, r3
 800d8a0:	f7f7 facc 	bl	8004e3c <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800d8a4:	4a24      	ldr	r2, [pc, #144]	@ (800d938 <Device_Init+0x3ac>)
 800d8a6:	4b09      	ldr	r3, [pc, #36]	@ (800d8cc <Device_Init+0x340>)
 800d8a8:	0019      	movs	r1, r3
 800d8aa:	2003      	movs	r0, #3
 800d8ac:	f006 fa6a 	bl	8013d84 <CreateLine>
}
 800d8b0:	46c0      	nop			@ (mov r8, r8)
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	b004      	add	sp, #16
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	0802c884 	.word	0x0802c884
 800d8bc:	0802c8b4 	.word	0x0802c8b4
 800d8c0:	20001120 	.word	0x20001120
 800d8c4:	20001118 	.word	0x20001118
 800d8c8:	0802c8b8 	.word	0x0802c8b8
 800d8cc:	0802c880 	.word	0x0802c880
 800d8d0:	0802c8e4 	.word	0x0802c8e4
 800d8d4:	0802c918 	.word	0x0802c918
 800d8d8:	0802c948 	.word	0x0802c948
 800d8dc:	0802c964 	.word	0x0802c964
 800d8e0:	0802c97c 	.word	0x0802c97c
 800d8e4:	0802c998 	.word	0x0802c998
 800d8e8:	0802c9b0 	.word	0x0802c9b0
 800d8ec:	0802c9e4 	.word	0x0802c9e4
 800d8f0:	50000400 	.word	0x50000400
 800d8f4:	0802ca18 	.word	0x0802ca18
 800d8f8:	0802ca3c 	.word	0x0802ca3c
 800d8fc:	0802ca40 	.word	0x0802ca40
 800d900:	0802ca6c 	.word	0x0802ca6c
 800d904:	0802ca98 	.word	0x0802ca98
 800d908:	200011c0 	.word	0x200011c0
 800d90c:	0802cab0 	.word	0x0802cab0
 800d910:	0802cb00 	.word	0x0802cb00
 800d914:	0802cb24 	.word	0x0802cb24
 800d918:	0802cb28 	.word	0x0802cb28
 800d91c:	0802cb2c 	.word	0x0802cb2c
 800d920:	0802cb48 	.word	0x0802cb48
 800d924:	0802cb64 	.word	0x0802cb64
 800d928:	0802cb84 	.word	0x0802cb84
 800d92c:	0802cba4 	.word	0x0802cba4
 800d930:	0802cbc4 	.word	0x0802cbc4
 800d934:	0802cbe0 	.word	0x0802cbe0
 800d938:	0802cbfc 	.word	0x0802cbfc

0800d93c <Device_Test>:

void Device_Test(){
 800d93c:	b580      	push	{r7, lr}
 800d93e:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800d940:	4b34      	ldr	r3, [pc, #208]	@ (800da14 <Device_Test+0xd8>)
 800d942:	799b      	ldrb	r3, [r3, #6]
 800d944:	2201      	movs	r2, #1
 800d946:	4053      	eors	r3, r2
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d027      	beq.n	800d99e <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800d94e:	f000 fc41 	bl	800e1d4 <MIC_TestMeasurementDone>
 800d952:	1e03      	subs	r3, r0, #0
 800d954:	d011      	beq.n	800d97a <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800d956:	4b2f      	ldr	r3, [pc, #188]	@ (800da14 <Device_Test+0xd8>)
 800d958:	2201      	movs	r2, #1
 800d95a:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d95c:	4b2e      	ldr	r3, [pc, #184]	@ (800da18 <Device_Test+0xdc>)
 800d95e:	2201      	movs	r2, #1
 800d960:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800d962:	f004 fec9 	bl	80126f8 <Calculate_LED_ON>
 800d966:	0003      	movs	r3, r0
 800d968:	0019      	movs	r1, r3
 800d96a:	23fa      	movs	r3, #250	@ 0xfa
 800d96c:	011a      	lsls	r2, r3, #4
 800d96e:	23fa      	movs	r3, #250	@ 0xfa
 800d970:	011b      	lsls	r3, r3, #4
 800d972:	0018      	movs	r0, r3
 800d974:	f004 ff08 	bl	8012788 <SetStatusLED>
 800d978:	e011      	b.n	800d99e <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800d97a:	f003 fff9 	bl	8011970 <micSettlingComplete>
 800d97e:	1e03      	subs	r3, r0, #0
 800d980:	d00d      	beq.n	800d99e <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800d982:	4b25      	ldr	r3, [pc, #148]	@ (800da18 <Device_Test+0xdc>)
 800d984:	2201      	movs	r2, #1
 800d986:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800d988:	f004 feb6 	bl	80126f8 <Calculate_LED_ON>
 800d98c:	0003      	movs	r3, r0
 800d98e:	0018      	movs	r0, r3
 800d990:	23fa      	movs	r3, #250	@ 0xfa
 800d992:	011a      	lsls	r2, r3, #4
 800d994:	23fa      	movs	r3, #250	@ 0xfa
 800d996:	011b      	lsls	r3, r3, #4
 800d998:	0019      	movs	r1, r3
 800d99a:	f004 fef5 	bl	8012788 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800d99e:	4b1d      	ldr	r3, [pc, #116]	@ (800da14 <Device_Test+0xd8>)
 800d9a0:	79db      	ldrb	r3, [r3, #7]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	4053      	eors	r3, r2
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d001      	beq.n	800d9b0 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800d9ac:	f7f9 fd5c 	bl	8007468 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800d9b0:	4b18      	ldr	r3, [pc, #96]	@ (800da14 <Device_Test+0xd8>)
 800d9b2:	79db      	ldrb	r3, [r3, #7]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d003      	beq.n	800d9c0 <Device_Test+0x84>
 800d9b8:	4b16      	ldr	r3, [pc, #88]	@ (800da14 <Device_Test+0xd8>)
 800d9ba:	799b      	ldrb	r3, [r3, #6]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d106      	bne.n	800d9ce <Device_Test+0x92>
 800d9c0:	4b16      	ldr	r3, [pc, #88]	@ (800da1c <Device_Test+0xe0>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	0018      	movs	r0, r3
 800d9c6:	f006 f987 	bl	8013cd8 <TimestampIsReached>
 800d9ca:	1e03      	subs	r3, r0, #0
 800d9cc:	d01f      	beq.n	800da0e <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800d9ce:	4b11      	ldr	r3, [pc, #68]	@ (800da14 <Device_Test+0xd8>)
 800d9d0:	79db      	ldrb	r3, [r3, #7]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d001      	beq.n	800d9da <Device_Test+0x9e>
 800d9d6:	4b12      	ldr	r3, [pc, #72]	@ (800da20 <Device_Test+0xe4>)
 800d9d8:	e000      	b.n	800d9dc <Device_Test+0xa0>
 800d9da:	4b12      	ldr	r3, [pc, #72]	@ (800da24 <Device_Test+0xe8>)
 800d9dc:	4a12      	ldr	r2, [pc, #72]	@ (800da28 <Device_Test+0xec>)
 800d9de:	4913      	ldr	r1, [pc, #76]	@ (800da2c <Device_Test+0xf0>)
 800d9e0:	2002      	movs	r0, #2
 800d9e2:	f006 f9cf 	bl	8013d84 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800d9e6:	4b0b      	ldr	r3, [pc, #44]	@ (800da14 <Device_Test+0xd8>)
 800d9e8:	799b      	ldrb	r3, [r3, #6]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <Device_Test+0xb6>
 800d9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800da20 <Device_Test+0xe4>)
 800d9f0:	e000      	b.n	800d9f4 <Device_Test+0xb8>
 800d9f2:	4b0c      	ldr	r3, [pc, #48]	@ (800da24 <Device_Test+0xe8>)
 800d9f4:	4a0e      	ldr	r2, [pc, #56]	@ (800da30 <Device_Test+0xf4>)
 800d9f6:	490d      	ldr	r1, [pc, #52]	@ (800da2c <Device_Test+0xf0>)
 800d9f8:	2002      	movs	r0, #2
 800d9fa:	f006 f9c3 	bl	8013d84 <CreateLine>
    Info("Test completed");
 800d9fe:	4a0d      	ldr	r2, [pc, #52]	@ (800da34 <Device_Test+0xf8>)
 800da00:	4b0a      	ldr	r3, [pc, #40]	@ (800da2c <Device_Test+0xf0>)
 800da02:	0019      	movs	r1, r3
 800da04:	2002      	movs	r0, #2
 800da06:	f006 f9bd 	bl	8013d84 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800da0a:	f7ff f857 	bl	800cabc <SetTestDone>
  }
}
 800da0e:	46c0      	nop			@ (mov r8, r8)
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	20001120 	.word	0x20001120
 800da18:	20001118 	.word	0x20001118
 800da1c:	20001114 	.word	0x20001114
 800da20:	0802cc20 	.word	0x0802cc20
 800da24:	0802cc28 	.word	0x0802cc28
 800da28:	0802cc30 	.word	0x0802cc30
 800da2c:	0802ca3c 	.word	0x0802ca3c
 800da30:	0802cc44 	.word	0x0802cc44
 800da34:	0802cc58 	.word	0x0802cc58

0800da38 <AllDevicesReady>:

bool AllDevicesReady() {
 800da38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da3a:	46de      	mov	lr, fp
 800da3c:	4657      	mov	r7, sl
 800da3e:	464e      	mov	r6, r9
 800da40:	4645      	mov	r5, r8
 800da42:	b5e0      	push	{r5, r6, r7, lr}
 800da44:	b08b      	sub	sp, #44	@ 0x2c
 800da46:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  static bool allinwait = false;
  static uint8_t iminute = 0;
  if (TimestampIsReached(deviceTimeOut)) {
 800da48:	4b8a      	ldr	r3, [pc, #552]	@ (800dc74 <AllDevicesReady+0x23c>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	0018      	movs	r0, r3
 800da4e:	f006 f943 	bl	8013cd8 <TimestampIsReached>
 800da52:	1e03      	subs	r3, r0, #0
 800da54:	d100      	bne.n	800da58 <AllDevicesReady+0x20>
 800da56:	e103      	b.n	800dc60 <AllDevicesReady+0x228>
    if (!sensorsdisablereq) {
 800da58:	4b87      	ldr	r3, [pc, #540]	@ (800dc78 <AllDevicesReady+0x240>)
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	2201      	movs	r2, #1
 800da5e:	4053      	eors	r3, r2
 800da60:	b2db      	uxtb	r3, r3
 800da62:	2b00      	cmp	r3, #0
 800da64:	d008      	beq.n	800da78 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800da66:	4a85      	ldr	r2, [pc, #532]	@ (800dc7c <AllDevicesReady+0x244>)
 800da68:	4b85      	ldr	r3, [pc, #532]	@ (800dc80 <AllDevicesReady+0x248>)
 800da6a:	0019      	movs	r1, r3
 800da6c:	2003      	movs	r0, #3
 800da6e:	f006 f989 	bl	8013d84 <CreateLine>
      sensorsdisablereq = true;
 800da72:	4b81      	ldr	r3, [pc, #516]	@ (800dc78 <AllDevicesReady+0x240>)
 800da74:	2201      	movs	r2, #1
 800da76:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800da78:	4b82      	ldr	r3, [pc, #520]	@ (800dc84 <AllDevicesReady+0x24c>)
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	2b06      	cmp	r3, #6
 800da7e:	d102      	bne.n	800da86 <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800da80:	4b81      	ldr	r3, [pc, #516]	@ (800dc88 <AllDevicesReady+0x250>)
 800da82:	2200      	movs	r2, #0
 800da84:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800da86:	4b81      	ldr	r3, [pc, #516]	@ (800dc8c <AllDevicesReady+0x254>)
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	2b05      	cmp	r3, #5
 800da8c:	d006      	beq.n	800da9c <AllDevicesReady+0x64>
 800da8e:	4b80      	ldr	r3, [pc, #512]	@ (800dc90 <AllDevicesReady+0x258>)
 800da90:	789b      	ldrb	r3, [r3, #2]
 800da92:	2201      	movs	r2, #1
 800da94:	4053      	eors	r3, r2
 800da96:	b2db      	uxtb	r3, r3
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d002      	beq.n	800daa2 <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800da9c:	4b7a      	ldr	r3, [pc, #488]	@ (800dc88 <AllDevicesReady+0x250>)
 800da9e:	2200      	movs	r2, #0
 800daa0:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800daa2:	4b7c      	ldr	r3, [pc, #496]	@ (800dc94 <AllDevicesReady+0x25c>)
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	d006      	beq.n	800dab8 <AllDevicesReady+0x80>
 800daaa:	4b79      	ldr	r3, [pc, #484]	@ (800dc90 <AllDevicesReady+0x258>)
 800daac:	791b      	ldrb	r3, [r3, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	4053      	eors	r3, r2
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d002      	beq.n	800dabe <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800dab8:	4b73      	ldr	r3, [pc, #460]	@ (800dc88 <AllDevicesReady+0x250>)
 800daba:	2200      	movs	r2, #0
 800dabc:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800dabe:	4b76      	ldr	r3, [pc, #472]	@ (800dc98 <AllDevicesReady+0x260>)
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	2b08      	cmp	r3, #8
 800dac4:	d006      	beq.n	800dad4 <AllDevicesReady+0x9c>
 800dac6:	4b72      	ldr	r3, [pc, #456]	@ (800dc90 <AllDevicesReady+0x258>)
 800dac8:	78db      	ldrb	r3, [r3, #3]
 800daca:	2201      	movs	r2, #1
 800dacc:	4053      	eors	r3, r2
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d002      	beq.n	800dada <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800dad4:	4b6c      	ldr	r3, [pc, #432]	@ (800dc88 <AllDevicesReady+0x250>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800dada:	4b70      	ldr	r3, [pc, #448]	@ (800dc9c <AllDevicesReady+0x264>)
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	2b07      	cmp	r3, #7
 800dae0:	d006      	beq.n	800daf0 <AllDevicesReady+0xb8>
 800dae2:	4b6b      	ldr	r3, [pc, #428]	@ (800dc90 <AllDevicesReady+0x258>)
 800dae4:	7a1b      	ldrb	r3, [r3, #8]
 800dae6:	2201      	movs	r2, #1
 800dae8:	4053      	eors	r3, r2
 800daea:	b2db      	uxtb	r3, r3
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800daf0:	4b65      	ldr	r3, [pc, #404]	@ (800dc88 <AllDevicesReady+0x250>)
 800daf2:	2200      	movs	r2, #0
 800daf4:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X) || (PMsamplesState == S5X_DISABLED)) {
 800daf6:	4b6a      	ldr	r3, [pc, #424]	@ (800dca0 <AllDevicesReady+0x268>)
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d007      	beq.n	800db0e <AllDevicesReady+0xd6>
 800dafe:	4b68      	ldr	r3, [pc, #416]	@ (800dca0 <AllDevicesReady+0x268>)
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	2b03      	cmp	r3, #3
 800db04:	d003      	beq.n	800db0e <AllDevicesReady+0xd6>
 800db06:	4b66      	ldr	r3, [pc, #408]	@ (800dca0 <AllDevicesReady+0x268>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d102      	bne.n	800db14 <AllDevicesReady+0xdc>
      Sensor.PM_measurementEnabled = false;
 800db0e:	4b5e      	ldr	r3, [pc, #376]	@ (800dc88 <AllDevicesReady+0x250>)
 800db10:	2200      	movs	r2, #0
 800db12:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800db14:	4b63      	ldr	r3, [pc, #396]	@ (800dca4 <AllDevicesReady+0x26c>)
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	2b03      	cmp	r3, #3
 800db1a:	d102      	bne.n	800db22 <AllDevicesReady+0xea>
      Sensor.MIC_measurementEnabled = false;
 800db1c:	4b5a      	ldr	r3, [pc, #360]	@ (800dc88 <AllDevicesReady+0x250>)
 800db1e:	2200      	movs	r2, #0
 800db20:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800db22:	4b61      	ldr	r3, [pc, #388]	@ (800dca8 <AllDevicesReady+0x270>)
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	2b09      	cmp	r3, #9
 800db28:	d004      	beq.n	800db34 <AllDevicesReady+0xfc>
 800db2a:	4b5f      	ldr	r3, [pc, #380]	@ (800dca8 <AllDevicesReady+0x270>)
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d000      	beq.n	800db34 <AllDevicesReady+0xfc>
 800db32:	e095      	b.n	800dc60 <AllDevicesReady+0x228>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800db34:	4b54      	ldr	r3, [pc, #336]	@ (800dc88 <AllDevicesReady+0x250>)
 800db36:	781a      	ldrb	r2, [r3, #0]
 800db38:	4b53      	ldr	r3, [pc, #332]	@ (800dc88 <AllDevicesReady+0x250>)
 800db3a:	785b      	ldrb	r3, [r3, #1]
 800db3c:	4313      	orrs	r3, r2
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	4b51      	ldr	r3, [pc, #324]	@ (800dc88 <AllDevicesReady+0x250>)
 800db42:	791b      	ldrb	r3, [r3, #4]
 800db44:	4313      	orrs	r3, r2
 800db46:	b2da      	uxtb	r2, r3
 800db48:	4b4f      	ldr	r3, [pc, #316]	@ (800dc88 <AllDevicesReady+0x250>)
 800db4a:	795b      	ldrb	r3, [r3, #5]
 800db4c:	4313      	orrs	r3, r2
 800db4e:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800db50:	4b4d      	ldr	r3, [pc, #308]	@ (800dc88 <AllDevicesReady+0x250>)
 800db52:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800db54:	4313      	orrs	r3, r2
 800db56:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800db58:	4b4b      	ldr	r3, [pc, #300]	@ (800dc88 <AllDevicesReady+0x250>)
 800db5a:	789b      	ldrb	r3, [r3, #2]
 800db5c:	4313      	orrs	r3, r2
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	4b49      	ldr	r3, [pc, #292]	@ (800dc88 <AllDevicesReady+0x250>)
 800db62:	78db      	ldrb	r3, [r3, #3]
 800db64:	4313      	orrs	r3, r2
 800db66:	b2db      	uxtb	r3, r3
 800db68:	1e5a      	subs	r2, r3, #1
 800db6a:	4193      	sbcs	r3, r2
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	2201      	movs	r2, #1
 800db70:	4053      	eors	r3, r2
 800db72:	b2db      	uxtb	r3, r3
 800db74:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800db76:	1dfb      	adds	r3, r7, #7
 800db78:	701a      	strb	r2, [r3, #0]
 800db7a:	781a      	ldrb	r2, [r3, #0]
 800db7c:	2101      	movs	r1, #1
 800db7e:	400a      	ands	r2, r1
 800db80:	701a      	strb	r2, [r3, #0]
      if (!status && ((prevstatus != status) || (iminute != lastminute))) {
 800db82:	1dfb      	adds	r3, r7, #7
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	2201      	movs	r2, #1
 800db88:	4053      	eors	r3, r2
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d03e      	beq.n	800dc0e <AllDevicesReady+0x1d6>
 800db90:	4b46      	ldr	r3, [pc, #280]	@ (800dcac <AllDevicesReady+0x274>)
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	1dfa      	adds	r2, r7, #7
 800db96:	7812      	ldrb	r2, [r2, #0]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d105      	bne.n	800dba8 <AllDevicesReady+0x170>
 800db9c:	4b44      	ldr	r3, [pc, #272]	@ (800dcb0 <AllDevicesReady+0x278>)
 800db9e:	781a      	ldrb	r2, [r3, #0]
 800dba0:	4b44      	ldr	r3, [pc, #272]	@ (800dcb4 <AllDevicesReady+0x27c>)
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d032      	beq.n	800dc0e <AllDevicesReady+0x1d6>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800dba8:	4b37      	ldr	r3, [pc, #220]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	469b      	mov	fp, r3
 800dbae:	4b36      	ldr	r3, [pc, #216]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbb0:	791b      	ldrb	r3, [r3, #4]
 800dbb2:	001c      	movs	r4, r3
 800dbb4:	4b34      	ldr	r3, [pc, #208]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbb6:	795b      	ldrb	r3, [r3, #5]
 800dbb8:	001d      	movs	r5, r3
 800dbba:	4b33      	ldr	r3, [pc, #204]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbbc:	799b      	ldrb	r3, [r3, #6]
 800dbbe:	001e      	movs	r6, r3
 800dbc0:	4b31      	ldr	r3, [pc, #196]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbc2:	785b      	ldrb	r3, [r3, #1]
 800dbc4:	4698      	mov	r8, r3
 800dbc6:	4b30      	ldr	r3, [pc, #192]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbc8:	789b      	ldrb	r3, [r3, #2]
 800dbca:	4699      	mov	r9, r3
 800dbcc:	4b2e      	ldr	r3, [pc, #184]	@ (800dc88 <AllDevicesReady+0x250>)
 800dbce:	78db      	ldrb	r3, [r3, #3]
 800dbd0:	469a      	mov	sl, r3
 800dbd2:	f000 f915 	bl	800de00 <getSensorLock>
 800dbd6:	0003      	movs	r3, r0
 800dbd8:	4a37      	ldr	r2, [pc, #220]	@ (800dcb8 <AllDevicesReady+0x280>)
 800dbda:	4929      	ldr	r1, [pc, #164]	@ (800dc80 <AllDevicesReady+0x248>)
 800dbdc:	9306      	str	r3, [sp, #24]
 800dbde:	4653      	mov	r3, sl
 800dbe0:	9305      	str	r3, [sp, #20]
 800dbe2:	464b      	mov	r3, r9
 800dbe4:	9304      	str	r3, [sp, #16]
 800dbe6:	4643      	mov	r3, r8
 800dbe8:	9303      	str	r3, [sp, #12]
 800dbea:	9602      	str	r6, [sp, #8]
 800dbec:	9501      	str	r5, [sp, #4]
 800dbee:	9400      	str	r4, [sp, #0]
 800dbf0:	465b      	mov	r3, fp
 800dbf2:	2003      	movs	r0, #3
 800dbf4:	f006 f8c6 	bl	8013d84 <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800dbf8:	4b2c      	ldr	r3, [pc, #176]	@ (800dcac <AllDevicesReady+0x274>)
 800dbfa:	1dfa      	adds	r2, r7, #7
 800dbfc:	7812      	ldrb	r2, [r2, #0]
 800dbfe:	701a      	strb	r2, [r3, #0]
        allinwait = false;
 800dc00:	4b2e      	ldr	r3, [pc, #184]	@ (800dcbc <AllDevicesReady+0x284>)
 800dc02:	2200      	movs	r2, #0
 800dc04:	701a      	strb	r2, [r3, #0]
        iminute = lastminute;
 800dc06:	4b2b      	ldr	r3, [pc, #172]	@ (800dcb4 <AllDevicesReady+0x27c>)
 800dc08:	781a      	ldrb	r2, [r3, #0]
 800dc0a:	4b29      	ldr	r3, [pc, #164]	@ (800dcb0 <AllDevicesReady+0x278>)
 800dc0c:	701a      	strb	r2, [r3, #0]
      }
      if (status && !allinwait) {
 800dc0e:	1dfb      	adds	r3, r7, #7
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d021      	beq.n	800dc5a <AllDevicesReady+0x222>
 800dc16:	4b29      	ldr	r3, [pc, #164]	@ (800dcbc <AllDevicesReady+0x284>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	4053      	eors	r3, r2
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d01a      	beq.n	800dc5a <AllDevicesReady+0x222>
        Debug("All sensors in wait");
 800dc24:	4a26      	ldr	r2, [pc, #152]	@ (800dcc0 <AllDevicesReady+0x288>)
 800dc26:	4b16      	ldr	r3, [pc, #88]	@ (800dc80 <AllDevicesReady+0x248>)
 800dc28:	0019      	movs	r1, r3
 800dc2a:	2003      	movs	r0, #3
 800dc2c:	f006 f8aa 	bl	8013d84 <CreateLine>
        prevstatus = status;
 800dc30:	4b1e      	ldr	r3, [pc, #120]	@ (800dcac <AllDevicesReady+0x274>)
 800dc32:	1dfa      	adds	r2, r7, #7
 800dc34:	7812      	ldrb	r2, [r2, #0]
 800dc36:	701a      	strb	r2, [r3, #0]
        allinwait = true;
 800dc38:	4b20      	ldr	r3, [pc, #128]	@ (800dcbc <AllDevicesReady+0x284>)
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	701a      	strb	r2, [r3, #0]
        if (sendpwrmaildate == getDate()) {
 800dc3e:	f7fc f8a1 	bl	8009d84 <getDate>
 800dc42:	0003      	movs	r3, r0
 800dc44:	001a      	movs	r2, r3
 800dc46:	4b1f      	ldr	r3, [pc, #124]	@ (800dcc4 <AllDevicesReady+0x28c>)
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d105      	bne.n	800dc5a <AllDevicesReady+0x222>
          Info("Battery empty mail already send today");
 800dc4e:	4a1e      	ldr	r2, [pc, #120]	@ (800dcc8 <AllDevicesReady+0x290>)
 800dc50:	4b1e      	ldr	r3, [pc, #120]	@ (800dccc <AllDevicesReady+0x294>)
 800dc52:	0019      	movs	r1, r3
 800dc54:	2002      	movs	r0, #2
 800dc56:	f006 f895 	bl	8013d84 <CreateLine>
        }

      }
      return status;
 800dc5a:	1dfb      	adds	r3, r7, #7
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	e000      	b.n	800dc62 <AllDevicesReady+0x22a>
    }
  }
  return false;
 800dc60:	2300      	movs	r3, #0
}
 800dc62:	0018      	movs	r0, r3
 800dc64:	46bd      	mov	sp, r7
 800dc66:	b003      	add	sp, #12
 800dc68:	bcf0      	pop	{r4, r5, r6, r7}
 800dc6a:	46bb      	mov	fp, r7
 800dc6c:	46b2      	mov	sl, r6
 800dc6e:	46a9      	mov	r9, r5
 800dc70:	46a0      	mov	r8, r4
 800dc72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc74:	20001114 	.word	0x20001114
 800dc78:	2000112f 	.word	0x2000112f
 800dc7c:	0802cc68 	.word	0x0802cc68
 800dc80:	0802c880 	.word	0x0802c880
 800dc84:	2000112b 	.word	0x2000112b
 800dc88:	20001118 	.word	0x20001118
 800dc8c:	2000112c 	.word	0x2000112c
 800dc90:	20001120 	.word	0x20001120
 800dc94:	2000112d 	.word	0x2000112d
 800dc98:	2000112e 	.word	0x2000112e
 800dc9c:	2000112a 	.word	0x2000112a
 800dca0:	200000aa 	.word	0x200000aa
 800dca4:	200010fb 	.word	0x200010fb
 800dca8:	200010fc 	.word	0x200010fc
 800dcac:	200000a8 	.word	0x200000a8
 800dcb0:	20001130 	.word	0x20001130
 800dcb4:	20000e41 	.word	0x20000e41
 800dcb8:	0802cc88 	.word	0x0802cc88
 800dcbc:	20001131 	.word	0x20001131
 800dcc0:	0802ccec 	.word	0x0802ccec
 800dcc4:	20001110 	.word	0x20001110
 800dcc8:	0802cd00 	.word	0x0802cd00
 800dccc:	0802ca3c 	.word	0x0802ca3c

0800dcd0 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800dcd4:	4b25      	ldr	r3, [pc, #148]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d002      	beq.n	800dce2 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800dcdc:	4b24      	ldr	r3, [pc, #144]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dcde:	2201      	movs	r2, #1
 800dce0:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState != AHT_STATE_OFF)) {
 800dce2:	4b22      	ldr	r3, [pc, #136]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dce4:	789b      	ldrb	r3, [r3, #2]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d006      	beq.n	800dcf8 <EnabledConnectedDevices+0x28>
 800dcea:	4b22      	ldr	r3, [pc, #136]	@ (800dd74 <EnabledConnectedDevices+0xa4>)
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d002      	beq.n	800dcf8 <EnabledConnectedDevices+0x28>
    Sensor.AHT_measurementEnabled = true;
 800dcf2:	4b1f      	ldr	r3, [pc, #124]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	711a      	strb	r2, [r3, #4]
  }
//  if ((SensorProbe.AHT20_Present) && (AHTState == AHT_STATE_OFF)) {
//    Info("AHT2x sensor is disabled");
//  }
  if (SensorProbe.BMP280_Present) {
 800dcf8:	4b1c      	ldr	r3, [pc, #112]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dcfa:	791b      	ldrb	r3, [r3, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d002      	beq.n	800dd06 <EnabledConnectedDevices+0x36>
    Sensor.BMP_measurementEnabled = true;
 800dd00:	4b1b      	ldr	r3, [pc, #108]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dd02:	2201      	movs	r2, #1
 800dd04:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800dd06:	4b19      	ldr	r3, [pc, #100]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dd08:	78db      	ldrb	r3, [r3, #3]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d002      	beq.n	800dd14 <EnabledConnectedDevices+0x44>
    Sensor.ENS_measurementEnabled = true;
 800dd0e:	4b18      	ldr	r3, [pc, #96]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dd10:	2201      	movs	r2, #1
 800dd12:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800dd14:	4b15      	ldr	r3, [pc, #84]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dd16:	785b      	ldrb	r3, [r3, #1]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d006      	beq.n	800dd2a <EnabledConnectedDevices+0x5a>
 800dd1c:	4b13      	ldr	r3, [pc, #76]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dd1e:	7a1b      	ldrb	r3, [r3, #8]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d002      	beq.n	800dd2a <EnabledConnectedDevices+0x5a>
    Sensor.VOC_measurementEnabled = true;
 800dd24:	4b12      	ldr	r3, [pc, #72]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dd26:	2201      	movs	r2, #1
 800dd28:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800dd2a:	4b10      	ldr	r3, [pc, #64]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dd2c:	795b      	ldrb	r3, [r3, #5]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d002      	beq.n	800dd38 <EnabledConnectedDevices+0x68>
    Sensor.PM_measurementEnabled = true;
 800dd32:	4b0f      	ldr	r3, [pc, #60]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dd34:	2201      	movs	r2, #1
 800dd36:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800dd38:	4b0c      	ldr	r3, [pc, #48]	@ (800dd6c <EnabledConnectedDevices+0x9c>)
 800dd3a:	799b      	ldrb	r3, [r3, #6]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d002      	beq.n	800dd46 <EnabledConnectedDevices+0x76>
    Sensor.MIC_measurementEnabled = true;
 800dd40:	4b0b      	ldr	r3, [pc, #44]	@ (800dd70 <EnabledConnectedDevices+0xa0>)
 800dd42:	2201      	movs	r2, #1
 800dd44:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800dd46:	f006 fd95 	bl	8014874 <HAL_GetTick>
 800dd4a:	0003      	movs	r3, r0
 800dd4c:	4a0a      	ldr	r2, [pc, #40]	@ (800dd78 <EnabledConnectedDevices+0xa8>)
 800dd4e:	189a      	adds	r2, r3, r2
 800dd50:	4b0a      	ldr	r3, [pc, #40]	@ (800dd7c <EnabledConnectedDevices+0xac>)
 800dd52:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800dd54:	4b0a      	ldr	r3, [pc, #40]	@ (800dd80 <EnabledConnectedDevices+0xb0>)
 800dd56:	2200      	movs	r2, #0
 800dd58:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800dd5a:	4a0a      	ldr	r2, [pc, #40]	@ (800dd84 <EnabledConnectedDevices+0xb4>)
 800dd5c:	4b0a      	ldr	r3, [pc, #40]	@ (800dd88 <EnabledConnectedDevices+0xb8>)
 800dd5e:	0019      	movs	r1, r3
 800dd60:	2003      	movs	r0, #3
 800dd62:	f006 f80f 	bl	8013d84 <CreateLine>
}
 800dd66:	46c0      	nop			@ (mov r8, r8)
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	20001120 	.word	0x20001120
 800dd70:	20001118 	.word	0x20001118
 800dd74:	2000009f 	.word	0x2000009f
 800dd78:	00124f80 	.word	0x00124f80
 800dd7c:	20001114 	.word	0x20001114
 800dd80:	2000112f 	.word	0x2000112f
 800dd84:	0802cd28 	.word	0x0802cd28
 800dd88:	0802c880 	.word	0x0802c880

0800dd8c <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800dd90:	4b0e      	ldr	r3, [pc, #56]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800dd92:	2200      	movs	r2, #0
 800dd94:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800dd96:	4b0d      	ldr	r3, [pc, #52]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800dd9c:	4b0b      	ldr	r3, [pc, #44]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800dd9e:	2200      	movs	r2, #0
 800dda0:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800dda2:	4b0a      	ldr	r3, [pc, #40]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800dda4:	2200      	movs	r2, #0
 800dda6:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800dda8:	4b08      	ldr	r3, [pc, #32]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800ddaa:	2200      	movs	r2, #0
 800ddac:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800ddae:	4b07      	ldr	r3, [pc, #28]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800ddb4:	4b05      	ldr	r3, [pc, #20]	@ (800ddcc <DisableConnectedDevices+0x40>)
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800ddba:	4a05      	ldr	r2, [pc, #20]	@ (800ddd0 <DisableConnectedDevices+0x44>)
 800ddbc:	4b05      	ldr	r3, [pc, #20]	@ (800ddd4 <DisableConnectedDevices+0x48>)
 800ddbe:	0019      	movs	r1, r3
 800ddc0:	2003      	movs	r0, #3
 800ddc2:	f005 ffdf 	bl	8013d84 <CreateLine>
}
 800ddc6:	46c0      	nop			@ (mov r8, r8)
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	20001118 	.word	0x20001118
 800ddd0:	0802cd38 	.word	0x0802cd38
 800ddd4:	0802c880 	.word	0x0802c880

0800ddd8 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	0002      	movs	r2, r0
 800dde0:	1dfb      	adds	r3, r7, #7
 800dde2:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800dde4:	4b05      	ldr	r3, [pc, #20]	@ (800ddfc <setSensorLock+0x24>)
 800dde6:	1dfa      	adds	r2, r7, #7
 800dde8:	7812      	ldrb	r2, [r2, #0]
 800ddea:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800ddec:	200a      	movs	r0, #10
 800ddee:	f006 fd4b 	bl	8014888 <HAL_Delay>
}
 800ddf2:	46c0      	nop			@ (mov r8, r8)
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	b002      	add	sp, #8
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	46c0      	nop			@ (mov r8, r8)
 800ddfc:	20001129 	.word	0x20001129

0800de00 <getSensorLock>:

uint8_t getSensorLock() {
 800de00:	b580      	push	{r7, lr}
 800de02:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800de04:	4b02      	ldr	r3, [pc, #8]	@ (800de10 <getSensorLock+0x10>)
 800de06:	781b      	ldrb	r3, [r3, #0]
}
 800de08:	0018      	movs	r0, r3
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	46c0      	nop			@ (mov r8, r8)
 800de10:	20001129 	.word	0x20001129

0800de14 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800de14:	b580      	push	{r7, lr}
 800de16:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800de18:	4b1a      	ldr	r3, [pc, #104]	@ (800de84 <UpkeepI2Csensors+0x70>)
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d005      	beq.n	800de2c <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800de20:	f006 fba6 	bl	8014570 <HIDS_Upkeep>
 800de24:	0003      	movs	r3, r0
 800de26:	001a      	movs	r2, r3
 800de28:	4b17      	ldr	r3, [pc, #92]	@ (800de88 <UpkeepI2Csensors+0x74>)
 800de2a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800de2c:	4b15      	ldr	r3, [pc, #84]	@ (800de84 <UpkeepI2Csensors+0x70>)
 800de2e:	785b      	ldrb	r3, [r3, #1]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d005      	beq.n	800de40 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800de34:	f003 fb9c 	bl	8011570 <SGP_Upkeep>
 800de38:	0003      	movs	r3, r0
 800de3a:	001a      	movs	r2, r3
 800de3c:	4b13      	ldr	r3, [pc, #76]	@ (800de8c <UpkeepI2Csensors+0x78>)
 800de3e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800de40:	4b10      	ldr	r3, [pc, #64]	@ (800de84 <UpkeepI2Csensors+0x70>)
 800de42:	791b      	ldrb	r3, [r3, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d005      	beq.n	800de54 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800de48:	f7fd fb04 	bl	800b454 <AHT_Upkeep>
 800de4c:	0003      	movs	r3, r0
 800de4e:	001a      	movs	r2, r3
 800de50:	4b0f      	ldr	r3, [pc, #60]	@ (800de90 <UpkeepI2Csensors+0x7c>)
 800de52:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800de54:	4b0b      	ldr	r3, [pc, #44]	@ (800de84 <UpkeepI2Csensors+0x70>)
 800de56:	795b      	ldrb	r3, [r3, #5]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d005      	beq.n	800de68 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800de5c:	f7fd ff90 	bl	800bd80 <BMP_Upkeep>
 800de60:	0003      	movs	r3, r0
 800de62:	001a      	movs	r2, r3
 800de64:	4b0b      	ldr	r3, [pc, #44]	@ (800de94 <UpkeepI2Csensors+0x80>)
 800de66:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800de68:	4b06      	ldr	r3, [pc, #24]	@ (800de84 <UpkeepI2Csensors+0x70>)
 800de6a:	799b      	ldrb	r3, [r3, #6]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d005      	beq.n	800de7c <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800de70:	f7f6 faf2 	bl	8004458 <ENS_Upkeep>
 800de74:	0003      	movs	r3, r0
 800de76:	001a      	movs	r2, r3
 800de78:	4b07      	ldr	r3, [pc, #28]	@ (800de98 <UpkeepI2Csensors+0x84>)
 800de7a:	701a      	strb	r2, [r3, #0]
  }
}
 800de7c:	46c0      	nop			@ (mov r8, r8)
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	46c0      	nop			@ (mov r8, r8)
 800de84:	20001118 	.word	0x20001118
 800de88:	2000112b 	.word	0x2000112b
 800de8c:	2000112a 	.word	0x2000112a
 800de90:	2000112c 	.word	0x2000112c
 800de94:	2000112d 	.word	0x2000112d
 800de98:	2000112e 	.word	0x2000112e

0800de9c <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800de9c:	b580      	push	{r7, lr}
 800de9e:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800dea0:	4b02      	ldr	r3, [pc, #8]	@ (800deac <ResetdBAmax+0x10>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	601a      	str	r2, [r3, #0]
}
 800dea6:	46c0      	nop			@ (mov r8, r8)
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	20001178 	.word	0x20001178

0800deb0 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800deb8:	f006 fcdc 	bl	8014874 <HAL_GetTick>
 800debc:	0002      	movs	r2, r0
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	18d2      	adds	r2, r2, r3
 800dec2:	4b03      	ldr	r3, [pc, #12]	@ (800ded0 <setMICTimeStamp+0x20>)
 800dec4:	601a      	str	r2, [r3, #0]
}
 800dec6:	46c0      	nop			@ (mov r8, r8)
 800dec8:	46bd      	mov	sp, r7
 800deca:	b002      	add	sp, #8
 800decc:	bd80      	pop	{r7, pc}
 800dece:	46c0      	nop			@ (mov r8, r8)
 800ded0:	20001180 	.word	0x20001180

0800ded4 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800ded4:	b580      	push	{r7, lr}
 800ded6:	af00      	add	r7, sp, #0
  counter = 0;
 800ded8:	4b05      	ldr	r3, [pc, #20]	@ (800def0 <ResetDBACalculator+0x1c>)
 800deda:	2200      	movs	r2, #0
 800dedc:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800dede:	4b05      	ldr	r3, [pc, #20]	@ (800def4 <ResetDBACalculator+0x20>)
 800dee0:	2201      	movs	r2, #1
 800dee2:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800dee4:	4b04      	ldr	r3, [pc, #16]	@ (800def8 <ResetDBACalculator+0x24>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	701a      	strb	r2, [r3, #0]
}
 800deea:	46c0      	nop			@ (mov r8, r8)
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	2000117c 	.word	0x2000117c
 800def4:	200000a9 	.word	0x200000a9
 800def8:	2000117d 	.word	0x2000117d

0800defc <MIC_Print>:

void MIC_Print(void) {
 800defc:	b5b0      	push	{r4, r5, r7, lr}
 800defe:	b08c      	sub	sp, #48	@ 0x30
 800df00:	af08      	add	r7, sp, #32
  dBA = dBValue; // dBValue is the actual sample
 800df02:	4ba1      	ldr	r3, [pc, #644]	@ (800e188 <MIC_Print+0x28c>)
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	4ba1      	ldr	r3, [pc, #644]	@ (800e18c <MIC_Print+0x290>)
 800df08:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800df0a:	4ba1      	ldr	r3, [pc, #644]	@ (800e190 <MIC_Print+0x294>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	001a      	movs	r2, r3
 800df10:	4b9e      	ldr	r3, [pc, #632]	@ (800e18c <MIC_Print+0x290>)
 800df12:	6819      	ldr	r1, [r3, #0]
 800df14:	4b9f      	ldr	r3, [pc, #636]	@ (800e194 <MIC_Print+0x298>)
 800df16:	0092      	lsls	r2, r2, #2
 800df18:	50d1      	str	r1, [r2, r3]
  counter++;
 800df1a:	4b9d      	ldr	r3, [pc, #628]	@ (800e190 <MIC_Print+0x294>)
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	3301      	adds	r3, #1
 800df20:	b2da      	uxtb	r2, r3
 800df22:	4b9b      	ldr	r3, [pc, #620]	@ (800e190 <MIC_Print+0x294>)
 800df24:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800df26:	4b9a      	ldr	r3, [pc, #616]	@ (800e190 <MIC_Print+0x294>)
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	2b09      	cmp	r3, #9
 800df2c:	d80b      	bhi.n	800df46 <MIC_Print+0x4a>
 800df2e:	4b9a      	ldr	r3, [pc, #616]	@ (800e198 <MIC_Print+0x29c>)
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	2201      	movs	r2, #1
 800df34:	4053      	eors	r3, r2
 800df36:	b2db      	uxtb	r3, r3
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d004      	beq.n	800df46 <MIC_Print+0x4a>
    denominator = counter;
 800df3c:	4b94      	ldr	r3, [pc, #592]	@ (800e190 <MIC_Print+0x294>)
 800df3e:	781a      	ldrb	r2, [r3, #0]
 800df40:	4b96      	ldr	r3, [pc, #600]	@ (800e19c <MIC_Print+0x2a0>)
 800df42:	701a      	strb	r2, [r3, #0]
 800df44:	e005      	b.n	800df52 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800df46:	4b95      	ldr	r3, [pc, #596]	@ (800e19c <MIC_Print+0x2a0>)
 800df48:	220a      	movs	r2, #10
 800df4a:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800df4c:	4b92      	ldr	r3, [pc, #584]	@ (800e198 <MIC_Print+0x29c>)
 800df4e:	2201      	movs	r2, #1
 800df50:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800df52:	4b93      	ldr	r3, [pc, #588]	@ (800e1a0 <MIC_Print+0x2a4>)
 800df54:	2200      	movs	r2, #0
 800df56:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800df58:	230f      	movs	r3, #15
 800df5a:	18fb      	adds	r3, r7, r3
 800df5c:	2200      	movs	r2, #0
 800df5e:	701a      	strb	r2, [r3, #0]
 800df60:	e042      	b.n	800dfe8 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800df62:	240f      	movs	r4, #15
 800df64:	193b      	adds	r3, r7, r4
 800df66:	781a      	ldrb	r2, [r3, #0]
 800df68:	4b8a      	ldr	r3, [pc, #552]	@ (800e194 <MIC_Print+0x298>)
 800df6a:	0092      	lsls	r2, r2, #2
 800df6c:	58d2      	ldr	r2, [r2, r3]
 800df6e:	4b8c      	ldr	r3, [pc, #560]	@ (800e1a0 <MIC_Print+0x2a4>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	1c19      	adds	r1, r3, #0
 800df74:	1c10      	adds	r0, r2, #0
 800df76:	f7f2 fca3 	bl	80008c0 <__aeabi_fadd>
 800df7a:	1c03      	adds	r3, r0, #0
 800df7c:	1c1a      	adds	r2, r3, #0
 800df7e:	4b88      	ldr	r3, [pc, #544]	@ (800e1a0 <MIC_Print+0x2a4>)
 800df80:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800df82:	193b      	adds	r3, r7, r4
 800df84:	781a      	ldrb	r2, [r3, #0]
 800df86:	4b83      	ldr	r3, [pc, #524]	@ (800e194 <MIC_Print+0x298>)
 800df88:	0092      	lsls	r2, r2, #2
 800df8a:	58d2      	ldr	r2, [r2, r3]
 800df8c:	4b85      	ldr	r3, [pc, #532]	@ (800e1a4 <MIC_Print+0x2a8>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	1c19      	adds	r1, r3, #0
 800df92:	1c10      	adds	r0, r2, #0
 800df94:	f7f2 fae0 	bl	8000558 <__aeabi_fcmpgt>
 800df98:	1e03      	subs	r3, r0, #0
 800df9a:	d006      	beq.n	800dfaa <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800df9c:	193b      	adds	r3, r7, r4
 800df9e:	781a      	ldrb	r2, [r3, #0]
 800dfa0:	4b7c      	ldr	r3, [pc, #496]	@ (800e194 <MIC_Print+0x298>)
 800dfa2:	0092      	lsls	r2, r2, #2
 800dfa4:	58d2      	ldr	r2, [r2, r3]
 800dfa6:	4b7f      	ldr	r3, [pc, #508]	@ (800e1a4 <MIC_Print+0x2a8>)
 800dfa8:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800dfaa:	4b7d      	ldr	r3, [pc, #500]	@ (800e1a0 <MIC_Print+0x2a4>)
 800dfac:	681c      	ldr	r4, [r3, #0]
 800dfae:	4b7b      	ldr	r3, [pc, #492]	@ (800e19c <MIC_Print+0x2a0>)
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	0018      	movs	r0, r3
 800dfb4:	f7f3 fc88 	bl	80018c8 <__aeabi_ui2f>
 800dfb8:	1c03      	adds	r3, r0, #0
 800dfba:	1c19      	adds	r1, r3, #0
 800dfbc:	1c20      	adds	r0, r4, #0
 800dfbe:	f7f2 fe71 	bl	8000ca4 <__aeabi_fdiv>
 800dfc2:	1c03      	adds	r3, r0, #0
 800dfc4:	1c1a      	adds	r2, r3, #0
 800dfc6:	4b78      	ldr	r3, [pc, #480]	@ (800e1a8 <MIC_Print+0x2ac>)
 800dfc8:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800dfca:	4b70      	ldr	r3, [pc, #448]	@ (800e18c <MIC_Print+0x290>)
 800dfcc:	6818      	ldr	r0, [r3, #0]
 800dfce:	4b75      	ldr	r3, [pc, #468]	@ (800e1a4 <MIC_Print+0x2a8>)
 800dfd0:	6819      	ldr	r1, [r3, #0]
 800dfd2:	4b75      	ldr	r3, [pc, #468]	@ (800e1a8 <MIC_Print+0x2ac>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	1c1a      	adds	r2, r3, #0
 800dfd8:	f7f6 fdde 	bl	8004b98 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800dfdc:	210f      	movs	r1, #15
 800dfde:	187b      	adds	r3, r7, r1
 800dfe0:	781a      	ldrb	r2, [r3, #0]
 800dfe2:	187b      	adds	r3, r7, r1
 800dfe4:	3201      	adds	r2, #1
 800dfe6:	701a      	strb	r2, [r3, #0]
 800dfe8:	4b6c      	ldr	r3, [pc, #432]	@ (800e19c <MIC_Print+0x2a0>)
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	220f      	movs	r2, #15
 800dfee:	18ba      	adds	r2, r7, r2
 800dff0:	7812      	ldrb	r2, [r2, #0]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d3b5      	bcc.n	800df62 <MIC_Print+0x66>
  }
  Info("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f", dBA,mPabuffer, dBAmax, dBAAverage);
 800dff6:	4b65      	ldr	r3, [pc, #404]	@ (800e18c <MIC_Print+0x290>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	1c18      	adds	r0, r3, #0
 800dffc:	f7f5 fc4a 	bl	8003894 <__aeabi_f2d>
 800e000:	0004      	movs	r4, r0
 800e002:	000d      	movs	r5, r1
 800e004:	4b67      	ldr	r3, [pc, #412]	@ (800e1a4 <MIC_Print+0x2a8>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	1c18      	adds	r0, r3, #0
 800e00a:	f7f5 fc43 	bl	8003894 <__aeabi_f2d>
 800e00e:	6038      	str	r0, [r7, #0]
 800e010:	6079      	str	r1, [r7, #4]
 800e012:	4b65      	ldr	r3, [pc, #404]	@ (800e1a8 <MIC_Print+0x2ac>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	1c18      	adds	r0, r3, #0
 800e018:	f7f5 fc3c 	bl	8003894 <__aeabi_f2d>
 800e01c:	0002      	movs	r2, r0
 800e01e:	000b      	movs	r3, r1
 800e020:	4862      	ldr	r0, [pc, #392]	@ (800e1ac <MIC_Print+0x2b0>)
 800e022:	4963      	ldr	r1, [pc, #396]	@ (800e1b0 <MIC_Print+0x2b4>)
 800e024:	9206      	str	r2, [sp, #24]
 800e026:	9307      	str	r3, [sp, #28]
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	9204      	str	r2, [sp, #16]
 800e02e:	9305      	str	r3, [sp, #20]
 800e030:	4b60      	ldr	r3, [pc, #384]	@ (800e1b4 <MIC_Print+0x2b8>)
 800e032:	9302      	str	r3, [sp, #8]
 800e034:	9400      	str	r4, [sp, #0]
 800e036:	9501      	str	r5, [sp, #4]
 800e038:	0002      	movs	r2, r0
 800e03a:	2002      	movs	r0, #2
 800e03c:	f005 fea2 	bl	8013d84 <CreateLine>

  if(counter > NUMBER_OF_SAMPLES){
 800e040:	4b53      	ldr	r3, [pc, #332]	@ (800e190 <MIC_Print+0x294>)
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	2b0a      	cmp	r3, #10
 800e046:	d902      	bls.n	800e04e <MIC_Print+0x152>
    counter = 0;
 800e048:	4b51      	ldr	r3, [pc, #324]	@ (800e190 <MIC_Print+0x294>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800e04e:	4b4f      	ldr	r3, [pc, #316]	@ (800e18c <MIC_Print+0x290>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4959      	ldr	r1, [pc, #356]	@ (800e1b8 <MIC_Print+0x2bc>)
 800e054:	1c18      	adds	r0, r3, #0
 800e056:	f7f2 fa89 	bl	800056c <__aeabi_fcmpge>
 800e05a:	1e03      	subs	r3, r0, #0
 800e05c:	d004      	beq.n	800e068 <MIC_Print+0x16c>
    SetDBLED(true, true, true);
 800e05e:	2201      	movs	r2, #1
 800e060:	2101      	movs	r1, #1
 800e062:	2001      	movs	r0, #1
 800e064:	f004 fbbe 	bl	80127e4 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800e068:	4b48      	ldr	r3, [pc, #288]	@ (800e18c <MIC_Print+0x290>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4953      	ldr	r1, [pc, #332]	@ (800e1bc <MIC_Print+0x2c0>)
 800e06e:	1c18      	adds	r0, r3, #0
 800e070:	f7f2 fa7c 	bl	800056c <__aeabi_fcmpge>
 800e074:	1e03      	subs	r3, r0, #0
 800e076:	d00c      	beq.n	800e092 <MIC_Print+0x196>
 800e078:	4b44      	ldr	r3, [pc, #272]	@ (800e18c <MIC_Print+0x290>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	494e      	ldr	r1, [pc, #312]	@ (800e1b8 <MIC_Print+0x2bc>)
 800e07e:	1c18      	adds	r0, r3, #0
 800e080:	f7f2 fa56 	bl	8000530 <__aeabi_fcmplt>
 800e084:	1e03      	subs	r3, r0, #0
 800e086:	d004      	beq.n	800e092 <MIC_Print+0x196>
    SetDBLED(true, false, false);
 800e088:	2200      	movs	r2, #0
 800e08a:	2100      	movs	r1, #0
 800e08c:	2001      	movs	r0, #1
 800e08e:	f004 fba9 	bl	80127e4 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800e092:	4b3e      	ldr	r3, [pc, #248]	@ (800e18c <MIC_Print+0x290>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	494a      	ldr	r1, [pc, #296]	@ (800e1c0 <MIC_Print+0x2c4>)
 800e098:	1c18      	adds	r0, r3, #0
 800e09a:	f7f2 fa67 	bl	800056c <__aeabi_fcmpge>
 800e09e:	1e03      	subs	r3, r0, #0
 800e0a0:	d00c      	beq.n	800e0bc <MIC_Print+0x1c0>
 800e0a2:	4b3a      	ldr	r3, [pc, #232]	@ (800e18c <MIC_Print+0x290>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4945      	ldr	r1, [pc, #276]	@ (800e1bc <MIC_Print+0x2c0>)
 800e0a8:	1c18      	adds	r0, r3, #0
 800e0aa:	f7f2 fa41 	bl	8000530 <__aeabi_fcmplt>
 800e0ae:	1e03      	subs	r3, r0, #0
 800e0b0:	d004      	beq.n	800e0bc <MIC_Print+0x1c0>
    SetDBLED(true, true, false);
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	2101      	movs	r1, #1
 800e0b6:	2001      	movs	r0, #1
 800e0b8:	f004 fb94 	bl	80127e4 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800e0bc:	4b33      	ldr	r3, [pc, #204]	@ (800e18c <MIC_Print+0x290>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4940      	ldr	r1, [pc, #256]	@ (800e1c4 <MIC_Print+0x2c8>)
 800e0c2:	1c18      	adds	r0, r3, #0
 800e0c4:	f7f2 fa52 	bl	800056c <__aeabi_fcmpge>
 800e0c8:	1e03      	subs	r3, r0, #0
 800e0ca:	d00c      	beq.n	800e0e6 <MIC_Print+0x1ea>
 800e0cc:	4b2f      	ldr	r3, [pc, #188]	@ (800e18c <MIC_Print+0x290>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	493b      	ldr	r1, [pc, #236]	@ (800e1c0 <MIC_Print+0x2c4>)
 800e0d2:	1c18      	adds	r0, r3, #0
 800e0d4:	f7f2 fa2c 	bl	8000530 <__aeabi_fcmplt>
 800e0d8:	1e03      	subs	r3, r0, #0
 800e0da:	d004      	beq.n	800e0e6 <MIC_Print+0x1ea>
    SetDBLED(false, true, false);
 800e0dc:	2200      	movs	r2, #0
 800e0de:	2101      	movs	r1, #1
 800e0e0:	2000      	movs	r0, #0
 800e0e2:	f004 fb7f 	bl	80127e4 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800e0e6:	4b29      	ldr	r3, [pc, #164]	@ (800e18c <MIC_Print+0x290>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4937      	ldr	r1, [pc, #220]	@ (800e1c8 <MIC_Print+0x2cc>)
 800e0ec:	1c18      	adds	r0, r3, #0
 800e0ee:	f7f2 fa3d 	bl	800056c <__aeabi_fcmpge>
 800e0f2:	1e03      	subs	r3, r0, #0
 800e0f4:	d00c      	beq.n	800e110 <MIC_Print+0x214>
 800e0f6:	4b25      	ldr	r3, [pc, #148]	@ (800e18c <MIC_Print+0x290>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4932      	ldr	r1, [pc, #200]	@ (800e1c4 <MIC_Print+0x2c8>)
 800e0fc:	1c18      	adds	r0, r3, #0
 800e0fe:	f7f2 fa17 	bl	8000530 <__aeabi_fcmplt>
 800e102:	1e03      	subs	r3, r0, #0
 800e104:	d004      	beq.n	800e110 <MIC_Print+0x214>
    SetDBLED(false, true, true);
 800e106:	2201      	movs	r2, #1
 800e108:	2101      	movs	r1, #1
 800e10a:	2000      	movs	r0, #0
 800e10c:	f004 fb6a 	bl	80127e4 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800e110:	4b1e      	ldr	r3, [pc, #120]	@ (800e18c <MIC_Print+0x290>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	492d      	ldr	r1, [pc, #180]	@ (800e1cc <MIC_Print+0x2d0>)
 800e116:	1c18      	adds	r0, r3, #0
 800e118:	f7f2 fa28 	bl	800056c <__aeabi_fcmpge>
 800e11c:	1e03      	subs	r3, r0, #0
 800e11e:	d00c      	beq.n	800e13a <MIC_Print+0x23e>
 800e120:	4b1a      	ldr	r3, [pc, #104]	@ (800e18c <MIC_Print+0x290>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4928      	ldr	r1, [pc, #160]	@ (800e1c8 <MIC_Print+0x2cc>)
 800e126:	1c18      	adds	r0, r3, #0
 800e128:	f7f2 fa02 	bl	8000530 <__aeabi_fcmplt>
 800e12c:	1e03      	subs	r3, r0, #0
 800e12e:	d004      	beq.n	800e13a <MIC_Print+0x23e>
    SetDBLED(false, false, true);
 800e130:	2201      	movs	r2, #1
 800e132:	2100      	movs	r1, #0
 800e134:	2000      	movs	r0, #0
 800e136:	f004 fb55 	bl	80127e4 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800e13a:	4b14      	ldr	r3, [pc, #80]	@ (800e18c <MIC_Print+0x290>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4924      	ldr	r1, [pc, #144]	@ (800e1d0 <MIC_Print+0x2d4>)
 800e140:	1c18      	adds	r0, r3, #0
 800e142:	f7f2 fa13 	bl	800056c <__aeabi_fcmpge>
 800e146:	1e03      	subs	r3, r0, #0
 800e148:	d00c      	beq.n	800e164 <MIC_Print+0x268>
 800e14a:	4b10      	ldr	r3, [pc, #64]	@ (800e18c <MIC_Print+0x290>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	491f      	ldr	r1, [pc, #124]	@ (800e1cc <MIC_Print+0x2d0>)
 800e150:	1c18      	adds	r0, r3, #0
 800e152:	f7f2 f9ed 	bl	8000530 <__aeabi_fcmplt>
 800e156:	1e03      	subs	r3, r0, #0
 800e158:	d004      	beq.n	800e164 <MIC_Print+0x268>
    SetDBLED(true, false, true);
 800e15a:	2201      	movs	r2, #1
 800e15c:	2100      	movs	r1, #0
 800e15e:	2001      	movs	r0, #1
 800e160:	f004 fb40 	bl	80127e4 <SetDBLED>
  }
  if(dBA < 35){//off
 800e164:	4b09      	ldr	r3, [pc, #36]	@ (800e18c <MIC_Print+0x290>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4919      	ldr	r1, [pc, #100]	@ (800e1d0 <MIC_Print+0x2d4>)
 800e16a:	1c18      	adds	r0, r3, #0
 800e16c:	f7f2 f9e0 	bl	8000530 <__aeabi_fcmplt>
 800e170:	1e03      	subs	r3, r0, #0
 800e172:	d100      	bne.n	800e176 <MIC_Print+0x27a>
    SetDBLED(false, false, false);
  }
}
 800e174:	e004      	b.n	800e180 <MIC_Print+0x284>
    SetDBLED(false, false, false);
 800e176:	2200      	movs	r2, #0
 800e178:	2100      	movs	r1, #0
 800e17a:	2000      	movs	r0, #0
 800e17c:	f004 fb32 	bl	80127e4 <SetDBLED>
}
 800e180:	46c0      	nop			@ (mov r8, r8)
 800e182:	46bd      	mov	sp, r7
 800e184:	b004      	add	sp, #16
 800e186:	bdb0      	pop	{r4, r5, r7, pc}
 800e188:	20001174 	.word	0x20001174
 800e18c:	20001140 	.word	0x20001140
 800e190:	2000117c 	.word	0x2000117c
 800e194:	20001144 	.word	0x20001144
 800e198:	2000117d 	.word	0x2000117d
 800e19c:	200000a9 	.word	0x200000a9
 800e1a0:	20001170 	.word	0x20001170
 800e1a4:	20001178 	.word	0x20001178
 800e1a8:	2000116c 	.word	0x2000116c
 800e1ac:	0802cd4c 	.word	0x0802cd4c
 800e1b0:	0802cd90 	.word	0x0802cd90
 800e1b4:	20001134 	.word	0x20001134
 800e1b8:	42b40000 	.word	0x42b40000
 800e1bc:	42a00000 	.word	0x42a00000
 800e1c0:	428c0000 	.word	0x428c0000
 800e1c4:	42700000 	.word	0x42700000
 800e1c8:	42480000 	.word	0x42480000
 800e1cc:	42200000 	.word	0x42200000
 800e1d0:	420c0000 	.word	0x420c0000

0800e1d4 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800e1da:	4b11      	ldr	r3, [pc, #68]	@ (800e220 <MIC_TestMeasurementDone+0x4c>)
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	4a10      	ldr	r2, [pc, #64]	@ (800e224 <MIC_TestMeasurementDone+0x50>)
 800e1e2:	4911      	ldr	r1, [pc, #68]	@ (800e228 <MIC_TestMeasurementDone+0x54>)
 800e1e4:	2002      	movs	r0, #2
 800e1e6:	f005 fdcd 	bl	8013d84 <CreateLine>
  if(DataReady) {
 800e1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e220 <MIC_TestMeasurementDone+0x4c>)
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d010      	beq.n	800e216 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800e1f4:	1dfb      	adds	r3, r7, #7
 800e1f6:	4a0d      	ldr	r2, [pc, #52]	@ (800e22c <MIC_TestMeasurementDone+0x58>)
 800e1f8:	7812      	ldrb	r2, [r2, #0]
 800e1fa:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800e1fc:	4b0b      	ldr	r3, [pc, #44]	@ (800e22c <MIC_TestMeasurementDone+0x58>)
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	b2db      	uxtb	r3, r3
 800e202:	4a0b      	ldr	r2, [pc, #44]	@ (800e230 <MIC_TestMeasurementDone+0x5c>)
 800e204:	4908      	ldr	r1, [pc, #32]	@ (800e228 <MIC_TestMeasurementDone+0x54>)
 800e206:	2002      	movs	r0, #2
 800e208:	f005 fdbc 	bl	8013d84 <CreateLine>
    ResetChargeIndicator();
 800e20c:	f004 fbbe 	bl	801298c <ResetChargeIndicator>
    return Check;
 800e210:	1dfb      	adds	r3, r7, #7
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	e000      	b.n	800e218 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800e216:	2300      	movs	r3, #0
}
 800e218:	0018      	movs	r0, r3
 800e21a:	46bd      	mov	sp, r7
 800e21c:	b002      	add	sp, #8
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	200012b1 	.word	0x200012b1
 800e224:	0802cd94 	.word	0x0802cd94
 800e228:	0802cd90 	.word	0x0802cd90
 800e22c:	200012b2 	.word	0x200012b2
 800e230:	0802cdc0 	.word	0x0802cdc0

0800e234 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800e23a:	4b78      	ldr	r3, [pc, #480]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	2b03      	cmp	r3, #3
 800e240:	d100      	bne.n	800e244 <Mic_Upkeep+0x10>
 800e242:	e0b9      	b.n	800e3b8 <Mic_Upkeep+0x184>
 800e244:	dd00      	ble.n	800e248 <Mic_Upkeep+0x14>
 800e246:	e0d4      	b.n	800e3f2 <Mic_Upkeep+0x1be>
 800e248:	2b02      	cmp	r3, #2
 800e24a:	d037      	beq.n	800e2bc <Mic_Upkeep+0x88>
 800e24c:	dd00      	ble.n	800e250 <Mic_Upkeep+0x1c>
 800e24e:	e0d0      	b.n	800e3f2 <Mic_Upkeep+0x1be>
 800e250:	2b00      	cmp	r3, #0
 800e252:	d002      	beq.n	800e25a <Mic_Upkeep+0x26>
 800e254:	2b01      	cmp	r3, #1
 800e256:	d014      	beq.n	800e282 <Mic_Upkeep+0x4e>
 800e258:	e0cb      	b.n	800e3f2 <Mic_Upkeep+0x1be>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800e25a:	2001      	movs	r0, #1
 800e25c:	f003 fbac 	bl	80119b8 <enableMicrophone>
 800e260:	0003      	movs	r3, r0
 800e262:	001a      	movs	r2, r3
 800e264:	2301      	movs	r3, #1
 800e266:	4053      	eors	r3, r2
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d005      	beq.n	800e27a <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800e26e:	4a6c      	ldr	r2, [pc, #432]	@ (800e420 <Mic_Upkeep+0x1ec>)
 800e270:	4b6c      	ldr	r3, [pc, #432]	@ (800e424 <Mic_Upkeep+0x1f0>)
 800e272:	217f      	movs	r1, #127	@ 0x7f
 800e274:	0018      	movs	r0, r3
 800e276:	f005 fe6d 	bl	8013f54 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800e27a:	4b68      	ldr	r3, [pc, #416]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e27c:	2201      	movs	r2, #1
 800e27e:	701a      	strb	r2, [r3, #0]
    break;
 800e280:	e0c6      	b.n	800e410 <Mic_Upkeep+0x1dc>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800e282:	f003 fb75 	bl	8011970 <micSettlingComplete>
 800e286:	1e03      	subs	r3, r0, #0
 800e288:	d105      	bne.n	800e296 <Mic_Upkeep+0x62>
 800e28a:	4b67      	ldr	r3, [pc, #412]	@ (800e428 <Mic_Upkeep+0x1f4>)
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	2b00      	cmp	r3, #0
 800e292:	d100      	bne.n	800e296 <Mic_Upkeep+0x62>
 800e294:	e0b7      	b.n	800e406 <Mic_Upkeep+0x1d2>
      if (!startSPLcalculation())
 800e296:	f003 fbf9 	bl	8011a8c <startSPLcalculation>
 800e29a:	0003      	movs	r3, r0
 800e29c:	001a      	movs	r2, r3
 800e29e:	2301      	movs	r3, #1
 800e2a0:	4053      	eors	r3, r2
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d005      	beq.n	800e2b4 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800e2a8:	4a5d      	ldr	r2, [pc, #372]	@ (800e420 <Mic_Upkeep+0x1ec>)
 800e2aa:	4b5e      	ldr	r3, [pc, #376]	@ (800e424 <Mic_Upkeep+0x1f0>)
 800e2ac:	2188      	movs	r1, #136	@ 0x88
 800e2ae:	0018      	movs	r0, r3
 800e2b0:	f005 fe50 	bl	8013f54 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800e2b4:	4b59      	ldr	r3, [pc, #356]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e2b6:	2202      	movs	r2, #2
 800e2b8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e2ba:	e0a4      	b.n	800e406 <Mic_Upkeep+0x1d2>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800e2bc:	4b5b      	ldr	r3, [pc, #364]	@ (800e42c <Mic_Upkeep+0x1f8>)
 800e2be:	2201      	movs	r2, #1
 800e2c0:	2101      	movs	r1, #1
 800e2c2:	0018      	movs	r0, r3
 800e2c4:	f003 fa3c 	bl	8011740 <getSoundData>
 800e2c8:	1e03      	subs	r3, r0, #0
 800e2ca:	d100      	bne.n	800e2ce <Mic_Upkeep+0x9a>
 800e2cc:	e09d      	b.n	800e40a <Mic_Upkeep+0x1d6>
      clearMaximumAmplitude();
 800e2ce:	f003 fb2f 	bl	8011930 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800e2d2:	4b56      	ldr	r3, [pc, #344]	@ (800e42c <Mic_Upkeep+0x1f8>)
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	001a      	movs	r2, r3
 800e2d8:	4b54      	ldr	r3, [pc, #336]	@ (800e42c <Mic_Upkeep+0x1f8>)
 800e2da:	785b      	ldrb	r3, [r3, #1]
 800e2dc:	4954      	ldr	r1, [pc, #336]	@ (800e430 <Mic_Upkeep+0x1fc>)
 800e2de:	0038      	movs	r0, r7
 800e2e0:	f017 ff7a 	bl	80261d8 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800e2e4:	4b51      	ldr	r3, [pc, #324]	@ (800e42c <Mic_Upkeep+0x1f8>)
 800e2e6:	89db      	ldrh	r3, [r3, #14]
 800e2e8:	001a      	movs	r2, r3
 800e2ea:	4b50      	ldr	r3, [pc, #320]	@ (800e42c <Mic_Upkeep+0x1f8>)
 800e2ec:	7c1b      	ldrb	r3, [r3, #16]
 800e2ee:	4951      	ldr	r1, [pc, #324]	@ (800e434 <Mic_Upkeep+0x200>)
 800e2f0:	4851      	ldr	r0, [pc, #324]	@ (800e438 <Mic_Upkeep+0x204>)
 800e2f2:	f017 ff71 	bl	80261d8 <siprintf>
      dBValue = atof(dBbuffer);
 800e2f6:	003b      	movs	r3, r7
 800e2f8:	0018      	movs	r0, r3
 800e2fa:	f016 fb13 	bl	8024924 <atof>
 800e2fe:	0002      	movs	r2, r0
 800e300:	000b      	movs	r3, r1
 800e302:	0010      	movs	r0, r2
 800e304:	0019      	movs	r1, r3
 800e306:	f7f5 fb0d 	bl	8003924 <__aeabi_d2f>
 800e30a:	1c02      	adds	r2, r0, #0
 800e30c:	4b4b      	ldr	r3, [pc, #300]	@ (800e43c <Mic_Upkeep+0x208>)
 800e30e:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800e310:	4b4a      	ldr	r3, [pc, #296]	@ (800e43c <Mic_Upkeep+0x208>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	494a      	ldr	r1, [pc, #296]	@ (800e440 <Mic_Upkeep+0x20c>)
 800e316:	1c18      	adds	r0, r3, #0
 800e318:	f7f2 fe92 	bl	8001040 <__aeabi_fmul>
 800e31c:	1c03      	adds	r3, r0, #0
 800e31e:	1c18      	adds	r0, r3, #0
 800e320:	f7f5 fab8 	bl	8003894 <__aeabi_f2d>
 800e324:	2200      	movs	r2, #0
 800e326:	4b47      	ldr	r3, [pc, #284]	@ (800e444 <Mic_Upkeep+0x210>)
 800e328:	f7f3 fb14 	bl	8001954 <__aeabi_dadd>
 800e32c:	0002      	movs	r2, r0
 800e32e:	000b      	movs	r3, r1
 800e330:	0010      	movs	r0, r2
 800e332:	0019      	movs	r1, r3
 800e334:	f7f5 fa20 	bl	8003778 <__aeabi_d2iz>
 800e338:	0003      	movs	r3, r0
 800e33a:	0018      	movs	r0, r3
 800e33c:	f7f5 fa58 	bl	80037f0 <__aeabi_i2d>
 800e340:	2200      	movs	r2, #0
 800e342:	4b41      	ldr	r3, [pc, #260]	@ (800e448 <Mic_Upkeep+0x214>)
 800e344:	f7f3 fecc 	bl	80020e0 <__aeabi_ddiv>
 800e348:	0002      	movs	r2, r0
 800e34a:	000b      	movs	r3, r1
 800e34c:	0010      	movs	r0, r2
 800e34e:	0019      	movs	r1, r3
 800e350:	f7f5 fae8 	bl	8003924 <__aeabi_d2f>
 800e354:	1c02      	adds	r2, r0, #0
 800e356:	4b39      	ldr	r3, [pc, #228]	@ (800e43c <Mic_Upkeep+0x208>)
 800e358:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800e35a:	f7ff fdcf 	bl	800defc <MIC_Print>
      if (!startSPLcalculation()) {
 800e35e:	f003 fb95 	bl	8011a8c <startSPLcalculation>
 800e362:	0003      	movs	r3, r0
 800e364:	001a      	movs	r2, r3
 800e366:	2301      	movs	r3, #1
 800e368:	4053      	eors	r3, r2
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d005      	beq.n	800e37c <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800e370:	4a2b      	ldr	r2, [pc, #172]	@ (800e420 <Mic_Upkeep+0x1ec>)
 800e372:	4b2c      	ldr	r3, [pc, #176]	@ (800e424 <Mic_Upkeep+0x1f0>)
 800e374:	2198      	movs	r1, #152	@ 0x98
 800e376:	0018      	movs	r0, r3
 800e378:	f005 fdec 	bl	8013f54 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800e37c:	2000      	movs	r0, #0
 800e37e:	f003 fb1b 	bl	80119b8 <enableMicrophone>
 800e382:	0003      	movs	r3, r0
 800e384:	001a      	movs	r2, r3
 800e386:	2301      	movs	r3, #1
 800e388:	4053      	eors	r3, r2
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d005      	beq.n	800e39c <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800e390:	4a23      	ldr	r2, [pc, #140]	@ (800e420 <Mic_Upkeep+0x1ec>)
 800e392:	4b24      	ldr	r3, [pc, #144]	@ (800e424 <Mic_Upkeep+0x1f0>)
 800e394:	219b      	movs	r1, #155	@ 0x9b
 800e396:	0018      	movs	r0, r3
 800e398:	f005 fddc 	bl	8013f54 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 430;  // about twice second
 800e39c:	f006 fa6a 	bl	8014874 <HAL_GetTick>
 800e3a0:	0003      	movs	r3, r0
 800e3a2:	33af      	adds	r3, #175	@ 0xaf
 800e3a4:	33ff      	adds	r3, #255	@ 0xff
 800e3a6:	001a      	movs	r2, r3
 800e3a8:	4b28      	ldr	r3, [pc, #160]	@ (800e44c <Mic_Upkeep+0x218>)
 800e3aa:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800e3ac:	4b1b      	ldr	r3, [pc, #108]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e3ae:	2203      	movs	r2, #3
 800e3b0:	701a      	strb	r2, [r3, #0]
      ResetChargeIndicator();
 800e3b2:	f004 faeb 	bl	801298c <ResetChargeIndicator>
    }
    break;
 800e3b6:	e028      	b.n	800e40a <Mic_Upkeep+0x1d6>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800e3b8:	4b24      	ldr	r3, [pc, #144]	@ (800e44c <Mic_Upkeep+0x218>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	0018      	movs	r0, r3
 800e3be:	f005 fc8b 	bl	8013cd8 <TimestampIsReached>
 800e3c2:	1e03      	subs	r3, r0, #0
 800e3c4:	d023      	beq.n	800e40e <Mic_Upkeep+0x1da>
      if (!enableMicrophone(true)) {
 800e3c6:	2001      	movs	r0, #1
 800e3c8:	f003 faf6 	bl	80119b8 <enableMicrophone>
 800e3cc:	0003      	movs	r3, r0
 800e3ce:	001a      	movs	r2, r3
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	4053      	eors	r3, r2
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d005      	beq.n	800e3e6 <Mic_Upkeep+0x1b2>
        errorHandler(__func__, __LINE__, __FILE__);
 800e3da:	4a11      	ldr	r2, [pc, #68]	@ (800e420 <Mic_Upkeep+0x1ec>)
 800e3dc:	4b11      	ldr	r3, [pc, #68]	@ (800e424 <Mic_Upkeep+0x1f0>)
 800e3de:	21a6      	movs	r1, #166	@ 0xa6
 800e3e0:	0018      	movs	r0, r3
 800e3e2:	f005 fdb7 	bl	8013f54 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800e3e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	701a      	strb	r2, [r3, #0]
      SetChargeIndicator();
 800e3ec:	f004 fa8e 	bl	801290c <SetChargeIndicator>
    }
    break;
 800e3f0:	e00d      	b.n	800e40e <Mic_Upkeep+0x1da>

  default:
    Debug("Unexpected occurrence happened");
 800e3f2:	4a17      	ldr	r2, [pc, #92]	@ (800e450 <Mic_Upkeep+0x21c>)
 800e3f4:	4b17      	ldr	r3, [pc, #92]	@ (800e454 <Mic_Upkeep+0x220>)
 800e3f6:	0019      	movs	r1, r3
 800e3f8:	2003      	movs	r0, #3
 800e3fa:	f005 fcc3 	bl	8013d84 <CreateLine>
    MicState = MIC_STATE_INIT;
 800e3fe:	4b07      	ldr	r3, [pc, #28]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e400:	2200      	movs	r2, #0
 800e402:	701a      	strb	r2, [r3, #0]
    break;
 800e404:	e004      	b.n	800e410 <Mic_Upkeep+0x1dc>
    break;
 800e406:	46c0      	nop			@ (mov r8, r8)
 800e408:	e002      	b.n	800e410 <Mic_Upkeep+0x1dc>
    break;
 800e40a:	46c0      	nop			@ (mov r8, r8)
 800e40c:	e000      	b.n	800e410 <Mic_Upkeep+0x1dc>
    break;
 800e40e:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800e410:	4b02      	ldr	r3, [pc, #8]	@ (800e41c <Mic_Upkeep+0x1e8>)
 800e412:	781b      	ldrb	r3, [r3, #0]
}
 800e414:	0018      	movs	r0, r3
 800e416:	46bd      	mov	sp, r7
 800e418:	b002      	add	sp, #8
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	20001196 	.word	0x20001196
 800e420:	0802cdd8 	.word	0x0802cdd8
 800e424:	0802e2c4 	.word	0x0802e2c4
 800e428:	200012b1 	.word	0x200012b1
 800e42c:	20001184 	.word	0x20001184
 800e430:	0802cdf4 	.word	0x0802cdf4
 800e434:	0802cdfc 	.word	0x0802cdfc
 800e438:	20001134 	.word	0x20001134
 800e43c:	20001174 	.word	0x20001174
 800e440:	42c80000 	.word	0x42c80000
 800e444:	3fe00000 	.word	0x3fe00000
 800e448:	40590000 	.word	0x40590000
 800e44c:	20001180 	.word	0x20001180
 800e450:	0802ce04 	.word	0x0802ce04
 800e454:	0802ce24 	.word	0x0802ce24

0800e458 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b086      	sub	sp, #24
 800e45c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800e45e:	1d3b      	adds	r3, r7, #4
 800e460:	0018      	movs	r0, r3
 800e462:	2314      	movs	r3, #20
 800e464:	001a      	movs	r2, r3
 800e466:	2100      	movs	r1, #0
 800e468:	f017 fffe 	bl	8026468 <memset>
  RTC_DateTypeDef sDate = {0};
 800e46c:	003b      	movs	r3, r7
 800e46e:	2200      	movs	r2, #0
 800e470:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800e472:	4b2e      	ldr	r3, [pc, #184]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e474:	4a2e      	ldr	r2, [pc, #184]	@ (800e530 <MX_RTC_Init+0xd8>)
 800e476:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800e478:	4b2c      	ldr	r3, [pc, #176]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e47a:	2200      	movs	r2, #0
 800e47c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800e47e:	4b2b      	ldr	r3, [pc, #172]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e480:	227f      	movs	r2, #127	@ 0x7f
 800e482:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800e484:	4b29      	ldr	r3, [pc, #164]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e486:	22ff      	movs	r2, #255	@ 0xff
 800e488:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e48a:	4b28      	ldr	r3, [pc, #160]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e48c:	2200      	movs	r2, #0
 800e48e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800e490:	4b26      	ldr	r3, [pc, #152]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e492:	2200      	movs	r2, #0
 800e494:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e496:	4b25      	ldr	r3, [pc, #148]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e498:	2200      	movs	r2, #0
 800e49a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e49c:	4b23      	ldr	r3, [pc, #140]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e49e:	2200      	movs	r2, #0
 800e4a0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e4a2:	4b22      	ldr	r3, [pc, #136]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e4a4:	0018      	movs	r0, r3
 800e4a6:	f00d fdd1 	bl	801c04c <HAL_RTC_Init>
 800e4aa:	1e03      	subs	r3, r0, #0
 800e4ac:	d001      	beq.n	800e4b2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800e4ae:	f7fe ff7b 	bl	800d3a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800e4b2:	1d3b      	adds	r3, r7, #4
 800e4b4:	220d      	movs	r2, #13
 800e4b6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800e4b8:	1d3b      	adds	r3, r7, #4
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800e4be:	1d3b      	adds	r3, r7, #4
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e4c4:	1d3b      	adds	r3, r7, #4
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e4ca:	1d3b      	adds	r3, r7, #4
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800e4d0:	1d39      	adds	r1, r7, #4
 800e4d2:	4b16      	ldr	r3, [pc, #88]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	0018      	movs	r0, r3
 800e4d8:	f00d fe54 	bl	801c184 <HAL_RTC_SetTime>
 800e4dc:	1e03      	subs	r3, r0, #0
 800e4de:	d001      	beq.n	800e4e4 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800e4e0:	f7fe ff62 	bl	800d3a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800e4e4:	003b      	movs	r3, r7
 800e4e6:	2206      	movs	r2, #6
 800e4e8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800e4ea:	003b      	movs	r3, r7
 800e4ec:	2211      	movs	r2, #17
 800e4ee:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800e4f0:	003b      	movs	r3, r7
 800e4f2:	2217      	movs	r2, #23
 800e4f4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800e4f6:	003b      	movs	r3, r7
 800e4f8:	2218      	movs	r2, #24
 800e4fa:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800e4fc:	0039      	movs	r1, r7
 800e4fe:	4b0b      	ldr	r3, [pc, #44]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e500:	2200      	movs	r2, #0
 800e502:	0018      	movs	r0, r3
 800e504:	f00d ff46 	bl	801c394 <HAL_RTC_SetDate>
 800e508:	1e03      	subs	r3, r0, #0
 800e50a:	d001      	beq.n	800e510 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800e50c:	f7fe ff4c 	bl	800d3a8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800e510:	4b06      	ldr	r3, [pc, #24]	@ (800e52c <MX_RTC_Init+0xd4>)
 800e512:	2200      	movs	r2, #0
 800e514:	2100      	movs	r1, #0
 800e516:	0018      	movs	r0, r3
 800e518:	f00e f914 	bl	801c744 <HAL_RTCEx_SetWakeUpTimer_IT>
 800e51c:	1e03      	subs	r3, r0, #0
 800e51e:	d001      	beq.n	800e524 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800e520:	f7fe ff42 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800e524:	46c0      	nop			@ (mov r8, r8)
 800e526:	46bd      	mov	sp, r7
 800e528:	b006      	add	sp, #24
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	20001198 	.word	0x20001198
 800e530:	40002800 	.word	0x40002800

0800e534 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a0a      	ldr	r2, [pc, #40]	@ (800e56c <HAL_RTC_MspInit+0x38>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d10e      	bne.n	800e564 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e546:	4b0a      	ldr	r3, [pc, #40]	@ (800e570 <HAL_RTC_MspInit+0x3c>)
 800e548:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e54a:	4b09      	ldr	r3, [pc, #36]	@ (800e570 <HAL_RTC_MspInit+0x3c>)
 800e54c:	2180      	movs	r1, #128	@ 0x80
 800e54e:	02c9      	lsls	r1, r1, #11
 800e550:	430a      	orrs	r2, r1
 800e552:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800e554:	2200      	movs	r2, #0
 800e556:	2100      	movs	r1, #0
 800e558:	2002      	movs	r0, #2
 800e55a:	f006 fe11 	bl	8015180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800e55e:	2002      	movs	r0, #2
 800e560:	f006 fe23 	bl	80151aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800e564:	46c0      	nop			@ (mov r8, r8)
 800e566:	46bd      	mov	sp, r7
 800e568:	b002      	add	sp, #8
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	40002800 	.word	0x40002800
 800e570:	40021000 	.word	0x40021000

0800e574 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800e574:	b580      	push	{r7, lr}
 800e576:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800e578:	4b02      	ldr	r3, [pc, #8]	@ (800e584 <sen5x_Get_sen5x_enable_state+0x10>)
 800e57a:	781b      	ldrb	r3, [r3, #0]
}
 800e57c:	0018      	movs	r0, r3
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	46c0      	nop			@ (mov r8, r8)
 800e584:	200011bf 	.word	0x200011bf

0800e588 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	0002      	movs	r2, r0
 800e590:	1dfb      	adds	r3, r7, #7
 800e592:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800e594:	4b03      	ldr	r3, [pc, #12]	@ (800e5a4 <sen5x_Set_sen5x_state+0x1c>)
 800e596:	1dfa      	adds	r2, r7, #7
 800e598:	7812      	ldrb	r2, [r2, #0]
 800e59a:	701a      	strb	r2, [r3, #0]
}
 800e59c:	46c0      	nop			@ (mov r8, r8)
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	b002      	add	sp, #8
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	200011bf 	.word	0x200011bf

0800e5a8 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800e5b0:	f006 f960 	bl	8014874 <HAL_GetTick>
 800e5b4:	0002      	movs	r2, r0
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	18d2      	adds	r2, r2, r3
 800e5ba:	4b03      	ldr	r3, [pc, #12]	@ (800e5c8 <setsen5xReadTimer+0x20>)
 800e5bc:	601a      	str	r2, [r3, #0]
}
 800e5be:	46c0      	nop			@ (mov r8, r8)
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	b002      	add	sp, #8
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	46c0      	nop			@ (mov r8, r8)
 800e5c8:	200011cc 	.word	0x200011cc

0800e5cc <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	0002      	movs	r2, r0
 800e5d4:	1dfb      	adds	r3, r7, #7
 800e5d6:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800e5d8:	4b03      	ldr	r3, [pc, #12]	@ (800e5e8 <setsen5xSamplecounter+0x1c>)
 800e5da:	2200      	movs	r2, #0
 800e5dc:	701a      	strb	r2, [r3, #0]
}
 800e5de:	46c0      	nop			@ (mov r8, r8)
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	b002      	add	sp, #8
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	46c0      	nop			@ (mov r8, r8)
 800e5e8:	200011c8 	.word	0x200011c8

0800e5ec <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800e5f4:	f7fe ff90 	bl	800d518 <IsPMSensorEnabled>
 800e5f8:	1e03      	subs	r3, r0, #0
 800e5fa:	d034      	beq.n	800e666 <sen5x_enable+0x7a>
    if (batteryStatus == BATTERY_FULL) {
 800e5fc:	4b21      	ldr	r3, [pc, #132]	@ (800e684 <sen5x_enable+0x98>)
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	2b03      	cmp	r3, #3
 800e602:	d103      	bne.n	800e60c <sen5x_enable+0x20>
      sen5x_Enable = true;
 800e604:	4b20      	ldr	r3, [pc, #128]	@ (800e688 <sen5x_enable+0x9c>)
 800e606:	2201      	movs	r2, #1
 800e608:	701a      	strb	r2, [r3, #0]
 800e60a:	e00d      	b.n	800e628 <sen5x_enable+0x3c>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800e60c:	4b1e      	ldr	r3, [pc, #120]	@ (800e688 <sen5x_enable+0x9c>)
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	1e5a      	subs	r2, r3, #1
 800e612:	4193      	sbcs	r3, r2
 800e614:	b2db      	uxtb	r3, r3
 800e616:	2201      	movs	r2, #1
 800e618:	4053      	eors	r3, r2
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	1c1a      	adds	r2, r3, #0
 800e61e:	2301      	movs	r3, #1
 800e620:	4013      	ands	r3, r2
 800e622:	b2da      	uxtb	r2, r3
 800e624:	4b18      	ldr	r3, [pc, #96]	@ (800e688 <sen5x_enable+0x9c>)
 800e626:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800e628:	4b17      	ldr	r3, [pc, #92]	@ (800e688 <sen5x_enable+0x9c>)
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d003      	beq.n	800e638 <sen5x_enable+0x4c>
      setsen5xReadTimer(0);
 800e630:	2000      	movs	r0, #0
 800e632:	f7ff ffb9 	bl	800e5a8 <setsen5xReadTimer>
 800e636:	e009      	b.n	800e64c <sen5x_enable+0x60>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800e638:	f006 f91c 	bl	8014874 <HAL_GetTick>
 800e63c:	0002      	movs	r2, r0
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2164      	movs	r1, #100	@ 0x64
 800e642:	434b      	muls	r3, r1
 800e644:	18d3      	adds	r3, r2, r3
 800e646:	0018      	movs	r0, r3
 800e648:	f7ff ffae 	bl	800e5a8 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800e64c:	4b0e      	ldr	r3, [pc, #56]	@ (800e688 <sen5x_enable+0x9c>)
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d001      	beq.n	800e658 <sen5x_enable+0x6c>
 800e654:	4b0d      	ldr	r3, [pc, #52]	@ (800e68c <sen5x_enable+0xa0>)
 800e656:	e000      	b.n	800e65a <sen5x_enable+0x6e>
 800e658:	4b0d      	ldr	r3, [pc, #52]	@ (800e690 <sen5x_enable+0xa4>)
 800e65a:	4a0e      	ldr	r2, [pc, #56]	@ (800e694 <sen5x_enable+0xa8>)
 800e65c:	490e      	ldr	r1, [pc, #56]	@ (800e698 <sen5x_enable+0xac>)
 800e65e:	2002      	movs	r0, #2
 800e660:	f005 fb90 	bl	8013d84 <CreateLine>
 800e664:	e005      	b.n	800e672 <sen5x_enable+0x86>
  }
  else {
    Info("sen5x measurement is disabled");
 800e666:	4a0d      	ldr	r2, [pc, #52]	@ (800e69c <sen5x_enable+0xb0>)
 800e668:	4b0b      	ldr	r3, [pc, #44]	@ (800e698 <sen5x_enable+0xac>)
 800e66a:	0019      	movs	r1, r3
 800e66c:	2002      	movs	r0, #2
 800e66e:	f005 fb89 	bl	8013d84 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800e672:	4b0b      	ldr	r3, [pc, #44]	@ (800e6a0 <sen5x_enable+0xb4>)
 800e674:	2201      	movs	r2, #1
 800e676:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800e678:	4b03      	ldr	r3, [pc, #12]	@ (800e688 <sen5x_enable+0x9c>)
 800e67a:	781b      	ldrb	r3, [r3, #0]
}
 800e67c:	0018      	movs	r0, r3
 800e67e:	46bd      	mov	sp, r7
 800e680:	b002      	add	sp, #8
 800e682:	bd80      	pop	{r7, pc}
 800e684:	2000215d 	.word	0x2000215d
 800e688:	200011bf 	.word	0x200011bf
 800e68c:	0802ce28 	.word	0x0802ce28
 800e690:	0802ce30 	.word	0x0802ce30
 800e694:	0802ce3c 	.word	0x0802ce3c
 800e698:	0802ce58 	.word	0x0802ce58
 800e69c:	0802ce5c 	.word	0x0802ce5c
 800e6a0:	200000aa 	.word	0x200000aa

0800e6a4 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800e6a8:	2380      	movs	r3, #128	@ 0x80
 800e6aa:	015b      	lsls	r3, r3, #5
 800e6ac:	480f      	ldr	r0, [pc, #60]	@ (800e6ec <sen5x_Power_On+0x48>)
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	0019      	movs	r1, r3
 800e6b2:	f007 fb52 	bl	8015d5a <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800e6b6:	4a0e      	ldr	r2, [pc, #56]	@ (800e6f0 <sen5x_Power_On+0x4c>)
 800e6b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e6f4 <sen5x_Power_On+0x50>)
 800e6ba:	0019      	movs	r1, r3
 800e6bc:	2003      	movs	r0, #3
 800e6be:	f005 fb61 	bl	8013d84 <CreateLine>
  HAL_Delay(150);
 800e6c2:	2096      	movs	r0, #150	@ 0x96
 800e6c4:	f006 f8e0 	bl	8014888 <HAL_Delay>
  if (sen5x_device_reset()) {
 800e6c8:	f001 f9f6 	bl	800fab8 <sen5x_device_reset>
 800e6cc:	1e03      	subs	r3, r0, #0
 800e6ce:	d006      	beq.n	800e6de <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800e6d0:	4a09      	ldr	r2, [pc, #36]	@ (800e6f8 <sen5x_Power_On+0x54>)
 800e6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e6fc <sen5x_Power_On+0x58>)
 800e6d4:	0019      	movs	r1, r3
 800e6d6:	2001      	movs	r0, #1
 800e6d8:	f005 fb54 	bl	8013d84 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800e6dc:	e002      	b.n	800e6e4 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800e6de:	4b08      	ldr	r3, [pc, #32]	@ (800e700 <sen5x_Power_On+0x5c>)
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	701a      	strb	r2, [r3, #0]
}
 800e6e4:	46c0      	nop			@ (mov r8, r8)
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	46c0      	nop			@ (mov r8, r8)
 800e6ec:	50000800 	.word	0x50000800
 800e6f0:	0802ce7c 	.word	0x0802ce7c
 800e6f4:	0802ce98 	.word	0x0802ce98
 800e6f8:	0802ce9c 	.word	0x0802ce9c
 800e6fc:	0802cec4 	.word	0x0802cec4
 800e700:	200011bd 	.word	0x200011bd

0800e704 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800e704:	b580      	push	{r7, lr}
 800e706:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800e708:	4b0e      	ldr	r3, [pc, #56]	@ (800e744 <sen5x_Power_Off+0x40>)
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d006      	beq.n	800e71e <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800e710:	4a0d      	ldr	r2, [pc, #52]	@ (800e748 <sen5x_Power_Off+0x44>)
 800e712:	4b0e      	ldr	r3, [pc, #56]	@ (800e74c <sen5x_Power_Off+0x48>)
 800e714:	0019      	movs	r1, r3
 800e716:	2003      	movs	r0, #3
 800e718:	f005 fb34 	bl	8013d84 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800e71c:	e00f      	b.n	800e73e <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800e71e:	4a0c      	ldr	r2, [pc, #48]	@ (800e750 <sen5x_Power_Off+0x4c>)
 800e720:	4b0a      	ldr	r3, [pc, #40]	@ (800e74c <sen5x_Power_Off+0x48>)
 800e722:	0019      	movs	r1, r3
 800e724:	2003      	movs	r0, #3
 800e726:	f005 fb2d 	bl	8013d84 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800e72a:	2380      	movs	r3, #128	@ 0x80
 800e72c:	015b      	lsls	r3, r3, #5
 800e72e:	4809      	ldr	r0, [pc, #36]	@ (800e754 <sen5x_Power_Off+0x50>)
 800e730:	2200      	movs	r2, #0
 800e732:	0019      	movs	r1, r3
 800e734:	f007 fb11 	bl	8015d5a <HAL_GPIO_WritePin>
      sen5x_On = false;
 800e738:	4b07      	ldr	r3, [pc, #28]	@ (800e758 <sen5x_Power_Off+0x54>)
 800e73a:	2200      	movs	r2, #0
 800e73c:	701a      	strb	r2, [r3, #0]
}
 800e73e:	46c0      	nop			@ (mov r8, r8)
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	200011be 	.word	0x200011be
 800e748:	0802cec8 	.word	0x0802cec8
 800e74c:	0802ce98 	.word	0x0802ce98
 800e750:	0802cef8 	.word	0x0802cef8
 800e754:	50000800 	.word	0x50000800
 800e758:	200011bd 	.word	0x200011bd

0800e75c <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800e75c:	b580      	push	{r7, lr}
 800e75e:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800e760:	4b02      	ldr	r3, [pc, #8]	@ (800e76c <reset_fanCleaningDone+0x10>)
 800e762:	2200      	movs	r2, #0
 800e764:	701a      	strb	r2, [r3, #0]
}
 800e766:	46c0      	nop			@ (mov r8, r8)
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	200011bc 	.word	0x200011bc

0800e770 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800e770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e772:	b093      	sub	sp, #76	@ 0x4c
 800e774:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800e776:	2436      	movs	r4, #54	@ 0x36
 800e778:	193b      	adds	r3, r7, r4
 800e77a:	2200      	movs	r2, #0
 800e77c:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800e77e:	2335      	movs	r3, #53	@ 0x35
 800e780:	18fb      	adds	r3, r7, r3
 800e782:	2220      	movs	r2, #32
 800e784:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800e786:	2334      	movs	r3, #52	@ 0x34
 800e788:	18fb      	adds	r3, r7, r3
 800e78a:	2220      	movs	r2, #32
 800e78c:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800e78e:	f7ff ff89 	bl	800e6a4 <sen5x_Power_On>
  error = sen5x_device_reset();
 800e792:	0025      	movs	r5, r4
 800e794:	193c      	adds	r4, r7, r4
 800e796:	f001 f98f 	bl	800fab8 <sen5x_device_reset>
 800e79a:	0003      	movs	r3, r0
 800e79c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e79e:	002c      	movs	r4, r5
 800e7a0:	193b      	adds	r3, r7, r4
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	5e9b      	ldrsh	r3, [r3, r2]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00b      	beq.n	800e7c2 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800e7aa:	193b      	adds	r3, r7, r4
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	5e9b      	ldrsh	r3, [r3, r2]
 800e7b0:	4a77      	ldr	r2, [pc, #476]	@ (800e990 <probe_sen5x+0x220>)
 800e7b2:	4978      	ldr	r1, [pc, #480]	@ (800e994 <probe_sen5x+0x224>)
 800e7b4:	2001      	movs	r0, #1
 800e7b6:	f005 fae5 	bl	8013d84 <CreateLine>
      return error;
 800e7ba:	193b      	adds	r3, r7, r4
 800e7bc:	2200      	movs	r2, #0
 800e7be:	5e9b      	ldrsh	r3, [r3, r2]
 800e7c0:	e0e2      	b.n	800e988 <probe_sen5x+0x218>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800e7c2:	2536      	movs	r5, #54	@ 0x36
 800e7c4:	197c      	adds	r4, r7, r5
 800e7c6:	2335      	movs	r3, #53	@ 0x35
 800e7c8:	18fb      	adds	r3, r7, r3
 800e7ca:	781a      	ldrb	r2, [r3, #0]
 800e7cc:	230c      	movs	r3, #12
 800e7ce:	18fb      	adds	r3, r7, r3
 800e7d0:	0011      	movs	r1, r2
 800e7d2:	0018      	movs	r0, r3
 800e7d4:	f001 f85c 	bl	800f890 <sen5x_get_serial_number>
 800e7d8:	0003      	movs	r3, r0
 800e7da:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e7dc:	197b      	adds	r3, r7, r5
 800e7de:	2200      	movs	r2, #0
 800e7e0:	5e9b      	ldrsh	r3, [r3, r2]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d00b      	beq.n	800e7fe <probe_sen5x+0x8e>
      Error("Error executing sen5x_get_serial_number(): %i", error);
 800e7e6:	197b      	adds	r3, r7, r5
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	5e9b      	ldrsh	r3, [r3, r2]
 800e7ec:	4a6a      	ldr	r2, [pc, #424]	@ (800e998 <probe_sen5x+0x228>)
 800e7ee:	4969      	ldr	r1, [pc, #420]	@ (800e994 <probe_sen5x+0x224>)
 800e7f0:	2001      	movs	r0, #1
 800e7f2:	f005 fac7 	bl	8013d84 <CreateLine>
      return error;
 800e7f6:	197b      	adds	r3, r7, r5
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	5e9b      	ldrsh	r3, [r3, r2]
 800e7fc:	e0c4      	b.n	800e988 <probe_sen5x+0x218>
  } else {
      Info("Serial number: %s", serial_number);
 800e7fe:	230c      	movs	r3, #12
 800e800:	18fb      	adds	r3, r7, r3
 800e802:	4a66      	ldr	r2, [pc, #408]	@ (800e99c <probe_sen5x+0x22c>)
 800e804:	4966      	ldr	r1, [pc, #408]	@ (800e9a0 <probe_sen5x+0x230>)
 800e806:	2002      	movs	r0, #2
 800e808:	f005 fabc 	bl	8013d84 <CreateLine>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800e80c:	2536      	movs	r5, #54	@ 0x36
 800e80e:	197c      	adds	r4, r7, r5
 800e810:	2334      	movs	r3, #52	@ 0x34
 800e812:	18fb      	adds	r3, r7, r3
 800e814:	781a      	ldrb	r2, [r3, #0]
 800e816:	4b63      	ldr	r3, [pc, #396]	@ (800e9a4 <probe_sen5x+0x234>)
 800e818:	0011      	movs	r1, r2
 800e81a:	0018      	movs	r0, r3
 800e81c:	f000 ffe2 	bl	800f7e4 <sen5x_get_product_name>
 800e820:	0003      	movs	r3, r0
 800e822:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e824:	197b      	adds	r3, r7, r5
 800e826:	2200      	movs	r2, #0
 800e828:	5e9b      	ldrsh	r3, [r3, r2]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00b      	beq.n	800e846 <probe_sen5x+0xd6>
      Error("Error executing sen5x_get_product_name(): %i", error);
 800e82e:	197b      	adds	r3, r7, r5
 800e830:	2200      	movs	r2, #0
 800e832:	5e9b      	ldrsh	r3, [r3, r2]
 800e834:	4a5c      	ldr	r2, [pc, #368]	@ (800e9a8 <probe_sen5x+0x238>)
 800e836:	4957      	ldr	r1, [pc, #348]	@ (800e994 <probe_sen5x+0x224>)
 800e838:	2001      	movs	r0, #1
 800e83a:	f005 faa3 	bl	8013d84 <CreateLine>
      return error;
 800e83e:	197b      	adds	r3, r7, r5
 800e840:	2200      	movs	r2, #0
 800e842:	5e9b      	ldrsh	r3, [r3, r2]
 800e844:	e0a0      	b.n	800e988 <probe_sen5x+0x218>
  } else {
      Info("Product name: %s", product_name);
 800e846:	4b57      	ldr	r3, [pc, #348]	@ (800e9a4 <probe_sen5x+0x234>)
 800e848:	4a58      	ldr	r2, [pc, #352]	@ (800e9ac <probe_sen5x+0x23c>)
 800e84a:	4955      	ldr	r1, [pc, #340]	@ (800e9a0 <probe_sen5x+0x230>)
 800e84c:	2002      	movs	r0, #2
 800e84e:	f005 fa99 	bl	8013d84 <CreateLine>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800e852:	2636      	movs	r6, #54	@ 0x36
 800e854:	19bc      	adds	r4, r7, r6
 800e856:	2308      	movs	r3, #8
 800e858:	18fd      	adds	r5, r7, r3
 800e85a:	2309      	movs	r3, #9
 800e85c:	18fa      	adds	r2, r7, r3
 800e85e:	230a      	movs	r3, #10
 800e860:	18f9      	adds	r1, r7, r3
 800e862:	230b      	movs	r3, #11
 800e864:	18f8      	adds	r0, r7, r3
 800e866:	1d7b      	adds	r3, r7, #5
 800e868:	9302      	str	r3, [sp, #8]
 800e86a:	1dbb      	adds	r3, r7, #6
 800e86c:	9301      	str	r3, [sp, #4]
 800e86e:	1dfb      	adds	r3, r7, #7
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	002b      	movs	r3, r5
 800e874:	f001 f862 	bl	800f93c <sen5x_get_version>
 800e878:	0003      	movs	r3, r0
 800e87a:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800e87c:	19bb      	adds	r3, r7, r6
 800e87e:	2200      	movs	r2, #0
 800e880:	5e9b      	ldrsh	r3, [r3, r2]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00b      	beq.n	800e89e <probe_sen5x+0x12e>
      Error("Error executing sen5x_get_version(): %i", error);
 800e886:	19bb      	adds	r3, r7, r6
 800e888:	2200      	movs	r2, #0
 800e88a:	5e9b      	ldrsh	r3, [r3, r2]
 800e88c:	4a48      	ldr	r2, [pc, #288]	@ (800e9b0 <probe_sen5x+0x240>)
 800e88e:	4941      	ldr	r1, [pc, #260]	@ (800e994 <probe_sen5x+0x224>)
 800e890:	2001      	movs	r0, #1
 800e892:	f005 fa77 	bl	8013d84 <CreateLine>
      return error;
 800e896:	19bb      	adds	r3, r7, r6
 800e898:	2200      	movs	r2, #0
 800e89a:	5e9b      	ldrsh	r3, [r3, r2]
 800e89c:	e074      	b.n	800e988 <probe_sen5x+0x218>
  } else {
      Info("Firmware: %u.%u, Hardware: %u.%u", firmware_major,
 800e89e:	230b      	movs	r3, #11
 800e8a0:	18fb      	adds	r3, r7, r3
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	001d      	movs	r5, r3
 800e8a6:	230a      	movs	r3, #10
 800e8a8:	18fb      	adds	r3, r7, r3
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	0018      	movs	r0, r3
 800e8ae:	2308      	movs	r3, #8
 800e8b0:	18fb      	adds	r3, r7, r3
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	001c      	movs	r4, r3
 800e8b6:	1dfb      	adds	r3, r7, #7
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	4a3e      	ldr	r2, [pc, #248]	@ (800e9b4 <probe_sen5x+0x244>)
 800e8bc:	4938      	ldr	r1, [pc, #224]	@ (800e9a0 <probe_sen5x+0x230>)
 800e8be:	9302      	str	r3, [sp, #8]
 800e8c0:	9401      	str	r4, [sp, #4]
 800e8c2:	9000      	str	r0, [sp, #0]
 800e8c4:	002b      	movs	r3, r5
 800e8c6:	2002      	movs	r0, #2
 800e8c8:	f005 fa5c 	bl	8013d84 <CreateLine>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800e8d0:	262e      	movs	r6, #46	@ 0x2e
 800e8d2:	19bb      	adds	r3, r7, r6
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800e8d8:	232c      	movs	r3, #44	@ 0x2c
 800e8da:	18fb      	adds	r3, r7, r3
 800e8dc:	2200      	movs	r2, #0
 800e8de:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800e8e0:	4935      	ldr	r1, [pc, #212]	@ (800e9b8 <probe_sen5x+0x248>)
 800e8e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8e4:	f7f2 fbac 	bl	8001040 <__aeabi_fmul>
 800e8e8:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800e8ea:	1c18      	adds	r0, r3, #0
 800e8ec:	f7f2 ff7c 	bl	80017e8 <__aeabi_f2iz>
 800e8f0:	0003      	movs	r3, r0
 800e8f2:	b218      	sxth	r0, r3
 800e8f4:	2536      	movs	r5, #54	@ 0x36
 800e8f6:	197c      	adds	r4, r7, r5
 800e8f8:	232c      	movs	r3, #44	@ 0x2c
 800e8fa:	18fb      	adds	r3, r7, r3
 800e8fc:	881a      	ldrh	r2, [r3, #0]
 800e8fe:	19bb      	adds	r3, r7, r6
 800e900:	2100      	movs	r1, #0
 800e902:	5e5b      	ldrsh	r3, [r3, r1]
 800e904:	0019      	movs	r1, r3
 800e906:	f000 ff09 	bl	800f71c <sen5x_set_temperature_offset_parameters>
 800e90a:	0003      	movs	r3, r0
 800e90c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e90e:	197b      	adds	r3, r7, r5
 800e910:	2200      	movs	r2, #0
 800e912:	5e9b      	ldrsh	r3, [r3, r2]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00b      	beq.n	800e930 <probe_sen5x+0x1c0>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800e918:	197b      	adds	r3, r7, r5
 800e91a:	2200      	movs	r2, #0
 800e91c:	5e9b      	ldrsh	r3, [r3, r2]
 800e91e:	4a27      	ldr	r2, [pc, #156]	@ (800e9bc <probe_sen5x+0x24c>)
 800e920:	491c      	ldr	r1, [pc, #112]	@ (800e994 <probe_sen5x+0x224>)
 800e922:	2001      	movs	r0, #1
 800e924:	f005 fa2e 	bl	8013d84 <CreateLine>
      return error;
 800e928:	197b      	adds	r3, r7, r5
 800e92a:	2200      	movs	r2, #0
 800e92c:	5e9b      	ldrsh	r3, [r3, r2]
 800e92e:	e02b      	b.n	800e988 <probe_sen5x+0x218>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800e930:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e932:	f7f4 ffaf 	bl	8003894 <__aeabi_f2d>
 800e936:	0002      	movs	r2, r0
 800e938:	000b      	movs	r3, r1
 800e93a:	4821      	ldr	r0, [pc, #132]	@ (800e9c0 <probe_sen5x+0x250>)
 800e93c:	4918      	ldr	r1, [pc, #96]	@ (800e9a0 <probe_sen5x+0x230>)
 800e93e:	9200      	str	r2, [sp, #0]
 800e940:	9301      	str	r3, [sp, #4]
 800e942:	0002      	movs	r2, r0
 800e944:	2002      	movs	r0, #2
 800e946:	f005 fa1d 	bl	8013d84 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800e94a:	f7fb f965 	bl	8009c18 <Check_USB_PowerOn>
 800e94e:	0003      	movs	r3, r0
 800e950:	001a      	movs	r2, r3
 800e952:	2301      	movs	r3, #1
 800e954:	4053      	eors	r3, r2
 800e956:	b2db      	uxtb	r3, r3
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d00a      	beq.n	800e972 <probe_sen5x+0x202>
    sen5x_Power_Off();
 800e95c:	f7ff fed2 	bl	800e704 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800e960:	f005 ff88 	bl	8014874 <HAL_GetTick>
 800e964:	0003      	movs	r3, r0
 800e966:	22fa      	movs	r2, #250	@ 0xfa
 800e968:	00d2      	lsls	r2, r2, #3
 800e96a:	189a      	adds	r2, r3, r2
 800e96c:	4b15      	ldr	r3, [pc, #84]	@ (800e9c4 <probe_sen5x+0x254>)
 800e96e:	601a      	str	r2, [r3, #0]
 800e970:	e006      	b.n	800e980 <probe_sen5x+0x210>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800e972:	f005 ff7f 	bl	8014874 <HAL_GetTick>
 800e976:	0003      	movs	r3, r0
 800e978:	4a13      	ldr	r2, [pc, #76]	@ (800e9c8 <probe_sen5x+0x258>)
 800e97a:	189a      	adds	r2, r3, r2
 800e97c:	4b11      	ldr	r3, [pc, #68]	@ (800e9c4 <probe_sen5x+0x254>)
 800e97e:	601a      	str	r2, [r3, #0]
  }
  return error;
 800e980:	2336      	movs	r3, #54	@ 0x36
 800e982:	18fb      	adds	r3, r7, r3
 800e984:	2200      	movs	r2, #0
 800e986:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e988:	0018      	movs	r0, r3
 800e98a:	46bd      	mov	sp, r7
 800e98c:	b00f      	add	sp, #60	@ 0x3c
 800e98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e990:	0802cf14 	.word	0x0802cf14
 800e994:	0802cec4 	.word	0x0802cec4
 800e998:	0802cf40 	.word	0x0802cf40
 800e99c:	0802cf70 	.word	0x0802cf70
 800e9a0:	0802ce58 	.word	0x0802ce58
 800e9a4:	200011c0 	.word	0x200011c0
 800e9a8:	0802cf84 	.word	0x0802cf84
 800e9ac:	0802cfb4 	.word	0x0802cfb4
 800e9b0:	0802cfc8 	.word	0x0802cfc8
 800e9b4:	0802cff0 	.word	0x0802cff0
 800e9b8:	43480000 	.word	0x43480000
 800e9bc:	0802d014 	.word	0x0802d014
 800e9c0:	0802d054 	.word	0x0802d054
 800e9c4:	200011cc 	.word	0x200011cc
 800e9c8:	00006d60 	.word	0x00006d60

0800e9cc <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800e9cc:	b590      	push	{r4, r7, lr}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800e9d2:	1dbb      	adds	r3, r7, #6
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800e9d8:	4b1b      	ldr	r3, [pc, #108]	@ (800ea48 <sen5x_lightup_measurement+0x7c>)
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d00b      	beq.n	800e9f8 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800e9e0:	4a1a      	ldr	r2, [pc, #104]	@ (800ea4c <sen5x_lightup_measurement+0x80>)
 800e9e2:	4b1b      	ldr	r3, [pc, #108]	@ (800ea50 <sen5x_lightup_measurement+0x84>)
 800e9e4:	0019      	movs	r1, r3
 800e9e6:	2002      	movs	r0, #2
 800e9e8:	f005 f9cc 	bl	8013d84 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800e9ec:	1dbc      	adds	r4, r7, #6
 800e9ee:	f000 fd21 	bl	800f434 <sen5x_start_measurement_without_pm>
 800e9f2:	0003      	movs	r3, r0
 800e9f4:	8023      	strh	r3, [r4, #0]
 800e9f6:	e00a      	b.n	800ea0e <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800e9f8:	4a16      	ldr	r2, [pc, #88]	@ (800ea54 <sen5x_lightup_measurement+0x88>)
 800e9fa:	4b15      	ldr	r3, [pc, #84]	@ (800ea50 <sen5x_lightup_measurement+0x84>)
 800e9fc:	0019      	movs	r1, r3
 800e9fe:	2002      	movs	r0, #2
 800ea00:	f005 f9c0 	bl	8013d84 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800ea04:	1dbc      	adds	r4, r7, #6
 800ea06:	f000 fce7 	bl	800f3d8 <sen5x_start_measurement>
 800ea0a:	0003      	movs	r3, r0
 800ea0c:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800ea0e:	1dbb      	adds	r3, r7, #6
 800ea10:	2200      	movs	r2, #0
 800ea12:	5e9b      	ldrsh	r3, [r3, r2]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d008      	beq.n	800ea2a <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800ea18:	1dbb      	adds	r3, r7, #6
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	5e9b      	ldrsh	r3, [r3, r2]
 800ea1e:	4a0e      	ldr	r2, [pc, #56]	@ (800ea58 <sen5x_lightup_measurement+0x8c>)
 800ea20:	490e      	ldr	r1, [pc, #56]	@ (800ea5c <sen5x_lightup_measurement+0x90>)
 800ea22:	2001      	movs	r0, #1
 800ea24:	f005 f9ae 	bl	8013d84 <CreateLine>
 800ea28:	e007      	b.n	800ea3a <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800ea2a:	f7fb f9fd 	bl	8009e28 <showTime>
    Info("sen5x_start_measurement executed");
 800ea2e:	4a0c      	ldr	r2, [pc, #48]	@ (800ea60 <sen5x_lightup_measurement+0x94>)
 800ea30:	4b07      	ldr	r3, [pc, #28]	@ (800ea50 <sen5x_lightup_measurement+0x84>)
 800ea32:	0019      	movs	r1, r3
 800ea34:	2002      	movs	r0, #2
 800ea36:	f005 f9a5 	bl	8013d84 <CreateLine>
  }
  return error;
 800ea3a:	1dbb      	adds	r3, r7, #6
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ea40:	0018      	movs	r0, r3
 800ea42:	46bd      	mov	sp, r7
 800ea44:	b003      	add	sp, #12
 800ea46:	bd90      	pop	{r4, r7, pc}
 800ea48:	200011be 	.word	0x200011be
 800ea4c:	0802d08c 	.word	0x0802d08c
 800ea50:	0802ce58 	.word	0x0802ce58
 800ea54:	0802d0b8 	.word	0x0802d0b8
 800ea58:	0802d0d8 	.word	0x0802d0d8
 800ea5c:	0802cec4 	.word	0x0802cec4
 800ea60:	0802d108 	.word	0x0802d108

0800ea64 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800ea64:	b590      	push	{r4, r7, lr}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800ea6a:	1dbb      	adds	r3, r7, #6
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800ea70:	4b21      	ldr	r3, [pc, #132]	@ (800eaf8 <sen5x_extinguish_measurement+0x94>)
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d01e      	beq.n	800eab6 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800ea78:	4a20      	ldr	r2, [pc, #128]	@ (800eafc <sen5x_extinguish_measurement+0x98>)
 800ea7a:	4b21      	ldr	r3, [pc, #132]	@ (800eb00 <sen5x_extinguish_measurement+0x9c>)
 800ea7c:	0019      	movs	r1, r3
 800ea7e:	2002      	movs	r0, #2
 800ea80:	f005 f980 	bl	8013d84 <CreateLine>
    Info("PM measurement is disabled");
 800ea84:	4a1f      	ldr	r2, [pc, #124]	@ (800eb04 <sen5x_extinguish_measurement+0xa0>)
 800ea86:	4b1e      	ldr	r3, [pc, #120]	@ (800eb00 <sen5x_extinguish_measurement+0x9c>)
 800ea88:	0019      	movs	r1, r3
 800ea8a:	2002      	movs	r0, #2
 800ea8c:	f005 f97a 	bl	8013d84 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800ea90:	1dbc      	adds	r4, r7, #6
 800ea92:	f000 fccf 	bl	800f434 <sen5x_start_measurement_without_pm>
 800ea96:	0003      	movs	r3, r0
 800ea98:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ea9a:	1dbb      	adds	r3, r7, #6
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	5e9b      	ldrsh	r3, [r3, r2]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d022      	beq.n	800eaea <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800eaa4:	1dbb      	adds	r3, r7, #6
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	5e9b      	ldrsh	r3, [r3, r2]
 800eaaa:	4a17      	ldr	r2, [pc, #92]	@ (800eb08 <sen5x_extinguish_measurement+0xa4>)
 800eaac:	4917      	ldr	r1, [pc, #92]	@ (800eb0c <sen5x_extinguish_measurement+0xa8>)
 800eaae:	2001      	movs	r0, #1
 800eab0:	f005 f968 	bl	8013d84 <CreateLine>
 800eab4:	e019      	b.n	800eaea <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800eab6:	1dbc      	adds	r4, r7, #6
 800eab8:	f000 fcea 	bl	800f490 <sen5x_stop_measurement>
 800eabc:	0003      	movs	r3, r0
 800eabe:	8023      	strh	r3, [r4, #0]
    showTime();
 800eac0:	f7fb f9b2 	bl	8009e28 <showTime>
    Info("sen5x_stop_measurement executed");
 800eac4:	4a12      	ldr	r2, [pc, #72]	@ (800eb10 <sen5x_extinguish_measurement+0xac>)
 800eac6:	4b0e      	ldr	r3, [pc, #56]	@ (800eb00 <sen5x_extinguish_measurement+0x9c>)
 800eac8:	0019      	movs	r1, r3
 800eaca:	2002      	movs	r0, #2
 800eacc:	f005 f95a 	bl	8013d84 <CreateLine>
    if (error) {
 800ead0:	1dbb      	adds	r3, r7, #6
 800ead2:	2200      	movs	r2, #0
 800ead4:	5e9b      	ldrsh	r3, [r3, r2]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d007      	beq.n	800eaea <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800eada:	1dbb      	adds	r3, r7, #6
 800eadc:	2200      	movs	r2, #0
 800eade:	5e9b      	ldrsh	r3, [r3, r2]
 800eae0:	4a0c      	ldr	r2, [pc, #48]	@ (800eb14 <sen5x_extinguish_measurement+0xb0>)
 800eae2:	490a      	ldr	r1, [pc, #40]	@ (800eb0c <sen5x_extinguish_measurement+0xa8>)
 800eae4:	2001      	movs	r0, #1
 800eae6:	f005 f94d 	bl	8013d84 <CreateLine>
    }
  }
  return error;
 800eaea:	1dbb      	adds	r3, r7, #6
 800eaec:	2200      	movs	r2, #0
 800eaee:	5e9b      	ldrsh	r3, [r3, r2]
}
 800eaf0:	0018      	movs	r0, r3
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	b003      	add	sp, #12
 800eaf6:	bd90      	pop	{r4, r7, pc}
 800eaf8:	200011be 	.word	0x200011be
 800eafc:	0802d12c 	.word	0x0802d12c
 800eb00:	0802ce58 	.word	0x0802ce58
 800eb04:	0802d164 	.word	0x0802d164
 800eb08:	0802d180 	.word	0x0802d180
 800eb0c:	0802cec4 	.word	0x0802cec4
 800eb10:	0802d1c0 	.word	0x0802d1c0
 800eb14:	0802d1e0 	.word	0x0802d1e0

0800eb18 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800eb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb1a:	b08d      	sub	sp, #52	@ 0x34
 800eb1c:	af04      	add	r7, sp, #16
 800eb1e:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800eb20:	261e      	movs	r6, #30
 800eb22:	19bb      	adds	r3, r7, r6
 800eb24:	2200      	movs	r2, #0
 800eb26:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800eb28:	19bc      	adds	r4, r7, r6
 800eb2a:	2316      	movs	r3, #22
 800eb2c:	18fd      	adds	r5, r7, r3
 800eb2e:	2318      	movs	r3, #24
 800eb30:	18fa      	adds	r2, r7, r3
 800eb32:	231a      	movs	r3, #26
 800eb34:	18f9      	adds	r1, r7, r3
 800eb36:	231c      	movs	r3, #28
 800eb38:	18f8      	adds	r0, r7, r3
 800eb3a:	230e      	movs	r3, #14
 800eb3c:	18fb      	adds	r3, r7, r3
 800eb3e:	9303      	str	r3, [sp, #12]
 800eb40:	2310      	movs	r3, #16
 800eb42:	18fb      	adds	r3, r7, r3
 800eb44:	9302      	str	r3, [sp, #8]
 800eb46:	2312      	movs	r3, #18
 800eb48:	18fb      	adds	r3, r7, r3
 800eb4a:	9301      	str	r3, [sp, #4]
 800eb4c:	2314      	movs	r3, #20
 800eb4e:	18fb      	adds	r3, r7, r3
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	002b      	movs	r3, r5
 800eb54:	f000 fd1e 	bl	800f594 <sen5x_read_measured_values>
 800eb58:	0003      	movs	r3, r0
 800eb5a:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800eb5c:	19bb      	adds	r3, r7, r6
 800eb5e:	2200      	movs	r2, #0
 800eb60:	5e9b      	ldrsh	r3, [r3, r2]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d003      	beq.n	800eb6e <sen5x_read_measurement+0x56>
    return error;
 800eb66:	19bb      	adds	r3, r7, r6
 800eb68:	2200      	movs	r2, #0
 800eb6a:	5e9b      	ldrsh	r3, [r3, r2]
 800eb6c:	e02c      	b.n	800ebc8 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800eb6e:	231c      	movs	r3, #28
 800eb70:	18fb      	adds	r3, r7, r3
 800eb72:	881a      	ldrh	r2, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800eb78:	231a      	movs	r3, #26
 800eb7a:	18fb      	adds	r3, r7, r3
 800eb7c:	881a      	ldrh	r2, [r3, #0]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800eb82:	2318      	movs	r3, #24
 800eb84:	18fb      	adds	r3, r7, r3
 800eb86:	881a      	ldrh	r2, [r3, #0]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800eb8c:	2316      	movs	r3, #22
 800eb8e:	18fb      	adds	r3, r7, r3
 800eb90:	881a      	ldrh	r2, [r3, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800eb96:	2314      	movs	r3, #20
 800eb98:	18fb      	adds	r3, r7, r3
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	5e9a      	ldrsh	r2, [r3, r2]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800eba2:	2312      	movs	r3, #18
 800eba4:	18fb      	adds	r3, r7, r3
 800eba6:	2200      	movs	r2, #0
 800eba8:	5e9a      	ldrsh	r2, [r3, r2]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800ebae:	2310      	movs	r3, #16
 800ebb0:	18fb      	adds	r3, r7, r3
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	5e9a      	ldrsh	r2, [r3, r2]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800ebba:	230e      	movs	r3, #14
 800ebbc:	18fb      	adds	r3, r7, r3
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	5e9a      	ldrsh	r2, [r3, r2]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	81da      	strh	r2, [r3, #14]
  return 0;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	0018      	movs	r0, r3
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	b009      	add	sp, #36	@ 0x24
 800ebce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebd0 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af02      	add	r7, sp, #8
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800ebd6:	4b6e      	ldr	r3, [pc, #440]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ebd8:	881b      	ldrh	r3, [r3, #0]
 800ebda:	4a6e      	ldr	r2, [pc, #440]	@ (800ed94 <sen5x_printvalues+0x1c4>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d017      	beq.n	800ec10 <sen5x_printvalues+0x40>
      Info("Mass concentration pm1p0: %.1f µg/m³", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800ebe0:	4b6b      	ldr	r3, [pc, #428]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ebe2:	881b      	ldrh	r3, [r3, #0]
 800ebe4:	0018      	movs	r0, r3
 800ebe6:	f7f2 fe1f 	bl	8001828 <__aeabi_i2f>
 800ebea:	1c03      	adds	r3, r0, #0
 800ebec:	496a      	ldr	r1, [pc, #424]	@ (800ed98 <sen5x_printvalues+0x1c8>)
 800ebee:	1c18      	adds	r0, r3, #0
 800ebf0:	f7f2 f858 	bl	8000ca4 <__aeabi_fdiv>
 800ebf4:	1c03      	adds	r3, r0, #0
 800ebf6:	1c18      	adds	r0, r3, #0
 800ebf8:	f7f4 fe4c 	bl	8003894 <__aeabi_f2d>
 800ebfc:	0002      	movs	r2, r0
 800ebfe:	000b      	movs	r3, r1
 800ec00:	4866      	ldr	r0, [pc, #408]	@ (800ed9c <sen5x_printvalues+0x1cc>)
 800ec02:	4967      	ldr	r1, [pc, #412]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ec04:	9200      	str	r2, [sp, #0]
 800ec06:	9301      	str	r3, [sp, #4]
 800ec08:	0002      	movs	r2, r0
 800ec0a:	2002      	movs	r0, #2
 800ec0c:	f005 f8ba 	bl	8013d84 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ec10:	4b5f      	ldr	r3, [pc, #380]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ec12:	885b      	ldrh	r3, [r3, #2]
 800ec14:	4a5f      	ldr	r2, [pc, #380]	@ (800ed94 <sen5x_printvalues+0x1c4>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d017      	beq.n	800ec4a <sen5x_printvalues+0x7a>
        Info("Mass concentration pm2p5: %.1f µg/m³", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800ec1a:	4b5d      	ldr	r3, [pc, #372]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ec1c:	885b      	ldrh	r3, [r3, #2]
 800ec1e:	0018      	movs	r0, r3
 800ec20:	f7f2 fe02 	bl	8001828 <__aeabi_i2f>
 800ec24:	1c03      	adds	r3, r0, #0
 800ec26:	495c      	ldr	r1, [pc, #368]	@ (800ed98 <sen5x_printvalues+0x1c8>)
 800ec28:	1c18      	adds	r0, r3, #0
 800ec2a:	f7f2 f83b 	bl	8000ca4 <__aeabi_fdiv>
 800ec2e:	1c03      	adds	r3, r0, #0
 800ec30:	1c18      	adds	r0, r3, #0
 800ec32:	f7f4 fe2f 	bl	8003894 <__aeabi_f2d>
 800ec36:	0002      	movs	r2, r0
 800ec38:	000b      	movs	r3, r1
 800ec3a:	485a      	ldr	r0, [pc, #360]	@ (800eda4 <sen5x_printvalues+0x1d4>)
 800ec3c:	4958      	ldr	r1, [pc, #352]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ec3e:	9200      	str	r2, [sp, #0]
 800ec40:	9301      	str	r3, [sp, #4]
 800ec42:	0002      	movs	r2, r0
 800ec44:	2002      	movs	r0, #2
 800ec46:	f005 f89d 	bl	8013d84 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800ec4a:	4b51      	ldr	r3, [pc, #324]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ec4c:	889b      	ldrh	r3, [r3, #4]
 800ec4e:	4a51      	ldr	r2, [pc, #324]	@ (800ed94 <sen5x_printvalues+0x1c4>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d017      	beq.n	800ec84 <sen5x_printvalues+0xb4>
        Info("Mass concentration pm4p0: %.1f µg/m³", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800ec54:	4b4e      	ldr	r3, [pc, #312]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ec56:	889b      	ldrh	r3, [r3, #4]
 800ec58:	0018      	movs	r0, r3
 800ec5a:	f7f2 fde5 	bl	8001828 <__aeabi_i2f>
 800ec5e:	1c03      	adds	r3, r0, #0
 800ec60:	494d      	ldr	r1, [pc, #308]	@ (800ed98 <sen5x_printvalues+0x1c8>)
 800ec62:	1c18      	adds	r0, r3, #0
 800ec64:	f7f2 f81e 	bl	8000ca4 <__aeabi_fdiv>
 800ec68:	1c03      	adds	r3, r0, #0
 800ec6a:	1c18      	adds	r0, r3, #0
 800ec6c:	f7f4 fe12 	bl	8003894 <__aeabi_f2d>
 800ec70:	0002      	movs	r2, r0
 800ec72:	000b      	movs	r3, r1
 800ec74:	484c      	ldr	r0, [pc, #304]	@ (800eda8 <sen5x_printvalues+0x1d8>)
 800ec76:	494a      	ldr	r1, [pc, #296]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ec78:	9200      	str	r2, [sp, #0]
 800ec7a:	9301      	str	r3, [sp, #4]
 800ec7c:	0002      	movs	r2, r0
 800ec7e:	2002      	movs	r0, #2
 800ec80:	f005 f880 	bl	8013d84 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800ec84:	4b42      	ldr	r3, [pc, #264]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ec86:	88db      	ldrh	r3, [r3, #6]
 800ec88:	4a42      	ldr	r2, [pc, #264]	@ (800ed94 <sen5x_printvalues+0x1c4>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d017      	beq.n	800ecbe <sen5x_printvalues+0xee>
        Info("Mass concentration pm10p0: %.1f µg/m³", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800ec8e:	4b40      	ldr	r3, [pc, #256]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ec90:	88db      	ldrh	r3, [r3, #6]
 800ec92:	0018      	movs	r0, r3
 800ec94:	f7f2 fdc8 	bl	8001828 <__aeabi_i2f>
 800ec98:	1c03      	adds	r3, r0, #0
 800ec9a:	493f      	ldr	r1, [pc, #252]	@ (800ed98 <sen5x_printvalues+0x1c8>)
 800ec9c:	1c18      	adds	r0, r3, #0
 800ec9e:	f7f2 f801 	bl	8000ca4 <__aeabi_fdiv>
 800eca2:	1c03      	adds	r3, r0, #0
 800eca4:	1c18      	adds	r0, r3, #0
 800eca6:	f7f4 fdf5 	bl	8003894 <__aeabi_f2d>
 800ecaa:	0002      	movs	r2, r0
 800ecac:	000b      	movs	r3, r1
 800ecae:	483f      	ldr	r0, [pc, #252]	@ (800edac <sen5x_printvalues+0x1dc>)
 800ecb0:	493b      	ldr	r1, [pc, #236]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ecb2:	9200      	str	r2, [sp, #0]
 800ecb4:	9301      	str	r3, [sp, #4]
 800ecb6:	0002      	movs	r2, r0
 800ecb8:	2002      	movs	r0, #2
 800ecba:	f005 f863 	bl	8013d84 <CreateLine>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800ecbe:	4b34      	ldr	r3, [pc, #208]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ecc0:	2208      	movs	r2, #8
 800ecc2:	5e9b      	ldrsh	r3, [r3, r2]
 800ecc4:	4a3a      	ldr	r2, [pc, #232]	@ (800edb0 <sen5x_printvalues+0x1e0>)
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d018      	beq.n	800ecfc <sen5x_printvalues+0x12c>
        Info("sen5x Ambient humidity: %.1f %%RH", sen5x_data.ambient_humidity / 100.0f);
 800ecca:	4b31      	ldr	r3, [pc, #196]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800eccc:	2208      	movs	r2, #8
 800ecce:	5e9b      	ldrsh	r3, [r3, r2]
 800ecd0:	0018      	movs	r0, r3
 800ecd2:	f7f2 fda9 	bl	8001828 <__aeabi_i2f>
 800ecd6:	1c03      	adds	r3, r0, #0
 800ecd8:	4936      	ldr	r1, [pc, #216]	@ (800edb4 <sen5x_printvalues+0x1e4>)
 800ecda:	1c18      	adds	r0, r3, #0
 800ecdc:	f7f1 ffe2 	bl	8000ca4 <__aeabi_fdiv>
 800ece0:	1c03      	adds	r3, r0, #0
 800ece2:	1c18      	adds	r0, r3, #0
 800ece4:	f7f4 fdd6 	bl	8003894 <__aeabi_f2d>
 800ece8:	0002      	movs	r2, r0
 800ecea:	000b      	movs	r3, r1
 800ecec:	4832      	ldr	r0, [pc, #200]	@ (800edb8 <sen5x_printvalues+0x1e8>)
 800ecee:	492c      	ldr	r1, [pc, #176]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ecf0:	9200      	str	r2, [sp, #0]
 800ecf2:	9301      	str	r3, [sp, #4]
 800ecf4:	0002      	movs	r2, r0
 800ecf6:	2002      	movs	r0, #2
 800ecf8:	f005 f844 	bl	8013d84 <CreateLine>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800ecfc:	4b24      	ldr	r3, [pc, #144]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ecfe:	220a      	movs	r2, #10
 800ed00:	5e9b      	ldrsh	r3, [r3, r2]
 800ed02:	4a2b      	ldr	r2, [pc, #172]	@ (800edb0 <sen5x_printvalues+0x1e0>)
 800ed04:	4293      	cmp	r3, r2
 800ed06:	d018      	beq.n	800ed3a <sen5x_printvalues+0x16a>
        Info("sen5x Ambient temperature: %.1f °C", sen5x_data.ambient_temperature / 200.0f);
 800ed08:	4b21      	ldr	r3, [pc, #132]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ed0a:	220a      	movs	r2, #10
 800ed0c:	5e9b      	ldrsh	r3, [r3, r2]
 800ed0e:	0018      	movs	r0, r3
 800ed10:	f7f2 fd8a 	bl	8001828 <__aeabi_i2f>
 800ed14:	1c03      	adds	r3, r0, #0
 800ed16:	4929      	ldr	r1, [pc, #164]	@ (800edbc <sen5x_printvalues+0x1ec>)
 800ed18:	1c18      	adds	r0, r3, #0
 800ed1a:	f7f1 ffc3 	bl	8000ca4 <__aeabi_fdiv>
 800ed1e:	1c03      	adds	r3, r0, #0
 800ed20:	1c18      	adds	r0, r3, #0
 800ed22:	f7f4 fdb7 	bl	8003894 <__aeabi_f2d>
 800ed26:	0002      	movs	r2, r0
 800ed28:	000b      	movs	r3, r1
 800ed2a:	4825      	ldr	r0, [pc, #148]	@ (800edc0 <sen5x_printvalues+0x1f0>)
 800ed2c:	491c      	ldr	r1, [pc, #112]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ed2e:	9200      	str	r2, [sp, #0]
 800ed30:	9301      	str	r3, [sp, #4]
 800ed32:	0002      	movs	r2, r0
 800ed34:	2002      	movs	r0, #2
 800ed36:	f005 f825 	bl	8013d84 <CreateLine>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800ed3a:	4b15      	ldr	r3, [pc, #84]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ed3c:	220c      	movs	r2, #12
 800ed3e:	5e9b      	ldrsh	r3, [r3, r2]
 800ed40:	4a1b      	ldr	r2, [pc, #108]	@ (800edb0 <sen5x_printvalues+0x1e0>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d00d      	beq.n	800ed62 <sen5x_printvalues+0x192>
        Info("sen55 VOC index: %d", sen5x_data.voc_index / 10);
 800ed46:	4b12      	ldr	r3, [pc, #72]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ed48:	220c      	movs	r2, #12
 800ed4a:	5e9b      	ldrsh	r3, [r3, r2]
 800ed4c:	210a      	movs	r1, #10
 800ed4e:	0018      	movs	r0, r3
 800ed50:	f7f1 fab2 	bl	80002b8 <__divsi3>
 800ed54:	0003      	movs	r3, r0
 800ed56:	b21b      	sxth	r3, r3
 800ed58:	4a1a      	ldr	r2, [pc, #104]	@ (800edc4 <sen5x_printvalues+0x1f4>)
 800ed5a:	4911      	ldr	r1, [pc, #68]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ed5c:	2002      	movs	r0, #2
 800ed5e:	f005 f811 	bl	8013d84 <CreateLine>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800ed62:	4b0b      	ldr	r3, [pc, #44]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ed64:	220e      	movs	r2, #14
 800ed66:	5e9b      	ldrsh	r3, [r3, r2]
 800ed68:	4a11      	ldr	r2, [pc, #68]	@ (800edb0 <sen5x_printvalues+0x1e0>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d00d      	beq.n	800ed8a <sen5x_printvalues+0x1ba>
        Info("sen55 NOx index: %d", sen5x_data.nox_index / 10);
 800ed6e:	4b08      	ldr	r3, [pc, #32]	@ (800ed90 <sen5x_printvalues+0x1c0>)
 800ed70:	220e      	movs	r2, #14
 800ed72:	5e9b      	ldrsh	r3, [r3, r2]
 800ed74:	210a      	movs	r1, #10
 800ed76:	0018      	movs	r0, r3
 800ed78:	f7f1 fa9e 	bl	80002b8 <__divsi3>
 800ed7c:	0003      	movs	r3, r0
 800ed7e:	b21b      	sxth	r3, r3
 800ed80:	4a11      	ldr	r2, [pc, #68]	@ (800edc8 <sen5x_printvalues+0x1f8>)
 800ed82:	4907      	ldr	r1, [pc, #28]	@ (800eda0 <sen5x_printvalues+0x1d0>)
 800ed84:	2002      	movs	r0, #2
 800ed86:	f004 fffd 	bl	8013d84 <CreateLine>
  }
}
 800ed8a:	46c0      	nop			@ (mov r8, r8)
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	200011d0 	.word	0x200011d0
 800ed94:	0000ffff 	.word	0x0000ffff
 800ed98:	41200000 	.word	0x41200000
 800ed9c:	0802d210 	.word	0x0802d210
 800eda0:	0802ce58 	.word	0x0802ce58
 800eda4:	0802d238 	.word	0x0802d238
 800eda8:	0802d260 	.word	0x0802d260
 800edac:	0802d288 	.word	0x0802d288
 800edb0:	00007fff 	.word	0x00007fff
 800edb4:	42c80000 	.word	0x42c80000
 800edb8:	0802d2b0 	.word	0x0802d2b0
 800edbc:	43480000 	.word	0x43480000
 800edc0:	0802d2d4 	.word	0x0802d2d4
 800edc4:	0802d2f8 	.word	0x0802d2f8
 800edc8:	0802d30c 	.word	0x0802d30c

0800edcc <sen5xStore>:

void sen5xStore() {
 800edcc:	b5b0      	push	{r4, r5, r7, lr}
 800edce:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800edd0:	4b41      	ldr	r3, [pc, #260]	@ (800eed8 <sen5xStore+0x10c>)
 800edd2:	881b      	ldrh	r3, [r3, #0]
 800edd4:	4a41      	ldr	r2, [pc, #260]	@ (800eedc <sen5xStore+0x110>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d004      	beq.n	800ede4 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800edda:	4b3f      	ldr	r3, [pc, #252]	@ (800eed8 <sen5xStore+0x10c>)
 800eddc:	881b      	ldrh	r3, [r3, #0]
 800edde:	0018      	movs	r0, r3
 800ede0:	f7f5 fef0 	bl	8004bc4 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ede4:	4b3c      	ldr	r3, [pc, #240]	@ (800eed8 <sen5xStore+0x10c>)
 800ede6:	885b      	ldrh	r3, [r3, #2]
 800ede8:	4a3c      	ldr	r2, [pc, #240]	@ (800eedc <sen5xStore+0x110>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d004      	beq.n	800edf8 <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800edee:	4b3a      	ldr	r3, [pc, #232]	@ (800eed8 <sen5xStore+0x10c>)
 800edf0:	885b      	ldrh	r3, [r3, #2]
 800edf2:	0018      	movs	r0, r3
 800edf4:	f7f5 ff12 	bl	8004c1c <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800edf8:	4b37      	ldr	r3, [pc, #220]	@ (800eed8 <sen5xStore+0x10c>)
 800edfa:	889b      	ldrh	r3, [r3, #4]
 800edfc:	4a37      	ldr	r2, [pc, #220]	@ (800eedc <sen5xStore+0x110>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d004      	beq.n	800ee0c <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800ee02:	4b35      	ldr	r3, [pc, #212]	@ (800eed8 <sen5xStore+0x10c>)
 800ee04:	889b      	ldrh	r3, [r3, #4]
 800ee06:	0018      	movs	r0, r3
 800ee08:	f7f5 ff34 	bl	8004c74 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800ee0c:	4b32      	ldr	r3, [pc, #200]	@ (800eed8 <sen5xStore+0x10c>)
 800ee0e:	88db      	ldrh	r3, [r3, #6]
 800ee10:	4a32      	ldr	r2, [pc, #200]	@ (800eedc <sen5xStore+0x110>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d004      	beq.n	800ee20 <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800ee16:	4b30      	ldr	r3, [pc, #192]	@ (800eed8 <sen5xStore+0x10c>)
 800ee18:	88db      	ldrh	r3, [r3, #6]
 800ee1a:	0018      	movs	r0, r3
 800ee1c:	f7f5 ff56 	bl	8004ccc <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800ee20:	4b2f      	ldr	r3, [pc, #188]	@ (800eee0 <sen5xStore+0x114>)
 800ee22:	791b      	ldrb	r3, [r3, #4]
 800ee24:	2b34      	cmp	r3, #52	@ 0x34
 800ee26:	d003      	beq.n	800ee30 <sen5xStore+0x64>
 800ee28:	4b2d      	ldr	r3, [pc, #180]	@ (800eee0 <sen5xStore+0x114>)
 800ee2a:	791b      	ldrb	r3, [r3, #4]
 800ee2c:	2b35      	cmp	r3, #53	@ 0x35
 800ee2e:	d14f      	bne.n	800eed0 <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800ee30:	4b29      	ldr	r3, [pc, #164]	@ (800eed8 <sen5xStore+0x10c>)
 800ee32:	220a      	movs	r2, #10
 800ee34:	5e9b      	ldrsh	r3, [r3, r2]
 800ee36:	0018      	movs	r0, r3
 800ee38:	f7f2 fcf6 	bl	8001828 <__aeabi_i2f>
 800ee3c:	1c04      	adds	r4, r0, #0
 800ee3e:	4b26      	ldr	r3, [pc, #152]	@ (800eed8 <sen5xStore+0x10c>)
 800ee40:	2208      	movs	r2, #8
 800ee42:	5e9b      	ldrsh	r3, [r3, r2]
 800ee44:	0018      	movs	r0, r3
 800ee46:	f7f2 fcef 	bl	8001828 <__aeabi_i2f>
 800ee4a:	1c03      	adds	r3, r0, #0
 800ee4c:	1c19      	adds	r1, r3, #0
 800ee4e:	1c20      	adds	r0, r4, #0
 800ee50:	f7f5 ff86 	bl	8004d60 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800ee54:	4b23      	ldr	r3, [pc, #140]	@ (800eee4 <sen5xStore+0x118>)
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	2201      	movs	r2, #1
 800ee5a:	4053      	eors	r3, r2
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d103      	bne.n	800ee6a <sen5xStore+0x9e>
 800ee62:	4b21      	ldr	r3, [pc, #132]	@ (800eee8 <sen5xStore+0x11c>)
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d032      	beq.n	800eed0 <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800ee6a:	4b1b      	ldr	r3, [pc, #108]	@ (800eed8 <sen5xStore+0x10c>)
 800ee6c:	220c      	movs	r2, #12
 800ee6e:	5e9b      	ldrsh	r3, [r3, r2]
 800ee70:	4a1e      	ldr	r2, [pc, #120]	@ (800eeec <sen5xStore+0x120>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d019      	beq.n	800eeaa <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800ee76:	4b18      	ldr	r3, [pc, #96]	@ (800eed8 <sen5xStore+0x10c>)
 800ee78:	220c      	movs	r2, #12
 800ee7a:	5e9b      	ldrsh	r3, [r3, r2]
 800ee7c:	210a      	movs	r1, #10
 800ee7e:	0018      	movs	r0, r3
 800ee80:	f7f1 fa1a 	bl	80002b8 <__divsi3>
 800ee84:	0003      	movs	r3, r0
 800ee86:	b21b      	sxth	r3, r3
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	0018      	movs	r0, r3
 800ee8c:	f003 ff02 	bl	8012c94 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800ee90:	4b11      	ldr	r3, [pc, #68]	@ (800eed8 <sen5xStore+0x10c>)
 800ee92:	220c      	movs	r2, #12
 800ee94:	5e9b      	ldrsh	r3, [r3, r2]
 800ee96:	210a      	movs	r1, #10
 800ee98:	0018      	movs	r0, r3
 800ee9a:	f7f1 fa0d 	bl	80002b8 <__divsi3>
 800ee9e:	0003      	movs	r3, r0
 800eea0:	b21b      	sxth	r3, r3
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	0018      	movs	r0, r3
 800eea6:	f7f5 fe05 	bl	8004ab4 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800eeaa:	4b0b      	ldr	r3, [pc, #44]	@ (800eed8 <sen5xStore+0x10c>)
 800eeac:	220e      	movs	r2, #14
 800eeae:	5e9b      	ldrsh	r3, [r3, r2]
 800eeb0:	4a0e      	ldr	r2, [pc, #56]	@ (800eeec <sen5xStore+0x120>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d00c      	beq.n	800eed0 <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800eeb6:	4b08      	ldr	r3, [pc, #32]	@ (800eed8 <sen5xStore+0x10c>)
 800eeb8:	220e      	movs	r2, #14
 800eeba:	5e9b      	ldrsh	r3, [r3, r2]
 800eebc:	210a      	movs	r1, #10
 800eebe:	0018      	movs	r0, r3
 800eec0:	f7f1 f9fa 	bl	80002b8 <__divsi3>
 800eec4:	0003      	movs	r3, r0
 800eec6:	b21b      	sxth	r3, r3
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	0018      	movs	r0, r3
 800eecc:	f7f5 ff2a 	bl	8004d24 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800eed0:	46c0      	nop			@ (mov r8, r8)
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bdb0      	pop	{r4, r5, r7, pc}
 800eed6:	46c0      	nop			@ (mov r8, r8)
 800eed8:	200011d0 	.word	0x200011d0
 800eedc:	0000ffff 	.word	0x0000ffff
 800eee0:	200011c0 	.word	0x200011c0
 800eee4:	200011be 	.word	0x200011be
 800eee8:	2000214d 	.word	0x2000214d
 800eeec:	00007fff 	.word	0x00007fff

0800eef0 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800eef0:	b590      	push	{r4, r7, lr}
 800eef2:	b085      	sub	sp, #20
 800eef4:	af02      	add	r7, sp, #8
 800eef6:	6039      	str	r1, [r7, #0]
 800eef8:	0011      	movs	r1, r2
 800eefa:	1dfb      	adds	r3, r7, #7
 800eefc:	1c02      	adds	r2, r0, #0
 800eefe:	701a      	strb	r2, [r3, #0]
 800ef00:	1d3b      	adds	r3, r7, #4
 800ef02:	1c0a      	adds	r2, r1, #0
 800ef04:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800ef06:	1dfb      	adds	r3, r7, #7
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	18db      	adds	r3, r3, r3
 800ef0e:	b299      	uxth	r1, r3
 800ef10:	1d3b      	adds	r3, r7, #4
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	683a      	ldr	r2, [r7, #0]
 800ef16:	4805      	ldr	r0, [pc, #20]	@ (800ef2c <sensirion_i2c_hal_read+0x3c>)
 800ef18:	2464      	movs	r4, #100	@ 0x64
 800ef1a:	9400      	str	r4, [sp, #0]
 800ef1c:	f007 f8f4 	bl	8016108 <HAL_I2C_Master_Receive>
 800ef20:	0003      	movs	r3, r0
 800ef22:	b25b      	sxtb	r3, r3
}
 800ef24:	0018      	movs	r0, r3
 800ef26:	46bd      	mov	sp, r7
 800ef28:	b003      	add	sp, #12
 800ef2a:	bd90      	pop	{r4, r7, pc}
 800ef2c:	20000f8c 	.word	0x20000f8c

0800ef30 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800ef30:	b590      	push	{r4, r7, lr}
 800ef32:	b085      	sub	sp, #20
 800ef34:	af02      	add	r7, sp, #8
 800ef36:	6039      	str	r1, [r7, #0]
 800ef38:	0011      	movs	r1, r2
 800ef3a:	1dfb      	adds	r3, r7, #7
 800ef3c:	1c02      	adds	r2, r0, #0
 800ef3e:	701a      	strb	r2, [r3, #0]
 800ef40:	1d3b      	adds	r3, r7, #4
 800ef42:	1c0a      	adds	r2, r1, #0
 800ef44:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800ef46:	1dfb      	adds	r3, r7, #7
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	18db      	adds	r3, r3, r3
 800ef4e:	b299      	uxth	r1, r3
 800ef50:	1d3b      	adds	r3, r7, #4
 800ef52:	881b      	ldrh	r3, [r3, #0]
 800ef54:	683a      	ldr	r2, [r7, #0]
 800ef56:	4805      	ldr	r0, [pc, #20]	@ (800ef6c <sensirion_i2c_hal_write+0x3c>)
 800ef58:	2464      	movs	r4, #100	@ 0x64
 800ef5a:	9400      	str	r4, [sp, #0]
 800ef5c:	f006 ffcc 	bl	8015ef8 <HAL_I2C_Master_Transmit>
 800ef60:	0003      	movs	r3, r0
 800ef62:	b25b      	sxtb	r3, r3
}
 800ef64:	0018      	movs	r0, r3
 800ef66:	46bd      	mov	sp, r7
 800ef68:	b003      	add	sp, #12
 800ef6a:	bd90      	pop	{r4, r7, pc}
 800ef6c:	20000f8c 	.word	0x20000f8c

0800ef70 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	22fa      	movs	r2, #250	@ 0xfa
 800ef7c:	0091      	lsls	r1, r2, #2
 800ef7e:	0018      	movs	r0, r3
 800ef80:	f7f1 f910 	bl	80001a4 <__udivsi3>
 800ef84:	0003      	movs	r3, r0
 800ef86:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	22fa      	movs	r2, #250	@ 0xfa
 800ef8c:	0091      	lsls	r1, r2, #2
 800ef8e:	0018      	movs	r0, r3
 800ef90:	f7f1 f98e 	bl	80002b0 <__aeabi_uidivmod>
 800ef94:	1e0b      	subs	r3, r1, #0
 800ef96:	d002      	beq.n	800ef9e <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	0018      	movs	r0, r3
 800efa2:	f005 fc71 	bl	8014888 <HAL_Delay>
}
 800efa6:	46c0      	nop			@ (mov r8, r8)
 800efa8:	46bd      	mov	sp, r7
 800efaa:	b004      	add	sp, #16
 800efac:	bd80      	pop	{r7, pc}
	...

0800efb0 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800efb6:	1d3b      	adds	r3, r7, #4
 800efb8:	0018      	movs	r0, r3
 800efba:	f000 fd2b 	bl	800fa14 <sen5x_read_device_status>
 800efbe:	0003      	movs	r3, r0
 800efc0:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	4a2c      	ldr	r2, [pc, #176]	@ (800f078 <sen5x_check_for_errors+0xc8>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d107      	bne.n	800efda <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800efca:	4a2c      	ldr	r2, [pc, #176]	@ (800f07c <sen5x_check_for_errors+0xcc>)
 800efcc:	4b2c      	ldr	r3, [pc, #176]	@ (800f080 <sen5x_check_for_errors+0xd0>)
 800efce:	0019      	movs	r1, r3
 800efd0:	2001      	movs	r0, #1
 800efd2:	f004 fed7 	bl	8013d84 <CreateLine>
    return true;
 800efd6:	2301      	movs	r3, #1
 800efd8:	e049      	b.n	800f06e <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d101      	bne.n	800efe4 <sen5x_check_for_errors+0x34>
    return false;
 800efe0:	2300      	movs	r3, #0
 800efe2:	e044      	b.n	800f06e <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800efe4:	687a      	ldr	r2, [r7, #4]
 800efe6:	2380      	movs	r3, #128	@ 0x80
 800efe8:	039b      	lsls	r3, r3, #14
 800efea:	4013      	ands	r3, r2
 800efec:	d005      	beq.n	800effa <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800efee:	4a25      	ldr	r2, [pc, #148]	@ (800f084 <sen5x_check_for_errors+0xd4>)
 800eff0:	4b25      	ldr	r3, [pc, #148]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800eff2:	0019      	movs	r1, r3
 800eff4:	2003      	movs	r0, #3
 800eff6:	f004 fec5 	bl	8013d84 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	2380      	movs	r3, #128	@ 0x80
 800effe:	031b      	lsls	r3, r3, #12
 800f000:	4013      	ands	r3, r2
 800f002:	d005      	beq.n	800f010 <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800f004:	4a21      	ldr	r2, [pc, #132]	@ (800f08c <sen5x_check_for_errors+0xdc>)
 800f006:	4b20      	ldr	r3, [pc, #128]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800f008:	0019      	movs	r1, r3
 800f00a:	2003      	movs	r0, #3
 800f00c:	f004 feba 	bl	8013d84 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2280      	movs	r2, #128	@ 0x80
 800f014:	4013      	ands	r3, r2
 800f016:	d005      	beq.n	800f024 <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800f018:	4a1d      	ldr	r2, [pc, #116]	@ (800f090 <sen5x_check_for_errors+0xe0>)
 800f01a:	4b1b      	ldr	r3, [pc, #108]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800f01c:	0019      	movs	r1, r3
 800f01e:	2003      	movs	r0, #3
 800f020:	f004 feb0 	bl	8013d84 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2240      	movs	r2, #64	@ 0x40
 800f028:	4013      	ands	r3, r2
 800f02a:	d005      	beq.n	800f038 <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800f02c:	4a19      	ldr	r2, [pc, #100]	@ (800f094 <sen5x_check_for_errors+0xe4>)
 800f02e:	4b16      	ldr	r3, [pc, #88]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800f030:	0019      	movs	r1, r3
 800f032:	2003      	movs	r0, #3
 800f034:	f004 fea6 	bl	8013d84 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2220      	movs	r2, #32
 800f03c:	4013      	ands	r3, r2
 800f03e:	d005      	beq.n	800f04c <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800f040:	4a15      	ldr	r2, [pc, #84]	@ (800f098 <sen5x_check_for_errors+0xe8>)
 800f042:	4b11      	ldr	r3, [pc, #68]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800f044:	0019      	movs	r1, r3
 800f046:	2003      	movs	r0, #3
 800f048:	f004 fe9c 	bl	8013d84 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2210      	movs	r2, #16
 800f050:	4013      	ands	r3, r2
 800f052:	d005      	beq.n	800f060 <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800f054:	4a11      	ldr	r2, [pc, #68]	@ (800f09c <sen5x_check_for_errors+0xec>)
 800f056:	4b0c      	ldr	r3, [pc, #48]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800f058:	0019      	movs	r1, r3
 800f05a:	2003      	movs	r0, #3
 800f05c:	f004 fe92 	bl	8013d84 <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4a0f      	ldr	r2, [pc, #60]	@ (800f0a0 <sen5x_check_for_errors+0xf0>)
 800f064:	4908      	ldr	r1, [pc, #32]	@ (800f088 <sen5x_check_for_errors+0xd8>)
 800f066:	2003      	movs	r0, #3
 800f068:	f004 fe8c 	bl	8013d84 <CreateLine>
  return true;
 800f06c:	2301      	movs	r3, #1
}
 800f06e:	0018      	movs	r0, r3
 800f070:	46bd      	mov	sp, r7
 800f072:	b002      	add	sp, #8
 800f074:	bd80      	pop	{r7, pc}
 800f076:	46c0      	nop			@ (mov r8, r8)
 800f078:	0000d206 	.word	0x0000d206
 800f07c:	0802d320 	.word	0x0802d320
 800f080:	0802cec4 	.word	0x0802cec4
 800f084:	0802d360 	.word	0x0802d360
 800f088:	0802ce98 	.word	0x0802ce98
 800f08c:	0802d380 	.word	0x0802d380
 800f090:	0802d39c 	.word	0x0802d39c
 800f094:	0802d3c0 	.word	0x0802d3c0
 800f098:	0802d3e0 	.word	0x0802d3e0
 800f09c:	0802d3f4 	.word	0x0802d3f4
 800f0a0:	0802d430 	.word	0x0802d430

0800f0a4 <set_light_on_state>:

void set_light_on_state(void) {
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800f0a8:	4b15      	ldr	r3, [pc, #84]	@ (800f100 <set_light_on_state+0x5c>)
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	4053      	eors	r3, r2
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d008      	beq.n	800f0c8 <set_light_on_state+0x24>
    sen5x_Power_On();
 800f0b6:	f7ff faf5 	bl	800e6a4 <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800f0ba:	4a12      	ldr	r2, [pc, #72]	@ (800f104 <set_light_on_state+0x60>)
 800f0bc:	4b12      	ldr	r3, [pc, #72]	@ (800f108 <set_light_on_state+0x64>)
 800f0be:	0019      	movs	r1, r3
 800f0c0:	2003      	movs	r0, #3
 800f0c2:	f004 fe5f 	bl	8013d84 <CreateLine>
 800f0c6:	e00a      	b.n	800f0de <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800f0c8:	f005 fbd4 	bl	8014874 <HAL_GetTick>
 800f0cc:	0002      	movs	r2, r0
 800f0ce:	4b0f      	ldr	r3, [pc, #60]	@ (800f10c <set_light_on_state+0x68>)
 800f0d0:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800f0d2:	4a0f      	ldr	r2, [pc, #60]	@ (800f110 <set_light_on_state+0x6c>)
 800f0d4:	4b0c      	ldr	r3, [pc, #48]	@ (800f108 <set_light_on_state+0x64>)
 800f0d6:	0019      	movs	r1, r3
 800f0d8:	2003      	movs	r0, #3
 800f0da:	f004 fe53 	bl	8013d84 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800f0de:	f7ff fc75 	bl	800e9cc <sen5x_lightup_measurement>
 800f0e2:	1e03      	subs	r3, r0, #0
 800f0e4:	d005      	beq.n	800f0f2 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800f0e6:	4a0b      	ldr	r2, [pc, #44]	@ (800f114 <set_light_on_state+0x70>)
 800f0e8:	4b0b      	ldr	r3, [pc, #44]	@ (800f118 <set_light_on_state+0x74>)
 800f0ea:	0019      	movs	r1, r3
 800f0ec:	2001      	movs	r0, #1
 800f0ee:	f004 fe49 	bl	8013d84 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800f0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800f11c <set_light_on_state+0x78>)
 800f0f4:	2203      	movs	r2, #3
 800f0f6:	701a      	strb	r2, [r3, #0]
}
 800f0f8:	46c0      	nop			@ (mov r8, r8)
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	46c0      	nop			@ (mov r8, r8)
 800f100:	200011bd 	.word	0x200011bd
 800f104:	0802d460 	.word	0x0802d460
 800f108:	0802ce98 	.word	0x0802ce98
 800f10c:	200011cc 	.word	0x200011cc
 800f110:	0802d480 	.word	0x0802d480
 800f114:	0802d498 	.word	0x0802d498
 800f118:	0802cec4 	.word	0x0802cec4
 800f11c:	200000aa 	.word	0x200000aa

0800f120 <sen5x_statemachine>:

void sen5x_statemachine() {
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800f126:	1dfb      	adds	r3, r7, #7
 800f128:	2200      	movs	r2, #0
 800f12a:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800f12c:	4b92      	ldr	r3, [pc, #584]	@ (800f378 <sen5x_statemachine+0x258>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	0018      	movs	r0, r3
 800f132:	f004 fdd1 	bl	8013cd8 <TimestampIsReached>
 800f136:	1e03      	subs	r3, r0, #0
 800f138:	d100      	bne.n	800f13c <sen5x_statemachine+0x1c>
 800f13a:	e118      	b.n	800f36e <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800f13c:	4b8f      	ldr	r3, [pc, #572]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	2b05      	cmp	r3, #5
 800f142:	d900      	bls.n	800f146 <sen5x_statemachine+0x26>
 800f144:	e113      	b.n	800f36e <sen5x_statemachine+0x24e>
 800f146:	009a      	lsls	r2, r3, #2
 800f148:	4b8d      	ldr	r3, [pc, #564]	@ (800f380 <sen5x_statemachine+0x260>)
 800f14a:	18d3      	adds	r3, r2, r3
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800f150:	4a8c      	ldr	r2, [pc, #560]	@ (800f384 <sen5x_statemachine+0x264>)
 800f152:	4b8d      	ldr	r3, [pc, #564]	@ (800f388 <sen5x_statemachine+0x268>)
 800f154:	0019      	movs	r1, r3
 800f156:	2001      	movs	r0, #1
 800f158:	f004 fe14 	bl	8013d84 <CreateLine>
      SetPMSensorStatus(false);
 800f15c:	2000      	movs	r0, #0
 800f15e:	f7fe f9fb 	bl	800d558 <SetPMSensorStatus>
      DisablePMSensor();
 800f162:	f7fe f97d 	bl	800d460 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then ten minutes a message when continue operated.
 800f166:	f005 fb85 	bl	8014874 <HAL_GetTick>
 800f16a:	0003      	movs	r3, r0
 800f16c:	4a87      	ldr	r2, [pc, #540]	@ (800f38c <sen5x_statemachine+0x26c>)
 800f16e:	189a      	adds	r2, r3, r2
 800f170:	4b81      	ldr	r3, [pc, #516]	@ (800f378 <sen5x_statemachine+0x258>)
 800f172:	601a      	str	r2, [r3, #0]
      break;
 800f174:	e0fb      	b.n	800f36e <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f176:	f005 fb7d 	bl	8014874 <HAL_GetTick>
 800f17a:	0003      	movs	r3, r0
 800f17c:	4a84      	ldr	r2, [pc, #528]	@ (800f390 <sen5x_statemachine+0x270>)
 800f17e:	189a      	adds	r2, r3, r2
 800f180:	4b7d      	ldr	r3, [pc, #500]	@ (800f378 <sen5x_statemachine+0x258>)
 800f182:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800f184:	f7ff ff8e 	bl	800f0a4 <set_light_on_state>
      break;
 800f188:	e0f1      	b.n	800f36e <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800f18a:	4b7c      	ldr	r3, [pc, #496]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f18c:	2202      	movs	r2, #2
 800f18e:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800f190:	4b80      	ldr	r3, [pc, #512]	@ (800f394 <sen5x_statemachine+0x274>)
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	2b05      	cmp	r3, #5
 800f196:	d905      	bls.n	800f1a4 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800f198:	4b78      	ldr	r3, [pc, #480]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f19a:	2200      	movs	r2, #0
 800f19c:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f19e:	f7ff fab1 	bl	800e704 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800f1a2:	e0e1      	b.n	800f368 <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800f1a4:	f7ff ff04 	bl	800efb0 <sen5x_check_for_errors>
 800f1a8:	1e03      	subs	r3, r0, #0
 800f1aa:	d028      	beq.n	800f1fe <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800f1ac:	f000 fc84 	bl	800fab8 <sen5x_device_reset>
 800f1b0:	1e03      	subs	r3, r0, #0
 800f1b2:	d018      	beq.n	800f1e6 <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800f1b4:	4a78      	ldr	r2, [pc, #480]	@ (800f398 <sen5x_statemachine+0x278>)
 800f1b6:	4b74      	ldr	r3, [pc, #464]	@ (800f388 <sen5x_statemachine+0x268>)
 800f1b8:	0019      	movs	r1, r3
 800f1ba:	2001      	movs	r0, #1
 800f1bc:	f004 fde2 	bl	8013d84 <CreateLine>
            sen5xErrors++;
 800f1c0:	4b74      	ldr	r3, [pc, #464]	@ (800f394 <sen5x_statemachine+0x274>)
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	b2da      	uxtb	r2, r3
 800f1c8:	4b72      	ldr	r3, [pc, #456]	@ (800f394 <sen5x_statemachine+0x274>)
 800f1ca:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800f1cc:	f7ff fa9a 	bl	800e704 <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f1d0:	f005 fb50 	bl	8014874 <HAL_GetTick>
 800f1d4:	0003      	movs	r3, r0
 800f1d6:	4a6e      	ldr	r2, [pc, #440]	@ (800f390 <sen5x_statemachine+0x270>)
 800f1d8:	189a      	adds	r2, r3, r2
 800f1da:	4b67      	ldr	r3, [pc, #412]	@ (800f378 <sen5x_statemachine+0x258>)
 800f1dc:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800f1de:	4b67      	ldr	r3, [pc, #412]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f1e0:	2205      	movs	r2, #5
 800f1e2:	701a      	strb	r2, [r3, #0]
 800f1e4:	e005      	b.n	800f1f2 <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800f1e6:	4a6d      	ldr	r2, [pc, #436]	@ (800f39c <sen5x_statemachine+0x27c>)
 800f1e8:	4b6d      	ldr	r3, [pc, #436]	@ (800f3a0 <sen5x_statemachine+0x280>)
 800f1ea:	0019      	movs	r1, r3
 800f1ec:	2002      	movs	r0, #2
 800f1ee:	f004 fdc9 	bl	8013d84 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800f1f2:	f005 fb3f 	bl	8014874 <HAL_GetTick>
 800f1f6:	0002      	movs	r2, r0
 800f1f8:	4b5f      	ldr	r3, [pc, #380]	@ (800f378 <sen5x_statemachine+0x258>)
 800f1fa:	601a      	str	r2, [r3, #0]
      break;
 800f1fc:	e0b4      	b.n	800f368 <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800f1fe:	4b65      	ldr	r3, [pc, #404]	@ (800f394 <sen5x_statemachine+0x274>)
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d100      	bne.n	800f208 <sen5x_statemachine+0xe8>
 800f206:	e0af      	b.n	800f368 <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800f208:	4b62      	ldr	r3, [pc, #392]	@ (800f394 <sen5x_statemachine+0x274>)
 800f20a:	2200      	movs	r2, #0
 800f20c:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800f20e:	4a65      	ldr	r2, [pc, #404]	@ (800f3a4 <sen5x_statemachine+0x284>)
 800f210:	4b65      	ldr	r3, [pc, #404]	@ (800f3a8 <sen5x_statemachine+0x288>)
 800f212:	0019      	movs	r1, r3
 800f214:	2003      	movs	r0, #3
 800f216:	f004 fdb5 	bl	8013d84 <CreateLine>
      break;
 800f21a:	e0a5      	b.n	800f368 <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800f21c:	1dfb      	adds	r3, r7, #7
 800f21e:	0018      	movs	r0, r3
 800f220:	f000 f966 	bl	800f4f0 <sen5x_read_data_ready>
      if (data_ready) {
 800f224:	1dfb      	adds	r3, r7, #7
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d038      	beq.n	800f29e <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800f22c:	f003 fbe0 	bl	80129f0 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800f230:	4b5e      	ldr	r3, [pc, #376]	@ (800f3ac <sen5x_statemachine+0x28c>)
 800f232:	0018      	movs	r0, r3
 800f234:	f7ff fc70 	bl	800eb18 <sen5x_read_measurement>
 800f238:	1e03      	subs	r3, r0, #0
 800f23a:	d017      	beq.n	800f26c <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800f23c:	4a5c      	ldr	r2, [pc, #368]	@ (800f3b0 <sen5x_statemachine+0x290>)
 800f23e:	4b52      	ldr	r3, [pc, #328]	@ (800f388 <sen5x_statemachine+0x268>)
 800f240:	0019      	movs	r1, r3
 800f242:	2001      	movs	r0, #1
 800f244:	f004 fd9e 	bl	8013d84 <CreateLine>
          sen5xErrors++;
 800f248:	4b52      	ldr	r3, [pc, #328]	@ (800f394 <sen5x_statemachine+0x274>)
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	3301      	adds	r3, #1
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	4b50      	ldr	r3, [pc, #320]	@ (800f394 <sen5x_statemachine+0x274>)
 800f252:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800f254:	f7ff fa56 	bl	800e704 <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f258:	f005 fb0c 	bl	8014874 <HAL_GetTick>
 800f25c:	0003      	movs	r3, r0
 800f25e:	4a4c      	ldr	r2, [pc, #304]	@ (800f390 <sen5x_statemachine+0x270>)
 800f260:	189a      	adds	r2, r3, r2
 800f262:	4b45      	ldr	r3, [pc, #276]	@ (800f378 <sen5x_statemachine+0x258>)
 800f264:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800f266:	4b45      	ldr	r3, [pc, #276]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f268:	2205      	movs	r2, #5
 800f26a:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800f26c:	4b51      	ldr	r3, [pc, #324]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	3301      	adds	r3, #1
 800f272:	b2da      	uxtb	r2, r3
 800f274:	4b4f      	ldr	r3, [pc, #316]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f276:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800f278:	4b4e      	ldr	r3, [pc, #312]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	2b1f      	cmp	r3, #31
 800f27e:	d102      	bne.n	800f286 <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800f280:	4b4c      	ldr	r3, [pc, #304]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f282:	2200      	movs	r2, #0
 800f284:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800f286:	4b4b      	ldr	r3, [pc, #300]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	d901      	bls.n	800f292 <sen5x_statemachine+0x172>
          sen5xStore();
 800f28e:	f7ff fd9d 	bl	800edcc <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800f292:	4b48      	ldr	r3, [pc, #288]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	2b02      	cmp	r3, #2
 800f298:	d101      	bne.n	800f29e <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800f29a:	f7ff fc99 	bl	800ebd0 <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800f29e:	4b46      	ldr	r3, [pc, #280]	@ (800f3b8 <sen5x_statemachine+0x298>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d103      	bne.n	800f2ae <sen5x_statemachine+0x18e>
 800f2a6:	4b43      	ldr	r3, [pc, #268]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d95e      	bls.n	800f36c <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800f2ae:	4b33      	ldr	r3, [pc, #204]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f2b0:	2204      	movs	r2, #4
 800f2b2:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f2b4:	e05a      	b.n	800f36c <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800f2b6:	4b41      	ldr	r3, [pc, #260]	@ (800f3bc <sen5x_statemachine+0x29c>)
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d11e      	bne.n	800f2fc <sen5x_statemachine+0x1dc>
 800f2be:	4b40      	ldr	r3, [pc, #256]	@ (800f3c0 <sen5x_statemachine+0x2a0>)
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d11a      	bne.n	800f2fc <sen5x_statemachine+0x1dc>
 800f2c6:	4b3f      	ldr	r3, [pc, #252]	@ (800f3c4 <sen5x_statemachine+0x2a4>)
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	4053      	eors	r3, r2
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d013      	beq.n	800f2fc <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800f2d4:	f000 f9f2 	bl	800f6bc <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800f2d8:	4a3b      	ldr	r2, [pc, #236]	@ (800f3c8 <sen5x_statemachine+0x2a8>)
 800f2da:	4b31      	ldr	r3, [pc, #196]	@ (800f3a0 <sen5x_statemachine+0x280>)
 800f2dc:	0019      	movs	r1, r3
 800f2de:	2002      	movs	r0, #2
 800f2e0:	f004 fd50 	bl	8013d84 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800f2e4:	f005 fac6 	bl	8014874 <HAL_GetTick>
 800f2e8:	0003      	movs	r3, r0
 800f2ea:	4a38      	ldr	r2, [pc, #224]	@ (800f3cc <sen5x_statemachine+0x2ac>)
 800f2ec:	189a      	adds	r2, r3, r2
 800f2ee:	4b22      	ldr	r3, [pc, #136]	@ (800f378 <sen5x_statemachine+0x258>)
 800f2f0:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800f2f2:	4b34      	ldr	r3, [pc, #208]	@ (800f3c4 <sen5x_statemachine+0x2a4>)
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800f2f8:	f7ff fb68 	bl	800e9cc <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800f2fc:	4b1f      	ldr	r3, [pc, #124]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f2fe:	2205      	movs	r2, #5
 800f300:	701a      	strb	r2, [r3, #0]
      break;
 800f302:	e034      	b.n	800f36e <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800f304:	4b2c      	ldr	r3, [pc, #176]	@ (800f3b8 <sen5x_statemachine+0x298>)
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	2201      	movs	r2, #1
 800f30a:	4053      	eors	r3, r2
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d01c      	beq.n	800f34c <sen5x_statemachine+0x22c>
 800f312:	4b2f      	ldr	r3, [pc, #188]	@ (800f3d0 <sen5x_statemachine+0x2b0>)
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	2201      	movs	r2, #1
 800f318:	4053      	eors	r3, r2
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d015      	beq.n	800f34c <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800f320:	f7ff fba0 	bl	800ea64 <sen5x_extinguish_measurement>
 800f324:	1e03      	subs	r3, r0, #0
 800f326:	d005      	beq.n	800f334 <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800f328:	4a2a      	ldr	r2, [pc, #168]	@ (800f3d4 <sen5x_statemachine+0x2b4>)
 800f32a:	4b17      	ldr	r3, [pc, #92]	@ (800f388 <sen5x_statemachine+0x268>)
 800f32c:	0019      	movs	r1, r3
 800f32e:	2001      	movs	r0, #1
 800f330:	f004 fd28 	bl	8013d84 <CreateLine>
        }
        sen5xSamples = 0;
 800f334:	4b1f      	ldr	r3, [pc, #124]	@ (800f3b4 <sen5x_statemachine+0x294>)
 800f336:	2200      	movs	r2, #0
 800f338:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f33a:	f7ff f9e3 	bl	800e704 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800f33e:	2000      	movs	r0, #0
 800f340:	f7fe f90a 	bl	800d558 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800f344:	4b0d      	ldr	r3, [pc, #52]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f346:	2201      	movs	r2, #1
 800f348:	701a      	strb	r2, [r3, #0]
 800f34a:	e002      	b.n	800f352 <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800f34c:	4b0b      	ldr	r3, [pc, #44]	@ (800f37c <sen5x_statemachine+0x25c>)
 800f34e:	2203      	movs	r2, #3
 800f350:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800f352:	f003 fb6d 	bl	8012a30 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800f356:	f005 fa8d 	bl	8014874 <HAL_GetTick>
 800f35a:	0003      	movs	r3, r0
 800f35c:	22fa      	movs	r2, #250	@ 0xfa
 800f35e:	0092      	lsls	r2, r2, #2
 800f360:	189a      	adds	r2, r3, r2
 800f362:	4b05      	ldr	r3, [pc, #20]	@ (800f378 <sen5x_statemachine+0x258>)
 800f364:	601a      	str	r2, [r3, #0]
    }
  }
}
 800f366:	e002      	b.n	800f36e <sen5x_statemachine+0x24e>
      break;
 800f368:	46c0      	nop			@ (mov r8, r8)
 800f36a:	e000      	b.n	800f36e <sen5x_statemachine+0x24e>
      break;
 800f36c:	46c0      	nop			@ (mov r8, r8)
}
 800f36e:	46c0      	nop			@ (mov r8, r8)
 800f370:	46bd      	mov	sp, r7
 800f372:	b002      	add	sp, #8
 800f374:	bd80      	pop	{r7, pc}
 800f376:	46c0      	nop			@ (mov r8, r8)
 800f378:	200011cc 	.word	0x200011cc
 800f37c:	200000aa 	.word	0x200000aa
 800f380:	0802e2d0 	.word	0x0802e2d0
 800f384:	0802d4c4 	.word	0x0802d4c4
 800f388:	0802cec4 	.word	0x0802cec4
 800f38c:	0004cb2f 	.word	0x0004cb2f
 800f390:	00005910 	.word	0x00005910
 800f394:	200011c9 	.word	0x200011c9
 800f398:	0802d4f4 	.word	0x0802d4f4
 800f39c:	0802d50c 	.word	0x0802d50c
 800f3a0:	0802ce58 	.word	0x0802ce58
 800f3a4:	0802d524 	.word	0x0802d524
 800f3a8:	0802ce98 	.word	0x0802ce98
 800f3ac:	200011d0 	.word	0x200011d0
 800f3b0:	0802d538 	.word	0x0802d538
 800f3b4:	200011c8 	.word	0x200011c8
 800f3b8:	2000214d 	.word	0x2000214d
 800f3bc:	20000e43 	.word	0x20000e43
 800f3c0:	20000e42 	.word	0x20000e42
 800f3c4:	200011bc 	.word	0x200011bc
 800f3c8:	0802d568 	.word	0x0802d568
 800f3cc:	00002710 	.word	0x00002710
 800f3d0:	2000214e 	.word	0x2000214e
 800f3d4:	0802d580 	.word	0x0802d580

0800f3d8 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800f3d8:	b590      	push	{r4, r7, lr}
 800f3da:	b083      	sub	sp, #12
 800f3dc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f3de:	1dbb      	adds	r3, r7, #6
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800f3e4:	1dbc      	adds	r4, r7, #6
 800f3e6:	1dbb      	adds	r3, r7, #6
 800f3e8:	8819      	ldrh	r1, [r3, #0]
 800f3ea:	003b      	movs	r3, r7
 800f3ec:	2221      	movs	r2, #33	@ 0x21
 800f3ee:	0018      	movs	r0, r3
 800f3f0:	f001 fb57 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f3f4:	0003      	movs	r3, r0
 800f3f6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f3f8:	1d3c      	adds	r4, r7, #4
 800f3fa:	1dbb      	adds	r3, r7, #6
 800f3fc:	881a      	ldrh	r2, [r3, #0]
 800f3fe:	003b      	movs	r3, r7
 800f400:	0019      	movs	r1, r3
 800f402:	2069      	movs	r0, #105	@ 0x69
 800f404:	f001 fbd1 	bl	8010baa <sensirion_i2c_write_data>
 800f408:	0003      	movs	r3, r0
 800f40a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f40c:	1d3b      	adds	r3, r7, #4
 800f40e:	2200      	movs	r2, #0
 800f410:	5e9b      	ldrsh	r3, [r3, r2]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d003      	beq.n	800f41e <sen5x_start_measurement+0x46>
        return error;
 800f416:	1d3b      	adds	r3, r7, #4
 800f418:	2200      	movs	r2, #0
 800f41a:	5e9b      	ldrsh	r3, [r3, r2]
 800f41c:	e004      	b.n	800f428 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f41e:	4b04      	ldr	r3, [pc, #16]	@ (800f430 <sen5x_start_measurement+0x58>)
 800f420:	0018      	movs	r0, r3
 800f422:	f7ff fda5 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f426:	2300      	movs	r3, #0
}
 800f428:	0018      	movs	r0, r3
 800f42a:	46bd      	mov	sp, r7
 800f42c:	b003      	add	sp, #12
 800f42e:	bd90      	pop	{r4, r7, pc}
 800f430:	0000c350 	.word	0x0000c350

0800f434 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800f434:	b590      	push	{r4, r7, lr}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f43a:	1dbb      	adds	r3, r7, #6
 800f43c:	2200      	movs	r2, #0
 800f43e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800f440:	1dbc      	adds	r4, r7, #6
 800f442:	1dbb      	adds	r3, r7, #6
 800f444:	8819      	ldrh	r1, [r3, #0]
 800f446:	003b      	movs	r3, r7
 800f448:	2237      	movs	r2, #55	@ 0x37
 800f44a:	0018      	movs	r0, r3
 800f44c:	f001 fb29 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f450:	0003      	movs	r3, r0
 800f452:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f454:	1d3c      	adds	r4, r7, #4
 800f456:	1dbb      	adds	r3, r7, #6
 800f458:	881a      	ldrh	r2, [r3, #0]
 800f45a:	003b      	movs	r3, r7
 800f45c:	0019      	movs	r1, r3
 800f45e:	2069      	movs	r0, #105	@ 0x69
 800f460:	f001 fba3 	bl	8010baa <sensirion_i2c_write_data>
 800f464:	0003      	movs	r3, r0
 800f466:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f468:	1d3b      	adds	r3, r7, #4
 800f46a:	2200      	movs	r2, #0
 800f46c:	5e9b      	ldrsh	r3, [r3, r2]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d003      	beq.n	800f47a <sen5x_start_measurement_without_pm+0x46>
        return error;
 800f472:	1d3b      	adds	r3, r7, #4
 800f474:	2200      	movs	r2, #0
 800f476:	5e9b      	ldrsh	r3, [r3, r2]
 800f478:	e004      	b.n	800f484 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f47a:	4b04      	ldr	r3, [pc, #16]	@ (800f48c <sen5x_start_measurement_without_pm+0x58>)
 800f47c:	0018      	movs	r0, r3
 800f47e:	f7ff fd77 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f482:	2300      	movs	r3, #0
}
 800f484:	0018      	movs	r0, r3
 800f486:	46bd      	mov	sp, r7
 800f488:	b003      	add	sp, #12
 800f48a:	bd90      	pop	{r4, r7, pc}
 800f48c:	0000c350 	.word	0x0000c350

0800f490 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800f490:	b590      	push	{r4, r7, lr}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f496:	1dbb      	adds	r3, r7, #6
 800f498:	2200      	movs	r2, #0
 800f49a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800f49c:	1dbc      	adds	r4, r7, #6
 800f49e:	2382      	movs	r3, #130	@ 0x82
 800f4a0:	005a      	lsls	r2, r3, #1
 800f4a2:	1dbb      	adds	r3, r7, #6
 800f4a4:	8819      	ldrh	r1, [r3, #0]
 800f4a6:	003b      	movs	r3, r7
 800f4a8:	0018      	movs	r0, r3
 800f4aa:	f001 fafa 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f4ae:	0003      	movs	r3, r0
 800f4b0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f4b2:	1d3c      	adds	r4, r7, #4
 800f4b4:	1dbb      	adds	r3, r7, #6
 800f4b6:	881a      	ldrh	r2, [r3, #0]
 800f4b8:	003b      	movs	r3, r7
 800f4ba:	0019      	movs	r1, r3
 800f4bc:	2069      	movs	r0, #105	@ 0x69
 800f4be:	f001 fb74 	bl	8010baa <sensirion_i2c_write_data>
 800f4c2:	0003      	movs	r3, r0
 800f4c4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f4c6:	1d3b      	adds	r3, r7, #4
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	5e9b      	ldrsh	r3, [r3, r2]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d003      	beq.n	800f4d8 <sen5x_stop_measurement+0x48>
        return error;
 800f4d0:	1d3b      	adds	r3, r7, #4
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	5e9b      	ldrsh	r3, [r3, r2]
 800f4d6:	e004      	b.n	800f4e2 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800f4d8:	4b04      	ldr	r3, [pc, #16]	@ (800f4ec <sen5x_stop_measurement+0x5c>)
 800f4da:	0018      	movs	r0, r3
 800f4dc:	f7ff fd48 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f4e0:	2300      	movs	r3, #0
}
 800f4e2:	0018      	movs	r0, r3
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	b003      	add	sp, #12
 800f4e8:	bd90      	pop	{r4, r7, pc}
 800f4ea:	46c0      	nop			@ (mov r8, r8)
 800f4ec:	00030d40 	.word	0x00030d40

0800f4f0 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800f4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4f2:	b085      	sub	sp, #20
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800f4f8:	250e      	movs	r5, #14
 800f4fa:	197b      	adds	r3, r7, r5
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800f500:	197c      	adds	r4, r7, r5
 800f502:	4a22      	ldr	r2, [pc, #136]	@ (800f58c <sen5x_read_data_ready+0x9c>)
 800f504:	197b      	adds	r3, r7, r5
 800f506:	8819      	ldrh	r1, [r3, #0]
 800f508:	2308      	movs	r3, #8
 800f50a:	18fb      	adds	r3, r7, r3
 800f50c:	0018      	movs	r0, r3
 800f50e:	f001 fac8 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f512:	0003      	movs	r3, r0
 800f514:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f516:	260c      	movs	r6, #12
 800f518:	19bc      	adds	r4, r7, r6
 800f51a:	197b      	adds	r3, r7, r5
 800f51c:	881a      	ldrh	r2, [r3, #0]
 800f51e:	2308      	movs	r3, #8
 800f520:	18fb      	adds	r3, r7, r3
 800f522:	0019      	movs	r1, r3
 800f524:	2069      	movs	r0, #105	@ 0x69
 800f526:	f001 fb40 	bl	8010baa <sensirion_i2c_write_data>
 800f52a:	0003      	movs	r3, r0
 800f52c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f52e:	19bb      	adds	r3, r7, r6
 800f530:	2200      	movs	r2, #0
 800f532:	5e9b      	ldrsh	r3, [r3, r2]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d003      	beq.n	800f540 <sen5x_read_data_ready+0x50>
        return error;
 800f538:	19bb      	adds	r3, r7, r6
 800f53a:	2200      	movs	r2, #0
 800f53c:	5e9b      	ldrsh	r3, [r3, r2]
 800f53e:	e020      	b.n	800f582 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f540:	4b13      	ldr	r3, [pc, #76]	@ (800f590 <sen5x_read_data_ready+0xa0>)
 800f542:	0018      	movs	r0, r3
 800f544:	f7ff fd14 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800f548:	250c      	movs	r5, #12
 800f54a:	197c      	adds	r4, r7, r5
 800f54c:	2308      	movs	r3, #8
 800f54e:	18fb      	adds	r3, r7, r3
 800f550:	2202      	movs	r2, #2
 800f552:	0019      	movs	r1, r3
 800f554:	2069      	movs	r0, #105	@ 0x69
 800f556:	f001 fb40 	bl	8010bda <sensirion_i2c_read_data_inplace>
 800f55a:	0003      	movs	r3, r0
 800f55c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f55e:	197b      	adds	r3, r7, r5
 800f560:	2200      	movs	r2, #0
 800f562:	5e9b      	ldrsh	r3, [r3, r2]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d003      	beq.n	800f570 <sen5x_read_data_ready+0x80>
        return error;
 800f568:	197b      	adds	r3, r7, r5
 800f56a:	2200      	movs	r2, #0
 800f56c:	5e9b      	ldrsh	r3, [r3, r2]
 800f56e:	e008      	b.n	800f582 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800f570:	2308      	movs	r3, #8
 800f572:	18fb      	adds	r3, r7, r3
 800f574:	785b      	ldrb	r3, [r3, #1]
 800f576:	1e5a      	subs	r2, r3, #1
 800f578:	4193      	sbcs	r3, r2
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f580:	2300      	movs	r3, #0
}
 800f582:	0018      	movs	r0, r3
 800f584:	46bd      	mov	sp, r7
 800f586:	b005      	add	sp, #20
 800f588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f58a:	46c0      	nop			@ (mov r8, r8)
 800f58c:	00000202 	.word	0x00000202
 800f590:	00004e20 	.word	0x00004e20

0800f594 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800f594:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f596:	b08d      	sub	sp, #52	@ 0x34
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	607a      	str	r2, [r7, #4]
 800f5a0:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800f5a2:	252e      	movs	r5, #46	@ 0x2e
 800f5a4:	197b      	adds	r3, r7, r5
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800f5aa:	197c      	adds	r4, r7, r5
 800f5ac:	23f1      	movs	r3, #241	@ 0xf1
 800f5ae:	009a      	lsls	r2, r3, #2
 800f5b0:	197b      	adds	r3, r7, r5
 800f5b2:	8819      	ldrh	r1, [r3, #0]
 800f5b4:	2314      	movs	r3, #20
 800f5b6:	18fb      	adds	r3, r7, r3
 800f5b8:	0018      	movs	r0, r3
 800f5ba:	f001 fa72 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f5be:	0003      	movs	r3, r0
 800f5c0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f5c2:	262c      	movs	r6, #44	@ 0x2c
 800f5c4:	19bc      	adds	r4, r7, r6
 800f5c6:	197b      	adds	r3, r7, r5
 800f5c8:	881a      	ldrh	r2, [r3, #0]
 800f5ca:	2314      	movs	r3, #20
 800f5cc:	18fb      	adds	r3, r7, r3
 800f5ce:	0019      	movs	r1, r3
 800f5d0:	2069      	movs	r0, #105	@ 0x69
 800f5d2:	f001 faea 	bl	8010baa <sensirion_i2c_write_data>
 800f5d6:	0003      	movs	r3, r0
 800f5d8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f5da:	19bb      	adds	r3, r7, r6
 800f5dc:	2200      	movs	r2, #0
 800f5de:	5e9b      	ldrsh	r3, [r3, r2]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d003      	beq.n	800f5ec <sen5x_read_measured_values+0x58>
        return error;
 800f5e4:	19bb      	adds	r3, r7, r6
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	5e9b      	ldrsh	r3, [r3, r2]
 800f5ea:	e060      	b.n	800f6ae <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f5ec:	4b32      	ldr	r3, [pc, #200]	@ (800f6b8 <sen5x_read_measured_values+0x124>)
 800f5ee:	0018      	movs	r0, r3
 800f5f0:	f7ff fcbe 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800f5f4:	252c      	movs	r5, #44	@ 0x2c
 800f5f6:	197c      	adds	r4, r7, r5
 800f5f8:	2314      	movs	r3, #20
 800f5fa:	18fb      	adds	r3, r7, r3
 800f5fc:	2210      	movs	r2, #16
 800f5fe:	0019      	movs	r1, r3
 800f600:	2069      	movs	r0, #105	@ 0x69
 800f602:	f001 faea 	bl	8010bda <sensirion_i2c_read_data_inplace>
 800f606:	0003      	movs	r3, r0
 800f608:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f60a:	197b      	adds	r3, r7, r5
 800f60c:	2200      	movs	r2, #0
 800f60e:	5e9b      	ldrsh	r3, [r3, r2]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d003      	beq.n	800f61c <sen5x_read_measured_values+0x88>
        return error;
 800f614:	197b      	adds	r3, r7, r5
 800f616:	2200      	movs	r2, #0
 800f618:	5e9b      	ldrsh	r3, [r3, r2]
 800f61a:	e048      	b.n	800f6ae <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800f61c:	2414      	movs	r4, #20
 800f61e:	193b      	adds	r3, r7, r4
 800f620:	0018      	movs	r0, r3
 800f622:	f000 fa79 	bl	800fb18 <sensirion_common_bytes_to_uint16_t>
 800f626:	0003      	movs	r3, r0
 800f628:	001a      	movs	r2, r3
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800f62e:	193b      	adds	r3, r7, r4
 800f630:	3302      	adds	r3, #2
 800f632:	0018      	movs	r0, r3
 800f634:	f000 fa70 	bl	800fb18 <sensirion_common_bytes_to_uint16_t>
 800f638:	0003      	movs	r3, r0
 800f63a:	001a      	movs	r2, r3
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800f640:	193b      	adds	r3, r7, r4
 800f642:	3304      	adds	r3, #4
 800f644:	0018      	movs	r0, r3
 800f646:	f000 fa67 	bl	800fb18 <sensirion_common_bytes_to_uint16_t>
 800f64a:	0003      	movs	r3, r0
 800f64c:	001a      	movs	r2, r3
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800f652:	193b      	adds	r3, r7, r4
 800f654:	3306      	adds	r3, #6
 800f656:	0018      	movs	r0, r3
 800f658:	f000 fa5e 	bl	800fb18 <sensirion_common_bytes_to_uint16_t>
 800f65c:	0003      	movs	r3, r0
 800f65e:	001a      	movs	r2, r3
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800f664:	193b      	adds	r3, r7, r4
 800f666:	3308      	adds	r3, #8
 800f668:	0018      	movs	r0, r3
 800f66a:	f000 fa82 	bl	800fb72 <sensirion_common_bytes_to_int16_t>
 800f66e:	0003      	movs	r3, r0
 800f670:	001a      	movs	r2, r3
 800f672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f674:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800f676:	193b      	adds	r3, r7, r4
 800f678:	330a      	adds	r3, #10
 800f67a:	0018      	movs	r0, r3
 800f67c:	f000 fa79 	bl	800fb72 <sensirion_common_bytes_to_int16_t>
 800f680:	0003      	movs	r3, r0
 800f682:	001a      	movs	r2, r3
 800f684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f686:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800f688:	193b      	adds	r3, r7, r4
 800f68a:	330c      	adds	r3, #12
 800f68c:	0018      	movs	r0, r3
 800f68e:	f000 fa70 	bl	800fb72 <sensirion_common_bytes_to_int16_t>
 800f692:	0003      	movs	r3, r0
 800f694:	001a      	movs	r2, r3
 800f696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f698:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800f69a:	193b      	adds	r3, r7, r4
 800f69c:	330e      	adds	r3, #14
 800f69e:	0018      	movs	r0, r3
 800f6a0:	f000 fa67 	bl	800fb72 <sensirion_common_bytes_to_int16_t>
 800f6a4:	0003      	movs	r3, r0
 800f6a6:	001a      	movs	r2, r3
 800f6a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6aa:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800f6ac:	2300      	movs	r3, #0
}
 800f6ae:	0018      	movs	r0, r3
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	b00d      	add	sp, #52	@ 0x34
 800f6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6b6:	46c0      	nop			@ (mov r8, r8)
 800f6b8:	00004e20 	.word	0x00004e20

0800f6bc <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800f6bc:	b590      	push	{r4, r7, lr}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f6c2:	1dbb      	adds	r3, r7, #6
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800f6c8:	1dbc      	adds	r4, r7, #6
 800f6ca:	4a12      	ldr	r2, [pc, #72]	@ (800f714 <sen5x_start_fan_cleaning+0x58>)
 800f6cc:	1dbb      	adds	r3, r7, #6
 800f6ce:	8819      	ldrh	r1, [r3, #0]
 800f6d0:	003b      	movs	r3, r7
 800f6d2:	0018      	movs	r0, r3
 800f6d4:	f001 f9e5 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f6d8:	0003      	movs	r3, r0
 800f6da:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f6dc:	1d3c      	adds	r4, r7, #4
 800f6de:	1dbb      	adds	r3, r7, #6
 800f6e0:	881a      	ldrh	r2, [r3, #0]
 800f6e2:	003b      	movs	r3, r7
 800f6e4:	0019      	movs	r1, r3
 800f6e6:	2069      	movs	r0, #105	@ 0x69
 800f6e8:	f001 fa5f 	bl	8010baa <sensirion_i2c_write_data>
 800f6ec:	0003      	movs	r3, r0
 800f6ee:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f6f0:	1d3b      	adds	r3, r7, #4
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	5e9b      	ldrsh	r3, [r3, r2]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d003      	beq.n	800f702 <sen5x_start_fan_cleaning+0x46>
        return error;
 800f6fa:	1d3b      	adds	r3, r7, #4
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	5e9b      	ldrsh	r3, [r3, r2]
 800f700:	e004      	b.n	800f70c <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f702:	4b05      	ldr	r3, [pc, #20]	@ (800f718 <sen5x_start_fan_cleaning+0x5c>)
 800f704:	0018      	movs	r0, r3
 800f706:	f7ff fc33 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f70a:	2300      	movs	r3, #0
}
 800f70c:	0018      	movs	r0, r3
 800f70e:	46bd      	mov	sp, r7
 800f710:	b003      	add	sp, #12
 800f712:	bd90      	pop	{r4, r7, pc}
 800f714:	00005607 	.word	0x00005607
 800f718:	00004e20 	.word	0x00004e20

0800f71c <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800f71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f71e:	b087      	sub	sp, #28
 800f720:	af00      	add	r7, sp, #0
 800f722:	0004      	movs	r4, r0
 800f724:	0008      	movs	r0, r1
 800f726:	0011      	movs	r1, r2
 800f728:	1dbb      	adds	r3, r7, #6
 800f72a:	1c22      	adds	r2, r4, #0
 800f72c:	801a      	strh	r2, [r3, #0]
 800f72e:	1d3b      	adds	r3, r7, #4
 800f730:	1c02      	adds	r2, r0, #0
 800f732:	801a      	strh	r2, [r3, #0]
 800f734:	1cbb      	adds	r3, r7, #2
 800f736:	1c0a      	adds	r2, r1, #0
 800f738:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800f73a:	2516      	movs	r5, #22
 800f73c:	197b      	adds	r3, r7, r5
 800f73e:	2200      	movs	r2, #0
 800f740:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800f742:	197c      	adds	r4, r7, r5
 800f744:	4a25      	ldr	r2, [pc, #148]	@ (800f7dc <sen5x_set_temperature_offset_parameters+0xc0>)
 800f746:	197b      	adds	r3, r7, r5
 800f748:	8819      	ldrh	r1, [r3, #0]
 800f74a:	2608      	movs	r6, #8
 800f74c:	19bb      	adds	r3, r7, r6
 800f74e:	0018      	movs	r0, r3
 800f750:	f001 f9a7 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f754:	0003      	movs	r3, r0
 800f756:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800f758:	197c      	adds	r4, r7, r5
 800f75a:	1dbb      	adds	r3, r7, #6
 800f75c:	2200      	movs	r2, #0
 800f75e:	5e9a      	ldrsh	r2, [r3, r2]
 800f760:	197b      	adds	r3, r7, r5
 800f762:	8819      	ldrh	r1, [r3, #0]
 800f764:	19bb      	adds	r3, r7, r6
 800f766:	0018      	movs	r0, r3
 800f768:	f001 fa06 	bl	8010b78 <sensirion_i2c_add_int16_t_to_buffer>
 800f76c:	0003      	movs	r3, r0
 800f76e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800f770:	197c      	adds	r4, r7, r5
 800f772:	1d3b      	adds	r3, r7, #4
 800f774:	2200      	movs	r2, #0
 800f776:	5e9a      	ldrsh	r2, [r3, r2]
 800f778:	197b      	adds	r3, r7, r5
 800f77a:	8819      	ldrh	r1, [r3, #0]
 800f77c:	19bb      	adds	r3, r7, r6
 800f77e:	0018      	movs	r0, r3
 800f780:	f001 f9fa 	bl	8010b78 <sensirion_i2c_add_int16_t_to_buffer>
 800f784:	0003      	movs	r3, r0
 800f786:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800f788:	197c      	adds	r4, r7, r5
 800f78a:	1cbb      	adds	r3, r7, #2
 800f78c:	881a      	ldrh	r2, [r3, #0]
 800f78e:	197b      	adds	r3, r7, r5
 800f790:	8819      	ldrh	r1, [r3, #0]
 800f792:	19bb      	adds	r3, r7, r6
 800f794:	0018      	movs	r0, r3
 800f796:	f001 f9b0 	bl	8010afa <sensirion_i2c_add_uint16_t_to_buffer>
 800f79a:	0003      	movs	r3, r0
 800f79c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f79e:	2214      	movs	r2, #20
 800f7a0:	18bc      	adds	r4, r7, r2
 800f7a2:	197b      	adds	r3, r7, r5
 800f7a4:	881a      	ldrh	r2, [r3, #0]
 800f7a6:	19bb      	adds	r3, r7, r6
 800f7a8:	0019      	movs	r1, r3
 800f7aa:	2069      	movs	r0, #105	@ 0x69
 800f7ac:	f001 f9fd 	bl	8010baa <sensirion_i2c_write_data>
 800f7b0:	0003      	movs	r3, r0
 800f7b2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f7b4:	2214      	movs	r2, #20
 800f7b6:	18bb      	adds	r3, r7, r2
 800f7b8:	2100      	movs	r1, #0
 800f7ba:	5e5b      	ldrsh	r3, [r3, r1]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d003      	beq.n	800f7c8 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800f7c0:	18bb      	adds	r3, r7, r2
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	5e9b      	ldrsh	r3, [r3, r2]
 800f7c6:	e004      	b.n	800f7d2 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f7c8:	4b05      	ldr	r3, [pc, #20]	@ (800f7e0 <sen5x_set_temperature_offset_parameters+0xc4>)
 800f7ca:	0018      	movs	r0, r3
 800f7cc:	f7ff fbd0 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f7d0:	2300      	movs	r3, #0
}
 800f7d2:	0018      	movs	r0, r3
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	b007      	add	sp, #28
 800f7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7da:	46c0      	nop			@ (mov r8, r8)
 800f7dc:	000060b2 	.word	0x000060b2
 800f7e0:	00004e20 	.word	0x00004e20

0800f7e4 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800f7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7e6:	b091      	sub	sp, #68	@ 0x44
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	000a      	movs	r2, r1
 800f7ee:	1cfb      	adds	r3, r7, #3
 800f7f0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f7f2:	253e      	movs	r5, #62	@ 0x3e
 800f7f4:	197b      	adds	r3, r7, r5
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800f7fa:	197c      	adds	r4, r7, r5
 800f7fc:	4a22      	ldr	r2, [pc, #136]	@ (800f888 <sen5x_get_product_name+0xa4>)
 800f7fe:	197b      	adds	r3, r7, r5
 800f800:	8819      	ldrh	r1, [r3, #0]
 800f802:	230c      	movs	r3, #12
 800f804:	18fb      	adds	r3, r7, r3
 800f806:	0018      	movs	r0, r3
 800f808:	f001 f94b 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f80c:	0003      	movs	r3, r0
 800f80e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f810:	263c      	movs	r6, #60	@ 0x3c
 800f812:	19bc      	adds	r4, r7, r6
 800f814:	197b      	adds	r3, r7, r5
 800f816:	881a      	ldrh	r2, [r3, #0]
 800f818:	230c      	movs	r3, #12
 800f81a:	18fb      	adds	r3, r7, r3
 800f81c:	0019      	movs	r1, r3
 800f81e:	2069      	movs	r0, #105	@ 0x69
 800f820:	f001 f9c3 	bl	8010baa <sensirion_i2c_write_data>
 800f824:	0003      	movs	r3, r0
 800f826:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f828:	19bb      	adds	r3, r7, r6
 800f82a:	2200      	movs	r2, #0
 800f82c:	5e9b      	ldrsh	r3, [r3, r2]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d003      	beq.n	800f83a <sen5x_get_product_name+0x56>
        return error;
 800f832:	19bb      	adds	r3, r7, r6
 800f834:	2200      	movs	r2, #0
 800f836:	5e9b      	ldrsh	r3, [r3, r2]
 800f838:	e021      	b.n	800f87e <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f83a:	4b14      	ldr	r3, [pc, #80]	@ (800f88c <sen5x_get_product_name+0xa8>)
 800f83c:	0018      	movs	r0, r3
 800f83e:	f7ff fb97 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f842:	253c      	movs	r5, #60	@ 0x3c
 800f844:	197c      	adds	r4, r7, r5
 800f846:	230c      	movs	r3, #12
 800f848:	18fb      	adds	r3, r7, r3
 800f84a:	2220      	movs	r2, #32
 800f84c:	0019      	movs	r1, r3
 800f84e:	2069      	movs	r0, #105	@ 0x69
 800f850:	f001 f9c3 	bl	8010bda <sensirion_i2c_read_data_inplace>
 800f854:	0003      	movs	r3, r0
 800f856:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f858:	197b      	adds	r3, r7, r5
 800f85a:	2200      	movs	r2, #0
 800f85c:	5e9b      	ldrsh	r3, [r3, r2]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d003      	beq.n	800f86a <sen5x_get_product_name+0x86>
        return error;
 800f862:	197b      	adds	r3, r7, r5
 800f864:	2200      	movs	r2, #0
 800f866:	5e9b      	ldrsh	r3, [r3, r2]
 800f868:	e009      	b.n	800f87e <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800f86a:	1cfb      	adds	r3, r7, #3
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	b29a      	uxth	r2, r3
 800f870:	6879      	ldr	r1, [r7, #4]
 800f872:	230c      	movs	r3, #12
 800f874:	18fb      	adds	r3, r7, r3
 800f876:	0018      	movs	r0, r3
 800f878:	f000 f989 	bl	800fb8e <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f87c:	2300      	movs	r3, #0
}
 800f87e:	0018      	movs	r0, r3
 800f880:	46bd      	mov	sp, r7
 800f882:	b011      	add	sp, #68	@ 0x44
 800f884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f886:	46c0      	nop			@ (mov r8, r8)
 800f888:	0000d014 	.word	0x0000d014
 800f88c:	0000c350 	.word	0x0000c350

0800f890 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800f890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f892:	b091      	sub	sp, #68	@ 0x44
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	000a      	movs	r2, r1
 800f89a:	1cfb      	adds	r3, r7, #3
 800f89c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f89e:	253e      	movs	r5, #62	@ 0x3e
 800f8a0:	197b      	adds	r3, r7, r5
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800f8a6:	197c      	adds	r4, r7, r5
 800f8a8:	4a22      	ldr	r2, [pc, #136]	@ (800f934 <sen5x_get_serial_number+0xa4>)
 800f8aa:	197b      	adds	r3, r7, r5
 800f8ac:	8819      	ldrh	r1, [r3, #0]
 800f8ae:	230c      	movs	r3, #12
 800f8b0:	18fb      	adds	r3, r7, r3
 800f8b2:	0018      	movs	r0, r3
 800f8b4:	f001 f8f5 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f8b8:	0003      	movs	r3, r0
 800f8ba:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f8bc:	263c      	movs	r6, #60	@ 0x3c
 800f8be:	19bc      	adds	r4, r7, r6
 800f8c0:	197b      	adds	r3, r7, r5
 800f8c2:	881a      	ldrh	r2, [r3, #0]
 800f8c4:	230c      	movs	r3, #12
 800f8c6:	18fb      	adds	r3, r7, r3
 800f8c8:	0019      	movs	r1, r3
 800f8ca:	2069      	movs	r0, #105	@ 0x69
 800f8cc:	f001 f96d 	bl	8010baa <sensirion_i2c_write_data>
 800f8d0:	0003      	movs	r3, r0
 800f8d2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f8d4:	19bb      	adds	r3, r7, r6
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	5e9b      	ldrsh	r3, [r3, r2]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d003      	beq.n	800f8e6 <sen5x_get_serial_number+0x56>
        return error;
 800f8de:	19bb      	adds	r3, r7, r6
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	5e9b      	ldrsh	r3, [r3, r2]
 800f8e4:	e021      	b.n	800f92a <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f8e6:	4b14      	ldr	r3, [pc, #80]	@ (800f938 <sen5x_get_serial_number+0xa8>)
 800f8e8:	0018      	movs	r0, r3
 800f8ea:	f7ff fb41 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f8ee:	253c      	movs	r5, #60	@ 0x3c
 800f8f0:	197c      	adds	r4, r7, r5
 800f8f2:	230c      	movs	r3, #12
 800f8f4:	18fb      	adds	r3, r7, r3
 800f8f6:	2220      	movs	r2, #32
 800f8f8:	0019      	movs	r1, r3
 800f8fa:	2069      	movs	r0, #105	@ 0x69
 800f8fc:	f001 f96d 	bl	8010bda <sensirion_i2c_read_data_inplace>
 800f900:	0003      	movs	r3, r0
 800f902:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f904:	197b      	adds	r3, r7, r5
 800f906:	2200      	movs	r2, #0
 800f908:	5e9b      	ldrsh	r3, [r3, r2]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d003      	beq.n	800f916 <sen5x_get_serial_number+0x86>
        return error;
 800f90e:	197b      	adds	r3, r7, r5
 800f910:	2200      	movs	r2, #0
 800f912:	5e9b      	ldrsh	r3, [r3, r2]
 800f914:	e009      	b.n	800f92a <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800f916:	1cfb      	adds	r3, r7, #3
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	6879      	ldr	r1, [r7, #4]
 800f91e:	230c      	movs	r3, #12
 800f920:	18fb      	adds	r3, r7, r3
 800f922:	0018      	movs	r0, r3
 800f924:	f000 f933 	bl	800fb8e <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f928:	2300      	movs	r3, #0
}
 800f92a:	0018      	movs	r0, r3
 800f92c:	46bd      	mov	sp, r7
 800f92e:	b011      	add	sp, #68	@ 0x44
 800f930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f932:	46c0      	nop			@ (mov r8, r8)
 800f934:	0000d033 	.word	0x0000d033
 800f938:	0000c350 	.word	0x0000c350

0800f93c <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800f93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f93e:	b089      	sub	sp, #36	@ 0x24
 800f940:	af00      	add	r7, sp, #0
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	60b9      	str	r1, [r7, #8]
 800f946:	607a      	str	r2, [r7, #4]
 800f948:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800f94a:	251e      	movs	r5, #30
 800f94c:	197b      	adds	r3, r7, r5
 800f94e:	2200      	movs	r2, #0
 800f950:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800f952:	197c      	adds	r4, r7, r5
 800f954:	23d1      	movs	r3, #209	@ 0xd1
 800f956:	021a      	lsls	r2, r3, #8
 800f958:	197b      	adds	r3, r7, r5
 800f95a:	8819      	ldrh	r1, [r3, #0]
 800f95c:	2310      	movs	r3, #16
 800f95e:	18fb      	adds	r3, r7, r3
 800f960:	0018      	movs	r0, r3
 800f962:	f001 f89e 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800f966:	0003      	movs	r3, r0
 800f968:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f96a:	261c      	movs	r6, #28
 800f96c:	19bc      	adds	r4, r7, r6
 800f96e:	197b      	adds	r3, r7, r5
 800f970:	881a      	ldrh	r2, [r3, #0]
 800f972:	2310      	movs	r3, #16
 800f974:	18fb      	adds	r3, r7, r3
 800f976:	0019      	movs	r1, r3
 800f978:	2069      	movs	r0, #105	@ 0x69
 800f97a:	f001 f916 	bl	8010baa <sensirion_i2c_write_data>
 800f97e:	0003      	movs	r3, r0
 800f980:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f982:	19bb      	adds	r3, r7, r6
 800f984:	2200      	movs	r2, #0
 800f986:	5e9b      	ldrsh	r3, [r3, r2]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d003      	beq.n	800f994 <sen5x_get_version+0x58>
        return error;
 800f98c:	19bb      	adds	r3, r7, r6
 800f98e:	2200      	movs	r2, #0
 800f990:	5e9b      	ldrsh	r3, [r3, r2]
 800f992:	e038      	b.n	800fa06 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f994:	4b1e      	ldr	r3, [pc, #120]	@ (800fa10 <sen5x_get_version+0xd4>)
 800f996:	0018      	movs	r0, r3
 800f998:	f7ff faea 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800f99c:	251c      	movs	r5, #28
 800f99e:	197c      	adds	r4, r7, r5
 800f9a0:	2310      	movs	r3, #16
 800f9a2:	18fb      	adds	r3, r7, r3
 800f9a4:	2208      	movs	r2, #8
 800f9a6:	0019      	movs	r1, r3
 800f9a8:	2069      	movs	r0, #105	@ 0x69
 800f9aa:	f001 f916 	bl	8010bda <sensirion_i2c_read_data_inplace>
 800f9ae:	0003      	movs	r3, r0
 800f9b0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f9b2:	197b      	adds	r3, r7, r5
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	5e9b      	ldrsh	r3, [r3, r2]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d003      	beq.n	800f9c4 <sen5x_get_version+0x88>
        return error;
 800f9bc:	197b      	adds	r3, r7, r5
 800f9be:	2200      	movs	r2, #0
 800f9c0:	5e9b      	ldrsh	r3, [r3, r2]
 800f9c2:	e020      	b.n	800fa06 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800f9c4:	2110      	movs	r1, #16
 800f9c6:	187b      	adds	r3, r7, r1
 800f9c8:	781a      	ldrb	r2, [r3, #0]
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800f9ce:	187b      	adds	r3, r7, r1
 800f9d0:	785a      	ldrb	r2, [r3, #1]
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800f9d6:	187b      	adds	r3, r7, r1
 800f9d8:	789b      	ldrb	r3, [r3, #2]
 800f9da:	1e5a      	subs	r2, r3, #1
 800f9dc:	4193      	sbcs	r3, r2
 800f9de:	b2da      	uxtb	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800f9e4:	187b      	adds	r3, r7, r1
 800f9e6:	78da      	ldrb	r2, [r3, #3]
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800f9ec:	187b      	adds	r3, r7, r1
 800f9ee:	791a      	ldrb	r2, [r3, #4]
 800f9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9f2:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800f9f4:	187b      	adds	r3, r7, r1
 800f9f6:	795a      	ldrb	r2, [r3, #5]
 800f9f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9fa:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800f9fc:	187b      	adds	r3, r7, r1
 800f9fe:	799a      	ldrb	r2, [r3, #6]
 800fa00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa02:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800fa04:	2300      	movs	r3, #0
}
 800fa06:	0018      	movs	r0, r3
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	b009      	add	sp, #36	@ 0x24
 800fa0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa0e:	46c0      	nop			@ (mov r8, r8)
 800fa10:	00004e20 	.word	0x00004e20

0800fa14 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800fa14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa16:	b087      	sub	sp, #28
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800fa1c:	2516      	movs	r5, #22
 800fa1e:	197b      	adds	r3, r7, r5
 800fa20:	2200      	movs	r2, #0
 800fa22:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800fa24:	197c      	adds	r4, r7, r5
 800fa26:	4a21      	ldr	r2, [pc, #132]	@ (800faac <sen5x_read_device_status+0x98>)
 800fa28:	197b      	adds	r3, r7, r5
 800fa2a:	8819      	ldrh	r1, [r3, #0]
 800fa2c:	260c      	movs	r6, #12
 800fa2e:	19bb      	adds	r3, r7, r6
 800fa30:	0018      	movs	r0, r3
 800fa32:	f001 f836 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800fa36:	0003      	movs	r3, r0
 800fa38:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fa3a:	2314      	movs	r3, #20
 800fa3c:	18fc      	adds	r4, r7, r3
 800fa3e:	197b      	adds	r3, r7, r5
 800fa40:	881a      	ldrh	r2, [r3, #0]
 800fa42:	19bb      	adds	r3, r7, r6
 800fa44:	0019      	movs	r1, r3
 800fa46:	2069      	movs	r0, #105	@ 0x69
 800fa48:	f001 f8af 	bl	8010baa <sensirion_i2c_write_data>
 800fa4c:	0003      	movs	r3, r0
 800fa4e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa50:	2314      	movs	r3, #20
 800fa52:	18fb      	adds	r3, r7, r3
 800fa54:	2200      	movs	r2, #0
 800fa56:	5e9b      	ldrsh	r3, [r3, r2]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d001      	beq.n	800fa60 <sen5x_read_device_status+0x4c>
        return 0xD206;
 800fa5c:	4b14      	ldr	r3, [pc, #80]	@ (800fab0 <sen5x_read_device_status+0x9c>)
 800fa5e:	e020      	b.n	800faa2 <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800fa60:	4b14      	ldr	r3, [pc, #80]	@ (800fab4 <sen5x_read_device_status+0xa0>)
 800fa62:	0018      	movs	r0, r3
 800fa64:	f7ff fa84 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800fa68:	2514      	movs	r5, #20
 800fa6a:	197c      	adds	r4, r7, r5
 800fa6c:	230c      	movs	r3, #12
 800fa6e:	18fb      	adds	r3, r7, r3
 800fa70:	2204      	movs	r2, #4
 800fa72:	0019      	movs	r1, r3
 800fa74:	2069      	movs	r0, #105	@ 0x69
 800fa76:	f001 f8b0 	bl	8010bda <sensirion_i2c_read_data_inplace>
 800fa7a:	0003      	movs	r3, r0
 800fa7c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa7e:	197b      	adds	r3, r7, r5
 800fa80:	2200      	movs	r2, #0
 800fa82:	5e9b      	ldrsh	r3, [r3, r2]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d003      	beq.n	800fa90 <sen5x_read_device_status+0x7c>
        return error;
 800fa88:	197b      	adds	r3, r7, r5
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	5e9b      	ldrsh	r3, [r3, r2]
 800fa8e:	e008      	b.n	800faa2 <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800fa90:	230c      	movs	r3, #12
 800fa92:	18fb      	adds	r3, r7, r3
 800fa94:	0018      	movs	r0, r3
 800fa96:	f000 f853 	bl	800fb40 <sensirion_common_bytes_to_uint32_t>
 800fa9a:	0002      	movs	r2, r0
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800faa0:	2300      	movs	r3, #0
}
 800faa2:	0018      	movs	r0, r3
 800faa4:	46bd      	mov	sp, r7
 800faa6:	b007      	add	sp, #28
 800faa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faaa:	46c0      	nop			@ (mov r8, r8)
 800faac:	0000d206 	.word	0x0000d206
 800fab0:	ffffd206 	.word	0xffffd206
 800fab4:	00004e20 	.word	0x00004e20

0800fab8 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800fab8:	b590      	push	{r4, r7, lr}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800fabe:	1dbb      	adds	r3, r7, #6
 800fac0:	2200      	movs	r2, #0
 800fac2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800fac4:	1dbc      	adds	r4, r7, #6
 800fac6:	4a12      	ldr	r2, [pc, #72]	@ (800fb10 <sen5x_device_reset+0x58>)
 800fac8:	1dbb      	adds	r3, r7, #6
 800faca:	8819      	ldrh	r1, [r3, #0]
 800facc:	003b      	movs	r3, r7
 800face:	0018      	movs	r0, r3
 800fad0:	f000 ffe7 	bl	8010aa2 <sensirion_i2c_add_command_to_buffer>
 800fad4:	0003      	movs	r3, r0
 800fad6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fad8:	1d3c      	adds	r4, r7, #4
 800fada:	1dbb      	adds	r3, r7, #6
 800fadc:	881a      	ldrh	r2, [r3, #0]
 800fade:	003b      	movs	r3, r7
 800fae0:	0019      	movs	r1, r3
 800fae2:	2069      	movs	r0, #105	@ 0x69
 800fae4:	f001 f861 	bl	8010baa <sensirion_i2c_write_data>
 800fae8:	0003      	movs	r3, r0
 800faea:	8023      	strh	r3, [r4, #0]
    if (error) {
 800faec:	1d3b      	adds	r3, r7, #4
 800faee:	2200      	movs	r2, #0
 800faf0:	5e9b      	ldrsh	r3, [r3, r2]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d003      	beq.n	800fafe <sen5x_device_reset+0x46>
        return error;
 800faf6:	1d3b      	adds	r3, r7, #4
 800faf8:	2200      	movs	r2, #0
 800fafa:	5e9b      	ldrsh	r3, [r3, r2]
 800fafc:	e004      	b.n	800fb08 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800fafe:	4b05      	ldr	r3, [pc, #20]	@ (800fb14 <sen5x_device_reset+0x5c>)
 800fb00:	0018      	movs	r0, r3
 800fb02:	f7ff fa35 	bl	800ef70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	0018      	movs	r0, r3
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	b003      	add	sp, #12
 800fb0e:	bd90      	pop	{r4, r7, pc}
 800fb10:	0000d304 	.word	0x0000d304
 800fb14:	00030d40 	.word	0x00030d40

0800fb18 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	b21b      	sxth	r3, r3
 800fb26:	021b      	lsls	r3, r3, #8
 800fb28:	b21a      	sxth	r2, r3
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	b21b      	sxth	r3, r3
 800fb32:	4313      	orrs	r3, r2
 800fb34:	b21b      	sxth	r3, r3
 800fb36:	b29b      	uxth	r3, r3
}
 800fb38:	0018      	movs	r0, r3
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	b002      	add	sp, #8
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	061a      	lsls	r2, r3, #24
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	3301      	adds	r3, #1
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	041b      	lsls	r3, r3, #16
 800fb56:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	3302      	adds	r3, #2
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fb60:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fb62:	687a      	ldr	r2, [r7, #4]
 800fb64:	3203      	adds	r2, #3
 800fb66:	7812      	ldrb	r2, [r2, #0]
 800fb68:	4313      	orrs	r3, r2
}
 800fb6a:	0018      	movs	r0, r3
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	b002      	add	sp, #8
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b082      	sub	sp, #8
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	0018      	movs	r0, r3
 800fb7e:	f7ff ffcb 	bl	800fb18 <sensirion_common_bytes_to_uint16_t>
 800fb82:	0003      	movs	r3, r0
 800fb84:	b21b      	sxth	r3, r3
}
 800fb86:	0018      	movs	r0, r3
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	b002      	add	sp, #8
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b086      	sub	sp, #24
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	60f8      	str	r0, [r7, #12]
 800fb96:	60b9      	str	r1, [r7, #8]
 800fb98:	1dbb      	adds	r3, r7, #6
 800fb9a:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800fb9c:	2316      	movs	r3, #22
 800fb9e:	18fb      	adds	r3, r7, r3
 800fba0:	2200      	movs	r2, #0
 800fba2:	801a      	strh	r2, [r3, #0]
 800fba4:	e00f      	b.n	800fbc6 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800fba6:	2016      	movs	r0, #22
 800fba8:	183b      	adds	r3, r7, r0
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	68fa      	ldr	r2, [r7, #12]
 800fbae:	18d2      	adds	r2, r2, r3
 800fbb0:	183b      	adds	r3, r7, r0
 800fbb2:	881b      	ldrh	r3, [r3, #0]
 800fbb4:	68b9      	ldr	r1, [r7, #8]
 800fbb6:	18cb      	adds	r3, r1, r3
 800fbb8:	7812      	ldrb	r2, [r2, #0]
 800fbba:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800fbbc:	183b      	adds	r3, r7, r0
 800fbbe:	881a      	ldrh	r2, [r3, #0]
 800fbc0:	183b      	adds	r3, r7, r0
 800fbc2:	3201      	adds	r2, #1
 800fbc4:	801a      	strh	r2, [r3, #0]
 800fbc6:	2316      	movs	r3, #22
 800fbc8:	18fa      	adds	r2, r7, r3
 800fbca:	1dbb      	adds	r3, r7, #6
 800fbcc:	8812      	ldrh	r2, [r2, #0]
 800fbce:	881b      	ldrh	r3, [r3, #0]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d3e8      	bcc.n	800fba6 <sensirion_common_copy_bytes+0x18>
    }
}
 800fbd4:	46c0      	nop			@ (mov r8, r8)
 800fbd6:	46c0      	nop			@ (mov r8, r8)
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	b006      	add	sp, #24
 800fbdc:	bd80      	pop	{r7, pc}
	...

0800fbe0 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	68ba      	ldr	r2, [r7, #8]
 800fbf0:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d113      	bne.n	800fc26 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	22fe      	movs	r2, #254	@ 0xfe
 800fc02:	0592      	lsls	r2, r2, #22
 800fc04:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	4a1a      	ldr	r2, [pc, #104]	@ (800fc74 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800fc0a:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	4a1a      	ldr	r2, [pc, #104]	@ (800fc78 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800fc10:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	4a19      	ldr	r2, [pc, #100]	@ (800fc7c <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800fc16:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	4a19      	ldr	r2, [pc, #100]	@ (800fc80 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800fc1c:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	4a18      	ldr	r2, [pc, #96]	@ (800fc84 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800fc22:	61da      	str	r2, [r3, #28]
 800fc24:	e011      	b.n	800fc4a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	4a17      	ldr	r2, [pc, #92]	@ (800fc88 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800fc2a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	4a17      	ldr	r2, [pc, #92]	@ (800fc8c <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800fc30:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	4a16      	ldr	r2, [pc, #88]	@ (800fc90 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800fc36:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	4a16      	ldr	r2, [pc, #88]	@ (800fc94 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800fc3c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	4a15      	ldr	r2, [pc, #84]	@ (800fc98 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800fc42:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	4a15      	ldr	r2, [pc, #84]	@ (800fc9c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800fc48:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	4a14      	ldr	r2, [pc, #80]	@ (800fca0 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800fc4e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	4a14      	ldr	r2, [pc, #80]	@ (800fca4 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fc54:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	4a12      	ldr	r2, [pc, #72]	@ (800fca4 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fc5a:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	4a12      	ldr	r2, [pc, #72]	@ (800fca8 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800fc60:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	0018      	movs	r0, r3
 800fc66:	f000 f831 	bl	800fccc <GasIndexAlgorithm_reset>
}
 800fc6a:	46c0      	nop			@ (mov r8, r8)
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	b004      	add	sp, #16
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	46c0      	nop			@ (mov r8, r8)
 800fc74:	00002710 	.word	0x00002710
 800fc78:	44340000 	.word	0x44340000
 800fc7c:	46859800 	.word	0x46859800
 800fc80:	46a05000 	.word	0x46a05000
 800fc84:	41f00000 	.word	0x41f00000
 800fc88:	42c80000 	.word	0x42c80000
 800fc8c:	00004e20 	.word	0x00004e20
 800fc90:	43340000 	.word	0x43340000
 800fc94:	4528c000 	.word	0x4528c000
 800fc98:	45a32000 	.word	0x45a32000
 800fc9c:	43aa0000 	.word	0x43aa0000
 800fca0:	43660000 	.word	0x43660000
 800fca4:	41400000 	.word	0x41400000
 800fca8:	42480000 	.word	0x42480000

0800fcac <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800fcb6:	22fe      	movs	r2, #254	@ 0xfe
 800fcb8:	0592      	lsls	r2, r2, #22
 800fcba:	6839      	ldr	r1, [r7, #0]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	0018      	movs	r0, r3
 800fcc0:	f7ff ff8e 	bl	800fbe0 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800fcc4:	46c0      	nop			@ (mov r8, r8)
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	b002      	add	sp, #8
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	0018      	movs	r0, r3
 800fcea:	f000 f805 	bl	800fcf8 <GasIndexAlgorithm__init_instances>
}
 800fcee:	46c0      	nop			@ (mov r8, r8)
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	b002      	add	sp, #8
 800fcf4:	bd80      	pop	{r7, pc}
	...

0800fcf8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800fcf8:	b590      	push	{r4, r7, lr}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	0018      	movs	r0, r3
 800fd04:	f000 f8e8 	bl	800fed8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	0018      	movs	r0, r3
 800fd0c:	f000 f9a6 	bl	801005c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800fd10:	1c04      	adds	r4, r0, #0
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	0018      	movs	r0, r3
 800fd16:	f000 f9ab 	bl	8010070 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800fd1a:	1c02      	adds	r2, r0, #0
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	1c21      	adds	r1, r4, #0
 800fd20:	0018      	movs	r0, r3
 800fd22:	f000 fc3b 	bl	801059c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d107      	bne.n	800fd3e <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fd2e:	23fe      	movs	r3, #254	@ 0xfe
 800fd30:	059b      	lsls	r3, r3, #22
 800fd32:	4a0a      	ldr	r2, [pc, #40]	@ (800fd5c <GasIndexAlgorithm__init_instances+0x64>)
 800fd34:	490a      	ldr	r1, [pc, #40]	@ (800fd60 <GasIndexAlgorithm__init_instances+0x68>)
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 fc86 	bl	8010648 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800fd3c:	e005      	b.n	800fd4a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fd3e:	4b09      	ldr	r3, [pc, #36]	@ (800fd64 <GasIndexAlgorithm__init_instances+0x6c>)
 800fd40:	4a09      	ldr	r2, [pc, #36]	@ (800fd68 <GasIndexAlgorithm__init_instances+0x70>)
 800fd42:	490a      	ldr	r1, [pc, #40]	@ (800fd6c <GasIndexAlgorithm__init_instances+0x74>)
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 fc7f 	bl	8010648 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	0018      	movs	r0, r3
 800fd4e:	f000 fd35 	bl	80107bc <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800fd52:	46c0      	nop			@ (mov r8, r8)
 800fd54:	46bd      	mov	sp, r7
 800fd56:	b003      	add	sp, #12
 800fd58:	bd90      	pop	{r4, r7, pc}
 800fd5a:	46c0      	nop			@ (mov r8, r8)
 800fd5c:	bc257a78 	.word	0xbc257a78
 800fd60:	44198000 	.word	0x44198000
 800fd64:	42c80000 	.word	0x42c80000
 800fd68:	bbd4fdf4 	.word	0xbbd4fdf4
 800fd6c:	43550000 	.word	0x43550000

0800fd70 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800fd70:	b590      	push	{r4, r7, lr}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd80:	4952      	ldr	r1, [pc, #328]	@ (800fecc <GasIndexAlgorithm_process+0x15c>)
 800fd82:	1c18      	adds	r0, r3, #0
 800fd84:	f7f0 fbde 	bl	8000544 <__aeabi_fcmple>
 800fd88:	1e03      	subs	r3, r0, #0
 800fd8a:	d00c      	beq.n	800fda6 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	1c19      	adds	r1, r3, #0
 800fd96:	1c10      	adds	r0, r2, #0
 800fd98:	f7f0 fd92 	bl	80008c0 <__aeabi_fadd>
 800fd9c:	1c03      	adds	r3, r0, #0
 800fd9e:	1c1a      	adds	r2, r3, #0
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	631a      	str	r2, [r3, #48]	@ 0x30
 800fda4:	e080      	b.n	800fea8 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	dd25      	ble.n	800fdf8 <GasIndexAlgorithm_process+0x88>
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	4a48      	ldr	r2, [pc, #288]	@ (800fed0 <GasIndexAlgorithm_process+0x160>)
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	dc21      	bgt.n	800fdf8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	68ba      	ldr	r2, [r7, #8]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	dc04      	bgt.n	800fdc8 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	68db      	ldr	r3, [r3, #12]
 800fdc2:	3301      	adds	r3, #1
 800fdc4:	60bb      	str	r3, [r7, #8]
 800fdc6:	e00d      	b.n	800fde4 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	68db      	ldr	r3, [r3, #12]
 800fdcc:	4a41      	ldr	r2, [pc, #260]	@ (800fed4 <GasIndexAlgorithm_process+0x164>)
 800fdce:	4694      	mov	ip, r2
 800fdd0:	4463      	add	r3, ip
 800fdd2:	68ba      	ldr	r2, [r7, #8]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	dd05      	ble.n	800fde4 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	68db      	ldr	r3, [r3, #12]
 800fddc:	4a3d      	ldr	r2, [pc, #244]	@ (800fed4 <GasIndexAlgorithm_process+0x164>)
 800fdde:	4694      	mov	ip, r2
 800fde0:	4463      	add	r3, ip
 800fde2:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	68db      	ldr	r3, [r3, #12]
 800fde8:	68ba      	ldr	r2, [r7, #8]
 800fdea:	1ad3      	subs	r3, r2, r3
 800fdec:	0018      	movs	r0, r3
 800fdee:	f7f1 fd1b 	bl	8001828 <__aeabi_i2f>
 800fdf2:	1c02      	adds	r2, r0, #0
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d005      	beq.n	800fe0c <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	0018      	movs	r0, r3
 800fe04:	f000 f945 	bl	8010092 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800fe08:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800fe0a:	d014      	beq.n	800fe36 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	1c11      	adds	r1, r2, #0
 800fe14:	0018      	movs	r0, r3
 800fe16:	f000 fbd1 	bl	80105bc <GasIndexAlgorithm__mox_model__process>
 800fe1a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	1c11      	adds	r1, r2, #0
 800fe28:	0018      	movs	r0, r3
 800fe2a:	f000 fc25 	bl	8010678 <GasIndexAlgorithm__sigmoid_scaled__process>
 800fe2e:	1c02      	adds	r2, r0, #0
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	639a      	str	r2, [r3, #56]	@ 0x38
 800fe34:	e003      	b.n	800fe3e <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	689a      	ldr	r2, [r3, #8]
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	1c11      	adds	r1, r2, #0
 800fe46:	0018      	movs	r0, r3
 800fe48:	f000 fcec 	bl	8010824 <GasIndexAlgorithm__adaptive_lowpass__process>
 800fe4c:	1c02      	adds	r2, r0, #0
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe56:	21fc      	movs	r1, #252	@ 0xfc
 800fe58:	0589      	lsls	r1, r1, #22
 800fe5a:	1c18      	adds	r0, r3, #0
 800fe5c:	f7f0 fb68 	bl	8000530 <__aeabi_fcmplt>
 800fe60:	1e03      	subs	r3, r0, #0
 800fe62:	d003      	beq.n	800fe6c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	22fc      	movs	r2, #252	@ 0xfc
 800fe68:	0592      	lsls	r2, r2, #22
 800fe6a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe70:	2100      	movs	r1, #0
 800fe72:	1c18      	adds	r0, r3, #0
 800fe74:	f7f0 fb70 	bl	8000558 <__aeabi_fcmpgt>
 800fe78:	1e03      	subs	r3, r0, #0
 800fe7a:	d015      	beq.n	800fea8 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	1c11      	adds	r1, r2, #0
 800fe84:	0018      	movs	r0, r3
 800fe86:	f000 fa4f 	bl	8010328 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	0018      	movs	r0, r3
 800fe8e:	f000 f8e5 	bl	801005c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800fe92:	1c04      	adds	r4, r0, #0
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	0018      	movs	r0, r3
 800fe98:	f000 f8ea 	bl	8010070 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800fe9c:	1c02      	adds	r2, r0, #0
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	1c21      	adds	r1, r4, #0
 800fea2:	0018      	movs	r0, r3
 800fea4:	f000 fb7a 	bl	801059c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feac:	21fc      	movs	r1, #252	@ 0xfc
 800feae:	0589      	lsls	r1, r1, #22
 800feb0:	1c18      	adds	r0, r3, #0
 800feb2:	f7f0 fd05 	bl	80008c0 <__aeabi_fadd>
 800feb6:	1c03      	adds	r3, r0, #0
 800feb8:	1c18      	adds	r0, r3, #0
 800feba:	f7f1 fc95 	bl	80017e8 <__aeabi_f2iz>
 800febe:	0002      	movs	r2, r0
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	601a      	str	r2, [r3, #0]
    return;
 800fec4:	46c0      	nop			@ (mov r8, r8)
}
 800fec6:	46bd      	mov	sp, r7
 800fec8:	b005      	add	sp, #20
 800feca:	bd90      	pop	{r4, r7, pc}
 800fecc:	42340000 	.word	0x42340000
 800fed0:	0000fde7 	.word	0x0000fde7
 800fed4:	00007fff 	.word	0x00007fff

0800fed8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800fed8:	b5b0      	push	{r4, r5, r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	223c      	movs	r2, #60	@ 0x3c
 800fee4:	2100      	movs	r1, #0
 800fee6:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2200      	movs	r2, #0
 800feec:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2200      	movs	r2, #0
 800fef2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	4952      	ldr	r1, [pc, #328]	@ (801004c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff02:	1c18      	adds	r0, r3, #0
 800ff04:	f7f0 fece 	bl	8000ca4 <__aeabi_fdiv>
 800ff08:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ff0a:	2188      	movs	r1, #136	@ 0x88
 800ff0c:	05c9      	lsls	r1, r1, #23
 800ff0e:	1c18      	adds	r0, r3, #0
 800ff10:	f7f1 f896 	bl	8001040 <__aeabi_fmul>
 800ff14:	1c03      	adds	r3, r0, #0
 800ff16:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	494a      	ldr	r1, [pc, #296]	@ (801004c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff22:	1c18      	adds	r0, r3, #0
 800ff24:	f7f0 febe 	bl	8000ca4 <__aeabi_fdiv>
 800ff28:	1c03      	adds	r3, r0, #0
 800ff2a:	1c19      	adds	r1, r3, #0
 800ff2c:	1c20      	adds	r0, r4, #0
 800ff2e:	f7f0 fcc7 	bl	80008c0 <__aeabi_fadd>
 800ff32:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ff34:	1c19      	adds	r1, r3, #0
 800ff36:	1c28      	adds	r0, r5, #0
 800ff38:	f7f0 feb4 	bl	8000ca4 <__aeabi_fdiv>
 800ff3c:	1c03      	adds	r3, r0, #0
 800ff3e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	4940      	ldr	r1, [pc, #256]	@ (801004c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff4a:	1c18      	adds	r0, r3, #0
 800ff4c:	f7f0 feaa 	bl	8000ca4 <__aeabi_fdiv>
 800ff50:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ff52:	2185      	movs	r1, #133	@ 0x85
 800ff54:	05c9      	lsls	r1, r1, #23
 800ff56:	1c18      	adds	r0, r3, #0
 800ff58:	f7f1 f872 	bl	8001040 <__aeabi_fmul>
 800ff5c:	1c03      	adds	r3, r0, #0
 800ff5e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	4938      	ldr	r1, [pc, #224]	@ (801004c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff6a:	1c18      	adds	r0, r3, #0
 800ff6c:	f7f0 fe9a 	bl	8000ca4 <__aeabi_fdiv>
 800ff70:	1c03      	adds	r3, r0, #0
 800ff72:	1c19      	adds	r1, r3, #0
 800ff74:	1c20      	adds	r0, r4, #0
 800ff76:	f7f0 fca3 	bl	80008c0 <__aeabi_fadd>
 800ff7a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ff7c:	1c19      	adds	r1, r3, #0
 800ff7e:	1c28      	adds	r0, r5, #0
 800ff80:	f7f0 fe90 	bl	8000ca4 <__aeabi_fdiv>
 800ff84:	1c03      	adds	r3, r0, #0
 800ff86:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d118      	bne.n	800ffc6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ff98:	2188      	movs	r1, #136	@ 0x88
 800ff9a:	05c9      	lsls	r1, r1, #23
 800ff9c:	1c18      	adds	r0, r3, #0
 800ff9e:	f7f1 f84f 	bl	8001040 <__aeabi_fmul>
 800ffa2:	1c03      	adds	r3, r0, #0
 800ffa4:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800ffaa:	4929      	ldr	r1, [pc, #164]	@ (8010050 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800ffac:	1c18      	adds	r0, r3, #0
 800ffae:	f7f0 fc87 	bl	80008c0 <__aeabi_fadd>
 800ffb2:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ffb4:	1c19      	adds	r1, r3, #0
 800ffb6:	1c20      	adds	r0, r4, #0
 800ffb8:	f7f0 fe74 	bl	8000ca4 <__aeabi_fdiv>
 800ffbc:	1c03      	adds	r3, r0, #0
 800ffbe:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	655a      	str	r2, [r3, #84]	@ 0x54
 800ffc4:	e017      	b.n	800fff6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ffca:	2188      	movs	r1, #136	@ 0x88
 800ffcc:	05c9      	lsls	r1, r1, #23
 800ffce:	1c18      	adds	r0, r3, #0
 800ffd0:	f7f1 f836 	bl	8001040 <__aeabi_fmul>
 800ffd4:	1c03      	adds	r3, r0, #0
 800ffd6:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800ffdc:	491d      	ldr	r1, [pc, #116]	@ (8010054 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800ffde:	1c18      	adds	r0, r3, #0
 800ffe0:	f7f0 fc6e 	bl	80008c0 <__aeabi_fadd>
 800ffe4:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ffe6:	1c19      	adds	r1, r3, #0
 800ffe8:	1c20      	adds	r0, r4, #0
 800ffea:	f7f0 fe5b 	bl	8000ca4 <__aeabi_fdiv>
 800ffee:	1c03      	adds	r3, r0, #0
 800fff0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800fffa:	2185      	movs	r1, #133	@ 0x85
 800fffc:	05c9      	lsls	r1, r1, #23
 800fffe:	1c18      	adds	r0, r3, #0
 8010000:	f7f1 f81e 	bl	8001040 <__aeabi_fmul>
 8010004:	1c03      	adds	r3, r0, #0
 8010006:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	4912      	ldr	r1, [pc, #72]	@ (8010058 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 801000e:	1c18      	adds	r0, r3, #0
 8010010:	f7f0 fc56 	bl	80008c0 <__aeabi_fadd>
 8010014:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8010016:	1c19      	adds	r1, r3, #0
 8010018:	1c20      	adds	r0, r4, #0
 801001a:	f7f0 fe43 	bl	8000ca4 <__aeabi_fdiv>
 801001e:	1c03      	adds	r3, r0, #0
 8010020:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2200      	movs	r2, #0
 8010036:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2200      	movs	r2, #0
 801003c:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2200      	movs	r2, #0
 8010042:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8010044:	46c0      	nop			@ (mov r8, r8)
 8010046:	46bd      	mov	sp, r7
 8010048:	b002      	add	sp, #8
 801004a:	bdb0      	pop	{r4, r5, r7, pc}
 801004c:	45610000 	.word	0x45610000
 8010050:	44960000 	.word	0x44960000
 8010054:	41a00000 	.word	0x41a00000
 8010058:	451c4000 	.word	0x451c4000

0801005c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 801005c:	b580      	push	{r7, lr}
 801005e:	b082      	sub	sp, #8
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8010068:	1c18      	adds	r0, r3, #0
 801006a:	46bd      	mov	sp, r7
 801006c:	b002      	add	sp, #8
 801006e:	bd80      	pop	{r7, pc}

08010070 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8010080:	1c19      	adds	r1, r3, #0
 8010082:	1c10      	adds	r0, r2, #0
 8010084:	f7f0 fc1c 	bl	80008c0 <__aeabi_fadd>
 8010088:	1c03      	adds	r3, r0, #0
}
 801008a:	1c18      	adds	r0, r3, #0
 801008c:	46bd      	mov	sp, r7
 801008e:	b002      	add	sp, #8
 8010090:	bd80      	pop	{r7, pc}

08010092 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8010092:	b580      	push	{r7, lr}
 8010094:	b082      	sub	sp, #8
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	223c      	movs	r2, #60	@ 0x3c
 801009e:	5c9b      	ldrb	r3, [r3, r2]
}
 80100a0:	0018      	movs	r0, r3
 80100a2:	46bd      	mov	sp, r7
 80100a4:	b002      	add	sp, #8
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 80100a8:	b5b0      	push	{r4, r5, r7, lr}
 80100aa:	b08c      	sub	sp, #48	@ 0x30
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 80100b4:	1c19      	adds	r1, r3, #0
 80100b6:	4895      	ldr	r0, [pc, #596]	@ (801030c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 80100b8:	f7f1 f91c 	bl	80012f4 <__aeabi_fsub>
 80100bc:	1c03      	adds	r3, r0, #0
 80100be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100c4:	1c19      	adds	r1, r3, #0
 80100c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80100c8:	f7f0 fa46 	bl	8000558 <__aeabi_fcmpgt>
 80100cc:	1e03      	subs	r3, r0, #0
 80100ce:	d00b      	beq.n	80100e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80100d8:	1c19      	adds	r1, r3, #0
 80100da:	1c10      	adds	r0, r2, #0
 80100dc:	f7f0 fbf0 	bl	80008c0 <__aeabi_fadd>
 80100e0:	1c03      	adds	r3, r0, #0
 80100e2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80100ec:	1c19      	adds	r1, r3, #0
 80100ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80100f0:	f7f0 fa32 	bl	8000558 <__aeabi_fcmpgt>
 80100f4:	1e03      	subs	r3, r0, #0
 80100f6:	d00b      	beq.n	8010110 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8010100:	1c19      	adds	r1, r3, #0
 8010102:	1c10      	adds	r0, r2, #0
 8010104:	f7f0 fbdc 	bl	80008c0 <__aeabi_fadd>
 8010108:	1c03      	adds	r3, r0, #0
 801010a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6959      	ldr	r1, [r3, #20]
 8010114:	4a7e      	ldr	r2, [pc, #504]	@ (8010310 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	0018      	movs	r0, r3
 801011a:	f000 f9f1 	bl	8010500 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	1c11      	adds	r1, r2, #0
 8010126:	0018      	movs	r0, r3
 8010128:	f000 f9fa 	bl	8010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801012c:	1c03      	adds	r3, r0, #0
 801012e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 801013c:	1c19      	adds	r1, r3, #0
 801013e:	1c10      	adds	r0, r2, #0
 8010140:	f7f1 f8d8 	bl	80012f4 <__aeabi_fsub>
 8010144:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8010146:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010148:	1c18      	adds	r0, r3, #0
 801014a:	f7f0 ff79 	bl	8001040 <__aeabi_fmul>
 801014e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8010150:	1c19      	adds	r1, r3, #0
 8010152:	1c20      	adds	r0, r4, #0
 8010154:	f7f0 fbb4 	bl	80008c0 <__aeabi_fadd>
 8010158:	1c03      	adds	r3, r0, #0
 801015a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8010164:	1c19      	adds	r1, r3, #0
 8010166:	486b      	ldr	r0, [pc, #428]	@ (8010314 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8010168:	f7f1 f8c4 	bl	80012f4 <__aeabi_fsub>
 801016c:	1c03      	adds	r3, r0, #0
 801016e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	1c11      	adds	r1, r2, #0
 8010178:	0018      	movs	r0, r3
 801017a:	f000 f9d1 	bl	8010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801017e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8010180:	1c19      	adds	r1, r3, #0
 8010182:	1c28      	adds	r0, r5, #0
 8010184:	f7f0 ff5c 	bl	8001040 <__aeabi_fmul>
 8010188:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 801018a:	1c19      	adds	r1, r3, #0
 801018c:	1c20      	adds	r0, r4, #0
 801018e:	f7f0 fb97 	bl	80008c0 <__aeabi_fadd>
 8010192:	1c03      	adds	r3, r0, #0
 8010194:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8010196:	4a60      	ldr	r2, [pc, #384]	@ (8010318 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8010198:	6a39      	ldr	r1, [r7, #32]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	0018      	movs	r0, r3
 801019e:	f000 f9af 	bl	8010500 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	1c11      	adds	r1, r2, #0
 80101aa:	0018      	movs	r0, r3
 80101ac:	f000 f9b8 	bl	8010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80101b0:	1c03      	adds	r3, r0, #0
 80101b2:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 80101b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80101b6:	69f8      	ldr	r0, [r7, #28]
 80101b8:	f7f0 ff42 	bl	8001040 <__aeabi_fmul>
 80101bc:	1c03      	adds	r3, r0, #0
 80101be:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6999      	ldr	r1, [r3, #24]
 80101c8:	4a51      	ldr	r2, [pc, #324]	@ (8010310 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	0018      	movs	r0, r3
 80101ce:	f000 f997 	bl	8010500 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	1c11      	adds	r1, r2, #0
 80101da:	0018      	movs	r0, r3
 80101dc:	f000 f9a0 	bl	8010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80101e0:	1c03      	adds	r3, r0, #0
 80101e2:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80101f0:	1c19      	adds	r1, r3, #0
 80101f2:	1c10      	adds	r0, r2, #0
 80101f4:	f7f1 f87e 	bl	80012f4 <__aeabi_fsub>
 80101f8:	1c03      	adds	r3, r0, #0
 80101fa:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80101fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80101fe:	69b8      	ldr	r0, [r7, #24]
 8010200:	f7f1 f878 	bl	80012f4 <__aeabi_fsub>
 8010204:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8010206:	1c19      	adds	r1, r3, #0
 8010208:	1c28      	adds	r0, r5, #0
 801020a:	f7f0 ff19 	bl	8001040 <__aeabi_fmul>
 801020e:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8010210:	1c19      	adds	r1, r3, #0
 8010212:	1c20      	adds	r0, r4, #0
 8010214:	f7f0 fb54 	bl	80008c0 <__aeabi_fadd>
 8010218:	1c03      	adds	r3, r0, #0
 801021a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8010224:	1c19      	adds	r1, r3, #0
 8010226:	483b      	ldr	r0, [pc, #236]	@ (8010314 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8010228:	f7f1 f864 	bl	80012f4 <__aeabi_fsub>
 801022c:	1c03      	adds	r3, r0, #0
 801022e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	1c11      	adds	r1, r2, #0
 8010238:	0018      	movs	r0, r3
 801023a:	f000 f971 	bl	8010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801023e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8010240:	1c19      	adds	r1, r3, #0
 8010242:	1c28      	adds	r0, r5, #0
 8010244:	f7f0 fefc 	bl	8001040 <__aeabi_fmul>
 8010248:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 801024a:	1c19      	adds	r1, r3, #0
 801024c:	1c20      	adds	r0, r4, #0
 801024e:	f7f0 fb37 	bl	80008c0 <__aeabi_fadd>
 8010252:	1c03      	adds	r3, r0, #0
 8010254:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8010256:	4a30      	ldr	r2, [pc, #192]	@ (8010318 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8010258:	6939      	ldr	r1, [r7, #16]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	0018      	movs	r0, r3
 801025e:	f000 f94f 	bl	8010500 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	1c11      	adds	r1, r2, #0
 801026a:	0018      	movs	r0, r3
 801026c:	f000 f958 	bl	8010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010270:	1c03      	adds	r3, r0, #0
 8010272:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8010274:	6979      	ldr	r1, [r7, #20]
 8010276:	68f8      	ldr	r0, [r7, #12]
 8010278:	f7f0 fee2 	bl	8001040 <__aeabi_fmul>
 801027c:	1c03      	adds	r3, r0, #0
 801027e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	685b      	ldr	r3, [r3, #4]
 801028c:	4923      	ldr	r1, [pc, #140]	@ (801031c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 801028e:	1c18      	adds	r0, r3, #0
 8010290:	f7f0 fd08 	bl	8000ca4 <__aeabi_fdiv>
 8010294:	1c03      	adds	r3, r0, #0
 8010296:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8010298:	69f9      	ldr	r1, [r7, #28]
 801029a:	20fe      	movs	r0, #254	@ 0xfe
 801029c:	0580      	lsls	r0, r0, #22
 801029e:	f7f1 f829 	bl	80012f4 <__aeabi_fsub>
 80102a2:	1c03      	adds	r3, r0, #0
 80102a4:	491e      	ldr	r1, [pc, #120]	@ (8010320 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 80102a6:	1c18      	adds	r0, r3, #0
 80102a8:	f7f0 feca 	bl	8001040 <__aeabi_fmul>
 80102ac:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 80102ae:	491d      	ldr	r1, [pc, #116]	@ (8010324 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 80102b0:	1c18      	adds	r0, r3, #0
 80102b2:	f7f1 f81f 	bl	80012f4 <__aeabi_fsub>
 80102b6:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 80102b8:	1c19      	adds	r1, r3, #0
 80102ba:	1c28      	adds	r0, r5, #0
 80102bc:	f7f0 fec0 	bl	8001040 <__aeabi_fmul>
 80102c0:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80102c2:	1c19      	adds	r1, r3, #0
 80102c4:	1c20      	adds	r0, r4, #0
 80102c6:	f7f0 fafb 	bl	80008c0 <__aeabi_fadd>
 80102ca:	1c03      	adds	r3, r0, #0
 80102cc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102d6:	2100      	movs	r1, #0
 80102d8:	1c18      	adds	r0, r3, #0
 80102da:	f7f0 f929 	bl	8000530 <__aeabi_fcmplt>
 80102de:	1e03      	subs	r3, r0, #0
 80102e0:	d002      	beq.n	80102e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80102f0:	1c19      	adds	r1, r3, #0
 80102f2:	1c10      	adds	r0, r2, #0
 80102f4:	f7f0 f930 	bl	8000558 <__aeabi_fcmpgt>
 80102f8:	1e03      	subs	r3, r0, #0
 80102fa:	d100      	bne.n	80102fe <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80102fc:	e002      	b.n	8010304 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2200      	movs	r2, #0
 8010302:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8010304:	46c0      	nop			@ (mov r8, r8)
 8010306:	46bd      	mov	sp, r7
 8010308:	b00c      	add	sp, #48	@ 0x30
 801030a:	bdb0      	pop	{r4, r5, r7, pc}
 801030c:	46fffe00 	.word	0x46fffe00
 8010310:	3c23d70a 	.word	0x3c23d70a
 8010314:	43ff0000 	.word	0x43ff0000
 8010318:	3db851ec 	.word	0x3db851ec
 801031c:	42700000 	.word	0x42700000
 8010320:	3fa66666 	.word	0x3fa66666
 8010324:	3e99999a 	.word	0x3e99999a

08010328 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8010328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801032a:	b087      	sub	sp, #28
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	223c      	movs	r2, #60	@ 0x3c
 8010336:	5c9b      	ldrb	r3, [r3, r2]
 8010338:	2201      	movs	r2, #1
 801033a:	4053      	eors	r3, r2
 801033c:	b2db      	uxtb	r3, r3
 801033e:	2b00      	cmp	r3, #0
 8010340:	d00a      	beq.n	8010358 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	223c      	movs	r2, #60	@ 0x3c
 8010346:	2101      	movs	r1, #1
 8010348:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	683a      	ldr	r2, [r7, #0]
 801034e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2200      	movs	r2, #0
 8010354:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8010356:	e0c8      	b.n	80104ea <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801035c:	4965      	ldr	r1, [pc, #404]	@ (80104f4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 801035e:	1c18      	adds	r0, r3, #0
 8010360:	f7f0 f904 	bl	800056c <__aeabi_fcmpge>
 8010364:	1e03      	subs	r3, r0, #0
 8010366:	d107      	bne.n	8010378 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 801036c:	4962      	ldr	r1, [pc, #392]	@ (80104f8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 801036e:	1c18      	adds	r0, r3, #0
 8010370:	f7f0 f8e8 	bl	8000544 <__aeabi_fcmple>
 8010374:	1e03      	subs	r3, r0, #0
 8010376:	d00e      	beq.n	8010396 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8010380:	1c19      	adds	r1, r3, #0
 8010382:	1c10      	adds	r0, r2, #0
 8010384:	f7f0 fa9c 	bl	80008c0 <__aeabi_fadd>
 8010388:	1c03      	adds	r3, r0, #0
 801038a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2200      	movs	r2, #0
 8010394:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801039a:	1c19      	adds	r1, r3, #0
 801039c:	6838      	ldr	r0, [r7, #0]
 801039e:	f7f0 ffa9 	bl	80012f4 <__aeabi_fsub>
 80103a2:	1c03      	adds	r3, r0, #0
 80103a4:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	0018      	movs	r0, r3
 80103aa:	f7ff fe7d 	bl	80100a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103b2:	1c19      	adds	r1, r3, #0
 80103b4:	6838      	ldr	r0, [r7, #0]
 80103b6:	f7f0 ff9d 	bl	80012f4 <__aeabi_fsub>
 80103ba:	1c03      	adds	r3, r0, #0
 80103bc:	2185      	movs	r1, #133	@ 0x85
 80103be:	05c9      	lsls	r1, r1, #23
 80103c0:	1c18      	adds	r0, r3, #0
 80103c2:	f7f0 fc6f 	bl	8000ca4 <__aeabi_fdiv>
 80103c6:	1c03      	adds	r3, r0, #0
 80103c8:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 80103ca:	2100      	movs	r1, #0
 80103cc:	68f8      	ldr	r0, [r7, #12]
 80103ce:	f7f0 f8af 	bl	8000530 <__aeabi_fcmplt>
 80103d2:	1e03      	subs	r3, r0, #0
 80103d4:	d008      	beq.n	80103e8 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80103da:	68f9      	ldr	r1, [r7, #12]
 80103dc:	1c18      	adds	r0, r3, #0
 80103de:	f7f0 ff89 	bl	80012f4 <__aeabi_fsub>
 80103e2:	1c03      	adds	r3, r0, #0
 80103e4:	617b      	str	r3, [r7, #20]
 80103e6:	e007      	b.n	80103f8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80103ec:	1c19      	adds	r1, r3, #0
 80103ee:	68f8      	ldr	r0, [r7, #12]
 80103f0:	f7f0 fa66 	bl	80008c0 <__aeabi_fadd>
 80103f4:	1c03      	adds	r3, r0, #0
 80103f6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80103f8:	23fe      	movs	r3, #254	@ 0xfe
 80103fa:	059b      	lsls	r3, r3, #22
 80103fc:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80103fe:	493f      	ldr	r1, [pc, #252]	@ (80104fc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8010400:	6978      	ldr	r0, [r7, #20]
 8010402:	f7f0 f8a9 	bl	8000558 <__aeabi_fcmpgt>
 8010406:	1e03      	subs	r3, r0, #0
 8010408:	d010      	beq.n	801042c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 801040a:	493c      	ldr	r1, [pc, #240]	@ (80104fc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 801040c:	6978      	ldr	r0, [r7, #20]
 801040e:	f7f0 fc49 	bl	8000ca4 <__aeabi_fdiv>
 8010412:	1c03      	adds	r3, r0, #0
 8010414:	1c1c      	adds	r4, r3, #0
 8010416:	4939      	ldr	r1, [pc, #228]	@ (80104fc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8010418:	6978      	ldr	r0, [r7, #20]
 801041a:	f7f0 fc43 	bl	8000ca4 <__aeabi_fdiv>
 801041e:	1c03      	adds	r3, r0, #0
 8010420:	1c19      	adds	r1, r3, #0
 8010422:	1c20      	adds	r0, r4, #0
 8010424:	f7f0 fe0c 	bl	8001040 <__aeabi_fmul>
 8010428:	1c03      	adds	r3, r0, #0
 801042a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8010430:	1c19      	adds	r1, r3, #0
 8010432:	2085      	movs	r0, #133	@ 0x85
 8010434:	05c0      	lsls	r0, r0, #23
 8010436:	f7f0 ff5d 	bl	80012f4 <__aeabi_fsub>
 801043a:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 801043c:	6939      	ldr	r1, [r7, #16]
 801043e:	1c18      	adds	r0, r3, #0
 8010440:	f7f0 fdfe 	bl	8001040 <__aeabi_fmul>
 8010444:	1c03      	adds	r3, r0, #0
 8010446:	1c18      	adds	r0, r3, #0
 8010448:	f018 fe6a 	bl	8029120 <sqrtf>
 801044c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8010456:	2185      	movs	r1, #133	@ 0x85
 8010458:	05c9      	lsls	r1, r1, #23
 801045a:	6938      	ldr	r0, [r7, #16]
 801045c:	f7f0 fdf0 	bl	8001040 <__aeabi_fmul>
 8010460:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8010462:	1c19      	adds	r1, r3, #0
 8010464:	1c28      	adds	r0, r5, #0
 8010466:	f7f0 fc1d 	bl	8000ca4 <__aeabi_fdiv>
 801046a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 801046c:	1c19      	adds	r1, r3, #0
 801046e:	1c20      	adds	r0, r4, #0
 8010470:	f7f0 fde6 	bl	8001040 <__aeabi_fmul>
 8010474:	1c03      	adds	r3, r0, #0
 8010476:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801047c:	68f9      	ldr	r1, [r7, #12]
 801047e:	1c18      	adds	r0, r3, #0
 8010480:	f7f0 fdde 	bl	8001040 <__aeabi_fmul>
 8010484:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8010486:	6939      	ldr	r1, [r7, #16]
 8010488:	1c18      	adds	r0, r3, #0
 801048a:	f7f0 fc0b 	bl	8000ca4 <__aeabi_fdiv>
 801048e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8010490:	68f9      	ldr	r1, [r7, #12]
 8010492:	1c18      	adds	r0, r3, #0
 8010494:	f7f0 fdd4 	bl	8001040 <__aeabi_fmul>
 8010498:	1c03      	adds	r3, r0, #0
             sqrtf(
 801049a:	1c19      	adds	r1, r3, #0
 801049c:	1c20      	adds	r0, r4, #0
 801049e:	f7f0 fa0f 	bl	80008c0 <__aeabi_fadd>
 80104a2:	1c03      	adds	r3, r0, #0
 80104a4:	1c18      	adds	r0, r3, #0
 80104a6:	f018 fe3b 	bl	8029120 <sqrtf>
 80104aa:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80104ac:	1c19      	adds	r1, r3, #0
 80104ae:	1c30      	adds	r0, r6, #0
 80104b0:	f7f0 fdc6 	bl	8001040 <__aeabi_fmul>
 80104b4:	1c03      	adds	r3, r0, #0
 80104b6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80104c4:	68f9      	ldr	r1, [r7, #12]
 80104c6:	1c18      	adds	r0, r3, #0
 80104c8:	f7f0 fdba 	bl	8001040 <__aeabi_fmul>
 80104cc:	1c03      	adds	r3, r0, #0
 80104ce:	2182      	movs	r1, #130	@ 0x82
 80104d0:	05c9      	lsls	r1, r1, #23
 80104d2:	1c18      	adds	r0, r3, #0
 80104d4:	f7f0 fbe6 	bl	8000ca4 <__aeabi_fdiv>
 80104d8:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80104da:	1c19      	adds	r1, r3, #0
 80104dc:	1c20      	adds	r0, r4, #0
 80104de:	f7f0 f9ef 	bl	80008c0 <__aeabi_fadd>
 80104e2:	1c03      	adds	r3, r0, #0
 80104e4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80104ea:	46c0      	nop			@ (mov r8, r8)
 80104ec:	46bd      	mov	sp, r7
 80104ee:	b007      	add	sp, #28
 80104f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104f2:	46c0      	nop			@ (mov r8, r8)
 80104f4:	42c80000 	.word	0x42c80000
 80104f8:	c2c80000 	.word	0xc2c80000
 80104fc:	44b40000 	.word	0x44b40000

08010500 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	68ba      	ldr	r2, [r7, #8]
 8010516:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010518:	46c0      	nop			@ (mov r8, r8)
 801051a:	46bd      	mov	sp, r7
 801051c:	b004      	add	sp, #16
 801051e:	bd80      	pop	{r7, pc}

08010520 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8010520:	b590      	push	{r4, r7, lr}
 8010522:	b085      	sub	sp, #20
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010532:	1c19      	adds	r1, r3, #0
 8010534:	6838      	ldr	r0, [r7, #0]
 8010536:	f7f0 fedd 	bl	80012f4 <__aeabi_fsub>
 801053a:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 801053c:	1c19      	adds	r1, r3, #0
 801053e:	1c20      	adds	r0, r4, #0
 8010540:	f7f0 fd7e 	bl	8001040 <__aeabi_fmul>
 8010544:	1c03      	adds	r3, r0, #0
 8010546:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8010548:	4912      	ldr	r1, [pc, #72]	@ (8010594 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	f7ef fff0 	bl	8000530 <__aeabi_fcmplt>
 8010550:	1e03      	subs	r3, r0, #0
 8010552:	d002      	beq.n	801055a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8010554:	23fe      	movs	r3, #254	@ 0xfe
 8010556:	059b      	lsls	r3, r3, #22
 8010558:	e018      	b.n	801058c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 801055a:	490f      	ldr	r1, [pc, #60]	@ (8010598 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 801055c:	68f8      	ldr	r0, [r7, #12]
 801055e:	f7ef fffb 	bl	8000558 <__aeabi_fcmpgt>
 8010562:	1e03      	subs	r3, r0, #0
 8010564:	d001      	beq.n	801056a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8010566:	2300      	movs	r3, #0
 8010568:	e010      	b.n	801058c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	1c18      	adds	r0, r3, #0
 801056e:	f018 fdaf 	bl	80290d0 <expf>
 8010572:	1c03      	adds	r3, r0, #0
 8010574:	21fe      	movs	r1, #254	@ 0xfe
 8010576:	0589      	lsls	r1, r1, #22
 8010578:	1c18      	adds	r0, r3, #0
 801057a:	f7f0 f9a1 	bl	80008c0 <__aeabi_fadd>
 801057e:	1c03      	adds	r3, r0, #0
 8010580:	1c19      	adds	r1, r3, #0
 8010582:	20fe      	movs	r0, #254	@ 0xfe
 8010584:	0580      	lsls	r0, r0, #22
 8010586:	f7f0 fb8d 	bl	8000ca4 <__aeabi_fdiv>
 801058a:	1c03      	adds	r3, r0, #0
    }
}
 801058c:	1c18      	adds	r0, r3, #0
 801058e:	46bd      	mov	sp, r7
 8010590:	b005      	add	sp, #20
 8010592:	bd90      	pop	{r4, r7, pc}
 8010594:	c2480000 	.word	0xc2480000
 8010598:	42480000 	.word	0x42480000

0801059c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	68ba      	ldr	r2, [r7, #8]
 80105ac:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	687a      	ldr	r2, [r7, #4]
 80105b2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80105b4:	46c0      	nop			@ (mov r8, r8)
 80105b6:	46bd      	mov	sp, r7
 80105b8:	b004      	add	sp, #16
 80105ba:	bd80      	pop	{r7, pc}

080105bc <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 80105bc:	b590      	push	{r4, r7, lr}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2b01      	cmp	r3, #1
 80105cc:	d114      	bne.n	80105f8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105d2:	1c19      	adds	r1, r3, #0
 80105d4:	6838      	ldr	r0, [r7, #0]
 80105d6:	f7f0 fe8d 	bl	80012f4 <__aeabi_fsub>
 80105da:	1c03      	adds	r3, r0, #0
 80105dc:	4918      	ldr	r1, [pc, #96]	@ (8010640 <GasIndexAlgorithm__mox_model__process+0x84>)
 80105de:	1c18      	adds	r0, r3, #0
 80105e0:	f7f0 fb60 	bl	8000ca4 <__aeabi_fdiv>
 80105e4:	1c03      	adds	r3, r0, #0
 80105e6:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80105ec:	1c19      	adds	r1, r3, #0
 80105ee:	1c10      	adds	r0, r2, #0
 80105f0:	f7f0 fd26 	bl	8001040 <__aeabi_fmul>
 80105f4:	1c03      	adds	r3, r0, #0
 80105f6:	e01f      	b.n	8010638 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105fc:	1c19      	adds	r1, r3, #0
 80105fe:	6838      	ldr	r0, [r7, #0]
 8010600:	f7f0 fe78 	bl	80012f4 <__aeabi_fsub>
 8010604:	1c03      	adds	r3, r0, #0
 8010606:	1c1a      	adds	r2, r3, #0
 8010608:	2380      	movs	r3, #128	@ 0x80
 801060a:	061b      	lsls	r3, r3, #24
 801060c:	4053      	eors	r3, r2
 801060e:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010614:	490b      	ldr	r1, [pc, #44]	@ (8010644 <GasIndexAlgorithm__mox_model__process+0x88>)
 8010616:	1c18      	adds	r0, r3, #0
 8010618:	f7f0 f952 	bl	80008c0 <__aeabi_fadd>
 801061c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 801061e:	1c19      	adds	r1, r3, #0
 8010620:	1c20      	adds	r0, r4, #0
 8010622:	f7f0 fb3f 	bl	8000ca4 <__aeabi_fdiv>
 8010626:	1c03      	adds	r3, r0, #0
 8010628:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 801062e:	1c19      	adds	r1, r3, #0
 8010630:	1c10      	adds	r0, r2, #0
 8010632:	f7f0 fd05 	bl	8001040 <__aeabi_fmul>
 8010636:	1c03      	adds	r3, r0, #0
    }
}
 8010638:	1c18      	adds	r0, r3, #0
 801063a:	46bd      	mov	sp, r7
 801063c:	b003      	add	sp, #12
 801063e:	bd90      	pop	{r4, r7, pc}
 8010640:	44fa0000 	.word	0x44fa0000
 8010644:	435c0000 	.word	0x435c0000

08010648 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	60f8      	str	r0, [r7, #12]
 8010650:	60b9      	str	r1, [r7, #8]
 8010652:	607a      	str	r2, [r7, #4]
 8010654:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2180      	movs	r1, #128	@ 0x80
 801065a:	687a      	ldr	r2, [r7, #4]
 801065c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2184      	movs	r1, #132	@ 0x84
 8010662:	68ba      	ldr	r2, [r7, #8]
 8010664:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2188      	movs	r1, #136	@ 0x88
 801066a:	683a      	ldr	r2, [r7, #0]
 801066c:	505a      	str	r2, [r3, r1]
}
 801066e:	46c0      	nop			@ (mov r8, r8)
 8010670:	46bd      	mov	sp, r7
 8010672:	b004      	add	sp, #16
 8010674:	bd80      	pop	{r7, pc}
	...

08010678 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8010678:	b590      	push	{r4, r7, lr}
 801067a:	b085      	sub	sp, #20
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2280      	movs	r2, #128	@ 0x80
 8010686:	589c      	ldr	r4, [r3, r2]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2284      	movs	r2, #132	@ 0x84
 801068c:	589b      	ldr	r3, [r3, r2]
 801068e:	1c19      	adds	r1, r3, #0
 8010690:	6838      	ldr	r0, [r7, #0]
 8010692:	f7f0 fe2f 	bl	80012f4 <__aeabi_fsub>
 8010696:	1c03      	adds	r3, r0, #0
 8010698:	1c19      	adds	r1, r3, #0
 801069a:	1c20      	adds	r0, r4, #0
 801069c:	f7f0 fcd0 	bl	8001040 <__aeabi_fmul>
 80106a0:	1c03      	adds	r3, r0, #0
 80106a2:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 80106a4:	4940      	ldr	r1, [pc, #256]	@ (80107a8 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 80106a6:	68b8      	ldr	r0, [r7, #8]
 80106a8:	f7ef ff42 	bl	8000530 <__aeabi_fcmplt>
 80106ac:	1e03      	subs	r3, r0, #0
 80106ae:	d001      	beq.n	80106b4 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 80106b0:	4b3e      	ldr	r3, [pc, #248]	@ (80107ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80106b2:	e075      	b.n	80107a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 80106b4:	493e      	ldr	r1, [pc, #248]	@ (80107b0 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 80106b6:	68b8      	ldr	r0, [r7, #8]
 80106b8:	f7ef ff4e 	bl	8000558 <__aeabi_fcmpgt>
 80106bc:	1e03      	subs	r3, r0, #0
 80106be:	d001      	beq.n	80106c4 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 80106c0:	2300      	movs	r3, #0
 80106c2:	e06d      	b.n	80107a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 80106c4:	2100      	movs	r1, #0
 80106c6:	6838      	ldr	r0, [r7, #0]
 80106c8:	f7ef ff50 	bl	800056c <__aeabi_fcmpge>
 80106cc:	1e03      	subs	r3, r0, #0
 80106ce:	d047      	beq.n	8010760 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2288      	movs	r2, #136	@ 0x88
 80106d4:	589b      	ldr	r3, [r3, r2]
 80106d6:	21fe      	movs	r1, #254	@ 0xfe
 80106d8:	0589      	lsls	r1, r1, #22
 80106da:	1c18      	adds	r0, r3, #0
 80106dc:	f7ef ff22 	bl	8000524 <__aeabi_fcmpeq>
 80106e0:	1e03      	subs	r3, r0, #0
 80106e2:	d00e      	beq.n	8010702 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	689b      	ldr	r3, [r3, #8]
 80106e8:	1c19      	adds	r1, r3, #0
 80106ea:	20fe      	movs	r0, #254	@ 0xfe
 80106ec:	0580      	lsls	r0, r0, #22
 80106ee:	f7f0 fe01 	bl	80012f4 <__aeabi_fsub>
 80106f2:	1c03      	adds	r3, r0, #0
 80106f4:	492f      	ldr	r1, [pc, #188]	@ (80107b4 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80106f6:	1c18      	adds	r0, r3, #0
 80106f8:	f7f0 fca2 	bl	8001040 <__aeabi_fmul>
 80106fc:	1c03      	adds	r3, r0, #0
 80106fe:	60fb      	str	r3, [r7, #12]
 8010700:	e012      	b.n	8010728 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	689b      	ldr	r3, [r3, #8]
 8010706:	492c      	ldr	r1, [pc, #176]	@ (80107b8 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8010708:	1c18      	adds	r0, r3, #0
 801070a:	f7f0 fc99 	bl	8001040 <__aeabi_fmul>
 801070e:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8010710:	1c19      	adds	r1, r3, #0
 8010712:	4826      	ldr	r0, [pc, #152]	@ (80107ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010714:	f7f0 fdee 	bl	80012f4 <__aeabi_fsub>
 8010718:	1c03      	adds	r3, r0, #0
 801071a:	2181      	movs	r1, #129	@ 0x81
 801071c:	05c9      	lsls	r1, r1, #23
 801071e:	1c18      	adds	r0, r3, #0
 8010720:	f7f0 fac0 	bl	8000ca4 <__aeabi_fdiv>
 8010724:	1c03      	adds	r3, r0, #0
 8010726:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8010728:	4920      	ldr	r1, [pc, #128]	@ (80107ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 801072a:	68f8      	ldr	r0, [r7, #12]
 801072c:	f7f0 f8c8 	bl	80008c0 <__aeabi_fadd>
 8010730:	1c03      	adds	r3, r0, #0
 8010732:	1c1c      	adds	r4, r3, #0
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	1c18      	adds	r0, r3, #0
 8010738:	f018 fcca 	bl	80290d0 <expf>
 801073c:	1c03      	adds	r3, r0, #0
 801073e:	21fe      	movs	r1, #254	@ 0xfe
 8010740:	0589      	lsls	r1, r1, #22
 8010742:	1c18      	adds	r0, r3, #0
 8010744:	f7f0 f8bc 	bl	80008c0 <__aeabi_fadd>
 8010748:	1c03      	adds	r3, r0, #0
 801074a:	1c19      	adds	r1, r3, #0
 801074c:	1c20      	adds	r0, r4, #0
 801074e:	f7f0 faa9 	bl	8000ca4 <__aeabi_fdiv>
 8010752:	1c03      	adds	r3, r0, #0
 8010754:	68f9      	ldr	r1, [r7, #12]
 8010756:	1c18      	adds	r0, r3, #0
 8010758:	f7f0 fdcc 	bl	80012f4 <__aeabi_fsub>
 801075c:	1c03      	adds	r3, r0, #0
 801075e:	e01f      	b.n	80107a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2188      	movs	r1, #136	@ 0x88
 8010768:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 801076a:	1c19      	adds	r1, r3, #0
 801076c:	1c10      	adds	r0, r2, #0
 801076e:	f7f0 fa99 	bl	8000ca4 <__aeabi_fdiv>
 8010772:	1c03      	adds	r3, r0, #0
 8010774:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	1c18      	adds	r0, r3, #0
 801077a:	f018 fca9 	bl	80290d0 <expf>
 801077e:	1c03      	adds	r3, r0, #0
 8010780:	21fe      	movs	r1, #254	@ 0xfe
 8010782:	0589      	lsls	r1, r1, #22
 8010784:	1c18      	adds	r0, r3, #0
 8010786:	f7f0 f89b 	bl	80008c0 <__aeabi_fadd>
 801078a:	1c03      	adds	r3, r0, #0
 801078c:	1c19      	adds	r1, r3, #0
 801078e:	4807      	ldr	r0, [pc, #28]	@ (80107ac <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010790:	f7f0 fa88 	bl	8000ca4 <__aeabi_fdiv>
 8010794:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010796:	1c19      	adds	r1, r3, #0
 8010798:	1c20      	adds	r0, r4, #0
 801079a:	f7f0 fc51 	bl	8001040 <__aeabi_fmul>
 801079e:	1c03      	adds	r3, r0, #0
        }
    }
}
 80107a0:	1c18      	adds	r0, r3, #0
 80107a2:	46bd      	mov	sp, r7
 80107a4:	b005      	add	sp, #20
 80107a6:	bd90      	pop	{r4, r7, pc}
 80107a8:	c2480000 	.word	0xc2480000
 80107ac:	43fa0000 	.word	0x43fa0000
 80107b0:	42480000 	.word	0x42480000
 80107b4:	3f8041ab 	.word	0x3f8041ab
 80107b8:	40a00000 	.word	0x40a00000

080107bc <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 80107bc:	b590      	push	{r4, r7, lr}
 80107be:	b083      	sub	sp, #12
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	685b      	ldr	r3, [r3, #4]
 80107cc:	4913      	ldr	r1, [pc, #76]	@ (801081c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80107ce:	1c18      	adds	r0, r3, #0
 80107d0:	f7f0 f876 	bl	80008c0 <__aeabi_fadd>
 80107d4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80107d6:	1c19      	adds	r1, r3, #0
 80107d8:	1c20      	adds	r0, r4, #0
 80107da:	f7f0 fa63 	bl	8000ca4 <__aeabi_fdiv>
 80107de:	1c03      	adds	r3, r0, #0
 80107e0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	228c      	movs	r2, #140	@ 0x8c
 80107e6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	490b      	ldr	r1, [pc, #44]	@ (8010820 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80107f2:	1c18      	adds	r0, r3, #0
 80107f4:	f7f0 f864 	bl	80008c0 <__aeabi_fadd>
 80107f8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80107fa:	1c19      	adds	r1, r3, #0
 80107fc:	1c20      	adds	r0, r4, #0
 80107fe:	f7f0 fa51 	bl	8000ca4 <__aeabi_fdiv>
 8010802:	1c03      	adds	r3, r0, #0
 8010804:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2290      	movs	r2, #144	@ 0x90
 801080a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2294      	movs	r2, #148	@ 0x94
 8010810:	2100      	movs	r1, #0
 8010812:	5499      	strb	r1, [r3, r2]
}
 8010814:	46c0      	nop			@ (mov r8, r8)
 8010816:	46bd      	mov	sp, r7
 8010818:	b003      	add	sp, #12
 801081a:	bd90      	pop	{r4, r7, pc}
 801081c:	41a00000 	.word	0x41a00000
 8010820:	43fa0000 	.word	0x43fa0000

08010824 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8010824:	b590      	push	{r4, r7, lr}
 8010826:	b087      	sub	sp, #28
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2294      	movs	r2, #148	@ 0x94
 8010832:	5c9b      	ldrb	r3, [r3, r2]
 8010834:	2201      	movs	r2, #1
 8010836:	4053      	eors	r3, r2
 8010838:	b2db      	uxtb	r3, r3
 801083a:	2b00      	cmp	r3, #0
 801083c:	d00f      	beq.n	801085e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2198      	movs	r1, #152	@ 0x98
 8010842:	683a      	ldr	r2, [r7, #0]
 8010844:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	219c      	movs	r1, #156	@ 0x9c
 801084a:	683a      	ldr	r2, [r7, #0]
 801084c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	21a0      	movs	r1, #160	@ 0xa0
 8010852:	683a      	ldr	r2, [r7, #0]
 8010854:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2294      	movs	r2, #148	@ 0x94
 801085a:	2101      	movs	r1, #1
 801085c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	228c      	movs	r2, #140	@ 0x8c
 8010862:	589b      	ldr	r3, [r3, r2]
 8010864:	1c19      	adds	r1, r3, #0
 8010866:	20fe      	movs	r0, #254	@ 0xfe
 8010868:	0580      	lsls	r0, r0, #22
 801086a:	f7f0 fd43 	bl	80012f4 <__aeabi_fsub>
 801086e:	1c03      	adds	r3, r0, #0
 8010870:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2298      	movs	r2, #152	@ 0x98
 8010876:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010878:	1c19      	adds	r1, r3, #0
 801087a:	f7f0 fbe1 	bl	8001040 <__aeabi_fmul>
 801087e:	1c03      	adds	r3, r0, #0
 8010880:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	228c      	movs	r2, #140	@ 0x8c
 8010886:	589b      	ldr	r3, [r3, r2]
 8010888:	6839      	ldr	r1, [r7, #0]
 801088a:	1c18      	adds	r0, r3, #0
 801088c:	f7f0 fbd8 	bl	8001040 <__aeabi_fmul>
 8010890:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8010892:	1c19      	adds	r1, r3, #0
 8010894:	1c20      	adds	r0, r4, #0
 8010896:	f7f0 f813 	bl	80008c0 <__aeabi_fadd>
 801089a:	1c03      	adds	r3, r0, #0
 801089c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2298      	movs	r2, #152	@ 0x98
 80108a2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2290      	movs	r2, #144	@ 0x90
 80108a8:	589b      	ldr	r3, [r3, r2]
 80108aa:	1c19      	adds	r1, r3, #0
 80108ac:	20fe      	movs	r0, #254	@ 0xfe
 80108ae:	0580      	lsls	r0, r0, #22
 80108b0:	f7f0 fd20 	bl	80012f4 <__aeabi_fsub>
 80108b4:	1c03      	adds	r3, r0, #0
 80108b6:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	229c      	movs	r2, #156	@ 0x9c
 80108bc:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80108be:	1c19      	adds	r1, r3, #0
 80108c0:	f7f0 fbbe 	bl	8001040 <__aeabi_fmul>
 80108c4:	1c03      	adds	r3, r0, #0
 80108c6:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2290      	movs	r2, #144	@ 0x90
 80108cc:	589b      	ldr	r3, [r3, r2]
 80108ce:	6839      	ldr	r1, [r7, #0]
 80108d0:	1c18      	adds	r0, r3, #0
 80108d2:	f7f0 fbb5 	bl	8001040 <__aeabi_fmul>
 80108d6:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 80108d8:	1c19      	adds	r1, r3, #0
 80108da:	1c20      	adds	r0, r4, #0
 80108dc:	f7ef fff0 	bl	80008c0 <__aeabi_fadd>
 80108e0:	1c03      	adds	r3, r0, #0
 80108e2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	229c      	movs	r2, #156	@ 0x9c
 80108e8:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2298      	movs	r2, #152	@ 0x98
 80108ee:	589a      	ldr	r2, [r3, r2]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	219c      	movs	r1, #156	@ 0x9c
 80108f4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80108f6:	1c19      	adds	r1, r3, #0
 80108f8:	1c10      	adds	r0, r2, #0
 80108fa:	f7f0 fcfb 	bl	80012f4 <__aeabi_fsub>
 80108fe:	1c03      	adds	r3, r0, #0
 8010900:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8010902:	2100      	movs	r1, #0
 8010904:	6978      	ldr	r0, [r7, #20]
 8010906:	f7ef fe13 	bl	8000530 <__aeabi_fcmplt>
 801090a:	1e03      	subs	r3, r0, #0
 801090c:	d004      	beq.n	8010918 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	2280      	movs	r2, #128	@ 0x80
 8010912:	0612      	lsls	r2, r2, #24
 8010914:	4053      	eors	r3, r2
 8010916:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8010918:	4923      	ldr	r1, [pc, #140]	@ (80109a8 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 801091a:	6978      	ldr	r0, [r7, #20]
 801091c:	f7f0 fb90 	bl	8001040 <__aeabi_fmul>
 8010920:	1c03      	adds	r3, r0, #0
 8010922:	1c18      	adds	r0, r3, #0
 8010924:	f018 fbd4 	bl	80290d0 <expf>
 8010928:	1c03      	adds	r3, r0, #0
 801092a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 801092c:	491f      	ldr	r1, [pc, #124]	@ (80109ac <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 801092e:	6938      	ldr	r0, [r7, #16]
 8010930:	f7f0 fb86 	bl	8001040 <__aeabi_fmul>
 8010934:	1c03      	adds	r3, r0, #0
 8010936:	491e      	ldr	r1, [pc, #120]	@ (80109b0 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8010938:	1c18      	adds	r0, r3, #0
 801093a:	f7ef ffc1 	bl	80008c0 <__aeabi_fadd>
 801093e:	1c03      	adds	r3, r0, #0
 8010940:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	685c      	ldr	r4, [r3, #4]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	68f9      	ldr	r1, [r7, #12]
 801094c:	1c18      	adds	r0, r3, #0
 801094e:	f7ef ffb7 	bl	80008c0 <__aeabi_fadd>
 8010952:	1c03      	adds	r3, r0, #0
 8010954:	1c19      	adds	r1, r3, #0
 8010956:	1c20      	adds	r0, r4, #0
 8010958:	f7f0 f9a4 	bl	8000ca4 <__aeabi_fdiv>
 801095c:	1c03      	adds	r3, r0, #0
 801095e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8010960:	68b9      	ldr	r1, [r7, #8]
 8010962:	20fe      	movs	r0, #254	@ 0xfe
 8010964:	0580      	lsls	r0, r0, #22
 8010966:	f7f0 fcc5 	bl	80012f4 <__aeabi_fsub>
 801096a:	1c03      	adds	r3, r0, #0
 801096c:	1c18      	adds	r0, r3, #0
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	22a0      	movs	r2, #160	@ 0xa0
 8010972:	589b      	ldr	r3, [r3, r2]
 8010974:	1c19      	adds	r1, r3, #0
 8010976:	f7f0 fb63 	bl	8001040 <__aeabi_fmul>
 801097a:	1c03      	adds	r3, r0, #0
 801097c:	1c1c      	adds	r4, r3, #0
 801097e:	6839      	ldr	r1, [r7, #0]
 8010980:	68b8      	ldr	r0, [r7, #8]
 8010982:	f7f0 fb5d 	bl	8001040 <__aeabi_fmul>
 8010986:	1c03      	adds	r3, r0, #0
 8010988:	1c19      	adds	r1, r3, #0
 801098a:	1c20      	adds	r0, r4, #0
 801098c:	f7ef ff98 	bl	80008c0 <__aeabi_fadd>
 8010990:	1c03      	adds	r3, r0, #0
 8010992:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	22a0      	movs	r2, #160	@ 0xa0
 8010998:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	22a0      	movs	r2, #160	@ 0xa0
 801099e:	589b      	ldr	r3, [r3, r2]
}
 80109a0:	1c18      	adds	r0, r3, #0
 80109a2:	46bd      	mov	sp, r7
 80109a4:	b007      	add	sp, #28
 80109a6:	bd90      	pop	{r4, r7, pc}
 80109a8:	be4ccccd 	.word	0xbe4ccccd
 80109ac:	43f00000 	.word	0x43f00000
 80109b0:	41a00000 	.word	0x41a00000

080109b4 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b084      	sub	sp, #16
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	000a      	movs	r2, r1
 80109be:	1cbb      	adds	r3, r7, #2
 80109c0:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80109c2:	230d      	movs	r3, #13
 80109c4:	18fb      	adds	r3, r7, r3
 80109c6:	22ff      	movs	r2, #255	@ 0xff
 80109c8:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80109ca:	230e      	movs	r3, #14
 80109cc:	18fb      	adds	r3, r7, r3
 80109ce:	2200      	movs	r2, #0
 80109d0:	801a      	strh	r2, [r3, #0]
 80109d2:	e038      	b.n	8010a46 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 80109d4:	230e      	movs	r3, #14
 80109d6:	18fb      	adds	r3, r7, r3
 80109d8:	881b      	ldrh	r3, [r3, #0]
 80109da:	687a      	ldr	r2, [r7, #4]
 80109dc:	18d3      	adds	r3, r2, r3
 80109de:	7819      	ldrb	r1, [r3, #0]
 80109e0:	220d      	movs	r2, #13
 80109e2:	18bb      	adds	r3, r7, r2
 80109e4:	18ba      	adds	r2, r7, r2
 80109e6:	7812      	ldrb	r2, [r2, #0]
 80109e8:	404a      	eors	r2, r1
 80109ea:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80109ec:	230c      	movs	r3, #12
 80109ee:	18fb      	adds	r3, r7, r3
 80109f0:	2208      	movs	r2, #8
 80109f2:	701a      	strb	r2, [r3, #0]
 80109f4:	e01c      	b.n	8010a30 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 80109f6:	210d      	movs	r1, #13
 80109f8:	187b      	adds	r3, r7, r1
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	b25b      	sxtb	r3, r3
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	da0a      	bge.n	8010a18 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8010a02:	187b      	adds	r3, r7, r1
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	b25b      	sxtb	r3, r3
 8010a08:	18db      	adds	r3, r3, r3
 8010a0a:	b25b      	sxtb	r3, r3
 8010a0c:	2231      	movs	r2, #49	@ 0x31
 8010a0e:	4053      	eors	r3, r2
 8010a10:	b25a      	sxtb	r2, r3
 8010a12:	187b      	adds	r3, r7, r1
 8010a14:	701a      	strb	r2, [r3, #0]
 8010a16:	e005      	b.n	8010a24 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8010a18:	230d      	movs	r3, #13
 8010a1a:	18fa      	adds	r2, r7, r3
 8010a1c:	18fb      	adds	r3, r7, r3
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	18db      	adds	r3, r3, r3
 8010a22:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010a24:	220c      	movs	r2, #12
 8010a26:	18bb      	adds	r3, r7, r2
 8010a28:	18ba      	adds	r2, r7, r2
 8010a2a:	7812      	ldrb	r2, [r2, #0]
 8010a2c:	3a01      	subs	r2, #1
 8010a2e:	701a      	strb	r2, [r3, #0]
 8010a30:	230c      	movs	r3, #12
 8010a32:	18fb      	adds	r3, r7, r3
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d1dd      	bne.n	80109f6 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010a3a:	220e      	movs	r2, #14
 8010a3c:	18bb      	adds	r3, r7, r2
 8010a3e:	18ba      	adds	r2, r7, r2
 8010a40:	8812      	ldrh	r2, [r2, #0]
 8010a42:	3201      	adds	r2, #1
 8010a44:	801a      	strh	r2, [r3, #0]
 8010a46:	230e      	movs	r3, #14
 8010a48:	18fa      	adds	r2, r7, r3
 8010a4a:	1cbb      	adds	r3, r7, #2
 8010a4c:	8812      	ldrh	r2, [r2, #0]
 8010a4e:	881b      	ldrh	r3, [r3, #0]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d3bf      	bcc.n	80109d4 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8010a54:	230d      	movs	r3, #13
 8010a56:	18fb      	adds	r3, r7, r3
 8010a58:	781b      	ldrb	r3, [r3, #0]
}
 8010a5a:	0018      	movs	r0, r3
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	b004      	add	sp, #16
 8010a60:	bd80      	pop	{r7, pc}

08010a62 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8010a62:	b580      	push	{r7, lr}
 8010a64:	b082      	sub	sp, #8
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
 8010a6a:	0008      	movs	r0, r1
 8010a6c:	0011      	movs	r1, r2
 8010a6e:	1cbb      	adds	r3, r7, #2
 8010a70:	1c02      	adds	r2, r0, #0
 8010a72:	801a      	strh	r2, [r3, #0]
 8010a74:	1c7b      	adds	r3, r7, #1
 8010a76:	1c0a      	adds	r2, r1, #0
 8010a78:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8010a7a:	1cbb      	adds	r3, r7, #2
 8010a7c:	881a      	ldrh	r2, [r3, #0]
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	0011      	movs	r1, r2
 8010a82:	0018      	movs	r0, r3
 8010a84:	f7ff ff96 	bl	80109b4 <sensirion_i2c_generate_crc>
 8010a88:	0003      	movs	r3, r0
 8010a8a:	001a      	movs	r2, r3
 8010a8c:	1c7b      	adds	r3, r7, #1
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	4293      	cmp	r3, r2
 8010a92:	d001      	beq.n	8010a98 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8010a94:	2301      	movs	r3, #1
 8010a96:	e000      	b.n	8010a9a <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8010a98:	2300      	movs	r3, #0
}
 8010a9a:	0018      	movs	r0, r3
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	b002      	add	sp, #8
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8010aa2:	b580      	push	{r7, lr}
 8010aa4:	b082      	sub	sp, #8
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
 8010aaa:	0008      	movs	r0, r1
 8010aac:	0011      	movs	r1, r2
 8010aae:	1cbb      	adds	r3, r7, #2
 8010ab0:	1c02      	adds	r2, r0, #0
 8010ab2:	801a      	strh	r2, [r3, #0]
 8010ab4:	003b      	movs	r3, r7
 8010ab6:	1c0a      	adds	r2, r1, #0
 8010ab8:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8010aba:	003b      	movs	r3, r7
 8010abc:	881b      	ldrh	r3, [r3, #0]
 8010abe:	0a1b      	lsrs	r3, r3, #8
 8010ac0:	b299      	uxth	r1, r3
 8010ac2:	1cbb      	adds	r3, r7, #2
 8010ac4:	881b      	ldrh	r3, [r3, #0]
 8010ac6:	1cba      	adds	r2, r7, #2
 8010ac8:	1c58      	adds	r0, r3, #1
 8010aca:	8010      	strh	r0, [r2, #0]
 8010acc:	001a      	movs	r2, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	189b      	adds	r3, r3, r2
 8010ad2:	b2ca      	uxtb	r2, r1
 8010ad4:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8010ad6:	1cbb      	adds	r3, r7, #2
 8010ad8:	881b      	ldrh	r3, [r3, #0]
 8010ada:	1cba      	adds	r2, r7, #2
 8010adc:	1c59      	adds	r1, r3, #1
 8010ade:	8011      	strh	r1, [r2, #0]
 8010ae0:	001a      	movs	r2, r3
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	189b      	adds	r3, r3, r2
 8010ae6:	003a      	movs	r2, r7
 8010ae8:	8812      	ldrh	r2, [r2, #0]
 8010aea:	b2d2      	uxtb	r2, r2
 8010aec:	701a      	strb	r2, [r3, #0]
    return offset;
 8010aee:	1cbb      	adds	r3, r7, #2
 8010af0:	881b      	ldrh	r3, [r3, #0]
}
 8010af2:	0018      	movs	r0, r3
 8010af4:	46bd      	mov	sp, r7
 8010af6:	b002      	add	sp, #8
 8010af8:	bd80      	pop	{r7, pc}

08010afa <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8010afa:	b590      	push	{r4, r7, lr}
 8010afc:	b083      	sub	sp, #12
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
 8010b02:	0008      	movs	r0, r1
 8010b04:	0011      	movs	r1, r2
 8010b06:	1cbb      	adds	r3, r7, #2
 8010b08:	1c02      	adds	r2, r0, #0
 8010b0a:	801a      	strh	r2, [r3, #0]
 8010b0c:	003b      	movs	r3, r7
 8010b0e:	1c0a      	adds	r2, r1, #0
 8010b10:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8010b12:	003b      	movs	r3, r7
 8010b14:	881b      	ldrh	r3, [r3, #0]
 8010b16:	0a1b      	lsrs	r3, r3, #8
 8010b18:	b299      	uxth	r1, r3
 8010b1a:	1cbb      	adds	r3, r7, #2
 8010b1c:	881b      	ldrh	r3, [r3, #0]
 8010b1e:	1cba      	adds	r2, r7, #2
 8010b20:	1c58      	adds	r0, r3, #1
 8010b22:	8010      	strh	r0, [r2, #0]
 8010b24:	001a      	movs	r2, r3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	189b      	adds	r3, r3, r2
 8010b2a:	b2ca      	uxtb	r2, r1
 8010b2c:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8010b2e:	1cbb      	adds	r3, r7, #2
 8010b30:	881b      	ldrh	r3, [r3, #0]
 8010b32:	1cba      	adds	r2, r7, #2
 8010b34:	1c59      	adds	r1, r3, #1
 8010b36:	8011      	strh	r1, [r2, #0]
 8010b38:	001a      	movs	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	189b      	adds	r3, r3, r2
 8010b3e:	003a      	movs	r2, r7
 8010b40:	8812      	ldrh	r2, [r2, #0]
 8010b42:	b2d2      	uxtb	r2, r2
 8010b44:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8010b46:	1cbb      	adds	r3, r7, #2
 8010b48:	881b      	ldrh	r3, [r3, #0]
 8010b4a:	3b02      	subs	r3, #2
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8010b50:	1cbb      	adds	r3, r7, #2
 8010b52:	881b      	ldrh	r3, [r3, #0]
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	18d4      	adds	r4, r2, r3
 8010b58:	2102      	movs	r1, #2
 8010b5a:	f7ff ff2b 	bl	80109b4 <sensirion_i2c_generate_crc>
 8010b5e:	0003      	movs	r3, r0
 8010b60:	7023      	strb	r3, [r4, #0]
    offset++;
 8010b62:	1cbb      	adds	r3, r7, #2
 8010b64:	881a      	ldrh	r2, [r3, #0]
 8010b66:	1cbb      	adds	r3, r7, #2
 8010b68:	3201      	adds	r2, #1
 8010b6a:	801a      	strh	r2, [r3, #0]

    return offset;
 8010b6c:	1cbb      	adds	r3, r7, #2
 8010b6e:	881b      	ldrh	r3, [r3, #0]
}
 8010b70:	0018      	movs	r0, r3
 8010b72:	46bd      	mov	sp, r7
 8010b74:	b003      	add	sp, #12
 8010b76:	bd90      	pop	{r4, r7, pc}

08010b78 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	0008      	movs	r0, r1
 8010b82:	0011      	movs	r1, r2
 8010b84:	1cbb      	adds	r3, r7, #2
 8010b86:	1c02      	adds	r2, r0, #0
 8010b88:	801a      	strh	r2, [r3, #0]
 8010b8a:	003b      	movs	r3, r7
 8010b8c:	1c0a      	adds	r2, r1, #0
 8010b8e:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 8010b90:	003b      	movs	r3, r7
 8010b92:	881a      	ldrh	r2, [r3, #0]
 8010b94:	1cbb      	adds	r3, r7, #2
 8010b96:	8819      	ldrh	r1, [r3, #0]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	0018      	movs	r0, r3
 8010b9c:	f7ff ffad 	bl	8010afa <sensirion_i2c_add_uint16_t_to_buffer>
 8010ba0:	0003      	movs	r3, r0
}
 8010ba2:	0018      	movs	r0, r3
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	b002      	add	sp, #8
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b082      	sub	sp, #8
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6039      	str	r1, [r7, #0]
 8010bb2:	0011      	movs	r1, r2
 8010bb4:	1dfb      	adds	r3, r7, #7
 8010bb6:	1c02      	adds	r2, r0, #0
 8010bb8:	701a      	strb	r2, [r3, #0]
 8010bba:	1d3b      	adds	r3, r7, #4
 8010bbc:	1c0a      	adds	r2, r1, #0
 8010bbe:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8010bc0:	1d3b      	adds	r3, r7, #4
 8010bc2:	881a      	ldrh	r2, [r3, #0]
 8010bc4:	6839      	ldr	r1, [r7, #0]
 8010bc6:	1dfb      	adds	r3, r7, #7
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	0018      	movs	r0, r3
 8010bcc:	f7fe f9b0 	bl	800ef30 <sensirion_i2c_hal_write>
 8010bd0:	0003      	movs	r3, r0
}
 8010bd2:	0018      	movs	r0, r3
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	b002      	add	sp, #8
 8010bd8:	bd80      	pop	{r7, pc}

08010bda <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8010bda:	b5b0      	push	{r4, r5, r7, lr}
 8010bdc:	b084      	sub	sp, #16
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6039      	str	r1, [r7, #0]
 8010be2:	0011      	movs	r1, r2
 8010be4:	1dfb      	adds	r3, r7, #7
 8010be6:	1c02      	adds	r2, r0, #0
 8010be8:	701a      	strb	r2, [r3, #0]
 8010bea:	1d3b      	adds	r3, r7, #4
 8010bec:	1c0a      	adds	r2, r1, #0
 8010bee:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8010bf0:	1d3b      	adds	r3, r7, #4
 8010bf2:	881b      	ldrh	r3, [r3, #0]
 8010bf4:	085b      	lsrs	r3, r3, #1
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	220a      	movs	r2, #10
 8010bfa:	18ba      	adds	r2, r7, r2
 8010bfc:	1c19      	adds	r1, r3, #0
 8010bfe:	1c0b      	adds	r3, r1, #0
 8010c00:	18db      	adds	r3, r3, r3
 8010c02:	185b      	adds	r3, r3, r1
 8010c04:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8010c06:	1d3b      	adds	r3, r7, #4
 8010c08:	881b      	ldrh	r3, [r3, #0]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	4013      	ands	r3, r2
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d001      	beq.n	8010c18 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8010c14:	2304      	movs	r3, #4
 8010c16:	e06b      	b.n	8010cf0 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8010c18:	230a      	movs	r3, #10
 8010c1a:	18fb      	adds	r3, r7, r3
 8010c1c:	881a      	ldrh	r2, [r3, #0]
 8010c1e:	6839      	ldr	r1, [r7, #0]
 8010c20:	1dfb      	adds	r3, r7, #7
 8010c22:	781b      	ldrb	r3, [r3, #0]
 8010c24:	0018      	movs	r0, r3
 8010c26:	f7fe f963 	bl	800eef0 <sensirion_i2c_hal_read>
 8010c2a:	0003      	movs	r3, r0
 8010c2c:	001a      	movs	r2, r3
 8010c2e:	2108      	movs	r1, #8
 8010c30:	187b      	adds	r3, r7, r1
 8010c32:	801a      	strh	r2, [r3, #0]
    if (error) {
 8010c34:	000a      	movs	r2, r1
 8010c36:	18bb      	adds	r3, r7, r2
 8010c38:	2100      	movs	r1, #0
 8010c3a:	5e5b      	ldrsh	r3, [r3, r1]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d003      	beq.n	8010c48 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 8010c40:	18bb      	adds	r3, r7, r2
 8010c42:	2200      	movs	r2, #0
 8010c44:	5e9b      	ldrsh	r3, [r3, r2]
 8010c46:	e053      	b.n	8010cf0 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010c48:	230e      	movs	r3, #14
 8010c4a:	18fb      	adds	r3, r7, r3
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	801a      	strh	r2, [r3, #0]
 8010c50:	230c      	movs	r3, #12
 8010c52:	18fb      	adds	r3, r7, r3
 8010c54:	2200      	movs	r2, #0
 8010c56:	801a      	strh	r2, [r3, #0]
 8010c58:	e041      	b.n	8010cde <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010c5a:	210e      	movs	r1, #14
 8010c5c:	187b      	adds	r3, r7, r1
 8010c5e:	881b      	ldrh	r3, [r3, #0]
 8010c60:	683a      	ldr	r2, [r7, #0]
 8010c62:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8010c64:	187b      	adds	r3, r7, r1
 8010c66:	881b      	ldrh	r3, [r3, #0]
 8010c68:	3302      	adds	r3, #2
 8010c6a:	683a      	ldr	r2, [r7, #0]
 8010c6c:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	001a      	movs	r2, r3
 8010c72:	2102      	movs	r1, #2
 8010c74:	f7ff fef5 	bl	8010a62 <sensirion_i2c_check_crc>
 8010c78:	0003      	movs	r3, r0
 8010c7a:	001a      	movs	r2, r3
 8010c7c:	2108      	movs	r1, #8
 8010c7e:	187b      	adds	r3, r7, r1
 8010c80:	801a      	strh	r2, [r3, #0]
        if (error) {
 8010c82:	000a      	movs	r2, r1
 8010c84:	18bb      	adds	r3, r7, r2
 8010c86:	2100      	movs	r1, #0
 8010c88:	5e5b      	ldrsh	r3, [r3, r1]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d003      	beq.n	8010c96 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 8010c8e:	18bb      	adds	r3, r7, r2
 8010c90:	2200      	movs	r2, #0
 8010c92:	5e9b      	ldrsh	r3, [r3, r2]
 8010c94:	e02c      	b.n	8010cf0 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 8010c96:	240e      	movs	r4, #14
 8010c98:	193b      	adds	r3, r7, r4
 8010c9a:	881b      	ldrh	r3, [r3, #0]
 8010c9c:	683a      	ldr	r2, [r7, #0]
 8010c9e:	18d2      	adds	r2, r2, r3
 8010ca0:	250c      	movs	r5, #12
 8010ca2:	197b      	adds	r3, r7, r5
 8010ca4:	881b      	ldrh	r3, [r3, #0]
 8010ca6:	1979      	adds	r1, r7, r5
 8010ca8:	1c58      	adds	r0, r3, #1
 8010caa:	8008      	strh	r0, [r1, #0]
 8010cac:	0019      	movs	r1, r3
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	185b      	adds	r3, r3, r1
 8010cb2:	7812      	ldrb	r2, [r2, #0]
 8010cb4:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8010cb6:	193b      	adds	r3, r7, r4
 8010cb8:	881b      	ldrh	r3, [r3, #0]
 8010cba:	3301      	adds	r3, #1
 8010cbc:	683a      	ldr	r2, [r7, #0]
 8010cbe:	18d2      	adds	r2, r2, r3
 8010cc0:	197b      	adds	r3, r7, r5
 8010cc2:	881b      	ldrh	r3, [r3, #0]
 8010cc4:	1979      	adds	r1, r7, r5
 8010cc6:	1c58      	adds	r0, r3, #1
 8010cc8:	8008      	strh	r0, [r1, #0]
 8010cca:	0019      	movs	r1, r3
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	185b      	adds	r3, r3, r1
 8010cd0:	7812      	ldrb	r2, [r2, #0]
 8010cd2:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010cd4:	193b      	adds	r3, r7, r4
 8010cd6:	193a      	adds	r2, r7, r4
 8010cd8:	8812      	ldrh	r2, [r2, #0]
 8010cda:	3203      	adds	r2, #3
 8010cdc:	801a      	strh	r2, [r3, #0]
 8010cde:	230e      	movs	r3, #14
 8010ce0:	18fa      	adds	r2, r7, r3
 8010ce2:	230a      	movs	r3, #10
 8010ce4:	18fb      	adds	r3, r7, r3
 8010ce6:	8812      	ldrh	r2, [r2, #0]
 8010ce8:	881b      	ldrh	r3, [r3, #0]
 8010cea:	429a      	cmp	r2, r3
 8010cec:	d3b5      	bcc.n	8010c5a <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 8010cee:	2300      	movs	r3, #0
}
 8010cf0:	0018      	movs	r0, r3
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	b004      	add	sp, #16
 8010cf6:	bdb0      	pop	{r4, r5, r7, pc}

08010cf8 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010cf8:	b590      	push	{r4, r7, lr}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6039      	str	r1, [r7, #0]
 8010d00:	0011      	movs	r1, r2
 8010d02:	1dfb      	adds	r3, r7, #7
 8010d04:	1c02      	adds	r2, r0, #0
 8010d06:	701a      	strb	r2, [r3, #0]
 8010d08:	1dbb      	adds	r3, r7, #6
 8010d0a:	1c0a      	adds	r2, r1, #0
 8010d0c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8010d0e:	4b08      	ldr	r3, [pc, #32]	@ (8010d30 <ReadRegister+0x38>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d008      	beq.n	8010d28 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8010d16:	4b06      	ldr	r3, [pc, #24]	@ (8010d30 <ReadRegister+0x38>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	1dba      	adds	r2, r7, #6
 8010d1c:	7814      	ldrb	r4, [r2, #0]
 8010d1e:	6839      	ldr	r1, [r7, #0]
 8010d20:	1dfa      	adds	r2, r7, #7
 8010d22:	7810      	ldrb	r0, [r2, #0]
 8010d24:	0022      	movs	r2, r4
 8010d26:	4798      	blx	r3
  }
}
 8010d28:	46c0      	nop			@ (mov r8, r8)
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	b003      	add	sp, #12
 8010d2e:	bd90      	pop	{r4, r7, pc}
 8010d30:	200011e4 	.word	0x200011e4

08010d34 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010d34:	b590      	push	{r4, r7, lr}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6039      	str	r1, [r7, #0]
 8010d3c:	0011      	movs	r1, r2
 8010d3e:	1dfb      	adds	r3, r7, #7
 8010d40:	1c02      	adds	r2, r0, #0
 8010d42:	701a      	strb	r2, [r3, #0]
 8010d44:	1dbb      	adds	r3, r7, #6
 8010d46:	1c0a      	adds	r2, r1, #0
 8010d48:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8010d4a:	4b08      	ldr	r3, [pc, #32]	@ (8010d6c <WriteRegister+0x38>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d008      	beq.n	8010d64 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8010d52:	4b06      	ldr	r3, [pc, #24]	@ (8010d6c <WriteRegister+0x38>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	1dba      	adds	r2, r7, #6
 8010d58:	7814      	ldrb	r4, [r2, #0]
 8010d5a:	6839      	ldr	r1, [r7, #0]
 8010d5c:	1dfa      	adds	r2, r7, #7
 8010d5e:	7810      	ldrb	r0, [r2, #0]
 8010d60:	0022      	movs	r2, r4
 8010d62:	4798      	blx	r3
  }
}
 8010d64:	46c0      	nop			@ (mov r8, r8)
 8010d66:	46bd      	mov	sp, r7
 8010d68:	b003      	add	sp, #12
 8010d6a:	bd90      	pop	{r4, r7, pc}
 8010d6c:	200011e8 	.word	0x200011e8

08010d70 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 8010d78:	f003 fd7c 	bl	8014874 <HAL_GetTick>
 8010d7c:	0002      	movs	r2, r0
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	18d2      	adds	r2, r2, r3
 8010d82:	4b03      	ldr	r3, [pc, #12]	@ (8010d90 <setSGP40TimeStamp+0x20>)
 8010d84:	601a      	str	r2, [r3, #0]
}
 8010d86:	46c0      	nop			@ (mov r8, r8)
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	b002      	add	sp, #8
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	46c0      	nop			@ (mov r8, r8)
 8010d90:	200011f8 	.word	0x200011f8

08010d94 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8010d94:	b580      	push	{r7, lr}
 8010d96:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 8010d98:	4b02      	ldr	r3, [pc, #8]	@ (8010da4 <ResetSGP40samplecounter+0x10>)
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	701a      	strb	r2, [r3, #0]
}
 8010d9e:	46c0      	nop			@ (mov r8, r8)
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	200011f6 	.word	0x200011f6

08010da8 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8010db2:	4b07      	ldr	r3, [pc, #28]	@ (8010dd0 <SGP_Init+0x28>)
 8010db4:	687a      	ldr	r2, [r7, #4]
 8010db6:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8010db8:	4b06      	ldr	r3, [pc, #24]	@ (8010dd4 <SGP_Init+0x2c>)
 8010dba:	683a      	ldr	r2, [r7, #0]
 8010dbc:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8010dbe:	4b06      	ldr	r3, [pc, #24]	@ (8010dd8 <SGP_Init+0x30>)
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	0018      	movs	r0, r3
 8010dc4:	f7fe ff72 	bl	800fcac <GasIndexAlgorithm_init>
}
 8010dc8:	46c0      	nop			@ (mov r8, r8)
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	b002      	add	sp, #8
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	200011e4 	.word	0x200011e4
 8010dd4:	200011e8 	.word	0x200011e8
 8010dd8:	20001200 	.word	0x20001200

08010ddc <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 8010de0:	4b07      	ldr	r3, [pc, #28]	@ (8010e00 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d004      	beq.n	8010df2 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 8010de8:	4b06      	ldr	r3, [pc, #24]	@ (8010e04 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010dea:	22fe      	movs	r2, #254	@ 0xfe
 8010dec:	0592      	lsls	r2, r2, #22
 8010dee:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 8010df0:	e002      	b.n	8010df8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 8010df2:	4b04      	ldr	r3, [pc, #16]	@ (8010e04 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010df4:	4a04      	ldr	r2, [pc, #16]	@ (8010e08 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 8010df6:	605a      	str	r2, [r3, #4]
}
 8010df8:	46c0      	nop			@ (mov r8, r8)
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	46c0      	nop			@ (mov r8, r8)
 8010e00:	2000214d 	.word	0x2000214d
 8010e04:	20001200 	.word	0x20001200
 8010e08:	44610000 	.word	0x44610000

08010e0c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8010e10:	4b13      	ldr	r3, [pc, #76]	@ (8010e60 <SGP_StartMeasurement+0x54>)
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d00d      	beq.n	8010e34 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010e18:	4b12      	ldr	r3, [pc, #72]	@ (8010e64 <SGP_StartMeasurement+0x58>)
 8010e1a:	2208      	movs	r2, #8
 8010e1c:	0019      	movs	r1, r3
 8010e1e:	2059      	movs	r0, #89	@ 0x59
 8010e20:	f7ff ff88 	bl	8010d34 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010e24:	f003 fd26 	bl	8014874 <HAL_GetTick>
 8010e28:	0003      	movs	r3, r0
 8010e2a:	331e      	adds	r3, #30
 8010e2c:	001a      	movs	r2, r3
 8010e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8010e68 <SGP_StartMeasurement+0x5c>)
 8010e30:	601a      	str	r2, [r3, #0]
 8010e32:	e00c      	b.n	8010e4e <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010e34:	4b0d      	ldr	r3, [pc, #52]	@ (8010e6c <SGP_StartMeasurement+0x60>)
 8010e36:	2208      	movs	r2, #8
 8010e38:	0019      	movs	r1, r3
 8010e3a:	2059      	movs	r0, #89	@ 0x59
 8010e3c:	f7ff ff7a 	bl	8010d34 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 8010e40:	f003 fd18 	bl	8014874 <HAL_GetTick>
 8010e44:	0003      	movs	r3, r0
 8010e46:	33aa      	adds	r3, #170	@ 0xaa
 8010e48:	001a      	movs	r2, r3
 8010e4a:	4b09      	ldr	r3, [pc, #36]	@ (8010e70 <SGP_StartMeasurement+0x64>)
 8010e4c:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8010e4e:	4b09      	ldr	r3, [pc, #36]	@ (8010e74 <SGP_StartMeasurement+0x68>)
 8010e50:	2200      	movs	r2, #0
 8010e52:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8010e54:	4b08      	ldr	r3, [pc, #32]	@ (8010e78 <SGP_StartMeasurement+0x6c>)
 8010e56:	2200      	movs	r2, #0
 8010e58:	701a      	strb	r2, [r3, #0]
}
 8010e5a:	46c0      	nop			@ (mov r8, r8)
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}
 8010e60:	200012a8 	.word	0x200012a8
 8010e64:	200000bc 	.word	0x200000bc
 8010e68:	200000d0 	.word	0x200000d0
 8010e6c:	200000b4 	.word	0x200000b4
 8010e70:	200000c8 	.word	0x200000c8
 8010e74:	200011fc 	.word	0x200011fc
 8010e78:	200011fd 	.word	0x200011fd

08010e7c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 8010e80:	4b04      	ldr	r3, [pc, #16]	@ (8010e94 <SGP_HeatedUp+0x18>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	0018      	movs	r0, r3
 8010e86:	f002 ff27 	bl	8013cd8 <TimestampIsReached>
 8010e8a:	0003      	movs	r3, r0
}
 8010e8c:	0018      	movs	r0, r3
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}
 8010e92:	46c0      	nop			@ (mov r8, r8)
 8010e94:	200000c8 	.word	0x200000c8

08010e98 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8010e9c:	4b04      	ldr	r3, [pc, #16]	@ (8010eb0 <SGP_MeasurementReady+0x18>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	0018      	movs	r0, r3
 8010ea2:	f002 ff19 	bl	8013cd8 <TimestampIsReached>
 8010ea6:	0003      	movs	r3, r0
}
 8010ea8:	0018      	movs	r0, r3
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
 8010eae:	46c0      	nop			@ (mov r8, r8)
 8010eb0:	200000d0 	.word	0x200000d0

08010eb4 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8010eb8:	4b04      	ldr	r3, [pc, #16]	@ (8010ecc <SGP_MeasurementDone+0x18>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	0018      	movs	r0, r3
 8010ebe:	f002 ff0b 	bl	8013cd8 <TimestampIsReached>
 8010ec2:	0003      	movs	r3, r0
}
 8010ec4:	0018      	movs	r0, r3
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	46c0      	nop			@ (mov r8, r8)
 8010ecc:	200000cc 	.word	0x200000cc

08010ed0 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010ed4:	4b04      	ldr	r3, [pc, #16]	@ (8010ee8 <SGP_TurnHeaterOff+0x18>)
 8010ed6:	2202      	movs	r2, #2
 8010ed8:	0019      	movs	r1, r3
 8010eda:	2059      	movs	r0, #89	@ 0x59
 8010edc:	f7ff ff2a 	bl	8010d34 <WriteRegister>
}
 8010ee0:	46c0      	nop			@ (mov r8, r8)
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	46c0      	nop			@ (mov r8, r8)
 8010ee8:	200000ac 	.word	0x200000ac

08010eec <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8010eec:	b590      	push	{r4, r7, lr}
 8010eee:	b087      	sub	sp, #28
 8010ef0:	af02      	add	r7, sp, #8
 8010ef2:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8010ef4:	f7ff ffc2 	bl	8010e7c <SGP_HeatedUp>
 8010ef8:	1e03      	subs	r3, r0, #0
 8010efa:	d032      	beq.n	8010f62 <SGP_GetMeasurementValues+0x76>
 8010efc:	4b80      	ldr	r3, [pc, #512]	@ (8011100 <SGP_GetMeasurementValues+0x214>)
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	2201      	movs	r2, #1
 8010f02:	4053      	eors	r3, r2
 8010f04:	b2db      	uxtb	r3, r3
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d02b      	beq.n	8010f62 <SGP_GetMeasurementValues+0x76>
 8010f0a:	4b7e      	ldr	r3, [pc, #504]	@ (8011104 <SGP_GetMeasurementValues+0x218>)
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	2201      	movs	r2, #1
 8010f10:	4053      	eors	r3, r2
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d024      	beq.n	8010f62 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 8010f18:	4b79      	ldr	r3, [pc, #484]	@ (8011100 <SGP_GetMeasurementValues+0x214>)
 8010f1a:	2201      	movs	r2, #1
 8010f1c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8010f1e:	4b7a      	ldr	r3, [pc, #488]	@ (8011108 <SGP_GetMeasurementValues+0x21c>)
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00d      	beq.n	8010f42 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010f26:	4b79      	ldr	r3, [pc, #484]	@ (801110c <SGP_GetMeasurementValues+0x220>)
 8010f28:	2208      	movs	r2, #8
 8010f2a:	0019      	movs	r1, r3
 8010f2c:	2059      	movs	r0, #89	@ 0x59
 8010f2e:	f7ff ff01 	bl	8010d34 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010f32:	f003 fc9f 	bl	8014874 <HAL_GetTick>
 8010f36:	0003      	movs	r3, r0
 8010f38:	331e      	adds	r3, #30
 8010f3a:	001a      	movs	r2, r3
 8010f3c:	4b74      	ldr	r3, [pc, #464]	@ (8011110 <SGP_GetMeasurementValues+0x224>)
 8010f3e:	601a      	str	r2, [r3, #0]
 8010f40:	e00c      	b.n	8010f5c <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010f42:	4b74      	ldr	r3, [pc, #464]	@ (8011114 <SGP_GetMeasurementValues+0x228>)
 8010f44:	2208      	movs	r2, #8
 8010f46:	0019      	movs	r1, r3
 8010f48:	2059      	movs	r0, #89	@ 0x59
 8010f4a:	f7ff fef3 	bl	8010d34 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010f4e:	f003 fc91 	bl	8014874 <HAL_GetTick>
 8010f52:	0003      	movs	r3, r0
 8010f54:	331e      	adds	r3, #30
 8010f56:	001a      	movs	r2, r3
 8010f58:	4b6d      	ldr	r3, [pc, #436]	@ (8011110 <SGP_GetMeasurementValues+0x224>)
 8010f5a:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8010f5c:	4b69      	ldr	r3, [pc, #420]	@ (8011104 <SGP_GetMeasurementValues+0x218>)
 8010f5e:	2201      	movs	r2, #1
 8010f60:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8010f62:	4b67      	ldr	r3, [pc, #412]	@ (8011100 <SGP_GetMeasurementValues+0x214>)
 8010f64:	781b      	ldrb	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d100      	bne.n	8010f6c <SGP_GetMeasurementValues+0x80>
 8010f6a:	e0ac      	b.n	80110c6 <SGP_GetMeasurementValues+0x1da>
 8010f6c:	f7ff ff94 	bl	8010e98 <SGP_MeasurementReady>
 8010f70:	1e03      	subs	r3, r0, #0
 8010f72:	d100      	bne.n	8010f76 <SGP_GetMeasurementValues+0x8a>
 8010f74:	e0a7      	b.n	80110c6 <SGP_GetMeasurementValues+0x1da>
 8010f76:	4b68      	ldr	r3, [pc, #416]	@ (8011118 <SGP_GetMeasurementValues+0x22c>)
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	4053      	eors	r3, r2
 8010f7e:	b2db      	uxtb	r3, r3
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d100      	bne.n	8010f86 <SGP_GetMeasurementValues+0x9a>
 8010f84:	e09f      	b.n	80110c6 <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 8010f86:	4b64      	ldr	r3, [pc, #400]	@ (8011118 <SGP_GetMeasurementValues+0x22c>)
 8010f88:	2201      	movs	r2, #1
 8010f8a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8010f8c:	4b63      	ldr	r3, [pc, #396]	@ (801111c <SGP_GetMeasurementValues+0x230>)
 8010f8e:	2203      	movs	r2, #3
 8010f90:	0019      	movs	r1, r3
 8010f92:	2059      	movs	r0, #89	@ 0x59
 8010f94:	f7ff feb0 	bl	8010cf8 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8010f98:	4b60      	ldr	r3, [pc, #384]	@ (801111c <SGP_GetMeasurementValues+0x230>)
 8010f9a:	2203      	movs	r2, #3
 8010f9c:	2103      	movs	r1, #3
 8010f9e:	0018      	movs	r0, r3
 8010fa0:	f000 f91a 	bl	80111d8 <CheckCRC>
 8010fa4:	0003      	movs	r3, r0
 8010fa6:	001a      	movs	r2, r3
 8010fa8:	2301      	movs	r3, #1
 8010faa:	4053      	eors	r3, r2
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d02a      	beq.n	8011008 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 8010fb2:	4a5b      	ldr	r2, [pc, #364]	@ (8011120 <SGP_GetMeasurementValues+0x234>)
 8010fb4:	4b5b      	ldr	r3, [pc, #364]	@ (8011124 <SGP_GetMeasurementValues+0x238>)
 8010fb6:	0019      	movs	r1, r3
 8010fb8:	2001      	movs	r0, #1
 8010fba:	f002 fee3 	bl	8013d84 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8010fbe:	4a5a      	ldr	r2, [pc, #360]	@ (8011128 <SGP_GetMeasurementValues+0x23c>)
 8010fc0:	4b5a      	ldr	r3, [pc, #360]	@ (801112c <SGP_GetMeasurementValues+0x240>)
 8010fc2:	0019      	movs	r1, r3
 8010fc4:	2002      	movs	r0, #2
 8010fc6:	f002 fedd 	bl	8013d84 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010fca:	230f      	movs	r3, #15
 8010fcc:	18fb      	adds	r3, r7, r3
 8010fce:	2200      	movs	r2, #0
 8010fd0:	701a      	strb	r2, [r3, #0]
 8010fd2:	e012      	b.n	8010ffa <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8010fd4:	240f      	movs	r4, #15
 8010fd6:	193b      	adds	r3, r7, r4
 8010fd8:	7818      	ldrb	r0, [r3, #0]
 8010fda:	193b      	adds	r3, r7, r4
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	4a4f      	ldr	r2, [pc, #316]	@ (801111c <SGP_GetMeasurementValues+0x230>)
 8010fe0:	5cd3      	ldrb	r3, [r2, r3]
 8010fe2:	4a53      	ldr	r2, [pc, #332]	@ (8011130 <SGP_GetMeasurementValues+0x244>)
 8010fe4:	4953      	ldr	r1, [pc, #332]	@ (8011134 <SGP_GetMeasurementValues+0x248>)
 8010fe6:	9300      	str	r3, [sp, #0]
 8010fe8:	0003      	movs	r3, r0
 8010fea:	2003      	movs	r0, #3
 8010fec:	f002 feca 	bl	8013d84 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010ff0:	193b      	adds	r3, r7, r4
 8010ff2:	781a      	ldrb	r2, [r3, #0]
 8010ff4:	193b      	adds	r3, r7, r4
 8010ff6:	3201      	adds	r2, #1
 8010ff8:	701a      	strb	r2, [r3, #0]
 8010ffa:	230f      	movs	r3, #15
 8010ffc:	18fb      	adds	r3, r7, r3
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	2b02      	cmp	r3, #2
 8011002:	d9e7      	bls.n	8010fd4 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 8011004:	2300      	movs	r3, #0
 8011006:	e076      	b.n	80110f6 <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 8011008:	f003 fc34 	bl	8014874 <HAL_GetTick>
 801100c:	0003      	movs	r3, r0
 801100e:	22fa      	movs	r2, #250	@ 0xfa
 8011010:	0092      	lsls	r2, r2, #2
 8011012:	189a      	adds	r2, r3, r2
 8011014:	4b48      	ldr	r3, [pc, #288]	@ (8011138 <SGP_GetMeasurementValues+0x24c>)
 8011016:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8011018:	f7ff ff5a 	bl	8010ed0 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 801101c:	4b47      	ldr	r3, [pc, #284]	@ (801113c <SGP_GetMeasurementValues+0x250>)
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	3301      	adds	r3, #1
 8011022:	b2da      	uxtb	r2, r3
 8011024:	4b45      	ldr	r3, [pc, #276]	@ (801113c <SGP_GetMeasurementValues+0x250>)
 8011026:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8011028:	4b44      	ldr	r3, [pc, #272]	@ (801113c <SGP_GetMeasurementValues+0x250>)
 801102a:	781a      	ldrb	r2, [r3, #0]
 801102c:	4b44      	ldr	r3, [pc, #272]	@ (8011140 <SGP_GetMeasurementValues+0x254>)
 801102e:	781b      	ldrb	r3, [r3, #0]
 8011030:	429a      	cmp	r2, r3
 8011032:	d348      	bcc.n	80110c6 <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8011034:	4b39      	ldr	r3, [pc, #228]	@ (801111c <SGP_GetMeasurementValues+0x230>)
 8011036:	785b      	ldrb	r3, [r3, #1]
 8011038:	b21b      	sxth	r3, r3
 801103a:	021b      	lsls	r3, r3, #8
 801103c:	b21a      	sxth	r2, r3
 801103e:	4b37      	ldr	r3, [pc, #220]	@ (801111c <SGP_GetMeasurementValues+0x230>)
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	b21b      	sxth	r3, r3
 8011044:	4313      	orrs	r3, r2
 8011046:	b21a      	sxth	r2, r3
 8011048:	240c      	movs	r4, #12
 801104a:	193b      	adds	r3, r7, r4
 801104c:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 801104e:	2300      	movs	r3, #0
 8011050:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8011052:	193b      	adds	r3, r7, r4
 8011054:	8819      	ldrh	r1, [r3, #0]
 8011056:	2308      	movs	r3, #8
 8011058:	18fa      	adds	r2, r7, r3
 801105a:	4b3a      	ldr	r3, [pc, #232]	@ (8011144 <SGP_GetMeasurementValues+0x258>)
 801105c:	0018      	movs	r0, r3
 801105e:	f7fe fe87 	bl	800fd70 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 8011062:	68ba      	ldr	r2, [r7, #8]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 8011068:	4b37      	ldr	r3, [pc, #220]	@ (8011148 <SGP_GetMeasurementValues+0x25c>)
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	3301      	adds	r3, #1
 801106e:	b2da      	uxtb	r2, r3
 8011070:	4b35      	ldr	r3, [pc, #212]	@ (8011148 <SGP_GetMeasurementValues+0x25c>)
 8011072:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 8011074:	4b34      	ldr	r3, [pc, #208]	@ (8011148 <SGP_GetMeasurementValues+0x25c>)
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	2b01      	cmp	r3, #1
 801107a:	d10d      	bne.n	8011098 <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 801107c:	193b      	adds	r3, r7, r4
 801107e:	881b      	ldrh	r3, [r3, #0]
 8011080:	4a32      	ldr	r2, [pc, #200]	@ (801114c <SGP_GetMeasurementValues+0x260>)
 8011082:	492c      	ldr	r1, [pc, #176]	@ (8011134 <SGP_GetMeasurementValues+0x248>)
 8011084:	2003      	movs	r0, #3
 8011086:	f002 fe7d 	bl	8013d84 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	4a30      	ldr	r2, [pc, #192]	@ (8011150 <SGP_GetMeasurementValues+0x264>)
 801108e:	4929      	ldr	r1, [pc, #164]	@ (8011134 <SGP_GetMeasurementValues+0x248>)
 8011090:	2003      	movs	r0, #3
 8011092:	f002 fe77 	bl	8013d84 <CreateLine>
 8011096:	e006      	b.n	80110a6 <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 8011098:	4b2b      	ldr	r3, [pc, #172]	@ (8011148 <SGP_GetMeasurementValues+0x25c>)
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	2b0b      	cmp	r3, #11
 801109e:	d102      	bne.n	80110a6 <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 80110a0:	4b29      	ldr	r3, [pc, #164]	@ (8011148 <SGP_GetMeasurementValues+0x25c>)
 80110a2:	2200      	movs	r2, #0
 80110a4:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	0018      	movs	r0, r3
 80110ac:	f001 fdf2 	bl	8012c94 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 80110b0:	4b22      	ldr	r3, [pc, #136]	@ (801113c <SGP_GetMeasurementValues+0x250>)
 80110b2:	2200      	movs	r2, #0
 80110b4:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 80110b6:	4b14      	ldr	r3, [pc, #80]	@ (8011108 <SGP_GetMeasurementValues+0x21c>)
 80110b8:	2200      	movs	r2, #0
 80110ba:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80110bc:	4b11      	ldr	r3, [pc, #68]	@ (8011104 <SGP_GetMeasurementValues+0x218>)
 80110be:	2200      	movs	r2, #0
 80110c0:	701a      	strb	r2, [r3, #0]
      return true;
 80110c2:	2301      	movs	r3, #1
 80110c4:	e017      	b.n	80110f6 <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80110c6:	f7ff fef5 	bl	8010eb4 <SGP_MeasurementDone>
 80110ca:	1e03      	subs	r3, r0, #0
 80110cc:	d012      	beq.n	80110f4 <SGP_GetMeasurementValues+0x208>
 80110ce:	4b0c      	ldr	r3, [pc, #48]	@ (8011100 <SGP_GetMeasurementValues+0x214>)
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d00e      	beq.n	80110f4 <SGP_GetMeasurementValues+0x208>
 80110d6:	4b10      	ldr	r3, [pc, #64]	@ (8011118 <SGP_GetMeasurementValues+0x22c>)
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d00a      	beq.n	80110f4 <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80110de:	4a1d      	ldr	r2, [pc, #116]	@ (8011154 <SGP_GetMeasurementValues+0x268>)
 80110e0:	4b14      	ldr	r3, [pc, #80]	@ (8011134 <SGP_GetMeasurementValues+0x248>)
 80110e2:	0019      	movs	r1, r3
 80110e4:	2003      	movs	r0, #3
 80110e6:	f002 fe4d 	bl	8013d84 <CreateLine>
    SGP_StartMeasurement();
 80110ea:	f7ff fe8f 	bl	8010e0c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80110ee:	4b05      	ldr	r3, [pc, #20]	@ (8011104 <SGP_GetMeasurementValues+0x218>)
 80110f0:	2200      	movs	r2, #0
 80110f2:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80110f4:	2300      	movs	r3, #0
}
 80110f6:	0018      	movs	r0, r3
 80110f8:	46bd      	mov	sp, r7
 80110fa:	b005      	add	sp, #20
 80110fc:	bd90      	pop	{r4, r7, pc}
 80110fe:	46c0      	nop			@ (mov r8, r8)
 8011100:	200011fc 	.word	0x200011fc
 8011104:	200012a9 	.word	0x200012a9
 8011108:	200012a8 	.word	0x200012a8
 801110c:	200000bc 	.word	0x200000bc
 8011110:	200000d0 	.word	0x200000d0
 8011114:	200000b4 	.word	0x200000b4
 8011118:	200011fd 	.word	0x200011fd
 801111c:	200011ec 	.word	0x200011ec
 8011120:	0802d5b0 	.word	0x0802d5b0
 8011124:	0802d5d8 	.word	0x0802d5d8
 8011128:	0802d5dc 	.word	0x0802d5dc
 801112c:	0802d5fc 	.word	0x0802d5fc
 8011130:	0802d600 	.word	0x0802d600
 8011134:	0802d620 	.word	0x0802d620
 8011138:	200000cc 	.word	0x200000cc
 801113c:	200011f5 	.word	0x200011f5
 8011140:	200000c6 	.word	0x200000c6
 8011144:	20001200 	.word	0x20001200
 8011148:	200011f6 	.word	0x200011f6
 801114c:	0802d624 	.word	0x0802d624
 8011150:	0802d640 	.word	0x0802d640
 8011154:	0802d65c 	.word	0x0802d65c

08011158 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8011158:	b580      	push	{r7, lr}
 801115a:	b084      	sub	sp, #16
 801115c:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 801115e:	4b1a      	ldr	r3, [pc, #104]	@ (80111c8 <SGP_DeviceConnected+0x70>)
 8011160:	2202      	movs	r2, #2
 8011162:	0019      	movs	r1, r3
 8011164:	2059      	movs	r0, #89	@ 0x59
 8011166:	f7ff fde5 	bl	8010d34 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 801116a:	2001      	movs	r0, #1
 801116c:	f003 fb8c 	bl	8014888 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8011170:	4b16      	ldr	r3, [pc, #88]	@ (80111cc <SGP_DeviceConnected+0x74>)
 8011172:	2209      	movs	r2, #9
 8011174:	0019      	movs	r1, r3
 8011176:	2059      	movs	r0, #89	@ 0x59
 8011178:	f7ff fdbe 	bl	8010cf8 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 801117c:	1dfb      	adds	r3, r7, #7
 801117e:	2200      	movs	r2, #0
 8011180:	701a      	strb	r2, [r3, #0]
 8011182:	e011      	b.n	80111a8 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8011184:	1dfb      	adds	r3, r7, #7
 8011186:	7818      	ldrb	r0, [r3, #0]
 8011188:	1dfb      	adds	r3, r7, #7
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	4a0f      	ldr	r2, [pc, #60]	@ (80111cc <SGP_DeviceConnected+0x74>)
 801118e:	5cd3      	ldrb	r3, [r2, r3]
 8011190:	4a0f      	ldr	r2, [pc, #60]	@ (80111d0 <SGP_DeviceConnected+0x78>)
 8011192:	4910      	ldr	r1, [pc, #64]	@ (80111d4 <SGP_DeviceConnected+0x7c>)
 8011194:	9300      	str	r3, [sp, #0]
 8011196:	0003      	movs	r3, r0
 8011198:	2002      	movs	r0, #2
 801119a:	f002 fdf3 	bl	8013d84 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 801119e:	1dfb      	adds	r3, r7, #7
 80111a0:	781a      	ldrb	r2, [r3, #0]
 80111a2:	1dfb      	adds	r3, r7, #7
 80111a4:	3201      	adds	r2, #1
 80111a6:	701a      	strb	r2, [r3, #0]
 80111a8:	1dfb      	adds	r3, r7, #7
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	2b08      	cmp	r3, #8
 80111ae:	d9e9      	bls.n	8011184 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80111b0:	4b06      	ldr	r3, [pc, #24]	@ (80111cc <SGP_DeviceConnected+0x74>)
 80111b2:	2203      	movs	r2, #3
 80111b4:	2109      	movs	r1, #9
 80111b6:	0018      	movs	r0, r3
 80111b8:	f000 f80e 	bl	80111d8 <CheckCRC>
 80111bc:	0003      	movs	r3, r0
}
 80111be:	0018      	movs	r0, r3
 80111c0:	46bd      	mov	sp, r7
 80111c2:	b002      	add	sp, #8
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	46c0      	nop			@ (mov r8, r8)
 80111c8:	200000b0 	.word	0x200000b0
 80111cc:	200011ec 	.word	0x200011ec
 80111d0:	0802d67c 	.word	0x0802d67c
 80111d4:	0802d5fc 	.word	0x0802d5fc

080111d8 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80111d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111da:	b08f      	sub	sp, #60	@ 0x3c
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6278      	str	r0, [r7, #36]	@ 0x24
 80111e0:	0008      	movs	r0, r1
 80111e2:	0011      	movs	r1, r2
 80111e4:	2323      	movs	r3, #35	@ 0x23
 80111e6:	18fb      	adds	r3, r7, r3
 80111e8:	1c02      	adds	r2, r0, #0
 80111ea:	701a      	strb	r2, [r3, #0]
 80111ec:	2322      	movs	r3, #34	@ 0x22
 80111ee:	18fb      	adds	r3, r7, r3
 80111f0:	1c0a      	adds	r2, r1, #0
 80111f2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80111f4:	2317      	movs	r3, #23
 80111f6:	2220      	movs	r2, #32
 80111f8:	189b      	adds	r3, r3, r2
 80111fa:	19db      	adds	r3, r3, r7
 80111fc:	2200      	movs	r2, #0
 80111fe:	701a      	strb	r2, [r3, #0]
 8011200:	e09f      	b.n	8011342 <CheckCRC+0x16a>
 8011202:	466b      	mov	r3, sp
 8011204:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8011206:	2322      	movs	r3, #34	@ 0x22
 8011208:	18fb      	adds	r3, r7, r3
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	001a      	movs	r2, r3
 801120e:	3a01      	subs	r2, #1
 8011210:	633a      	str	r2, [r7, #48]	@ 0x30
 8011212:	60bb      	str	r3, [r7, #8]
 8011214:	2200      	movs	r2, #0
 8011216:	60fa      	str	r2, [r7, #12]
 8011218:	68b8      	ldr	r0, [r7, #8]
 801121a:	68f9      	ldr	r1, [r7, #12]
 801121c:	0002      	movs	r2, r0
 801121e:	0f52      	lsrs	r2, r2, #29
 8011220:	000c      	movs	r4, r1
 8011222:	00e4      	lsls	r4, r4, #3
 8011224:	61fc      	str	r4, [r7, #28]
 8011226:	69fc      	ldr	r4, [r7, #28]
 8011228:	4314      	orrs	r4, r2
 801122a:	61fc      	str	r4, [r7, #28]
 801122c:	0002      	movs	r2, r0
 801122e:	00d2      	lsls	r2, r2, #3
 8011230:	61ba      	str	r2, [r7, #24]
 8011232:	603b      	str	r3, [r7, #0]
 8011234:	2200      	movs	r2, #0
 8011236:	607a      	str	r2, [r7, #4]
 8011238:	6838      	ldr	r0, [r7, #0]
 801123a:	6879      	ldr	r1, [r7, #4]
 801123c:	0002      	movs	r2, r0
 801123e:	0f52      	lsrs	r2, r2, #29
 8011240:	000c      	movs	r4, r1
 8011242:	00e4      	lsls	r4, r4, #3
 8011244:	617c      	str	r4, [r7, #20]
 8011246:	697c      	ldr	r4, [r7, #20]
 8011248:	4314      	orrs	r4, r2
 801124a:	617c      	str	r4, [r7, #20]
 801124c:	0002      	movs	r2, r0
 801124e:	00d2      	lsls	r2, r2, #3
 8011250:	613a      	str	r2, [r7, #16]
 8011252:	3307      	adds	r3, #7
 8011254:	08db      	lsrs	r3, r3, #3
 8011256:	00db      	lsls	r3, r3, #3
 8011258:	466a      	mov	r2, sp
 801125a:	1ad3      	subs	r3, r2, r3
 801125c:	469d      	mov	sp, r3
 801125e:	466b      	mov	r3, sp
 8011260:	3300      	adds	r3, #0
 8011262:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8011264:	2316      	movs	r3, #22
 8011266:	2220      	movs	r2, #32
 8011268:	189b      	adds	r3, r3, r2
 801126a:	19db      	adds	r3, r3, r7
 801126c:	2200      	movs	r2, #0
 801126e:	701a      	strb	r2, [r3, #0]
 8011270:	e01e      	b.n	80112b0 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8011272:	2317      	movs	r3, #23
 8011274:	2220      	movs	r2, #32
 8011276:	189b      	adds	r3, r3, r2
 8011278:	19db      	adds	r3, r3, r7
 801127a:	781a      	ldrb	r2, [r3, #0]
 801127c:	2116      	movs	r1, #22
 801127e:	2320      	movs	r3, #32
 8011280:	18cb      	adds	r3, r1, r3
 8011282:	19db      	adds	r3, r3, r7
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	18d3      	adds	r3, r2, r3
 8011288:	001a      	movs	r2, r3
 801128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801128c:	189a      	adds	r2, r3, r2
 801128e:	0008      	movs	r0, r1
 8011290:	2320      	movs	r3, #32
 8011292:	18cb      	adds	r3, r1, r3
 8011294:	19db      	adds	r3, r3, r7
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	7811      	ldrb	r1, [r2, #0]
 801129a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801129c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 801129e:	2320      	movs	r3, #32
 80112a0:	18c3      	adds	r3, r0, r3
 80112a2:	19db      	adds	r3, r3, r7
 80112a4:	781a      	ldrb	r2, [r3, #0]
 80112a6:	2320      	movs	r3, #32
 80112a8:	18c3      	adds	r3, r0, r3
 80112aa:	19db      	adds	r3, r3, r7
 80112ac:	3201      	adds	r2, #1
 80112ae:	701a      	strb	r2, [r3, #0]
 80112b0:	2316      	movs	r3, #22
 80112b2:	2220      	movs	r2, #32
 80112b4:	189b      	adds	r3, r3, r2
 80112b6:	19da      	adds	r2, r3, r7
 80112b8:	2322      	movs	r3, #34	@ 0x22
 80112ba:	18fb      	adds	r3, r7, r3
 80112bc:	7812      	ldrb	r2, [r2, #0]
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d3d6      	bcc.n	8011272 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80112c4:	2417      	movs	r4, #23
 80112c6:	2320      	movs	r3, #32
 80112c8:	18e3      	adds	r3, r4, r3
 80112ca:	19db      	adds	r3, r3, r7
 80112cc:	781a      	ldrb	r2, [r3, #0]
 80112ce:	2322      	movs	r3, #34	@ 0x22
 80112d0:	18fb      	adds	r3, r7, r3
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	18d3      	adds	r3, r2, r3
 80112d6:	3b01      	subs	r3, #1
 80112d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112da:	18d2      	adds	r2, r2, r3
 80112dc:	250b      	movs	r5, #11
 80112de:	2320      	movs	r3, #32
 80112e0:	18eb      	adds	r3, r5, r3
 80112e2:	19db      	adds	r3, r3, r7
 80112e4:	7812      	ldrb	r2, [r2, #0]
 80112e6:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80112e8:	2322      	movs	r3, #34	@ 0x22
 80112ea:	18fb      	adds	r3, r7, r3
 80112ec:	781b      	ldrb	r3, [r3, #0]
 80112ee:	3b01      	subs	r3, #1
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112f4:	0011      	movs	r1, r2
 80112f6:	0018      	movs	r0, r3
 80112f8:	f000 f838 	bl	801136c <CalculateCRC>
 80112fc:	0003      	movs	r3, r0
 80112fe:	001a      	movs	r2, r3
 8011300:	2320      	movs	r3, #32
 8011302:	18eb      	adds	r3, r5, r3
 8011304:	19db      	adds	r3, r3, r7
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	4293      	cmp	r3, r2
 801130a:	d00c      	beq.n	8011326 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 801130c:	2320      	movs	r3, #32
 801130e:	18e3      	adds	r3, r4, r3
 8011310:	19db      	adds	r3, r3, r7
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	3301      	adds	r3, #1
 8011316:	4a13      	ldr	r2, [pc, #76]	@ (8011364 <CheckCRC+0x18c>)
 8011318:	4913      	ldr	r1, [pc, #76]	@ (8011368 <CheckCRC+0x190>)
 801131a:	2001      	movs	r0, #1
 801131c:	f002 fd32 	bl	8013d84 <CreateLine>
      return false;
 8011320:	2300      	movs	r3, #0
 8011322:	46b5      	mov	sp, r6
 8011324:	e019      	b.n	801135a <CheckCRC+0x182>
 8011326:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8011328:	2217      	movs	r2, #23
 801132a:	2320      	movs	r3, #32
 801132c:	18d3      	adds	r3, r2, r3
 801132e:	19db      	adds	r3, r3, r7
 8011330:	2120      	movs	r1, #32
 8011332:	1852      	adds	r2, r2, r1
 8011334:	19d1      	adds	r1, r2, r7
 8011336:	2222      	movs	r2, #34	@ 0x22
 8011338:	18ba      	adds	r2, r7, r2
 801133a:	7809      	ldrb	r1, [r1, #0]
 801133c:	7812      	ldrb	r2, [r2, #0]
 801133e:	188a      	adds	r2, r1, r2
 8011340:	701a      	strb	r2, [r3, #0]
 8011342:	2317      	movs	r3, #23
 8011344:	2220      	movs	r2, #32
 8011346:	189b      	adds	r3, r3, r2
 8011348:	19da      	adds	r2, r3, r7
 801134a:	2323      	movs	r3, #35	@ 0x23
 801134c:	18fb      	adds	r3, r7, r3
 801134e:	7812      	ldrb	r2, [r2, #0]
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	429a      	cmp	r2, r3
 8011354:	d200      	bcs.n	8011358 <CheckCRC+0x180>
 8011356:	e754      	b.n	8011202 <CheckCRC+0x2a>
    }
  }
  return true;
 8011358:	2301      	movs	r3, #1
}
 801135a:	0018      	movs	r0, r3
 801135c:	46bd      	mov	sp, r7
 801135e:	b00f      	add	sp, #60	@ 0x3c
 8011360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011362:	46c0      	nop			@ (mov r8, r8)
 8011364:	0802d69c 	.word	0x0802d69c
 8011368:	0802d5d8 	.word	0x0802d5d8

0801136c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	000a      	movs	r2, r1
 8011376:	1cfb      	adds	r3, r7, #3
 8011378:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 801137a:	230f      	movs	r3, #15
 801137c:	18fb      	adds	r3, r7, r3
 801137e:	22ff      	movs	r2, #255	@ 0xff
 8011380:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8011382:	230e      	movs	r3, #14
 8011384:	18fb      	adds	r3, r7, r3
 8011386:	2200      	movs	r2, #0
 8011388:	701a      	strb	r2, [r3, #0]
 801138a:	e038      	b.n	80113fe <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 801138c:	230e      	movs	r3, #14
 801138e:	18fb      	adds	r3, r7, r3
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	687a      	ldr	r2, [r7, #4]
 8011394:	18d3      	adds	r3, r2, r3
 8011396:	7819      	ldrb	r1, [r3, #0]
 8011398:	220f      	movs	r2, #15
 801139a:	18bb      	adds	r3, r7, r2
 801139c:	18ba      	adds	r2, r7, r2
 801139e:	7812      	ldrb	r2, [r2, #0]
 80113a0:	404a      	eors	r2, r1
 80113a2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80113a4:	230d      	movs	r3, #13
 80113a6:	18fb      	adds	r3, r7, r3
 80113a8:	2200      	movs	r2, #0
 80113aa:	701a      	strb	r2, [r3, #0]
 80113ac:	e01c      	b.n	80113e8 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80113ae:	210f      	movs	r1, #15
 80113b0:	187b      	adds	r3, r7, r1
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	b25b      	sxtb	r3, r3
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	da0a      	bge.n	80113d0 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80113ba:	187b      	adds	r3, r7, r1
 80113bc:	781b      	ldrb	r3, [r3, #0]
 80113be:	b25b      	sxtb	r3, r3
 80113c0:	18db      	adds	r3, r3, r3
 80113c2:	b25b      	sxtb	r3, r3
 80113c4:	2231      	movs	r2, #49	@ 0x31
 80113c6:	4053      	eors	r3, r2
 80113c8:	b25a      	sxtb	r2, r3
 80113ca:	187b      	adds	r3, r7, r1
 80113cc:	701a      	strb	r2, [r3, #0]
 80113ce:	e005      	b.n	80113dc <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 80113d0:	230f      	movs	r3, #15
 80113d2:	18fa      	adds	r2, r7, r3
 80113d4:	18fb      	adds	r3, r7, r3
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	18db      	adds	r3, r3, r3
 80113da:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80113dc:	210d      	movs	r1, #13
 80113de:	187b      	adds	r3, r7, r1
 80113e0:	781a      	ldrb	r2, [r3, #0]
 80113e2:	187b      	adds	r3, r7, r1
 80113e4:	3201      	adds	r2, #1
 80113e6:	701a      	strb	r2, [r3, #0]
 80113e8:	230d      	movs	r3, #13
 80113ea:	18fb      	adds	r3, r7, r3
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	2b07      	cmp	r3, #7
 80113f0:	d9dd      	bls.n	80113ae <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80113f2:	210e      	movs	r1, #14
 80113f4:	187b      	adds	r3, r7, r1
 80113f6:	781a      	ldrb	r2, [r3, #0]
 80113f8:	187b      	adds	r3, r7, r1
 80113fa:	3201      	adds	r2, #1
 80113fc:	701a      	strb	r2, [r3, #0]
 80113fe:	230e      	movs	r3, #14
 8011400:	18fa      	adds	r2, r7, r3
 8011402:	1cfb      	adds	r3, r7, #3
 8011404:	7812      	ldrb	r2, [r2, #0]
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	429a      	cmp	r2, r3
 801140a:	d3bf      	bcc.n	801138c <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 801140c:	230f      	movs	r3, #15
 801140e:	18fb      	adds	r3, r7, r3
 8011410:	781b      	ldrb	r3, [r3, #0]
}
 8011412:	0018      	movs	r0, r3
 8011414:	46bd      	mov	sp, r7
 8011416:	b004      	add	sp, #16
 8011418:	bd80      	pop	{r7, pc}
	...

0801141c <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4936      	ldr	r1, [pc, #216]	@ (8011504 <SGP_SetHT+0xe8>)
 801142c:	1c18      	adds	r0, r3, #0
 801142e:	f7ef fa47 	bl	80008c0 <__aeabi_fadd>
 8011432:	1c03      	adds	r3, r0, #0
 8011434:	4934      	ldr	r1, [pc, #208]	@ (8011508 <SGP_SetHT+0xec>)
 8011436:	1c18      	adds	r0, r3, #0
 8011438:	f7ef fc34 	bl	8000ca4 <__aeabi_fdiv>
 801143c:	1c03      	adds	r3, r0, #0
 801143e:	4933      	ldr	r1, [pc, #204]	@ (801150c <SGP_SetHT+0xf0>)
 8011440:	1c18      	adds	r0, r3, #0
 8011442:	f7ef fdfd 	bl	8001040 <__aeabi_fmul>
 8011446:	1c03      	adds	r3, r0, #0
 8011448:	1c18      	adds	r0, r3, #0
 801144a:	f7ef f8e7 	bl	800061c <__aeabi_f2uiz>
 801144e:	0003      	movs	r3, r0
 8011450:	b29a      	uxth	r2, r3
 8011452:	4b2f      	ldr	r3, [pc, #188]	@ (8011510 <SGP_SetHT+0xf4>)
 8011454:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	492e      	ldr	r1, [pc, #184]	@ (8011514 <SGP_SetHT+0xf8>)
 801145c:	1c18      	adds	r0, r3, #0
 801145e:	f7ef fc21 	bl	8000ca4 <__aeabi_fdiv>
 8011462:	1c03      	adds	r3, r0, #0
 8011464:	4929      	ldr	r1, [pc, #164]	@ (801150c <SGP_SetHT+0xf0>)
 8011466:	1c18      	adds	r0, r3, #0
 8011468:	f7ef fdea 	bl	8001040 <__aeabi_fmul>
 801146c:	1c03      	adds	r3, r0, #0
 801146e:	1c18      	adds	r0, r3, #0
 8011470:	f7ef f8d4 	bl	800061c <__aeabi_f2uiz>
 8011474:	0003      	movs	r3, r0
 8011476:	b29a      	uxth	r2, r3
 8011478:	4b27      	ldr	r3, [pc, #156]	@ (8011518 <SGP_SetHT+0xfc>)
 801147a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 801147c:	4b26      	ldr	r3, [pc, #152]	@ (8011518 <SGP_SetHT+0xfc>)
 801147e:	881b      	ldrh	r3, [r3, #0]
 8011480:	0a1b      	lsrs	r3, r3, #8
 8011482:	b29b      	uxth	r3, r3
 8011484:	b2da      	uxtb	r2, r3
 8011486:	4b25      	ldr	r3, [pc, #148]	@ (801151c <SGP_SetHT+0x100>)
 8011488:	709a      	strb	r2, [r3, #2]
 801148a:	4b24      	ldr	r3, [pc, #144]	@ (801151c <SGP_SetHT+0x100>)
 801148c:	789a      	ldrb	r2, [r3, #2]
 801148e:	210c      	movs	r1, #12
 8011490:	187b      	adds	r3, r7, r1
 8011492:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8011494:	4b20      	ldr	r3, [pc, #128]	@ (8011518 <SGP_SetHT+0xfc>)
 8011496:	881b      	ldrh	r3, [r3, #0]
 8011498:	b2da      	uxtb	r2, r3
 801149a:	4b20      	ldr	r3, [pc, #128]	@ (801151c <SGP_SetHT+0x100>)
 801149c:	70da      	strb	r2, [r3, #3]
 801149e:	4b1f      	ldr	r3, [pc, #124]	@ (801151c <SGP_SetHT+0x100>)
 80114a0:	78da      	ldrb	r2, [r3, #3]
 80114a2:	187b      	adds	r3, r7, r1
 80114a4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 80114a6:	187b      	adds	r3, r7, r1
 80114a8:	2102      	movs	r1, #2
 80114aa:	0018      	movs	r0, r3
 80114ac:	f7ff ff5e 	bl	801136c <CalculateCRC>
 80114b0:	0003      	movs	r3, r0
 80114b2:	001a      	movs	r2, r3
 80114b4:	4b19      	ldr	r3, [pc, #100]	@ (801151c <SGP_SetHT+0x100>)
 80114b6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80114b8:	4b15      	ldr	r3, [pc, #84]	@ (8011510 <SGP_SetHT+0xf4>)
 80114ba:	881b      	ldrh	r3, [r3, #0]
 80114bc:	0a1b      	lsrs	r3, r3, #8
 80114be:	b29b      	uxth	r3, r3
 80114c0:	b2da      	uxtb	r2, r3
 80114c2:	4b16      	ldr	r3, [pc, #88]	@ (801151c <SGP_SetHT+0x100>)
 80114c4:	715a      	strb	r2, [r3, #5]
 80114c6:	4b15      	ldr	r3, [pc, #84]	@ (801151c <SGP_SetHT+0x100>)
 80114c8:	795a      	ldrb	r2, [r3, #5]
 80114ca:	2108      	movs	r1, #8
 80114cc:	187b      	adds	r3, r7, r1
 80114ce:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80114d0:	4b0f      	ldr	r3, [pc, #60]	@ (8011510 <SGP_SetHT+0xf4>)
 80114d2:	881b      	ldrh	r3, [r3, #0]
 80114d4:	b2da      	uxtb	r2, r3
 80114d6:	4b11      	ldr	r3, [pc, #68]	@ (801151c <SGP_SetHT+0x100>)
 80114d8:	719a      	strb	r2, [r3, #6]
 80114da:	4b10      	ldr	r3, [pc, #64]	@ (801151c <SGP_SetHT+0x100>)
 80114dc:	799a      	ldrb	r2, [r3, #6]
 80114de:	187b      	adds	r3, r7, r1
 80114e0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80114e2:	187b      	adds	r3, r7, r1
 80114e4:	2102      	movs	r1, #2
 80114e6:	0018      	movs	r0, r3
 80114e8:	f7ff ff40 	bl	801136c <CalculateCRC>
 80114ec:	0003      	movs	r3, r0
 80114ee:	001a      	movs	r2, r3
 80114f0:	4b0a      	ldr	r3, [pc, #40]	@ (801151c <SGP_SetHT+0x100>)
 80114f2:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80114f4:	4b0a      	ldr	r3, [pc, #40]	@ (8011520 <SGP_SetHT+0x104>)
 80114f6:	2201      	movs	r2, #1
 80114f8:	701a      	strb	r2, [r3, #0]
}
 80114fa:	46c0      	nop			@ (mov r8, r8)
 80114fc:	46bd      	mov	sp, r7
 80114fe:	b004      	add	sp, #16
 8011500:	bd80      	pop	{r7, pc}
 8011502:	46c0      	nop			@ (mov r8, r8)
 8011504:	42340000 	.word	0x42340000
 8011508:	432f0000 	.word	0x432f0000
 801150c:	477fff00 	.word	0x477fff00
 8011510:	200012a6 	.word	0x200012a6
 8011514:	42c80000 	.word	0x42c80000
 8011518:	200012a4 	.word	0x200012a4
 801151c:	200000bc 	.word	0x200000bc
 8011520:	200012a8 	.word	0x200012a8

08011524 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 8011524:	b580      	push	{r7, lr}
 8011526:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 8011528:	4a09      	ldr	r2, [pc, #36]	@ (8011550 <SGP_SoftReset+0x2c>)
 801152a:	4b0a      	ldr	r3, [pc, #40]	@ (8011554 <SGP_SoftReset+0x30>)
 801152c:	0019      	movs	r1, r3
 801152e:	2003      	movs	r0, #3
 8011530:	f002 fc28 	bl	8013d84 <CreateLine>
  SGP_TurnHeaterOff();
 8011534:	f7ff fccc 	bl	8010ed0 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 8011538:	200a      	movs	r0, #10
 801153a:	f003 f9a5 	bl	8014888 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 801153e:	4b06      	ldr	r3, [pc, #24]	@ (8011558 <SGP_SoftReset+0x34>)
 8011540:	2202      	movs	r2, #2
 8011542:	0019      	movs	r1, r3
 8011544:	2059      	movs	r0, #89	@ 0x59
 8011546:	f7ff fbf5 	bl	8010d34 <WriteRegister>
}
 801154a:	46c0      	nop			@ (mov r8, r8)
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	0802d744 	.word	0x0802d744
 8011554:	0802d620 	.word	0x0802d620
 8011558:	200000c4 	.word	0x200000c4

0801155c <ResetVOCresult>:

void ResetVOCresult(void) {
 801155c:	b580      	push	{r7, lr}
 801155e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 8011560:	4b02      	ldr	r3, [pc, #8]	@ (801156c <ResetVOCresult+0x10>)
 8011562:	2200      	movs	r2, #0
 8011564:	601a      	str	r2, [r3, #0]
}
 8011566:	46c0      	nop			@ (mov r8, r8)
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}
 801156c:	200012ac 	.word	0x200012ac

08011570 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 8011570:	b580      	push	{r7, lr}
 8011572:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 8011574:	4b4b      	ldr	r3, [pc, #300]	@ (80116a4 <SGP_Upkeep+0x134>)
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	2b07      	cmp	r3, #7
 801157a:	d900      	bls.n	801157e <SGP_Upkeep+0xe>
 801157c:	e07a      	b.n	8011674 <SGP_Upkeep+0x104>
 801157e:	009a      	lsls	r2, r3, #2
 8011580:	4b49      	ldr	r3, [pc, #292]	@ (80116a8 <SGP_Upkeep+0x138>)
 8011582:	18d3      	adds	r3, r2, r3
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 8011588:	4a48      	ldr	r2, [pc, #288]	@ (80116ac <SGP_Upkeep+0x13c>)
 801158a:	4b49      	ldr	r3, [pc, #292]	@ (80116b0 <SGP_Upkeep+0x140>)
 801158c:	0019      	movs	r1, r3
 801158e:	2003      	movs	r0, #3
 8011590:	f002 fbf8 	bl	8013d84 <CreateLine>
    break;
 8011594:	e081      	b.n	801169a <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 8011596:	f7ff ffe1 	bl	801155c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 801159a:	4b42      	ldr	r3, [pc, #264]	@ (80116a4 <SGP_Upkeep+0x134>)
 801159c:	2201      	movs	r2, #1
 801159e:	701a      	strb	r2, [r3, #0]
    break;
 80115a0:	e07b      	b.n	801169a <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 80115a2:	f7fc fc2d 	bl	800de00 <getSensorLock>
 80115a6:	1e03      	subs	r3, r0, #0
 80115a8:	d000      	beq.n	80115ac <SGP_Upkeep+0x3c>
 80115aa:	e06f      	b.n	801168c <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 80115ac:	2005      	movs	r0, #5
 80115ae:	f7fc fc13 	bl	800ddd8 <setSensorLock>
    SetMeasurementIndicator();
 80115b2:	f001 f989 	bl	80128c8 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 80115b6:	f7ff fc29 	bl	8010e0c <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 80115ba:	200a      	movs	r0, #10
 80115bc:	f003 f964 	bl	8014888 <HAL_Delay>
    setSensorLock(FREE);
 80115c0:	2000      	movs	r0, #0
 80115c2:	f7fc fc09 	bl	800ddd8 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 80115c6:	4b37      	ldr	r3, [pc, #220]	@ (80116a4 <SGP_Upkeep+0x134>)
 80115c8:	2202      	movs	r2, #2
 80115ca:	701a      	strb	r2, [r3, #0]
    break;
 80115cc:	e065      	b.n	801169a <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 80115ce:	f7fc fc17 	bl	800de00 <getSensorLock>
 80115d2:	1e03      	subs	r3, r0, #0
 80115d4:	d15c      	bne.n	8011690 <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 80115d6:	2005      	movs	r0, #5
 80115d8:	f7fc fbfe 	bl	800ddd8 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 80115dc:	4b35      	ldr	r3, [pc, #212]	@ (80116b4 <SGP_Upkeep+0x144>)
 80115de:	0018      	movs	r0, r3
 80115e0:	f7ff fc84 	bl	8010eec <SGP_GetMeasurementValues>
 80115e4:	1e03      	subs	r3, r0, #0
 80115e6:	d002      	beq.n	80115ee <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 80115e8:	4b2e      	ldr	r3, [pc, #184]	@ (80116a4 <SGP_Upkeep+0x134>)
 80115ea:	2203      	movs	r2, #3
 80115ec:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 80115ee:	200a      	movs	r0, #10
 80115f0:	f003 f94a 	bl	8014888 <HAL_Delay>
    setSensorLock(FREE);
 80115f4:	2000      	movs	r0, #0
 80115f6:	f7fc fbef 	bl	800ddd8 <setSensorLock>
    break;
 80115fa:	e04e      	b.n	801169a <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 80115fc:	4b2d      	ldr	r3, [pc, #180]	@ (80116b4 <SGP_Upkeep+0x144>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	b29b      	uxth	r3, r3
 8011602:	0018      	movs	r0, r3
 8011604:	f7f3 fa56 	bl	8004ab4 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 8011608:	4b26      	ldr	r3, [pc, #152]	@ (80116a4 <SGP_Upkeep+0x134>)
 801160a:	2206      	movs	r2, #6
 801160c:	701a      	strb	r2, [r3, #0]
    break;
 801160e:	e044      	b.n	801169a <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 8011610:	4b24      	ldr	r3, [pc, #144]	@ (80116a4 <SGP_Upkeep+0x134>)
 8011612:	2207      	movs	r2, #7
 8011614:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 8011616:	4b28      	ldr	r3, [pc, #160]	@ (80116b8 <SGP_Upkeep+0x148>)
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	2b03      	cmp	r3, #3
 801161c:	d912      	bls.n	8011644 <SGP_Upkeep+0xd4>
 801161e:	4b27      	ldr	r3, [pc, #156]	@ (80116bc <SGP_Upkeep+0x14c>)
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	2201      	movs	r2, #1
 8011624:	4053      	eors	r3, r2
 8011626:	b2db      	uxtb	r3, r3
 8011628:	2b00      	cmp	r3, #0
 801162a:	d00b      	beq.n	8011644 <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 801162c:	4b24      	ldr	r3, [pc, #144]	@ (80116c0 <SGP_Upkeep+0x150>)
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d004      	beq.n	801163e <SGP_Upkeep+0xce>
        SGP_SoftReset();
 8011634:	f7ff ff76 	bl	8011524 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 8011638:	2000      	movs	r0, #0
 801163a:	f7fb ff77 	bl	800d52c <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 801163e:	4b20      	ldr	r3, [pc, #128]	@ (80116c0 <SGP_Upkeep+0x150>)
 8011640:	2201      	movs	r2, #1
 8011642:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 8011644:	f003 f916 	bl	8014874 <HAL_GetTick>
 8011648:	0003      	movs	r3, r0
 801164a:	22c8      	movs	r2, #200	@ 0xc8
 801164c:	0092      	lsls	r2, r2, #2
 801164e:	189a      	adds	r2, r3, r2
 8011650:	4b1c      	ldr	r3, [pc, #112]	@ (80116c4 <SGP_Upkeep+0x154>)
 8011652:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 8011654:	f001 f94a 	bl	80128ec <ResetMeasurementIndicator>
  break;
 8011658:	e01f      	b.n	801169a <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 801165a:	4b1a      	ldr	r3, [pc, #104]	@ (80116c4 <SGP_Upkeep+0x154>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	0018      	movs	r0, r3
 8011660:	f002 fb3a 	bl	8013cd8 <TimestampIsReached>
 8011664:	1e03      	subs	r3, r0, #0
 8011666:	d015      	beq.n	8011694 <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8011668:	f7ff fbb8 	bl	8010ddc <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 801166c:	4b0d      	ldr	r3, [pc, #52]	@ (80116a4 <SGP_Upkeep+0x134>)
 801166e:	2200      	movs	r2, #0
 8011670:	701a      	strb	r2, [r3, #0]
    }
    break;
 8011672:	e00f      	b.n	8011694 <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 8011674:	4b0b      	ldr	r3, [pc, #44]	@ (80116a4 <SGP_Upkeep+0x134>)
 8011676:	2200      	movs	r2, #0
 8011678:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 801167a:	f7fc fbc1 	bl	800de00 <getSensorLock>
 801167e:	0003      	movs	r3, r0
 8011680:	2b05      	cmp	r3, #5
 8011682:	d109      	bne.n	8011698 <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 8011684:	2000      	movs	r0, #0
 8011686:	f7fc fba7 	bl	800ddd8 <setSensorLock>
    }
    break;
 801168a:	e005      	b.n	8011698 <SGP_Upkeep+0x128>
      break;
 801168c:	46c0      	nop			@ (mov r8, r8)
 801168e:	e004      	b.n	801169a <SGP_Upkeep+0x12a>
      break;
 8011690:	46c0      	nop			@ (mov r8, r8)
 8011692:	e002      	b.n	801169a <SGP_Upkeep+0x12a>
    break;
 8011694:	46c0      	nop			@ (mov r8, r8)
 8011696:	e000      	b.n	801169a <SGP_Upkeep+0x12a>
    break;
 8011698:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 801169a:	4b02      	ldr	r3, [pc, #8]	@ (80116a4 <SGP_Upkeep+0x134>)
 801169c:	781b      	ldrb	r3, [r3, #0]
}
 801169e:	0018      	movs	r0, r3
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	200012b0 	.word	0x200012b0
 80116a8:	0802e2e8 	.word	0x0802e2e8
 80116ac:	0802d75c 	.word	0x0802d75c
 80116b0:	0802d620 	.word	0x0802d620
 80116b4:	200012ac 	.word	0x200012ac
 80116b8:	200011f6 	.word	0x200011f6
 80116bc:	2000214d 	.word	0x2000214d
 80116c0:	200011e0 	.word	0x200011e0
 80116c4:	200011f8 	.word	0x200011f8

080116c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	0002      	movs	r2, r0
 80116d0:	1dfb      	adds	r3, r7, #7
 80116d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80116d4:	1dfb      	adds	r3, r7, #7
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80116da:	d809      	bhi.n	80116f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80116dc:	1dfb      	adds	r3, r7, #7
 80116de:	781b      	ldrb	r3, [r3, #0]
 80116e0:	001a      	movs	r2, r3
 80116e2:	231f      	movs	r3, #31
 80116e4:	401a      	ands	r2, r3
 80116e6:	4b04      	ldr	r3, [pc, #16]	@ (80116f8 <__NVIC_EnableIRQ+0x30>)
 80116e8:	2101      	movs	r1, #1
 80116ea:	4091      	lsls	r1, r2
 80116ec:	000a      	movs	r2, r1
 80116ee:	601a      	str	r2, [r3, #0]
  }
}
 80116f0:	46c0      	nop			@ (mov r8, r8)
 80116f2:	46bd      	mov	sp, r7
 80116f4:	b002      	add	sp, #8
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	e000e100 	.word	0xe000e100

080116fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b082      	sub	sp, #8
 8011700:	af00      	add	r7, sp, #0
 8011702:	0002      	movs	r2, r0
 8011704:	1dfb      	adds	r3, r7, #7
 8011706:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8011708:	1dfb      	adds	r3, r7, #7
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	2b7f      	cmp	r3, #127	@ 0x7f
 801170e:	d810      	bhi.n	8011732 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011710:	1dfb      	adds	r3, r7, #7
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	001a      	movs	r2, r3
 8011716:	231f      	movs	r3, #31
 8011718:	4013      	ands	r3, r2
 801171a:	4908      	ldr	r1, [pc, #32]	@ (801173c <__NVIC_DisableIRQ+0x40>)
 801171c:	2201      	movs	r2, #1
 801171e:	409a      	lsls	r2, r3
 8011720:	0013      	movs	r3, r2
 8011722:	2280      	movs	r2, #128	@ 0x80
 8011724:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011726:	f3bf 8f4f 	dsb	sy
}
 801172a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 801172c:	f3bf 8f6f 	isb	sy
}
 8011730:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8011732:	46c0      	nop			@ (mov r8, r8)
 8011734:	46bd      	mov	sp, r7
 8011736:	b002      	add	sp, #8
 8011738:	bd80      	pop	{r7, pc}
 801173a:	46c0      	nop			@ (mov r8, r8)
 801173c:	e000e100 	.word	0xe000e100

08011740 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8011740:	b5b0      	push	{r4, r5, r7, lr}
 8011742:	b088      	sub	sp, #32
 8011744:	af02      	add	r7, sp, #8
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	0008      	movs	r0, r1
 801174a:	0011      	movs	r1, r2
 801174c:	1cfb      	adds	r3, r7, #3
 801174e:	1c02      	adds	r2, r0, #0
 8011750:	701a      	strb	r2, [r3, #0]
 8011752:	1cbb      	adds	r3, r7, #2
 8011754:	1c0a      	adds	r2, r1, #0
 8011756:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8011758:	4b5b      	ldr	r3, [pc, #364]	@ (80118c8 <getSoundData+0x188>)
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	b2db      	uxtb	r3, r3
 801175e:	2201      	movs	r2, #1
 8011760:	4053      	eors	r3, r2
 8011762:	b2db      	uxtb	r3, r3
 8011764:	2b00      	cmp	r3, #0
 8011766:	d107      	bne.n	8011778 <getSoundData+0x38>
 8011768:	4b58      	ldr	r3, [pc, #352]	@ (80118cc <getSoundData+0x18c>)
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	b2db      	uxtb	r3, r3
 801176e:	2201      	movs	r2, #1
 8011770:	4053      	eors	r3, r2
 8011772:	b2db      	uxtb	r3, r3
 8011774:	2b00      	cmp	r3, #0
 8011776:	d001      	beq.n	801177c <getSoundData+0x3c>
    {
        return false;
 8011778:	2300      	movs	r3, #0
 801177a:	e0a0      	b.n	80118be <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 801177c:	4b54      	ldr	r3, [pc, #336]	@ (80118d0 <getSoundData+0x190>)
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	b2db      	uxtb	r3, r3
 8011782:	2b00      	cmp	r3, #0
 8011784:	d005      	beq.n	8011792 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011786:	4b53      	ldr	r3, [pc, #332]	@ (80118d4 <getSoundData+0x194>)
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	b25b      	sxtb	r3, r3
 801178c:	0018      	movs	r0, r3
 801178e:	f7ff ffb5 	bl	80116fc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8011792:	f3bf 8f4f 	dsb	sy
}
 8011796:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8011798:	f3bf 8f6f 	isb	sy
}
 801179c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 801179e:	1cfb      	adds	r3, r7, #3
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d04c      	beq.n	8011840 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 80117a6:	4b4c      	ldr	r3, [pc, #304]	@ (80118d8 <getSoundData+0x198>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d11b      	bne.n	80117e6 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2200      	movs	r2, #0
 80117b8:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80117ba:	2300      	movs	r3, #0
 80117bc:	617b      	str	r3, [r7, #20]
 80117be:	e00e      	b.n	80117de <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	18d3      	adds	r3, r2, r3
 80117c6:	3302      	adds	r3, #2
 80117c8:	2200      	movs	r2, #0
 80117ca:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	18d3      	adds	r3, r2, r3
 80117d2:	3308      	adds	r3, #8
 80117d4:	2200      	movs	r2, #0
 80117d6:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	3301      	adds	r3, #1
 80117dc:	617b      	str	r3, [r7, #20]
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	2b05      	cmp	r3, #5
 80117e2:	d9ed      	bls.n	80117c0 <getSoundData+0x80>
 80117e4:	e02c      	b.n	8011840 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	1c59      	adds	r1, r3, #1
 80117ec:	4b3b      	ldr	r3, [pc, #236]	@ (80118dc <getSoundData+0x19c>)
 80117ee:	681a      	ldr	r2, [r3, #0]
 80117f0:	4b3b      	ldr	r3, [pc, #236]	@ (80118e0 <getSoundData+0x1a0>)
 80117f2:	681c      	ldr	r4, [r3, #0]
 80117f4:	4b38      	ldr	r3, [pc, #224]	@ (80118d8 <getSoundData+0x198>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	9300      	str	r3, [sp, #0]
 80117fa:	0023      	movs	r3, r4
 80117fc:	f000 fde4 	bl	80123c8 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011800:	2300      	movs	r3, #0
 8011802:	613b      	str	r3, [r7, #16]
 8011804:	e019      	b.n	801183a <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	18d3      	adds	r3, r2, r3
 801180c:	1c98      	adds	r0, r3, #2
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	3308      	adds	r3, #8
 8011812:	687a      	ldr	r2, [r7, #4]
 8011814:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8011816:	4b33      	ldr	r3, [pc, #204]	@ (80118e4 <getSoundData+0x1a4>)
 8011818:	693a      	ldr	r2, [r7, #16]
 801181a:	0092      	lsls	r2, r2, #2
 801181c:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 801181e:	4b32      	ldr	r3, [pc, #200]	@ (80118e8 <getSoundData+0x1a8>)
 8011820:	693a      	ldr	r2, [r7, #16]
 8011822:	0092      	lsls	r2, r2, #2
 8011824:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8011826:	4b2c      	ldr	r3, [pc, #176]	@ (80118d8 <getSoundData+0x198>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	9300      	str	r3, [sp, #0]
 801182c:	0013      	movs	r3, r2
 801182e:	0022      	movs	r2, r4
 8011830:	f000 fdca 	bl	80123c8 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	3301      	adds	r3, #1
 8011838:	613b      	str	r3, [r7, #16]
 801183a:	693b      	ldr	r3, [r7, #16]
 801183c:	2b05      	cmp	r3, #5
 801183e:	d9e2      	bls.n	8011806 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8011840:	1cbb      	adds	r3, r7, #2
 8011842:	781b      	ldrb	r3, [r3, #0]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d028      	beq.n	801189a <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8011848:	240e      	movs	r4, #14
 801184a:	193b      	adds	r3, r7, r4
 801184c:	2200      	movs	r2, #0
 801184e:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8011850:	250d      	movs	r5, #13
 8011852:	197b      	adds	r3, r7, r5
 8011854:	2200      	movs	r2, #0
 8011856:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8011858:	4b24      	ldr	r3, [pc, #144]	@ (80118ec <getSoundData+0x1ac>)
 801185a:	6818      	ldr	r0, [r3, #0]
 801185c:	4924      	ldr	r1, [pc, #144]	@ (80118f0 <getSoundData+0x1b0>)
 801185e:	197b      	adds	r3, r7, r5
 8011860:	193a      	adds	r2, r7, r4
 8011862:	f000 fe55 	bl	8012510 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8011866:	193b      	adds	r3, r7, r4
 8011868:	881a      	ldrh	r2, [r3, #0]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	21ff      	movs	r1, #255	@ 0xff
 801186e:	4011      	ands	r1, r2
 8011870:	000c      	movs	r4, r1
 8011872:	7b99      	ldrb	r1, [r3, #14]
 8011874:	2000      	movs	r0, #0
 8011876:	4001      	ands	r1, r0
 8011878:	1c08      	adds	r0, r1, #0
 801187a:	1c21      	adds	r1, r4, #0
 801187c:	4301      	orrs	r1, r0
 801187e:	7399      	strb	r1, [r3, #14]
 8011880:	0a12      	lsrs	r2, r2, #8
 8011882:	b290      	uxth	r0, r2
 8011884:	7bda      	ldrb	r2, [r3, #15]
 8011886:	2100      	movs	r1, #0
 8011888:	400a      	ands	r2, r1
 801188a:	1c11      	adds	r1, r2, #0
 801188c:	1c02      	adds	r2, r0, #0
 801188e:	430a      	orrs	r2, r1
 8011890:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8011892:	197b      	adds	r3, r7, r5
 8011894:	781a      	ldrb	r2, [r3, #0]
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 801189a:	f000 f869 	bl	8011970 <micSettlingComplete>
 801189e:	0003      	movs	r3, r0
 80118a0:	001a      	movs	r2, r3
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 80118a6:	4b0a      	ldr	r3, [pc, #40]	@ (80118d0 <getSoundData+0x190>)
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d005      	beq.n	80118bc <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 80118b0:	4b08      	ldr	r3, [pc, #32]	@ (80118d4 <getSoundData+0x194>)
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	b25b      	sxtb	r3, r3
 80118b6:	0018      	movs	r0, r3
 80118b8:	f7ff ff06 	bl	80116c8 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 80118bc:	2301      	movs	r3, #1
}
 80118be:	0018      	movs	r0, r3
 80118c0:	46bd      	mov	sp, r7
 80118c2:	b006      	add	sp, #24
 80118c4:	bdb0      	pop	{r4, r5, r7, pc}
 80118c6:	46c0      	nop			@ (mov r8, r8)
 80118c8:	200012b2 	.word	0x200012b2
 80118cc:	200012b5 	.word	0x200012b5
 80118d0:	200012b4 	.word	0x200012b4
 80118d4:	20001d04 	.word	0x20001d04
 80118d8:	20001d40 	.word	0x20001d40
 80118dc:	20001d08 	.word	0x20001d08
 80118e0:	20001d0c 	.word	0x20001d0c
 80118e4:	20001d10 	.word	0x20001d10
 80118e8:	20001d28 	.word	0x20001d28
 80118ec:	200012bc 	.word	0x200012bc
 80118f0:	3b5c7333 	.word	0x3b5c7333

080118f4 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	60f8      	str	r0, [r7, #12]
 80118fc:	60b9      	str	r1, [r7, #8]
 80118fe:	607a      	str	r2, [r7, #4]
 8011900:	001a      	movs	r2, r3
 8011902:	1cfb      	adds	r3, r7, #3
 8011904:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8011906:	4b07      	ldr	r3, [pc, #28]	@ (8011924 <soundInit+0x30>)
 8011908:	68ba      	ldr	r2, [r7, #8]
 801190a:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 801190c:	4b06      	ldr	r3, [pc, #24]	@ (8011928 <soundInit+0x34>)
 801190e:	687a      	ldr	r2, [r7, #4]
 8011910:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8011912:	4b06      	ldr	r3, [pc, #24]	@ (801192c <soundInit+0x38>)
 8011914:	68fa      	ldr	r2, [r7, #12]
 8011916:	601a      	str	r2, [r3, #0]
//    DMA_Channel_IRQn = DMAChIRQn;
    return true;
 8011918:	2301      	movs	r3, #1
}
 801191a:	0018      	movs	r0, r3
 801191c:	46bd      	mov	sp, r7
 801191e:	b004      	add	sp, #16
 8011920:	bd80      	pop	{r7, pc}
 8011922:	46c0      	nop			@ (mov r8, r8)
 8011924:	20001cfc 	.word	0x20001cfc
 8011928:	20001cf8 	.word	0x20001cf8
 801192c:	20001d00 	.word	0x20001d00

08011930 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8011934:	4b02      	ldr	r3, [pc, #8]	@ (8011940 <clearMaximumAmplitude+0x10>)
 8011936:	2200      	movs	r2, #0
 8011938:	601a      	str	r2, [r3, #0]
}
 801193a:	46c0      	nop			@ (mov r8, r8)
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}
 8011940:	200012bc 	.word	0x200012bc

08011944 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8011948:	4b08      	ldr	r3, [pc, #32]	@ (801196c <startMicSettlingPeriod+0x28>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	2200      	movs	r2, #0
 8011950:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8011952:	4b06      	ldr	r3, [pc, #24]	@ (801196c <startMicSettlingPeriod+0x28>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	0018      	movs	r0, r3
 8011958:	f00b f8d6 	bl	801cb08 <HAL_TIM_Base_Start>
 801195c:	1e03      	subs	r3, r0, #0
 801195e:	d001      	beq.n	8011964 <startMicSettlingPeriod+0x20>
    {
        return false;
 8011960:	2300      	movs	r3, #0
 8011962:	e000      	b.n	8011966 <startMicSettlingPeriod+0x22>
    }
    return true;
 8011964:	2301      	movs	r3, #1
}
 8011966:	0018      	movs	r0, r3
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	20001cf8 	.word	0x20001cf8

08011970 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8011976:	4b0e      	ldr	r3, [pc, #56]	@ (80119b0 <micSettlingComplete+0x40>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	691b      	ldr	r3, [r3, #16]
 801197e:	2201      	movs	r2, #1
 8011980:	401a      	ands	r2, r3
 8011982:	1dfb      	adds	r3, r7, #7
 8011984:	3a01      	subs	r2, #1
 8011986:	4251      	negs	r1, r2
 8011988:	414a      	adcs	r2, r1
 801198a:	701a      	strb	r2, [r3, #0]
    if (complete)
 801198c:	1dfb      	adds	r3, r7, #7
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d007      	beq.n	80119a4 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8011994:	4b06      	ldr	r3, [pc, #24]	@ (80119b0 <micSettlingComplete+0x40>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	0018      	movs	r0, r3
 801199a:	f00b f8ff 	bl	801cb9c <HAL_TIM_Base_Stop>
      DataReady = true;
 801199e:	4b05      	ldr	r3, [pc, #20]	@ (80119b4 <micSettlingComplete+0x44>)
 80119a0:	2201      	movs	r2, #1
 80119a2:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 80119a4:	1dfb      	adds	r3, r7, #7
 80119a6:	781b      	ldrb	r3, [r3, #0]
}
 80119a8:	0018      	movs	r0, r3
 80119aa:	46bd      	mov	sp, r7
 80119ac:	b002      	add	sp, #8
 80119ae:	bd80      	pop	{r7, pc}
 80119b0:	20001cf8 	.word	0x20001cf8
 80119b4:	200012b1 	.word	0x200012b1

080119b8 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
 80119be:	0002      	movs	r2, r0
 80119c0:	1dfb      	adds	r3, r7, #7
 80119c2:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 80119c4:	4b29      	ldr	r3, [pc, #164]	@ (8011a6c <enableMicrophone+0xb4>)
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	b2db      	uxtb	r3, r3
 80119ca:	1dfa      	adds	r2, r7, #7
 80119cc:	7812      	ldrb	r2, [r2, #0]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d101      	bne.n	80119d6 <enableMicrophone+0x1e>
    {
        return true;
 80119d2:	2301      	movs	r3, #1
 80119d4:	e045      	b.n	8011a62 <enableMicrophone+0xaa>
    }
    if (bEnable)
 80119d6:	1dfb      	adds	r3, r7, #7
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d025      	beq.n	8011a2a <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 80119de:	f7ff ffb1 	bl	8011944 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 80119e2:	4b23      	ldr	r3, [pc, #140]	@ (8011a70 <enableMicrophone+0xb8>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	2280      	movs	r2, #128	@ 0x80
 80119e8:	0092      	lsls	r2, r2, #2
 80119ea:	4922      	ldr	r1, [pc, #136]	@ (8011a74 <enableMicrophone+0xbc>)
 80119ec:	0018      	movs	r0, r3
 80119ee:	f007 faed 	bl	8018fcc <HAL_I2S_Receive_DMA>
 80119f2:	1e03      	subs	r3, r0, #0
 80119f4:	d001      	beq.n	80119fa <enableMicrophone+0x42>
        {
            return false;
 80119f6:	2300      	movs	r3, #0
 80119f8:	e033      	b.n	8011a62 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 80119fa:	f7ff ff99 	bl	8011930 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 80119fe:	4b1e      	ldr	r3, [pc, #120]	@ (8011a78 <enableMicrophone+0xc0>)
 8011a00:	2200      	movs	r2, #0
 8011a02:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8011a04:	4b1d      	ldr	r3, [pc, #116]	@ (8011a7c <enableMicrophone+0xc4>)
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	b25b      	sxtb	r3, r3
 8011a0a:	0018      	movs	r0, r3
 8011a0c:	f7ff fe5c 	bl	80116c8 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8011a10:	4b1b      	ldr	r3, [pc, #108]	@ (8011a80 <enableMicrophone+0xc8>)
 8011a12:	2201      	movs	r2, #1
 8011a14:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8011a16:	4b15      	ldr	r3, [pc, #84]	@ (8011a6c <enableMicrophone+0xb4>)
 8011a18:	2201      	movs	r2, #1
 8011a1a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011a1c:	4b19      	ldr	r3, [pc, #100]	@ (8011a84 <enableMicrophone+0xcc>)
 8011a1e:	2200      	movs	r2, #0
 8011a20:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011a22:	4b19      	ldr	r3, [pc, #100]	@ (8011a88 <enableMicrophone+0xd0>)
 8011a24:	2200      	movs	r2, #0
 8011a26:	701a      	strb	r2, [r3, #0]
 8011a28:	e01a      	b.n	8011a60 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011a2a:	4b14      	ldr	r3, [pc, #80]	@ (8011a7c <enableMicrophone+0xc4>)
 8011a2c:	781b      	ldrb	r3, [r3, #0]
 8011a2e:	b25b      	sxtb	r3, r3
 8011a30:	0018      	movs	r0, r3
 8011a32:	f7ff fe63 	bl	80116fc <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8011a36:	4b12      	ldr	r3, [pc, #72]	@ (8011a80 <enableMicrophone+0xc8>)
 8011a38:	2200      	movs	r2, #0
 8011a3a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011a3c:	4b11      	ldr	r3, [pc, #68]	@ (8011a84 <enableMicrophone+0xcc>)
 8011a3e:	2200      	movs	r2, #0
 8011a40:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011a42:	4b11      	ldr	r3, [pc, #68]	@ (8011a88 <enableMicrophone+0xd0>)
 8011a44:	2200      	movs	r2, #0
 8011a46:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8011a48:	4b09      	ldr	r3, [pc, #36]	@ (8011a70 <enableMicrophone+0xb8>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	0018      	movs	r0, r3
 8011a4e:	f007 fb7f 	bl	8019150 <HAL_I2S_DMAStop>
 8011a52:	1e03      	subs	r3, r0, #0
 8011a54:	d001      	beq.n	8011a5a <enableMicrophone+0xa2>
        {
            return false;
 8011a56:	2300      	movs	r3, #0
 8011a58:	e003      	b.n	8011a62 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8011a5a:	4b04      	ldr	r3, [pc, #16]	@ (8011a6c <enableMicrophone+0xb4>)
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8011a60:	2301      	movs	r3, #1
}
 8011a62:	0018      	movs	r0, r3
 8011a64:	46bd      	mov	sp, r7
 8011a66:	b002      	add	sp, #8
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	46c0      	nop			@ (mov r8, r8)
 8011a6c:	200012b2 	.word	0x200012b2
 8011a70:	20001cfc 	.word	0x20001cfc
 8011a74:	200012f8 	.word	0x200012f8
 8011a78:	200012b8 	.word	0x200012b8
 8011a7c:	20001d04 	.word	0x20001d04
 8011a80:	200012b4 	.word	0x200012b4
 8011a84:	200012b3 	.word	0x200012b3
 8011a88:	200012b5 	.word	0x200012b5

08011a8c <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8011a90:	4b0c      	ldr	r3, [pc, #48]	@ (8011ac4 <startSPLcalculation+0x38>)
 8011a92:	781b      	ldrb	r3, [r3, #0]
 8011a94:	b2db      	uxtb	r3, r3
 8011a96:	2201      	movs	r2, #1
 8011a98:	4053      	eors	r3, r2
 8011a9a:	b2db      	uxtb	r3, r3
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d001      	beq.n	8011aa4 <startSPLcalculation+0x18>
    {
        return false;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	e00c      	b.n	8011abe <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8011aa4:	4b08      	ldr	r3, [pc, #32]	@ (8011ac8 <startSPLcalculation+0x3c>)
 8011aa6:	781b      	ldrb	r3, [r3, #0]
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d001      	beq.n	8011ab2 <startSPLcalculation+0x26>
    {
        return true;
 8011aae:	2301      	movs	r3, #1
 8011ab0:	e005      	b.n	8011abe <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8011ab2:	f000 fb65 	bl	8012180 <resetSPLstate>
    SPLcalcEnabled = true;
 8011ab6:	4b04      	ldr	r3, [pc, #16]	@ (8011ac8 <startSPLcalculation+0x3c>)
 8011ab8:	2201      	movs	r2, #1
 8011aba:	701a      	strb	r2, [r3, #0]
    return true;
 8011abc:	2301      	movs	r3, #1
}
 8011abe:	0018      	movs	r0, r3
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}
 8011ac4:	200012b2 	.word	0x200012b2
 8011ac8:	200012b3 	.word	0x200012b3

08011acc <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b082      	sub	sp, #8
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011ad4:	4b05      	ldr	r3, [pc, #20]	@ (8011aec <HAL_I2S_RxHalfCpltCallback+0x20>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	687a      	ldr	r2, [r7, #4]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d102      	bne.n	8011ae4 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8011ade:	2000      	movs	r0, #0
 8011ae0:	f000 f81a 	bl	8011b18 <processHalfDMAbuffer>
  }
}
 8011ae4:	46c0      	nop			@ (mov r8, r8)
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	b002      	add	sp, #8
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	20001cfc 	.word	0x20001cfc

08011af0 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011af8:	4b06      	ldr	r3, [pc, #24]	@ (8011b14 <HAL_I2S_RxCpltCallback+0x24>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	429a      	cmp	r2, r3
 8011b00:	d104      	bne.n	8011b0c <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8011b02:	2380      	movs	r3, #128	@ 0x80
 8011b04:	009b      	lsls	r3, r3, #2
 8011b06:	0018      	movs	r0, r3
 8011b08:	f000 f806 	bl	8011b18 <processHalfDMAbuffer>
  }
}
 8011b0c:	46c0      	nop			@ (mov r8, r8)
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	b002      	add	sp, #8
 8011b12:	bd80      	pop	{r7, pc}
 8011b14:	20001cfc 	.word	0x20001cfc

08011b18 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	005a      	lsls	r2, r3, #1
 8011b24:	4b15      	ldr	r3, [pc, #84]	@ (8011b7c <processHalfDMAbuffer+0x64>)
 8011b26:	18d3      	adds	r3, r2, r3
 8011b28:	4a15      	ldr	r2, [pc, #84]	@ (8011b80 <processHalfDMAbuffer+0x68>)
 8011b2a:	2180      	movs	r1, #128	@ 0x80
 8011b2c:	0089      	lsls	r1, r1, #2
 8011b2e:	0018      	movs	r0, r3
 8011b30:	f000 fd37 	bl	80125a2 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8011b34:	4b13      	ldr	r3, [pc, #76]	@ (8011b84 <processHalfDMAbuffer+0x6c>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	425a      	negs	r2, r3
 8011b3a:	4153      	adcs	r3, r2
 8011b3c:	b2da      	uxtb	r2, r3
 8011b3e:	4b11      	ldr	r3, [pc, #68]	@ (8011b84 <processHalfDMAbuffer+0x6c>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	2109      	movs	r1, #9
 8011b44:	4299      	cmp	r1, r3
 8011b46:	419b      	sbcs	r3, r3
 8011b48:	425b      	negs	r3, r3
 8011b4a:	b2db      	uxtb	r3, r3
 8011b4c:	480c      	ldr	r0, [pc, #48]	@ (8011b80 <processHalfDMAbuffer+0x68>)
 8011b4e:	2180      	movs	r1, #128	@ 0x80
 8011b50:	f000 fb48 	bl	80121e4 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8011b54:	4b0b      	ldr	r3, [pc, #44]	@ (8011b84 <processHalfDMAbuffer+0x6c>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	2b09      	cmp	r3, #9
 8011b5a:	d804      	bhi.n	8011b66 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8011b5c:	4b09      	ldr	r3, [pc, #36]	@ (8011b84 <processHalfDMAbuffer+0x6c>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	1c5a      	adds	r2, r3, #1
 8011b62:	4b08      	ldr	r3, [pc, #32]	@ (8011b84 <processHalfDMAbuffer+0x6c>)
 8011b64:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8011b66:	4b08      	ldr	r3, [pc, #32]	@ (8011b88 <processHalfDMAbuffer+0x70>)
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d001      	beq.n	8011b74 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8011b70:	f000 f828 	bl	8011bc4 <calculateSPLQ31>
    }
}
 8011b74:	46c0      	nop			@ (mov r8, r8)
 8011b76:	46bd      	mov	sp, r7
 8011b78:	b002      	add	sp, #8
 8011b7a:	bd80      	pop	{r7, pc}
 8011b7c:	200012f8 	.word	0x200012f8
 8011b80:	20001af8 	.word	0x20001af8
 8011b84:	200012b8 	.word	0x200012b8
 8011b88:	200012b3 	.word	0x200012b3

08011b8c <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011b94:	4b08      	ldr	r3, [pc, #32]	@ (8011bb8 <HAL_I2S_ErrorCallback+0x2c>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	687a      	ldr	r2, [r7, #4]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d107      	bne.n	8011bae <HAL_I2S_ErrorCallback+0x22>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8011b9e:	4a07      	ldr	r2, [pc, #28]	@ (8011bbc <HAL_I2S_ErrorCallback+0x30>)
 8011ba0:	233c      	movs	r3, #60	@ 0x3c
 8011ba2:	33ff      	adds	r3, #255	@ 0xff
 8011ba4:	0019      	movs	r1, r3
 8011ba6:	4b06      	ldr	r3, [pc, #24]	@ (8011bc0 <HAL_I2S_ErrorCallback+0x34>)
 8011ba8:	0018      	movs	r0, r3
 8011baa:	f002 f9d3 	bl	8013f54 <errorHandler>
  }
}
 8011bae:	46c0      	nop			@ (mov r8, r8)
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	b002      	add	sp, #8
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	46c0      	nop			@ (mov r8, r8)
 8011bb8:	20001cfc 	.word	0x20001cfc
 8011bbc:	0802d784 	.word	0x0802d784
 8011bc0:	0802e3d8 	.word	0x0802e3d8

08011bc4 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8011bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bc6:	b0b3      	sub	sp, #204	@ 0xcc
 8011bc8:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8011bca:	4ae2      	ldr	r2, [pc, #904]	@ (8011f54 <calculateSPLQ31+0x390>)
 8011bcc:	2338      	movs	r3, #56	@ 0x38
 8011bce:	2030      	movs	r0, #48	@ 0x30
 8011bd0:	181b      	adds	r3, r3, r0
 8011bd2:	19d9      	adds	r1, r3, r7
 8011bd4:	2334      	movs	r3, #52	@ 0x34
 8011bd6:	181b      	adds	r3, r3, r0
 8011bd8:	19d8      	adds	r0, r3, r7
 8011bda:	2380      	movs	r3, #128	@ 0x80
 8011bdc:	f000 fc36 	bl	801244c <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8011be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	da00      	bge.n	8011be8 <calculateSPLQ31+0x24>
 8011be6:	3301      	adds	r3, #1
 8011be8:	105b      	asrs	r3, r3, #1
 8011bea:	001a      	movs	r2, r3
 8011bec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	da00      	bge.n	8011bf4 <calculateSPLQ31+0x30>
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	105b      	asrs	r3, r3, #1
 8011bf6:	18d3      	adds	r3, r2, r3
 8011bf8:	2188      	movs	r1, #136	@ 0x88
 8011bfa:	187a      	adds	r2, r7, r1
 8011bfc:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8011bfe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011c00:	187b      	adds	r3, r7, r1
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	1ad3      	subs	r3, r2, r3
 8011c06:	3304      	adds	r3, #4
 8011c08:	2284      	movs	r2, #132	@ 0x84
 8011c0a:	18b9      	adds	r1, r7, r2
 8011c0c:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8011c0e:	18bb      	adds	r3, r7, r2
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	4ad1      	ldr	r2, [pc, #836]	@ (8011f58 <calculateSPLQ31+0x394>)
 8011c14:	0019      	movs	r1, r3
 8011c16:	0010      	movs	r0, r2
 8011c18:	f000 fc58 	bl	80124cc <getPo2factor>
 8011c1c:	0003      	movs	r3, r0
 8011c1e:	2280      	movs	r2, #128	@ 0x80
 8011c20:	18ba      	adds	r2, r7, r2
 8011c22:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8011c24:	2300      	movs	r3, #0
 8011c26:	2284      	movs	r2, #132	@ 0x84
 8011c28:	2130      	movs	r1, #48	@ 0x30
 8011c2a:	1852      	adds	r2, r2, r1
 8011c2c:	19d2      	adds	r2, r2, r7
 8011c2e:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011c30:	2300      	movs	r3, #0
 8011c32:	2280      	movs	r2, #128	@ 0x80
 8011c34:	1852      	adds	r2, r2, r1
 8011c36:	19d2      	adds	r2, r2, r7
 8011c38:	6013      	str	r3, [r2, #0]
 8011c3a:	e032      	b.n	8011ca2 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8011c3c:	4ac5      	ldr	r2, [pc, #788]	@ (8011f54 <calculateSPLQ31+0x390>)
 8011c3e:	2680      	movs	r6, #128	@ 0x80
 8011c40:	2330      	movs	r3, #48	@ 0x30
 8011c42:	18f1      	adds	r1, r6, r3
 8011c44:	19cb      	adds	r3, r1, r7
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	009b      	lsls	r3, r3, #2
 8011c4a:	589a      	ldr	r2, [r3, r2]
 8011c4c:	2188      	movs	r1, #136	@ 0x88
 8011c4e:	1879      	adds	r1, r7, r1
 8011c50:	680b      	ldr	r3, [r1, #0]
 8011c52:	1ad2      	subs	r2, r2, r3
 8011c54:	2180      	movs	r1, #128	@ 0x80
 8011c56:	1879      	adds	r1, r7, r1
 8011c58:	680b      	ldr	r3, [r1, #0]
 8011c5a:	409a      	lsls	r2, r3
 8011c5c:	0011      	movs	r1, r2
 8011c5e:	4abf      	ldr	r2, [pc, #764]	@ (8011f5c <calculateSPLQ31+0x398>)
 8011c60:	2084      	movs	r0, #132	@ 0x84
 8011c62:	2330      	movs	r3, #48	@ 0x30
 8011c64:	18c3      	adds	r3, r0, r3
 8011c66:	19db      	adds	r3, r3, r7
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	009b      	lsls	r3, r3, #2
 8011c6c:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8011c6e:	2230      	movs	r2, #48	@ 0x30
 8011c70:	1883      	adds	r3, r0, r2
 8011c72:	19db      	adds	r3, r3, r7
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	3301      	adds	r3, #1
 8011c78:	49b8      	ldr	r1, [pc, #736]	@ (8011f5c <calculateSPLQ31+0x398>)
 8011c7a:	009a      	lsls	r2, r3, #2
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	5053      	str	r3, [r2, r1]
        count += 2;
 8011c80:	2230      	movs	r2, #48	@ 0x30
 8011c82:	1883      	adds	r3, r0, r2
 8011c84:	19db      	adds	r3, r3, r7
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	3302      	adds	r3, #2
 8011c8a:	0011      	movs	r1, r2
 8011c8c:	1882      	adds	r2, r0, r2
 8011c8e:	19d2      	adds	r2, r2, r7
 8011c90:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011c92:	000a      	movs	r2, r1
 8011c94:	18b3      	adds	r3, r6, r2
 8011c96:	19db      	adds	r3, r3, r7
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	18b2      	adds	r2, r6, r2
 8011c9e:	19d2      	adds	r2, r2, r7
 8011ca0:	6013      	str	r3, [r2, #0]
 8011ca2:	2380      	movs	r3, #128	@ 0x80
 8011ca4:	2630      	movs	r6, #48	@ 0x30
 8011ca6:	199b      	adds	r3, r3, r6
 8011ca8:	19db      	adds	r3, r3, r7
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	2b7f      	cmp	r3, #127	@ 0x7f
 8011cae:	d9c5      	bls.n	8011c3c <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8011cb0:	4bab      	ldr	r3, [pc, #684]	@ (8011f60 <calculateSPLQ31+0x39c>)
 8011cb2:	6818      	ldr	r0, [r3, #0]
 8011cb4:	49a9      	ldr	r1, [pc, #676]	@ (8011f5c <calculateSPLQ31+0x398>)
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	2200      	movs	r2, #0
 8011cba:	f011 fff9 	bl	8023cb0 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8011cbe:	4aa9      	ldr	r2, [pc, #676]	@ (8011f64 <calculateSPLQ31+0x3a0>)
 8011cc0:	2338      	movs	r3, #56	@ 0x38
 8011cc2:	199b      	adds	r3, r3, r6
 8011cc4:	19d9      	adds	r1, r3, r7
 8011cc6:	2334      	movs	r3, #52	@ 0x34
 8011cc8:	199b      	adds	r3, r3, r6
 8011cca:	19d8      	adds	r0, r3, r7
 8011ccc:	237e      	movs	r3, #126	@ 0x7e
 8011cce:	f000 fbbd 	bl	801244c <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8011cd2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011cd4:	2380      	movs	r3, #128	@ 0x80
 8011cd6:	061b      	lsls	r3, r3, #24
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d101      	bne.n	8011ce0 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8011cdc:	4b9e      	ldr	r3, [pc, #632]	@ (8011f58 <calculateSPLQ31+0x394>)
 8011cde:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8011ce0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011ce2:	2380      	movs	r3, #128	@ 0x80
 8011ce4:	061b      	lsls	r3, r3, #24
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d101      	bne.n	8011cee <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8011cea:	4b9b      	ldr	r3, [pc, #620]	@ (8011f58 <calculateSPLQ31+0x394>)
 8011cec:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8011cee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011cf0:	17da      	asrs	r2, r3, #31
 8011cf2:	189b      	adds	r3, r3, r2
 8011cf4:	4053      	eors	r3, r2
 8011cf6:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8011cf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011cfa:	17da      	asrs	r2, r3, #31
 8011cfc:	189b      	adds	r3, r3, r2
 8011cfe:	4053      	eors	r3, r2
 8011d00:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8011d02:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011d04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011d06:	429a      	cmp	r2, r3
 8011d08:	dd01      	ble.n	8011d0e <calculateSPLQ31+0x14a>
    {
        max = min;
 8011d0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8011d0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011d10:	3304      	adds	r3, #4
 8011d12:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8011d14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011d16:	4a90      	ldr	r2, [pc, #576]	@ (8011f58 <calculateSPLQ31+0x394>)
 8011d18:	0019      	movs	r1, r3
 8011d1a:	0010      	movs	r0, r2
 8011d1c:	f000 fbd6 	bl	80124cc <getPo2factor>
 8011d20:	0003      	movs	r3, r0
 8011d22:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8011d24:	2302      	movs	r3, #2
 8011d26:	22ac      	movs	r2, #172	@ 0xac
 8011d28:	18ba      	adds	r2, r7, r2
 8011d2a:	6013      	str	r3, [r2, #0]
 8011d2c:	e012      	b.n	8011d54 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8011d2e:	4a8b      	ldr	r2, [pc, #556]	@ (8011f5c <calculateSPLQ31+0x398>)
 8011d30:	20ac      	movs	r0, #172	@ 0xac
 8011d32:	183b      	adds	r3, r7, r0
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	009b      	lsls	r3, r3, #2
 8011d38:	589a      	ldr	r2, [r3, r2]
 8011d3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011d3c:	409a      	lsls	r2, r3
 8011d3e:	0011      	movs	r1, r2
 8011d40:	4a86      	ldr	r2, [pc, #536]	@ (8011f5c <calculateSPLQ31+0x398>)
 8011d42:	183b      	adds	r3, r7, r0
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	009b      	lsls	r3, r3, #2
 8011d48:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8011d4a:	183b      	adds	r3, r7, r0
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	3301      	adds	r3, #1
 8011d50:	183a      	adds	r2, r7, r0
 8011d52:	6013      	str	r3, [r2, #0]
 8011d54:	23ac      	movs	r3, #172	@ 0xac
 8011d56:	18fb      	adds	r3, r7, r3
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8011d5c:	d9e7      	bls.n	8011d2e <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8011d5e:	4b7d      	ldr	r3, [pc, #500]	@ (8011f54 <calculateSPLQ31+0x390>)
 8011d60:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8011d62:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8011d64:	4b7d      	ldr	r3, [pc, #500]	@ (8011f5c <calculateSPLQ31+0x398>)
 8011d66:	2240      	movs	r2, #64	@ 0x40
 8011d68:	0018      	movs	r0, r3
 8011d6a:	f012 fd4b 	bl	8024804 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8011d6e:	2330      	movs	r3, #48	@ 0x30
 8011d70:	18fb      	adds	r3, r7, r3
 8011d72:	0018      	movs	r0, r3
 8011d74:	2330      	movs	r3, #48	@ 0x30
 8011d76:	001a      	movs	r2, r3
 8011d78:	2100      	movs	r1, #0
 8011d7a:	f014 fb75 	bl	8026468 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8011d7e:	2200      	movs	r2, #0
 8011d80:	2300      	movs	r3, #0
 8011d82:	21a0      	movs	r1, #160	@ 0xa0
 8011d84:	1879      	adds	r1, r7, r1
 8011d86:	600a      	str	r2, [r1, #0]
 8011d88:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	229c      	movs	r2, #156	@ 0x9c
 8011d8e:	18ba      	adds	r2, r7, r2
 8011d90:	6013      	str	r3, [r2, #0]
 8011d92:	e05b      	b.n	8011e4c <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8011d94:	269c      	movs	r6, #156	@ 0x9c
 8011d96:	19bb      	adds	r3, r7, r6
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	009a      	lsls	r2, r3, #2
 8011d9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011d9e:	189b      	adds	r3, r3, r2
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	613b      	str	r3, [r7, #16]
 8011da4:	17db      	asrs	r3, r3, #31
 8011da6:	617b      	str	r3, [r7, #20]
 8011da8:	4b6f      	ldr	r3, [pc, #444]	@ (8011f68 <calculateSPLQ31+0x3a4>)
 8011daa:	681a      	ldr	r2, [r3, #0]
 8011dac:	19bb      	adds	r3, r7, r6
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	005b      	lsls	r3, r3, #1
 8011db2:	18d3      	adds	r3, r2, r3
 8011db4:	881b      	ldrh	r3, [r3, #0]
 8011db6:	60bb      	str	r3, [r7, #8]
 8011db8:	2300      	movs	r3, #0
 8011dba:	60fb      	str	r3, [r7, #12]
 8011dbc:	68ba      	ldr	r2, [r7, #8]
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	6938      	ldr	r0, [r7, #16]
 8011dc2:	6979      	ldr	r1, [r7, #20]
 8011dc4:	f7ee fbfc 	bl	80005c0 <__aeabi_lmul>
 8011dc8:	0002      	movs	r2, r0
 8011dca:	000b      	movs	r3, r1
 8011dcc:	0010      	movs	r0, r2
 8011dce:	0019      	movs	r1, r3
 8011dd0:	23a0      	movs	r3, #160	@ 0xa0
 8011dd2:	18fa      	adds	r2, r7, r3
 8011dd4:	6853      	ldr	r3, [r2, #4]
 8011dd6:	6812      	ldr	r2, [r2, #0]
 8011dd8:	1812      	adds	r2, r2, r0
 8011dda:	414b      	adcs	r3, r1
 8011ddc:	21a0      	movs	r1, #160	@ 0xa0
 8011dde:	1879      	adds	r1, r7, r1
 8011de0:	600a      	str	r2, [r1, #0]
 8011de2:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8011de4:	4b61      	ldr	r3, [pc, #388]	@ (8011f6c <calculateSPLQ31+0x3a8>)
 8011de6:	681a      	ldr	r2, [r3, #0]
 8011de8:	19bb      	adds	r3, r7, r6
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	18d3      	adds	r3, r2, r3
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	2b06      	cmp	r3, #6
 8011df2:	d025      	beq.n	8011e40 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8011df4:	4b5d      	ldr	r3, [pc, #372]	@ (8011f6c <calculateSPLQ31+0x3a8>)
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	19bb      	adds	r3, r7, r6
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	18d3      	adds	r3, r2, r3
 8011dfe:	781b      	ldrb	r3, [r3, #0]
 8011e00:	2230      	movs	r2, #48	@ 0x30
 8011e02:	18ba      	adds	r2, r7, r2
 8011e04:	00db      	lsls	r3, r3, #3
 8011e06:	18d3      	adds	r3, r2, r3
 8011e08:	6818      	ldr	r0, [r3, #0]
 8011e0a:	6859      	ldr	r1, [r3, #4]
 8011e0c:	19bb      	adds	r3, r7, r6
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	009a      	lsls	r2, r3, #2
 8011e12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011e14:	189b      	adds	r3, r3, r2
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	603b      	str	r3, [r7, #0]
 8011e1a:	17db      	asrs	r3, r3, #31
 8011e1c:	607b      	str	r3, [r7, #4]
 8011e1e:	4b53      	ldr	r3, [pc, #332]	@ (8011f6c <calculateSPLQ31+0x3a8>)
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	19be      	adds	r6, r7, r6
 8011e24:	6833      	ldr	r3, [r6, #0]
 8011e26:	18d3      	adds	r3, r2, r3
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	001e      	movs	r6, r3
 8011e2c:	683a      	ldr	r2, [r7, #0]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	1880      	adds	r0, r0, r2
 8011e32:	4159      	adcs	r1, r3
 8011e34:	2330      	movs	r3, #48	@ 0x30
 8011e36:	18fa      	adds	r2, r7, r3
 8011e38:	00f3      	lsls	r3, r6, #3
 8011e3a:	18d3      	adds	r3, r2, r3
 8011e3c:	6018      	str	r0, [r3, #0]
 8011e3e:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011e40:	229c      	movs	r2, #156	@ 0x9c
 8011e42:	18bb      	adds	r3, r7, r2
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	3301      	adds	r3, #1
 8011e48:	18ba      	adds	r2, r7, r2
 8011e4a:	6013      	str	r3, [r2, #0]
 8011e4c:	239c      	movs	r3, #156	@ 0x9c
 8011e4e:	18fb      	adds	r3, r7, r3
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	2b3f      	cmp	r3, #63	@ 0x3f
 8011e54:	d99e      	bls.n	8011d94 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8011e56:	2380      	movs	r3, #128	@ 0x80
 8011e58:	18fb      	adds	r3, r7, r3
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	005b      	lsls	r3, r3, #1
 8011e5e:	001a      	movs	r2, r3
 8011e60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011e62:	005b      	lsls	r3, r3, #1
 8011e64:	18d3      	adds	r3, r2, r3
 8011e66:	3b22      	subs	r3, #34	@ 0x22
 8011e68:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8011e6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e6c:	17da      	asrs	r2, r3, #31
 8011e6e:	189b      	adds	r3, r3, r2
 8011e70:	4053      	eors	r3, r2
 8011e72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8011e74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	da62      	bge.n	8011f40 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8011e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e7c:	3b20      	subs	r3, #32
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	db05      	blt.n	8011e8e <calculateSPLQ31+0x2ca>
 8011e82:	22a0      	movs	r2, #160	@ 0xa0
 8011e84:	18ba      	adds	r2, r7, r2
 8011e86:	6812      	ldr	r2, [r2, #0]
 8011e88:	409a      	lsls	r2, r3
 8011e8a:	627a      	str	r2, [r7, #36]	@ 0x24
 8011e8c:	e010      	b.n	8011eb0 <calculateSPLQ31+0x2ec>
 8011e8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e90:	2220      	movs	r2, #32
 8011e92:	1ad3      	subs	r3, r2, r3
 8011e94:	22a0      	movs	r2, #160	@ 0xa0
 8011e96:	18ba      	adds	r2, r7, r2
 8011e98:	6812      	ldr	r2, [r2, #0]
 8011e9a:	40da      	lsrs	r2, r3
 8011e9c:	0013      	movs	r3, r2
 8011e9e:	22a4      	movs	r2, #164	@ 0xa4
 8011ea0:	18ba      	adds	r2, r7, r2
 8011ea2:	6811      	ldr	r1, [r2, #0]
 8011ea4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011ea6:	4091      	lsls	r1, r2
 8011ea8:	6279      	str	r1, [r7, #36]	@ 0x24
 8011eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011eac:	431a      	orrs	r2, r3
 8011eae:	627a      	str	r2, [r7, #36]	@ 0x24
 8011eb0:	21a0      	movs	r1, #160	@ 0xa0
 8011eb2:	187b      	adds	r3, r7, r1
 8011eb4:	681a      	ldr	r2, [r3, #0]
 8011eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011eb8:	409a      	lsls	r2, r3
 8011eba:	623a      	str	r2, [r7, #32]
 8011ebc:	6a3b      	ldr	r3, [r7, #32]
 8011ebe:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8011ec0:	187a      	adds	r2, r7, r1
 8011ec2:	6013      	str	r3, [r2, #0]
 8011ec4:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	2298      	movs	r2, #152	@ 0x98
 8011eca:	18ba      	adds	r2, r7, r2
 8011ecc:	6013      	str	r3, [r2, #0]
 8011ece:	e031      	b.n	8011f34 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8011ed0:	2330      	movs	r3, #48	@ 0x30
 8011ed2:	18fa      	adds	r2, r7, r3
 8011ed4:	2398      	movs	r3, #152	@ 0x98
 8011ed6:	18fb      	adds	r3, r7, r3
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	00db      	lsls	r3, r3, #3
 8011edc:	18d3      	adds	r3, r2, r3
 8011ede:	681a      	ldr	r2, [r3, #0]
 8011ee0:	685b      	ldr	r3, [r3, #4]
 8011ee2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011ee4:	3920      	subs	r1, #32
 8011ee6:	2900      	cmp	r1, #0
 8011ee8:	db03      	blt.n	8011ef2 <calculateSPLQ31+0x32e>
 8011eea:	0010      	movs	r0, r2
 8011eec:	4088      	lsls	r0, r1
 8011eee:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011ef0:	e00c      	b.n	8011f0c <calculateSPLQ31+0x348>
 8011ef2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011ef4:	2020      	movs	r0, #32
 8011ef6:	1a41      	subs	r1, r0, r1
 8011ef8:	0010      	movs	r0, r2
 8011efa:	40c8      	lsrs	r0, r1
 8011efc:	0001      	movs	r1, r0
 8011efe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011f00:	001c      	movs	r4, r3
 8011f02:	4084      	lsls	r4, r0
 8011f04:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8011f06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011f08:	4308      	orrs	r0, r1
 8011f0a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011f0c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011f0e:	0013      	movs	r3, r2
 8011f10:	408b      	lsls	r3, r1
 8011f12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f14:	2330      	movs	r3, #48	@ 0x30
 8011f16:	18fa      	adds	r2, r7, r3
 8011f18:	2098      	movs	r0, #152	@ 0x98
 8011f1a:	183b      	adds	r3, r7, r0
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	00db      	lsls	r3, r3, #3
 8011f20:	18d3      	adds	r3, r2, r3
 8011f22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f26:	6019      	str	r1, [r3, #0]
 8011f28:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011f2a:	183b      	adds	r3, r7, r0
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	3301      	adds	r3, #1
 8011f30:	183a      	adds	r2, r7, r0
 8011f32:	6013      	str	r3, [r2, #0]
 8011f34:	2398      	movs	r3, #152	@ 0x98
 8011f36:	18fb      	adds	r3, r7, r3
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	2b05      	cmp	r3, #5
 8011f3c:	d9c8      	bls.n	8011ed0 <calculateSPLQ31+0x30c>
 8011f3e:	e06b      	b.n	8012018 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8011f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f42:	3b20      	subs	r3, #32
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	db13      	blt.n	8011f70 <calculateSPLQ31+0x3ac>
 8011f48:	22a4      	movs	r2, #164	@ 0xa4
 8011f4a:	18ba      	adds	r2, r7, r2
 8011f4c:	6812      	ldr	r2, [r2, #0]
 8011f4e:	40da      	lsrs	r2, r3
 8011f50:	61ba      	str	r2, [r7, #24]
 8011f52:	e01e      	b.n	8011f92 <calculateSPLQ31+0x3ce>
 8011f54:	20001af8 	.word	0x20001af8
 8011f58:	7fffffff 	.word	0x7fffffff
 8011f5c:	20001d44 	.word	0x20001d44
 8011f60:	200000d4 	.word	0x200000d4
 8011f64:	20001d4c 	.word	0x20001d4c
 8011f68:	200000d8 	.word	0x200000d8
 8011f6c:	200000e4 	.word	0x200000e4
 8011f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f72:	2220      	movs	r2, #32
 8011f74:	1ad3      	subs	r3, r2, r3
 8011f76:	22a4      	movs	r2, #164	@ 0xa4
 8011f78:	18ba      	adds	r2, r7, r2
 8011f7a:	6812      	ldr	r2, [r2, #0]
 8011f7c:	409a      	lsls	r2, r3
 8011f7e:	0013      	movs	r3, r2
 8011f80:	22a0      	movs	r2, #160	@ 0xa0
 8011f82:	18ba      	adds	r2, r7, r2
 8011f84:	6811      	ldr	r1, [r2, #0]
 8011f86:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011f88:	40d1      	lsrs	r1, r2
 8011f8a:	61b9      	str	r1, [r7, #24]
 8011f8c:	69ba      	ldr	r2, [r7, #24]
 8011f8e:	431a      	orrs	r2, r3
 8011f90:	61ba      	str	r2, [r7, #24]
 8011f92:	23a4      	movs	r3, #164	@ 0xa4
 8011f94:	18fb      	adds	r3, r7, r3
 8011f96:	681a      	ldr	r2, [r3, #0]
 8011f98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f9a:	40da      	lsrs	r2, r3
 8011f9c:	61fa      	str	r2, [r7, #28]
 8011f9e:	69ba      	ldr	r2, [r7, #24]
 8011fa0:	69fb      	ldr	r3, [r7, #28]
 8011fa2:	21a0      	movs	r1, #160	@ 0xa0
 8011fa4:	1879      	adds	r1, r7, r1
 8011fa6:	600a      	str	r2, [r1, #0]
 8011fa8:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011faa:	2300      	movs	r3, #0
 8011fac:	2294      	movs	r2, #148	@ 0x94
 8011fae:	18ba      	adds	r2, r7, r2
 8011fb0:	6013      	str	r3, [r2, #0]
 8011fb2:	e02c      	b.n	801200e <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8011fb4:	2330      	movs	r3, #48	@ 0x30
 8011fb6:	18fa      	adds	r2, r7, r3
 8011fb8:	2394      	movs	r3, #148	@ 0x94
 8011fba:	18fb      	adds	r3, r7, r3
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	00db      	lsls	r3, r3, #3
 8011fc0:	18d3      	adds	r3, r2, r3
 8011fc2:	681a      	ldr	r2, [r3, #0]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fc8:	3920      	subs	r1, #32
 8011fca:	2900      	cmp	r1, #0
 8011fcc:	db03      	blt.n	8011fd6 <calculateSPLQ31+0x412>
 8011fce:	0018      	movs	r0, r3
 8011fd0:	40c8      	lsrs	r0, r1
 8011fd2:	0004      	movs	r4, r0
 8011fd4:	e00a      	b.n	8011fec <calculateSPLQ31+0x428>
 8011fd6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fd8:	2020      	movs	r0, #32
 8011fda:	1a41      	subs	r1, r0, r1
 8011fdc:	0018      	movs	r0, r3
 8011fde:	4088      	lsls	r0, r1
 8011fe0:	0001      	movs	r1, r0
 8011fe2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011fe4:	0016      	movs	r6, r2
 8011fe6:	40c6      	lsrs	r6, r0
 8011fe8:	0034      	movs	r4, r6
 8011fea:	430c      	orrs	r4, r1
 8011fec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fee:	40cb      	lsrs	r3, r1
 8011ff0:	001d      	movs	r5, r3
 8011ff2:	2330      	movs	r3, #48	@ 0x30
 8011ff4:	18fa      	adds	r2, r7, r3
 8011ff6:	2194      	movs	r1, #148	@ 0x94
 8011ff8:	187b      	adds	r3, r7, r1
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	00db      	lsls	r3, r3, #3
 8011ffe:	18d3      	adds	r3, r2, r3
 8012000:	601c      	str	r4, [r3, #0]
 8012002:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8012004:	187b      	adds	r3, r7, r1
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	3301      	adds	r3, #1
 801200a:	187a      	adds	r2, r7, r1
 801200c:	6013      	str	r3, [r2, #0]
 801200e:	2394      	movs	r3, #148	@ 0x94
 8012010:	18fb      	adds	r3, r7, r3
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	2b05      	cmp	r3, #5
 8012016:	d9cd      	bls.n	8011fb4 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8012018:	230f      	movs	r3, #15
 801201a:	425d      	negs	r5, r3
 801201c:	2305      	movs	r3, #5
 801201e:	425e      	negs	r6, r3
 8012020:	4b4a      	ldr	r3, [pc, #296]	@ (801214c <calculateSPLQ31+0x588>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	681a      	ldr	r2, [r3, #0]
 8012026:	4b4a      	ldr	r3, [pc, #296]	@ (8012150 <calculateSPLQ31+0x58c>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	21a0      	movs	r1, #160	@ 0xa0
 801202e:	1879      	adds	r1, r7, r1
 8012030:	6808      	ldr	r0, [r1, #0]
 8012032:	6849      	ldr	r1, [r1, #4]
 8012034:	4c47      	ldr	r4, [pc, #284]	@ (8012154 <calculateSPLQ31+0x590>)
 8012036:	9403      	str	r4, [sp, #12]
 8012038:	4c47      	ldr	r4, [pc, #284]	@ (8012158 <calculateSPLQ31+0x594>)
 801203a:	9402      	str	r4, [sp, #8]
 801203c:	9301      	str	r3, [sp, #4]
 801203e:	9200      	str	r2, [sp, #0]
 8012040:	0033      	movs	r3, r6
 8012042:	002a      	movs	r2, r5
 8012044:	f000 fa86 	bl	8012554 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012048:	2300      	movs	r3, #0
 801204a:	2290      	movs	r2, #144	@ 0x90
 801204c:	18ba      	adds	r2, r7, r2
 801204e:	6013      	str	r3, [r2, #0]
 8012050:	e026      	b.n	80120a0 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8012052:	2330      	movs	r3, #48	@ 0x30
 8012054:	18fa      	adds	r2, r7, r3
 8012056:	2490      	movs	r4, #144	@ 0x90
 8012058:	193b      	adds	r3, r7, r4
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	00db      	lsls	r3, r3, #3
 801205e:	18d3      	adds	r3, r2, r3
 8012060:	6818      	ldr	r0, [r3, #0]
 8012062:	6859      	ldr	r1, [r3, #4]
 8012064:	230f      	movs	r3, #15
 8012066:	425d      	negs	r5, r3
 8012068:	2305      	movs	r3, #5
 801206a:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 801206c:	193b      	adds	r3, r7, r4
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	009a      	lsls	r2, r3, #2
 8012072:	4b3a      	ldr	r3, [pc, #232]	@ (801215c <calculateSPLQ31+0x598>)
 8012074:	18d3      	adds	r3, r2, r3
 8012076:	193a      	adds	r2, r7, r4
 8012078:	6812      	ldr	r2, [r2, #0]
 801207a:	0094      	lsls	r4, r2, #2
 801207c:	4a38      	ldr	r2, [pc, #224]	@ (8012160 <calculateSPLQ31+0x59c>)
 801207e:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8012080:	9203      	str	r2, [sp, #12]
 8012082:	9302      	str	r3, [sp, #8]
 8012084:	2300      	movs	r3, #0
 8012086:	9301      	str	r3, [sp, #4]
 8012088:	2300      	movs	r3, #0
 801208a:	9300      	str	r3, [sp, #0]
 801208c:	0033      	movs	r3, r6
 801208e:	002a      	movs	r2, r5
 8012090:	f000 fa60 	bl	8012554 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012094:	2490      	movs	r4, #144	@ 0x90
 8012096:	193b      	adds	r3, r7, r4
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	3301      	adds	r3, #1
 801209c:	193a      	adds	r2, r7, r4
 801209e:	6013      	str	r3, [r2, #0]
 80120a0:	2390      	movs	r3, #144	@ 0x90
 80120a2:	18fb      	adds	r3, r7, r3
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	2b05      	cmp	r3, #5
 80120a8:	d9d3      	bls.n	8012052 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 80120aa:	4b2b      	ldr	r3, [pc, #172]	@ (8012158 <calculateSPLQ31+0x594>)
 80120ac:	681a      	ldr	r2, [r3, #0]
 80120ae:	4b2d      	ldr	r3, [pc, #180]	@ (8012164 <calculateSPLQ31+0x5a0>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	18d2      	adds	r2, r2, r3
 80120b4:	4b2b      	ldr	r3, [pc, #172]	@ (8012164 <calculateSPLQ31+0x5a0>)
 80120b6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 80120b8:	4b26      	ldr	r3, [pc, #152]	@ (8012154 <calculateSPLQ31+0x590>)
 80120ba:	681a      	ldr	r2, [r3, #0]
 80120bc:	4b2a      	ldr	r3, [pc, #168]	@ (8012168 <calculateSPLQ31+0x5a4>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	18d2      	adds	r2, r2, r3
 80120c2:	4b29      	ldr	r3, [pc, #164]	@ (8012168 <calculateSPLQ31+0x5a4>)
 80120c4:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80120c6:	2300      	movs	r3, #0
 80120c8:	228c      	movs	r2, #140	@ 0x8c
 80120ca:	18ba      	adds	r2, r7, r2
 80120cc:	6013      	str	r3, [r2, #0]
 80120ce:	e025      	b.n	801211c <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 80120d0:	4b22      	ldr	r3, [pc, #136]	@ (801215c <calculateSPLQ31+0x598>)
 80120d2:	208c      	movs	r0, #140	@ 0x8c
 80120d4:	183a      	adds	r2, r7, r0
 80120d6:	6812      	ldr	r2, [r2, #0]
 80120d8:	0092      	lsls	r2, r2, #2
 80120da:	58d2      	ldr	r2, [r2, r3]
 80120dc:	4b23      	ldr	r3, [pc, #140]	@ (801216c <calculateSPLQ31+0x5a8>)
 80120de:	1839      	adds	r1, r7, r0
 80120e0:	6809      	ldr	r1, [r1, #0]
 80120e2:	0089      	lsls	r1, r1, #2
 80120e4:	58cb      	ldr	r3, [r1, r3]
 80120e6:	18d1      	adds	r1, r2, r3
 80120e8:	4b20      	ldr	r3, [pc, #128]	@ (801216c <calculateSPLQ31+0x5a8>)
 80120ea:	183a      	adds	r2, r7, r0
 80120ec:	6812      	ldr	r2, [r2, #0]
 80120ee:	0092      	lsls	r2, r2, #2
 80120f0:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 80120f2:	4b1b      	ldr	r3, [pc, #108]	@ (8012160 <calculateSPLQ31+0x59c>)
 80120f4:	183a      	adds	r2, r7, r0
 80120f6:	6812      	ldr	r2, [r2, #0]
 80120f8:	0092      	lsls	r2, r2, #2
 80120fa:	58d2      	ldr	r2, [r2, r3]
 80120fc:	4b1c      	ldr	r3, [pc, #112]	@ (8012170 <calculateSPLQ31+0x5ac>)
 80120fe:	1839      	adds	r1, r7, r0
 8012100:	6809      	ldr	r1, [r1, #0]
 8012102:	0089      	lsls	r1, r1, #2
 8012104:	58cb      	ldr	r3, [r1, r3]
 8012106:	18d1      	adds	r1, r2, r3
 8012108:	4b19      	ldr	r3, [pc, #100]	@ (8012170 <calculateSPLQ31+0x5ac>)
 801210a:	183a      	adds	r2, r7, r0
 801210c:	6812      	ldr	r2, [r2, #0]
 801210e:	0092      	lsls	r2, r2, #2
 8012110:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8012112:	183b      	adds	r3, r7, r0
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	3301      	adds	r3, #1
 8012118:	183a      	adds	r2, r7, r0
 801211a:	6013      	str	r3, [r2, #0]
 801211c:	238c      	movs	r3, #140	@ 0x8c
 801211e:	18fb      	adds	r3, r7, r3
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	2b05      	cmp	r3, #5
 8012124:	d9d4      	bls.n	80120d0 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 8012126:	4b13      	ldr	r3, [pc, #76]	@ (8012174 <calculateSPLQ31+0x5b0>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	1c5a      	adds	r2, r3, #1
 801212c:	4b11      	ldr	r3, [pc, #68]	@ (8012174 <calculateSPLQ31+0x5b0>)
 801212e:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 8012130:	4b10      	ldr	r3, [pc, #64]	@ (8012174 <calculateSPLQ31+0x5b0>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	2b0f      	cmp	r3, #15
 8012136:	d905      	bls.n	8012144 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8012138:	4b0f      	ldr	r3, [pc, #60]	@ (8012178 <calculateSPLQ31+0x5b4>)
 801213a:	2201      	movs	r2, #1
 801213c:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 801213e:	4b0f      	ldr	r3, [pc, #60]	@ (801217c <calculateSPLQ31+0x5b8>)
 8012140:	2200      	movs	r2, #0
 8012142:	701a      	strb	r2, [r3, #0]
    }
}
 8012144:	46c0      	nop			@ (mov r8, r8)
 8012146:	46bd      	mov	sp, r7
 8012148:	b02f      	add	sp, #188	@ 0xbc
 801214a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801214c:	200000dc 	.word	0x200000dc
 8012150:	200000e0 	.word	0x200000e0
 8012154:	200012c4 	.word	0x200012c4
 8012158:	200012c0 	.word	0x200012c0
 801215c:	200012c8 	.word	0x200012c8
 8012160:	200012e0 	.word	0x200012e0
 8012164:	20001d08 	.word	0x20001d08
 8012168:	20001d0c 	.word	0x20001d0c
 801216c:	20001d10 	.word	0x20001d10
 8012170:	20001d28 	.word	0x20001d28
 8012174:	20001d40 	.word	0x20001d40
 8012178:	200012b5 	.word	0x200012b5
 801217c:	200012b3 	.word	0x200012b3

08012180 <resetSPLstate>:

static void resetSPLstate(void)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 8012186:	4b11      	ldr	r3, [pc, #68]	@ (80121cc <resetSPLstate+0x4c>)
 8012188:	2200      	movs	r2, #0
 801218a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 801218c:	4b10      	ldr	r3, [pc, #64]	@ (80121d0 <resetSPLstate+0x50>)
 801218e:	2200      	movs	r2, #0
 8012190:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 8012192:	4b10      	ldr	r3, [pc, #64]	@ (80121d4 <resetSPLstate+0x54>)
 8012194:	2200      	movs	r2, #0
 8012196:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012198:	2300      	movs	r3, #0
 801219a:	607b      	str	r3, [r7, #4]
 801219c:	e00c      	b.n	80121b8 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 801219e:	4b0e      	ldr	r3, [pc, #56]	@ (80121d8 <resetSPLstate+0x58>)
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	0092      	lsls	r2, r2, #2
 80121a4:	2100      	movs	r1, #0
 80121a6:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 80121a8:	4b0c      	ldr	r3, [pc, #48]	@ (80121dc <resetSPLstate+0x5c>)
 80121aa:	687a      	ldr	r2, [r7, #4]
 80121ac:	0092      	lsls	r2, r2, #2
 80121ae:	2100      	movs	r1, #0
 80121b0:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	3301      	adds	r3, #1
 80121b6:	607b      	str	r3, [r7, #4]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2b05      	cmp	r3, #5
 80121bc:	d9ef      	bls.n	801219e <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 80121be:	4b08      	ldr	r3, [pc, #32]	@ (80121e0 <resetSPLstate+0x60>)
 80121c0:	2200      	movs	r2, #0
 80121c2:	701a      	strb	r2, [r3, #0]
}
 80121c4:	46c0      	nop			@ (mov r8, r8)
 80121c6:	46bd      	mov	sp, r7
 80121c8:	b002      	add	sp, #8
 80121ca:	bd80      	pop	{r7, pc}
 80121cc:	20001d08 	.word	0x20001d08
 80121d0:	20001d0c 	.word	0x20001d0c
 80121d4:	20001d40 	.word	0x20001d40
 80121d8:	20001d10 	.word	0x20001d10
 80121dc:	20001d28 	.word	0x20001d28
 80121e0:	200012b5 	.word	0x200012b5

080121e4 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 80121e4:	b5b0      	push	{r4, r5, r7, lr}
 80121e6:	b090      	sub	sp, #64	@ 0x40
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	60f8      	str	r0, [r7, #12]
 80121ec:	60b9      	str	r1, [r7, #8]
 80121ee:	0019      	movs	r1, r3
 80121f0:	1dfb      	adds	r3, r7, #7
 80121f2:	701a      	strb	r2, [r3, #0]
 80121f4:	1dbb      	adds	r3, r7, #6
 80121f6:	1c0a      	adds	r2, r1, #0
 80121f8:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 80121fa:	1dfb      	adds	r3, r7, #7
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d005      	beq.n	801220e <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 8012202:	4b3b      	ldr	r3, [pc, #236]	@ (80122f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012204:	2200      	movs	r2, #0
 8012206:	601a      	str	r2, [r3, #0]
        lastData = 0;
 8012208:	4b3a      	ldr	r3, [pc, #232]	@ (80122f4 <getFilteredMaxAmplitudeQ31+0x110>)
 801220a:	2200      	movs	r2, #0
 801220c:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 801220e:	2300      	movs	r3, #0
 8012210:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 8012212:	2300      	movs	r3, #0
 8012214:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 8012216:	2305      	movs	r3, #5
 8012218:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 801221a:	2300      	movs	r3, #0
 801221c:	637b      	str	r3, [r7, #52]	@ 0x34
 801221e:	e040      	b.n	80122a2 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 8012220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012222:	009b      	lsls	r3, r3, #2
 8012224:	68fa      	ldr	r2, [r7, #12]
 8012226:	18d3      	adds	r3, r2, r3
 8012228:	681a      	ldr	r2, [r3, #0]
 801222a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801222c:	409a      	lsls	r2, r3
 801222e:	0013      	movs	r3, r2
 8012230:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 8012232:	4b30      	ldr	r3, [pc, #192]	@ (80122f4 <getFilteredMaxAmplitudeQ31+0x110>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	425a      	negs	r2, r3
 8012238:	4b2e      	ldr	r3, [pc, #184]	@ (80122f4 <getFilteredMaxAmplitudeQ31+0x110>)
 801223a:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 801223c:	2418      	movs	r4, #24
 801223e:	193a      	adds	r2, r7, r4
 8012240:	492c      	ldr	r1, [pc, #176]	@ (80122f4 <getFilteredMaxAmplitudeQ31+0x110>)
 8012242:	231c      	movs	r3, #28
 8012244:	18f8      	adds	r0, r7, r3
 8012246:	2301      	movs	r3, #1
 8012248:	f012 fb34 	bl	80248b4 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 801224c:	2514      	movs	r5, #20
 801224e:	197a      	adds	r2, r7, r5
 8012250:	1939      	adds	r1, r7, r4
 8012252:	4829      	ldr	r0, [pc, #164]	@ (80122f8 <getFilteredMaxAmplitudeQ31+0x114>)
 8012254:	2301      	movs	r3, #1
 8012256:	f012 fafb 	bl	8024850 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 801225a:	2410      	movs	r4, #16
 801225c:	193a      	adds	r2, r7, r4
 801225e:	4924      	ldr	r1, [pc, #144]	@ (80122f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012260:	4826      	ldr	r0, [pc, #152]	@ (80122fc <getFilteredMaxAmplitudeQ31+0x118>)
 8012262:	2301      	movs	r3, #1
 8012264:	f012 faf4 	bl	8024850 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8012268:	4a21      	ldr	r2, [pc, #132]	@ (80122f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 801226a:	1939      	adds	r1, r7, r4
 801226c:	1978      	adds	r0, r7, r5
 801226e:	2301      	movs	r3, #1
 8012270:	f012 fb20 	bl	80248b4 <arm_add_q31>

        lastData = fx;
 8012274:	69fa      	ldr	r2, [r7, #28]
 8012276:	4b1f      	ldr	r3, [pc, #124]	@ (80122f4 <getFilteredMaxAmplitudeQ31+0x110>)
 8012278:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 801227a:	4b1d      	ldr	r3, [pc, #116]	@ (80122f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012280:	429a      	cmp	r2, r3
 8012282:	da03      	bge.n	801228c <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 8012284:	4b1a      	ldr	r3, [pc, #104]	@ (80122f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801228a:	e007      	b.n	801229c <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 801228c:	4b18      	ldr	r3, [pc, #96]	@ (80122f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012292:	429a      	cmp	r2, r3
 8012294:	dd02      	ble.n	801229c <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 8012296:	4b16      	ldr	r3, [pc, #88]	@ (80122f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 801229c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801229e:	3301      	adds	r3, #1
 80122a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80122a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d3ba      	bcc.n	8012220 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 80122aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122ac:	17da      	asrs	r2, r3, #31
 80122ae:	189b      	adds	r3, r3, r2
 80122b0:	4053      	eors	r3, r2
 80122b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 80122b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 80122b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122bc:	4293      	cmp	r3, r2
 80122be:	d200      	bcs.n	80122c2 <getFilteredMaxAmplitudeQ31+0xde>
 80122c0:	0013      	movs	r3, r2
 80122c2:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 80122c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122c8:	40da      	lsrs	r2, r3
 80122ca:	0013      	movs	r3, r2
 80122cc:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 80122ce:	1dbb      	adds	r3, r7, #6
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d007      	beq.n	80122e6 <getFilteredMaxAmplitudeQ31+0x102>
 80122d6:	4b0a      	ldr	r3, [pc, #40]	@ (8012300 <getFilteredMaxAmplitudeQ31+0x11c>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	6a3a      	ldr	r2, [r7, #32]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d902      	bls.n	80122e6 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 80122e0:	4b07      	ldr	r3, [pc, #28]	@ (8012300 <getFilteredMaxAmplitudeQ31+0x11c>)
 80122e2:	6a3a      	ldr	r2, [r7, #32]
 80122e4:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 80122e6:	6a3b      	ldr	r3, [r7, #32]
}
 80122e8:	0018      	movs	r0, r3
 80122ea:	46bd      	mov	sp, r7
 80122ec:	b010      	add	sp, #64	@ 0x40
 80122ee:	bdb0      	pop	{r4, r5, r7, pc}
 80122f0:	20002144 	.word	0x20002144
 80122f4:	20002148 	.word	0x20002148
 80122f8:	0802e3d0 	.word	0x0802e3d0
 80122fc:	0802e3d4 	.word	0x0802e3d4
 8012300:	200012bc 	.word	0x200012bc

08012304 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b086      	sub	sp, #24
 8012308:	af00      	add	r7, sp, #0
 801230a:	60f8      	str	r0, [r7, #12]
 801230c:	60b9      	str	r1, [r7, #8]
 801230e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 8012310:	4913      	ldr	r1, [pc, #76]	@ (8012360 <floatToIntAndFrac2dp+0x5c>)
 8012312:	68f8      	ldr	r0, [r7, #12]
 8012314:	f7ee fe94 	bl	8001040 <__aeabi_fmul>
 8012318:	1c03      	adds	r3, r0, #0
 801231a:	1c18      	adds	r0, r3, #0
 801231c:	f016 ffa2 	bl	8029264 <roundf>
 8012320:	1c03      	adds	r3, r0, #0
 8012322:	1c18      	adds	r0, r3, #0
 8012324:	f7ee f97a 	bl	800061c <__aeabi_f2uiz>
 8012328:	0003      	movs	r3, r0
 801232a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	2164      	movs	r1, #100	@ 0x64
 8012330:	0018      	movs	r0, r3
 8012332:	f7ed ff37 	bl	80001a4 <__udivsi3>
 8012336:	0003      	movs	r3, r0
 8012338:	001a      	movs	r2, r3
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	b2da      	uxtb	r2, r3
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	b2db      	uxtb	r3, r3
 8012348:	2164      	movs	r1, #100	@ 0x64
 801234a:	434b      	muls	r3, r1
 801234c:	b2db      	uxtb	r3, r3
 801234e:	1ad3      	subs	r3, r2, r3
 8012350:	b2da      	uxtb	r2, r3
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	701a      	strb	r2, [r3, #0]
}
 8012356:	46c0      	nop			@ (mov r8, r8)
 8012358:	46bd      	mov	sp, r7
 801235a:	b006      	add	sp, #24
 801235c:	bd80      	pop	{r7, pc}
 801235e:	46c0      	nop			@ (mov r8, r8)
 8012360:	42c80000 	.word	0x42c80000

08012364 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b086      	sub	sp, #24
 8012368:	af00      	add	r7, sp, #0
 801236a:	60f8      	str	r0, [r7, #12]
 801236c:	60b9      	str	r1, [r7, #8]
 801236e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 8012370:	4914      	ldr	r1, [pc, #80]	@ (80123c4 <floatToIntAndFrac1dp+0x60>)
 8012372:	68f8      	ldr	r0, [r7, #12]
 8012374:	f7ee fe64 	bl	8001040 <__aeabi_fmul>
 8012378:	1c03      	adds	r3, r0, #0
 801237a:	1c18      	adds	r0, r3, #0
 801237c:	f016 ff72 	bl	8029264 <roundf>
 8012380:	1c03      	adds	r3, r0, #0
 8012382:	1c18      	adds	r0, r3, #0
 8012384:	f7ee f94a 	bl	800061c <__aeabi_f2uiz>
 8012388:	0003      	movs	r3, r0
 801238a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	210a      	movs	r1, #10
 8012390:	0018      	movs	r0, r3
 8012392:	f7ed ff07 	bl	80001a4 <__udivsi3>
 8012396:	0003      	movs	r3, r0
 8012398:	001a      	movs	r2, r3
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	b2da      	uxtb	r2, r3
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	b2db      	uxtb	r3, r3
 80123a8:	1c19      	adds	r1, r3, #0
 80123aa:	0089      	lsls	r1, r1, #2
 80123ac:	18cb      	adds	r3, r1, r3
 80123ae:	18db      	adds	r3, r3, r3
 80123b0:	b2db      	uxtb	r3, r3
 80123b2:	1ad3      	subs	r3, r2, r3
 80123b4:	b2da      	uxtb	r2, r3
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	701a      	strb	r2, [r3, #0]
}
 80123ba:	46c0      	nop			@ (mov r8, r8)
 80123bc:	46bd      	mov	sp, r7
 80123be:	b006      	add	sp, #24
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	46c0      	nop			@ (mov r8, r8)
 80123c4:	41200000 	.word	0x41200000

080123c8 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 80123c8:	b590      	push	{r4, r7, lr}
 80123ca:	b087      	sub	sp, #28
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	60f8      	str	r0, [r7, #12]
 80123d0:	60b9      	str	r1, [r7, #8]
 80123d2:	607a      	str	r2, [r7, #4]
 80123d4:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f7ef fa26 	bl	8001828 <__aeabi_i2f>
 80123dc:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80123de:	6838      	ldr	r0, [r7, #0]
 80123e0:	f7ef fa22 	bl	8001828 <__aeabi_i2f>
 80123e4:	1c03      	adds	r3, r0, #0
 80123e6:	4918      	ldr	r1, [pc, #96]	@ (8012448 <sumToIntAverage+0x80>)
 80123e8:	1c18      	adds	r0, r3, #0
 80123ea:	f7ee fc5b 	bl	8000ca4 <__aeabi_fdiv>
 80123ee:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80123f0:	1c19      	adds	r1, r3, #0
 80123f2:	1c20      	adds	r0, r4, #0
 80123f4:	f7ee fa64 	bl	80008c0 <__aeabi_fadd>
 80123f8:	1c03      	adds	r3, r0, #0
 80123fa:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80123fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80123fe:	f7ef fa63 	bl	80018c8 <__aeabi_ui2f>
 8012402:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8012404:	1c19      	adds	r1, r3, #0
 8012406:	1c20      	adds	r0, r4, #0
 8012408:	f7ee fc4c 	bl	8000ca4 <__aeabi_fdiv>
 801240c:	1c03      	adds	r3, r0, #0
 801240e:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 8012410:	2300      	movs	r3, #0
 8012412:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 8012414:	68ba      	ldr	r2, [r7, #8]
 8012416:	2310      	movs	r3, #16
 8012418:	18f9      	adds	r1, r7, r3
 801241a:	697b      	ldr	r3, [r7, #20]
 801241c:	1c18      	adds	r0, r3, #0
 801241e:	f7ff ffa1 	bl	8012364 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 8012422:	693b      	ldr	r3, [r7, #16]
 8012424:	2bff      	cmp	r3, #255	@ 0xff
 8012426:	d906      	bls.n	8012436 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	22ff      	movs	r2, #255	@ 0xff
 801242c:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	2209      	movs	r2, #9
 8012432:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 8012434:	e003      	b.n	801243e <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	b2da      	uxtb	r2, r3
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	701a      	strb	r2, [r3, #0]
}
 801243e:	46c0      	nop			@ (mov r8, r8)
 8012440:	46bd      	mov	sp, r7
 8012442:	b007      	add	sp, #28
 8012444:	bd90      	pop	{r4, r7, pc}
 8012446:	46c0      	nop			@ (mov r8, r8)
 8012448:	41200000 	.word	0x41200000

0801244c <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b086      	sub	sp, #24
 8012450:	af00      	add	r7, sp, #0
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	607a      	str	r2, [r7, #4]
 8012458:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	2280      	movs	r2, #128	@ 0x80
 801245e:	0612      	lsls	r2, r2, #24
 8012460:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	4a18      	ldr	r2, [pc, #96]	@ (80124c8 <findMinMax+0x7c>)
 8012466:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8012468:	2300      	movs	r3, #0
 801246a:	617b      	str	r3, [r7, #20]
 801246c:	e022      	b.n	80124b4 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	009b      	lsls	r3, r3, #2
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	18d3      	adds	r3, r2, r3
 8012476:	681a      	ldr	r2, [r3, #0]
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	429a      	cmp	r2, r3
 801247e:	da06      	bge.n	801248e <findMinMax+0x42>
        {
            min[0] = array[i];
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	009b      	lsls	r3, r3, #2
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	18d3      	adds	r3, r2, r3
 8012488:	681a      	ldr	r2, [r3, #0]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	009b      	lsls	r3, r3, #2
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	18d3      	adds	r3, r2, r3
 8012496:	681a      	ldr	r2, [r3, #0]
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	429a      	cmp	r2, r3
 801249e:	dd06      	ble.n	80124ae <findMinMax+0x62>
        {
            max[0] = array[i];
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	009b      	lsls	r3, r3, #2
 80124a4:	687a      	ldr	r2, [r7, #4]
 80124a6:	18d3      	adds	r3, r2, r3
 80124a8:	681a      	ldr	r2, [r3, #0]
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	3301      	adds	r3, #1
 80124b2:	617b      	str	r3, [r7, #20]
 80124b4:	697a      	ldr	r2, [r7, #20]
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d3d8      	bcc.n	801246e <findMinMax+0x22>
        }
    }
}
 80124bc:	46c0      	nop			@ (mov r8, r8)
 80124be:	46c0      	nop			@ (mov r8, r8)
 80124c0:	46bd      	mov	sp, r7
 80124c2:	b006      	add	sp, #24
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	46c0      	nop			@ (mov r8, r8)
 80124c8:	7fffffff 	.word	0x7fffffff

080124cc <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b084      	sub	sp, #16
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 80124d6:	2300      	movs	r3, #0
 80124d8:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 80124da:	687a      	ldr	r2, [r7, #4]
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	429a      	cmp	r2, r3
 80124e0:	d302      	bcc.n	80124e8 <getPo2factor+0x1c>
 80124e2:	683b      	ldr	r3, [r7, #0]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d107      	bne.n	80124f8 <getPo2factor+0x2c>
    {
        return 0;
 80124e8:	2300      	movs	r3, #0
 80124ea:	e00d      	b.n	8012508 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	085b      	lsrs	r3, r3, #1
 80124f0:	607b      	str	r3, [r7, #4]
        bitShift++;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	3301      	adds	r3, #1
 80124f6:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 80124f8:	687a      	ldr	r2, [r7, #4]
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d2f5      	bcs.n	80124ec <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	3b01      	subs	r3, #1
 8012504:	60fb      	str	r3, [r7, #12]
    return bitShift;
 8012506:	68fb      	ldr	r3, [r7, #12]
}
 8012508:	0018      	movs	r0, r3
 801250a:	46bd      	mov	sp, r7
 801250c:	b004      	add	sp, #16
 801250e:	bd80      	pop	{r7, pc}

08012510 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b086      	sub	sp, #24
 8012514:	af00      	add	r7, sp, #0
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	607a      	str	r2, [r7, #4]
 801251c:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 801251e:	68f8      	ldr	r0, [r7, #12]
 8012520:	f7ef f9d2 	bl	80018c8 <__aeabi_ui2f>
 8012524:	1c03      	adds	r3, r0, #0
 8012526:	1c19      	adds	r1, r3, #0
 8012528:	68b8      	ldr	r0, [r7, #8]
 801252a:	f7ee fd89 	bl	8001040 <__aeabi_fmul>
 801252e:	1c03      	adds	r3, r0, #0
 8012530:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 8012532:	2300      	movs	r3, #0
 8012534:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 8012536:	683a      	ldr	r2, [r7, #0]
 8012538:	2310      	movs	r3, #16
 801253a:	18f9      	adds	r1, r7, r3
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	1c18      	adds	r0, r3, #0
 8012540:	f7ff fee0 	bl	8012304 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	b29a      	uxth	r2, r3
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	801a      	strh	r2, [r3, #0]
}
 801254c:	46c0      	nop			@ (mov r8, r8)
 801254e:	46bd      	mov	sp, r7
 8012550:	b006      	add	sp, #24
 8012552:	bd80      	pop	{r7, pc}

08012554 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	af00      	add	r7, sp, #0
 801255a:	60b8      	str	r0, [r7, #8]
 801255c:	60f9      	str	r1, [r7, #12]
 801255e:	607a      	str	r2, [r7, #4]
 8012560:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 8012562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012564:	6a3a      	ldr	r2, [r7, #32]
 8012566:	68b8      	ldr	r0, [r7, #8]
 8012568:	68f9      	ldr	r1, [r7, #12]
 801256a:	f7f9 fe41 	bl	800c1f0 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 801256e:	6a3b      	ldr	r3, [r7, #32]
 8012570:	681a      	ldr	r2, [r3, #0]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	18d2      	adds	r2, r2, r3
 8012576:	69bb      	ldr	r3, [r7, #24]
 8012578:	18d2      	adds	r2, r2, r3
 801257a:	6a3b      	ldr	r3, [r7, #32]
 801257c:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 801257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012580:	681a      	ldr	r2, [r3, #0]
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	18d2      	adds	r2, r2, r3
 8012586:	69fb      	ldr	r3, [r7, #28]
 8012588:	18d2      	adds	r2, r2, r3
 801258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801258c:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 801258e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012590:	6a3b      	ldr	r3, [r7, #32]
 8012592:	0011      	movs	r1, r2
 8012594:	0018      	movs	r0, r3
 8012596:	f7f9 febb 	bl	800c310 <correctIntFracNumber>
}
 801259a:	46c0      	nop			@ (mov r8, r8)
 801259c:	46bd      	mov	sp, r7
 801259e:	b004      	add	sp, #16
 80125a0:	bd80      	pop	{r7, pc}

080125a2 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 80125a2:	b580      	push	{r7, lr}
 80125a4:	b086      	sub	sp, #24
 80125a6:	af00      	add	r7, sp, #0
 80125a8:	60f8      	str	r0, [r7, #12]
 80125aa:	60b9      	str	r1, [r7, #8]
 80125ac:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 80125ae:	2300      	movs	r3, #0
 80125b0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80125b2:	2300      	movs	r3, #0
 80125b4:	613b      	str	r3, [r7, #16]
 80125b6:	e019      	b.n	80125ec <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	005b      	lsls	r3, r3, #1
 80125bc:	68fa      	ldr	r2, [r7, #12]
 80125be:	18d3      	adds	r3, r2, r3
 80125c0:	881b      	ldrh	r3, [r3, #0]
 80125c2:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80125c4:	693a      	ldr	r2, [r7, #16]
 80125c6:	3201      	adds	r2, #1
 80125c8:	0052      	lsls	r2, r2, #1
 80125ca:	68f9      	ldr	r1, [r7, #12]
 80125cc:	188a      	adds	r2, r1, r2
 80125ce:	8812      	ldrh	r2, [r2, #0]
 80125d0:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80125d2:	0019      	movs	r1, r3
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	009b      	lsls	r3, r3, #2
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80125dc:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80125de:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	3301      	adds	r3, #1
 80125e4:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	3304      	adds	r3, #4
 80125ea:	613b      	str	r3, [r7, #16]
 80125ec:	693a      	ldr	r2, [r7, #16]
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d3e1      	bcc.n	80125b8 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 80125f4:	46c0      	nop			@ (mov r8, r8)
 80125f6:	46c0      	nop			@ (mov r8, r8)
 80125f8:	46bd      	mov	sp, r7
 80125fa:	b006      	add	sp, #24
 80125fc:	bd80      	pop	{r7, pc}
	...

08012600 <InitDone>:
float batteryCharge = 0.0;
uint8_t batteryChargeMode;
Battery_Status batteryStatus;


void InitDone(){
 8012600:	b580      	push	{r7, lr}
 8012602:	af00      	add	r7, sp, #0
  init = false;
 8012604:	4b02      	ldr	r3, [pc, #8]	@ (8012610 <InitDone+0x10>)
 8012606:	2200      	movs	r2, #0
 8012608:	701a      	strb	r2, [r3, #0]
}
 801260a:	46c0      	nop			@ (mov r8, r8)
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}
 8012610:	200000e8 	.word	0x200000e8

08012614 <batteryChargeCheck>:
  "De Omgevingsmonitor" will refuse to upload data to openSenseMap.org if the battery voltage under load drops below 3.77V with SEN5x attached.
  Without a SEN5x attached the Omgevingsmonitor stops sending to OpenSenseMap at 3.75V
  Above values with standard battery
 */

void batteryChargeCheck(){
 8012614:	b5b0      	push	{r4, r5, r7, lr}
 8012616:	b084      	sub	sp, #16
 8012618:	af04      	add	r7, sp, #16
  batteryCharge = ReadBatteryVoltage();
 801261a:	f7f7 fa47 	bl	8009aac <ReadBatteryVoltage>
 801261e:	1c02      	adds	r2, r0, #0
 8012620:	4b2e      	ldr	r3, [pc, #184]	@ (80126dc <batteryChargeCheck+0xc8>)
 8012622:	601a      	str	r2, [r3, #0]
  Debug("battery: %.02fV, solar: %dmV", batteryCharge, ReadSolarVoltage());
 8012624:	4b2d      	ldr	r3, [pc, #180]	@ (80126dc <batteryChargeCheck+0xc8>)
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	1c18      	adds	r0, r3, #0
 801262a:	f7f1 f933 	bl	8003894 <__aeabi_f2d>
 801262e:	0004      	movs	r4, r0
 8012630:	000d      	movs	r5, r1
 8012632:	f7f7 fa9d 	bl	8009b70 <ReadSolarVoltage>
 8012636:	0003      	movs	r3, r0
 8012638:	0019      	movs	r1, r3
 801263a:	4a29      	ldr	r2, [pc, #164]	@ (80126e0 <batteryChargeCheck+0xcc>)
 801263c:	4b29      	ldr	r3, [pc, #164]	@ (80126e4 <batteryChargeCheck+0xd0>)
 801263e:	9102      	str	r1, [sp, #8]
 8012640:	9400      	str	r4, [sp, #0]
 8012642:	9501      	str	r5, [sp, #4]
 8012644:	0019      	movs	r1, r3
 8012646:	2003      	movs	r0, #3
 8012648:	f001 fb9c 	bl	8013d84 <CreateLine>
#ifdef LARGEBATTERY
  if (batteryCharge < 3.50) {
#else
  if (batteryCharge < 3.75) {
 801264c:	4b23      	ldr	r3, [pc, #140]	@ (80126dc <batteryChargeCheck+0xc8>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	4925      	ldr	r1, [pc, #148]	@ (80126e8 <batteryChargeCheck+0xd4>)
 8012652:	1c18      	adds	r0, r3, #0
 8012654:	f7ed ff6c 	bl	8000530 <__aeabi_fcmplt>
 8012658:	1e03      	subs	r3, r0, #0
 801265a:	d002      	beq.n	8012662 <batteryChargeCheck+0x4e>
#endif
    batteryStatus = BATTERY_CRITICAL;
 801265c:	4b23      	ldr	r3, [pc, #140]	@ (80126ec <batteryChargeCheck+0xd8>)
 801265e:	2200      	movs	r2, #0
 8012660:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.50 && batteryCharge < 3.69) {
#else
  if (batteryCharge >= 3.75 && batteryCharge < 3.85) {
 8012662:	4b1e      	ldr	r3, [pc, #120]	@ (80126dc <batteryChargeCheck+0xc8>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	4920      	ldr	r1, [pc, #128]	@ (80126e8 <batteryChargeCheck+0xd4>)
 8012668:	1c18      	adds	r0, r3, #0
 801266a:	f7ed ff7f 	bl	800056c <__aeabi_fcmpge>
 801266e:	1e03      	subs	r3, r0, #0
 8012670:	d00d      	beq.n	801268e <batteryChargeCheck+0x7a>
 8012672:	4b1a      	ldr	r3, [pc, #104]	@ (80126dc <batteryChargeCheck+0xc8>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	1c18      	adds	r0, r3, #0
 8012678:	f7f1 f90c 	bl	8003894 <__aeabi_f2d>
 801267c:	4a1c      	ldr	r2, [pc, #112]	@ (80126f0 <batteryChargeCheck+0xdc>)
 801267e:	4b1d      	ldr	r3, [pc, #116]	@ (80126f4 <batteryChargeCheck+0xe0>)
 8012680:	f7ed ff1c 	bl	80004bc <__aeabi_dcmplt>
 8012684:	1e03      	subs	r3, r0, #0
 8012686:	d002      	beq.n	801268e <batteryChargeCheck+0x7a>
#endif
    batteryStatus = BATTERY_LOW;
 8012688:	4b18      	ldr	r3, [pc, #96]	@ (80126ec <batteryChargeCheck+0xd8>)
 801268a:	2201      	movs	r2, #1
 801268c:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.69 && batteryCharge < 3.98) {
#else
    if (batteryCharge >= 3.85 && batteryCharge < 4.00) {
 801268e:	4b13      	ldr	r3, [pc, #76]	@ (80126dc <batteryChargeCheck+0xc8>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	1c18      	adds	r0, r3, #0
 8012694:	f7f1 f8fe 	bl	8003894 <__aeabi_f2d>
 8012698:	4a15      	ldr	r2, [pc, #84]	@ (80126f0 <batteryChargeCheck+0xdc>)
 801269a:	4b16      	ldr	r3, [pc, #88]	@ (80126f4 <batteryChargeCheck+0xe0>)
 801269c:	f7ed ff2c 	bl	80004f8 <__aeabi_dcmpge>
 80126a0:	1e03      	subs	r3, r0, #0
 80126a2:	d00b      	beq.n	80126bc <batteryChargeCheck+0xa8>
 80126a4:	4b0d      	ldr	r3, [pc, #52]	@ (80126dc <batteryChargeCheck+0xc8>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	2181      	movs	r1, #129	@ 0x81
 80126aa:	05c9      	lsls	r1, r1, #23
 80126ac:	1c18      	adds	r0, r3, #0
 80126ae:	f7ed ff3f 	bl	8000530 <__aeabi_fcmplt>
 80126b2:	1e03      	subs	r3, r0, #0
 80126b4:	d002      	beq.n	80126bc <batteryChargeCheck+0xa8>
#endif
    batteryStatus = BATTERY_GOOD;
 80126b6:	4b0d      	ldr	r3, [pc, #52]	@ (80126ec <batteryChargeCheck+0xd8>)
 80126b8:	2202      	movs	r2, #2
 80126ba:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.98) {
#else
  if (batteryCharge >= 4.00) {
 80126bc:	4b07      	ldr	r3, [pc, #28]	@ (80126dc <batteryChargeCheck+0xc8>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2181      	movs	r1, #129	@ 0x81
 80126c2:	05c9      	lsls	r1, r1, #23
 80126c4:	1c18      	adds	r0, r3, #0
 80126c6:	f7ed ff51 	bl	800056c <__aeabi_fcmpge>
 80126ca:	1e03      	subs	r3, r0, #0
 80126cc:	d100      	bne.n	80126d0 <batteryChargeCheck+0xbc>
#endif
    batteryStatus = BATTERY_FULL;
  }
}
 80126ce:	e002      	b.n	80126d6 <batteryChargeCheck+0xc2>
    batteryStatus = BATTERY_FULL;
 80126d0:	4b06      	ldr	r3, [pc, #24]	@ (80126ec <batteryChargeCheck+0xd8>)
 80126d2:	2203      	movs	r2, #3
 80126d4:	701a      	strb	r2, [r3, #0]
}
 80126d6:	46c0      	nop			@ (mov r8, r8)
 80126d8:	46bd      	mov	sp, r7
 80126da:	bdb0      	pop	{r4, r5, r7, pc}
 80126dc:	20002158 	.word	0x20002158
 80126e0:	0802d7a4 	.word	0x0802d7a4
 80126e4:	0802d7c4 	.word	0x0802d7c4
 80126e8:	40700000 	.word	0x40700000
 80126ec:	2000215d 	.word	0x2000215d
 80126f0:	cccccccd 	.word	0xcccccccd
 80126f4:	400ecccc 	.word	0x400ecccc

080126f8 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 80126f8:	b5b0      	push	{r4, r5, r7, lr}
 80126fa:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 80126fc:	f7f7 fa38 	bl	8009b70 <ReadSolarVoltage>
 8012700:	0003      	movs	r3, r0
 8012702:	001a      	movs	r2, r3
 8012704:	4b1a      	ldr	r3, [pc, #104]	@ (8012770 <Calculate_LED_ON+0x78>)
 8012706:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 8012708:	4b19      	ldr	r3, [pc, #100]	@ (8012770 <Calculate_LED_ON+0x78>)
 801270a:	881b      	ldrh	r3, [r3, #0]
 801270c:	4a19      	ldr	r2, [pc, #100]	@ (8012774 <Calculate_LED_ON+0x7c>)
 801270e:	4293      	cmp	r3, r2
 8012710:	d802      	bhi.n	8012718 <Calculate_LED_ON+0x20>
    solmV = 2900;
 8012712:	4b17      	ldr	r3, [pc, #92]	@ (8012770 <Calculate_LED_ON+0x78>)
 8012714:	4a18      	ldr	r2, [pc, #96]	@ (8012778 <Calculate_LED_ON+0x80>)
 8012716:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8012718:	4b15      	ldr	r3, [pc, #84]	@ (8012770 <Calculate_LED_ON+0x78>)
 801271a:	881b      	ldrh	r3, [r3, #0]
 801271c:	4a17      	ldr	r2, [pc, #92]	@ (801277c <Calculate_LED_ON+0x84>)
 801271e:	4293      	cmp	r3, r2
 8012720:	d902      	bls.n	8012728 <Calculate_LED_ON+0x30>
    solmV = 4700;
 8012722:	4b13      	ldr	r3, [pc, #76]	@ (8012770 <Calculate_LED_ON+0x78>)
 8012724:	4a15      	ldr	r2, [pc, #84]	@ (801277c <Calculate_LED_ON+0x84>)
 8012726:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8012728:	4b11      	ldr	r3, [pc, #68]	@ (8012770 <Calculate_LED_ON+0x78>)
 801272a:	881b      	ldrh	r3, [r3, #0]
 801272c:	0018      	movs	r0, r3
 801272e:	f7f1 f85f 	bl	80037f0 <__aeabi_i2d>
 8012732:	0004      	movs	r4, r0
 8012734:	000d      	movs	r5, r1
 8012736:	4b0e      	ldr	r3, [pc, #56]	@ (8012770 <Calculate_LED_ON+0x78>)
 8012738:	881b      	ldrh	r3, [r3, #0]
 801273a:	001a      	movs	r2, r3
 801273c:	4b10      	ldr	r3, [pc, #64]	@ (8012780 <Calculate_LED_ON+0x88>)
 801273e:	1a9b      	subs	r3, r3, r2
 8012740:	0018      	movs	r0, r3
 8012742:	f7f1 f855 	bl	80037f0 <__aeabi_i2d>
 8012746:	2200      	movs	r2, #0
 8012748:	4b0e      	ldr	r3, [pc, #56]	@ (8012784 <Calculate_LED_ON+0x8c>)
 801274a:	f7f0 f903 	bl	8002954 <__aeabi_dmul>
 801274e:	0002      	movs	r2, r0
 8012750:	000b      	movs	r3, r1
 8012752:	0020      	movs	r0, r4
 8012754:	0029      	movs	r1, r5
 8012756:	f7ef f8fd 	bl	8001954 <__aeabi_dadd>
 801275a:	0002      	movs	r2, r0
 801275c:	000b      	movs	r3, r1
 801275e:	0010      	movs	r0, r2
 8012760:	0019      	movs	r1, r3
 8012762:	f7ed ff73 	bl	800064c <__aeabi_d2uiz>
 8012766:	0003      	movs	r3, r0
 8012768:	b29b      	uxth	r3, r3
}
 801276a:	0018      	movs	r0, r3
 801276c:	46bd      	mov	sp, r7
 801276e:	bdb0      	pop	{r4, r5, r7, pc}
 8012770:	2000215e 	.word	0x2000215e
 8012774:	00000b53 	.word	0x00000b53
 8012778:	00000b54 	.word	0x00000b54
 801277c:	0000125c 	.word	0x0000125c
 8012780:	00000dee 	.word	0x00000dee
 8012784:	3ff80000 	.word	0x3ff80000

08012788 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8012788:	b590      	push	{r4, r7, lr}
 801278a:	b083      	sub	sp, #12
 801278c:	af00      	add	r7, sp, #0
 801278e:	0004      	movs	r4, r0
 8012790:	0008      	movs	r0, r1
 8012792:	0011      	movs	r1, r2
 8012794:	1dbb      	adds	r3, r7, #6
 8012796:	1c22      	adds	r2, r4, #0
 8012798:	801a      	strh	r2, [r3, #0]
 801279a:	1d3b      	adds	r3, r7, #4
 801279c:	1c02      	adds	r2, r0, #0
 801279e:	801a      	strh	r2, [r3, #0]
 80127a0:	1cbb      	adds	r3, r7, #2
 80127a2:	1c0a      	adds	r2, r1, #0
 80127a4:	801a      	strh	r2, [r3, #0]
  if(init || userToggle){
 80127a6:	4b0d      	ldr	r3, [pc, #52]	@ (80127dc <SetStatusLED+0x54>)
 80127a8:	781b      	ldrb	r3, [r3, #0]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d103      	bne.n	80127b6 <SetStatusLED+0x2e>
 80127ae:	4b0c      	ldr	r3, [pc, #48]	@ (80127e0 <SetStatusLED+0x58>)
 80127b0:	781b      	ldrb	r3, [r3, #0]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d00e      	beq.n	80127d4 <SetStatusLED+0x4c>
    TIM2 -> CCR1 = red;
 80127b6:	2380      	movs	r3, #128	@ 0x80
 80127b8:	05db      	lsls	r3, r3, #23
 80127ba:	1dba      	adds	r2, r7, #6
 80127bc:	8812      	ldrh	r2, [r2, #0]
 80127be:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 80127c0:	2380      	movs	r3, #128	@ 0x80
 80127c2:	05db      	lsls	r3, r3, #23
 80127c4:	1d3a      	adds	r2, r7, #4
 80127c6:	8812      	ldrh	r2, [r2, #0]
 80127c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 80127ca:	2380      	movs	r3, #128	@ 0x80
 80127cc:	05db      	lsls	r3, r3, #23
 80127ce:	1cba      	adds	r2, r7, #2
 80127d0:	8812      	ldrh	r2, [r2, #0]
 80127d2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80127d4:	46c0      	nop			@ (mov r8, r8)
 80127d6:	46bd      	mov	sp, r7
 80127d8:	b003      	add	sp, #12
 80127da:	bd90      	pop	{r4, r7, pc}
 80127dc:	200000e8 	.word	0x200000e8
 80127e0:	2000214e 	.word	0x2000214e

080127e4 <SetDBLED>:

// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 80127e4:	b590      	push	{r4, r7, lr}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	0004      	movs	r4, r0
 80127ec:	0008      	movs	r0, r1
 80127ee:	0011      	movs	r1, r2
 80127f0:	1dfb      	adds	r3, r7, #7
 80127f2:	1c22      	adds	r2, r4, #0
 80127f4:	701a      	strb	r2, [r3, #0]
 80127f6:	1dbb      	adds	r3, r7, #6
 80127f8:	1c02      	adds	r2, r0, #0
 80127fa:	701a      	strb	r2, [r3, #0]
 80127fc:	1d7b      	adds	r3, r7, #5
 80127fe:	1c0a      	adds	r2, r1, #0
 8012800:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(init || userToggle){
 8012802:	4b17      	ldr	r3, [pc, #92]	@ (8012860 <SetDBLED+0x7c>)
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d103      	bne.n	8012812 <SetDBLED+0x2e>
 801280a:	4b16      	ldr	r3, [pc, #88]	@ (8012864 <SetDBLED+0x80>)
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d022      	beq.n	8012858 <SetDBLED+0x74>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8012812:	1dfb      	adds	r3, r7, #7
 8012814:	781b      	ldrb	r3, [r3, #0]
 8012816:	2201      	movs	r2, #1
 8012818:	4053      	eors	r3, r2
 801281a:	b2db      	uxtb	r3, r3
 801281c:	001a      	movs	r2, r3
 801281e:	4b12      	ldr	r3, [pc, #72]	@ (8012868 <SetDBLED+0x84>)
 8012820:	2101      	movs	r1, #1
 8012822:	0018      	movs	r0, r3
 8012824:	f003 fa99 	bl	8015d5a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8012828:	1dbb      	adds	r3, r7, #6
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	2201      	movs	r2, #1
 801282e:	4053      	eors	r3, r2
 8012830:	b2db      	uxtb	r3, r3
 8012832:	001a      	movs	r2, r3
 8012834:	2380      	movs	r3, #128	@ 0x80
 8012836:	005b      	lsls	r3, r3, #1
 8012838:	480b      	ldr	r0, [pc, #44]	@ (8012868 <SetDBLED+0x84>)
 801283a:	0019      	movs	r1, r3
 801283c:	f003 fa8d 	bl	8015d5a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8012840:	1d7b      	adds	r3, r7, #5
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	2201      	movs	r2, #1
 8012846:	4053      	eors	r3, r2
 8012848:	b2db      	uxtb	r3, r3
 801284a:	001a      	movs	r2, r3
 801284c:	2380      	movs	r3, #128	@ 0x80
 801284e:	009b      	lsls	r3, r3, #2
 8012850:	4805      	ldr	r0, [pc, #20]	@ (8012868 <SetDBLED+0x84>)
 8012852:	0019      	movs	r1, r3
 8012854:	f003 fa81 	bl	8015d5a <HAL_GPIO_WritePin>
  }
}
 8012858:	46c0      	nop			@ (mov r8, r8)
 801285a:	46bd      	mov	sp, r7
 801285c:	b003      	add	sp, #12
 801285e:	bd90      	pop	{r4, r7, pc}
 8012860:	200000e8 	.word	0x200000e8
 8012864:	2000214e 	.word	0x2000214e
 8012868:	50000400 	.word	0x50000400

0801286c <SetVocLED>:

// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 801286c:	b590      	push	{r4, r7, lr}
 801286e:	b083      	sub	sp, #12
 8012870:	af00      	add	r7, sp, #0
 8012872:	0004      	movs	r4, r0
 8012874:	0008      	movs	r0, r1
 8012876:	0011      	movs	r1, r2
 8012878:	1dbb      	adds	r3, r7, #6
 801287a:	1c22      	adds	r2, r4, #0
 801287c:	801a      	strh	r2, [r3, #0]
 801287e:	1d3b      	adds	r3, r7, #4
 8012880:	1c02      	adds	r2, r0, #0
 8012882:	801a      	strh	r2, [r3, #0]
 8012884:	1cbb      	adds	r3, r7, #2
 8012886:	1c0a      	adds	r2, r1, #0
 8012888:	801a      	strh	r2, [r3, #0]
  if(init || userToggle){
 801288a:	4b0c      	ldr	r3, [pc, #48]	@ (80128bc <SetVocLED+0x50>)
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d103      	bne.n	801289a <SetVocLED+0x2e>
 8012892:	4b0b      	ldr	r3, [pc, #44]	@ (80128c0 <SetVocLED+0x54>)
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d00b      	beq.n	80128b2 <SetVocLED+0x46>
    TIM3 -> CCR1 = red;
 801289a:	4b0a      	ldr	r3, [pc, #40]	@ (80128c4 <SetVocLED+0x58>)
 801289c:	1dba      	adds	r2, r7, #6
 801289e:	8812      	ldrh	r2, [r2, #0]
 80128a0:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 80128a2:	4b08      	ldr	r3, [pc, #32]	@ (80128c4 <SetVocLED+0x58>)
 80128a4:	1d3a      	adds	r2, r7, #4
 80128a6:	8812      	ldrh	r2, [r2, #0]
 80128a8:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 80128aa:	4b06      	ldr	r3, [pc, #24]	@ (80128c4 <SetVocLED+0x58>)
 80128ac:	1cba      	adds	r2, r7, #2
 80128ae:	8812      	ldrh	r2, [r2, #0]
 80128b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80128b2:	46c0      	nop			@ (mov r8, r8)
 80128b4:	46bd      	mov	sp, r7
 80128b6:	b003      	add	sp, #12
 80128b8:	bd90      	pop	{r4, r7, pc}
 80128ba:	46c0      	nop			@ (mov r8, r8)
 80128bc:	200000e8 	.word	0x200000e8
 80128c0:	2000214e 	.word	0x2000214e
 80128c4:	40000400 	.word	0x40000400

080128c8 <SetMeasurementIndicator>:

void SetMeasurementIndicator(){
 80128c8:	b580      	push	{r7, lr}
 80128ca:	af00      	add	r7, sp, #0
  if(userToggle){
 80128cc:	4b06      	ldr	r3, [pc, #24]	@ (80128e8 <SetMeasurementIndicator+0x20>)
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d006      	beq.n	80128e2 <SetMeasurementIndicator+0x1a>
    TIM2 -> CCR3 = Calculate_LED_ON();
 80128d4:	f7ff ff10 	bl	80126f8 <Calculate_LED_ON>
 80128d8:	0003      	movs	r3, r0
 80128da:	001a      	movs	r2, r3
 80128dc:	2380      	movs	r3, #128	@ 0x80
 80128de:	05db      	lsls	r3, r3, #23
 80128e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80128e2:	46c0      	nop			@ (mov r8, r8)
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}
 80128e8:	2000214e 	.word	0x2000214e

080128ec <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 80128ec:	b580      	push	{r7, lr}
 80128ee:	af00      	add	r7, sp, #0
  if(userToggle){
 80128f0:	4b05      	ldr	r3, [pc, #20]	@ (8012908 <ResetMeasurementIndicator+0x1c>)
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d004      	beq.n	8012902 <ResetMeasurementIndicator+0x16>
    TIM2 -> CCR3 = LED_OFF;
 80128f8:	2380      	movs	r3, #128	@ 0x80
 80128fa:	05db      	lsls	r3, r3, #23
 80128fc:	22fa      	movs	r2, #250	@ 0xfa
 80128fe:	0112      	lsls	r2, r2, #4
 8012900:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012902:	46c0      	nop			@ (mov r8, r8)
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}
 8012908:	2000214e 	.word	0x2000214e

0801290c <SetChargeIndicator>:

void SetChargeIndicator(){
 801290c:	b580      	push	{r7, lr}
 801290e:	af00      	add	r7, sp, #0
  if(usbPluggedIn){
 8012910:	4b19      	ldr	r3, [pc, #100]	@ (8012978 <SetChargeIndicator+0x6c>)
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d011      	beq.n	801293c <SetChargeIndicator+0x30>
    if (batteryChargeMode == CHARGING_ON) {
 8012918:	4b18      	ldr	r3, [pc, #96]	@ (801297c <SetChargeIndicator+0x70>)
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	2b01      	cmp	r3, #1
 801291e:	d10d      	bne.n	801293c <SetChargeIndicator+0x30>
      TIM2 -> CCR1 = Calculate_LED_ON();  // red
 8012920:	f7ff feea 	bl	80126f8 <Calculate_LED_ON>
 8012924:	0003      	movs	r3, r0
 8012926:	001a      	movs	r2, r3
 8012928:	2380      	movs	r3, #128	@ 0x80
 801292a:	05db      	lsls	r3, r3, #23
 801292c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = Calculate_LED_ON();  //green
 801292e:	f7ff fee3 	bl	80126f8 <Calculate_LED_ON>
 8012932:	0003      	movs	r3, r0
 8012934:	001a      	movs	r2, r3
 8012936:	2380      	movs	r3, #128	@ 0x80
 8012938:	05db      	lsls	r3, r3, #23
 801293a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }
  // in case of not charging or full only one color is active.
  if (batteryCharge > 3.7) {
 801293c:	4b10      	ldr	r3, [pc, #64]	@ (8012980 <SetChargeIndicator+0x74>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	1c18      	adds	r0, r3, #0
 8012942:	f7f0 ffa7 	bl	8003894 <__aeabi_f2d>
 8012946:	4a0f      	ldr	r2, [pc, #60]	@ (8012984 <SetChargeIndicator+0x78>)
 8012948:	4b0f      	ldr	r3, [pc, #60]	@ (8012988 <SetChargeIndicator+0x7c>)
 801294a:	f7ed fdcb 	bl	80004e4 <__aeabi_dcmpgt>
 801294e:	1e03      	subs	r3, r0, #0
 8012950:	d007      	beq.n	8012962 <SetChargeIndicator+0x56>
    TIM2 -> CCR3 = Calculate_LED_ON();  // green
 8012952:	f7ff fed1 	bl	80126f8 <Calculate_LED_ON>
 8012956:	0003      	movs	r3, r0
 8012958:	001a      	movs	r2, r3
 801295a:	2380      	movs	r3, #128	@ 0x80
 801295c:	05db      	lsls	r3, r3, #23
 801295e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  else {
    TIM2 -> CCR1 = Calculate_LED_ON();  //red
  }
}
 8012960:	e006      	b.n	8012970 <SetChargeIndicator+0x64>
    TIM2 -> CCR1 = Calculate_LED_ON();  //red
 8012962:	f7ff fec9 	bl	80126f8 <Calculate_LED_ON>
 8012966:	0003      	movs	r3, r0
 8012968:	001a      	movs	r2, r3
 801296a:	2380      	movs	r3, #128	@ 0x80
 801296c:	05db      	lsls	r3, r3, #23
 801296e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012970:	46c0      	nop			@ (mov r8, r8)
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
 8012976:	46c0      	nop			@ (mov r8, r8)
 8012978:	2000214d 	.word	0x2000214d
 801297c:	2000215c 	.word	0x2000215c
 8012980:	20002158 	.word	0x20002158
 8012984:	9999999a 	.word	0x9999999a
 8012988:	400d9999 	.word	0x400d9999

0801298c <ResetChargeIndicator>:

void ResetChargeIndicator(){
 801298c:	b580      	push	{r7, lr}
 801298e:	af00      	add	r7, sp, #0
      TIM2 -> CCR3 = LED_OFF;
 8012990:	2380      	movs	r3, #128	@ 0x80
 8012992:	05db      	lsls	r3, r3, #23
 8012994:	22fa      	movs	r2, #250	@ 0xfa
 8012996:	0112      	lsls	r2, r2, #4
 8012998:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR1 = LED_OFF;
 801299a:	2380      	movs	r3, #128	@ 0x80
 801299c:	05db      	lsls	r3, r3, #23
 801299e:	22fa      	movs	r2, #250	@ 0xfa
 80129a0:	0112      	lsls	r2, r2, #4
 80129a2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80129a4:	46c0      	nop			@ (mov r8, r8)
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
	...

080129ac <SetESPIndicator>:

void SetESPIndicator(){
 80129ac:	b580      	push	{r7, lr}
 80129ae:	af00      	add	r7, sp, #0
  if(userToggle){
 80129b0:	4b06      	ldr	r3, [pc, #24]	@ (80129cc <SetESPIndicator+0x20>)
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d006      	beq.n	80129c6 <SetESPIndicator+0x1a>
    TIM2 -> CCR4 = Calculate_LED_ON();
 80129b8:	f7ff fe9e 	bl	80126f8 <Calculate_LED_ON>
 80129bc:	0003      	movs	r3, r0
 80129be:	001a      	movs	r2, r3
 80129c0:	2380      	movs	r3, #128	@ 0x80
 80129c2:	05db      	lsls	r3, r3, #23
 80129c4:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80129c6:	46c0      	nop			@ (mov r8, r8)
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	2000214e 	.word	0x2000214e

080129d0 <ResetESPIndicator>:
void ResetESPIndicator(){
 80129d0:	b580      	push	{r7, lr}
 80129d2:	af00      	add	r7, sp, #0
  if(userToggle){
 80129d4:	4b05      	ldr	r3, [pc, #20]	@ (80129ec <ResetESPIndicator+0x1c>)
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d004      	beq.n	80129e6 <ResetESPIndicator+0x16>
    TIM2 -> CCR4 = LED_OFF;
 80129dc:	2380      	movs	r3, #128	@ 0x80
 80129de:	05db      	lsls	r3, r3, #23
 80129e0:	22fa      	movs	r2, #250	@ 0xfa
 80129e2:	0112      	lsls	r2, r2, #4
 80129e4:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80129e6:	46c0      	nop			@ (mov r8, r8)
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd80      	pop	{r7, pc}
 80129ec:	2000214e 	.word	0x2000214e

080129f0 <SetPMIndicator>:

void SetPMIndicator() {
 80129f0:	b580      	push	{r7, lr}
 80129f2:	af00      	add	r7, sp, #0
  if(userToggle){
 80129f4:	4b0d      	ldr	r3, [pc, #52]	@ (8012a2c <SetPMIndicator+0x3c>)
 80129f6:	781b      	ldrb	r3, [r3, #0]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d014      	beq.n	8012a26 <SetPMIndicator+0x36>
    TIM2 -> CCR4 = Calculate_LED_ON();
 80129fc:	f7ff fe7c 	bl	80126f8 <Calculate_LED_ON>
 8012a00:	0003      	movs	r3, r0
 8012a02:	001a      	movs	r2, r3
 8012a04:	2380      	movs	r3, #128	@ 0x80
 8012a06:	05db      	lsls	r3, r3, #23
 8012a08:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 8012a0a:	f7ff fe75 	bl	80126f8 <Calculate_LED_ON>
 8012a0e:	0003      	movs	r3, r0
 8012a10:	001a      	movs	r2, r3
 8012a12:	2380      	movs	r3, #128	@ 0x80
 8012a14:	05db      	lsls	r3, r3, #23
 8012a16:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8012a18:	f7ff fe6e 	bl	80126f8 <Calculate_LED_ON>
 8012a1c:	0003      	movs	r3, r0
 8012a1e:	001a      	movs	r2, r3
 8012a20:	2380      	movs	r3, #128	@ 0x80
 8012a22:	05db      	lsls	r3, r3, #23
 8012a24:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012a26:	46c0      	nop			@ (mov r8, r8)
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	2000214e 	.word	0x2000214e

08012a30 <ResetPMIndicator>:

void ResetPMIndicator() {
 8012a30:	b580      	push	{r7, lr}
 8012a32:	af00      	add	r7, sp, #0
  if(userToggle){
 8012a34:	4b0a      	ldr	r3, [pc, #40]	@ (8012a60 <ResetPMIndicator+0x30>)
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d00e      	beq.n	8012a5a <ResetPMIndicator+0x2a>
    TIM2 -> CCR4 = LED_OFF;
 8012a3c:	2380      	movs	r3, #128	@ 0x80
 8012a3e:	05db      	lsls	r3, r3, #23
 8012a40:	22fa      	movs	r2, #250	@ 0xfa
 8012a42:	0112      	lsls	r2, r2, #4
 8012a44:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8012a46:	2380      	movs	r3, #128	@ 0x80
 8012a48:	05db      	lsls	r3, r3, #23
 8012a4a:	22fa      	movs	r2, #250	@ 0xfa
 8012a4c:	0112      	lsls	r2, r2, #4
 8012a4e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012a50:	2380      	movs	r3, #128	@ 0x80
 8012a52:	05db      	lsls	r3, r3, #23
 8012a54:	22fa      	movs	r2, #250	@ 0xfa
 8012a56:	0112      	lsls	r2, r2, #4
 8012a58:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012a5a:	46c0      	nop			@ (mov r8, r8)
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}
 8012a60:	2000214e 	.word	0x2000214e

08012a64 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff() {
 8012a64:	b580      	push	{r7, lr}
 8012a66:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8012a68:	23fa      	movs	r3, #250	@ 0xfa
 8012a6a:	011a      	lsls	r2, r3, #4
 8012a6c:	23fa      	movs	r3, #250	@ 0xfa
 8012a6e:	0119      	lsls	r1, r3, #4
 8012a70:	23fa      	movs	r3, #250	@ 0xfa
 8012a72:	011b      	lsls	r3, r3, #4
 8012a74:	0018      	movs	r0, r3
 8012a76:	f7ff fe87 	bl	8012788 <SetStatusLED>
  SetDBLED(false,false,false);
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	2100      	movs	r1, #0
 8012a7e:	2000      	movs	r0, #0
 8012a80:	f7ff feb0 	bl	80127e4 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8012a84:	23fa      	movs	r3, #250	@ 0xfa
 8012a86:	011a      	lsls	r2, r3, #4
 8012a88:	23fa      	movs	r3, #250	@ 0xfa
 8012a8a:	0119      	lsls	r1, r3, #4
 8012a8c:	23fa      	movs	r3, #250	@ 0xfa
 8012a8e:	011b      	lsls	r3, r3, #4
 8012a90:	0018      	movs	r0, r3
 8012a92:	f7ff feeb 	bl	801286c <SetVocLED>
return;
 8012a96:	46c0      	nop			@ (mov r8, r8)
}
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}

08012a9c <SetAllREDLED>:

void SetAllREDLED() {
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012aa0:	f7ff ffe0 	bl	8012a64 <SetLEDsOff>
  TIM2 -> CCR1 = LED_ON;
 8012aa4:	2380      	movs	r3, #128	@ 0x80
 8012aa6:	05db      	lsls	r3, r3, #23
 8012aa8:	4a20      	ldr	r2, [pc, #128]	@ (8012b2c <SetAllREDLED+0x90>)
 8012aaa:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012aac:	2380      	movs	r3, #128	@ 0x80
 8012aae:	05db      	lsls	r3, r3, #23
 8012ab0:	22fa      	movs	r2, #250	@ 0xfa
 8012ab2:	0112      	lsls	r2, r2, #4
 8012ab4:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012ab6:	2380      	movs	r3, #128	@ 0x80
 8012ab8:	05db      	lsls	r3, r3, #23
 8012aba:	22fa      	movs	r2, #250	@ 0xfa
 8012abc:	0112      	lsls	r2, r2, #4
 8012abe:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8012ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8012b30 <SetAllREDLED+0x94>)
 8012ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8012b2c <SetAllREDLED+0x90>)
 8012ac4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8012b30 <SetAllREDLED+0x94>)
 8012ac8:	22fa      	movs	r2, #250	@ 0xfa
 8012aca:	0112      	lsls	r2, r2, #4
 8012acc:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012ace:	4b18      	ldr	r3, [pc, #96]	@ (8012b30 <SetAllREDLED+0x94>)
 8012ad0:	22fa      	movs	r2, #250	@ 0xfa
 8012ad2:	0112      	lsls	r2, r2, #4
 8012ad4:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012ad6:	4b17      	ldr	r3, [pc, #92]	@ (8012b34 <SetAllREDLED+0x98>)
 8012ad8:	2200      	movs	r2, #0
 8012ada:	2101      	movs	r1, #1
 8012adc:	0018      	movs	r0, r3
 8012ade:	f003 f93c 	bl	8015d5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012ae2:	2380      	movs	r3, #128	@ 0x80
 8012ae4:	005b      	lsls	r3, r3, #1
 8012ae6:	4813      	ldr	r0, [pc, #76]	@ (8012b34 <SetAllREDLED+0x98>)
 8012ae8:	2201      	movs	r2, #1
 8012aea:	0019      	movs	r1, r3
 8012aec:	f003 f935 	bl	8015d5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012af0:	2380      	movs	r3, #128	@ 0x80
 8012af2:	009b      	lsls	r3, r3, #2
 8012af4:	480f      	ldr	r0, [pc, #60]	@ (8012b34 <SetAllREDLED+0x98>)
 8012af6:	2201      	movs	r2, #1
 8012af8:	0019      	movs	r1, r3
 8012afa:	f003 f92e 	bl	8015d5a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8012afe:	23fa      	movs	r3, #250	@ 0xfa
 8012b00:	005b      	lsls	r3, r3, #1
 8012b02:	0018      	movs	r0, r3
 8012b04:	f001 fec0 	bl	8014888 <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012b08:	2380      	movs	r3, #128	@ 0x80
 8012b0a:	05db      	lsls	r3, r3, #23
 8012b0c:	22fa      	movs	r2, #250	@ 0xfa
 8012b0e:	0112      	lsls	r2, r2, #4
 8012b10:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR1 = LED_OFF;
 8012b12:	4b07      	ldr	r3, [pc, #28]	@ (8012b30 <SetAllREDLED+0x94>)
 8012b14:	22fa      	movs	r2, #250	@ 0xfa
 8012b16:	0112      	lsls	r2, r2, #4
 8012b18:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012b1a:	4b06      	ldr	r3, [pc, #24]	@ (8012b34 <SetAllREDLED+0x98>)
 8012b1c:	2201      	movs	r2, #1
 8012b1e:	2101      	movs	r1, #1
 8012b20:	0018      	movs	r0, r3
 8012b22:	f003 f91a 	bl	8015d5a <HAL_GPIO_WritePin>
}
 8012b26:	46c0      	nop			@ (mov r8, r8)
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}
 8012b2c:	00000bb8 	.word	0x00000bb8
 8012b30:	40000400 	.word	0x40000400
 8012b34:	50000400 	.word	0x50000400

08012b38 <WalkAllRedLED>:

void WalkAllRedLED() {
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	af00      	add	r7, sp, #0
// Fire all LEDs sequential to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012b3c:	f7ff ff92 	bl	8012a64 <SetLEDsOff>
  HAL_Delay(100);
 8012b40:	2064      	movs	r0, #100	@ 0x64
 8012b42:	f001 fea1 	bl	8014888 <HAL_Delay>

  TIM3 -> CCR1 = LED_ON;
 8012b46:	4b24      	ldr	r3, [pc, #144]	@ (8012bd8 <WalkAllRedLED+0xa0>)
 8012b48:	4a24      	ldr	r2, [pc, #144]	@ (8012bdc <WalkAllRedLED+0xa4>)
 8012b4a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012b4c:	4b22      	ldr	r3, [pc, #136]	@ (8012bd8 <WalkAllRedLED+0xa0>)
 8012b4e:	22fa      	movs	r2, #250	@ 0xfa
 8012b50:	0112      	lsls	r2, r2, #4
 8012b52:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012b54:	4b20      	ldr	r3, [pc, #128]	@ (8012bd8 <WalkAllRedLED+0xa0>)
 8012b56:	22fa      	movs	r2, #250	@ 0xfa
 8012b58:	0112      	lsls	r2, r2, #4
 8012b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(100);
 8012b5c:	2064      	movs	r0, #100	@ 0x64
 8012b5e:	f001 fe93 	bl	8014888 <HAL_Delay>
  TIM3 -> CCR1 = LED_OFF;
 8012b62:	4b1d      	ldr	r3, [pc, #116]	@ (8012bd8 <WalkAllRedLED+0xa0>)
 8012b64:	22fa      	movs	r2, #250	@ 0xfa
 8012b66:	0112      	lsls	r2, r2, #4
 8012b68:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8012be0 <WalkAllRedLED+0xa8>)
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	2101      	movs	r1, #1
 8012b70:	0018      	movs	r0, r3
 8012b72:	f003 f8f2 	bl	8015d5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012b76:	2380      	movs	r3, #128	@ 0x80
 8012b78:	005b      	lsls	r3, r3, #1
 8012b7a:	4819      	ldr	r0, [pc, #100]	@ (8012be0 <WalkAllRedLED+0xa8>)
 8012b7c:	2201      	movs	r2, #1
 8012b7e:	0019      	movs	r1, r3
 8012b80:	f003 f8eb 	bl	8015d5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012b84:	2380      	movs	r3, #128	@ 0x80
 8012b86:	009b      	lsls	r3, r3, #2
 8012b88:	4815      	ldr	r0, [pc, #84]	@ (8012be0 <WalkAllRedLED+0xa8>)
 8012b8a:	2201      	movs	r2, #1
 8012b8c:	0019      	movs	r1, r3
 8012b8e:	f003 f8e4 	bl	8015d5a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8012b92:	2064      	movs	r0, #100	@ 0x64
 8012b94:	f001 fe78 	bl	8014888 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012b98:	4b11      	ldr	r3, [pc, #68]	@ (8012be0 <WalkAllRedLED+0xa8>)
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	2101      	movs	r1, #1
 8012b9e:	0018      	movs	r0, r3
 8012ba0:	f003 f8db 	bl	8015d5a <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = LED_ON;
 8012ba4:	2380      	movs	r3, #128	@ 0x80
 8012ba6:	05db      	lsls	r3, r3, #23
 8012ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8012bdc <WalkAllRedLED+0xa4>)
 8012baa:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012bac:	2380      	movs	r3, #128	@ 0x80
 8012bae:	05db      	lsls	r3, r3, #23
 8012bb0:	22fa      	movs	r2, #250	@ 0xfa
 8012bb2:	0112      	lsls	r2, r2, #4
 8012bb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012bb6:	2380      	movs	r3, #128	@ 0x80
 8012bb8:	05db      	lsls	r3, r3, #23
 8012bba:	22fa      	movs	r2, #250	@ 0xfa
 8012bbc:	0112      	lsls	r2, r2, #4
 8012bbe:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(100);
 8012bc0:	2064      	movs	r0, #100	@ 0x64
 8012bc2:	f001 fe61 	bl	8014888 <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012bc6:	2380      	movs	r3, #128	@ 0x80
 8012bc8:	05db      	lsls	r3, r3, #23
 8012bca:	22fa      	movs	r2, #250	@ 0xfa
 8012bcc:	0112      	lsls	r2, r2, #4
 8012bce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012bd0:	46c0      	nop			@ (mov r8, r8)
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}
 8012bd6:	46c0      	nop			@ (mov r8, r8)
 8012bd8:	40000400 	.word	0x40000400
 8012bdc:	00000bb8 	.word	0x00000bb8
 8012be0:	50000400 	.word	0x50000400

08012be4 <SetAllBlueLED>:

void SetAllBlueLED() {
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012bea:	1dfb      	adds	r3, r7, #7
 8012bec:	2200      	movs	r2, #0
 8012bee:	701a      	strb	r2, [r3, #0]
 8012bf0:	e040      	b.n	8012c74 <SetAllBlueLED+0x90>
    TIM2 -> CCR1 = LED_OFF;
 8012bf2:	2380      	movs	r3, #128	@ 0x80
 8012bf4:	05db      	lsls	r3, r3, #23
 8012bf6:	22fa      	movs	r2, #250	@ 0xfa
 8012bf8:	0112      	lsls	r2, r2, #4
 8012bfa:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012bfc:	2380      	movs	r3, #128	@ 0x80
 8012bfe:	05db      	lsls	r3, r3, #23
 8012c00:	22fa      	movs	r2, #250	@ 0xfa
 8012c02:	0112      	lsls	r2, r2, #4
 8012c04:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 8012c06:	2380      	movs	r3, #128	@ 0x80
 8012c08:	05db      	lsls	r3, r3, #23
 8012c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8012c88 <SetAllBlueLED+0xa4>)
 8012c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8012c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8012c8c <SetAllBlueLED+0xa8>)
 8012c10:	22fa      	movs	r2, #250	@ 0xfa
 8012c12:	0112      	lsls	r2, r2, #4
 8012c14:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 8012c16:	4b1d      	ldr	r3, [pc, #116]	@ (8012c8c <SetAllBlueLED+0xa8>)
 8012c18:	22fa      	movs	r2, #250	@ 0xfa
 8012c1a:	0112      	lsls	r2, r2, #4
 8012c1c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 8012c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8012c8c <SetAllBlueLED+0xa8>)
 8012c20:	4a19      	ldr	r2, [pc, #100]	@ (8012c88 <SetAllBlueLED+0xa4>)
 8012c22:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 8012c24:	4b1a      	ldr	r3, [pc, #104]	@ (8012c90 <SetAllBlueLED+0xac>)
 8012c26:	2201      	movs	r2, #1
 8012c28:	2101      	movs	r1, #1
 8012c2a:	0018      	movs	r0, r3
 8012c2c:	f003 f895 	bl	8015d5a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012c30:	2380      	movs	r3, #128	@ 0x80
 8012c32:	005b      	lsls	r3, r3, #1
 8012c34:	4816      	ldr	r0, [pc, #88]	@ (8012c90 <SetAllBlueLED+0xac>)
 8012c36:	2201      	movs	r2, #1
 8012c38:	0019      	movs	r1, r3
 8012c3a:	f003 f88e 	bl	8015d5a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 8012c3e:	2380      	movs	r3, #128	@ 0x80
 8012c40:	009b      	lsls	r3, r3, #2
 8012c42:	4813      	ldr	r0, [pc, #76]	@ (8012c90 <SetAllBlueLED+0xac>)
 8012c44:	2200      	movs	r2, #0
 8012c46:	0019      	movs	r1, r3
 8012c48:	f003 f887 	bl	8015d5a <HAL_GPIO_WritePin>
    HAL_Delay(250);
 8012c4c:	20fa      	movs	r0, #250	@ 0xfa
 8012c4e:	f001 fe1b 	bl	8014888 <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 8012c52:	2380      	movs	r3, #128	@ 0x80
 8012c54:	05db      	lsls	r3, r3, #23
 8012c56:	22fa      	movs	r2, #250	@ 0xfa
 8012c58:	0112      	lsls	r2, r2, #4
 8012c5a:	641a      	str	r2, [r3, #64]	@ 0x40
//    TIM3 -> CCR3 = LED_OFF;  // do not switch off blue VOC led
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8012c5c:	2380      	movs	r3, #128	@ 0x80
 8012c5e:	009b      	lsls	r3, r3, #2
 8012c60:	480b      	ldr	r0, [pc, #44]	@ (8012c90 <SetAllBlueLED+0xac>)
 8012c62:	2201      	movs	r2, #1
 8012c64:	0019      	movs	r1, r3
 8012c66:	f003 f878 	bl	8015d5a <HAL_GPIO_WritePin>
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012c6a:	1dfb      	adds	r3, r7, #7
 8012c6c:	781a      	ldrb	r2, [r3, #0]
 8012c6e:	1dfb      	adds	r3, r7, #7
 8012c70:	3201      	adds	r2, #1
 8012c72:	701a      	strb	r2, [r3, #0]
 8012c74:	1dfb      	adds	r3, r7, #7
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	2b02      	cmp	r3, #2
 8012c7a:	d9ba      	bls.n	8012bf2 <SetAllBlueLED+0xe>
  }
}
 8012c7c:	46c0      	nop			@ (mov r8, r8)
 8012c7e:	46c0      	nop			@ (mov r8, r8)
 8012c80:	46bd      	mov	sp, r7
 8012c82:	b002      	add	sp, #8
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	46c0      	nop			@ (mov r8, r8)
 8012c88:	00000bb8 	.word	0x00000bb8
 8012c8c:	40000400 	.word	0x40000400
 8012c90:	50000400 	.word	0x50000400

08012c94 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8012c94:	b5b0      	push	{r4, r5, r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	0002      	movs	r2, r0
 8012c9c:	1dbb      	adds	r3, r7, #6
 8012c9e:	801a      	strh	r2, [r3, #0]
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 8012ca0:	1dbb      	adds	r3, r7, #6
 8012ca2:	881b      	ldrh	r3, [r3, #0]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d05a      	beq.n	8012d5e <SetVOCindicator+0xca>
 8012ca8:	1dbb      	adds	r3, r7, #6
 8012caa:	881b      	ldrh	r3, [r3, #0]
 8012cac:	2b64      	cmp	r3, #100	@ 0x64
 8012cae:	d856      	bhi.n	8012d5e <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 8012cb0:	1dbb      	adds	r3, r7, #6
 8012cb2:	881b      	ldrh	r3, [r3, #0]
 8012cb4:	0018      	movs	r0, r3
 8012cb6:	f7f0 fd9b 	bl	80037f0 <__aeabi_i2d>
 8012cba:	2200      	movs	r2, #0
 8012cbc:	4b5f      	ldr	r3, [pc, #380]	@ (8012e3c <SetVOCindicator+0x1a8>)
 8012cbe:	f7ef fa0f 	bl	80020e0 <__aeabi_ddiv>
 8012cc2:	0002      	movs	r2, r0
 8012cc4:	000b      	movs	r3, r1
 8012cc6:	2000      	movs	r0, #0
 8012cc8:	495d      	ldr	r1, [pc, #372]	@ (8012e40 <SetVOCindicator+0x1ac>)
 8012cca:	f7f0 f929 	bl	8002f20 <__aeabi_dsub>
 8012cce:	0002      	movs	r2, r0
 8012cd0:	000b      	movs	r3, r1
 8012cd2:	0014      	movs	r4, r2
 8012cd4:	001d      	movs	r5, r3
 8012cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8012e44 <SetVOCindicator+0x1b0>)
 8012cd8:	881b      	ldrh	r3, [r3, #0]
 8012cda:	0018      	movs	r0, r3
 8012cdc:	f7f0 fd88 	bl	80037f0 <__aeabi_i2d>
 8012ce0:	0002      	movs	r2, r0
 8012ce2:	000b      	movs	r3, r1
 8012ce4:	0020      	movs	r0, r4
 8012ce6:	0029      	movs	r1, r5
 8012ce8:	f7ef fe34 	bl	8002954 <__aeabi_dmul>
 8012cec:	0002      	movs	r2, r0
 8012cee:	000b      	movs	r3, r1
 8012cf0:	0010      	movs	r0, r2
 8012cf2:	0019      	movs	r1, r3
 8012cf4:	f7ed fcaa 	bl	800064c <__aeabi_d2uiz>
 8012cf8:	0003      	movs	r3, r0
 8012cfa:	b29a      	uxth	r2, r3
 8012cfc:	4b52      	ldr	r3, [pc, #328]	@ (8012e48 <SetVOCindicator+0x1b4>)
 8012cfe:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8012d00:	1dbb      	adds	r3, r7, #6
 8012d02:	881b      	ldrh	r3, [r3, #0]
 8012d04:	0018      	movs	r0, r3
 8012d06:	f7f0 fd73 	bl	80037f0 <__aeabi_i2d>
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	4b4b      	ldr	r3, [pc, #300]	@ (8012e3c <SetVOCindicator+0x1a8>)
 8012d0e:	f7ef f9e7 	bl	80020e0 <__aeabi_ddiv>
 8012d12:	0002      	movs	r2, r0
 8012d14:	000b      	movs	r3, r1
 8012d16:	0014      	movs	r4, r2
 8012d18:	001d      	movs	r5, r3
 8012d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8012e44 <SetVOCindicator+0x1b0>)
 8012d1c:	881b      	ldrh	r3, [r3, #0]
 8012d1e:	0018      	movs	r0, r3
 8012d20:	f7f0 fd66 	bl	80037f0 <__aeabi_i2d>
 8012d24:	0002      	movs	r2, r0
 8012d26:	000b      	movs	r3, r1
 8012d28:	0020      	movs	r0, r4
 8012d2a:	0029      	movs	r1, r5
 8012d2c:	f7ef fe12 	bl	8002954 <__aeabi_dmul>
 8012d30:	0002      	movs	r2, r0
 8012d32:	000b      	movs	r3, r1
 8012d34:	0010      	movs	r0, r2
 8012d36:	0019      	movs	r1, r3
 8012d38:	f7ed fc88 	bl	800064c <__aeabi_d2uiz>
 8012d3c:	0003      	movs	r3, r0
 8012d3e:	b29a      	uxth	r2, r3
 8012d40:	4b42      	ldr	r3, [pc, #264]	@ (8012e4c <SetVOCindicator+0x1b8>)
 8012d42:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8012d44:	4b3f      	ldr	r3, [pc, #252]	@ (8012e44 <SetVOCindicator+0x1b0>)
 8012d46:	881a      	ldrh	r2, [r3, #0]
 8012d48:	4b41      	ldr	r3, [pc, #260]	@ (8012e50 <SetVOCindicator+0x1bc>)
 8012d4a:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012d4c:	4b40      	ldr	r3, [pc, #256]	@ (8012e50 <SetVOCindicator+0x1bc>)
 8012d4e:	8818      	ldrh	r0, [r3, #0]
 8012d50:	4b3d      	ldr	r3, [pc, #244]	@ (8012e48 <SetVOCindicator+0x1b4>)
 8012d52:	8819      	ldrh	r1, [r3, #0]
 8012d54:	4b3d      	ldr	r3, [pc, #244]	@ (8012e4c <SetVOCindicator+0x1b8>)
 8012d56:	881b      	ldrh	r3, [r3, #0]
 8012d58:	001a      	movs	r2, r3
 8012d5a:	f7ff fd87 	bl	801286c <SetVocLED>
  }
  if(VOCi > 100){
 8012d5e:	1dbb      	adds	r3, r7, #6
 8012d60:	881b      	ldrh	r3, [r3, #0]
 8012d62:	2b64      	cmp	r3, #100	@ 0x64
 8012d64:	d966      	bls.n	8012e34 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8012d66:	1dbb      	adds	r3, r7, #6
 8012d68:	881b      	ldrh	r3, [r3, #0]
 8012d6a:	0018      	movs	r0, r3
 8012d6c:	f7f0 fd40 	bl	80037f0 <__aeabi_i2d>
 8012d70:	2200      	movs	r2, #0
 8012d72:	4b32      	ldr	r3, [pc, #200]	@ (8012e3c <SetVOCindicator+0x1a8>)
 8012d74:	f7f0 f8d4 	bl	8002f20 <__aeabi_dsub>
 8012d78:	0002      	movs	r2, r0
 8012d7a:	000b      	movs	r3, r1
 8012d7c:	0010      	movs	r0, r2
 8012d7e:	0019      	movs	r1, r3
 8012d80:	2200      	movs	r2, #0
 8012d82:	4b34      	ldr	r3, [pc, #208]	@ (8012e54 <SetVOCindicator+0x1c0>)
 8012d84:	f7ef f9ac 	bl	80020e0 <__aeabi_ddiv>
 8012d88:	0002      	movs	r2, r0
 8012d8a:	000b      	movs	r3, r1
 8012d8c:	0014      	movs	r4, r2
 8012d8e:	001d      	movs	r5, r3
 8012d90:	4b2c      	ldr	r3, [pc, #176]	@ (8012e44 <SetVOCindicator+0x1b0>)
 8012d92:	881b      	ldrh	r3, [r3, #0]
 8012d94:	0018      	movs	r0, r3
 8012d96:	f7f0 fd2b 	bl	80037f0 <__aeabi_i2d>
 8012d9a:	0002      	movs	r2, r0
 8012d9c:	000b      	movs	r3, r1
 8012d9e:	0020      	movs	r0, r4
 8012da0:	0029      	movs	r1, r5
 8012da2:	f7ef fdd7 	bl	8002954 <__aeabi_dmul>
 8012da6:	0002      	movs	r2, r0
 8012da8:	000b      	movs	r3, r1
 8012daa:	0010      	movs	r0, r2
 8012dac:	0019      	movs	r1, r3
 8012dae:	f7ed fc4d 	bl	800064c <__aeabi_d2uiz>
 8012db2:	0003      	movs	r3, r0
 8012db4:	b29a      	uxth	r2, r3
 8012db6:	4b24      	ldr	r3, [pc, #144]	@ (8012e48 <SetVOCindicator+0x1b4>)
 8012db8:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 8012dba:	1dbb      	adds	r3, r7, #6
 8012dbc:	881b      	ldrh	r3, [r3, #0]
 8012dbe:	0018      	movs	r0, r3
 8012dc0:	f7f0 fd16 	bl	80037f0 <__aeabi_i2d>
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8012e3c <SetVOCindicator+0x1a8>)
 8012dc8:	f7f0 f8aa 	bl	8002f20 <__aeabi_dsub>
 8012dcc:	0002      	movs	r2, r0
 8012dce:	000b      	movs	r3, r1
 8012dd0:	0010      	movs	r0, r2
 8012dd2:	0019      	movs	r1, r3
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8012e54 <SetVOCindicator+0x1c0>)
 8012dd8:	f7ef f982 	bl	80020e0 <__aeabi_ddiv>
 8012ddc:	0002      	movs	r2, r0
 8012dde:	000b      	movs	r3, r1
 8012de0:	2000      	movs	r0, #0
 8012de2:	4917      	ldr	r1, [pc, #92]	@ (8012e40 <SetVOCindicator+0x1ac>)
 8012de4:	f7f0 f89c 	bl	8002f20 <__aeabi_dsub>
 8012de8:	0002      	movs	r2, r0
 8012dea:	000b      	movs	r3, r1
 8012dec:	0014      	movs	r4, r2
 8012dee:	001d      	movs	r5, r3
 8012df0:	4b14      	ldr	r3, [pc, #80]	@ (8012e44 <SetVOCindicator+0x1b0>)
 8012df2:	881b      	ldrh	r3, [r3, #0]
 8012df4:	0018      	movs	r0, r3
 8012df6:	f7f0 fcfb 	bl	80037f0 <__aeabi_i2d>
 8012dfa:	0002      	movs	r2, r0
 8012dfc:	000b      	movs	r3, r1
 8012dfe:	0020      	movs	r0, r4
 8012e00:	0029      	movs	r1, r5
 8012e02:	f7ef fda7 	bl	8002954 <__aeabi_dmul>
 8012e06:	0002      	movs	r2, r0
 8012e08:	000b      	movs	r3, r1
 8012e0a:	0010      	movs	r0, r2
 8012e0c:	0019      	movs	r1, r3
 8012e0e:	f7ed fc1d 	bl	800064c <__aeabi_d2uiz>
 8012e12:	0003      	movs	r3, r0
 8012e14:	b29a      	uxth	r2, r3
 8012e16:	4b0e      	ldr	r3, [pc, #56]	@ (8012e50 <SetVOCindicator+0x1bc>)
 8012e18:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 8012e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8012e44 <SetVOCindicator+0x1b0>)
 8012e1c:	881a      	ldrh	r2, [r3, #0]
 8012e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8012e4c <SetVOCindicator+0x1b8>)
 8012e20:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012e22:	4b0b      	ldr	r3, [pc, #44]	@ (8012e50 <SetVOCindicator+0x1bc>)
 8012e24:	8818      	ldrh	r0, [r3, #0]
 8012e26:	4b08      	ldr	r3, [pc, #32]	@ (8012e48 <SetVOCindicator+0x1b4>)
 8012e28:	8819      	ldrh	r1, [r3, #0]
 8012e2a:	4b08      	ldr	r3, [pc, #32]	@ (8012e4c <SetVOCindicator+0x1b8>)
 8012e2c:	881b      	ldrh	r3, [r3, #0]
 8012e2e:	001a      	movs	r2, r3
 8012e30:	f7ff fd1c 	bl	801286c <SetVocLED>
  }

}
 8012e34:	46c0      	nop			@ (mov r8, r8)
 8012e36:	46bd      	mov	sp, r7
 8012e38:	b002      	add	sp, #8
 8012e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8012e3c:	40590000 	.word	0x40590000
 8012e40:	3ff00000 	.word	0x3ff00000
 8012e44:	200000ea 	.word	0x200000ea
 8012e48:	20002160 	.word	0x20002160
 8012e4c:	20002162 	.word	0x20002162
 8012e50:	20002164 	.word	0x20002164
 8012e54:	40790000 	.word	0x40790000

08012e58 <powerCheck>:

void powerCheck(){
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	af00      	add	r7, sp, #0
  batteryChargeCheck();
 8012e5c:	f7ff fbda 	bl	8012614 <batteryChargeCheck>
  if(Check_USB_PowerOn()){
 8012e60:	f7f6 feda 	bl	8009c18 <Check_USB_PowerOn>
 8012e64:	1e03      	subs	r3, r0, #0
 8012e66:	d002      	beq.n	8012e6e <powerCheck+0x16>
    batteryStatus = USB_PLUGGED_IN;
 8012e68:	4b02      	ldr	r3, [pc, #8]	@ (8012e74 <powerCheck+0x1c>)
 8012e6a:	2204      	movs	r2, #4
 8012e6c:	701a      	strb	r2, [r3, #0]
  }
}
 8012e6e:	46c0      	nop			@ (mov r8, r8)
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}
 8012e74:	2000215d 	.word	0x2000215d

08012e78 <powerDisplay>:

void powerDisplay(){
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af02      	add	r7, sp, #8
  if(batteryStatus == USB_PLUGGED_IN){
 8012e7e:	4b32      	ldr	r3, [pc, #200]	@ (8012f48 <powerDisplay+0xd0>)
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	2b04      	cmp	r3, #4
 8012e84:	d10f      	bne.n	8012ea6 <powerDisplay+0x2e>
    Debug("USB power detected, battery: %fV", ReadBatteryVoltage());
 8012e86:	f7f6 fe11 	bl	8009aac <ReadBatteryVoltage>
 8012e8a:	1c03      	adds	r3, r0, #0
 8012e8c:	1c18      	adds	r0, r3, #0
 8012e8e:	f7f0 fd01 	bl	8003894 <__aeabi_f2d>
 8012e92:	0002      	movs	r2, r0
 8012e94:	000b      	movs	r3, r1
 8012e96:	482d      	ldr	r0, [pc, #180]	@ (8012f4c <powerDisplay+0xd4>)
 8012e98:	492d      	ldr	r1, [pc, #180]	@ (8012f50 <powerDisplay+0xd8>)
 8012e9a:	9200      	str	r2, [sp, #0]
 8012e9c:	9301      	str	r3, [sp, #4]
 8012e9e:	0002      	movs	r2, r0
 8012ea0:	2003      	movs	r0, #3
 8012ea2:	f000 ff6f 	bl	8013d84 <CreateLine>
  }
  if(batteryStatus == BATTERY_FULL){
 8012ea6:	4b28      	ldr	r3, [pc, #160]	@ (8012f48 <powerDisplay+0xd0>)
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	2b03      	cmp	r3, #3
 8012eac:	d105      	bne.n	8012eba <powerDisplay+0x42>
    Debug("Battery fully charged");
 8012eae:	4a29      	ldr	r2, [pc, #164]	@ (8012f54 <powerDisplay+0xdc>)
 8012eb0:	4b27      	ldr	r3, [pc, #156]	@ (8012f50 <powerDisplay+0xd8>)
 8012eb2:	0019      	movs	r1, r3
 8012eb4:	2003      	movs	r0, #3
 8012eb6:	f000 ff65 	bl	8013d84 <CreateLine>
  }
  if(batteryStatus == BATTERY_GOOD){
 8012eba:	4b23      	ldr	r3, [pc, #140]	@ (8012f48 <powerDisplay+0xd0>)
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	2b02      	cmp	r3, #2
 8012ec0:	d105      	bne.n	8012ece <powerDisplay+0x56>
    Debug("Battery status good");
 8012ec2:	4a25      	ldr	r2, [pc, #148]	@ (8012f58 <powerDisplay+0xe0>)
 8012ec4:	4b22      	ldr	r3, [pc, #136]	@ (8012f50 <powerDisplay+0xd8>)
 8012ec6:	0019      	movs	r1, r3
 8012ec8:	2003      	movs	r0, #3
 8012eca:	f000 ff5b 	bl	8013d84 <CreateLine>
  }
  if(batteryStatus == BATTERY_LOW){
 8012ece:	4b1e      	ldr	r3, [pc, #120]	@ (8012f48 <powerDisplay+0xd0>)
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	2b01      	cmp	r3, #1
 8012ed4:	d105      	bne.n	8012ee2 <powerDisplay+0x6a>
    Debug("Battery status low");
 8012ed6:	4a21      	ldr	r2, [pc, #132]	@ (8012f5c <powerDisplay+0xe4>)
 8012ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8012f50 <powerDisplay+0xd8>)
 8012eda:	0019      	movs	r1, r3
 8012edc:	2003      	movs	r0, #3
 8012ede:	f000 ff51 	bl	8013d84 <CreateLine>
  }
  if(batteryStatus == BATTERY_CRITICAL){
 8012ee2:	4b19      	ldr	r3, [pc, #100]	@ (8012f48 <powerDisplay+0xd0>)
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d105      	bne.n	8012ef6 <powerDisplay+0x7e>
    Debug("Battery is critical, stop processes");
 8012eea:	4a1d      	ldr	r2, [pc, #116]	@ (8012f60 <powerDisplay+0xe8>)
 8012eec:	4b18      	ldr	r3, [pc, #96]	@ (8012f50 <powerDisplay+0xd8>)
 8012eee:	0019      	movs	r1, r3
 8012ef0:	2003      	movs	r0, #3
 8012ef2:	f000 ff47 	bl	8013d84 <CreateLine>
  }
  batteryChargeMode = Read_Charge_Status();
 8012ef6:	f7f6 fead 	bl	8009c54 <Read_Charge_Status>
 8012efa:	0003      	movs	r3, r0
 8012efc:	001a      	movs	r2, r3
 8012efe:	4b19      	ldr	r3, [pc, #100]	@ (8012f64 <powerDisplay+0xec>)
 8012f00:	701a      	strb	r2, [r3, #0]
  switch (batteryChargeMode) {
 8012f02:	4b18      	ldr	r3, [pc, #96]	@ (8012f64 <powerDisplay+0xec>)
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	2b02      	cmp	r3, #2
 8012f08:	d013      	beq.n	8012f32 <powerDisplay+0xba>
 8012f0a:	dc19      	bgt.n	8012f40 <powerDisplay+0xc8>
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d002      	beq.n	8012f16 <powerDisplay+0x9e>
 8012f10:	2b01      	cmp	r3, #1
 8012f12:	d007      	beq.n	8012f24 <powerDisplay+0xac>
  case CHARGING_FULL:
    Debug("Battery full, charging off");
    break;
  }

}
 8012f14:	e014      	b.n	8012f40 <powerDisplay+0xc8>
    Debug("Battery charging off");
 8012f16:	4a14      	ldr	r2, [pc, #80]	@ (8012f68 <powerDisplay+0xf0>)
 8012f18:	4b0d      	ldr	r3, [pc, #52]	@ (8012f50 <powerDisplay+0xd8>)
 8012f1a:	0019      	movs	r1, r3
 8012f1c:	2003      	movs	r0, #3
 8012f1e:	f000 ff31 	bl	8013d84 <CreateLine>
    break;
 8012f22:	e00d      	b.n	8012f40 <powerDisplay+0xc8>
    Debug("Battery is charging");
 8012f24:	4a11      	ldr	r2, [pc, #68]	@ (8012f6c <powerDisplay+0xf4>)
 8012f26:	4b0a      	ldr	r3, [pc, #40]	@ (8012f50 <powerDisplay+0xd8>)
 8012f28:	0019      	movs	r1, r3
 8012f2a:	2003      	movs	r0, #3
 8012f2c:	f000 ff2a 	bl	8013d84 <CreateLine>
    break;
 8012f30:	e006      	b.n	8012f40 <powerDisplay+0xc8>
    Debug("Battery full, charging off");
 8012f32:	4a0f      	ldr	r2, [pc, #60]	@ (8012f70 <powerDisplay+0xf8>)
 8012f34:	4b06      	ldr	r3, [pc, #24]	@ (8012f50 <powerDisplay+0xd8>)
 8012f36:	0019      	movs	r1, r3
 8012f38:	2003      	movs	r0, #3
 8012f3a:	f000 ff23 	bl	8013d84 <CreateLine>
    break;
 8012f3e:	46c0      	nop			@ (mov r8, r8)
}
 8012f40:	46c0      	nop			@ (mov r8, r8)
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	46c0      	nop			@ (mov r8, r8)
 8012f48:	2000215d 	.word	0x2000215d
 8012f4c:	0802d7c8 	.word	0x0802d7c8
 8012f50:	0802d7c4 	.word	0x0802d7c4
 8012f54:	0802d7ec 	.word	0x0802d7ec
 8012f58:	0802d804 	.word	0x0802d804
 8012f5c:	0802d818 	.word	0x0802d818
 8012f60:	0802d82c 	.word	0x0802d82c
 8012f64:	2000215c 	.word	0x2000215c
 8012f68:	0802d850 	.word	0x0802d850
 8012f6c:	0802d868 	.word	0x0802d868
 8012f70:	0802d87c 	.word	0x0802d87c

08012f74 <configCheck>:

void configCheck(){
 8012f74:	b590      	push	{r4, r7, lr}
 8012f76:	b083      	sub	sp, #12
 8012f78:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8012f7a:	f7f6 fec7 	bl	8009d0c <BootButton_Pressed>
 8012f7e:	1e03      	subs	r3, r0, #0
 8012f80:	d007      	beq.n	8012f92 <configCheck+0x1e>
 8012f82:	f7f6 fed5 	bl	8009d30 <UserButton_Pressed>
 8012f86:	1e03      	subs	r3, r0, #0
 8012f88:	d003      	beq.n	8012f92 <configCheck+0x1e>
    configSet = true;
 8012f8a:	4bb5      	ldr	r3, [pc, #724]	@ (8013260 <configCheck+0x2ec>)
 8012f8c:	2201      	movs	r2, #1
 8012f8e:	701a      	strb	r2, [r3, #0]
 8012f90:	e00a      	b.n	8012fa8 <configCheck+0x34>
  }
  else{
    configSet = false;
 8012f92:	4bb3      	ldr	r3, [pc, #716]	@ (8013260 <configCheck+0x2ec>)
 8012f94:	2200      	movs	r2, #0
 8012f96:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8012f98:	f001 fc6c 	bl	8014874 <HAL_GetTick>
 8012f9c:	0003      	movs	r3, r0
 8012f9e:	22fa      	movs	r2, #250	@ 0xfa
 8012fa0:	00d2      	lsls	r2, r2, #3
 8012fa2:	189a      	adds	r2, r3, r2
 8012fa4:	4baf      	ldr	r3, [pc, #700]	@ (8013264 <configCheck+0x2f0>)
 8012fa6:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8012fa8:	4bad      	ldr	r3, [pc, #692]	@ (8013260 <configCheck+0x2ec>)
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d00d      	beq.n	8012fcc <configCheck+0x58>
 8012fb0:	4bac      	ldr	r3, [pc, #688]	@ (8013264 <configCheck+0x2f0>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	0018      	movs	r0, r3
 8012fb6:	f000 fe8f 	bl	8013cd8 <TimestampIsReached>
 8012fba:	1e03      	subs	r3, r0, #0
 8012fbc:	d006      	beq.n	8012fcc <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 8012fbe:	f7f1 ff13 	bl	8004de8 <SetConfigMode>
    SetDBLED(true, true, true);
 8012fc2:	2201      	movs	r2, #1
 8012fc4:	2101      	movs	r1, #1
 8012fc6:	2001      	movs	r0, #1
 8012fc8:	f7ff fc0c 	bl	80127e4 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8012fcc:	f7f6 fe9e 	bl	8009d0c <BootButton_Pressed>
 8012fd0:	0003      	movs	r3, r0
 8012fd2:	001a      	movs	r2, r3
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	4053      	eors	r3, r2
 8012fd8:	b2db      	uxtb	r3, r3
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d05a      	beq.n	8013094 <configCheck+0x120>
 8012fde:	f7f6 fea7 	bl	8009d30 <UserButton_Pressed>
 8012fe2:	1e03      	subs	r3, r0, #0
 8012fe4:	d056      	beq.n	8013094 <configCheck+0x120>
 8012fe6:	4ba0      	ldr	r3, [pc, #640]	@ (8013268 <configCheck+0x2f4>)
 8012fe8:	781b      	ldrb	r3, [r3, #0]
 8012fea:	2201      	movs	r2, #1
 8012fec:	4053      	eors	r3, r2
 8012fee:	b2db      	uxtb	r3, r3
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d04f      	beq.n	8013094 <configCheck+0x120>
 8012ff4:	f7f1 ff18 	bl	8004e28 <GetReconfigMode>
 8012ff8:	0003      	movs	r3, r0
 8012ffa:	001a      	movs	r2, r3
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	4053      	eors	r3, r2
 8013000:	b2db      	uxtb	r3, r3
 8013002:	2b00      	cmp	r3, #0
 8013004:	d046      	beq.n	8013094 <configCheck+0x120>
    SetLEDsOff();
 8013006:	f7ff fd2d 	bl	8012a64 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 801300a:	4a98      	ldr	r2, [pc, #608]	@ (801326c <configCheck+0x2f8>)
 801300c:	4997      	ldr	r1, [pc, #604]	@ (801326c <configCheck+0x2f8>)
 801300e:	4b97      	ldr	r3, [pc, #604]	@ (801326c <configCheck+0x2f8>)
 8013010:	0018      	movs	r0, r3
 8013012:	f7ff fc2b 	bl	801286c <SetVocLED>
    HAL_Delay(1500);
 8013016:	4b96      	ldr	r3, [pc, #600]	@ (8013270 <configCheck+0x2fc>)
 8013018:	0018      	movs	r0, r3
 801301a:	f001 fc35 	bl	8014888 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 801301e:	23fa      	movs	r3, #250	@ 0xfa
 8013020:	011a      	lsls	r2, r3, #4
 8013022:	23fa      	movs	r3, #250	@ 0xfa
 8013024:	0119      	lsls	r1, r3, #4
 8013026:	23fa      	movs	r3, #250	@ 0xfa
 8013028:	011b      	lsls	r3, r3, #4
 801302a:	0018      	movs	r0, r3
 801302c:	f7ff fc1e 	bl	801286c <SetVocLED>
    userToggle = !userToggle;
 8013030:	4b90      	ldr	r3, [pc, #576]	@ (8013274 <configCheck+0x300>)
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	1e5a      	subs	r2, r3, #1
 8013036:	4193      	sbcs	r3, r2
 8013038:	b2db      	uxtb	r3, r3
 801303a:	2201      	movs	r2, #1
 801303c:	4053      	eors	r3, r2
 801303e:	b2db      	uxtb	r3, r3
 8013040:	1c1a      	adds	r2, r3, #0
 8013042:	2301      	movs	r3, #1
 8013044:	4013      	ands	r3, r2
 8013046:	b2da      	uxtb	r2, r3
 8013048:	4b8a      	ldr	r3, [pc, #552]	@ (8013274 <configCheck+0x300>)
 801304a:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 801304c:	4b89      	ldr	r3, [pc, #548]	@ (8013274 <configCheck+0x300>)
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d002      	beq.n	801305a <configCheck+0xe6>
      EnabledConnectedDevices();
 8013054:	f7fa fe3c 	bl	800dcd0 <EnabledConnectedDevices>
 8013058:	e004      	b.n	8013064 <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 801305a:	f001 fc0b 	bl	8014874 <HAL_GetTick>
 801305e:	0002      	movs	r2, r0
 8013060:	4b85      	ldr	r3, [pc, #532]	@ (8013278 <configCheck+0x304>)
 8013062:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8013064:	4b83      	ldr	r3, [pc, #524]	@ (8013274 <configCheck+0x300>)
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d001      	beq.n	8013070 <configCheck+0xfc>
 801306c:	4b83      	ldr	r3, [pc, #524]	@ (801327c <configCheck+0x308>)
 801306e:	e000      	b.n	8013072 <configCheck+0xfe>
 8013070:	4b83      	ldr	r3, [pc, #524]	@ (8013280 <configCheck+0x30c>)
 8013072:	4a84      	ldr	r2, [pc, #528]	@ (8013284 <configCheck+0x310>)
 8013074:	4984      	ldr	r1, [pc, #528]	@ (8013288 <configCheck+0x314>)
 8013076:	2003      	movs	r0, #3
 8013078:	f000 fe84 	bl	8013d84 <CreateLine>
    userbuttonHeld = true;
 801307c:	4b7a      	ldr	r3, [pc, #488]	@ (8013268 <configCheck+0x2f4>)
 801307e:	2201      	movs	r2, #1
 8013080:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 8013082:	f001 fbf7 	bl	8014874 <HAL_GetTick>
 8013086:	0003      	movs	r3, r0
 8013088:	22fa      	movs	r2, #250	@ 0xfa
 801308a:	00d2      	lsls	r2, r2, #3
 801308c:	189a      	adds	r2, r3, r2
 801308e:	4b7f      	ldr	r3, [pc, #508]	@ (801328c <configCheck+0x318>)
 8013090:	601a      	str	r2, [r3, #0]
 8013092:	e002      	b.n	801309a <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 8013094:	4b74      	ldr	r3, [pc, #464]	@ (8013268 <configCheck+0x2f4>)
 8013096:	2200      	movs	r2, #0
 8013098:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 801309a:	f7f6 fe37 	bl	8009d0c <BootButton_Pressed>
 801309e:	0003      	movs	r3, r0
 80130a0:	001a      	movs	r2, r3
 80130a2:	2301      	movs	r3, #1
 80130a4:	4053      	eors	r3, r2
 80130a6:	b2db      	uxtb	r3, r3
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d100      	bne.n	80130ae <configCheck+0x13a>
 80130ac:	e0a4      	b.n	80131f8 <configCheck+0x284>
 80130ae:	4b6e      	ldr	r3, [pc, #440]	@ (8013268 <configCheck+0x2f4>)
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d100      	bne.n	80130b8 <configCheck+0x144>
 80130b6:	e09f      	b.n	80131f8 <configCheck+0x284>
 80130b8:	4b74      	ldr	r3, [pc, #464]	@ (801328c <configCheck+0x318>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	0018      	movs	r0, r3
 80130be:	f000 fe0b 	bl	8013cd8 <TimestampIsReached>
 80130c2:	1e03      	subs	r3, r0, #0
 80130c4:	d100      	bne.n	80130c8 <configCheck+0x154>
 80130c6:	e097      	b.n	80131f8 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80130c8:	f7fa f9c0 	bl	800d44c <GetPMSensorPresence>
 80130cc:	1e03      	subs	r3, r0, #0
 80130ce:	d100      	bne.n	80130d2 <configCheck+0x15e>
 80130d0:	e082      	b.n	80131d8 <configCheck+0x264>
 80130d2:	4b6f      	ldr	r3, [pc, #444]	@ (8013290 <configCheck+0x31c>)
 80130d4:	791b      	ldrb	r3, [r3, #4]
 80130d6:	2b34      	cmp	r3, #52	@ 0x34
 80130d8:	d004      	beq.n	80130e4 <configCheck+0x170>
 80130da:	4b6d      	ldr	r3, [pc, #436]	@ (8013290 <configCheck+0x31c>)
 80130dc:	791b      	ldrb	r3, [r3, #4]
 80130de:	2b35      	cmp	r3, #53	@ 0x35
 80130e0:	d000      	beq.n	80130e4 <configCheck+0x170>
 80130e2:	e079      	b.n	80131d8 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 80130e4:	4b6b      	ldr	r3, [pc, #428]	@ (8013294 <configCheck+0x320>)
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	1e5a      	subs	r2, r3, #1
 80130ea:	4193      	sbcs	r3, r2
 80130ec:	b2db      	uxtb	r3, r3
 80130ee:	2201      	movs	r2, #1
 80130f0:	4053      	eors	r3, r2
 80130f2:	b2db      	uxtb	r3, r3
 80130f4:	1c1a      	adds	r2, r3, #0
 80130f6:	2301      	movs	r3, #1
 80130f8:	4013      	ands	r3, r2
 80130fa:	b2da      	uxtb	r2, r3
 80130fc:	4b65      	ldr	r3, [pc, #404]	@ (8013294 <configCheck+0x320>)
 80130fe:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 8013100:	4b64      	ldr	r3, [pc, #400]	@ (8013294 <configCheck+0x320>)
 8013102:	781b      	ldrb	r3, [r3, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d005      	beq.n	8013114 <configCheck+0x1a0>
 8013108:	1dbc      	adds	r4, r7, #6
 801310a:	f7ff faf5 	bl	80126f8 <Calculate_LED_ON>
 801310e:	0003      	movs	r3, r0
 8013110:	8023      	strh	r3, [r4, #0]
 8013112:	e003      	b.n	801311c <configCheck+0x1a8>
        else color = 4000;
 8013114:	1dbb      	adds	r3, r7, #6
 8013116:	22fa      	movs	r2, #250	@ 0xfa
 8013118:	0112      	lsls	r2, r2, #4
 801311a:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %sabled", VOCNOx?"en":"dis");
 801311c:	4b5d      	ldr	r3, [pc, #372]	@ (8013294 <configCheck+0x320>)
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d001      	beq.n	8013128 <configCheck+0x1b4>
 8013124:	4b55      	ldr	r3, [pc, #340]	@ (801327c <configCheck+0x308>)
 8013126:	e000      	b.n	801312a <configCheck+0x1b6>
 8013128:	4b55      	ldr	r3, [pc, #340]	@ (8013280 <configCheck+0x30c>)
 801312a:	4a5b      	ldr	r2, [pc, #364]	@ (8013298 <configCheck+0x324>)
 801312c:	495b      	ldr	r1, [pc, #364]	@ (801329c <configCheck+0x328>)
 801312e:	2002      	movs	r0, #2
 8013130:	f000 fe28 	bl	8013d84 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8013134:	1d7b      	adds	r3, r7, #5
 8013136:	2200      	movs	r2, #0
 8013138:	701a      	strb	r2, [r3, #0]
 801313a:	e028      	b.n	801318e <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 801313c:	f7ff fadc 	bl	80126f8 <Calculate_LED_ON>
 8013140:	0003      	movs	r3, r0
 8013142:	001a      	movs	r2, r3
 8013144:	4b56      	ldr	r3, [pc, #344]	@ (80132a0 <configCheck+0x32c>)
 8013146:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8013148:	4b55      	ldr	r3, [pc, #340]	@ (80132a0 <configCheck+0x32c>)
 801314a:	1dba      	adds	r2, r7, #6
 801314c:	8812      	ldrh	r2, [r2, #0]
 801314e:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8013150:	4b53      	ldr	r3, [pc, #332]	@ (80132a0 <configCheck+0x32c>)
 8013152:	1dba      	adds	r2, r7, #6
 8013154:	8812      	ldrh	r2, [r2, #0]
 8013156:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8013158:	23c8      	movs	r3, #200	@ 0xc8
 801315a:	005b      	lsls	r3, r3, #1
 801315c:	0018      	movs	r0, r3
 801315e:	f001 fb93 	bl	8014888 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 8013162:	4b4f      	ldr	r3, [pc, #316]	@ (80132a0 <configCheck+0x32c>)
 8013164:	22fa      	movs	r2, #250	@ 0xfa
 8013166:	0112      	lsls	r2, r2, #4
 8013168:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 801316a:	4b4d      	ldr	r3, [pc, #308]	@ (80132a0 <configCheck+0x32c>)
 801316c:	22fa      	movs	r2, #250	@ 0xfa
 801316e:	0112      	lsls	r2, r2, #4
 8013170:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 8013172:	4b4b      	ldr	r3, [pc, #300]	@ (80132a0 <configCheck+0x32c>)
 8013174:	22fa      	movs	r2, #250	@ 0xfa
 8013176:	0112      	lsls	r2, r2, #4
 8013178:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 801317a:	23c8      	movs	r3, #200	@ 0xc8
 801317c:	005b      	lsls	r3, r3, #1
 801317e:	0018      	movs	r0, r3
 8013180:	f001 fb82 	bl	8014888 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8013184:	1d7b      	adds	r3, r7, #5
 8013186:	781a      	ldrb	r2, [r3, #0]
 8013188:	1d7b      	adds	r3, r7, #5
 801318a:	3201      	adds	r2, #1
 801318c:	701a      	strb	r2, [r3, #0]
 801318e:	1d7b      	adds	r3, r7, #5
 8013190:	781b      	ldrb	r3, [r3, #0]
 8013192:	2b01      	cmp	r3, #1
 8013194:	d9d2      	bls.n	801313c <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8013196:	4b37      	ldr	r3, [pc, #220]	@ (8013274 <configCheck+0x300>)
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	1e5a      	subs	r2, r3, #1
 801319c:	4193      	sbcs	r3, r2
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	2201      	movs	r2, #1
 80131a2:	4053      	eors	r3, r2
 80131a4:	b2db      	uxtb	r3, r3
 80131a6:	1c1a      	adds	r2, r3, #0
 80131a8:	2301      	movs	r3, #1
 80131aa:	4013      	ands	r3, r2
 80131ac:	b2da      	uxtb	r2, r3
 80131ae:	4b31      	ldr	r3, [pc, #196]	@ (8013274 <configCheck+0x300>)
 80131b0:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %sabled", userToggle?"en":"dis");
 80131b2:	4b30      	ldr	r3, [pc, #192]	@ (8013274 <configCheck+0x300>)
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d001      	beq.n	80131be <configCheck+0x24a>
 80131ba:	4b30      	ldr	r3, [pc, #192]	@ (801327c <configCheck+0x308>)
 80131bc:	e000      	b.n	80131c0 <configCheck+0x24c>
 80131be:	4b30      	ldr	r3, [pc, #192]	@ (8013280 <configCheck+0x30c>)
 80131c0:	4a38      	ldr	r2, [pc, #224]	@ (80132a4 <configCheck+0x330>)
 80131c2:	4936      	ldr	r1, [pc, #216]	@ (801329c <configCheck+0x328>)
 80131c4:	2002      	movs	r0, #2
 80131c6:	f000 fddd 	bl	8013d84 <CreateLine>
      if (usbPluggedIn) {
 80131ca:	4b37      	ldr	r3, [pc, #220]	@ (80132a8 <configCheck+0x334>)
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d009      	beq.n	80131e6 <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 80131d2:	f7fb ff67 	bl	800f0a4 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80131d6:	e006      	b.n	80131e6 <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 80131d8:	4a34      	ldr	r2, [pc, #208]	@ (80132ac <configCheck+0x338>)
 80131da:	4b30      	ldr	r3, [pc, #192]	@ (801329c <configCheck+0x328>)
 80131dc:	0019      	movs	r1, r3
 80131de:	2002      	movs	r0, #2
 80131e0:	f000 fdd0 	bl	8013d84 <CreateLine>
 80131e4:	e000      	b.n	80131e8 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80131e6:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 80131e8:	46c0      	nop			@ (mov r8, r8)
 80131ea:	f7f6 fda1 	bl	8009d30 <UserButton_Pressed>
 80131ee:	1e03      	subs	r3, r0, #0
 80131f0:	d1fb      	bne.n	80131ea <configCheck+0x276>
    }
    userbuttonHeld = false;
 80131f2:	4b1d      	ldr	r3, [pc, #116]	@ (8013268 <configCheck+0x2f4>)
 80131f4:	2200      	movs	r2, #0
 80131f6:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 80131f8:	f7f6 fd88 	bl	8009d0c <BootButton_Pressed>
 80131fc:	0003      	movs	r3, r0
 80131fe:	001a      	movs	r2, r3
 8013200:	2301      	movs	r3, #1
 8013202:	4053      	eors	r3, r2
 8013204:	b2db      	uxtb	r3, r3
 8013206:	2b00      	cmp	r3, #0
 8013208:	d00b      	beq.n	8013222 <configCheck+0x2ae>
 801320a:	f7f6 fd91 	bl	8009d30 <UserButton_Pressed>
 801320e:	0003      	movs	r3, r0
 8013210:	001a      	movs	r2, r3
 8013212:	2301      	movs	r3, #1
 8013214:	4053      	eors	r3, r2
 8013216:	b2db      	uxtb	r3, r3
 8013218:	2b00      	cmp	r3, #0
 801321a:	d002      	beq.n	8013222 <configCheck+0x2ae>
    userbuttonHeld = false;
 801321c:	4b12      	ldr	r3, [pc, #72]	@ (8013268 <configCheck+0x2f4>)
 801321e:	2200      	movs	r2, #0
 8013220:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 8013222:	f7f6 fcf9 	bl	8009c18 <Check_USB_PowerOn>
 8013226:	1e03      	subs	r3, r0, #0
 8013228:	d003      	beq.n	8013232 <configCheck+0x2be>
    usbPluggedIn = true;
 801322a:	4b1f      	ldr	r3, [pc, #124]	@ (80132a8 <configCheck+0x334>)
 801322c:	2201      	movs	r2, #1
 801322e:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 8013230:	e012      	b.n	8013258 <configCheck+0x2e4>
    if(!userToggle && !init){
 8013232:	4b10      	ldr	r3, [pc, #64]	@ (8013274 <configCheck+0x300>)
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	2201      	movs	r2, #1
 8013238:	4053      	eors	r3, r2
 801323a:	b2db      	uxtb	r3, r3
 801323c:	2b00      	cmp	r3, #0
 801323e:	d008      	beq.n	8013252 <configCheck+0x2de>
 8013240:	4b1b      	ldr	r3, [pc, #108]	@ (80132b0 <configCheck+0x33c>)
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	2201      	movs	r2, #1
 8013246:	4053      	eors	r3, r2
 8013248:	b2db      	uxtb	r3, r3
 801324a:	2b00      	cmp	r3, #0
 801324c:	d001      	beq.n	8013252 <configCheck+0x2de>
      SetLEDsOff();
 801324e:	f7ff fc09 	bl	8012a64 <SetLEDsOff>
    usbPluggedIn = false;
 8013252:	4b15      	ldr	r3, [pc, #84]	@ (80132a8 <configCheck+0x334>)
 8013254:	2200      	movs	r2, #0
 8013256:	701a      	strb	r2, [r3, #0]
}
 8013258:	46c0      	nop			@ (mov r8, r8)
 801325a:	46bd      	mov	sp, r7
 801325c:	b003      	add	sp, #12
 801325e:	bd90      	pop	{r4, r7, pc}
 8013260:	2000214c 	.word	0x2000214c
 8013264:	20002150 	.word	0x20002150
 8013268:	2000214f 	.word	0x2000214f
 801326c:	00000bb8 	.word	0x00000bb8
 8013270:	000005dc 	.word	0x000005dc
 8013274:	2000214e 	.word	0x2000214e
 8013278:	20001114 	.word	0x20001114
 801327c:	0802d898 	.word	0x0802d898
 8013280:	0802d89c 	.word	0x0802d89c
 8013284:	0802d8a0 	.word	0x0802d8a0
 8013288:	0802d7c4 	.word	0x0802d7c4
 801328c:	20002154 	.word	0x20002154
 8013290:	200011c0 	.word	0x200011c0
 8013294:	200011be 	.word	0x200011be
 8013298:	0802d8c0 	.word	0x0802d8c0
 801329c:	0802d8e8 	.word	0x0802d8e8
 80132a0:	40000400 	.word	0x40000400
 80132a4:	0802d8ec 	.word	0x0802d8ec
 80132a8:	2000214d 	.word	0x2000214d
 80132ac:	0802d90c 	.word	0x0802d90c
 80132b0:	200000e8 	.word	0x200000e8

080132b4 <Battery_Upkeep>:

void Battery_Upkeep(){
 80132b4:	b580      	push	{r7, lr}
 80132b6:	af00      	add	r7, sp, #0
  powerCheck();
 80132b8:	f7ff fdce 	bl	8012e58 <powerCheck>
  powerDisplay();  // output LEDs are okay
 80132bc:	f7ff fddc 	bl	8012e78 <powerDisplay>
}
 80132c0:	46c0      	nop			@ (mov r8, r8)
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
	...

080132c8 <setuserToggle>:

void setuserToggle(void) {
 80132c8:	b580      	push	{r7, lr}
 80132ca:	af00      	add	r7, sp, #0
  if (!Check_USB_PowerOn()) { //operate only in battery operation mode
 80132cc:	f7f6 fca4 	bl	8009c18 <Check_USB_PowerOn>
 80132d0:	0003      	movs	r3, r0
 80132d2:	001a      	movs	r2, r3
 80132d4:	2301      	movs	r3, #1
 80132d6:	4053      	eors	r3, r2
 80132d8:	b2db      	uxtb	r3, r3
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d004      	beq.n	80132e8 <setuserToggle+0x20>
    userToggle = true;
 80132de:	4b04      	ldr	r3, [pc, #16]	@ (80132f0 <setuserToggle+0x28>)
 80132e0:	2201      	movs	r2, #1
 80132e2:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 80132e4:	f7fa fcf4 	bl	800dcd0 <EnabledConnectedDevices>
  }
}
 80132e8:	46c0      	nop			@ (mov r8, r8)
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}
 80132ee:	46c0      	nop			@ (mov r8, r8)
 80132f0:	2000214e 	.word	0x2000214e

080132f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80132f8:	4b07      	ldr	r3, [pc, #28]	@ (8013318 <HAL_MspInit+0x24>)
 80132fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80132fc:	4b06      	ldr	r3, [pc, #24]	@ (8013318 <HAL_MspInit+0x24>)
 80132fe:	2101      	movs	r1, #1
 8013300:	430a      	orrs	r2, r1
 8013302:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8013304:	4b04      	ldr	r3, [pc, #16]	@ (8013318 <HAL_MspInit+0x24>)
 8013306:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013308:	4b03      	ldr	r3, [pc, #12]	@ (8013318 <HAL_MspInit+0x24>)
 801330a:	2180      	movs	r1, #128	@ 0x80
 801330c:	0549      	lsls	r1, r1, #21
 801330e:	430a      	orrs	r2, r1
 8013310:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013312:	46c0      	nop			@ (mov r8, r8)
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}
 8013318:	40021000 	.word	0x40021000

0801331c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8013320:	46c0      	nop			@ (mov r8, r8)
 8013322:	e7fd      	b.n	8013320 <NMI_Handler+0x4>

08013324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013328:	46c0      	nop			@ (mov r8, r8)
 801332a:	e7fd      	b.n	8013328 <HardFault_Handler+0x4>

0801332c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8013330:	46c0      	nop			@ (mov r8, r8)
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}

08013336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8013336:	b580      	push	{r7, lr}
 8013338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801333a:	46c0      	nop			@ (mov r8, r8)
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}

08013340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8013344:	f001 fa84 	bl	8014850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8013348:	46c0      	nop			@ (mov r8, r8)
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}
	...

08013350 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8013354:	4b03      	ldr	r3, [pc, #12]	@ (8013364 <RTC_IRQHandler+0x14>)
 8013356:	0018      	movs	r0, r3
 8013358:	f009 fb30 	bl	801c9bc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 801335c:	46c0      	nop			@ (mov r8, r8)
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}
 8013362:	46c0      	nop			@ (mov r8, r8)
 8013364:	20001198 	.word	0x20001198

08013368 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 801336c:	2380      	movs	r3, #128	@ 0x80
 801336e:	021b      	lsls	r3, r3, #8
 8013370:	0018      	movs	r0, r3
 8013372:	f002 fd0f 	bl	8015d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8013376:	46c0      	nop			@ (mov r8, r8)
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}

0801337c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8013380:	4b05      	ldr	r3, [pc, #20]	@ (8013398 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8013382:	0018      	movs	r0, r3
 8013384:	f002 f897 	bl	80154b6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8013388:	4b04      	ldr	r3, [pc, #16]	@ (801339c <DMA1_Channel2_3_IRQHandler+0x20>)
 801338a:	0018      	movs	r0, r3
 801338c:	f002 f893 	bl	80154b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8013390:	46c0      	nop			@ (mov r8, r8)
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}
 8013396:	46c0      	nop			@ (mov r8, r8)
 8013398:	20001028 	.word	0x20001028
 801339c:	20000fe0 	.word	0x20000fe0

080133a0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80133a4:	4b07      	ldr	r3, [pc, #28]	@ (80133c4 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 80133a6:	0018      	movs	r0, r3
 80133a8:	f002 f885 	bl	80154b6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80133ac:	4b06      	ldr	r3, [pc, #24]	@ (80133c8 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 80133ae:	0018      	movs	r0, r3
 80133b0:	f002 f881 	bl	80154b6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80133b4:	4b05      	ldr	r3, [pc, #20]	@ (80133cc <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 80133b6:	0018      	movs	r0, r3
 80133b8:	f002 f87d 	bl	80154b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80133bc:	46c0      	nop			@ (mov r8, r8)
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}
 80133c2:	46c0      	nop			@ (mov r8, r8)
 80133c4:	200010ac 	.word	0x200010ac
 80133c8:	20002454 	.word	0x20002454
 80133cc:	2000249c 	.word	0x2000249c

080133d0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80133d4:	4b03      	ldr	r3, [pc, #12]	@ (80133e4 <USART4_5_IRQHandler+0x14>)
 80133d6:	0018      	movs	r0, r3
 80133d8:	f00a f9ea 	bl	801d7b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80133dc:	46c0      	nop			@ (mov r8, r8)
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}
 80133e2:	46c0      	nop			@ (mov r8, r8)
 80133e4:	2000239c 	.word	0x2000239c

080133e8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 80133ec:	4b09      	ldr	r3, [pc, #36]	@ (8013414 <I2C1_IRQHandler+0x2c>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	699a      	ldr	r2, [r3, #24]
 80133f2:	23e0      	movs	r3, #224	@ 0xe0
 80133f4:	00db      	lsls	r3, r3, #3
 80133f6:	4013      	ands	r3, r2
 80133f8:	d004      	beq.n	8013404 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80133fa:	4b06      	ldr	r3, [pc, #24]	@ (8013414 <I2C1_IRQHandler+0x2c>)
 80133fc:	0018      	movs	r0, r3
 80133fe:	f003 fc13 	bl	8016c28 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8013402:	e003      	b.n	801340c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8013404:	4b03      	ldr	r3, [pc, #12]	@ (8013414 <I2C1_IRQHandler+0x2c>)
 8013406:	0018      	movs	r0, r3
 8013408:	f003 fbf4 	bl	8016bf4 <HAL_I2C_EV_IRQHandler>
}
 801340c:	46c0      	nop			@ (mov r8, r8)
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	46c0      	nop			@ (mov r8, r8)
 8013414:	20000f38 	.word	0x20000f38

08013418 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 801341c:	4b03      	ldr	r3, [pc, #12]	@ (801342c <USART1_IRQHandler+0x14>)
 801341e:	0018      	movs	r0, r3
 8013420:	f00a f9c6 	bl	801d7b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8013424:	46c0      	nop			@ (mov r8, r8)
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}
 801342a:	46c0      	nop			@ (mov r8, r8)
 801342c:	200022e4 	.word	0x200022e4

08013430 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8013434:	4b03      	ldr	r3, [pc, #12]	@ (8013444 <USB_IRQHandler+0x14>)
 8013436:	0018      	movs	r0, r3
 8013438:	f006 f90e 	bl	8019658 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 801343c:	46c0      	nop			@ (mov r8, r8)
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
 8013442:	46c0      	nop			@ (mov r8, r8)
 8013444:	200032b8 	.word	0x200032b8

08013448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	af00      	add	r7, sp, #0
  return 1;
 801344c:	2301      	movs	r3, #1
}
 801344e:	0018      	movs	r0, r3
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}

08013454 <_kill>:

int _kill(int pid, int sig)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
 801345c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801345e:	f013 f8a7 	bl	80265b0 <__errno>
 8013462:	0003      	movs	r3, r0
 8013464:	2216      	movs	r2, #22
 8013466:	601a      	str	r2, [r3, #0]
  return -1;
 8013468:	2301      	movs	r3, #1
 801346a:	425b      	negs	r3, r3
}
 801346c:	0018      	movs	r0, r3
 801346e:	46bd      	mov	sp, r7
 8013470:	b002      	add	sp, #8
 8013472:	bd80      	pop	{r7, pc}

08013474 <_exit>:

void _exit (int status)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801347c:	2301      	movs	r3, #1
 801347e:	425a      	negs	r2, r3
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	0011      	movs	r1, r2
 8013484:	0018      	movs	r0, r3
 8013486:	f7ff ffe5 	bl	8013454 <_kill>
  while (1) {}    /* Make sure we hang here */
 801348a:	46c0      	nop			@ (mov r8, r8)
 801348c:	e7fd      	b.n	801348a <_exit+0x16>

0801348e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801348e:	b580      	push	{r7, lr}
 8013490:	b086      	sub	sp, #24
 8013492:	af00      	add	r7, sp, #0
 8013494:	60f8      	str	r0, [r7, #12]
 8013496:	60b9      	str	r1, [r7, #8]
 8013498:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801349a:	2300      	movs	r3, #0
 801349c:	617b      	str	r3, [r7, #20]
 801349e:	e00a      	b.n	80134b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80134a0:	e000      	b.n	80134a4 <_read+0x16>
 80134a2:	bf00      	nop
 80134a4:	0001      	movs	r1, r0
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	1c5a      	adds	r2, r3, #1
 80134aa:	60ba      	str	r2, [r7, #8]
 80134ac:	b2ca      	uxtb	r2, r1
 80134ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	3301      	adds	r3, #1
 80134b4:	617b      	str	r3, [r7, #20]
 80134b6:	697a      	ldr	r2, [r7, #20]
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	dbf0      	blt.n	80134a0 <_read+0x12>
  }

  return len;
 80134be:	687b      	ldr	r3, [r7, #4]
}
 80134c0:	0018      	movs	r0, r3
 80134c2:	46bd      	mov	sp, r7
 80134c4:	b006      	add	sp, #24
 80134c6:	bd80      	pop	{r7, pc}

080134c8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b082      	sub	sp, #8
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80134d0:	2301      	movs	r3, #1
 80134d2:	425b      	negs	r3, r3
}
 80134d4:	0018      	movs	r0, r3
 80134d6:	46bd      	mov	sp, r7
 80134d8:	b002      	add	sp, #8
 80134da:	bd80      	pop	{r7, pc}

080134dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	2280      	movs	r2, #128	@ 0x80
 80134ea:	0192      	lsls	r2, r2, #6
 80134ec:	605a      	str	r2, [r3, #4]
  return 0;
 80134ee:	2300      	movs	r3, #0
}
 80134f0:	0018      	movs	r0, r3
 80134f2:	46bd      	mov	sp, r7
 80134f4:	b002      	add	sp, #8
 80134f6:	bd80      	pop	{r7, pc}

080134f8 <_isatty>:

int _isatty(int file)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8013500:	2301      	movs	r3, #1
}
 8013502:	0018      	movs	r0, r3
 8013504:	46bd      	mov	sp, r7
 8013506:	b002      	add	sp, #8
 8013508:	bd80      	pop	{r7, pc}

0801350a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801350a:	b580      	push	{r7, lr}
 801350c:	b084      	sub	sp, #16
 801350e:	af00      	add	r7, sp, #0
 8013510:	60f8      	str	r0, [r7, #12]
 8013512:	60b9      	str	r1, [r7, #8]
 8013514:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8013516:	2300      	movs	r3, #0
}
 8013518:	0018      	movs	r0, r3
 801351a:	46bd      	mov	sp, r7
 801351c:	b004      	add	sp, #16
 801351e:	bd80      	pop	{r7, pc}

08013520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b086      	sub	sp, #24
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013528:	4a14      	ldr	r2, [pc, #80]	@ (801357c <_sbrk+0x5c>)
 801352a:	4b15      	ldr	r3, [pc, #84]	@ (8013580 <_sbrk+0x60>)
 801352c:	1ad3      	subs	r3, r2, r3
 801352e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8013534:	4b13      	ldr	r3, [pc, #76]	@ (8013584 <_sbrk+0x64>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d102      	bne.n	8013542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801353c:	4b11      	ldr	r3, [pc, #68]	@ (8013584 <_sbrk+0x64>)
 801353e:	4a12      	ldr	r2, [pc, #72]	@ (8013588 <_sbrk+0x68>)
 8013540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8013542:	4b10      	ldr	r3, [pc, #64]	@ (8013584 <_sbrk+0x64>)
 8013544:	681a      	ldr	r2, [r3, #0]
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	18d3      	adds	r3, r2, r3
 801354a:	693a      	ldr	r2, [r7, #16]
 801354c:	429a      	cmp	r2, r3
 801354e:	d207      	bcs.n	8013560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8013550:	f013 f82e 	bl	80265b0 <__errno>
 8013554:	0003      	movs	r3, r0
 8013556:	220c      	movs	r2, #12
 8013558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801355a:	2301      	movs	r3, #1
 801355c:	425b      	negs	r3, r3
 801355e:	e009      	b.n	8013574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8013560:	4b08      	ldr	r3, [pc, #32]	@ (8013584 <_sbrk+0x64>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8013566:	4b07      	ldr	r3, [pc, #28]	@ (8013584 <_sbrk+0x64>)
 8013568:	681a      	ldr	r2, [r3, #0]
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	18d2      	adds	r2, r2, r3
 801356e:	4b05      	ldr	r3, [pc, #20]	@ (8013584 <_sbrk+0x64>)
 8013570:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8013572:	68fb      	ldr	r3, [r7, #12]
}
 8013574:	0018      	movs	r0, r3
 8013576:	46bd      	mov	sp, r7
 8013578:	b006      	add	sp, #24
 801357a:	bd80      	pop	{r7, pc}
 801357c:	20005000 	.word	0x20005000
 8013580:	00000400 	.word	0x00000400
 8013584:	20002168 	.word	0x20002168
 8013588:	20003918 	.word	0x20003918

0801358c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8013590:	46c0      	nop			@ (mov r8, r8)
 8013592:	46bd      	mov	sp, r7
 8013594:	bd80      	pop	{r7, pc}
	...

08013598 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b086      	sub	sp, #24
 801359c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801359e:	2310      	movs	r3, #16
 80135a0:	18fb      	adds	r3, r7, r3
 80135a2:	0018      	movs	r0, r3
 80135a4:	2308      	movs	r3, #8
 80135a6:	001a      	movs	r2, r3
 80135a8:	2100      	movs	r1, #0
 80135aa:	f012 ff5d 	bl	8026468 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80135ae:	003b      	movs	r3, r7
 80135b0:	0018      	movs	r0, r3
 80135b2:	2310      	movs	r3, #16
 80135b4:	001a      	movs	r2, r3
 80135b6:	2100      	movs	r1, #0
 80135b8:	f012 ff56 	bl	8026468 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80135bc:	4b2e      	ldr	r3, [pc, #184]	@ (8013678 <MX_TIM2_Init+0xe0>)
 80135be:	2280      	movs	r2, #128	@ 0x80
 80135c0:	05d2      	lsls	r2, r2, #23
 80135c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80135c4:	4b2c      	ldr	r3, [pc, #176]	@ (8013678 <MX_TIM2_Init+0xe0>)
 80135c6:	2200      	movs	r2, #0
 80135c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80135ca:	4b2b      	ldr	r3, [pc, #172]	@ (8013678 <MX_TIM2_Init+0xe0>)
 80135cc:	2200      	movs	r2, #0
 80135ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80135d0:	4b29      	ldr	r3, [pc, #164]	@ (8013678 <MX_TIM2_Init+0xe0>)
 80135d2:	4a2a      	ldr	r2, [pc, #168]	@ (801367c <MX_TIM2_Init+0xe4>)
 80135d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80135d6:	4b28      	ldr	r3, [pc, #160]	@ (8013678 <MX_TIM2_Init+0xe0>)
 80135d8:	2200      	movs	r2, #0
 80135da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80135dc:	4b26      	ldr	r3, [pc, #152]	@ (8013678 <MX_TIM2_Init+0xe0>)
 80135de:	2200      	movs	r2, #0
 80135e0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80135e2:	4b25      	ldr	r3, [pc, #148]	@ (8013678 <MX_TIM2_Init+0xe0>)
 80135e4:	0018      	movs	r0, r3
 80135e6:	f009 faf7 	bl	801cbd8 <HAL_TIM_PWM_Init>
 80135ea:	1e03      	subs	r3, r0, #0
 80135ec:	d001      	beq.n	80135f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80135ee:	f7f9 fedb 	bl	800d3a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80135f2:	2110      	movs	r1, #16
 80135f4:	187b      	adds	r3, r7, r1
 80135f6:	2200      	movs	r2, #0
 80135f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80135fa:	187b      	adds	r3, r7, r1
 80135fc:	2200      	movs	r2, #0
 80135fe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8013600:	187a      	adds	r2, r7, r1
 8013602:	4b1d      	ldr	r3, [pc, #116]	@ (8013678 <MX_TIM2_Init+0xe0>)
 8013604:	0011      	movs	r1, r2
 8013606:	0018      	movs	r0, r3
 8013608:	f009 fe04 	bl	801d214 <HAL_TIMEx_MasterConfigSynchronization>
 801360c:	1e03      	subs	r3, r0, #0
 801360e:	d001      	beq.n	8013614 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8013610:	f7f9 feca 	bl	800d3a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013614:	003b      	movs	r3, r7
 8013616:	2260      	movs	r2, #96	@ 0x60
 8013618:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 801361a:	003b      	movs	r3, r7
 801361c:	2200      	movs	r2, #0
 801361e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013620:	003b      	movs	r3, r7
 8013622:	2200      	movs	r2, #0
 8013624:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013626:	003b      	movs	r3, r7
 8013628:	2200      	movs	r2, #0
 801362a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801362c:	0039      	movs	r1, r7
 801362e:	4b12      	ldr	r3, [pc, #72]	@ (8013678 <MX_TIM2_Init+0xe0>)
 8013630:	2200      	movs	r2, #0
 8013632:	0018      	movs	r0, r3
 8013634:	f009 fba2 	bl	801cd7c <HAL_TIM_PWM_ConfigChannel>
 8013638:	1e03      	subs	r3, r0, #0
 801363a:	d001      	beq.n	8013640 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 801363c:	f7f9 feb4 	bl	800d3a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013640:	0039      	movs	r1, r7
 8013642:	4b0d      	ldr	r3, [pc, #52]	@ (8013678 <MX_TIM2_Init+0xe0>)
 8013644:	2208      	movs	r2, #8
 8013646:	0018      	movs	r0, r3
 8013648:	f009 fb98 	bl	801cd7c <HAL_TIM_PWM_ConfigChannel>
 801364c:	1e03      	subs	r3, r0, #0
 801364e:	d001      	beq.n	8013654 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8013650:	f7f9 feaa 	bl	800d3a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013654:	0039      	movs	r1, r7
 8013656:	4b08      	ldr	r3, [pc, #32]	@ (8013678 <MX_TIM2_Init+0xe0>)
 8013658:	220c      	movs	r2, #12
 801365a:	0018      	movs	r0, r3
 801365c:	f009 fb8e 	bl	801cd7c <HAL_TIM_PWM_ConfigChannel>
 8013660:	1e03      	subs	r3, r0, #0
 8013662:	d001      	beq.n	8013668 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8013664:	f7f9 fea0 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8013668:	4b03      	ldr	r3, [pc, #12]	@ (8013678 <MX_TIM2_Init+0xe0>)
 801366a:	0018      	movs	r0, r3
 801366c:	f000 f8fe 	bl	801386c <HAL_TIM_MspPostInit>

}
 8013670:	46c0      	nop			@ (mov r8, r8)
 8013672:	46bd      	mov	sp, r7
 8013674:	b006      	add	sp, #24
 8013676:	bd80      	pop	{r7, pc}
 8013678:	2000216c 	.word	0x2000216c
 801367c:	0000ffff 	.word	0x0000ffff

08013680 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b086      	sub	sp, #24
 8013684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013686:	2310      	movs	r3, #16
 8013688:	18fb      	adds	r3, r7, r3
 801368a:	0018      	movs	r0, r3
 801368c:	2308      	movs	r3, #8
 801368e:	001a      	movs	r2, r3
 8013690:	2100      	movs	r1, #0
 8013692:	f012 fee9 	bl	8026468 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013696:	003b      	movs	r3, r7
 8013698:	0018      	movs	r0, r3
 801369a:	2310      	movs	r3, #16
 801369c:	001a      	movs	r2, r3
 801369e:	2100      	movs	r1, #0
 80136a0:	f012 fee2 	bl	8026468 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80136a4:	4b32      	ldr	r3, [pc, #200]	@ (8013770 <MX_TIM3_Init+0xf0>)
 80136a6:	4a33      	ldr	r2, [pc, #204]	@ (8013774 <MX_TIM3_Init+0xf4>)
 80136a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80136aa:	4b31      	ldr	r3, [pc, #196]	@ (8013770 <MX_TIM3_Init+0xf0>)
 80136ac:	2200      	movs	r2, #0
 80136ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80136b0:	4b2f      	ldr	r3, [pc, #188]	@ (8013770 <MX_TIM3_Init+0xf0>)
 80136b2:	2200      	movs	r2, #0
 80136b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80136b6:	4b2e      	ldr	r3, [pc, #184]	@ (8013770 <MX_TIM3_Init+0xf0>)
 80136b8:	4a2f      	ldr	r2, [pc, #188]	@ (8013778 <MX_TIM3_Init+0xf8>)
 80136ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80136bc:	4b2c      	ldr	r3, [pc, #176]	@ (8013770 <MX_TIM3_Init+0xf0>)
 80136be:	2200      	movs	r2, #0
 80136c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80136c2:	4b2b      	ldr	r3, [pc, #172]	@ (8013770 <MX_TIM3_Init+0xf0>)
 80136c4:	2200      	movs	r2, #0
 80136c6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80136c8:	4b29      	ldr	r3, [pc, #164]	@ (8013770 <MX_TIM3_Init+0xf0>)
 80136ca:	0018      	movs	r0, r3
 80136cc:	f009 fa84 	bl	801cbd8 <HAL_TIM_PWM_Init>
 80136d0:	1e03      	subs	r3, r0, #0
 80136d2:	d001      	beq.n	80136d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80136d4:	f7f9 fe68 	bl	800d3a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80136d8:	2110      	movs	r1, #16
 80136da:	187b      	adds	r3, r7, r1
 80136dc:	2200      	movs	r2, #0
 80136de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80136e0:	187b      	adds	r3, r7, r1
 80136e2:	2200      	movs	r2, #0
 80136e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80136e6:	187a      	adds	r2, r7, r1
 80136e8:	4b21      	ldr	r3, [pc, #132]	@ (8013770 <MX_TIM3_Init+0xf0>)
 80136ea:	0011      	movs	r1, r2
 80136ec:	0018      	movs	r0, r3
 80136ee:	f009 fd91 	bl	801d214 <HAL_TIMEx_MasterConfigSynchronization>
 80136f2:	1e03      	subs	r3, r0, #0
 80136f4:	d001      	beq.n	80136fa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80136f6:	f7f9 fe57 	bl	800d3a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80136fa:	003b      	movs	r3, r7
 80136fc:	2260      	movs	r2, #96	@ 0x60
 80136fe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8013700:	003b      	movs	r3, r7
 8013702:	2200      	movs	r2, #0
 8013704:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013706:	003b      	movs	r3, r7
 8013708:	2200      	movs	r2, #0
 801370a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801370c:	003b      	movs	r3, r7
 801370e:	2200      	movs	r2, #0
 8013710:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013712:	0039      	movs	r1, r7
 8013714:	4b16      	ldr	r3, [pc, #88]	@ (8013770 <MX_TIM3_Init+0xf0>)
 8013716:	2200      	movs	r2, #0
 8013718:	0018      	movs	r0, r3
 801371a:	f009 fb2f 	bl	801cd7c <HAL_TIM_PWM_ConfigChannel>
 801371e:	1e03      	subs	r3, r0, #0
 8013720:	d001      	beq.n	8013726 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8013722:	f7f9 fe41 	bl	800d3a8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8013726:	4b12      	ldr	r3, [pc, #72]	@ (8013770 <MX_TIM3_Init+0xf0>)
 8013728:	2104      	movs	r1, #4
 801372a:	0018      	movs	r0, r3
 801372c:	f009 fdd0 	bl	801d2d0 <HAL_TIMEx_RemapConfig>
 8013730:	1e03      	subs	r3, r0, #0
 8013732:	d001      	beq.n	8013738 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8013734:	f7f9 fe38 	bl	800d3a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013738:	0039      	movs	r1, r7
 801373a:	4b0d      	ldr	r3, [pc, #52]	@ (8013770 <MX_TIM3_Init+0xf0>)
 801373c:	2204      	movs	r2, #4
 801373e:	0018      	movs	r0, r3
 8013740:	f009 fb1c 	bl	801cd7c <HAL_TIM_PWM_ConfigChannel>
 8013744:	1e03      	subs	r3, r0, #0
 8013746:	d001      	beq.n	801374c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8013748:	f7f9 fe2e 	bl	800d3a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801374c:	0039      	movs	r1, r7
 801374e:	4b08      	ldr	r3, [pc, #32]	@ (8013770 <MX_TIM3_Init+0xf0>)
 8013750:	2208      	movs	r2, #8
 8013752:	0018      	movs	r0, r3
 8013754:	f009 fb12 	bl	801cd7c <HAL_TIM_PWM_ConfigChannel>
 8013758:	1e03      	subs	r3, r0, #0
 801375a:	d001      	beq.n	8013760 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 801375c:	f7f9 fe24 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8013760:	4b03      	ldr	r3, [pc, #12]	@ (8013770 <MX_TIM3_Init+0xf0>)
 8013762:	0018      	movs	r0, r3
 8013764:	f000 f882 	bl	801386c <HAL_TIM_MspPostInit>

}
 8013768:	46c0      	nop			@ (mov r8, r8)
 801376a:	46bd      	mov	sp, r7
 801376c:	b006      	add	sp, #24
 801376e:	bd80      	pop	{r7, pc}
 8013770:	200021ac 	.word	0x200021ac
 8013774:	40000400 	.word	0x40000400
 8013778:	0000ffff 	.word	0x0000ffff

0801377c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b082      	sub	sp, #8
 8013780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013782:	003b      	movs	r3, r7
 8013784:	0018      	movs	r0, r3
 8013786:	2308      	movs	r3, #8
 8013788:	001a      	movs	r2, r3
 801378a:	2100      	movs	r1, #0
 801378c:	f012 fe6c 	bl	8026468 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8013790:	4b15      	ldr	r3, [pc, #84]	@ (80137e8 <MX_TIM6_Init+0x6c>)
 8013792:	4a16      	ldr	r2, [pc, #88]	@ (80137ec <MX_TIM6_Init+0x70>)
 8013794:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8013796:	4b14      	ldr	r3, [pc, #80]	@ (80137e8 <MX_TIM6_Init+0x6c>)
 8013798:	220a      	movs	r2, #10
 801379a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801379c:	4b12      	ldr	r3, [pc, #72]	@ (80137e8 <MX_TIM6_Init+0x6c>)
 801379e:	2200      	movs	r2, #0
 80137a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80137a2:	4b11      	ldr	r3, [pc, #68]	@ (80137e8 <MX_TIM6_Init+0x6c>)
 80137a4:	4a12      	ldr	r2, [pc, #72]	@ (80137f0 <MX_TIM6_Init+0x74>)
 80137a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80137a8:	4b0f      	ldr	r3, [pc, #60]	@ (80137e8 <MX_TIM6_Init+0x6c>)
 80137aa:	2200      	movs	r2, #0
 80137ac:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80137ae:	4b0e      	ldr	r3, [pc, #56]	@ (80137e8 <MX_TIM6_Init+0x6c>)
 80137b0:	0018      	movs	r0, r3
 80137b2:	f009 f969 	bl	801ca88 <HAL_TIM_Base_Init>
 80137b6:	1e03      	subs	r3, r0, #0
 80137b8:	d001      	beq.n	80137be <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80137ba:	f7f9 fdf5 	bl	800d3a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80137be:	003b      	movs	r3, r7
 80137c0:	2200      	movs	r2, #0
 80137c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80137c4:	003b      	movs	r3, r7
 80137c6:	2200      	movs	r2, #0
 80137c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80137ca:	003a      	movs	r2, r7
 80137cc:	4b06      	ldr	r3, [pc, #24]	@ (80137e8 <MX_TIM6_Init+0x6c>)
 80137ce:	0011      	movs	r1, r2
 80137d0:	0018      	movs	r0, r3
 80137d2:	f009 fd1f 	bl	801d214 <HAL_TIMEx_MasterConfigSynchronization>
 80137d6:	1e03      	subs	r3, r0, #0
 80137d8:	d001      	beq.n	80137de <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80137da:	f7f9 fde5 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80137de:	46c0      	nop			@ (mov r8, r8)
 80137e0:	46bd      	mov	sp, r7
 80137e2:	b002      	add	sp, #8
 80137e4:	bd80      	pop	{r7, pc}
 80137e6:	46c0      	nop			@ (mov r8, r8)
 80137e8:	200021ec 	.word	0x200021ec
 80137ec:	40001000 	.word	0x40001000
 80137f0:	0000ffff 	.word	0x0000ffff

080137f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	681a      	ldr	r2, [r3, #0]
 8013800:	2380      	movs	r3, #128	@ 0x80
 8013802:	05db      	lsls	r3, r3, #23
 8013804:	429a      	cmp	r2, r3
 8013806:	d106      	bne.n	8013816 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8013808:	4b0a      	ldr	r3, [pc, #40]	@ (8013834 <HAL_TIM_PWM_MspInit+0x40>)
 801380a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801380c:	4b09      	ldr	r3, [pc, #36]	@ (8013834 <HAL_TIM_PWM_MspInit+0x40>)
 801380e:	2101      	movs	r1, #1
 8013810:	430a      	orrs	r2, r1
 8013812:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8013814:	e00a      	b.n	801382c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	4a07      	ldr	r2, [pc, #28]	@ (8013838 <HAL_TIM_PWM_MspInit+0x44>)
 801381c:	4293      	cmp	r3, r2
 801381e:	d105      	bne.n	801382c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8013820:	4b04      	ldr	r3, [pc, #16]	@ (8013834 <HAL_TIM_PWM_MspInit+0x40>)
 8013822:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013824:	4b03      	ldr	r3, [pc, #12]	@ (8013834 <HAL_TIM_PWM_MspInit+0x40>)
 8013826:	2102      	movs	r1, #2
 8013828:	430a      	orrs	r2, r1
 801382a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 801382c:	46c0      	nop			@ (mov r8, r8)
 801382e:	46bd      	mov	sp, r7
 8013830:	b002      	add	sp, #8
 8013832:	bd80      	pop	{r7, pc}
 8013834:	40021000 	.word	0x40021000
 8013838:	40000400 	.word	0x40000400

0801383c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b082      	sub	sp, #8
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	4a06      	ldr	r2, [pc, #24]	@ (8013864 <HAL_TIM_Base_MspInit+0x28>)
 801384a:	4293      	cmp	r3, r2
 801384c:	d105      	bne.n	801385a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801384e:	4b06      	ldr	r3, [pc, #24]	@ (8013868 <HAL_TIM_Base_MspInit+0x2c>)
 8013850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013852:	4b05      	ldr	r3, [pc, #20]	@ (8013868 <HAL_TIM_Base_MspInit+0x2c>)
 8013854:	2110      	movs	r1, #16
 8013856:	430a      	orrs	r2, r1
 8013858:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 801385a:	46c0      	nop			@ (mov r8, r8)
 801385c:	46bd      	mov	sp, r7
 801385e:	b002      	add	sp, #8
 8013860:	bd80      	pop	{r7, pc}
 8013862:	46c0      	nop			@ (mov r8, r8)
 8013864:	40001000 	.word	0x40001000
 8013868:	40021000 	.word	0x40021000

0801386c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 801386c:	b590      	push	{r4, r7, lr}
 801386e:	b08b      	sub	sp, #44	@ 0x2c
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013874:	2414      	movs	r4, #20
 8013876:	193b      	adds	r3, r7, r4
 8013878:	0018      	movs	r0, r3
 801387a:	2314      	movs	r3, #20
 801387c:	001a      	movs	r2, r3
 801387e:	2100      	movs	r1, #0
 8013880:	f012 fdf2 	bl	8026468 <memset>
  if(timHandle->Instance==TIM2)
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681a      	ldr	r2, [r3, #0]
 8013888:	2380      	movs	r3, #128	@ 0x80
 801388a:	05db      	lsls	r3, r3, #23
 801388c:	429a      	cmp	r2, r3
 801388e:	d123      	bne.n	80138d8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013890:	4b27      	ldr	r3, [pc, #156]	@ (8013930 <HAL_TIM_MspPostInit+0xc4>)
 8013892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013894:	4b26      	ldr	r3, [pc, #152]	@ (8013930 <HAL_TIM_MspPostInit+0xc4>)
 8013896:	2101      	movs	r1, #1
 8013898:	430a      	orrs	r2, r1
 801389a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801389c:	4b24      	ldr	r3, [pc, #144]	@ (8013930 <HAL_TIM_MspPostInit+0xc4>)
 801389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138a0:	2201      	movs	r2, #1
 80138a2:	4013      	ands	r3, r2
 80138a4:	613b      	str	r3, [r7, #16]
 80138a6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80138a8:	0021      	movs	r1, r4
 80138aa:	187b      	adds	r3, r7, r1
 80138ac:	220d      	movs	r2, #13
 80138ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80138b0:	187b      	adds	r3, r7, r1
 80138b2:	2202      	movs	r2, #2
 80138b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138b6:	187b      	adds	r3, r7, r1
 80138b8:	2200      	movs	r2, #0
 80138ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80138bc:	187b      	adds	r3, r7, r1
 80138be:	2200      	movs	r2, #0
 80138c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80138c2:	187b      	adds	r3, r7, r1
 80138c4:	2202      	movs	r2, #2
 80138c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80138c8:	187a      	adds	r2, r7, r1
 80138ca:	23a0      	movs	r3, #160	@ 0xa0
 80138cc:	05db      	lsls	r3, r3, #23
 80138ce:	0011      	movs	r1, r2
 80138d0:	0018      	movs	r0, r3
 80138d2:	f002 f8a7 	bl	8015a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80138d6:	e027      	b.n	8013928 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	4a15      	ldr	r2, [pc, #84]	@ (8013934 <HAL_TIM_MspPostInit+0xc8>)
 80138de:	4293      	cmp	r3, r2
 80138e0:	d122      	bne.n	8013928 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80138e2:	4b13      	ldr	r3, [pc, #76]	@ (8013930 <HAL_TIM_MspPostInit+0xc4>)
 80138e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138e6:	4b12      	ldr	r3, [pc, #72]	@ (8013930 <HAL_TIM_MspPostInit+0xc4>)
 80138e8:	2104      	movs	r1, #4
 80138ea:	430a      	orrs	r2, r1
 80138ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80138ee:	4b10      	ldr	r3, [pc, #64]	@ (8013930 <HAL_TIM_MspPostInit+0xc4>)
 80138f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138f2:	2204      	movs	r2, #4
 80138f4:	4013      	ands	r3, r2
 80138f6:	60fb      	str	r3, [r7, #12]
 80138f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80138fa:	2114      	movs	r1, #20
 80138fc:	187b      	adds	r3, r7, r1
 80138fe:	22e0      	movs	r2, #224	@ 0xe0
 8013900:	0052      	lsls	r2, r2, #1
 8013902:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013904:	187b      	adds	r3, r7, r1
 8013906:	2202      	movs	r2, #2
 8013908:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801390a:	187b      	adds	r3, r7, r1
 801390c:	2200      	movs	r2, #0
 801390e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013910:	187b      	adds	r3, r7, r1
 8013912:	2200      	movs	r2, #0
 8013914:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8013916:	187b      	adds	r3, r7, r1
 8013918:	2202      	movs	r2, #2
 801391a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801391c:	187b      	adds	r3, r7, r1
 801391e:	4a06      	ldr	r2, [pc, #24]	@ (8013938 <HAL_TIM_MspPostInit+0xcc>)
 8013920:	0019      	movs	r1, r3
 8013922:	0010      	movs	r0, r2
 8013924:	f002 f87e 	bl	8015a24 <HAL_GPIO_Init>
}
 8013928:	46c0      	nop			@ (mov r8, r8)
 801392a:	46bd      	mov	sp, r7
 801392c:	b00b      	add	sp, #44	@ 0x2c
 801392e:	bd90      	pop	{r4, r7, pc}
 8013930:	40021000 	.word	0x40021000
 8013934:	40000400 	.word	0x40000400
 8013938:	50000800 	.word	0x50000800

0801393c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8013940:	4b17      	ldr	r3, [pc, #92]	@ (80139a0 <MX_LPUART1_UART_Init+0x64>)
 8013942:	4a18      	ldr	r2, [pc, #96]	@ (80139a4 <MX_LPUART1_UART_Init+0x68>)
 8013944:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8013946:	4b16      	ldr	r3, [pc, #88]	@ (80139a0 <MX_LPUART1_UART_Init+0x64>)
 8013948:	22e1      	movs	r2, #225	@ 0xe1
 801394a:	0252      	lsls	r2, r2, #9
 801394c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 801394e:	4b14      	ldr	r3, [pc, #80]	@ (80139a0 <MX_LPUART1_UART_Init+0x64>)
 8013950:	2200      	movs	r2, #0
 8013952:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8013954:	4b12      	ldr	r3, [pc, #72]	@ (80139a0 <MX_LPUART1_UART_Init+0x64>)
 8013956:	2200      	movs	r2, #0
 8013958:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 801395a:	4b11      	ldr	r3, [pc, #68]	@ (80139a0 <MX_LPUART1_UART_Init+0x64>)
 801395c:	2200      	movs	r2, #0
 801395e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8013960:	4b0f      	ldr	r3, [pc, #60]	@ (80139a0 <MX_LPUART1_UART_Init+0x64>)
 8013962:	220c      	movs	r2, #12
 8013964:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013966:	4b0e      	ldr	r3, [pc, #56]	@ (80139a0 <MX_LPUART1_UART_Init+0x64>)
 8013968:	2200      	movs	r2, #0
 801396a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801396c:	4b0c      	ldr	r3, [pc, #48]	@ (80139a0 <MX_LPUART1_UART_Init+0x64>)
 801396e:	2200      	movs	r2, #0
 8013970:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8013972:	4b0b      	ldr	r3, [pc, #44]	@ (80139a0 <MX_LPUART1_UART_Init+0x64>)
 8013974:	2218      	movs	r2, #24
 8013976:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8013978:	4b09      	ldr	r3, [pc, #36]	@ (80139a0 <MX_LPUART1_UART_Init+0x64>)
 801397a:	2280      	movs	r2, #128	@ 0x80
 801397c:	0212      	lsls	r2, r2, #8
 801397e:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8013980:	4b07      	ldr	r3, [pc, #28]	@ (80139a0 <MX_LPUART1_UART_Init+0x64>)
 8013982:	2280      	movs	r2, #128	@ 0x80
 8013984:	0152      	lsls	r2, r2, #5
 8013986:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8013988:	4b05      	ldr	r3, [pc, #20]	@ (80139a0 <MX_LPUART1_UART_Init+0x64>)
 801398a:	0018      	movs	r0, r3
 801398c:	f009 fcbe 	bl	801d30c <HAL_UART_Init>
 8013990:	1e03      	subs	r3, r0, #0
 8013992:	d001      	beq.n	8013998 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8013994:	f7f9 fd08 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8013998:	46c0      	nop			@ (mov r8, r8)
 801399a:	46bd      	mov	sp, r7
 801399c:	bd80      	pop	{r7, pc}
 801399e:	46c0      	nop			@ (mov r8, r8)
 80139a0:	2000222c 	.word	0x2000222c
 80139a4:	40004800 	.word	0x40004800

080139a8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80139ac:	4b14      	ldr	r3, [pc, #80]	@ (8013a00 <MX_USART1_UART_Init+0x58>)
 80139ae:	4a15      	ldr	r2, [pc, #84]	@ (8013a04 <MX_USART1_UART_Init+0x5c>)
 80139b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80139b2:	4b13      	ldr	r3, [pc, #76]	@ (8013a00 <MX_USART1_UART_Init+0x58>)
 80139b4:	22e1      	movs	r2, #225	@ 0xe1
 80139b6:	0252      	lsls	r2, r2, #9
 80139b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80139ba:	4b11      	ldr	r3, [pc, #68]	@ (8013a00 <MX_USART1_UART_Init+0x58>)
 80139bc:	2200      	movs	r2, #0
 80139be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80139c0:	4b0f      	ldr	r3, [pc, #60]	@ (8013a00 <MX_USART1_UART_Init+0x58>)
 80139c2:	2200      	movs	r2, #0
 80139c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80139c6:	4b0e      	ldr	r3, [pc, #56]	@ (8013a00 <MX_USART1_UART_Init+0x58>)
 80139c8:	2200      	movs	r2, #0
 80139ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80139cc:	4b0c      	ldr	r3, [pc, #48]	@ (8013a00 <MX_USART1_UART_Init+0x58>)
 80139ce:	220c      	movs	r2, #12
 80139d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80139d2:	4b0b      	ldr	r3, [pc, #44]	@ (8013a00 <MX_USART1_UART_Init+0x58>)
 80139d4:	2200      	movs	r2, #0
 80139d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80139d8:	4b09      	ldr	r3, [pc, #36]	@ (8013a00 <MX_USART1_UART_Init+0x58>)
 80139da:	2200      	movs	r2, #0
 80139dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80139de:	4b08      	ldr	r3, [pc, #32]	@ (8013a00 <MX_USART1_UART_Init+0x58>)
 80139e0:	2200      	movs	r2, #0
 80139e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80139e4:	4b06      	ldr	r3, [pc, #24]	@ (8013a00 <MX_USART1_UART_Init+0x58>)
 80139e6:	2200      	movs	r2, #0
 80139e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80139ea:	4b05      	ldr	r3, [pc, #20]	@ (8013a00 <MX_USART1_UART_Init+0x58>)
 80139ec:	0018      	movs	r0, r3
 80139ee:	f009 fc8d 	bl	801d30c <HAL_UART_Init>
 80139f2:	1e03      	subs	r3, r0, #0
 80139f4:	d001      	beq.n	80139fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80139f6:	f7f9 fcd7 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80139fa:	46c0      	nop			@ (mov r8, r8)
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}
 8013a00:	200022e4 	.word	0x200022e4
 8013a04:	40013800 	.word	0x40013800

08013a08 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8013a0c:	4b14      	ldr	r3, [pc, #80]	@ (8013a60 <MX_USART4_UART_Init+0x58>)
 8013a0e:	4a15      	ldr	r2, [pc, #84]	@ (8013a64 <MX_USART4_UART_Init+0x5c>)
 8013a10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8013a12:	4b13      	ldr	r3, [pc, #76]	@ (8013a60 <MX_USART4_UART_Init+0x58>)
 8013a14:	22e1      	movs	r2, #225	@ 0xe1
 8013a16:	0252      	lsls	r2, r2, #9
 8013a18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8013a1a:	4b11      	ldr	r3, [pc, #68]	@ (8013a60 <MX_USART4_UART_Init+0x58>)
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8013a20:	4b0f      	ldr	r3, [pc, #60]	@ (8013a60 <MX_USART4_UART_Init+0x58>)
 8013a22:	2200      	movs	r2, #0
 8013a24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8013a26:	4b0e      	ldr	r3, [pc, #56]	@ (8013a60 <MX_USART4_UART_Init+0x58>)
 8013a28:	2200      	movs	r2, #0
 8013a2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8013a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8013a60 <MX_USART4_UART_Init+0x58>)
 8013a2e:	220c      	movs	r2, #12
 8013a30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a32:	4b0b      	ldr	r3, [pc, #44]	@ (8013a60 <MX_USART4_UART_Init+0x58>)
 8013a34:	2200      	movs	r2, #0
 8013a36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8013a38:	4b09      	ldr	r3, [pc, #36]	@ (8013a60 <MX_USART4_UART_Init+0x58>)
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013a3e:	4b08      	ldr	r3, [pc, #32]	@ (8013a60 <MX_USART4_UART_Init+0x58>)
 8013a40:	2200      	movs	r2, #0
 8013a42:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013a44:	4b06      	ldr	r3, [pc, #24]	@ (8013a60 <MX_USART4_UART_Init+0x58>)
 8013a46:	2200      	movs	r2, #0
 8013a48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8013a4a:	4b05      	ldr	r3, [pc, #20]	@ (8013a60 <MX_USART4_UART_Init+0x58>)
 8013a4c:	0018      	movs	r0, r3
 8013a4e:	f009 fc5d 	bl	801d30c <HAL_UART_Init>
 8013a52:	1e03      	subs	r3, r0, #0
 8013a54:	d001      	beq.n	8013a5a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8013a56:	f7f9 fca7 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8013a5a:	46c0      	nop			@ (mov r8, r8)
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bd80      	pop	{r7, pc}
 8013a60:	2000239c 	.word	0x2000239c
 8013a64:	40004c00 	.word	0x40004c00

08013a68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8013a68:	b590      	push	{r4, r7, lr}
 8013a6a:	b08d      	sub	sp, #52	@ 0x34
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013a70:	241c      	movs	r4, #28
 8013a72:	193b      	adds	r3, r7, r4
 8013a74:	0018      	movs	r0, r3
 8013a76:	2314      	movs	r3, #20
 8013a78:	001a      	movs	r2, r3
 8013a7a:	2100      	movs	r1, #0
 8013a7c:	f012 fcf4 	bl	8026468 <memset>
  if(uartHandle->Instance==LPUART1)
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	4a8b      	ldr	r2, [pc, #556]	@ (8013cb4 <HAL_UART_MspInit+0x24c>)
 8013a86:	4293      	cmp	r3, r2
 8013a88:	d129      	bne.n	8013ade <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8013a8a:	4b8b      	ldr	r3, [pc, #556]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013a8e:	4b8a      	ldr	r3, [pc, #552]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013a90:	2180      	movs	r1, #128	@ 0x80
 8013a92:	02c9      	lsls	r1, r1, #11
 8013a94:	430a      	orrs	r2, r1
 8013a96:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013a98:	4b87      	ldr	r3, [pc, #540]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a9c:	4b86      	ldr	r3, [pc, #536]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013a9e:	2104      	movs	r1, #4
 8013aa0:	430a      	orrs	r2, r1
 8013aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013aa4:	4b84      	ldr	r3, [pc, #528]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013aa8:	2204      	movs	r2, #4
 8013aaa:	4013      	ands	r3, r2
 8013aac:	61bb      	str	r3, [r7, #24]
 8013aae:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013ab0:	0021      	movs	r1, r4
 8013ab2:	187b      	adds	r3, r7, r1
 8013ab4:	2203      	movs	r2, #3
 8013ab6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ab8:	187b      	adds	r3, r7, r1
 8013aba:	2202      	movs	r2, #2
 8013abc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013abe:	187b      	adds	r3, r7, r1
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013ac4:	187b      	adds	r3, r7, r1
 8013ac6:	2203      	movs	r2, #3
 8013ac8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8013aca:	187b      	adds	r3, r7, r1
 8013acc:	2206      	movs	r2, #6
 8013ace:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013ad0:	187b      	adds	r3, r7, r1
 8013ad2:	4a7a      	ldr	r2, [pc, #488]	@ (8013cbc <HAL_UART_MspInit+0x254>)
 8013ad4:	0019      	movs	r1, r3
 8013ad6:	0010      	movs	r0, r2
 8013ad8:	f001 ffa4 	bl	8015a24 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8013adc:	e0e5      	b.n	8013caa <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	4a77      	ldr	r2, [pc, #476]	@ (8013cc0 <HAL_UART_MspInit+0x258>)
 8013ae4:	4293      	cmp	r3, r2
 8013ae6:	d133      	bne.n	8013b50 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8013ae8:	4b73      	ldr	r3, [pc, #460]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013aec:	4b72      	ldr	r3, [pc, #456]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013aee:	2180      	movs	r1, #128	@ 0x80
 8013af0:	01c9      	lsls	r1, r1, #7
 8013af2:	430a      	orrs	r2, r1
 8013af4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013af6:	4b70      	ldr	r3, [pc, #448]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013afa:	4b6f      	ldr	r3, [pc, #444]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013afc:	2101      	movs	r1, #1
 8013afe:	430a      	orrs	r2, r1
 8013b00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013b02:	4b6d      	ldr	r3, [pc, #436]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b06:	2201      	movs	r2, #1
 8013b08:	4013      	ands	r3, r2
 8013b0a:	617b      	str	r3, [r7, #20]
 8013b0c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013b0e:	211c      	movs	r1, #28
 8013b10:	187b      	adds	r3, r7, r1
 8013b12:	22c0      	movs	r2, #192	@ 0xc0
 8013b14:	00d2      	lsls	r2, r2, #3
 8013b16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b18:	187b      	adds	r3, r7, r1
 8013b1a:	2202      	movs	r2, #2
 8013b1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b1e:	187b      	adds	r3, r7, r1
 8013b20:	2200      	movs	r2, #0
 8013b22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b24:	187b      	adds	r3, r7, r1
 8013b26:	2203      	movs	r2, #3
 8013b28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8013b2a:	187b      	adds	r3, r7, r1
 8013b2c:	2204      	movs	r2, #4
 8013b2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013b30:	187a      	adds	r2, r7, r1
 8013b32:	23a0      	movs	r3, #160	@ 0xa0
 8013b34:	05db      	lsls	r3, r3, #23
 8013b36:	0011      	movs	r1, r2
 8013b38:	0018      	movs	r0, r3
 8013b3a:	f001 ff73 	bl	8015a24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013b3e:	2200      	movs	r2, #0
 8013b40:	2100      	movs	r1, #0
 8013b42:	201b      	movs	r0, #27
 8013b44:	f001 fb1c 	bl	8015180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013b48:	201b      	movs	r0, #27
 8013b4a:	f001 fb2e 	bl	80151aa <HAL_NVIC_EnableIRQ>
}
 8013b4e:	e0ac      	b.n	8013caa <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	4a5b      	ldr	r2, [pc, #364]	@ (8013cc4 <HAL_UART_MspInit+0x25c>)
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d000      	beq.n	8013b5c <HAL_UART_MspInit+0xf4>
 8013b5a:	e0a6      	b.n	8013caa <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8013b5c:	4b56      	ldr	r3, [pc, #344]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013b5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b60:	4b55      	ldr	r3, [pc, #340]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013b62:	2180      	movs	r1, #128	@ 0x80
 8013b64:	0309      	lsls	r1, r1, #12
 8013b66:	430a      	orrs	r2, r1
 8013b68:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013b6a:	4b53      	ldr	r3, [pc, #332]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b6e:	4b52      	ldr	r3, [pc, #328]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013b70:	2101      	movs	r1, #1
 8013b72:	430a      	orrs	r2, r1
 8013b74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013b76:	4b50      	ldr	r3, [pc, #320]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	4013      	ands	r3, r2
 8013b7e:	613b      	str	r3, [r7, #16]
 8013b80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013b82:	4b4d      	ldr	r3, [pc, #308]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b86:	4b4c      	ldr	r3, [pc, #304]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013b88:	2104      	movs	r1, #4
 8013b8a:	430a      	orrs	r2, r1
 8013b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8013cb8 <HAL_UART_MspInit+0x250>)
 8013b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b92:	2204      	movs	r2, #4
 8013b94:	4013      	ands	r3, r2
 8013b96:	60fb      	str	r3, [r7, #12]
 8013b98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8013b9a:	241c      	movs	r4, #28
 8013b9c:	193b      	adds	r3, r7, r4
 8013b9e:	2202      	movs	r2, #2
 8013ba0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ba2:	193b      	adds	r3, r7, r4
 8013ba4:	2202      	movs	r2, #2
 8013ba6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ba8:	193b      	adds	r3, r7, r4
 8013baa:	2200      	movs	r2, #0
 8013bac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013bae:	193b      	adds	r3, r7, r4
 8013bb0:	2203      	movs	r2, #3
 8013bb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013bb4:	193b      	adds	r3, r7, r4
 8013bb6:	2206      	movs	r2, #6
 8013bb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013bba:	193a      	adds	r2, r7, r4
 8013bbc:	23a0      	movs	r3, #160	@ 0xa0
 8013bbe:	05db      	lsls	r3, r3, #23
 8013bc0:	0011      	movs	r1, r2
 8013bc2:	0018      	movs	r0, r3
 8013bc4:	f001 ff2e 	bl	8015a24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8013bc8:	0021      	movs	r1, r4
 8013bca:	187b      	adds	r3, r7, r1
 8013bcc:	2280      	movs	r2, #128	@ 0x80
 8013bce:	00d2      	lsls	r2, r2, #3
 8013bd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bd2:	187b      	adds	r3, r7, r1
 8013bd4:	2202      	movs	r2, #2
 8013bd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bd8:	187b      	adds	r3, r7, r1
 8013bda:	2200      	movs	r2, #0
 8013bdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013bde:	187b      	adds	r3, r7, r1
 8013be0:	2203      	movs	r2, #3
 8013be2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013be4:	187b      	adds	r3, r7, r1
 8013be6:	2206      	movs	r2, #6
 8013be8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013bea:	187b      	adds	r3, r7, r1
 8013bec:	4a33      	ldr	r2, [pc, #204]	@ (8013cbc <HAL_UART_MspInit+0x254>)
 8013bee:	0019      	movs	r1, r3
 8013bf0:	0010      	movs	r0, r2
 8013bf2:	f001 ff17 	bl	8015a24 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8013bf6:	4b34      	ldr	r3, [pc, #208]	@ (8013cc8 <HAL_UART_MspInit+0x260>)
 8013bf8:	4a34      	ldr	r2, [pc, #208]	@ (8013ccc <HAL_UART_MspInit+0x264>)
 8013bfa:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8013bfc:	4b32      	ldr	r3, [pc, #200]	@ (8013cc8 <HAL_UART_MspInit+0x260>)
 8013bfe:	220c      	movs	r2, #12
 8013c00:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013c02:	4b31      	ldr	r3, [pc, #196]	@ (8013cc8 <HAL_UART_MspInit+0x260>)
 8013c04:	2200      	movs	r2, #0
 8013c06:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013c08:	4b2f      	ldr	r3, [pc, #188]	@ (8013cc8 <HAL_UART_MspInit+0x260>)
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8013cc8 <HAL_UART_MspInit+0x260>)
 8013c10:	2280      	movs	r2, #128	@ 0x80
 8013c12:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013c14:	4b2c      	ldr	r3, [pc, #176]	@ (8013cc8 <HAL_UART_MspInit+0x260>)
 8013c16:	2200      	movs	r2, #0
 8013c18:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8013cc8 <HAL_UART_MspInit+0x260>)
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8013c20:	4b29      	ldr	r3, [pc, #164]	@ (8013cc8 <HAL_UART_MspInit+0x260>)
 8013c22:	2220      	movs	r2, #32
 8013c24:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013c26:	4b28      	ldr	r3, [pc, #160]	@ (8013cc8 <HAL_UART_MspInit+0x260>)
 8013c28:	2200      	movs	r2, #0
 8013c2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8013c2c:	4b26      	ldr	r3, [pc, #152]	@ (8013cc8 <HAL_UART_MspInit+0x260>)
 8013c2e:	0018      	movs	r0, r3
 8013c30:	f001 fadc 	bl	80151ec <HAL_DMA_Init>
 8013c34:	1e03      	subs	r3, r0, #0
 8013c36:	d001      	beq.n	8013c3c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8013c38:	f7f9 fbb6 	bl	800d3a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	4a22      	ldr	r2, [pc, #136]	@ (8013cc8 <HAL_UART_MspInit+0x260>)
 8013c40:	675a      	str	r2, [r3, #116]	@ 0x74
 8013c42:	4b21      	ldr	r3, [pc, #132]	@ (8013cc8 <HAL_UART_MspInit+0x260>)
 8013c44:	687a      	ldr	r2, [r7, #4]
 8013c46:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8013c48:	4b21      	ldr	r3, [pc, #132]	@ (8013cd0 <HAL_UART_MspInit+0x268>)
 8013c4a:	4a22      	ldr	r2, [pc, #136]	@ (8013cd4 <HAL_UART_MspInit+0x26c>)
 8013c4c:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8013c4e:	4b20      	ldr	r3, [pc, #128]	@ (8013cd0 <HAL_UART_MspInit+0x268>)
 8013c50:	220c      	movs	r2, #12
 8013c52:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013c54:	4b1e      	ldr	r3, [pc, #120]	@ (8013cd0 <HAL_UART_MspInit+0x268>)
 8013c56:	2210      	movs	r2, #16
 8013c58:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8013cd0 <HAL_UART_MspInit+0x268>)
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013c60:	4b1b      	ldr	r3, [pc, #108]	@ (8013cd0 <HAL_UART_MspInit+0x268>)
 8013c62:	2280      	movs	r2, #128	@ 0x80
 8013c64:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013c66:	4b1a      	ldr	r3, [pc, #104]	@ (8013cd0 <HAL_UART_MspInit+0x268>)
 8013c68:	2200      	movs	r2, #0
 8013c6a:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013c6c:	4b18      	ldr	r3, [pc, #96]	@ (8013cd0 <HAL_UART_MspInit+0x268>)
 8013c6e:	2200      	movs	r2, #0
 8013c70:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8013c72:	4b17      	ldr	r3, [pc, #92]	@ (8013cd0 <HAL_UART_MspInit+0x268>)
 8013c74:	2200      	movs	r2, #0
 8013c76:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013c78:	4b15      	ldr	r3, [pc, #84]	@ (8013cd0 <HAL_UART_MspInit+0x268>)
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8013c7e:	4b14      	ldr	r3, [pc, #80]	@ (8013cd0 <HAL_UART_MspInit+0x268>)
 8013c80:	0018      	movs	r0, r3
 8013c82:	f001 fab3 	bl	80151ec <HAL_DMA_Init>
 8013c86:	1e03      	subs	r3, r0, #0
 8013c88:	d001      	beq.n	8013c8e <HAL_UART_MspInit+0x226>
      Error_Handler();
 8013c8a:	f7f9 fb8d 	bl	800d3a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	4a0f      	ldr	r2, [pc, #60]	@ (8013cd0 <HAL_UART_MspInit+0x268>)
 8013c92:	671a      	str	r2, [r3, #112]	@ 0x70
 8013c94:	4b0e      	ldr	r3, [pc, #56]	@ (8013cd0 <HAL_UART_MspInit+0x268>)
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	2100      	movs	r1, #0
 8013c9e:	200e      	movs	r0, #14
 8013ca0:	f001 fa6e 	bl	8015180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8013ca4:	200e      	movs	r0, #14
 8013ca6:	f001 fa80 	bl	80151aa <HAL_NVIC_EnableIRQ>
}
 8013caa:	46c0      	nop			@ (mov r8, r8)
 8013cac:	46bd      	mov	sp, r7
 8013cae:	b00d      	add	sp, #52	@ 0x34
 8013cb0:	bd90      	pop	{r4, r7, pc}
 8013cb2:	46c0      	nop			@ (mov r8, r8)
 8013cb4:	40004800 	.word	0x40004800
 8013cb8:	40021000 	.word	0x40021000
 8013cbc:	50000800 	.word	0x50000800
 8013cc0:	40013800 	.word	0x40013800
 8013cc4:	40004c00 	.word	0x40004c00
 8013cc8:	20002454 	.word	0x20002454
 8013ccc:	4002006c 	.word	0x4002006c
 8013cd0:	2000249c 	.word	0x2000249c
 8013cd4:	40020080 	.word	0x40020080

08013cd8 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 192

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b086      	sub	sp, #24
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8013ce0:	f000 fdc8 	bl	8014874 <HAL_GetTick>
 8013ce4:	0003      	movs	r3, r0
 8013ce6:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8013ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8013d5c <TimestampIsReached+0x84>)
 8013cea:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8013cec:	697a      	ldr	r2, [r7, #20]
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d307      	bcc.n	8013d04 <TimestampIsReached+0x2c>
 8013cf4:	697a      	ldr	r2, [r7, #20]
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	1ad3      	subs	r3, r2, r3
 8013cfa:	693a      	ldr	r2, [r7, #16]
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	d901      	bls.n	8013d04 <TimestampIsReached+0x2c>
 8013d00:	2201      	movs	r2, #1
 8013d02:	e000      	b.n	8013d06 <TimestampIsReached+0x2e>
 8013d04:	2200      	movs	r2, #0
 8013d06:	230f      	movs	r3, #15
 8013d08:	18fb      	adds	r3, r7, r3
 8013d0a:	701a      	strb	r2, [r3, #0]
 8013d0c:	781a      	ldrb	r2, [r3, #0]
 8013d0e:	2101      	movs	r1, #1
 8013d10:	400a      	ands	r2, r1
 8013d12:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8013d14:	697a      	ldr	r2, [r7, #20]
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d207      	bcs.n	8013d2c <TimestampIsReached+0x54>
 8013d1c:	687a      	ldr	r2, [r7, #4]
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	1ad3      	subs	r3, r2, r3
 8013d22:	693a      	ldr	r2, [r7, #16]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d201      	bcs.n	8013d2c <TimestampIsReached+0x54>
 8013d28:	2201      	movs	r2, #1
 8013d2a:	e000      	b.n	8013d2e <TimestampIsReached+0x56>
 8013d2c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8013d2e:	200e      	movs	r0, #14
 8013d30:	183b      	adds	r3, r7, r0
 8013d32:	701a      	strb	r2, [r3, #0]
 8013d34:	781a      	ldrb	r2, [r3, #0]
 8013d36:	2101      	movs	r1, #1
 8013d38:	400a      	ands	r2, r1
 8013d3a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8013d3c:	230f      	movs	r3, #15
 8013d3e:	18fb      	adds	r3, r7, r3
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d103      	bne.n	8013d4e <TimestampIsReached+0x76>
 8013d46:	183b      	adds	r3, r7, r0
 8013d48:	781b      	ldrb	r3, [r3, #0]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d001      	beq.n	8013d52 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8013d4e:	2301      	movs	r3, #1
 8013d50:	e000      	b.n	8013d54 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8013d52:	2300      	movs	r3, #0
}
 8013d54:	0018      	movs	r0, r3
 8013d56:	46bd      	mov	sp, r7
 8013d58:	b006      	add	sp, #24
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	7fffffff 	.word	0x7fffffff

08013d60 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b082      	sub	sp, #8
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8013d68:	f000 fd84 	bl	8014874 <HAL_GetTick>
 8013d6c:	0002      	movs	r2, r0
 8013d6e:	4904      	ldr	r1, [pc, #16]	@ (8013d80 <AddTimestamp+0x20>)
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	0018      	movs	r0, r3
 8013d74:	f012 fa30 	bl	80261d8 <siprintf>
}
 8013d78:	46c0      	nop			@ (mov r8, r8)
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	b002      	add	sp, #8
 8013d7e:	bd80      	pop	{r7, pc}
 8013d80:	0802d940 	.word	0x0802d940

08013d84 <CreateLine>:


void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8013d84:	b40c      	push	{r2, r3}
 8013d86:	b5b0      	push	{r4, r5, r7, lr}
 8013d88:	b0b4      	sub	sp, #208	@ 0xd0
 8013d8a:	af00      	add	r7, sp, #0
 8013d8c:	0002      	movs	r2, r0
 8013d8e:	6039      	str	r1, [r7, #0]
 8013d90:	1dfb      	adds	r3, r7, #7
 8013d92:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8013d94:	4b2a      	ldr	r3, [pc, #168]	@ (8013e40 <CreateLine+0xbc>)
 8013d96:	781b      	ldrb	r3, [r3, #0]
 8013d98:	1dfa      	adds	r2, r7, #7
 8013d9a:	7812      	ldrb	r2, [r2, #0]
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d848      	bhi.n	8013e32 <CreateLine+0xae>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8013da0:	683a      	ldr	r2, [r7, #0]
 8013da2:	4928      	ldr	r1, [pc, #160]	@ (8013e44 <CreateLine+0xc0>)
 8013da4:	240c      	movs	r4, #12
 8013da6:	193b      	adds	r3, r7, r4
 8013da8:	0018      	movs	r0, r3
 8013daa:	f012 fa15 	bl	80261d8 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8013dae:	4b24      	ldr	r3, [pc, #144]	@ (8013e40 <CreateLine+0xbc>)
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	2b01      	cmp	r3, #1
 8013db4:	d909      	bls.n	8013dca <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8013db6:	193b      	adds	r3, r7, r4
 8013db8:	0018      	movs	r0, r3
 8013dba:	f7ec f9d7 	bl	800016c <strlen>
 8013dbe:	0002      	movs	r2, r0
 8013dc0:	193b      	adds	r3, r7, r4
 8013dc2:	189b      	adds	r3, r3, r2
 8013dc4:	0018      	movs	r0, r3
 8013dc6:	f7ff ffcb 	bl	8013d60 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8013dca:	240c      	movs	r4, #12
 8013dcc:	193b      	adds	r3, r7, r4
 8013dce:	0018      	movs	r0, r3
 8013dd0:	f7ec f9cc 	bl	800016c <strlen>
 8013dd4:	0003      	movs	r3, r0
 8013dd6:	21cc      	movs	r1, #204	@ 0xcc
 8013dd8:	187a      	adds	r2, r7, r1
 8013dda:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8013ddc:	23dc      	movs	r3, #220	@ 0xdc
 8013dde:	2508      	movs	r5, #8
 8013de0:	195b      	adds	r3, r3, r5
 8013de2:	19db      	adds	r3, r3, r7
 8013de4:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset - 2, format, args);
 8013de6:	193a      	adds	r2, r7, r4
 8013de8:	187b      	adds	r3, r7, r1
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	18d0      	adds	r0, r2, r3
 8013dee:	187b      	adds	r3, r7, r1
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	22be      	movs	r2, #190	@ 0xbe
 8013df4:	1ad3      	subs	r3, r2, r3
 8013df6:	0019      	movs	r1, r3
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	22d8      	movs	r2, #216	@ 0xd8
 8013dfc:	1952      	adds	r2, r2, r5
 8013dfe:	19d2      	adds	r2, r2, r7
 8013e00:	6812      	ldr	r2, [r2, #0]
 8013e02:	f012 fa85 	bl	8026310 <vsniprintf>
  va_end(args);

  if (usblog && Check_USB_PowerOn()){
 8013e06:	4b10      	ldr	r3, [pc, #64]	@ (8013e48 <CreateLine+0xc4>)
 8013e08:	781b      	ldrb	r3, [r3, #0]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d009      	beq.n	8013e22 <CreateLine+0x9e>
 8013e0e:	f7f5 ff03 	bl	8009c18 <Check_USB_PowerOn>
 8013e12:	1e03      	subs	r3, r0, #0
 8013e14:	d005      	beq.n	8013e22 <CreateLine+0x9e>
    printf_USB("%s\r\n", textBuffer);
 8013e16:	193a      	adds	r2, r7, r4
 8013e18:	4b0c      	ldr	r3, [pc, #48]	@ (8013e4c <CreateLine+0xc8>)
 8013e1a:	0011      	movs	r1, r2
 8013e1c:	0018      	movs	r0, r3
 8013e1e:	f7f4 fe41 	bl	8008aa4 <printf_USB>
      printf_USB("%s\r\n", textBuffer);
    }
*/
  }
  // Print the final formatted message to serial
  printf("%s\r\n", textBuffer);
 8013e22:	230c      	movs	r3, #12
 8013e24:	18fa      	adds	r2, r7, r3
 8013e26:	4b09      	ldr	r3, [pc, #36]	@ (8013e4c <CreateLine+0xc8>)
 8013e28:	0011      	movs	r1, r2
 8013e2a:	0018      	movs	r0, r3
 8013e2c:	f012 f964 	bl	80260f8 <iprintf>
 8013e30:	e000      	b.n	8013e34 <CreateLine+0xb0>
    return;
 8013e32:	46c0      	nop			@ (mov r8, r8)
}
 8013e34:	46bd      	mov	sp, r7
 8013e36:	b034      	add	sp, #208	@ 0xd0
 8013e38:	bcb0      	pop	{r4, r5, r7}
 8013e3a:	bc08      	pop	{r3}
 8013e3c:	b002      	add	sp, #8
 8013e3e:	4718      	bx	r3
 8013e40:	200000f0 	.word	0x200000f0
 8013e44:	0802d94c 	.word	0x0802d94c
 8013e48:	200010f7 	.word	0x200010f7
 8013e4c:	0802d950 	.word	0x0802d950

08013e50 <_write>:

int _write(int fd, void *buf, size_t count) {
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b084      	sub	sp, #16
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	60f8      	str	r0, [r7, #12]
 8013e58:	60b9      	str	r1, [r7, #8]
 8013e5a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	b29a      	uxth	r2, r3
 8013e60:	68b9      	ldr	r1, [r7, #8]
 8013e62:	4804      	ldr	r0, [pc, #16]	@ (8013e74 <_write+0x24>)
 8013e64:	2364      	movs	r3, #100	@ 0x64
 8013e66:	f009 fab7 	bl	801d3d8 <HAL_UART_Transmit>
  return count;
 8013e6a:	687b      	ldr	r3, [r7, #4]
}
 8013e6c:	0018      	movs	r0, r3
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	b004      	add	sp, #16
 8013e72:	bd80      	pop	{r7, pc}
 8013e74:	200022e4 	.word	0x200022e4

08013e78 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b082      	sub	sp, #8
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	0002      	movs	r2, r0
 8013e80:	1dfb      	adds	r3, r7, #7
 8013e82:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8013e84:	4b03      	ldr	r3, [pc, #12]	@ (8013e94 <SetVerboseLevel+0x1c>)
 8013e86:	1dfa      	adds	r2, r7, #7
 8013e88:	7812      	ldrb	r2, [r2, #0]
 8013e8a:	701a      	strb	r2, [r3, #0]
}
 8013e8c:	46c0      	nop			@ (mov r8, r8)
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	b002      	add	sp, #8
 8013e92:	bd80      	pop	{r7, pc}
 8013e94:	200000f0 	.word	0x200000f0

08013e98 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8013e9c:	4b02      	ldr	r3, [pc, #8]	@ (8013ea8 <GetVerboseLevel+0x10>)
 8013e9e:	781b      	ldrb	r3, [r3, #0]
 8013ea0:	0018      	movs	r0, r3
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd80      	pop	{r7, pc}
 8013ea6:	46c0      	nop			@ (mov r8, r8)
 8013ea8:	200000f0 	.word	0x200000f0

08013eac <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b08c      	sub	sp, #48	@ 0x30
 8013eb0:	af00      	add	r7, sp, #0
#else
  char msgout[56];
#endif
#ifdef DEBUG
  #ifndef LARGEBATTERY
  sprintf(msgout,"Software version: %s, Debug build", SRC_VERSION);
 8013eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8013f2c <BinaryReleaseInfo+0x80>)
 8013eb4:	491e      	ldr	r1, [pc, #120]	@ (8013f30 <BinaryReleaseInfo+0x84>)
 8013eb6:	1d3b      	adds	r3, r7, #4
 8013eb8:	0018      	movs	r0, r3
 8013eba:	f012 f98d 	bl	80261d8 <siprintf>
  sprintf(msgout,"Software version: %s, Release build", SRC_VERSION);
  #else
  sprintf(msgout,"Software version: %s Large Battery, Release build", SRC_VERSION);
  #endif
#endif
  if (!usblog) {
 8013ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8013f34 <BinaryReleaseInfo+0x88>)
 8013ec0:	781b      	ldrb	r3, [r3, #0]
 8013ec2:	2201      	movs	r2, #1
 8013ec4:	4053      	eors	r3, r2
 8013ec6:	b2db      	uxtb	r3, r3
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d005      	beq.n	8013ed8 <BinaryReleaseInfo+0x2c>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 8013ecc:	1d3a      	adds	r2, r7, #4
 8013ece:	4b1a      	ldr	r3, [pc, #104]	@ (8013f38 <BinaryReleaseInfo+0x8c>)
 8013ed0:	0011      	movs	r1, r2
 8013ed2:	0018      	movs	r0, r3
 8013ed4:	f7f4 fde6 	bl	8008aa4 <printf_USB>
  }
  Info(msgout);
 8013ed8:	1d3a      	adds	r2, r7, #4
 8013eda:	4b18      	ldr	r3, [pc, #96]	@ (8013f3c <BinaryReleaseInfo+0x90>)
 8013edc:	0019      	movs	r1, r3
 8013ede:	2002      	movs	r0, #2
 8013ee0:	f7ff ff50 	bl	8013d84 <CreateLine>
  sprintf(msgout,"Build on: %s at %s", __DATE__, __TIME__);
 8013ee4:	4b16      	ldr	r3, [pc, #88]	@ (8013f40 <BinaryReleaseInfo+0x94>)
 8013ee6:	4a17      	ldr	r2, [pc, #92]	@ (8013f44 <BinaryReleaseInfo+0x98>)
 8013ee8:	4917      	ldr	r1, [pc, #92]	@ (8013f48 <BinaryReleaseInfo+0x9c>)
 8013eea:	1d38      	adds	r0, r7, #4
 8013eec:	f012 f974 	bl	80261d8 <siprintf>
  if (!usblog) {
 8013ef0:	4b10      	ldr	r3, [pc, #64]	@ (8013f34 <BinaryReleaseInfo+0x88>)
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	2201      	movs	r2, #1
 8013ef6:	4053      	eors	r3, r2
 8013ef8:	b2db      	uxtb	r3, r3
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d005      	beq.n	8013f0a <BinaryReleaseInfo+0x5e>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 8013efe:	1d3a      	adds	r2, r7, #4
 8013f00:	4b0d      	ldr	r3, [pc, #52]	@ (8013f38 <BinaryReleaseInfo+0x8c>)
 8013f02:	0011      	movs	r1, r2
 8013f04:	0018      	movs	r0, r3
 8013f06:	f7f4 fdcd 	bl	8008aa4 <printf_USB>
  }
  Info(msgout);
 8013f0a:	1d3a      	adds	r2, r7, #4
 8013f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8013f3c <BinaryReleaseInfo+0x90>)
 8013f0e:	0019      	movs	r1, r3
 8013f10:	2002      	movs	r0, #2
 8013f12:	f7ff ff37 	bl	8013d84 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8013f16:	4b0d      	ldr	r3, [pc, #52]	@ (8013f4c <BinaryReleaseInfo+0xa0>)
 8013f18:	4a0d      	ldr	r2, [pc, #52]	@ (8013f50 <BinaryReleaseInfo+0xa4>)
 8013f1a:	4908      	ldr	r1, [pc, #32]	@ (8013f3c <BinaryReleaseInfo+0x90>)
 8013f1c:	2002      	movs	r0, #2
 8013f1e:	f7ff ff31 	bl	8013d84 <CreateLine>
}
 8013f22:	46c0      	nop			@ (mov r8, r8)
 8013f24:	46bd      	mov	sp, r7
 8013f26:	b00c      	add	sp, #48	@ 0x30
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	46c0      	nop			@ (mov r8, r8)
 8013f2c:	0802d958 	.word	0x0802d958
 8013f30:	0802d960 	.word	0x0802d960
 8013f34:	200010f7 	.word	0x200010f7
 8013f38:	0802d950 	.word	0x0802d950
 8013f3c:	0802d984 	.word	0x0802d984
 8013f40:	0802d988 	.word	0x0802d988
 8013f44:	0802d994 	.word	0x0802d994
 8013f48:	0802d9a0 	.word	0x0802d9a0
 8013f4c:	0802d9b4 	.word	0x0802d9b4
 8013f50:	0802d9c0 	.word	0x0802d9c0

08013f54 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b086      	sub	sp, #24
 8013f58:	af02      	add	r7, sp, #8
 8013f5a:	60f8      	str	r0, [r7, #12]
 8013f5c:	60b9      	str	r1, [r7, #8]
 8013f5e:	607a      	str	r2, [r7, #4]
    Error("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8013f60:	68f8      	ldr	r0, [r7, #12]
 8013f62:	4a07      	ldr	r2, [pc, #28]	@ (8013f80 <errorHandler+0x2c>)
 8013f64:	4907      	ldr	r1, [pc, #28]	@ (8013f84 <errorHandler+0x30>)
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	9301      	str	r3, [sp, #4]
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	9300      	str	r3, [sp, #0]
 8013f6e:	0003      	movs	r3, r0
 8013f70:	2001      	movs	r0, #1
 8013f72:	f7ff ff07 	bl	8013d84 <CreateLine>
//    while (true)
//    {
//    }
}
 8013f76:	46c0      	nop			@ (mov r8, r8)
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	b004      	add	sp, #16
 8013f7c:	bd80      	pop	{r7, pc}
 8013f7e:	46c0      	nop			@ (mov r8, r8)
 8013f80:	0802d9c8 	.word	0x0802d9c8
 8013f84:	0802d9f0 	.word	0x0802d9f0

08013f88 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8013f88:	b590      	push	{r4, r7, lr}
 8013f8a:	b083      	sub	sp, #12
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6039      	str	r1, [r7, #0]
 8013f90:	0011      	movs	r1, r2
 8013f92:	1dfb      	adds	r3, r7, #7
 8013f94:	1c02      	adds	r2, r0, #0
 8013f96:	701a      	strb	r2, [r3, #0]
 8013f98:	1dbb      	adds	r3, r7, #6
 8013f9a:	1c0a      	adds	r2, r1, #0
 8013f9c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8013f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8013fc8 <ReadRegister+0x40>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d00a      	beq.n	8013fbc <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8013fa6:	4b08      	ldr	r3, [pc, #32]	@ (8013fc8 <ReadRegister+0x40>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	1dba      	adds	r2, r7, #6
 8013fac:	7814      	ldrb	r4, [r2, #0]
 8013fae:	6839      	ldr	r1, [r7, #0]
 8013fb0:	1dfa      	adds	r2, r7, #7
 8013fb2:	7810      	ldrb	r0, [r2, #0]
 8013fb4:	0022      	movs	r2, r4
 8013fb6:	4798      	blx	r3
 8013fb8:	0003      	movs	r3, r0
 8013fba:	e000      	b.n	8013fbe <ReadRegister+0x36>
	}
	return false;
 8013fbc:	2300      	movs	r3, #0
}
 8013fbe:	0018      	movs	r0, r3
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	b003      	add	sp, #12
 8013fc4:	bd90      	pop	{r4, r7, pc}
 8013fc6:	46c0      	nop			@ (mov r8, r8)
 8013fc8:	200024ec 	.word	0x200024ec

08013fcc <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8013fcc:	b590      	push	{r4, r7, lr}
 8013fce:	b083      	sub	sp, #12
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6039      	str	r1, [r7, #0]
 8013fd4:	0011      	movs	r1, r2
 8013fd6:	1dfb      	adds	r3, r7, #7
 8013fd8:	1c02      	adds	r2, r0, #0
 8013fda:	701a      	strb	r2, [r3, #0]
 8013fdc:	1dbb      	adds	r3, r7, #6
 8013fde:	1c0a      	adds	r2, r1, #0
 8013fe0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8013fe2:	4b0a      	ldr	r3, [pc, #40]	@ (801400c <WriteRegister+0x40>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d00a      	beq.n	8014000 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8013fea:	4b08      	ldr	r3, [pc, #32]	@ (801400c <WriteRegister+0x40>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	1dba      	adds	r2, r7, #6
 8013ff0:	7814      	ldrb	r4, [r2, #0]
 8013ff2:	6839      	ldr	r1, [r7, #0]
 8013ff4:	1dfa      	adds	r2, r7, #7
 8013ff6:	7810      	ldrb	r0, [r2, #0]
 8013ff8:	0022      	movs	r2, r4
 8013ffa:	4798      	blx	r3
 8013ffc:	0003      	movs	r3, r0
 8013ffe:	e000      	b.n	8014002 <WriteRegister+0x36>
  }
  return false;
 8014000:	2300      	movs	r3, #0
}
 8014002:	0018      	movs	r0, r3
 8014004:	46bd      	mov	sp, r7
 8014006:	b003      	add	sp, #12
 8014008:	bd90      	pop	{r4, r7, pc}
 801400a:	46c0      	nop			@ (mov r8, r8)
 801400c:	200024f0 	.word	0x200024f0

08014010 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8014010:	b580      	push	{r7, lr}
 8014012:	b084      	sub	sp, #16
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	000a      	movs	r2, r1
 801401a:	1cfb      	adds	r3, r7, #3
 801401c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 801401e:	230f      	movs	r3, #15
 8014020:	18fb      	adds	r3, r7, r3
 8014022:	22ff      	movs	r2, #255	@ 0xff
 8014024:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8014026:	230e      	movs	r3, #14
 8014028:	18fb      	adds	r3, r7, r3
 801402a:	2200      	movs	r2, #0
 801402c:	701a      	strb	r2, [r3, #0]
 801402e:	e038      	b.n	80140a2 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8014030:	230e      	movs	r3, #14
 8014032:	18fb      	adds	r3, r7, r3
 8014034:	781b      	ldrb	r3, [r3, #0]
 8014036:	687a      	ldr	r2, [r7, #4]
 8014038:	18d3      	adds	r3, r2, r3
 801403a:	7819      	ldrb	r1, [r3, #0]
 801403c:	220f      	movs	r2, #15
 801403e:	18bb      	adds	r3, r7, r2
 8014040:	18ba      	adds	r2, r7, r2
 8014042:	7812      	ldrb	r2, [r2, #0]
 8014044:	404a      	eors	r2, r1
 8014046:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8014048:	230d      	movs	r3, #13
 801404a:	18fb      	adds	r3, r7, r3
 801404c:	2200      	movs	r2, #0
 801404e:	701a      	strb	r2, [r3, #0]
 8014050:	e01c      	b.n	801408c <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8014052:	210f      	movs	r1, #15
 8014054:	187b      	adds	r3, r7, r1
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	b25b      	sxtb	r3, r3
 801405a:	2b00      	cmp	r3, #0
 801405c:	da0a      	bge.n	8014074 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 801405e:	187b      	adds	r3, r7, r1
 8014060:	781b      	ldrb	r3, [r3, #0]
 8014062:	b25b      	sxtb	r3, r3
 8014064:	18db      	adds	r3, r3, r3
 8014066:	b25b      	sxtb	r3, r3
 8014068:	2231      	movs	r2, #49	@ 0x31
 801406a:	4053      	eors	r3, r2
 801406c:	b25a      	sxtb	r2, r3
 801406e:	187b      	adds	r3, r7, r1
 8014070:	701a      	strb	r2, [r3, #0]
 8014072:	e005      	b.n	8014080 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 8014074:	230f      	movs	r3, #15
 8014076:	18fa      	adds	r2, r7, r3
 8014078:	18fb      	adds	r3, r7, r3
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	18db      	adds	r3, r3, r3
 801407e:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8014080:	210d      	movs	r1, #13
 8014082:	187b      	adds	r3, r7, r1
 8014084:	781a      	ldrb	r2, [r3, #0]
 8014086:	187b      	adds	r3, r7, r1
 8014088:	3201      	adds	r2, #1
 801408a:	701a      	strb	r2, [r3, #0]
 801408c:	230d      	movs	r3, #13
 801408e:	18fb      	adds	r3, r7, r3
 8014090:	781b      	ldrb	r3, [r3, #0]
 8014092:	2b07      	cmp	r3, #7
 8014094:	d9dd      	bls.n	8014052 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8014096:	210e      	movs	r1, #14
 8014098:	187b      	adds	r3, r7, r1
 801409a:	781a      	ldrb	r2, [r3, #0]
 801409c:	187b      	adds	r3, r7, r1
 801409e:	3201      	adds	r2, #1
 80140a0:	701a      	strb	r2, [r3, #0]
 80140a2:	230e      	movs	r3, #14
 80140a4:	18fa      	adds	r2, r7, r3
 80140a6:	1cfb      	adds	r3, r7, #3
 80140a8:	7812      	ldrb	r2, [r2, #0]
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d3bf      	bcc.n	8014030 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 80140b0:	230f      	movs	r3, #15
 80140b2:	18fb      	adds	r3, r7, r3
 80140b4:	781b      	ldrb	r3, [r3, #0]
}
 80140b6:	0018      	movs	r0, r3
 80140b8:	46bd      	mov	sp, r7
 80140ba:	b004      	add	sp, #16
 80140bc:	bd80      	pop	{r7, pc}
	...

080140c0 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 80140c0:	b5b0      	push	{r4, r5, r7, lr}
 80140c2:	b084      	sub	sp, #16
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
 80140c8:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	1c18      	adds	r0, r3, #0
 80140d0:	f7ef fbe0 	bl	8003894 <__aeabi_f2d>
 80140d4:	4a2e      	ldr	r2, [pc, #184]	@ (8014190 <HIDS_DewPointCalculation+0xd0>)
 80140d6:	4b2f      	ldr	r3, [pc, #188]	@ (8014194 <HIDS_DewPointCalculation+0xd4>)
 80140d8:	f7ee fc3c 	bl	8002954 <__aeabi_dmul>
 80140dc:	0002      	movs	r2, r0
 80140de:	000b      	movs	r3, r1
 80140e0:	0014      	movs	r4, r2
 80140e2:	001d      	movs	r5, r3
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	1c18      	adds	r0, r3, #0
 80140ea:	f7ef fbd3 	bl	8003894 <__aeabi_f2d>
 80140ee:	4a2a      	ldr	r2, [pc, #168]	@ (8014198 <HIDS_DewPointCalculation+0xd8>)
 80140f0:	4b2a      	ldr	r3, [pc, #168]	@ (801419c <HIDS_DewPointCalculation+0xdc>)
 80140f2:	f7ed fc2f 	bl	8001954 <__aeabi_dadd>
 80140f6:	0002      	movs	r2, r0
 80140f8:	000b      	movs	r3, r1
 80140fa:	0020      	movs	r0, r4
 80140fc:	0029      	movs	r1, r5
 80140fe:	f7ed ffef 	bl	80020e0 <__aeabi_ddiv>
 8014102:	0002      	movs	r2, r0
 8014104:	000b      	movs	r3, r1
 8014106:	0014      	movs	r4, r2
 8014108:	001d      	movs	r5, r3
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	1c18      	adds	r0, r3, #0
 8014110:	f7ef fbc0 	bl	8003894 <__aeabi_f2d>
 8014114:	2200      	movs	r2, #0
 8014116:	4b22      	ldr	r3, [pc, #136]	@ (80141a0 <HIDS_DewPointCalculation+0xe0>)
 8014118:	f7ed ffe2 	bl	80020e0 <__aeabi_ddiv>
 801411c:	0002      	movs	r2, r0
 801411e:	000b      	movs	r3, r1
 8014120:	0010      	movs	r0, r2
 8014122:	0019      	movs	r1, r3
 8014124:	f014 ff30 	bl	8028f88 <log>
 8014128:	0002      	movs	r2, r0
 801412a:	000b      	movs	r3, r1
 801412c:	0020      	movs	r0, r4
 801412e:	0029      	movs	r1, r5
 8014130:	f7ed fc10 	bl	8001954 <__aeabi_dadd>
 8014134:	0002      	movs	r2, r0
 8014136:	000b      	movs	r3, r1
 8014138:	0010      	movs	r0, r2
 801413a:	0019      	movs	r1, r3
 801413c:	f7ef fbf2 	bl	8003924 <__aeabi_d2f>
 8014140:	1c03      	adds	r3, r0, #0
 8014142:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 8014144:	68f8      	ldr	r0, [r7, #12]
 8014146:	f7ef fba5 	bl	8003894 <__aeabi_f2d>
 801414a:	4a13      	ldr	r2, [pc, #76]	@ (8014198 <HIDS_DewPointCalculation+0xd8>)
 801414c:	4b13      	ldr	r3, [pc, #76]	@ (801419c <HIDS_DewPointCalculation+0xdc>)
 801414e:	f7ee fc01 	bl	8002954 <__aeabi_dmul>
 8014152:	0002      	movs	r2, r0
 8014154:	000b      	movs	r3, r1
 8014156:	0014      	movs	r4, r2
 8014158:	001d      	movs	r5, r3
 801415a:	68f8      	ldr	r0, [r7, #12]
 801415c:	f7ef fb9a 	bl	8003894 <__aeabi_f2d>
 8014160:	0002      	movs	r2, r0
 8014162:	000b      	movs	r3, r1
 8014164:	480a      	ldr	r0, [pc, #40]	@ (8014190 <HIDS_DewPointCalculation+0xd0>)
 8014166:	490b      	ldr	r1, [pc, #44]	@ (8014194 <HIDS_DewPointCalculation+0xd4>)
 8014168:	f7ee feda 	bl	8002f20 <__aeabi_dsub>
 801416c:	0002      	movs	r2, r0
 801416e:	000b      	movs	r3, r1
 8014170:	0020      	movs	r0, r4
 8014172:	0029      	movs	r1, r5
 8014174:	f7ed ffb4 	bl	80020e0 <__aeabi_ddiv>
 8014178:	0002      	movs	r2, r0
 801417a:	000b      	movs	r3, r1
 801417c:	0010      	movs	r0, r2
 801417e:	0019      	movs	r1, r3
 8014180:	f7ef fbd0 	bl	8003924 <__aeabi_d2f>
 8014184:	1c03      	adds	r3, r0, #0
}
 8014186:	1c18      	adds	r0, r3, #0
 8014188:	46bd      	mov	sp, r7
 801418a:	b004      	add	sp, #16
 801418c:	bdb0      	pop	{r4, r5, r7, pc}
 801418e:	46c0      	nop			@ (mov r8, r8)
 8014190:	b851eb85 	.word	0xb851eb85
 8014194:	4031451e 	.word	0x4031451e
 8014198:	66666666 	.word	0x66666666
 801419c:	406db666 	.word	0x406db666
 80141a0:	40590000 	.word	0x40590000

080141a4 <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b082      	sub	sp, #8
 80141a8:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 80141aa:	4b0d      	ldr	r3, [pc, #52]	@ (80141e0 <HIDS_EnableHeater+0x3c>)
 80141ac:	781a      	ldrb	r2, [r3, #0]
 80141ae:	1dfb      	adds	r3, r7, #7
 80141b0:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 80141b2:	1dfb      	adds	r3, r7, #7
 80141b4:	2201      	movs	r2, #1
 80141b6:	0019      	movs	r1, r3
 80141b8:	2044      	movs	r0, #68	@ 0x44
 80141ba:	f7ff ff07 	bl	8013fcc <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 80141be:	1dfb      	adds	r3, r7, #7
 80141c0:	781b      	ldrb	r3, [r3, #0]
 80141c2:	4a08      	ldr	r2, [pc, #32]	@ (80141e4 <HIDS_EnableHeater+0x40>)
 80141c4:	4908      	ldr	r1, [pc, #32]	@ (80141e8 <HIDS_EnableHeater+0x44>)
 80141c6:	2002      	movs	r0, #2
 80141c8:	f7ff fddc 	bl	8013d84 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 80141cc:	f7f6 f9c6 	bl	800a55c <getPosixTime>
 80141d0:	0002      	movs	r2, r0
 80141d2:	4b06      	ldr	r3, [pc, #24]	@ (80141ec <HIDS_EnableHeater+0x48>)
 80141d4:	601a      	str	r2, [r3, #0]
}
 80141d6:	46c0      	nop			@ (mov r8, r8)
 80141d8:	46bd      	mov	sp, r7
 80141da:	b002      	add	sp, #8
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	46c0      	nop			@ (mov r8, r8)
 80141e0:	200000f1 	.word	0x200000f1
 80141e4:	0802d9f4 	.word	0x0802d9f4
 80141e8:	0802da14 	.word	0x0802da14
 80141ec:	20002504 	.word	0x20002504

080141f0 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 80141fa:	4b0a      	ldr	r3, [pc, #40]	@ (8014224 <HIDS_Init+0x34>)
 80141fc:	687a      	ldr	r2, [r7, #4]
 80141fe:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8014200:	4b09      	ldr	r3, [pc, #36]	@ (8014228 <HIDS_Init+0x38>)
 8014202:	683a      	ldr	r2, [r7, #0]
 8014204:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8014206:	4b09      	ldr	r3, [pc, #36]	@ (801422c <HIDS_Init+0x3c>)
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	0018      	movs	r0, r3
 801420c:	f000 f840 	bl	8014290 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8014210:	4b07      	ldr	r3, [pc, #28]	@ (8014230 <HIDS_Init+0x40>)
 8014212:	781b      	ldrb	r3, [r3, #0]
 8014214:	0018      	movs	r0, r3
 8014216:	f000 f82b 	bl	8014270 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 801421a:	46c0      	nop			@ (mov r8, r8)
 801421c:	46bd      	mov	sp, r7
 801421e:	b002      	add	sp, #8
 8014220:	bd80      	pop	{r7, pc}
 8014222:	46c0      	nop			@ (mov r8, r8)
 8014224:	200024ec 	.word	0x200024ec
 8014228:	200024f0 	.word	0x200024f0
 801422c:	200000f2 	.word	0x200000f2
 8014230:	200000f1 	.word	0x200000f1

08014234 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8014234:	b580      	push	{r7, lr}
 8014236:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8014238:	f000 fb1c 	bl	8014874 <HAL_GetTick>
 801423c:	0002      	movs	r2, r0
 801423e:	4b08      	ldr	r3, [pc, #32]	@ (8014260 <HIDS_StartMeasurement+0x2c>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	18d2      	adds	r2, r2, r3
 8014244:	4b07      	ldr	r3, [pc, #28]	@ (8014264 <HIDS_StartMeasurement+0x30>)
 8014246:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8014248:	4b07      	ldr	r3, [pc, #28]	@ (8014268 <HIDS_StartMeasurement+0x34>)
 801424a:	2201      	movs	r2, #1
 801424c:	0019      	movs	r1, r3
 801424e:	2044      	movs	r0, #68	@ 0x44
 8014250:	f7ff febc 	bl	8013fcc <WriteRegister>
  MeasurementDone = false;
 8014254:	4b05      	ldr	r3, [pc, #20]	@ (801426c <HIDS_StartMeasurement+0x38>)
 8014256:	2200      	movs	r2, #0
 8014258:	701a      	strb	r2, [r3, #0]
}
 801425a:	46c0      	nop			@ (mov r8, r8)
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}
 8014260:	200000f8 	.word	0x200000f8
 8014264:	200000f4 	.word	0x200000f4
 8014268:	200000f2 	.word	0x200000f2
 801426c:	20002508 	.word	0x20002508

08014270 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8014270:	b580      	push	{r7, lr}
 8014272:	b082      	sub	sp, #8
 8014274:	af00      	add	r7, sp, #0
 8014276:	0002      	movs	r2, r0
 8014278:	1dfb      	adds	r3, r7, #7
 801427a:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 801427c:	4b03      	ldr	r3, [pc, #12]	@ (801428c <HIDS_SetHeaterMode+0x1c>)
 801427e:	1dfa      	adds	r2, r7, #7
 8014280:	7812      	ldrb	r2, [r2, #0]
 8014282:	701a      	strb	r2, [r3, #0]
}
 8014284:	46c0      	nop			@ (mov r8, r8)
 8014286:	46bd      	mov	sp, r7
 8014288:	b002      	add	sp, #8
 801428a:	bd80      	pop	{r7, pc}
 801428c:	200000f1 	.word	0x200000f1

08014290 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	0002      	movs	r2, r0
 8014298:	1dfb      	adds	r3, r7, #7
 801429a:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 801429c:	4b03      	ldr	r3, [pc, #12]	@ (80142ac <HIDS_SetMeasurementMode+0x1c>)
 801429e:	1dfa      	adds	r2, r7, #7
 80142a0:	7812      	ldrb	r2, [r2, #0]
 80142a2:	701a      	strb	r2, [r3, #0]
}
 80142a4:	46c0      	nop			@ (mov r8, r8)
 80142a6:	46bd      	mov	sp, r7
 80142a8:	b002      	add	sp, #8
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	200000f2 	.word	0x200000f2

080142b0 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 80142b8:	f000 fadc 	bl	8014874 <HAL_GetTick>
 80142bc:	0002      	movs	r2, r0
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	18d2      	adds	r2, r2, r3
 80142c2:	4b03      	ldr	r3, [pc, #12]	@ (80142d0 <setHIDSTimeStamp+0x20>)
 80142c4:	601a      	str	r2, [r3, #0]
}
 80142c6:	46c0      	nop			@ (mov r8, r8)
 80142c8:	46bd      	mov	sp, r7
 80142ca:	b002      	add	sp, #8
 80142cc:	bd80      	pop	{r7, pc}
 80142ce:	46c0      	nop			@ (mov r8, r8)
 80142d0:	2000250c 	.word	0x2000250c

080142d4 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 80142d4:	b590      	push	{r4, r7, lr}
 80142d6:	b085      	sub	sp, #20
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	781a      	ldrb	r2, [r3, #0]
 80142e0:	210c      	movs	r1, #12
 80142e2:	187b      	adds	r3, r7, r1
 80142e4:	701a      	strb	r2, [r3, #0]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	785a      	ldrb	r2, [r3, #1]
 80142ea:	187b      	adds	r3, r7, r1
 80142ec:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 80142ee:	240f      	movs	r4, #15
 80142f0:	193b      	adds	r3, r7, r4
 80142f2:	687a      	ldr	r2, [r7, #4]
 80142f4:	7892      	ldrb	r2, [r2, #2]
 80142f6:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 80142f8:	187b      	adds	r3, r7, r1
 80142fa:	2102      	movs	r1, #2
 80142fc:	0018      	movs	r0, r3
 80142fe:	f7ff fe87 	bl	8014010 <CalculateCRC>
 8014302:	0003      	movs	r3, r0
 8014304:	001a      	movs	r2, r3
 8014306:	193b      	adds	r3, r7, r4
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	4293      	cmp	r3, r2
 801430c:	d007      	beq.n	801431e <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 801430e:	4a1a      	ldr	r2, [pc, #104]	@ (8014378 <CheckCRC+0xa4>)
 8014310:	4b1a      	ldr	r3, [pc, #104]	@ (801437c <CheckCRC+0xa8>)
 8014312:	0019      	movs	r1, r3
 8014314:	2001      	movs	r0, #1
 8014316:	f7ff fd35 	bl	8013d84 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 801431a:	2300      	movs	r3, #0
 801431c:	e027      	b.n	801436e <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	78da      	ldrb	r2, [r3, #3]
 8014322:	2108      	movs	r1, #8
 8014324:	187b      	adds	r3, r7, r1
 8014326:	701a      	strb	r2, [r3, #0]
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	791a      	ldrb	r2, [r3, #4]
 801432c:	187b      	adds	r3, r7, r1
 801432e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8014330:	240e      	movs	r4, #14
 8014332:	193b      	adds	r3, r7, r4
 8014334:	687a      	ldr	r2, [r7, #4]
 8014336:	7952      	ldrb	r2, [r2, #5]
 8014338:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 801433a:	187b      	adds	r3, r7, r1
 801433c:	2102      	movs	r1, #2
 801433e:	0018      	movs	r0, r3
 8014340:	f7ff fe66 	bl	8014010 <CalculateCRC>
 8014344:	0003      	movs	r3, r0
 8014346:	001a      	movs	r2, r3
 8014348:	193b      	adds	r3, r7, r4
 801434a:	781b      	ldrb	r3, [r3, #0]
 801434c:	4293      	cmp	r3, r2
 801434e:	d00d      	beq.n	801436c <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8014350:	4a0b      	ldr	r2, [pc, #44]	@ (8014380 <CheckCRC+0xac>)
 8014352:	4b0a      	ldr	r3, [pc, #40]	@ (801437c <CheckCRC+0xa8>)
 8014354:	0019      	movs	r1, r3
 8014356:	2001      	movs	r0, #1
 8014358:	f7ff fd14 	bl	8013d84 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 801435c:	4a09      	ldr	r2, [pc, #36]	@ (8014384 <CheckCRC+0xb0>)
 801435e:	4b0a      	ldr	r3, [pc, #40]	@ (8014388 <CheckCRC+0xb4>)
 8014360:	2185      	movs	r1, #133	@ 0x85
 8014362:	0018      	movs	r0, r3
 8014364:	f7ff fdf6 	bl	8013f54 <errorHandler>
		return false;
 8014368:	2300      	movs	r3, #0
 801436a:	e000      	b.n	801436e <CheckCRC+0x9a>
	}
	return true;
 801436c:	2301      	movs	r3, #1
}
 801436e:	0018      	movs	r0, r3
 8014370:	46bd      	mov	sp, r7
 8014372:	b005      	add	sp, #20
 8014374:	bd90      	pop	{r4, r7, pc}
 8014376:	46c0      	nop			@ (mov r8, r8)
 8014378:	0802da18 	.word	0x0802da18
 801437c:	0802da40 	.word	0x0802da40
 8014380:	0802da44 	.word	0x0802da44
 8014384:	0802da70 	.word	0x0802da70
 8014388:	0802e430 	.word	0x0802e430

0801438c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 801438c:	b580      	push	{r7, lr}
 801438e:	b084      	sub	sp, #16
 8014390:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8014392:	1dbb      	adds	r3, r7, #6
 8014394:	2289      	movs	r2, #137	@ 0x89
 8014396:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8014398:	1dbb      	adds	r3, r7, #6
 801439a:	2201      	movs	r2, #1
 801439c:	0019      	movs	r1, r3
 801439e:	2044      	movs	r0, #68	@ 0x44
 80143a0:	f7ff fe14 	bl	8013fcc <WriteRegister>
	HAL_Delay(30);
 80143a4:	201e      	movs	r0, #30
 80143a6:	f000 fa6f 	bl	8014888 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 80143aa:	4b14      	ldr	r3, [pc, #80]	@ (80143fc <HIDS_DeviceConnected+0x70>)
 80143ac:	2206      	movs	r2, #6
 80143ae:	0019      	movs	r1, r3
 80143b0:	2044      	movs	r0, #68	@ 0x44
 80143b2:	f7ff fde9 	bl	8013f88 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80143b6:	1dfb      	adds	r3, r7, #7
 80143b8:	2200      	movs	r2, #0
 80143ba:	701a      	strb	r2, [r3, #0]
 80143bc:	e011      	b.n	80143e2 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 80143be:	1dfb      	adds	r3, r7, #7
 80143c0:	7818      	ldrb	r0, [r3, #0]
 80143c2:	1dfb      	adds	r3, r7, #7
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	4a0d      	ldr	r2, [pc, #52]	@ (80143fc <HIDS_DeviceConnected+0x70>)
 80143c8:	5cd3      	ldrb	r3, [r2, r3]
 80143ca:	4a0d      	ldr	r2, [pc, #52]	@ (8014400 <HIDS_DeviceConnected+0x74>)
 80143cc:	490d      	ldr	r1, [pc, #52]	@ (8014404 <HIDS_DeviceConnected+0x78>)
 80143ce:	9300      	str	r3, [sp, #0]
 80143d0:	0003      	movs	r3, r0
 80143d2:	2002      	movs	r0, #2
 80143d4:	f7ff fcd6 	bl	8013d84 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80143d8:	1dfb      	adds	r3, r7, #7
 80143da:	781a      	ldrb	r2, [r3, #0]
 80143dc:	1dfb      	adds	r3, r7, #7
 80143de:	3201      	adds	r2, #1
 80143e0:	701a      	strb	r2, [r3, #0]
 80143e2:	1dfb      	adds	r3, r7, #7
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	2b05      	cmp	r3, #5
 80143e8:	d9e9      	bls.n	80143be <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 80143ea:	4b04      	ldr	r3, [pc, #16]	@ (80143fc <HIDS_DeviceConnected+0x70>)
 80143ec:	0018      	movs	r0, r3
 80143ee:	f7ff ff71 	bl	80142d4 <CheckCRC>
 80143f2:	0003      	movs	r3, r0
}
 80143f4:	0018      	movs	r0, r3
 80143f6:	46bd      	mov	sp, r7
 80143f8:	b002      	add	sp, #8
 80143fa:	bd80      	pop	{r7, pc}
 80143fc:	200024f4 	.word	0x200024f4
 8014400:	0802da88 	.word	0x0802da88
 8014404:	0802da14 	.word	0x0802da14

08014408 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8014408:	b580      	push	{r7, lr}
 801440a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 801440c:	4b04      	ldr	r3, [pc, #16]	@ (8014420 <HIDS_MeasurementReady+0x18>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	0018      	movs	r0, r3
 8014412:	f7ff fc61 	bl	8013cd8 <TimestampIsReached>
 8014416:	0003      	movs	r3, r0
}
 8014418:	0018      	movs	r0, r3
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}
 801441e:	46c0      	nop			@ (mov r8, r8)
 8014420:	200000f4 	.word	0x200000f4

08014424 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8014424:	b580      	push	{r7, lr}
 8014426:	b084      	sub	sp, #16
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
 801442c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 801442e:	4b41      	ldr	r3, [pc, #260]	@ (8014534 <HIDS_GetMeasurementValues+0x110>)
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d001      	beq.n	801443a <HIDS_GetMeasurementValues+0x16>
 8014436:	2301      	movs	r3, #1
 8014438:	e077      	b.n	801452a <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 801443a:	f7ff ffe5 	bl	8014408 <HIDS_MeasurementReady>
 801443e:	0003      	movs	r3, r0
 8014440:	001a      	movs	r2, r3
 8014442:	2301      	movs	r3, #1
 8014444:	4053      	eors	r3, r2
 8014446:	b2db      	uxtb	r3, r3
 8014448:	2b00      	cmp	r3, #0
 801444a:	d001      	beq.n	8014450 <HIDS_GetMeasurementValues+0x2c>
 801444c:	2300      	movs	r3, #0
 801444e:	e06c      	b.n	801452a <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8014450:	4b39      	ldr	r3, [pc, #228]	@ (8014538 <HIDS_GetMeasurementValues+0x114>)
 8014452:	2206      	movs	r2, #6
 8014454:	0019      	movs	r1, r3
 8014456:	2044      	movs	r0, #68	@ 0x44
 8014458:	f7ff fd96 	bl	8013f88 <ReadRegister>
 801445c:	0003      	movs	r3, r0
 801445e:	001a      	movs	r2, r3
 8014460:	2301      	movs	r3, #1
 8014462:	4053      	eors	r3, r2
 8014464:	b2db      	uxtb	r3, r3
 8014466:	2b00      	cmp	r3, #0
 8014468:	d005      	beq.n	8014476 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 801446a:	4a34      	ldr	r2, [pc, #208]	@ (801453c <HIDS_GetMeasurementValues+0x118>)
 801446c:	4b34      	ldr	r3, [pc, #208]	@ (8014540 <HIDS_GetMeasurementValues+0x11c>)
 801446e:	0019      	movs	r1, r3
 8014470:	2001      	movs	r0, #1
 8014472:	f7ff fc87 	bl	8013d84 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8014476:	4b30      	ldr	r3, [pc, #192]	@ (8014538 <HIDS_GetMeasurementValues+0x114>)
 8014478:	0018      	movs	r0, r3
 801447a:	f7ff ff2b 	bl	80142d4 <CheckCRC>
 801447e:	0003      	movs	r3, r0
 8014480:	001a      	movs	r2, r3
 8014482:	2301      	movs	r3, #1
 8014484:	4053      	eors	r3, r2
 8014486:	b2db      	uxtb	r3, r3
 8014488:	2b00      	cmp	r3, #0
 801448a:	d001      	beq.n	8014490 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 801448c:	2300      	movs	r3, #0
 801448e:	e04c      	b.n	801452a <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8014490:	4b29      	ldr	r3, [pc, #164]	@ (8014538 <HIDS_GetMeasurementValues+0x114>)
 8014492:	781b      	ldrb	r3, [r3, #0]
 8014494:	021b      	lsls	r3, r3, #8
 8014496:	4a28      	ldr	r2, [pc, #160]	@ (8014538 <HIDS_GetMeasurementValues+0x114>)
 8014498:	7852      	ldrb	r2, [r2, #1]
 801449a:	4313      	orrs	r3, r2
 801449c:	22af      	movs	r2, #175	@ 0xaf
 801449e:	4353      	muls	r3, r2
 80144a0:	0018      	movs	r0, r3
 80144a2:	f7ef f9a5 	bl	80037f0 <__aeabi_i2d>
 80144a6:	2200      	movs	r2, #0
 80144a8:	4b26      	ldr	r3, [pc, #152]	@ (8014544 <HIDS_GetMeasurementValues+0x120>)
 80144aa:	f7ed fe19 	bl	80020e0 <__aeabi_ddiv>
 80144ae:	0002      	movs	r2, r0
 80144b0:	000b      	movs	r3, r1
 80144b2:	0010      	movs	r0, r2
 80144b4:	0019      	movs	r1, r3
 80144b6:	f7ef fa35 	bl	8003924 <__aeabi_d2f>
 80144ba:	1c03      	adds	r3, r0, #0
 80144bc:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 80144be:	4922      	ldr	r1, [pc, #136]	@ (8014548 <HIDS_GetMeasurementValues+0x124>)
 80144c0:	68f8      	ldr	r0, [r7, #12]
 80144c2:	f7ec ff17 	bl	80012f4 <__aeabi_fsub>
 80144c6:	1c03      	adds	r3, r0, #0
 80144c8:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 80144ca:	4b1b      	ldr	r3, [pc, #108]	@ (8014538 <HIDS_GetMeasurementValues+0x114>)
 80144cc:	78db      	ldrb	r3, [r3, #3]
 80144ce:	021b      	lsls	r3, r3, #8
 80144d0:	4a19      	ldr	r2, [pc, #100]	@ (8014538 <HIDS_GetMeasurementValues+0x114>)
 80144d2:	7912      	ldrb	r2, [r2, #4]
 80144d4:	431a      	orrs	r2, r3
 80144d6:	0013      	movs	r3, r2
 80144d8:	015b      	lsls	r3, r3, #5
 80144da:	1a9b      	subs	r3, r3, r2
 80144dc:	009b      	lsls	r3, r3, #2
 80144de:	189b      	adds	r3, r3, r2
 80144e0:	0018      	movs	r0, r3
 80144e2:	f7ef f985 	bl	80037f0 <__aeabi_i2d>
 80144e6:	2200      	movs	r2, #0
 80144e8:	4b16      	ldr	r3, [pc, #88]	@ (8014544 <HIDS_GetMeasurementValues+0x120>)
 80144ea:	f7ed fdf9 	bl	80020e0 <__aeabi_ddiv>
 80144ee:	0002      	movs	r2, r0
 80144f0:	000b      	movs	r3, r1
 80144f2:	0010      	movs	r0, r2
 80144f4:	0019      	movs	r1, r3
 80144f6:	f7ef fa15 	bl	8003924 <__aeabi_d2f>
 80144fa:	1c03      	adds	r3, r0, #0
 80144fc:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 80144fe:	4913      	ldr	r1, [pc, #76]	@ (801454c <HIDS_GetMeasurementValues+0x128>)
 8014500:	68b8      	ldr	r0, [r7, #8]
 8014502:	f7ec fef7 	bl	80012f4 <__aeabi_fsub>
 8014506:	1c03      	adds	r3, r0, #0
 8014508:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	68fa      	ldr	r2, [r7, #12]
 801450e:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	68ba      	ldr	r2, [r7, #8]
 8014514:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8014516:	687a      	ldr	r2, [r7, #4]
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	0011      	movs	r1, r2
 801451c:	0018      	movs	r0, r3
 801451e:	f7fc ff7d 	bl	801141c <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8014522:	4b04      	ldr	r3, [pc, #16]	@ (8014534 <HIDS_GetMeasurementValues+0x110>)
 8014524:	2201      	movs	r2, #1
 8014526:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8014528:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 801452a:	0018      	movs	r0, r3
 801452c:	46bd      	mov	sp, r7
 801452e:	b004      	add	sp, #16
 8014530:	bd80      	pop	{r7, pc}
 8014532:	46c0      	nop			@ (mov r8, r8)
 8014534:	20002508 	.word	0x20002508
 8014538:	200024fc 	.word	0x200024fc
 801453c:	0802daa8 	.word	0x0802daa8
 8014540:	0802da40 	.word	0x0802da40
 8014544:	40efffe0 	.word	0x40efffe0
 8014548:	42340000 	.word	0x42340000
 801454c:	40c00000 	.word	0x40c00000

08014550 <ResetHIDSresults>:

void ResetHIDSresults() {
 8014550:	b580      	push	{r7, lr}
 8014552:	af00      	add	r7, sp, #0
  humid = 0.0;
 8014554:	4b04      	ldr	r3, [pc, #16]	@ (8014568 <ResetHIDSresults+0x18>)
 8014556:	2200      	movs	r2, #0
 8014558:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 801455a:	4b04      	ldr	r3, [pc, #16]	@ (801456c <ResetHIDSresults+0x1c>)
 801455c:	2200      	movs	r2, #0
 801455e:	601a      	str	r2, [r3, #0]
}
 8014560:	46c0      	nop			@ (mov r8, r8)
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}
 8014566:	46c0      	nop			@ (mov r8, r8)
 8014568:	200024e4 	.word	0x200024e4
 801456c:	200024e8 	.word	0x200024e8

08014570 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8014570:	b5b0      	push	{r4, r5, r7, lr}
 8014572:	b084      	sub	sp, #16
 8014574:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8014576:	4b69      	ldr	r3, [pc, #420]	@ (801471c <HIDS_Upkeep+0x1ac>)
 8014578:	781b      	ldrb	r3, [r3, #0]
 801457a:	2b06      	cmp	r3, #6
 801457c:	d900      	bls.n	8014580 <HIDS_Upkeep+0x10>
 801457e:	e0bd      	b.n	80146fc <HIDS_Upkeep+0x18c>
 8014580:	009a      	lsls	r2, r3, #2
 8014582:	4b67      	ldr	r3, [pc, #412]	@ (8014720 <HIDS_Upkeep+0x1b0>)
 8014584:	18d3      	adds	r3, r2, r3
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 801458a:	4a66      	ldr	r2, [pc, #408]	@ (8014724 <HIDS_Upkeep+0x1b4>)
 801458c:	4b66      	ldr	r3, [pc, #408]	@ (8014728 <HIDS_Upkeep+0x1b8>)
 801458e:	0019      	movs	r1, r3
 8014590:	2003      	movs	r0, #3
 8014592:	f7ff fbf7 	bl	8013d84 <CreateLine>
      break;
 8014596:	e0bc      	b.n	8014712 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8014598:	f7ff ffda 	bl	8014550 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 801459c:	4b5f      	ldr	r3, [pc, #380]	@ (801471c <HIDS_Upkeep+0x1ac>)
 801459e:	2201      	movs	r2, #1
 80145a0:	701a      	strb	r2, [r3, #0]
      break;
 80145a2:	e0b6      	b.n	8014712 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 80145a4:	f7f9 fc2c 	bl	800de00 <getSensorLock>
 80145a8:	1e03      	subs	r3, r0, #0
 80145aa:	d000      	beq.n	80145ae <HIDS_Upkeep+0x3e>
 80145ac:	e0aa      	b.n	8014704 <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 80145ae:	2001      	movs	r0, #1
 80145b0:	f7f9 fc12 	bl	800ddd8 <setSensorLock>
      SetMeasurementIndicator();
 80145b4:	f7fe f988 	bl	80128c8 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 80145b8:	f7ff fe3c 	bl	8014234 <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 80145bc:	200a      	movs	r0, #10
 80145be:	f000 f963 	bl	8014888 <HAL_Delay>
      setSensorLock(FREE);
 80145c2:	2000      	movs	r0, #0
 80145c4:	f7f9 fc08 	bl	800ddd8 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 80145c8:	4b54      	ldr	r3, [pc, #336]	@ (801471c <HIDS_Upkeep+0x1ac>)
 80145ca:	2202      	movs	r2, #2
 80145cc:	701a      	strb	r2, [r3, #0]
      break;
 80145ce:	e0a0      	b.n	8014712 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 80145d0:	f7f9 fc16 	bl	800de00 <getSensorLock>
 80145d4:	1e03      	subs	r3, r0, #0
 80145d6:	d000      	beq.n	80145da <HIDS_Upkeep+0x6a>
 80145d8:	e096      	b.n	8014708 <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 80145da:	2001      	movs	r0, #1
 80145dc:	f7f9 fbfc 	bl	800ddd8 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 80145e0:	4a52      	ldr	r2, [pc, #328]	@ (801472c <HIDS_Upkeep+0x1bc>)
 80145e2:	4b53      	ldr	r3, [pc, #332]	@ (8014730 <HIDS_Upkeep+0x1c0>)
 80145e4:	0011      	movs	r1, r2
 80145e6:	0018      	movs	r0, r3
 80145e8:	f7ff ff1c 	bl	8014424 <HIDS_GetMeasurementValues>
 80145ec:	1e03      	subs	r3, r0, #0
 80145ee:	d002      	beq.n	80145f6 <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 80145f0:	4b4a      	ldr	r3, [pc, #296]	@ (801471c <HIDS_Upkeep+0x1ac>)
 80145f2:	2203      	movs	r2, #3
 80145f4:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 80145f6:	200a      	movs	r0, #10
 80145f8:	f000 f946 	bl	8014888 <HAL_Delay>
      setSensorLock(FREE);
 80145fc:	2000      	movs	r0, #0
 80145fe:	f7f9 fbeb 	bl	800ddd8 <setSensorLock>
      break;
 8014602:	e086      	b.n	8014712 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Info("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8014604:	4b4a      	ldr	r3, [pc, #296]	@ (8014730 <HIDS_Upkeep+0x1c0>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	1c18      	adds	r0, r3, #0
 801460a:	f7ef f943 	bl	8003894 <__aeabi_f2d>
 801460e:	0004      	movs	r4, r0
 8014610:	000d      	movs	r5, r1
 8014612:	4b46      	ldr	r3, [pc, #280]	@ (801472c <HIDS_Upkeep+0x1bc>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	1c18      	adds	r0, r3, #0
 8014618:	f7ef f93c 	bl	8003894 <__aeabi_f2d>
 801461c:	0002      	movs	r2, r0
 801461e:	000b      	movs	r3, r1
 8014620:	4844      	ldr	r0, [pc, #272]	@ (8014734 <HIDS_Upkeep+0x1c4>)
 8014622:	4945      	ldr	r1, [pc, #276]	@ (8014738 <HIDS_Upkeep+0x1c8>)
 8014624:	9202      	str	r2, [sp, #8]
 8014626:	9303      	str	r3, [sp, #12]
 8014628:	9400      	str	r4, [sp, #0]
 801462a:	9501      	str	r5, [sp, #4]
 801462c:	0002      	movs	r2, r0
 801462e:	2002      	movs	r0, #2
 8014630:	f7ff fba8 	bl	8013d84 <CreateLine>
      setHIDS(temp, humid);
 8014634:	4b3d      	ldr	r3, [pc, #244]	@ (801472c <HIDS_Upkeep+0x1bc>)
 8014636:	681a      	ldr	r2, [r3, #0]
 8014638:	4b3d      	ldr	r3, [pc, #244]	@ (8014730 <HIDS_Upkeep+0x1c0>)
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	1c19      	adds	r1, r3, #0
 801463e:	1c10      	adds	r0, r2, #0
 8014640:	f7f0 fa26 	bl	8004a90 <setHIDS>
      ResetMeasurementIndicator();
 8014644:	f7fe f952 	bl	80128ec <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8014648:	4b38      	ldr	r3, [pc, #224]	@ (801472c <HIDS_Upkeep+0x1bc>)
 801464a:	681c      	ldr	r4, [r3, #0]
 801464c:	4a37      	ldr	r2, [pc, #220]	@ (801472c <HIDS_Upkeep+0x1bc>)
 801464e:	4b38      	ldr	r3, [pc, #224]	@ (8014730 <HIDS_Upkeep+0x1c0>)
 8014650:	0011      	movs	r1, r2
 8014652:	0018      	movs	r0, r3
 8014654:	f7ff fd34 	bl	80140c0 <HIDS_DewPointCalculation>
 8014658:	1c03      	adds	r3, r0, #0
 801465a:	1c19      	adds	r1, r3, #0
 801465c:	1c20      	adds	r0, r4, #0
 801465e:	f7ec fe49 	bl	80012f4 <__aeabi_fsub>
 8014662:	1c03      	adds	r3, r0, #0
 8014664:	21fe      	movs	r1, #254	@ 0xfe
 8014666:	0589      	lsls	r1, r1, #22
 8014668:	1c18      	adds	r0, r3, #0
 801466a:	f7eb ff61 	bl	8000530 <__aeabi_fcmplt>
 801466e:	1e03      	subs	r3, r0, #0
 8014670:	d023      	beq.n	80146ba <HIDS_Upkeep+0x14a>
 8014672:	f7f5 ff73 	bl	800a55c <getPosixTime>
 8014676:	0002      	movs	r2, r0
 8014678:	4b30      	ldr	r3, [pc, #192]	@ (801473c <HIDS_Upkeep+0x1cc>)
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	1ad2      	subs	r2, r2, r3
 801467e:	23e1      	movs	r3, #225	@ 0xe1
 8014680:	009b      	lsls	r3, r3, #2
 8014682:	429a      	cmp	r2, r3
 8014684:	d919      	bls.n	80146ba <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 8014686:	4a2e      	ldr	r2, [pc, #184]	@ (8014740 <HIDS_Upkeep+0x1d0>)
 8014688:	4b2b      	ldr	r3, [pc, #172]	@ (8014738 <HIDS_Upkeep+0x1c8>)
 801468a:	0019      	movs	r1, r3
 801468c:	2002      	movs	r0, #2
 801468e:	f7ff fb79 	bl	8013d84 <CreateLine>
        if (getSensorLock() != FREE) {
 8014692:	f7f9 fbb5 	bl	800de00 <getSensorLock>
 8014696:	1e03      	subs	r3, r0, #0
 8014698:	d138      	bne.n	801470c <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 801469a:	f7ff fd83 	bl	80141a4 <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 801469e:	200a      	movs	r0, #10
 80146a0:	f000 f8f2 	bl	8014888 <HAL_Delay>
        setSensorLock(FREE);
 80146a4:	2000      	movs	r0, #0
 80146a6:	f7f9 fb97 	bl	800ddd8 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 80146aa:	f000 f8e3 	bl	8014874 <HAL_GetTick>
 80146ae:	0003      	movs	r3, r0
 80146b0:	4a24      	ldr	r2, [pc, #144]	@ (8014744 <HIDS_Upkeep+0x1d4>)
 80146b2:	189a      	adds	r2, r3, r2
 80146b4:	4b24      	ldr	r3, [pc, #144]	@ (8014748 <HIDS_Upkeep+0x1d8>)
 80146b6:	601a      	str	r2, [r3, #0]
 80146b8:	e011      	b.n	80146de <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 80146ba:	f000 f8db 	bl	8014874 <HAL_GetTick>
 80146be:	0004      	movs	r4, r0
 80146c0:	f7f5 faaa 	bl	8009c18 <Check_USB_PowerOn>
 80146c4:	1e03      	subs	r3, r0, #0
 80146c6:	d103      	bne.n	80146d0 <HIDS_Upkeep+0x160>
 80146c8:	4b20      	ldr	r3, [pc, #128]	@ (801474c <HIDS_Upkeep+0x1dc>)
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d001      	beq.n	80146d4 <HIDS_Upkeep+0x164>
 80146d0:	4b1f      	ldr	r3, [pc, #124]	@ (8014750 <HIDS_Upkeep+0x1e0>)
 80146d2:	e001      	b.n	80146d8 <HIDS_Upkeep+0x168>
 80146d4:	23fa      	movs	r3, #250	@ 0xfa
 80146d6:	009b      	lsls	r3, r3, #2
 80146d8:	191a      	adds	r2, r3, r4
 80146da:	4b1b      	ldr	r3, [pc, #108]	@ (8014748 <HIDS_Upkeep+0x1d8>)
 80146dc:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 80146de:	4b0f      	ldr	r3, [pc, #60]	@ (801471c <HIDS_Upkeep+0x1ac>)
 80146e0:	2206      	movs	r2, #6
 80146e2:	701a      	strb	r2, [r3, #0]
      break;
 80146e4:	e015      	b.n	8014712 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 80146e6:	4b18      	ldr	r3, [pc, #96]	@ (8014748 <HIDS_Upkeep+0x1d8>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	0018      	movs	r0, r3
 80146ec:	f7ff faf4 	bl	8013cd8 <TimestampIsReached>
 80146f0:	1e03      	subs	r3, r0, #0
 80146f2:	d00d      	beq.n	8014710 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 80146f4:	4b09      	ldr	r3, [pc, #36]	@ (801471c <HIDS_Upkeep+0x1ac>)
 80146f6:	2200      	movs	r2, #0
 80146f8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80146fa:	e009      	b.n	8014710 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 80146fc:	4b07      	ldr	r3, [pc, #28]	@ (801471c <HIDS_Upkeep+0x1ac>)
 80146fe:	2200      	movs	r2, #0
 8014700:	701a      	strb	r2, [r3, #0]
      break;
 8014702:	e006      	b.n	8014712 <HIDS_Upkeep+0x1a2>
        break;
 8014704:	46c0      	nop			@ (mov r8, r8)
 8014706:	e004      	b.n	8014712 <HIDS_Upkeep+0x1a2>
        break;
 8014708:	46c0      	nop			@ (mov r8, r8)
 801470a:	e002      	b.n	8014712 <HIDS_Upkeep+0x1a2>
          break;
 801470c:	46c0      	nop			@ (mov r8, r8)
 801470e:	e000      	b.n	8014712 <HIDS_Upkeep+0x1a2>
      break;
 8014710:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8014712:	4b02      	ldr	r3, [pc, #8]	@ (801471c <HIDS_Upkeep+0x1ac>)
 8014714:	781b      	ldrb	r3, [r3, #0]
}
 8014716:	0018      	movs	r0, r3
 8014718:	46bd      	mov	sp, r7
 801471a:	bdb0      	pop	{r4, r5, r7, pc}
 801471c:	20002510 	.word	0x20002510
 8014720:	0802e414 	.word	0x0802e414
 8014724:	0802dadc 	.word	0x0802dadc
 8014728:	0802db10 	.word	0x0802db10
 801472c:	200024e8 	.word	0x200024e8
 8014730:	200024e4 	.word	0x200024e4
 8014734:	0802db14 	.word	0x0802db14
 8014738:	0802da14 	.word	0x0802da14
 801473c:	20002504 	.word	0x20002504
 8014740:	0802db48 	.word	0x0802db48
 8014744:	00002ee0 	.word	0x00002ee0
 8014748:	2000250c 	.word	0x2000250c
 801474c:	2000214e 	.word	0x2000214e
 8014750:	00002710 	.word	0x00002710

08014754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8014754:	480d      	ldr	r0, [pc, #52]	@ (801478c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8014756:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8014758:	f7fe ff18 	bl	801358c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801475c:	480c      	ldr	r0, [pc, #48]	@ (8014790 <LoopForever+0x6>)
  ldr r1, =_edata
 801475e:	490d      	ldr	r1, [pc, #52]	@ (8014794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8014760:	4a0d      	ldr	r2, [pc, #52]	@ (8014798 <LoopForever+0xe>)
  movs r3, #0
 8014762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8014764:	e002      	b.n	801476c <LoopCopyDataInit>

08014766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8014766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801476a:	3304      	adds	r3, #4

0801476c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801476c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801476e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014770:	d3f9      	bcc.n	8014766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8014772:	4a0a      	ldr	r2, [pc, #40]	@ (801479c <LoopForever+0x12>)
  ldr r4, =_ebss
 8014774:	4c0a      	ldr	r4, [pc, #40]	@ (80147a0 <LoopForever+0x16>)
  movs r3, #0
 8014776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014778:	e001      	b.n	801477e <LoopFillZerobss>

0801477a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801477a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801477c:	3204      	adds	r2, #4

0801477e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801477e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014780:	d3fb      	bcc.n	801477a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8014782:	f011 ff1b 	bl	80265bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014786:	f7f8 f9c5 	bl	800cb14 <main>

0801478a <LoopForever>:

LoopForever:
    b LoopForever
 801478a:	e7fe      	b.n	801478a <LoopForever>
   ldr   r0, =_estack
 801478c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8014790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8014794:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 8014798:	0802edf8 	.word	0x0802edf8
  ldr r2, =_sbss
 801479c:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 80147a0:	20003918 	.word	0x20003918

080147a4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80147a4:	e7fe      	b.n	80147a4 <ADC1_COMP_IRQHandler>
	...

080147a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b082      	sub	sp, #8
 80147ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80147ae:	1dfb      	adds	r3, r7, #7
 80147b0:	2200      	movs	r2, #0
 80147b2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80147b4:	4b0b      	ldr	r3, [pc, #44]	@ (80147e4 <HAL_Init+0x3c>)
 80147b6:	681a      	ldr	r2, [r3, #0]
 80147b8:	4b0a      	ldr	r3, [pc, #40]	@ (80147e4 <HAL_Init+0x3c>)
 80147ba:	2140      	movs	r1, #64	@ 0x40
 80147bc:	430a      	orrs	r2, r1
 80147be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80147c0:	2003      	movs	r0, #3
 80147c2:	f000 f811 	bl	80147e8 <HAL_InitTick>
 80147c6:	1e03      	subs	r3, r0, #0
 80147c8:	d003      	beq.n	80147d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80147ca:	1dfb      	adds	r3, r7, #7
 80147cc:	2201      	movs	r2, #1
 80147ce:	701a      	strb	r2, [r3, #0]
 80147d0:	e001      	b.n	80147d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80147d2:	f7fe fd8f 	bl	80132f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80147d6:	1dfb      	adds	r3, r7, #7
 80147d8:	781b      	ldrb	r3, [r3, #0]
}
 80147da:	0018      	movs	r0, r3
 80147dc:	46bd      	mov	sp, r7
 80147de:	b002      	add	sp, #8
 80147e0:	bd80      	pop	{r7, pc}
 80147e2:	46c0      	nop			@ (mov r8, r8)
 80147e4:	40022000 	.word	0x40022000

080147e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80147e8:	b590      	push	{r4, r7, lr}
 80147ea:	b083      	sub	sp, #12
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80147f0:	4b14      	ldr	r3, [pc, #80]	@ (8014844 <HAL_InitTick+0x5c>)
 80147f2:	681c      	ldr	r4, [r3, #0]
 80147f4:	4b14      	ldr	r3, [pc, #80]	@ (8014848 <HAL_InitTick+0x60>)
 80147f6:	781b      	ldrb	r3, [r3, #0]
 80147f8:	0019      	movs	r1, r3
 80147fa:	23fa      	movs	r3, #250	@ 0xfa
 80147fc:	0098      	lsls	r0, r3, #2
 80147fe:	f7eb fcd1 	bl	80001a4 <__udivsi3>
 8014802:	0003      	movs	r3, r0
 8014804:	0019      	movs	r1, r3
 8014806:	0020      	movs	r0, r4
 8014808:	f7eb fccc 	bl	80001a4 <__udivsi3>
 801480c:	0003      	movs	r3, r0
 801480e:	0018      	movs	r0, r3
 8014810:	f000 fcdf 	bl	80151d2 <HAL_SYSTICK_Config>
 8014814:	1e03      	subs	r3, r0, #0
 8014816:	d001      	beq.n	801481c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8014818:	2301      	movs	r3, #1
 801481a:	e00f      	b.n	801483c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2b03      	cmp	r3, #3
 8014820:	d80b      	bhi.n	801483a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8014822:	6879      	ldr	r1, [r7, #4]
 8014824:	2301      	movs	r3, #1
 8014826:	425b      	negs	r3, r3
 8014828:	2200      	movs	r2, #0
 801482a:	0018      	movs	r0, r3
 801482c:	f000 fca8 	bl	8015180 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8014830:	4b06      	ldr	r3, [pc, #24]	@ (801484c <HAL_InitTick+0x64>)
 8014832:	687a      	ldr	r2, [r7, #4]
 8014834:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8014836:	2300      	movs	r3, #0
 8014838:	e000      	b.n	801483c <HAL_InitTick+0x54>
    return HAL_ERROR;
 801483a:	2301      	movs	r3, #1
}
 801483c:	0018      	movs	r0, r3
 801483e:	46bd      	mov	sp, r7
 8014840:	b003      	add	sp, #12
 8014842:	bd90      	pop	{r4, r7, pc}
 8014844:	200000ec 	.word	0x200000ec
 8014848:	20000100 	.word	0x20000100
 801484c:	200000fc 	.word	0x200000fc

08014850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8014854:	4b05      	ldr	r3, [pc, #20]	@ (801486c <HAL_IncTick+0x1c>)
 8014856:	781b      	ldrb	r3, [r3, #0]
 8014858:	001a      	movs	r2, r3
 801485a:	4b05      	ldr	r3, [pc, #20]	@ (8014870 <HAL_IncTick+0x20>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	18d2      	adds	r2, r2, r3
 8014860:	4b03      	ldr	r3, [pc, #12]	@ (8014870 <HAL_IncTick+0x20>)
 8014862:	601a      	str	r2, [r3, #0]
}
 8014864:	46c0      	nop			@ (mov r8, r8)
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}
 801486a:	46c0      	nop			@ (mov r8, r8)
 801486c:	20000100 	.word	0x20000100
 8014870:	20002514 	.word	0x20002514

08014874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	af00      	add	r7, sp, #0
  return uwTick;
 8014878:	4b02      	ldr	r3, [pc, #8]	@ (8014884 <HAL_GetTick+0x10>)
 801487a:	681b      	ldr	r3, [r3, #0]
}
 801487c:	0018      	movs	r0, r3
 801487e:	46bd      	mov	sp, r7
 8014880:	bd80      	pop	{r7, pc}
 8014882:	46c0      	nop			@ (mov r8, r8)
 8014884:	20002514 	.word	0x20002514

08014888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b084      	sub	sp, #16
 801488c:	af00      	add	r7, sp, #0
 801488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014890:	f7ff fff0 	bl	8014874 <HAL_GetTick>
 8014894:	0003      	movs	r3, r0
 8014896:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	3301      	adds	r3, #1
 80148a0:	d005      	beq.n	80148ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80148a2:	4b0a      	ldr	r3, [pc, #40]	@ (80148cc <HAL_Delay+0x44>)
 80148a4:	781b      	ldrb	r3, [r3, #0]
 80148a6:	001a      	movs	r2, r3
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	189b      	adds	r3, r3, r2
 80148ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80148ae:	46c0      	nop			@ (mov r8, r8)
 80148b0:	f7ff ffe0 	bl	8014874 <HAL_GetTick>
 80148b4:	0002      	movs	r2, r0
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	1ad3      	subs	r3, r2, r3
 80148ba:	68fa      	ldr	r2, [r7, #12]
 80148bc:	429a      	cmp	r2, r3
 80148be:	d8f7      	bhi.n	80148b0 <HAL_Delay+0x28>
  {
  }
}
 80148c0:	46c0      	nop			@ (mov r8, r8)
 80148c2:	46c0      	nop			@ (mov r8, r8)
 80148c4:	46bd      	mov	sp, r7
 80148c6:	b004      	add	sp, #16
 80148c8:	bd80      	pop	{r7, pc}
 80148ca:	46c0      	nop			@ (mov r8, r8)
 80148cc:	20000100 	.word	0x20000100

080148d0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80148d4:	4b04      	ldr	r3, [pc, #16]	@ (80148e8 <HAL_SuspendTick+0x18>)
 80148d6:	681a      	ldr	r2, [r3, #0]
 80148d8:	4b03      	ldr	r3, [pc, #12]	@ (80148e8 <HAL_SuspendTick+0x18>)
 80148da:	2102      	movs	r1, #2
 80148dc:	438a      	bics	r2, r1
 80148de:	601a      	str	r2, [r3, #0]
}
 80148e0:	46c0      	nop			@ (mov r8, r8)
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bd80      	pop	{r7, pc}
 80148e6:	46c0      	nop			@ (mov r8, r8)
 80148e8:	e000e010 	.word	0xe000e010

080148ec <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80148f0:	4b04      	ldr	r3, [pc, #16]	@ (8014904 <HAL_ResumeTick+0x18>)
 80148f2:	681a      	ldr	r2, [r3, #0]
 80148f4:	4b03      	ldr	r3, [pc, #12]	@ (8014904 <HAL_ResumeTick+0x18>)
 80148f6:	2102      	movs	r1, #2
 80148f8:	430a      	orrs	r2, r1
 80148fa:	601a      	str	r2, [r3, #0]
}
 80148fc:	46c0      	nop			@ (mov r8, r8)
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
 8014902:	46c0      	nop			@ (mov r8, r8)
 8014904:	e000e010 	.word	0xe000e010

08014908 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b082      	sub	sp, #8
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d101      	bne.n	801491a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8014916:	2301      	movs	r3, #1
 8014918:	e159      	b.n	8014bce <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801491e:	2b00      	cmp	r3, #0
 8014920:	d10a      	bne.n	8014938 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	2200      	movs	r2, #0
 8014926:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2250      	movs	r2, #80	@ 0x50
 801492c:	2100      	movs	r1, #0
 801492e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	0018      	movs	r0, r3
 8014934:	f7f6 f9f4 	bl	800ad20 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801493c:	2210      	movs	r2, #16
 801493e:	4013      	ands	r3, r2
 8014940:	2b10      	cmp	r3, #16
 8014942:	d005      	beq.n	8014950 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	689b      	ldr	r3, [r3, #8]
 801494a:	2204      	movs	r2, #4
 801494c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 801494e:	d00b      	beq.n	8014968 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014954:	2210      	movs	r2, #16
 8014956:	431a      	orrs	r2, r3
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2250      	movs	r2, #80	@ 0x50
 8014960:	2100      	movs	r1, #0
 8014962:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014964:	2301      	movs	r3, #1
 8014966:	e132      	b.n	8014bce <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801496c:	4a9a      	ldr	r2, [pc, #616]	@ (8014bd8 <HAL_ADC_Init+0x2d0>)
 801496e:	4013      	ands	r3, r2
 8014970:	2202      	movs	r2, #2
 8014972:	431a      	orrs	r2, r3
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	689b      	ldr	r3, [r3, #8]
 801497e:	2203      	movs	r2, #3
 8014980:	4013      	ands	r3, r2
 8014982:	2b01      	cmp	r3, #1
 8014984:	d108      	bne.n	8014998 <HAL_ADC_Init+0x90>
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	2201      	movs	r2, #1
 801498e:	4013      	ands	r3, r2
 8014990:	2b01      	cmp	r3, #1
 8014992:	d101      	bne.n	8014998 <HAL_ADC_Init+0x90>
 8014994:	2301      	movs	r3, #1
 8014996:	e000      	b.n	801499a <HAL_ADC_Init+0x92>
 8014998:	2300      	movs	r3, #0
 801499a:	2b00      	cmp	r3, #0
 801499c:	d149      	bne.n	8014a32 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	685a      	ldr	r2, [r3, #4]
 80149a2:	23c0      	movs	r3, #192	@ 0xc0
 80149a4:	061b      	lsls	r3, r3, #24
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d00b      	beq.n	80149c2 <HAL_ADC_Init+0xba>
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	685a      	ldr	r2, [r3, #4]
 80149ae:	2380      	movs	r3, #128	@ 0x80
 80149b0:	05db      	lsls	r3, r3, #23
 80149b2:	429a      	cmp	r2, r3
 80149b4:	d005      	beq.n	80149c2 <HAL_ADC_Init+0xba>
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	685a      	ldr	r2, [r3, #4]
 80149ba:	2380      	movs	r3, #128	@ 0x80
 80149bc:	061b      	lsls	r3, r3, #24
 80149be:	429a      	cmp	r2, r3
 80149c0:	d111      	bne.n	80149e6 <HAL_ADC_Init+0xde>
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	691a      	ldr	r2, [r3, #16]
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	0092      	lsls	r2, r2, #2
 80149ce:	0892      	lsrs	r2, r2, #2
 80149d0:	611a      	str	r2, [r3, #16]
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	6919      	ldr	r1, [r3, #16]
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	685a      	ldr	r2, [r3, #4]
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	430a      	orrs	r2, r1
 80149e2:	611a      	str	r2, [r3, #16]
 80149e4:	e014      	b.n	8014a10 <HAL_ADC_Init+0x108>
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	691a      	ldr	r2, [r3, #16]
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	0092      	lsls	r2, r2, #2
 80149f2:	0892      	lsrs	r2, r2, #2
 80149f4:	611a      	str	r2, [r3, #16]
 80149f6:	4b79      	ldr	r3, [pc, #484]	@ (8014bdc <HAL_ADC_Init+0x2d4>)
 80149f8:	681a      	ldr	r2, [r3, #0]
 80149fa:	4b78      	ldr	r3, [pc, #480]	@ (8014bdc <HAL_ADC_Init+0x2d4>)
 80149fc:	4978      	ldr	r1, [pc, #480]	@ (8014be0 <HAL_ADC_Init+0x2d8>)
 80149fe:	400a      	ands	r2, r1
 8014a00:	601a      	str	r2, [r3, #0]
 8014a02:	4b76      	ldr	r3, [pc, #472]	@ (8014bdc <HAL_ADC_Init+0x2d4>)
 8014a04:	6819      	ldr	r1, [r3, #0]
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	685a      	ldr	r2, [r3, #4]
 8014a0a:	4b74      	ldr	r3, [pc, #464]	@ (8014bdc <HAL_ADC_Init+0x2d4>)
 8014a0c:	430a      	orrs	r2, r1
 8014a0e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	68da      	ldr	r2, [r3, #12]
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	2118      	movs	r1, #24
 8014a1c:	438a      	bics	r2, r1
 8014a1e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	68d9      	ldr	r1, [r3, #12]
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	689a      	ldr	r2, [r3, #8]
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	430a      	orrs	r2, r1
 8014a30:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8014a32:	4b6a      	ldr	r3, [pc, #424]	@ (8014bdc <HAL_ADC_Init+0x2d4>)
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	4b69      	ldr	r3, [pc, #420]	@ (8014bdc <HAL_ADC_Init+0x2d4>)
 8014a38:	496a      	ldr	r1, [pc, #424]	@ (8014be4 <HAL_ADC_Init+0x2dc>)
 8014a3a:	400a      	ands	r2, r1
 8014a3c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8014a3e:	4b67      	ldr	r3, [pc, #412]	@ (8014bdc <HAL_ADC_Init+0x2d4>)
 8014a40:	6819      	ldr	r1, [r3, #0]
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a46:	065a      	lsls	r2, r3, #25
 8014a48:	4b64      	ldr	r3, [pc, #400]	@ (8014bdc <HAL_ADC_Init+0x2d4>)
 8014a4a:	430a      	orrs	r2, r1
 8014a4c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	689a      	ldr	r2, [r3, #8]
 8014a54:	2380      	movs	r3, #128	@ 0x80
 8014a56:	055b      	lsls	r3, r3, #21
 8014a58:	4013      	ands	r3, r2
 8014a5a:	d108      	bne.n	8014a6e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	689a      	ldr	r2, [r3, #8]
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	2180      	movs	r1, #128	@ 0x80
 8014a68:	0549      	lsls	r1, r1, #21
 8014a6a:	430a      	orrs	r2, r1
 8014a6c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	68da      	ldr	r2, [r3, #12]
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	495b      	ldr	r1, [pc, #364]	@ (8014be8 <HAL_ADC_Init+0x2e0>)
 8014a7a:	400a      	ands	r2, r1
 8014a7c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	68d9      	ldr	r1, [r3, #12]
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	691b      	ldr	r3, [r3, #16]
 8014a8c:	2b02      	cmp	r3, #2
 8014a8e:	d101      	bne.n	8014a94 <HAL_ADC_Init+0x18c>
 8014a90:	2304      	movs	r3, #4
 8014a92:	e000      	b.n	8014a96 <HAL_ADC_Init+0x18e>
 8014a94:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014a96:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2020      	movs	r0, #32
 8014a9c:	5c1b      	ldrb	r3, [r3, r0]
 8014a9e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014aa0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	202c      	movs	r0, #44	@ 0x2c
 8014aa6:	5c1b      	ldrb	r3, [r3, r0]
 8014aa8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014aaa:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014ab0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	699b      	ldr	r3, [r3, #24]
 8014ab6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8014ab8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	69db      	ldr	r3, [r3, #28]
 8014abe:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014ac0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	430a      	orrs	r2, r1
 8014ac8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014ace:	23c2      	movs	r3, #194	@ 0xc2
 8014ad0:	33ff      	adds	r3, #255	@ 0xff
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	d00b      	beq.n	8014aee <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	68d9      	ldr	r1, [r3, #12]
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014ae4:	431a      	orrs	r2, r3
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	430a      	orrs	r2, r1
 8014aec:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	2221      	movs	r2, #33	@ 0x21
 8014af2:	5c9b      	ldrb	r3, [r3, r2]
 8014af4:	2b01      	cmp	r3, #1
 8014af6:	d11a      	bne.n	8014b2e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2220      	movs	r2, #32
 8014afc:	5c9b      	ldrb	r3, [r3, r2]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d109      	bne.n	8014b16 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	68da      	ldr	r2, [r3, #12]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	2180      	movs	r1, #128	@ 0x80
 8014b0e:	0249      	lsls	r1, r1, #9
 8014b10:	430a      	orrs	r2, r1
 8014b12:	60da      	str	r2, [r3, #12]
 8014b14:	e00b      	b.n	8014b2e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b1a:	2220      	movs	r2, #32
 8014b1c:	431a      	orrs	r2, r3
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014b26:	2201      	movs	r2, #1
 8014b28:	431a      	orrs	r2, r3
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b32:	2b01      	cmp	r3, #1
 8014b34:	d11f      	bne.n	8014b76 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	691a      	ldr	r2, [r3, #16]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	492a      	ldr	r1, [pc, #168]	@ (8014bec <HAL_ADC_Init+0x2e4>)
 8014b42:	400a      	ands	r2, r1
 8014b44:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	6919      	ldr	r1, [r3, #16]
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014b54:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8014b5a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	430a      	orrs	r2, r1
 8014b62:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	691a      	ldr	r2, [r3, #16]
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	2101      	movs	r1, #1
 8014b70:	430a      	orrs	r2, r1
 8014b72:	611a      	str	r2, [r3, #16]
 8014b74:	e00e      	b.n	8014b94 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	691b      	ldr	r3, [r3, #16]
 8014b7c:	2201      	movs	r2, #1
 8014b7e:	4013      	ands	r3, r2
 8014b80:	2b01      	cmp	r3, #1
 8014b82:	d107      	bne.n	8014b94 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	691a      	ldr	r2, [r3, #16]
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	2101      	movs	r1, #1
 8014b90:	438a      	bics	r2, r1
 8014b92:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	695a      	ldr	r2, [r3, #20]
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	2107      	movs	r1, #7
 8014ba0:	438a      	bics	r2, r1
 8014ba2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	6959      	ldr	r1, [r3, #20]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	430a      	orrs	r2, r1
 8014bb4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014bc0:	2203      	movs	r2, #3
 8014bc2:	4393      	bics	r3, r2
 8014bc4:	2201      	movs	r2, #1
 8014bc6:	431a      	orrs	r2, r3
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8014bcc:	2300      	movs	r3, #0
}
 8014bce:	0018      	movs	r0, r3
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	b002      	add	sp, #8
 8014bd4:	bd80      	pop	{r7, pc}
 8014bd6:	46c0      	nop			@ (mov r8, r8)
 8014bd8:	fffffefd 	.word	0xfffffefd
 8014bdc:	40012708 	.word	0x40012708
 8014be0:	ffc3ffff 	.word	0xffc3ffff
 8014be4:	fdffffff 	.word	0xfdffffff
 8014be8:	fffe0219 	.word	0xfffe0219
 8014bec:	fffffc03 	.word	0xfffffc03

08014bf0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8014bf0:	b590      	push	{r4, r7, lr}
 8014bf2:	b085      	sub	sp, #20
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014bf8:	230f      	movs	r3, #15
 8014bfa:	18fb      	adds	r3, r7, r3
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	689b      	ldr	r3, [r3, #8]
 8014c06:	2204      	movs	r2, #4
 8014c08:	4013      	ands	r3, r2
 8014c0a:	d138      	bne.n	8014c7e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	2250      	movs	r2, #80	@ 0x50
 8014c10:	5c9b      	ldrb	r3, [r3, r2]
 8014c12:	2b01      	cmp	r3, #1
 8014c14:	d101      	bne.n	8014c1a <HAL_ADC_Start+0x2a>
 8014c16:	2302      	movs	r3, #2
 8014c18:	e038      	b.n	8014c8c <HAL_ADC_Start+0x9c>
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2250      	movs	r2, #80	@ 0x50
 8014c1e:	2101      	movs	r1, #1
 8014c20:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	69db      	ldr	r3, [r3, #28]
 8014c26:	2b01      	cmp	r3, #1
 8014c28:	d007      	beq.n	8014c3a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8014c2a:	230f      	movs	r3, #15
 8014c2c:	18fc      	adds	r4, r7, r3
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	0018      	movs	r0, r3
 8014c32:	f000 f95f 	bl	8014ef4 <ADC_Enable>
 8014c36:	0003      	movs	r3, r0
 8014c38:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8014c3a:	230f      	movs	r3, #15
 8014c3c:	18fb      	adds	r3, r7, r3
 8014c3e:	781b      	ldrb	r3, [r3, #0]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d120      	bne.n	8014c86 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c48:	4a12      	ldr	r2, [pc, #72]	@ (8014c94 <HAL_ADC_Start+0xa4>)
 8014c4a:	4013      	ands	r3, r2
 8014c4c:	2280      	movs	r2, #128	@ 0x80
 8014c4e:	0052      	lsls	r2, r2, #1
 8014c50:	431a      	orrs	r2, r3
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	2200      	movs	r2, #0
 8014c5a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2250      	movs	r2, #80	@ 0x50
 8014c60:	2100      	movs	r1, #0
 8014c62:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	221c      	movs	r2, #28
 8014c6a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	689a      	ldr	r2, [r3, #8]
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	2104      	movs	r1, #4
 8014c78:	430a      	orrs	r2, r1
 8014c7a:	609a      	str	r2, [r3, #8]
 8014c7c:	e003      	b.n	8014c86 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8014c7e:	230f      	movs	r3, #15
 8014c80:	18fb      	adds	r3, r7, r3
 8014c82:	2202      	movs	r2, #2
 8014c84:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8014c86:	230f      	movs	r3, #15
 8014c88:	18fb      	adds	r3, r7, r3
 8014c8a:	781b      	ldrb	r3, [r3, #0]
}
 8014c8c:	0018      	movs	r0, r3
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	b005      	add	sp, #20
 8014c92:	bd90      	pop	{r4, r7, pc}
 8014c94:	fffff0fe 	.word	0xfffff0fe

08014c98 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b084      	sub	sp, #16
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	695b      	ldr	r3, [r3, #20]
 8014cae:	2b08      	cmp	r3, #8
 8014cb0:	d102      	bne.n	8014cb8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8014cb2:	2308      	movs	r3, #8
 8014cb4:	60fb      	str	r3, [r7, #12]
 8014cb6:	e014      	b.n	8014ce2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	68db      	ldr	r3, [r3, #12]
 8014cbe:	2201      	movs	r2, #1
 8014cc0:	4013      	ands	r3, r2
 8014cc2:	2b01      	cmp	r3, #1
 8014cc4:	d10b      	bne.n	8014cde <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014cca:	2220      	movs	r2, #32
 8014ccc:	431a      	orrs	r2, r3
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	2250      	movs	r2, #80	@ 0x50
 8014cd6:	2100      	movs	r1, #0
 8014cd8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8014cda:	2301      	movs	r3, #1
 8014cdc:	e072      	b.n	8014dc4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8014cde:	230c      	movs	r3, #12
 8014ce0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8014ce2:	f7ff fdc7 	bl	8014874 <HAL_GetTick>
 8014ce6:	0003      	movs	r3, r0
 8014ce8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014cea:	e01f      	b.n	8014d2c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	3301      	adds	r3, #1
 8014cf0:	d01c      	beq.n	8014d2c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d007      	beq.n	8014d08 <HAL_ADC_PollForConversion+0x70>
 8014cf8:	f7ff fdbc 	bl	8014874 <HAL_GetTick>
 8014cfc:	0002      	movs	r2, r0
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	1ad3      	subs	r3, r2, r3
 8014d02:	683a      	ldr	r2, [r7, #0]
 8014d04:	429a      	cmp	r2, r3
 8014d06:	d211      	bcs.n	8014d2c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	68fa      	ldr	r2, [r7, #12]
 8014d10:	4013      	ands	r3, r2
 8014d12:	d10b      	bne.n	8014d2c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d18:	2204      	movs	r2, #4
 8014d1a:	431a      	orrs	r2, r3
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	2250      	movs	r2, #80	@ 0x50
 8014d24:	2100      	movs	r1, #0
 8014d26:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014d28:	2303      	movs	r3, #3
 8014d2a:	e04b      	b.n	8014dc4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	68fa      	ldr	r2, [r7, #12]
 8014d34:	4013      	ands	r3, r2
 8014d36:	d0d9      	beq.n	8014cec <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d3c:	2280      	movs	r2, #128	@ 0x80
 8014d3e:	0092      	lsls	r2, r2, #2
 8014d40:	431a      	orrs	r2, r3
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	68da      	ldr	r2, [r3, #12]
 8014d4c:	23c0      	movs	r3, #192	@ 0xc0
 8014d4e:	011b      	lsls	r3, r3, #4
 8014d50:	4013      	ands	r3, r2
 8014d52:	d12e      	bne.n	8014db2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	2220      	movs	r2, #32
 8014d58:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d129      	bne.n	8014db2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	2208      	movs	r2, #8
 8014d66:	4013      	ands	r3, r2
 8014d68:	2b08      	cmp	r3, #8
 8014d6a:	d122      	bne.n	8014db2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	689b      	ldr	r3, [r3, #8]
 8014d72:	2204      	movs	r2, #4
 8014d74:	4013      	ands	r3, r2
 8014d76:	d110      	bne.n	8014d9a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	685a      	ldr	r2, [r3, #4]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	210c      	movs	r1, #12
 8014d84:	438a      	bics	r2, r1
 8014d86:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8014dcc <HAL_ADC_PollForConversion+0x134>)
 8014d8e:	4013      	ands	r3, r2
 8014d90:	2201      	movs	r2, #1
 8014d92:	431a      	orrs	r2, r3
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	655a      	str	r2, [r3, #84]	@ 0x54
 8014d98:	e00b      	b.n	8014db2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d9e:	2220      	movs	r2, #32
 8014da0:	431a      	orrs	r2, r3
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014daa:	2201      	movs	r2, #1
 8014dac:	431a      	orrs	r2, r3
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	699b      	ldr	r3, [r3, #24]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d103      	bne.n	8014dc2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	220c      	movs	r2, #12
 8014dc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014dc2:	2300      	movs	r3, #0
}
 8014dc4:	0018      	movs	r0, r3
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	b004      	add	sp, #16
 8014dca:	bd80      	pop	{r7, pc}
 8014dcc:	fffffefe 	.word	0xfffffefe

08014dd0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8014dde:	0018      	movs	r0, r3
 8014de0:	46bd      	mov	sp, r7
 8014de2:	b002      	add	sp, #8
 8014de4:	bd80      	pop	{r7, pc}
	...

08014de8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b082      	sub	sp, #8
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]
 8014df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2250      	movs	r2, #80	@ 0x50
 8014df6:	5c9b      	ldrb	r3, [r3, r2]
 8014df8:	2b01      	cmp	r3, #1
 8014dfa:	d101      	bne.n	8014e00 <HAL_ADC_ConfigChannel+0x18>
 8014dfc:	2302      	movs	r3, #2
 8014dfe:	e06c      	b.n	8014eda <HAL_ADC_ConfigChannel+0xf2>
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	2250      	movs	r2, #80	@ 0x50
 8014e04:	2101      	movs	r1, #1
 8014e06:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	689b      	ldr	r3, [r3, #8]
 8014e0e:	2204      	movs	r2, #4
 8014e10:	4013      	ands	r3, r2
 8014e12:	d00b      	beq.n	8014e2c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e18:	2220      	movs	r2, #32
 8014e1a:	431a      	orrs	r2, r3
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2250      	movs	r2, #80	@ 0x50
 8014e24:	2100      	movs	r1, #0
 8014e26:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014e28:	2301      	movs	r3, #1
 8014e2a:	e056      	b.n	8014eda <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8014e2c:	683b      	ldr	r3, [r7, #0]
 8014e2e:	685b      	ldr	r3, [r3, #4]
 8014e30:	4a2c      	ldr	r2, [pc, #176]	@ (8014ee4 <HAL_ADC_ConfigChannel+0xfc>)
 8014e32:	4293      	cmp	r3, r2
 8014e34:	d028      	beq.n	8014e88 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	035b      	lsls	r3, r3, #13
 8014e42:	0b5a      	lsrs	r2, r3, #13
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	430a      	orrs	r2, r1
 8014e4a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	681a      	ldr	r2, [r3, #0]
 8014e50:	2380      	movs	r3, #128	@ 0x80
 8014e52:	02db      	lsls	r3, r3, #11
 8014e54:	4013      	ands	r3, r2
 8014e56:	d009      	beq.n	8014e6c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8014e58:	4b23      	ldr	r3, [pc, #140]	@ (8014ee8 <HAL_ADC_ConfigChannel+0x100>)
 8014e5a:	681a      	ldr	r2, [r3, #0]
 8014e5c:	4b22      	ldr	r3, [pc, #136]	@ (8014ee8 <HAL_ADC_ConfigChannel+0x100>)
 8014e5e:	2180      	movs	r1, #128	@ 0x80
 8014e60:	0409      	lsls	r1, r1, #16
 8014e62:	430a      	orrs	r2, r1
 8014e64:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8014e66:	200a      	movs	r0, #10
 8014e68:	f000 f8ac 	bl	8014fc4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	681a      	ldr	r2, [r3, #0]
 8014e70:	2380      	movs	r3, #128	@ 0x80
 8014e72:	029b      	lsls	r3, r3, #10
 8014e74:	4013      	ands	r3, r2
 8014e76:	d02b      	beq.n	8014ed0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8014e78:	4b1b      	ldr	r3, [pc, #108]	@ (8014ee8 <HAL_ADC_ConfigChannel+0x100>)
 8014e7a:	681a      	ldr	r2, [r3, #0]
 8014e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8014ee8 <HAL_ADC_ConfigChannel+0x100>)
 8014e7e:	2180      	movs	r1, #128	@ 0x80
 8014e80:	03c9      	lsls	r1, r1, #15
 8014e82:	430a      	orrs	r2, r1
 8014e84:	601a      	str	r2, [r3, #0]
 8014e86:	e023      	b.n	8014ed0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	035b      	lsls	r3, r3, #13
 8014e94:	0b5b      	lsrs	r3, r3, #13
 8014e96:	43d9      	mvns	r1, r3
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	400a      	ands	r2, r1
 8014e9e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	681a      	ldr	r2, [r3, #0]
 8014ea4:	2380      	movs	r3, #128	@ 0x80
 8014ea6:	02db      	lsls	r3, r3, #11
 8014ea8:	4013      	ands	r3, r2
 8014eaa:	d005      	beq.n	8014eb8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8014eac:	4b0e      	ldr	r3, [pc, #56]	@ (8014ee8 <HAL_ADC_ConfigChannel+0x100>)
 8014eae:	681a      	ldr	r2, [r3, #0]
 8014eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8014ee8 <HAL_ADC_ConfigChannel+0x100>)
 8014eb2:	490e      	ldr	r1, [pc, #56]	@ (8014eec <HAL_ADC_ConfigChannel+0x104>)
 8014eb4:	400a      	ands	r2, r1
 8014eb6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	681a      	ldr	r2, [r3, #0]
 8014ebc:	2380      	movs	r3, #128	@ 0x80
 8014ebe:	029b      	lsls	r3, r3, #10
 8014ec0:	4013      	ands	r3, r2
 8014ec2:	d005      	beq.n	8014ed0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8014ec4:	4b08      	ldr	r3, [pc, #32]	@ (8014ee8 <HAL_ADC_ConfigChannel+0x100>)
 8014ec6:	681a      	ldr	r2, [r3, #0]
 8014ec8:	4b07      	ldr	r3, [pc, #28]	@ (8014ee8 <HAL_ADC_ConfigChannel+0x100>)
 8014eca:	4909      	ldr	r1, [pc, #36]	@ (8014ef0 <HAL_ADC_ConfigChannel+0x108>)
 8014ecc:	400a      	ands	r2, r1
 8014ece:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2250      	movs	r2, #80	@ 0x50
 8014ed4:	2100      	movs	r1, #0
 8014ed6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8014ed8:	2300      	movs	r3, #0
}
 8014eda:	0018      	movs	r0, r3
 8014edc:	46bd      	mov	sp, r7
 8014ede:	b002      	add	sp, #8
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	46c0      	nop			@ (mov r8, r8)
 8014ee4:	00001001 	.word	0x00001001
 8014ee8:	40012708 	.word	0x40012708
 8014eec:	ff7fffff 	.word	0xff7fffff
 8014ef0:	ffbfffff 	.word	0xffbfffff

08014ef4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b084      	sub	sp, #16
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014efc:	2300      	movs	r3, #0
 8014efe:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	689b      	ldr	r3, [r3, #8]
 8014f06:	2203      	movs	r2, #3
 8014f08:	4013      	ands	r3, r2
 8014f0a:	2b01      	cmp	r3, #1
 8014f0c:	d108      	bne.n	8014f20 <ADC_Enable+0x2c>
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	2201      	movs	r2, #1
 8014f16:	4013      	ands	r3, r2
 8014f18:	2b01      	cmp	r3, #1
 8014f1a:	d101      	bne.n	8014f20 <ADC_Enable+0x2c>
 8014f1c:	2301      	movs	r3, #1
 8014f1e:	e000      	b.n	8014f22 <ADC_Enable+0x2e>
 8014f20:	2300      	movs	r3, #0
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d146      	bne.n	8014fb4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	689b      	ldr	r3, [r3, #8]
 8014f2c:	4a24      	ldr	r2, [pc, #144]	@ (8014fc0 <ADC_Enable+0xcc>)
 8014f2e:	4013      	ands	r3, r2
 8014f30:	d00d      	beq.n	8014f4e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f36:	2210      	movs	r2, #16
 8014f38:	431a      	orrs	r2, r3
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014f42:	2201      	movs	r2, #1
 8014f44:	431a      	orrs	r2, r3
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8014f4a:	2301      	movs	r3, #1
 8014f4c:	e033      	b.n	8014fb6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	689a      	ldr	r2, [r3, #8]
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	2101      	movs	r1, #1
 8014f5a:	430a      	orrs	r2, r1
 8014f5c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8014f5e:	2001      	movs	r0, #1
 8014f60:	f000 f830 	bl	8014fc4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8014f64:	f7ff fc86 	bl	8014874 <HAL_GetTick>
 8014f68:	0003      	movs	r3, r0
 8014f6a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014f6c:	e01b      	b.n	8014fa6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8014f6e:	f7ff fc81 	bl	8014874 <HAL_GetTick>
 8014f72:	0002      	movs	r2, r0
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	1ad3      	subs	r3, r2, r3
 8014f78:	2b0a      	cmp	r3, #10
 8014f7a:	d914      	bls.n	8014fa6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	2201      	movs	r2, #1
 8014f84:	4013      	ands	r3, r2
 8014f86:	2b01      	cmp	r3, #1
 8014f88:	d00d      	beq.n	8014fa6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f8e:	2210      	movs	r2, #16
 8014f90:	431a      	orrs	r2, r3
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014f9a:	2201      	movs	r2, #1
 8014f9c:	431a      	orrs	r2, r3
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	e007      	b.n	8014fb6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	2201      	movs	r2, #1
 8014fae:	4013      	ands	r3, r2
 8014fb0:	2b01      	cmp	r3, #1
 8014fb2:	d1dc      	bne.n	8014f6e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8014fb4:	2300      	movs	r3, #0
}
 8014fb6:	0018      	movs	r0, r3
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	b004      	add	sp, #16
 8014fbc:	bd80      	pop	{r7, pc}
 8014fbe:	46c0      	nop			@ (mov r8, r8)
 8014fc0:	80000017 	.word	0x80000017

08014fc4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b084      	sub	sp, #16
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8014fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8014ffc <ADC_DelayMicroSecond+0x38>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	490b      	ldr	r1, [pc, #44]	@ (8015000 <ADC_DelayMicroSecond+0x3c>)
 8014fd2:	0018      	movs	r0, r3
 8014fd4:	f7eb f8e6 	bl	80001a4 <__udivsi3>
 8014fd8:	0003      	movs	r3, r0
 8014fda:	001a      	movs	r2, r3
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	4353      	muls	r3, r2
 8014fe0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8014fe2:	e002      	b.n	8014fea <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	3b01      	subs	r3, #1
 8014fe8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d1f9      	bne.n	8014fe4 <ADC_DelayMicroSecond+0x20>
  }
}
 8014ff0:	46c0      	nop			@ (mov r8, r8)
 8014ff2:	46c0      	nop			@ (mov r8, r8)
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	b004      	add	sp, #16
 8014ff8:	bd80      	pop	{r7, pc}
 8014ffa:	46c0      	nop			@ (mov r8, r8)
 8014ffc:	200000ec 	.word	0x200000ec
 8015000:	000f4240 	.word	0x000f4240

08015004 <__NVIC_EnableIRQ>:
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
 801500a:	0002      	movs	r2, r0
 801500c:	1dfb      	adds	r3, r7, #7
 801500e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8015010:	1dfb      	adds	r3, r7, #7
 8015012:	781b      	ldrb	r3, [r3, #0]
 8015014:	2b7f      	cmp	r3, #127	@ 0x7f
 8015016:	d809      	bhi.n	801502c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015018:	1dfb      	adds	r3, r7, #7
 801501a:	781b      	ldrb	r3, [r3, #0]
 801501c:	001a      	movs	r2, r3
 801501e:	231f      	movs	r3, #31
 8015020:	401a      	ands	r2, r3
 8015022:	4b04      	ldr	r3, [pc, #16]	@ (8015034 <__NVIC_EnableIRQ+0x30>)
 8015024:	2101      	movs	r1, #1
 8015026:	4091      	lsls	r1, r2
 8015028:	000a      	movs	r2, r1
 801502a:	601a      	str	r2, [r3, #0]
}
 801502c:	46c0      	nop			@ (mov r8, r8)
 801502e:	46bd      	mov	sp, r7
 8015030:	b002      	add	sp, #8
 8015032:	bd80      	pop	{r7, pc}
 8015034:	e000e100 	.word	0xe000e100

08015038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015038:	b590      	push	{r4, r7, lr}
 801503a:	b083      	sub	sp, #12
 801503c:	af00      	add	r7, sp, #0
 801503e:	0002      	movs	r2, r0
 8015040:	6039      	str	r1, [r7, #0]
 8015042:	1dfb      	adds	r3, r7, #7
 8015044:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8015046:	1dfb      	adds	r3, r7, #7
 8015048:	781b      	ldrb	r3, [r3, #0]
 801504a:	2b7f      	cmp	r3, #127	@ 0x7f
 801504c:	d828      	bhi.n	80150a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801504e:	4a2f      	ldr	r2, [pc, #188]	@ (801510c <__NVIC_SetPriority+0xd4>)
 8015050:	1dfb      	adds	r3, r7, #7
 8015052:	781b      	ldrb	r3, [r3, #0]
 8015054:	b25b      	sxtb	r3, r3
 8015056:	089b      	lsrs	r3, r3, #2
 8015058:	33c0      	adds	r3, #192	@ 0xc0
 801505a:	009b      	lsls	r3, r3, #2
 801505c:	589b      	ldr	r3, [r3, r2]
 801505e:	1dfa      	adds	r2, r7, #7
 8015060:	7812      	ldrb	r2, [r2, #0]
 8015062:	0011      	movs	r1, r2
 8015064:	2203      	movs	r2, #3
 8015066:	400a      	ands	r2, r1
 8015068:	00d2      	lsls	r2, r2, #3
 801506a:	21ff      	movs	r1, #255	@ 0xff
 801506c:	4091      	lsls	r1, r2
 801506e:	000a      	movs	r2, r1
 8015070:	43d2      	mvns	r2, r2
 8015072:	401a      	ands	r2, r3
 8015074:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	019b      	lsls	r3, r3, #6
 801507a:	22ff      	movs	r2, #255	@ 0xff
 801507c:	401a      	ands	r2, r3
 801507e:	1dfb      	adds	r3, r7, #7
 8015080:	781b      	ldrb	r3, [r3, #0]
 8015082:	0018      	movs	r0, r3
 8015084:	2303      	movs	r3, #3
 8015086:	4003      	ands	r3, r0
 8015088:	00db      	lsls	r3, r3, #3
 801508a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801508c:	481f      	ldr	r0, [pc, #124]	@ (801510c <__NVIC_SetPriority+0xd4>)
 801508e:	1dfb      	adds	r3, r7, #7
 8015090:	781b      	ldrb	r3, [r3, #0]
 8015092:	b25b      	sxtb	r3, r3
 8015094:	089b      	lsrs	r3, r3, #2
 8015096:	430a      	orrs	r2, r1
 8015098:	33c0      	adds	r3, #192	@ 0xc0
 801509a:	009b      	lsls	r3, r3, #2
 801509c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 801509e:	e031      	b.n	8015104 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80150a0:	4a1b      	ldr	r2, [pc, #108]	@ (8015110 <__NVIC_SetPriority+0xd8>)
 80150a2:	1dfb      	adds	r3, r7, #7
 80150a4:	781b      	ldrb	r3, [r3, #0]
 80150a6:	0019      	movs	r1, r3
 80150a8:	230f      	movs	r3, #15
 80150aa:	400b      	ands	r3, r1
 80150ac:	3b08      	subs	r3, #8
 80150ae:	089b      	lsrs	r3, r3, #2
 80150b0:	3306      	adds	r3, #6
 80150b2:	009b      	lsls	r3, r3, #2
 80150b4:	18d3      	adds	r3, r2, r3
 80150b6:	3304      	adds	r3, #4
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	1dfa      	adds	r2, r7, #7
 80150bc:	7812      	ldrb	r2, [r2, #0]
 80150be:	0011      	movs	r1, r2
 80150c0:	2203      	movs	r2, #3
 80150c2:	400a      	ands	r2, r1
 80150c4:	00d2      	lsls	r2, r2, #3
 80150c6:	21ff      	movs	r1, #255	@ 0xff
 80150c8:	4091      	lsls	r1, r2
 80150ca:	000a      	movs	r2, r1
 80150cc:	43d2      	mvns	r2, r2
 80150ce:	401a      	ands	r2, r3
 80150d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80150d2:	683b      	ldr	r3, [r7, #0]
 80150d4:	019b      	lsls	r3, r3, #6
 80150d6:	22ff      	movs	r2, #255	@ 0xff
 80150d8:	401a      	ands	r2, r3
 80150da:	1dfb      	adds	r3, r7, #7
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	0018      	movs	r0, r3
 80150e0:	2303      	movs	r3, #3
 80150e2:	4003      	ands	r3, r0
 80150e4:	00db      	lsls	r3, r3, #3
 80150e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80150e8:	4809      	ldr	r0, [pc, #36]	@ (8015110 <__NVIC_SetPriority+0xd8>)
 80150ea:	1dfb      	adds	r3, r7, #7
 80150ec:	781b      	ldrb	r3, [r3, #0]
 80150ee:	001c      	movs	r4, r3
 80150f0:	230f      	movs	r3, #15
 80150f2:	4023      	ands	r3, r4
 80150f4:	3b08      	subs	r3, #8
 80150f6:	089b      	lsrs	r3, r3, #2
 80150f8:	430a      	orrs	r2, r1
 80150fa:	3306      	adds	r3, #6
 80150fc:	009b      	lsls	r3, r3, #2
 80150fe:	18c3      	adds	r3, r0, r3
 8015100:	3304      	adds	r3, #4
 8015102:	601a      	str	r2, [r3, #0]
}
 8015104:	46c0      	nop			@ (mov r8, r8)
 8015106:	46bd      	mov	sp, r7
 8015108:	b003      	add	sp, #12
 801510a:	bd90      	pop	{r4, r7, pc}
 801510c:	e000e100 	.word	0xe000e100
 8015110:	e000ed00 	.word	0xe000ed00

08015114 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8015118:	f3bf 8f4f 	dsb	sy
}
 801511c:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801511e:	4b04      	ldr	r3, [pc, #16]	@ (8015130 <__NVIC_SystemReset+0x1c>)
 8015120:	4a04      	ldr	r2, [pc, #16]	@ (8015134 <__NVIC_SystemReset+0x20>)
 8015122:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8015124:	f3bf 8f4f 	dsb	sy
}
 8015128:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801512a:	46c0      	nop			@ (mov r8, r8)
 801512c:	e7fd      	b.n	801512a <__NVIC_SystemReset+0x16>
 801512e:	46c0      	nop			@ (mov r8, r8)
 8015130:	e000ed00 	.word	0xe000ed00
 8015134:	05fa0004 	.word	0x05fa0004

08015138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b082      	sub	sp, #8
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	1e5a      	subs	r2, r3, #1
 8015144:	2380      	movs	r3, #128	@ 0x80
 8015146:	045b      	lsls	r3, r3, #17
 8015148:	429a      	cmp	r2, r3
 801514a:	d301      	bcc.n	8015150 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 801514c:	2301      	movs	r3, #1
 801514e:	e010      	b.n	8015172 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8015150:	4b0a      	ldr	r3, [pc, #40]	@ (801517c <SysTick_Config+0x44>)
 8015152:	687a      	ldr	r2, [r7, #4]
 8015154:	3a01      	subs	r2, #1
 8015156:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8015158:	2301      	movs	r3, #1
 801515a:	425b      	negs	r3, r3
 801515c:	2103      	movs	r1, #3
 801515e:	0018      	movs	r0, r3
 8015160:	f7ff ff6a 	bl	8015038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015164:	4b05      	ldr	r3, [pc, #20]	@ (801517c <SysTick_Config+0x44>)
 8015166:	2200      	movs	r2, #0
 8015168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801516a:	4b04      	ldr	r3, [pc, #16]	@ (801517c <SysTick_Config+0x44>)
 801516c:	2207      	movs	r2, #7
 801516e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8015170:	2300      	movs	r3, #0
}
 8015172:	0018      	movs	r0, r3
 8015174:	46bd      	mov	sp, r7
 8015176:	b002      	add	sp, #8
 8015178:	bd80      	pop	{r7, pc}
 801517a:	46c0      	nop			@ (mov r8, r8)
 801517c:	e000e010 	.word	0xe000e010

08015180 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015180:	b580      	push	{r7, lr}
 8015182:	b084      	sub	sp, #16
 8015184:	af00      	add	r7, sp, #0
 8015186:	60b9      	str	r1, [r7, #8]
 8015188:	607a      	str	r2, [r7, #4]
 801518a:	210f      	movs	r1, #15
 801518c:	187b      	adds	r3, r7, r1
 801518e:	1c02      	adds	r2, r0, #0
 8015190:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8015192:	68ba      	ldr	r2, [r7, #8]
 8015194:	187b      	adds	r3, r7, r1
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	b25b      	sxtb	r3, r3
 801519a:	0011      	movs	r1, r2
 801519c:	0018      	movs	r0, r3
 801519e:	f7ff ff4b 	bl	8015038 <__NVIC_SetPriority>
}
 80151a2:	46c0      	nop			@ (mov r8, r8)
 80151a4:	46bd      	mov	sp, r7
 80151a6:	b004      	add	sp, #16
 80151a8:	bd80      	pop	{r7, pc}

080151aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80151aa:	b580      	push	{r7, lr}
 80151ac:	b082      	sub	sp, #8
 80151ae:	af00      	add	r7, sp, #0
 80151b0:	0002      	movs	r2, r0
 80151b2:	1dfb      	adds	r3, r7, #7
 80151b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80151b6:	1dfb      	adds	r3, r7, #7
 80151b8:	781b      	ldrb	r3, [r3, #0]
 80151ba:	b25b      	sxtb	r3, r3
 80151bc:	0018      	movs	r0, r3
 80151be:	f7ff ff21 	bl	8015004 <__NVIC_EnableIRQ>
}
 80151c2:	46c0      	nop			@ (mov r8, r8)
 80151c4:	46bd      	mov	sp, r7
 80151c6:	b002      	add	sp, #8
 80151c8:	bd80      	pop	{r7, pc}

080151ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80151ca:	b580      	push	{r7, lr}
 80151cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80151ce:	f7ff ffa1 	bl	8015114 <__NVIC_SystemReset>

080151d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80151d2:	b580      	push	{r7, lr}
 80151d4:	b082      	sub	sp, #8
 80151d6:	af00      	add	r7, sp, #0
 80151d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	0018      	movs	r0, r3
 80151de:	f7ff ffab 	bl	8015138 <SysTick_Config>
 80151e2:	0003      	movs	r3, r0
}
 80151e4:	0018      	movs	r0, r3
 80151e6:	46bd      	mov	sp, r7
 80151e8:	b002      	add	sp, #8
 80151ea:	bd80      	pop	{r7, pc}

080151ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b084      	sub	sp, #16
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d101      	bne.n	80151fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80151fa:	2301      	movs	r3, #1
 80151fc:	e061      	b.n	80152c2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	4a32      	ldr	r2, [pc, #200]	@ (80152cc <HAL_DMA_Init+0xe0>)
 8015204:	4694      	mov	ip, r2
 8015206:	4463      	add	r3, ip
 8015208:	2114      	movs	r1, #20
 801520a:	0018      	movs	r0, r3
 801520c:	f7ea ffca 	bl	80001a4 <__udivsi3>
 8015210:	0003      	movs	r3, r0
 8015212:	009a      	lsls	r2, r3, #2
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	4a2d      	ldr	r2, [pc, #180]	@ (80152d0 <HAL_DMA_Init+0xe4>)
 801521c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	2225      	movs	r2, #37	@ 0x25
 8015222:	2102      	movs	r1, #2
 8015224:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	4a28      	ldr	r2, [pc, #160]	@ (80152d4 <HAL_DMA_Init+0xe8>)
 8015232:	4013      	ands	r3, r2
 8015234:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801523e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	691b      	ldr	r3, [r3, #16]
 8015244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801524a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	699b      	ldr	r3, [r3, #24]
 8015250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	6a1b      	ldr	r3, [r3, #32]
 801525c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801525e:	68fa      	ldr	r2, [r7, #12]
 8015260:	4313      	orrs	r3, r2
 8015262:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	68fa      	ldr	r2, [r7, #12]
 801526a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	689a      	ldr	r2, [r3, #8]
 8015270:	2380      	movs	r3, #128	@ 0x80
 8015272:	01db      	lsls	r3, r3, #7
 8015274:	429a      	cmp	r2, r3
 8015276:	d018      	beq.n	80152aa <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8015278:	4b17      	ldr	r3, [pc, #92]	@ (80152d8 <HAL_DMA_Init+0xec>)
 801527a:	681a      	ldr	r2, [r3, #0]
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015280:	211c      	movs	r1, #28
 8015282:	400b      	ands	r3, r1
 8015284:	210f      	movs	r1, #15
 8015286:	4099      	lsls	r1, r3
 8015288:	000b      	movs	r3, r1
 801528a:	43d9      	mvns	r1, r3
 801528c:	4b12      	ldr	r3, [pc, #72]	@ (80152d8 <HAL_DMA_Init+0xec>)
 801528e:	400a      	ands	r2, r1
 8015290:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8015292:	4b11      	ldr	r3, [pc, #68]	@ (80152d8 <HAL_DMA_Init+0xec>)
 8015294:	6819      	ldr	r1, [r3, #0]
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	685a      	ldr	r2, [r3, #4]
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801529e:	201c      	movs	r0, #28
 80152a0:	4003      	ands	r3, r0
 80152a2:	409a      	lsls	r2, r3
 80152a4:	4b0c      	ldr	r3, [pc, #48]	@ (80152d8 <HAL_DMA_Init+0xec>)
 80152a6:	430a      	orrs	r2, r1
 80152a8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	2200      	movs	r2, #0
 80152ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	2225      	movs	r2, #37	@ 0x25
 80152b4:	2101      	movs	r1, #1
 80152b6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2224      	movs	r2, #36	@ 0x24
 80152bc:	2100      	movs	r1, #0
 80152be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80152c0:	2300      	movs	r3, #0
}
 80152c2:	0018      	movs	r0, r3
 80152c4:	46bd      	mov	sp, r7
 80152c6:	b004      	add	sp, #16
 80152c8:	bd80      	pop	{r7, pc}
 80152ca:	46c0      	nop			@ (mov r8, r8)
 80152cc:	bffdfff8 	.word	0xbffdfff8
 80152d0:	40020000 	.word	0x40020000
 80152d4:	ffff800f 	.word	0xffff800f
 80152d8:	400200a8 	.word	0x400200a8

080152dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b086      	sub	sp, #24
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	60f8      	str	r0, [r7, #12]
 80152e4:	60b9      	str	r1, [r7, #8]
 80152e6:	607a      	str	r2, [r7, #4]
 80152e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80152ea:	2317      	movs	r3, #23
 80152ec:	18fb      	adds	r3, r7, r3
 80152ee:	2200      	movs	r2, #0
 80152f0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	2224      	movs	r2, #36	@ 0x24
 80152f6:	5c9b      	ldrb	r3, [r3, r2]
 80152f8:	2b01      	cmp	r3, #1
 80152fa:	d101      	bne.n	8015300 <HAL_DMA_Start_IT+0x24>
 80152fc:	2302      	movs	r3, #2
 80152fe:	e04f      	b.n	80153a0 <HAL_DMA_Start_IT+0xc4>
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2224      	movs	r2, #36	@ 0x24
 8015304:	2101      	movs	r1, #1
 8015306:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	2225      	movs	r2, #37	@ 0x25
 801530c:	5c9b      	ldrb	r3, [r3, r2]
 801530e:	b2db      	uxtb	r3, r3
 8015310:	2b01      	cmp	r3, #1
 8015312:	d13a      	bne.n	801538a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	2225      	movs	r2, #37	@ 0x25
 8015318:	2102      	movs	r1, #2
 801531a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	2200      	movs	r2, #0
 8015320:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	681a      	ldr	r2, [r3, #0]
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	2101      	movs	r1, #1
 801532e:	438a      	bics	r2, r1
 8015330:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	687a      	ldr	r2, [r7, #4]
 8015336:	68b9      	ldr	r1, [r7, #8]
 8015338:	68f8      	ldr	r0, [r7, #12]
 801533a:	f000 f976 	bl	801562a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015342:	2b00      	cmp	r3, #0
 8015344:	d008      	beq.n	8015358 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	681a      	ldr	r2, [r3, #0]
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	210e      	movs	r1, #14
 8015352:	430a      	orrs	r2, r1
 8015354:	601a      	str	r2, [r3, #0]
 8015356:	e00f      	b.n	8015378 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	681a      	ldr	r2, [r3, #0]
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	2104      	movs	r1, #4
 8015364:	438a      	bics	r2, r1
 8015366:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	681a      	ldr	r2, [r3, #0]
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	210a      	movs	r1, #10
 8015374:	430a      	orrs	r2, r1
 8015376:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	681a      	ldr	r2, [r3, #0]
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	2101      	movs	r1, #1
 8015384:	430a      	orrs	r2, r1
 8015386:	601a      	str	r2, [r3, #0]
 8015388:	e007      	b.n	801539a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	2224      	movs	r2, #36	@ 0x24
 801538e:	2100      	movs	r1, #0
 8015390:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8015392:	2317      	movs	r3, #23
 8015394:	18fb      	adds	r3, r7, r3
 8015396:	2202      	movs	r2, #2
 8015398:	701a      	strb	r2, [r3, #0]
  }
  return status;
 801539a:	2317      	movs	r3, #23
 801539c:	18fb      	adds	r3, r7, r3
 801539e:	781b      	ldrb	r3, [r3, #0]
}
 80153a0:	0018      	movs	r0, r3
 80153a2:	46bd      	mov	sp, r7
 80153a4:	b006      	add	sp, #24
 80153a6:	bd80      	pop	{r7, pc}

080153a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b084      	sub	sp, #16
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80153b0:	230f      	movs	r3, #15
 80153b2:	18fb      	adds	r3, r7, r3
 80153b4:	2200      	movs	r2, #0
 80153b6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2225      	movs	r2, #37	@ 0x25
 80153bc:	5c9b      	ldrb	r3, [r3, r2]
 80153be:	b2db      	uxtb	r3, r3
 80153c0:	2b02      	cmp	r3, #2
 80153c2:	d008      	beq.n	80153d6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	2204      	movs	r2, #4
 80153c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	2224      	movs	r2, #36	@ 0x24
 80153ce:	2100      	movs	r1, #0
 80153d0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80153d2:	2301      	movs	r3, #1
 80153d4:	e024      	b.n	8015420 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	681a      	ldr	r2, [r3, #0]
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	210e      	movs	r1, #14
 80153e2:	438a      	bics	r2, r1
 80153e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	681a      	ldr	r2, [r3, #0]
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	2101      	movs	r1, #1
 80153f2:	438a      	bics	r2, r1
 80153f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80153fa:	221c      	movs	r2, #28
 80153fc:	401a      	ands	r2, r3
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015402:	2101      	movs	r1, #1
 8015404:	4091      	lsls	r1, r2
 8015406:	000a      	movs	r2, r1
 8015408:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	2225      	movs	r2, #37	@ 0x25
 801540e:	2101      	movs	r1, #1
 8015410:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	2224      	movs	r2, #36	@ 0x24
 8015416:	2100      	movs	r1, #0
 8015418:	5499      	strb	r1, [r3, r2]

    return status;
 801541a:	230f      	movs	r3, #15
 801541c:	18fb      	adds	r3, r7, r3
 801541e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015420:	0018      	movs	r0, r3
 8015422:	46bd      	mov	sp, r7
 8015424:	b004      	add	sp, #16
 8015426:	bd80      	pop	{r7, pc}

08015428 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b084      	sub	sp, #16
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015430:	210f      	movs	r1, #15
 8015432:	187b      	adds	r3, r7, r1
 8015434:	2200      	movs	r2, #0
 8015436:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2225      	movs	r2, #37	@ 0x25
 801543c:	5c9b      	ldrb	r3, [r3, r2]
 801543e:	b2db      	uxtb	r3, r3
 8015440:	2b02      	cmp	r3, #2
 8015442:	d006      	beq.n	8015452 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2204      	movs	r2, #4
 8015448:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 801544a:	187b      	adds	r3, r7, r1
 801544c:	2201      	movs	r2, #1
 801544e:	701a      	strb	r2, [r3, #0]
 8015450:	e02a      	b.n	80154a8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	681a      	ldr	r2, [r3, #0]
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	210e      	movs	r1, #14
 801545e:	438a      	bics	r2, r1
 8015460:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	681a      	ldr	r2, [r3, #0]
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	2101      	movs	r1, #1
 801546e:	438a      	bics	r2, r1
 8015470:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015476:	221c      	movs	r2, #28
 8015478:	401a      	ands	r2, r3
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801547e:	2101      	movs	r1, #1
 8015480:	4091      	lsls	r1, r2
 8015482:	000a      	movs	r2, r1
 8015484:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	2225      	movs	r2, #37	@ 0x25
 801548a:	2101      	movs	r1, #1
 801548c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	2224      	movs	r2, #36	@ 0x24
 8015492:	2100      	movs	r1, #0
 8015494:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801549a:	2b00      	cmp	r3, #0
 801549c:	d004      	beq.n	80154a8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154a2:	687a      	ldr	r2, [r7, #4]
 80154a4:	0010      	movs	r0, r2
 80154a6:	4798      	blx	r3
    }
  }
  return status;
 80154a8:	230f      	movs	r3, #15
 80154aa:	18fb      	adds	r3, r7, r3
 80154ac:	781b      	ldrb	r3, [r3, #0]
}
 80154ae:	0018      	movs	r0, r3
 80154b0:	46bd      	mov	sp, r7
 80154b2:	b004      	add	sp, #16
 80154b4:	bd80      	pop	{r7, pc}

080154b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80154b6:	b580      	push	{r7, lr}
 80154b8:	b084      	sub	sp, #16
 80154ba:	af00      	add	r7, sp, #0
 80154bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154d2:	221c      	movs	r2, #28
 80154d4:	4013      	ands	r3, r2
 80154d6:	2204      	movs	r2, #4
 80154d8:	409a      	lsls	r2, r3
 80154da:	0013      	movs	r3, r2
 80154dc:	68fa      	ldr	r2, [r7, #12]
 80154de:	4013      	ands	r3, r2
 80154e0:	d026      	beq.n	8015530 <HAL_DMA_IRQHandler+0x7a>
 80154e2:	68bb      	ldr	r3, [r7, #8]
 80154e4:	2204      	movs	r2, #4
 80154e6:	4013      	ands	r3, r2
 80154e8:	d022      	beq.n	8015530 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	2220      	movs	r2, #32
 80154f2:	4013      	ands	r3, r2
 80154f4:	d107      	bne.n	8015506 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	681a      	ldr	r2, [r3, #0]
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	2104      	movs	r1, #4
 8015502:	438a      	bics	r2, r1
 8015504:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801550a:	221c      	movs	r2, #28
 801550c:	401a      	ands	r2, r3
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015512:	2104      	movs	r1, #4
 8015514:	4091      	lsls	r1, r2
 8015516:	000a      	movs	r2, r1
 8015518:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801551e:	2b00      	cmp	r3, #0
 8015520:	d100      	bne.n	8015524 <HAL_DMA_IRQHandler+0x6e>
 8015522:	e071      	b.n	8015608 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015528:	687a      	ldr	r2, [r7, #4]
 801552a:	0010      	movs	r0, r2
 801552c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 801552e:	e06b      	b.n	8015608 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015534:	221c      	movs	r2, #28
 8015536:	4013      	ands	r3, r2
 8015538:	2202      	movs	r2, #2
 801553a:	409a      	lsls	r2, r3
 801553c:	0013      	movs	r3, r2
 801553e:	68fa      	ldr	r2, [r7, #12]
 8015540:	4013      	ands	r3, r2
 8015542:	d02d      	beq.n	80155a0 <HAL_DMA_IRQHandler+0xea>
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	2202      	movs	r2, #2
 8015548:	4013      	ands	r3, r2
 801554a:	d029      	beq.n	80155a0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	2220      	movs	r2, #32
 8015554:	4013      	ands	r3, r2
 8015556:	d10b      	bne.n	8015570 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	681a      	ldr	r2, [r3, #0]
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	210a      	movs	r1, #10
 8015564:	438a      	bics	r2, r1
 8015566:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2225      	movs	r2, #37	@ 0x25
 801556c:	2101      	movs	r1, #1
 801556e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015574:	221c      	movs	r2, #28
 8015576:	401a      	ands	r2, r3
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801557c:	2102      	movs	r1, #2
 801557e:	4091      	lsls	r1, r2
 8015580:	000a      	movs	r2, r1
 8015582:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	2224      	movs	r2, #36	@ 0x24
 8015588:	2100      	movs	r1, #0
 801558a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015590:	2b00      	cmp	r3, #0
 8015592:	d039      	beq.n	8015608 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015598:	687a      	ldr	r2, [r7, #4]
 801559a:	0010      	movs	r0, r2
 801559c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 801559e:	e033      	b.n	8015608 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155a4:	221c      	movs	r2, #28
 80155a6:	4013      	ands	r3, r2
 80155a8:	2208      	movs	r2, #8
 80155aa:	409a      	lsls	r2, r3
 80155ac:	0013      	movs	r3, r2
 80155ae:	68fa      	ldr	r2, [r7, #12]
 80155b0:	4013      	ands	r3, r2
 80155b2:	d02a      	beq.n	801560a <HAL_DMA_IRQHandler+0x154>
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	2208      	movs	r2, #8
 80155b8:	4013      	ands	r3, r2
 80155ba:	d026      	beq.n	801560a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	681a      	ldr	r2, [r3, #0]
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	210e      	movs	r1, #14
 80155c8:	438a      	bics	r2, r1
 80155ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155d0:	221c      	movs	r2, #28
 80155d2:	401a      	ands	r2, r3
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155d8:	2101      	movs	r1, #1
 80155da:	4091      	lsls	r1, r2
 80155dc:	000a      	movs	r2, r1
 80155de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	2201      	movs	r2, #1
 80155e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	2225      	movs	r2, #37	@ 0x25
 80155ea:	2101      	movs	r1, #1
 80155ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	2224      	movs	r2, #36	@ 0x24
 80155f2:	2100      	movs	r1, #0
 80155f4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d005      	beq.n	801560a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015602:	687a      	ldr	r2, [r7, #4]
 8015604:	0010      	movs	r0, r2
 8015606:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8015608:	46c0      	nop			@ (mov r8, r8)
 801560a:	46c0      	nop			@ (mov r8, r8)
}
 801560c:	46bd      	mov	sp, r7
 801560e:	b004      	add	sp, #16
 8015610:	bd80      	pop	{r7, pc}

08015612 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8015612:	b580      	push	{r7, lr}
 8015614:	b082      	sub	sp, #8
 8015616:	af00      	add	r7, sp, #0
 8015618:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	2225      	movs	r2, #37	@ 0x25
 801561e:	5c9b      	ldrb	r3, [r3, r2]
 8015620:	b2db      	uxtb	r3, r3
}
 8015622:	0018      	movs	r0, r3
 8015624:	46bd      	mov	sp, r7
 8015626:	b002      	add	sp, #8
 8015628:	bd80      	pop	{r7, pc}

0801562a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801562a:	b580      	push	{r7, lr}
 801562c:	b084      	sub	sp, #16
 801562e:	af00      	add	r7, sp, #0
 8015630:	60f8      	str	r0, [r7, #12]
 8015632:	60b9      	str	r1, [r7, #8]
 8015634:	607a      	str	r2, [r7, #4]
 8015636:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801563c:	221c      	movs	r2, #28
 801563e:	401a      	ands	r2, r3
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015644:	2101      	movs	r1, #1
 8015646:	4091      	lsls	r1, r2
 8015648:	000a      	movs	r2, r1
 801564a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	683a      	ldr	r2, [r7, #0]
 8015652:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	689b      	ldr	r3, [r3, #8]
 8015658:	2b10      	cmp	r3, #16
 801565a:	d108      	bne.n	801566e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	687a      	ldr	r2, [r7, #4]
 8015662:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	68ba      	ldr	r2, [r7, #8]
 801566a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801566c:	e007      	b.n	801567e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	68ba      	ldr	r2, [r7, #8]
 8015674:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	687a      	ldr	r2, [r7, #4]
 801567c:	60da      	str	r2, [r3, #12]
}
 801567e:	46c0      	nop			@ (mov r8, r8)
 8015680:	46bd      	mov	sp, r7
 8015682:	b004      	add	sp, #16
 8015684:	bd80      	pop	{r7, pc}
	...

08015688 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b084      	sub	sp, #16
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8015690:	f7ff f8f0 	bl	8014874 <HAL_GetTick>
 8015694:	0003      	movs	r3, r0
 8015696:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8015698:	e00f      	b.n	80156ba <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	3301      	adds	r3, #1
 801569e:	d00c      	beq.n	80156ba <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d007      	beq.n	80156b6 <FLASH_WaitForLastOperation+0x2e>
 80156a6:	f7ff f8e5 	bl	8014874 <HAL_GetTick>
 80156aa:	0002      	movs	r2, r0
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	1ad3      	subs	r3, r2, r3
 80156b0:	687a      	ldr	r2, [r7, #4]
 80156b2:	429a      	cmp	r2, r3
 80156b4:	d201      	bcs.n	80156ba <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80156b6:	2303      	movs	r3, #3
 80156b8:	e052      	b.n	8015760 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80156ba:	4b2b      	ldr	r3, [pc, #172]	@ (8015768 <FLASH_WaitForLastOperation+0xe0>)
 80156bc:	699b      	ldr	r3, [r3, #24]
 80156be:	2201      	movs	r2, #1
 80156c0:	4013      	ands	r3, r2
 80156c2:	2b01      	cmp	r3, #1
 80156c4:	d0e9      	beq.n	801569a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80156c6:	4b28      	ldr	r3, [pc, #160]	@ (8015768 <FLASH_WaitForLastOperation+0xe0>)
 80156c8:	699b      	ldr	r3, [r3, #24]
 80156ca:	2202      	movs	r2, #2
 80156cc:	4013      	ands	r3, r2
 80156ce:	2b02      	cmp	r3, #2
 80156d0:	d102      	bne.n	80156d8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80156d2:	4b25      	ldr	r3, [pc, #148]	@ (8015768 <FLASH_WaitForLastOperation+0xe0>)
 80156d4:	2202      	movs	r2, #2
 80156d6:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80156d8:	4b23      	ldr	r3, [pc, #140]	@ (8015768 <FLASH_WaitForLastOperation+0xe0>)
 80156da:	699a      	ldr	r2, [r3, #24]
 80156dc:	2380      	movs	r3, #128	@ 0x80
 80156de:	005b      	lsls	r3, r3, #1
 80156e0:	401a      	ands	r2, r3
 80156e2:	2380      	movs	r3, #128	@ 0x80
 80156e4:	005b      	lsls	r3, r3, #1
 80156e6:	429a      	cmp	r2, r3
 80156e8:	d035      	beq.n	8015756 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80156ea:	4b1f      	ldr	r3, [pc, #124]	@ (8015768 <FLASH_WaitForLastOperation+0xe0>)
 80156ec:	699a      	ldr	r2, [r3, #24]
 80156ee:	2380      	movs	r3, #128	@ 0x80
 80156f0:	009b      	lsls	r3, r3, #2
 80156f2:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80156f4:	2380      	movs	r3, #128	@ 0x80
 80156f6:	009b      	lsls	r3, r3, #2
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d02c      	beq.n	8015756 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80156fc:	4b1a      	ldr	r3, [pc, #104]	@ (8015768 <FLASH_WaitForLastOperation+0xe0>)
 80156fe:	699a      	ldr	r2, [r3, #24]
 8015700:	2380      	movs	r3, #128	@ 0x80
 8015702:	00db      	lsls	r3, r3, #3
 8015704:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8015706:	2380      	movs	r3, #128	@ 0x80
 8015708:	00db      	lsls	r3, r3, #3
 801570a:	429a      	cmp	r2, r3
 801570c:	d023      	beq.n	8015756 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801570e:	4b16      	ldr	r3, [pc, #88]	@ (8015768 <FLASH_WaitForLastOperation+0xe0>)
 8015710:	699a      	ldr	r2, [r3, #24]
 8015712:	2380      	movs	r3, #128	@ 0x80
 8015714:	011b      	lsls	r3, r3, #4
 8015716:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8015718:	2380      	movs	r3, #128	@ 0x80
 801571a:	011b      	lsls	r3, r3, #4
 801571c:	429a      	cmp	r2, r3
 801571e:	d01a      	beq.n	8015756 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8015720:	4b11      	ldr	r3, [pc, #68]	@ (8015768 <FLASH_WaitForLastOperation+0xe0>)
 8015722:	699a      	ldr	r2, [r3, #24]
 8015724:	2380      	movs	r3, #128	@ 0x80
 8015726:	019b      	lsls	r3, r3, #6
 8015728:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801572a:	2380      	movs	r3, #128	@ 0x80
 801572c:	019b      	lsls	r3, r3, #6
 801572e:	429a      	cmp	r2, r3
 8015730:	d011      	beq.n	8015756 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8015732:	4b0d      	ldr	r3, [pc, #52]	@ (8015768 <FLASH_WaitForLastOperation+0xe0>)
 8015734:	699a      	ldr	r2, [r3, #24]
 8015736:	2380      	movs	r3, #128	@ 0x80
 8015738:	029b      	lsls	r3, r3, #10
 801573a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 801573c:	2380      	movs	r3, #128	@ 0x80
 801573e:	029b      	lsls	r3, r3, #10
 8015740:	429a      	cmp	r2, r3
 8015742:	d008      	beq.n	8015756 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8015744:	4b08      	ldr	r3, [pc, #32]	@ (8015768 <FLASH_WaitForLastOperation+0xe0>)
 8015746:	699a      	ldr	r2, [r3, #24]
 8015748:	2380      	movs	r3, #128	@ 0x80
 801574a:	025b      	lsls	r3, r3, #9
 801574c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 801574e:	2380      	movs	r3, #128	@ 0x80
 8015750:	025b      	lsls	r3, r3, #9
 8015752:	429a      	cmp	r2, r3
 8015754:	d103      	bne.n	801575e <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8015756:	f000 f809 	bl	801576c <FLASH_SetErrorCode>
    return HAL_ERROR;
 801575a:	2301      	movs	r3, #1
 801575c:	e000      	b.n	8015760 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 801575e:	2300      	movs	r3, #0
}
 8015760:	0018      	movs	r0, r3
 8015762:	46bd      	mov	sp, r7
 8015764:	b004      	add	sp, #16
 8015766:	bd80      	pop	{r7, pc}
 8015768:	40022000 	.word	0x40022000

0801576c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b082      	sub	sp, #8
 8015770:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8015772:	2300      	movs	r3, #0
 8015774:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8015776:	4b49      	ldr	r3, [pc, #292]	@ (801589c <FLASH_SetErrorCode+0x130>)
 8015778:	699a      	ldr	r2, [r3, #24]
 801577a:	2380      	movs	r3, #128	@ 0x80
 801577c:	005b      	lsls	r3, r3, #1
 801577e:	401a      	ands	r2, r3
 8015780:	2380      	movs	r3, #128	@ 0x80
 8015782:	005b      	lsls	r3, r3, #1
 8015784:	429a      	cmp	r2, r3
 8015786:	d10a      	bne.n	801579e <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8015788:	4b45      	ldr	r3, [pc, #276]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 801578a:	695b      	ldr	r3, [r3, #20]
 801578c:	2202      	movs	r2, #2
 801578e:	431a      	orrs	r2, r3
 8015790:	4b43      	ldr	r3, [pc, #268]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 8015792:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	2280      	movs	r2, #128	@ 0x80
 8015798:	0052      	lsls	r2, r2, #1
 801579a:	4313      	orrs	r3, r2
 801579c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 801579e:	4b3f      	ldr	r3, [pc, #252]	@ (801589c <FLASH_SetErrorCode+0x130>)
 80157a0:	699a      	ldr	r2, [r3, #24]
 80157a2:	2380      	movs	r3, #128	@ 0x80
 80157a4:	009b      	lsls	r3, r3, #2
 80157a6:	401a      	ands	r2, r3
 80157a8:	2380      	movs	r3, #128	@ 0x80
 80157aa:	009b      	lsls	r3, r3, #2
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d10a      	bne.n	80157c6 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80157b0:	4b3b      	ldr	r3, [pc, #236]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 80157b2:	695b      	ldr	r3, [r3, #20]
 80157b4:	2201      	movs	r2, #1
 80157b6:	431a      	orrs	r2, r3
 80157b8:	4b39      	ldr	r3, [pc, #228]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 80157ba:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	2280      	movs	r2, #128	@ 0x80
 80157c0:	0092      	lsls	r2, r2, #2
 80157c2:	4313      	orrs	r3, r2
 80157c4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80157c6:	4b35      	ldr	r3, [pc, #212]	@ (801589c <FLASH_SetErrorCode+0x130>)
 80157c8:	699a      	ldr	r2, [r3, #24]
 80157ca:	2380      	movs	r3, #128	@ 0x80
 80157cc:	00db      	lsls	r3, r3, #3
 80157ce:	401a      	ands	r2, r3
 80157d0:	2380      	movs	r3, #128	@ 0x80
 80157d2:	00db      	lsls	r3, r3, #3
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d10a      	bne.n	80157ee <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80157d8:	4b31      	ldr	r3, [pc, #196]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 80157da:	695b      	ldr	r3, [r3, #20]
 80157dc:	2208      	movs	r2, #8
 80157de:	431a      	orrs	r2, r3
 80157e0:	4b2f      	ldr	r3, [pc, #188]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 80157e2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	2280      	movs	r2, #128	@ 0x80
 80157e8:	00d2      	lsls	r2, r2, #3
 80157ea:	4313      	orrs	r3, r2
 80157ec:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80157ee:	4b2b      	ldr	r3, [pc, #172]	@ (801589c <FLASH_SetErrorCode+0x130>)
 80157f0:	699a      	ldr	r2, [r3, #24]
 80157f2:	2380      	movs	r3, #128	@ 0x80
 80157f4:	011b      	lsls	r3, r3, #4
 80157f6:	401a      	ands	r2, r3
 80157f8:	2380      	movs	r3, #128	@ 0x80
 80157fa:	011b      	lsls	r3, r3, #4
 80157fc:	429a      	cmp	r2, r3
 80157fe:	d10a      	bne.n	8015816 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8015800:	4b27      	ldr	r3, [pc, #156]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 8015802:	695b      	ldr	r3, [r3, #20]
 8015804:	2204      	movs	r2, #4
 8015806:	431a      	orrs	r2, r3
 8015808:	4b25      	ldr	r3, [pc, #148]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 801580a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	2280      	movs	r2, #128	@ 0x80
 8015810:	0112      	lsls	r2, r2, #4
 8015812:	4313      	orrs	r3, r2
 8015814:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8015816:	4b21      	ldr	r3, [pc, #132]	@ (801589c <FLASH_SetErrorCode+0x130>)
 8015818:	699a      	ldr	r2, [r3, #24]
 801581a:	2380      	movs	r3, #128	@ 0x80
 801581c:	019b      	lsls	r3, r3, #6
 801581e:	401a      	ands	r2, r3
 8015820:	2380      	movs	r3, #128	@ 0x80
 8015822:	019b      	lsls	r3, r3, #6
 8015824:	429a      	cmp	r2, r3
 8015826:	d10a      	bne.n	801583e <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8015828:	4b1d      	ldr	r3, [pc, #116]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 801582a:	695b      	ldr	r3, [r3, #20]
 801582c:	2210      	movs	r2, #16
 801582e:	431a      	orrs	r2, r3
 8015830:	4b1b      	ldr	r3, [pc, #108]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 8015832:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	2280      	movs	r2, #128	@ 0x80
 8015838:	0192      	lsls	r2, r2, #6
 801583a:	4313      	orrs	r3, r2
 801583c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 801583e:	4b17      	ldr	r3, [pc, #92]	@ (801589c <FLASH_SetErrorCode+0x130>)
 8015840:	699a      	ldr	r2, [r3, #24]
 8015842:	2380      	movs	r3, #128	@ 0x80
 8015844:	029b      	lsls	r3, r3, #10
 8015846:	401a      	ands	r2, r3
 8015848:	2380      	movs	r3, #128	@ 0x80
 801584a:	029b      	lsls	r3, r3, #10
 801584c:	429a      	cmp	r2, r3
 801584e:	d109      	bne.n	8015864 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8015850:	4b13      	ldr	r3, [pc, #76]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 8015852:	695b      	ldr	r3, [r3, #20]
 8015854:	2220      	movs	r2, #32
 8015856:	431a      	orrs	r2, r3
 8015858:	4b11      	ldr	r3, [pc, #68]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 801585a:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2220      	movs	r2, #32
 8015860:	4313      	orrs	r3, r2
 8015862:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8015864:	4b0d      	ldr	r3, [pc, #52]	@ (801589c <FLASH_SetErrorCode+0x130>)
 8015866:	699a      	ldr	r2, [r3, #24]
 8015868:	2380      	movs	r3, #128	@ 0x80
 801586a:	025b      	lsls	r3, r3, #9
 801586c:	401a      	ands	r2, r3
 801586e:	2380      	movs	r3, #128	@ 0x80
 8015870:	025b      	lsls	r3, r3, #9
 8015872:	429a      	cmp	r2, r3
 8015874:	d10a      	bne.n	801588c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8015876:	4b0a      	ldr	r3, [pc, #40]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 8015878:	695b      	ldr	r3, [r3, #20]
 801587a:	2240      	movs	r2, #64	@ 0x40
 801587c:	431a      	orrs	r2, r3
 801587e:	4b08      	ldr	r3, [pc, #32]	@ (80158a0 <FLASH_SetErrorCode+0x134>)
 8015880:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	2280      	movs	r2, #128	@ 0x80
 8015886:	0252      	lsls	r2, r2, #9
 8015888:	4313      	orrs	r3, r2
 801588a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 801588c:	4b03      	ldr	r3, [pc, #12]	@ (801589c <FLASH_SetErrorCode+0x130>)
 801588e:	687a      	ldr	r2, [r7, #4]
 8015890:	619a      	str	r2, [r3, #24]
}  
 8015892:	46c0      	nop			@ (mov r8, r8)
 8015894:	46bd      	mov	sp, r7
 8015896:	b002      	add	sp, #8
 8015898:	bd80      	pop	{r7, pc}
 801589a:	46c0      	nop			@ (mov r8, r8)
 801589c:	40022000 	.word	0x40022000
 80158a0:	20002518 	.word	0x20002518

080158a4 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b084      	sub	sp, #16
 80158a8:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80158aa:	4b12      	ldr	r3, [pc, #72]	@ (80158f4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	2201      	movs	r2, #1
 80158b0:	4013      	ands	r3, r2
 80158b2:	d019      	beq.n	80158e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80158b4:	f3ef 8310 	mrs	r3, PRIMASK
 80158b8:	607b      	str	r3, [r7, #4]
  return(result);
 80158ba:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80158bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80158be:	b672      	cpsid	i
}
 80158c0:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80158c2:	4b0c      	ldr	r3, [pc, #48]	@ (80158f4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80158c4:	4a0c      	ldr	r2, [pc, #48]	@ (80158f8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80158c6:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80158c8:	4b0a      	ldr	r3, [pc, #40]	@ (80158f4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80158ca:	4a0c      	ldr	r2, [pc, #48]	@ (80158fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 80158cc:	60da      	str	r2, [r3, #12]
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	f383 8810 	msr	PRIMASK, r3
}
 80158d8:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80158da:	4b06      	ldr	r3, [pc, #24]	@ (80158f4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80158dc:	685b      	ldr	r3, [r3, #4]
 80158de:	2201      	movs	r2, #1
 80158e0:	4013      	ands	r3, r2
 80158e2:	d001      	beq.n	80158e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 80158e4:	2301      	movs	r3, #1
 80158e6:	e000      	b.n	80158ea <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 80158e8:	2300      	movs	r3, #0
}
 80158ea:	0018      	movs	r0, r3
 80158ec:	46bd      	mov	sp, r7
 80158ee:	b004      	add	sp, #16
 80158f0:	bd80      	pop	{r7, pc}
 80158f2:	46c0      	nop			@ (mov r8, r8)
 80158f4:	40022000 	.word	0x40022000
 80158f8:	89abcdef 	.word	0x89abcdef
 80158fc:	02030405 	.word	0x02030405

08015900 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8015904:	4b04      	ldr	r3, [pc, #16]	@ (8015918 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8015906:	685a      	ldr	r2, [r3, #4]
 8015908:	4b03      	ldr	r3, [pc, #12]	@ (8015918 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 801590a:	2101      	movs	r1, #1
 801590c:	430a      	orrs	r2, r1
 801590e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8015910:	2300      	movs	r3, #0
}
 8015912:	0018      	movs	r0, r3
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}
 8015918:	40022000 	.word	0x40022000

0801591c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 801591c:	b5b0      	push	{r4, r5, r7, lr}
 801591e:	b084      	sub	sp, #16
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015924:	250f      	movs	r5, #15
 8015926:	197b      	adds	r3, r7, r5
 8015928:	2200      	movs	r2, #0
 801592a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801592c:	197c      	adds	r4, r7, r5
 801592e:	4b0f      	ldr	r3, [pc, #60]	@ (801596c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015930:	0018      	movs	r0, r3
 8015932:	f7ff fea9 	bl	8015688 <FLASH_WaitForLastOperation>
 8015936:	0003      	movs	r3, r0
 8015938:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801593a:	0029      	movs	r1, r5
 801593c:	187b      	adds	r3, r7, r1
 801593e:	781b      	ldrb	r3, [r3, #0]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d10c      	bne.n	801595e <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015944:	4b0a      	ldr	r3, [pc, #40]	@ (8015970 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8015946:	2200      	movs	r2, #0
 8015948:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	2200      	movs	r2, #0
 801594e:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015950:	187c      	adds	r4, r7, r1
 8015952:	4b06      	ldr	r3, [pc, #24]	@ (801596c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015954:	0018      	movs	r0, r3
 8015956:	f7ff fe97 	bl	8015688 <FLASH_WaitForLastOperation>
 801595a:	0003      	movs	r3, r0
 801595c:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 801595e:	230f      	movs	r3, #15
 8015960:	18fb      	adds	r3, r7, r3
 8015962:	781b      	ldrb	r3, [r3, #0]
}  
 8015964:	0018      	movs	r0, r3
 8015966:	46bd      	mov	sp, r7
 8015968:	b004      	add	sp, #16
 801596a:	bdb0      	pop	{r4, r5, r7, pc}
 801596c:	0000c350 	.word	0x0000c350
 8015970:	20002518 	.word	0x20002518

08015974 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8015974:	b5b0      	push	{r4, r5, r7, lr}
 8015976:	b086      	sub	sp, #24
 8015978:	af00      	add	r7, sp, #0
 801597a:	60f8      	str	r0, [r7, #12]
 801597c:	60b9      	str	r1, [r7, #8]
 801597e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015980:	2317      	movs	r3, #23
 8015982:	18fb      	adds	r3, r7, r3
 8015984:	2201      	movs	r2, #1
 8015986:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8015988:	4b24      	ldr	r3, [pc, #144]	@ (8015a1c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801598a:	7c1b      	ldrb	r3, [r3, #16]
 801598c:	2b01      	cmp	r3, #1
 801598e:	d101      	bne.n	8015994 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8015990:	2302      	movs	r3, #2
 8015992:	e03e      	b.n	8015a12 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8015994:	4b21      	ldr	r3, [pc, #132]	@ (8015a1c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015996:	2201      	movs	r2, #1
 8015998:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801599a:	2517      	movs	r5, #23
 801599c:	197c      	adds	r4, r7, r5
 801599e:	4b20      	ldr	r3, [pc, #128]	@ (8015a20 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80159a0:	0018      	movs	r0, r3
 80159a2:	f7ff fe71 	bl	8015688 <FLASH_WaitForLastOperation>
 80159a6:	0003      	movs	r3, r0
 80159a8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80159aa:	197b      	adds	r3, r7, r5
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d129      	bne.n	8015a06 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80159b2:	4b1a      	ldr	r3, [pc, #104]	@ (8015a1c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80159b4:	2200      	movs	r2, #0
 80159b6:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	2b02      	cmp	r3, #2
 80159bc:	d103      	bne.n	80159c6 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	687a      	ldr	r2, [r7, #4]
 80159c2:	601a      	str	r2, [r3, #0]
 80159c4:	e013      	b.n	80159ee <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	2b01      	cmp	r3, #1
 80159ca:	d104      	bne.n	80159d6 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	687a      	ldr	r2, [r7, #4]
 80159d0:	b292      	uxth	r2, r2
 80159d2:	801a      	strh	r2, [r3, #0]
 80159d4:	e00b      	b.n	80159ee <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d104      	bne.n	80159e6 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80159dc:	68bb      	ldr	r3, [r7, #8]
 80159de:	687a      	ldr	r2, [r7, #4]
 80159e0:	b2d2      	uxtb	r2, r2
 80159e2:	701a      	strb	r2, [r3, #0]
 80159e4:	e003      	b.n	80159ee <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 80159e6:	2317      	movs	r3, #23
 80159e8:	18fb      	adds	r3, r7, r3
 80159ea:	2201      	movs	r2, #1
 80159ec:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80159ee:	2217      	movs	r2, #23
 80159f0:	18bb      	adds	r3, r7, r2
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d106      	bne.n	8015a06 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80159f8:	18bc      	adds	r4, r7, r2
 80159fa:	4b09      	ldr	r3, [pc, #36]	@ (8015a20 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80159fc:	0018      	movs	r0, r3
 80159fe:	f7ff fe43 	bl	8015688 <FLASH_WaitForLastOperation>
 8015a02:	0003      	movs	r3, r0
 8015a04:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015a06:	4b05      	ldr	r3, [pc, #20]	@ (8015a1c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015a08:	2200      	movs	r2, #0
 8015a0a:	741a      	strb	r2, [r3, #16]

  return status;
 8015a0c:	2317      	movs	r3, #23
 8015a0e:	18fb      	adds	r3, r7, r3
 8015a10:	781b      	ldrb	r3, [r3, #0]
}
 8015a12:	0018      	movs	r0, r3
 8015a14:	46bd      	mov	sp, r7
 8015a16:	b006      	add	sp, #24
 8015a18:	bdb0      	pop	{r4, r5, r7, pc}
 8015a1a:	46c0      	nop			@ (mov r8, r8)
 8015a1c:	20002518 	.word	0x20002518
 8015a20:	0000c350 	.word	0x0000c350

08015a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b086      	sub	sp, #24
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
 8015a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015a32:	2300      	movs	r3, #0
 8015a34:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8015a36:	2300      	movs	r3, #0
 8015a38:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8015a3a:	e155      	b.n	8015ce8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8015a3c:	683b      	ldr	r3, [r7, #0]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	2101      	movs	r1, #1
 8015a42:	697a      	ldr	r2, [r7, #20]
 8015a44:	4091      	lsls	r1, r2
 8015a46:	000a      	movs	r2, r1
 8015a48:	4013      	ands	r3, r2
 8015a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d100      	bne.n	8015a54 <HAL_GPIO_Init+0x30>
 8015a52:	e146      	b.n	8015ce2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	685b      	ldr	r3, [r3, #4]
 8015a58:	2203      	movs	r2, #3
 8015a5a:	4013      	ands	r3, r2
 8015a5c:	2b01      	cmp	r3, #1
 8015a5e:	d005      	beq.n	8015a6c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015a60:	683b      	ldr	r3, [r7, #0]
 8015a62:	685b      	ldr	r3, [r3, #4]
 8015a64:	2203      	movs	r2, #3
 8015a66:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015a68:	2b02      	cmp	r3, #2
 8015a6a:	d130      	bne.n	8015ace <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	689b      	ldr	r3, [r3, #8]
 8015a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8015a72:	697b      	ldr	r3, [r7, #20]
 8015a74:	005b      	lsls	r3, r3, #1
 8015a76:	2203      	movs	r2, #3
 8015a78:	409a      	lsls	r2, r3
 8015a7a:	0013      	movs	r3, r2
 8015a7c:	43da      	mvns	r2, r3
 8015a7e:	693b      	ldr	r3, [r7, #16]
 8015a80:	4013      	ands	r3, r2
 8015a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015a84:	683b      	ldr	r3, [r7, #0]
 8015a86:	68da      	ldr	r2, [r3, #12]
 8015a88:	697b      	ldr	r3, [r7, #20]
 8015a8a:	005b      	lsls	r3, r3, #1
 8015a8c:	409a      	lsls	r2, r3
 8015a8e:	0013      	movs	r3, r2
 8015a90:	693a      	ldr	r2, [r7, #16]
 8015a92:	4313      	orrs	r3, r2
 8015a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	693a      	ldr	r2, [r7, #16]
 8015a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	685b      	ldr	r3, [r3, #4]
 8015aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015aa2:	2201      	movs	r2, #1
 8015aa4:	697b      	ldr	r3, [r7, #20]
 8015aa6:	409a      	lsls	r2, r3
 8015aa8:	0013      	movs	r3, r2
 8015aaa:	43da      	mvns	r2, r3
 8015aac:	693b      	ldr	r3, [r7, #16]
 8015aae:	4013      	ands	r3, r2
 8015ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	091b      	lsrs	r3, r3, #4
 8015ab8:	2201      	movs	r2, #1
 8015aba:	401a      	ands	r2, r3
 8015abc:	697b      	ldr	r3, [r7, #20]
 8015abe:	409a      	lsls	r2, r3
 8015ac0:	0013      	movs	r3, r2
 8015ac2:	693a      	ldr	r2, [r7, #16]
 8015ac4:	4313      	orrs	r3, r2
 8015ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	693a      	ldr	r2, [r7, #16]
 8015acc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	685b      	ldr	r3, [r3, #4]
 8015ad2:	2203      	movs	r2, #3
 8015ad4:	4013      	ands	r3, r2
 8015ad6:	2b03      	cmp	r3, #3
 8015ad8:	d017      	beq.n	8015b0a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	68db      	ldr	r3, [r3, #12]
 8015ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015ae0:	697b      	ldr	r3, [r7, #20]
 8015ae2:	005b      	lsls	r3, r3, #1
 8015ae4:	2203      	movs	r2, #3
 8015ae6:	409a      	lsls	r2, r3
 8015ae8:	0013      	movs	r3, r2
 8015aea:	43da      	mvns	r2, r3
 8015aec:	693b      	ldr	r3, [r7, #16]
 8015aee:	4013      	ands	r3, r2
 8015af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015af2:	683b      	ldr	r3, [r7, #0]
 8015af4:	689a      	ldr	r2, [r3, #8]
 8015af6:	697b      	ldr	r3, [r7, #20]
 8015af8:	005b      	lsls	r3, r3, #1
 8015afa:	409a      	lsls	r2, r3
 8015afc:	0013      	movs	r3, r2
 8015afe:	693a      	ldr	r2, [r7, #16]
 8015b00:	4313      	orrs	r3, r2
 8015b02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	693a      	ldr	r2, [r7, #16]
 8015b08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015b0a:	683b      	ldr	r3, [r7, #0]
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	2203      	movs	r2, #3
 8015b10:	4013      	ands	r3, r2
 8015b12:	2b02      	cmp	r3, #2
 8015b14:	d123      	bne.n	8015b5e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	08da      	lsrs	r2, r3, #3
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	3208      	adds	r2, #8
 8015b1e:	0092      	lsls	r2, r2, #2
 8015b20:	58d3      	ldr	r3, [r2, r3]
 8015b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	2207      	movs	r2, #7
 8015b28:	4013      	ands	r3, r2
 8015b2a:	009b      	lsls	r3, r3, #2
 8015b2c:	220f      	movs	r2, #15
 8015b2e:	409a      	lsls	r2, r3
 8015b30:	0013      	movs	r3, r2
 8015b32:	43da      	mvns	r2, r3
 8015b34:	693b      	ldr	r3, [r7, #16]
 8015b36:	4013      	ands	r3, r2
 8015b38:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8015b3a:	683b      	ldr	r3, [r7, #0]
 8015b3c:	691a      	ldr	r2, [r3, #16]
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	2107      	movs	r1, #7
 8015b42:	400b      	ands	r3, r1
 8015b44:	009b      	lsls	r3, r3, #2
 8015b46:	409a      	lsls	r2, r3
 8015b48:	0013      	movs	r3, r2
 8015b4a:	693a      	ldr	r2, [r7, #16]
 8015b4c:	4313      	orrs	r3, r2
 8015b4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	08da      	lsrs	r2, r3, #3
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	3208      	adds	r2, #8
 8015b58:	0092      	lsls	r2, r2, #2
 8015b5a:	6939      	ldr	r1, [r7, #16]
 8015b5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8015b64:	697b      	ldr	r3, [r7, #20]
 8015b66:	005b      	lsls	r3, r3, #1
 8015b68:	2203      	movs	r2, #3
 8015b6a:	409a      	lsls	r2, r3
 8015b6c:	0013      	movs	r3, r2
 8015b6e:	43da      	mvns	r2, r3
 8015b70:	693b      	ldr	r3, [r7, #16]
 8015b72:	4013      	ands	r3, r2
 8015b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015b76:	683b      	ldr	r3, [r7, #0]
 8015b78:	685b      	ldr	r3, [r3, #4]
 8015b7a:	2203      	movs	r2, #3
 8015b7c:	401a      	ands	r2, r3
 8015b7e:	697b      	ldr	r3, [r7, #20]
 8015b80:	005b      	lsls	r3, r3, #1
 8015b82:	409a      	lsls	r2, r3
 8015b84:	0013      	movs	r3, r2
 8015b86:	693a      	ldr	r2, [r7, #16]
 8015b88:	4313      	orrs	r3, r2
 8015b8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	693a      	ldr	r2, [r7, #16]
 8015b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015b92:	683b      	ldr	r3, [r7, #0]
 8015b94:	685a      	ldr	r2, [r3, #4]
 8015b96:	23c0      	movs	r3, #192	@ 0xc0
 8015b98:	029b      	lsls	r3, r3, #10
 8015b9a:	4013      	ands	r3, r2
 8015b9c:	d100      	bne.n	8015ba0 <HAL_GPIO_Init+0x17c>
 8015b9e:	e0a0      	b.n	8015ce2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015ba0:	4b57      	ldr	r3, [pc, #348]	@ (8015d00 <HAL_GPIO_Init+0x2dc>)
 8015ba2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015ba4:	4b56      	ldr	r3, [pc, #344]	@ (8015d00 <HAL_GPIO_Init+0x2dc>)
 8015ba6:	2101      	movs	r1, #1
 8015ba8:	430a      	orrs	r2, r1
 8015baa:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8015bac:	4a55      	ldr	r2, [pc, #340]	@ (8015d04 <HAL_GPIO_Init+0x2e0>)
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	089b      	lsrs	r3, r3, #2
 8015bb2:	3302      	adds	r3, #2
 8015bb4:	009b      	lsls	r3, r3, #2
 8015bb6:	589b      	ldr	r3, [r3, r2]
 8015bb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	2203      	movs	r2, #3
 8015bbe:	4013      	ands	r3, r2
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	220f      	movs	r2, #15
 8015bc4:	409a      	lsls	r2, r3
 8015bc6:	0013      	movs	r3, r2
 8015bc8:	43da      	mvns	r2, r3
 8015bca:	693b      	ldr	r3, [r7, #16]
 8015bcc:	4013      	ands	r3, r2
 8015bce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8015bd0:	687a      	ldr	r2, [r7, #4]
 8015bd2:	23a0      	movs	r3, #160	@ 0xa0
 8015bd4:	05db      	lsls	r3, r3, #23
 8015bd6:	429a      	cmp	r2, r3
 8015bd8:	d01f      	beq.n	8015c1a <HAL_GPIO_Init+0x1f6>
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8015d08 <HAL_GPIO_Init+0x2e4>)
 8015bde:	4293      	cmp	r3, r2
 8015be0:	d019      	beq.n	8015c16 <HAL_GPIO_Init+0x1f2>
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	4a49      	ldr	r2, [pc, #292]	@ (8015d0c <HAL_GPIO_Init+0x2e8>)
 8015be6:	4293      	cmp	r3, r2
 8015be8:	d013      	beq.n	8015c12 <HAL_GPIO_Init+0x1ee>
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	4a48      	ldr	r2, [pc, #288]	@ (8015d10 <HAL_GPIO_Init+0x2ec>)
 8015bee:	4293      	cmp	r3, r2
 8015bf0:	d00d      	beq.n	8015c0e <HAL_GPIO_Init+0x1ea>
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	4a47      	ldr	r2, [pc, #284]	@ (8015d14 <HAL_GPIO_Init+0x2f0>)
 8015bf6:	4293      	cmp	r3, r2
 8015bf8:	d007      	beq.n	8015c0a <HAL_GPIO_Init+0x1e6>
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	4a46      	ldr	r2, [pc, #280]	@ (8015d18 <HAL_GPIO_Init+0x2f4>)
 8015bfe:	4293      	cmp	r3, r2
 8015c00:	d101      	bne.n	8015c06 <HAL_GPIO_Init+0x1e2>
 8015c02:	2305      	movs	r3, #5
 8015c04:	e00a      	b.n	8015c1c <HAL_GPIO_Init+0x1f8>
 8015c06:	2306      	movs	r3, #6
 8015c08:	e008      	b.n	8015c1c <HAL_GPIO_Init+0x1f8>
 8015c0a:	2304      	movs	r3, #4
 8015c0c:	e006      	b.n	8015c1c <HAL_GPIO_Init+0x1f8>
 8015c0e:	2303      	movs	r3, #3
 8015c10:	e004      	b.n	8015c1c <HAL_GPIO_Init+0x1f8>
 8015c12:	2302      	movs	r3, #2
 8015c14:	e002      	b.n	8015c1c <HAL_GPIO_Init+0x1f8>
 8015c16:	2301      	movs	r3, #1
 8015c18:	e000      	b.n	8015c1c <HAL_GPIO_Init+0x1f8>
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	697a      	ldr	r2, [r7, #20]
 8015c1e:	2103      	movs	r1, #3
 8015c20:	400a      	ands	r2, r1
 8015c22:	0092      	lsls	r2, r2, #2
 8015c24:	4093      	lsls	r3, r2
 8015c26:	693a      	ldr	r2, [r7, #16]
 8015c28:	4313      	orrs	r3, r2
 8015c2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015c2c:	4935      	ldr	r1, [pc, #212]	@ (8015d04 <HAL_GPIO_Init+0x2e0>)
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	089b      	lsrs	r3, r3, #2
 8015c32:	3302      	adds	r3, #2
 8015c34:	009b      	lsls	r3, r3, #2
 8015c36:	693a      	ldr	r2, [r7, #16]
 8015c38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015c3a:	4b38      	ldr	r3, [pc, #224]	@ (8015d1c <HAL_GPIO_Init+0x2f8>)
 8015c3c:	689b      	ldr	r3, [r3, #8]
 8015c3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	43da      	mvns	r2, r3
 8015c44:	693b      	ldr	r3, [r7, #16]
 8015c46:	4013      	ands	r3, r2
 8015c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	685a      	ldr	r2, [r3, #4]
 8015c4e:	2380      	movs	r3, #128	@ 0x80
 8015c50:	035b      	lsls	r3, r3, #13
 8015c52:	4013      	ands	r3, r2
 8015c54:	d003      	beq.n	8015c5e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8015c56:	693a      	ldr	r2, [r7, #16]
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	4313      	orrs	r3, r2
 8015c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8015c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8015d1c <HAL_GPIO_Init+0x2f8>)
 8015c60:	693a      	ldr	r2, [r7, #16]
 8015c62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8015c64:	4b2d      	ldr	r3, [pc, #180]	@ (8015d1c <HAL_GPIO_Init+0x2f8>)
 8015c66:	68db      	ldr	r3, [r3, #12]
 8015c68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	43da      	mvns	r2, r3
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	4013      	ands	r3, r2
 8015c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	685a      	ldr	r2, [r3, #4]
 8015c78:	2380      	movs	r3, #128	@ 0x80
 8015c7a:	039b      	lsls	r3, r3, #14
 8015c7c:	4013      	ands	r3, r2
 8015c7e:	d003      	beq.n	8015c88 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8015c80:	693a      	ldr	r2, [r7, #16]
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	4313      	orrs	r3, r2
 8015c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8015c88:	4b24      	ldr	r3, [pc, #144]	@ (8015d1c <HAL_GPIO_Init+0x2f8>)
 8015c8a:	693a      	ldr	r2, [r7, #16]
 8015c8c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8015c8e:	4b23      	ldr	r3, [pc, #140]	@ (8015d1c <HAL_GPIO_Init+0x2f8>)
 8015c90:	685b      	ldr	r3, [r3, #4]
 8015c92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	43da      	mvns	r2, r3
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	4013      	ands	r3, r2
 8015c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015c9e:	683b      	ldr	r3, [r7, #0]
 8015ca0:	685a      	ldr	r2, [r3, #4]
 8015ca2:	2380      	movs	r3, #128	@ 0x80
 8015ca4:	029b      	lsls	r3, r3, #10
 8015ca6:	4013      	ands	r3, r2
 8015ca8:	d003      	beq.n	8015cb2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8015caa:	693a      	ldr	r2, [r7, #16]
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	4313      	orrs	r3, r2
 8015cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8015cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8015d1c <HAL_GPIO_Init+0x2f8>)
 8015cb4:	693a      	ldr	r2, [r7, #16]
 8015cb6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015cb8:	4b18      	ldr	r3, [pc, #96]	@ (8015d1c <HAL_GPIO_Init+0x2f8>)
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	43da      	mvns	r2, r3
 8015cc2:	693b      	ldr	r3, [r7, #16]
 8015cc4:	4013      	ands	r3, r2
 8015cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015cc8:	683b      	ldr	r3, [r7, #0]
 8015cca:	685a      	ldr	r2, [r3, #4]
 8015ccc:	2380      	movs	r3, #128	@ 0x80
 8015cce:	025b      	lsls	r3, r3, #9
 8015cd0:	4013      	ands	r3, r2
 8015cd2:	d003      	beq.n	8015cdc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8015cd4:	693a      	ldr	r2, [r7, #16]
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	4313      	orrs	r3, r2
 8015cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8015cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8015d1c <HAL_GPIO_Init+0x2f8>)
 8015cde:	693a      	ldr	r2, [r7, #16]
 8015ce0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	3301      	adds	r3, #1
 8015ce6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	681a      	ldr	r2, [r3, #0]
 8015cec:	697b      	ldr	r3, [r7, #20]
 8015cee:	40da      	lsrs	r2, r3
 8015cf0:	1e13      	subs	r3, r2, #0
 8015cf2:	d000      	beq.n	8015cf6 <HAL_GPIO_Init+0x2d2>
 8015cf4:	e6a2      	b.n	8015a3c <HAL_GPIO_Init+0x18>
  }
}
 8015cf6:	46c0      	nop			@ (mov r8, r8)
 8015cf8:	46c0      	nop			@ (mov r8, r8)
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	b006      	add	sp, #24
 8015cfe:	bd80      	pop	{r7, pc}
 8015d00:	40021000 	.word	0x40021000
 8015d04:	40010000 	.word	0x40010000
 8015d08:	50000400 	.word	0x50000400
 8015d0c:	50000800 	.word	0x50000800
 8015d10:	50000c00 	.word	0x50000c00
 8015d14:	50001000 	.word	0x50001000
 8015d18:	50001c00 	.word	0x50001c00
 8015d1c:	40010400 	.word	0x40010400

08015d20 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b084      	sub	sp, #16
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
 8015d28:	000a      	movs	r2, r1
 8015d2a:	1cbb      	adds	r3, r7, #2
 8015d2c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	691b      	ldr	r3, [r3, #16]
 8015d32:	1cba      	adds	r2, r7, #2
 8015d34:	8812      	ldrh	r2, [r2, #0]
 8015d36:	4013      	ands	r3, r2
 8015d38:	d004      	beq.n	8015d44 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8015d3a:	230f      	movs	r3, #15
 8015d3c:	18fb      	adds	r3, r7, r3
 8015d3e:	2201      	movs	r2, #1
 8015d40:	701a      	strb	r2, [r3, #0]
 8015d42:	e003      	b.n	8015d4c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015d44:	230f      	movs	r3, #15
 8015d46:	18fb      	adds	r3, r7, r3
 8015d48:	2200      	movs	r2, #0
 8015d4a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8015d4c:	230f      	movs	r3, #15
 8015d4e:	18fb      	adds	r3, r7, r3
 8015d50:	781b      	ldrb	r3, [r3, #0]
}
 8015d52:	0018      	movs	r0, r3
 8015d54:	46bd      	mov	sp, r7
 8015d56:	b004      	add	sp, #16
 8015d58:	bd80      	pop	{r7, pc}

08015d5a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015d5a:	b580      	push	{r7, lr}
 8015d5c:	b082      	sub	sp, #8
 8015d5e:	af00      	add	r7, sp, #0
 8015d60:	6078      	str	r0, [r7, #4]
 8015d62:	0008      	movs	r0, r1
 8015d64:	0011      	movs	r1, r2
 8015d66:	1cbb      	adds	r3, r7, #2
 8015d68:	1c02      	adds	r2, r0, #0
 8015d6a:	801a      	strh	r2, [r3, #0]
 8015d6c:	1c7b      	adds	r3, r7, #1
 8015d6e:	1c0a      	adds	r2, r1, #0
 8015d70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015d72:	1c7b      	adds	r3, r7, #1
 8015d74:	781b      	ldrb	r3, [r3, #0]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d004      	beq.n	8015d84 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015d7a:	1cbb      	adds	r3, r7, #2
 8015d7c:	881a      	ldrh	r2, [r3, #0]
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8015d82:	e003      	b.n	8015d8c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8015d84:	1cbb      	adds	r3, r7, #2
 8015d86:	881a      	ldrh	r2, [r3, #0]
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8015d8c:	46c0      	nop			@ (mov r8, r8)
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	b002      	add	sp, #8
 8015d92:	bd80      	pop	{r7, pc}

08015d94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b082      	sub	sp, #8
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	0002      	movs	r2, r0
 8015d9c:	1dbb      	adds	r3, r7, #6
 8015d9e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8015da0:	4b09      	ldr	r3, [pc, #36]	@ (8015dc8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015da2:	695b      	ldr	r3, [r3, #20]
 8015da4:	1dba      	adds	r2, r7, #6
 8015da6:	8812      	ldrh	r2, [r2, #0]
 8015da8:	4013      	ands	r3, r2
 8015daa:	d008      	beq.n	8015dbe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015dac:	4b06      	ldr	r3, [pc, #24]	@ (8015dc8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015dae:	1dba      	adds	r2, r7, #6
 8015db0:	8812      	ldrh	r2, [r2, #0]
 8015db2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8015db4:	1dbb      	adds	r3, r7, #6
 8015db6:	881b      	ldrh	r3, [r3, #0]
 8015db8:	0018      	movs	r0, r3
 8015dba:	f7f7 fad7 	bl	800d36c <HAL_GPIO_EXTI_Callback>
  }
}
 8015dbe:	46c0      	nop			@ (mov r8, r8)
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	b002      	add	sp, #8
 8015dc4:	bd80      	pop	{r7, pc}
 8015dc6:	46c0      	nop			@ (mov r8, r8)
 8015dc8:	40010400 	.word	0x40010400

08015dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b082      	sub	sp, #8
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d101      	bne.n	8015dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015dda:	2301      	movs	r3, #1
 8015ddc:	e082      	b.n	8015ee4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	2241      	movs	r2, #65	@ 0x41
 8015de2:	5c9b      	ldrb	r3, [r3, r2]
 8015de4:	b2db      	uxtb	r3, r3
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d107      	bne.n	8015dfa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	2240      	movs	r2, #64	@ 0x40
 8015dee:	2100      	movs	r1, #0
 8015df0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	0018      	movs	r0, r3
 8015df6:	f7f6 fcd9 	bl	800c7ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2241      	movs	r2, #65	@ 0x41
 8015dfe:	2124      	movs	r1, #36	@ 0x24
 8015e00:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	681a      	ldr	r2, [r3, #0]
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	2101      	movs	r1, #1
 8015e0e:	438a      	bics	r2, r1
 8015e10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	685a      	ldr	r2, [r3, #4]
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	4934      	ldr	r1, [pc, #208]	@ (8015eec <HAL_I2C_Init+0x120>)
 8015e1c:	400a      	ands	r2, r1
 8015e1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	689a      	ldr	r2, [r3, #8]
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	4931      	ldr	r1, [pc, #196]	@ (8015ef0 <HAL_I2C_Init+0x124>)
 8015e2c:	400a      	ands	r2, r1
 8015e2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	68db      	ldr	r3, [r3, #12]
 8015e34:	2b01      	cmp	r3, #1
 8015e36:	d108      	bne.n	8015e4a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	689a      	ldr	r2, [r3, #8]
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	2180      	movs	r1, #128	@ 0x80
 8015e42:	0209      	lsls	r1, r1, #8
 8015e44:	430a      	orrs	r2, r1
 8015e46:	609a      	str	r2, [r3, #8]
 8015e48:	e007      	b.n	8015e5a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	689a      	ldr	r2, [r3, #8]
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	2184      	movs	r1, #132	@ 0x84
 8015e54:	0209      	lsls	r1, r1, #8
 8015e56:	430a      	orrs	r2, r1
 8015e58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	68db      	ldr	r3, [r3, #12]
 8015e5e:	2b02      	cmp	r3, #2
 8015e60:	d104      	bne.n	8015e6c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	2280      	movs	r2, #128	@ 0x80
 8015e68:	0112      	lsls	r2, r2, #4
 8015e6a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	685a      	ldr	r2, [r3, #4]
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	491f      	ldr	r1, [pc, #124]	@ (8015ef4 <HAL_I2C_Init+0x128>)
 8015e78:	430a      	orrs	r2, r1
 8015e7a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	68da      	ldr	r2, [r3, #12]
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	491a      	ldr	r1, [pc, #104]	@ (8015ef0 <HAL_I2C_Init+0x124>)
 8015e88:	400a      	ands	r2, r1
 8015e8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	691a      	ldr	r2, [r3, #16]
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	695b      	ldr	r3, [r3, #20]
 8015e94:	431a      	orrs	r2, r3
 8015e96:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	699b      	ldr	r3, [r3, #24]
 8015e9c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	430a      	orrs	r2, r1
 8015ea4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	69d9      	ldr	r1, [r3, #28]
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	6a1a      	ldr	r2, [r3, #32]
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	430a      	orrs	r2, r1
 8015eb4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	681a      	ldr	r2, [r3, #0]
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	2101      	movs	r1, #1
 8015ec2:	430a      	orrs	r2, r1
 8015ec4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	2200      	movs	r2, #0
 8015eca:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	2241      	movs	r2, #65	@ 0x41
 8015ed0:	2120      	movs	r1, #32
 8015ed2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2242      	movs	r2, #66	@ 0x42
 8015ede:	2100      	movs	r1, #0
 8015ee0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015ee2:	2300      	movs	r3, #0
}
 8015ee4:	0018      	movs	r0, r3
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	b002      	add	sp, #8
 8015eea:	bd80      	pop	{r7, pc}
 8015eec:	f0ffffff 	.word	0xf0ffffff
 8015ef0:	ffff7fff 	.word	0xffff7fff
 8015ef4:	02008000 	.word	0x02008000

08015ef8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015ef8:	b590      	push	{r4, r7, lr}
 8015efa:	b089      	sub	sp, #36	@ 0x24
 8015efc:	af02      	add	r7, sp, #8
 8015efe:	60f8      	str	r0, [r7, #12]
 8015f00:	0008      	movs	r0, r1
 8015f02:	607a      	str	r2, [r7, #4]
 8015f04:	0019      	movs	r1, r3
 8015f06:	230a      	movs	r3, #10
 8015f08:	18fb      	adds	r3, r7, r3
 8015f0a:	1c02      	adds	r2, r0, #0
 8015f0c:	801a      	strh	r2, [r3, #0]
 8015f0e:	2308      	movs	r3, #8
 8015f10:	18fb      	adds	r3, r7, r3
 8015f12:	1c0a      	adds	r2, r1, #0
 8015f14:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	2241      	movs	r2, #65	@ 0x41
 8015f1a:	5c9b      	ldrb	r3, [r3, r2]
 8015f1c:	b2db      	uxtb	r3, r3
 8015f1e:	2b20      	cmp	r3, #32
 8015f20:	d000      	beq.n	8015f24 <HAL_I2C_Master_Transmit+0x2c>
 8015f22:	e0e7      	b.n	80160f4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	2240      	movs	r2, #64	@ 0x40
 8015f28:	5c9b      	ldrb	r3, [r3, r2]
 8015f2a:	2b01      	cmp	r3, #1
 8015f2c:	d101      	bne.n	8015f32 <HAL_I2C_Master_Transmit+0x3a>
 8015f2e:	2302      	movs	r3, #2
 8015f30:	e0e1      	b.n	80160f6 <HAL_I2C_Master_Transmit+0x1fe>
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	2240      	movs	r2, #64	@ 0x40
 8015f36:	2101      	movs	r1, #1
 8015f38:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015f3a:	f7fe fc9b 	bl	8014874 <HAL_GetTick>
 8015f3e:	0003      	movs	r3, r0
 8015f40:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015f42:	2380      	movs	r3, #128	@ 0x80
 8015f44:	0219      	lsls	r1, r3, #8
 8015f46:	68f8      	ldr	r0, [r7, #12]
 8015f48:	697b      	ldr	r3, [r7, #20]
 8015f4a:	9300      	str	r3, [sp, #0]
 8015f4c:	2319      	movs	r3, #25
 8015f4e:	2201      	movs	r2, #1
 8015f50:	f002 fb34 	bl	80185bc <I2C_WaitOnFlagUntilTimeout>
 8015f54:	1e03      	subs	r3, r0, #0
 8015f56:	d001      	beq.n	8015f5c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8015f58:	2301      	movs	r3, #1
 8015f5a:	e0cc      	b.n	80160f6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	2241      	movs	r2, #65	@ 0x41
 8015f60:	2121      	movs	r1, #33	@ 0x21
 8015f62:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	2242      	movs	r2, #66	@ 0x42
 8015f68:	2110      	movs	r1, #16
 8015f6a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	2200      	movs	r2, #0
 8015f70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	687a      	ldr	r2, [r7, #4]
 8015f76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	2208      	movs	r2, #8
 8015f7c:	18ba      	adds	r2, r7, r2
 8015f7e:	8812      	ldrh	r2, [r2, #0]
 8015f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	2200      	movs	r2, #0
 8015f86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f8c:	b29b      	uxth	r3, r3
 8015f8e:	2bff      	cmp	r3, #255	@ 0xff
 8015f90:	d911      	bls.n	8015fb6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	22ff      	movs	r2, #255	@ 0xff
 8015f96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f9c:	b2da      	uxtb	r2, r3
 8015f9e:	2380      	movs	r3, #128	@ 0x80
 8015fa0:	045c      	lsls	r4, r3, #17
 8015fa2:	230a      	movs	r3, #10
 8015fa4:	18fb      	adds	r3, r7, r3
 8015fa6:	8819      	ldrh	r1, [r3, #0]
 8015fa8:	68f8      	ldr	r0, [r7, #12]
 8015faa:	4b55      	ldr	r3, [pc, #340]	@ (8016100 <HAL_I2C_Master_Transmit+0x208>)
 8015fac:	9300      	str	r3, [sp, #0]
 8015fae:	0023      	movs	r3, r4
 8015fb0:	f002 fd56 	bl	8018a60 <I2C_TransferConfig>
 8015fb4:	e075      	b.n	80160a2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015fba:	b29a      	uxth	r2, r3
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015fc4:	b2da      	uxtb	r2, r3
 8015fc6:	2380      	movs	r3, #128	@ 0x80
 8015fc8:	049c      	lsls	r4, r3, #18
 8015fca:	230a      	movs	r3, #10
 8015fcc:	18fb      	adds	r3, r7, r3
 8015fce:	8819      	ldrh	r1, [r3, #0]
 8015fd0:	68f8      	ldr	r0, [r7, #12]
 8015fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8016100 <HAL_I2C_Master_Transmit+0x208>)
 8015fd4:	9300      	str	r3, [sp, #0]
 8015fd6:	0023      	movs	r3, r4
 8015fd8:	f002 fd42 	bl	8018a60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015fdc:	e061      	b.n	80160a2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015fde:	697a      	ldr	r2, [r7, #20]
 8015fe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	0018      	movs	r0, r3
 8015fe6:	f002 fb37 	bl	8018658 <I2C_WaitOnTXISFlagUntilTimeout>
 8015fea:	1e03      	subs	r3, r0, #0
 8015fec:	d001      	beq.n	8015ff2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8015fee:	2301      	movs	r3, #1
 8015ff0:	e081      	b.n	80160f6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ff6:	781a      	ldrb	r2, [r3, #0]
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016002:	1c5a      	adds	r2, r3, #1
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801600c:	b29b      	uxth	r3, r3
 801600e:	3b01      	subs	r3, #1
 8016010:	b29a      	uxth	r2, r3
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801601a:	3b01      	subs	r3, #1
 801601c:	b29a      	uxth	r2, r3
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016026:	b29b      	uxth	r3, r3
 8016028:	2b00      	cmp	r3, #0
 801602a:	d03a      	beq.n	80160a2 <HAL_I2C_Master_Transmit+0x1aa>
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016030:	2b00      	cmp	r3, #0
 8016032:	d136      	bne.n	80160a2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016034:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016036:	68f8      	ldr	r0, [r7, #12]
 8016038:	697b      	ldr	r3, [r7, #20]
 801603a:	9300      	str	r3, [sp, #0]
 801603c:	0013      	movs	r3, r2
 801603e:	2200      	movs	r2, #0
 8016040:	2180      	movs	r1, #128	@ 0x80
 8016042:	f002 fabb 	bl	80185bc <I2C_WaitOnFlagUntilTimeout>
 8016046:	1e03      	subs	r3, r0, #0
 8016048:	d001      	beq.n	801604e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 801604a:	2301      	movs	r3, #1
 801604c:	e053      	b.n	80160f6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016052:	b29b      	uxth	r3, r3
 8016054:	2bff      	cmp	r3, #255	@ 0xff
 8016056:	d911      	bls.n	801607c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	22ff      	movs	r2, #255	@ 0xff
 801605c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016062:	b2da      	uxtb	r2, r3
 8016064:	2380      	movs	r3, #128	@ 0x80
 8016066:	045c      	lsls	r4, r3, #17
 8016068:	230a      	movs	r3, #10
 801606a:	18fb      	adds	r3, r7, r3
 801606c:	8819      	ldrh	r1, [r3, #0]
 801606e:	68f8      	ldr	r0, [r7, #12]
 8016070:	2300      	movs	r3, #0
 8016072:	9300      	str	r3, [sp, #0]
 8016074:	0023      	movs	r3, r4
 8016076:	f002 fcf3 	bl	8018a60 <I2C_TransferConfig>
 801607a:	e012      	b.n	80160a2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016080:	b29a      	uxth	r2, r3
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801608a:	b2da      	uxtb	r2, r3
 801608c:	2380      	movs	r3, #128	@ 0x80
 801608e:	049c      	lsls	r4, r3, #18
 8016090:	230a      	movs	r3, #10
 8016092:	18fb      	adds	r3, r7, r3
 8016094:	8819      	ldrh	r1, [r3, #0]
 8016096:	68f8      	ldr	r0, [r7, #12]
 8016098:	2300      	movs	r3, #0
 801609a:	9300      	str	r3, [sp, #0]
 801609c:	0023      	movs	r3, r4
 801609e:	f002 fcdf 	bl	8018a60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160a6:	b29b      	uxth	r3, r3
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d198      	bne.n	8015fde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80160ac:	697a      	ldr	r2, [r7, #20]
 80160ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	0018      	movs	r0, r3
 80160b4:	f002 fb16 	bl	80186e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80160b8:	1e03      	subs	r3, r0, #0
 80160ba:	d001      	beq.n	80160c0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80160bc:	2301      	movs	r3, #1
 80160be:	e01a      	b.n	80160f6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	2220      	movs	r2, #32
 80160c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	685a      	ldr	r2, [r3, #4]
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	490c      	ldr	r1, [pc, #48]	@ (8016104 <HAL_I2C_Master_Transmit+0x20c>)
 80160d4:	400a      	ands	r2, r1
 80160d6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	2241      	movs	r2, #65	@ 0x41
 80160dc:	2120      	movs	r1, #32
 80160de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	2242      	movs	r2, #66	@ 0x42
 80160e4:	2100      	movs	r1, #0
 80160e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	2240      	movs	r2, #64	@ 0x40
 80160ec:	2100      	movs	r1, #0
 80160ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80160f0:	2300      	movs	r3, #0
 80160f2:	e000      	b.n	80160f6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80160f4:	2302      	movs	r3, #2
  }
}
 80160f6:	0018      	movs	r0, r3
 80160f8:	46bd      	mov	sp, r7
 80160fa:	b007      	add	sp, #28
 80160fc:	bd90      	pop	{r4, r7, pc}
 80160fe:	46c0      	nop			@ (mov r8, r8)
 8016100:	80002000 	.word	0x80002000
 8016104:	fe00e800 	.word	0xfe00e800

08016108 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8016108:	b590      	push	{r4, r7, lr}
 801610a:	b089      	sub	sp, #36	@ 0x24
 801610c:	af02      	add	r7, sp, #8
 801610e:	60f8      	str	r0, [r7, #12]
 8016110:	0008      	movs	r0, r1
 8016112:	607a      	str	r2, [r7, #4]
 8016114:	0019      	movs	r1, r3
 8016116:	230a      	movs	r3, #10
 8016118:	18fb      	adds	r3, r7, r3
 801611a:	1c02      	adds	r2, r0, #0
 801611c:	801a      	strh	r2, [r3, #0]
 801611e:	2308      	movs	r3, #8
 8016120:	18fb      	adds	r3, r7, r3
 8016122:	1c0a      	adds	r2, r1, #0
 8016124:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	2241      	movs	r2, #65	@ 0x41
 801612a:	5c9b      	ldrb	r3, [r3, r2]
 801612c:	b2db      	uxtb	r3, r3
 801612e:	2b20      	cmp	r3, #32
 8016130:	d000      	beq.n	8016134 <HAL_I2C_Master_Receive+0x2c>
 8016132:	e0e8      	b.n	8016306 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	2240      	movs	r2, #64	@ 0x40
 8016138:	5c9b      	ldrb	r3, [r3, r2]
 801613a:	2b01      	cmp	r3, #1
 801613c:	d101      	bne.n	8016142 <HAL_I2C_Master_Receive+0x3a>
 801613e:	2302      	movs	r3, #2
 8016140:	e0e2      	b.n	8016308 <HAL_I2C_Master_Receive+0x200>
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	2240      	movs	r2, #64	@ 0x40
 8016146:	2101      	movs	r1, #1
 8016148:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801614a:	f7fe fb93 	bl	8014874 <HAL_GetTick>
 801614e:	0003      	movs	r3, r0
 8016150:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016152:	2380      	movs	r3, #128	@ 0x80
 8016154:	0219      	lsls	r1, r3, #8
 8016156:	68f8      	ldr	r0, [r7, #12]
 8016158:	697b      	ldr	r3, [r7, #20]
 801615a:	9300      	str	r3, [sp, #0]
 801615c:	2319      	movs	r3, #25
 801615e:	2201      	movs	r2, #1
 8016160:	f002 fa2c 	bl	80185bc <I2C_WaitOnFlagUntilTimeout>
 8016164:	1e03      	subs	r3, r0, #0
 8016166:	d001      	beq.n	801616c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8016168:	2301      	movs	r3, #1
 801616a:	e0cd      	b.n	8016308 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	2241      	movs	r2, #65	@ 0x41
 8016170:	2122      	movs	r1, #34	@ 0x22
 8016172:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	2242      	movs	r2, #66	@ 0x42
 8016178:	2110      	movs	r1, #16
 801617a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	2200      	movs	r2, #0
 8016180:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	687a      	ldr	r2, [r7, #4]
 8016186:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	2208      	movs	r2, #8
 801618c:	18ba      	adds	r2, r7, r2
 801618e:	8812      	ldrh	r2, [r2, #0]
 8016190:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	2200      	movs	r2, #0
 8016196:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801619c:	b29b      	uxth	r3, r3
 801619e:	2bff      	cmp	r3, #255	@ 0xff
 80161a0:	d911      	bls.n	80161c6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	22ff      	movs	r2, #255	@ 0xff
 80161a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161ac:	b2da      	uxtb	r2, r3
 80161ae:	2380      	movs	r3, #128	@ 0x80
 80161b0:	045c      	lsls	r4, r3, #17
 80161b2:	230a      	movs	r3, #10
 80161b4:	18fb      	adds	r3, r7, r3
 80161b6:	8819      	ldrh	r1, [r3, #0]
 80161b8:	68f8      	ldr	r0, [r7, #12]
 80161ba:	4b55      	ldr	r3, [pc, #340]	@ (8016310 <HAL_I2C_Master_Receive+0x208>)
 80161bc:	9300      	str	r3, [sp, #0]
 80161be:	0023      	movs	r3, r4
 80161c0:	f002 fc4e 	bl	8018a60 <I2C_TransferConfig>
 80161c4:	e076      	b.n	80162b4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80161ca:	b29a      	uxth	r2, r3
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161d4:	b2da      	uxtb	r2, r3
 80161d6:	2380      	movs	r3, #128	@ 0x80
 80161d8:	049c      	lsls	r4, r3, #18
 80161da:	230a      	movs	r3, #10
 80161dc:	18fb      	adds	r3, r7, r3
 80161de:	8819      	ldrh	r1, [r3, #0]
 80161e0:	68f8      	ldr	r0, [r7, #12]
 80161e2:	4b4b      	ldr	r3, [pc, #300]	@ (8016310 <HAL_I2C_Master_Receive+0x208>)
 80161e4:	9300      	str	r3, [sp, #0]
 80161e6:	0023      	movs	r3, r4
 80161e8:	f002 fc3a 	bl	8018a60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80161ec:	e062      	b.n	80162b4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80161ee:	697a      	ldr	r2, [r7, #20]
 80161f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	0018      	movs	r0, r3
 80161f6:	f002 fab9 	bl	801876c <I2C_WaitOnRXNEFlagUntilTimeout>
 80161fa:	1e03      	subs	r3, r0, #0
 80161fc:	d001      	beq.n	8016202 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80161fe:	2301      	movs	r3, #1
 8016200:	e082      	b.n	8016308 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801620c:	b2d2      	uxtb	r2, r2
 801620e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016214:	1c5a      	adds	r2, r3, #1
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801621e:	3b01      	subs	r3, #1
 8016220:	b29a      	uxth	r2, r3
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801622a:	b29b      	uxth	r3, r3
 801622c:	3b01      	subs	r3, #1
 801622e:	b29a      	uxth	r2, r3
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016238:	b29b      	uxth	r3, r3
 801623a:	2b00      	cmp	r3, #0
 801623c:	d03a      	beq.n	80162b4 <HAL_I2C_Master_Receive+0x1ac>
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016242:	2b00      	cmp	r3, #0
 8016244:	d136      	bne.n	80162b4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016248:	68f8      	ldr	r0, [r7, #12]
 801624a:	697b      	ldr	r3, [r7, #20]
 801624c:	9300      	str	r3, [sp, #0]
 801624e:	0013      	movs	r3, r2
 8016250:	2200      	movs	r2, #0
 8016252:	2180      	movs	r1, #128	@ 0x80
 8016254:	f002 f9b2 	bl	80185bc <I2C_WaitOnFlagUntilTimeout>
 8016258:	1e03      	subs	r3, r0, #0
 801625a:	d001      	beq.n	8016260 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 801625c:	2301      	movs	r3, #1
 801625e:	e053      	b.n	8016308 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016264:	b29b      	uxth	r3, r3
 8016266:	2bff      	cmp	r3, #255	@ 0xff
 8016268:	d911      	bls.n	801628e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	22ff      	movs	r2, #255	@ 0xff
 801626e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016274:	b2da      	uxtb	r2, r3
 8016276:	2380      	movs	r3, #128	@ 0x80
 8016278:	045c      	lsls	r4, r3, #17
 801627a:	230a      	movs	r3, #10
 801627c:	18fb      	adds	r3, r7, r3
 801627e:	8819      	ldrh	r1, [r3, #0]
 8016280:	68f8      	ldr	r0, [r7, #12]
 8016282:	2300      	movs	r3, #0
 8016284:	9300      	str	r3, [sp, #0]
 8016286:	0023      	movs	r3, r4
 8016288:	f002 fbea 	bl	8018a60 <I2C_TransferConfig>
 801628c:	e012      	b.n	80162b4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016292:	b29a      	uxth	r2, r3
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801629c:	b2da      	uxtb	r2, r3
 801629e:	2380      	movs	r3, #128	@ 0x80
 80162a0:	049c      	lsls	r4, r3, #18
 80162a2:	230a      	movs	r3, #10
 80162a4:	18fb      	adds	r3, r7, r3
 80162a6:	8819      	ldrh	r1, [r3, #0]
 80162a8:	68f8      	ldr	r0, [r7, #12]
 80162aa:	2300      	movs	r3, #0
 80162ac:	9300      	str	r3, [sp, #0]
 80162ae:	0023      	movs	r3, r4
 80162b0:	f002 fbd6 	bl	8018a60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162b8:	b29b      	uxth	r3, r3
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d197      	bne.n	80161ee <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80162be:	697a      	ldr	r2, [r7, #20]
 80162c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	0018      	movs	r0, r3
 80162c6:	f002 fa0d 	bl	80186e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80162ca:	1e03      	subs	r3, r0, #0
 80162cc:	d001      	beq.n	80162d2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80162ce:	2301      	movs	r3, #1
 80162d0:	e01a      	b.n	8016308 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	2220      	movs	r2, #32
 80162d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	685a      	ldr	r2, [r3, #4]
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	490b      	ldr	r1, [pc, #44]	@ (8016314 <HAL_I2C_Master_Receive+0x20c>)
 80162e6:	400a      	ands	r2, r1
 80162e8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	2241      	movs	r2, #65	@ 0x41
 80162ee:	2120      	movs	r1, #32
 80162f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	2242      	movs	r2, #66	@ 0x42
 80162f6:	2100      	movs	r1, #0
 80162f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	2240      	movs	r2, #64	@ 0x40
 80162fe:	2100      	movs	r1, #0
 8016300:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016302:	2300      	movs	r3, #0
 8016304:	e000      	b.n	8016308 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8016306:	2302      	movs	r3, #2
  }
}
 8016308:	0018      	movs	r0, r3
 801630a:	46bd      	mov	sp, r7
 801630c:	b007      	add	sp, #28
 801630e:	bd90      	pop	{r4, r7, pc}
 8016310:	80002400 	.word	0x80002400
 8016314:	fe00e800 	.word	0xfe00e800

08016318 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8016318:	b5b0      	push	{r4, r5, r7, lr}
 801631a:	b088      	sub	sp, #32
 801631c:	af02      	add	r7, sp, #8
 801631e:	60f8      	str	r0, [r7, #12]
 8016320:	0008      	movs	r0, r1
 8016322:	607a      	str	r2, [r7, #4]
 8016324:	0019      	movs	r1, r3
 8016326:	230a      	movs	r3, #10
 8016328:	18fb      	adds	r3, r7, r3
 801632a:	1c02      	adds	r2, r0, #0
 801632c:	801a      	strh	r2, [r3, #0]
 801632e:	2308      	movs	r3, #8
 8016330:	18fb      	adds	r3, r7, r3
 8016332:	1c0a      	adds	r2, r1, #0
 8016334:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	2241      	movs	r2, #65	@ 0x41
 801633a:	5c9b      	ldrb	r3, [r3, r2]
 801633c:	b2db      	uxtb	r3, r3
 801633e:	2b20      	cmp	r3, #32
 8016340:	d000      	beq.n	8016344 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8016342:	e0dd      	b.n	8016500 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	699a      	ldr	r2, [r3, #24]
 801634a:	2380      	movs	r3, #128	@ 0x80
 801634c:	021b      	lsls	r3, r3, #8
 801634e:	401a      	ands	r2, r3
 8016350:	2380      	movs	r3, #128	@ 0x80
 8016352:	021b      	lsls	r3, r3, #8
 8016354:	429a      	cmp	r2, r3
 8016356:	d101      	bne.n	801635c <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8016358:	2302      	movs	r3, #2
 801635a:	e0d2      	b.n	8016502 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	2240      	movs	r2, #64	@ 0x40
 8016360:	5c9b      	ldrb	r3, [r3, r2]
 8016362:	2b01      	cmp	r3, #1
 8016364:	d101      	bne.n	801636a <HAL_I2C_Master_Transmit_DMA+0x52>
 8016366:	2302      	movs	r3, #2
 8016368:	e0cb      	b.n	8016502 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	2240      	movs	r2, #64	@ 0x40
 801636e:	2101      	movs	r1, #1
 8016370:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	2241      	movs	r2, #65	@ 0x41
 8016376:	2121      	movs	r1, #33	@ 0x21
 8016378:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	2242      	movs	r2, #66	@ 0x42
 801637e:	2110      	movs	r1, #16
 8016380:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	2200      	movs	r2, #0
 8016386:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	687a      	ldr	r2, [r7, #4]
 801638c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	2208      	movs	r2, #8
 8016392:	18ba      	adds	r2, r7, r2
 8016394:	8812      	ldrh	r2, [r2, #0]
 8016396:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	4a5c      	ldr	r2, [pc, #368]	@ (801650c <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 801639c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	4a5b      	ldr	r2, [pc, #364]	@ (8016510 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80163a2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163a8:	b29b      	uxth	r3, r3
 80163aa:	2bff      	cmp	r3, #255	@ 0xff
 80163ac:	d906      	bls.n	80163bc <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	22ff      	movs	r2, #255	@ 0xff
 80163b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80163b4:	2380      	movs	r3, #128	@ 0x80
 80163b6:	045b      	lsls	r3, r3, #17
 80163b8:	617b      	str	r3, [r7, #20]
 80163ba:	e007      	b.n	80163cc <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163c0:	b29a      	uxth	r2, r3
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80163c6:	2380      	movs	r3, #128	@ 0x80
 80163c8:	049b      	lsls	r3, r3, #18
 80163ca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d100      	bne.n	80163d6 <HAL_I2C_Master_Transmit_DMA+0xbe>
 80163d4:	e078      	b.n	80164c8 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d023      	beq.n	8016426 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80163e2:	4a4c      	ldr	r2, [pc, #304]	@ (8016514 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80163e4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80163ea:	4a4b      	ldr	r2, [pc, #300]	@ (8016518 <HAL_I2C_Master_Transmit_DMA+0x200>)
 80163ec:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80163f2:	2200      	movs	r2, #0
 80163f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80163fa:	2200      	movs	r2, #0
 80163fc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016402:	6879      	ldr	r1, [r7, #4]
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	3328      	adds	r3, #40	@ 0x28
 801640a:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016410:	2513      	movs	r5, #19
 8016412:	197c      	adds	r4, r7, r5
 8016414:	f7fe ff62 	bl	80152dc <HAL_DMA_Start_IT>
 8016418:	0003      	movs	r3, r0
 801641a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801641c:	197b      	adds	r3, r7, r5
 801641e:	781b      	ldrb	r3, [r3, #0]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d13d      	bne.n	80164a0 <HAL_I2C_Master_Transmit_DMA+0x188>
 8016424:	e013      	b.n	801644e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	2241      	movs	r2, #65	@ 0x41
 801642a:	2120      	movs	r1, #32
 801642c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	2242      	movs	r2, #66	@ 0x42
 8016432:	2100      	movs	r1, #0
 8016434:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801643a:	2280      	movs	r2, #128	@ 0x80
 801643c:	431a      	orrs	r2, r3
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	2240      	movs	r2, #64	@ 0x40
 8016446:	2100      	movs	r1, #0
 8016448:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801644a:	2301      	movs	r3, #1
 801644c:	e059      	b.n	8016502 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016452:	b2da      	uxtb	r2, r3
 8016454:	697c      	ldr	r4, [r7, #20]
 8016456:	230a      	movs	r3, #10
 8016458:	18fb      	adds	r3, r7, r3
 801645a:	8819      	ldrh	r1, [r3, #0]
 801645c:	68f8      	ldr	r0, [r7, #12]
 801645e:	4b2f      	ldr	r3, [pc, #188]	@ (801651c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8016460:	9300      	str	r3, [sp, #0]
 8016462:	0023      	movs	r3, r4
 8016464:	f002 fafc 	bl	8018a60 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801646c:	b29a      	uxth	r2, r3
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016472:	1ad3      	subs	r3, r2, r3
 8016474:	b29a      	uxth	r2, r3
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	2240      	movs	r2, #64	@ 0x40
 801647e:	2100      	movs	r1, #0
 8016480:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	2110      	movs	r1, #16
 8016486:	0018      	movs	r0, r3
 8016488:	f002 fb24 	bl	8018ad4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	681a      	ldr	r2, [r3, #0]
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	2180      	movs	r1, #128	@ 0x80
 8016498:	01c9      	lsls	r1, r1, #7
 801649a:	430a      	orrs	r2, r1
 801649c:	601a      	str	r2, [r3, #0]
 801649e:	e02d      	b.n	80164fc <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	2241      	movs	r2, #65	@ 0x41
 80164a4:	2120      	movs	r1, #32
 80164a6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	2242      	movs	r2, #66	@ 0x42
 80164ac:	2100      	movs	r1, #0
 80164ae:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80164b4:	2210      	movs	r2, #16
 80164b6:	431a      	orrs	r2, r3
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	2240      	movs	r2, #64	@ 0x40
 80164c0:	2100      	movs	r1, #0
 80164c2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80164c4:	2301      	movs	r3, #1
 80164c6:	e01c      	b.n	8016502 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	4a15      	ldr	r2, [pc, #84]	@ (8016520 <HAL_I2C_Master_Transmit_DMA+0x208>)
 80164cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164d2:	b2da      	uxtb	r2, r3
 80164d4:	2380      	movs	r3, #128	@ 0x80
 80164d6:	049c      	lsls	r4, r3, #18
 80164d8:	230a      	movs	r3, #10
 80164da:	18fb      	adds	r3, r7, r3
 80164dc:	8819      	ldrh	r1, [r3, #0]
 80164de:	68f8      	ldr	r0, [r7, #12]
 80164e0:	4b0e      	ldr	r3, [pc, #56]	@ (801651c <HAL_I2C_Master_Transmit_DMA+0x204>)
 80164e2:	9300      	str	r3, [sp, #0]
 80164e4:	0023      	movs	r3, r4
 80164e6:	f002 fabb 	bl	8018a60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	2240      	movs	r2, #64	@ 0x40
 80164ee:	2100      	movs	r1, #0
 80164f0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	2101      	movs	r1, #1
 80164f6:	0018      	movs	r0, r3
 80164f8:	f002 faec 	bl	8018ad4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80164fc:	2300      	movs	r3, #0
 80164fe:	e000      	b.n	8016502 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016500:	2302      	movs	r3, #2
  }
}
 8016502:	0018      	movs	r0, r3
 8016504:	46bd      	mov	sp, r7
 8016506:	b006      	add	sp, #24
 8016508:	bdb0      	pop	{r4, r5, r7, pc}
 801650a:	46c0      	nop			@ (mov r8, r8)
 801650c:	ffff0000 	.word	0xffff0000
 8016510:	08017249 	.word	0x08017249
 8016514:	0801840d 	.word	0x0801840d
 8016518:	0801854d 	.word	0x0801854d
 801651c:	80002000 	.word	0x80002000
 8016520:	08016d9d 	.word	0x08016d9d

08016524 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8016524:	b5b0      	push	{r4, r5, r7, lr}
 8016526:	b088      	sub	sp, #32
 8016528:	af02      	add	r7, sp, #8
 801652a:	60f8      	str	r0, [r7, #12]
 801652c:	0008      	movs	r0, r1
 801652e:	607a      	str	r2, [r7, #4]
 8016530:	0019      	movs	r1, r3
 8016532:	230a      	movs	r3, #10
 8016534:	18fb      	adds	r3, r7, r3
 8016536:	1c02      	adds	r2, r0, #0
 8016538:	801a      	strh	r2, [r3, #0]
 801653a:	2308      	movs	r3, #8
 801653c:	18fb      	adds	r3, r7, r3
 801653e:	1c0a      	adds	r2, r1, #0
 8016540:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	2241      	movs	r2, #65	@ 0x41
 8016546:	5c9b      	ldrb	r3, [r3, r2]
 8016548:	b2db      	uxtb	r3, r3
 801654a:	2b20      	cmp	r3, #32
 801654c:	d000      	beq.n	8016550 <HAL_I2C_Master_Receive_DMA+0x2c>
 801654e:	e0dd      	b.n	801670c <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	699a      	ldr	r2, [r3, #24]
 8016556:	2380      	movs	r3, #128	@ 0x80
 8016558:	021b      	lsls	r3, r3, #8
 801655a:	401a      	ands	r2, r3
 801655c:	2380      	movs	r3, #128	@ 0x80
 801655e:	021b      	lsls	r3, r3, #8
 8016560:	429a      	cmp	r2, r3
 8016562:	d101      	bne.n	8016568 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8016564:	2302      	movs	r3, #2
 8016566:	e0d2      	b.n	801670e <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	2240      	movs	r2, #64	@ 0x40
 801656c:	5c9b      	ldrb	r3, [r3, r2]
 801656e:	2b01      	cmp	r3, #1
 8016570:	d101      	bne.n	8016576 <HAL_I2C_Master_Receive_DMA+0x52>
 8016572:	2302      	movs	r3, #2
 8016574:	e0cb      	b.n	801670e <HAL_I2C_Master_Receive_DMA+0x1ea>
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	2240      	movs	r2, #64	@ 0x40
 801657a:	2101      	movs	r1, #1
 801657c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	2241      	movs	r2, #65	@ 0x41
 8016582:	2122      	movs	r1, #34	@ 0x22
 8016584:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	2242      	movs	r2, #66	@ 0x42
 801658a:	2110      	movs	r1, #16
 801658c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	2200      	movs	r2, #0
 8016592:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	687a      	ldr	r2, [r7, #4]
 8016598:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	2208      	movs	r2, #8
 801659e:	18ba      	adds	r2, r7, r2
 80165a0:	8812      	ldrh	r2, [r2, #0]
 80165a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	4a5c      	ldr	r2, [pc, #368]	@ (8016718 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80165a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	4a5b      	ldr	r2, [pc, #364]	@ (801671c <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80165ae:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165b4:	b29b      	uxth	r3, r3
 80165b6:	2bff      	cmp	r3, #255	@ 0xff
 80165b8:	d906      	bls.n	80165c8 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	22ff      	movs	r2, #255	@ 0xff
 80165be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80165c0:	2380      	movs	r3, #128	@ 0x80
 80165c2:	045b      	lsls	r3, r3, #17
 80165c4:	617b      	str	r3, [r7, #20]
 80165c6:	e007      	b.n	80165d8 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165cc:	b29a      	uxth	r2, r3
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80165d2:	2380      	movs	r3, #128	@ 0x80
 80165d4:	049b      	lsls	r3, r3, #18
 80165d6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d100      	bne.n	80165e2 <HAL_I2C_Master_Receive_DMA+0xbe>
 80165e0:	e078      	b.n	80166d4 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d023      	beq.n	8016632 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80165ee:	4a4c      	ldr	r2, [pc, #304]	@ (8016720 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80165f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80165f6:	4a4b      	ldr	r2, [pc, #300]	@ (8016724 <HAL_I2C_Master_Receive_DMA+0x200>)
 80165f8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80165fe:	2200      	movs	r2, #0
 8016600:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016606:	2200      	movs	r2, #0
 8016608:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	3324      	adds	r3, #36	@ 0x24
 8016614:	0019      	movs	r1, r3
 8016616:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801661c:	2513      	movs	r5, #19
 801661e:	197c      	adds	r4, r7, r5
 8016620:	f7fe fe5c 	bl	80152dc <HAL_DMA_Start_IT>
 8016624:	0003      	movs	r3, r0
 8016626:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8016628:	197b      	adds	r3, r7, r5
 801662a:	781b      	ldrb	r3, [r3, #0]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d13d      	bne.n	80166ac <HAL_I2C_Master_Receive_DMA+0x188>
 8016630:	e013      	b.n	801665a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	2241      	movs	r2, #65	@ 0x41
 8016636:	2120      	movs	r1, #32
 8016638:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	2242      	movs	r2, #66	@ 0x42
 801663e:	2100      	movs	r1, #0
 8016640:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016646:	2280      	movs	r2, #128	@ 0x80
 8016648:	431a      	orrs	r2, r3
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	2240      	movs	r2, #64	@ 0x40
 8016652:	2100      	movs	r1, #0
 8016654:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8016656:	2301      	movs	r3, #1
 8016658:	e059      	b.n	801670e <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801665e:	b2da      	uxtb	r2, r3
 8016660:	697c      	ldr	r4, [r7, #20]
 8016662:	230a      	movs	r3, #10
 8016664:	18fb      	adds	r3, r7, r3
 8016666:	8819      	ldrh	r1, [r3, #0]
 8016668:	68f8      	ldr	r0, [r7, #12]
 801666a:	4b2f      	ldr	r3, [pc, #188]	@ (8016728 <HAL_I2C_Master_Receive_DMA+0x204>)
 801666c:	9300      	str	r3, [sp, #0]
 801666e:	0023      	movs	r3, r4
 8016670:	f002 f9f6 	bl	8018a60 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016678:	b29a      	uxth	r2, r3
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801667e:	1ad3      	subs	r3, r2, r3
 8016680:	b29a      	uxth	r2, r3
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	2240      	movs	r2, #64	@ 0x40
 801668a:	2100      	movs	r1, #0
 801668c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	2110      	movs	r1, #16
 8016692:	0018      	movs	r0, r3
 8016694:	f002 fa1e 	bl	8018ad4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	681a      	ldr	r2, [r3, #0]
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	2180      	movs	r1, #128	@ 0x80
 80166a4:	0209      	lsls	r1, r1, #8
 80166a6:	430a      	orrs	r2, r1
 80166a8:	601a      	str	r2, [r3, #0]
 80166aa:	e02d      	b.n	8016708 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	2241      	movs	r2, #65	@ 0x41
 80166b0:	2120      	movs	r1, #32
 80166b2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	2242      	movs	r2, #66	@ 0x42
 80166b8:	2100      	movs	r1, #0
 80166ba:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166c0:	2210      	movs	r2, #16
 80166c2:	431a      	orrs	r2, r3
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	2240      	movs	r2, #64	@ 0x40
 80166cc:	2100      	movs	r1, #0
 80166ce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80166d0:	2301      	movs	r3, #1
 80166d2:	e01c      	b.n	801670e <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	4a15      	ldr	r2, [pc, #84]	@ (801672c <HAL_I2C_Master_Receive_DMA+0x208>)
 80166d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166de:	b2da      	uxtb	r2, r3
 80166e0:	2380      	movs	r3, #128	@ 0x80
 80166e2:	049c      	lsls	r4, r3, #18
 80166e4:	230a      	movs	r3, #10
 80166e6:	18fb      	adds	r3, r7, r3
 80166e8:	8819      	ldrh	r1, [r3, #0]
 80166ea:	68f8      	ldr	r0, [r7, #12]
 80166ec:	4b0e      	ldr	r3, [pc, #56]	@ (8016728 <HAL_I2C_Master_Receive_DMA+0x204>)
 80166ee:	9300      	str	r3, [sp, #0]
 80166f0:	0023      	movs	r3, r4
 80166f2:	f002 f9b5 	bl	8018a60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	2240      	movs	r2, #64	@ 0x40
 80166fa:	2100      	movs	r1, #0
 80166fc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	2101      	movs	r1, #1
 8016702:	0018      	movs	r0, r3
 8016704:	f002 f9e6 	bl	8018ad4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8016708:	2300      	movs	r3, #0
 801670a:	e000      	b.n	801670e <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801670c:	2302      	movs	r3, #2
  }
}
 801670e:	0018      	movs	r0, r3
 8016710:	46bd      	mov	sp, r7
 8016712:	b006      	add	sp, #24
 8016714:	bdb0      	pop	{r4, r5, r7, pc}
 8016716:	46c0      	nop			@ (mov r8, r8)
 8016718:	ffff0000 	.word	0xffff0000
 801671c:	08017249 	.word	0x08017249
 8016720:	080184ad 	.word	0x080184ad
 8016724:	0801854d 	.word	0x0801854d
 8016728:	80002400 	.word	0x80002400
 801672c:	08016d9d 	.word	0x08016d9d

08016730 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016730:	b590      	push	{r4, r7, lr}
 8016732:	b089      	sub	sp, #36	@ 0x24
 8016734:	af02      	add	r7, sp, #8
 8016736:	60f8      	str	r0, [r7, #12]
 8016738:	000c      	movs	r4, r1
 801673a:	0010      	movs	r0, r2
 801673c:	0019      	movs	r1, r3
 801673e:	230a      	movs	r3, #10
 8016740:	18fb      	adds	r3, r7, r3
 8016742:	1c22      	adds	r2, r4, #0
 8016744:	801a      	strh	r2, [r3, #0]
 8016746:	2308      	movs	r3, #8
 8016748:	18fb      	adds	r3, r7, r3
 801674a:	1c02      	adds	r2, r0, #0
 801674c:	801a      	strh	r2, [r3, #0]
 801674e:	1dbb      	adds	r3, r7, #6
 8016750:	1c0a      	adds	r2, r1, #0
 8016752:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	2241      	movs	r2, #65	@ 0x41
 8016758:	5c9b      	ldrb	r3, [r3, r2]
 801675a:	b2db      	uxtb	r3, r3
 801675c:	2b20      	cmp	r3, #32
 801675e:	d000      	beq.n	8016762 <HAL_I2C_Mem_Write+0x32>
 8016760:	e10c      	b.n	801697c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8016762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016764:	2b00      	cmp	r3, #0
 8016766:	d004      	beq.n	8016772 <HAL_I2C_Mem_Write+0x42>
 8016768:	232c      	movs	r3, #44	@ 0x2c
 801676a:	18fb      	adds	r3, r7, r3
 801676c:	881b      	ldrh	r3, [r3, #0]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d105      	bne.n	801677e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	2280      	movs	r2, #128	@ 0x80
 8016776:	0092      	lsls	r2, r2, #2
 8016778:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 801677a:	2301      	movs	r3, #1
 801677c:	e0ff      	b.n	801697e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	2240      	movs	r2, #64	@ 0x40
 8016782:	5c9b      	ldrb	r3, [r3, r2]
 8016784:	2b01      	cmp	r3, #1
 8016786:	d101      	bne.n	801678c <HAL_I2C_Mem_Write+0x5c>
 8016788:	2302      	movs	r3, #2
 801678a:	e0f8      	b.n	801697e <HAL_I2C_Mem_Write+0x24e>
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	2240      	movs	r2, #64	@ 0x40
 8016790:	2101      	movs	r1, #1
 8016792:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016794:	f7fe f86e 	bl	8014874 <HAL_GetTick>
 8016798:	0003      	movs	r3, r0
 801679a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801679c:	2380      	movs	r3, #128	@ 0x80
 801679e:	0219      	lsls	r1, r3, #8
 80167a0:	68f8      	ldr	r0, [r7, #12]
 80167a2:	697b      	ldr	r3, [r7, #20]
 80167a4:	9300      	str	r3, [sp, #0]
 80167a6:	2319      	movs	r3, #25
 80167a8:	2201      	movs	r2, #1
 80167aa:	f001 ff07 	bl	80185bc <I2C_WaitOnFlagUntilTimeout>
 80167ae:	1e03      	subs	r3, r0, #0
 80167b0:	d001      	beq.n	80167b6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80167b2:	2301      	movs	r3, #1
 80167b4:	e0e3      	b.n	801697e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	2241      	movs	r2, #65	@ 0x41
 80167ba:	2121      	movs	r1, #33	@ 0x21
 80167bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	2242      	movs	r2, #66	@ 0x42
 80167c2:	2140      	movs	r1, #64	@ 0x40
 80167c4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	2200      	movs	r2, #0
 80167ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80167d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	222c      	movs	r2, #44	@ 0x2c
 80167d6:	18ba      	adds	r2, r7, r2
 80167d8:	8812      	ldrh	r2, [r2, #0]
 80167da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	2200      	movs	r2, #0
 80167e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80167e2:	1dbb      	adds	r3, r7, #6
 80167e4:	881c      	ldrh	r4, [r3, #0]
 80167e6:	2308      	movs	r3, #8
 80167e8:	18fb      	adds	r3, r7, r3
 80167ea:	881a      	ldrh	r2, [r3, #0]
 80167ec:	230a      	movs	r3, #10
 80167ee:	18fb      	adds	r3, r7, r3
 80167f0:	8819      	ldrh	r1, [r3, #0]
 80167f2:	68f8      	ldr	r0, [r7, #12]
 80167f4:	697b      	ldr	r3, [r7, #20]
 80167f6:	9301      	str	r3, [sp, #4]
 80167f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167fa:	9300      	str	r3, [sp, #0]
 80167fc:	0023      	movs	r3, r4
 80167fe:	f001 f855 	bl	80178ac <I2C_RequestMemoryWrite>
 8016802:	1e03      	subs	r3, r0, #0
 8016804:	d005      	beq.n	8016812 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	2240      	movs	r2, #64	@ 0x40
 801680a:	2100      	movs	r1, #0
 801680c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 801680e:	2301      	movs	r3, #1
 8016810:	e0b5      	b.n	801697e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016816:	b29b      	uxth	r3, r3
 8016818:	2bff      	cmp	r3, #255	@ 0xff
 801681a:	d911      	bls.n	8016840 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	22ff      	movs	r2, #255	@ 0xff
 8016820:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016826:	b2da      	uxtb	r2, r3
 8016828:	2380      	movs	r3, #128	@ 0x80
 801682a:	045c      	lsls	r4, r3, #17
 801682c:	230a      	movs	r3, #10
 801682e:	18fb      	adds	r3, r7, r3
 8016830:	8819      	ldrh	r1, [r3, #0]
 8016832:	68f8      	ldr	r0, [r7, #12]
 8016834:	2300      	movs	r3, #0
 8016836:	9300      	str	r3, [sp, #0]
 8016838:	0023      	movs	r3, r4
 801683a:	f002 f911 	bl	8018a60 <I2C_TransferConfig>
 801683e:	e012      	b.n	8016866 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016844:	b29a      	uxth	r2, r3
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801684e:	b2da      	uxtb	r2, r3
 8016850:	2380      	movs	r3, #128	@ 0x80
 8016852:	049c      	lsls	r4, r3, #18
 8016854:	230a      	movs	r3, #10
 8016856:	18fb      	adds	r3, r7, r3
 8016858:	8819      	ldrh	r1, [r3, #0]
 801685a:	68f8      	ldr	r0, [r7, #12]
 801685c:	2300      	movs	r3, #0
 801685e:	9300      	str	r3, [sp, #0]
 8016860:	0023      	movs	r3, r4
 8016862:	f002 f8fd 	bl	8018a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016866:	697a      	ldr	r2, [r7, #20]
 8016868:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	0018      	movs	r0, r3
 801686e:	f001 fef3 	bl	8018658 <I2C_WaitOnTXISFlagUntilTimeout>
 8016872:	1e03      	subs	r3, r0, #0
 8016874:	d001      	beq.n	801687a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8016876:	2301      	movs	r3, #1
 8016878:	e081      	b.n	801697e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801687e:	781a      	ldrb	r2, [r3, #0]
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801688a:	1c5a      	adds	r2, r3, #1
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016894:	b29b      	uxth	r3, r3
 8016896:	3b01      	subs	r3, #1
 8016898:	b29a      	uxth	r2, r3
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168a2:	3b01      	subs	r3, #1
 80168a4:	b29a      	uxth	r2, r3
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168ae:	b29b      	uxth	r3, r3
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d03a      	beq.n	801692a <HAL_I2C_Mem_Write+0x1fa>
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d136      	bne.n	801692a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80168bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80168be:	68f8      	ldr	r0, [r7, #12]
 80168c0:	697b      	ldr	r3, [r7, #20]
 80168c2:	9300      	str	r3, [sp, #0]
 80168c4:	0013      	movs	r3, r2
 80168c6:	2200      	movs	r2, #0
 80168c8:	2180      	movs	r1, #128	@ 0x80
 80168ca:	f001 fe77 	bl	80185bc <I2C_WaitOnFlagUntilTimeout>
 80168ce:	1e03      	subs	r3, r0, #0
 80168d0:	d001      	beq.n	80168d6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80168d2:	2301      	movs	r3, #1
 80168d4:	e053      	b.n	801697e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168da:	b29b      	uxth	r3, r3
 80168dc:	2bff      	cmp	r3, #255	@ 0xff
 80168de:	d911      	bls.n	8016904 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	22ff      	movs	r2, #255	@ 0xff
 80168e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168ea:	b2da      	uxtb	r2, r3
 80168ec:	2380      	movs	r3, #128	@ 0x80
 80168ee:	045c      	lsls	r4, r3, #17
 80168f0:	230a      	movs	r3, #10
 80168f2:	18fb      	adds	r3, r7, r3
 80168f4:	8819      	ldrh	r1, [r3, #0]
 80168f6:	68f8      	ldr	r0, [r7, #12]
 80168f8:	2300      	movs	r3, #0
 80168fa:	9300      	str	r3, [sp, #0]
 80168fc:	0023      	movs	r3, r4
 80168fe:	f002 f8af 	bl	8018a60 <I2C_TransferConfig>
 8016902:	e012      	b.n	801692a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016908:	b29a      	uxth	r2, r3
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016912:	b2da      	uxtb	r2, r3
 8016914:	2380      	movs	r3, #128	@ 0x80
 8016916:	049c      	lsls	r4, r3, #18
 8016918:	230a      	movs	r3, #10
 801691a:	18fb      	adds	r3, r7, r3
 801691c:	8819      	ldrh	r1, [r3, #0]
 801691e:	68f8      	ldr	r0, [r7, #12]
 8016920:	2300      	movs	r3, #0
 8016922:	9300      	str	r3, [sp, #0]
 8016924:	0023      	movs	r3, r4
 8016926:	f002 f89b 	bl	8018a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801692e:	b29b      	uxth	r3, r3
 8016930:	2b00      	cmp	r3, #0
 8016932:	d198      	bne.n	8016866 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016934:	697a      	ldr	r2, [r7, #20]
 8016936:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	0018      	movs	r0, r3
 801693c:	f001 fed2 	bl	80186e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016940:	1e03      	subs	r3, r0, #0
 8016942:	d001      	beq.n	8016948 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8016944:	2301      	movs	r3, #1
 8016946:	e01a      	b.n	801697e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	2220      	movs	r2, #32
 801694e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	685a      	ldr	r2, [r3, #4]
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	490b      	ldr	r1, [pc, #44]	@ (8016988 <HAL_I2C_Mem_Write+0x258>)
 801695c:	400a      	ands	r2, r1
 801695e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	2241      	movs	r2, #65	@ 0x41
 8016964:	2120      	movs	r1, #32
 8016966:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	2242      	movs	r2, #66	@ 0x42
 801696c:	2100      	movs	r1, #0
 801696e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	2240      	movs	r2, #64	@ 0x40
 8016974:	2100      	movs	r1, #0
 8016976:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016978:	2300      	movs	r3, #0
 801697a:	e000      	b.n	801697e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 801697c:	2302      	movs	r3, #2
  }
}
 801697e:	0018      	movs	r0, r3
 8016980:	46bd      	mov	sp, r7
 8016982:	b007      	add	sp, #28
 8016984:	bd90      	pop	{r4, r7, pc}
 8016986:	46c0      	nop			@ (mov r8, r8)
 8016988:	fe00e800 	.word	0xfe00e800

0801698c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801698c:	b590      	push	{r4, r7, lr}
 801698e:	b089      	sub	sp, #36	@ 0x24
 8016990:	af02      	add	r7, sp, #8
 8016992:	60f8      	str	r0, [r7, #12]
 8016994:	000c      	movs	r4, r1
 8016996:	0010      	movs	r0, r2
 8016998:	0019      	movs	r1, r3
 801699a:	230a      	movs	r3, #10
 801699c:	18fb      	adds	r3, r7, r3
 801699e:	1c22      	adds	r2, r4, #0
 80169a0:	801a      	strh	r2, [r3, #0]
 80169a2:	2308      	movs	r3, #8
 80169a4:	18fb      	adds	r3, r7, r3
 80169a6:	1c02      	adds	r2, r0, #0
 80169a8:	801a      	strh	r2, [r3, #0]
 80169aa:	1dbb      	adds	r3, r7, #6
 80169ac:	1c0a      	adds	r2, r1, #0
 80169ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	2241      	movs	r2, #65	@ 0x41
 80169b4:	5c9b      	ldrb	r3, [r3, r2]
 80169b6:	b2db      	uxtb	r3, r3
 80169b8:	2b20      	cmp	r3, #32
 80169ba:	d000      	beq.n	80169be <HAL_I2C_Mem_Read+0x32>
 80169bc:	e110      	b.n	8016be0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80169be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d004      	beq.n	80169ce <HAL_I2C_Mem_Read+0x42>
 80169c4:	232c      	movs	r3, #44	@ 0x2c
 80169c6:	18fb      	adds	r3, r7, r3
 80169c8:	881b      	ldrh	r3, [r3, #0]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d105      	bne.n	80169da <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	2280      	movs	r2, #128	@ 0x80
 80169d2:	0092      	lsls	r2, r2, #2
 80169d4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80169d6:	2301      	movs	r3, #1
 80169d8:	e103      	b.n	8016be2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	2240      	movs	r2, #64	@ 0x40
 80169de:	5c9b      	ldrb	r3, [r3, r2]
 80169e0:	2b01      	cmp	r3, #1
 80169e2:	d101      	bne.n	80169e8 <HAL_I2C_Mem_Read+0x5c>
 80169e4:	2302      	movs	r3, #2
 80169e6:	e0fc      	b.n	8016be2 <HAL_I2C_Mem_Read+0x256>
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	2240      	movs	r2, #64	@ 0x40
 80169ec:	2101      	movs	r1, #1
 80169ee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80169f0:	f7fd ff40 	bl	8014874 <HAL_GetTick>
 80169f4:	0003      	movs	r3, r0
 80169f6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80169f8:	2380      	movs	r3, #128	@ 0x80
 80169fa:	0219      	lsls	r1, r3, #8
 80169fc:	68f8      	ldr	r0, [r7, #12]
 80169fe:	697b      	ldr	r3, [r7, #20]
 8016a00:	9300      	str	r3, [sp, #0]
 8016a02:	2319      	movs	r3, #25
 8016a04:	2201      	movs	r2, #1
 8016a06:	f001 fdd9 	bl	80185bc <I2C_WaitOnFlagUntilTimeout>
 8016a0a:	1e03      	subs	r3, r0, #0
 8016a0c:	d001      	beq.n	8016a12 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8016a0e:	2301      	movs	r3, #1
 8016a10:	e0e7      	b.n	8016be2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	2241      	movs	r2, #65	@ 0x41
 8016a16:	2122      	movs	r1, #34	@ 0x22
 8016a18:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	2242      	movs	r2, #66	@ 0x42
 8016a1e:	2140      	movs	r1, #64	@ 0x40
 8016a20:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	2200      	movs	r2, #0
 8016a26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016a2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	222c      	movs	r2, #44	@ 0x2c
 8016a32:	18ba      	adds	r2, r7, r2
 8016a34:	8812      	ldrh	r2, [r2, #0]
 8016a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016a3e:	1dbb      	adds	r3, r7, #6
 8016a40:	881c      	ldrh	r4, [r3, #0]
 8016a42:	2308      	movs	r3, #8
 8016a44:	18fb      	adds	r3, r7, r3
 8016a46:	881a      	ldrh	r2, [r3, #0]
 8016a48:	230a      	movs	r3, #10
 8016a4a:	18fb      	adds	r3, r7, r3
 8016a4c:	8819      	ldrh	r1, [r3, #0]
 8016a4e:	68f8      	ldr	r0, [r7, #12]
 8016a50:	697b      	ldr	r3, [r7, #20]
 8016a52:	9301      	str	r3, [sp, #4]
 8016a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a56:	9300      	str	r3, [sp, #0]
 8016a58:	0023      	movs	r3, r4
 8016a5a:	f000 ff8b 	bl	8017974 <I2C_RequestMemoryRead>
 8016a5e:	1e03      	subs	r3, r0, #0
 8016a60:	d005      	beq.n	8016a6e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	2240      	movs	r2, #64	@ 0x40
 8016a66:	2100      	movs	r1, #0
 8016a68:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016a6a:	2301      	movs	r3, #1
 8016a6c:	e0b9      	b.n	8016be2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a72:	b29b      	uxth	r3, r3
 8016a74:	2bff      	cmp	r3, #255	@ 0xff
 8016a76:	d911      	bls.n	8016a9c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	22ff      	movs	r2, #255	@ 0xff
 8016a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a82:	b2da      	uxtb	r2, r3
 8016a84:	2380      	movs	r3, #128	@ 0x80
 8016a86:	045c      	lsls	r4, r3, #17
 8016a88:	230a      	movs	r3, #10
 8016a8a:	18fb      	adds	r3, r7, r3
 8016a8c:	8819      	ldrh	r1, [r3, #0]
 8016a8e:	68f8      	ldr	r0, [r7, #12]
 8016a90:	4b56      	ldr	r3, [pc, #344]	@ (8016bec <HAL_I2C_Mem_Read+0x260>)
 8016a92:	9300      	str	r3, [sp, #0]
 8016a94:	0023      	movs	r3, r4
 8016a96:	f001 ffe3 	bl	8018a60 <I2C_TransferConfig>
 8016a9a:	e012      	b.n	8016ac2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016aa0:	b29a      	uxth	r2, r3
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016aaa:	b2da      	uxtb	r2, r3
 8016aac:	2380      	movs	r3, #128	@ 0x80
 8016aae:	049c      	lsls	r4, r3, #18
 8016ab0:	230a      	movs	r3, #10
 8016ab2:	18fb      	adds	r3, r7, r3
 8016ab4:	8819      	ldrh	r1, [r3, #0]
 8016ab6:	68f8      	ldr	r0, [r7, #12]
 8016ab8:	4b4c      	ldr	r3, [pc, #304]	@ (8016bec <HAL_I2C_Mem_Read+0x260>)
 8016aba:	9300      	str	r3, [sp, #0]
 8016abc:	0023      	movs	r3, r4
 8016abe:	f001 ffcf 	bl	8018a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8016ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016ac4:	68f8      	ldr	r0, [r7, #12]
 8016ac6:	697b      	ldr	r3, [r7, #20]
 8016ac8:	9300      	str	r3, [sp, #0]
 8016aca:	0013      	movs	r3, r2
 8016acc:	2200      	movs	r2, #0
 8016ace:	2104      	movs	r1, #4
 8016ad0:	f001 fd74 	bl	80185bc <I2C_WaitOnFlagUntilTimeout>
 8016ad4:	1e03      	subs	r3, r0, #0
 8016ad6:	d001      	beq.n	8016adc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8016ad8:	2301      	movs	r3, #1
 8016ada:	e082      	b.n	8016be2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ae6:	b2d2      	uxtb	r2, r2
 8016ae8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016aee:	1c5a      	adds	r2, r3, #1
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016af8:	3b01      	subs	r3, #1
 8016afa:	b29a      	uxth	r2, r3
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b04:	b29b      	uxth	r3, r3
 8016b06:	3b01      	subs	r3, #1
 8016b08:	b29a      	uxth	r2, r3
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b12:	b29b      	uxth	r3, r3
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d03a      	beq.n	8016b8e <HAL_I2C_Mem_Read+0x202>
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d136      	bne.n	8016b8e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016b20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016b22:	68f8      	ldr	r0, [r7, #12]
 8016b24:	697b      	ldr	r3, [r7, #20]
 8016b26:	9300      	str	r3, [sp, #0]
 8016b28:	0013      	movs	r3, r2
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	2180      	movs	r1, #128	@ 0x80
 8016b2e:	f001 fd45 	bl	80185bc <I2C_WaitOnFlagUntilTimeout>
 8016b32:	1e03      	subs	r3, r0, #0
 8016b34:	d001      	beq.n	8016b3a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8016b36:	2301      	movs	r3, #1
 8016b38:	e053      	b.n	8016be2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	2bff      	cmp	r3, #255	@ 0xff
 8016b42:	d911      	bls.n	8016b68 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	22ff      	movs	r2, #255	@ 0xff
 8016b48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b4e:	b2da      	uxtb	r2, r3
 8016b50:	2380      	movs	r3, #128	@ 0x80
 8016b52:	045c      	lsls	r4, r3, #17
 8016b54:	230a      	movs	r3, #10
 8016b56:	18fb      	adds	r3, r7, r3
 8016b58:	8819      	ldrh	r1, [r3, #0]
 8016b5a:	68f8      	ldr	r0, [r7, #12]
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	9300      	str	r3, [sp, #0]
 8016b60:	0023      	movs	r3, r4
 8016b62:	f001 ff7d 	bl	8018a60 <I2C_TransferConfig>
 8016b66:	e012      	b.n	8016b8e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b6c:	b29a      	uxth	r2, r3
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b76:	b2da      	uxtb	r2, r3
 8016b78:	2380      	movs	r3, #128	@ 0x80
 8016b7a:	049c      	lsls	r4, r3, #18
 8016b7c:	230a      	movs	r3, #10
 8016b7e:	18fb      	adds	r3, r7, r3
 8016b80:	8819      	ldrh	r1, [r3, #0]
 8016b82:	68f8      	ldr	r0, [r7, #12]
 8016b84:	2300      	movs	r3, #0
 8016b86:	9300      	str	r3, [sp, #0]
 8016b88:	0023      	movs	r3, r4
 8016b8a:	f001 ff69 	bl	8018a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b92:	b29b      	uxth	r3, r3
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d194      	bne.n	8016ac2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016b98:	697a      	ldr	r2, [r7, #20]
 8016b9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	0018      	movs	r0, r3
 8016ba0:	f001 fda0 	bl	80186e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016ba4:	1e03      	subs	r3, r0, #0
 8016ba6:	d001      	beq.n	8016bac <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8016ba8:	2301      	movs	r3, #1
 8016baa:	e01a      	b.n	8016be2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	2220      	movs	r2, #32
 8016bb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	685a      	ldr	r2, [r3, #4]
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	490c      	ldr	r1, [pc, #48]	@ (8016bf0 <HAL_I2C_Mem_Read+0x264>)
 8016bc0:	400a      	ands	r2, r1
 8016bc2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	2241      	movs	r2, #65	@ 0x41
 8016bc8:	2120      	movs	r1, #32
 8016bca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	2242      	movs	r2, #66	@ 0x42
 8016bd0:	2100      	movs	r1, #0
 8016bd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	2240      	movs	r2, #64	@ 0x40
 8016bd8:	2100      	movs	r1, #0
 8016bda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016bdc:	2300      	movs	r3, #0
 8016bde:	e000      	b.n	8016be2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8016be0:	2302      	movs	r3, #2
  }
}
 8016be2:	0018      	movs	r0, r3
 8016be4:	46bd      	mov	sp, r7
 8016be6:	b007      	add	sp, #28
 8016be8:	bd90      	pop	{r4, r7, pc}
 8016bea:	46c0      	nop			@ (mov r8, r8)
 8016bec:	80002400 	.word	0x80002400
 8016bf0:	fe00e800 	.word	0xfe00e800

08016bf4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b084      	sub	sp, #16
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	699b      	ldr	r3, [r3, #24]
 8016c02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d005      	beq.n	8016c20 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016c18:	68ba      	ldr	r2, [r7, #8]
 8016c1a:	68f9      	ldr	r1, [r7, #12]
 8016c1c:	6878      	ldr	r0, [r7, #4]
 8016c1e:	4798      	blx	r3
  }
}
 8016c20:	46c0      	nop			@ (mov r8, r8)
 8016c22:	46bd      	mov	sp, r7
 8016c24:	b004      	add	sp, #16
 8016c26:	bd80      	pop	{r7, pc}

08016c28 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b086      	sub	sp, #24
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	699b      	ldr	r3, [r3, #24]
 8016c36:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016c40:	697b      	ldr	r3, [r7, #20]
 8016c42:	0a1b      	lsrs	r3, r3, #8
 8016c44:	001a      	movs	r2, r3
 8016c46:	2301      	movs	r3, #1
 8016c48:	4013      	ands	r3, r2
 8016c4a:	d010      	beq.n	8016c6e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016c4c:	693b      	ldr	r3, [r7, #16]
 8016c4e:	09db      	lsrs	r3, r3, #7
 8016c50:	001a      	movs	r2, r3
 8016c52:	2301      	movs	r3, #1
 8016c54:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016c56:	d00a      	beq.n	8016c6e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c5c:	2201      	movs	r2, #1
 8016c5e:	431a      	orrs	r2, r3
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	2280      	movs	r2, #128	@ 0x80
 8016c6a:	0052      	lsls	r2, r2, #1
 8016c6c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016c6e:	697b      	ldr	r3, [r7, #20]
 8016c70:	0a9b      	lsrs	r3, r3, #10
 8016c72:	001a      	movs	r2, r3
 8016c74:	2301      	movs	r3, #1
 8016c76:	4013      	ands	r3, r2
 8016c78:	d010      	beq.n	8016c9c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016c7a:	693b      	ldr	r3, [r7, #16]
 8016c7c:	09db      	lsrs	r3, r3, #7
 8016c7e:	001a      	movs	r2, r3
 8016c80:	2301      	movs	r3, #1
 8016c82:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016c84:	d00a      	beq.n	8016c9c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c8a:	2208      	movs	r2, #8
 8016c8c:	431a      	orrs	r2, r3
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	2280      	movs	r2, #128	@ 0x80
 8016c98:	00d2      	lsls	r2, r2, #3
 8016c9a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016c9c:	697b      	ldr	r3, [r7, #20]
 8016c9e:	0a5b      	lsrs	r3, r3, #9
 8016ca0:	001a      	movs	r2, r3
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	4013      	ands	r3, r2
 8016ca6:	d010      	beq.n	8016cca <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016ca8:	693b      	ldr	r3, [r7, #16]
 8016caa:	09db      	lsrs	r3, r3, #7
 8016cac:	001a      	movs	r2, r3
 8016cae:	2301      	movs	r3, #1
 8016cb0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016cb2:	d00a      	beq.n	8016cca <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016cb8:	2202      	movs	r2, #2
 8016cba:	431a      	orrs	r2, r3
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	2280      	movs	r2, #128	@ 0x80
 8016cc6:	0092      	lsls	r2, r2, #2
 8016cc8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016cce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	220b      	movs	r2, #11
 8016cd4:	4013      	ands	r3, r2
 8016cd6:	d005      	beq.n	8016ce4 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8016cd8:	68fa      	ldr	r2, [r7, #12]
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	0011      	movs	r1, r2
 8016cde:	0018      	movs	r0, r3
 8016ce0:	f001 fa46 	bl	8018170 <I2C_ITError>
  }
}
 8016ce4:	46c0      	nop			@ (mov r8, r8)
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	b006      	add	sp, #24
 8016cea:	bd80      	pop	{r7, pc}

08016cec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b082      	sub	sp, #8
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8016cf4:	46c0      	nop			@ (mov r8, r8)
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	b002      	add	sp, #8
 8016cfa:	bd80      	pop	{r7, pc}

08016cfc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b082      	sub	sp, #8
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8016d04:	46c0      	nop			@ (mov r8, r8)
 8016d06:	46bd      	mov	sp, r7
 8016d08:	b002      	add	sp, #8
 8016d0a:	bd80      	pop	{r7, pc}

08016d0c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b082      	sub	sp, #8
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8016d14:	46c0      	nop			@ (mov r8, r8)
 8016d16:	46bd      	mov	sp, r7
 8016d18:	b002      	add	sp, #8
 8016d1a:	bd80      	pop	{r7, pc}

08016d1c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b082      	sub	sp, #8
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8016d24:	46c0      	nop			@ (mov r8, r8)
 8016d26:	46bd      	mov	sp, r7
 8016d28:	b002      	add	sp, #8
 8016d2a:	bd80      	pop	{r7, pc}

08016d2c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	0008      	movs	r0, r1
 8016d36:	0011      	movs	r1, r2
 8016d38:	1cfb      	adds	r3, r7, #3
 8016d3a:	1c02      	adds	r2, r0, #0
 8016d3c:	701a      	strb	r2, [r3, #0]
 8016d3e:	003b      	movs	r3, r7
 8016d40:	1c0a      	adds	r2, r1, #0
 8016d42:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016d44:	46c0      	nop			@ (mov r8, r8)
 8016d46:	46bd      	mov	sp, r7
 8016d48:	b002      	add	sp, #8
 8016d4a:	bd80      	pop	{r7, pc}

08016d4c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b082      	sub	sp, #8
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8016d54:	46c0      	nop			@ (mov r8, r8)
 8016d56:	46bd      	mov	sp, r7
 8016d58:	b002      	add	sp, #8
 8016d5a:	bd80      	pop	{r7, pc}

08016d5c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b082      	sub	sp, #8
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8016d64:	46c0      	nop			@ (mov r8, r8)
 8016d66:	46bd      	mov	sp, r7
 8016d68:	b002      	add	sp, #8
 8016d6a:	bd80      	pop	{r7, pc}

08016d6c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b082      	sub	sp, #8
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8016d74:	46c0      	nop			@ (mov r8, r8)
 8016d76:	46bd      	mov	sp, r7
 8016d78:	b002      	add	sp, #8
 8016d7a:	bd80      	pop	{r7, pc}

08016d7c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b082      	sub	sp, #8
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8016d84:	46c0      	nop			@ (mov r8, r8)
 8016d86:	46bd      	mov	sp, r7
 8016d88:	b002      	add	sp, #8
 8016d8a:	bd80      	pop	{r7, pc}

08016d8c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b082      	sub	sp, #8
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8016d94:	46c0      	nop			@ (mov r8, r8)
 8016d96:	46bd      	mov	sp, r7
 8016d98:	b002      	add	sp, #8
 8016d9a:	bd80      	pop	{r7, pc}

08016d9c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016d9c:	b590      	push	{r4, r7, lr}
 8016d9e:	b089      	sub	sp, #36	@ 0x24
 8016da0:	af02      	add	r7, sp, #8
 8016da2:	60f8      	str	r0, [r7, #12]
 8016da4:	60b9      	str	r1, [r7, #8]
 8016da6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	2240      	movs	r2, #64	@ 0x40
 8016db0:	5c9b      	ldrb	r3, [r3, r2]
 8016db2:	2b01      	cmp	r3, #1
 8016db4:	d101      	bne.n	8016dba <I2C_Master_ISR_IT+0x1e>
 8016db6:	2302      	movs	r3, #2
 8016db8:	e12b      	b.n	8017012 <I2C_Master_ISR_IT+0x276>
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	2240      	movs	r2, #64	@ 0x40
 8016dbe:	2101      	movs	r1, #1
 8016dc0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016dc2:	697b      	ldr	r3, [r7, #20]
 8016dc4:	091b      	lsrs	r3, r3, #4
 8016dc6:	001a      	movs	r2, r3
 8016dc8:	2301      	movs	r3, #1
 8016dca:	4013      	ands	r3, r2
 8016dcc:	d014      	beq.n	8016df8 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	091b      	lsrs	r3, r3, #4
 8016dd2:	001a      	movs	r2, r3
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016dd8:	d00e      	beq.n	8016df8 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	2210      	movs	r2, #16
 8016de0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016de6:	2204      	movs	r2, #4
 8016de8:	431a      	orrs	r2, r3
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	0018      	movs	r0, r3
 8016df2:	f001 fae8 	bl	80183c6 <I2C_Flush_TXDR>
 8016df6:	e0f5      	b.n	8016fe4 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016df8:	697b      	ldr	r3, [r7, #20]
 8016dfa:	089b      	lsrs	r3, r3, #2
 8016dfc:	001a      	movs	r2, r3
 8016dfe:	2301      	movs	r3, #1
 8016e00:	4013      	ands	r3, r2
 8016e02:	d023      	beq.n	8016e4c <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	089b      	lsrs	r3, r3, #2
 8016e08:	001a      	movs	r2, r3
 8016e0a:	2301      	movs	r3, #1
 8016e0c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016e0e:	d01d      	beq.n	8016e4c <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016e10:	697b      	ldr	r3, [r7, #20]
 8016e12:	2204      	movs	r2, #4
 8016e14:	4393      	bics	r3, r2
 8016e16:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e22:	b2d2      	uxtb	r2, r2
 8016e24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e2a:	1c5a      	adds	r2, r3, #1
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016e34:	3b01      	subs	r3, #1
 8016e36:	b29a      	uxth	r2, r3
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016e40:	b29b      	uxth	r3, r3
 8016e42:	3b01      	subs	r3, #1
 8016e44:	b29a      	uxth	r2, r3
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016e4a:	e0cb      	b.n	8016fe4 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016e4c:	697b      	ldr	r3, [r7, #20]
 8016e4e:	085b      	lsrs	r3, r3, #1
 8016e50:	001a      	movs	r2, r3
 8016e52:	2301      	movs	r3, #1
 8016e54:	4013      	ands	r3, r2
 8016e56:	d01e      	beq.n	8016e96 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	085b      	lsrs	r3, r3, #1
 8016e5c:	001a      	movs	r2, r3
 8016e5e:	2301      	movs	r3, #1
 8016e60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016e62:	d018      	beq.n	8016e96 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e68:	781a      	ldrb	r2, [r3, #0]
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e74:	1c5a      	adds	r2, r3, #1
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016e7e:	3b01      	subs	r3, #1
 8016e80:	b29a      	uxth	r2, r3
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016e8a:	b29b      	uxth	r3, r3
 8016e8c:	3b01      	subs	r3, #1
 8016e8e:	b29a      	uxth	r2, r3
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016e94:	e0a6      	b.n	8016fe4 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016e96:	697b      	ldr	r3, [r7, #20]
 8016e98:	09db      	lsrs	r3, r3, #7
 8016e9a:	001a      	movs	r2, r3
 8016e9c:	2301      	movs	r3, #1
 8016e9e:	4013      	ands	r3, r2
 8016ea0:	d100      	bne.n	8016ea4 <I2C_Master_ISR_IT+0x108>
 8016ea2:	e06b      	b.n	8016f7c <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	099b      	lsrs	r3, r3, #6
 8016ea8:	001a      	movs	r2, r3
 8016eaa:	2301      	movs	r3, #1
 8016eac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016eae:	d065      	beq.n	8016f7c <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016eb4:	b29b      	uxth	r3, r3
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d04a      	beq.n	8016f50 <I2C_Master_ISR_IT+0x1b4>
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d146      	bne.n	8016f50 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	685b      	ldr	r3, [r3, #4]
 8016ec8:	b29a      	uxth	r2, r3
 8016eca:	2112      	movs	r1, #18
 8016ecc:	187b      	adds	r3, r7, r1
 8016ece:	0592      	lsls	r2, r2, #22
 8016ed0:	0d92      	lsrs	r2, r2, #22
 8016ed2:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ed8:	b29b      	uxth	r3, r3
 8016eda:	2bff      	cmp	r3, #255	@ 0xff
 8016edc:	d910      	bls.n	8016f00 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	22ff      	movs	r2, #255	@ 0xff
 8016ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ee8:	b2da      	uxtb	r2, r3
 8016eea:	2380      	movs	r3, #128	@ 0x80
 8016eec:	045c      	lsls	r4, r3, #17
 8016eee:	187b      	adds	r3, r7, r1
 8016ef0:	8819      	ldrh	r1, [r3, #0]
 8016ef2:	68f8      	ldr	r0, [r7, #12]
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	9300      	str	r3, [sp, #0]
 8016ef8:	0023      	movs	r3, r4
 8016efa:	f001 fdb1 	bl	8018a60 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016efe:	e03c      	b.n	8016f7a <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f04:	b29a      	uxth	r2, r3
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016f0e:	4a43      	ldr	r2, [pc, #268]	@ (801701c <I2C_Master_ISR_IT+0x280>)
 8016f10:	4293      	cmp	r3, r2
 8016f12:	d00e      	beq.n	8016f32 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f18:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016f1e:	2312      	movs	r3, #18
 8016f20:	18fb      	adds	r3, r7, r3
 8016f22:	8819      	ldrh	r1, [r3, #0]
 8016f24:	68f8      	ldr	r0, [r7, #12]
 8016f26:	2300      	movs	r3, #0
 8016f28:	9300      	str	r3, [sp, #0]
 8016f2a:	0023      	movs	r3, r4
 8016f2c:	f001 fd98 	bl	8018a60 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f30:	e023      	b.n	8016f7a <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f36:	b2da      	uxtb	r2, r3
 8016f38:	2380      	movs	r3, #128	@ 0x80
 8016f3a:	049c      	lsls	r4, r3, #18
 8016f3c:	2312      	movs	r3, #18
 8016f3e:	18fb      	adds	r3, r7, r3
 8016f40:	8819      	ldrh	r1, [r3, #0]
 8016f42:	68f8      	ldr	r0, [r7, #12]
 8016f44:	2300      	movs	r3, #0
 8016f46:	9300      	str	r3, [sp, #0]
 8016f48:	0023      	movs	r3, r4
 8016f4a:	f001 fd89 	bl	8018a60 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f4e:	e014      	b.n	8016f7a <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	685a      	ldr	r2, [r3, #4]
 8016f56:	2380      	movs	r3, #128	@ 0x80
 8016f58:	049b      	lsls	r3, r3, #18
 8016f5a:	401a      	ands	r2, r3
 8016f5c:	2380      	movs	r3, #128	@ 0x80
 8016f5e:	049b      	lsls	r3, r3, #18
 8016f60:	429a      	cmp	r2, r3
 8016f62:	d004      	beq.n	8016f6e <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	0018      	movs	r0, r3
 8016f68:	f000 fe0a 	bl	8017b80 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016f6c:	e03a      	b.n	8016fe4 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	2140      	movs	r1, #64	@ 0x40
 8016f72:	0018      	movs	r0, r3
 8016f74:	f001 f8fc 	bl	8018170 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016f78:	e034      	b.n	8016fe4 <I2C_Master_ISR_IT+0x248>
 8016f7a:	e033      	b.n	8016fe4 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016f7c:	697b      	ldr	r3, [r7, #20]
 8016f7e:	099b      	lsrs	r3, r3, #6
 8016f80:	001a      	movs	r2, r3
 8016f82:	2301      	movs	r3, #1
 8016f84:	4013      	ands	r3, r2
 8016f86:	d02d      	beq.n	8016fe4 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	099b      	lsrs	r3, r3, #6
 8016f8c:	001a      	movs	r2, r3
 8016f8e:	2301      	movs	r3, #1
 8016f90:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016f92:	d027      	beq.n	8016fe4 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f98:	b29b      	uxth	r3, r3
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d11d      	bne.n	8016fda <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	685a      	ldr	r2, [r3, #4]
 8016fa4:	2380      	movs	r3, #128	@ 0x80
 8016fa6:	049b      	lsls	r3, r3, #18
 8016fa8:	401a      	ands	r2, r3
 8016faa:	2380      	movs	r3, #128	@ 0x80
 8016fac:	049b      	lsls	r3, r3, #18
 8016fae:	429a      	cmp	r2, r3
 8016fb0:	d018      	beq.n	8016fe4 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016fb6:	4a19      	ldr	r2, [pc, #100]	@ (801701c <I2C_Master_ISR_IT+0x280>)
 8016fb8:	4293      	cmp	r3, r2
 8016fba:	d109      	bne.n	8016fd0 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	685a      	ldr	r2, [r3, #4]
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	2180      	movs	r1, #128	@ 0x80
 8016fc8:	01c9      	lsls	r1, r1, #7
 8016fca:	430a      	orrs	r2, r1
 8016fcc:	605a      	str	r2, [r3, #4]
 8016fce:	e009      	b.n	8016fe4 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	0018      	movs	r0, r3
 8016fd4:	f000 fdd4 	bl	8017b80 <I2C_ITMasterSeqCplt>
 8016fd8:	e004      	b.n	8016fe4 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	2140      	movs	r1, #64	@ 0x40
 8016fde:	0018      	movs	r0, r3
 8016fe0:	f001 f8c6 	bl	8018170 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016fe4:	697b      	ldr	r3, [r7, #20]
 8016fe6:	095b      	lsrs	r3, r3, #5
 8016fe8:	001a      	movs	r2, r3
 8016fea:	2301      	movs	r3, #1
 8016fec:	4013      	ands	r3, r2
 8016fee:	d00b      	beq.n	8017008 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	095b      	lsrs	r3, r3, #5
 8016ff4:	001a      	movs	r2, r3
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016ffa:	d005      	beq.n	8017008 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8016ffc:	697a      	ldr	r2, [r7, #20]
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	0011      	movs	r1, r2
 8017002:	0018      	movs	r0, r3
 8017004:	f000 fe64 	bl	8017cd0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	2240      	movs	r2, #64	@ 0x40
 801700c:	2100      	movs	r1, #0
 801700e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017010:	2300      	movs	r3, #0
}
 8017012:	0018      	movs	r0, r3
 8017014:	46bd      	mov	sp, r7
 8017016:	b007      	add	sp, #28
 8017018:	bd90      	pop	{r4, r7, pc}
 801701a:	46c0      	nop			@ (mov r8, r8)
 801701c:	ffff0000 	.word	0xffff0000

08017020 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b086      	sub	sp, #24
 8017024:	af00      	add	r7, sp, #0
 8017026:	60f8      	str	r0, [r7, #12]
 8017028:	60b9      	str	r1, [r7, #8]
 801702a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017030:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8017032:	68bb      	ldr	r3, [r7, #8]
 8017034:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	2240      	movs	r2, #64	@ 0x40
 801703a:	5c9b      	ldrb	r3, [r3, r2]
 801703c:	2b01      	cmp	r3, #1
 801703e:	d101      	bne.n	8017044 <I2C_Slave_ISR_IT+0x24>
 8017040:	2302      	movs	r3, #2
 8017042:	e0fa      	b.n	801723a <I2C_Slave_ISR_IT+0x21a>
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	2240      	movs	r2, #64	@ 0x40
 8017048:	2101      	movs	r1, #1
 801704a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801704c:	693b      	ldr	r3, [r7, #16]
 801704e:	095b      	lsrs	r3, r3, #5
 8017050:	001a      	movs	r2, r3
 8017052:	2301      	movs	r3, #1
 8017054:	4013      	ands	r3, r2
 8017056:	d00b      	beq.n	8017070 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	095b      	lsrs	r3, r3, #5
 801705c:	001a      	movs	r2, r3
 801705e:	2301      	movs	r3, #1
 8017060:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017062:	d005      	beq.n	8017070 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8017064:	693a      	ldr	r2, [r7, #16]
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	0011      	movs	r1, r2
 801706a:	0018      	movs	r0, r3
 801706c:	f000 ff02 	bl	8017e74 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8017070:	693b      	ldr	r3, [r7, #16]
 8017072:	091b      	lsrs	r3, r3, #4
 8017074:	001a      	movs	r2, r3
 8017076:	2301      	movs	r3, #1
 8017078:	4013      	ands	r3, r2
 801707a:	d054      	beq.n	8017126 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	091b      	lsrs	r3, r3, #4
 8017080:	001a      	movs	r2, r3
 8017082:	2301      	movs	r3, #1
 8017084:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8017086:	d04e      	beq.n	8017126 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801708c:	b29b      	uxth	r3, r3
 801708e:	2b00      	cmp	r3, #0
 8017090:	d12d      	bne.n	80170ee <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	2241      	movs	r2, #65	@ 0x41
 8017096:	5c9b      	ldrb	r3, [r3, r2]
 8017098:	b2db      	uxtb	r3, r3
 801709a:	2b28      	cmp	r3, #40	@ 0x28
 801709c:	d10b      	bne.n	80170b6 <I2C_Slave_ISR_IT+0x96>
 801709e:	697a      	ldr	r2, [r7, #20]
 80170a0:	2380      	movs	r3, #128	@ 0x80
 80170a2:	049b      	lsls	r3, r3, #18
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d106      	bne.n	80170b6 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80170a8:	693a      	ldr	r2, [r7, #16]
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	0011      	movs	r1, r2
 80170ae:	0018      	movs	r0, r3
 80170b0:	f001 f804 	bl	80180bc <I2C_ITListenCplt>
 80170b4:	e036      	b.n	8017124 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	2241      	movs	r2, #65	@ 0x41
 80170ba:	5c9b      	ldrb	r3, [r3, r2]
 80170bc:	b2db      	uxtb	r3, r3
 80170be:	2b29      	cmp	r3, #41	@ 0x29
 80170c0:	d110      	bne.n	80170e4 <I2C_Slave_ISR_IT+0xc4>
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	4a5f      	ldr	r2, [pc, #380]	@ (8017244 <I2C_Slave_ISR_IT+0x224>)
 80170c6:	4293      	cmp	r3, r2
 80170c8:	d00c      	beq.n	80170e4 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	2210      	movs	r2, #16
 80170d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	0018      	movs	r0, r3
 80170d6:	f001 f976 	bl	80183c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	0018      	movs	r0, r3
 80170de:	f000 fd91 	bl	8017c04 <I2C_ITSlaveSeqCplt>
 80170e2:	e01f      	b.n	8017124 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	2210      	movs	r2, #16
 80170ea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80170ec:	e09d      	b.n	801722a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	2210      	movs	r2, #16
 80170f4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80170fa:	2204      	movs	r2, #4
 80170fc:	431a      	orrs	r2, r3
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d005      	beq.n	8017114 <I2C_Slave_ISR_IT+0xf4>
 8017108:	697a      	ldr	r2, [r7, #20]
 801710a:	2380      	movs	r3, #128	@ 0x80
 801710c:	045b      	lsls	r3, r3, #17
 801710e:	429a      	cmp	r2, r3
 8017110:	d000      	beq.n	8017114 <I2C_Slave_ISR_IT+0xf4>
 8017112:	e08a      	b.n	801722a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	0011      	movs	r1, r2
 801711c:	0018      	movs	r0, r3
 801711e:	f001 f827 	bl	8018170 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8017122:	e082      	b.n	801722a <I2C_Slave_ISR_IT+0x20a>
 8017124:	e081      	b.n	801722a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8017126:	693b      	ldr	r3, [r7, #16]
 8017128:	089b      	lsrs	r3, r3, #2
 801712a:	001a      	movs	r2, r3
 801712c:	2301      	movs	r3, #1
 801712e:	4013      	ands	r3, r2
 8017130:	d031      	beq.n	8017196 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	089b      	lsrs	r3, r3, #2
 8017136:	001a      	movs	r2, r3
 8017138:	2301      	movs	r3, #1
 801713a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801713c:	d02b      	beq.n	8017196 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017142:	b29b      	uxth	r3, r3
 8017144:	2b00      	cmp	r3, #0
 8017146:	d018      	beq.n	801717a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017152:	b2d2      	uxtb	r2, r2
 8017154:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801715a:	1c5a      	adds	r2, r3, #1
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017164:	3b01      	subs	r3, #1
 8017166:	b29a      	uxth	r2, r3
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017170:	b29b      	uxth	r3, r3
 8017172:	3b01      	subs	r3, #1
 8017174:	b29a      	uxth	r2, r3
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801717e:	b29b      	uxth	r3, r3
 8017180:	2b00      	cmp	r3, #0
 8017182:	d154      	bne.n	801722e <I2C_Slave_ISR_IT+0x20e>
 8017184:	697b      	ldr	r3, [r7, #20]
 8017186:	4a2f      	ldr	r2, [pc, #188]	@ (8017244 <I2C_Slave_ISR_IT+0x224>)
 8017188:	4293      	cmp	r3, r2
 801718a:	d050      	beq.n	801722e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	0018      	movs	r0, r3
 8017190:	f000 fd38 	bl	8017c04 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8017194:	e04b      	b.n	801722e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017196:	693b      	ldr	r3, [r7, #16]
 8017198:	08db      	lsrs	r3, r3, #3
 801719a:	001a      	movs	r2, r3
 801719c:	2301      	movs	r3, #1
 801719e:	4013      	ands	r3, r2
 80171a0:	d00c      	beq.n	80171bc <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	08db      	lsrs	r3, r3, #3
 80171a6:	001a      	movs	r2, r3
 80171a8:	2301      	movs	r3, #1
 80171aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80171ac:	d006      	beq.n	80171bc <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80171ae:	693a      	ldr	r2, [r7, #16]
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	0011      	movs	r1, r2
 80171b4:	0018      	movs	r0, r3
 80171b6:	f000 fc3f 	bl	8017a38 <I2C_ITAddrCplt>
 80171ba:	e039      	b.n	8017230 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80171bc:	693b      	ldr	r3, [r7, #16]
 80171be:	085b      	lsrs	r3, r3, #1
 80171c0:	001a      	movs	r2, r3
 80171c2:	2301      	movs	r3, #1
 80171c4:	4013      	ands	r3, r2
 80171c6:	d033      	beq.n	8017230 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	085b      	lsrs	r3, r3, #1
 80171cc:	001a      	movs	r2, r3
 80171ce:	2301      	movs	r3, #1
 80171d0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80171d2:	d02d      	beq.n	8017230 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171d8:	b29b      	uxth	r3, r3
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d018      	beq.n	8017210 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171e2:	781a      	ldrb	r2, [r3, #0]
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171ee:	1c5a      	adds	r2, r3, #1
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171f8:	b29b      	uxth	r3, r3
 80171fa:	3b01      	subs	r3, #1
 80171fc:	b29a      	uxth	r2, r3
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017206:	3b01      	subs	r3, #1
 8017208:	b29a      	uxth	r2, r3
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801720e:	e00f      	b.n	8017230 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8017210:	697a      	ldr	r2, [r7, #20]
 8017212:	2380      	movs	r3, #128	@ 0x80
 8017214:	045b      	lsls	r3, r3, #17
 8017216:	429a      	cmp	r2, r3
 8017218:	d002      	beq.n	8017220 <I2C_Slave_ISR_IT+0x200>
 801721a:	697b      	ldr	r3, [r7, #20]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d107      	bne.n	8017230 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	0018      	movs	r0, r3
 8017224:	f000 fcee 	bl	8017c04 <I2C_ITSlaveSeqCplt>
 8017228:	e002      	b.n	8017230 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 801722a:	46c0      	nop			@ (mov r8, r8)
 801722c:	e000      	b.n	8017230 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 801722e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	2240      	movs	r2, #64	@ 0x40
 8017234:	2100      	movs	r1, #0
 8017236:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017238:	2300      	movs	r3, #0
}
 801723a:	0018      	movs	r0, r3
 801723c:	46bd      	mov	sp, r7
 801723e:	b006      	add	sp, #24
 8017240:	bd80      	pop	{r7, pc}
 8017242:	46c0      	nop			@ (mov r8, r8)
 8017244:	ffff0000 	.word	0xffff0000

08017248 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8017248:	b590      	push	{r4, r7, lr}
 801724a:	b089      	sub	sp, #36	@ 0x24
 801724c:	af02      	add	r7, sp, #8
 801724e:	60f8      	str	r0, [r7, #12]
 8017250:	60b9      	str	r1, [r7, #8]
 8017252:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	2240      	movs	r2, #64	@ 0x40
 8017258:	5c9b      	ldrb	r3, [r3, r2]
 801725a:	2b01      	cmp	r3, #1
 801725c:	d101      	bne.n	8017262 <I2C_Master_ISR_DMA+0x1a>
 801725e:	2302      	movs	r3, #2
 8017260:	e0f7      	b.n	8017452 <I2C_Master_ISR_DMA+0x20a>
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	2240      	movs	r2, #64	@ 0x40
 8017266:	2101      	movs	r1, #1
 8017268:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801726a:	68bb      	ldr	r3, [r7, #8]
 801726c:	091b      	lsrs	r3, r3, #4
 801726e:	001a      	movs	r2, r3
 8017270:	2301      	movs	r3, #1
 8017272:	4013      	ands	r3, r2
 8017274:	d019      	beq.n	80172aa <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	091b      	lsrs	r3, r3, #4
 801727a:	001a      	movs	r2, r3
 801727c:	2301      	movs	r3, #1
 801727e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017280:	d013      	beq.n	80172aa <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	2210      	movs	r2, #16
 8017288:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801728e:	2204      	movs	r2, #4
 8017290:	431a      	orrs	r2, r3
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	2120      	movs	r1, #32
 801729a:	0018      	movs	r0, r3
 801729c:	f001 fc1a 	bl	8018ad4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	0018      	movs	r0, r3
 80172a4:	f001 f88f 	bl	80183c6 <I2C_Flush_TXDR>
 80172a8:	e0ce      	b.n	8017448 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80172aa:	68bb      	ldr	r3, [r7, #8]
 80172ac:	09db      	lsrs	r3, r3, #7
 80172ae:	001a      	movs	r2, r3
 80172b0:	2301      	movs	r3, #1
 80172b2:	4013      	ands	r3, r2
 80172b4:	d100      	bne.n	80172b8 <I2C_Master_ISR_DMA+0x70>
 80172b6:	e07e      	b.n	80173b6 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	099b      	lsrs	r3, r3, #6
 80172bc:	001a      	movs	r2, r3
 80172be:	2301      	movs	r3, #1
 80172c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80172c2:	d100      	bne.n	80172c6 <I2C_Master_ISR_DMA+0x7e>
 80172c4:	e077      	b.n	80173b6 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	681a      	ldr	r2, [r3, #0]
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	2140      	movs	r1, #64	@ 0x40
 80172d2:	438a      	bics	r2, r1
 80172d4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80172da:	b29b      	uxth	r3, r3
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d055      	beq.n	801738c <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	685b      	ldr	r3, [r3, #4]
 80172e6:	b29a      	uxth	r2, r3
 80172e8:	2312      	movs	r3, #18
 80172ea:	18fb      	adds	r3, r7, r3
 80172ec:	0592      	lsls	r2, r2, #22
 80172ee:	0d92      	lsrs	r2, r2, #22
 80172f0:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80172f6:	b29b      	uxth	r3, r3
 80172f8:	2bff      	cmp	r3, #255	@ 0xff
 80172fa:	d906      	bls.n	801730a <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	22ff      	movs	r2, #255	@ 0xff
 8017300:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8017302:	2380      	movs	r3, #128	@ 0x80
 8017304:	045b      	lsls	r3, r3, #17
 8017306:	617b      	str	r3, [r7, #20]
 8017308:	e010      	b.n	801732c <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801730e:	b29a      	uxth	r2, r3
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017318:	4a50      	ldr	r2, [pc, #320]	@ (801745c <I2C_Master_ISR_DMA+0x214>)
 801731a:	4293      	cmp	r3, r2
 801731c:	d003      	beq.n	8017326 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017322:	617b      	str	r3, [r7, #20]
 8017324:	e002      	b.n	801732c <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8017326:	2380      	movs	r3, #128	@ 0x80
 8017328:	049b      	lsls	r3, r3, #18
 801732a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017330:	b2da      	uxtb	r2, r3
 8017332:	697c      	ldr	r4, [r7, #20]
 8017334:	2312      	movs	r3, #18
 8017336:	18fb      	adds	r3, r7, r3
 8017338:	8819      	ldrh	r1, [r3, #0]
 801733a:	68f8      	ldr	r0, [r7, #12]
 801733c:	2300      	movs	r3, #0
 801733e:	9300      	str	r3, [sp, #0]
 8017340:	0023      	movs	r3, r4
 8017342:	f001 fb8d 	bl	8018a60 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801734a:	b29a      	uxth	r2, r3
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017350:	1ad3      	subs	r3, r2, r3
 8017352:	b29a      	uxth	r2, r3
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	2241      	movs	r2, #65	@ 0x41
 801735c:	5c9b      	ldrb	r3, [r3, r2]
 801735e:	b2db      	uxtb	r3, r3
 8017360:	2b22      	cmp	r3, #34	@ 0x22
 8017362:	d109      	bne.n	8017378 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	681a      	ldr	r2, [r3, #0]
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	2180      	movs	r1, #128	@ 0x80
 8017370:	0209      	lsls	r1, r1, #8
 8017372:	430a      	orrs	r2, r1
 8017374:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8017376:	e067      	b.n	8017448 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	681a      	ldr	r2, [r3, #0]
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	2180      	movs	r1, #128	@ 0x80
 8017384:	01c9      	lsls	r1, r1, #7
 8017386:	430a      	orrs	r2, r1
 8017388:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801738a:	e05d      	b.n	8017448 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	685a      	ldr	r2, [r3, #4]
 8017392:	2380      	movs	r3, #128	@ 0x80
 8017394:	049b      	lsls	r3, r3, #18
 8017396:	401a      	ands	r2, r3
 8017398:	2380      	movs	r3, #128	@ 0x80
 801739a:	049b      	lsls	r3, r3, #18
 801739c:	429a      	cmp	r2, r3
 801739e:	d004      	beq.n	80173aa <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	0018      	movs	r0, r3
 80173a4:	f000 fbec 	bl	8017b80 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80173a8:	e04e      	b.n	8017448 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	2140      	movs	r1, #64	@ 0x40
 80173ae:	0018      	movs	r0, r3
 80173b0:	f000 fede 	bl	8018170 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80173b4:	e048      	b.n	8017448 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	099b      	lsrs	r3, r3, #6
 80173ba:	001a      	movs	r2, r3
 80173bc:	2301      	movs	r3, #1
 80173be:	4013      	ands	r3, r2
 80173c0:	d02e      	beq.n	8017420 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	099b      	lsrs	r3, r3, #6
 80173c6:	001a      	movs	r2, r3
 80173c8:	2301      	movs	r3, #1
 80173ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80173cc:	d028      	beq.n	8017420 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80173d2:	b29b      	uxth	r3, r3
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d11d      	bne.n	8017414 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	685a      	ldr	r2, [r3, #4]
 80173de:	2380      	movs	r3, #128	@ 0x80
 80173e0:	049b      	lsls	r3, r3, #18
 80173e2:	401a      	ands	r2, r3
 80173e4:	2380      	movs	r3, #128	@ 0x80
 80173e6:	049b      	lsls	r3, r3, #18
 80173e8:	429a      	cmp	r2, r3
 80173ea:	d02c      	beq.n	8017446 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173f0:	4a1a      	ldr	r2, [pc, #104]	@ (801745c <I2C_Master_ISR_DMA+0x214>)
 80173f2:	4293      	cmp	r3, r2
 80173f4:	d109      	bne.n	801740a <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	685a      	ldr	r2, [r3, #4]
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	2180      	movs	r1, #128	@ 0x80
 8017402:	01c9      	lsls	r1, r1, #7
 8017404:	430a      	orrs	r2, r1
 8017406:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8017408:	e01d      	b.n	8017446 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	0018      	movs	r0, r3
 801740e:	f000 fbb7 	bl	8017b80 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8017412:	e018      	b.n	8017446 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	2140      	movs	r1, #64	@ 0x40
 8017418:	0018      	movs	r0, r3
 801741a:	f000 fea9 	bl	8018170 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801741e:	e012      	b.n	8017446 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	095b      	lsrs	r3, r3, #5
 8017424:	001a      	movs	r2, r3
 8017426:	2301      	movs	r3, #1
 8017428:	4013      	ands	r3, r2
 801742a:	d00d      	beq.n	8017448 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	095b      	lsrs	r3, r3, #5
 8017430:	001a      	movs	r2, r3
 8017432:	2301      	movs	r3, #1
 8017434:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017436:	d007      	beq.n	8017448 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8017438:	68ba      	ldr	r2, [r7, #8]
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	0011      	movs	r1, r2
 801743e:	0018      	movs	r0, r3
 8017440:	f000 fc46 	bl	8017cd0 <I2C_ITMasterCplt>
 8017444:	e000      	b.n	8017448 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8017446:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	2240      	movs	r2, #64	@ 0x40
 801744c:	2100      	movs	r1, #0
 801744e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017450:	2300      	movs	r3, #0
}
 8017452:	0018      	movs	r0, r3
 8017454:	46bd      	mov	sp, r7
 8017456:	b007      	add	sp, #28
 8017458:	bd90      	pop	{r4, r7, pc}
 801745a:	46c0      	nop			@ (mov r8, r8)
 801745c:	ffff0000 	.word	0xffff0000

08017460 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8017460:	b590      	push	{r4, r7, lr}
 8017462:	b089      	sub	sp, #36	@ 0x24
 8017464:	af02      	add	r7, sp, #8
 8017466:	60f8      	str	r0, [r7, #12]
 8017468:	60b9      	str	r1, [r7, #8]
 801746a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 801746c:	4b92      	ldr	r3, [pc, #584]	@ (80176b8 <I2C_Mem_ISR_DMA+0x258>)
 801746e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	2240      	movs	r2, #64	@ 0x40
 8017474:	5c9b      	ldrb	r3, [r3, r2]
 8017476:	2b01      	cmp	r3, #1
 8017478:	d101      	bne.n	801747e <I2C_Mem_ISR_DMA+0x1e>
 801747a:	2302      	movs	r3, #2
 801747c:	e118      	b.n	80176b0 <I2C_Mem_ISR_DMA+0x250>
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	2240      	movs	r2, #64	@ 0x40
 8017482:	2101      	movs	r1, #1
 8017484:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017486:	68bb      	ldr	r3, [r7, #8]
 8017488:	091b      	lsrs	r3, r3, #4
 801748a:	001a      	movs	r2, r3
 801748c:	2301      	movs	r3, #1
 801748e:	4013      	ands	r3, r2
 8017490:	d019      	beq.n	80174c6 <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	091b      	lsrs	r3, r3, #4
 8017496:	001a      	movs	r2, r3
 8017498:	2301      	movs	r3, #1
 801749a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801749c:	d013      	beq.n	80174c6 <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	2210      	movs	r2, #16
 80174a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80174aa:	2204      	movs	r2, #4
 80174ac:	431a      	orrs	r2, r3
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	2120      	movs	r1, #32
 80174b6:	0018      	movs	r0, r3
 80174b8:	f001 fb0c 	bl	8018ad4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	0018      	movs	r0, r3
 80174c0:	f000 ff81 	bl	80183c6 <I2C_Flush_TXDR>
 80174c4:	e0ef      	b.n	80176a6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80174c6:	68bb      	ldr	r3, [r7, #8]
 80174c8:	085b      	lsrs	r3, r3, #1
 80174ca:	001a      	movs	r2, r3
 80174cc:	2301      	movs	r3, #1
 80174ce:	4013      	ands	r3, r2
 80174d0:	d00f      	beq.n	80174f2 <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	085b      	lsrs	r3, r3, #1
 80174d6:	001a      	movs	r2, r3
 80174d8:	2301      	movs	r3, #1
 80174da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80174dc:	d009      	beq.n	80174f2 <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	68fa      	ldr	r2, [r7, #12]
 80174e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80174e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	2201      	movs	r2, #1
 80174ec:	4252      	negs	r2, r2
 80174ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80174f0:	e0d9      	b.n	80176a6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80174f2:	68bb      	ldr	r3, [r7, #8]
 80174f4:	09db      	lsrs	r3, r3, #7
 80174f6:	001a      	movs	r2, r3
 80174f8:	2301      	movs	r3, #1
 80174fa:	4013      	ands	r3, r2
 80174fc:	d060      	beq.n	80175c0 <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	099b      	lsrs	r3, r3, #6
 8017502:	001a      	movs	r2, r3
 8017504:	2301      	movs	r3, #1
 8017506:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8017508:	d05a      	beq.n	80175c0 <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	2110      	movs	r1, #16
 801750e:	0018      	movs	r0, r3
 8017510:	f001 fae0 	bl	8018ad4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017518:	b29b      	uxth	r3, r3
 801751a:	2b00      	cmp	r3, #0
 801751c:	d04a      	beq.n	80175b4 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017522:	b29b      	uxth	r3, r3
 8017524:	2bff      	cmp	r3, #255	@ 0xff
 8017526:	d910      	bls.n	801754a <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	22ff      	movs	r2, #255	@ 0xff
 801752c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017532:	b299      	uxth	r1, r3
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017538:	b2da      	uxtb	r2, r3
 801753a:	2380      	movs	r3, #128	@ 0x80
 801753c:	045b      	lsls	r3, r3, #17
 801753e:	68f8      	ldr	r0, [r7, #12]
 8017540:	2400      	movs	r4, #0
 8017542:	9400      	str	r4, [sp, #0]
 8017544:	f001 fa8c 	bl	8018a60 <I2C_TransferConfig>
 8017548:	e011      	b.n	801756e <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801754e:	b29a      	uxth	r2, r3
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017558:	b299      	uxth	r1, r3
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801755e:	b2da      	uxtb	r2, r3
 8017560:	2380      	movs	r3, #128	@ 0x80
 8017562:	049b      	lsls	r3, r3, #18
 8017564:	68f8      	ldr	r0, [r7, #12]
 8017566:	2400      	movs	r4, #0
 8017568:	9400      	str	r4, [sp, #0]
 801756a:	f001 fa79 	bl	8018a60 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017572:	b29a      	uxth	r2, r3
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017578:	1ad3      	subs	r3, r2, r3
 801757a:	b29a      	uxth	r2, r3
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	2241      	movs	r2, #65	@ 0x41
 8017584:	5c9b      	ldrb	r3, [r3, r2]
 8017586:	b2db      	uxtb	r3, r3
 8017588:	2b22      	cmp	r3, #34	@ 0x22
 801758a:	d109      	bne.n	80175a0 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	681a      	ldr	r2, [r3, #0]
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	2180      	movs	r1, #128	@ 0x80
 8017598:	0209      	lsls	r1, r1, #8
 801759a:	430a      	orrs	r2, r1
 801759c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801759e:	e082      	b.n	80176a6 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	681a      	ldr	r2, [r3, #0]
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	2180      	movs	r1, #128	@ 0x80
 80175ac:	01c9      	lsls	r1, r1, #7
 80175ae:	430a      	orrs	r2, r1
 80175b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80175b2:	e078      	b.n	80176a6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	2140      	movs	r1, #64	@ 0x40
 80175b8:	0018      	movs	r0, r3
 80175ba:	f000 fdd9 	bl	8018170 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80175be:	e072      	b.n	80176a6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80175c0:	68bb      	ldr	r3, [r7, #8]
 80175c2:	099b      	lsrs	r3, r3, #6
 80175c4:	001a      	movs	r2, r3
 80175c6:	2301      	movs	r3, #1
 80175c8:	4013      	ands	r3, r2
 80175ca:	d05a      	beq.n	8017682 <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	099b      	lsrs	r3, r3, #6
 80175d0:	001a      	movs	r2, r3
 80175d2:	2301      	movs	r3, #1
 80175d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80175d6:	d054      	beq.n	8017682 <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	2241      	movs	r2, #65	@ 0x41
 80175dc:	5c9b      	ldrb	r3, [r3, r2]
 80175de:	b2db      	uxtb	r3, r3
 80175e0:	2b22      	cmp	r3, #34	@ 0x22
 80175e2:	d101      	bne.n	80175e8 <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 80175e4:	4b35      	ldr	r3, [pc, #212]	@ (80176bc <I2C_Mem_ISR_DMA+0x25c>)
 80175e6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175ec:	b29b      	uxth	r3, r3
 80175ee:	2bff      	cmp	r3, #255	@ 0xff
 80175f0:	d911      	bls.n	8017616 <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	22ff      	movs	r2, #255	@ 0xff
 80175f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80175fc:	b299      	uxth	r1, r3
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017602:	b2da      	uxtb	r2, r3
 8017604:	2380      	movs	r3, #128	@ 0x80
 8017606:	045c      	lsls	r4, r3, #17
 8017608:	68f8      	ldr	r0, [r7, #12]
 801760a:	697b      	ldr	r3, [r7, #20]
 801760c:	9300      	str	r3, [sp, #0]
 801760e:	0023      	movs	r3, r4
 8017610:	f001 fa26 	bl	8018a60 <I2C_TransferConfig>
 8017614:	e012      	b.n	801763c <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801761a:	b29a      	uxth	r2, r3
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017624:	b299      	uxth	r1, r3
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801762a:	b2da      	uxtb	r2, r3
 801762c:	2380      	movs	r3, #128	@ 0x80
 801762e:	049c      	lsls	r4, r3, #18
 8017630:	68f8      	ldr	r0, [r7, #12]
 8017632:	697b      	ldr	r3, [r7, #20]
 8017634:	9300      	str	r3, [sp, #0]
 8017636:	0023      	movs	r3, r4
 8017638:	f001 fa12 	bl	8018a60 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017640:	b29a      	uxth	r2, r3
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017646:	1ad3      	subs	r3, r2, r3
 8017648:	b29a      	uxth	r2, r3
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	2241      	movs	r2, #65	@ 0x41
 8017652:	5c9b      	ldrb	r3, [r3, r2]
 8017654:	b2db      	uxtb	r3, r3
 8017656:	2b22      	cmp	r3, #34	@ 0x22
 8017658:	d109      	bne.n	801766e <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	681a      	ldr	r2, [r3, #0]
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	2180      	movs	r1, #128	@ 0x80
 8017666:	0209      	lsls	r1, r1, #8
 8017668:	430a      	orrs	r2, r1
 801766a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801766c:	e01b      	b.n	80176a6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	681a      	ldr	r2, [r3, #0]
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	2180      	movs	r1, #128	@ 0x80
 801767a:	01c9      	lsls	r1, r1, #7
 801767c:	430a      	orrs	r2, r1
 801767e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017680:	e011      	b.n	80176a6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017682:	68bb      	ldr	r3, [r7, #8]
 8017684:	095b      	lsrs	r3, r3, #5
 8017686:	001a      	movs	r2, r3
 8017688:	2301      	movs	r3, #1
 801768a:	4013      	ands	r3, r2
 801768c:	d00b      	beq.n	80176a6 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	095b      	lsrs	r3, r3, #5
 8017692:	001a      	movs	r2, r3
 8017694:	2301      	movs	r3, #1
 8017696:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017698:	d005      	beq.n	80176a6 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801769a:	68ba      	ldr	r2, [r7, #8]
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	0011      	movs	r1, r2
 80176a0:	0018      	movs	r0, r3
 80176a2:	f000 fb15 	bl	8017cd0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	2240      	movs	r2, #64	@ 0x40
 80176aa:	2100      	movs	r1, #0
 80176ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80176ae:	2300      	movs	r3, #0
}
 80176b0:	0018      	movs	r0, r3
 80176b2:	46bd      	mov	sp, r7
 80176b4:	b007      	add	sp, #28
 80176b6:	bd90      	pop	{r4, r7, pc}
 80176b8:	80002000 	.word	0x80002000
 80176bc:	80002400 	.word	0x80002400

080176c0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b088      	sub	sp, #32
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	60f8      	str	r0, [r7, #12]
 80176c8:	60b9      	str	r1, [r7, #8]
 80176ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80176d0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80176d2:	2300      	movs	r3, #0
 80176d4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	2240      	movs	r2, #64	@ 0x40
 80176da:	5c9b      	ldrb	r3, [r3, r2]
 80176dc:	2b01      	cmp	r3, #1
 80176de:	d101      	bne.n	80176e4 <I2C_Slave_ISR_DMA+0x24>
 80176e0:	2302      	movs	r3, #2
 80176e2:	e0dd      	b.n	80178a0 <I2C_Slave_ISR_DMA+0x1e0>
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	2240      	movs	r2, #64	@ 0x40
 80176e8:	2101      	movs	r1, #1
 80176ea:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80176ec:	68bb      	ldr	r3, [r7, #8]
 80176ee:	095b      	lsrs	r3, r3, #5
 80176f0:	001a      	movs	r2, r3
 80176f2:	2301      	movs	r3, #1
 80176f4:	4013      	ands	r3, r2
 80176f6:	d00b      	beq.n	8017710 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	095b      	lsrs	r3, r3, #5
 80176fc:	001a      	movs	r2, r3
 80176fe:	2301      	movs	r3, #1
 8017700:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017702:	d005      	beq.n	8017710 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8017704:	68ba      	ldr	r2, [r7, #8]
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	0011      	movs	r1, r2
 801770a:	0018      	movs	r0, r3
 801770c:	f000 fbb2 	bl	8017e74 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017710:	68bb      	ldr	r3, [r7, #8]
 8017712:	091b      	lsrs	r3, r3, #4
 8017714:	001a      	movs	r2, r3
 8017716:	2301      	movs	r3, #1
 8017718:	4013      	ands	r3, r2
 801771a:	d100      	bne.n	801771e <I2C_Slave_ISR_DMA+0x5e>
 801771c:	e0a9      	b.n	8017872 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	091b      	lsrs	r3, r3, #4
 8017722:	001a      	movs	r2, r3
 8017724:	2301      	movs	r3, #1
 8017726:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017728:	d100      	bne.n	801772c <I2C_Slave_ISR_DMA+0x6c>
 801772a:	e0a2      	b.n	8017872 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	0b9b      	lsrs	r3, r3, #14
 8017730:	001a      	movs	r2, r3
 8017732:	2301      	movs	r3, #1
 8017734:	4013      	ands	r3, r2
 8017736:	d106      	bne.n	8017746 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	0bdb      	lsrs	r3, r3, #15
 801773c:	001a      	movs	r2, r3
 801773e:	2301      	movs	r3, #1
 8017740:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017742:	d100      	bne.n	8017746 <I2C_Slave_ISR_DMA+0x86>
 8017744:	e08e      	b.n	8017864 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801774a:	2b00      	cmp	r3, #0
 801774c:	d00d      	beq.n	801776a <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	0bdb      	lsrs	r3, r3, #15
 8017752:	001a      	movs	r2, r3
 8017754:	2301      	movs	r3, #1
 8017756:	4013      	ands	r3, r2
 8017758:	d007      	beq.n	801776a <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	685b      	ldr	r3, [r3, #4]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d101      	bne.n	801776a <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8017766:	2301      	movs	r3, #1
 8017768:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801776e:	2b00      	cmp	r3, #0
 8017770:	d00d      	beq.n	801778e <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	0b9b      	lsrs	r3, r3, #14
 8017776:	001a      	movs	r2, r3
 8017778:	2301      	movs	r3, #1
 801777a:	4013      	ands	r3, r2
 801777c:	d007      	beq.n	801778e <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	685b      	ldr	r3, [r3, #4]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d101      	bne.n	801778e <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 801778a:	2301      	movs	r3, #1
 801778c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 801778e:	69fb      	ldr	r3, [r7, #28]
 8017790:	2b01      	cmp	r3, #1
 8017792:	d12d      	bne.n	80177f0 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	2241      	movs	r2, #65	@ 0x41
 8017798:	5c9b      	ldrb	r3, [r3, r2]
 801779a:	b2db      	uxtb	r3, r3
 801779c:	2b28      	cmp	r3, #40	@ 0x28
 801779e:	d10b      	bne.n	80177b8 <I2C_Slave_ISR_DMA+0xf8>
 80177a0:	69ba      	ldr	r2, [r7, #24]
 80177a2:	2380      	movs	r3, #128	@ 0x80
 80177a4:	049b      	lsls	r3, r3, #18
 80177a6:	429a      	cmp	r2, r3
 80177a8:	d106      	bne.n	80177b8 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80177aa:	68ba      	ldr	r2, [r7, #8]
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	0011      	movs	r1, r2
 80177b0:	0018      	movs	r0, r3
 80177b2:	f000 fc83 	bl	80180bc <I2C_ITListenCplt>
 80177b6:	e054      	b.n	8017862 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	2241      	movs	r2, #65	@ 0x41
 80177bc:	5c9b      	ldrb	r3, [r3, r2]
 80177be:	b2db      	uxtb	r3, r3
 80177c0:	2b29      	cmp	r3, #41	@ 0x29
 80177c2:	d110      	bne.n	80177e6 <I2C_Slave_ISR_DMA+0x126>
 80177c4:	69bb      	ldr	r3, [r7, #24]
 80177c6:	4a38      	ldr	r2, [pc, #224]	@ (80178a8 <I2C_Slave_ISR_DMA+0x1e8>)
 80177c8:	4293      	cmp	r3, r2
 80177ca:	d00c      	beq.n	80177e6 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	2210      	movs	r2, #16
 80177d2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	0018      	movs	r0, r3
 80177d8:	f000 fdf5 	bl	80183c6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	0018      	movs	r0, r3
 80177e0:	f000 fa10 	bl	8017c04 <I2C_ITSlaveSeqCplt>
 80177e4:	e03d      	b.n	8017862 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	2210      	movs	r2, #16
 80177ec:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80177ee:	e03e      	b.n	801786e <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	2210      	movs	r2, #16
 80177f6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177fc:	2204      	movs	r2, #4
 80177fe:	431a      	orrs	r2, r3
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8017804:	2317      	movs	r3, #23
 8017806:	18fb      	adds	r3, r7, r3
 8017808:	68fa      	ldr	r2, [r7, #12]
 801780a:	2141      	movs	r1, #65	@ 0x41
 801780c:	5c52      	ldrb	r2, [r2, r1]
 801780e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8017810:	69bb      	ldr	r3, [r7, #24]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d004      	beq.n	8017820 <I2C_Slave_ISR_DMA+0x160>
 8017816:	69ba      	ldr	r2, [r7, #24]
 8017818:	2380      	movs	r3, #128	@ 0x80
 801781a:	045b      	lsls	r3, r3, #17
 801781c:	429a      	cmp	r2, r3
 801781e:	d126      	bne.n	801786e <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017820:	2217      	movs	r2, #23
 8017822:	18bb      	adds	r3, r7, r2
 8017824:	781b      	ldrb	r3, [r3, #0]
 8017826:	2b21      	cmp	r3, #33	@ 0x21
 8017828:	d003      	beq.n	8017832 <I2C_Slave_ISR_DMA+0x172>
 801782a:	18bb      	adds	r3, r7, r2
 801782c:	781b      	ldrb	r3, [r3, #0]
 801782e:	2b29      	cmp	r3, #41	@ 0x29
 8017830:	d103      	bne.n	801783a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	2221      	movs	r2, #33	@ 0x21
 8017836:	631a      	str	r2, [r3, #48]	@ 0x30
 8017838:	e00b      	b.n	8017852 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801783a:	2217      	movs	r2, #23
 801783c:	18bb      	adds	r3, r7, r2
 801783e:	781b      	ldrb	r3, [r3, #0]
 8017840:	2b22      	cmp	r3, #34	@ 0x22
 8017842:	d003      	beq.n	801784c <I2C_Slave_ISR_DMA+0x18c>
 8017844:	18bb      	adds	r3, r7, r2
 8017846:	781b      	ldrb	r3, [r3, #0]
 8017848:	2b2a      	cmp	r3, #42	@ 0x2a
 801784a:	d102      	bne.n	8017852 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	2222      	movs	r2, #34	@ 0x22
 8017850:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	0011      	movs	r1, r2
 801785a:	0018      	movs	r0, r3
 801785c:	f000 fc88 	bl	8018170 <I2C_ITError>
      if (treatdmanack == 1U)
 8017860:	e005      	b.n	801786e <I2C_Slave_ISR_DMA+0x1ae>
 8017862:	e004      	b.n	801786e <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	2210      	movs	r2, #16
 801786a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801786c:	e013      	b.n	8017896 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 801786e:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017870:	e011      	b.n	8017896 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017872:	68bb      	ldr	r3, [r7, #8]
 8017874:	08db      	lsrs	r3, r3, #3
 8017876:	001a      	movs	r2, r3
 8017878:	2301      	movs	r3, #1
 801787a:	4013      	ands	r3, r2
 801787c:	d00b      	beq.n	8017896 <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	08db      	lsrs	r3, r3, #3
 8017882:	001a      	movs	r2, r3
 8017884:	2301      	movs	r3, #1
 8017886:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017888:	d005      	beq.n	8017896 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801788a:	68ba      	ldr	r2, [r7, #8]
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	0011      	movs	r1, r2
 8017890:	0018      	movs	r0, r3
 8017892:	f000 f8d1 	bl	8017a38 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	2240      	movs	r2, #64	@ 0x40
 801789a:	2100      	movs	r1, #0
 801789c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801789e:	2300      	movs	r3, #0
}
 80178a0:	0018      	movs	r0, r3
 80178a2:	46bd      	mov	sp, r7
 80178a4:	b008      	add	sp, #32
 80178a6:	bd80      	pop	{r7, pc}
 80178a8:	ffff0000 	.word	0xffff0000

080178ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80178ac:	b5b0      	push	{r4, r5, r7, lr}
 80178ae:	b086      	sub	sp, #24
 80178b0:	af02      	add	r7, sp, #8
 80178b2:	60f8      	str	r0, [r7, #12]
 80178b4:	000c      	movs	r4, r1
 80178b6:	0010      	movs	r0, r2
 80178b8:	0019      	movs	r1, r3
 80178ba:	250a      	movs	r5, #10
 80178bc:	197b      	adds	r3, r7, r5
 80178be:	1c22      	adds	r2, r4, #0
 80178c0:	801a      	strh	r2, [r3, #0]
 80178c2:	2308      	movs	r3, #8
 80178c4:	18fb      	adds	r3, r7, r3
 80178c6:	1c02      	adds	r2, r0, #0
 80178c8:	801a      	strh	r2, [r3, #0]
 80178ca:	1dbb      	adds	r3, r7, #6
 80178cc:	1c0a      	adds	r2, r1, #0
 80178ce:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80178d0:	1dbb      	adds	r3, r7, #6
 80178d2:	881b      	ldrh	r3, [r3, #0]
 80178d4:	b2da      	uxtb	r2, r3
 80178d6:	2380      	movs	r3, #128	@ 0x80
 80178d8:	045c      	lsls	r4, r3, #17
 80178da:	197b      	adds	r3, r7, r5
 80178dc:	8819      	ldrh	r1, [r3, #0]
 80178de:	68f8      	ldr	r0, [r7, #12]
 80178e0:	4b23      	ldr	r3, [pc, #140]	@ (8017970 <I2C_RequestMemoryWrite+0xc4>)
 80178e2:	9300      	str	r3, [sp, #0]
 80178e4:	0023      	movs	r3, r4
 80178e6:	f001 f8bb 	bl	8018a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80178ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80178ec:	6a39      	ldr	r1, [r7, #32]
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	0018      	movs	r0, r3
 80178f2:	f000 feb1 	bl	8018658 <I2C_WaitOnTXISFlagUntilTimeout>
 80178f6:	1e03      	subs	r3, r0, #0
 80178f8:	d001      	beq.n	80178fe <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80178fa:	2301      	movs	r3, #1
 80178fc:	e033      	b.n	8017966 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80178fe:	1dbb      	adds	r3, r7, #6
 8017900:	881b      	ldrh	r3, [r3, #0]
 8017902:	2b01      	cmp	r3, #1
 8017904:	d107      	bne.n	8017916 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017906:	2308      	movs	r3, #8
 8017908:	18fb      	adds	r3, r7, r3
 801790a:	881b      	ldrh	r3, [r3, #0]
 801790c:	b2da      	uxtb	r2, r3
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	629a      	str	r2, [r3, #40]	@ 0x28
 8017914:	e019      	b.n	801794a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017916:	2308      	movs	r3, #8
 8017918:	18fb      	adds	r3, r7, r3
 801791a:	881b      	ldrh	r3, [r3, #0]
 801791c:	0a1b      	lsrs	r3, r3, #8
 801791e:	b29b      	uxth	r3, r3
 8017920:	b2da      	uxtb	r2, r3
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801792a:	6a39      	ldr	r1, [r7, #32]
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	0018      	movs	r0, r3
 8017930:	f000 fe92 	bl	8018658 <I2C_WaitOnTXISFlagUntilTimeout>
 8017934:	1e03      	subs	r3, r0, #0
 8017936:	d001      	beq.n	801793c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8017938:	2301      	movs	r3, #1
 801793a:	e014      	b.n	8017966 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801793c:	2308      	movs	r3, #8
 801793e:	18fb      	adds	r3, r7, r3
 8017940:	881b      	ldrh	r3, [r3, #0]
 8017942:	b2da      	uxtb	r2, r3
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 801794a:	6a3a      	ldr	r2, [r7, #32]
 801794c:	68f8      	ldr	r0, [r7, #12]
 801794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017950:	9300      	str	r3, [sp, #0]
 8017952:	0013      	movs	r3, r2
 8017954:	2200      	movs	r2, #0
 8017956:	2180      	movs	r1, #128	@ 0x80
 8017958:	f000 fe30 	bl	80185bc <I2C_WaitOnFlagUntilTimeout>
 801795c:	1e03      	subs	r3, r0, #0
 801795e:	d001      	beq.n	8017964 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8017960:	2301      	movs	r3, #1
 8017962:	e000      	b.n	8017966 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8017964:	2300      	movs	r3, #0
}
 8017966:	0018      	movs	r0, r3
 8017968:	46bd      	mov	sp, r7
 801796a:	b004      	add	sp, #16
 801796c:	bdb0      	pop	{r4, r5, r7, pc}
 801796e:	46c0      	nop			@ (mov r8, r8)
 8017970:	80002000 	.word	0x80002000

08017974 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8017974:	b5b0      	push	{r4, r5, r7, lr}
 8017976:	b086      	sub	sp, #24
 8017978:	af02      	add	r7, sp, #8
 801797a:	60f8      	str	r0, [r7, #12]
 801797c:	000c      	movs	r4, r1
 801797e:	0010      	movs	r0, r2
 8017980:	0019      	movs	r1, r3
 8017982:	250a      	movs	r5, #10
 8017984:	197b      	adds	r3, r7, r5
 8017986:	1c22      	adds	r2, r4, #0
 8017988:	801a      	strh	r2, [r3, #0]
 801798a:	2308      	movs	r3, #8
 801798c:	18fb      	adds	r3, r7, r3
 801798e:	1c02      	adds	r2, r0, #0
 8017990:	801a      	strh	r2, [r3, #0]
 8017992:	1dbb      	adds	r3, r7, #6
 8017994:	1c0a      	adds	r2, r1, #0
 8017996:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8017998:	1dbb      	adds	r3, r7, #6
 801799a:	881b      	ldrh	r3, [r3, #0]
 801799c:	b2da      	uxtb	r2, r3
 801799e:	197b      	adds	r3, r7, r5
 80179a0:	8819      	ldrh	r1, [r3, #0]
 80179a2:	68f8      	ldr	r0, [r7, #12]
 80179a4:	4b23      	ldr	r3, [pc, #140]	@ (8017a34 <I2C_RequestMemoryRead+0xc0>)
 80179a6:	9300      	str	r3, [sp, #0]
 80179a8:	2300      	movs	r3, #0
 80179aa:	f001 f859 	bl	8018a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80179ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179b0:	6a39      	ldr	r1, [r7, #32]
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	0018      	movs	r0, r3
 80179b6:	f000 fe4f 	bl	8018658 <I2C_WaitOnTXISFlagUntilTimeout>
 80179ba:	1e03      	subs	r3, r0, #0
 80179bc:	d001      	beq.n	80179c2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80179be:	2301      	movs	r3, #1
 80179c0:	e033      	b.n	8017a2a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80179c2:	1dbb      	adds	r3, r7, #6
 80179c4:	881b      	ldrh	r3, [r3, #0]
 80179c6:	2b01      	cmp	r3, #1
 80179c8:	d107      	bne.n	80179da <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80179ca:	2308      	movs	r3, #8
 80179cc:	18fb      	adds	r3, r7, r3
 80179ce:	881b      	ldrh	r3, [r3, #0]
 80179d0:	b2da      	uxtb	r2, r3
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80179d8:	e019      	b.n	8017a0e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80179da:	2308      	movs	r3, #8
 80179dc:	18fb      	adds	r3, r7, r3
 80179de:	881b      	ldrh	r3, [r3, #0]
 80179e0:	0a1b      	lsrs	r3, r3, #8
 80179e2:	b29b      	uxth	r3, r3
 80179e4:	b2da      	uxtb	r2, r3
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80179ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179ee:	6a39      	ldr	r1, [r7, #32]
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	0018      	movs	r0, r3
 80179f4:	f000 fe30 	bl	8018658 <I2C_WaitOnTXISFlagUntilTimeout>
 80179f8:	1e03      	subs	r3, r0, #0
 80179fa:	d001      	beq.n	8017a00 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80179fc:	2301      	movs	r3, #1
 80179fe:	e014      	b.n	8017a2a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017a00:	2308      	movs	r3, #8
 8017a02:	18fb      	adds	r3, r7, r3
 8017a04:	881b      	ldrh	r3, [r3, #0]
 8017a06:	b2da      	uxtb	r2, r3
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8017a0e:	6a3a      	ldr	r2, [r7, #32]
 8017a10:	68f8      	ldr	r0, [r7, #12]
 8017a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a14:	9300      	str	r3, [sp, #0]
 8017a16:	0013      	movs	r3, r2
 8017a18:	2200      	movs	r2, #0
 8017a1a:	2140      	movs	r1, #64	@ 0x40
 8017a1c:	f000 fdce 	bl	80185bc <I2C_WaitOnFlagUntilTimeout>
 8017a20:	1e03      	subs	r3, r0, #0
 8017a22:	d001      	beq.n	8017a28 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8017a24:	2301      	movs	r3, #1
 8017a26:	e000      	b.n	8017a2a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8017a28:	2300      	movs	r3, #0
}
 8017a2a:	0018      	movs	r0, r3
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	b004      	add	sp, #16
 8017a30:	bdb0      	pop	{r4, r5, r7, pc}
 8017a32:	46c0      	nop			@ (mov r8, r8)
 8017a34:	80002000 	.word	0x80002000

08017a38 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017a38:	b5b0      	push	{r4, r5, r7, lr}
 8017a3a:	b084      	sub	sp, #16
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
 8017a40:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	2241      	movs	r2, #65	@ 0x41
 8017a46:	5c9b      	ldrb	r3, [r3, r2]
 8017a48:	b2db      	uxtb	r3, r3
 8017a4a:	001a      	movs	r2, r3
 8017a4c:	2328      	movs	r3, #40	@ 0x28
 8017a4e:	4013      	ands	r3, r2
 8017a50:	2b28      	cmp	r3, #40	@ 0x28
 8017a52:	d000      	beq.n	8017a56 <I2C_ITAddrCplt+0x1e>
 8017a54:	e088      	b.n	8017b68 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	699b      	ldr	r3, [r3, #24]
 8017a5c:	0c1b      	lsrs	r3, r3, #16
 8017a5e:	b2da      	uxtb	r2, r3
 8017a60:	250f      	movs	r5, #15
 8017a62:	197b      	adds	r3, r7, r5
 8017a64:	2101      	movs	r1, #1
 8017a66:	400a      	ands	r2, r1
 8017a68:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	699b      	ldr	r3, [r3, #24]
 8017a70:	0c1b      	lsrs	r3, r3, #16
 8017a72:	b29a      	uxth	r2, r3
 8017a74:	200c      	movs	r0, #12
 8017a76:	183b      	adds	r3, r7, r0
 8017a78:	21fe      	movs	r1, #254	@ 0xfe
 8017a7a:	400a      	ands	r2, r1
 8017a7c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	689b      	ldr	r3, [r3, #8]
 8017a84:	b29a      	uxth	r2, r3
 8017a86:	240a      	movs	r4, #10
 8017a88:	193b      	adds	r3, r7, r4
 8017a8a:	0592      	lsls	r2, r2, #22
 8017a8c:	0d92      	lsrs	r2, r2, #22
 8017a8e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	68db      	ldr	r3, [r3, #12]
 8017a96:	b29a      	uxth	r2, r3
 8017a98:	2308      	movs	r3, #8
 8017a9a:	18fb      	adds	r3, r7, r3
 8017a9c:	21fe      	movs	r1, #254	@ 0xfe
 8017a9e:	400a      	ands	r2, r1
 8017aa0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	68db      	ldr	r3, [r3, #12]
 8017aa6:	2b02      	cmp	r3, #2
 8017aa8:	d148      	bne.n	8017b3c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8017aaa:	0021      	movs	r1, r4
 8017aac:	187b      	adds	r3, r7, r1
 8017aae:	881b      	ldrh	r3, [r3, #0]
 8017ab0:	09db      	lsrs	r3, r3, #7
 8017ab2:	b29a      	uxth	r2, r3
 8017ab4:	183b      	adds	r3, r7, r0
 8017ab6:	881b      	ldrh	r3, [r3, #0]
 8017ab8:	4053      	eors	r3, r2
 8017aba:	b29b      	uxth	r3, r3
 8017abc:	001a      	movs	r2, r3
 8017abe:	2306      	movs	r3, #6
 8017ac0:	4013      	ands	r3, r2
 8017ac2:	d120      	bne.n	8017b06 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8017ac4:	183b      	adds	r3, r7, r0
 8017ac6:	187a      	adds	r2, r7, r1
 8017ac8:	8812      	ldrh	r2, [r2, #0]
 8017aca:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017ad0:	1c5a      	adds	r2, r3, #1
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017ada:	2b02      	cmp	r3, #2
 8017adc:	d14c      	bne.n	8017b78 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	2208      	movs	r2, #8
 8017aea:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	2240      	movs	r2, #64	@ 0x40
 8017af0:	2100      	movs	r1, #0
 8017af2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017af4:	183b      	adds	r3, r7, r0
 8017af6:	881a      	ldrh	r2, [r3, #0]
 8017af8:	197b      	adds	r3, r7, r5
 8017afa:	7819      	ldrb	r1, [r3, #0]
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	0018      	movs	r0, r3
 8017b00:	f7ff f914 	bl	8016d2c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8017b04:	e038      	b.n	8017b78 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8017b06:	240c      	movs	r4, #12
 8017b08:	193b      	adds	r3, r7, r4
 8017b0a:	2208      	movs	r2, #8
 8017b0c:	18ba      	adds	r2, r7, r2
 8017b0e:	8812      	ldrh	r2, [r2, #0]
 8017b10:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017b12:	2380      	movs	r3, #128	@ 0x80
 8017b14:	021a      	lsls	r2, r3, #8
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	0011      	movs	r1, r2
 8017b1a:	0018      	movs	r0, r3
 8017b1c:	f001 f868 	bl	8018bf0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	2240      	movs	r2, #64	@ 0x40
 8017b24:	2100      	movs	r1, #0
 8017b26:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017b28:	193b      	adds	r3, r7, r4
 8017b2a:	881a      	ldrh	r2, [r3, #0]
 8017b2c:	230f      	movs	r3, #15
 8017b2e:	18fb      	adds	r3, r7, r3
 8017b30:	7819      	ldrb	r1, [r3, #0]
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	0018      	movs	r0, r3
 8017b36:	f7ff f8f9 	bl	8016d2c <HAL_I2C_AddrCallback>
}
 8017b3a:	e01d      	b.n	8017b78 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017b3c:	2380      	movs	r3, #128	@ 0x80
 8017b3e:	021a      	lsls	r2, r3, #8
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	0011      	movs	r1, r2
 8017b44:	0018      	movs	r0, r3
 8017b46:	f001 f853 	bl	8018bf0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	2240      	movs	r2, #64	@ 0x40
 8017b4e:	2100      	movs	r1, #0
 8017b50:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017b52:	230c      	movs	r3, #12
 8017b54:	18fb      	adds	r3, r7, r3
 8017b56:	881a      	ldrh	r2, [r3, #0]
 8017b58:	230f      	movs	r3, #15
 8017b5a:	18fb      	adds	r3, r7, r3
 8017b5c:	7819      	ldrb	r1, [r3, #0]
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	0018      	movs	r0, r3
 8017b62:	f7ff f8e3 	bl	8016d2c <HAL_I2C_AddrCallback>
}
 8017b66:	e007      	b.n	8017b78 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	2208      	movs	r2, #8
 8017b6e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	2240      	movs	r2, #64	@ 0x40
 8017b74:	2100      	movs	r1, #0
 8017b76:	5499      	strb	r1, [r3, r2]
}
 8017b78:	46c0      	nop			@ (mov r8, r8)
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	b004      	add	sp, #16
 8017b7e:	bdb0      	pop	{r4, r5, r7, pc}

08017b80 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b082      	sub	sp, #8
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	2242      	movs	r2, #66	@ 0x42
 8017b8c:	2100      	movs	r1, #0
 8017b8e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	2241      	movs	r2, #65	@ 0x41
 8017b94:	5c9b      	ldrb	r3, [r3, r2]
 8017b96:	b2db      	uxtb	r3, r3
 8017b98:	2b21      	cmp	r3, #33	@ 0x21
 8017b9a:	d117      	bne.n	8017bcc <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	2241      	movs	r2, #65	@ 0x41
 8017ba0:	2120      	movs	r1, #32
 8017ba2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	2211      	movs	r2, #17
 8017ba8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	2200      	movs	r2, #0
 8017bae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	2101      	movs	r1, #1
 8017bb4:	0018      	movs	r0, r3
 8017bb6:	f001 f81b 	bl	8018bf0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	2240      	movs	r2, #64	@ 0x40
 8017bbe:	2100      	movs	r1, #0
 8017bc0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	0018      	movs	r0, r3
 8017bc6:	f7ff f891 	bl	8016cec <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017bca:	e016      	b.n	8017bfa <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	2241      	movs	r2, #65	@ 0x41
 8017bd0:	2120      	movs	r1, #32
 8017bd2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	2212      	movs	r2, #18
 8017bd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	2200      	movs	r2, #0
 8017bde:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	2102      	movs	r1, #2
 8017be4:	0018      	movs	r0, r3
 8017be6:	f001 f803 	bl	8018bf0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	2240      	movs	r2, #64	@ 0x40
 8017bee:	2100      	movs	r1, #0
 8017bf0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	0018      	movs	r0, r3
 8017bf6:	f7ff f881 	bl	8016cfc <HAL_I2C_MasterRxCpltCallback>
}
 8017bfa:	46c0      	nop			@ (mov r8, r8)
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	b002      	add	sp, #8
 8017c00:	bd80      	pop	{r7, pc}
	...

08017c04 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017c04:	b580      	push	{r7, lr}
 8017c06:	b084      	sub	sp, #16
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	2242      	movs	r2, #66	@ 0x42
 8017c18:	2100      	movs	r1, #0
 8017c1a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	0b9b      	lsrs	r3, r3, #14
 8017c20:	001a      	movs	r2, r3
 8017c22:	2301      	movs	r3, #1
 8017c24:	4013      	ands	r3, r2
 8017c26:	d008      	beq.n	8017c3a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	681a      	ldr	r2, [r3, #0]
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	4925      	ldr	r1, [pc, #148]	@ (8017cc8 <I2C_ITSlaveSeqCplt+0xc4>)
 8017c34:	400a      	ands	r2, r1
 8017c36:	601a      	str	r2, [r3, #0]
 8017c38:	e00d      	b.n	8017c56 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	0bdb      	lsrs	r3, r3, #15
 8017c3e:	001a      	movs	r2, r3
 8017c40:	2301      	movs	r3, #1
 8017c42:	4013      	ands	r3, r2
 8017c44:	d007      	beq.n	8017c56 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	681a      	ldr	r2, [r3, #0]
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	491e      	ldr	r1, [pc, #120]	@ (8017ccc <I2C_ITSlaveSeqCplt+0xc8>)
 8017c52:	400a      	ands	r2, r1
 8017c54:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	2241      	movs	r2, #65	@ 0x41
 8017c5a:	5c9b      	ldrb	r3, [r3, r2]
 8017c5c:	b2db      	uxtb	r3, r3
 8017c5e:	2b29      	cmp	r3, #41	@ 0x29
 8017c60:	d114      	bne.n	8017c8c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	2241      	movs	r2, #65	@ 0x41
 8017c66:	2128      	movs	r1, #40	@ 0x28
 8017c68:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	2221      	movs	r2, #33	@ 0x21
 8017c6e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	2101      	movs	r1, #1
 8017c74:	0018      	movs	r0, r3
 8017c76:	f000 ffbb 	bl	8018bf0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	2240      	movs	r2, #64	@ 0x40
 8017c7e:	2100      	movs	r1, #0
 8017c80:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	0018      	movs	r0, r3
 8017c86:	f7ff f841 	bl	8016d0c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017c8a:	e019      	b.n	8017cc0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	2241      	movs	r2, #65	@ 0x41
 8017c90:	5c9b      	ldrb	r3, [r3, r2]
 8017c92:	b2db      	uxtb	r3, r3
 8017c94:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c96:	d113      	bne.n	8017cc0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	2241      	movs	r2, #65	@ 0x41
 8017c9c:	2128      	movs	r1, #40	@ 0x28
 8017c9e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	2222      	movs	r2, #34	@ 0x22
 8017ca4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	2102      	movs	r1, #2
 8017caa:	0018      	movs	r0, r3
 8017cac:	f000 ffa0 	bl	8018bf0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2240      	movs	r2, #64	@ 0x40
 8017cb4:	2100      	movs	r1, #0
 8017cb6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	0018      	movs	r0, r3
 8017cbc:	f7ff f82e 	bl	8016d1c <HAL_I2C_SlaveRxCpltCallback>
}
 8017cc0:	46c0      	nop			@ (mov r8, r8)
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	b004      	add	sp, #16
 8017cc6:	bd80      	pop	{r7, pc}
 8017cc8:	ffffbfff 	.word	0xffffbfff
 8017ccc:	ffff7fff 	.word	0xffff7fff

08017cd0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b086      	sub	sp, #24
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
 8017cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8017cda:	683b      	ldr	r3, [r7, #0]
 8017cdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	2220      	movs	r2, #32
 8017ce4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	2241      	movs	r2, #65	@ 0x41
 8017cea:	5c9b      	ldrb	r3, [r3, r2]
 8017cec:	b2db      	uxtb	r3, r3
 8017cee:	2b21      	cmp	r3, #33	@ 0x21
 8017cf0:	d108      	bne.n	8017d04 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	2101      	movs	r1, #1
 8017cf6:	0018      	movs	r0, r3
 8017cf8:	f000 ff7a 	bl	8018bf0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	2211      	movs	r2, #17
 8017d00:	631a      	str	r2, [r3, #48]	@ 0x30
 8017d02:	e00d      	b.n	8017d20 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	2241      	movs	r2, #65	@ 0x41
 8017d08:	5c9b      	ldrb	r3, [r3, r2]
 8017d0a:	b2db      	uxtb	r3, r3
 8017d0c:	2b22      	cmp	r3, #34	@ 0x22
 8017d0e:	d107      	bne.n	8017d20 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	2102      	movs	r1, #2
 8017d14:	0018      	movs	r0, r3
 8017d16:	f000 ff6b 	bl	8018bf0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2212      	movs	r2, #18
 8017d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	685a      	ldr	r2, [r3, #4]
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	4950      	ldr	r1, [pc, #320]	@ (8017e6c <I2C_ITMasterCplt+0x19c>)
 8017d2c:	400a      	ands	r2, r1
 8017d2e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	2200      	movs	r2, #0
 8017d34:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	4a4d      	ldr	r2, [pc, #308]	@ (8017e70 <I2C_ITMasterCplt+0x1a0>)
 8017d3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	091b      	lsrs	r3, r3, #4
 8017d40:	001a      	movs	r2, r3
 8017d42:	2301      	movs	r3, #1
 8017d44:	4013      	ands	r3, r2
 8017d46:	d009      	beq.n	8017d5c <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	2210      	movs	r2, #16
 8017d4e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017d54:	2204      	movs	r2, #4
 8017d56:	431a      	orrs	r2, r3
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	2241      	movs	r2, #65	@ 0x41
 8017d60:	5c9b      	ldrb	r3, [r3, r2]
 8017d62:	b2db      	uxtb	r3, r3
 8017d64:	2b60      	cmp	r3, #96	@ 0x60
 8017d66:	d10b      	bne.n	8017d80 <I2C_ITMasterCplt+0xb0>
 8017d68:	697b      	ldr	r3, [r7, #20]
 8017d6a:	089b      	lsrs	r3, r3, #2
 8017d6c:	001a      	movs	r2, r3
 8017d6e:	2301      	movs	r3, #1
 8017d70:	4013      	ands	r3, r2
 8017d72:	d005      	beq.n	8017d80 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d7a:	b2db      	uxtb	r3, r3
 8017d7c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8017d7e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	0018      	movs	r0, r3
 8017d84:	f000 fb1f 	bl	80183c6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017d8c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	2241      	movs	r2, #65	@ 0x41
 8017d92:	5c9b      	ldrb	r3, [r3, r2]
 8017d94:	b2db      	uxtb	r3, r3
 8017d96:	2b60      	cmp	r3, #96	@ 0x60
 8017d98:	d002      	beq.n	8017da0 <I2C_ITMasterCplt+0xd0>
 8017d9a:	693b      	ldr	r3, [r7, #16]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d007      	beq.n	8017db0 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	0011      	movs	r1, r2
 8017da8:	0018      	movs	r0, r3
 8017daa:	f000 f9e1 	bl	8018170 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017dae:	e058      	b.n	8017e62 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	2241      	movs	r2, #65	@ 0x41
 8017db4:	5c9b      	ldrb	r3, [r3, r2]
 8017db6:	b2db      	uxtb	r3, r3
 8017db8:	2b21      	cmp	r3, #33	@ 0x21
 8017dba:	d126      	bne.n	8017e0a <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	2241      	movs	r2, #65	@ 0x41
 8017dc0:	2120      	movs	r1, #32
 8017dc2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	2242      	movs	r2, #66	@ 0x42
 8017dce:	5c9b      	ldrb	r3, [r3, r2]
 8017dd0:	b2db      	uxtb	r3, r3
 8017dd2:	2b40      	cmp	r3, #64	@ 0x40
 8017dd4:	d10c      	bne.n	8017df0 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	2242      	movs	r2, #66	@ 0x42
 8017dda:	2100      	movs	r1, #0
 8017ddc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	2240      	movs	r2, #64	@ 0x40
 8017de2:	2100      	movs	r1, #0
 8017de4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	0018      	movs	r0, r3
 8017dea:	f7fe ffb7 	bl	8016d5c <HAL_I2C_MemTxCpltCallback>
}
 8017dee:	e038      	b.n	8017e62 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2242      	movs	r2, #66	@ 0x42
 8017df4:	2100      	movs	r1, #0
 8017df6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	2240      	movs	r2, #64	@ 0x40
 8017dfc:	2100      	movs	r1, #0
 8017dfe:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	0018      	movs	r0, r3
 8017e04:	f7fe ff72 	bl	8016cec <HAL_I2C_MasterTxCpltCallback>
}
 8017e08:	e02b      	b.n	8017e62 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	2241      	movs	r2, #65	@ 0x41
 8017e0e:	5c9b      	ldrb	r3, [r3, r2]
 8017e10:	b2db      	uxtb	r3, r3
 8017e12:	2b22      	cmp	r3, #34	@ 0x22
 8017e14:	d125      	bne.n	8017e62 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	2241      	movs	r2, #65	@ 0x41
 8017e1a:	2120      	movs	r1, #32
 8017e1c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	2200      	movs	r2, #0
 8017e22:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	2242      	movs	r2, #66	@ 0x42
 8017e28:	5c9b      	ldrb	r3, [r3, r2]
 8017e2a:	b2db      	uxtb	r3, r3
 8017e2c:	2b40      	cmp	r3, #64	@ 0x40
 8017e2e:	d10c      	bne.n	8017e4a <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	2242      	movs	r2, #66	@ 0x42
 8017e34:	2100      	movs	r1, #0
 8017e36:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	2240      	movs	r2, #64	@ 0x40
 8017e3c:	2100      	movs	r1, #0
 8017e3e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	0018      	movs	r0, r3
 8017e44:	f7fe ff92 	bl	8016d6c <HAL_I2C_MemRxCpltCallback>
}
 8017e48:	e00b      	b.n	8017e62 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	2242      	movs	r2, #66	@ 0x42
 8017e4e:	2100      	movs	r1, #0
 8017e50:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	2240      	movs	r2, #64	@ 0x40
 8017e56:	2100      	movs	r1, #0
 8017e58:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	0018      	movs	r0, r3
 8017e5e:	f7fe ff4d 	bl	8016cfc <HAL_I2C_MasterRxCpltCallback>
}
 8017e62:	46c0      	nop			@ (mov r8, r8)
 8017e64:	46bd      	mov	sp, r7
 8017e66:	b006      	add	sp, #24
 8017e68:	bd80      	pop	{r7, pc}
 8017e6a:	46c0      	nop			@ (mov r8, r8)
 8017e6c:	fe00e800 	.word	0xfe00e800
 8017e70:	ffff0000 	.word	0xffff0000

08017e74 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b086      	sub	sp, #24
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
 8017e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8017e86:	683b      	ldr	r3, [r7, #0]
 8017e88:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8017e8a:	200f      	movs	r0, #15
 8017e8c:	183b      	adds	r3, r7, r0
 8017e8e:	687a      	ldr	r2, [r7, #4]
 8017e90:	2141      	movs	r1, #65	@ 0x41
 8017e92:	5c52      	ldrb	r2, [r2, r1]
 8017e94:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	2220      	movs	r2, #32
 8017e9c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017e9e:	183b      	adds	r3, r7, r0
 8017ea0:	781b      	ldrb	r3, [r3, #0]
 8017ea2:	2b21      	cmp	r3, #33	@ 0x21
 8017ea4:	d003      	beq.n	8017eae <I2C_ITSlaveCplt+0x3a>
 8017ea6:	183b      	adds	r3, r7, r0
 8017ea8:	781b      	ldrb	r3, [r3, #0]
 8017eaa:	2b29      	cmp	r3, #41	@ 0x29
 8017eac:	d109      	bne.n	8017ec2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8017eae:	4a7d      	ldr	r2, [pc, #500]	@ (80180a4 <I2C_ITSlaveCplt+0x230>)
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	0011      	movs	r1, r2
 8017eb4:	0018      	movs	r0, r3
 8017eb6:	f000 fe9b 	bl	8018bf0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	2221      	movs	r2, #33	@ 0x21
 8017ebe:	631a      	str	r2, [r3, #48]	@ 0x30
 8017ec0:	e011      	b.n	8017ee6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017ec2:	220f      	movs	r2, #15
 8017ec4:	18bb      	adds	r3, r7, r2
 8017ec6:	781b      	ldrb	r3, [r3, #0]
 8017ec8:	2b22      	cmp	r3, #34	@ 0x22
 8017eca:	d003      	beq.n	8017ed4 <I2C_ITSlaveCplt+0x60>
 8017ecc:	18bb      	adds	r3, r7, r2
 8017ece:	781b      	ldrb	r3, [r3, #0]
 8017ed0:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ed2:	d108      	bne.n	8017ee6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8017ed4:	4a74      	ldr	r2, [pc, #464]	@ (80180a8 <I2C_ITSlaveCplt+0x234>)
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	0011      	movs	r1, r2
 8017eda:	0018      	movs	r0, r3
 8017edc:	f000 fe88 	bl	8018bf0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	2222      	movs	r2, #34	@ 0x22
 8017ee4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	685a      	ldr	r2, [r3, #4]
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	2180      	movs	r1, #128	@ 0x80
 8017ef2:	0209      	lsls	r1, r1, #8
 8017ef4:	430a      	orrs	r2, r1
 8017ef6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	685a      	ldr	r2, [r3, #4]
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	496a      	ldr	r1, [pc, #424]	@ (80180ac <I2C_ITSlaveCplt+0x238>)
 8017f04:	400a      	ands	r2, r1
 8017f06:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	0018      	movs	r0, r3
 8017f0c:	f000 fa5b 	bl	80183c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017f10:	693b      	ldr	r3, [r7, #16]
 8017f12:	0b9b      	lsrs	r3, r3, #14
 8017f14:	001a      	movs	r2, r3
 8017f16:	2301      	movs	r3, #1
 8017f18:	4013      	ands	r3, r2
 8017f1a:	d013      	beq.n	8017f44 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	681a      	ldr	r2, [r3, #0]
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	4962      	ldr	r1, [pc, #392]	@ (80180b0 <I2C_ITSlaveCplt+0x23c>)
 8017f28:	400a      	ands	r2, r1
 8017f2a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d020      	beq.n	8017f76 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	b29a      	uxth	r2, r3
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017f42:	e018      	b.n	8017f76 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017f44:	693b      	ldr	r3, [r7, #16]
 8017f46:	0bdb      	lsrs	r3, r3, #15
 8017f48:	001a      	movs	r2, r3
 8017f4a:	2301      	movs	r3, #1
 8017f4c:	4013      	ands	r3, r2
 8017f4e:	d012      	beq.n	8017f76 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	681a      	ldr	r2, [r3, #0]
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	4956      	ldr	r1, [pc, #344]	@ (80180b4 <I2C_ITSlaveCplt+0x240>)
 8017f5c:	400a      	ands	r2, r1
 8017f5e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d006      	beq.n	8017f76 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	685b      	ldr	r3, [r3, #4]
 8017f70:	b29a      	uxth	r2, r3
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8017f76:	697b      	ldr	r3, [r7, #20]
 8017f78:	089b      	lsrs	r3, r3, #2
 8017f7a:	001a      	movs	r2, r3
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	4013      	ands	r3, r2
 8017f80:	d020      	beq.n	8017fc4 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8017f82:	697b      	ldr	r3, [r7, #20]
 8017f84:	2204      	movs	r2, #4
 8017f86:	4393      	bics	r3, r2
 8017f88:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f94:	b2d2      	uxtb	r2, r2
 8017f96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f9c:	1c5a      	adds	r2, r3, #1
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d00c      	beq.n	8017fc4 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017fae:	3b01      	subs	r3, #1
 8017fb0:	b29a      	uxth	r2, r3
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017fba:	b29b      	uxth	r3, r3
 8017fbc:	3b01      	subs	r3, #1
 8017fbe:	b29a      	uxth	r2, r3
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017fc8:	b29b      	uxth	r3, r3
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d005      	beq.n	8017fda <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017fd2:	2204      	movs	r2, #4
 8017fd4:	431a      	orrs	r2, r3
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	2242      	movs	r2, #66	@ 0x42
 8017fde:	2100      	movs	r1, #0
 8017fe0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d013      	beq.n	8018018 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	0011      	movs	r1, r2
 8017ff8:	0018      	movs	r0, r3
 8017ffa:	f000 f8b9 	bl	8018170 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	2241      	movs	r2, #65	@ 0x41
 8018002:	5c9b      	ldrb	r3, [r3, r2]
 8018004:	b2db      	uxtb	r3, r3
 8018006:	2b28      	cmp	r3, #40	@ 0x28
 8018008:	d147      	bne.n	801809a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801800a:	697a      	ldr	r2, [r7, #20]
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	0011      	movs	r1, r2
 8018010:	0018      	movs	r0, r3
 8018012:	f000 f853 	bl	80180bc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8018016:	e040      	b.n	801809a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801801c:	4a26      	ldr	r2, [pc, #152]	@ (80180b8 <I2C_ITSlaveCplt+0x244>)
 801801e:	4293      	cmp	r3, r2
 8018020:	d016      	beq.n	8018050 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	0018      	movs	r0, r3
 8018026:	f7ff fded 	bl	8017c04 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	4a22      	ldr	r2, [pc, #136]	@ (80180b8 <I2C_ITSlaveCplt+0x244>)
 801802e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	2241      	movs	r2, #65	@ 0x41
 8018034:	2120      	movs	r1, #32
 8018036:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	2200      	movs	r2, #0
 801803c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	2240      	movs	r2, #64	@ 0x40
 8018042:	2100      	movs	r1, #0
 8018044:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	0018      	movs	r0, r3
 801804a:	f7fe fe7f 	bl	8016d4c <HAL_I2C_ListenCpltCallback>
}
 801804e:	e024      	b.n	801809a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	2241      	movs	r2, #65	@ 0x41
 8018054:	5c9b      	ldrb	r3, [r3, r2]
 8018056:	b2db      	uxtb	r3, r3
 8018058:	2b22      	cmp	r3, #34	@ 0x22
 801805a:	d10f      	bne.n	801807c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	2241      	movs	r2, #65	@ 0x41
 8018060:	2120      	movs	r1, #32
 8018062:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	2200      	movs	r2, #0
 8018068:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	2240      	movs	r2, #64	@ 0x40
 801806e:	2100      	movs	r1, #0
 8018070:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	0018      	movs	r0, r3
 8018076:	f7fe fe51 	bl	8016d1c <HAL_I2C_SlaveRxCpltCallback>
}
 801807a:	e00e      	b.n	801809a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2241      	movs	r2, #65	@ 0x41
 8018080:	2120      	movs	r1, #32
 8018082:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	2200      	movs	r2, #0
 8018088:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	2240      	movs	r2, #64	@ 0x40
 801808e:	2100      	movs	r1, #0
 8018090:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	0018      	movs	r0, r3
 8018096:	f7fe fe39 	bl	8016d0c <HAL_I2C_SlaveTxCpltCallback>
}
 801809a:	46c0      	nop			@ (mov r8, r8)
 801809c:	46bd      	mov	sp, r7
 801809e:	b006      	add	sp, #24
 80180a0:	bd80      	pop	{r7, pc}
 80180a2:	46c0      	nop			@ (mov r8, r8)
 80180a4:	00008001 	.word	0x00008001
 80180a8:	00008002 	.word	0x00008002
 80180ac:	fe00e800 	.word	0xfe00e800
 80180b0:	ffffbfff 	.word	0xffffbfff
 80180b4:	ffff7fff 	.word	0xffff7fff
 80180b8:	ffff0000 	.word	0xffff0000

080180bc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b082      	sub	sp, #8
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
 80180c4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	4a27      	ldr	r2, [pc, #156]	@ (8018168 <I2C_ITListenCplt+0xac>)
 80180ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	2200      	movs	r2, #0
 80180d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	2241      	movs	r2, #65	@ 0x41
 80180d6:	2120      	movs	r1, #32
 80180d8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	2242      	movs	r2, #66	@ 0x42
 80180de:	2100      	movs	r1, #0
 80180e0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2200      	movs	r2, #0
 80180e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80180e8:	683b      	ldr	r3, [r7, #0]
 80180ea:	089b      	lsrs	r3, r3, #2
 80180ec:	001a      	movs	r2, r3
 80180ee:	2301      	movs	r3, #1
 80180f0:	4013      	ands	r3, r2
 80180f2:	d022      	beq.n	801813a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180fe:	b2d2      	uxtb	r2, r2
 8018100:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018106:	1c5a      	adds	r2, r3, #1
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018110:	2b00      	cmp	r3, #0
 8018112:	d012      	beq.n	801813a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018118:	3b01      	subs	r3, #1
 801811a:	b29a      	uxth	r2, r3
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018124:	b29b      	uxth	r3, r3
 8018126:	3b01      	subs	r3, #1
 8018128:	b29a      	uxth	r2, r3
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018132:	2204      	movs	r2, #4
 8018134:	431a      	orrs	r2, r3
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801813a:	4a0c      	ldr	r2, [pc, #48]	@ (801816c <I2C_ITListenCplt+0xb0>)
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	0011      	movs	r1, r2
 8018140:	0018      	movs	r0, r3
 8018142:	f000 fd55 	bl	8018bf0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	2210      	movs	r2, #16
 801814c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	2240      	movs	r2, #64	@ 0x40
 8018152:	2100      	movs	r1, #0
 8018154:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	0018      	movs	r0, r3
 801815a:	f7fe fdf7 	bl	8016d4c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801815e:	46c0      	nop			@ (mov r8, r8)
 8018160:	46bd      	mov	sp, r7
 8018162:	b002      	add	sp, #8
 8018164:	bd80      	pop	{r7, pc}
 8018166:	46c0      	nop			@ (mov r8, r8)
 8018168:	ffff0000 	.word	0xffff0000
 801816c:	00008003 	.word	0x00008003

08018170 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b084      	sub	sp, #16
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
 8018178:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801817a:	200f      	movs	r0, #15
 801817c:	183b      	adds	r3, r7, r0
 801817e:	687a      	ldr	r2, [r7, #4]
 8018180:	2141      	movs	r1, #65	@ 0x41
 8018182:	5c52      	ldrb	r2, [r2, r1]
 8018184:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	2242      	movs	r2, #66	@ 0x42
 801818a:	2100      	movs	r1, #0
 801818c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	4a72      	ldr	r2, [pc, #456]	@ (801835c <I2C_ITError+0x1ec>)
 8018192:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	2200      	movs	r2, #0
 8018198:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801819e:	683b      	ldr	r3, [r7, #0]
 80181a0:	431a      	orrs	r2, r3
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80181a6:	183b      	adds	r3, r7, r0
 80181a8:	781b      	ldrb	r3, [r3, #0]
 80181aa:	2b28      	cmp	r3, #40	@ 0x28
 80181ac:	d007      	beq.n	80181be <I2C_ITError+0x4e>
 80181ae:	183b      	adds	r3, r7, r0
 80181b0:	781b      	ldrb	r3, [r3, #0]
 80181b2:	2b29      	cmp	r3, #41	@ 0x29
 80181b4:	d003      	beq.n	80181be <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80181b6:	183b      	adds	r3, r7, r0
 80181b8:	781b      	ldrb	r3, [r3, #0]
 80181ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80181bc:	d10c      	bne.n	80181d8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	2103      	movs	r1, #3
 80181c2:	0018      	movs	r0, r3
 80181c4:	f000 fd14 	bl	8018bf0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	2241      	movs	r2, #65	@ 0x41
 80181cc:	2128      	movs	r1, #40	@ 0x28
 80181ce:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	4a63      	ldr	r2, [pc, #396]	@ (8018360 <I2C_ITError+0x1f0>)
 80181d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80181d6:	e032      	b.n	801823e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80181d8:	4a62      	ldr	r2, [pc, #392]	@ (8018364 <I2C_ITError+0x1f4>)
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	0011      	movs	r1, r2
 80181de:	0018      	movs	r0, r3
 80181e0:	f000 fd06 	bl	8018bf0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	0018      	movs	r0, r3
 80181e8:	f000 f8ed 	bl	80183c6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	2241      	movs	r2, #65	@ 0x41
 80181f0:	5c9b      	ldrb	r3, [r3, r2]
 80181f2:	b2db      	uxtb	r3, r3
 80181f4:	2b60      	cmp	r3, #96	@ 0x60
 80181f6:	d01f      	beq.n	8018238 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	2241      	movs	r2, #65	@ 0x41
 80181fc:	2120      	movs	r1, #32
 80181fe:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	699b      	ldr	r3, [r3, #24]
 8018206:	2220      	movs	r2, #32
 8018208:	4013      	ands	r3, r2
 801820a:	2b20      	cmp	r3, #32
 801820c:	d114      	bne.n	8018238 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	699b      	ldr	r3, [r3, #24]
 8018214:	2210      	movs	r2, #16
 8018216:	4013      	ands	r3, r2
 8018218:	2b10      	cmp	r3, #16
 801821a:	d109      	bne.n	8018230 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	2210      	movs	r2, #16
 8018222:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018228:	2204      	movs	r2, #4
 801822a:	431a      	orrs	r2, r3
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	2220      	movs	r2, #32
 8018236:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	2200      	movs	r2, #0
 801823c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018242:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018248:	2b00      	cmp	r3, #0
 801824a:	d03b      	beq.n	80182c4 <I2C_ITError+0x154>
 801824c:	68bb      	ldr	r3, [r7, #8]
 801824e:	2b11      	cmp	r3, #17
 8018250:	d002      	beq.n	8018258 <I2C_ITError+0xe8>
 8018252:	68bb      	ldr	r3, [r7, #8]
 8018254:	2b21      	cmp	r3, #33	@ 0x21
 8018256:	d135      	bne.n	80182c4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	681a      	ldr	r2, [r3, #0]
 801825e:	2380      	movs	r3, #128	@ 0x80
 8018260:	01db      	lsls	r3, r3, #7
 8018262:	401a      	ands	r2, r3
 8018264:	2380      	movs	r3, #128	@ 0x80
 8018266:	01db      	lsls	r3, r3, #7
 8018268:	429a      	cmp	r2, r3
 801826a:	d107      	bne.n	801827c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	681a      	ldr	r2, [r3, #0]
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	493c      	ldr	r1, [pc, #240]	@ (8018368 <I2C_ITError+0x1f8>)
 8018278:	400a      	ands	r2, r1
 801827a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018280:	0018      	movs	r0, r3
 8018282:	f7fd f9c6 	bl	8015612 <HAL_DMA_GetState>
 8018286:	0003      	movs	r3, r0
 8018288:	2b01      	cmp	r3, #1
 801828a:	d016      	beq.n	80182ba <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018290:	4a36      	ldr	r2, [pc, #216]	@ (801836c <I2C_ITError+0x1fc>)
 8018292:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	2240      	movs	r2, #64	@ 0x40
 8018298:	2100      	movs	r1, #0
 801829a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182a0:	0018      	movs	r0, r3
 80182a2:	f7fd f8c1 	bl	8015428 <HAL_DMA_Abort_IT>
 80182a6:	1e03      	subs	r3, r0, #0
 80182a8:	d051      	beq.n	801834e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182b4:	0018      	movs	r0, r3
 80182b6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80182b8:	e049      	b.n	801834e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	0018      	movs	r0, r3
 80182be:	f000 f859 	bl	8018374 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80182c2:	e044      	b.n	801834e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d03b      	beq.n	8018344 <I2C_ITError+0x1d4>
 80182cc:	68bb      	ldr	r3, [r7, #8]
 80182ce:	2b12      	cmp	r3, #18
 80182d0:	d002      	beq.n	80182d8 <I2C_ITError+0x168>
 80182d2:	68bb      	ldr	r3, [r7, #8]
 80182d4:	2b22      	cmp	r3, #34	@ 0x22
 80182d6:	d135      	bne.n	8018344 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	681a      	ldr	r2, [r3, #0]
 80182de:	2380      	movs	r3, #128	@ 0x80
 80182e0:	021b      	lsls	r3, r3, #8
 80182e2:	401a      	ands	r2, r3
 80182e4:	2380      	movs	r3, #128	@ 0x80
 80182e6:	021b      	lsls	r3, r3, #8
 80182e8:	429a      	cmp	r2, r3
 80182ea:	d107      	bne.n	80182fc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	681a      	ldr	r2, [r3, #0]
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	491e      	ldr	r1, [pc, #120]	@ (8018370 <I2C_ITError+0x200>)
 80182f8:	400a      	ands	r2, r1
 80182fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018300:	0018      	movs	r0, r3
 8018302:	f7fd f986 	bl	8015612 <HAL_DMA_GetState>
 8018306:	0003      	movs	r3, r0
 8018308:	2b01      	cmp	r3, #1
 801830a:	d016      	beq.n	801833a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018310:	4a16      	ldr	r2, [pc, #88]	@ (801836c <I2C_ITError+0x1fc>)
 8018312:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	2240      	movs	r2, #64	@ 0x40
 8018318:	2100      	movs	r1, #0
 801831a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018320:	0018      	movs	r0, r3
 8018322:	f7fd f881 	bl	8015428 <HAL_DMA_Abort_IT>
 8018326:	1e03      	subs	r3, r0, #0
 8018328:	d013      	beq.n	8018352 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801832e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018334:	0018      	movs	r0, r3
 8018336:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018338:	e00b      	b.n	8018352 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	0018      	movs	r0, r3
 801833e:	f000 f819 	bl	8018374 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018342:	e006      	b.n	8018352 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	0018      	movs	r0, r3
 8018348:	f000 f814 	bl	8018374 <I2C_TreatErrorCallback>
  }
}
 801834c:	e002      	b.n	8018354 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801834e:	46c0      	nop			@ (mov r8, r8)
 8018350:	e000      	b.n	8018354 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018352:	46c0      	nop			@ (mov r8, r8)
}
 8018354:	46c0      	nop			@ (mov r8, r8)
 8018356:	46bd      	mov	sp, r7
 8018358:	b004      	add	sp, #16
 801835a:	bd80      	pop	{r7, pc}
 801835c:	ffff0000 	.word	0xffff0000
 8018360:	08017021 	.word	0x08017021
 8018364:	00008003 	.word	0x00008003
 8018368:	ffffbfff 	.word	0xffffbfff
 801836c:	0801857f 	.word	0x0801857f
 8018370:	ffff7fff 	.word	0xffff7fff

08018374 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8018374:	b580      	push	{r7, lr}
 8018376:	b082      	sub	sp, #8
 8018378:	af00      	add	r7, sp, #0
 801837a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	2241      	movs	r2, #65	@ 0x41
 8018380:	5c9b      	ldrb	r3, [r3, r2]
 8018382:	b2db      	uxtb	r3, r3
 8018384:	2b60      	cmp	r3, #96	@ 0x60
 8018386:	d10f      	bne.n	80183a8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	2241      	movs	r2, #65	@ 0x41
 801838c:	2120      	movs	r1, #32
 801838e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	2200      	movs	r2, #0
 8018394:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	2240      	movs	r2, #64	@ 0x40
 801839a:	2100      	movs	r1, #0
 801839c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	0018      	movs	r0, r3
 80183a2:	f7fe fcf3 	bl	8016d8c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80183a6:	e00a      	b.n	80183be <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	2200      	movs	r2, #0
 80183ac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	2240      	movs	r2, #64	@ 0x40
 80183b2:	2100      	movs	r1, #0
 80183b4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	0018      	movs	r0, r3
 80183ba:	f7fe fcdf 	bl	8016d7c <HAL_I2C_ErrorCallback>
}
 80183be:	46c0      	nop			@ (mov r8, r8)
 80183c0:	46bd      	mov	sp, r7
 80183c2:	b002      	add	sp, #8
 80183c4:	bd80      	pop	{r7, pc}

080183c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80183c6:	b580      	push	{r7, lr}
 80183c8:	b082      	sub	sp, #8
 80183ca:	af00      	add	r7, sp, #0
 80183cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	699b      	ldr	r3, [r3, #24]
 80183d4:	2202      	movs	r2, #2
 80183d6:	4013      	ands	r3, r2
 80183d8:	2b02      	cmp	r3, #2
 80183da:	d103      	bne.n	80183e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	2200      	movs	r2, #0
 80183e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	699b      	ldr	r3, [r3, #24]
 80183ea:	2201      	movs	r2, #1
 80183ec:	4013      	ands	r3, r2
 80183ee:	2b01      	cmp	r3, #1
 80183f0:	d007      	beq.n	8018402 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	699a      	ldr	r2, [r3, #24]
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	2101      	movs	r1, #1
 80183fe:	430a      	orrs	r2, r1
 8018400:	619a      	str	r2, [r3, #24]
  }
}
 8018402:	46c0      	nop			@ (mov r8, r8)
 8018404:	46bd      	mov	sp, r7
 8018406:	b002      	add	sp, #8
 8018408:	bd80      	pop	{r7, pc}
	...

0801840c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b084      	sub	sp, #16
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018418:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	681a      	ldr	r2, [r3, #0]
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	4920      	ldr	r1, [pc, #128]	@ (80184a8 <I2C_DMAMasterTransmitCplt+0x9c>)
 8018426:	400a      	ands	r2, r1
 8018428:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801842e:	b29b      	uxth	r3, r3
 8018430:	2b00      	cmp	r3, #0
 8018432:	d105      	bne.n	8018440 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	2120      	movs	r1, #32
 8018438:	0018      	movs	r0, r3
 801843a:	f000 fb4b 	bl	8018ad4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801843e:	e02e      	b.n	801849e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018444:	68fa      	ldr	r2, [r7, #12]
 8018446:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8018448:	189a      	adds	r2, r3, r2
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018452:	b29b      	uxth	r3, r3
 8018454:	2bff      	cmp	r3, #255	@ 0xff
 8018456:	d903      	bls.n	8018460 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	22ff      	movs	r2, #255	@ 0xff
 801845c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801845e:	e004      	b.n	801846a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018464:	b29a      	uxth	r2, r3
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018472:	0019      	movs	r1, r3
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	3328      	adds	r3, #40	@ 0x28
 801847a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 801847c:	68fb      	ldr	r3, [r7, #12]
 801847e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8018480:	f7fc ff2c 	bl	80152dc <HAL_DMA_Start_IT>
 8018484:	1e03      	subs	r3, r0, #0
 8018486:	d005      	beq.n	8018494 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	2110      	movs	r1, #16
 801848c:	0018      	movs	r0, r3
 801848e:	f7ff fe6f 	bl	8018170 <I2C_ITError>
}
 8018492:	e004      	b.n	801849e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	2140      	movs	r1, #64	@ 0x40
 8018498:	0018      	movs	r0, r3
 801849a:	f000 fb1b 	bl	8018ad4 <I2C_Enable_IRQ>
}
 801849e:	46c0      	nop			@ (mov r8, r8)
 80184a0:	46bd      	mov	sp, r7
 80184a2:	b004      	add	sp, #16
 80184a4:	bd80      	pop	{r7, pc}
 80184a6:	46c0      	nop			@ (mov r8, r8)
 80184a8:	ffffbfff 	.word	0xffffbfff

080184ac <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80184ac:	b580      	push	{r7, lr}
 80184ae:	b084      	sub	sp, #16
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184b8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	681a      	ldr	r2, [r3, #0]
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	4920      	ldr	r1, [pc, #128]	@ (8018548 <I2C_DMAMasterReceiveCplt+0x9c>)
 80184c6:	400a      	ands	r2, r1
 80184c8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80184ce:	b29b      	uxth	r3, r3
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d105      	bne.n	80184e0 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	2120      	movs	r1, #32
 80184d8:	0018      	movs	r0, r3
 80184da:	f000 fafb 	bl	8018ad4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80184de:	e02e      	b.n	801853e <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184e4:	68fa      	ldr	r2, [r7, #12]
 80184e6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80184e8:	189a      	adds	r2, r3, r2
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80184f2:	b29b      	uxth	r3, r3
 80184f4:	2bff      	cmp	r3, #255	@ 0xff
 80184f6:	d903      	bls.n	8018500 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	22ff      	movs	r2, #255	@ 0xff
 80184fc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80184fe:	e004      	b.n	801850a <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018504:	b29a      	uxth	r2, r3
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	3324      	adds	r3, #36	@ 0x24
 8018514:	0019      	movs	r1, r3
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801851a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8018520:	f7fc fedc 	bl	80152dc <HAL_DMA_Start_IT>
 8018524:	1e03      	subs	r3, r0, #0
 8018526:	d005      	beq.n	8018534 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	2110      	movs	r1, #16
 801852c:	0018      	movs	r0, r3
 801852e:	f7ff fe1f 	bl	8018170 <I2C_ITError>
}
 8018532:	e004      	b.n	801853e <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	2140      	movs	r1, #64	@ 0x40
 8018538:	0018      	movs	r0, r3
 801853a:	f000 facb 	bl	8018ad4 <I2C_Enable_IRQ>
}
 801853e:	46c0      	nop			@ (mov r8, r8)
 8018540:	46bd      	mov	sp, r7
 8018542:	b004      	add	sp, #16
 8018544:	bd80      	pop	{r7, pc}
 8018546:	46c0      	nop			@ (mov r8, r8)
 8018548:	ffff7fff 	.word	0xffff7fff

0801854c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801854c:	b580      	push	{r7, lr}
 801854e:	b084      	sub	sp, #16
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018558:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	685a      	ldr	r2, [r3, #4]
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	2180      	movs	r1, #128	@ 0x80
 8018566:	0209      	lsls	r1, r1, #8
 8018568:	430a      	orrs	r2, r1
 801856a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	2110      	movs	r1, #16
 8018570:	0018      	movs	r0, r3
 8018572:	f7ff fdfd 	bl	8018170 <I2C_ITError>
}
 8018576:	46c0      	nop			@ (mov r8, r8)
 8018578:	46bd      	mov	sp, r7
 801857a:	b004      	add	sp, #16
 801857c:	bd80      	pop	{r7, pc}

0801857e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801857e:	b580      	push	{r7, lr}
 8018580:	b084      	sub	sp, #16
 8018582:	af00      	add	r7, sp, #0
 8018584:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801858a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018590:	2b00      	cmp	r3, #0
 8018592:	d003      	beq.n	801859c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018598:	2200      	movs	r2, #0
 801859a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d003      	beq.n	80185ac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185a8:	2200      	movs	r2, #0
 80185aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	0018      	movs	r0, r3
 80185b0:	f7ff fee0 	bl	8018374 <I2C_TreatErrorCallback>
}
 80185b4:	46c0      	nop			@ (mov r8, r8)
 80185b6:	46bd      	mov	sp, r7
 80185b8:	b004      	add	sp, #16
 80185ba:	bd80      	pop	{r7, pc}

080185bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b084      	sub	sp, #16
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	60f8      	str	r0, [r7, #12]
 80185c4:	60b9      	str	r1, [r7, #8]
 80185c6:	603b      	str	r3, [r7, #0]
 80185c8:	1dfb      	adds	r3, r7, #7
 80185ca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80185cc:	e030      	b.n	8018630 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80185ce:	683b      	ldr	r3, [r7, #0]
 80185d0:	3301      	adds	r3, #1
 80185d2:	d02d      	beq.n	8018630 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80185d4:	f7fc f94e 	bl	8014874 <HAL_GetTick>
 80185d8:	0002      	movs	r2, r0
 80185da:	69bb      	ldr	r3, [r7, #24]
 80185dc:	1ad3      	subs	r3, r2, r3
 80185de:	683a      	ldr	r2, [r7, #0]
 80185e0:	429a      	cmp	r2, r3
 80185e2:	d302      	bcc.n	80185ea <I2C_WaitOnFlagUntilTimeout+0x2e>
 80185e4:	683b      	ldr	r3, [r7, #0]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d122      	bne.n	8018630 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80185ea:	68fb      	ldr	r3, [r7, #12]
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	699b      	ldr	r3, [r3, #24]
 80185f0:	68ba      	ldr	r2, [r7, #8]
 80185f2:	4013      	ands	r3, r2
 80185f4:	68ba      	ldr	r2, [r7, #8]
 80185f6:	1ad3      	subs	r3, r2, r3
 80185f8:	425a      	negs	r2, r3
 80185fa:	4153      	adcs	r3, r2
 80185fc:	b2db      	uxtb	r3, r3
 80185fe:	001a      	movs	r2, r3
 8018600:	1dfb      	adds	r3, r7, #7
 8018602:	781b      	ldrb	r3, [r3, #0]
 8018604:	429a      	cmp	r2, r3
 8018606:	d113      	bne.n	8018630 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801860c:	2220      	movs	r2, #32
 801860e:	431a      	orrs	r2, r3
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	2241      	movs	r2, #65	@ 0x41
 8018618:	2120      	movs	r1, #32
 801861a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	2242      	movs	r2, #66	@ 0x42
 8018620:	2100      	movs	r1, #0
 8018622:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	2240      	movs	r2, #64	@ 0x40
 8018628:	2100      	movs	r1, #0
 801862a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 801862c:	2301      	movs	r3, #1
 801862e:	e00f      	b.n	8018650 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	699b      	ldr	r3, [r3, #24]
 8018636:	68ba      	ldr	r2, [r7, #8]
 8018638:	4013      	ands	r3, r2
 801863a:	68ba      	ldr	r2, [r7, #8]
 801863c:	1ad3      	subs	r3, r2, r3
 801863e:	425a      	negs	r2, r3
 8018640:	4153      	adcs	r3, r2
 8018642:	b2db      	uxtb	r3, r3
 8018644:	001a      	movs	r2, r3
 8018646:	1dfb      	adds	r3, r7, #7
 8018648:	781b      	ldrb	r3, [r3, #0]
 801864a:	429a      	cmp	r2, r3
 801864c:	d0bf      	beq.n	80185ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801864e:	2300      	movs	r3, #0
}
 8018650:	0018      	movs	r0, r3
 8018652:	46bd      	mov	sp, r7
 8018654:	b004      	add	sp, #16
 8018656:	bd80      	pop	{r7, pc}

08018658 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b084      	sub	sp, #16
 801865c:	af00      	add	r7, sp, #0
 801865e:	60f8      	str	r0, [r7, #12]
 8018660:	60b9      	str	r1, [r7, #8]
 8018662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018664:	e032      	b.n	80186cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018666:	687a      	ldr	r2, [r7, #4]
 8018668:	68b9      	ldr	r1, [r7, #8]
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	0018      	movs	r0, r3
 801866e:	f000 f8ff 	bl	8018870 <I2C_IsErrorOccurred>
 8018672:	1e03      	subs	r3, r0, #0
 8018674:	d001      	beq.n	801867a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018676:	2301      	movs	r3, #1
 8018678:	e030      	b.n	80186dc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801867a:	68bb      	ldr	r3, [r7, #8]
 801867c:	3301      	adds	r3, #1
 801867e:	d025      	beq.n	80186cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018680:	f7fc f8f8 	bl	8014874 <HAL_GetTick>
 8018684:	0002      	movs	r2, r0
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	1ad3      	subs	r3, r2, r3
 801868a:	68ba      	ldr	r2, [r7, #8]
 801868c:	429a      	cmp	r2, r3
 801868e:	d302      	bcc.n	8018696 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8018690:	68bb      	ldr	r3, [r7, #8]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d11a      	bne.n	80186cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	699b      	ldr	r3, [r3, #24]
 801869c:	2202      	movs	r2, #2
 801869e:	4013      	ands	r3, r2
 80186a0:	2b02      	cmp	r3, #2
 80186a2:	d013      	beq.n	80186cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80186a8:	2220      	movs	r2, #32
 80186aa:	431a      	orrs	r2, r3
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	2241      	movs	r2, #65	@ 0x41
 80186b4:	2120      	movs	r1, #32
 80186b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	2242      	movs	r2, #66	@ 0x42
 80186bc:	2100      	movs	r1, #0
 80186be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	2240      	movs	r2, #64	@ 0x40
 80186c4:	2100      	movs	r1, #0
 80186c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80186c8:	2301      	movs	r3, #1
 80186ca:	e007      	b.n	80186dc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	699b      	ldr	r3, [r3, #24]
 80186d2:	2202      	movs	r2, #2
 80186d4:	4013      	ands	r3, r2
 80186d6:	2b02      	cmp	r3, #2
 80186d8:	d1c5      	bne.n	8018666 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80186da:	2300      	movs	r3, #0
}
 80186dc:	0018      	movs	r0, r3
 80186de:	46bd      	mov	sp, r7
 80186e0:	b004      	add	sp, #16
 80186e2:	bd80      	pop	{r7, pc}

080186e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b084      	sub	sp, #16
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	60f8      	str	r0, [r7, #12]
 80186ec:	60b9      	str	r1, [r7, #8]
 80186ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80186f0:	e02f      	b.n	8018752 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80186f2:	687a      	ldr	r2, [r7, #4]
 80186f4:	68b9      	ldr	r1, [r7, #8]
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	0018      	movs	r0, r3
 80186fa:	f000 f8b9 	bl	8018870 <I2C_IsErrorOccurred>
 80186fe:	1e03      	subs	r3, r0, #0
 8018700:	d001      	beq.n	8018706 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018702:	2301      	movs	r3, #1
 8018704:	e02d      	b.n	8018762 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018706:	f7fc f8b5 	bl	8014874 <HAL_GetTick>
 801870a:	0002      	movs	r2, r0
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	1ad3      	subs	r3, r2, r3
 8018710:	68ba      	ldr	r2, [r7, #8]
 8018712:	429a      	cmp	r2, r3
 8018714:	d302      	bcc.n	801871c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8018716:	68bb      	ldr	r3, [r7, #8]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d11a      	bne.n	8018752 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	699b      	ldr	r3, [r3, #24]
 8018722:	2220      	movs	r2, #32
 8018724:	4013      	ands	r3, r2
 8018726:	2b20      	cmp	r3, #32
 8018728:	d013      	beq.n	8018752 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801872e:	2220      	movs	r2, #32
 8018730:	431a      	orrs	r2, r3
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	2241      	movs	r2, #65	@ 0x41
 801873a:	2120      	movs	r1, #32
 801873c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801873e:	68fb      	ldr	r3, [r7, #12]
 8018740:	2242      	movs	r2, #66	@ 0x42
 8018742:	2100      	movs	r1, #0
 8018744:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	2240      	movs	r2, #64	@ 0x40
 801874a:	2100      	movs	r1, #0
 801874c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801874e:	2301      	movs	r3, #1
 8018750:	e007      	b.n	8018762 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	699b      	ldr	r3, [r3, #24]
 8018758:	2220      	movs	r2, #32
 801875a:	4013      	ands	r3, r2
 801875c:	2b20      	cmp	r3, #32
 801875e:	d1c8      	bne.n	80186f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018760:	2300      	movs	r3, #0
}
 8018762:	0018      	movs	r0, r3
 8018764:	46bd      	mov	sp, r7
 8018766:	b004      	add	sp, #16
 8018768:	bd80      	pop	{r7, pc}
	...

0801876c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801876c:	b580      	push	{r7, lr}
 801876e:	b084      	sub	sp, #16
 8018770:	af00      	add	r7, sp, #0
 8018772:	60f8      	str	r0, [r7, #12]
 8018774:	60b9      	str	r1, [r7, #8]
 8018776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018778:	e06b      	b.n	8018852 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801877a:	687a      	ldr	r2, [r7, #4]
 801877c:	68b9      	ldr	r1, [r7, #8]
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	0018      	movs	r0, r3
 8018782:	f000 f875 	bl	8018870 <I2C_IsErrorOccurred>
 8018786:	1e03      	subs	r3, r0, #0
 8018788:	d001      	beq.n	801878e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801878a:	2301      	movs	r3, #1
 801878c:	e069      	b.n	8018862 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	699b      	ldr	r3, [r3, #24]
 8018794:	2220      	movs	r2, #32
 8018796:	4013      	ands	r3, r2
 8018798:	2b20      	cmp	r3, #32
 801879a:	d138      	bne.n	801880e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	699b      	ldr	r3, [r3, #24]
 80187a2:	2204      	movs	r2, #4
 80187a4:	4013      	ands	r3, r2
 80187a6:	2b04      	cmp	r3, #4
 80187a8:	d105      	bne.n	80187b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d001      	beq.n	80187b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80187b2:	2300      	movs	r3, #0
 80187b4:	e055      	b.n	8018862 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	699b      	ldr	r3, [r3, #24]
 80187bc:	2210      	movs	r2, #16
 80187be:	4013      	ands	r3, r2
 80187c0:	2b10      	cmp	r3, #16
 80187c2:	d107      	bne.n	80187d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	2210      	movs	r2, #16
 80187ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	2204      	movs	r2, #4
 80187d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80187d2:	e002      	b.n	80187da <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	2200      	movs	r2, #0
 80187d8:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	2220      	movs	r2, #32
 80187e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	685a      	ldr	r2, [r3, #4]
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	491f      	ldr	r1, [pc, #124]	@ (801886c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80187ee:	400a      	ands	r2, r1
 80187f0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	2241      	movs	r2, #65	@ 0x41
 80187f6:	2120      	movs	r1, #32
 80187f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80187fa:	68fb      	ldr	r3, [r7, #12]
 80187fc:	2242      	movs	r2, #66	@ 0x42
 80187fe:	2100      	movs	r1, #0
 8018800:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	2240      	movs	r2, #64	@ 0x40
 8018806:	2100      	movs	r1, #0
 8018808:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801880a:	2301      	movs	r3, #1
 801880c:	e029      	b.n	8018862 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801880e:	f7fc f831 	bl	8014874 <HAL_GetTick>
 8018812:	0002      	movs	r2, r0
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	1ad3      	subs	r3, r2, r3
 8018818:	68ba      	ldr	r2, [r7, #8]
 801881a:	429a      	cmp	r2, r3
 801881c:	d302      	bcc.n	8018824 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801881e:	68bb      	ldr	r3, [r7, #8]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d116      	bne.n	8018852 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	699b      	ldr	r3, [r3, #24]
 801882a:	2204      	movs	r2, #4
 801882c:	4013      	ands	r3, r2
 801882e:	2b04      	cmp	r3, #4
 8018830:	d00f      	beq.n	8018852 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018836:	2220      	movs	r2, #32
 8018838:	431a      	orrs	r2, r3
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	2241      	movs	r2, #65	@ 0x41
 8018842:	2120      	movs	r1, #32
 8018844:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	2240      	movs	r2, #64	@ 0x40
 801884a:	2100      	movs	r1, #0
 801884c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801884e:	2301      	movs	r3, #1
 8018850:	e007      	b.n	8018862 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	699b      	ldr	r3, [r3, #24]
 8018858:	2204      	movs	r2, #4
 801885a:	4013      	ands	r3, r2
 801885c:	2b04      	cmp	r3, #4
 801885e:	d18c      	bne.n	801877a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018860:	2300      	movs	r3, #0
}
 8018862:	0018      	movs	r0, r3
 8018864:	46bd      	mov	sp, r7
 8018866:	b004      	add	sp, #16
 8018868:	bd80      	pop	{r7, pc}
 801886a:	46c0      	nop			@ (mov r8, r8)
 801886c:	fe00e800 	.word	0xfe00e800

08018870 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018870:	b580      	push	{r7, lr}
 8018872:	b08a      	sub	sp, #40	@ 0x28
 8018874:	af00      	add	r7, sp, #0
 8018876:	60f8      	str	r0, [r7, #12]
 8018878:	60b9      	str	r1, [r7, #8]
 801887a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801887c:	2327      	movs	r3, #39	@ 0x27
 801887e:	18fb      	adds	r3, r7, r3
 8018880:	2200      	movs	r2, #0
 8018882:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	699b      	ldr	r3, [r3, #24]
 801888a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801888c:	2300      	movs	r3, #0
 801888e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8018894:	69bb      	ldr	r3, [r7, #24]
 8018896:	2210      	movs	r2, #16
 8018898:	4013      	ands	r3, r2
 801889a:	d100      	bne.n	801889e <I2C_IsErrorOccurred+0x2e>
 801889c:	e079      	b.n	8018992 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	2210      	movs	r2, #16
 80188a4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80188a6:	e057      	b.n	8018958 <I2C_IsErrorOccurred+0xe8>
 80188a8:	2227      	movs	r2, #39	@ 0x27
 80188aa:	18bb      	adds	r3, r7, r2
 80188ac:	18ba      	adds	r2, r7, r2
 80188ae:	7812      	ldrb	r2, [r2, #0]
 80188b0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80188b2:	68bb      	ldr	r3, [r7, #8]
 80188b4:	3301      	adds	r3, #1
 80188b6:	d04f      	beq.n	8018958 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80188b8:	f7fb ffdc 	bl	8014874 <HAL_GetTick>
 80188bc:	0002      	movs	r2, r0
 80188be:	69fb      	ldr	r3, [r7, #28]
 80188c0:	1ad3      	subs	r3, r2, r3
 80188c2:	68ba      	ldr	r2, [r7, #8]
 80188c4:	429a      	cmp	r2, r3
 80188c6:	d302      	bcc.n	80188ce <I2C_IsErrorOccurred+0x5e>
 80188c8:	68bb      	ldr	r3, [r7, #8]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d144      	bne.n	8018958 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	685a      	ldr	r2, [r3, #4]
 80188d4:	2380      	movs	r3, #128	@ 0x80
 80188d6:	01db      	lsls	r3, r3, #7
 80188d8:	4013      	ands	r3, r2
 80188da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80188dc:	2013      	movs	r0, #19
 80188de:	183b      	adds	r3, r7, r0
 80188e0:	68fa      	ldr	r2, [r7, #12]
 80188e2:	2142      	movs	r1, #66	@ 0x42
 80188e4:	5c52      	ldrb	r2, [r2, r1]
 80188e6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	699a      	ldr	r2, [r3, #24]
 80188ee:	2380      	movs	r3, #128	@ 0x80
 80188f0:	021b      	lsls	r3, r3, #8
 80188f2:	401a      	ands	r2, r3
 80188f4:	2380      	movs	r3, #128	@ 0x80
 80188f6:	021b      	lsls	r3, r3, #8
 80188f8:	429a      	cmp	r2, r3
 80188fa:	d126      	bne.n	801894a <I2C_IsErrorOccurred+0xda>
 80188fc:	697a      	ldr	r2, [r7, #20]
 80188fe:	2380      	movs	r3, #128	@ 0x80
 8018900:	01db      	lsls	r3, r3, #7
 8018902:	429a      	cmp	r2, r3
 8018904:	d021      	beq.n	801894a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8018906:	183b      	adds	r3, r7, r0
 8018908:	781b      	ldrb	r3, [r3, #0]
 801890a:	2b20      	cmp	r3, #32
 801890c:	d01d      	beq.n	801894a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	685a      	ldr	r2, [r3, #4]
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	2180      	movs	r1, #128	@ 0x80
 801891a:	01c9      	lsls	r1, r1, #7
 801891c:	430a      	orrs	r2, r1
 801891e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8018920:	f7fb ffa8 	bl	8014874 <HAL_GetTick>
 8018924:	0003      	movs	r3, r0
 8018926:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018928:	e00f      	b.n	801894a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801892a:	f7fb ffa3 	bl	8014874 <HAL_GetTick>
 801892e:	0002      	movs	r2, r0
 8018930:	69fb      	ldr	r3, [r7, #28]
 8018932:	1ad3      	subs	r3, r2, r3
 8018934:	2b19      	cmp	r3, #25
 8018936:	d908      	bls.n	801894a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8018938:	6a3b      	ldr	r3, [r7, #32]
 801893a:	2220      	movs	r2, #32
 801893c:	4313      	orrs	r3, r2
 801893e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8018940:	2327      	movs	r3, #39	@ 0x27
 8018942:	18fb      	adds	r3, r7, r3
 8018944:	2201      	movs	r2, #1
 8018946:	701a      	strb	r2, [r3, #0]

              break;
 8018948:	e006      	b.n	8018958 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	699b      	ldr	r3, [r3, #24]
 8018950:	2220      	movs	r2, #32
 8018952:	4013      	ands	r3, r2
 8018954:	2b20      	cmp	r3, #32
 8018956:	d1e8      	bne.n	801892a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	699b      	ldr	r3, [r3, #24]
 801895e:	2220      	movs	r2, #32
 8018960:	4013      	ands	r3, r2
 8018962:	2b20      	cmp	r3, #32
 8018964:	d004      	beq.n	8018970 <I2C_IsErrorOccurred+0x100>
 8018966:	2327      	movs	r3, #39	@ 0x27
 8018968:	18fb      	adds	r3, r7, r3
 801896a:	781b      	ldrb	r3, [r3, #0]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d09b      	beq.n	80188a8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8018970:	2327      	movs	r3, #39	@ 0x27
 8018972:	18fb      	adds	r3, r7, r3
 8018974:	781b      	ldrb	r3, [r3, #0]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d103      	bne.n	8018982 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	2220      	movs	r2, #32
 8018980:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8018982:	6a3b      	ldr	r3, [r7, #32]
 8018984:	2204      	movs	r2, #4
 8018986:	4313      	orrs	r3, r2
 8018988:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801898a:	2327      	movs	r3, #39	@ 0x27
 801898c:	18fb      	adds	r3, r7, r3
 801898e:	2201      	movs	r2, #1
 8018990:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	699b      	ldr	r3, [r3, #24]
 8018998:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801899a:	69ba      	ldr	r2, [r7, #24]
 801899c:	2380      	movs	r3, #128	@ 0x80
 801899e:	005b      	lsls	r3, r3, #1
 80189a0:	4013      	ands	r3, r2
 80189a2:	d00c      	beq.n	80189be <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80189a4:	6a3b      	ldr	r3, [r7, #32]
 80189a6:	2201      	movs	r2, #1
 80189a8:	4313      	orrs	r3, r2
 80189aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	2280      	movs	r2, #128	@ 0x80
 80189b2:	0052      	lsls	r2, r2, #1
 80189b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80189b6:	2327      	movs	r3, #39	@ 0x27
 80189b8:	18fb      	adds	r3, r7, r3
 80189ba:	2201      	movs	r2, #1
 80189bc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80189be:	69ba      	ldr	r2, [r7, #24]
 80189c0:	2380      	movs	r3, #128	@ 0x80
 80189c2:	00db      	lsls	r3, r3, #3
 80189c4:	4013      	ands	r3, r2
 80189c6:	d00c      	beq.n	80189e2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80189c8:	6a3b      	ldr	r3, [r7, #32]
 80189ca:	2208      	movs	r2, #8
 80189cc:	4313      	orrs	r3, r2
 80189ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80189d0:	68fb      	ldr	r3, [r7, #12]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	2280      	movs	r2, #128	@ 0x80
 80189d6:	00d2      	lsls	r2, r2, #3
 80189d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80189da:	2327      	movs	r3, #39	@ 0x27
 80189dc:	18fb      	adds	r3, r7, r3
 80189de:	2201      	movs	r2, #1
 80189e0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80189e2:	69ba      	ldr	r2, [r7, #24]
 80189e4:	2380      	movs	r3, #128	@ 0x80
 80189e6:	009b      	lsls	r3, r3, #2
 80189e8:	4013      	ands	r3, r2
 80189ea:	d00c      	beq.n	8018a06 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80189ec:	6a3b      	ldr	r3, [r7, #32]
 80189ee:	2202      	movs	r2, #2
 80189f0:	4313      	orrs	r3, r2
 80189f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	2280      	movs	r2, #128	@ 0x80
 80189fa:	0092      	lsls	r2, r2, #2
 80189fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80189fe:	2327      	movs	r3, #39	@ 0x27
 8018a00:	18fb      	adds	r3, r7, r3
 8018a02:	2201      	movs	r2, #1
 8018a04:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8018a06:	2327      	movs	r3, #39	@ 0x27
 8018a08:	18fb      	adds	r3, r7, r3
 8018a0a:	781b      	ldrb	r3, [r3, #0]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d01d      	beq.n	8018a4c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	0018      	movs	r0, r3
 8018a14:	f7ff fcd7 	bl	80183c6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	685a      	ldr	r2, [r3, #4]
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	490e      	ldr	r1, [pc, #56]	@ (8018a5c <I2C_IsErrorOccurred+0x1ec>)
 8018a24:	400a      	ands	r2, r1
 8018a26:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018a2c:	6a3b      	ldr	r3, [r7, #32]
 8018a2e:	431a      	orrs	r2, r3
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	2241      	movs	r2, #65	@ 0x41
 8018a38:	2120      	movs	r1, #32
 8018a3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	2242      	movs	r2, #66	@ 0x42
 8018a40:	2100      	movs	r1, #0
 8018a42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	2240      	movs	r2, #64	@ 0x40
 8018a48:	2100      	movs	r1, #0
 8018a4a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018a4c:	2327      	movs	r3, #39	@ 0x27
 8018a4e:	18fb      	adds	r3, r7, r3
 8018a50:	781b      	ldrb	r3, [r3, #0]
}
 8018a52:	0018      	movs	r0, r3
 8018a54:	46bd      	mov	sp, r7
 8018a56:	b00a      	add	sp, #40	@ 0x28
 8018a58:	bd80      	pop	{r7, pc}
 8018a5a:	46c0      	nop			@ (mov r8, r8)
 8018a5c:	fe00e800 	.word	0xfe00e800

08018a60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018a60:	b590      	push	{r4, r7, lr}
 8018a62:	b087      	sub	sp, #28
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	60f8      	str	r0, [r7, #12]
 8018a68:	0008      	movs	r0, r1
 8018a6a:	0011      	movs	r1, r2
 8018a6c:	607b      	str	r3, [r7, #4]
 8018a6e:	240a      	movs	r4, #10
 8018a70:	193b      	adds	r3, r7, r4
 8018a72:	1c02      	adds	r2, r0, #0
 8018a74:	801a      	strh	r2, [r3, #0]
 8018a76:	2009      	movs	r0, #9
 8018a78:	183b      	adds	r3, r7, r0
 8018a7a:	1c0a      	adds	r2, r1, #0
 8018a7c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018a7e:	193b      	adds	r3, r7, r4
 8018a80:	881b      	ldrh	r3, [r3, #0]
 8018a82:	059b      	lsls	r3, r3, #22
 8018a84:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018a86:	183b      	adds	r3, r7, r0
 8018a88:	781b      	ldrb	r3, [r3, #0]
 8018a8a:	0419      	lsls	r1, r3, #16
 8018a8c:	23ff      	movs	r3, #255	@ 0xff
 8018a8e:	041b      	lsls	r3, r3, #16
 8018a90:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018a92:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a9a:	4313      	orrs	r3, r2
 8018a9c:	005b      	lsls	r3, r3, #1
 8018a9e:	085b      	lsrs	r3, r3, #1
 8018aa0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	685b      	ldr	r3, [r3, #4]
 8018aa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018aaa:	0d51      	lsrs	r1, r2, #21
 8018aac:	2280      	movs	r2, #128	@ 0x80
 8018aae:	00d2      	lsls	r2, r2, #3
 8018ab0:	400a      	ands	r2, r1
 8018ab2:	4907      	ldr	r1, [pc, #28]	@ (8018ad0 <I2C_TransferConfig+0x70>)
 8018ab4:	430a      	orrs	r2, r1
 8018ab6:	43d2      	mvns	r2, r2
 8018ab8:	401a      	ands	r2, r3
 8018aba:	0011      	movs	r1, r2
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	697a      	ldr	r2, [r7, #20]
 8018ac2:	430a      	orrs	r2, r1
 8018ac4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018ac6:	46c0      	nop			@ (mov r8, r8)
 8018ac8:	46bd      	mov	sp, r7
 8018aca:	b007      	add	sp, #28
 8018acc:	bd90      	pop	{r4, r7, pc}
 8018ace:	46c0      	nop			@ (mov r8, r8)
 8018ad0:	03ff63ff 	.word	0x03ff63ff

08018ad4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018ad4:	b580      	push	{r7, lr}
 8018ad6:	b084      	sub	sp, #16
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	6078      	str	r0, [r7, #4]
 8018adc:	000a      	movs	r2, r1
 8018ade:	1cbb      	adds	r3, r7, #2
 8018ae0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018aea:	4b3e      	ldr	r3, [pc, #248]	@ (8018be4 <I2C_Enable_IRQ+0x110>)
 8018aec:	429a      	cmp	r2, r3
 8018aee:	d035      	beq.n	8018b5c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018af4:	4b3c      	ldr	r3, [pc, #240]	@ (8018be8 <I2C_Enable_IRQ+0x114>)
 8018af6:	429a      	cmp	r2, r3
 8018af8:	d030      	beq.n	8018b5c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018afe:	4b3b      	ldr	r3, [pc, #236]	@ (8018bec <I2C_Enable_IRQ+0x118>)
 8018b00:	429a      	cmp	r2, r3
 8018b02:	d02b      	beq.n	8018b5c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018b04:	1cbb      	adds	r3, r7, #2
 8018b06:	2200      	movs	r2, #0
 8018b08:	5e9b      	ldrsh	r3, [r3, r2]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	da03      	bge.n	8018b16 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	22b8      	movs	r2, #184	@ 0xb8
 8018b12:	4313      	orrs	r3, r2
 8018b14:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018b16:	1cbb      	adds	r3, r7, #2
 8018b18:	881b      	ldrh	r3, [r3, #0]
 8018b1a:	2201      	movs	r2, #1
 8018b1c:	4013      	ands	r3, r2
 8018b1e:	d003      	beq.n	8018b28 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	22f2      	movs	r2, #242	@ 0xf2
 8018b24:	4313      	orrs	r3, r2
 8018b26:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018b28:	1cbb      	adds	r3, r7, #2
 8018b2a:	881b      	ldrh	r3, [r3, #0]
 8018b2c:	2202      	movs	r2, #2
 8018b2e:	4013      	ands	r3, r2
 8018b30:	d003      	beq.n	8018b3a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	22f4      	movs	r2, #244	@ 0xf4
 8018b36:	4313      	orrs	r3, r2
 8018b38:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018b3a:	1cbb      	adds	r3, r7, #2
 8018b3c:	881b      	ldrh	r3, [r3, #0]
 8018b3e:	2b10      	cmp	r3, #16
 8018b40:	d103      	bne.n	8018b4a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	2290      	movs	r2, #144	@ 0x90
 8018b46:	4313      	orrs	r3, r2
 8018b48:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018b4a:	1cbb      	adds	r3, r7, #2
 8018b4c:	881b      	ldrh	r3, [r3, #0]
 8018b4e:	2b20      	cmp	r3, #32
 8018b50:	d13c      	bne.n	8018bcc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	2220      	movs	r2, #32
 8018b56:	4313      	orrs	r3, r2
 8018b58:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018b5a:	e037      	b.n	8018bcc <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018b5c:	1cbb      	adds	r3, r7, #2
 8018b5e:	2200      	movs	r2, #0
 8018b60:	5e9b      	ldrsh	r3, [r3, r2]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	da03      	bge.n	8018b6e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	22b8      	movs	r2, #184	@ 0xb8
 8018b6a:	4313      	orrs	r3, r2
 8018b6c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018b6e:	1cbb      	adds	r3, r7, #2
 8018b70:	881b      	ldrh	r3, [r3, #0]
 8018b72:	2201      	movs	r2, #1
 8018b74:	4013      	ands	r3, r2
 8018b76:	d003      	beq.n	8018b80 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	22f2      	movs	r2, #242	@ 0xf2
 8018b7c:	4313      	orrs	r3, r2
 8018b7e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018b80:	1cbb      	adds	r3, r7, #2
 8018b82:	881b      	ldrh	r3, [r3, #0]
 8018b84:	2202      	movs	r2, #2
 8018b86:	4013      	ands	r3, r2
 8018b88:	d003      	beq.n	8018b92 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	22f4      	movs	r2, #244	@ 0xf4
 8018b8e:	4313      	orrs	r3, r2
 8018b90:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018b92:	1cbb      	adds	r3, r7, #2
 8018b94:	881b      	ldrh	r3, [r3, #0]
 8018b96:	2b10      	cmp	r3, #16
 8018b98:	d103      	bne.n	8018ba2 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	2290      	movs	r2, #144	@ 0x90
 8018b9e:	4313      	orrs	r3, r2
 8018ba0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018ba2:	1cbb      	adds	r3, r7, #2
 8018ba4:	881b      	ldrh	r3, [r3, #0]
 8018ba6:	2b20      	cmp	r3, #32
 8018ba8:	d103      	bne.n	8018bb2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	2260      	movs	r2, #96	@ 0x60
 8018bae:	4313      	orrs	r3, r2
 8018bb0:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8018bec <I2C_Enable_IRQ+0x118>)
 8018bb8:	429a      	cmp	r2, r3
 8018bba:	d007      	beq.n	8018bcc <I2C_Enable_IRQ+0xf8>
 8018bbc:	1cbb      	adds	r3, r7, #2
 8018bbe:	881b      	ldrh	r3, [r3, #0]
 8018bc0:	2b40      	cmp	r3, #64	@ 0x40
 8018bc2:	d103      	bne.n	8018bcc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	2240      	movs	r2, #64	@ 0x40
 8018bc8:	4313      	orrs	r3, r2
 8018bca:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	6819      	ldr	r1, [r3, #0]
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	68fa      	ldr	r2, [r7, #12]
 8018bd8:	430a      	orrs	r2, r1
 8018bda:	601a      	str	r2, [r3, #0]
}
 8018bdc:	46c0      	nop			@ (mov r8, r8)
 8018bde:	46bd      	mov	sp, r7
 8018be0:	b004      	add	sp, #16
 8018be2:	bd80      	pop	{r7, pc}
 8018be4:	08017249 	.word	0x08017249
 8018be8:	080176c1 	.word	0x080176c1
 8018bec:	08017461 	.word	0x08017461

08018bf0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b084      	sub	sp, #16
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	6078      	str	r0, [r7, #4]
 8018bf8:	000a      	movs	r2, r1
 8018bfa:	1cbb      	adds	r3, r7, #2
 8018bfc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018bfe:	2300      	movs	r3, #0
 8018c00:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018c02:	1cbb      	adds	r3, r7, #2
 8018c04:	881b      	ldrh	r3, [r3, #0]
 8018c06:	2201      	movs	r2, #1
 8018c08:	4013      	ands	r3, r2
 8018c0a:	d010      	beq.n	8018c2e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	2242      	movs	r2, #66	@ 0x42
 8018c10:	4313      	orrs	r3, r2
 8018c12:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	2241      	movs	r2, #65	@ 0x41
 8018c18:	5c9b      	ldrb	r3, [r3, r2]
 8018c1a:	b2db      	uxtb	r3, r3
 8018c1c:	001a      	movs	r2, r3
 8018c1e:	2328      	movs	r3, #40	@ 0x28
 8018c20:	4013      	ands	r3, r2
 8018c22:	2b28      	cmp	r3, #40	@ 0x28
 8018c24:	d003      	beq.n	8018c2e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	22b0      	movs	r2, #176	@ 0xb0
 8018c2a:	4313      	orrs	r3, r2
 8018c2c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018c2e:	1cbb      	adds	r3, r7, #2
 8018c30:	881b      	ldrh	r3, [r3, #0]
 8018c32:	2202      	movs	r2, #2
 8018c34:	4013      	ands	r3, r2
 8018c36:	d010      	beq.n	8018c5a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	2244      	movs	r2, #68	@ 0x44
 8018c3c:	4313      	orrs	r3, r2
 8018c3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	2241      	movs	r2, #65	@ 0x41
 8018c44:	5c9b      	ldrb	r3, [r3, r2]
 8018c46:	b2db      	uxtb	r3, r3
 8018c48:	001a      	movs	r2, r3
 8018c4a:	2328      	movs	r3, #40	@ 0x28
 8018c4c:	4013      	ands	r3, r2
 8018c4e:	2b28      	cmp	r3, #40	@ 0x28
 8018c50:	d003      	beq.n	8018c5a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	22b0      	movs	r2, #176	@ 0xb0
 8018c56:	4313      	orrs	r3, r2
 8018c58:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018c5a:	1cbb      	adds	r3, r7, #2
 8018c5c:	2200      	movs	r2, #0
 8018c5e:	5e9b      	ldrsh	r3, [r3, r2]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	da03      	bge.n	8018c6c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	22b8      	movs	r2, #184	@ 0xb8
 8018c68:	4313      	orrs	r3, r2
 8018c6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018c6c:	1cbb      	adds	r3, r7, #2
 8018c6e:	881b      	ldrh	r3, [r3, #0]
 8018c70:	2b10      	cmp	r3, #16
 8018c72:	d103      	bne.n	8018c7c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018c74:	68fb      	ldr	r3, [r7, #12]
 8018c76:	2290      	movs	r2, #144	@ 0x90
 8018c78:	4313      	orrs	r3, r2
 8018c7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018c7c:	1cbb      	adds	r3, r7, #2
 8018c7e:	881b      	ldrh	r3, [r3, #0]
 8018c80:	2b20      	cmp	r3, #32
 8018c82:	d103      	bne.n	8018c8c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	2220      	movs	r2, #32
 8018c88:	4313      	orrs	r3, r2
 8018c8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8018c8c:	1cbb      	adds	r3, r7, #2
 8018c8e:	881b      	ldrh	r3, [r3, #0]
 8018c90:	2b40      	cmp	r3, #64	@ 0x40
 8018c92:	d103      	bne.n	8018c9c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	2240      	movs	r2, #64	@ 0x40
 8018c98:	4313      	orrs	r3, r2
 8018c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	681a      	ldr	r2, [r3, #0]
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	43d9      	mvns	r1, r3
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	400a      	ands	r2, r1
 8018cac:	601a      	str	r2, [r3, #0]
}
 8018cae:	46c0      	nop			@ (mov r8, r8)
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	b004      	add	sp, #16
 8018cb4:	bd80      	pop	{r7, pc}
	...

08018cb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b082      	sub	sp, #8
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
 8018cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	2241      	movs	r2, #65	@ 0x41
 8018cc6:	5c9b      	ldrb	r3, [r3, r2]
 8018cc8:	b2db      	uxtb	r3, r3
 8018cca:	2b20      	cmp	r3, #32
 8018ccc:	d138      	bne.n	8018d40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	2240      	movs	r2, #64	@ 0x40
 8018cd2:	5c9b      	ldrb	r3, [r3, r2]
 8018cd4:	2b01      	cmp	r3, #1
 8018cd6:	d101      	bne.n	8018cdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018cd8:	2302      	movs	r3, #2
 8018cda:	e032      	b.n	8018d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	2240      	movs	r2, #64	@ 0x40
 8018ce0:	2101      	movs	r1, #1
 8018ce2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	2241      	movs	r2, #65	@ 0x41
 8018ce8:	2124      	movs	r1, #36	@ 0x24
 8018cea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	681a      	ldr	r2, [r3, #0]
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	2101      	movs	r1, #1
 8018cf8:	438a      	bics	r2, r1
 8018cfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	681a      	ldr	r2, [r3, #0]
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	4911      	ldr	r1, [pc, #68]	@ (8018d4c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8018d08:	400a      	ands	r2, r1
 8018d0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	6819      	ldr	r1, [r3, #0]
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	683a      	ldr	r2, [r7, #0]
 8018d18:	430a      	orrs	r2, r1
 8018d1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	681a      	ldr	r2, [r3, #0]
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	2101      	movs	r1, #1
 8018d28:	430a      	orrs	r2, r1
 8018d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	2241      	movs	r2, #65	@ 0x41
 8018d30:	2120      	movs	r1, #32
 8018d32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	2240      	movs	r2, #64	@ 0x40
 8018d38:	2100      	movs	r1, #0
 8018d3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	e000      	b.n	8018d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018d40:	2302      	movs	r3, #2
  }
}
 8018d42:	0018      	movs	r0, r3
 8018d44:	46bd      	mov	sp, r7
 8018d46:	b002      	add	sp, #8
 8018d48:	bd80      	pop	{r7, pc}
 8018d4a:	46c0      	nop			@ (mov r8, r8)
 8018d4c:	ffffefff 	.word	0xffffefff

08018d50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b084      	sub	sp, #16
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
 8018d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	2241      	movs	r2, #65	@ 0x41
 8018d5e:	5c9b      	ldrb	r3, [r3, r2]
 8018d60:	b2db      	uxtb	r3, r3
 8018d62:	2b20      	cmp	r3, #32
 8018d64:	d139      	bne.n	8018dda <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	2240      	movs	r2, #64	@ 0x40
 8018d6a:	5c9b      	ldrb	r3, [r3, r2]
 8018d6c:	2b01      	cmp	r3, #1
 8018d6e:	d101      	bne.n	8018d74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018d70:	2302      	movs	r3, #2
 8018d72:	e033      	b.n	8018ddc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	2240      	movs	r2, #64	@ 0x40
 8018d78:	2101      	movs	r1, #1
 8018d7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	2241      	movs	r2, #65	@ 0x41
 8018d80:	2124      	movs	r1, #36	@ 0x24
 8018d82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	681a      	ldr	r2, [r3, #0]
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	2101      	movs	r1, #1
 8018d90:	438a      	bics	r2, r1
 8018d92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	4a11      	ldr	r2, [pc, #68]	@ (8018de4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8018da0:	4013      	ands	r3, r2
 8018da2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018da4:	683b      	ldr	r3, [r7, #0]
 8018da6:	021b      	lsls	r3, r3, #8
 8018da8:	68fa      	ldr	r2, [r7, #12]
 8018daa:	4313      	orrs	r3, r2
 8018dac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	68fa      	ldr	r2, [r7, #12]
 8018db4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	681a      	ldr	r2, [r3, #0]
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	2101      	movs	r1, #1
 8018dc2:	430a      	orrs	r2, r1
 8018dc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	2241      	movs	r2, #65	@ 0x41
 8018dca:	2120      	movs	r1, #32
 8018dcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	2240      	movs	r2, #64	@ 0x40
 8018dd2:	2100      	movs	r1, #0
 8018dd4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	e000      	b.n	8018ddc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018dda:	2302      	movs	r3, #2
  }
}
 8018ddc:	0018      	movs	r0, r3
 8018dde:	46bd      	mov	sp, r7
 8018de0:	b004      	add	sp, #16
 8018de2:	bd80      	pop	{r7, pc}
 8018de4:	fffff0ff 	.word	0xfffff0ff

08018de8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b088      	sub	sp, #32
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d101      	bne.n	8018dfa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8018df6:	2301      	movs	r3, #1
 8018df8:	e0e1      	b.n	8018fbe <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	2235      	movs	r2, #53	@ 0x35
 8018dfe:	5c9b      	ldrb	r3, [r3, r2]
 8018e00:	b2db      	uxtb	r3, r3
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d107      	bne.n	8018e16 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	2234      	movs	r2, #52	@ 0x34
 8018e0a:	2100      	movs	r1, #0
 8018e0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	0018      	movs	r0, r3
 8018e12:	f7f3 fdcd 	bl	800c9b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	2235      	movs	r2, #53	@ 0x35
 8018e1a:	2102      	movs	r1, #2
 8018e1c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	69da      	ldr	r2, [r3, #28]
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	4967      	ldr	r1, [pc, #412]	@ (8018fc8 <HAL_I2S_Init+0x1e0>)
 8018e2a:	400a      	ands	r2, r1
 8018e2c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	2202      	movs	r2, #2
 8018e34:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	695b      	ldr	r3, [r3, #20]
 8018e3a:	2b02      	cmp	r3, #2
 8018e3c:	d073      	beq.n	8018f26 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	68db      	ldr	r3, [r3, #12]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d102      	bne.n	8018e4c <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8018e46:	2310      	movs	r3, #16
 8018e48:	617b      	str	r3, [r7, #20]
 8018e4a:	e001      	b.n	8018e50 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8018e4c:	2320      	movs	r3, #32
 8018e4e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	689b      	ldr	r3, [r3, #8]
 8018e54:	2b20      	cmp	r3, #32
 8018e56:	d802      	bhi.n	8018e5e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8018e58:	697b      	ldr	r3, [r7, #20]
 8018e5a:	005b      	lsls	r3, r3, #1
 8018e5c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8018e5e:	f002 febd 	bl	801bbdc <HAL_RCC_GetSysClockFreq>
 8018e62:	0003      	movs	r3, r0
 8018e64:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	691a      	ldr	r2, [r3, #16]
 8018e6a:	2380      	movs	r3, #128	@ 0x80
 8018e6c:	009b      	lsls	r3, r3, #2
 8018e6e:	429a      	cmp	r2, r3
 8018e70:	d131      	bne.n	8018ed6 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	68db      	ldr	r3, [r3, #12]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d016      	beq.n	8018ea8 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018e7a:	697b      	ldr	r3, [r7, #20]
 8018e7c:	009b      	lsls	r3, r3, #2
 8018e7e:	0019      	movs	r1, r3
 8018e80:	68f8      	ldr	r0, [r7, #12]
 8018e82:	f7e7 f98f 	bl	80001a4 <__udivsi3>
 8018e86:	0003      	movs	r3, r0
 8018e88:	001a      	movs	r2, r3
 8018e8a:	0013      	movs	r3, r2
 8018e8c:	009b      	lsls	r3, r3, #2
 8018e8e:	189b      	adds	r3, r3, r2
 8018e90:	005b      	lsls	r3, r3, #1
 8018e92:	001a      	movs	r2, r3
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	695b      	ldr	r3, [r3, #20]
 8018e98:	0019      	movs	r1, r3
 8018e9a:	0010      	movs	r0, r2
 8018e9c:	f7e7 f982 	bl	80001a4 <__udivsi3>
 8018ea0:	0003      	movs	r3, r0
 8018ea2:	3305      	adds	r3, #5
 8018ea4:	613b      	str	r3, [r7, #16]
 8018ea6:	e02a      	b.n	8018efe <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018ea8:	697b      	ldr	r3, [r7, #20]
 8018eaa:	00db      	lsls	r3, r3, #3
 8018eac:	0019      	movs	r1, r3
 8018eae:	68f8      	ldr	r0, [r7, #12]
 8018eb0:	f7e7 f978 	bl	80001a4 <__udivsi3>
 8018eb4:	0003      	movs	r3, r0
 8018eb6:	001a      	movs	r2, r3
 8018eb8:	0013      	movs	r3, r2
 8018eba:	009b      	lsls	r3, r3, #2
 8018ebc:	189b      	adds	r3, r3, r2
 8018ebe:	005b      	lsls	r3, r3, #1
 8018ec0:	001a      	movs	r2, r3
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	695b      	ldr	r3, [r3, #20]
 8018ec6:	0019      	movs	r1, r3
 8018ec8:	0010      	movs	r0, r2
 8018eca:	f7e7 f96b 	bl	80001a4 <__udivsi3>
 8018ece:	0003      	movs	r3, r0
 8018ed0:	3305      	adds	r3, #5
 8018ed2:	613b      	str	r3, [r7, #16]
 8018ed4:	e013      	b.n	8018efe <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018ed6:	6979      	ldr	r1, [r7, #20]
 8018ed8:	68f8      	ldr	r0, [r7, #12]
 8018eda:	f7e7 f963 	bl	80001a4 <__udivsi3>
 8018ede:	0003      	movs	r3, r0
 8018ee0:	001a      	movs	r2, r3
 8018ee2:	0013      	movs	r3, r2
 8018ee4:	009b      	lsls	r3, r3, #2
 8018ee6:	189b      	adds	r3, r3, r2
 8018ee8:	005b      	lsls	r3, r3, #1
 8018eea:	001a      	movs	r2, r3
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	695b      	ldr	r3, [r3, #20]
 8018ef0:	0019      	movs	r1, r3
 8018ef2:	0010      	movs	r0, r2
 8018ef4:	f7e7 f956 	bl	80001a4 <__udivsi3>
 8018ef8:	0003      	movs	r3, r0
 8018efa:	3305      	adds	r3, #5
 8018efc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8018efe:	693b      	ldr	r3, [r7, #16]
 8018f00:	210a      	movs	r1, #10
 8018f02:	0018      	movs	r0, r3
 8018f04:	f7e7 f94e 	bl	80001a4 <__udivsi3>
 8018f08:	0003      	movs	r3, r0
 8018f0a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8018f0c:	693b      	ldr	r3, [r7, #16]
 8018f0e:	2201      	movs	r2, #1
 8018f10:	4013      	ands	r3, r2
 8018f12:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8018f14:	693a      	ldr	r2, [r7, #16]
 8018f16:	69bb      	ldr	r3, [r7, #24]
 8018f18:	1ad3      	subs	r3, r2, r3
 8018f1a:	085b      	lsrs	r3, r3, #1
 8018f1c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8018f1e:	69bb      	ldr	r3, [r7, #24]
 8018f20:	021b      	lsls	r3, r3, #8
 8018f22:	61bb      	str	r3, [r7, #24]
 8018f24:	e003      	b.n	8018f2e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8018f26:	2302      	movs	r3, #2
 8018f28:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8018f2e:	69fb      	ldr	r3, [r7, #28]
 8018f30:	2b01      	cmp	r3, #1
 8018f32:	d902      	bls.n	8018f3a <HAL_I2S_Init+0x152>
 8018f34:	69fb      	ldr	r3, [r7, #28]
 8018f36:	2bff      	cmp	r3, #255	@ 0xff
 8018f38:	d907      	bls.n	8018f4a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018f3e:	2210      	movs	r2, #16
 8018f40:	431a      	orrs	r2, r3
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8018f46:	2301      	movs	r3, #1
 8018f48:	e039      	b.n	8018fbe <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	691a      	ldr	r2, [r3, #16]
 8018f4e:	69bb      	ldr	r3, [r7, #24]
 8018f50:	431a      	orrs	r2, r3
 8018f52:	0011      	movs	r1, r2
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	69fa      	ldr	r2, [r7, #28]
 8018f5a:	430a      	orrs	r2, r1
 8018f5c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	69db      	ldr	r3, [r3, #28]
 8018f64:	4a18      	ldr	r2, [pc, #96]	@ (8018fc8 <HAL_I2S_Init+0x1e0>)
 8018f66:	401a      	ands	r2, r3
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	6859      	ldr	r1, [r3, #4]
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	689b      	ldr	r3, [r3, #8]
 8018f70:	4319      	orrs	r1, r3
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	68db      	ldr	r3, [r3, #12]
 8018f76:	4319      	orrs	r1, r3
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	699b      	ldr	r3, [r3, #24]
 8018f7c:	430b      	orrs	r3, r1
 8018f7e:	431a      	orrs	r2, r3
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	2180      	movs	r1, #128	@ 0x80
 8018f86:	0109      	lsls	r1, r1, #4
 8018f88:	430a      	orrs	r2, r1
 8018f8a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	689b      	ldr	r3, [r3, #8]
 8018f90:	2b30      	cmp	r3, #48	@ 0x30
 8018f92:	d003      	beq.n	8018f9c <HAL_I2S_Init+0x1b4>
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	689b      	ldr	r3, [r3, #8]
 8018f98:	2bb0      	cmp	r3, #176	@ 0xb0
 8018f9a:	d108      	bne.n	8018fae <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	69da      	ldr	r2, [r3, #28]
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	2180      	movs	r1, #128	@ 0x80
 8018fa8:	0149      	lsls	r1, r1, #5
 8018faa:	430a      	orrs	r2, r1
 8018fac:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	2200      	movs	r2, #0
 8018fb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	2235      	movs	r2, #53	@ 0x35
 8018fb8:	2101      	movs	r1, #1
 8018fba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018fbc:	2300      	movs	r3, #0
}
 8018fbe:	0018      	movs	r0, r3
 8018fc0:	46bd      	mov	sp, r7
 8018fc2:	b008      	add	sp, #32
 8018fc4:	bd80      	pop	{r7, pc}
 8018fc6:	46c0      	nop			@ (mov r8, r8)
 8018fc8:	fffff040 	.word	0xfffff040

08018fcc <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b086      	sub	sp, #24
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	60f8      	str	r0, [r7, #12]
 8018fd4:	60b9      	str	r1, [r7, #8]
 8018fd6:	1dbb      	adds	r3, r7, #6
 8018fd8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8018fda:	68bb      	ldr	r3, [r7, #8]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d003      	beq.n	8018fe8 <HAL_I2S_Receive_DMA+0x1c>
 8018fe0:	1dbb      	adds	r3, r7, #6
 8018fe2:	881b      	ldrh	r3, [r3, #0]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d101      	bne.n	8018fec <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8018fe8:	2301      	movs	r3, #1
 8018fea:	e0a6      	b.n	801913a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	2234      	movs	r2, #52	@ 0x34
 8018ff0:	5c9b      	ldrb	r3, [r3, r2]
 8018ff2:	b2db      	uxtb	r3, r3
 8018ff4:	2b01      	cmp	r3, #1
 8018ff6:	d101      	bne.n	8018ffc <HAL_I2S_Receive_DMA+0x30>
 8018ff8:	2302      	movs	r3, #2
 8018ffa:	e09e      	b.n	801913a <HAL_I2S_Receive_DMA+0x16e>
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	2234      	movs	r2, #52	@ 0x34
 8019000:	2101      	movs	r1, #1
 8019002:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	2235      	movs	r2, #53	@ 0x35
 8019008:	5c9b      	ldrb	r3, [r3, r2]
 801900a:	b2db      	uxtb	r3, r3
 801900c:	2b01      	cmp	r3, #1
 801900e:	d005      	beq.n	801901c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	2234      	movs	r2, #52	@ 0x34
 8019014:	2100      	movs	r1, #0
 8019016:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8019018:	2302      	movs	r3, #2
 801901a:	e08e      	b.n	801913a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 801901c:	68fb      	ldr	r3, [r7, #12]
 801901e:	2235      	movs	r2, #53	@ 0x35
 8019020:	2104      	movs	r1, #4
 8019022:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8019024:	68fb      	ldr	r3, [r7, #12]
 8019026:	2200      	movs	r2, #0
 8019028:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	68ba      	ldr	r2, [r7, #8]
 801902e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	69db      	ldr	r3, [r3, #28]
 8019036:	2207      	movs	r2, #7
 8019038:	4013      	ands	r3, r2
 801903a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 801903c:	697b      	ldr	r3, [r7, #20]
 801903e:	2b03      	cmp	r3, #3
 8019040:	d002      	beq.n	8019048 <HAL_I2S_Receive_DMA+0x7c>
 8019042:	697b      	ldr	r3, [r7, #20]
 8019044:	2b05      	cmp	r3, #5
 8019046:	d10c      	bne.n	8019062 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8019048:	1dbb      	adds	r3, r7, #6
 801904a:	881b      	ldrh	r3, [r3, #0]
 801904c:	18db      	adds	r3, r3, r3
 801904e:	b29a      	uxth	r2, r3
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8019054:	1dbb      	adds	r3, r7, #6
 8019056:	881b      	ldrh	r3, [r3, #0]
 8019058:	18db      	adds	r3, r3, r3
 801905a:	b29a      	uxth	r2, r3
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8019060:	e007      	b.n	8019072 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	1dba      	adds	r2, r7, #6
 8019066:	8812      	ldrh	r2, [r2, #0]
 8019068:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	1dba      	adds	r2, r7, #6
 801906e:	8812      	ldrh	r2, [r2, #0]
 8019070:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019076:	4a33      	ldr	r2, [pc, #204]	@ (8019144 <HAL_I2S_Receive_DMA+0x178>)
 8019078:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801907e:	4a32      	ldr	r2, [pc, #200]	@ (8019148 <HAL_I2S_Receive_DMA+0x17c>)
 8019080:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019086:	4a31      	ldr	r2, [pc, #196]	@ (801914c <HAL_I2S_Receive_DMA+0x180>)
 8019088:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	69da      	ldr	r2, [r3, #28]
 8019090:	23c0      	movs	r3, #192	@ 0xc0
 8019092:	009b      	lsls	r3, r3, #2
 8019094:	401a      	ands	r2, r3
 8019096:	23c0      	movs	r3, #192	@ 0xc0
 8019098:	009b      	lsls	r3, r3, #2
 801909a:	429a      	cmp	r2, r3
 801909c:	d10a      	bne.n	80190b4 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801909e:	2300      	movs	r3, #0
 80190a0:	613b      	str	r3, [r7, #16]
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	68db      	ldr	r3, [r3, #12]
 80190a8:	613b      	str	r3, [r7, #16]
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	689b      	ldr	r3, [r3, #8]
 80190b0:	613b      	str	r3, [r7, #16]
 80190b2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	330c      	adds	r3, #12
 80190be:	0019      	movs	r1, r3
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190c4:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80190ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80190cc:	f7fc f906 	bl	80152dc <HAL_DMA_Start_IT>
 80190d0:	1e03      	subs	r3, r0, #0
 80190d2:	d00f      	beq.n	80190f4 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80190d8:	2208      	movs	r2, #8
 80190da:	431a      	orrs	r2, r3
 80190dc:	68fb      	ldr	r3, [r7, #12]
 80190de:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	2235      	movs	r2, #53	@ 0x35
 80190e4:	2101      	movs	r1, #1
 80190e6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	2234      	movs	r2, #52	@ 0x34
 80190ec:	2100      	movs	r1, #0
 80190ee:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80190f0:	2301      	movs	r3, #1
 80190f2:	e022      	b.n	801913a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	69da      	ldr	r2, [r3, #28]
 80190fa:	2380      	movs	r3, #128	@ 0x80
 80190fc:	00db      	lsls	r3, r3, #3
 80190fe:	4013      	ands	r3, r2
 8019100:	d108      	bne.n	8019114 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	69da      	ldr	r2, [r3, #28]
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	2180      	movs	r1, #128	@ 0x80
 801910e:	00c9      	lsls	r1, r1, #3
 8019110:	430a      	orrs	r2, r1
 8019112:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	685b      	ldr	r3, [r3, #4]
 801911a:	2201      	movs	r2, #1
 801911c:	4013      	ands	r3, r2
 801911e:	d107      	bne.n	8019130 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	685a      	ldr	r2, [r3, #4]
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	2101      	movs	r1, #1
 801912c:	430a      	orrs	r2, r1
 801912e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	2234      	movs	r2, #52	@ 0x34
 8019134:	2100      	movs	r1, #0
 8019136:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8019138:	2300      	movs	r3, #0
}
 801913a:	0018      	movs	r0, r3
 801913c:	46bd      	mov	sp, r7
 801913e:	b006      	add	sp, #24
 8019140:	bd80      	pop	{r7, pc}
 8019142:	46c0      	nop			@ (mov r8, r8)
 8019144:	0801932d 	.word	0x0801932d
 8019148:	080192e9 	.word	0x080192e9
 801914c:	0801934b 	.word	0x0801934b

08019150 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8019150:	b580      	push	{r7, lr}
 8019152:	b086      	sub	sp, #24
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8019158:	2317      	movs	r3, #23
 801915a:	18fb      	adds	r3, r7, r3
 801915c:	2200      	movs	r2, #0
 801915e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	685a      	ldr	r2, [r3, #4]
 8019164:	2380      	movs	r3, #128	@ 0x80
 8019166:	009b      	lsls	r3, r3, #2
 8019168:	429a      	cmp	r2, r3
 801916a:	d003      	beq.n	8019174 <HAL_I2S_DMAStop+0x24>
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	685b      	ldr	r3, [r3, #4]
 8019170:	2b00      	cmp	r3, #0
 8019172:	d158      	bne.n	8019226 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019178:	2b00      	cmp	r3, #0
 801917a:	d010      	beq.n	801919e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019180:	0018      	movs	r0, r3
 8019182:	f7fc f911 	bl	80153a8 <HAL_DMA_Abort>
 8019186:	1e03      	subs	r3, r0, #0
 8019188:	d009      	beq.n	801919e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801918e:	2208      	movs	r2, #8
 8019190:	431a      	orrs	r2, r3
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8019196:	2317      	movs	r3, #23
 8019198:	18fb      	adds	r3, r7, r3
 801919a:	2201      	movs	r2, #1
 801919c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801919e:	6878      	ldr	r0, [r7, #4]
 80191a0:	2364      	movs	r3, #100	@ 0x64
 80191a2:	2201      	movs	r2, #1
 80191a4:	2102      	movs	r1, #2
 80191a6:	f000 f8f7 	bl	8019398 <I2S_WaitFlagStateUntilTimeout>
 80191aa:	1e03      	subs	r3, r0, #0
 80191ac:	d00d      	beq.n	80191ca <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191b2:	2201      	movs	r2, #1
 80191b4:	431a      	orrs	r2, r3
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	2235      	movs	r2, #53	@ 0x35
 80191be:	2101      	movs	r1, #1
 80191c0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80191c2:	2317      	movs	r3, #23
 80191c4:	18fb      	adds	r3, r7, r3
 80191c6:	2201      	movs	r2, #1
 80191c8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80191ca:	6878      	ldr	r0, [r7, #4]
 80191cc:	2364      	movs	r3, #100	@ 0x64
 80191ce:	2200      	movs	r2, #0
 80191d0:	2180      	movs	r1, #128	@ 0x80
 80191d2:	f000 f8e1 	bl	8019398 <I2S_WaitFlagStateUntilTimeout>
 80191d6:	1e03      	subs	r3, r0, #0
 80191d8:	d00d      	beq.n	80191f6 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191de:	2201      	movs	r2, #1
 80191e0:	431a      	orrs	r2, r3
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	2235      	movs	r2, #53	@ 0x35
 80191ea:	2101      	movs	r1, #1
 80191ec:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80191ee:	2317      	movs	r3, #23
 80191f0:	18fb      	adds	r3, r7, r3
 80191f2:	2201      	movs	r2, #1
 80191f4:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	69da      	ldr	r2, [r3, #28]
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	4938      	ldr	r1, [pc, #224]	@ (80192e4 <HAL_I2S_DMAStop+0x194>)
 8019202:	400a      	ands	r2, r1
 8019204:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8019206:	2300      	movs	r3, #0
 8019208:	613b      	str	r3, [r7, #16]
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	689b      	ldr	r3, [r3, #8]
 8019210:	613b      	str	r3, [r7, #16]
 8019212:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	685a      	ldr	r2, [r3, #4]
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	2102      	movs	r1, #2
 8019220:	438a      	bics	r2, r1
 8019222:	605a      	str	r2, [r3, #4]
 8019224:	e053      	b.n	80192ce <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	685a      	ldr	r2, [r3, #4]
 801922a:	23c0      	movs	r3, #192	@ 0xc0
 801922c:	009b      	lsls	r3, r3, #2
 801922e:	429a      	cmp	r2, r3
 8019230:	d005      	beq.n	801923e <HAL_I2S_DMAStop+0xee>
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	685a      	ldr	r2, [r3, #4]
 8019236:	2380      	movs	r3, #128	@ 0x80
 8019238:	005b      	lsls	r3, r3, #1
 801923a:	429a      	cmp	r2, r3
 801923c:	d147      	bne.n	80192ce <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019242:	2b00      	cmp	r3, #0
 8019244:	d010      	beq.n	8019268 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801924a:	0018      	movs	r0, r3
 801924c:	f7fc f8ac 	bl	80153a8 <HAL_DMA_Abort>
 8019250:	1e03      	subs	r3, r0, #0
 8019252:	d009      	beq.n	8019268 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019258:	2208      	movs	r2, #8
 801925a:	431a      	orrs	r2, r3
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8019260:	2317      	movs	r3, #23
 8019262:	18fb      	adds	r3, r7, r3
 8019264:	2201      	movs	r2, #1
 8019266:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	69da      	ldr	r2, [r3, #28]
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	491c      	ldr	r1, [pc, #112]	@ (80192e4 <HAL_I2S_DMAStop+0x194>)
 8019274:	400a      	ands	r2, r1
 8019276:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8019278:	2300      	movs	r3, #0
 801927a:	60fb      	str	r3, [r7, #12]
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	68db      	ldr	r3, [r3, #12]
 8019282:	60fb      	str	r3, [r7, #12]
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	689b      	ldr	r3, [r3, #8]
 801928a:	60fb      	str	r3, [r7, #12]
 801928c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	685a      	ldr	r2, [r3, #4]
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	2101      	movs	r1, #1
 801929a:	438a      	bics	r2, r1
 801929c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	685a      	ldr	r2, [r3, #4]
 80192a2:	2380      	movs	r3, #128	@ 0x80
 80192a4:	005b      	lsls	r3, r3, #1
 80192a6:	429a      	cmp	r2, r3
 80192a8:	d10e      	bne.n	80192c8 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192ae:	2240      	movs	r2, #64	@ 0x40
 80192b0:	431a      	orrs	r2, r3
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	2235      	movs	r2, #53	@ 0x35
 80192ba:	2101      	movs	r1, #1
 80192bc:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80192be:	2317      	movs	r3, #23
 80192c0:	18fb      	adds	r3, r7, r3
 80192c2:	2201      	movs	r2, #1
 80192c4:	701a      	strb	r2, [r3, #0]
 80192c6:	e002      	b.n	80192ce <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	2235      	movs	r2, #53	@ 0x35
 80192d2:	2101      	movs	r1, #1
 80192d4:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80192d6:	2317      	movs	r3, #23
 80192d8:	18fb      	adds	r3, r7, r3
 80192da:	781b      	ldrb	r3, [r3, #0]
}
 80192dc:	0018      	movs	r0, r3
 80192de:	46bd      	mov	sp, r7
 80192e0:	b006      	add	sp, #24
 80192e2:	bd80      	pop	{r7, pc}
 80192e4:	fffffbff 	.word	0xfffffbff

080192e8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b084      	sub	sp, #16
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192f4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	69db      	ldr	r3, [r3, #28]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d10e      	bne.n	801931c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	685a      	ldr	r2, [r3, #4]
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	2101      	movs	r1, #1
 801930a:	438a      	bics	r2, r1
 801930c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	2200      	movs	r2, #0
 8019312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	2235      	movs	r2, #53	@ 0x35
 8019318:	2101      	movs	r1, #1
 801931a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	0018      	movs	r0, r3
 8019320:	f7f8 fbe6 	bl	8011af0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8019324:	46c0      	nop			@ (mov r8, r8)
 8019326:	46bd      	mov	sp, r7
 8019328:	b004      	add	sp, #16
 801932a:	bd80      	pop	{r7, pc}

0801932c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801932c:	b580      	push	{r7, lr}
 801932e:	b084      	sub	sp, #16
 8019330:	af00      	add	r7, sp, #0
 8019332:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019338:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	0018      	movs	r0, r3
 801933e:	f7f8 fbc5 	bl	8011acc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8019342:	46c0      	nop			@ (mov r8, r8)
 8019344:	46bd      	mov	sp, r7
 8019346:	b004      	add	sp, #16
 8019348:	bd80      	pop	{r7, pc}

0801934a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 801934a:	b580      	push	{r7, lr}
 801934c:	b084      	sub	sp, #16
 801934e:	af00      	add	r7, sp, #0
 8019350:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019356:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	685a      	ldr	r2, [r3, #4]
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	2103      	movs	r1, #3
 8019364:	438a      	bics	r2, r1
 8019366:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	2200      	movs	r2, #0
 801936c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 801936e:	68fb      	ldr	r3, [r7, #12]
 8019370:	2200      	movs	r2, #0
 8019372:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	2235      	movs	r2, #53	@ 0x35
 8019378:	2101      	movs	r1, #1
 801937a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801937c:	68fb      	ldr	r3, [r7, #12]
 801937e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019380:	2208      	movs	r2, #8
 8019382:	431a      	orrs	r2, r3
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	0018      	movs	r0, r3
 801938c:	f7f8 fbfe 	bl	8011b8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8019390:	46c0      	nop			@ (mov r8, r8)
 8019392:	46bd      	mov	sp, r7
 8019394:	b004      	add	sp, #16
 8019396:	bd80      	pop	{r7, pc}

08019398 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b086      	sub	sp, #24
 801939c:	af00      	add	r7, sp, #0
 801939e:	60f8      	str	r0, [r7, #12]
 80193a0:	60b9      	str	r1, [r7, #8]
 80193a2:	603b      	str	r3, [r7, #0]
 80193a4:	1dfb      	adds	r3, r7, #7
 80193a6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80193a8:	f7fb fa64 	bl	8014874 <HAL_GetTick>
 80193ac:	0003      	movs	r3, r0
 80193ae:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80193b0:	e017      	b.n	80193e2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80193b2:	683b      	ldr	r3, [r7, #0]
 80193b4:	3301      	adds	r3, #1
 80193b6:	d014      	beq.n	80193e2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80193b8:	f7fb fa5c 	bl	8014874 <HAL_GetTick>
 80193bc:	0002      	movs	r2, r0
 80193be:	697b      	ldr	r3, [r7, #20]
 80193c0:	1ad3      	subs	r3, r2, r3
 80193c2:	683a      	ldr	r2, [r7, #0]
 80193c4:	429a      	cmp	r2, r3
 80193c6:	d902      	bls.n	80193ce <I2S_WaitFlagStateUntilTimeout+0x36>
 80193c8:	683b      	ldr	r3, [r7, #0]
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d109      	bne.n	80193e2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	2235      	movs	r2, #53	@ 0x35
 80193d2:	2101      	movs	r1, #1
 80193d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	2234      	movs	r2, #52	@ 0x34
 80193da:	2100      	movs	r1, #0
 80193dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80193de:	2303      	movs	r3, #3
 80193e0:	e00f      	b.n	8019402 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	689b      	ldr	r3, [r3, #8]
 80193e8:	68ba      	ldr	r2, [r7, #8]
 80193ea:	4013      	ands	r3, r2
 80193ec:	68ba      	ldr	r2, [r7, #8]
 80193ee:	1ad3      	subs	r3, r2, r3
 80193f0:	425a      	negs	r2, r3
 80193f2:	4153      	adcs	r3, r2
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	001a      	movs	r2, r3
 80193f8:	1dfb      	adds	r3, r7, #7
 80193fa:	781b      	ldrb	r3, [r3, #0]
 80193fc:	429a      	cmp	r2, r3
 80193fe:	d1d8      	bne.n	80193b2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8019400:	2300      	movs	r3, #0
}
 8019402:	0018      	movs	r0, r3
 8019404:	46bd      	mov	sp, r7
 8019406:	b006      	add	sp, #24
 8019408:	bd80      	pop	{r7, pc}
	...

0801940c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801940c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801940e:	b08b      	sub	sp, #44	@ 0x2c
 8019410:	af06      	add	r7, sp, #24
 8019412:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d101      	bne.n	801941e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801941a:	2301      	movs	r3, #1
 801941c:	e0f0      	b.n	8019600 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	4a79      	ldr	r2, [pc, #484]	@ (8019608 <HAL_PCD_Init+0x1fc>)
 8019422:	5c9b      	ldrb	r3, [r3, r2]
 8019424:	b2db      	uxtb	r3, r3
 8019426:	2b00      	cmp	r3, #0
 8019428:	d108      	bne.n	801943c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801942a:	687a      	ldr	r2, [r7, #4]
 801942c:	23aa      	movs	r3, #170	@ 0xaa
 801942e:	009b      	lsls	r3, r3, #2
 8019430:	2100      	movs	r1, #0
 8019432:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	0018      	movs	r0, r3
 8019438:	f009 ff60 	bl	80232fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	4a72      	ldr	r2, [pc, #456]	@ (8019608 <HAL_PCD_Init+0x1fc>)
 8019440:	2103      	movs	r1, #3
 8019442:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	0018      	movs	r0, r3
 801944a:	f005 ff05 	bl	801f258 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801944e:	230f      	movs	r3, #15
 8019450:	18fb      	adds	r3, r7, r3
 8019452:	2200      	movs	r2, #0
 8019454:	701a      	strb	r2, [r3, #0]
 8019456:	e049      	b.n	80194ec <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019458:	200f      	movs	r0, #15
 801945a:	183b      	adds	r3, r7, r0
 801945c:	781b      	ldrb	r3, [r3, #0]
 801945e:	6879      	ldr	r1, [r7, #4]
 8019460:	1c5a      	adds	r2, r3, #1
 8019462:	0013      	movs	r3, r2
 8019464:	009b      	lsls	r3, r3, #2
 8019466:	189b      	adds	r3, r3, r2
 8019468:	00db      	lsls	r3, r3, #3
 801946a:	18cb      	adds	r3, r1, r3
 801946c:	3301      	adds	r3, #1
 801946e:	2201      	movs	r2, #1
 8019470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8019472:	183b      	adds	r3, r7, r0
 8019474:	781b      	ldrb	r3, [r3, #0]
 8019476:	6879      	ldr	r1, [r7, #4]
 8019478:	1c5a      	adds	r2, r3, #1
 801947a:	0013      	movs	r3, r2
 801947c:	009b      	lsls	r3, r3, #2
 801947e:	189b      	adds	r3, r3, r2
 8019480:	00db      	lsls	r3, r3, #3
 8019482:	183a      	adds	r2, r7, r0
 8019484:	7812      	ldrb	r2, [r2, #0]
 8019486:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019488:	183b      	adds	r3, r7, r0
 801948a:	781b      	ldrb	r3, [r3, #0]
 801948c:	6879      	ldr	r1, [r7, #4]
 801948e:	1c5a      	adds	r2, r3, #1
 8019490:	0013      	movs	r3, r2
 8019492:	009b      	lsls	r3, r3, #2
 8019494:	189b      	adds	r3, r3, r2
 8019496:	00db      	lsls	r3, r3, #3
 8019498:	18cb      	adds	r3, r1, r3
 801949a:	3303      	adds	r3, #3
 801949c:	2200      	movs	r2, #0
 801949e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80194a0:	183b      	adds	r3, r7, r0
 80194a2:	781a      	ldrb	r2, [r3, #0]
 80194a4:	6879      	ldr	r1, [r7, #4]
 80194a6:	0013      	movs	r3, r2
 80194a8:	009b      	lsls	r3, r3, #2
 80194aa:	189b      	adds	r3, r3, r2
 80194ac:	00db      	lsls	r3, r3, #3
 80194ae:	18cb      	adds	r3, r1, r3
 80194b0:	3338      	adds	r3, #56	@ 0x38
 80194b2:	2200      	movs	r2, #0
 80194b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80194b6:	183b      	adds	r3, r7, r0
 80194b8:	781a      	ldrb	r2, [r3, #0]
 80194ba:	6879      	ldr	r1, [r7, #4]
 80194bc:	0013      	movs	r3, r2
 80194be:	009b      	lsls	r3, r3, #2
 80194c0:	189b      	adds	r3, r3, r2
 80194c2:	00db      	lsls	r3, r3, #3
 80194c4:	18cb      	adds	r3, r1, r3
 80194c6:	333c      	adds	r3, #60	@ 0x3c
 80194c8:	2200      	movs	r2, #0
 80194ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80194cc:	183b      	adds	r3, r7, r0
 80194ce:	781a      	ldrb	r2, [r3, #0]
 80194d0:	6879      	ldr	r1, [r7, #4]
 80194d2:	0013      	movs	r3, r2
 80194d4:	009b      	lsls	r3, r3, #2
 80194d6:	189b      	adds	r3, r3, r2
 80194d8:	00db      	lsls	r3, r3, #3
 80194da:	18cb      	adds	r3, r1, r3
 80194dc:	3340      	adds	r3, #64	@ 0x40
 80194de:	2200      	movs	r2, #0
 80194e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80194e2:	183b      	adds	r3, r7, r0
 80194e4:	781a      	ldrb	r2, [r3, #0]
 80194e6:	183b      	adds	r3, r7, r0
 80194e8:	3201      	adds	r2, #1
 80194ea:	701a      	strb	r2, [r3, #0]
 80194ec:	210f      	movs	r1, #15
 80194ee:	187b      	adds	r3, r7, r1
 80194f0:	781a      	ldrb	r2, [r3, #0]
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	685b      	ldr	r3, [r3, #4]
 80194f6:	429a      	cmp	r2, r3
 80194f8:	d3ae      	bcc.n	8019458 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80194fa:	187b      	adds	r3, r7, r1
 80194fc:	2200      	movs	r2, #0
 80194fe:	701a      	strb	r2, [r3, #0]
 8019500:	e056      	b.n	80195b0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019502:	240f      	movs	r4, #15
 8019504:	193b      	adds	r3, r7, r4
 8019506:	781a      	ldrb	r2, [r3, #0]
 8019508:	6878      	ldr	r0, [r7, #4]
 801950a:	236a      	movs	r3, #106	@ 0x6a
 801950c:	33ff      	adds	r3, #255	@ 0xff
 801950e:	0019      	movs	r1, r3
 8019510:	0013      	movs	r3, r2
 8019512:	009b      	lsls	r3, r3, #2
 8019514:	189b      	adds	r3, r3, r2
 8019516:	00db      	lsls	r3, r3, #3
 8019518:	18c3      	adds	r3, r0, r3
 801951a:	185b      	adds	r3, r3, r1
 801951c:	2200      	movs	r2, #0
 801951e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019520:	193b      	adds	r3, r7, r4
 8019522:	781a      	ldrb	r2, [r3, #0]
 8019524:	6878      	ldr	r0, [r7, #4]
 8019526:	23b4      	movs	r3, #180	@ 0xb4
 8019528:	0059      	lsls	r1, r3, #1
 801952a:	0013      	movs	r3, r2
 801952c:	009b      	lsls	r3, r3, #2
 801952e:	189b      	adds	r3, r3, r2
 8019530:	00db      	lsls	r3, r3, #3
 8019532:	18c3      	adds	r3, r0, r3
 8019534:	185b      	adds	r3, r3, r1
 8019536:	193a      	adds	r2, r7, r4
 8019538:	7812      	ldrb	r2, [r2, #0]
 801953a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801953c:	193b      	adds	r3, r7, r4
 801953e:	781a      	ldrb	r2, [r3, #0]
 8019540:	6878      	ldr	r0, [r7, #4]
 8019542:	236c      	movs	r3, #108	@ 0x6c
 8019544:	33ff      	adds	r3, #255	@ 0xff
 8019546:	0019      	movs	r1, r3
 8019548:	0013      	movs	r3, r2
 801954a:	009b      	lsls	r3, r3, #2
 801954c:	189b      	adds	r3, r3, r2
 801954e:	00db      	lsls	r3, r3, #3
 8019550:	18c3      	adds	r3, r0, r3
 8019552:	185b      	adds	r3, r3, r1
 8019554:	2200      	movs	r2, #0
 8019556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019558:	193b      	adds	r3, r7, r4
 801955a:	781a      	ldrb	r2, [r3, #0]
 801955c:	6878      	ldr	r0, [r7, #4]
 801955e:	23bc      	movs	r3, #188	@ 0xbc
 8019560:	0059      	lsls	r1, r3, #1
 8019562:	0013      	movs	r3, r2
 8019564:	009b      	lsls	r3, r3, #2
 8019566:	189b      	adds	r3, r3, r2
 8019568:	00db      	lsls	r3, r3, #3
 801956a:	18c3      	adds	r3, r0, r3
 801956c:	185b      	adds	r3, r3, r1
 801956e:	2200      	movs	r2, #0
 8019570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019572:	193b      	adds	r3, r7, r4
 8019574:	781a      	ldrb	r2, [r3, #0]
 8019576:	6878      	ldr	r0, [r7, #4]
 8019578:	23be      	movs	r3, #190	@ 0xbe
 801957a:	0059      	lsls	r1, r3, #1
 801957c:	0013      	movs	r3, r2
 801957e:	009b      	lsls	r3, r3, #2
 8019580:	189b      	adds	r3, r3, r2
 8019582:	00db      	lsls	r3, r3, #3
 8019584:	18c3      	adds	r3, r0, r3
 8019586:	185b      	adds	r3, r3, r1
 8019588:	2200      	movs	r2, #0
 801958a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801958c:	193b      	adds	r3, r7, r4
 801958e:	781a      	ldrb	r2, [r3, #0]
 8019590:	6878      	ldr	r0, [r7, #4]
 8019592:	23c0      	movs	r3, #192	@ 0xc0
 8019594:	0059      	lsls	r1, r3, #1
 8019596:	0013      	movs	r3, r2
 8019598:	009b      	lsls	r3, r3, #2
 801959a:	189b      	adds	r3, r3, r2
 801959c:	00db      	lsls	r3, r3, #3
 801959e:	18c3      	adds	r3, r0, r3
 80195a0:	185b      	adds	r3, r3, r1
 80195a2:	2200      	movs	r2, #0
 80195a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80195a6:	193b      	adds	r3, r7, r4
 80195a8:	781a      	ldrb	r2, [r3, #0]
 80195aa:	193b      	adds	r3, r7, r4
 80195ac:	3201      	adds	r2, #1
 80195ae:	701a      	strb	r2, [r3, #0]
 80195b0:	230f      	movs	r3, #15
 80195b2:	18fb      	adds	r3, r7, r3
 80195b4:	781a      	ldrb	r2, [r3, #0]
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	685b      	ldr	r3, [r3, #4]
 80195ba:	429a      	cmp	r2, r3
 80195bc:	d3a1      	bcc.n	8019502 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	6818      	ldr	r0, [r3, #0]
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	466a      	mov	r2, sp
 80195c6:	0011      	movs	r1, r2
 80195c8:	001a      	movs	r2, r3
 80195ca:	3210      	adds	r2, #16
 80195cc:	ca70      	ldmia	r2!, {r4, r5, r6}
 80195ce:	c170      	stmia	r1!, {r4, r5, r6}
 80195d0:	ca30      	ldmia	r2!, {r4, r5}
 80195d2:	c130      	stmia	r1!, {r4, r5}
 80195d4:	6859      	ldr	r1, [r3, #4]
 80195d6:	689a      	ldr	r2, [r3, #8]
 80195d8:	68db      	ldr	r3, [r3, #12]
 80195da:	f005 fe57 	bl	801f28c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	2224      	movs	r2, #36	@ 0x24
 80195e2:	2100      	movs	r1, #0
 80195e4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	4a07      	ldr	r2, [pc, #28]	@ (8019608 <HAL_PCD_Init+0x1fc>)
 80195ea:	2101      	movs	r1, #1
 80195ec:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	69db      	ldr	r3, [r3, #28]
 80195f2:	2b01      	cmp	r3, #1
 80195f4:	d103      	bne.n	80195fe <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	0018      	movs	r0, r3
 80195fa:	f001 fd23 	bl	801b044 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80195fe:	2300      	movs	r3, #0
}
 8019600:	0018      	movs	r0, r3
 8019602:	46bd      	mov	sp, r7
 8019604:	b005      	add	sp, #20
 8019606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019608:	000002a9 	.word	0x000002a9

0801960c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801960c:	b580      	push	{r7, lr}
 801960e:	b082      	sub	sp, #8
 8019610:	af00      	add	r7, sp, #0
 8019612:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8019614:	687a      	ldr	r2, [r7, #4]
 8019616:	23aa      	movs	r3, #170	@ 0xaa
 8019618:	009b      	lsls	r3, r3, #2
 801961a:	5cd3      	ldrb	r3, [r2, r3]
 801961c:	2b01      	cmp	r3, #1
 801961e:	d101      	bne.n	8019624 <HAL_PCD_Start+0x18>
 8019620:	2302      	movs	r3, #2
 8019622:	e014      	b.n	801964e <HAL_PCD_Start+0x42>
 8019624:	687a      	ldr	r2, [r7, #4]
 8019626:	23aa      	movs	r3, #170	@ 0xaa
 8019628:	009b      	lsls	r3, r3, #2
 801962a:	2101      	movs	r1, #1
 801962c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	0018      	movs	r0, r3
 8019634:	f005 fdfa 	bl	801f22c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	0018      	movs	r0, r3
 801963e:	f007 fdfd 	bl	802123c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8019642:	687a      	ldr	r2, [r7, #4]
 8019644:	23aa      	movs	r3, #170	@ 0xaa
 8019646:	009b      	lsls	r3, r3, #2
 8019648:	2100      	movs	r1, #0
 801964a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801964c:	2300      	movs	r3, #0
}
 801964e:	0018      	movs	r0, r3
 8019650:	46bd      	mov	sp, r7
 8019652:	b002      	add	sp, #8
 8019654:	bd80      	pop	{r7, pc}
	...

08019658 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b084      	sub	sp, #16
 801965c:	af00      	add	r7, sp, #0
 801965e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	0018      	movs	r0, r3
 8019666:	f007 fdff 	bl	8021268 <USB_ReadInterrupts>
 801966a:	0003      	movs	r3, r0
 801966c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801966e:	68fa      	ldr	r2, [r7, #12]
 8019670:	2380      	movs	r3, #128	@ 0x80
 8019672:	021b      	lsls	r3, r3, #8
 8019674:	4013      	ands	r3, r2
 8019676:	d004      	beq.n	8019682 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	0018      	movs	r0, r3
 801967c:	f000 fb62 	bl	8019d44 <PCD_EP_ISR_Handler>

    return;
 8019680:	e11d      	b.n	80198be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8019682:	68fa      	ldr	r2, [r7, #12]
 8019684:	2380      	movs	r3, #128	@ 0x80
 8019686:	00db      	lsls	r3, r3, #3
 8019688:	4013      	ands	r3, r2
 801968a:	d015      	beq.n	80196b8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	2244      	movs	r2, #68	@ 0x44
 8019692:	5a9b      	ldrh	r3, [r3, r2]
 8019694:	b29a      	uxth	r2, r3
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	498a      	ldr	r1, [pc, #552]	@ (80198c4 <HAL_PCD_IRQHandler+0x26c>)
 801969c:	400a      	ands	r2, r1
 801969e:	b291      	uxth	r1, r2
 80196a0:	2244      	movs	r2, #68	@ 0x44
 80196a2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	0018      	movs	r0, r3
 80196a8:	f009 feab 	bl	8023402 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	2100      	movs	r1, #0
 80196b0:	0018      	movs	r0, r3
 80196b2:	f000 f915 	bl	80198e0 <HAL_PCD_SetAddress>

    return;
 80196b6:	e102      	b.n	80198be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80196b8:	68fa      	ldr	r2, [r7, #12]
 80196ba:	2380      	movs	r3, #128	@ 0x80
 80196bc:	01db      	lsls	r3, r3, #7
 80196be:	4013      	ands	r3, r2
 80196c0:	d00c      	beq.n	80196dc <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	2244      	movs	r2, #68	@ 0x44
 80196c8:	5a9b      	ldrh	r3, [r3, r2]
 80196ca:	b29a      	uxth	r2, r3
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	497d      	ldr	r1, [pc, #500]	@ (80198c8 <HAL_PCD_IRQHandler+0x270>)
 80196d2:	400a      	ands	r2, r1
 80196d4:	b291      	uxth	r1, r2
 80196d6:	2244      	movs	r2, #68	@ 0x44
 80196d8:	5299      	strh	r1, [r3, r2]

    return;
 80196da:	e0f0      	b.n	80198be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80196dc:	68fa      	ldr	r2, [r7, #12]
 80196de:	2380      	movs	r3, #128	@ 0x80
 80196e0:	019b      	lsls	r3, r3, #6
 80196e2:	4013      	ands	r3, r2
 80196e4:	d00c      	beq.n	8019700 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	2244      	movs	r2, #68	@ 0x44
 80196ec:	5a9b      	ldrh	r3, [r3, r2]
 80196ee:	b29a      	uxth	r2, r3
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	4975      	ldr	r1, [pc, #468]	@ (80198cc <HAL_PCD_IRQHandler+0x274>)
 80196f6:	400a      	ands	r2, r1
 80196f8:	b291      	uxth	r1, r2
 80196fa:	2244      	movs	r2, #68	@ 0x44
 80196fc:	5299      	strh	r1, [r3, r2]

    return;
 80196fe:	e0de      	b.n	80198be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8019700:	68fa      	ldr	r2, [r7, #12]
 8019702:	2380      	movs	r3, #128	@ 0x80
 8019704:	015b      	lsls	r3, r3, #5
 8019706:	4013      	ands	r3, r2
 8019708:	d038      	beq.n	801977c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	2240      	movs	r2, #64	@ 0x40
 8019710:	5a9b      	ldrh	r3, [r3, r2]
 8019712:	b29a      	uxth	r2, r3
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	2104      	movs	r1, #4
 801971a:	438a      	bics	r2, r1
 801971c:	b291      	uxth	r1, r2
 801971e:	2240      	movs	r2, #64	@ 0x40
 8019720:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	2240      	movs	r2, #64	@ 0x40
 8019728:	5a9b      	ldrh	r3, [r3, r2]
 801972a:	b29a      	uxth	r2, r3
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	2108      	movs	r1, #8
 8019732:	438a      	bics	r2, r1
 8019734:	b291      	uxth	r1, r2
 8019736:	2240      	movs	r2, #64	@ 0x40
 8019738:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 801973a:	687a      	ldr	r2, [r7, #4]
 801973c:	23b8      	movs	r3, #184	@ 0xb8
 801973e:	009b      	lsls	r3, r3, #2
 8019740:	5cd3      	ldrb	r3, [r2, r3]
 8019742:	2b01      	cmp	r3, #1
 8019744:	d109      	bne.n	801975a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8019746:	687a      	ldr	r2, [r7, #4]
 8019748:	23b8      	movs	r3, #184	@ 0xb8
 801974a:	009b      	lsls	r3, r3, #2
 801974c:	2100      	movs	r1, #0
 801974e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	2100      	movs	r1, #0
 8019754:	0018      	movs	r0, r3
 8019756:	f001 fc9f 	bl	801b098 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	0018      	movs	r0, r3
 801975e:	f009 fe91 	bl	8023484 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	2244      	movs	r2, #68	@ 0x44
 8019768:	5a9b      	ldrh	r3, [r3, r2]
 801976a:	b29a      	uxth	r2, r3
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	4957      	ldr	r1, [pc, #348]	@ (80198d0 <HAL_PCD_IRQHandler+0x278>)
 8019772:	400a      	ands	r2, r1
 8019774:	b291      	uxth	r1, r2
 8019776:	2244      	movs	r2, #68	@ 0x44
 8019778:	5299      	strh	r1, [r3, r2]

    return;
 801977a:	e0a0      	b.n	80198be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 801977c:	68fa      	ldr	r2, [r7, #12]
 801977e:	2380      	movs	r3, #128	@ 0x80
 8019780:	011b      	lsls	r3, r3, #4
 8019782:	4013      	ands	r3, r2
 8019784:	d028      	beq.n	80197d8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	2240      	movs	r2, #64	@ 0x40
 801978c:	5a9b      	ldrh	r3, [r3, r2]
 801978e:	b29a      	uxth	r2, r3
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	2108      	movs	r1, #8
 8019796:	430a      	orrs	r2, r1
 8019798:	b291      	uxth	r1, r2
 801979a:	2240      	movs	r2, #64	@ 0x40
 801979c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	2244      	movs	r2, #68	@ 0x44
 80197a4:	5a9b      	ldrh	r3, [r3, r2]
 80197a6:	b29a      	uxth	r2, r3
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	4949      	ldr	r1, [pc, #292]	@ (80198d4 <HAL_PCD_IRQHandler+0x27c>)
 80197ae:	400a      	ands	r2, r1
 80197b0:	b291      	uxth	r1, r2
 80197b2:	2244      	movs	r2, #68	@ 0x44
 80197b4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	2240      	movs	r2, #64	@ 0x40
 80197bc:	5a9b      	ldrh	r3, [r3, r2]
 80197be:	b29a      	uxth	r2, r3
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	2104      	movs	r1, #4
 80197c6:	430a      	orrs	r2, r1
 80197c8:	b291      	uxth	r1, r2
 80197ca:	2240      	movs	r2, #64	@ 0x40
 80197cc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	0018      	movs	r0, r3
 80197d2:	f009 fe3b 	bl	802344c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80197d6:	e072      	b.n	80198be <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	2280      	movs	r2, #128	@ 0x80
 80197dc:	4013      	ands	r3, r2
 80197de:	d046      	beq.n	801986e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	2244      	movs	r2, #68	@ 0x44
 80197e6:	5a9b      	ldrh	r3, [r3, r2]
 80197e8:	b29a      	uxth	r2, r3
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	2180      	movs	r1, #128	@ 0x80
 80197f0:	438a      	bics	r2, r1
 80197f2:	b291      	uxth	r1, r2
 80197f4:	2244      	movs	r2, #68	@ 0x44
 80197f6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80197f8:	687a      	ldr	r2, [r7, #4]
 80197fa:	23b8      	movs	r3, #184	@ 0xb8
 80197fc:	009b      	lsls	r3, r3, #2
 80197fe:	5cd3      	ldrb	r3, [r2, r3]
 8019800:	2b00      	cmp	r3, #0
 8019802:	d12f      	bne.n	8019864 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	2240      	movs	r2, #64	@ 0x40
 801980a:	5a9b      	ldrh	r3, [r3, r2]
 801980c:	b29a      	uxth	r2, r3
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	2104      	movs	r1, #4
 8019814:	430a      	orrs	r2, r1
 8019816:	b291      	uxth	r1, r2
 8019818:	2240      	movs	r2, #64	@ 0x40
 801981a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	2240      	movs	r2, #64	@ 0x40
 8019822:	5a9b      	ldrh	r3, [r3, r2]
 8019824:	b29a      	uxth	r2, r3
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	2108      	movs	r1, #8
 801982c:	430a      	orrs	r2, r1
 801982e:	b291      	uxth	r1, r2
 8019830:	2240      	movs	r2, #64	@ 0x40
 8019832:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8019834:	687a      	ldr	r2, [r7, #4]
 8019836:	23b8      	movs	r3, #184	@ 0xb8
 8019838:	009b      	lsls	r3, r3, #2
 801983a:	2101      	movs	r1, #1
 801983c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	2254      	movs	r2, #84	@ 0x54
 8019844:	5a9b      	ldrh	r3, [r3, r2]
 8019846:	b29b      	uxth	r3, r3
 8019848:	089b      	lsrs	r3, r3, #2
 801984a:	223c      	movs	r2, #60	@ 0x3c
 801984c:	4013      	ands	r3, r2
 801984e:	0019      	movs	r1, r3
 8019850:	687a      	ldr	r2, [r7, #4]
 8019852:	23b9      	movs	r3, #185	@ 0xb9
 8019854:	009b      	lsls	r3, r3, #2
 8019856:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	2101      	movs	r1, #1
 801985c:	0018      	movs	r0, r3
 801985e:	f001 fc1b 	bl	801b098 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8019862:	e02c      	b.n	80198be <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	0018      	movs	r0, r3
 8019868:	f009 fdf0 	bl	802344c <HAL_PCD_SuspendCallback>
    return;
 801986c:	e027      	b.n	80198be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 801986e:	68fa      	ldr	r2, [r7, #12]
 8019870:	2380      	movs	r3, #128	@ 0x80
 8019872:	009b      	lsls	r3, r3, #2
 8019874:	4013      	ands	r3, r2
 8019876:	d010      	beq.n	801989a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	2244      	movs	r2, #68	@ 0x44
 801987e:	5a9b      	ldrh	r3, [r3, r2]
 8019880:	b29a      	uxth	r2, r3
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	4914      	ldr	r1, [pc, #80]	@ (80198d8 <HAL_PCD_IRQHandler+0x280>)
 8019888:	400a      	ands	r2, r1
 801988a:	b291      	uxth	r1, r2
 801988c:	2244      	movs	r2, #68	@ 0x44
 801988e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	0018      	movs	r0, r3
 8019894:	f009 fda6 	bl	80233e4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8019898:	e011      	b.n	80198be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801989a:	68fa      	ldr	r2, [r7, #12]
 801989c:	2380      	movs	r3, #128	@ 0x80
 801989e:	005b      	lsls	r3, r3, #1
 80198a0:	4013      	ands	r3, r2
 80198a2:	d00c      	beq.n	80198be <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	2244      	movs	r2, #68	@ 0x44
 80198aa:	5a9b      	ldrh	r3, [r3, r2]
 80198ac:	b29a      	uxth	r2, r3
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	490a      	ldr	r1, [pc, #40]	@ (80198dc <HAL_PCD_IRQHandler+0x284>)
 80198b4:	400a      	ands	r2, r1
 80198b6:	b291      	uxth	r1, r2
 80198b8:	2244      	movs	r2, #68	@ 0x44
 80198ba:	5299      	strh	r1, [r3, r2]

    return;
 80198bc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80198be:	46bd      	mov	sp, r7
 80198c0:	b004      	add	sp, #16
 80198c2:	bd80      	pop	{r7, pc}
 80198c4:	fffffbff 	.word	0xfffffbff
 80198c8:	ffffbfff 	.word	0xffffbfff
 80198cc:	ffffdfff 	.word	0xffffdfff
 80198d0:	ffffefff 	.word	0xffffefff
 80198d4:	fffff7ff 	.word	0xfffff7ff
 80198d8:	fffffdff 	.word	0xfffffdff
 80198dc:	fffffeff 	.word	0xfffffeff

080198e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80198e0:	b580      	push	{r7, lr}
 80198e2:	b082      	sub	sp, #8
 80198e4:	af00      	add	r7, sp, #0
 80198e6:	6078      	str	r0, [r7, #4]
 80198e8:	000a      	movs	r2, r1
 80198ea:	1cfb      	adds	r3, r7, #3
 80198ec:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80198ee:	687a      	ldr	r2, [r7, #4]
 80198f0:	23aa      	movs	r3, #170	@ 0xaa
 80198f2:	009b      	lsls	r3, r3, #2
 80198f4:	5cd3      	ldrb	r3, [r2, r3]
 80198f6:	2b01      	cmp	r3, #1
 80198f8:	d101      	bne.n	80198fe <HAL_PCD_SetAddress+0x1e>
 80198fa:	2302      	movs	r3, #2
 80198fc:	e017      	b.n	801992e <HAL_PCD_SetAddress+0x4e>
 80198fe:	687a      	ldr	r2, [r7, #4]
 8019900:	23aa      	movs	r3, #170	@ 0xaa
 8019902:	009b      	lsls	r3, r3, #2
 8019904:	2101      	movs	r1, #1
 8019906:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	1cfa      	adds	r2, r7, #3
 801990c:	2124      	movs	r1, #36	@ 0x24
 801990e:	7812      	ldrb	r2, [r2, #0]
 8019910:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	681a      	ldr	r2, [r3, #0]
 8019916:	1cfb      	adds	r3, r7, #3
 8019918:	781b      	ldrb	r3, [r3, #0]
 801991a:	0019      	movs	r1, r3
 801991c:	0010      	movs	r0, r2
 801991e:	f007 fc79 	bl	8021214 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8019922:	687a      	ldr	r2, [r7, #4]
 8019924:	23aa      	movs	r3, #170	@ 0xaa
 8019926:	009b      	lsls	r3, r3, #2
 8019928:	2100      	movs	r1, #0
 801992a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801992c:	2300      	movs	r3, #0
}
 801992e:	0018      	movs	r0, r3
 8019930:	46bd      	mov	sp, r7
 8019932:	b002      	add	sp, #8
 8019934:	bd80      	pop	{r7, pc}

08019936 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8019936:	b590      	push	{r4, r7, lr}
 8019938:	b085      	sub	sp, #20
 801993a:	af00      	add	r7, sp, #0
 801993c:	6078      	str	r0, [r7, #4]
 801993e:	000c      	movs	r4, r1
 8019940:	0010      	movs	r0, r2
 8019942:	0019      	movs	r1, r3
 8019944:	1cfb      	adds	r3, r7, #3
 8019946:	1c22      	adds	r2, r4, #0
 8019948:	701a      	strb	r2, [r3, #0]
 801994a:	003b      	movs	r3, r7
 801994c:	1c02      	adds	r2, r0, #0
 801994e:	801a      	strh	r2, [r3, #0]
 8019950:	1cbb      	adds	r3, r7, #2
 8019952:	1c0a      	adds	r2, r1, #0
 8019954:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8019956:	230b      	movs	r3, #11
 8019958:	18fb      	adds	r3, r7, r3
 801995a:	2200      	movs	r2, #0
 801995c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801995e:	1cfb      	adds	r3, r7, #3
 8019960:	781b      	ldrb	r3, [r3, #0]
 8019962:	b25b      	sxtb	r3, r3
 8019964:	2b00      	cmp	r3, #0
 8019966:	da0f      	bge.n	8019988 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019968:	1cfb      	adds	r3, r7, #3
 801996a:	781b      	ldrb	r3, [r3, #0]
 801996c:	2207      	movs	r2, #7
 801996e:	4013      	ands	r3, r2
 8019970:	1c5a      	adds	r2, r3, #1
 8019972:	0013      	movs	r3, r2
 8019974:	009b      	lsls	r3, r3, #2
 8019976:	189b      	adds	r3, r3, r2
 8019978:	00db      	lsls	r3, r3, #3
 801997a:	687a      	ldr	r2, [r7, #4]
 801997c:	18d3      	adds	r3, r2, r3
 801997e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	2201      	movs	r2, #1
 8019984:	705a      	strb	r2, [r3, #1]
 8019986:	e00f      	b.n	80199a8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019988:	1cfb      	adds	r3, r7, #3
 801998a:	781b      	ldrb	r3, [r3, #0]
 801998c:	2207      	movs	r2, #7
 801998e:	401a      	ands	r2, r3
 8019990:	0013      	movs	r3, r2
 8019992:	009b      	lsls	r3, r3, #2
 8019994:	189b      	adds	r3, r3, r2
 8019996:	00db      	lsls	r3, r3, #3
 8019998:	3369      	adds	r3, #105	@ 0x69
 801999a:	33ff      	adds	r3, #255	@ 0xff
 801999c:	687a      	ldr	r2, [r7, #4]
 801999e:	18d3      	adds	r3, r2, r3
 80199a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	2200      	movs	r2, #0
 80199a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80199a8:	1cfb      	adds	r3, r7, #3
 80199aa:	781b      	ldrb	r3, [r3, #0]
 80199ac:	2207      	movs	r2, #7
 80199ae:	4013      	ands	r3, r2
 80199b0:	b2da      	uxtb	r2, r3
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80199b6:	003b      	movs	r3, r7
 80199b8:	881a      	ldrh	r2, [r3, #0]
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	1cba      	adds	r2, r7, #2
 80199c2:	7812      	ldrb	r2, [r2, #0]
 80199c4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80199c6:	1cbb      	adds	r3, r7, #2
 80199c8:	781b      	ldrb	r3, [r3, #0]
 80199ca:	2b02      	cmp	r3, #2
 80199cc:	d102      	bne.n	80199d4 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	2200      	movs	r2, #0
 80199d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80199d4:	687a      	ldr	r2, [r7, #4]
 80199d6:	23aa      	movs	r3, #170	@ 0xaa
 80199d8:	009b      	lsls	r3, r3, #2
 80199da:	5cd3      	ldrb	r3, [r2, r3]
 80199dc:	2b01      	cmp	r3, #1
 80199de:	d101      	bne.n	80199e4 <HAL_PCD_EP_Open+0xae>
 80199e0:	2302      	movs	r3, #2
 80199e2:	e013      	b.n	8019a0c <HAL_PCD_EP_Open+0xd6>
 80199e4:	687a      	ldr	r2, [r7, #4]
 80199e6:	23aa      	movs	r3, #170	@ 0xaa
 80199e8:	009b      	lsls	r3, r3, #2
 80199ea:	2101      	movs	r1, #1
 80199ec:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	68fa      	ldr	r2, [r7, #12]
 80199f4:	0011      	movs	r1, r2
 80199f6:	0018      	movs	r0, r3
 80199f8:	f005 fc70 	bl	801f2dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80199fc:	687a      	ldr	r2, [r7, #4]
 80199fe:	23aa      	movs	r3, #170	@ 0xaa
 8019a00:	009b      	lsls	r3, r3, #2
 8019a02:	2100      	movs	r1, #0
 8019a04:	54d1      	strb	r1, [r2, r3]

  return ret;
 8019a06:	230b      	movs	r3, #11
 8019a08:	18fb      	adds	r3, r7, r3
 8019a0a:	781b      	ldrb	r3, [r3, #0]
}
 8019a0c:	0018      	movs	r0, r3
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	b005      	add	sp, #20
 8019a12:	bd90      	pop	{r4, r7, pc}

08019a14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019a14:	b580      	push	{r7, lr}
 8019a16:	b084      	sub	sp, #16
 8019a18:	af00      	add	r7, sp, #0
 8019a1a:	6078      	str	r0, [r7, #4]
 8019a1c:	000a      	movs	r2, r1
 8019a1e:	1cfb      	adds	r3, r7, #3
 8019a20:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019a22:	1cfb      	adds	r3, r7, #3
 8019a24:	781b      	ldrb	r3, [r3, #0]
 8019a26:	b25b      	sxtb	r3, r3
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	da0f      	bge.n	8019a4c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019a2c:	1cfb      	adds	r3, r7, #3
 8019a2e:	781b      	ldrb	r3, [r3, #0]
 8019a30:	2207      	movs	r2, #7
 8019a32:	4013      	ands	r3, r2
 8019a34:	1c5a      	adds	r2, r3, #1
 8019a36:	0013      	movs	r3, r2
 8019a38:	009b      	lsls	r3, r3, #2
 8019a3a:	189b      	adds	r3, r3, r2
 8019a3c:	00db      	lsls	r3, r3, #3
 8019a3e:	687a      	ldr	r2, [r7, #4]
 8019a40:	18d3      	adds	r3, r2, r3
 8019a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	2201      	movs	r2, #1
 8019a48:	705a      	strb	r2, [r3, #1]
 8019a4a:	e00f      	b.n	8019a6c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019a4c:	1cfb      	adds	r3, r7, #3
 8019a4e:	781b      	ldrb	r3, [r3, #0]
 8019a50:	2207      	movs	r2, #7
 8019a52:	401a      	ands	r2, r3
 8019a54:	0013      	movs	r3, r2
 8019a56:	009b      	lsls	r3, r3, #2
 8019a58:	189b      	adds	r3, r3, r2
 8019a5a:	00db      	lsls	r3, r3, #3
 8019a5c:	3369      	adds	r3, #105	@ 0x69
 8019a5e:	33ff      	adds	r3, #255	@ 0xff
 8019a60:	687a      	ldr	r2, [r7, #4]
 8019a62:	18d3      	adds	r3, r2, r3
 8019a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	2200      	movs	r2, #0
 8019a6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8019a6c:	1cfb      	adds	r3, r7, #3
 8019a6e:	781b      	ldrb	r3, [r3, #0]
 8019a70:	2207      	movs	r2, #7
 8019a72:	4013      	ands	r3, r2
 8019a74:	b2da      	uxtb	r2, r3
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019a7a:	687a      	ldr	r2, [r7, #4]
 8019a7c:	23aa      	movs	r3, #170	@ 0xaa
 8019a7e:	009b      	lsls	r3, r3, #2
 8019a80:	5cd3      	ldrb	r3, [r2, r3]
 8019a82:	2b01      	cmp	r3, #1
 8019a84:	d101      	bne.n	8019a8a <HAL_PCD_EP_Close+0x76>
 8019a86:	2302      	movs	r3, #2
 8019a88:	e011      	b.n	8019aae <HAL_PCD_EP_Close+0x9a>
 8019a8a:	687a      	ldr	r2, [r7, #4]
 8019a8c:	23aa      	movs	r3, #170	@ 0xaa
 8019a8e:	009b      	lsls	r3, r3, #2
 8019a90:	2101      	movs	r1, #1
 8019a92:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	68fa      	ldr	r2, [r7, #12]
 8019a9a:	0011      	movs	r1, r2
 8019a9c:	0018      	movs	r0, r3
 8019a9e:	f005 ffbf 	bl	801fa20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019aa2:	687a      	ldr	r2, [r7, #4]
 8019aa4:	23aa      	movs	r3, #170	@ 0xaa
 8019aa6:	009b      	lsls	r3, r3, #2
 8019aa8:	2100      	movs	r1, #0
 8019aaa:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8019aac:	2300      	movs	r3, #0
}
 8019aae:	0018      	movs	r0, r3
 8019ab0:	46bd      	mov	sp, r7
 8019ab2:	b004      	add	sp, #16
 8019ab4:	bd80      	pop	{r7, pc}

08019ab6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019ab6:	b580      	push	{r7, lr}
 8019ab8:	b086      	sub	sp, #24
 8019aba:	af00      	add	r7, sp, #0
 8019abc:	60f8      	str	r0, [r7, #12]
 8019abe:	607a      	str	r2, [r7, #4]
 8019ac0:	603b      	str	r3, [r7, #0]
 8019ac2:	200b      	movs	r0, #11
 8019ac4:	183b      	adds	r3, r7, r0
 8019ac6:	1c0a      	adds	r2, r1, #0
 8019ac8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019aca:	0001      	movs	r1, r0
 8019acc:	187b      	adds	r3, r7, r1
 8019ace:	781b      	ldrb	r3, [r3, #0]
 8019ad0:	2207      	movs	r2, #7
 8019ad2:	401a      	ands	r2, r3
 8019ad4:	0013      	movs	r3, r2
 8019ad6:	009b      	lsls	r3, r3, #2
 8019ad8:	189b      	adds	r3, r3, r2
 8019ada:	00db      	lsls	r3, r3, #3
 8019adc:	3369      	adds	r3, #105	@ 0x69
 8019ade:	33ff      	adds	r3, #255	@ 0xff
 8019ae0:	68fa      	ldr	r2, [r7, #12]
 8019ae2:	18d3      	adds	r3, r2, r3
 8019ae4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019ae6:	697b      	ldr	r3, [r7, #20]
 8019ae8:	687a      	ldr	r2, [r7, #4]
 8019aea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019aec:	697b      	ldr	r3, [r7, #20]
 8019aee:	683a      	ldr	r2, [r7, #0]
 8019af0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8019af2:	697b      	ldr	r3, [r7, #20]
 8019af4:	2200      	movs	r2, #0
 8019af6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8019af8:	697b      	ldr	r3, [r7, #20]
 8019afa:	2200      	movs	r2, #0
 8019afc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019afe:	187b      	adds	r3, r7, r1
 8019b00:	781b      	ldrb	r3, [r3, #0]
 8019b02:	2207      	movs	r2, #7
 8019b04:	4013      	ands	r3, r2
 8019b06:	b2da      	uxtb	r2, r3
 8019b08:	697b      	ldr	r3, [r7, #20]
 8019b0a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	697a      	ldr	r2, [r7, #20]
 8019b12:	0011      	movs	r1, r2
 8019b14:	0018      	movs	r0, r3
 8019b16:	f006 f943 	bl	801fda0 <USB_EPStartXfer>

  return HAL_OK;
 8019b1a:	2300      	movs	r3, #0
}
 8019b1c:	0018      	movs	r0, r3
 8019b1e:	46bd      	mov	sp, r7
 8019b20:	b006      	add	sp, #24
 8019b22:	bd80      	pop	{r7, pc}

08019b24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019b24:	b580      	push	{r7, lr}
 8019b26:	b082      	sub	sp, #8
 8019b28:	af00      	add	r7, sp, #0
 8019b2a:	6078      	str	r0, [r7, #4]
 8019b2c:	000a      	movs	r2, r1
 8019b2e:	1cfb      	adds	r3, r7, #3
 8019b30:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8019b32:	1cfb      	adds	r3, r7, #3
 8019b34:	781b      	ldrb	r3, [r3, #0]
 8019b36:	2207      	movs	r2, #7
 8019b38:	401a      	ands	r2, r3
 8019b3a:	6878      	ldr	r0, [r7, #4]
 8019b3c:	23c2      	movs	r3, #194	@ 0xc2
 8019b3e:	0059      	lsls	r1, r3, #1
 8019b40:	0013      	movs	r3, r2
 8019b42:	009b      	lsls	r3, r3, #2
 8019b44:	189b      	adds	r3, r3, r2
 8019b46:	00db      	lsls	r3, r3, #3
 8019b48:	18c3      	adds	r3, r0, r3
 8019b4a:	185b      	adds	r3, r3, r1
 8019b4c:	681b      	ldr	r3, [r3, #0]
}
 8019b4e:	0018      	movs	r0, r3
 8019b50:	46bd      	mov	sp, r7
 8019b52:	b002      	add	sp, #8
 8019b54:	bd80      	pop	{r7, pc}

08019b56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019b56:	b580      	push	{r7, lr}
 8019b58:	b086      	sub	sp, #24
 8019b5a:	af00      	add	r7, sp, #0
 8019b5c:	60f8      	str	r0, [r7, #12]
 8019b5e:	607a      	str	r2, [r7, #4]
 8019b60:	603b      	str	r3, [r7, #0]
 8019b62:	200b      	movs	r0, #11
 8019b64:	183b      	adds	r3, r7, r0
 8019b66:	1c0a      	adds	r2, r1, #0
 8019b68:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019b6a:	183b      	adds	r3, r7, r0
 8019b6c:	781b      	ldrb	r3, [r3, #0]
 8019b6e:	2207      	movs	r2, #7
 8019b70:	4013      	ands	r3, r2
 8019b72:	1c5a      	adds	r2, r3, #1
 8019b74:	0013      	movs	r3, r2
 8019b76:	009b      	lsls	r3, r3, #2
 8019b78:	189b      	adds	r3, r3, r2
 8019b7a:	00db      	lsls	r3, r3, #3
 8019b7c:	68fa      	ldr	r2, [r7, #12]
 8019b7e:	18d3      	adds	r3, r2, r3
 8019b80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019b82:	697b      	ldr	r3, [r7, #20]
 8019b84:	687a      	ldr	r2, [r7, #4]
 8019b86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019b88:	697b      	ldr	r3, [r7, #20]
 8019b8a:	683a      	ldr	r2, [r7, #0]
 8019b8c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8019b8e:	697b      	ldr	r3, [r7, #20]
 8019b90:	2224      	movs	r2, #36	@ 0x24
 8019b92:	2101      	movs	r1, #1
 8019b94:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8019b96:	697b      	ldr	r3, [r7, #20]
 8019b98:	683a      	ldr	r2, [r7, #0]
 8019b9a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8019b9c:	697b      	ldr	r3, [r7, #20]
 8019b9e:	2200      	movs	r2, #0
 8019ba0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8019ba2:	697b      	ldr	r3, [r7, #20]
 8019ba4:	2201      	movs	r2, #1
 8019ba6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019ba8:	183b      	adds	r3, r7, r0
 8019baa:	781b      	ldrb	r3, [r3, #0]
 8019bac:	2207      	movs	r2, #7
 8019bae:	4013      	ands	r3, r2
 8019bb0:	b2da      	uxtb	r2, r3
 8019bb2:	697b      	ldr	r3, [r7, #20]
 8019bb4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	697a      	ldr	r2, [r7, #20]
 8019bbc:	0011      	movs	r1, r2
 8019bbe:	0018      	movs	r0, r3
 8019bc0:	f006 f8ee 	bl	801fda0 <USB_EPStartXfer>

  return HAL_OK;
 8019bc4:	2300      	movs	r3, #0
}
 8019bc6:	0018      	movs	r0, r3
 8019bc8:	46bd      	mov	sp, r7
 8019bca:	b006      	add	sp, #24
 8019bcc:	bd80      	pop	{r7, pc}

08019bce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019bce:	b580      	push	{r7, lr}
 8019bd0:	b084      	sub	sp, #16
 8019bd2:	af00      	add	r7, sp, #0
 8019bd4:	6078      	str	r0, [r7, #4]
 8019bd6:	000a      	movs	r2, r1
 8019bd8:	1cfb      	adds	r3, r7, #3
 8019bda:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8019bdc:	1cfb      	adds	r3, r7, #3
 8019bde:	781b      	ldrb	r3, [r3, #0]
 8019be0:	2207      	movs	r2, #7
 8019be2:	401a      	ands	r2, r3
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	685b      	ldr	r3, [r3, #4]
 8019be8:	429a      	cmp	r2, r3
 8019bea:	d901      	bls.n	8019bf0 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8019bec:	2301      	movs	r3, #1
 8019bee:	e046      	b.n	8019c7e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019bf0:	1cfb      	adds	r3, r7, #3
 8019bf2:	781b      	ldrb	r3, [r3, #0]
 8019bf4:	b25b      	sxtb	r3, r3
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	da0f      	bge.n	8019c1a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019bfa:	1cfb      	adds	r3, r7, #3
 8019bfc:	781b      	ldrb	r3, [r3, #0]
 8019bfe:	2207      	movs	r2, #7
 8019c00:	4013      	ands	r3, r2
 8019c02:	1c5a      	adds	r2, r3, #1
 8019c04:	0013      	movs	r3, r2
 8019c06:	009b      	lsls	r3, r3, #2
 8019c08:	189b      	adds	r3, r3, r2
 8019c0a:	00db      	lsls	r3, r3, #3
 8019c0c:	687a      	ldr	r2, [r7, #4]
 8019c0e:	18d3      	adds	r3, r2, r3
 8019c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	2201      	movs	r2, #1
 8019c16:	705a      	strb	r2, [r3, #1]
 8019c18:	e00d      	b.n	8019c36 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8019c1a:	1cfb      	adds	r3, r7, #3
 8019c1c:	781a      	ldrb	r2, [r3, #0]
 8019c1e:	0013      	movs	r3, r2
 8019c20:	009b      	lsls	r3, r3, #2
 8019c22:	189b      	adds	r3, r3, r2
 8019c24:	00db      	lsls	r3, r3, #3
 8019c26:	3369      	adds	r3, #105	@ 0x69
 8019c28:	33ff      	adds	r3, #255	@ 0xff
 8019c2a:	687a      	ldr	r2, [r7, #4]
 8019c2c:	18d3      	adds	r3, r2, r3
 8019c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	2200      	movs	r2, #0
 8019c34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	2201      	movs	r2, #1
 8019c3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019c3c:	1cfb      	adds	r3, r7, #3
 8019c3e:	781b      	ldrb	r3, [r3, #0]
 8019c40:	2207      	movs	r2, #7
 8019c42:	4013      	ands	r3, r2
 8019c44:	b2da      	uxtb	r2, r3
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019c4a:	687a      	ldr	r2, [r7, #4]
 8019c4c:	23aa      	movs	r3, #170	@ 0xaa
 8019c4e:	009b      	lsls	r3, r3, #2
 8019c50:	5cd3      	ldrb	r3, [r2, r3]
 8019c52:	2b01      	cmp	r3, #1
 8019c54:	d101      	bne.n	8019c5a <HAL_PCD_EP_SetStall+0x8c>
 8019c56:	2302      	movs	r3, #2
 8019c58:	e011      	b.n	8019c7e <HAL_PCD_EP_SetStall+0xb0>
 8019c5a:	687a      	ldr	r2, [r7, #4]
 8019c5c:	23aa      	movs	r3, #170	@ 0xaa
 8019c5e:	009b      	lsls	r3, r3, #2
 8019c60:	2101      	movs	r1, #1
 8019c62:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	681b      	ldr	r3, [r3, #0]
 8019c68:	68fa      	ldr	r2, [r7, #12]
 8019c6a:	0011      	movs	r1, r2
 8019c6c:	0018      	movs	r0, r3
 8019c6e:	f007 f9cf 	bl	8021010 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8019c72:	687a      	ldr	r2, [r7, #4]
 8019c74:	23aa      	movs	r3, #170	@ 0xaa
 8019c76:	009b      	lsls	r3, r3, #2
 8019c78:	2100      	movs	r1, #0
 8019c7a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019c7c:	2300      	movs	r3, #0
}
 8019c7e:	0018      	movs	r0, r3
 8019c80:	46bd      	mov	sp, r7
 8019c82:	b004      	add	sp, #16
 8019c84:	bd80      	pop	{r7, pc}

08019c86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019c86:	b580      	push	{r7, lr}
 8019c88:	b084      	sub	sp, #16
 8019c8a:	af00      	add	r7, sp, #0
 8019c8c:	6078      	str	r0, [r7, #4]
 8019c8e:	000a      	movs	r2, r1
 8019c90:	1cfb      	adds	r3, r7, #3
 8019c92:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8019c94:	1cfb      	adds	r3, r7, #3
 8019c96:	781b      	ldrb	r3, [r3, #0]
 8019c98:	220f      	movs	r2, #15
 8019c9a:	401a      	ands	r2, r3
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	685b      	ldr	r3, [r3, #4]
 8019ca0:	429a      	cmp	r2, r3
 8019ca2:	d901      	bls.n	8019ca8 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8019ca4:	2301      	movs	r3, #1
 8019ca6:	e048      	b.n	8019d3a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019ca8:	1cfb      	adds	r3, r7, #3
 8019caa:	781b      	ldrb	r3, [r3, #0]
 8019cac:	b25b      	sxtb	r3, r3
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	da0f      	bge.n	8019cd2 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019cb2:	1cfb      	adds	r3, r7, #3
 8019cb4:	781b      	ldrb	r3, [r3, #0]
 8019cb6:	2207      	movs	r2, #7
 8019cb8:	4013      	ands	r3, r2
 8019cba:	1c5a      	adds	r2, r3, #1
 8019cbc:	0013      	movs	r3, r2
 8019cbe:	009b      	lsls	r3, r3, #2
 8019cc0:	189b      	adds	r3, r3, r2
 8019cc2:	00db      	lsls	r3, r3, #3
 8019cc4:	687a      	ldr	r2, [r7, #4]
 8019cc6:	18d3      	adds	r3, r2, r3
 8019cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	2201      	movs	r2, #1
 8019cce:	705a      	strb	r2, [r3, #1]
 8019cd0:	e00f      	b.n	8019cf2 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019cd2:	1cfb      	adds	r3, r7, #3
 8019cd4:	781b      	ldrb	r3, [r3, #0]
 8019cd6:	2207      	movs	r2, #7
 8019cd8:	401a      	ands	r2, r3
 8019cda:	0013      	movs	r3, r2
 8019cdc:	009b      	lsls	r3, r3, #2
 8019cde:	189b      	adds	r3, r3, r2
 8019ce0:	00db      	lsls	r3, r3, #3
 8019ce2:	3369      	adds	r3, #105	@ 0x69
 8019ce4:	33ff      	adds	r3, #255	@ 0xff
 8019ce6:	687a      	ldr	r2, [r7, #4]
 8019ce8:	18d3      	adds	r3, r2, r3
 8019cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	2200      	movs	r2, #0
 8019cf0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	2200      	movs	r2, #0
 8019cf6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019cf8:	1cfb      	adds	r3, r7, #3
 8019cfa:	781b      	ldrb	r3, [r3, #0]
 8019cfc:	2207      	movs	r2, #7
 8019cfe:	4013      	ands	r3, r2
 8019d00:	b2da      	uxtb	r2, r3
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019d06:	687a      	ldr	r2, [r7, #4]
 8019d08:	23aa      	movs	r3, #170	@ 0xaa
 8019d0a:	009b      	lsls	r3, r3, #2
 8019d0c:	5cd3      	ldrb	r3, [r2, r3]
 8019d0e:	2b01      	cmp	r3, #1
 8019d10:	d101      	bne.n	8019d16 <HAL_PCD_EP_ClrStall+0x90>
 8019d12:	2302      	movs	r3, #2
 8019d14:	e011      	b.n	8019d3a <HAL_PCD_EP_ClrStall+0xb4>
 8019d16:	687a      	ldr	r2, [r7, #4]
 8019d18:	23aa      	movs	r3, #170	@ 0xaa
 8019d1a:	009b      	lsls	r3, r3, #2
 8019d1c:	2101      	movs	r1, #1
 8019d1e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	68fa      	ldr	r2, [r7, #12]
 8019d26:	0011      	movs	r1, r2
 8019d28:	0018      	movs	r0, r3
 8019d2a:	f007 f9c1 	bl	80210b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8019d2e:	687a      	ldr	r2, [r7, #4]
 8019d30:	23aa      	movs	r3, #170	@ 0xaa
 8019d32:	009b      	lsls	r3, r3, #2
 8019d34:	2100      	movs	r1, #0
 8019d36:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019d38:	2300      	movs	r3, #0
}
 8019d3a:	0018      	movs	r0, r3
 8019d3c:	46bd      	mov	sp, r7
 8019d3e:	b004      	add	sp, #16
 8019d40:	bd80      	pop	{r7, pc}
	...

08019d44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8019d44:	b5b0      	push	{r4, r5, r7, lr}
 8019d46:	b096      	sub	sp, #88	@ 0x58
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019d4c:	f000 fbec 	bl	801a528 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	681a      	ldr	r2, [r3, #0]
 8019d54:	204e      	movs	r0, #78	@ 0x4e
 8019d56:	183b      	adds	r3, r7, r0
 8019d58:	2144      	movs	r1, #68	@ 0x44
 8019d5a:	5a52      	ldrh	r2, [r2, r1]
 8019d5c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8019d5e:	183b      	adds	r3, r7, r0
 8019d60:	881b      	ldrh	r3, [r3, #0]
 8019d62:	b2da      	uxtb	r2, r3
 8019d64:	244d      	movs	r4, #77	@ 0x4d
 8019d66:	193b      	adds	r3, r7, r4
 8019d68:	210f      	movs	r1, #15
 8019d6a:	400a      	ands	r2, r1
 8019d6c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8019d6e:	193b      	adds	r3, r7, r4
 8019d70:	781b      	ldrb	r3, [r3, #0]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d000      	beq.n	8019d78 <PCD_EP_ISR_Handler+0x34>
 8019d76:	e18f      	b.n	801a098 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8019d78:	183b      	adds	r3, r7, r0
 8019d7a:	881b      	ldrh	r3, [r3, #0]
 8019d7c:	2210      	movs	r2, #16
 8019d7e:	4013      	ands	r3, r2
 8019d80:	d155      	bne.n	8019e2e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	881b      	ldrh	r3, [r3, #0]
 8019d88:	b29a      	uxth	r2, r3
 8019d8a:	200e      	movs	r0, #14
 8019d8c:	183b      	adds	r3, r7, r0
 8019d8e:	49bb      	ldr	r1, [pc, #748]	@ (801a07c <PCD_EP_ISR_Handler+0x338>)
 8019d90:	400a      	ands	r2, r1
 8019d92:	801a      	strh	r2, [r3, #0]
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	183a      	adds	r2, r7, r0
 8019d9a:	8812      	ldrh	r2, [r2, #0]
 8019d9c:	49b8      	ldr	r1, [pc, #736]	@ (801a080 <PCD_EP_ISR_Handler+0x33c>)
 8019d9e:	430a      	orrs	r2, r1
 8019da0:	b292      	uxth	r2, r2
 8019da2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	3328      	adds	r3, #40	@ 0x28
 8019da8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	2250      	movs	r2, #80	@ 0x50
 8019db0:	5a9b      	ldrh	r3, [r3, r2]
 8019db2:	b29b      	uxth	r3, r3
 8019db4:	001a      	movs	r2, r3
 8019db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019db8:	781b      	ldrb	r3, [r3, #0]
 8019dba:	00db      	lsls	r3, r3, #3
 8019dbc:	18d2      	adds	r2, r2, r3
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	18d3      	adds	r3, r2, r3
 8019dc4:	4aaf      	ldr	r2, [pc, #700]	@ (801a084 <PCD_EP_ISR_Handler+0x340>)
 8019dc6:	4694      	mov	ip, r2
 8019dc8:	4463      	add	r3, ip
 8019dca:	881b      	ldrh	r3, [r3, #0]
 8019dcc:	059b      	lsls	r3, r3, #22
 8019dce:	0d9a      	lsrs	r2, r3, #22
 8019dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019dd2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8019dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019dd6:	695a      	ldr	r2, [r3, #20]
 8019dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019dda:	69db      	ldr	r3, [r3, #28]
 8019ddc:	18d2      	adds	r2, r2, r3
 8019dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019de0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	2100      	movs	r1, #0
 8019de6:	0018      	movs	r0, r3
 8019de8:	f009 fade 	bl	80233a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	2224      	movs	r2, #36	@ 0x24
 8019df0:	5c9b      	ldrb	r3, [r3, r2]
 8019df2:	b2db      	uxtb	r3, r3
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d101      	bne.n	8019dfc <PCD_EP_ISR_Handler+0xb8>
 8019df8:	f000 fb96 	bl	801a528 <PCD_EP_ISR_Handler+0x7e4>
 8019dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019dfe:	699b      	ldr	r3, [r3, #24]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d001      	beq.n	8019e08 <PCD_EP_ISR_Handler+0xc4>
 8019e04:	f000 fb90 	bl	801a528 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	2224      	movs	r2, #36	@ 0x24
 8019e0c:	5c9b      	ldrb	r3, [r3, r2]
 8019e0e:	b2db      	uxtb	r3, r3
 8019e10:	2280      	movs	r2, #128	@ 0x80
 8019e12:	4252      	negs	r2, r2
 8019e14:	4313      	orrs	r3, r2
 8019e16:	b2da      	uxtb	r2, r3
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	0011      	movs	r1, r2
 8019e1e:	224c      	movs	r2, #76	@ 0x4c
 8019e20:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	2224      	movs	r2, #36	@ 0x24
 8019e26:	2100      	movs	r1, #0
 8019e28:	5499      	strb	r1, [r3, r2]
 8019e2a:	f000 fb7d 	bl	801a528 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	3369      	adds	r3, #105	@ 0x69
 8019e32:	33ff      	adds	r3, #255	@ 0xff
 8019e34:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	681a      	ldr	r2, [r3, #0]
 8019e3a:	214a      	movs	r1, #74	@ 0x4a
 8019e3c:	187b      	adds	r3, r7, r1
 8019e3e:	8812      	ldrh	r2, [r2, #0]
 8019e40:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8019e42:	187b      	adds	r3, r7, r1
 8019e44:	881a      	ldrh	r2, [r3, #0]
 8019e46:	2380      	movs	r3, #128	@ 0x80
 8019e48:	011b      	lsls	r3, r3, #4
 8019e4a:	4013      	ands	r3, r2
 8019e4c:	d037      	beq.n	8019ebe <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	2250      	movs	r2, #80	@ 0x50
 8019e54:	5a9b      	ldrh	r3, [r3, r2]
 8019e56:	b29b      	uxth	r3, r3
 8019e58:	001a      	movs	r2, r3
 8019e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e5c:	781b      	ldrb	r3, [r3, #0]
 8019e5e:	00db      	lsls	r3, r3, #3
 8019e60:	18d2      	adds	r2, r2, r3
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	18d3      	adds	r3, r2, r3
 8019e68:	4a87      	ldr	r2, [pc, #540]	@ (801a088 <PCD_EP_ISR_Handler+0x344>)
 8019e6a:	4694      	mov	ip, r2
 8019e6c:	4463      	add	r3, ip
 8019e6e:	881b      	ldrh	r3, [r3, #0]
 8019e70:	059b      	lsls	r3, r3, #22
 8019e72:	0d9a      	lsrs	r2, r3, #22
 8019e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e76:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	6818      	ldr	r0, [r3, #0]
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	22ac      	movs	r2, #172	@ 0xac
 8019e80:	0092      	lsls	r2, r2, #2
 8019e82:	1899      	adds	r1, r3, r2
 8019e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e86:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8019e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e8a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019e8c:	b29b      	uxth	r3, r3
 8019e8e:	f007 fa43 	bl	8021318 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	881b      	ldrh	r3, [r3, #0]
 8019e98:	b29a      	uxth	r2, r3
 8019e9a:	2010      	movs	r0, #16
 8019e9c:	183b      	adds	r3, r7, r0
 8019e9e:	497b      	ldr	r1, [pc, #492]	@ (801a08c <PCD_EP_ISR_Handler+0x348>)
 8019ea0:	400a      	ands	r2, r1
 8019ea2:	801a      	strh	r2, [r3, #0]
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	183a      	adds	r2, r7, r0
 8019eaa:	8812      	ldrh	r2, [r2, #0]
 8019eac:	2180      	movs	r1, #128	@ 0x80
 8019eae:	430a      	orrs	r2, r1
 8019eb0:	b292      	uxth	r2, r2
 8019eb2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	0018      	movs	r0, r3
 8019eb8:	f009 fa40 	bl	802333c <HAL_PCD_SetupStageCallback>
 8019ebc:	e334      	b.n	801a528 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8019ebe:	234a      	movs	r3, #74	@ 0x4a
 8019ec0:	18fb      	adds	r3, r7, r3
 8019ec2:	2200      	movs	r2, #0
 8019ec4:	5e9b      	ldrsh	r3, [r3, r2]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	db00      	blt.n	8019ecc <PCD_EP_ISR_Handler+0x188>
 8019eca:	e32d      	b.n	801a528 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	881b      	ldrh	r3, [r3, #0]
 8019ed2:	b29a      	uxth	r2, r3
 8019ed4:	201e      	movs	r0, #30
 8019ed6:	183b      	adds	r3, r7, r0
 8019ed8:	496c      	ldr	r1, [pc, #432]	@ (801a08c <PCD_EP_ISR_Handler+0x348>)
 8019eda:	400a      	ands	r2, r1
 8019edc:	801a      	strh	r2, [r3, #0]
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	183a      	adds	r2, r7, r0
 8019ee4:	8812      	ldrh	r2, [r2, #0]
 8019ee6:	2180      	movs	r1, #128	@ 0x80
 8019ee8:	430a      	orrs	r2, r1
 8019eea:	b292      	uxth	r2, r2
 8019eec:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	2250      	movs	r2, #80	@ 0x50
 8019ef4:	5a9b      	ldrh	r3, [r3, r2]
 8019ef6:	b29b      	uxth	r3, r3
 8019ef8:	001a      	movs	r2, r3
 8019efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019efc:	781b      	ldrb	r3, [r3, #0]
 8019efe:	00db      	lsls	r3, r3, #3
 8019f00:	18d2      	adds	r2, r2, r3
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	18d3      	adds	r3, r2, r3
 8019f08:	4a5f      	ldr	r2, [pc, #380]	@ (801a088 <PCD_EP_ISR_Handler+0x344>)
 8019f0a:	4694      	mov	ip, r2
 8019f0c:	4463      	add	r3, ip
 8019f0e:	881b      	ldrh	r3, [r3, #0]
 8019f10:	059b      	lsls	r3, r3, #22
 8019f12:	0d9a      	lsrs	r2, r3, #22
 8019f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f16:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8019f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f1a:	69db      	ldr	r3, [r3, #28]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d01a      	beq.n	8019f56 <PCD_EP_ISR_Handler+0x212>
 8019f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f22:	695b      	ldr	r3, [r3, #20]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d016      	beq.n	8019f56 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	6818      	ldr	r0, [r3, #0]
 8019f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f2e:	6959      	ldr	r1, [r3, #20]
 8019f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f32:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8019f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f36:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019f38:	b29b      	uxth	r3, r3
 8019f3a:	f007 f9ed 	bl	8021318 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8019f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f40:	695a      	ldr	r2, [r3, #20]
 8019f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f44:	69db      	ldr	r3, [r3, #28]
 8019f46:	18d2      	adds	r2, r2, r3
 8019f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f4a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	2100      	movs	r1, #0
 8019f50:	0018      	movs	r0, r3
 8019f52:	f009 fa08 	bl	8023366 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	681a      	ldr	r2, [r3, #0]
 8019f5a:	214a      	movs	r1, #74	@ 0x4a
 8019f5c:	187b      	adds	r3, r7, r1
 8019f5e:	8812      	ldrh	r2, [r2, #0]
 8019f60:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8019f62:	187b      	adds	r3, r7, r1
 8019f64:	881a      	ldrh	r2, [r3, #0]
 8019f66:	2380      	movs	r3, #128	@ 0x80
 8019f68:	011b      	lsls	r3, r3, #4
 8019f6a:	4013      	ands	r3, r2
 8019f6c:	d000      	beq.n	8019f70 <PCD_EP_ISR_Handler+0x22c>
 8019f6e:	e2db      	b.n	801a528 <PCD_EP_ISR_Handler+0x7e4>
 8019f70:	187b      	adds	r3, r7, r1
 8019f72:	881a      	ldrh	r2, [r3, #0]
 8019f74:	23c0      	movs	r3, #192	@ 0xc0
 8019f76:	019b      	lsls	r3, r3, #6
 8019f78:	401a      	ands	r2, r3
 8019f7a:	23c0      	movs	r3, #192	@ 0xc0
 8019f7c:	019b      	lsls	r3, r3, #6
 8019f7e:	429a      	cmp	r2, r3
 8019f80:	d100      	bne.n	8019f84 <PCD_EP_ISR_Handler+0x240>
 8019f82:	e2d1      	b.n	801a528 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	61bb      	str	r3, [r7, #24]
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	2250      	movs	r2, #80	@ 0x50
 8019f90:	5a9b      	ldrh	r3, [r3, r2]
 8019f92:	b29b      	uxth	r3, r3
 8019f94:	001a      	movs	r2, r3
 8019f96:	69bb      	ldr	r3, [r7, #24]
 8019f98:	189b      	adds	r3, r3, r2
 8019f9a:	61bb      	str	r3, [r7, #24]
 8019f9c:	69bb      	ldr	r3, [r7, #24]
 8019f9e:	4a3a      	ldr	r2, [pc, #232]	@ (801a088 <PCD_EP_ISR_Handler+0x344>)
 8019fa0:	4694      	mov	ip, r2
 8019fa2:	4463      	add	r3, ip
 8019fa4:	617b      	str	r3, [r7, #20]
 8019fa6:	697b      	ldr	r3, [r7, #20]
 8019fa8:	881b      	ldrh	r3, [r3, #0]
 8019faa:	b29b      	uxth	r3, r3
 8019fac:	059b      	lsls	r3, r3, #22
 8019fae:	0d9b      	lsrs	r3, r3, #22
 8019fb0:	b29a      	uxth	r2, r3
 8019fb2:	697b      	ldr	r3, [r7, #20]
 8019fb4:	801a      	strh	r2, [r3, #0]
 8019fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fb8:	691b      	ldr	r3, [r3, #16]
 8019fba:	2b3e      	cmp	r3, #62	@ 0x3e
 8019fbc:	d91a      	bls.n	8019ff4 <PCD_EP_ISR_Handler+0x2b0>
 8019fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fc0:	691b      	ldr	r3, [r3, #16]
 8019fc2:	095b      	lsrs	r3, r3, #5
 8019fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8019fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fc8:	691b      	ldr	r3, [r3, #16]
 8019fca:	221f      	movs	r2, #31
 8019fcc:	4013      	ands	r3, r2
 8019fce:	d102      	bne.n	8019fd6 <PCD_EP_ISR_Handler+0x292>
 8019fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019fd2:	3b01      	subs	r3, #1
 8019fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8019fd6:	697b      	ldr	r3, [r7, #20]
 8019fd8:	881b      	ldrh	r3, [r3, #0]
 8019fda:	b29a      	uxth	r2, r3
 8019fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019fde:	b29b      	uxth	r3, r3
 8019fe0:	029b      	lsls	r3, r3, #10
 8019fe2:	b29b      	uxth	r3, r3
 8019fe4:	4313      	orrs	r3, r2
 8019fe6:	b29b      	uxth	r3, r3
 8019fe8:	4a25      	ldr	r2, [pc, #148]	@ (801a080 <PCD_EP_ISR_Handler+0x33c>)
 8019fea:	4313      	orrs	r3, r2
 8019fec:	b29a      	uxth	r2, r3
 8019fee:	697b      	ldr	r3, [r7, #20]
 8019ff0:	801a      	strh	r2, [r3, #0]
 8019ff2:	e023      	b.n	801a03c <PCD_EP_ISR_Handler+0x2f8>
 8019ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ff6:	691b      	ldr	r3, [r3, #16]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d108      	bne.n	801a00e <PCD_EP_ISR_Handler+0x2ca>
 8019ffc:	697b      	ldr	r3, [r7, #20]
 8019ffe:	881b      	ldrh	r3, [r3, #0]
 801a000:	b29b      	uxth	r3, r3
 801a002:	4a1f      	ldr	r2, [pc, #124]	@ (801a080 <PCD_EP_ISR_Handler+0x33c>)
 801a004:	4313      	orrs	r3, r2
 801a006:	b29a      	uxth	r2, r3
 801a008:	697b      	ldr	r3, [r7, #20]
 801a00a:	801a      	strh	r2, [r3, #0]
 801a00c:	e016      	b.n	801a03c <PCD_EP_ISR_Handler+0x2f8>
 801a00e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a010:	691b      	ldr	r3, [r3, #16]
 801a012:	085b      	lsrs	r3, r3, #1
 801a014:	647b      	str	r3, [r7, #68]	@ 0x44
 801a016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a018:	691b      	ldr	r3, [r3, #16]
 801a01a:	2201      	movs	r2, #1
 801a01c:	4013      	ands	r3, r2
 801a01e:	d002      	beq.n	801a026 <PCD_EP_ISR_Handler+0x2e2>
 801a020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a022:	3301      	adds	r3, #1
 801a024:	647b      	str	r3, [r7, #68]	@ 0x44
 801a026:	697b      	ldr	r3, [r7, #20]
 801a028:	881b      	ldrh	r3, [r3, #0]
 801a02a:	b29a      	uxth	r2, r3
 801a02c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a02e:	b29b      	uxth	r3, r3
 801a030:	029b      	lsls	r3, r3, #10
 801a032:	b29b      	uxth	r3, r3
 801a034:	4313      	orrs	r3, r2
 801a036:	b29a      	uxth	r2, r3
 801a038:	697b      	ldr	r3, [r7, #20]
 801a03a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	881b      	ldrh	r3, [r3, #0]
 801a042:	b29a      	uxth	r2, r3
 801a044:	2012      	movs	r0, #18
 801a046:	183b      	adds	r3, r7, r0
 801a048:	4911      	ldr	r1, [pc, #68]	@ (801a090 <PCD_EP_ISR_Handler+0x34c>)
 801a04a:	400a      	ands	r2, r1
 801a04c:	801a      	strh	r2, [r3, #0]
 801a04e:	183b      	adds	r3, r7, r0
 801a050:	183a      	adds	r2, r7, r0
 801a052:	8812      	ldrh	r2, [r2, #0]
 801a054:	2180      	movs	r1, #128	@ 0x80
 801a056:	0149      	lsls	r1, r1, #5
 801a058:	404a      	eors	r2, r1
 801a05a:	801a      	strh	r2, [r3, #0]
 801a05c:	183b      	adds	r3, r7, r0
 801a05e:	183a      	adds	r2, r7, r0
 801a060:	8812      	ldrh	r2, [r2, #0]
 801a062:	2180      	movs	r1, #128	@ 0x80
 801a064:	0189      	lsls	r1, r1, #6
 801a066:	404a      	eors	r2, r1
 801a068:	801a      	strh	r2, [r3, #0]
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	183a      	adds	r2, r7, r0
 801a070:	8812      	ldrh	r2, [r2, #0]
 801a072:	4908      	ldr	r1, [pc, #32]	@ (801a094 <PCD_EP_ISR_Handler+0x350>)
 801a074:	430a      	orrs	r2, r1
 801a076:	b292      	uxth	r2, r2
 801a078:	801a      	strh	r2, [r3, #0]
 801a07a:	e255      	b.n	801a528 <PCD_EP_ISR_Handler+0x7e4>
 801a07c:	ffff8f0f 	.word	0xffff8f0f
 801a080:	ffff8000 	.word	0xffff8000
 801a084:	00000402 	.word	0x00000402
 801a088:	00000406 	.word	0x00000406
 801a08c:	00000f8f 	.word	0x00000f8f
 801a090:	ffffbf8f 	.word	0xffffbf8f
 801a094:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	001a      	movs	r2, r3
 801a09e:	204d      	movs	r0, #77	@ 0x4d
 801a0a0:	183b      	adds	r3, r7, r0
 801a0a2:	781b      	ldrb	r3, [r3, #0]
 801a0a4:	009b      	lsls	r3, r3, #2
 801a0a6:	18d2      	adds	r2, r2, r3
 801a0a8:	214a      	movs	r1, #74	@ 0x4a
 801a0aa:	187b      	adds	r3, r7, r1
 801a0ac:	8812      	ldrh	r2, [r2, #0]
 801a0ae:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801a0b0:	187b      	adds	r3, r7, r1
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	5e9b      	ldrsh	r3, [r3, r2]
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	db00      	blt.n	801a0bc <PCD_EP_ISR_Handler+0x378>
 801a0ba:	e0fa      	b.n	801a2b2 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	001a      	movs	r2, r3
 801a0c2:	183b      	adds	r3, r7, r0
 801a0c4:	781b      	ldrb	r3, [r3, #0]
 801a0c6:	009b      	lsls	r3, r3, #2
 801a0c8:	18d3      	adds	r3, r2, r3
 801a0ca:	881b      	ldrh	r3, [r3, #0]
 801a0cc:	b29a      	uxth	r2, r3
 801a0ce:	2448      	movs	r4, #72	@ 0x48
 801a0d0:	193b      	adds	r3, r7, r4
 801a0d2:	49d1      	ldr	r1, [pc, #836]	@ (801a418 <PCD_EP_ISR_Handler+0x6d4>)
 801a0d4:	400a      	ands	r2, r1
 801a0d6:	801a      	strh	r2, [r3, #0]
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	001a      	movs	r2, r3
 801a0de:	183b      	adds	r3, r7, r0
 801a0e0:	781b      	ldrb	r3, [r3, #0]
 801a0e2:	009b      	lsls	r3, r3, #2
 801a0e4:	18d3      	adds	r3, r2, r3
 801a0e6:	193a      	adds	r2, r7, r4
 801a0e8:	8812      	ldrh	r2, [r2, #0]
 801a0ea:	2180      	movs	r1, #128	@ 0x80
 801a0ec:	430a      	orrs	r2, r1
 801a0ee:	b292      	uxth	r2, r2
 801a0f0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801a0f2:	183b      	adds	r3, r7, r0
 801a0f4:	781a      	ldrb	r2, [r3, #0]
 801a0f6:	0013      	movs	r3, r2
 801a0f8:	009b      	lsls	r3, r3, #2
 801a0fa:	189b      	adds	r3, r3, r2
 801a0fc:	00db      	lsls	r3, r3, #3
 801a0fe:	3369      	adds	r3, #105	@ 0x69
 801a100:	33ff      	adds	r3, #255	@ 0xff
 801a102:	687a      	ldr	r2, [r7, #4]
 801a104:	18d3      	adds	r3, r2, r3
 801a106:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801a108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a10a:	7b1b      	ldrb	r3, [r3, #12]
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d125      	bne.n	801a15c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	2250      	movs	r2, #80	@ 0x50
 801a116:	5a9b      	ldrh	r3, [r3, r2]
 801a118:	b29b      	uxth	r3, r3
 801a11a:	001a      	movs	r2, r3
 801a11c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a11e:	781b      	ldrb	r3, [r3, #0]
 801a120:	00db      	lsls	r3, r3, #3
 801a122:	18d2      	adds	r2, r2, r3
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	18d3      	adds	r3, r2, r3
 801a12a:	4abc      	ldr	r2, [pc, #752]	@ (801a41c <PCD_EP_ISR_Handler+0x6d8>)
 801a12c:	4694      	mov	ip, r2
 801a12e:	4463      	add	r3, ip
 801a130:	881a      	ldrh	r2, [r3, #0]
 801a132:	2450      	movs	r4, #80	@ 0x50
 801a134:	193b      	adds	r3, r7, r4
 801a136:	0592      	lsls	r2, r2, #22
 801a138:	0d92      	lsrs	r2, r2, #22
 801a13a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 801a13c:	193b      	adds	r3, r7, r4
 801a13e:	881b      	ldrh	r3, [r3, #0]
 801a140:	2b00      	cmp	r3, #0
 801a142:	d100      	bne.n	801a146 <PCD_EP_ISR_Handler+0x402>
 801a144:	e08d      	b.n	801a262 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	6818      	ldr	r0, [r3, #0]
 801a14a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a14c:	6959      	ldr	r1, [r3, #20]
 801a14e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a150:	88da      	ldrh	r2, [r3, #6]
 801a152:	193b      	adds	r3, r7, r4
 801a154:	881b      	ldrh	r3, [r3, #0]
 801a156:	f007 f8df 	bl	8021318 <USB_ReadPMA>
 801a15a:	e082      	b.n	801a262 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801a15c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a15e:	78db      	ldrb	r3, [r3, #3]
 801a160:	2b02      	cmp	r3, #2
 801a162:	d10c      	bne.n	801a17e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801a164:	2350      	movs	r3, #80	@ 0x50
 801a166:	18fc      	adds	r4, r7, r3
 801a168:	234a      	movs	r3, #74	@ 0x4a
 801a16a:	18fb      	adds	r3, r7, r3
 801a16c:	881a      	ldrh	r2, [r3, #0]
 801a16e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	0018      	movs	r0, r3
 801a174:	f000 f9ec 	bl	801a550 <HAL_PCD_EP_DB_Receive>
 801a178:	0003      	movs	r3, r0
 801a17a:	8023      	strh	r3, [r4, #0]
 801a17c:	e071      	b.n	801a262 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	001a      	movs	r2, r3
 801a184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a186:	781b      	ldrb	r3, [r3, #0]
 801a188:	009b      	lsls	r3, r3, #2
 801a18a:	18d3      	adds	r3, r2, r3
 801a18c:	881b      	ldrh	r3, [r3, #0]
 801a18e:	b29a      	uxth	r2, r3
 801a190:	2052      	movs	r0, #82	@ 0x52
 801a192:	183b      	adds	r3, r7, r0
 801a194:	49a2      	ldr	r1, [pc, #648]	@ (801a420 <PCD_EP_ISR_Handler+0x6dc>)
 801a196:	400a      	ands	r2, r1
 801a198:	801a      	strh	r2, [r3, #0]
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	001a      	movs	r2, r3
 801a1a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1a2:	781b      	ldrb	r3, [r3, #0]
 801a1a4:	009b      	lsls	r3, r3, #2
 801a1a6:	18d3      	adds	r3, r2, r3
 801a1a8:	183a      	adds	r2, r7, r0
 801a1aa:	8812      	ldrh	r2, [r2, #0]
 801a1ac:	499d      	ldr	r1, [pc, #628]	@ (801a424 <PCD_EP_ISR_Handler+0x6e0>)
 801a1ae:	430a      	orrs	r2, r1
 801a1b0:	b292      	uxth	r2, r2
 801a1b2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	001a      	movs	r2, r3
 801a1ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1bc:	781b      	ldrb	r3, [r3, #0]
 801a1be:	009b      	lsls	r3, r3, #2
 801a1c0:	18d3      	adds	r3, r2, r3
 801a1c2:	881b      	ldrh	r3, [r3, #0]
 801a1c4:	b29b      	uxth	r3, r3
 801a1c6:	001a      	movs	r2, r3
 801a1c8:	2380      	movs	r3, #128	@ 0x80
 801a1ca:	01db      	lsls	r3, r3, #7
 801a1cc:	4013      	ands	r3, r2
 801a1ce:	d024      	beq.n	801a21a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	2250      	movs	r2, #80	@ 0x50
 801a1d6:	5a9b      	ldrh	r3, [r3, r2]
 801a1d8:	b29b      	uxth	r3, r3
 801a1da:	001a      	movs	r2, r3
 801a1dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1de:	781b      	ldrb	r3, [r3, #0]
 801a1e0:	00db      	lsls	r3, r3, #3
 801a1e2:	18d2      	adds	r2, r2, r3
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	18d3      	adds	r3, r2, r3
 801a1ea:	4a8f      	ldr	r2, [pc, #572]	@ (801a428 <PCD_EP_ISR_Handler+0x6e4>)
 801a1ec:	4694      	mov	ip, r2
 801a1ee:	4463      	add	r3, ip
 801a1f0:	881a      	ldrh	r2, [r3, #0]
 801a1f2:	2450      	movs	r4, #80	@ 0x50
 801a1f4:	193b      	adds	r3, r7, r4
 801a1f6:	0592      	lsls	r2, r2, #22
 801a1f8:	0d92      	lsrs	r2, r2, #22
 801a1fa:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a1fc:	193b      	adds	r3, r7, r4
 801a1fe:	881b      	ldrh	r3, [r3, #0]
 801a200:	2b00      	cmp	r3, #0
 801a202:	d02e      	beq.n	801a262 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	6818      	ldr	r0, [r3, #0]
 801a208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a20a:	6959      	ldr	r1, [r3, #20]
 801a20c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a20e:	891a      	ldrh	r2, [r3, #8]
 801a210:	193b      	adds	r3, r7, r4
 801a212:	881b      	ldrh	r3, [r3, #0]
 801a214:	f007 f880 	bl	8021318 <USB_ReadPMA>
 801a218:	e023      	b.n	801a262 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	2250      	movs	r2, #80	@ 0x50
 801a220:	5a9b      	ldrh	r3, [r3, r2]
 801a222:	b29b      	uxth	r3, r3
 801a224:	001a      	movs	r2, r3
 801a226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a228:	781b      	ldrb	r3, [r3, #0]
 801a22a:	00db      	lsls	r3, r3, #3
 801a22c:	18d2      	adds	r2, r2, r3
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	18d3      	adds	r3, r2, r3
 801a234:	4a79      	ldr	r2, [pc, #484]	@ (801a41c <PCD_EP_ISR_Handler+0x6d8>)
 801a236:	4694      	mov	ip, r2
 801a238:	4463      	add	r3, ip
 801a23a:	881a      	ldrh	r2, [r3, #0]
 801a23c:	2450      	movs	r4, #80	@ 0x50
 801a23e:	193b      	adds	r3, r7, r4
 801a240:	0592      	lsls	r2, r2, #22
 801a242:	0d92      	lsrs	r2, r2, #22
 801a244:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a246:	193b      	adds	r3, r7, r4
 801a248:	881b      	ldrh	r3, [r3, #0]
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d009      	beq.n	801a262 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	6818      	ldr	r0, [r3, #0]
 801a252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a254:	6959      	ldr	r1, [r3, #20]
 801a256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a258:	895a      	ldrh	r2, [r3, #10]
 801a25a:	193b      	adds	r3, r7, r4
 801a25c:	881b      	ldrh	r3, [r3, #0]
 801a25e:	f007 f85b 	bl	8021318 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801a262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a264:	69da      	ldr	r2, [r3, #28]
 801a266:	2150      	movs	r1, #80	@ 0x50
 801a268:	187b      	adds	r3, r7, r1
 801a26a:	881b      	ldrh	r3, [r3, #0]
 801a26c:	18d2      	adds	r2, r2, r3
 801a26e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a270:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801a272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a274:	695a      	ldr	r2, [r3, #20]
 801a276:	187b      	adds	r3, r7, r1
 801a278:	881b      	ldrh	r3, [r3, #0]
 801a27a:	18d2      	adds	r2, r2, r3
 801a27c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a27e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801a280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a282:	699b      	ldr	r3, [r3, #24]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d005      	beq.n	801a294 <PCD_EP_ISR_Handler+0x550>
 801a288:	187b      	adds	r3, r7, r1
 801a28a:	881a      	ldrh	r2, [r3, #0]
 801a28c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a28e:	691b      	ldr	r3, [r3, #16]
 801a290:	429a      	cmp	r2, r3
 801a292:	d207      	bcs.n	801a2a4 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801a294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a296:	781a      	ldrb	r2, [r3, #0]
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	0011      	movs	r1, r2
 801a29c:	0018      	movs	r0, r3
 801a29e:	f009 f862 	bl	8023366 <HAL_PCD_DataOutStageCallback>
 801a2a2:	e006      	b.n	801a2b2 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a2aa:	0011      	movs	r1, r2
 801a2ac:	0018      	movs	r0, r3
 801a2ae:	f005 fd77 	bl	801fda0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801a2b2:	244a      	movs	r4, #74	@ 0x4a
 801a2b4:	193b      	adds	r3, r7, r4
 801a2b6:	881b      	ldrh	r3, [r3, #0]
 801a2b8:	2280      	movs	r2, #128	@ 0x80
 801a2ba:	4013      	ands	r3, r2
 801a2bc:	d100      	bne.n	801a2c0 <PCD_EP_ISR_Handler+0x57c>
 801a2be:	e133      	b.n	801a528 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 801a2c0:	204d      	movs	r0, #77	@ 0x4d
 801a2c2:	183b      	adds	r3, r7, r0
 801a2c4:	781b      	ldrb	r3, [r3, #0]
 801a2c6:	1c5a      	adds	r2, r3, #1
 801a2c8:	0013      	movs	r3, r2
 801a2ca:	009b      	lsls	r3, r3, #2
 801a2cc:	189b      	adds	r3, r3, r2
 801a2ce:	00db      	lsls	r3, r3, #3
 801a2d0:	687a      	ldr	r2, [r7, #4]
 801a2d2:	18d3      	adds	r3, r2, r3
 801a2d4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	681b      	ldr	r3, [r3, #0]
 801a2da:	001a      	movs	r2, r3
 801a2dc:	183b      	adds	r3, r7, r0
 801a2de:	781b      	ldrb	r3, [r3, #0]
 801a2e0:	009b      	lsls	r3, r3, #2
 801a2e2:	18d3      	adds	r3, r2, r3
 801a2e4:	881b      	ldrh	r3, [r3, #0]
 801a2e6:	b29a      	uxth	r2, r3
 801a2e8:	2542      	movs	r5, #66	@ 0x42
 801a2ea:	197b      	adds	r3, r7, r5
 801a2ec:	494f      	ldr	r1, [pc, #316]	@ (801a42c <PCD_EP_ISR_Handler+0x6e8>)
 801a2ee:	400a      	ands	r2, r1
 801a2f0:	801a      	strh	r2, [r3, #0]
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	001a      	movs	r2, r3
 801a2f8:	183b      	adds	r3, r7, r0
 801a2fa:	781b      	ldrb	r3, [r3, #0]
 801a2fc:	009b      	lsls	r3, r3, #2
 801a2fe:	18d3      	adds	r3, r2, r3
 801a300:	197a      	adds	r2, r7, r5
 801a302:	8812      	ldrh	r2, [r2, #0]
 801a304:	494a      	ldr	r1, [pc, #296]	@ (801a430 <PCD_EP_ISR_Handler+0x6ec>)
 801a306:	430a      	orrs	r2, r1
 801a308:	b292      	uxth	r2, r2
 801a30a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801a30c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a30e:	78db      	ldrb	r3, [r3, #3]
 801a310:	2b01      	cmp	r3, #1
 801a312:	d000      	beq.n	801a316 <PCD_EP_ISR_Handler+0x5d2>
 801a314:	e0af      	b.n	801a476 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801a316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a318:	2200      	movs	r2, #0
 801a31a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801a31c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a31e:	7b1b      	ldrb	r3, [r3, #12]
 801a320:	2b00      	cmp	r3, #0
 801a322:	d100      	bne.n	801a326 <PCD_EP_ISR_Handler+0x5e2>
 801a324:	e09f      	b.n	801a466 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a326:	193b      	adds	r3, r7, r4
 801a328:	881b      	ldrh	r3, [r3, #0]
 801a32a:	2240      	movs	r2, #64	@ 0x40
 801a32c:	4013      	ands	r3, r2
 801a32e:	d046      	beq.n	801a3be <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a332:	785b      	ldrb	r3, [r3, #1]
 801a334:	2b00      	cmp	r3, #0
 801a336:	d125      	bne.n	801a384 <PCD_EP_ISR_Handler+0x640>
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	2250      	movs	r2, #80	@ 0x50
 801a344:	5a9b      	ldrh	r3, [r3, r2]
 801a346:	b29b      	uxth	r3, r3
 801a348:	001a      	movs	r2, r3
 801a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a34c:	189b      	adds	r3, r3, r2
 801a34e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a352:	781b      	ldrb	r3, [r3, #0]
 801a354:	00da      	lsls	r2, r3, #3
 801a356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a358:	18d3      	adds	r3, r2, r3
 801a35a:	4a33      	ldr	r2, [pc, #204]	@ (801a428 <PCD_EP_ISR_Handler+0x6e4>)
 801a35c:	4694      	mov	ip, r2
 801a35e:	4463      	add	r3, ip
 801a360:	623b      	str	r3, [r7, #32]
 801a362:	6a3b      	ldr	r3, [r7, #32]
 801a364:	881b      	ldrh	r3, [r3, #0]
 801a366:	b29b      	uxth	r3, r3
 801a368:	059b      	lsls	r3, r3, #22
 801a36a:	0d9b      	lsrs	r3, r3, #22
 801a36c:	b29a      	uxth	r2, r3
 801a36e:	6a3b      	ldr	r3, [r7, #32]
 801a370:	801a      	strh	r2, [r3, #0]
 801a372:	6a3b      	ldr	r3, [r7, #32]
 801a374:	881b      	ldrh	r3, [r3, #0]
 801a376:	b29b      	uxth	r3, r3
 801a378:	4a2d      	ldr	r2, [pc, #180]	@ (801a430 <PCD_EP_ISR_Handler+0x6ec>)
 801a37a:	4313      	orrs	r3, r2
 801a37c:	b29a      	uxth	r2, r3
 801a37e:	6a3b      	ldr	r3, [r7, #32]
 801a380:	801a      	strh	r2, [r3, #0]
 801a382:	e070      	b.n	801a466 <PCD_EP_ISR_Handler+0x722>
 801a384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a386:	785b      	ldrb	r3, [r3, #1]
 801a388:	2b01      	cmp	r3, #1
 801a38a:	d16c      	bne.n	801a466 <PCD_EP_ISR_Handler+0x722>
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	2250      	movs	r2, #80	@ 0x50
 801a398:	5a9b      	ldrh	r3, [r3, r2]
 801a39a:	b29b      	uxth	r3, r3
 801a39c:	001a      	movs	r2, r3
 801a39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3a0:	189b      	adds	r3, r3, r2
 801a3a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a3a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3a6:	781b      	ldrb	r3, [r3, #0]
 801a3a8:	00da      	lsls	r2, r3, #3
 801a3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3ac:	18d3      	adds	r3, r2, r3
 801a3ae:	4a1e      	ldr	r2, [pc, #120]	@ (801a428 <PCD_EP_ISR_Handler+0x6e4>)
 801a3b0:	4694      	mov	ip, r2
 801a3b2:	4463      	add	r3, ip
 801a3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	801a      	strh	r2, [r3, #0]
 801a3bc:	e053      	b.n	801a466 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a3c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3c6:	785b      	ldrb	r3, [r3, #1]
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d133      	bne.n	801a434 <PCD_EP_ISR_Handler+0x6f0>
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	637b      	str	r3, [r7, #52]	@ 0x34
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	2250      	movs	r2, #80	@ 0x50
 801a3d8:	5a9b      	ldrh	r3, [r3, r2]
 801a3da:	b29b      	uxth	r3, r3
 801a3dc:	001a      	movs	r2, r3
 801a3de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3e0:	189b      	adds	r3, r3, r2
 801a3e2:	637b      	str	r3, [r7, #52]	@ 0x34
 801a3e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3e6:	781b      	ldrb	r3, [r3, #0]
 801a3e8:	00da      	lsls	r2, r3, #3
 801a3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3ec:	18d3      	adds	r3, r2, r3
 801a3ee:	4a0b      	ldr	r2, [pc, #44]	@ (801a41c <PCD_EP_ISR_Handler+0x6d8>)
 801a3f0:	4694      	mov	ip, r2
 801a3f2:	4463      	add	r3, ip
 801a3f4:	633b      	str	r3, [r7, #48]	@ 0x30
 801a3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3f8:	881b      	ldrh	r3, [r3, #0]
 801a3fa:	b29b      	uxth	r3, r3
 801a3fc:	059b      	lsls	r3, r3, #22
 801a3fe:	0d9b      	lsrs	r3, r3, #22
 801a400:	b29a      	uxth	r2, r3
 801a402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a404:	801a      	strh	r2, [r3, #0]
 801a406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a408:	881b      	ldrh	r3, [r3, #0]
 801a40a:	b29b      	uxth	r3, r3
 801a40c:	4a08      	ldr	r2, [pc, #32]	@ (801a430 <PCD_EP_ISR_Handler+0x6ec>)
 801a40e:	4313      	orrs	r3, r2
 801a410:	b29a      	uxth	r2, r3
 801a412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a414:	801a      	strh	r2, [r3, #0]
 801a416:	e026      	b.n	801a466 <PCD_EP_ISR_Handler+0x722>
 801a418:	00000f8f 	.word	0x00000f8f
 801a41c:	00000406 	.word	0x00000406
 801a420:	ffff8f8f 	.word	0xffff8f8f
 801a424:	ffff80c0 	.word	0xffff80c0
 801a428:	00000402 	.word	0x00000402
 801a42c:	ffff8f0f 	.word	0xffff8f0f
 801a430:	ffff8000 	.word	0xffff8000
 801a434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a436:	785b      	ldrb	r3, [r3, #1]
 801a438:	2b01      	cmp	r3, #1
 801a43a:	d114      	bne.n	801a466 <PCD_EP_ISR_Handler+0x722>
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	2250      	movs	r2, #80	@ 0x50
 801a442:	5a9b      	ldrh	r3, [r3, r2]
 801a444:	b29b      	uxth	r3, r3
 801a446:	001a      	movs	r2, r3
 801a448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a44a:	189b      	adds	r3, r3, r2
 801a44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a44e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a450:	781b      	ldrb	r3, [r3, #0]
 801a452:	00da      	lsls	r2, r3, #3
 801a454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a456:	18d3      	adds	r3, r2, r3
 801a458:	4a3b      	ldr	r2, [pc, #236]	@ (801a548 <PCD_EP_ISR_Handler+0x804>)
 801a45a:	4694      	mov	ip, r2
 801a45c:	4463      	add	r3, ip
 801a45e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a462:	2200      	movs	r2, #0
 801a464:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a468:	781a      	ldrb	r2, [r3, #0]
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	0011      	movs	r1, r2
 801a46e:	0018      	movs	r0, r3
 801a470:	f008 ff9a 	bl	80233a8 <HAL_PCD_DataInStageCallback>
 801a474:	e058      	b.n	801a528 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801a476:	234a      	movs	r3, #74	@ 0x4a
 801a478:	18fb      	adds	r3, r7, r3
 801a47a:	881a      	ldrh	r2, [r3, #0]
 801a47c:	2380      	movs	r3, #128	@ 0x80
 801a47e:	005b      	lsls	r3, r3, #1
 801a480:	4013      	ands	r3, r2
 801a482:	d149      	bne.n	801a518 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	2250      	movs	r2, #80	@ 0x50
 801a48a:	5a9b      	ldrh	r3, [r3, r2]
 801a48c:	b29b      	uxth	r3, r3
 801a48e:	001a      	movs	r2, r3
 801a490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a492:	781b      	ldrb	r3, [r3, #0]
 801a494:	00db      	lsls	r3, r3, #3
 801a496:	18d2      	adds	r2, r2, r3
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	18d3      	adds	r3, r2, r3
 801a49e:	4a2b      	ldr	r2, [pc, #172]	@ (801a54c <PCD_EP_ISR_Handler+0x808>)
 801a4a0:	4694      	mov	ip, r2
 801a4a2:	4463      	add	r3, ip
 801a4a4:	881a      	ldrh	r2, [r3, #0]
 801a4a6:	2140      	movs	r1, #64	@ 0x40
 801a4a8:	187b      	adds	r3, r7, r1
 801a4aa:	0592      	lsls	r2, r2, #22
 801a4ac:	0d92      	lsrs	r2, r2, #22
 801a4ae:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 801a4b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4b2:	699a      	ldr	r2, [r3, #24]
 801a4b4:	187b      	adds	r3, r7, r1
 801a4b6:	881b      	ldrh	r3, [r3, #0]
 801a4b8:	429a      	cmp	r2, r3
 801a4ba:	d907      	bls.n	801a4cc <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801a4bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4be:	699a      	ldr	r2, [r3, #24]
 801a4c0:	187b      	adds	r3, r7, r1
 801a4c2:	881b      	ldrh	r3, [r3, #0]
 801a4c4:	1ad2      	subs	r2, r2, r3
 801a4c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4c8:	619a      	str	r2, [r3, #24]
 801a4ca:	e002      	b.n	801a4d2 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801a4cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4ce:	2200      	movs	r2, #0
 801a4d0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801a4d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4d4:	699b      	ldr	r3, [r3, #24]
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d107      	bne.n	801a4ea <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a4da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4dc:	781a      	ldrb	r2, [r3, #0]
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	0011      	movs	r1, r2
 801a4e2:	0018      	movs	r0, r3
 801a4e4:	f008 ff60 	bl	80233a8 <HAL_PCD_DataInStageCallback>
 801a4e8:	e01e      	b.n	801a528 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801a4ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4ec:	695a      	ldr	r2, [r3, #20]
 801a4ee:	2140      	movs	r1, #64	@ 0x40
 801a4f0:	187b      	adds	r3, r7, r1
 801a4f2:	881b      	ldrh	r3, [r3, #0]
 801a4f4:	18d2      	adds	r2, r2, r3
 801a4f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4f8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801a4fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4fc:	69da      	ldr	r2, [r3, #28]
 801a4fe:	187b      	adds	r3, r7, r1
 801a500:	881b      	ldrh	r3, [r3, #0]
 801a502:	18d2      	adds	r2, r2, r3
 801a504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a506:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a50e:	0011      	movs	r1, r2
 801a510:	0018      	movs	r0, r3
 801a512:	f005 fc45 	bl	801fda0 <USB_EPStartXfer>
 801a516:	e007      	b.n	801a528 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801a518:	234a      	movs	r3, #74	@ 0x4a
 801a51a:	18fb      	adds	r3, r7, r3
 801a51c:	881a      	ldrh	r2, [r3, #0]
 801a51e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	0018      	movs	r0, r3
 801a524:	f000 f930 	bl	801a788 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	2244      	movs	r2, #68	@ 0x44
 801a52e:	5a9b      	ldrh	r3, [r3, r2]
 801a530:	b29b      	uxth	r3, r3
 801a532:	b21b      	sxth	r3, r3
 801a534:	2b00      	cmp	r3, #0
 801a536:	da01      	bge.n	801a53c <PCD_EP_ISR_Handler+0x7f8>
 801a538:	f7ff fc0a 	bl	8019d50 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801a53c:	2300      	movs	r3, #0
}
 801a53e:	0018      	movs	r0, r3
 801a540:	46bd      	mov	sp, r7
 801a542:	b016      	add	sp, #88	@ 0x58
 801a544:	bdb0      	pop	{r4, r5, r7, pc}
 801a546:	46c0      	nop			@ (mov r8, r8)
 801a548:	00000406 	.word	0x00000406
 801a54c:	00000402 	.word	0x00000402

0801a550 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a550:	b590      	push	{r4, r7, lr}
 801a552:	b089      	sub	sp, #36	@ 0x24
 801a554:	af00      	add	r7, sp, #0
 801a556:	60f8      	str	r0, [r7, #12]
 801a558:	60b9      	str	r1, [r7, #8]
 801a55a:	1dbb      	adds	r3, r7, #6
 801a55c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a55e:	1dbb      	adds	r3, r7, #6
 801a560:	881a      	ldrh	r2, [r3, #0]
 801a562:	2380      	movs	r3, #128	@ 0x80
 801a564:	01db      	lsls	r3, r3, #7
 801a566:	4013      	ands	r3, r2
 801a568:	d100      	bne.n	801a56c <HAL_PCD_EP_DB_Receive+0x1c>
 801a56a:	e07d      	b.n	801a668 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a56c:	68fb      	ldr	r3, [r7, #12]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	2250      	movs	r2, #80	@ 0x50
 801a572:	5a9b      	ldrh	r3, [r3, r2]
 801a574:	b29b      	uxth	r3, r3
 801a576:	001a      	movs	r2, r3
 801a578:	68bb      	ldr	r3, [r7, #8]
 801a57a:	781b      	ldrb	r3, [r3, #0]
 801a57c:	00db      	lsls	r3, r3, #3
 801a57e:	18d2      	adds	r2, r2, r3
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	18d3      	adds	r3, r2, r3
 801a586:	4a7a      	ldr	r2, [pc, #488]	@ (801a770 <HAL_PCD_EP_DB_Receive+0x220>)
 801a588:	4694      	mov	ip, r2
 801a58a:	4463      	add	r3, ip
 801a58c:	881a      	ldrh	r2, [r3, #0]
 801a58e:	211a      	movs	r1, #26
 801a590:	187b      	adds	r3, r7, r1
 801a592:	0592      	lsls	r2, r2, #22
 801a594:	0d92      	lsrs	r2, r2, #22
 801a596:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a598:	68bb      	ldr	r3, [r7, #8]
 801a59a:	699a      	ldr	r2, [r3, #24]
 801a59c:	187b      	adds	r3, r7, r1
 801a59e:	881b      	ldrh	r3, [r3, #0]
 801a5a0:	429a      	cmp	r2, r3
 801a5a2:	d307      	bcc.n	801a5b4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 801a5a4:	68bb      	ldr	r3, [r7, #8]
 801a5a6:	699a      	ldr	r2, [r3, #24]
 801a5a8:	187b      	adds	r3, r7, r1
 801a5aa:	881b      	ldrh	r3, [r3, #0]
 801a5ac:	1ad2      	subs	r2, r2, r3
 801a5ae:	68bb      	ldr	r3, [r7, #8]
 801a5b0:	619a      	str	r2, [r3, #24]
 801a5b2:	e002      	b.n	801a5ba <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 801a5b4:	68bb      	ldr	r3, [r7, #8]
 801a5b6:	2200      	movs	r2, #0
 801a5b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a5ba:	68bb      	ldr	r3, [r7, #8]
 801a5bc:	699b      	ldr	r3, [r3, #24]
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d121      	bne.n	801a606 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	001a      	movs	r2, r3
 801a5c8:	68bb      	ldr	r3, [r7, #8]
 801a5ca:	781b      	ldrb	r3, [r3, #0]
 801a5cc:	009b      	lsls	r3, r3, #2
 801a5ce:	18d3      	adds	r3, r2, r3
 801a5d0:	881b      	ldrh	r3, [r3, #0]
 801a5d2:	b29a      	uxth	r2, r3
 801a5d4:	2018      	movs	r0, #24
 801a5d6:	183b      	adds	r3, r7, r0
 801a5d8:	4966      	ldr	r1, [pc, #408]	@ (801a774 <HAL_PCD_EP_DB_Receive+0x224>)
 801a5da:	400a      	ands	r2, r1
 801a5dc:	801a      	strh	r2, [r3, #0]
 801a5de:	183b      	adds	r3, r7, r0
 801a5e0:	183a      	adds	r2, r7, r0
 801a5e2:	8812      	ldrh	r2, [r2, #0]
 801a5e4:	2180      	movs	r1, #128	@ 0x80
 801a5e6:	0189      	lsls	r1, r1, #6
 801a5e8:	404a      	eors	r2, r1
 801a5ea:	801a      	strh	r2, [r3, #0]
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	001a      	movs	r2, r3
 801a5f2:	68bb      	ldr	r3, [r7, #8]
 801a5f4:	781b      	ldrb	r3, [r3, #0]
 801a5f6:	009b      	lsls	r3, r3, #2
 801a5f8:	18d3      	adds	r3, r2, r3
 801a5fa:	183a      	adds	r2, r7, r0
 801a5fc:	8812      	ldrh	r2, [r2, #0]
 801a5fe:	495e      	ldr	r1, [pc, #376]	@ (801a778 <HAL_PCD_EP_DB_Receive+0x228>)
 801a600:	430a      	orrs	r2, r1
 801a602:	b292      	uxth	r2, r2
 801a604:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a606:	1dbb      	adds	r3, r7, #6
 801a608:	881b      	ldrh	r3, [r3, #0]
 801a60a:	2240      	movs	r2, #64	@ 0x40
 801a60c:	4013      	ands	r3, r2
 801a60e:	d01a      	beq.n	801a646 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	001a      	movs	r2, r3
 801a616:	68bb      	ldr	r3, [r7, #8]
 801a618:	781b      	ldrb	r3, [r3, #0]
 801a61a:	009b      	lsls	r3, r3, #2
 801a61c:	18d3      	adds	r3, r2, r3
 801a61e:	881b      	ldrh	r3, [r3, #0]
 801a620:	b29a      	uxth	r2, r3
 801a622:	2016      	movs	r0, #22
 801a624:	183b      	adds	r3, r7, r0
 801a626:	4955      	ldr	r1, [pc, #340]	@ (801a77c <HAL_PCD_EP_DB_Receive+0x22c>)
 801a628:	400a      	ands	r2, r1
 801a62a:	801a      	strh	r2, [r3, #0]
 801a62c:	68fb      	ldr	r3, [r7, #12]
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	001a      	movs	r2, r3
 801a632:	68bb      	ldr	r3, [r7, #8]
 801a634:	781b      	ldrb	r3, [r3, #0]
 801a636:	009b      	lsls	r3, r3, #2
 801a638:	18d3      	adds	r3, r2, r3
 801a63a:	183a      	adds	r2, r7, r0
 801a63c:	8812      	ldrh	r2, [r2, #0]
 801a63e:	4950      	ldr	r1, [pc, #320]	@ (801a780 <HAL_PCD_EP_DB_Receive+0x230>)
 801a640:	430a      	orrs	r2, r1
 801a642:	b292      	uxth	r2, r2
 801a644:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a646:	241a      	movs	r4, #26
 801a648:	193b      	adds	r3, r7, r4
 801a64a:	881b      	ldrh	r3, [r3, #0]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d100      	bne.n	801a652 <HAL_PCD_EP_DB_Receive+0x102>
 801a650:	e086      	b.n	801a760 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a652:	68fb      	ldr	r3, [r7, #12]
 801a654:	6818      	ldr	r0, [r3, #0]
 801a656:	68bb      	ldr	r3, [r7, #8]
 801a658:	6959      	ldr	r1, [r3, #20]
 801a65a:	68bb      	ldr	r3, [r7, #8]
 801a65c:	891a      	ldrh	r2, [r3, #8]
 801a65e:	193b      	adds	r3, r7, r4
 801a660:	881b      	ldrh	r3, [r3, #0]
 801a662:	f006 fe59 	bl	8021318 <USB_ReadPMA>
 801a666:	e07b      	b.n	801a760 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	2250      	movs	r2, #80	@ 0x50
 801a66e:	5a9b      	ldrh	r3, [r3, r2]
 801a670:	b29b      	uxth	r3, r3
 801a672:	001a      	movs	r2, r3
 801a674:	68bb      	ldr	r3, [r7, #8]
 801a676:	781b      	ldrb	r3, [r3, #0]
 801a678:	00db      	lsls	r3, r3, #3
 801a67a:	18d2      	adds	r2, r2, r3
 801a67c:	68fb      	ldr	r3, [r7, #12]
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	18d3      	adds	r3, r2, r3
 801a682:	4a40      	ldr	r2, [pc, #256]	@ (801a784 <HAL_PCD_EP_DB_Receive+0x234>)
 801a684:	4694      	mov	ip, r2
 801a686:	4463      	add	r3, ip
 801a688:	881a      	ldrh	r2, [r3, #0]
 801a68a:	211a      	movs	r1, #26
 801a68c:	187b      	adds	r3, r7, r1
 801a68e:	0592      	lsls	r2, r2, #22
 801a690:	0d92      	lsrs	r2, r2, #22
 801a692:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a694:	68bb      	ldr	r3, [r7, #8]
 801a696:	699a      	ldr	r2, [r3, #24]
 801a698:	187b      	adds	r3, r7, r1
 801a69a:	881b      	ldrh	r3, [r3, #0]
 801a69c:	429a      	cmp	r2, r3
 801a69e:	d307      	bcc.n	801a6b0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 801a6a0:	68bb      	ldr	r3, [r7, #8]
 801a6a2:	699a      	ldr	r2, [r3, #24]
 801a6a4:	187b      	adds	r3, r7, r1
 801a6a6:	881b      	ldrh	r3, [r3, #0]
 801a6a8:	1ad2      	subs	r2, r2, r3
 801a6aa:	68bb      	ldr	r3, [r7, #8]
 801a6ac:	619a      	str	r2, [r3, #24]
 801a6ae:	e002      	b.n	801a6b6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 801a6b0:	68bb      	ldr	r3, [r7, #8]
 801a6b2:	2200      	movs	r2, #0
 801a6b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a6b6:	68bb      	ldr	r3, [r7, #8]
 801a6b8:	699b      	ldr	r3, [r3, #24]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d121      	bne.n	801a702 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	001a      	movs	r2, r3
 801a6c4:	68bb      	ldr	r3, [r7, #8]
 801a6c6:	781b      	ldrb	r3, [r3, #0]
 801a6c8:	009b      	lsls	r3, r3, #2
 801a6ca:	18d3      	adds	r3, r2, r3
 801a6cc:	881b      	ldrh	r3, [r3, #0]
 801a6ce:	b29a      	uxth	r2, r3
 801a6d0:	201e      	movs	r0, #30
 801a6d2:	183b      	adds	r3, r7, r0
 801a6d4:	4927      	ldr	r1, [pc, #156]	@ (801a774 <HAL_PCD_EP_DB_Receive+0x224>)
 801a6d6:	400a      	ands	r2, r1
 801a6d8:	801a      	strh	r2, [r3, #0]
 801a6da:	183b      	adds	r3, r7, r0
 801a6dc:	183a      	adds	r2, r7, r0
 801a6de:	8812      	ldrh	r2, [r2, #0]
 801a6e0:	2180      	movs	r1, #128	@ 0x80
 801a6e2:	0189      	lsls	r1, r1, #6
 801a6e4:	404a      	eors	r2, r1
 801a6e6:	801a      	strh	r2, [r3, #0]
 801a6e8:	68fb      	ldr	r3, [r7, #12]
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	001a      	movs	r2, r3
 801a6ee:	68bb      	ldr	r3, [r7, #8]
 801a6f0:	781b      	ldrb	r3, [r3, #0]
 801a6f2:	009b      	lsls	r3, r3, #2
 801a6f4:	18d3      	adds	r3, r2, r3
 801a6f6:	183a      	adds	r2, r7, r0
 801a6f8:	8812      	ldrh	r2, [r2, #0]
 801a6fa:	491f      	ldr	r1, [pc, #124]	@ (801a778 <HAL_PCD_EP_DB_Receive+0x228>)
 801a6fc:	430a      	orrs	r2, r1
 801a6fe:	b292      	uxth	r2, r2
 801a700:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801a702:	1dbb      	adds	r3, r7, #6
 801a704:	881b      	ldrh	r3, [r3, #0]
 801a706:	2240      	movs	r2, #64	@ 0x40
 801a708:	4013      	ands	r3, r2
 801a70a:	d11a      	bne.n	801a742 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	001a      	movs	r2, r3
 801a712:	68bb      	ldr	r3, [r7, #8]
 801a714:	781b      	ldrb	r3, [r3, #0]
 801a716:	009b      	lsls	r3, r3, #2
 801a718:	18d3      	adds	r3, r2, r3
 801a71a:	881b      	ldrh	r3, [r3, #0]
 801a71c:	b29a      	uxth	r2, r3
 801a71e:	201c      	movs	r0, #28
 801a720:	183b      	adds	r3, r7, r0
 801a722:	4916      	ldr	r1, [pc, #88]	@ (801a77c <HAL_PCD_EP_DB_Receive+0x22c>)
 801a724:	400a      	ands	r2, r1
 801a726:	801a      	strh	r2, [r3, #0]
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	001a      	movs	r2, r3
 801a72e:	68bb      	ldr	r3, [r7, #8]
 801a730:	781b      	ldrb	r3, [r3, #0]
 801a732:	009b      	lsls	r3, r3, #2
 801a734:	18d3      	adds	r3, r2, r3
 801a736:	183a      	adds	r2, r7, r0
 801a738:	8812      	ldrh	r2, [r2, #0]
 801a73a:	4911      	ldr	r1, [pc, #68]	@ (801a780 <HAL_PCD_EP_DB_Receive+0x230>)
 801a73c:	430a      	orrs	r2, r1
 801a73e:	b292      	uxth	r2, r2
 801a740:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a742:	241a      	movs	r4, #26
 801a744:	193b      	adds	r3, r7, r4
 801a746:	881b      	ldrh	r3, [r3, #0]
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d009      	beq.n	801a760 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	6818      	ldr	r0, [r3, #0]
 801a750:	68bb      	ldr	r3, [r7, #8]
 801a752:	6959      	ldr	r1, [r3, #20]
 801a754:	68bb      	ldr	r3, [r7, #8]
 801a756:	895a      	ldrh	r2, [r3, #10]
 801a758:	193b      	adds	r3, r7, r4
 801a75a:	881b      	ldrh	r3, [r3, #0]
 801a75c:	f006 fddc 	bl	8021318 <USB_ReadPMA>
    }
  }

  return count;
 801a760:	231a      	movs	r3, #26
 801a762:	18fb      	adds	r3, r7, r3
 801a764:	881b      	ldrh	r3, [r3, #0]
}
 801a766:	0018      	movs	r0, r3
 801a768:	46bd      	mov	sp, r7
 801a76a:	b009      	add	sp, #36	@ 0x24
 801a76c:	bd90      	pop	{r4, r7, pc}
 801a76e:	46c0      	nop			@ (mov r8, r8)
 801a770:	00000402 	.word	0x00000402
 801a774:	ffffbf8f 	.word	0xffffbf8f
 801a778:	ffff8080 	.word	0xffff8080
 801a77c:	ffff8f8f 	.word	0xffff8f8f
 801a780:	ffff80c0 	.word	0xffff80c0
 801a784:	00000406 	.word	0x00000406

0801a788 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a788:	b580      	push	{r7, lr}
 801a78a:	b0a4      	sub	sp, #144	@ 0x90
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	60f8      	str	r0, [r7, #12]
 801a790:	60b9      	str	r1, [r7, #8]
 801a792:	1dbb      	adds	r3, r7, #6
 801a794:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a796:	1dbb      	adds	r3, r7, #6
 801a798:	881b      	ldrh	r3, [r3, #0]
 801a79a:	2240      	movs	r2, #64	@ 0x40
 801a79c:	4013      	ands	r3, r2
 801a79e:	d100      	bne.n	801a7a2 <HAL_PCD_EP_DB_Transmit+0x1a>
 801a7a0:	e1e4      	b.n	801ab6c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	2250      	movs	r2, #80	@ 0x50
 801a7a8:	5a9b      	ldrh	r3, [r3, r2]
 801a7aa:	b29b      	uxth	r3, r3
 801a7ac:	001a      	movs	r2, r3
 801a7ae:	68bb      	ldr	r3, [r7, #8]
 801a7b0:	781b      	ldrb	r3, [r3, #0]
 801a7b2:	00db      	lsls	r3, r3, #3
 801a7b4:	18d2      	adds	r2, r2, r3
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	18d3      	adds	r3, r2, r3
 801a7bc:	4ad0      	ldr	r2, [pc, #832]	@ (801ab00 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a7be:	4694      	mov	ip, r2
 801a7c0:	4463      	add	r3, ip
 801a7c2:	881a      	ldrh	r2, [r3, #0]
 801a7c4:	2186      	movs	r1, #134	@ 0x86
 801a7c6:	187b      	adds	r3, r7, r1
 801a7c8:	0592      	lsls	r2, r2, #22
 801a7ca:	0d92      	lsrs	r2, r2, #22
 801a7cc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801a7ce:	68bb      	ldr	r3, [r7, #8]
 801a7d0:	699a      	ldr	r2, [r3, #24]
 801a7d2:	187b      	adds	r3, r7, r1
 801a7d4:	881b      	ldrh	r3, [r3, #0]
 801a7d6:	429a      	cmp	r2, r3
 801a7d8:	d907      	bls.n	801a7ea <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801a7da:	68bb      	ldr	r3, [r7, #8]
 801a7dc:	699a      	ldr	r2, [r3, #24]
 801a7de:	187b      	adds	r3, r7, r1
 801a7e0:	881b      	ldrh	r3, [r3, #0]
 801a7e2:	1ad2      	subs	r2, r2, r3
 801a7e4:	68bb      	ldr	r3, [r7, #8]
 801a7e6:	619a      	str	r2, [r3, #24]
 801a7e8:	e002      	b.n	801a7f0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801a7ea:	68bb      	ldr	r3, [r7, #8]
 801a7ec:	2200      	movs	r2, #0
 801a7ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801a7f0:	68bb      	ldr	r3, [r7, #8]
 801a7f2:	699b      	ldr	r3, [r3, #24]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d000      	beq.n	801a7fa <HAL_PCD_EP_DB_Transmit+0x72>
 801a7f8:	e0b5      	b.n	801a966 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a7fa:	68bb      	ldr	r3, [r7, #8]
 801a7fc:	785b      	ldrb	r3, [r3, #1]
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d125      	bne.n	801a84e <HAL_PCD_EP_DB_Transmit+0xc6>
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	2250      	movs	r2, #80	@ 0x50
 801a80e:	5a9b      	ldrh	r3, [r3, r2]
 801a810:	b29b      	uxth	r3, r3
 801a812:	001a      	movs	r2, r3
 801a814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a816:	189b      	adds	r3, r3, r2
 801a818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a81a:	68bb      	ldr	r3, [r7, #8]
 801a81c:	781b      	ldrb	r3, [r3, #0]
 801a81e:	00da      	lsls	r2, r3, #3
 801a820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a822:	18d3      	adds	r3, r2, r3
 801a824:	4ab6      	ldr	r2, [pc, #728]	@ (801ab00 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a826:	4694      	mov	ip, r2
 801a828:	4463      	add	r3, ip
 801a82a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a82e:	881b      	ldrh	r3, [r3, #0]
 801a830:	b29b      	uxth	r3, r3
 801a832:	059b      	lsls	r3, r3, #22
 801a834:	0d9b      	lsrs	r3, r3, #22
 801a836:	b29a      	uxth	r2, r3
 801a838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a83a:	801a      	strh	r2, [r3, #0]
 801a83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a83e:	881b      	ldrh	r3, [r3, #0]
 801a840:	b29b      	uxth	r3, r3
 801a842:	4ab0      	ldr	r2, [pc, #704]	@ (801ab04 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a844:	4313      	orrs	r3, r2
 801a846:	b29a      	uxth	r2, r3
 801a848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a84a:	801a      	strh	r2, [r3, #0]
 801a84c:	e01b      	b.n	801a886 <HAL_PCD_EP_DB_Transmit+0xfe>
 801a84e:	68bb      	ldr	r3, [r7, #8]
 801a850:	785b      	ldrb	r3, [r3, #1]
 801a852:	2b01      	cmp	r3, #1
 801a854:	d117      	bne.n	801a886 <HAL_PCD_EP_DB_Transmit+0xfe>
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	637b      	str	r3, [r7, #52]	@ 0x34
 801a85c:	68fb      	ldr	r3, [r7, #12]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	2250      	movs	r2, #80	@ 0x50
 801a862:	5a9b      	ldrh	r3, [r3, r2]
 801a864:	b29b      	uxth	r3, r3
 801a866:	001a      	movs	r2, r3
 801a868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a86a:	189b      	adds	r3, r3, r2
 801a86c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a86e:	68bb      	ldr	r3, [r7, #8]
 801a870:	781b      	ldrb	r3, [r3, #0]
 801a872:	00da      	lsls	r2, r3, #3
 801a874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a876:	18d3      	adds	r3, r2, r3
 801a878:	4aa1      	ldr	r2, [pc, #644]	@ (801ab00 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a87a:	4694      	mov	ip, r2
 801a87c:	4463      	add	r3, ip
 801a87e:	633b      	str	r3, [r7, #48]	@ 0x30
 801a880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a882:	2200      	movs	r2, #0
 801a884:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	627b      	str	r3, [r7, #36]	@ 0x24
 801a88c:	68bb      	ldr	r3, [r7, #8]
 801a88e:	785b      	ldrb	r3, [r3, #1]
 801a890:	2b00      	cmp	r3, #0
 801a892:	d125      	bne.n	801a8e0 <HAL_PCD_EP_DB_Transmit+0x158>
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	61fb      	str	r3, [r7, #28]
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	2250      	movs	r2, #80	@ 0x50
 801a8a0:	5a9b      	ldrh	r3, [r3, r2]
 801a8a2:	b29b      	uxth	r3, r3
 801a8a4:	001a      	movs	r2, r3
 801a8a6:	69fb      	ldr	r3, [r7, #28]
 801a8a8:	189b      	adds	r3, r3, r2
 801a8aa:	61fb      	str	r3, [r7, #28]
 801a8ac:	68bb      	ldr	r3, [r7, #8]
 801a8ae:	781b      	ldrb	r3, [r3, #0]
 801a8b0:	00da      	lsls	r2, r3, #3
 801a8b2:	69fb      	ldr	r3, [r7, #28]
 801a8b4:	18d3      	adds	r3, r2, r3
 801a8b6:	4a94      	ldr	r2, [pc, #592]	@ (801ab08 <HAL_PCD_EP_DB_Transmit+0x380>)
 801a8b8:	4694      	mov	ip, r2
 801a8ba:	4463      	add	r3, ip
 801a8bc:	61bb      	str	r3, [r7, #24]
 801a8be:	69bb      	ldr	r3, [r7, #24]
 801a8c0:	881b      	ldrh	r3, [r3, #0]
 801a8c2:	b29b      	uxth	r3, r3
 801a8c4:	059b      	lsls	r3, r3, #22
 801a8c6:	0d9b      	lsrs	r3, r3, #22
 801a8c8:	b29a      	uxth	r2, r3
 801a8ca:	69bb      	ldr	r3, [r7, #24]
 801a8cc:	801a      	strh	r2, [r3, #0]
 801a8ce:	69bb      	ldr	r3, [r7, #24]
 801a8d0:	881b      	ldrh	r3, [r3, #0]
 801a8d2:	b29b      	uxth	r3, r3
 801a8d4:	4a8b      	ldr	r2, [pc, #556]	@ (801ab04 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a8d6:	4313      	orrs	r3, r2
 801a8d8:	b29a      	uxth	r2, r3
 801a8da:	69bb      	ldr	r3, [r7, #24]
 801a8dc:	801a      	strh	r2, [r3, #0]
 801a8de:	e018      	b.n	801a912 <HAL_PCD_EP_DB_Transmit+0x18a>
 801a8e0:	68bb      	ldr	r3, [r7, #8]
 801a8e2:	785b      	ldrb	r3, [r3, #1]
 801a8e4:	2b01      	cmp	r3, #1
 801a8e6:	d114      	bne.n	801a912 <HAL_PCD_EP_DB_Transmit+0x18a>
 801a8e8:	68fb      	ldr	r3, [r7, #12]
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	2250      	movs	r2, #80	@ 0x50
 801a8ee:	5a9b      	ldrh	r3, [r3, r2]
 801a8f0:	b29b      	uxth	r3, r3
 801a8f2:	001a      	movs	r2, r3
 801a8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8f6:	189b      	adds	r3, r3, r2
 801a8f8:	627b      	str	r3, [r7, #36]	@ 0x24
 801a8fa:	68bb      	ldr	r3, [r7, #8]
 801a8fc:	781b      	ldrb	r3, [r3, #0]
 801a8fe:	00da      	lsls	r2, r3, #3
 801a900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a902:	18d3      	adds	r3, r2, r3
 801a904:	4a80      	ldr	r2, [pc, #512]	@ (801ab08 <HAL_PCD_EP_DB_Transmit+0x380>)
 801a906:	4694      	mov	ip, r2
 801a908:	4463      	add	r3, ip
 801a90a:	623b      	str	r3, [r7, #32]
 801a90c:	6a3b      	ldr	r3, [r7, #32]
 801a90e:	2200      	movs	r2, #0
 801a910:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a912:	68bb      	ldr	r3, [r7, #8]
 801a914:	781a      	ldrb	r2, [r3, #0]
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	0011      	movs	r1, r2
 801a91a:	0018      	movs	r0, r3
 801a91c:	f008 fd44 	bl	80233a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a920:	1dbb      	adds	r3, r7, #6
 801a922:	881a      	ldrh	r2, [r3, #0]
 801a924:	2380      	movs	r3, #128	@ 0x80
 801a926:	01db      	lsls	r3, r3, #7
 801a928:	4013      	ands	r3, r2
 801a92a:	d100      	bne.n	801a92e <HAL_PCD_EP_DB_Transmit+0x1a6>
 801a92c:	e309      	b.n	801af42 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	001a      	movs	r2, r3
 801a934:	68bb      	ldr	r3, [r7, #8]
 801a936:	781b      	ldrb	r3, [r3, #0]
 801a938:	009b      	lsls	r3, r3, #2
 801a93a:	18d3      	adds	r3, r2, r3
 801a93c:	881b      	ldrh	r3, [r3, #0]
 801a93e:	b29a      	uxth	r2, r3
 801a940:	2016      	movs	r0, #22
 801a942:	183b      	adds	r3, r7, r0
 801a944:	4971      	ldr	r1, [pc, #452]	@ (801ab0c <HAL_PCD_EP_DB_Transmit+0x384>)
 801a946:	400a      	ands	r2, r1
 801a948:	801a      	strh	r2, [r3, #0]
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	001a      	movs	r2, r3
 801a950:	68bb      	ldr	r3, [r7, #8]
 801a952:	781b      	ldrb	r3, [r3, #0]
 801a954:	009b      	lsls	r3, r3, #2
 801a956:	18d3      	adds	r3, r2, r3
 801a958:	183a      	adds	r2, r7, r0
 801a95a:	8812      	ldrh	r2, [r2, #0]
 801a95c:	496c      	ldr	r1, [pc, #432]	@ (801ab10 <HAL_PCD_EP_DB_Transmit+0x388>)
 801a95e:	430a      	orrs	r2, r1
 801a960:	b292      	uxth	r2, r2
 801a962:	801a      	strh	r2, [r3, #0]
 801a964:	e2ed      	b.n	801af42 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a966:	1dbb      	adds	r3, r7, #6
 801a968:	881a      	ldrh	r2, [r3, #0]
 801a96a:	2380      	movs	r3, #128	@ 0x80
 801a96c:	01db      	lsls	r3, r3, #7
 801a96e:	4013      	ands	r3, r2
 801a970:	d01a      	beq.n	801a9a8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	001a      	movs	r2, r3
 801a978:	68bb      	ldr	r3, [r7, #8]
 801a97a:	781b      	ldrb	r3, [r3, #0]
 801a97c:	009b      	lsls	r3, r3, #2
 801a97e:	18d3      	adds	r3, r2, r3
 801a980:	881b      	ldrh	r3, [r3, #0]
 801a982:	b29a      	uxth	r2, r3
 801a984:	208a      	movs	r0, #138	@ 0x8a
 801a986:	183b      	adds	r3, r7, r0
 801a988:	4960      	ldr	r1, [pc, #384]	@ (801ab0c <HAL_PCD_EP_DB_Transmit+0x384>)
 801a98a:	400a      	ands	r2, r1
 801a98c:	801a      	strh	r2, [r3, #0]
 801a98e:	68fb      	ldr	r3, [r7, #12]
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	001a      	movs	r2, r3
 801a994:	68bb      	ldr	r3, [r7, #8]
 801a996:	781b      	ldrb	r3, [r3, #0]
 801a998:	009b      	lsls	r3, r3, #2
 801a99a:	18d3      	adds	r3, r2, r3
 801a99c:	183a      	adds	r2, r7, r0
 801a99e:	8812      	ldrh	r2, [r2, #0]
 801a9a0:	495b      	ldr	r1, [pc, #364]	@ (801ab10 <HAL_PCD_EP_DB_Transmit+0x388>)
 801a9a2:	430a      	orrs	r2, r1
 801a9a4:	b292      	uxth	r2, r2
 801a9a6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	2224      	movs	r2, #36	@ 0x24
 801a9ac:	5c9b      	ldrb	r3, [r3, r2]
 801a9ae:	2b01      	cmp	r3, #1
 801a9b0:	d000      	beq.n	801a9b4 <HAL_PCD_EP_DB_Transmit+0x22c>
 801a9b2:	e2c6      	b.n	801af42 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801a9b4:	68bb      	ldr	r3, [r7, #8]
 801a9b6:	695a      	ldr	r2, [r3, #20]
 801a9b8:	2186      	movs	r1, #134	@ 0x86
 801a9ba:	187b      	adds	r3, r7, r1
 801a9bc:	881b      	ldrh	r3, [r3, #0]
 801a9be:	18d2      	adds	r2, r2, r3
 801a9c0:	68bb      	ldr	r3, [r7, #8]
 801a9c2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801a9c4:	68bb      	ldr	r3, [r7, #8]
 801a9c6:	69da      	ldr	r2, [r3, #28]
 801a9c8:	187b      	adds	r3, r7, r1
 801a9ca:	881b      	ldrh	r3, [r3, #0]
 801a9cc:	18d2      	adds	r2, r2, r3
 801a9ce:	68bb      	ldr	r3, [r7, #8]
 801a9d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801a9d2:	68bb      	ldr	r3, [r7, #8]
 801a9d4:	6a1a      	ldr	r2, [r3, #32]
 801a9d6:	68bb      	ldr	r3, [r7, #8]
 801a9d8:	691b      	ldr	r3, [r3, #16]
 801a9da:	429a      	cmp	r2, r3
 801a9dc:	d30c      	bcc.n	801a9f8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801a9de:	68bb      	ldr	r3, [r7, #8]
 801a9e0:	691b      	ldr	r3, [r3, #16]
 801a9e2:	218c      	movs	r1, #140	@ 0x8c
 801a9e4:	187a      	adds	r2, r7, r1
 801a9e6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	6a1a      	ldr	r2, [r3, #32]
 801a9ec:	187b      	adds	r3, r7, r1
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	1ad2      	subs	r2, r2, r3
 801a9f2:	68bb      	ldr	r3, [r7, #8]
 801a9f4:	621a      	str	r2, [r3, #32]
 801a9f6:	e01a      	b.n	801aa2e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801a9f8:	68bb      	ldr	r3, [r7, #8]
 801a9fa:	6a1b      	ldr	r3, [r3, #32]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d10a      	bne.n	801aa16 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801aa00:	2386      	movs	r3, #134	@ 0x86
 801aa02:	18fb      	adds	r3, r7, r3
 801aa04:	881b      	ldrh	r3, [r3, #0]
 801aa06:	228c      	movs	r2, #140	@ 0x8c
 801aa08:	18ba      	adds	r2, r7, r2
 801aa0a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801aa0c:	68bb      	ldr	r3, [r7, #8]
 801aa0e:	2224      	movs	r2, #36	@ 0x24
 801aa10:	2100      	movs	r1, #0
 801aa12:	5499      	strb	r1, [r3, r2]
 801aa14:	e00b      	b.n	801aa2e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801aa16:	68bb      	ldr	r3, [r7, #8]
 801aa18:	2224      	movs	r2, #36	@ 0x24
 801aa1a:	2100      	movs	r1, #0
 801aa1c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801aa1e:	68bb      	ldr	r3, [r7, #8]
 801aa20:	6a1b      	ldr	r3, [r3, #32]
 801aa22:	228c      	movs	r2, #140	@ 0x8c
 801aa24:	18ba      	adds	r2, r7, r2
 801aa26:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801aa28:	68bb      	ldr	r3, [r7, #8]
 801aa2a:	2200      	movs	r2, #0
 801aa2c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801aa2e:	68bb      	ldr	r3, [r7, #8]
 801aa30:	785b      	ldrb	r3, [r3, #1]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d000      	beq.n	801aa38 <HAL_PCD_EP_DB_Transmit+0x2b0>
 801aa36:	e06d      	b.n	801ab14 <HAL_PCD_EP_DB_Transmit+0x38c>
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	2250      	movs	r2, #80	@ 0x50
 801aa44:	5a9b      	ldrh	r3, [r3, r2]
 801aa46:	b29b      	uxth	r3, r3
 801aa48:	001a      	movs	r2, r3
 801aa4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa4c:	189b      	adds	r3, r3, r2
 801aa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aa50:	68bb      	ldr	r3, [r7, #8]
 801aa52:	781b      	ldrb	r3, [r3, #0]
 801aa54:	00da      	lsls	r2, r3, #3
 801aa56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa58:	18d3      	adds	r3, r2, r3
 801aa5a:	4a29      	ldr	r2, [pc, #164]	@ (801ab00 <HAL_PCD_EP_DB_Transmit+0x378>)
 801aa5c:	4694      	mov	ip, r2
 801aa5e:	4463      	add	r3, ip
 801aa60:	63bb      	str	r3, [r7, #56]	@ 0x38
 801aa62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa64:	881b      	ldrh	r3, [r3, #0]
 801aa66:	b29b      	uxth	r3, r3
 801aa68:	059b      	lsls	r3, r3, #22
 801aa6a:	0d9b      	lsrs	r3, r3, #22
 801aa6c:	b29a      	uxth	r2, r3
 801aa6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa70:	801a      	strh	r2, [r3, #0]
 801aa72:	228c      	movs	r2, #140	@ 0x8c
 801aa74:	18bb      	adds	r3, r7, r2
 801aa76:	681b      	ldr	r3, [r3, #0]
 801aa78:	2b3e      	cmp	r3, #62	@ 0x3e
 801aa7a:	d91a      	bls.n	801aab2 <HAL_PCD_EP_DB_Transmit+0x32a>
 801aa7c:	18bb      	adds	r3, r7, r2
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	095b      	lsrs	r3, r3, #5
 801aa82:	64bb      	str	r3, [r7, #72]	@ 0x48
 801aa84:	18bb      	adds	r3, r7, r2
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	221f      	movs	r2, #31
 801aa8a:	4013      	ands	r3, r2
 801aa8c:	d102      	bne.n	801aa94 <HAL_PCD_EP_DB_Transmit+0x30c>
 801aa8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aa90:	3b01      	subs	r3, #1
 801aa92:	64bb      	str	r3, [r7, #72]	@ 0x48
 801aa94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa96:	881b      	ldrh	r3, [r3, #0]
 801aa98:	b29a      	uxth	r2, r3
 801aa9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aa9c:	b29b      	uxth	r3, r3
 801aa9e:	029b      	lsls	r3, r3, #10
 801aaa0:	b29b      	uxth	r3, r3
 801aaa2:	4313      	orrs	r3, r2
 801aaa4:	b29b      	uxth	r3, r3
 801aaa6:	4a17      	ldr	r2, [pc, #92]	@ (801ab04 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801aaa8:	4313      	orrs	r3, r2
 801aaaa:	b29a      	uxth	r2, r3
 801aaac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aaae:	801a      	strh	r2, [r3, #0]
 801aab0:	e04f      	b.n	801ab52 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801aab2:	238c      	movs	r3, #140	@ 0x8c
 801aab4:	18fb      	adds	r3, r7, r3
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d108      	bne.n	801aace <HAL_PCD_EP_DB_Transmit+0x346>
 801aabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aabe:	881b      	ldrh	r3, [r3, #0]
 801aac0:	b29b      	uxth	r3, r3
 801aac2:	4a10      	ldr	r2, [pc, #64]	@ (801ab04 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801aac4:	4313      	orrs	r3, r2
 801aac6:	b29a      	uxth	r2, r3
 801aac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aaca:	801a      	strh	r2, [r3, #0]
 801aacc:	e041      	b.n	801ab52 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801aace:	228c      	movs	r2, #140	@ 0x8c
 801aad0:	18bb      	adds	r3, r7, r2
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	085b      	lsrs	r3, r3, #1
 801aad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801aad8:	18bb      	adds	r3, r7, r2
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	2201      	movs	r2, #1
 801aade:	4013      	ands	r3, r2
 801aae0:	d002      	beq.n	801aae8 <HAL_PCD_EP_DB_Transmit+0x360>
 801aae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aae4:	3301      	adds	r3, #1
 801aae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801aae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aaea:	881b      	ldrh	r3, [r3, #0]
 801aaec:	b29a      	uxth	r2, r3
 801aaee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aaf0:	b29b      	uxth	r3, r3
 801aaf2:	029b      	lsls	r3, r3, #10
 801aaf4:	b29b      	uxth	r3, r3
 801aaf6:	4313      	orrs	r3, r2
 801aaf8:	b29a      	uxth	r2, r3
 801aafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aafc:	801a      	strh	r2, [r3, #0]
 801aafe:	e028      	b.n	801ab52 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ab00:	00000402 	.word	0x00000402
 801ab04:	ffff8000 	.word	0xffff8000
 801ab08:	00000406 	.word	0x00000406
 801ab0c:	ffff8f8f 	.word	0xffff8f8f
 801ab10:	ffffc080 	.word	0xffffc080
 801ab14:	68bb      	ldr	r3, [r7, #8]
 801ab16:	785b      	ldrb	r3, [r3, #1]
 801ab18:	2b01      	cmp	r3, #1
 801ab1a:	d11a      	bne.n	801ab52 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	647b      	str	r3, [r7, #68]	@ 0x44
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	2250      	movs	r2, #80	@ 0x50
 801ab28:	5a9b      	ldrh	r3, [r3, r2]
 801ab2a:	b29b      	uxth	r3, r3
 801ab2c:	001a      	movs	r2, r3
 801ab2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab30:	189b      	adds	r3, r3, r2
 801ab32:	647b      	str	r3, [r7, #68]	@ 0x44
 801ab34:	68bb      	ldr	r3, [r7, #8]
 801ab36:	781b      	ldrb	r3, [r3, #0]
 801ab38:	00da      	lsls	r2, r3, #3
 801ab3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab3c:	18d3      	adds	r3, r2, r3
 801ab3e:	4adb      	ldr	r2, [pc, #876]	@ (801aeac <HAL_PCD_EP_DB_Transmit+0x724>)
 801ab40:	4694      	mov	ip, r2
 801ab42:	4463      	add	r3, ip
 801ab44:	643b      	str	r3, [r7, #64]	@ 0x40
 801ab46:	238c      	movs	r3, #140	@ 0x8c
 801ab48:	18fb      	adds	r3, r7, r3
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	b29a      	uxth	r2, r3
 801ab4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ab50:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	6818      	ldr	r0, [r3, #0]
 801ab56:	68bb      	ldr	r3, [r7, #8]
 801ab58:	6959      	ldr	r1, [r3, #20]
 801ab5a:	68bb      	ldr	r3, [r7, #8]
 801ab5c:	891a      	ldrh	r2, [r3, #8]
 801ab5e:	238c      	movs	r3, #140	@ 0x8c
 801ab60:	18fb      	adds	r3, r7, r3
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	b29b      	uxth	r3, r3
 801ab66:	f006 fb8d 	bl	8021284 <USB_WritePMA>
 801ab6a:	e1ea      	b.n	801af42 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	2250      	movs	r2, #80	@ 0x50
 801ab72:	5a9b      	ldrh	r3, [r3, r2]
 801ab74:	b29b      	uxth	r3, r3
 801ab76:	001a      	movs	r2, r3
 801ab78:	68bb      	ldr	r3, [r7, #8]
 801ab7a:	781b      	ldrb	r3, [r3, #0]
 801ab7c:	00db      	lsls	r3, r3, #3
 801ab7e:	18d2      	adds	r2, r2, r3
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	18d3      	adds	r3, r2, r3
 801ab86:	4aca      	ldr	r2, [pc, #808]	@ (801aeb0 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ab88:	4694      	mov	ip, r2
 801ab8a:	4463      	add	r3, ip
 801ab8c:	881a      	ldrh	r2, [r3, #0]
 801ab8e:	2186      	movs	r1, #134	@ 0x86
 801ab90:	187b      	adds	r3, r7, r1
 801ab92:	0592      	lsls	r2, r2, #22
 801ab94:	0d92      	lsrs	r2, r2, #22
 801ab96:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801ab98:	68bb      	ldr	r3, [r7, #8]
 801ab9a:	699a      	ldr	r2, [r3, #24]
 801ab9c:	187b      	adds	r3, r7, r1
 801ab9e:	881b      	ldrh	r3, [r3, #0]
 801aba0:	429a      	cmp	r2, r3
 801aba2:	d307      	bcc.n	801abb4 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801aba4:	68bb      	ldr	r3, [r7, #8]
 801aba6:	699a      	ldr	r2, [r3, #24]
 801aba8:	187b      	adds	r3, r7, r1
 801abaa:	881b      	ldrh	r3, [r3, #0]
 801abac:	1ad2      	subs	r2, r2, r3
 801abae:	68bb      	ldr	r3, [r7, #8]
 801abb0:	619a      	str	r2, [r3, #24]
 801abb2:	e002      	b.n	801abba <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801abb4:	68bb      	ldr	r3, [r7, #8]
 801abb6:	2200      	movs	r2, #0
 801abb8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801abba:	68bb      	ldr	r3, [r7, #8]
 801abbc:	699b      	ldr	r3, [r3, #24]
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d000      	beq.n	801abc4 <HAL_PCD_EP_DB_Transmit+0x43c>
 801abc2:	e0bb      	b.n	801ad3c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801abc4:	68bb      	ldr	r3, [r7, #8]
 801abc6:	785b      	ldrb	r3, [r3, #1]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d125      	bne.n	801ac18 <HAL_PCD_EP_DB_Transmit+0x490>
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	2250      	movs	r2, #80	@ 0x50
 801abd8:	5a9b      	ldrh	r3, [r3, r2]
 801abda:	b29b      	uxth	r3, r3
 801abdc:	001a      	movs	r2, r3
 801abde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801abe0:	189b      	adds	r3, r3, r2
 801abe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801abe4:	68bb      	ldr	r3, [r7, #8]
 801abe6:	781b      	ldrb	r3, [r3, #0]
 801abe8:	00da      	lsls	r2, r3, #3
 801abea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801abec:	18d3      	adds	r3, r2, r3
 801abee:	4aaf      	ldr	r2, [pc, #700]	@ (801aeac <HAL_PCD_EP_DB_Transmit+0x724>)
 801abf0:	4694      	mov	ip, r2
 801abf2:	4463      	add	r3, ip
 801abf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 801abf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801abf8:	881b      	ldrh	r3, [r3, #0]
 801abfa:	b29b      	uxth	r3, r3
 801abfc:	059b      	lsls	r3, r3, #22
 801abfe:	0d9b      	lsrs	r3, r3, #22
 801ac00:	b29a      	uxth	r2, r3
 801ac02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ac04:	801a      	strh	r2, [r3, #0]
 801ac06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ac08:	881b      	ldrh	r3, [r3, #0]
 801ac0a:	b29b      	uxth	r3, r3
 801ac0c:	4aa9      	ldr	r2, [pc, #676]	@ (801aeb4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801ac0e:	4313      	orrs	r3, r2
 801ac10:	b29a      	uxth	r2, r3
 801ac12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ac14:	801a      	strh	r2, [r3, #0]
 801ac16:	e01b      	b.n	801ac50 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801ac18:	68bb      	ldr	r3, [r7, #8]
 801ac1a:	785b      	ldrb	r3, [r3, #1]
 801ac1c:	2b01      	cmp	r3, #1
 801ac1e:	d117      	bne.n	801ac50 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	667b      	str	r3, [r7, #100]	@ 0x64
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	2250      	movs	r2, #80	@ 0x50
 801ac2c:	5a9b      	ldrh	r3, [r3, r2]
 801ac2e:	b29b      	uxth	r3, r3
 801ac30:	001a      	movs	r2, r3
 801ac32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ac34:	189b      	adds	r3, r3, r2
 801ac36:	667b      	str	r3, [r7, #100]	@ 0x64
 801ac38:	68bb      	ldr	r3, [r7, #8]
 801ac3a:	781b      	ldrb	r3, [r3, #0]
 801ac3c:	00da      	lsls	r2, r3, #3
 801ac3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ac40:	18d3      	adds	r3, r2, r3
 801ac42:	4a9a      	ldr	r2, [pc, #616]	@ (801aeac <HAL_PCD_EP_DB_Transmit+0x724>)
 801ac44:	4694      	mov	ip, r2
 801ac46:	4463      	add	r3, ip
 801ac48:	663b      	str	r3, [r7, #96]	@ 0x60
 801ac4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ac4c:	2200      	movs	r2, #0
 801ac4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	677b      	str	r3, [r7, #116]	@ 0x74
 801ac56:	68bb      	ldr	r3, [r7, #8]
 801ac58:	785b      	ldrb	r3, [r3, #1]
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d12b      	bne.n	801acb6 <HAL_PCD_EP_DB_Transmit+0x52e>
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	2250      	movs	r2, #80	@ 0x50
 801ac6a:	5a9b      	ldrh	r3, [r3, r2]
 801ac6c:	b29b      	uxth	r3, r3
 801ac6e:	001a      	movs	r2, r3
 801ac70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ac72:	189b      	adds	r3, r3, r2
 801ac74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ac76:	68bb      	ldr	r3, [r7, #8]
 801ac78:	781b      	ldrb	r3, [r3, #0]
 801ac7a:	00da      	lsls	r2, r3, #3
 801ac7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ac7e:	18d3      	adds	r3, r2, r3
 801ac80:	4a8b      	ldr	r2, [pc, #556]	@ (801aeb0 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ac82:	4694      	mov	ip, r2
 801ac84:	4463      	add	r3, ip
 801ac86:	2180      	movs	r1, #128	@ 0x80
 801ac88:	187a      	adds	r2, r7, r1
 801ac8a:	6013      	str	r3, [r2, #0]
 801ac8c:	187b      	adds	r3, r7, r1
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	881b      	ldrh	r3, [r3, #0]
 801ac92:	b29b      	uxth	r3, r3
 801ac94:	059b      	lsls	r3, r3, #22
 801ac96:	0d9b      	lsrs	r3, r3, #22
 801ac98:	b29a      	uxth	r2, r3
 801ac9a:	187b      	adds	r3, r7, r1
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	801a      	strh	r2, [r3, #0]
 801aca0:	187b      	adds	r3, r7, r1
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	881b      	ldrh	r3, [r3, #0]
 801aca6:	b29b      	uxth	r3, r3
 801aca8:	4a82      	ldr	r2, [pc, #520]	@ (801aeb4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801acaa:	4313      	orrs	r3, r2
 801acac:	b29a      	uxth	r2, r3
 801acae:	187b      	adds	r3, r7, r1
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	801a      	strh	r2, [r3, #0]
 801acb4:	e018      	b.n	801ace8 <HAL_PCD_EP_DB_Transmit+0x560>
 801acb6:	68bb      	ldr	r3, [r7, #8]
 801acb8:	785b      	ldrb	r3, [r3, #1]
 801acba:	2b01      	cmp	r3, #1
 801acbc:	d114      	bne.n	801ace8 <HAL_PCD_EP_DB_Transmit+0x560>
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	681b      	ldr	r3, [r3, #0]
 801acc2:	2250      	movs	r2, #80	@ 0x50
 801acc4:	5a9b      	ldrh	r3, [r3, r2]
 801acc6:	b29b      	uxth	r3, r3
 801acc8:	001a      	movs	r2, r3
 801acca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801accc:	189b      	adds	r3, r3, r2
 801acce:	677b      	str	r3, [r7, #116]	@ 0x74
 801acd0:	68bb      	ldr	r3, [r7, #8]
 801acd2:	781b      	ldrb	r3, [r3, #0]
 801acd4:	00da      	lsls	r2, r3, #3
 801acd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801acd8:	18d3      	adds	r3, r2, r3
 801acda:	4a75      	ldr	r2, [pc, #468]	@ (801aeb0 <HAL_PCD_EP_DB_Transmit+0x728>)
 801acdc:	4694      	mov	ip, r2
 801acde:	4463      	add	r3, ip
 801ace0:	673b      	str	r3, [r7, #112]	@ 0x70
 801ace2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ace4:	2200      	movs	r2, #0
 801ace6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801ace8:	68bb      	ldr	r3, [r7, #8]
 801acea:	781a      	ldrb	r2, [r3, #0]
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	0011      	movs	r1, r2
 801acf0:	0018      	movs	r0, r3
 801acf2:	f008 fb59 	bl	80233a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801acf6:	1dbb      	adds	r3, r7, #6
 801acf8:	881a      	ldrh	r2, [r3, #0]
 801acfa:	2380      	movs	r3, #128	@ 0x80
 801acfc:	01db      	lsls	r3, r3, #7
 801acfe:	4013      	ands	r3, r2
 801ad00:	d000      	beq.n	801ad04 <HAL_PCD_EP_DB_Transmit+0x57c>
 801ad02:	e11e      	b.n	801af42 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	001a      	movs	r2, r3
 801ad0a:	68bb      	ldr	r3, [r7, #8]
 801ad0c:	781b      	ldrb	r3, [r3, #0]
 801ad0e:	009b      	lsls	r3, r3, #2
 801ad10:	18d3      	adds	r3, r2, r3
 801ad12:	881b      	ldrh	r3, [r3, #0]
 801ad14:	b29a      	uxth	r2, r3
 801ad16:	2088      	movs	r0, #136	@ 0x88
 801ad18:	183b      	adds	r3, r7, r0
 801ad1a:	4967      	ldr	r1, [pc, #412]	@ (801aeb8 <HAL_PCD_EP_DB_Transmit+0x730>)
 801ad1c:	400a      	ands	r2, r1
 801ad1e:	801a      	strh	r2, [r3, #0]
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	001a      	movs	r2, r3
 801ad26:	68bb      	ldr	r3, [r7, #8]
 801ad28:	781b      	ldrb	r3, [r3, #0]
 801ad2a:	009b      	lsls	r3, r3, #2
 801ad2c:	18d3      	adds	r3, r2, r3
 801ad2e:	183a      	adds	r2, r7, r0
 801ad30:	8812      	ldrh	r2, [r2, #0]
 801ad32:	4962      	ldr	r1, [pc, #392]	@ (801aebc <HAL_PCD_EP_DB_Transmit+0x734>)
 801ad34:	430a      	orrs	r2, r1
 801ad36:	b292      	uxth	r2, r2
 801ad38:	801a      	strh	r2, [r3, #0]
 801ad3a:	e102      	b.n	801af42 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801ad3c:	1dbb      	adds	r3, r7, #6
 801ad3e:	881a      	ldrh	r2, [r3, #0]
 801ad40:	2380      	movs	r3, #128	@ 0x80
 801ad42:	01db      	lsls	r3, r3, #7
 801ad44:	4013      	ands	r3, r2
 801ad46:	d11a      	bne.n	801ad7e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ad48:	68fb      	ldr	r3, [r7, #12]
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	001a      	movs	r2, r3
 801ad4e:	68bb      	ldr	r3, [r7, #8]
 801ad50:	781b      	ldrb	r3, [r3, #0]
 801ad52:	009b      	lsls	r3, r3, #2
 801ad54:	18d3      	adds	r3, r2, r3
 801ad56:	881b      	ldrh	r3, [r3, #0]
 801ad58:	b29a      	uxth	r2, r3
 801ad5a:	204e      	movs	r0, #78	@ 0x4e
 801ad5c:	183b      	adds	r3, r7, r0
 801ad5e:	4956      	ldr	r1, [pc, #344]	@ (801aeb8 <HAL_PCD_EP_DB_Transmit+0x730>)
 801ad60:	400a      	ands	r2, r1
 801ad62:	801a      	strh	r2, [r3, #0]
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	001a      	movs	r2, r3
 801ad6a:	68bb      	ldr	r3, [r7, #8]
 801ad6c:	781b      	ldrb	r3, [r3, #0]
 801ad6e:	009b      	lsls	r3, r3, #2
 801ad70:	18d3      	adds	r3, r2, r3
 801ad72:	183a      	adds	r2, r7, r0
 801ad74:	8812      	ldrh	r2, [r2, #0]
 801ad76:	4951      	ldr	r1, [pc, #324]	@ (801aebc <HAL_PCD_EP_DB_Transmit+0x734>)
 801ad78:	430a      	orrs	r2, r1
 801ad7a:	b292      	uxth	r2, r2
 801ad7c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801ad7e:	68bb      	ldr	r3, [r7, #8]
 801ad80:	2224      	movs	r2, #36	@ 0x24
 801ad82:	5c9b      	ldrb	r3, [r3, r2]
 801ad84:	2b01      	cmp	r3, #1
 801ad86:	d000      	beq.n	801ad8a <HAL_PCD_EP_DB_Transmit+0x602>
 801ad88:	e0db      	b.n	801af42 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801ad8a:	68bb      	ldr	r3, [r7, #8]
 801ad8c:	695a      	ldr	r2, [r3, #20]
 801ad8e:	2186      	movs	r1, #134	@ 0x86
 801ad90:	187b      	adds	r3, r7, r1
 801ad92:	881b      	ldrh	r3, [r3, #0]
 801ad94:	18d2      	adds	r2, r2, r3
 801ad96:	68bb      	ldr	r3, [r7, #8]
 801ad98:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801ad9a:	68bb      	ldr	r3, [r7, #8]
 801ad9c:	69da      	ldr	r2, [r3, #28]
 801ad9e:	187b      	adds	r3, r7, r1
 801ada0:	881b      	ldrh	r3, [r3, #0]
 801ada2:	18d2      	adds	r2, r2, r3
 801ada4:	68bb      	ldr	r3, [r7, #8]
 801ada6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801ada8:	68bb      	ldr	r3, [r7, #8]
 801adaa:	6a1a      	ldr	r2, [r3, #32]
 801adac:	68bb      	ldr	r3, [r7, #8]
 801adae:	691b      	ldr	r3, [r3, #16]
 801adb0:	429a      	cmp	r2, r3
 801adb2:	d30c      	bcc.n	801adce <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801adb4:	68bb      	ldr	r3, [r7, #8]
 801adb6:	691b      	ldr	r3, [r3, #16]
 801adb8:	218c      	movs	r1, #140	@ 0x8c
 801adba:	187a      	adds	r2, r7, r1
 801adbc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801adbe:	68bb      	ldr	r3, [r7, #8]
 801adc0:	6a1a      	ldr	r2, [r3, #32]
 801adc2:	187b      	adds	r3, r7, r1
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	1ad2      	subs	r2, r2, r3
 801adc8:	68bb      	ldr	r3, [r7, #8]
 801adca:	621a      	str	r2, [r3, #32]
 801adcc:	e01a      	b.n	801ae04 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801adce:	68bb      	ldr	r3, [r7, #8]
 801add0:	6a1b      	ldr	r3, [r3, #32]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d10a      	bne.n	801adec <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801add6:	2386      	movs	r3, #134	@ 0x86
 801add8:	18fb      	adds	r3, r7, r3
 801adda:	881b      	ldrh	r3, [r3, #0]
 801addc:	228c      	movs	r2, #140	@ 0x8c
 801adde:	18ba      	adds	r2, r7, r2
 801ade0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801ade2:	68bb      	ldr	r3, [r7, #8]
 801ade4:	2224      	movs	r2, #36	@ 0x24
 801ade6:	2100      	movs	r1, #0
 801ade8:	5499      	strb	r1, [r3, r2]
 801adea:	e00b      	b.n	801ae04 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801adec:	68bb      	ldr	r3, [r7, #8]
 801adee:	6a1b      	ldr	r3, [r3, #32]
 801adf0:	228c      	movs	r2, #140	@ 0x8c
 801adf2:	18ba      	adds	r2, r7, r2
 801adf4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801adf6:	68bb      	ldr	r3, [r7, #8]
 801adf8:	2200      	movs	r2, #0
 801adfa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801adfc:	68bb      	ldr	r3, [r7, #8]
 801adfe:	2224      	movs	r2, #36	@ 0x24
 801ae00:	2100      	movs	r1, #0
 801ae02:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	657b      	str	r3, [r7, #84]	@ 0x54
 801ae0a:	68bb      	ldr	r3, [r7, #8]
 801ae0c:	785b      	ldrb	r3, [r3, #1]
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d000      	beq.n	801ae14 <HAL_PCD_EP_DB_Transmit+0x68c>
 801ae12:	e06e      	b.n	801aef2 <HAL_PCD_EP_DB_Transmit+0x76a>
 801ae14:	68fb      	ldr	r3, [r7, #12]
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	2250      	movs	r2, #80	@ 0x50
 801ae20:	5a9b      	ldrh	r3, [r3, r2]
 801ae22:	b29b      	uxth	r3, r3
 801ae24:	001a      	movs	r2, r3
 801ae26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ae28:	189b      	adds	r3, r3, r2
 801ae2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ae2c:	68bb      	ldr	r3, [r7, #8]
 801ae2e:	781b      	ldrb	r3, [r3, #0]
 801ae30:	00da      	lsls	r2, r3, #3
 801ae32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ae34:	18d3      	adds	r3, r2, r3
 801ae36:	4a1e      	ldr	r2, [pc, #120]	@ (801aeb0 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ae38:	4694      	mov	ip, r2
 801ae3a:	4463      	add	r3, ip
 801ae3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ae3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ae40:	881b      	ldrh	r3, [r3, #0]
 801ae42:	b29b      	uxth	r3, r3
 801ae44:	059b      	lsls	r3, r3, #22
 801ae46:	0d9b      	lsrs	r3, r3, #22
 801ae48:	b29a      	uxth	r2, r3
 801ae4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ae4c:	801a      	strh	r2, [r3, #0]
 801ae4e:	228c      	movs	r2, #140	@ 0x8c
 801ae50:	18bb      	adds	r3, r7, r2
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	2b3e      	cmp	r3, #62	@ 0x3e
 801ae56:	d91a      	bls.n	801ae8e <HAL_PCD_EP_DB_Transmit+0x706>
 801ae58:	18bb      	adds	r3, r7, r2
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	095b      	lsrs	r3, r3, #5
 801ae5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ae60:	18bb      	adds	r3, r7, r2
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	221f      	movs	r2, #31
 801ae66:	4013      	ands	r3, r2
 801ae68:	d102      	bne.n	801ae70 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801ae6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ae6c:	3b01      	subs	r3, #1
 801ae6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ae70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ae72:	881b      	ldrh	r3, [r3, #0]
 801ae74:	b29a      	uxth	r2, r3
 801ae76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ae78:	b29b      	uxth	r3, r3
 801ae7a:	029b      	lsls	r3, r3, #10
 801ae7c:	b29b      	uxth	r3, r3
 801ae7e:	4313      	orrs	r3, r2
 801ae80:	b29b      	uxth	r3, r3
 801ae82:	4a0c      	ldr	r2, [pc, #48]	@ (801aeb4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801ae84:	4313      	orrs	r3, r2
 801ae86:	b29a      	uxth	r2, r3
 801ae88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ae8a:	801a      	strh	r2, [r3, #0]
 801ae8c:	e04d      	b.n	801af2a <HAL_PCD_EP_DB_Transmit+0x7a2>
 801ae8e:	238c      	movs	r3, #140	@ 0x8c
 801ae90:	18fb      	adds	r3, r7, r3
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d113      	bne.n	801aec0 <HAL_PCD_EP_DB_Transmit+0x738>
 801ae98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ae9a:	881b      	ldrh	r3, [r3, #0]
 801ae9c:	b29b      	uxth	r3, r3
 801ae9e:	4a05      	ldr	r2, [pc, #20]	@ (801aeb4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801aea0:	4313      	orrs	r3, r2
 801aea2:	b29a      	uxth	r2, r3
 801aea4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aea6:	801a      	strh	r2, [r3, #0]
 801aea8:	e03f      	b.n	801af2a <HAL_PCD_EP_DB_Transmit+0x7a2>
 801aeaa:	46c0      	nop			@ (mov r8, r8)
 801aeac:	00000402 	.word	0x00000402
 801aeb0:	00000406 	.word	0x00000406
 801aeb4:	ffff8000 	.word	0xffff8000
 801aeb8:	ffff8f8f 	.word	0xffff8f8f
 801aebc:	ffffc080 	.word	0xffffc080
 801aec0:	228c      	movs	r2, #140	@ 0x8c
 801aec2:	18bb      	adds	r3, r7, r2
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	085b      	lsrs	r3, r3, #1
 801aec8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801aeca:	18bb      	adds	r3, r7, r2
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	2201      	movs	r2, #1
 801aed0:	4013      	ands	r3, r2
 801aed2:	d002      	beq.n	801aeda <HAL_PCD_EP_DB_Transmit+0x752>
 801aed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aed6:	3301      	adds	r3, #1
 801aed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801aeda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aedc:	881b      	ldrh	r3, [r3, #0]
 801aede:	b29a      	uxth	r2, r3
 801aee0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aee2:	b29b      	uxth	r3, r3
 801aee4:	029b      	lsls	r3, r3, #10
 801aee6:	b29b      	uxth	r3, r3
 801aee8:	4313      	orrs	r3, r2
 801aeea:	b29a      	uxth	r2, r3
 801aeec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aeee:	801a      	strh	r2, [r3, #0]
 801aef0:	e01b      	b.n	801af2a <HAL_PCD_EP_DB_Transmit+0x7a2>
 801aef2:	68bb      	ldr	r3, [r7, #8]
 801aef4:	785b      	ldrb	r3, [r3, #1]
 801aef6:	2b01      	cmp	r3, #1
 801aef8:	d117      	bne.n	801af2a <HAL_PCD_EP_DB_Transmit+0x7a2>
 801aefa:	68fb      	ldr	r3, [r7, #12]
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	2250      	movs	r2, #80	@ 0x50
 801af00:	5a9b      	ldrh	r3, [r3, r2]
 801af02:	b29b      	uxth	r3, r3
 801af04:	001a      	movs	r2, r3
 801af06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801af08:	189b      	adds	r3, r3, r2
 801af0a:	657b      	str	r3, [r7, #84]	@ 0x54
 801af0c:	68bb      	ldr	r3, [r7, #8]
 801af0e:	781b      	ldrb	r3, [r3, #0]
 801af10:	00da      	lsls	r2, r3, #3
 801af12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801af14:	18d3      	adds	r3, r2, r3
 801af16:	4a21      	ldr	r2, [pc, #132]	@ (801af9c <HAL_PCD_EP_DB_Transmit+0x814>)
 801af18:	4694      	mov	ip, r2
 801af1a:	4463      	add	r3, ip
 801af1c:	653b      	str	r3, [r7, #80]	@ 0x50
 801af1e:	238c      	movs	r3, #140	@ 0x8c
 801af20:	18fb      	adds	r3, r7, r3
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	b29a      	uxth	r2, r3
 801af26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801af28:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	6818      	ldr	r0, [r3, #0]
 801af2e:	68bb      	ldr	r3, [r7, #8]
 801af30:	6959      	ldr	r1, [r3, #20]
 801af32:	68bb      	ldr	r3, [r7, #8]
 801af34:	895a      	ldrh	r2, [r3, #10]
 801af36:	238c      	movs	r3, #140	@ 0x8c
 801af38:	18fb      	adds	r3, r7, r3
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	b29b      	uxth	r3, r3
 801af3e:	f006 f9a1 	bl	8021284 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	001a      	movs	r2, r3
 801af48:	68bb      	ldr	r3, [r7, #8]
 801af4a:	781b      	ldrb	r3, [r3, #0]
 801af4c:	009b      	lsls	r3, r3, #2
 801af4e:	18d3      	adds	r3, r2, r3
 801af50:	881b      	ldrh	r3, [r3, #0]
 801af52:	b29a      	uxth	r2, r3
 801af54:	2014      	movs	r0, #20
 801af56:	183b      	adds	r3, r7, r0
 801af58:	4911      	ldr	r1, [pc, #68]	@ (801afa0 <HAL_PCD_EP_DB_Transmit+0x818>)
 801af5a:	400a      	ands	r2, r1
 801af5c:	801a      	strh	r2, [r3, #0]
 801af5e:	183b      	adds	r3, r7, r0
 801af60:	183a      	adds	r2, r7, r0
 801af62:	8812      	ldrh	r2, [r2, #0]
 801af64:	2110      	movs	r1, #16
 801af66:	404a      	eors	r2, r1
 801af68:	801a      	strh	r2, [r3, #0]
 801af6a:	183b      	adds	r3, r7, r0
 801af6c:	183a      	adds	r2, r7, r0
 801af6e:	8812      	ldrh	r2, [r2, #0]
 801af70:	2120      	movs	r1, #32
 801af72:	404a      	eors	r2, r1
 801af74:	801a      	strh	r2, [r3, #0]
 801af76:	68fb      	ldr	r3, [r7, #12]
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	001a      	movs	r2, r3
 801af7c:	68bb      	ldr	r3, [r7, #8]
 801af7e:	781b      	ldrb	r3, [r3, #0]
 801af80:	009b      	lsls	r3, r3, #2
 801af82:	18d3      	adds	r3, r2, r3
 801af84:	183a      	adds	r2, r7, r0
 801af86:	8812      	ldrh	r2, [r2, #0]
 801af88:	4906      	ldr	r1, [pc, #24]	@ (801afa4 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801af8a:	430a      	orrs	r2, r1
 801af8c:	b292      	uxth	r2, r2
 801af8e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801af90:	2300      	movs	r3, #0
}
 801af92:	0018      	movs	r0, r3
 801af94:	46bd      	mov	sp, r7
 801af96:	b024      	add	sp, #144	@ 0x90
 801af98:	bd80      	pop	{r7, pc}
 801af9a:	46c0      	nop			@ (mov r8, r8)
 801af9c:	00000406 	.word	0x00000406
 801afa0:	ffff8fbf 	.word	0xffff8fbf
 801afa4:	ffff8080 	.word	0xffff8080

0801afa8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801afa8:	b590      	push	{r4, r7, lr}
 801afaa:	b087      	sub	sp, #28
 801afac:	af00      	add	r7, sp, #0
 801afae:	60f8      	str	r0, [r7, #12]
 801afb0:	0008      	movs	r0, r1
 801afb2:	0011      	movs	r1, r2
 801afb4:	607b      	str	r3, [r7, #4]
 801afb6:	240a      	movs	r4, #10
 801afb8:	193b      	adds	r3, r7, r4
 801afba:	1c02      	adds	r2, r0, #0
 801afbc:	801a      	strh	r2, [r3, #0]
 801afbe:	2308      	movs	r3, #8
 801afc0:	18fb      	adds	r3, r7, r3
 801afc2:	1c0a      	adds	r2, r1, #0
 801afc4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801afc6:	0021      	movs	r1, r4
 801afc8:	187b      	adds	r3, r7, r1
 801afca:	881b      	ldrh	r3, [r3, #0]
 801afcc:	2280      	movs	r2, #128	@ 0x80
 801afce:	4013      	ands	r3, r2
 801afd0:	b29b      	uxth	r3, r3
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d00c      	beq.n	801aff0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801afd6:	187b      	adds	r3, r7, r1
 801afd8:	881b      	ldrh	r3, [r3, #0]
 801afda:	2207      	movs	r2, #7
 801afdc:	4013      	ands	r3, r2
 801afde:	1c5a      	adds	r2, r3, #1
 801afe0:	0013      	movs	r3, r2
 801afe2:	009b      	lsls	r3, r3, #2
 801afe4:	189b      	adds	r3, r3, r2
 801afe6:	00db      	lsls	r3, r3, #3
 801afe8:	68fa      	ldr	r2, [r7, #12]
 801afea:	18d3      	adds	r3, r2, r3
 801afec:	617b      	str	r3, [r7, #20]
 801afee:	e00b      	b.n	801b008 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801aff0:	230a      	movs	r3, #10
 801aff2:	18fb      	adds	r3, r7, r3
 801aff4:	881a      	ldrh	r2, [r3, #0]
 801aff6:	0013      	movs	r3, r2
 801aff8:	009b      	lsls	r3, r3, #2
 801affa:	189b      	adds	r3, r3, r2
 801affc:	00db      	lsls	r3, r3, #3
 801affe:	3369      	adds	r3, #105	@ 0x69
 801b000:	33ff      	adds	r3, #255	@ 0xff
 801b002:	68fa      	ldr	r2, [r7, #12]
 801b004:	18d3      	adds	r3, r2, r3
 801b006:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801b008:	2308      	movs	r3, #8
 801b00a:	18fb      	adds	r3, r7, r3
 801b00c:	881b      	ldrh	r3, [r3, #0]
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d107      	bne.n	801b022 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801b012:	697b      	ldr	r3, [r7, #20]
 801b014:	2200      	movs	r2, #0
 801b016:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	b29a      	uxth	r2, r3
 801b01c:	697b      	ldr	r3, [r7, #20]
 801b01e:	80da      	strh	r2, [r3, #6]
 801b020:	e00b      	b.n	801b03a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801b022:	697b      	ldr	r3, [r7, #20]
 801b024:	2201      	movs	r2, #1
 801b026:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	b29a      	uxth	r2, r3
 801b02c:	697b      	ldr	r3, [r7, #20]
 801b02e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	0c1b      	lsrs	r3, r3, #16
 801b034:	b29a      	uxth	r2, r3
 801b036:	697b      	ldr	r3, [r7, #20]
 801b038:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801b03a:	2300      	movs	r3, #0
}
 801b03c:	0018      	movs	r0, r3
 801b03e:	46bd      	mov	sp, r7
 801b040:	b007      	add	sp, #28
 801b042:	bd90      	pop	{r4, r7, pc}

0801b044 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b044:	b580      	push	{r7, lr}
 801b046:	b084      	sub	sp, #16
 801b048:	af00      	add	r7, sp, #0
 801b04a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801b052:	687a      	ldr	r2, [r7, #4]
 801b054:	23ba      	movs	r3, #186	@ 0xba
 801b056:	009b      	lsls	r3, r3, #2
 801b058:	2101      	movs	r1, #1
 801b05a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801b05c:	687a      	ldr	r2, [r7, #4]
 801b05e:	23b8      	movs	r3, #184	@ 0xb8
 801b060:	009b      	lsls	r3, r3, #2
 801b062:	2100      	movs	r1, #0
 801b064:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801b066:	68fb      	ldr	r3, [r7, #12]
 801b068:	2254      	movs	r2, #84	@ 0x54
 801b06a:	5a9b      	ldrh	r3, [r3, r2]
 801b06c:	b29b      	uxth	r3, r3
 801b06e:	2201      	movs	r2, #1
 801b070:	4313      	orrs	r3, r2
 801b072:	b299      	uxth	r1, r3
 801b074:	68fb      	ldr	r3, [r7, #12]
 801b076:	2254      	movs	r2, #84	@ 0x54
 801b078:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	2254      	movs	r2, #84	@ 0x54
 801b07e:	5a9b      	ldrh	r3, [r3, r2]
 801b080:	b29b      	uxth	r3, r3
 801b082:	2202      	movs	r2, #2
 801b084:	4313      	orrs	r3, r2
 801b086:	b299      	uxth	r1, r3
 801b088:	68fb      	ldr	r3, [r7, #12]
 801b08a:	2254      	movs	r2, #84	@ 0x54
 801b08c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b08e:	2300      	movs	r3, #0
}
 801b090:	0018      	movs	r0, r3
 801b092:	46bd      	mov	sp, r7
 801b094:	b004      	add	sp, #16
 801b096:	bd80      	pop	{r7, pc}

0801b098 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801b098:	b580      	push	{r7, lr}
 801b09a:	b082      	sub	sp, #8
 801b09c:	af00      	add	r7, sp, #0
 801b09e:	6078      	str	r0, [r7, #4]
 801b0a0:	000a      	movs	r2, r1
 801b0a2:	1cfb      	adds	r3, r7, #3
 801b0a4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801b0a6:	46c0      	nop			@ (mov r8, r8)
 801b0a8:	46bd      	mov	sp, r7
 801b0aa:	b002      	add	sp, #8
 801b0ac:	bd80      	pop	{r7, pc}
	...

0801b0b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801b0b4:	4b04      	ldr	r3, [pc, #16]	@ (801b0c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b0b6:	681a      	ldr	r2, [r3, #0]
 801b0b8:	4b03      	ldr	r3, [pc, #12]	@ (801b0c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b0ba:	2180      	movs	r1, #128	@ 0x80
 801b0bc:	0049      	lsls	r1, r1, #1
 801b0be:	430a      	orrs	r2, r1
 801b0c0:	601a      	str	r2, [r3, #0]
}
 801b0c2:	46c0      	nop			@ (mov r8, r8)
 801b0c4:	46bd      	mov	sp, r7
 801b0c6:	bd80      	pop	{r7, pc}
 801b0c8:	40007000 	.word	0x40007000

0801b0cc <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801b0cc:	b580      	push	{r7, lr}
 801b0ce:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801b0d0:	4b04      	ldr	r3, [pc, #16]	@ (801b0e4 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b0d2:	681a      	ldr	r2, [r3, #0]
 801b0d4:	4b03      	ldr	r3, [pc, #12]	@ (801b0e4 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b0d6:	4904      	ldr	r1, [pc, #16]	@ (801b0e8 <HAL_PWR_DisableBkUpAccess+0x1c>)
 801b0d8:	400a      	ands	r2, r1
 801b0da:	601a      	str	r2, [r3, #0]
}
 801b0dc:	46c0      	nop			@ (mov r8, r8)
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	bd80      	pop	{r7, pc}
 801b0e2:	46c0      	nop			@ (mov r8, r8)
 801b0e4:	40007000 	.word	0x40007000
 801b0e8:	fffffeff 	.word	0xfffffeff

0801b0ec <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801b0ec:	b580      	push	{r7, lr}
 801b0ee:	b086      	sub	sp, #24
 801b0f0:	af00      	add	r7, sp, #0
 801b0f2:	6078      	str	r0, [r7, #4]
 801b0f4:	000a      	movs	r2, r1
 801b0f6:	1cfb      	adds	r3, r7, #3
 801b0f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801b0fa:	2300      	movs	r3, #0
 801b0fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801b0fe:	4b25      	ldr	r3, [pc, #148]	@ (801b194 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b100:	681a      	ldr	r2, [r3, #0]
 801b102:	2380      	movs	r3, #128	@ 0x80
 801b104:	009b      	lsls	r3, r3, #2
 801b106:	4013      	ands	r3, r2
 801b108:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801b10a:	4b23      	ldr	r3, [pc, #140]	@ (801b198 <HAL_PWR_EnterSTOPMode+0xac>)
 801b10c:	6a1b      	ldr	r3, [r3, #32]
 801b10e:	2201      	movs	r2, #1
 801b110:	4013      	ands	r3, r2
 801b112:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801b114:	693b      	ldr	r3, [r7, #16]
 801b116:	2b00      	cmp	r3, #0
 801b118:	d008      	beq.n	801b12c <HAL_PWR_EnterSTOPMode+0x40>
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d005      	beq.n	801b12c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801b120:	4b1c      	ldr	r3, [pc, #112]	@ (801b194 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b122:	681a      	ldr	r2, [r3, #0]
 801b124:	4b1b      	ldr	r3, [pc, #108]	@ (801b194 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b126:	491d      	ldr	r1, [pc, #116]	@ (801b19c <HAL_PWR_EnterSTOPMode+0xb0>)
 801b128:	400a      	ands	r2, r1
 801b12a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801b12c:	4b19      	ldr	r3, [pc, #100]	@ (801b194 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b12e:	681b      	ldr	r3, [r3, #0]
 801b130:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801b132:	697b      	ldr	r3, [r7, #20]
 801b134:	2203      	movs	r2, #3
 801b136:	4393      	bics	r3, r2
 801b138:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801b13a:	697a      	ldr	r2, [r7, #20]
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	4313      	orrs	r3, r2
 801b140:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801b142:	4b14      	ldr	r3, [pc, #80]	@ (801b194 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b144:	697a      	ldr	r2, [r7, #20]
 801b146:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b148:	4b15      	ldr	r3, [pc, #84]	@ (801b1a0 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b14a:	691a      	ldr	r2, [r3, #16]
 801b14c:	4b14      	ldr	r3, [pc, #80]	@ (801b1a0 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b14e:	2104      	movs	r1, #4
 801b150:	430a      	orrs	r2, r1
 801b152:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801b154:	1cfb      	adds	r3, r7, #3
 801b156:	781b      	ldrb	r3, [r3, #0]
 801b158:	2b01      	cmp	r3, #1
 801b15a:	d101      	bne.n	801b160 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801b15c:	bf30      	wfi
 801b15e:	e002      	b.n	801b166 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801b160:	bf40      	sev
    __WFE();
 801b162:	bf20      	wfe
    __WFE();
 801b164:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b166:	4b0e      	ldr	r3, [pc, #56]	@ (801b1a0 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b168:	691a      	ldr	r2, [r3, #16]
 801b16a:	4b0d      	ldr	r3, [pc, #52]	@ (801b1a0 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b16c:	2104      	movs	r1, #4
 801b16e:	438a      	bics	r2, r1
 801b170:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801b172:	693b      	ldr	r3, [r7, #16]
 801b174:	2b00      	cmp	r3, #0
 801b176:	d009      	beq.n	801b18c <HAL_PWR_EnterSTOPMode+0xa0>
 801b178:	68fb      	ldr	r3, [r7, #12]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d006      	beq.n	801b18c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801b17e:	4b05      	ldr	r3, [pc, #20]	@ (801b194 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b180:	681a      	ldr	r2, [r3, #0]
 801b182:	4b04      	ldr	r3, [pc, #16]	@ (801b194 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b184:	2180      	movs	r1, #128	@ 0x80
 801b186:	0089      	lsls	r1, r1, #2
 801b188:	430a      	orrs	r2, r1
 801b18a:	601a      	str	r2, [r3, #0]
  }
}
 801b18c:	46c0      	nop			@ (mov r8, r8)
 801b18e:	46bd      	mov	sp, r7
 801b190:	b006      	add	sp, #24
 801b192:	bd80      	pop	{r7, pc}
 801b194:	40007000 	.word	0x40007000
 801b198:	40010000 	.word	0x40010000
 801b19c:	fffffdff 	.word	0xfffffdff
 801b1a0:	e000ed00 	.word	0xe000ed00

0801b1a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b1a4:	b5b0      	push	{r4, r5, r7, lr}
 801b1a6:	b08a      	sub	sp, #40	@ 0x28
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d102      	bne.n	801b1b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801b1b2:	2301      	movs	r3, #1
 801b1b4:	f000 fbbf 	bl	801b936 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b1b8:	4bc9      	ldr	r3, [pc, #804]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b1ba:	68db      	ldr	r3, [r3, #12]
 801b1bc:	220c      	movs	r2, #12
 801b1be:	4013      	ands	r3, r2
 801b1c0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b1c2:	4bc7      	ldr	r3, [pc, #796]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b1c4:	68da      	ldr	r2, [r3, #12]
 801b1c6:	2380      	movs	r3, #128	@ 0x80
 801b1c8:	025b      	lsls	r3, r3, #9
 801b1ca:	4013      	ands	r3, r2
 801b1cc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	2201      	movs	r2, #1
 801b1d4:	4013      	ands	r3, r2
 801b1d6:	d100      	bne.n	801b1da <HAL_RCC_OscConfig+0x36>
 801b1d8:	e07e      	b.n	801b2d8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b1da:	69fb      	ldr	r3, [r7, #28]
 801b1dc:	2b08      	cmp	r3, #8
 801b1de:	d007      	beq.n	801b1f0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801b1e0:	69fb      	ldr	r3, [r7, #28]
 801b1e2:	2b0c      	cmp	r3, #12
 801b1e4:	d112      	bne.n	801b20c <HAL_RCC_OscConfig+0x68>
 801b1e6:	69ba      	ldr	r2, [r7, #24]
 801b1e8:	2380      	movs	r3, #128	@ 0x80
 801b1ea:	025b      	lsls	r3, r3, #9
 801b1ec:	429a      	cmp	r2, r3
 801b1ee:	d10d      	bne.n	801b20c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b1f0:	4bbb      	ldr	r3, [pc, #748]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b1f2:	681a      	ldr	r2, [r3, #0]
 801b1f4:	2380      	movs	r3, #128	@ 0x80
 801b1f6:	029b      	lsls	r3, r3, #10
 801b1f8:	4013      	ands	r3, r2
 801b1fa:	d100      	bne.n	801b1fe <HAL_RCC_OscConfig+0x5a>
 801b1fc:	e06b      	b.n	801b2d6 <HAL_RCC_OscConfig+0x132>
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	685b      	ldr	r3, [r3, #4]
 801b202:	2b00      	cmp	r3, #0
 801b204:	d167      	bne.n	801b2d6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801b206:	2301      	movs	r3, #1
 801b208:	f000 fb95 	bl	801b936 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	685a      	ldr	r2, [r3, #4]
 801b210:	2380      	movs	r3, #128	@ 0x80
 801b212:	025b      	lsls	r3, r3, #9
 801b214:	429a      	cmp	r2, r3
 801b216:	d107      	bne.n	801b228 <HAL_RCC_OscConfig+0x84>
 801b218:	4bb1      	ldr	r3, [pc, #708]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b21a:	681a      	ldr	r2, [r3, #0]
 801b21c:	4bb0      	ldr	r3, [pc, #704]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b21e:	2180      	movs	r1, #128	@ 0x80
 801b220:	0249      	lsls	r1, r1, #9
 801b222:	430a      	orrs	r2, r1
 801b224:	601a      	str	r2, [r3, #0]
 801b226:	e027      	b.n	801b278 <HAL_RCC_OscConfig+0xd4>
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	685a      	ldr	r2, [r3, #4]
 801b22c:	23a0      	movs	r3, #160	@ 0xa0
 801b22e:	02db      	lsls	r3, r3, #11
 801b230:	429a      	cmp	r2, r3
 801b232:	d10e      	bne.n	801b252 <HAL_RCC_OscConfig+0xae>
 801b234:	4baa      	ldr	r3, [pc, #680]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b236:	681a      	ldr	r2, [r3, #0]
 801b238:	4ba9      	ldr	r3, [pc, #676]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b23a:	2180      	movs	r1, #128	@ 0x80
 801b23c:	02c9      	lsls	r1, r1, #11
 801b23e:	430a      	orrs	r2, r1
 801b240:	601a      	str	r2, [r3, #0]
 801b242:	4ba7      	ldr	r3, [pc, #668]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b244:	681a      	ldr	r2, [r3, #0]
 801b246:	4ba6      	ldr	r3, [pc, #664]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b248:	2180      	movs	r1, #128	@ 0x80
 801b24a:	0249      	lsls	r1, r1, #9
 801b24c:	430a      	orrs	r2, r1
 801b24e:	601a      	str	r2, [r3, #0]
 801b250:	e012      	b.n	801b278 <HAL_RCC_OscConfig+0xd4>
 801b252:	4ba3      	ldr	r3, [pc, #652]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b254:	681a      	ldr	r2, [r3, #0]
 801b256:	4ba2      	ldr	r3, [pc, #648]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b258:	49a2      	ldr	r1, [pc, #648]	@ (801b4e4 <HAL_RCC_OscConfig+0x340>)
 801b25a:	400a      	ands	r2, r1
 801b25c:	601a      	str	r2, [r3, #0]
 801b25e:	4ba0      	ldr	r3, [pc, #640]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b260:	681a      	ldr	r2, [r3, #0]
 801b262:	2380      	movs	r3, #128	@ 0x80
 801b264:	025b      	lsls	r3, r3, #9
 801b266:	4013      	ands	r3, r2
 801b268:	60fb      	str	r3, [r7, #12]
 801b26a:	68fb      	ldr	r3, [r7, #12]
 801b26c:	4b9c      	ldr	r3, [pc, #624]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b26e:	681a      	ldr	r2, [r3, #0]
 801b270:	4b9b      	ldr	r3, [pc, #620]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b272:	499d      	ldr	r1, [pc, #628]	@ (801b4e8 <HAL_RCC_OscConfig+0x344>)
 801b274:	400a      	ands	r2, r1
 801b276:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	685b      	ldr	r3, [r3, #4]
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d015      	beq.n	801b2ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b280:	f7f9 faf8 	bl	8014874 <HAL_GetTick>
 801b284:	0003      	movs	r3, r0
 801b286:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b288:	e009      	b.n	801b29e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b28a:	f7f9 faf3 	bl	8014874 <HAL_GetTick>
 801b28e:	0002      	movs	r2, r0
 801b290:	697b      	ldr	r3, [r7, #20]
 801b292:	1ad3      	subs	r3, r2, r3
 801b294:	2b64      	cmp	r3, #100	@ 0x64
 801b296:	d902      	bls.n	801b29e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b298:	2303      	movs	r3, #3
 801b29a:	f000 fb4c 	bl	801b936 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b29e:	4b90      	ldr	r3, [pc, #576]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b2a0:	681a      	ldr	r2, [r3, #0]
 801b2a2:	2380      	movs	r3, #128	@ 0x80
 801b2a4:	029b      	lsls	r3, r3, #10
 801b2a6:	4013      	ands	r3, r2
 801b2a8:	d0ef      	beq.n	801b28a <HAL_RCC_OscConfig+0xe6>
 801b2aa:	e015      	b.n	801b2d8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b2ac:	f7f9 fae2 	bl	8014874 <HAL_GetTick>
 801b2b0:	0003      	movs	r3, r0
 801b2b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b2b4:	e008      	b.n	801b2c8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b2b6:	f7f9 fadd 	bl	8014874 <HAL_GetTick>
 801b2ba:	0002      	movs	r2, r0
 801b2bc:	697b      	ldr	r3, [r7, #20]
 801b2be:	1ad3      	subs	r3, r2, r3
 801b2c0:	2b64      	cmp	r3, #100	@ 0x64
 801b2c2:	d901      	bls.n	801b2c8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801b2c4:	2303      	movs	r3, #3
 801b2c6:	e336      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b2c8:	4b85      	ldr	r3, [pc, #532]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b2ca:	681a      	ldr	r2, [r3, #0]
 801b2cc:	2380      	movs	r3, #128	@ 0x80
 801b2ce:	029b      	lsls	r3, r3, #10
 801b2d0:	4013      	ands	r3, r2
 801b2d2:	d1f0      	bne.n	801b2b6 <HAL_RCC_OscConfig+0x112>
 801b2d4:	e000      	b.n	801b2d8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b2d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	2202      	movs	r2, #2
 801b2de:	4013      	ands	r3, r2
 801b2e0:	d100      	bne.n	801b2e4 <HAL_RCC_OscConfig+0x140>
 801b2e2:	e099      	b.n	801b418 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	68db      	ldr	r3, [r3, #12]
 801b2e8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801b2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2ec:	2220      	movs	r2, #32
 801b2ee:	4013      	ands	r3, r2
 801b2f0:	d009      	beq.n	801b306 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801b2f2:	4b7b      	ldr	r3, [pc, #492]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b2f4:	681a      	ldr	r2, [r3, #0]
 801b2f6:	4b7a      	ldr	r3, [pc, #488]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b2f8:	2120      	movs	r1, #32
 801b2fa:	430a      	orrs	r2, r1
 801b2fc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801b2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b300:	2220      	movs	r2, #32
 801b302:	4393      	bics	r3, r2
 801b304:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b306:	69fb      	ldr	r3, [r7, #28]
 801b308:	2b04      	cmp	r3, #4
 801b30a:	d005      	beq.n	801b318 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801b30c:	69fb      	ldr	r3, [r7, #28]
 801b30e:	2b0c      	cmp	r3, #12
 801b310:	d13e      	bne.n	801b390 <HAL_RCC_OscConfig+0x1ec>
 801b312:	69bb      	ldr	r3, [r7, #24]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d13b      	bne.n	801b390 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801b318:	4b71      	ldr	r3, [pc, #452]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	2204      	movs	r2, #4
 801b31e:	4013      	ands	r3, r2
 801b320:	d004      	beq.n	801b32c <HAL_RCC_OscConfig+0x188>
 801b322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b324:	2b00      	cmp	r3, #0
 801b326:	d101      	bne.n	801b32c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801b328:	2301      	movs	r3, #1
 801b32a:	e304      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b32c:	4b6c      	ldr	r3, [pc, #432]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b32e:	685b      	ldr	r3, [r3, #4]
 801b330:	4a6e      	ldr	r2, [pc, #440]	@ (801b4ec <HAL_RCC_OscConfig+0x348>)
 801b332:	4013      	ands	r3, r2
 801b334:	0019      	movs	r1, r3
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	691b      	ldr	r3, [r3, #16]
 801b33a:	021a      	lsls	r2, r3, #8
 801b33c:	4b68      	ldr	r3, [pc, #416]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b33e:	430a      	orrs	r2, r1
 801b340:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b342:	4b67      	ldr	r3, [pc, #412]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	2209      	movs	r2, #9
 801b348:	4393      	bics	r3, r2
 801b34a:	0019      	movs	r1, r3
 801b34c:	4b64      	ldr	r3, [pc, #400]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b34e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b350:	430a      	orrs	r2, r1
 801b352:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b354:	f000 fc42 	bl	801bbdc <HAL_RCC_GetSysClockFreq>
 801b358:	0001      	movs	r1, r0
 801b35a:	4b61      	ldr	r3, [pc, #388]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b35c:	68db      	ldr	r3, [r3, #12]
 801b35e:	091b      	lsrs	r3, r3, #4
 801b360:	220f      	movs	r2, #15
 801b362:	4013      	ands	r3, r2
 801b364:	4a62      	ldr	r2, [pc, #392]	@ (801b4f0 <HAL_RCC_OscConfig+0x34c>)
 801b366:	5cd3      	ldrb	r3, [r2, r3]
 801b368:	000a      	movs	r2, r1
 801b36a:	40da      	lsrs	r2, r3
 801b36c:	4b61      	ldr	r3, [pc, #388]	@ (801b4f4 <HAL_RCC_OscConfig+0x350>)
 801b36e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801b370:	4b61      	ldr	r3, [pc, #388]	@ (801b4f8 <HAL_RCC_OscConfig+0x354>)
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	2513      	movs	r5, #19
 801b376:	197c      	adds	r4, r7, r5
 801b378:	0018      	movs	r0, r3
 801b37a:	f7f9 fa35 	bl	80147e8 <HAL_InitTick>
 801b37e:	0003      	movs	r3, r0
 801b380:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801b382:	197b      	adds	r3, r7, r5
 801b384:	781b      	ldrb	r3, [r3, #0]
 801b386:	2b00      	cmp	r3, #0
 801b388:	d046      	beq.n	801b418 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801b38a:	197b      	adds	r3, r7, r5
 801b38c:	781b      	ldrb	r3, [r3, #0]
 801b38e:	e2d2      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801b390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b392:	2b00      	cmp	r3, #0
 801b394:	d027      	beq.n	801b3e6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b396:	4b52      	ldr	r3, [pc, #328]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	2209      	movs	r2, #9
 801b39c:	4393      	bics	r3, r2
 801b39e:	0019      	movs	r1, r3
 801b3a0:	4b4f      	ldr	r3, [pc, #316]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b3a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b3a4:	430a      	orrs	r2, r1
 801b3a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b3a8:	f7f9 fa64 	bl	8014874 <HAL_GetTick>
 801b3ac:	0003      	movs	r3, r0
 801b3ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b3b0:	e008      	b.n	801b3c4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b3b2:	f7f9 fa5f 	bl	8014874 <HAL_GetTick>
 801b3b6:	0002      	movs	r2, r0
 801b3b8:	697b      	ldr	r3, [r7, #20]
 801b3ba:	1ad3      	subs	r3, r2, r3
 801b3bc:	2b02      	cmp	r3, #2
 801b3be:	d901      	bls.n	801b3c4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801b3c0:	2303      	movs	r3, #3
 801b3c2:	e2b8      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b3c4:	4b46      	ldr	r3, [pc, #280]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	2204      	movs	r2, #4
 801b3ca:	4013      	ands	r3, r2
 801b3cc:	d0f1      	beq.n	801b3b2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b3ce:	4b44      	ldr	r3, [pc, #272]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b3d0:	685b      	ldr	r3, [r3, #4]
 801b3d2:	4a46      	ldr	r2, [pc, #280]	@ (801b4ec <HAL_RCC_OscConfig+0x348>)
 801b3d4:	4013      	ands	r3, r2
 801b3d6:	0019      	movs	r1, r3
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	691b      	ldr	r3, [r3, #16]
 801b3dc:	021a      	lsls	r2, r3, #8
 801b3de:	4b40      	ldr	r3, [pc, #256]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b3e0:	430a      	orrs	r2, r1
 801b3e2:	605a      	str	r2, [r3, #4]
 801b3e4:	e018      	b.n	801b418 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b3e6:	4b3e      	ldr	r3, [pc, #248]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b3e8:	681a      	ldr	r2, [r3, #0]
 801b3ea:	4b3d      	ldr	r3, [pc, #244]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b3ec:	2101      	movs	r1, #1
 801b3ee:	438a      	bics	r2, r1
 801b3f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b3f2:	f7f9 fa3f 	bl	8014874 <HAL_GetTick>
 801b3f6:	0003      	movs	r3, r0
 801b3f8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b3fa:	e008      	b.n	801b40e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b3fc:	f7f9 fa3a 	bl	8014874 <HAL_GetTick>
 801b400:	0002      	movs	r2, r0
 801b402:	697b      	ldr	r3, [r7, #20]
 801b404:	1ad3      	subs	r3, r2, r3
 801b406:	2b02      	cmp	r3, #2
 801b408:	d901      	bls.n	801b40e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801b40a:	2303      	movs	r3, #3
 801b40c:	e293      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b40e:	4b34      	ldr	r3, [pc, #208]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	2204      	movs	r2, #4
 801b414:	4013      	ands	r3, r2
 801b416:	d1f1      	bne.n	801b3fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	2210      	movs	r2, #16
 801b41e:	4013      	ands	r3, r2
 801b420:	d100      	bne.n	801b424 <HAL_RCC_OscConfig+0x280>
 801b422:	e0a2      	b.n	801b56a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801b424:	69fb      	ldr	r3, [r7, #28]
 801b426:	2b00      	cmp	r3, #0
 801b428:	d140      	bne.n	801b4ac <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b42a:	4b2d      	ldr	r3, [pc, #180]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b42c:	681a      	ldr	r2, [r3, #0]
 801b42e:	2380      	movs	r3, #128	@ 0x80
 801b430:	009b      	lsls	r3, r3, #2
 801b432:	4013      	ands	r3, r2
 801b434:	d005      	beq.n	801b442 <HAL_RCC_OscConfig+0x29e>
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	69db      	ldr	r3, [r3, #28]
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d101      	bne.n	801b442 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b43e:	2301      	movs	r3, #1
 801b440:	e279      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b442:	4b27      	ldr	r3, [pc, #156]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b444:	685b      	ldr	r3, [r3, #4]
 801b446:	4a2d      	ldr	r2, [pc, #180]	@ (801b4fc <HAL_RCC_OscConfig+0x358>)
 801b448:	4013      	ands	r3, r2
 801b44a:	0019      	movs	r1, r3
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b450:	4b23      	ldr	r3, [pc, #140]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b452:	430a      	orrs	r2, r1
 801b454:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b456:	4b22      	ldr	r3, [pc, #136]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b458:	685b      	ldr	r3, [r3, #4]
 801b45a:	021b      	lsls	r3, r3, #8
 801b45c:	0a19      	lsrs	r1, r3, #8
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	6a1b      	ldr	r3, [r3, #32]
 801b462:	061a      	lsls	r2, r3, #24
 801b464:	4b1e      	ldr	r3, [pc, #120]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b466:	430a      	orrs	r2, r1
 801b468:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b46e:	0b5b      	lsrs	r3, r3, #13
 801b470:	3301      	adds	r3, #1
 801b472:	2280      	movs	r2, #128	@ 0x80
 801b474:	0212      	lsls	r2, r2, #8
 801b476:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801b478:	4b19      	ldr	r3, [pc, #100]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b47a:	68db      	ldr	r3, [r3, #12]
 801b47c:	091b      	lsrs	r3, r3, #4
 801b47e:	210f      	movs	r1, #15
 801b480:	400b      	ands	r3, r1
 801b482:	491b      	ldr	r1, [pc, #108]	@ (801b4f0 <HAL_RCC_OscConfig+0x34c>)
 801b484:	5ccb      	ldrb	r3, [r1, r3]
 801b486:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b488:	4b1a      	ldr	r3, [pc, #104]	@ (801b4f4 <HAL_RCC_OscConfig+0x350>)
 801b48a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801b48c:	4b1a      	ldr	r3, [pc, #104]	@ (801b4f8 <HAL_RCC_OscConfig+0x354>)
 801b48e:	681b      	ldr	r3, [r3, #0]
 801b490:	2513      	movs	r5, #19
 801b492:	197c      	adds	r4, r7, r5
 801b494:	0018      	movs	r0, r3
 801b496:	f7f9 f9a7 	bl	80147e8 <HAL_InitTick>
 801b49a:	0003      	movs	r3, r0
 801b49c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801b49e:	197b      	adds	r3, r7, r5
 801b4a0:	781b      	ldrb	r3, [r3, #0]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d061      	beq.n	801b56a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801b4a6:	197b      	adds	r3, r7, r5
 801b4a8:	781b      	ldrb	r3, [r3, #0]
 801b4aa:	e244      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	69db      	ldr	r3, [r3, #28]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d040      	beq.n	801b536 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801b4b4:	4b0a      	ldr	r3, [pc, #40]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b4b6:	681a      	ldr	r2, [r3, #0]
 801b4b8:	4b09      	ldr	r3, [pc, #36]	@ (801b4e0 <HAL_RCC_OscConfig+0x33c>)
 801b4ba:	2180      	movs	r1, #128	@ 0x80
 801b4bc:	0049      	lsls	r1, r1, #1
 801b4be:	430a      	orrs	r2, r1
 801b4c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b4c2:	f7f9 f9d7 	bl	8014874 <HAL_GetTick>
 801b4c6:	0003      	movs	r3, r0
 801b4c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b4ca:	e019      	b.n	801b500 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b4cc:	f7f9 f9d2 	bl	8014874 <HAL_GetTick>
 801b4d0:	0002      	movs	r2, r0
 801b4d2:	697b      	ldr	r3, [r7, #20]
 801b4d4:	1ad3      	subs	r3, r2, r3
 801b4d6:	2b02      	cmp	r3, #2
 801b4d8:	d912      	bls.n	801b500 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801b4da:	2303      	movs	r3, #3
 801b4dc:	e22b      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
 801b4de:	46c0      	nop			@ (mov r8, r8)
 801b4e0:	40021000 	.word	0x40021000
 801b4e4:	fffeffff 	.word	0xfffeffff
 801b4e8:	fffbffff 	.word	0xfffbffff
 801b4ec:	ffffe0ff 	.word	0xffffe0ff
 801b4f0:	0802e3f0 	.word	0x0802e3f0
 801b4f4:	200000ec 	.word	0x200000ec
 801b4f8:	200000fc 	.word	0x200000fc
 801b4fc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b500:	4bca      	ldr	r3, [pc, #808]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b502:	681a      	ldr	r2, [r3, #0]
 801b504:	2380      	movs	r3, #128	@ 0x80
 801b506:	009b      	lsls	r3, r3, #2
 801b508:	4013      	ands	r3, r2
 801b50a:	d0df      	beq.n	801b4cc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b50c:	4bc7      	ldr	r3, [pc, #796]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b50e:	685b      	ldr	r3, [r3, #4]
 801b510:	4ac7      	ldr	r2, [pc, #796]	@ (801b830 <HAL_RCC_OscConfig+0x68c>)
 801b512:	4013      	ands	r3, r2
 801b514:	0019      	movs	r1, r3
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b51a:	4bc4      	ldr	r3, [pc, #784]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b51c:	430a      	orrs	r2, r1
 801b51e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b520:	4bc2      	ldr	r3, [pc, #776]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b522:	685b      	ldr	r3, [r3, #4]
 801b524:	021b      	lsls	r3, r3, #8
 801b526:	0a19      	lsrs	r1, r3, #8
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	6a1b      	ldr	r3, [r3, #32]
 801b52c:	061a      	lsls	r2, r3, #24
 801b52e:	4bbf      	ldr	r3, [pc, #764]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b530:	430a      	orrs	r2, r1
 801b532:	605a      	str	r2, [r3, #4]
 801b534:	e019      	b.n	801b56a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801b536:	4bbd      	ldr	r3, [pc, #756]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b538:	681a      	ldr	r2, [r3, #0]
 801b53a:	4bbc      	ldr	r3, [pc, #752]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b53c:	49bd      	ldr	r1, [pc, #756]	@ (801b834 <HAL_RCC_OscConfig+0x690>)
 801b53e:	400a      	ands	r2, r1
 801b540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b542:	f7f9 f997 	bl	8014874 <HAL_GetTick>
 801b546:	0003      	movs	r3, r0
 801b548:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b54a:	e008      	b.n	801b55e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b54c:	f7f9 f992 	bl	8014874 <HAL_GetTick>
 801b550:	0002      	movs	r2, r0
 801b552:	697b      	ldr	r3, [r7, #20]
 801b554:	1ad3      	subs	r3, r2, r3
 801b556:	2b02      	cmp	r3, #2
 801b558:	d901      	bls.n	801b55e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801b55a:	2303      	movs	r3, #3
 801b55c:	e1eb      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b55e:	4bb3      	ldr	r3, [pc, #716]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b560:	681a      	ldr	r2, [r3, #0]
 801b562:	2380      	movs	r3, #128	@ 0x80
 801b564:	009b      	lsls	r3, r3, #2
 801b566:	4013      	ands	r3, r2
 801b568:	d1f0      	bne.n	801b54c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	2208      	movs	r2, #8
 801b570:	4013      	ands	r3, r2
 801b572:	d036      	beq.n	801b5e2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	695b      	ldr	r3, [r3, #20]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d019      	beq.n	801b5b0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b57c:	4bab      	ldr	r3, [pc, #684]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b57e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b580:	4baa      	ldr	r3, [pc, #680]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b582:	2101      	movs	r1, #1
 801b584:	430a      	orrs	r2, r1
 801b586:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b588:	f7f9 f974 	bl	8014874 <HAL_GetTick>
 801b58c:	0003      	movs	r3, r0
 801b58e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b590:	e008      	b.n	801b5a4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b592:	f7f9 f96f 	bl	8014874 <HAL_GetTick>
 801b596:	0002      	movs	r2, r0
 801b598:	697b      	ldr	r3, [r7, #20]
 801b59a:	1ad3      	subs	r3, r2, r3
 801b59c:	2b02      	cmp	r3, #2
 801b59e:	d901      	bls.n	801b5a4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801b5a0:	2303      	movs	r3, #3
 801b5a2:	e1c8      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b5a4:	4ba1      	ldr	r3, [pc, #644]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b5a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b5a8:	2202      	movs	r2, #2
 801b5aa:	4013      	ands	r3, r2
 801b5ac:	d0f1      	beq.n	801b592 <HAL_RCC_OscConfig+0x3ee>
 801b5ae:	e018      	b.n	801b5e2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b5b0:	4b9e      	ldr	r3, [pc, #632]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b5b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b5b4:	4b9d      	ldr	r3, [pc, #628]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b5b6:	2101      	movs	r1, #1
 801b5b8:	438a      	bics	r2, r1
 801b5ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b5bc:	f7f9 f95a 	bl	8014874 <HAL_GetTick>
 801b5c0:	0003      	movs	r3, r0
 801b5c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b5c4:	e008      	b.n	801b5d8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b5c6:	f7f9 f955 	bl	8014874 <HAL_GetTick>
 801b5ca:	0002      	movs	r2, r0
 801b5cc:	697b      	ldr	r3, [r7, #20]
 801b5ce:	1ad3      	subs	r3, r2, r3
 801b5d0:	2b02      	cmp	r3, #2
 801b5d2:	d901      	bls.n	801b5d8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801b5d4:	2303      	movs	r3, #3
 801b5d6:	e1ae      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b5d8:	4b94      	ldr	r3, [pc, #592]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b5da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b5dc:	2202      	movs	r2, #2
 801b5de:	4013      	ands	r3, r2
 801b5e0:	d1f1      	bne.n	801b5c6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	2204      	movs	r2, #4
 801b5e8:	4013      	ands	r3, r2
 801b5ea:	d100      	bne.n	801b5ee <HAL_RCC_OscConfig+0x44a>
 801b5ec:	e0ae      	b.n	801b74c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b5ee:	2023      	movs	r0, #35	@ 0x23
 801b5f0:	183b      	adds	r3, r7, r0
 801b5f2:	2200      	movs	r2, #0
 801b5f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b5f6:	4b8d      	ldr	r3, [pc, #564]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b5f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b5fa:	2380      	movs	r3, #128	@ 0x80
 801b5fc:	055b      	lsls	r3, r3, #21
 801b5fe:	4013      	ands	r3, r2
 801b600:	d109      	bne.n	801b616 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b602:	4b8a      	ldr	r3, [pc, #552]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b606:	4b89      	ldr	r3, [pc, #548]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b608:	2180      	movs	r1, #128	@ 0x80
 801b60a:	0549      	lsls	r1, r1, #21
 801b60c:	430a      	orrs	r2, r1
 801b60e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b610:	183b      	adds	r3, r7, r0
 801b612:	2201      	movs	r2, #1
 801b614:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b616:	4b88      	ldr	r3, [pc, #544]	@ (801b838 <HAL_RCC_OscConfig+0x694>)
 801b618:	681a      	ldr	r2, [r3, #0]
 801b61a:	2380      	movs	r3, #128	@ 0x80
 801b61c:	005b      	lsls	r3, r3, #1
 801b61e:	4013      	ands	r3, r2
 801b620:	d11a      	bne.n	801b658 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b622:	4b85      	ldr	r3, [pc, #532]	@ (801b838 <HAL_RCC_OscConfig+0x694>)
 801b624:	681a      	ldr	r2, [r3, #0]
 801b626:	4b84      	ldr	r3, [pc, #528]	@ (801b838 <HAL_RCC_OscConfig+0x694>)
 801b628:	2180      	movs	r1, #128	@ 0x80
 801b62a:	0049      	lsls	r1, r1, #1
 801b62c:	430a      	orrs	r2, r1
 801b62e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b630:	f7f9 f920 	bl	8014874 <HAL_GetTick>
 801b634:	0003      	movs	r3, r0
 801b636:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b638:	e008      	b.n	801b64c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b63a:	f7f9 f91b 	bl	8014874 <HAL_GetTick>
 801b63e:	0002      	movs	r2, r0
 801b640:	697b      	ldr	r3, [r7, #20]
 801b642:	1ad3      	subs	r3, r2, r3
 801b644:	2b64      	cmp	r3, #100	@ 0x64
 801b646:	d901      	bls.n	801b64c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801b648:	2303      	movs	r3, #3
 801b64a:	e174      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b64c:	4b7a      	ldr	r3, [pc, #488]	@ (801b838 <HAL_RCC_OscConfig+0x694>)
 801b64e:	681a      	ldr	r2, [r3, #0]
 801b650:	2380      	movs	r3, #128	@ 0x80
 801b652:	005b      	lsls	r3, r3, #1
 801b654:	4013      	ands	r3, r2
 801b656:	d0f0      	beq.n	801b63a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	689a      	ldr	r2, [r3, #8]
 801b65c:	2380      	movs	r3, #128	@ 0x80
 801b65e:	005b      	lsls	r3, r3, #1
 801b660:	429a      	cmp	r2, r3
 801b662:	d107      	bne.n	801b674 <HAL_RCC_OscConfig+0x4d0>
 801b664:	4b71      	ldr	r3, [pc, #452]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b666:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b668:	4b70      	ldr	r3, [pc, #448]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b66a:	2180      	movs	r1, #128	@ 0x80
 801b66c:	0049      	lsls	r1, r1, #1
 801b66e:	430a      	orrs	r2, r1
 801b670:	651a      	str	r2, [r3, #80]	@ 0x50
 801b672:	e031      	b.n	801b6d8 <HAL_RCC_OscConfig+0x534>
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	689b      	ldr	r3, [r3, #8]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d10c      	bne.n	801b696 <HAL_RCC_OscConfig+0x4f2>
 801b67c:	4b6b      	ldr	r3, [pc, #428]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b67e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b680:	4b6a      	ldr	r3, [pc, #424]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b682:	496c      	ldr	r1, [pc, #432]	@ (801b834 <HAL_RCC_OscConfig+0x690>)
 801b684:	400a      	ands	r2, r1
 801b686:	651a      	str	r2, [r3, #80]	@ 0x50
 801b688:	4b68      	ldr	r3, [pc, #416]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b68a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b68c:	4b67      	ldr	r3, [pc, #412]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b68e:	496b      	ldr	r1, [pc, #428]	@ (801b83c <HAL_RCC_OscConfig+0x698>)
 801b690:	400a      	ands	r2, r1
 801b692:	651a      	str	r2, [r3, #80]	@ 0x50
 801b694:	e020      	b.n	801b6d8 <HAL_RCC_OscConfig+0x534>
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	689a      	ldr	r2, [r3, #8]
 801b69a:	23a0      	movs	r3, #160	@ 0xa0
 801b69c:	00db      	lsls	r3, r3, #3
 801b69e:	429a      	cmp	r2, r3
 801b6a0:	d10e      	bne.n	801b6c0 <HAL_RCC_OscConfig+0x51c>
 801b6a2:	4b62      	ldr	r3, [pc, #392]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b6a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6a6:	4b61      	ldr	r3, [pc, #388]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b6a8:	2180      	movs	r1, #128	@ 0x80
 801b6aa:	00c9      	lsls	r1, r1, #3
 801b6ac:	430a      	orrs	r2, r1
 801b6ae:	651a      	str	r2, [r3, #80]	@ 0x50
 801b6b0:	4b5e      	ldr	r3, [pc, #376]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b6b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6b4:	4b5d      	ldr	r3, [pc, #372]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b6b6:	2180      	movs	r1, #128	@ 0x80
 801b6b8:	0049      	lsls	r1, r1, #1
 801b6ba:	430a      	orrs	r2, r1
 801b6bc:	651a      	str	r2, [r3, #80]	@ 0x50
 801b6be:	e00b      	b.n	801b6d8 <HAL_RCC_OscConfig+0x534>
 801b6c0:	4b5a      	ldr	r3, [pc, #360]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b6c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6c4:	4b59      	ldr	r3, [pc, #356]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b6c6:	495b      	ldr	r1, [pc, #364]	@ (801b834 <HAL_RCC_OscConfig+0x690>)
 801b6c8:	400a      	ands	r2, r1
 801b6ca:	651a      	str	r2, [r3, #80]	@ 0x50
 801b6cc:	4b57      	ldr	r3, [pc, #348]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b6ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6d0:	4b56      	ldr	r3, [pc, #344]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b6d2:	495a      	ldr	r1, [pc, #360]	@ (801b83c <HAL_RCC_OscConfig+0x698>)
 801b6d4:	400a      	ands	r2, r1
 801b6d6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	689b      	ldr	r3, [r3, #8]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d015      	beq.n	801b70c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b6e0:	f7f9 f8c8 	bl	8014874 <HAL_GetTick>
 801b6e4:	0003      	movs	r3, r0
 801b6e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b6e8:	e009      	b.n	801b6fe <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b6ea:	f7f9 f8c3 	bl	8014874 <HAL_GetTick>
 801b6ee:	0002      	movs	r2, r0
 801b6f0:	697b      	ldr	r3, [r7, #20]
 801b6f2:	1ad3      	subs	r3, r2, r3
 801b6f4:	4a52      	ldr	r2, [pc, #328]	@ (801b840 <HAL_RCC_OscConfig+0x69c>)
 801b6f6:	4293      	cmp	r3, r2
 801b6f8:	d901      	bls.n	801b6fe <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801b6fa:	2303      	movs	r3, #3
 801b6fc:	e11b      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b6fe:	4b4b      	ldr	r3, [pc, #300]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b700:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b702:	2380      	movs	r3, #128	@ 0x80
 801b704:	009b      	lsls	r3, r3, #2
 801b706:	4013      	ands	r3, r2
 801b708:	d0ef      	beq.n	801b6ea <HAL_RCC_OscConfig+0x546>
 801b70a:	e014      	b.n	801b736 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b70c:	f7f9 f8b2 	bl	8014874 <HAL_GetTick>
 801b710:	0003      	movs	r3, r0
 801b712:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b714:	e009      	b.n	801b72a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b716:	f7f9 f8ad 	bl	8014874 <HAL_GetTick>
 801b71a:	0002      	movs	r2, r0
 801b71c:	697b      	ldr	r3, [r7, #20]
 801b71e:	1ad3      	subs	r3, r2, r3
 801b720:	4a47      	ldr	r2, [pc, #284]	@ (801b840 <HAL_RCC_OscConfig+0x69c>)
 801b722:	4293      	cmp	r3, r2
 801b724:	d901      	bls.n	801b72a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801b726:	2303      	movs	r3, #3
 801b728:	e105      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b72a:	4b40      	ldr	r3, [pc, #256]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b72c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b72e:	2380      	movs	r3, #128	@ 0x80
 801b730:	009b      	lsls	r3, r3, #2
 801b732:	4013      	ands	r3, r2
 801b734:	d1ef      	bne.n	801b716 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b736:	2323      	movs	r3, #35	@ 0x23
 801b738:	18fb      	adds	r3, r7, r3
 801b73a:	781b      	ldrb	r3, [r3, #0]
 801b73c:	2b01      	cmp	r3, #1
 801b73e:	d105      	bne.n	801b74c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b740:	4b3a      	ldr	r3, [pc, #232]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b742:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b744:	4b39      	ldr	r3, [pc, #228]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b746:	493f      	ldr	r1, [pc, #252]	@ (801b844 <HAL_RCC_OscConfig+0x6a0>)
 801b748:	400a      	ands	r2, r1
 801b74a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	2220      	movs	r2, #32
 801b752:	4013      	ands	r3, r2
 801b754:	d049      	beq.n	801b7ea <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	699b      	ldr	r3, [r3, #24]
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d026      	beq.n	801b7ac <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801b75e:	4b33      	ldr	r3, [pc, #204]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b760:	689a      	ldr	r2, [r3, #8]
 801b762:	4b32      	ldr	r3, [pc, #200]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b764:	2101      	movs	r1, #1
 801b766:	430a      	orrs	r2, r1
 801b768:	609a      	str	r2, [r3, #8]
 801b76a:	4b30      	ldr	r3, [pc, #192]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b76c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b76e:	4b2f      	ldr	r3, [pc, #188]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b770:	2101      	movs	r1, #1
 801b772:	430a      	orrs	r2, r1
 801b774:	635a      	str	r2, [r3, #52]	@ 0x34
 801b776:	4b34      	ldr	r3, [pc, #208]	@ (801b848 <HAL_RCC_OscConfig+0x6a4>)
 801b778:	6a1a      	ldr	r2, [r3, #32]
 801b77a:	4b33      	ldr	r3, [pc, #204]	@ (801b848 <HAL_RCC_OscConfig+0x6a4>)
 801b77c:	2180      	movs	r1, #128	@ 0x80
 801b77e:	0189      	lsls	r1, r1, #6
 801b780:	430a      	orrs	r2, r1
 801b782:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b784:	f7f9 f876 	bl	8014874 <HAL_GetTick>
 801b788:	0003      	movs	r3, r0
 801b78a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b78c:	e008      	b.n	801b7a0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b78e:	f7f9 f871 	bl	8014874 <HAL_GetTick>
 801b792:	0002      	movs	r2, r0
 801b794:	697b      	ldr	r3, [r7, #20]
 801b796:	1ad3      	subs	r3, r2, r3
 801b798:	2b02      	cmp	r3, #2
 801b79a:	d901      	bls.n	801b7a0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801b79c:	2303      	movs	r3, #3
 801b79e:	e0ca      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b7a0:	4b22      	ldr	r3, [pc, #136]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b7a2:	689b      	ldr	r3, [r3, #8]
 801b7a4:	2202      	movs	r2, #2
 801b7a6:	4013      	ands	r3, r2
 801b7a8:	d0f1      	beq.n	801b78e <HAL_RCC_OscConfig+0x5ea>
 801b7aa:	e01e      	b.n	801b7ea <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801b7ac:	4b1f      	ldr	r3, [pc, #124]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b7ae:	689a      	ldr	r2, [r3, #8]
 801b7b0:	4b1e      	ldr	r3, [pc, #120]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b7b2:	2101      	movs	r1, #1
 801b7b4:	438a      	bics	r2, r1
 801b7b6:	609a      	str	r2, [r3, #8]
 801b7b8:	4b23      	ldr	r3, [pc, #140]	@ (801b848 <HAL_RCC_OscConfig+0x6a4>)
 801b7ba:	6a1a      	ldr	r2, [r3, #32]
 801b7bc:	4b22      	ldr	r3, [pc, #136]	@ (801b848 <HAL_RCC_OscConfig+0x6a4>)
 801b7be:	4923      	ldr	r1, [pc, #140]	@ (801b84c <HAL_RCC_OscConfig+0x6a8>)
 801b7c0:	400a      	ands	r2, r1
 801b7c2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b7c4:	f7f9 f856 	bl	8014874 <HAL_GetTick>
 801b7c8:	0003      	movs	r3, r0
 801b7ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b7cc:	e008      	b.n	801b7e0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b7ce:	f7f9 f851 	bl	8014874 <HAL_GetTick>
 801b7d2:	0002      	movs	r2, r0
 801b7d4:	697b      	ldr	r3, [r7, #20]
 801b7d6:	1ad3      	subs	r3, r2, r3
 801b7d8:	2b02      	cmp	r3, #2
 801b7da:	d901      	bls.n	801b7e0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801b7dc:	2303      	movs	r3, #3
 801b7de:	e0aa      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b7e0:	4b12      	ldr	r3, [pc, #72]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b7e2:	689b      	ldr	r3, [r3, #8]
 801b7e4:	2202      	movs	r2, #2
 801b7e6:	4013      	ands	r3, r2
 801b7e8:	d1f1      	bne.n	801b7ce <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d100      	bne.n	801b7f4 <HAL_RCC_OscConfig+0x650>
 801b7f2:	e09f      	b.n	801b934 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b7f4:	69fb      	ldr	r3, [r7, #28]
 801b7f6:	2b0c      	cmp	r3, #12
 801b7f8:	d100      	bne.n	801b7fc <HAL_RCC_OscConfig+0x658>
 801b7fa:	e078      	b.n	801b8ee <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b800:	2b02      	cmp	r3, #2
 801b802:	d159      	bne.n	801b8b8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b804:	4b09      	ldr	r3, [pc, #36]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b806:	681a      	ldr	r2, [r3, #0]
 801b808:	4b08      	ldr	r3, [pc, #32]	@ (801b82c <HAL_RCC_OscConfig+0x688>)
 801b80a:	4911      	ldr	r1, [pc, #68]	@ (801b850 <HAL_RCC_OscConfig+0x6ac>)
 801b80c:	400a      	ands	r2, r1
 801b80e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b810:	f7f9 f830 	bl	8014874 <HAL_GetTick>
 801b814:	0003      	movs	r3, r0
 801b816:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b818:	e01c      	b.n	801b854 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b81a:	f7f9 f82b 	bl	8014874 <HAL_GetTick>
 801b81e:	0002      	movs	r2, r0
 801b820:	697b      	ldr	r3, [r7, #20]
 801b822:	1ad3      	subs	r3, r2, r3
 801b824:	2b02      	cmp	r3, #2
 801b826:	d915      	bls.n	801b854 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801b828:	2303      	movs	r3, #3
 801b82a:	e084      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
 801b82c:	40021000 	.word	0x40021000
 801b830:	ffff1fff 	.word	0xffff1fff
 801b834:	fffffeff 	.word	0xfffffeff
 801b838:	40007000 	.word	0x40007000
 801b83c:	fffffbff 	.word	0xfffffbff
 801b840:	00001388 	.word	0x00001388
 801b844:	efffffff 	.word	0xefffffff
 801b848:	40010000 	.word	0x40010000
 801b84c:	ffffdfff 	.word	0xffffdfff
 801b850:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b854:	4b3a      	ldr	r3, [pc, #232]	@ (801b940 <HAL_RCC_OscConfig+0x79c>)
 801b856:	681a      	ldr	r2, [r3, #0]
 801b858:	2380      	movs	r3, #128	@ 0x80
 801b85a:	049b      	lsls	r3, r3, #18
 801b85c:	4013      	ands	r3, r2
 801b85e:	d1dc      	bne.n	801b81a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b860:	4b37      	ldr	r3, [pc, #220]	@ (801b940 <HAL_RCC_OscConfig+0x79c>)
 801b862:	68db      	ldr	r3, [r3, #12]
 801b864:	4a37      	ldr	r2, [pc, #220]	@ (801b944 <HAL_RCC_OscConfig+0x7a0>)
 801b866:	4013      	ands	r3, r2
 801b868:	0019      	movs	r1, r3
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b872:	431a      	orrs	r2, r3
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b878:	431a      	orrs	r2, r3
 801b87a:	4b31      	ldr	r3, [pc, #196]	@ (801b940 <HAL_RCC_OscConfig+0x79c>)
 801b87c:	430a      	orrs	r2, r1
 801b87e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b880:	4b2f      	ldr	r3, [pc, #188]	@ (801b940 <HAL_RCC_OscConfig+0x79c>)
 801b882:	681a      	ldr	r2, [r3, #0]
 801b884:	4b2e      	ldr	r3, [pc, #184]	@ (801b940 <HAL_RCC_OscConfig+0x79c>)
 801b886:	2180      	movs	r1, #128	@ 0x80
 801b888:	0449      	lsls	r1, r1, #17
 801b88a:	430a      	orrs	r2, r1
 801b88c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b88e:	f7f8 fff1 	bl	8014874 <HAL_GetTick>
 801b892:	0003      	movs	r3, r0
 801b894:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b896:	e008      	b.n	801b8aa <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b898:	f7f8 ffec 	bl	8014874 <HAL_GetTick>
 801b89c:	0002      	movs	r2, r0
 801b89e:	697b      	ldr	r3, [r7, #20]
 801b8a0:	1ad3      	subs	r3, r2, r3
 801b8a2:	2b02      	cmp	r3, #2
 801b8a4:	d901      	bls.n	801b8aa <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801b8a6:	2303      	movs	r3, #3
 801b8a8:	e045      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b8aa:	4b25      	ldr	r3, [pc, #148]	@ (801b940 <HAL_RCC_OscConfig+0x79c>)
 801b8ac:	681a      	ldr	r2, [r3, #0]
 801b8ae:	2380      	movs	r3, #128	@ 0x80
 801b8b0:	049b      	lsls	r3, r3, #18
 801b8b2:	4013      	ands	r3, r2
 801b8b4:	d0f0      	beq.n	801b898 <HAL_RCC_OscConfig+0x6f4>
 801b8b6:	e03d      	b.n	801b934 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b8b8:	4b21      	ldr	r3, [pc, #132]	@ (801b940 <HAL_RCC_OscConfig+0x79c>)
 801b8ba:	681a      	ldr	r2, [r3, #0]
 801b8bc:	4b20      	ldr	r3, [pc, #128]	@ (801b940 <HAL_RCC_OscConfig+0x79c>)
 801b8be:	4922      	ldr	r1, [pc, #136]	@ (801b948 <HAL_RCC_OscConfig+0x7a4>)
 801b8c0:	400a      	ands	r2, r1
 801b8c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b8c4:	f7f8 ffd6 	bl	8014874 <HAL_GetTick>
 801b8c8:	0003      	movs	r3, r0
 801b8ca:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b8cc:	e008      	b.n	801b8e0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b8ce:	f7f8 ffd1 	bl	8014874 <HAL_GetTick>
 801b8d2:	0002      	movs	r2, r0
 801b8d4:	697b      	ldr	r3, [r7, #20]
 801b8d6:	1ad3      	subs	r3, r2, r3
 801b8d8:	2b02      	cmp	r3, #2
 801b8da:	d901      	bls.n	801b8e0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801b8dc:	2303      	movs	r3, #3
 801b8de:	e02a      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b8e0:	4b17      	ldr	r3, [pc, #92]	@ (801b940 <HAL_RCC_OscConfig+0x79c>)
 801b8e2:	681a      	ldr	r2, [r3, #0]
 801b8e4:	2380      	movs	r3, #128	@ 0x80
 801b8e6:	049b      	lsls	r3, r3, #18
 801b8e8:	4013      	ands	r3, r2
 801b8ea:	d1f0      	bne.n	801b8ce <HAL_RCC_OscConfig+0x72a>
 801b8ec:	e022      	b.n	801b934 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b8f2:	2b01      	cmp	r3, #1
 801b8f4:	d101      	bne.n	801b8fa <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801b8f6:	2301      	movs	r3, #1
 801b8f8:	e01d      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801b8fa:	4b11      	ldr	r3, [pc, #68]	@ (801b940 <HAL_RCC_OscConfig+0x79c>)
 801b8fc:	68db      	ldr	r3, [r3, #12]
 801b8fe:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b900:	69ba      	ldr	r2, [r7, #24]
 801b902:	2380      	movs	r3, #128	@ 0x80
 801b904:	025b      	lsls	r3, r3, #9
 801b906:	401a      	ands	r2, r3
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b90c:	429a      	cmp	r2, r3
 801b90e:	d10f      	bne.n	801b930 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801b910:	69ba      	ldr	r2, [r7, #24]
 801b912:	23f0      	movs	r3, #240	@ 0xf0
 801b914:	039b      	lsls	r3, r3, #14
 801b916:	401a      	ands	r2, r3
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b91c:	429a      	cmp	r2, r3
 801b91e:	d107      	bne.n	801b930 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801b920:	69ba      	ldr	r2, [r7, #24]
 801b922:	23c0      	movs	r3, #192	@ 0xc0
 801b924:	041b      	lsls	r3, r3, #16
 801b926:	401a      	ands	r2, r3
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801b92c:	429a      	cmp	r2, r3
 801b92e:	d001      	beq.n	801b934 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801b930:	2301      	movs	r3, #1
 801b932:	e000      	b.n	801b936 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801b934:	2300      	movs	r3, #0
}
 801b936:	0018      	movs	r0, r3
 801b938:	46bd      	mov	sp, r7
 801b93a:	b00a      	add	sp, #40	@ 0x28
 801b93c:	bdb0      	pop	{r4, r5, r7, pc}
 801b93e:	46c0      	nop			@ (mov r8, r8)
 801b940:	40021000 	.word	0x40021000
 801b944:	ff02ffff 	.word	0xff02ffff
 801b948:	feffffff 	.word	0xfeffffff

0801b94c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b94c:	b5b0      	push	{r4, r5, r7, lr}
 801b94e:	b084      	sub	sp, #16
 801b950:	af00      	add	r7, sp, #0
 801b952:	6078      	str	r0, [r7, #4]
 801b954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d101      	bne.n	801b960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b95c:	2301      	movs	r3, #1
 801b95e:	e128      	b.n	801bbb2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801b960:	4b96      	ldr	r3, [pc, #600]	@ (801bbbc <HAL_RCC_ClockConfig+0x270>)
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	2201      	movs	r2, #1
 801b966:	4013      	ands	r3, r2
 801b968:	683a      	ldr	r2, [r7, #0]
 801b96a:	429a      	cmp	r2, r3
 801b96c:	d91e      	bls.n	801b9ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b96e:	4b93      	ldr	r3, [pc, #588]	@ (801bbbc <HAL_RCC_ClockConfig+0x270>)
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	2201      	movs	r2, #1
 801b974:	4393      	bics	r3, r2
 801b976:	0019      	movs	r1, r3
 801b978:	4b90      	ldr	r3, [pc, #576]	@ (801bbbc <HAL_RCC_ClockConfig+0x270>)
 801b97a:	683a      	ldr	r2, [r7, #0]
 801b97c:	430a      	orrs	r2, r1
 801b97e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801b980:	f7f8 ff78 	bl	8014874 <HAL_GetTick>
 801b984:	0003      	movs	r3, r0
 801b986:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b988:	e009      	b.n	801b99e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b98a:	f7f8 ff73 	bl	8014874 <HAL_GetTick>
 801b98e:	0002      	movs	r2, r0
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	1ad3      	subs	r3, r2, r3
 801b994:	4a8a      	ldr	r2, [pc, #552]	@ (801bbc0 <HAL_RCC_ClockConfig+0x274>)
 801b996:	4293      	cmp	r3, r2
 801b998:	d901      	bls.n	801b99e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801b99a:	2303      	movs	r3, #3
 801b99c:	e109      	b.n	801bbb2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b99e:	4b87      	ldr	r3, [pc, #540]	@ (801bbbc <HAL_RCC_ClockConfig+0x270>)
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	2201      	movs	r2, #1
 801b9a4:	4013      	ands	r3, r2
 801b9a6:	683a      	ldr	r2, [r7, #0]
 801b9a8:	429a      	cmp	r2, r3
 801b9aa:	d1ee      	bne.n	801b98a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	2202      	movs	r2, #2
 801b9b2:	4013      	ands	r3, r2
 801b9b4:	d009      	beq.n	801b9ca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b9b6:	4b83      	ldr	r3, [pc, #524]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801b9b8:	68db      	ldr	r3, [r3, #12]
 801b9ba:	22f0      	movs	r2, #240	@ 0xf0
 801b9bc:	4393      	bics	r3, r2
 801b9be:	0019      	movs	r1, r3
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	689a      	ldr	r2, [r3, #8]
 801b9c4:	4b7f      	ldr	r3, [pc, #508]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801b9c6:	430a      	orrs	r2, r1
 801b9c8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	2201      	movs	r2, #1
 801b9d0:	4013      	ands	r3, r2
 801b9d2:	d100      	bne.n	801b9d6 <HAL_RCC_ClockConfig+0x8a>
 801b9d4:	e089      	b.n	801baea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	685b      	ldr	r3, [r3, #4]
 801b9da:	2b02      	cmp	r3, #2
 801b9dc:	d107      	bne.n	801b9ee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b9de:	4b79      	ldr	r3, [pc, #484]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801b9e0:	681a      	ldr	r2, [r3, #0]
 801b9e2:	2380      	movs	r3, #128	@ 0x80
 801b9e4:	029b      	lsls	r3, r3, #10
 801b9e6:	4013      	ands	r3, r2
 801b9e8:	d120      	bne.n	801ba2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801b9ea:	2301      	movs	r3, #1
 801b9ec:	e0e1      	b.n	801bbb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	685b      	ldr	r3, [r3, #4]
 801b9f2:	2b03      	cmp	r3, #3
 801b9f4:	d107      	bne.n	801ba06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b9f6:	4b73      	ldr	r3, [pc, #460]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801b9f8:	681a      	ldr	r2, [r3, #0]
 801b9fa:	2380      	movs	r3, #128	@ 0x80
 801b9fc:	049b      	lsls	r3, r3, #18
 801b9fe:	4013      	ands	r3, r2
 801ba00:	d114      	bne.n	801ba2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ba02:	2301      	movs	r3, #1
 801ba04:	e0d5      	b.n	801bbb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	685b      	ldr	r3, [r3, #4]
 801ba0a:	2b01      	cmp	r3, #1
 801ba0c:	d106      	bne.n	801ba1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ba0e:	4b6d      	ldr	r3, [pc, #436]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	2204      	movs	r2, #4
 801ba14:	4013      	ands	r3, r2
 801ba16:	d109      	bne.n	801ba2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ba18:	2301      	movs	r3, #1
 801ba1a:	e0ca      	b.n	801bbb2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801ba1c:	4b69      	ldr	r3, [pc, #420]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801ba1e:	681a      	ldr	r2, [r3, #0]
 801ba20:	2380      	movs	r3, #128	@ 0x80
 801ba22:	009b      	lsls	r3, r3, #2
 801ba24:	4013      	ands	r3, r2
 801ba26:	d101      	bne.n	801ba2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ba28:	2301      	movs	r3, #1
 801ba2a:	e0c2      	b.n	801bbb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801ba2c:	4b65      	ldr	r3, [pc, #404]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801ba2e:	68db      	ldr	r3, [r3, #12]
 801ba30:	2203      	movs	r2, #3
 801ba32:	4393      	bics	r3, r2
 801ba34:	0019      	movs	r1, r3
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	685a      	ldr	r2, [r3, #4]
 801ba3a:	4b62      	ldr	r3, [pc, #392]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801ba3c:	430a      	orrs	r2, r1
 801ba3e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801ba40:	f7f8 ff18 	bl	8014874 <HAL_GetTick>
 801ba44:	0003      	movs	r3, r0
 801ba46:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	685b      	ldr	r3, [r3, #4]
 801ba4c:	2b02      	cmp	r3, #2
 801ba4e:	d111      	bne.n	801ba74 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801ba50:	e009      	b.n	801ba66 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ba52:	f7f8 ff0f 	bl	8014874 <HAL_GetTick>
 801ba56:	0002      	movs	r2, r0
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	1ad3      	subs	r3, r2, r3
 801ba5c:	4a58      	ldr	r2, [pc, #352]	@ (801bbc0 <HAL_RCC_ClockConfig+0x274>)
 801ba5e:	4293      	cmp	r3, r2
 801ba60:	d901      	bls.n	801ba66 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801ba62:	2303      	movs	r3, #3
 801ba64:	e0a5      	b.n	801bbb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801ba66:	4b57      	ldr	r3, [pc, #348]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801ba68:	68db      	ldr	r3, [r3, #12]
 801ba6a:	220c      	movs	r2, #12
 801ba6c:	4013      	ands	r3, r2
 801ba6e:	2b08      	cmp	r3, #8
 801ba70:	d1ef      	bne.n	801ba52 <HAL_RCC_ClockConfig+0x106>
 801ba72:	e03a      	b.n	801baea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	685b      	ldr	r3, [r3, #4]
 801ba78:	2b03      	cmp	r3, #3
 801ba7a:	d111      	bne.n	801baa0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ba7c:	e009      	b.n	801ba92 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ba7e:	f7f8 fef9 	bl	8014874 <HAL_GetTick>
 801ba82:	0002      	movs	r2, r0
 801ba84:	68fb      	ldr	r3, [r7, #12]
 801ba86:	1ad3      	subs	r3, r2, r3
 801ba88:	4a4d      	ldr	r2, [pc, #308]	@ (801bbc0 <HAL_RCC_ClockConfig+0x274>)
 801ba8a:	4293      	cmp	r3, r2
 801ba8c:	d901      	bls.n	801ba92 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801ba8e:	2303      	movs	r3, #3
 801ba90:	e08f      	b.n	801bbb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ba92:	4b4c      	ldr	r3, [pc, #304]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801ba94:	68db      	ldr	r3, [r3, #12]
 801ba96:	220c      	movs	r2, #12
 801ba98:	4013      	ands	r3, r2
 801ba9a:	2b0c      	cmp	r3, #12
 801ba9c:	d1ef      	bne.n	801ba7e <HAL_RCC_ClockConfig+0x132>
 801ba9e:	e024      	b.n	801baea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	685b      	ldr	r3, [r3, #4]
 801baa4:	2b01      	cmp	r3, #1
 801baa6:	d11b      	bne.n	801bae0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801baa8:	e009      	b.n	801babe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801baaa:	f7f8 fee3 	bl	8014874 <HAL_GetTick>
 801baae:	0002      	movs	r2, r0
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	1ad3      	subs	r3, r2, r3
 801bab4:	4a42      	ldr	r2, [pc, #264]	@ (801bbc0 <HAL_RCC_ClockConfig+0x274>)
 801bab6:	4293      	cmp	r3, r2
 801bab8:	d901      	bls.n	801babe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801baba:	2303      	movs	r3, #3
 801babc:	e079      	b.n	801bbb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801babe:	4b41      	ldr	r3, [pc, #260]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801bac0:	68db      	ldr	r3, [r3, #12]
 801bac2:	220c      	movs	r2, #12
 801bac4:	4013      	ands	r3, r2
 801bac6:	2b04      	cmp	r3, #4
 801bac8:	d1ef      	bne.n	801baaa <HAL_RCC_ClockConfig+0x15e>
 801baca:	e00e      	b.n	801baea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bacc:	f7f8 fed2 	bl	8014874 <HAL_GetTick>
 801bad0:	0002      	movs	r2, r0
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	1ad3      	subs	r3, r2, r3
 801bad6:	4a3a      	ldr	r2, [pc, #232]	@ (801bbc0 <HAL_RCC_ClockConfig+0x274>)
 801bad8:	4293      	cmp	r3, r2
 801bada:	d901      	bls.n	801bae0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801badc:	2303      	movs	r3, #3
 801bade:	e068      	b.n	801bbb2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801bae0:	4b38      	ldr	r3, [pc, #224]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801bae2:	68db      	ldr	r3, [r3, #12]
 801bae4:	220c      	movs	r2, #12
 801bae6:	4013      	ands	r3, r2
 801bae8:	d1f0      	bne.n	801bacc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801baea:	4b34      	ldr	r3, [pc, #208]	@ (801bbbc <HAL_RCC_ClockConfig+0x270>)
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	2201      	movs	r2, #1
 801baf0:	4013      	ands	r3, r2
 801baf2:	683a      	ldr	r2, [r7, #0]
 801baf4:	429a      	cmp	r2, r3
 801baf6:	d21e      	bcs.n	801bb36 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801baf8:	4b30      	ldr	r3, [pc, #192]	@ (801bbbc <HAL_RCC_ClockConfig+0x270>)
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	2201      	movs	r2, #1
 801bafe:	4393      	bics	r3, r2
 801bb00:	0019      	movs	r1, r3
 801bb02:	4b2e      	ldr	r3, [pc, #184]	@ (801bbbc <HAL_RCC_ClockConfig+0x270>)
 801bb04:	683a      	ldr	r2, [r7, #0]
 801bb06:	430a      	orrs	r2, r1
 801bb08:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801bb0a:	f7f8 feb3 	bl	8014874 <HAL_GetTick>
 801bb0e:	0003      	movs	r3, r0
 801bb10:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bb12:	e009      	b.n	801bb28 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb14:	f7f8 feae 	bl	8014874 <HAL_GetTick>
 801bb18:	0002      	movs	r2, r0
 801bb1a:	68fb      	ldr	r3, [r7, #12]
 801bb1c:	1ad3      	subs	r3, r2, r3
 801bb1e:	4a28      	ldr	r2, [pc, #160]	@ (801bbc0 <HAL_RCC_ClockConfig+0x274>)
 801bb20:	4293      	cmp	r3, r2
 801bb22:	d901      	bls.n	801bb28 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801bb24:	2303      	movs	r3, #3
 801bb26:	e044      	b.n	801bbb2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bb28:	4b24      	ldr	r3, [pc, #144]	@ (801bbbc <HAL_RCC_ClockConfig+0x270>)
 801bb2a:	681b      	ldr	r3, [r3, #0]
 801bb2c:	2201      	movs	r2, #1
 801bb2e:	4013      	ands	r3, r2
 801bb30:	683a      	ldr	r2, [r7, #0]
 801bb32:	429a      	cmp	r2, r3
 801bb34:	d1ee      	bne.n	801bb14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	2204      	movs	r2, #4
 801bb3c:	4013      	ands	r3, r2
 801bb3e:	d009      	beq.n	801bb54 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801bb40:	4b20      	ldr	r3, [pc, #128]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801bb42:	68db      	ldr	r3, [r3, #12]
 801bb44:	4a20      	ldr	r2, [pc, #128]	@ (801bbc8 <HAL_RCC_ClockConfig+0x27c>)
 801bb46:	4013      	ands	r3, r2
 801bb48:	0019      	movs	r1, r3
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	68da      	ldr	r2, [r3, #12]
 801bb4e:	4b1d      	ldr	r3, [pc, #116]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801bb50:	430a      	orrs	r2, r1
 801bb52:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	2208      	movs	r2, #8
 801bb5a:	4013      	ands	r3, r2
 801bb5c:	d00a      	beq.n	801bb74 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801bb5e:	4b19      	ldr	r3, [pc, #100]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801bb60:	68db      	ldr	r3, [r3, #12]
 801bb62:	4a1a      	ldr	r2, [pc, #104]	@ (801bbcc <HAL_RCC_ClockConfig+0x280>)
 801bb64:	4013      	ands	r3, r2
 801bb66:	0019      	movs	r1, r3
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	691b      	ldr	r3, [r3, #16]
 801bb6c:	00da      	lsls	r2, r3, #3
 801bb6e:	4b15      	ldr	r3, [pc, #84]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801bb70:	430a      	orrs	r2, r1
 801bb72:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801bb74:	f000 f832 	bl	801bbdc <HAL_RCC_GetSysClockFreq>
 801bb78:	0001      	movs	r1, r0
 801bb7a:	4b12      	ldr	r3, [pc, #72]	@ (801bbc4 <HAL_RCC_ClockConfig+0x278>)
 801bb7c:	68db      	ldr	r3, [r3, #12]
 801bb7e:	091b      	lsrs	r3, r3, #4
 801bb80:	220f      	movs	r2, #15
 801bb82:	4013      	ands	r3, r2
 801bb84:	4a12      	ldr	r2, [pc, #72]	@ (801bbd0 <HAL_RCC_ClockConfig+0x284>)
 801bb86:	5cd3      	ldrb	r3, [r2, r3]
 801bb88:	000a      	movs	r2, r1
 801bb8a:	40da      	lsrs	r2, r3
 801bb8c:	4b11      	ldr	r3, [pc, #68]	@ (801bbd4 <HAL_RCC_ClockConfig+0x288>)
 801bb8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801bb90:	4b11      	ldr	r3, [pc, #68]	@ (801bbd8 <HAL_RCC_ClockConfig+0x28c>)
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	250b      	movs	r5, #11
 801bb96:	197c      	adds	r4, r7, r5
 801bb98:	0018      	movs	r0, r3
 801bb9a:	f7f8 fe25 	bl	80147e8 <HAL_InitTick>
 801bb9e:	0003      	movs	r3, r0
 801bba0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801bba2:	197b      	adds	r3, r7, r5
 801bba4:	781b      	ldrb	r3, [r3, #0]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d002      	beq.n	801bbb0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801bbaa:	197b      	adds	r3, r7, r5
 801bbac:	781b      	ldrb	r3, [r3, #0]
 801bbae:	e000      	b.n	801bbb2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801bbb0:	2300      	movs	r3, #0
}
 801bbb2:	0018      	movs	r0, r3
 801bbb4:	46bd      	mov	sp, r7
 801bbb6:	b004      	add	sp, #16
 801bbb8:	bdb0      	pop	{r4, r5, r7, pc}
 801bbba:	46c0      	nop			@ (mov r8, r8)
 801bbbc:	40022000 	.word	0x40022000
 801bbc0:	00001388 	.word	0x00001388
 801bbc4:	40021000 	.word	0x40021000
 801bbc8:	fffff8ff 	.word	0xfffff8ff
 801bbcc:	ffffc7ff 	.word	0xffffc7ff
 801bbd0:	0802e3f0 	.word	0x0802e3f0
 801bbd4:	200000ec 	.word	0x200000ec
 801bbd8:	200000fc 	.word	0x200000fc

0801bbdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bbdc:	b5b0      	push	{r4, r5, r7, lr}
 801bbde:	b08e      	sub	sp, #56	@ 0x38
 801bbe0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801bbe2:	4b4c      	ldr	r3, [pc, #304]	@ (801bd14 <HAL_RCC_GetSysClockFreq+0x138>)
 801bbe4:	68db      	ldr	r3, [r3, #12]
 801bbe6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801bbe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bbea:	230c      	movs	r3, #12
 801bbec:	4013      	ands	r3, r2
 801bbee:	2b0c      	cmp	r3, #12
 801bbf0:	d014      	beq.n	801bc1c <HAL_RCC_GetSysClockFreq+0x40>
 801bbf2:	d900      	bls.n	801bbf6 <HAL_RCC_GetSysClockFreq+0x1a>
 801bbf4:	e07b      	b.n	801bcee <HAL_RCC_GetSysClockFreq+0x112>
 801bbf6:	2b04      	cmp	r3, #4
 801bbf8:	d002      	beq.n	801bc00 <HAL_RCC_GetSysClockFreq+0x24>
 801bbfa:	2b08      	cmp	r3, #8
 801bbfc:	d00b      	beq.n	801bc16 <HAL_RCC_GetSysClockFreq+0x3a>
 801bbfe:	e076      	b.n	801bcee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bc00:	4b44      	ldr	r3, [pc, #272]	@ (801bd14 <HAL_RCC_GetSysClockFreq+0x138>)
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	2210      	movs	r2, #16
 801bc06:	4013      	ands	r3, r2
 801bc08:	d002      	beq.n	801bc10 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801bc0a:	4b43      	ldr	r3, [pc, #268]	@ (801bd18 <HAL_RCC_GetSysClockFreq+0x13c>)
 801bc0c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801bc0e:	e07c      	b.n	801bd0a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801bc10:	4b42      	ldr	r3, [pc, #264]	@ (801bd1c <HAL_RCC_GetSysClockFreq+0x140>)
 801bc12:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bc14:	e079      	b.n	801bd0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801bc16:	4b42      	ldr	r3, [pc, #264]	@ (801bd20 <HAL_RCC_GetSysClockFreq+0x144>)
 801bc18:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bc1a:	e076      	b.n	801bd0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801bc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc1e:	0c9a      	lsrs	r2, r3, #18
 801bc20:	230f      	movs	r3, #15
 801bc22:	401a      	ands	r2, r3
 801bc24:	4b3f      	ldr	r3, [pc, #252]	@ (801bd24 <HAL_RCC_GetSysClockFreq+0x148>)
 801bc26:	5c9b      	ldrb	r3, [r3, r2]
 801bc28:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801bc2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc2c:	0d9a      	lsrs	r2, r3, #22
 801bc2e:	2303      	movs	r3, #3
 801bc30:	4013      	ands	r3, r2
 801bc32:	3301      	adds	r3, #1
 801bc34:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bc36:	4b37      	ldr	r3, [pc, #220]	@ (801bd14 <HAL_RCC_GetSysClockFreq+0x138>)
 801bc38:	68da      	ldr	r2, [r3, #12]
 801bc3a:	2380      	movs	r3, #128	@ 0x80
 801bc3c:	025b      	lsls	r3, r3, #9
 801bc3e:	4013      	ands	r3, r2
 801bc40:	d01a      	beq.n	801bc78 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bc42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc44:	61bb      	str	r3, [r7, #24]
 801bc46:	2300      	movs	r3, #0
 801bc48:	61fb      	str	r3, [r7, #28]
 801bc4a:	4a35      	ldr	r2, [pc, #212]	@ (801bd20 <HAL_RCC_GetSysClockFreq+0x144>)
 801bc4c:	2300      	movs	r3, #0
 801bc4e:	69b8      	ldr	r0, [r7, #24]
 801bc50:	69f9      	ldr	r1, [r7, #28]
 801bc52:	f7e4 fcb5 	bl	80005c0 <__aeabi_lmul>
 801bc56:	0002      	movs	r2, r0
 801bc58:	000b      	movs	r3, r1
 801bc5a:	0010      	movs	r0, r2
 801bc5c:	0019      	movs	r1, r3
 801bc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc60:	613b      	str	r3, [r7, #16]
 801bc62:	2300      	movs	r3, #0
 801bc64:	617b      	str	r3, [r7, #20]
 801bc66:	693a      	ldr	r2, [r7, #16]
 801bc68:	697b      	ldr	r3, [r7, #20]
 801bc6a:	f7e4 fc89 	bl	8000580 <__aeabi_uldivmod>
 801bc6e:	0002      	movs	r2, r0
 801bc70:	000b      	movs	r3, r1
 801bc72:	0013      	movs	r3, r2
 801bc74:	637b      	str	r3, [r7, #52]	@ 0x34
 801bc76:	e037      	b.n	801bce8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bc78:	4b26      	ldr	r3, [pc, #152]	@ (801bd14 <HAL_RCC_GetSysClockFreq+0x138>)
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	2210      	movs	r2, #16
 801bc7e:	4013      	ands	r3, r2
 801bc80:	d01a      	beq.n	801bcb8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801bc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc84:	60bb      	str	r3, [r7, #8]
 801bc86:	2300      	movs	r3, #0
 801bc88:	60fb      	str	r3, [r7, #12]
 801bc8a:	4a23      	ldr	r2, [pc, #140]	@ (801bd18 <HAL_RCC_GetSysClockFreq+0x13c>)
 801bc8c:	2300      	movs	r3, #0
 801bc8e:	68b8      	ldr	r0, [r7, #8]
 801bc90:	68f9      	ldr	r1, [r7, #12]
 801bc92:	f7e4 fc95 	bl	80005c0 <__aeabi_lmul>
 801bc96:	0002      	movs	r2, r0
 801bc98:	000b      	movs	r3, r1
 801bc9a:	0010      	movs	r0, r2
 801bc9c:	0019      	movs	r1, r3
 801bc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bca0:	603b      	str	r3, [r7, #0]
 801bca2:	2300      	movs	r3, #0
 801bca4:	607b      	str	r3, [r7, #4]
 801bca6:	683a      	ldr	r2, [r7, #0]
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	f7e4 fc69 	bl	8000580 <__aeabi_uldivmod>
 801bcae:	0002      	movs	r2, r0
 801bcb0:	000b      	movs	r3, r1
 801bcb2:	0013      	movs	r3, r2
 801bcb4:	637b      	str	r3, [r7, #52]	@ 0x34
 801bcb6:	e017      	b.n	801bce8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bcba:	0018      	movs	r0, r3
 801bcbc:	2300      	movs	r3, #0
 801bcbe:	0019      	movs	r1, r3
 801bcc0:	4a16      	ldr	r2, [pc, #88]	@ (801bd1c <HAL_RCC_GetSysClockFreq+0x140>)
 801bcc2:	2300      	movs	r3, #0
 801bcc4:	f7e4 fc7c 	bl	80005c0 <__aeabi_lmul>
 801bcc8:	0002      	movs	r2, r0
 801bcca:	000b      	movs	r3, r1
 801bccc:	0010      	movs	r0, r2
 801bcce:	0019      	movs	r1, r3
 801bcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcd2:	001c      	movs	r4, r3
 801bcd4:	2300      	movs	r3, #0
 801bcd6:	001d      	movs	r5, r3
 801bcd8:	0022      	movs	r2, r4
 801bcda:	002b      	movs	r3, r5
 801bcdc:	f7e4 fc50 	bl	8000580 <__aeabi_uldivmod>
 801bce0:	0002      	movs	r2, r0
 801bce2:	000b      	movs	r3, r1
 801bce4:	0013      	movs	r3, r2
 801bce6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801bce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bcea:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bcec:	e00d      	b.n	801bd0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801bcee:	4b09      	ldr	r3, [pc, #36]	@ (801bd14 <HAL_RCC_GetSysClockFreq+0x138>)
 801bcf0:	685b      	ldr	r3, [r3, #4]
 801bcf2:	0b5b      	lsrs	r3, r3, #13
 801bcf4:	2207      	movs	r2, #7
 801bcf6:	4013      	ands	r3, r2
 801bcf8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801bcfa:	6a3b      	ldr	r3, [r7, #32]
 801bcfc:	3301      	adds	r3, #1
 801bcfe:	2280      	movs	r2, #128	@ 0x80
 801bd00:	0212      	lsls	r2, r2, #8
 801bd02:	409a      	lsls	r2, r3
 801bd04:	0013      	movs	r3, r2
 801bd06:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bd08:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801bd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801bd0c:	0018      	movs	r0, r3
 801bd0e:	46bd      	mov	sp, r7
 801bd10:	b00e      	add	sp, #56	@ 0x38
 801bd12:	bdb0      	pop	{r4, r5, r7, pc}
 801bd14:	40021000 	.word	0x40021000
 801bd18:	003d0900 	.word	0x003d0900
 801bd1c:	00f42400 	.word	0x00f42400
 801bd20:	007a1200 	.word	0x007a1200
 801bd24:	0802e408 	.word	0x0802e408

0801bd28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801bd2c:	4b02      	ldr	r3, [pc, #8]	@ (801bd38 <HAL_RCC_GetHCLKFreq+0x10>)
 801bd2e:	681b      	ldr	r3, [r3, #0]
}
 801bd30:	0018      	movs	r0, r3
 801bd32:	46bd      	mov	sp, r7
 801bd34:	bd80      	pop	{r7, pc}
 801bd36:	46c0      	nop			@ (mov r8, r8)
 801bd38:	200000ec 	.word	0x200000ec

0801bd3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801bd3c:	b580      	push	{r7, lr}
 801bd3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801bd40:	f7ff fff2 	bl	801bd28 <HAL_RCC_GetHCLKFreq>
 801bd44:	0001      	movs	r1, r0
 801bd46:	4b06      	ldr	r3, [pc, #24]	@ (801bd60 <HAL_RCC_GetPCLK1Freq+0x24>)
 801bd48:	68db      	ldr	r3, [r3, #12]
 801bd4a:	0a1b      	lsrs	r3, r3, #8
 801bd4c:	2207      	movs	r2, #7
 801bd4e:	4013      	ands	r3, r2
 801bd50:	4a04      	ldr	r2, [pc, #16]	@ (801bd64 <HAL_RCC_GetPCLK1Freq+0x28>)
 801bd52:	5cd3      	ldrb	r3, [r2, r3]
 801bd54:	40d9      	lsrs	r1, r3
 801bd56:	000b      	movs	r3, r1
}
 801bd58:	0018      	movs	r0, r3
 801bd5a:	46bd      	mov	sp, r7
 801bd5c:	bd80      	pop	{r7, pc}
 801bd5e:	46c0      	nop			@ (mov r8, r8)
 801bd60:	40021000 	.word	0x40021000
 801bd64:	0802e400 	.word	0x0802e400

0801bd68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801bd68:	b580      	push	{r7, lr}
 801bd6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801bd6c:	f7ff ffdc 	bl	801bd28 <HAL_RCC_GetHCLKFreq>
 801bd70:	0001      	movs	r1, r0
 801bd72:	4b06      	ldr	r3, [pc, #24]	@ (801bd8c <HAL_RCC_GetPCLK2Freq+0x24>)
 801bd74:	68db      	ldr	r3, [r3, #12]
 801bd76:	0adb      	lsrs	r3, r3, #11
 801bd78:	2207      	movs	r2, #7
 801bd7a:	4013      	ands	r3, r2
 801bd7c:	4a04      	ldr	r2, [pc, #16]	@ (801bd90 <HAL_RCC_GetPCLK2Freq+0x28>)
 801bd7e:	5cd3      	ldrb	r3, [r2, r3]
 801bd80:	40d9      	lsrs	r1, r3
 801bd82:	000b      	movs	r3, r1
}
 801bd84:	0018      	movs	r0, r3
 801bd86:	46bd      	mov	sp, r7
 801bd88:	bd80      	pop	{r7, pc}
 801bd8a:	46c0      	nop			@ (mov r8, r8)
 801bd8c:	40021000 	.word	0x40021000
 801bd90:	0802e400 	.word	0x0802e400

0801bd94 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b086      	sub	sp, #24
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801bd9c:	2017      	movs	r0, #23
 801bd9e:	183b      	adds	r3, r7, r0
 801bda0:	2200      	movs	r2, #0
 801bda2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	2220      	movs	r2, #32
 801bdaa:	4013      	ands	r3, r2
 801bdac:	d100      	bne.n	801bdb0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801bdae:	e0c7      	b.n	801bf40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bdb0:	4b9b      	ldr	r3, [pc, #620]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bdb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bdb4:	2380      	movs	r3, #128	@ 0x80
 801bdb6:	055b      	lsls	r3, r3, #21
 801bdb8:	4013      	ands	r3, r2
 801bdba:	d109      	bne.n	801bdd0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bdbc:	4b98      	ldr	r3, [pc, #608]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bdbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bdc0:	4b97      	ldr	r3, [pc, #604]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bdc2:	2180      	movs	r1, #128	@ 0x80
 801bdc4:	0549      	lsls	r1, r1, #21
 801bdc6:	430a      	orrs	r2, r1
 801bdc8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801bdca:	183b      	adds	r3, r7, r0
 801bdcc:	2201      	movs	r2, #1
 801bdce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bdd0:	4b94      	ldr	r3, [pc, #592]	@ (801c024 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801bdd2:	681a      	ldr	r2, [r3, #0]
 801bdd4:	2380      	movs	r3, #128	@ 0x80
 801bdd6:	005b      	lsls	r3, r3, #1
 801bdd8:	4013      	ands	r3, r2
 801bdda:	d11a      	bne.n	801be12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801bddc:	4b91      	ldr	r3, [pc, #580]	@ (801c024 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801bdde:	681a      	ldr	r2, [r3, #0]
 801bde0:	4b90      	ldr	r3, [pc, #576]	@ (801c024 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801bde2:	2180      	movs	r1, #128	@ 0x80
 801bde4:	0049      	lsls	r1, r1, #1
 801bde6:	430a      	orrs	r2, r1
 801bde8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801bdea:	f7f8 fd43 	bl	8014874 <HAL_GetTick>
 801bdee:	0003      	movs	r3, r0
 801bdf0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bdf2:	e008      	b.n	801be06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bdf4:	f7f8 fd3e 	bl	8014874 <HAL_GetTick>
 801bdf8:	0002      	movs	r2, r0
 801bdfa:	693b      	ldr	r3, [r7, #16]
 801bdfc:	1ad3      	subs	r3, r2, r3
 801bdfe:	2b64      	cmp	r3, #100	@ 0x64
 801be00:	d901      	bls.n	801be06 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801be02:	2303      	movs	r3, #3
 801be04:	e107      	b.n	801c016 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be06:	4b87      	ldr	r3, [pc, #540]	@ (801c024 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be08:	681a      	ldr	r2, [r3, #0]
 801be0a:	2380      	movs	r3, #128	@ 0x80
 801be0c:	005b      	lsls	r3, r3, #1
 801be0e:	4013      	ands	r3, r2
 801be10:	d0f0      	beq.n	801bdf4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801be12:	4b83      	ldr	r3, [pc, #524]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be14:	681a      	ldr	r2, [r3, #0]
 801be16:	23c0      	movs	r3, #192	@ 0xc0
 801be18:	039b      	lsls	r3, r3, #14
 801be1a:	4013      	ands	r3, r2
 801be1c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	685a      	ldr	r2, [r3, #4]
 801be22:	23c0      	movs	r3, #192	@ 0xc0
 801be24:	039b      	lsls	r3, r3, #14
 801be26:	4013      	ands	r3, r2
 801be28:	68fa      	ldr	r2, [r7, #12]
 801be2a:	429a      	cmp	r2, r3
 801be2c:	d013      	beq.n	801be56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	685a      	ldr	r2, [r3, #4]
 801be32:	23c0      	movs	r3, #192	@ 0xc0
 801be34:	029b      	lsls	r3, r3, #10
 801be36:	401a      	ands	r2, r3
 801be38:	23c0      	movs	r3, #192	@ 0xc0
 801be3a:	029b      	lsls	r3, r3, #10
 801be3c:	429a      	cmp	r2, r3
 801be3e:	d10a      	bne.n	801be56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801be40:	4b77      	ldr	r3, [pc, #476]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be42:	681a      	ldr	r2, [r3, #0]
 801be44:	2380      	movs	r3, #128	@ 0x80
 801be46:	029b      	lsls	r3, r3, #10
 801be48:	401a      	ands	r2, r3
 801be4a:	2380      	movs	r3, #128	@ 0x80
 801be4c:	029b      	lsls	r3, r3, #10
 801be4e:	429a      	cmp	r2, r3
 801be50:	d101      	bne.n	801be56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801be52:	2301      	movs	r3, #1
 801be54:	e0df      	b.n	801c016 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801be56:	4b72      	ldr	r3, [pc, #456]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801be5a:	23c0      	movs	r3, #192	@ 0xc0
 801be5c:	029b      	lsls	r3, r3, #10
 801be5e:	4013      	ands	r3, r2
 801be60:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801be62:	68fb      	ldr	r3, [r7, #12]
 801be64:	2b00      	cmp	r3, #0
 801be66:	d03b      	beq.n	801bee0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	685a      	ldr	r2, [r3, #4]
 801be6c:	23c0      	movs	r3, #192	@ 0xc0
 801be6e:	029b      	lsls	r3, r3, #10
 801be70:	4013      	ands	r3, r2
 801be72:	68fa      	ldr	r2, [r7, #12]
 801be74:	429a      	cmp	r2, r3
 801be76:	d033      	beq.n	801bee0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	2220      	movs	r2, #32
 801be7e:	4013      	ands	r3, r2
 801be80:	d02e      	beq.n	801bee0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801be82:	4b67      	ldr	r3, [pc, #412]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801be86:	4a68      	ldr	r2, [pc, #416]	@ (801c028 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801be88:	4013      	ands	r3, r2
 801be8a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801be8c:	4b64      	ldr	r3, [pc, #400]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801be90:	4b63      	ldr	r3, [pc, #396]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be92:	2180      	movs	r1, #128	@ 0x80
 801be94:	0309      	lsls	r1, r1, #12
 801be96:	430a      	orrs	r2, r1
 801be98:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801be9a:	4b61      	ldr	r3, [pc, #388]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801be9e:	4b60      	ldr	r3, [pc, #384]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bea0:	4962      	ldr	r1, [pc, #392]	@ (801c02c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801bea2:	400a      	ands	r2, r1
 801bea4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801bea6:	4b5e      	ldr	r3, [pc, #376]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bea8:	68fa      	ldr	r2, [r7, #12]
 801beaa:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801beac:	68fa      	ldr	r2, [r7, #12]
 801beae:	2380      	movs	r3, #128	@ 0x80
 801beb0:	005b      	lsls	r3, r3, #1
 801beb2:	4013      	ands	r3, r2
 801beb4:	d014      	beq.n	801bee0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801beb6:	f7f8 fcdd 	bl	8014874 <HAL_GetTick>
 801beba:	0003      	movs	r3, r0
 801bebc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bebe:	e009      	b.n	801bed4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bec0:	f7f8 fcd8 	bl	8014874 <HAL_GetTick>
 801bec4:	0002      	movs	r2, r0
 801bec6:	693b      	ldr	r3, [r7, #16]
 801bec8:	1ad3      	subs	r3, r2, r3
 801beca:	4a59      	ldr	r2, [pc, #356]	@ (801c030 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801becc:	4293      	cmp	r3, r2
 801bece:	d901      	bls.n	801bed4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801bed0:	2303      	movs	r3, #3
 801bed2:	e0a0      	b.n	801c016 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bed4:	4b52      	ldr	r3, [pc, #328]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bed6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bed8:	2380      	movs	r3, #128	@ 0x80
 801beda:	009b      	lsls	r3, r3, #2
 801bedc:	4013      	ands	r3, r2
 801bede:	d0ef      	beq.n	801bec0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	2220      	movs	r2, #32
 801bee6:	4013      	ands	r3, r2
 801bee8:	d01f      	beq.n	801bf2a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	685a      	ldr	r2, [r3, #4]
 801beee:	23c0      	movs	r3, #192	@ 0xc0
 801bef0:	029b      	lsls	r3, r3, #10
 801bef2:	401a      	ands	r2, r3
 801bef4:	23c0      	movs	r3, #192	@ 0xc0
 801bef6:	029b      	lsls	r3, r3, #10
 801bef8:	429a      	cmp	r2, r3
 801befa:	d10c      	bne.n	801bf16 <HAL_RCCEx_PeriphCLKConfig+0x182>
 801befc:	4b48      	ldr	r3, [pc, #288]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	4a4c      	ldr	r2, [pc, #304]	@ (801c034 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801bf02:	4013      	ands	r3, r2
 801bf04:	0019      	movs	r1, r3
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	685a      	ldr	r2, [r3, #4]
 801bf0a:	23c0      	movs	r3, #192	@ 0xc0
 801bf0c:	039b      	lsls	r3, r3, #14
 801bf0e:	401a      	ands	r2, r3
 801bf10:	4b43      	ldr	r3, [pc, #268]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf12:	430a      	orrs	r2, r1
 801bf14:	601a      	str	r2, [r3, #0]
 801bf16:	4b42      	ldr	r3, [pc, #264]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	685a      	ldr	r2, [r3, #4]
 801bf1e:	23c0      	movs	r3, #192	@ 0xc0
 801bf20:	029b      	lsls	r3, r3, #10
 801bf22:	401a      	ands	r2, r3
 801bf24:	4b3e      	ldr	r3, [pc, #248]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf26:	430a      	orrs	r2, r1
 801bf28:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801bf2a:	2317      	movs	r3, #23
 801bf2c:	18fb      	adds	r3, r7, r3
 801bf2e:	781b      	ldrb	r3, [r3, #0]
 801bf30:	2b01      	cmp	r3, #1
 801bf32:	d105      	bne.n	801bf40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bf34:	4b3a      	ldr	r3, [pc, #232]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bf38:	4b39      	ldr	r3, [pc, #228]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf3a:	493f      	ldr	r1, [pc, #252]	@ (801c038 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801bf3c:	400a      	ands	r2, r1
 801bf3e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	681b      	ldr	r3, [r3, #0]
 801bf44:	2201      	movs	r2, #1
 801bf46:	4013      	ands	r3, r2
 801bf48:	d009      	beq.n	801bf5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801bf4a:	4b35      	ldr	r3, [pc, #212]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bf4e:	2203      	movs	r2, #3
 801bf50:	4393      	bics	r3, r2
 801bf52:	0019      	movs	r1, r3
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	689a      	ldr	r2, [r3, #8]
 801bf58:	4b31      	ldr	r3, [pc, #196]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf5a:	430a      	orrs	r2, r1
 801bf5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	2202      	movs	r2, #2
 801bf64:	4013      	ands	r3, r2
 801bf66:	d009      	beq.n	801bf7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801bf68:	4b2d      	ldr	r3, [pc, #180]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bf6c:	220c      	movs	r2, #12
 801bf6e:	4393      	bics	r3, r2
 801bf70:	0019      	movs	r1, r3
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	68da      	ldr	r2, [r3, #12]
 801bf76:	4b2a      	ldr	r3, [pc, #168]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf78:	430a      	orrs	r2, r1
 801bf7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	2204      	movs	r2, #4
 801bf82:	4013      	ands	r3, r2
 801bf84:	d009      	beq.n	801bf9a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801bf86:	4b26      	ldr	r3, [pc, #152]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bf8a:	4a2c      	ldr	r2, [pc, #176]	@ (801c03c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801bf8c:	4013      	ands	r3, r2
 801bf8e:	0019      	movs	r1, r3
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	691a      	ldr	r2, [r3, #16]
 801bf94:	4b22      	ldr	r3, [pc, #136]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf96:	430a      	orrs	r2, r1
 801bf98:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	2208      	movs	r2, #8
 801bfa0:	4013      	ands	r3, r2
 801bfa2:	d009      	beq.n	801bfb8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801bfa4:	4b1e      	ldr	r3, [pc, #120]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfa8:	4a25      	ldr	r2, [pc, #148]	@ (801c040 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801bfaa:	4013      	ands	r3, r2
 801bfac:	0019      	movs	r1, r3
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	695a      	ldr	r2, [r3, #20]
 801bfb2:	4b1b      	ldr	r3, [pc, #108]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfb4:	430a      	orrs	r2, r1
 801bfb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	681a      	ldr	r2, [r3, #0]
 801bfbc:	2380      	movs	r3, #128	@ 0x80
 801bfbe:	005b      	lsls	r3, r3, #1
 801bfc0:	4013      	ands	r3, r2
 801bfc2:	d009      	beq.n	801bfd8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801bfc4:	4b16      	ldr	r3, [pc, #88]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfc8:	4a17      	ldr	r2, [pc, #92]	@ (801c028 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801bfca:	4013      	ands	r3, r2
 801bfcc:	0019      	movs	r1, r3
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	699a      	ldr	r2, [r3, #24]
 801bfd2:	4b13      	ldr	r3, [pc, #76]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfd4:	430a      	orrs	r2, r1
 801bfd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	681b      	ldr	r3, [r3, #0]
 801bfdc:	2240      	movs	r2, #64	@ 0x40
 801bfde:	4013      	ands	r3, r2
 801bfe0:	d009      	beq.n	801bff6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801bfe2:	4b0f      	ldr	r3, [pc, #60]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfe6:	4a17      	ldr	r2, [pc, #92]	@ (801c044 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801bfe8:	4013      	ands	r3, r2
 801bfea:	0019      	movs	r1, r3
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	6a1a      	ldr	r2, [r3, #32]
 801bff0:	4b0b      	ldr	r3, [pc, #44]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bff2:	430a      	orrs	r2, r1
 801bff4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	681b      	ldr	r3, [r3, #0]
 801bffa:	2280      	movs	r2, #128	@ 0x80
 801bffc:	4013      	ands	r3, r2
 801bffe:	d009      	beq.n	801c014 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801c000:	4b07      	ldr	r3, [pc, #28]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c004:	4a10      	ldr	r2, [pc, #64]	@ (801c048 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801c006:	4013      	ands	r3, r2
 801c008:	0019      	movs	r1, r3
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	69da      	ldr	r2, [r3, #28]
 801c00e:	4b04      	ldr	r3, [pc, #16]	@ (801c020 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c010:	430a      	orrs	r2, r1
 801c012:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801c014:	2300      	movs	r3, #0
}
 801c016:	0018      	movs	r0, r3
 801c018:	46bd      	mov	sp, r7
 801c01a:	b006      	add	sp, #24
 801c01c:	bd80      	pop	{r7, pc}
 801c01e:	46c0      	nop			@ (mov r8, r8)
 801c020:	40021000 	.word	0x40021000
 801c024:	40007000 	.word	0x40007000
 801c028:	fffcffff 	.word	0xfffcffff
 801c02c:	fff7ffff 	.word	0xfff7ffff
 801c030:	00001388 	.word	0x00001388
 801c034:	ffcfffff 	.word	0xffcfffff
 801c038:	efffffff 	.word	0xefffffff
 801c03c:	fffff3ff 	.word	0xfffff3ff
 801c040:	ffffcfff 	.word	0xffffcfff
 801c044:	fbffffff 	.word	0xfbffffff
 801c048:	fff3ffff 	.word	0xfff3ffff

0801c04c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801c04c:	b5b0      	push	{r4, r5, r7, lr}
 801c04e:	b084      	sub	sp, #16
 801c050:	af00      	add	r7, sp, #0
 801c052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801c054:	230f      	movs	r3, #15
 801c056:	18fb      	adds	r3, r7, r3
 801c058:	2201      	movs	r2, #1
 801c05a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d101      	bne.n	801c066 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801c062:	2301      	movs	r3, #1
 801c064:	e088      	b.n	801c178 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	2221      	movs	r2, #33	@ 0x21
 801c06a:	5c9b      	ldrb	r3, [r3, r2]
 801c06c:	b2db      	uxtb	r3, r3
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d107      	bne.n	801c082 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	2220      	movs	r2, #32
 801c076:	2100      	movs	r1, #0
 801c078:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	0018      	movs	r0, r3
 801c07e:	f7f2 fa59 	bl	800e534 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	2221      	movs	r2, #33	@ 0x21
 801c086:	2102      	movs	r1, #2
 801c088:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	68db      	ldr	r3, [r3, #12]
 801c090:	2210      	movs	r2, #16
 801c092:	4013      	ands	r3, r2
 801c094:	2b10      	cmp	r3, #16
 801c096:	d05f      	beq.n	801c158 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	681b      	ldr	r3, [r3, #0]
 801c09c:	22ca      	movs	r2, #202	@ 0xca
 801c09e:	625a      	str	r2, [r3, #36]	@ 0x24
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	2253      	movs	r2, #83	@ 0x53
 801c0a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801c0a8:	250f      	movs	r5, #15
 801c0aa:	197c      	adds	r4, r7, r5
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	0018      	movs	r0, r3
 801c0b0:	f000 fa99 	bl	801c5e6 <RTC_EnterInitMode>
 801c0b4:	0003      	movs	r3, r0
 801c0b6:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801c0b8:	0028      	movs	r0, r5
 801c0ba:	183b      	adds	r3, r7, r0
 801c0bc:	781b      	ldrb	r3, [r3, #0]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d12c      	bne.n	801c11c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	689a      	ldr	r2, [r3, #8]
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	492c      	ldr	r1, [pc, #176]	@ (801c180 <HAL_RTC_Init+0x134>)
 801c0ce:	400a      	ands	r2, r1
 801c0d0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	6899      	ldr	r1, [r3, #8]
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	685a      	ldr	r2, [r3, #4]
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	691b      	ldr	r3, [r3, #16]
 801c0e0:	431a      	orrs	r2, r3
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	699b      	ldr	r3, [r3, #24]
 801c0e6:	431a      	orrs	r2, r3
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	430a      	orrs	r2, r1
 801c0ee:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	687a      	ldr	r2, [r7, #4]
 801c0f6:	68d2      	ldr	r2, [r2, #12]
 801c0f8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	6919      	ldr	r1, [r3, #16]
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	689b      	ldr	r3, [r3, #8]
 801c104:	041a      	lsls	r2, r3, #16
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	430a      	orrs	r2, r1
 801c10c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801c10e:	183c      	adds	r4, r7, r0
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	0018      	movs	r0, r3
 801c114:	f000 faab 	bl	801c66e <RTC_ExitInitMode>
 801c118:	0003      	movs	r3, r0
 801c11a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801c11c:	230f      	movs	r3, #15
 801c11e:	18fb      	adds	r3, r7, r3
 801c120:	781b      	ldrb	r3, [r3, #0]
 801c122:	2b00      	cmp	r3, #0
 801c124:	d113      	bne.n	801c14e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	681b      	ldr	r3, [r3, #0]
 801c12a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	2103      	movs	r1, #3
 801c132:	438a      	bics	r2, r1
 801c134:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	69da      	ldr	r2, [r3, #28]
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	695b      	ldr	r3, [r3, #20]
 801c144:	431a      	orrs	r2, r3
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	430a      	orrs	r2, r1
 801c14c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	22ff      	movs	r2, #255	@ 0xff
 801c154:	625a      	str	r2, [r3, #36]	@ 0x24
 801c156:	e003      	b.n	801c160 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801c158:	230f      	movs	r3, #15
 801c15a:	18fb      	adds	r3, r7, r3
 801c15c:	2200      	movs	r2, #0
 801c15e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801c160:	230f      	movs	r3, #15
 801c162:	18fb      	adds	r3, r7, r3
 801c164:	781b      	ldrb	r3, [r3, #0]
 801c166:	2b00      	cmp	r3, #0
 801c168:	d103      	bne.n	801c172 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	2221      	movs	r2, #33	@ 0x21
 801c16e:	2101      	movs	r1, #1
 801c170:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801c172:	230f      	movs	r3, #15
 801c174:	18fb      	adds	r3, r7, r3
 801c176:	781b      	ldrb	r3, [r3, #0]
}
 801c178:	0018      	movs	r0, r3
 801c17a:	46bd      	mov	sp, r7
 801c17c:	b004      	add	sp, #16
 801c17e:	bdb0      	pop	{r4, r5, r7, pc}
 801c180:	ff8fffbf 	.word	0xff8fffbf

0801c184 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c184:	b5b0      	push	{r4, r5, r7, lr}
 801c186:	b086      	sub	sp, #24
 801c188:	af00      	add	r7, sp, #0
 801c18a:	60f8      	str	r0, [r7, #12]
 801c18c:	60b9      	str	r1, [r7, #8]
 801c18e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c190:	2300      	movs	r3, #0
 801c192:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c194:	68fb      	ldr	r3, [r7, #12]
 801c196:	2220      	movs	r2, #32
 801c198:	5c9b      	ldrb	r3, [r3, r2]
 801c19a:	2b01      	cmp	r3, #1
 801c19c:	d101      	bne.n	801c1a2 <HAL_RTC_SetTime+0x1e>
 801c19e:	2302      	movs	r3, #2
 801c1a0:	e092      	b.n	801c2c8 <HAL_RTC_SetTime+0x144>
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	2220      	movs	r2, #32
 801c1a6:	2101      	movs	r1, #1
 801c1a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c1aa:	68fb      	ldr	r3, [r7, #12]
 801c1ac:	2221      	movs	r2, #33	@ 0x21
 801c1ae:	2102      	movs	r1, #2
 801c1b0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d125      	bne.n	801c204 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	689b      	ldr	r3, [r3, #8]
 801c1be:	2240      	movs	r2, #64	@ 0x40
 801c1c0:	4013      	ands	r3, r2
 801c1c2:	d102      	bne.n	801c1ca <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c1c4:	68bb      	ldr	r3, [r7, #8]
 801c1c6:	2200      	movs	r2, #0
 801c1c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c1ca:	68bb      	ldr	r3, [r7, #8]
 801c1cc:	781b      	ldrb	r3, [r3, #0]
 801c1ce:	0018      	movs	r0, r3
 801c1d0:	f000 fa77 	bl	801c6c2 <RTC_ByteToBcd2>
 801c1d4:	0003      	movs	r3, r0
 801c1d6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c1d8:	68bb      	ldr	r3, [r7, #8]
 801c1da:	785b      	ldrb	r3, [r3, #1]
 801c1dc:	0018      	movs	r0, r3
 801c1de:	f000 fa70 	bl	801c6c2 <RTC_ByteToBcd2>
 801c1e2:	0003      	movs	r3, r0
 801c1e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c1e6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801c1e8:	68bb      	ldr	r3, [r7, #8]
 801c1ea:	789b      	ldrb	r3, [r3, #2]
 801c1ec:	0018      	movs	r0, r3
 801c1ee:	f000 fa68 	bl	801c6c2 <RTC_ByteToBcd2>
 801c1f2:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c1f4:	0022      	movs	r2, r4
 801c1f6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801c1f8:	68bb      	ldr	r3, [r7, #8]
 801c1fa:	78db      	ldrb	r3, [r3, #3]
 801c1fc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c1fe:	4313      	orrs	r3, r2
 801c200:	617b      	str	r3, [r7, #20]
 801c202:	e017      	b.n	801c234 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c204:	68fb      	ldr	r3, [r7, #12]
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	689b      	ldr	r3, [r3, #8]
 801c20a:	2240      	movs	r2, #64	@ 0x40
 801c20c:	4013      	ands	r3, r2
 801c20e:	d102      	bne.n	801c216 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c210:	68bb      	ldr	r3, [r7, #8]
 801c212:	2200      	movs	r2, #0
 801c214:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c216:	68bb      	ldr	r3, [r7, #8]
 801c218:	781b      	ldrb	r3, [r3, #0]
 801c21a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c21c:	68bb      	ldr	r3, [r7, #8]
 801c21e:	785b      	ldrb	r3, [r3, #1]
 801c220:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c222:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801c224:	68ba      	ldr	r2, [r7, #8]
 801c226:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c228:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801c22a:	68bb      	ldr	r3, [r7, #8]
 801c22c:	78db      	ldrb	r3, [r3, #3]
 801c22e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c230:	4313      	orrs	r3, r2
 801c232:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	22ca      	movs	r2, #202	@ 0xca
 801c23a:	625a      	str	r2, [r3, #36]	@ 0x24
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	681b      	ldr	r3, [r3, #0]
 801c240:	2253      	movs	r2, #83	@ 0x53
 801c242:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c244:	2513      	movs	r5, #19
 801c246:	197c      	adds	r4, r7, r5
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	0018      	movs	r0, r3
 801c24c:	f000 f9cb 	bl	801c5e6 <RTC_EnterInitMode>
 801c250:	0003      	movs	r3, r0
 801c252:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c254:	0028      	movs	r0, r5
 801c256:	183b      	adds	r3, r7, r0
 801c258:	781b      	ldrb	r3, [r3, #0]
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d120      	bne.n	801c2a0 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801c25e:	68fb      	ldr	r3, [r7, #12]
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	697a      	ldr	r2, [r7, #20]
 801c264:	491a      	ldr	r1, [pc, #104]	@ (801c2d0 <HAL_RTC_SetTime+0x14c>)
 801c266:	400a      	ands	r2, r1
 801c268:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	681b      	ldr	r3, [r3, #0]
 801c26e:	689a      	ldr	r2, [r3, #8]
 801c270:	68fb      	ldr	r3, [r7, #12]
 801c272:	681b      	ldr	r3, [r3, #0]
 801c274:	4917      	ldr	r1, [pc, #92]	@ (801c2d4 <HAL_RTC_SetTime+0x150>)
 801c276:	400a      	ands	r2, r1
 801c278:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801c27a:	68fb      	ldr	r3, [r7, #12]
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	6899      	ldr	r1, [r3, #8]
 801c280:	68bb      	ldr	r3, [r7, #8]
 801c282:	68da      	ldr	r2, [r3, #12]
 801c284:	68bb      	ldr	r3, [r7, #8]
 801c286:	691b      	ldr	r3, [r3, #16]
 801c288:	431a      	orrs	r2, r3
 801c28a:	68fb      	ldr	r3, [r7, #12]
 801c28c:	681b      	ldr	r3, [r3, #0]
 801c28e:	430a      	orrs	r2, r1
 801c290:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c292:	183c      	adds	r4, r7, r0
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	0018      	movs	r0, r3
 801c298:	f000 f9e9 	bl	801c66e <RTC_ExitInitMode>
 801c29c:	0003      	movs	r3, r0
 801c29e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c2a0:	2313      	movs	r3, #19
 801c2a2:	18fb      	adds	r3, r7, r3
 801c2a4:	781b      	ldrb	r3, [r3, #0]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d103      	bne.n	801c2b2 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	2221      	movs	r2, #33	@ 0x21
 801c2ae:	2101      	movs	r1, #1
 801c2b0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c2b2:	68fb      	ldr	r3, [r7, #12]
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	22ff      	movs	r2, #255	@ 0xff
 801c2b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	2220      	movs	r2, #32
 801c2be:	2100      	movs	r1, #0
 801c2c0:	5499      	strb	r1, [r3, r2]

  return status;
 801c2c2:	2313      	movs	r3, #19
 801c2c4:	18fb      	adds	r3, r7, r3
 801c2c6:	781b      	ldrb	r3, [r3, #0]
}
 801c2c8:	0018      	movs	r0, r3
 801c2ca:	46bd      	mov	sp, r7
 801c2cc:	b006      	add	sp, #24
 801c2ce:	bdb0      	pop	{r4, r5, r7, pc}
 801c2d0:	007f7f7f 	.word	0x007f7f7f
 801c2d4:	fffbffff 	.word	0xfffbffff

0801c2d8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c2d8:	b580      	push	{r7, lr}
 801c2da:	b086      	sub	sp, #24
 801c2dc:	af00      	add	r7, sp, #0
 801c2de:	60f8      	str	r0, [r7, #12]
 801c2e0:	60b9      	str	r1, [r7, #8]
 801c2e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c2e4:	2300      	movs	r3, #0
 801c2e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801c2e8:	68fb      	ldr	r3, [r7, #12]
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c2ee:	68bb      	ldr	r3, [r7, #8]
 801c2f0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801c2f2:	68fb      	ldr	r3, [r7, #12]
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	691b      	ldr	r3, [r3, #16]
 801c2f8:	045b      	lsls	r3, r3, #17
 801c2fa:	0c5a      	lsrs	r2, r3, #17
 801c2fc:	68bb      	ldr	r3, [r7, #8]
 801c2fe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	4a22      	ldr	r2, [pc, #136]	@ (801c390 <HAL_RTC_GetTime+0xb8>)
 801c308:	4013      	ands	r3, r2
 801c30a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801c30c:	697b      	ldr	r3, [r7, #20]
 801c30e:	0c1b      	lsrs	r3, r3, #16
 801c310:	b2db      	uxtb	r3, r3
 801c312:	223f      	movs	r2, #63	@ 0x3f
 801c314:	4013      	ands	r3, r2
 801c316:	b2da      	uxtb	r2, r3
 801c318:	68bb      	ldr	r3, [r7, #8]
 801c31a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801c31c:	697b      	ldr	r3, [r7, #20]
 801c31e:	0a1b      	lsrs	r3, r3, #8
 801c320:	b2db      	uxtb	r3, r3
 801c322:	227f      	movs	r2, #127	@ 0x7f
 801c324:	4013      	ands	r3, r2
 801c326:	b2da      	uxtb	r2, r3
 801c328:	68bb      	ldr	r3, [r7, #8]
 801c32a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801c32c:	697b      	ldr	r3, [r7, #20]
 801c32e:	b2db      	uxtb	r3, r3
 801c330:	227f      	movs	r2, #127	@ 0x7f
 801c332:	4013      	ands	r3, r2
 801c334:	b2da      	uxtb	r2, r3
 801c336:	68bb      	ldr	r3, [r7, #8]
 801c338:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801c33a:	697b      	ldr	r3, [r7, #20]
 801c33c:	0d9b      	lsrs	r3, r3, #22
 801c33e:	b2db      	uxtb	r3, r3
 801c340:	2201      	movs	r2, #1
 801c342:	4013      	ands	r3, r2
 801c344:	b2da      	uxtb	r2, r3
 801c346:	68bb      	ldr	r3, [r7, #8]
 801c348:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d11a      	bne.n	801c386 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801c350:	68bb      	ldr	r3, [r7, #8]
 801c352:	781b      	ldrb	r3, [r3, #0]
 801c354:	0018      	movs	r0, r3
 801c356:	f000 f9d5 	bl	801c704 <RTC_Bcd2ToByte>
 801c35a:	0003      	movs	r3, r0
 801c35c:	001a      	movs	r2, r3
 801c35e:	68bb      	ldr	r3, [r7, #8]
 801c360:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801c362:	68bb      	ldr	r3, [r7, #8]
 801c364:	785b      	ldrb	r3, [r3, #1]
 801c366:	0018      	movs	r0, r3
 801c368:	f000 f9cc 	bl	801c704 <RTC_Bcd2ToByte>
 801c36c:	0003      	movs	r3, r0
 801c36e:	001a      	movs	r2, r3
 801c370:	68bb      	ldr	r3, [r7, #8]
 801c372:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801c374:	68bb      	ldr	r3, [r7, #8]
 801c376:	789b      	ldrb	r3, [r3, #2]
 801c378:	0018      	movs	r0, r3
 801c37a:	f000 f9c3 	bl	801c704 <RTC_Bcd2ToByte>
 801c37e:	0003      	movs	r3, r0
 801c380:	001a      	movs	r2, r3
 801c382:	68bb      	ldr	r3, [r7, #8]
 801c384:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801c386:	2300      	movs	r3, #0
}
 801c388:	0018      	movs	r0, r3
 801c38a:	46bd      	mov	sp, r7
 801c38c:	b006      	add	sp, #24
 801c38e:	bd80      	pop	{r7, pc}
 801c390:	007f7f7f 	.word	0x007f7f7f

0801c394 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c394:	b5b0      	push	{r4, r5, r7, lr}
 801c396:	b086      	sub	sp, #24
 801c398:	af00      	add	r7, sp, #0
 801c39a:	60f8      	str	r0, [r7, #12]
 801c39c:	60b9      	str	r1, [r7, #8]
 801c39e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c3a0:	2300      	movs	r3, #0
 801c3a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	2220      	movs	r2, #32
 801c3a8:	5c9b      	ldrb	r3, [r3, r2]
 801c3aa:	2b01      	cmp	r3, #1
 801c3ac:	d101      	bne.n	801c3b2 <HAL_RTC_SetDate+0x1e>
 801c3ae:	2302      	movs	r3, #2
 801c3b0:	e07e      	b.n	801c4b0 <HAL_RTC_SetDate+0x11c>
 801c3b2:	68fb      	ldr	r3, [r7, #12]
 801c3b4:	2220      	movs	r2, #32
 801c3b6:	2101      	movs	r1, #1
 801c3b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	2221      	movs	r2, #33	@ 0x21
 801c3be:	2102      	movs	r1, #2
 801c3c0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	d10e      	bne.n	801c3e6 <HAL_RTC_SetDate+0x52>
 801c3c8:	68bb      	ldr	r3, [r7, #8]
 801c3ca:	785b      	ldrb	r3, [r3, #1]
 801c3cc:	001a      	movs	r2, r3
 801c3ce:	2310      	movs	r3, #16
 801c3d0:	4013      	ands	r3, r2
 801c3d2:	d008      	beq.n	801c3e6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801c3d4:	68bb      	ldr	r3, [r7, #8]
 801c3d6:	785b      	ldrb	r3, [r3, #1]
 801c3d8:	2210      	movs	r2, #16
 801c3da:	4393      	bics	r3, r2
 801c3dc:	b2db      	uxtb	r3, r3
 801c3de:	330a      	adds	r3, #10
 801c3e0:	b2da      	uxtb	r2, r3
 801c3e2:	68bb      	ldr	r3, [r7, #8]
 801c3e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	d11c      	bne.n	801c426 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c3ec:	68bb      	ldr	r3, [r7, #8]
 801c3ee:	78db      	ldrb	r3, [r3, #3]
 801c3f0:	0018      	movs	r0, r3
 801c3f2:	f000 f966 	bl	801c6c2 <RTC_ByteToBcd2>
 801c3f6:	0003      	movs	r3, r0
 801c3f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c3fa:	68bb      	ldr	r3, [r7, #8]
 801c3fc:	785b      	ldrb	r3, [r3, #1]
 801c3fe:	0018      	movs	r0, r3
 801c400:	f000 f95f 	bl	801c6c2 <RTC_ByteToBcd2>
 801c404:	0003      	movs	r3, r0
 801c406:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c408:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801c40a:	68bb      	ldr	r3, [r7, #8]
 801c40c:	789b      	ldrb	r3, [r3, #2]
 801c40e:	0018      	movs	r0, r3
 801c410:	f000 f957 	bl	801c6c2 <RTC_ByteToBcd2>
 801c414:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c416:	0022      	movs	r2, r4
 801c418:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801c41a:	68bb      	ldr	r3, [r7, #8]
 801c41c:	781b      	ldrb	r3, [r3, #0]
 801c41e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c420:	4313      	orrs	r3, r2
 801c422:	617b      	str	r3, [r7, #20]
 801c424:	e00e      	b.n	801c444 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c426:	68bb      	ldr	r3, [r7, #8]
 801c428:	78db      	ldrb	r3, [r3, #3]
 801c42a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c42c:	68bb      	ldr	r3, [r7, #8]
 801c42e:	785b      	ldrb	r3, [r3, #1]
 801c430:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c432:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801c434:	68ba      	ldr	r2, [r7, #8]
 801c436:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c438:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801c43a:	68bb      	ldr	r3, [r7, #8]
 801c43c:	781b      	ldrb	r3, [r3, #0]
 801c43e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c440:	4313      	orrs	r3, r2
 801c442:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c444:	68fb      	ldr	r3, [r7, #12]
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	22ca      	movs	r2, #202	@ 0xca
 801c44a:	625a      	str	r2, [r3, #36]	@ 0x24
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	2253      	movs	r2, #83	@ 0x53
 801c452:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c454:	2513      	movs	r5, #19
 801c456:	197c      	adds	r4, r7, r5
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	0018      	movs	r0, r3
 801c45c:	f000 f8c3 	bl	801c5e6 <RTC_EnterInitMode>
 801c460:	0003      	movs	r3, r0
 801c462:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c464:	0028      	movs	r0, r5
 801c466:	183b      	adds	r3, r7, r0
 801c468:	781b      	ldrb	r3, [r3, #0]
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d10c      	bne.n	801c488 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	697a      	ldr	r2, [r7, #20]
 801c474:	4910      	ldr	r1, [pc, #64]	@ (801c4b8 <HAL_RTC_SetDate+0x124>)
 801c476:	400a      	ands	r2, r1
 801c478:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c47a:	183c      	adds	r4, r7, r0
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	0018      	movs	r0, r3
 801c480:	f000 f8f5 	bl	801c66e <RTC_ExitInitMode>
 801c484:	0003      	movs	r3, r0
 801c486:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c488:	2313      	movs	r3, #19
 801c48a:	18fb      	adds	r3, r7, r3
 801c48c:	781b      	ldrb	r3, [r3, #0]
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d103      	bne.n	801c49a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	2221      	movs	r2, #33	@ 0x21
 801c496:	2101      	movs	r1, #1
 801c498:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c49a:	68fb      	ldr	r3, [r7, #12]
 801c49c:	681b      	ldr	r3, [r3, #0]
 801c49e:	22ff      	movs	r2, #255	@ 0xff
 801c4a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	2220      	movs	r2, #32
 801c4a6:	2100      	movs	r1, #0
 801c4a8:	5499      	strb	r1, [r3, r2]

  return status;
 801c4aa:	2313      	movs	r3, #19
 801c4ac:	18fb      	adds	r3, r7, r3
 801c4ae:	781b      	ldrb	r3, [r3, #0]
}
 801c4b0:	0018      	movs	r0, r3
 801c4b2:	46bd      	mov	sp, r7
 801c4b4:	b006      	add	sp, #24
 801c4b6:	bdb0      	pop	{r4, r5, r7, pc}
 801c4b8:	00ffff3f 	.word	0x00ffff3f

0801c4bc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c4bc:	b580      	push	{r7, lr}
 801c4be:	b086      	sub	sp, #24
 801c4c0:	af00      	add	r7, sp, #0
 801c4c2:	60f8      	str	r0, [r7, #12]
 801c4c4:	60b9      	str	r1, [r7, #8]
 801c4c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c4c8:	2300      	movs	r3, #0
 801c4ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	685b      	ldr	r3, [r3, #4]
 801c4d2:	4a21      	ldr	r2, [pc, #132]	@ (801c558 <HAL_RTC_GetDate+0x9c>)
 801c4d4:	4013      	ands	r3, r2
 801c4d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801c4d8:	697b      	ldr	r3, [r7, #20]
 801c4da:	0c1b      	lsrs	r3, r3, #16
 801c4dc:	b2da      	uxtb	r2, r3
 801c4de:	68bb      	ldr	r3, [r7, #8]
 801c4e0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801c4e2:	697b      	ldr	r3, [r7, #20]
 801c4e4:	0a1b      	lsrs	r3, r3, #8
 801c4e6:	b2db      	uxtb	r3, r3
 801c4e8:	221f      	movs	r2, #31
 801c4ea:	4013      	ands	r3, r2
 801c4ec:	b2da      	uxtb	r2, r3
 801c4ee:	68bb      	ldr	r3, [r7, #8]
 801c4f0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801c4f2:	697b      	ldr	r3, [r7, #20]
 801c4f4:	b2db      	uxtb	r3, r3
 801c4f6:	223f      	movs	r2, #63	@ 0x3f
 801c4f8:	4013      	ands	r3, r2
 801c4fa:	b2da      	uxtb	r2, r3
 801c4fc:	68bb      	ldr	r3, [r7, #8]
 801c4fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801c500:	697b      	ldr	r3, [r7, #20]
 801c502:	0b5b      	lsrs	r3, r3, #13
 801c504:	b2db      	uxtb	r3, r3
 801c506:	2207      	movs	r2, #7
 801c508:	4013      	ands	r3, r2
 801c50a:	b2da      	uxtb	r2, r3
 801c50c:	68bb      	ldr	r3, [r7, #8]
 801c50e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d11a      	bne.n	801c54c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801c516:	68bb      	ldr	r3, [r7, #8]
 801c518:	78db      	ldrb	r3, [r3, #3]
 801c51a:	0018      	movs	r0, r3
 801c51c:	f000 f8f2 	bl	801c704 <RTC_Bcd2ToByte>
 801c520:	0003      	movs	r3, r0
 801c522:	001a      	movs	r2, r3
 801c524:	68bb      	ldr	r3, [r7, #8]
 801c526:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801c528:	68bb      	ldr	r3, [r7, #8]
 801c52a:	785b      	ldrb	r3, [r3, #1]
 801c52c:	0018      	movs	r0, r3
 801c52e:	f000 f8e9 	bl	801c704 <RTC_Bcd2ToByte>
 801c532:	0003      	movs	r3, r0
 801c534:	001a      	movs	r2, r3
 801c536:	68bb      	ldr	r3, [r7, #8]
 801c538:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801c53a:	68bb      	ldr	r3, [r7, #8]
 801c53c:	789b      	ldrb	r3, [r3, #2]
 801c53e:	0018      	movs	r0, r3
 801c540:	f000 f8e0 	bl	801c704 <RTC_Bcd2ToByte>
 801c544:	0003      	movs	r3, r0
 801c546:	001a      	movs	r2, r3
 801c548:	68bb      	ldr	r3, [r7, #8]
 801c54a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801c54c:	2300      	movs	r3, #0
}
 801c54e:	0018      	movs	r0, r3
 801c550:	46bd      	mov	sp, r7
 801c552:	b006      	add	sp, #24
 801c554:	bd80      	pop	{r7, pc}
 801c556:	46c0      	nop			@ (mov r8, r8)
 801c558:	00ffff3f 	.word	0x00ffff3f

0801c55c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801c55c:	b580      	push	{r7, lr}
 801c55e:	b084      	sub	sp, #16
 801c560:	af00      	add	r7, sp, #0
 801c562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c564:	2300      	movs	r3, #0
 801c566:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	681b      	ldr	r3, [r3, #0]
 801c56c:	4a0e      	ldr	r2, [pc, #56]	@ (801c5a8 <HAL_RTC_WaitForSynchro+0x4c>)
 801c56e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c570:	f7f8 f980 	bl	8014874 <HAL_GetTick>
 801c574:	0003      	movs	r3, r0
 801c576:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c578:	e00a      	b.n	801c590 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c57a:	f7f8 f97b 	bl	8014874 <HAL_GetTick>
 801c57e:	0002      	movs	r2, r0
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	1ad2      	subs	r2, r2, r3
 801c584:	23fa      	movs	r3, #250	@ 0xfa
 801c586:	009b      	lsls	r3, r3, #2
 801c588:	429a      	cmp	r2, r3
 801c58a:	d901      	bls.n	801c590 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801c58c:	2303      	movs	r3, #3
 801c58e:	e006      	b.n	801c59e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	68db      	ldr	r3, [r3, #12]
 801c596:	2220      	movs	r2, #32
 801c598:	4013      	ands	r3, r2
 801c59a:	d0ee      	beq.n	801c57a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801c59c:	2300      	movs	r3, #0
}
 801c59e:	0018      	movs	r0, r3
 801c5a0:	46bd      	mov	sp, r7
 801c5a2:	b004      	add	sp, #16
 801c5a4:	bd80      	pop	{r7, pc}
 801c5a6:	46c0      	nop			@ (mov r8, r8)
 801c5a8:	0001ff5f 	.word	0x0001ff5f

0801c5ac <HAL_RTC_DST_Add1Hour>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 801c5ac:	b580      	push	{r7, lr}
 801c5ae:	b082      	sub	sp, #8
 801c5b0:	af00      	add	r7, sp, #0
 801c5b2:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	22ca      	movs	r2, #202	@ 0xca
 801c5ba:	625a      	str	r2, [r3, #36]	@ 0x24
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	681b      	ldr	r3, [r3, #0]
 801c5c0:	2253      	movs	r2, #83	@ 0x53
 801c5c2:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	689a      	ldr	r2, [r3, #8]
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	2180      	movs	r1, #128	@ 0x80
 801c5d0:	0249      	lsls	r1, r1, #9
 801c5d2:	430a      	orrs	r2, r1
 801c5d4:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	22ff      	movs	r2, #255	@ 0xff
 801c5dc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801c5de:	46c0      	nop			@ (mov r8, r8)
 801c5e0:	46bd      	mov	sp, r7
 801c5e2:	b002      	add	sp, #8
 801c5e4:	bd80      	pop	{r7, pc}

0801c5e6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801c5e6:	b580      	push	{r7, lr}
 801c5e8:	b084      	sub	sp, #16
 801c5ea:	af00      	add	r7, sp, #0
 801c5ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c5ee:	2300      	movs	r3, #0
 801c5f0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801c5f2:	230f      	movs	r3, #15
 801c5f4:	18fb      	adds	r3, r7, r3
 801c5f6:	2200      	movs	r2, #0
 801c5f8:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	681b      	ldr	r3, [r3, #0]
 801c5fe:	68db      	ldr	r3, [r3, #12]
 801c600:	2240      	movs	r2, #64	@ 0x40
 801c602:	4013      	ands	r3, r2
 801c604:	d12c      	bne.n	801c660 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	68da      	ldr	r2, [r3, #12]
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	681b      	ldr	r3, [r3, #0]
 801c610:	2180      	movs	r1, #128	@ 0x80
 801c612:	430a      	orrs	r2, r1
 801c614:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801c616:	f7f8 f92d 	bl	8014874 <HAL_GetTick>
 801c61a:	0003      	movs	r3, r0
 801c61c:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c61e:	e014      	b.n	801c64a <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c620:	f7f8 f928 	bl	8014874 <HAL_GetTick>
 801c624:	0002      	movs	r2, r0
 801c626:	68bb      	ldr	r3, [r7, #8]
 801c628:	1ad2      	subs	r2, r2, r3
 801c62a:	200f      	movs	r0, #15
 801c62c:	183b      	adds	r3, r7, r0
 801c62e:	1839      	adds	r1, r7, r0
 801c630:	7809      	ldrb	r1, [r1, #0]
 801c632:	7019      	strb	r1, [r3, #0]
 801c634:	23fa      	movs	r3, #250	@ 0xfa
 801c636:	009b      	lsls	r3, r3, #2
 801c638:	429a      	cmp	r2, r3
 801c63a:	d906      	bls.n	801c64a <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	2221      	movs	r2, #33	@ 0x21
 801c640:	2104      	movs	r1, #4
 801c642:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801c644:	183b      	adds	r3, r7, r0
 801c646:	2201      	movs	r2, #1
 801c648:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	68db      	ldr	r3, [r3, #12]
 801c650:	2240      	movs	r2, #64	@ 0x40
 801c652:	4013      	ands	r3, r2
 801c654:	d104      	bne.n	801c660 <RTC_EnterInitMode+0x7a>
 801c656:	230f      	movs	r3, #15
 801c658:	18fb      	adds	r3, r7, r3
 801c65a:	781b      	ldrb	r3, [r3, #0]
 801c65c:	2b01      	cmp	r3, #1
 801c65e:	d1df      	bne.n	801c620 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801c660:	230f      	movs	r3, #15
 801c662:	18fb      	adds	r3, r7, r3
 801c664:	781b      	ldrb	r3, [r3, #0]
}
 801c666:	0018      	movs	r0, r3
 801c668:	46bd      	mov	sp, r7
 801c66a:	b004      	add	sp, #16
 801c66c:	bd80      	pop	{r7, pc}

0801c66e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801c66e:	b590      	push	{r4, r7, lr}
 801c670:	b085      	sub	sp, #20
 801c672:	af00      	add	r7, sp, #0
 801c674:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c676:	240f      	movs	r4, #15
 801c678:	193b      	adds	r3, r7, r4
 801c67a:	2200      	movs	r2, #0
 801c67c:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	68da      	ldr	r2, [r3, #12]
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	2180      	movs	r1, #128	@ 0x80
 801c68a:	438a      	bics	r2, r1
 801c68c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	689b      	ldr	r3, [r3, #8]
 801c694:	2220      	movs	r2, #32
 801c696:	4013      	ands	r3, r2
 801c698:	d10c      	bne.n	801c6b4 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	0018      	movs	r0, r3
 801c69e:	f7ff ff5d 	bl	801c55c <HAL_RTC_WaitForSynchro>
 801c6a2:	1e03      	subs	r3, r0, #0
 801c6a4:	d006      	beq.n	801c6b4 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	2221      	movs	r2, #33	@ 0x21
 801c6aa:	2104      	movs	r1, #4
 801c6ac:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801c6ae:	193b      	adds	r3, r7, r4
 801c6b0:	2201      	movs	r2, #1
 801c6b2:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801c6b4:	230f      	movs	r3, #15
 801c6b6:	18fb      	adds	r3, r7, r3
 801c6b8:	781b      	ldrb	r3, [r3, #0]
}
 801c6ba:	0018      	movs	r0, r3
 801c6bc:	46bd      	mov	sp, r7
 801c6be:	b005      	add	sp, #20
 801c6c0:	bd90      	pop	{r4, r7, pc}

0801c6c2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801c6c2:	b580      	push	{r7, lr}
 801c6c4:	b084      	sub	sp, #16
 801c6c6:	af00      	add	r7, sp, #0
 801c6c8:	0002      	movs	r2, r0
 801c6ca:	1dfb      	adds	r3, r7, #7
 801c6cc:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801c6ce:	2300      	movs	r3, #0
 801c6d0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801c6d2:	e007      	b.n	801c6e4 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	3301      	adds	r3, #1
 801c6d8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801c6da:	1dfb      	adds	r3, r7, #7
 801c6dc:	1dfa      	adds	r2, r7, #7
 801c6de:	7812      	ldrb	r2, [r2, #0]
 801c6e0:	3a0a      	subs	r2, #10
 801c6e2:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801c6e4:	1dfb      	adds	r3, r7, #7
 801c6e6:	781b      	ldrb	r3, [r3, #0]
 801c6e8:	2b09      	cmp	r3, #9
 801c6ea:	d8f3      	bhi.n	801c6d4 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	b2db      	uxtb	r3, r3
 801c6f0:	011b      	lsls	r3, r3, #4
 801c6f2:	b2da      	uxtb	r2, r3
 801c6f4:	1dfb      	adds	r3, r7, #7
 801c6f6:	781b      	ldrb	r3, [r3, #0]
 801c6f8:	4313      	orrs	r3, r2
 801c6fa:	b2db      	uxtb	r3, r3
}
 801c6fc:	0018      	movs	r0, r3
 801c6fe:	46bd      	mov	sp, r7
 801c700:	b004      	add	sp, #16
 801c702:	bd80      	pop	{r7, pc}

0801c704 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801c704:	b580      	push	{r7, lr}
 801c706:	b084      	sub	sp, #16
 801c708:	af00      	add	r7, sp, #0
 801c70a:	0002      	movs	r2, r0
 801c70c:	1dfb      	adds	r3, r7, #7
 801c70e:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801c710:	2300      	movs	r3, #0
 801c712:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801c714:	1dfb      	adds	r3, r7, #7
 801c716:	781b      	ldrb	r3, [r3, #0]
 801c718:	091b      	lsrs	r3, r3, #4
 801c71a:	b2db      	uxtb	r3, r3
 801c71c:	001a      	movs	r2, r3
 801c71e:	0013      	movs	r3, r2
 801c720:	009b      	lsls	r3, r3, #2
 801c722:	189b      	adds	r3, r3, r2
 801c724:	005b      	lsls	r3, r3, #1
 801c726:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801c728:	68fb      	ldr	r3, [r7, #12]
 801c72a:	b2da      	uxtb	r2, r3
 801c72c:	1dfb      	adds	r3, r7, #7
 801c72e:	781b      	ldrb	r3, [r3, #0]
 801c730:	210f      	movs	r1, #15
 801c732:	400b      	ands	r3, r1
 801c734:	b2db      	uxtb	r3, r3
 801c736:	18d3      	adds	r3, r2, r3
 801c738:	b2db      	uxtb	r3, r3
}
 801c73a:	0018      	movs	r0, r3
 801c73c:	46bd      	mov	sp, r7
 801c73e:	b004      	add	sp, #16
 801c740:	bd80      	pop	{r7, pc}
	...

0801c744 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801c744:	b580      	push	{r7, lr}
 801c746:	b086      	sub	sp, #24
 801c748:	af00      	add	r7, sp, #0
 801c74a:	60f8      	str	r0, [r7, #12]
 801c74c:	60b9      	str	r1, [r7, #8]
 801c74e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c750:	4b64      	ldr	r3, [pc, #400]	@ (801c8e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	22fa      	movs	r2, #250	@ 0xfa
 801c756:	01d1      	lsls	r1, r2, #7
 801c758:	0018      	movs	r0, r3
 801c75a:	f7e3 fd23 	bl	80001a4 <__udivsi3>
 801c75e:	0003      	movs	r3, r0
 801c760:	001a      	movs	r2, r3
 801c762:	0013      	movs	r3, r2
 801c764:	015b      	lsls	r3, r3, #5
 801c766:	1a9b      	subs	r3, r3, r2
 801c768:	009b      	lsls	r3, r3, #2
 801c76a:	189b      	adds	r3, r3, r2
 801c76c:	00db      	lsls	r3, r3, #3
 801c76e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	2220      	movs	r2, #32
 801c774:	5c9b      	ldrb	r3, [r3, r2]
 801c776:	2b01      	cmp	r3, #1
 801c778:	d101      	bne.n	801c77e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801c77a:	2302      	movs	r3, #2
 801c77c:	e0ad      	b.n	801c8da <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	2220      	movs	r2, #32
 801c782:	2101      	movs	r1, #1
 801c784:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	2221      	movs	r2, #33	@ 0x21
 801c78a:	2102      	movs	r1, #2
 801c78c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	22ca      	movs	r2, #202	@ 0xca
 801c794:	625a      	str	r2, [r3, #36]	@ 0x24
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	2253      	movs	r2, #83	@ 0x53
 801c79c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	681b      	ldr	r3, [r3, #0]
 801c7a2:	689a      	ldr	r2, [r3, #8]
 801c7a4:	2380      	movs	r3, #128	@ 0x80
 801c7a6:	00db      	lsls	r3, r3, #3
 801c7a8:	4013      	ands	r3, r2
 801c7aa:	d019      	beq.n	801c7e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801c7ac:	697b      	ldr	r3, [r7, #20]
 801c7ae:	3b01      	subs	r3, #1
 801c7b0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801c7b2:	697b      	ldr	r3, [r7, #20]
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d10d      	bne.n	801c7d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	22ff      	movs	r2, #255	@ 0xff
 801c7be:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	2221      	movs	r2, #33	@ 0x21
 801c7c4:	2103      	movs	r1, #3
 801c7c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	2220      	movs	r2, #32
 801c7cc:	2100      	movs	r1, #0
 801c7ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801c7d0:	2303      	movs	r3, #3
 801c7d2:	e082      	b.n	801c8da <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	68db      	ldr	r3, [r3, #12]
 801c7da:	2204      	movs	r2, #4
 801c7dc:	4013      	ands	r3, r2
 801c7de:	d1e5      	bne.n	801c7ac <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	681b      	ldr	r3, [r3, #0]
 801c7e4:	689a      	ldr	r2, [r3, #8]
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	493f      	ldr	r1, [pc, #252]	@ (801c8e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801c7ec:	400a      	ands	r2, r1
 801c7ee:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	681b      	ldr	r3, [r3, #0]
 801c7f4:	68db      	ldr	r3, [r3, #12]
 801c7f6:	22ff      	movs	r2, #255	@ 0xff
 801c7f8:	401a      	ands	r2, r3
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	493b      	ldr	r1, [pc, #236]	@ (801c8ec <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801c800:	430a      	orrs	r2, r1
 801c802:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c804:	4b37      	ldr	r3, [pc, #220]	@ (801c8e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	22fa      	movs	r2, #250	@ 0xfa
 801c80a:	01d1      	lsls	r1, r2, #7
 801c80c:	0018      	movs	r0, r3
 801c80e:	f7e3 fcc9 	bl	80001a4 <__udivsi3>
 801c812:	0003      	movs	r3, r0
 801c814:	001a      	movs	r2, r3
 801c816:	0013      	movs	r3, r2
 801c818:	015b      	lsls	r3, r3, #5
 801c81a:	1a9b      	subs	r3, r3, r2
 801c81c:	009b      	lsls	r3, r3, #2
 801c81e:	189b      	adds	r3, r3, r2
 801c820:	00db      	lsls	r3, r3, #3
 801c822:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801c824:	697b      	ldr	r3, [r7, #20]
 801c826:	3b01      	subs	r3, #1
 801c828:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801c82a:	697b      	ldr	r3, [r7, #20]
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d10d      	bne.n	801c84c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c830:	68fb      	ldr	r3, [r7, #12]
 801c832:	681b      	ldr	r3, [r3, #0]
 801c834:	22ff      	movs	r2, #255	@ 0xff
 801c836:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c838:	68fb      	ldr	r3, [r7, #12]
 801c83a:	2221      	movs	r2, #33	@ 0x21
 801c83c:	2103      	movs	r1, #3
 801c83e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	2220      	movs	r2, #32
 801c844:	2100      	movs	r1, #0
 801c846:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801c848:	2303      	movs	r3, #3
 801c84a:	e046      	b.n	801c8da <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801c84c:	68fb      	ldr	r3, [r7, #12]
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	68db      	ldr	r3, [r3, #12]
 801c852:	2204      	movs	r2, #4
 801c854:	4013      	ands	r3, r2
 801c856:	d0e5      	beq.n	801c824 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	689a      	ldr	r2, [r3, #8]
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	2107      	movs	r1, #7
 801c864:	438a      	bics	r2, r1
 801c866:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	681b      	ldr	r3, [r3, #0]
 801c86c:	6899      	ldr	r1, [r3, #8]
 801c86e:	68fb      	ldr	r3, [r7, #12]
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	687a      	ldr	r2, [r7, #4]
 801c874:	430a      	orrs	r2, r1
 801c876:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	68ba      	ldr	r2, [r7, #8]
 801c87e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801c880:	4b1b      	ldr	r3, [pc, #108]	@ (801c8f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c882:	681a      	ldr	r2, [r3, #0]
 801c884:	4b1a      	ldr	r3, [pc, #104]	@ (801c8f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c886:	2180      	movs	r1, #128	@ 0x80
 801c888:	0349      	lsls	r1, r1, #13
 801c88a:	430a      	orrs	r2, r1
 801c88c:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801c88e:	4b18      	ldr	r3, [pc, #96]	@ (801c8f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c890:	689a      	ldr	r2, [r3, #8]
 801c892:	4b17      	ldr	r3, [pc, #92]	@ (801c8f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c894:	2180      	movs	r1, #128	@ 0x80
 801c896:	0349      	lsls	r1, r1, #13
 801c898:	430a      	orrs	r2, r1
 801c89a:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	689a      	ldr	r2, [r3, #8]
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	2180      	movs	r1, #128	@ 0x80
 801c8a8:	01c9      	lsls	r1, r1, #7
 801c8aa:	430a      	orrs	r2, r1
 801c8ac:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	689a      	ldr	r2, [r3, #8]
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	681b      	ldr	r3, [r3, #0]
 801c8b8:	2180      	movs	r1, #128	@ 0x80
 801c8ba:	00c9      	lsls	r1, r1, #3
 801c8bc:	430a      	orrs	r2, r1
 801c8be:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	22ff      	movs	r2, #255	@ 0xff
 801c8c6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801c8c8:	68fb      	ldr	r3, [r7, #12]
 801c8ca:	2221      	movs	r2, #33	@ 0x21
 801c8cc:	2101      	movs	r1, #1
 801c8ce:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	2220      	movs	r2, #32
 801c8d4:	2100      	movs	r1, #0
 801c8d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c8d8:	2300      	movs	r3, #0
}
 801c8da:	0018      	movs	r0, r3
 801c8dc:	46bd      	mov	sp, r7
 801c8de:	b006      	add	sp, #24
 801c8e0:	bd80      	pop	{r7, pc}
 801c8e2:	46c0      	nop			@ (mov r8, r8)
 801c8e4:	200000ec 	.word	0x200000ec
 801c8e8:	fffffbff 	.word	0xfffffbff
 801c8ec:	fffffb7f 	.word	0xfffffb7f
 801c8f0:	40010400 	.word	0x40010400

0801c8f4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801c8f4:	b580      	push	{r7, lr}
 801c8f6:	b084      	sub	sp, #16
 801c8f8:	af00      	add	r7, sp, #0
 801c8fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c8fc:	2300      	movs	r3, #0
 801c8fe:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	2220      	movs	r2, #32
 801c904:	5c9b      	ldrb	r3, [r3, r2]
 801c906:	2b01      	cmp	r3, #1
 801c908:	d101      	bne.n	801c90e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801c90a:	2302      	movs	r3, #2
 801c90c:	e04e      	b.n	801c9ac <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	2220      	movs	r2, #32
 801c912:	2101      	movs	r1, #1
 801c914:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	2221      	movs	r2, #33	@ 0x21
 801c91a:	2102      	movs	r1, #2
 801c91c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	22ca      	movs	r2, #202	@ 0xca
 801c924:	625a      	str	r2, [r3, #36]	@ 0x24
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	681b      	ldr	r3, [r3, #0]
 801c92a:	2253      	movs	r2, #83	@ 0x53
 801c92c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	681b      	ldr	r3, [r3, #0]
 801c932:	689a      	ldr	r2, [r3, #8]
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	491e      	ldr	r1, [pc, #120]	@ (801c9b4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801c93a:	400a      	ands	r2, r1
 801c93c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	689a      	ldr	r2, [r3, #8]
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	491b      	ldr	r1, [pc, #108]	@ (801c9b8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801c94a:	400a      	ands	r2, r1
 801c94c:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c94e:	f7f7 ff91 	bl	8014874 <HAL_GetTick>
 801c952:	0003      	movs	r3, r0
 801c954:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801c956:	e016      	b.n	801c986 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c958:	f7f7 ff8c 	bl	8014874 <HAL_GetTick>
 801c95c:	0002      	movs	r2, r0
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	1ad2      	subs	r2, r2, r3
 801c962:	23fa      	movs	r3, #250	@ 0xfa
 801c964:	009b      	lsls	r3, r3, #2
 801c966:	429a      	cmp	r2, r3
 801c968:	d90d      	bls.n	801c986 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c96a:	687b      	ldr	r3, [r7, #4]
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	22ff      	movs	r2, #255	@ 0xff
 801c970:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	2221      	movs	r2, #33	@ 0x21
 801c976:	2103      	movs	r1, #3
 801c978:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	2220      	movs	r2, #32
 801c97e:	2100      	movs	r1, #0
 801c980:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801c982:	2303      	movs	r3, #3
 801c984:	e012      	b.n	801c9ac <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	68db      	ldr	r3, [r3, #12]
 801c98c:	2204      	movs	r2, #4
 801c98e:	4013      	ands	r3, r2
 801c990:	d0e2      	beq.n	801c958 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	22ff      	movs	r2, #255	@ 0xff
 801c998:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	2221      	movs	r2, #33	@ 0x21
 801c99e:	2101      	movs	r1, #1
 801c9a0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	2220      	movs	r2, #32
 801c9a6:	2100      	movs	r1, #0
 801c9a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c9aa:	2300      	movs	r3, #0
}
 801c9ac:	0018      	movs	r0, r3
 801c9ae:	46bd      	mov	sp, r7
 801c9b0:	b004      	add	sp, #16
 801c9b2:	bd80      	pop	{r7, pc}
 801c9b4:	fffffbff 	.word	0xfffffbff
 801c9b8:	ffffbfff 	.word	0xffffbfff

0801c9bc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801c9bc:	b580      	push	{r7, lr}
 801c9be:	b082      	sub	sp, #8
 801c9c0:	af00      	add	r7, sp, #0
 801c9c2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801c9c4:	4b13      	ldr	r3, [pc, #76]	@ (801ca14 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801c9c6:	2280      	movs	r2, #128	@ 0x80
 801c9c8:	0352      	lsls	r2, r2, #13
 801c9ca:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	681b      	ldr	r3, [r3, #0]
 801c9d0:	689a      	ldr	r2, [r3, #8]
 801c9d2:	2380      	movs	r3, #128	@ 0x80
 801c9d4:	01db      	lsls	r3, r3, #7
 801c9d6:	4013      	ands	r3, r2
 801c9d8:	d014      	beq.n	801ca04 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	68da      	ldr	r2, [r3, #12]
 801c9e0:	2380      	movs	r3, #128	@ 0x80
 801c9e2:	00db      	lsls	r3, r3, #3
 801c9e4:	4013      	ands	r3, r2
 801c9e6:	d00d      	beq.n	801ca04 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	68db      	ldr	r3, [r3, #12]
 801c9ee:	22ff      	movs	r2, #255	@ 0xff
 801c9f0:	401a      	ands	r2, r3
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	681b      	ldr	r3, [r3, #0]
 801c9f6:	4908      	ldr	r1, [pc, #32]	@ (801ca18 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801c9f8:	430a      	orrs	r2, r1
 801c9fa:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	0018      	movs	r0, r3
 801ca00:	f000 f80c 	bl	801ca1c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	2221      	movs	r2, #33	@ 0x21
 801ca08:	2101      	movs	r1, #1
 801ca0a:	5499      	strb	r1, [r3, r2]
}
 801ca0c:	46c0      	nop			@ (mov r8, r8)
 801ca0e:	46bd      	mov	sp, r7
 801ca10:	b002      	add	sp, #8
 801ca12:	bd80      	pop	{r7, pc}
 801ca14:	40010400 	.word	0x40010400
 801ca18:	fffffb7f 	.word	0xfffffb7f

0801ca1c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801ca1c:	b580      	push	{r7, lr}
 801ca1e:	b082      	sub	sp, #8
 801ca20:	af00      	add	r7, sp, #0
 801ca22:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801ca24:	46c0      	nop			@ (mov r8, r8)
 801ca26:	46bd      	mov	sp, r7
 801ca28:	b002      	add	sp, #8
 801ca2a:	bd80      	pop	{r7, pc}

0801ca2c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801ca2c:	b580      	push	{r7, lr}
 801ca2e:	b086      	sub	sp, #24
 801ca30:	af00      	add	r7, sp, #0
 801ca32:	60f8      	str	r0, [r7, #12]
 801ca34:	60b9      	str	r1, [r7, #8]
 801ca36:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801ca38:	2300      	movs	r3, #0
 801ca3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801ca3c:	68fb      	ldr	r3, [r7, #12]
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	3350      	adds	r3, #80	@ 0x50
 801ca42:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801ca44:	68bb      	ldr	r3, [r7, #8]
 801ca46:	009b      	lsls	r3, r3, #2
 801ca48:	697a      	ldr	r2, [r7, #20]
 801ca4a:	18d3      	adds	r3, r2, r3
 801ca4c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801ca4e:	697b      	ldr	r3, [r7, #20]
 801ca50:	687a      	ldr	r2, [r7, #4]
 801ca52:	601a      	str	r2, [r3, #0]
}
 801ca54:	46c0      	nop			@ (mov r8, r8)
 801ca56:	46bd      	mov	sp, r7
 801ca58:	b006      	add	sp, #24
 801ca5a:	bd80      	pop	{r7, pc}

0801ca5c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801ca5c:	b580      	push	{r7, lr}
 801ca5e:	b084      	sub	sp, #16
 801ca60:	af00      	add	r7, sp, #0
 801ca62:	6078      	str	r0, [r7, #4]
 801ca64:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801ca66:	2300      	movs	r3, #0
 801ca68:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	681b      	ldr	r3, [r3, #0]
 801ca6e:	3350      	adds	r3, #80	@ 0x50
 801ca70:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801ca72:	683b      	ldr	r3, [r7, #0]
 801ca74:	009b      	lsls	r3, r3, #2
 801ca76:	68fa      	ldr	r2, [r7, #12]
 801ca78:	18d3      	adds	r3, r2, r3
 801ca7a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801ca7c:	68fb      	ldr	r3, [r7, #12]
 801ca7e:	681b      	ldr	r3, [r3, #0]
}
 801ca80:	0018      	movs	r0, r3
 801ca82:	46bd      	mov	sp, r7
 801ca84:	b004      	add	sp, #16
 801ca86:	bd80      	pop	{r7, pc}

0801ca88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ca88:	b580      	push	{r7, lr}
 801ca8a:	b082      	sub	sp, #8
 801ca8c:	af00      	add	r7, sp, #0
 801ca8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d101      	bne.n	801ca9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ca96:	2301      	movs	r3, #1
 801ca98:	e032      	b.n	801cb00 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	2239      	movs	r2, #57	@ 0x39
 801ca9e:	5c9b      	ldrb	r3, [r3, r2]
 801caa0:	b2db      	uxtb	r3, r3
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d107      	bne.n	801cab6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	2238      	movs	r2, #56	@ 0x38
 801caaa:	2100      	movs	r1, #0
 801caac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	0018      	movs	r0, r3
 801cab2:	f7f6 fec3 	bl	801383c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	2239      	movs	r2, #57	@ 0x39
 801caba:	2102      	movs	r1, #2
 801cabc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	681a      	ldr	r2, [r3, #0]
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	3304      	adds	r3, #4
 801cac6:	0019      	movs	r1, r3
 801cac8:	0010      	movs	r0, r2
 801caca:	f000 fa1d 	bl	801cf08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	223e      	movs	r2, #62	@ 0x3e
 801cad2:	2101      	movs	r1, #1
 801cad4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	223a      	movs	r2, #58	@ 0x3a
 801cada:	2101      	movs	r1, #1
 801cadc:	5499      	strb	r1, [r3, r2]
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	223b      	movs	r2, #59	@ 0x3b
 801cae2:	2101      	movs	r1, #1
 801cae4:	5499      	strb	r1, [r3, r2]
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	223c      	movs	r2, #60	@ 0x3c
 801caea:	2101      	movs	r1, #1
 801caec:	5499      	strb	r1, [r3, r2]
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	223d      	movs	r2, #61	@ 0x3d
 801caf2:	2101      	movs	r1, #1
 801caf4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	2239      	movs	r2, #57	@ 0x39
 801cafa:	2101      	movs	r1, #1
 801cafc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cafe:	2300      	movs	r3, #0
}
 801cb00:	0018      	movs	r0, r3
 801cb02:	46bd      	mov	sp, r7
 801cb04:	b002      	add	sp, #8
 801cb06:	bd80      	pop	{r7, pc}

0801cb08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801cb08:	b580      	push	{r7, lr}
 801cb0a:	b084      	sub	sp, #16
 801cb0c:	af00      	add	r7, sp, #0
 801cb0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	2239      	movs	r2, #57	@ 0x39
 801cb14:	5c9b      	ldrb	r3, [r3, r2]
 801cb16:	b2db      	uxtb	r3, r3
 801cb18:	2b01      	cmp	r3, #1
 801cb1a:	d001      	beq.n	801cb20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801cb1c:	2301      	movs	r3, #1
 801cb1e:	e033      	b.n	801cb88 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	2239      	movs	r2, #57	@ 0x39
 801cb24:	2102      	movs	r1, #2
 801cb26:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	681a      	ldr	r2, [r3, #0]
 801cb2c:	2380      	movs	r3, #128	@ 0x80
 801cb2e:	05db      	lsls	r3, r3, #23
 801cb30:	429a      	cmp	r2, r3
 801cb32:	d00e      	beq.n	801cb52 <HAL_TIM_Base_Start+0x4a>
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	681b      	ldr	r3, [r3, #0]
 801cb38:	4a15      	ldr	r2, [pc, #84]	@ (801cb90 <HAL_TIM_Base_Start+0x88>)
 801cb3a:	4293      	cmp	r3, r2
 801cb3c:	d009      	beq.n	801cb52 <HAL_TIM_Base_Start+0x4a>
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	4a14      	ldr	r2, [pc, #80]	@ (801cb94 <HAL_TIM_Base_Start+0x8c>)
 801cb44:	4293      	cmp	r3, r2
 801cb46:	d004      	beq.n	801cb52 <HAL_TIM_Base_Start+0x4a>
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	4a12      	ldr	r2, [pc, #72]	@ (801cb98 <HAL_TIM_Base_Start+0x90>)
 801cb4e:	4293      	cmp	r3, r2
 801cb50:	d111      	bne.n	801cb76 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	681b      	ldr	r3, [r3, #0]
 801cb56:	689b      	ldr	r3, [r3, #8]
 801cb58:	2207      	movs	r2, #7
 801cb5a:	4013      	ands	r3, r2
 801cb5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cb5e:	68fb      	ldr	r3, [r7, #12]
 801cb60:	2b06      	cmp	r3, #6
 801cb62:	d010      	beq.n	801cb86 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	681a      	ldr	r2, [r3, #0]
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	2101      	movs	r1, #1
 801cb70:	430a      	orrs	r2, r1
 801cb72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cb74:	e007      	b.n	801cb86 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	681a      	ldr	r2, [r3, #0]
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	681b      	ldr	r3, [r3, #0]
 801cb80:	2101      	movs	r1, #1
 801cb82:	430a      	orrs	r2, r1
 801cb84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cb86:	2300      	movs	r3, #0
}
 801cb88:	0018      	movs	r0, r3
 801cb8a:	46bd      	mov	sp, r7
 801cb8c:	b004      	add	sp, #16
 801cb8e:	bd80      	pop	{r7, pc}
 801cb90:	40000400 	.word	0x40000400
 801cb94:	40010800 	.word	0x40010800
 801cb98:	40011400 	.word	0x40011400

0801cb9c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801cb9c:	b580      	push	{r7, lr}
 801cb9e:	b082      	sub	sp, #8
 801cba0:	af00      	add	r7, sp, #0
 801cba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	6a1b      	ldr	r3, [r3, #32]
 801cbaa:	4a0a      	ldr	r2, [pc, #40]	@ (801cbd4 <HAL_TIM_Base_Stop+0x38>)
 801cbac:	4013      	ands	r3, r2
 801cbae:	d107      	bne.n	801cbc0 <HAL_TIM_Base_Stop+0x24>
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	681a      	ldr	r2, [r3, #0]
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	681b      	ldr	r3, [r3, #0]
 801cbba:	2101      	movs	r1, #1
 801cbbc:	438a      	bics	r2, r1
 801cbbe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	2239      	movs	r2, #57	@ 0x39
 801cbc4:	2101      	movs	r1, #1
 801cbc6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801cbc8:	2300      	movs	r3, #0
}
 801cbca:	0018      	movs	r0, r3
 801cbcc:	46bd      	mov	sp, r7
 801cbce:	b002      	add	sp, #8
 801cbd0:	bd80      	pop	{r7, pc}
 801cbd2:	46c0      	nop			@ (mov r8, r8)
 801cbd4:	00001111 	.word	0x00001111

0801cbd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cbd8:	b580      	push	{r7, lr}
 801cbda:	b082      	sub	sp, #8
 801cbdc:	af00      	add	r7, sp, #0
 801cbde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cbe0:	687b      	ldr	r3, [r7, #4]
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d101      	bne.n	801cbea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801cbe6:	2301      	movs	r3, #1
 801cbe8:	e032      	b.n	801cc50 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	2239      	movs	r2, #57	@ 0x39
 801cbee:	5c9b      	ldrb	r3, [r3, r2]
 801cbf0:	b2db      	uxtb	r3, r3
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d107      	bne.n	801cc06 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	2238      	movs	r2, #56	@ 0x38
 801cbfa:	2100      	movs	r1, #0
 801cbfc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	0018      	movs	r0, r3
 801cc02:	f7f6 fdf7 	bl	80137f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	2239      	movs	r2, #57	@ 0x39
 801cc0a:	2102      	movs	r1, #2
 801cc0c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	681a      	ldr	r2, [r3, #0]
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	3304      	adds	r3, #4
 801cc16:	0019      	movs	r1, r3
 801cc18:	0010      	movs	r0, r2
 801cc1a:	f000 f975 	bl	801cf08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cc1e:	687b      	ldr	r3, [r7, #4]
 801cc20:	223e      	movs	r2, #62	@ 0x3e
 801cc22:	2101      	movs	r1, #1
 801cc24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	223a      	movs	r2, #58	@ 0x3a
 801cc2a:	2101      	movs	r1, #1
 801cc2c:	5499      	strb	r1, [r3, r2]
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	223b      	movs	r2, #59	@ 0x3b
 801cc32:	2101      	movs	r1, #1
 801cc34:	5499      	strb	r1, [r3, r2]
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	223c      	movs	r2, #60	@ 0x3c
 801cc3a:	2101      	movs	r1, #1
 801cc3c:	5499      	strb	r1, [r3, r2]
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	223d      	movs	r2, #61	@ 0x3d
 801cc42:	2101      	movs	r1, #1
 801cc44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	2239      	movs	r2, #57	@ 0x39
 801cc4a:	2101      	movs	r1, #1
 801cc4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cc4e:	2300      	movs	r3, #0
}
 801cc50:	0018      	movs	r0, r3
 801cc52:	46bd      	mov	sp, r7
 801cc54:	b002      	add	sp, #8
 801cc56:	bd80      	pop	{r7, pc}

0801cc58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801cc58:	b580      	push	{r7, lr}
 801cc5a:	b084      	sub	sp, #16
 801cc5c:	af00      	add	r7, sp, #0
 801cc5e:	6078      	str	r0, [r7, #4]
 801cc60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801cc62:	683b      	ldr	r3, [r7, #0]
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	d108      	bne.n	801cc7a <HAL_TIM_PWM_Start+0x22>
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	223a      	movs	r2, #58	@ 0x3a
 801cc6c:	5c9b      	ldrb	r3, [r3, r2]
 801cc6e:	b2db      	uxtb	r3, r3
 801cc70:	3b01      	subs	r3, #1
 801cc72:	1e5a      	subs	r2, r3, #1
 801cc74:	4193      	sbcs	r3, r2
 801cc76:	b2db      	uxtb	r3, r3
 801cc78:	e01f      	b.n	801ccba <HAL_TIM_PWM_Start+0x62>
 801cc7a:	683b      	ldr	r3, [r7, #0]
 801cc7c:	2b04      	cmp	r3, #4
 801cc7e:	d108      	bne.n	801cc92 <HAL_TIM_PWM_Start+0x3a>
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	223b      	movs	r2, #59	@ 0x3b
 801cc84:	5c9b      	ldrb	r3, [r3, r2]
 801cc86:	b2db      	uxtb	r3, r3
 801cc88:	3b01      	subs	r3, #1
 801cc8a:	1e5a      	subs	r2, r3, #1
 801cc8c:	4193      	sbcs	r3, r2
 801cc8e:	b2db      	uxtb	r3, r3
 801cc90:	e013      	b.n	801ccba <HAL_TIM_PWM_Start+0x62>
 801cc92:	683b      	ldr	r3, [r7, #0]
 801cc94:	2b08      	cmp	r3, #8
 801cc96:	d108      	bne.n	801ccaa <HAL_TIM_PWM_Start+0x52>
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	223c      	movs	r2, #60	@ 0x3c
 801cc9c:	5c9b      	ldrb	r3, [r3, r2]
 801cc9e:	b2db      	uxtb	r3, r3
 801cca0:	3b01      	subs	r3, #1
 801cca2:	1e5a      	subs	r2, r3, #1
 801cca4:	4193      	sbcs	r3, r2
 801cca6:	b2db      	uxtb	r3, r3
 801cca8:	e007      	b.n	801ccba <HAL_TIM_PWM_Start+0x62>
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	223d      	movs	r2, #61	@ 0x3d
 801ccae:	5c9b      	ldrb	r3, [r3, r2]
 801ccb0:	b2db      	uxtb	r3, r3
 801ccb2:	3b01      	subs	r3, #1
 801ccb4:	1e5a      	subs	r2, r3, #1
 801ccb6:	4193      	sbcs	r3, r2
 801ccb8:	b2db      	uxtb	r3, r3
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d001      	beq.n	801ccc2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801ccbe:	2301      	movs	r3, #1
 801ccc0:	e052      	b.n	801cd68 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ccc2:	683b      	ldr	r3, [r7, #0]
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d104      	bne.n	801ccd2 <HAL_TIM_PWM_Start+0x7a>
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	223a      	movs	r2, #58	@ 0x3a
 801cccc:	2102      	movs	r1, #2
 801ccce:	5499      	strb	r1, [r3, r2]
 801ccd0:	e013      	b.n	801ccfa <HAL_TIM_PWM_Start+0xa2>
 801ccd2:	683b      	ldr	r3, [r7, #0]
 801ccd4:	2b04      	cmp	r3, #4
 801ccd6:	d104      	bne.n	801cce2 <HAL_TIM_PWM_Start+0x8a>
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	223b      	movs	r2, #59	@ 0x3b
 801ccdc:	2102      	movs	r1, #2
 801ccde:	5499      	strb	r1, [r3, r2]
 801cce0:	e00b      	b.n	801ccfa <HAL_TIM_PWM_Start+0xa2>
 801cce2:	683b      	ldr	r3, [r7, #0]
 801cce4:	2b08      	cmp	r3, #8
 801cce6:	d104      	bne.n	801ccf2 <HAL_TIM_PWM_Start+0x9a>
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	223c      	movs	r2, #60	@ 0x3c
 801ccec:	2102      	movs	r1, #2
 801ccee:	5499      	strb	r1, [r3, r2]
 801ccf0:	e003      	b.n	801ccfa <HAL_TIM_PWM_Start+0xa2>
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	223d      	movs	r2, #61	@ 0x3d
 801ccf6:	2102      	movs	r1, #2
 801ccf8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	6839      	ldr	r1, [r7, #0]
 801cd00:	2201      	movs	r2, #1
 801cd02:	0018      	movs	r0, r3
 801cd04:	f000 fa62 	bl	801d1cc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	681a      	ldr	r2, [r3, #0]
 801cd0c:	2380      	movs	r3, #128	@ 0x80
 801cd0e:	05db      	lsls	r3, r3, #23
 801cd10:	429a      	cmp	r2, r3
 801cd12:	d00e      	beq.n	801cd32 <HAL_TIM_PWM_Start+0xda>
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	681b      	ldr	r3, [r3, #0]
 801cd18:	4a15      	ldr	r2, [pc, #84]	@ (801cd70 <HAL_TIM_PWM_Start+0x118>)
 801cd1a:	4293      	cmp	r3, r2
 801cd1c:	d009      	beq.n	801cd32 <HAL_TIM_PWM_Start+0xda>
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	681b      	ldr	r3, [r3, #0]
 801cd22:	4a14      	ldr	r2, [pc, #80]	@ (801cd74 <HAL_TIM_PWM_Start+0x11c>)
 801cd24:	4293      	cmp	r3, r2
 801cd26:	d004      	beq.n	801cd32 <HAL_TIM_PWM_Start+0xda>
 801cd28:	687b      	ldr	r3, [r7, #4]
 801cd2a:	681b      	ldr	r3, [r3, #0]
 801cd2c:	4a12      	ldr	r2, [pc, #72]	@ (801cd78 <HAL_TIM_PWM_Start+0x120>)
 801cd2e:	4293      	cmp	r3, r2
 801cd30:	d111      	bne.n	801cd56 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	689b      	ldr	r3, [r3, #8]
 801cd38:	2207      	movs	r2, #7
 801cd3a:	4013      	ands	r3, r2
 801cd3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cd3e:	68fb      	ldr	r3, [r7, #12]
 801cd40:	2b06      	cmp	r3, #6
 801cd42:	d010      	beq.n	801cd66 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	681b      	ldr	r3, [r3, #0]
 801cd48:	681a      	ldr	r2, [r3, #0]
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	2101      	movs	r1, #1
 801cd50:	430a      	orrs	r2, r1
 801cd52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cd54:	e007      	b.n	801cd66 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	681b      	ldr	r3, [r3, #0]
 801cd5a:	681a      	ldr	r2, [r3, #0]
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	681b      	ldr	r3, [r3, #0]
 801cd60:	2101      	movs	r1, #1
 801cd62:	430a      	orrs	r2, r1
 801cd64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cd66:	2300      	movs	r3, #0
}
 801cd68:	0018      	movs	r0, r3
 801cd6a:	46bd      	mov	sp, r7
 801cd6c:	b004      	add	sp, #16
 801cd6e:	bd80      	pop	{r7, pc}
 801cd70:	40000400 	.word	0x40000400
 801cd74:	40010800 	.word	0x40010800
 801cd78:	40011400 	.word	0x40011400

0801cd7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801cd7c:	b580      	push	{r7, lr}
 801cd7e:	b086      	sub	sp, #24
 801cd80:	af00      	add	r7, sp, #0
 801cd82:	60f8      	str	r0, [r7, #12]
 801cd84:	60b9      	str	r1, [r7, #8]
 801cd86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801cd88:	2317      	movs	r3, #23
 801cd8a:	18fb      	adds	r3, r7, r3
 801cd8c:	2200      	movs	r2, #0
 801cd8e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	2238      	movs	r2, #56	@ 0x38
 801cd94:	5c9b      	ldrb	r3, [r3, r2]
 801cd96:	2b01      	cmp	r3, #1
 801cd98:	d101      	bne.n	801cd9e <HAL_TIM_PWM_ConfigChannel+0x22>
 801cd9a:	2302      	movs	r3, #2
 801cd9c:	e0ad      	b.n	801cefa <HAL_TIM_PWM_ConfigChannel+0x17e>
 801cd9e:	68fb      	ldr	r3, [r7, #12]
 801cda0:	2238      	movs	r2, #56	@ 0x38
 801cda2:	2101      	movs	r1, #1
 801cda4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801cda6:	687b      	ldr	r3, [r7, #4]
 801cda8:	2b0c      	cmp	r3, #12
 801cdaa:	d100      	bne.n	801cdae <HAL_TIM_PWM_ConfigChannel+0x32>
 801cdac:	e076      	b.n	801ce9c <HAL_TIM_PWM_ConfigChannel+0x120>
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	2b0c      	cmp	r3, #12
 801cdb2:	d900      	bls.n	801cdb6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 801cdb4:	e095      	b.n	801cee2 <HAL_TIM_PWM_ConfigChannel+0x166>
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	2b08      	cmp	r3, #8
 801cdba:	d04e      	beq.n	801ce5a <HAL_TIM_PWM_ConfigChannel+0xde>
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	2b08      	cmp	r3, #8
 801cdc0:	d900      	bls.n	801cdc4 <HAL_TIM_PWM_ConfigChannel+0x48>
 801cdc2:	e08e      	b.n	801cee2 <HAL_TIM_PWM_ConfigChannel+0x166>
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d003      	beq.n	801cdd2 <HAL_TIM_PWM_ConfigChannel+0x56>
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	2b04      	cmp	r3, #4
 801cdce:	d021      	beq.n	801ce14 <HAL_TIM_PWM_ConfigChannel+0x98>
 801cdd0:	e087      	b.n	801cee2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801cdd2:	68fb      	ldr	r3, [r7, #12]
 801cdd4:	681b      	ldr	r3, [r3, #0]
 801cdd6:	68ba      	ldr	r2, [r7, #8]
 801cdd8:	0011      	movs	r1, r2
 801cdda:	0018      	movs	r0, r3
 801cddc:	f000 f8f2 	bl	801cfc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801cde0:	68fb      	ldr	r3, [r7, #12]
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	699a      	ldr	r2, [r3, #24]
 801cde6:	68fb      	ldr	r3, [r7, #12]
 801cde8:	681b      	ldr	r3, [r3, #0]
 801cdea:	2108      	movs	r1, #8
 801cdec:	430a      	orrs	r2, r1
 801cdee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	699a      	ldr	r2, [r3, #24]
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	2104      	movs	r1, #4
 801cdfc:	438a      	bics	r2, r1
 801cdfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801ce00:	68fb      	ldr	r3, [r7, #12]
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	6999      	ldr	r1, [r3, #24]
 801ce06:	68bb      	ldr	r3, [r7, #8]
 801ce08:	68da      	ldr	r2, [r3, #12]
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	430a      	orrs	r2, r1
 801ce10:	619a      	str	r2, [r3, #24]
      break;
 801ce12:	e06b      	b.n	801ceec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	68ba      	ldr	r2, [r7, #8]
 801ce1a:	0011      	movs	r1, r2
 801ce1c:	0018      	movs	r0, r3
 801ce1e:	f000 f90d 	bl	801d03c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801ce22:	68fb      	ldr	r3, [r7, #12]
 801ce24:	681b      	ldr	r3, [r3, #0]
 801ce26:	699a      	ldr	r2, [r3, #24]
 801ce28:	68fb      	ldr	r3, [r7, #12]
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	2180      	movs	r1, #128	@ 0x80
 801ce2e:	0109      	lsls	r1, r1, #4
 801ce30:	430a      	orrs	r2, r1
 801ce32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801ce34:	68fb      	ldr	r3, [r7, #12]
 801ce36:	681b      	ldr	r3, [r3, #0]
 801ce38:	699a      	ldr	r2, [r3, #24]
 801ce3a:	68fb      	ldr	r3, [r7, #12]
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	4931      	ldr	r1, [pc, #196]	@ (801cf04 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801ce40:	400a      	ands	r2, r1
 801ce42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801ce44:	68fb      	ldr	r3, [r7, #12]
 801ce46:	681b      	ldr	r3, [r3, #0]
 801ce48:	6999      	ldr	r1, [r3, #24]
 801ce4a:	68bb      	ldr	r3, [r7, #8]
 801ce4c:	68db      	ldr	r3, [r3, #12]
 801ce4e:	021a      	lsls	r2, r3, #8
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	681b      	ldr	r3, [r3, #0]
 801ce54:	430a      	orrs	r2, r1
 801ce56:	619a      	str	r2, [r3, #24]
      break;
 801ce58:	e048      	b.n	801ceec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801ce5a:	68fb      	ldr	r3, [r7, #12]
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	68ba      	ldr	r2, [r7, #8]
 801ce60:	0011      	movs	r1, r2
 801ce62:	0018      	movs	r0, r3
 801ce64:	f000 f92c 	bl	801d0c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801ce68:	68fb      	ldr	r3, [r7, #12]
 801ce6a:	681b      	ldr	r3, [r3, #0]
 801ce6c:	69da      	ldr	r2, [r3, #28]
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	2108      	movs	r1, #8
 801ce74:	430a      	orrs	r2, r1
 801ce76:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801ce78:	68fb      	ldr	r3, [r7, #12]
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	69da      	ldr	r2, [r3, #28]
 801ce7e:	68fb      	ldr	r3, [r7, #12]
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	2104      	movs	r1, #4
 801ce84:	438a      	bics	r2, r1
 801ce86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	69d9      	ldr	r1, [r3, #28]
 801ce8e:	68bb      	ldr	r3, [r7, #8]
 801ce90:	68da      	ldr	r2, [r3, #12]
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	681b      	ldr	r3, [r3, #0]
 801ce96:	430a      	orrs	r2, r1
 801ce98:	61da      	str	r2, [r3, #28]
      break;
 801ce9a:	e027      	b.n	801ceec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801ce9c:	68fb      	ldr	r3, [r7, #12]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	68ba      	ldr	r2, [r7, #8]
 801cea2:	0011      	movs	r1, r2
 801cea4:	0018      	movs	r0, r3
 801cea6:	f000 f94b 	bl	801d140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	681b      	ldr	r3, [r3, #0]
 801ceae:	69da      	ldr	r2, [r3, #28]
 801ceb0:	68fb      	ldr	r3, [r7, #12]
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	2180      	movs	r1, #128	@ 0x80
 801ceb6:	0109      	lsls	r1, r1, #4
 801ceb8:	430a      	orrs	r2, r1
 801ceba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801cebc:	68fb      	ldr	r3, [r7, #12]
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	69da      	ldr	r2, [r3, #28]
 801cec2:	68fb      	ldr	r3, [r7, #12]
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	490f      	ldr	r1, [pc, #60]	@ (801cf04 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801cec8:	400a      	ands	r2, r1
 801ceca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801cecc:	68fb      	ldr	r3, [r7, #12]
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	69d9      	ldr	r1, [r3, #28]
 801ced2:	68bb      	ldr	r3, [r7, #8]
 801ced4:	68db      	ldr	r3, [r3, #12]
 801ced6:	021a      	lsls	r2, r3, #8
 801ced8:	68fb      	ldr	r3, [r7, #12]
 801ceda:	681b      	ldr	r3, [r3, #0]
 801cedc:	430a      	orrs	r2, r1
 801cede:	61da      	str	r2, [r3, #28]
      break;
 801cee0:	e004      	b.n	801ceec <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801cee2:	2317      	movs	r3, #23
 801cee4:	18fb      	adds	r3, r7, r3
 801cee6:	2201      	movs	r2, #1
 801cee8:	701a      	strb	r2, [r3, #0]
      break;
 801ceea:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801ceec:	68fb      	ldr	r3, [r7, #12]
 801ceee:	2238      	movs	r2, #56	@ 0x38
 801cef0:	2100      	movs	r1, #0
 801cef2:	5499      	strb	r1, [r3, r2]

  return status;
 801cef4:	2317      	movs	r3, #23
 801cef6:	18fb      	adds	r3, r7, r3
 801cef8:	781b      	ldrb	r3, [r3, #0]
}
 801cefa:	0018      	movs	r0, r3
 801cefc:	46bd      	mov	sp, r7
 801cefe:	b006      	add	sp, #24
 801cf00:	bd80      	pop	{r7, pc}
 801cf02:	46c0      	nop			@ (mov r8, r8)
 801cf04:	fffffbff 	.word	0xfffffbff

0801cf08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801cf08:	b580      	push	{r7, lr}
 801cf0a:	b084      	sub	sp, #16
 801cf0c:	af00      	add	r7, sp, #0
 801cf0e:	6078      	str	r0, [r7, #4]
 801cf10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801cf18:	687a      	ldr	r2, [r7, #4]
 801cf1a:	2380      	movs	r3, #128	@ 0x80
 801cf1c:	05db      	lsls	r3, r3, #23
 801cf1e:	429a      	cmp	r2, r3
 801cf20:	d00b      	beq.n	801cf3a <TIM_Base_SetConfig+0x32>
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	4a23      	ldr	r2, [pc, #140]	@ (801cfb4 <TIM_Base_SetConfig+0xac>)
 801cf26:	4293      	cmp	r3, r2
 801cf28:	d007      	beq.n	801cf3a <TIM_Base_SetConfig+0x32>
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	4a22      	ldr	r2, [pc, #136]	@ (801cfb8 <TIM_Base_SetConfig+0xb0>)
 801cf2e:	4293      	cmp	r3, r2
 801cf30:	d003      	beq.n	801cf3a <TIM_Base_SetConfig+0x32>
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	4a21      	ldr	r2, [pc, #132]	@ (801cfbc <TIM_Base_SetConfig+0xb4>)
 801cf36:	4293      	cmp	r3, r2
 801cf38:	d108      	bne.n	801cf4c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801cf3a:	68fb      	ldr	r3, [r7, #12]
 801cf3c:	2270      	movs	r2, #112	@ 0x70
 801cf3e:	4393      	bics	r3, r2
 801cf40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801cf42:	683b      	ldr	r3, [r7, #0]
 801cf44:	685b      	ldr	r3, [r3, #4]
 801cf46:	68fa      	ldr	r2, [r7, #12]
 801cf48:	4313      	orrs	r3, r2
 801cf4a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801cf4c:	687a      	ldr	r2, [r7, #4]
 801cf4e:	2380      	movs	r3, #128	@ 0x80
 801cf50:	05db      	lsls	r3, r3, #23
 801cf52:	429a      	cmp	r2, r3
 801cf54:	d00b      	beq.n	801cf6e <TIM_Base_SetConfig+0x66>
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	4a16      	ldr	r2, [pc, #88]	@ (801cfb4 <TIM_Base_SetConfig+0xac>)
 801cf5a:	4293      	cmp	r3, r2
 801cf5c:	d007      	beq.n	801cf6e <TIM_Base_SetConfig+0x66>
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	4a15      	ldr	r2, [pc, #84]	@ (801cfb8 <TIM_Base_SetConfig+0xb0>)
 801cf62:	4293      	cmp	r3, r2
 801cf64:	d003      	beq.n	801cf6e <TIM_Base_SetConfig+0x66>
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	4a14      	ldr	r2, [pc, #80]	@ (801cfbc <TIM_Base_SetConfig+0xb4>)
 801cf6a:	4293      	cmp	r3, r2
 801cf6c:	d108      	bne.n	801cf80 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801cf6e:	68fb      	ldr	r3, [r7, #12]
 801cf70:	4a13      	ldr	r2, [pc, #76]	@ (801cfc0 <TIM_Base_SetConfig+0xb8>)
 801cf72:	4013      	ands	r3, r2
 801cf74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801cf76:	683b      	ldr	r3, [r7, #0]
 801cf78:	68db      	ldr	r3, [r3, #12]
 801cf7a:	68fa      	ldr	r2, [r7, #12]
 801cf7c:	4313      	orrs	r3, r2
 801cf7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801cf80:	68fb      	ldr	r3, [r7, #12]
 801cf82:	2280      	movs	r2, #128	@ 0x80
 801cf84:	4393      	bics	r3, r2
 801cf86:	001a      	movs	r2, r3
 801cf88:	683b      	ldr	r3, [r7, #0]
 801cf8a:	691b      	ldr	r3, [r3, #16]
 801cf8c:	4313      	orrs	r3, r2
 801cf8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	68fa      	ldr	r2, [r7, #12]
 801cf94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801cf96:	683b      	ldr	r3, [r7, #0]
 801cf98:	689a      	ldr	r2, [r3, #8]
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801cf9e:	683b      	ldr	r3, [r7, #0]
 801cfa0:	681a      	ldr	r2, [r3, #0]
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	2201      	movs	r2, #1
 801cfaa:	615a      	str	r2, [r3, #20]
}
 801cfac:	46c0      	nop			@ (mov r8, r8)
 801cfae:	46bd      	mov	sp, r7
 801cfb0:	b004      	add	sp, #16
 801cfb2:	bd80      	pop	{r7, pc}
 801cfb4:	40000400 	.word	0x40000400
 801cfb8:	40010800 	.word	0x40010800
 801cfbc:	40011400 	.word	0x40011400
 801cfc0:	fffffcff 	.word	0xfffffcff

0801cfc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801cfc4:	b580      	push	{r7, lr}
 801cfc6:	b086      	sub	sp, #24
 801cfc8:	af00      	add	r7, sp, #0
 801cfca:	6078      	str	r0, [r7, #4]
 801cfcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	6a1b      	ldr	r3, [r3, #32]
 801cfd2:	2201      	movs	r2, #1
 801cfd4:	4393      	bics	r3, r2
 801cfd6:	001a      	movs	r2, r3
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	6a1b      	ldr	r3, [r3, #32]
 801cfe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	685b      	ldr	r3, [r3, #4]
 801cfe6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	699b      	ldr	r3, [r3, #24]
 801cfec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	2270      	movs	r2, #112	@ 0x70
 801cff2:	4393      	bics	r3, r2
 801cff4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801cff6:	68fb      	ldr	r3, [r7, #12]
 801cff8:	2203      	movs	r2, #3
 801cffa:	4393      	bics	r3, r2
 801cffc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801cffe:	683b      	ldr	r3, [r7, #0]
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	68fa      	ldr	r2, [r7, #12]
 801d004:	4313      	orrs	r3, r2
 801d006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d008:	697b      	ldr	r3, [r7, #20]
 801d00a:	2202      	movs	r2, #2
 801d00c:	4393      	bics	r3, r2
 801d00e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d010:	683b      	ldr	r3, [r7, #0]
 801d012:	689b      	ldr	r3, [r3, #8]
 801d014:	697a      	ldr	r2, [r7, #20]
 801d016:	4313      	orrs	r3, r2
 801d018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	693a      	ldr	r2, [r7, #16]
 801d01e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	68fa      	ldr	r2, [r7, #12]
 801d024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d026:	683b      	ldr	r3, [r7, #0]
 801d028:	685a      	ldr	r2, [r3, #4]
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	697a      	ldr	r2, [r7, #20]
 801d032:	621a      	str	r2, [r3, #32]
}
 801d034:	46c0      	nop			@ (mov r8, r8)
 801d036:	46bd      	mov	sp, r7
 801d038:	b006      	add	sp, #24
 801d03a:	bd80      	pop	{r7, pc}

0801d03c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d03c:	b580      	push	{r7, lr}
 801d03e:	b086      	sub	sp, #24
 801d040:	af00      	add	r7, sp, #0
 801d042:	6078      	str	r0, [r7, #4]
 801d044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	6a1b      	ldr	r3, [r3, #32]
 801d04a:	2210      	movs	r2, #16
 801d04c:	4393      	bics	r3, r2
 801d04e:	001a      	movs	r2, r3
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	6a1b      	ldr	r3, [r3, #32]
 801d058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	685b      	ldr	r3, [r3, #4]
 801d05e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	699b      	ldr	r3, [r3, #24]
 801d064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	4a13      	ldr	r2, [pc, #76]	@ (801d0b8 <TIM_OC2_SetConfig+0x7c>)
 801d06a:	4013      	ands	r3, r2
 801d06c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d06e:	68fb      	ldr	r3, [r7, #12]
 801d070:	4a12      	ldr	r2, [pc, #72]	@ (801d0bc <TIM_OC2_SetConfig+0x80>)
 801d072:	4013      	ands	r3, r2
 801d074:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d076:	683b      	ldr	r3, [r7, #0]
 801d078:	681b      	ldr	r3, [r3, #0]
 801d07a:	021b      	lsls	r3, r3, #8
 801d07c:	68fa      	ldr	r2, [r7, #12]
 801d07e:	4313      	orrs	r3, r2
 801d080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d082:	697b      	ldr	r3, [r7, #20]
 801d084:	2220      	movs	r2, #32
 801d086:	4393      	bics	r3, r2
 801d088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d08a:	683b      	ldr	r3, [r7, #0]
 801d08c:	689b      	ldr	r3, [r3, #8]
 801d08e:	011b      	lsls	r3, r3, #4
 801d090:	697a      	ldr	r2, [r7, #20]
 801d092:	4313      	orrs	r3, r2
 801d094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	693a      	ldr	r2, [r7, #16]
 801d09a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	68fa      	ldr	r2, [r7, #12]
 801d0a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d0a2:	683b      	ldr	r3, [r7, #0]
 801d0a4:	685a      	ldr	r2, [r3, #4]
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	697a      	ldr	r2, [r7, #20]
 801d0ae:	621a      	str	r2, [r3, #32]
}
 801d0b0:	46c0      	nop			@ (mov r8, r8)
 801d0b2:	46bd      	mov	sp, r7
 801d0b4:	b006      	add	sp, #24
 801d0b6:	bd80      	pop	{r7, pc}
 801d0b8:	ffff8fff 	.word	0xffff8fff
 801d0bc:	fffffcff 	.word	0xfffffcff

0801d0c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d0c0:	b580      	push	{r7, lr}
 801d0c2:	b086      	sub	sp, #24
 801d0c4:	af00      	add	r7, sp, #0
 801d0c6:	6078      	str	r0, [r7, #4]
 801d0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	6a1b      	ldr	r3, [r3, #32]
 801d0ce:	4a1a      	ldr	r2, [pc, #104]	@ (801d138 <TIM_OC3_SetConfig+0x78>)
 801d0d0:	401a      	ands	r2, r3
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	6a1b      	ldr	r3, [r3, #32]
 801d0da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	685b      	ldr	r3, [r3, #4]
 801d0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	69db      	ldr	r3, [r3, #28]
 801d0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d0e8:	68fb      	ldr	r3, [r7, #12]
 801d0ea:	2270      	movs	r2, #112	@ 0x70
 801d0ec:	4393      	bics	r3, r2
 801d0ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d0f0:	68fb      	ldr	r3, [r7, #12]
 801d0f2:	2203      	movs	r2, #3
 801d0f4:	4393      	bics	r3, r2
 801d0f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d0f8:	683b      	ldr	r3, [r7, #0]
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	68fa      	ldr	r2, [r7, #12]
 801d0fe:	4313      	orrs	r3, r2
 801d100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d102:	697b      	ldr	r3, [r7, #20]
 801d104:	4a0d      	ldr	r2, [pc, #52]	@ (801d13c <TIM_OC3_SetConfig+0x7c>)
 801d106:	4013      	ands	r3, r2
 801d108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d10a:	683b      	ldr	r3, [r7, #0]
 801d10c:	689b      	ldr	r3, [r3, #8]
 801d10e:	021b      	lsls	r3, r3, #8
 801d110:	697a      	ldr	r2, [r7, #20]
 801d112:	4313      	orrs	r3, r2
 801d114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	693a      	ldr	r2, [r7, #16]
 801d11a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	68fa      	ldr	r2, [r7, #12]
 801d120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d122:	683b      	ldr	r3, [r7, #0]
 801d124:	685a      	ldr	r2, [r3, #4]
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d12a:	687b      	ldr	r3, [r7, #4]
 801d12c:	697a      	ldr	r2, [r7, #20]
 801d12e:	621a      	str	r2, [r3, #32]
}
 801d130:	46c0      	nop			@ (mov r8, r8)
 801d132:	46bd      	mov	sp, r7
 801d134:	b006      	add	sp, #24
 801d136:	bd80      	pop	{r7, pc}
 801d138:	fffffeff 	.word	0xfffffeff
 801d13c:	fffffdff 	.word	0xfffffdff

0801d140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d140:	b580      	push	{r7, lr}
 801d142:	b086      	sub	sp, #24
 801d144:	af00      	add	r7, sp, #0
 801d146:	6078      	str	r0, [r7, #4]
 801d148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	6a1b      	ldr	r3, [r3, #32]
 801d14e:	4a1b      	ldr	r2, [pc, #108]	@ (801d1bc <TIM_OC4_SetConfig+0x7c>)
 801d150:	401a      	ands	r2, r3
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	6a1b      	ldr	r3, [r3, #32]
 801d15a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	685b      	ldr	r3, [r3, #4]
 801d160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	69db      	ldr	r3, [r3, #28]
 801d166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d168:	68fb      	ldr	r3, [r7, #12]
 801d16a:	4a15      	ldr	r2, [pc, #84]	@ (801d1c0 <TIM_OC4_SetConfig+0x80>)
 801d16c:	4013      	ands	r3, r2
 801d16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	4a14      	ldr	r2, [pc, #80]	@ (801d1c4 <TIM_OC4_SetConfig+0x84>)
 801d174:	4013      	ands	r3, r2
 801d176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d178:	683b      	ldr	r3, [r7, #0]
 801d17a:	681b      	ldr	r3, [r3, #0]
 801d17c:	021b      	lsls	r3, r3, #8
 801d17e:	68fa      	ldr	r2, [r7, #12]
 801d180:	4313      	orrs	r3, r2
 801d182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d184:	697b      	ldr	r3, [r7, #20]
 801d186:	4a10      	ldr	r2, [pc, #64]	@ (801d1c8 <TIM_OC4_SetConfig+0x88>)
 801d188:	4013      	ands	r3, r2
 801d18a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d18c:	683b      	ldr	r3, [r7, #0]
 801d18e:	689b      	ldr	r3, [r3, #8]
 801d190:	031b      	lsls	r3, r3, #12
 801d192:	697a      	ldr	r2, [r7, #20]
 801d194:	4313      	orrs	r3, r2
 801d196:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	693a      	ldr	r2, [r7, #16]
 801d19c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	68fa      	ldr	r2, [r7, #12]
 801d1a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d1a4:	683b      	ldr	r3, [r7, #0]
 801d1a6:	685a      	ldr	r2, [r3, #4]
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	697a      	ldr	r2, [r7, #20]
 801d1b0:	621a      	str	r2, [r3, #32]
}
 801d1b2:	46c0      	nop			@ (mov r8, r8)
 801d1b4:	46bd      	mov	sp, r7
 801d1b6:	b006      	add	sp, #24
 801d1b8:	bd80      	pop	{r7, pc}
 801d1ba:	46c0      	nop			@ (mov r8, r8)
 801d1bc:	ffffefff 	.word	0xffffefff
 801d1c0:	ffff8fff 	.word	0xffff8fff
 801d1c4:	fffffcff 	.word	0xfffffcff
 801d1c8:	ffffdfff 	.word	0xffffdfff

0801d1cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801d1cc:	b580      	push	{r7, lr}
 801d1ce:	b086      	sub	sp, #24
 801d1d0:	af00      	add	r7, sp, #0
 801d1d2:	60f8      	str	r0, [r7, #12]
 801d1d4:	60b9      	str	r1, [r7, #8]
 801d1d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801d1d8:	68bb      	ldr	r3, [r7, #8]
 801d1da:	221f      	movs	r2, #31
 801d1dc:	4013      	ands	r3, r2
 801d1de:	2201      	movs	r2, #1
 801d1e0:	409a      	lsls	r2, r3
 801d1e2:	0013      	movs	r3, r2
 801d1e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	6a1b      	ldr	r3, [r3, #32]
 801d1ea:	697a      	ldr	r2, [r7, #20]
 801d1ec:	43d2      	mvns	r2, r2
 801d1ee:	401a      	ands	r2, r3
 801d1f0:	68fb      	ldr	r3, [r7, #12]
 801d1f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801d1f4:	68fb      	ldr	r3, [r7, #12]
 801d1f6:	6a1a      	ldr	r2, [r3, #32]
 801d1f8:	68bb      	ldr	r3, [r7, #8]
 801d1fa:	211f      	movs	r1, #31
 801d1fc:	400b      	ands	r3, r1
 801d1fe:	6879      	ldr	r1, [r7, #4]
 801d200:	4099      	lsls	r1, r3
 801d202:	000b      	movs	r3, r1
 801d204:	431a      	orrs	r2, r3
 801d206:	68fb      	ldr	r3, [r7, #12]
 801d208:	621a      	str	r2, [r3, #32]
}
 801d20a:	46c0      	nop			@ (mov r8, r8)
 801d20c:	46bd      	mov	sp, r7
 801d20e:	b006      	add	sp, #24
 801d210:	bd80      	pop	{r7, pc}
	...

0801d214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d214:	b580      	push	{r7, lr}
 801d216:	b084      	sub	sp, #16
 801d218:	af00      	add	r7, sp, #0
 801d21a:	6078      	str	r0, [r7, #4]
 801d21c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	2238      	movs	r2, #56	@ 0x38
 801d222:	5c9b      	ldrb	r3, [r3, r2]
 801d224:	2b01      	cmp	r3, #1
 801d226:	d101      	bne.n	801d22c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d228:	2302      	movs	r3, #2
 801d22a:	e047      	b.n	801d2bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	2238      	movs	r2, #56	@ 0x38
 801d230:	2101      	movs	r1, #1
 801d232:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	2239      	movs	r2, #57	@ 0x39
 801d238:	2102      	movs	r1, #2
 801d23a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	681b      	ldr	r3, [r3, #0]
 801d240:	685b      	ldr	r3, [r3, #4]
 801d242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	681b      	ldr	r3, [r3, #0]
 801d248:	689b      	ldr	r3, [r3, #8]
 801d24a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	2270      	movs	r2, #112	@ 0x70
 801d250:	4393      	bics	r3, r2
 801d252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d254:	683b      	ldr	r3, [r7, #0]
 801d256:	681b      	ldr	r3, [r3, #0]
 801d258:	68fa      	ldr	r2, [r7, #12]
 801d25a:	4313      	orrs	r3, r2
 801d25c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	681b      	ldr	r3, [r3, #0]
 801d262:	68fa      	ldr	r2, [r7, #12]
 801d264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	681a      	ldr	r2, [r3, #0]
 801d26a:	2380      	movs	r3, #128	@ 0x80
 801d26c:	05db      	lsls	r3, r3, #23
 801d26e:	429a      	cmp	r2, r3
 801d270:	d00e      	beq.n	801d290 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	681b      	ldr	r3, [r3, #0]
 801d276:	4a13      	ldr	r2, [pc, #76]	@ (801d2c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801d278:	4293      	cmp	r3, r2
 801d27a:	d009      	beq.n	801d290 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	681b      	ldr	r3, [r3, #0]
 801d280:	4a11      	ldr	r2, [pc, #68]	@ (801d2c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801d282:	4293      	cmp	r3, r2
 801d284:	d004      	beq.n	801d290 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	681b      	ldr	r3, [r3, #0]
 801d28a:	4a10      	ldr	r2, [pc, #64]	@ (801d2cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801d28c:	4293      	cmp	r3, r2
 801d28e:	d10c      	bne.n	801d2aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801d290:	68bb      	ldr	r3, [r7, #8]
 801d292:	2280      	movs	r2, #128	@ 0x80
 801d294:	4393      	bics	r3, r2
 801d296:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d298:	683b      	ldr	r3, [r7, #0]
 801d29a:	685b      	ldr	r3, [r3, #4]
 801d29c:	68ba      	ldr	r2, [r7, #8]
 801d29e:	4313      	orrs	r3, r2
 801d2a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	68ba      	ldr	r2, [r7, #8]
 801d2a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	2239      	movs	r2, #57	@ 0x39
 801d2ae:	2101      	movs	r1, #1
 801d2b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	2238      	movs	r2, #56	@ 0x38
 801d2b6:	2100      	movs	r1, #0
 801d2b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d2ba:	2300      	movs	r3, #0
}
 801d2bc:	0018      	movs	r0, r3
 801d2be:	46bd      	mov	sp, r7
 801d2c0:	b004      	add	sp, #16
 801d2c2:	bd80      	pop	{r7, pc}
 801d2c4:	40000400 	.word	0x40000400
 801d2c8:	40010800 	.word	0x40010800
 801d2cc:	40011400 	.word	0x40011400

0801d2d0 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801d2d0:	b580      	push	{r7, lr}
 801d2d2:	b082      	sub	sp, #8
 801d2d4:	af00      	add	r7, sp, #0
 801d2d6:	6078      	str	r0, [r7, #4]
 801d2d8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	2238      	movs	r2, #56	@ 0x38
 801d2de:	5c9b      	ldrb	r3, [r3, r2]
 801d2e0:	2b01      	cmp	r3, #1
 801d2e2:	d101      	bne.n	801d2e8 <HAL_TIMEx_RemapConfig+0x18>
 801d2e4:	2302      	movs	r3, #2
 801d2e6:	e00c      	b.n	801d302 <HAL_TIMEx_RemapConfig+0x32>
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	2238      	movs	r2, #56	@ 0x38
 801d2ec:	2101      	movs	r1, #1
 801d2ee:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	683a      	ldr	r2, [r7, #0]
 801d2f6:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	2238      	movs	r2, #56	@ 0x38
 801d2fc:	2100      	movs	r1, #0
 801d2fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d300:	2300      	movs	r3, #0
}
 801d302:	0018      	movs	r0, r3
 801d304:	46bd      	mov	sp, r7
 801d306:	b002      	add	sp, #8
 801d308:	bd80      	pop	{r7, pc}
	...

0801d30c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801d30c:	b580      	push	{r7, lr}
 801d30e:	b082      	sub	sp, #8
 801d310:	af00      	add	r7, sp, #0
 801d312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d101      	bne.n	801d31e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801d31a:	2301      	movs	r3, #1
 801d31c:	e053      	b.n	801d3c6 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d322:	2b00      	cmp	r3, #0
 801d324:	d116      	bne.n	801d354 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801d326:	687b      	ldr	r3, [r7, #4]
 801d328:	2278      	movs	r2, #120	@ 0x78
 801d32a:	2100      	movs	r1, #0
 801d32c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	0018      	movs	r0, r3
 801d332:	f000 fd65 	bl	801de00 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	22b0      	movs	r2, #176	@ 0xb0
 801d33a:	589b      	ldr	r3, [r3, r2]
 801d33c:	2b00      	cmp	r3, #0
 801d33e:	d103      	bne.n	801d348 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	21b0      	movs	r1, #176	@ 0xb0
 801d344:	4a22      	ldr	r2, [pc, #136]	@ (801d3d0 <HAL_UART_Init+0xc4>)
 801d346:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	22b0      	movs	r2, #176	@ 0xb0
 801d34c:	589b      	ldr	r3, [r3, r2]
 801d34e:	687a      	ldr	r2, [r7, #4]
 801d350:	0010      	movs	r0, r2
 801d352:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	2224      	movs	r2, #36	@ 0x24
 801d358:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	681a      	ldr	r2, [r3, #0]
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	681b      	ldr	r3, [r3, #0]
 801d364:	2101      	movs	r1, #1
 801d366:	438a      	bics	r2, r1
 801d368:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	0018      	movs	r0, r3
 801d36e:	f000 fd8b 	bl	801de88 <UART_SetConfig>
 801d372:	0003      	movs	r3, r0
 801d374:	2b01      	cmp	r3, #1
 801d376:	d101      	bne.n	801d37c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801d378:	2301      	movs	r3, #1
 801d37a:	e024      	b.n	801d3c6 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d380:	2b00      	cmp	r3, #0
 801d382:	d003      	beq.n	801d38c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	0018      	movs	r0, r3
 801d388:	f001 f81c 	bl	801e3c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	681b      	ldr	r3, [r3, #0]
 801d390:	685a      	ldr	r2, [r3, #4]
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	681b      	ldr	r3, [r3, #0]
 801d396:	490f      	ldr	r1, [pc, #60]	@ (801d3d4 <HAL_UART_Init+0xc8>)
 801d398:	400a      	ands	r2, r1
 801d39a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	681b      	ldr	r3, [r3, #0]
 801d3a0:	689a      	ldr	r2, [r3, #8]
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	681b      	ldr	r3, [r3, #0]
 801d3a6:	212a      	movs	r1, #42	@ 0x2a
 801d3a8:	438a      	bics	r2, r1
 801d3aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	681b      	ldr	r3, [r3, #0]
 801d3b0:	681a      	ldr	r2, [r3, #0]
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	2101      	movs	r1, #1
 801d3b8:	430a      	orrs	r2, r1
 801d3ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	0018      	movs	r0, r3
 801d3c0:	f001 f8b4 	bl	801e52c <UART_CheckIdleState>
 801d3c4:	0003      	movs	r3, r0
}
 801d3c6:	0018      	movs	r0, r3
 801d3c8:	46bd      	mov	sp, r7
 801d3ca:	b002      	add	sp, #8
 801d3cc:	bd80      	pop	{r7, pc}
 801d3ce:	46c0      	nop			@ (mov r8, r8)
 801d3d0:	08013a69 	.word	0x08013a69
 801d3d4:	ffffb7ff 	.word	0xffffb7ff

0801d3d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d3d8:	b580      	push	{r7, lr}
 801d3da:	b08a      	sub	sp, #40	@ 0x28
 801d3dc:	af02      	add	r7, sp, #8
 801d3de:	60f8      	str	r0, [r7, #12]
 801d3e0:	60b9      	str	r1, [r7, #8]
 801d3e2:	603b      	str	r3, [r7, #0]
 801d3e4:	1dbb      	adds	r3, r7, #6
 801d3e6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d3e8:	68fb      	ldr	r3, [r7, #12]
 801d3ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d3ec:	2b20      	cmp	r3, #32
 801d3ee:	d000      	beq.n	801d3f2 <HAL_UART_Transmit+0x1a>
 801d3f0:	e08c      	b.n	801d50c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801d3f2:	68bb      	ldr	r3, [r7, #8]
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d003      	beq.n	801d400 <HAL_UART_Transmit+0x28>
 801d3f8:	1dbb      	adds	r3, r7, #6
 801d3fa:	881b      	ldrh	r3, [r3, #0]
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	d101      	bne.n	801d404 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801d400:	2301      	movs	r3, #1
 801d402:	e084      	b.n	801d50e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d404:	68fb      	ldr	r3, [r7, #12]
 801d406:	689a      	ldr	r2, [r3, #8]
 801d408:	2380      	movs	r3, #128	@ 0x80
 801d40a:	015b      	lsls	r3, r3, #5
 801d40c:	429a      	cmp	r2, r3
 801d40e:	d109      	bne.n	801d424 <HAL_UART_Transmit+0x4c>
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	691b      	ldr	r3, [r3, #16]
 801d414:	2b00      	cmp	r3, #0
 801d416:	d105      	bne.n	801d424 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d418:	68bb      	ldr	r3, [r7, #8]
 801d41a:	2201      	movs	r2, #1
 801d41c:	4013      	ands	r3, r2
 801d41e:	d001      	beq.n	801d424 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801d420:	2301      	movs	r3, #1
 801d422:	e074      	b.n	801d50e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	2284      	movs	r2, #132	@ 0x84
 801d428:	2100      	movs	r1, #0
 801d42a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d42c:	68fb      	ldr	r3, [r7, #12]
 801d42e:	2221      	movs	r2, #33	@ 0x21
 801d430:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801d432:	f7f7 fa1f 	bl	8014874 <HAL_GetTick>
 801d436:	0003      	movs	r3, r0
 801d438:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801d43a:	68fb      	ldr	r3, [r7, #12]
 801d43c:	1dba      	adds	r2, r7, #6
 801d43e:	2150      	movs	r1, #80	@ 0x50
 801d440:	8812      	ldrh	r2, [r2, #0]
 801d442:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	1dba      	adds	r2, r7, #6
 801d448:	2152      	movs	r1, #82	@ 0x52
 801d44a:	8812      	ldrh	r2, [r2, #0]
 801d44c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d44e:	68fb      	ldr	r3, [r7, #12]
 801d450:	689a      	ldr	r2, [r3, #8]
 801d452:	2380      	movs	r3, #128	@ 0x80
 801d454:	015b      	lsls	r3, r3, #5
 801d456:	429a      	cmp	r2, r3
 801d458:	d108      	bne.n	801d46c <HAL_UART_Transmit+0x94>
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	691b      	ldr	r3, [r3, #16]
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d104      	bne.n	801d46c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801d462:	2300      	movs	r3, #0
 801d464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801d466:	68bb      	ldr	r3, [r7, #8]
 801d468:	61bb      	str	r3, [r7, #24]
 801d46a:	e003      	b.n	801d474 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801d46c:	68bb      	ldr	r3, [r7, #8]
 801d46e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801d470:	2300      	movs	r3, #0
 801d472:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801d474:	e02f      	b.n	801d4d6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801d476:	697a      	ldr	r2, [r7, #20]
 801d478:	68f8      	ldr	r0, [r7, #12]
 801d47a:	683b      	ldr	r3, [r7, #0]
 801d47c:	9300      	str	r3, [sp, #0]
 801d47e:	0013      	movs	r3, r2
 801d480:	2200      	movs	r2, #0
 801d482:	2180      	movs	r1, #128	@ 0x80
 801d484:	f001 f8fa 	bl	801e67c <UART_WaitOnFlagUntilTimeout>
 801d488:	1e03      	subs	r3, r0, #0
 801d48a:	d004      	beq.n	801d496 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801d48c:	68fb      	ldr	r3, [r7, #12]
 801d48e:	2220      	movs	r2, #32
 801d490:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801d492:	2303      	movs	r3, #3
 801d494:	e03b      	b.n	801d50e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801d496:	69fb      	ldr	r3, [r7, #28]
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d10b      	bne.n	801d4b4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801d49c:	69bb      	ldr	r3, [r7, #24]
 801d49e:	881b      	ldrh	r3, [r3, #0]
 801d4a0:	001a      	movs	r2, r3
 801d4a2:	68fb      	ldr	r3, [r7, #12]
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	05d2      	lsls	r2, r2, #23
 801d4a8:	0dd2      	lsrs	r2, r2, #23
 801d4aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801d4ac:	69bb      	ldr	r3, [r7, #24]
 801d4ae:	3302      	adds	r3, #2
 801d4b0:	61bb      	str	r3, [r7, #24]
 801d4b2:	e007      	b.n	801d4c4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801d4b4:	69fb      	ldr	r3, [r7, #28]
 801d4b6:	781a      	ldrb	r2, [r3, #0]
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801d4be:	69fb      	ldr	r3, [r7, #28]
 801d4c0:	3301      	adds	r3, #1
 801d4c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801d4c4:	68fb      	ldr	r3, [r7, #12]
 801d4c6:	2252      	movs	r2, #82	@ 0x52
 801d4c8:	5a9b      	ldrh	r3, [r3, r2]
 801d4ca:	b29b      	uxth	r3, r3
 801d4cc:	3b01      	subs	r3, #1
 801d4ce:	b299      	uxth	r1, r3
 801d4d0:	68fb      	ldr	r3, [r7, #12]
 801d4d2:	2252      	movs	r2, #82	@ 0x52
 801d4d4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801d4d6:	68fb      	ldr	r3, [r7, #12]
 801d4d8:	2252      	movs	r2, #82	@ 0x52
 801d4da:	5a9b      	ldrh	r3, [r3, r2]
 801d4dc:	b29b      	uxth	r3, r3
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d1c9      	bne.n	801d476 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801d4e2:	697a      	ldr	r2, [r7, #20]
 801d4e4:	68f8      	ldr	r0, [r7, #12]
 801d4e6:	683b      	ldr	r3, [r7, #0]
 801d4e8:	9300      	str	r3, [sp, #0]
 801d4ea:	0013      	movs	r3, r2
 801d4ec:	2200      	movs	r2, #0
 801d4ee:	2140      	movs	r1, #64	@ 0x40
 801d4f0:	f001 f8c4 	bl	801e67c <UART_WaitOnFlagUntilTimeout>
 801d4f4:	1e03      	subs	r3, r0, #0
 801d4f6:	d004      	beq.n	801d502 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	2220      	movs	r2, #32
 801d4fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801d4fe:	2303      	movs	r3, #3
 801d500:	e005      	b.n	801d50e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801d502:	68fb      	ldr	r3, [r7, #12]
 801d504:	2220      	movs	r2, #32
 801d506:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801d508:	2300      	movs	r3, #0
 801d50a:	e000      	b.n	801d50e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801d50c:	2302      	movs	r3, #2
  }
}
 801d50e:	0018      	movs	r0, r3
 801d510:	46bd      	mov	sp, r7
 801d512:	b008      	add	sp, #32
 801d514:	bd80      	pop	{r7, pc}
	...

0801d518 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d518:	b580      	push	{r7, lr}
 801d51a:	b088      	sub	sp, #32
 801d51c:	af00      	add	r7, sp, #0
 801d51e:	60f8      	str	r0, [r7, #12]
 801d520:	60b9      	str	r1, [r7, #8]
 801d522:	1dbb      	adds	r3, r7, #6
 801d524:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	2280      	movs	r2, #128	@ 0x80
 801d52a:	589b      	ldr	r3, [r3, r2]
 801d52c:	2b20      	cmp	r3, #32
 801d52e:	d14a      	bne.n	801d5c6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d530:	68bb      	ldr	r3, [r7, #8]
 801d532:	2b00      	cmp	r3, #0
 801d534:	d003      	beq.n	801d53e <HAL_UART_Receive_IT+0x26>
 801d536:	1dbb      	adds	r3, r7, #6
 801d538:	881b      	ldrh	r3, [r3, #0]
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	d101      	bne.n	801d542 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801d53e:	2301      	movs	r3, #1
 801d540:	e042      	b.n	801d5c8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d542:	68fb      	ldr	r3, [r7, #12]
 801d544:	689a      	ldr	r2, [r3, #8]
 801d546:	2380      	movs	r3, #128	@ 0x80
 801d548:	015b      	lsls	r3, r3, #5
 801d54a:	429a      	cmp	r2, r3
 801d54c:	d109      	bne.n	801d562 <HAL_UART_Receive_IT+0x4a>
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	691b      	ldr	r3, [r3, #16]
 801d552:	2b00      	cmp	r3, #0
 801d554:	d105      	bne.n	801d562 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d556:	68bb      	ldr	r3, [r7, #8]
 801d558:	2201      	movs	r2, #1
 801d55a:	4013      	ands	r3, r2
 801d55c:	d001      	beq.n	801d562 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801d55e:	2301      	movs	r3, #1
 801d560:	e032      	b.n	801d5c8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	2200      	movs	r2, #0
 801d566:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d568:	68fb      	ldr	r3, [r7, #12]
 801d56a:	681b      	ldr	r3, [r3, #0]
 801d56c:	4a18      	ldr	r2, [pc, #96]	@ (801d5d0 <HAL_UART_Receive_IT+0xb8>)
 801d56e:	4293      	cmp	r3, r2
 801d570:	d020      	beq.n	801d5b4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d572:	68fb      	ldr	r3, [r7, #12]
 801d574:	681b      	ldr	r3, [r3, #0]
 801d576:	685a      	ldr	r2, [r3, #4]
 801d578:	2380      	movs	r3, #128	@ 0x80
 801d57a:	041b      	lsls	r3, r3, #16
 801d57c:	4013      	ands	r3, r2
 801d57e:	d019      	beq.n	801d5b4 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d580:	f3ef 8310 	mrs	r3, PRIMASK
 801d584:	613b      	str	r3, [r7, #16]
  return(result);
 801d586:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d588:	61fb      	str	r3, [r7, #28]
 801d58a:	2301      	movs	r3, #1
 801d58c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d58e:	697b      	ldr	r3, [r7, #20]
 801d590:	f383 8810 	msr	PRIMASK, r3
}
 801d594:	46c0      	nop			@ (mov r8, r8)
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	681b      	ldr	r3, [r3, #0]
 801d59a:	681a      	ldr	r2, [r3, #0]
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	2180      	movs	r1, #128	@ 0x80
 801d5a2:	04c9      	lsls	r1, r1, #19
 801d5a4:	430a      	orrs	r2, r1
 801d5a6:	601a      	str	r2, [r3, #0]
 801d5a8:	69fb      	ldr	r3, [r7, #28]
 801d5aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5ac:	69bb      	ldr	r3, [r7, #24]
 801d5ae:	f383 8810 	msr	PRIMASK, r3
}
 801d5b2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801d5b4:	1dbb      	adds	r3, r7, #6
 801d5b6:	881a      	ldrh	r2, [r3, #0]
 801d5b8:	68b9      	ldr	r1, [r7, #8]
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	0018      	movs	r0, r3
 801d5be:	f001 f8c7 	bl	801e750 <UART_Start_Receive_IT>
 801d5c2:	0003      	movs	r3, r0
 801d5c4:	e000      	b.n	801d5c8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d5c6:	2302      	movs	r3, #2
  }
}
 801d5c8:	0018      	movs	r0, r3
 801d5ca:	46bd      	mov	sp, r7
 801d5cc:	b008      	add	sp, #32
 801d5ce:	bd80      	pop	{r7, pc}
 801d5d0:	40004800 	.word	0x40004800

0801d5d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801d5d4:	b580      	push	{r7, lr}
 801d5d6:	b088      	sub	sp, #32
 801d5d8:	af00      	add	r7, sp, #0
 801d5da:	60f8      	str	r0, [r7, #12]
 801d5dc:	60b9      	str	r1, [r7, #8]
 801d5de:	1dbb      	adds	r3, r7, #6
 801d5e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d5e2:	68fb      	ldr	r3, [r7, #12]
 801d5e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d5e6:	2b20      	cmp	r3, #32
 801d5e8:	d000      	beq.n	801d5ec <HAL_UART_Transmit_DMA+0x18>
 801d5ea:	e077      	b.n	801d6dc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801d5ec:	68bb      	ldr	r3, [r7, #8]
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	d003      	beq.n	801d5fa <HAL_UART_Transmit_DMA+0x26>
 801d5f2:	1dbb      	adds	r3, r7, #6
 801d5f4:	881b      	ldrh	r3, [r3, #0]
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	d101      	bne.n	801d5fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801d5fa:	2301      	movs	r3, #1
 801d5fc:	e06f      	b.n	801d6de <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	689a      	ldr	r2, [r3, #8]
 801d602:	2380      	movs	r3, #128	@ 0x80
 801d604:	015b      	lsls	r3, r3, #5
 801d606:	429a      	cmp	r2, r3
 801d608:	d109      	bne.n	801d61e <HAL_UART_Transmit_DMA+0x4a>
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	691b      	ldr	r3, [r3, #16]
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d105      	bne.n	801d61e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d612:	68bb      	ldr	r3, [r7, #8]
 801d614:	2201      	movs	r2, #1
 801d616:	4013      	ands	r3, r2
 801d618:	d001      	beq.n	801d61e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d61a:	2301      	movs	r3, #1
 801d61c:	e05f      	b.n	801d6de <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	68ba      	ldr	r2, [r7, #8]
 801d622:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	1dba      	adds	r2, r7, #6
 801d628:	2150      	movs	r1, #80	@ 0x50
 801d62a:	8812      	ldrh	r2, [r2, #0]
 801d62c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	1dba      	adds	r2, r7, #6
 801d632:	2152      	movs	r1, #82	@ 0x52
 801d634:	8812      	ldrh	r2, [r2, #0]
 801d636:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d638:	68fb      	ldr	r3, [r7, #12]
 801d63a:	2284      	movs	r2, #132	@ 0x84
 801d63c:	2100      	movs	r1, #0
 801d63e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	2221      	movs	r2, #33	@ 0x21
 801d644:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	d027      	beq.n	801d69e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801d64e:	68fb      	ldr	r3, [r7, #12]
 801d650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d652:	4a25      	ldr	r2, [pc, #148]	@ (801d6e8 <HAL_UART_Transmit_DMA+0x114>)
 801d654:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d65a:	4a24      	ldr	r2, [pc, #144]	@ (801d6ec <HAL_UART_Transmit_DMA+0x118>)
 801d65c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801d65e:	68fb      	ldr	r3, [r7, #12]
 801d660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d662:	4a23      	ldr	r2, [pc, #140]	@ (801d6f0 <HAL_UART_Transmit_DMA+0x11c>)
 801d664:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d66a:	2200      	movs	r2, #0
 801d66c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801d672:	68fb      	ldr	r3, [r7, #12]
 801d674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d676:	0019      	movs	r1, r3
 801d678:	68fb      	ldr	r3, [r7, #12]
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	3328      	adds	r3, #40	@ 0x28
 801d67e:	001a      	movs	r2, r3
 801d680:	1dbb      	adds	r3, r7, #6
 801d682:	881b      	ldrh	r3, [r3, #0]
 801d684:	f7f7 fe2a 	bl	80152dc <HAL_DMA_Start_IT>
 801d688:	1e03      	subs	r3, r0, #0
 801d68a:	d008      	beq.n	801d69e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d68c:	68fb      	ldr	r3, [r7, #12]
 801d68e:	2284      	movs	r2, #132	@ 0x84
 801d690:	2110      	movs	r1, #16
 801d692:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801d694:	68fb      	ldr	r3, [r7, #12]
 801d696:	2220      	movs	r2, #32
 801d698:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801d69a:	2301      	movs	r3, #1
 801d69c:	e01f      	b.n	801d6de <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	2240      	movs	r2, #64	@ 0x40
 801d6a4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6a6:	f3ef 8310 	mrs	r3, PRIMASK
 801d6aa:	613b      	str	r3, [r7, #16]
  return(result);
 801d6ac:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d6ae:	61fb      	str	r3, [r7, #28]
 801d6b0:	2301      	movs	r3, #1
 801d6b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6b4:	697b      	ldr	r3, [r7, #20]
 801d6b6:	f383 8810 	msr	PRIMASK, r3
}
 801d6ba:	46c0      	nop			@ (mov r8, r8)
 801d6bc:	68fb      	ldr	r3, [r7, #12]
 801d6be:	681b      	ldr	r3, [r3, #0]
 801d6c0:	689a      	ldr	r2, [r3, #8]
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	681b      	ldr	r3, [r3, #0]
 801d6c6:	2180      	movs	r1, #128	@ 0x80
 801d6c8:	430a      	orrs	r2, r1
 801d6ca:	609a      	str	r2, [r3, #8]
 801d6cc:	69fb      	ldr	r3, [r7, #28]
 801d6ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6d0:	69bb      	ldr	r3, [r7, #24]
 801d6d2:	f383 8810 	msr	PRIMASK, r3
}
 801d6d6:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801d6d8:	2300      	movs	r3, #0
 801d6da:	e000      	b.n	801d6de <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801d6dc:	2302      	movs	r3, #2
  }
}
 801d6de:	0018      	movs	r0, r3
 801d6e0:	46bd      	mov	sp, r7
 801d6e2:	b008      	add	sp, #32
 801d6e4:	bd80      	pop	{r7, pc}
 801d6e6:	46c0      	nop			@ (mov r8, r8)
 801d6e8:	0801eb35 	.word	0x0801eb35
 801d6ec:	0801ebd1 	.word	0x0801ebd1
 801d6f0:	0801ed71 	.word	0x0801ed71

0801d6f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d6f4:	b580      	push	{r7, lr}
 801d6f6:	b088      	sub	sp, #32
 801d6f8:	af00      	add	r7, sp, #0
 801d6fa:	60f8      	str	r0, [r7, #12]
 801d6fc:	60b9      	str	r1, [r7, #8]
 801d6fe:	1dbb      	adds	r3, r7, #6
 801d700:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	2280      	movs	r2, #128	@ 0x80
 801d706:	589b      	ldr	r3, [r3, r2]
 801d708:	2b20      	cmp	r3, #32
 801d70a:	d14a      	bne.n	801d7a2 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d70c:	68bb      	ldr	r3, [r7, #8]
 801d70e:	2b00      	cmp	r3, #0
 801d710:	d003      	beq.n	801d71a <HAL_UART_Receive_DMA+0x26>
 801d712:	1dbb      	adds	r3, r7, #6
 801d714:	881b      	ldrh	r3, [r3, #0]
 801d716:	2b00      	cmp	r3, #0
 801d718:	d101      	bne.n	801d71e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801d71a:	2301      	movs	r3, #1
 801d71c:	e042      	b.n	801d7a4 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	689a      	ldr	r2, [r3, #8]
 801d722:	2380      	movs	r3, #128	@ 0x80
 801d724:	015b      	lsls	r3, r3, #5
 801d726:	429a      	cmp	r2, r3
 801d728:	d109      	bne.n	801d73e <HAL_UART_Receive_DMA+0x4a>
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	691b      	ldr	r3, [r3, #16]
 801d72e:	2b00      	cmp	r3, #0
 801d730:	d105      	bne.n	801d73e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d732:	68bb      	ldr	r3, [r7, #8]
 801d734:	2201      	movs	r2, #1
 801d736:	4013      	ands	r3, r2
 801d738:	d001      	beq.n	801d73e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d73a:	2301      	movs	r3, #1
 801d73c:	e032      	b.n	801d7a4 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	2200      	movs	r2, #0
 801d742:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	4a18      	ldr	r2, [pc, #96]	@ (801d7ac <HAL_UART_Receive_DMA+0xb8>)
 801d74a:	4293      	cmp	r3, r2
 801d74c:	d020      	beq.n	801d790 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d74e:	68fb      	ldr	r3, [r7, #12]
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	685a      	ldr	r2, [r3, #4]
 801d754:	2380      	movs	r3, #128	@ 0x80
 801d756:	041b      	lsls	r3, r3, #16
 801d758:	4013      	ands	r3, r2
 801d75a:	d019      	beq.n	801d790 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d75c:	f3ef 8310 	mrs	r3, PRIMASK
 801d760:	613b      	str	r3, [r7, #16]
  return(result);
 801d762:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d764:	61fb      	str	r3, [r7, #28]
 801d766:	2301      	movs	r3, #1
 801d768:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d76a:	697b      	ldr	r3, [r7, #20]
 801d76c:	f383 8810 	msr	PRIMASK, r3
}
 801d770:	46c0      	nop			@ (mov r8, r8)
 801d772:	68fb      	ldr	r3, [r7, #12]
 801d774:	681b      	ldr	r3, [r3, #0]
 801d776:	681a      	ldr	r2, [r3, #0]
 801d778:	68fb      	ldr	r3, [r7, #12]
 801d77a:	681b      	ldr	r3, [r3, #0]
 801d77c:	2180      	movs	r1, #128	@ 0x80
 801d77e:	04c9      	lsls	r1, r1, #19
 801d780:	430a      	orrs	r2, r1
 801d782:	601a      	str	r2, [r3, #0]
 801d784:	69fb      	ldr	r3, [r7, #28]
 801d786:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d788:	69bb      	ldr	r3, [r7, #24]
 801d78a:	f383 8810 	msr	PRIMASK, r3
}
 801d78e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801d790:	1dbb      	adds	r3, r7, #6
 801d792:	881a      	ldrh	r2, [r3, #0]
 801d794:	68b9      	ldr	r1, [r7, #8]
 801d796:	68fb      	ldr	r3, [r7, #12]
 801d798:	0018      	movs	r0, r3
 801d79a:	f001 f8a3 	bl	801e8e4 <UART_Start_Receive_DMA>
 801d79e:	0003      	movs	r3, r0
 801d7a0:	e000      	b.n	801d7a4 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d7a2:	2302      	movs	r3, #2
  }
}
 801d7a4:	0018      	movs	r0, r3
 801d7a6:	46bd      	mov	sp, r7
 801d7a8:	b008      	add	sp, #32
 801d7aa:	bd80      	pop	{r7, pc}
 801d7ac:	40004800 	.word	0x40004800

0801d7b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801d7b0:	b590      	push	{r4, r7, lr}
 801d7b2:	b0ab      	sub	sp, #172	@ 0xac
 801d7b4:	af00      	add	r7, sp, #0
 801d7b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	681b      	ldr	r3, [r3, #0]
 801d7bc:	69db      	ldr	r3, [r3, #28]
 801d7be:	22a4      	movs	r2, #164	@ 0xa4
 801d7c0:	18b9      	adds	r1, r7, r2
 801d7c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	681b      	ldr	r3, [r3, #0]
 801d7ca:	20a0      	movs	r0, #160	@ 0xa0
 801d7cc:	1839      	adds	r1, r7, r0
 801d7ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801d7d0:	687b      	ldr	r3, [r7, #4]
 801d7d2:	681b      	ldr	r3, [r3, #0]
 801d7d4:	689b      	ldr	r3, [r3, #8]
 801d7d6:	219c      	movs	r1, #156	@ 0x9c
 801d7d8:	1879      	adds	r1, r7, r1
 801d7da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801d7dc:	0011      	movs	r1, r2
 801d7de:	18bb      	adds	r3, r7, r2
 801d7e0:	681b      	ldr	r3, [r3, #0]
 801d7e2:	4a9c      	ldr	r2, [pc, #624]	@ (801da54 <HAL_UART_IRQHandler+0x2a4>)
 801d7e4:	4013      	ands	r3, r2
 801d7e6:	2298      	movs	r2, #152	@ 0x98
 801d7e8:	18bc      	adds	r4, r7, r2
 801d7ea:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801d7ec:	18bb      	adds	r3, r7, r2
 801d7ee:	681b      	ldr	r3, [r3, #0]
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	d114      	bne.n	801d81e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801d7f4:	187b      	adds	r3, r7, r1
 801d7f6:	681b      	ldr	r3, [r3, #0]
 801d7f8:	2220      	movs	r2, #32
 801d7fa:	4013      	ands	r3, r2
 801d7fc:	d00f      	beq.n	801d81e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d7fe:	183b      	adds	r3, r7, r0
 801d800:	681b      	ldr	r3, [r3, #0]
 801d802:	2220      	movs	r2, #32
 801d804:	4013      	ands	r3, r2
 801d806:	d00a      	beq.n	801d81e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	d100      	bne.n	801d812 <HAL_UART_IRQHandler+0x62>
 801d810:	e2aa      	b.n	801dd68 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d816:	687a      	ldr	r2, [r7, #4]
 801d818:	0010      	movs	r0, r2
 801d81a:	4798      	blx	r3
      }
      return;
 801d81c:	e2a4      	b.n	801dd68 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801d81e:	2398      	movs	r3, #152	@ 0x98
 801d820:	18fb      	adds	r3, r7, r3
 801d822:	681b      	ldr	r3, [r3, #0]
 801d824:	2b00      	cmp	r3, #0
 801d826:	d100      	bne.n	801d82a <HAL_UART_IRQHandler+0x7a>
 801d828:	e11a      	b.n	801da60 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801d82a:	239c      	movs	r3, #156	@ 0x9c
 801d82c:	18fb      	adds	r3, r7, r3
 801d82e:	681b      	ldr	r3, [r3, #0]
 801d830:	2201      	movs	r2, #1
 801d832:	4013      	ands	r3, r2
 801d834:	d106      	bne.n	801d844 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801d836:	23a0      	movs	r3, #160	@ 0xa0
 801d838:	18fb      	adds	r3, r7, r3
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	4a86      	ldr	r2, [pc, #536]	@ (801da58 <HAL_UART_IRQHandler+0x2a8>)
 801d83e:	4013      	ands	r3, r2
 801d840:	d100      	bne.n	801d844 <HAL_UART_IRQHandler+0x94>
 801d842:	e10d      	b.n	801da60 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d844:	23a4      	movs	r3, #164	@ 0xa4
 801d846:	18fb      	adds	r3, r7, r3
 801d848:	681b      	ldr	r3, [r3, #0]
 801d84a:	2201      	movs	r2, #1
 801d84c:	4013      	ands	r3, r2
 801d84e:	d012      	beq.n	801d876 <HAL_UART_IRQHandler+0xc6>
 801d850:	23a0      	movs	r3, #160	@ 0xa0
 801d852:	18fb      	adds	r3, r7, r3
 801d854:	681a      	ldr	r2, [r3, #0]
 801d856:	2380      	movs	r3, #128	@ 0x80
 801d858:	005b      	lsls	r3, r3, #1
 801d85a:	4013      	ands	r3, r2
 801d85c:	d00b      	beq.n	801d876 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d85e:	687b      	ldr	r3, [r7, #4]
 801d860:	681b      	ldr	r3, [r3, #0]
 801d862:	2201      	movs	r2, #1
 801d864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	2284      	movs	r2, #132	@ 0x84
 801d86a:	589b      	ldr	r3, [r3, r2]
 801d86c:	2201      	movs	r2, #1
 801d86e:	431a      	orrs	r2, r3
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	2184      	movs	r1, #132	@ 0x84
 801d874:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d876:	23a4      	movs	r3, #164	@ 0xa4
 801d878:	18fb      	adds	r3, r7, r3
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	2202      	movs	r2, #2
 801d87e:	4013      	ands	r3, r2
 801d880:	d011      	beq.n	801d8a6 <HAL_UART_IRQHandler+0xf6>
 801d882:	239c      	movs	r3, #156	@ 0x9c
 801d884:	18fb      	adds	r3, r7, r3
 801d886:	681b      	ldr	r3, [r3, #0]
 801d888:	2201      	movs	r2, #1
 801d88a:	4013      	ands	r3, r2
 801d88c:	d00b      	beq.n	801d8a6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	2202      	movs	r2, #2
 801d894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	2284      	movs	r2, #132	@ 0x84
 801d89a:	589b      	ldr	r3, [r3, r2]
 801d89c:	2204      	movs	r2, #4
 801d89e:	431a      	orrs	r2, r3
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	2184      	movs	r1, #132	@ 0x84
 801d8a4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d8a6:	23a4      	movs	r3, #164	@ 0xa4
 801d8a8:	18fb      	adds	r3, r7, r3
 801d8aa:	681b      	ldr	r3, [r3, #0]
 801d8ac:	2204      	movs	r2, #4
 801d8ae:	4013      	ands	r3, r2
 801d8b0:	d011      	beq.n	801d8d6 <HAL_UART_IRQHandler+0x126>
 801d8b2:	239c      	movs	r3, #156	@ 0x9c
 801d8b4:	18fb      	adds	r3, r7, r3
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	2201      	movs	r2, #1
 801d8ba:	4013      	ands	r3, r2
 801d8bc:	d00b      	beq.n	801d8d6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	681b      	ldr	r3, [r3, #0]
 801d8c2:	2204      	movs	r2, #4
 801d8c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	2284      	movs	r2, #132	@ 0x84
 801d8ca:	589b      	ldr	r3, [r3, r2]
 801d8cc:	2202      	movs	r2, #2
 801d8ce:	431a      	orrs	r2, r3
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	2184      	movs	r1, #132	@ 0x84
 801d8d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801d8d6:	23a4      	movs	r3, #164	@ 0xa4
 801d8d8:	18fb      	adds	r3, r7, r3
 801d8da:	681b      	ldr	r3, [r3, #0]
 801d8dc:	2208      	movs	r2, #8
 801d8de:	4013      	ands	r3, r2
 801d8e0:	d017      	beq.n	801d912 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d8e2:	23a0      	movs	r3, #160	@ 0xa0
 801d8e4:	18fb      	adds	r3, r7, r3
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	2220      	movs	r2, #32
 801d8ea:	4013      	ands	r3, r2
 801d8ec:	d105      	bne.n	801d8fa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801d8ee:	239c      	movs	r3, #156	@ 0x9c
 801d8f0:	18fb      	adds	r3, r7, r3
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	2201      	movs	r2, #1
 801d8f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d8f8:	d00b      	beq.n	801d912 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	681b      	ldr	r3, [r3, #0]
 801d8fe:	2208      	movs	r2, #8
 801d900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	2284      	movs	r2, #132	@ 0x84
 801d906:	589b      	ldr	r3, [r3, r2]
 801d908:	2208      	movs	r2, #8
 801d90a:	431a      	orrs	r2, r3
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	2184      	movs	r1, #132	@ 0x84
 801d910:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801d912:	23a4      	movs	r3, #164	@ 0xa4
 801d914:	18fb      	adds	r3, r7, r3
 801d916:	681a      	ldr	r2, [r3, #0]
 801d918:	2380      	movs	r3, #128	@ 0x80
 801d91a:	011b      	lsls	r3, r3, #4
 801d91c:	4013      	ands	r3, r2
 801d91e:	d013      	beq.n	801d948 <HAL_UART_IRQHandler+0x198>
 801d920:	23a0      	movs	r3, #160	@ 0xa0
 801d922:	18fb      	adds	r3, r7, r3
 801d924:	681a      	ldr	r2, [r3, #0]
 801d926:	2380      	movs	r3, #128	@ 0x80
 801d928:	04db      	lsls	r3, r3, #19
 801d92a:	4013      	ands	r3, r2
 801d92c:	d00c      	beq.n	801d948 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d92e:	687b      	ldr	r3, [r7, #4]
 801d930:	681b      	ldr	r3, [r3, #0]
 801d932:	2280      	movs	r2, #128	@ 0x80
 801d934:	0112      	lsls	r2, r2, #4
 801d936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	2284      	movs	r2, #132	@ 0x84
 801d93c:	589b      	ldr	r3, [r3, r2]
 801d93e:	2220      	movs	r2, #32
 801d940:	431a      	orrs	r2, r3
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	2184      	movs	r1, #132	@ 0x84
 801d946:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	2284      	movs	r2, #132	@ 0x84
 801d94c:	589b      	ldr	r3, [r3, r2]
 801d94e:	2b00      	cmp	r3, #0
 801d950:	d100      	bne.n	801d954 <HAL_UART_IRQHandler+0x1a4>
 801d952:	e20b      	b.n	801dd6c <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801d954:	23a4      	movs	r3, #164	@ 0xa4
 801d956:	18fb      	adds	r3, r7, r3
 801d958:	681b      	ldr	r3, [r3, #0]
 801d95a:	2220      	movs	r2, #32
 801d95c:	4013      	ands	r3, r2
 801d95e:	d00e      	beq.n	801d97e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d960:	23a0      	movs	r3, #160	@ 0xa0
 801d962:	18fb      	adds	r3, r7, r3
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	2220      	movs	r2, #32
 801d968:	4013      	ands	r3, r2
 801d96a:	d008      	beq.n	801d97e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d970:	2b00      	cmp	r3, #0
 801d972:	d004      	beq.n	801d97e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801d974:	687b      	ldr	r3, [r7, #4]
 801d976:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d978:	687a      	ldr	r2, [r7, #4]
 801d97a:	0010      	movs	r0, r2
 801d97c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	2284      	movs	r2, #132	@ 0x84
 801d982:	589b      	ldr	r3, [r3, r2]
 801d984:	2194      	movs	r1, #148	@ 0x94
 801d986:	187a      	adds	r2, r7, r1
 801d988:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d98a:	687b      	ldr	r3, [r7, #4]
 801d98c:	681b      	ldr	r3, [r3, #0]
 801d98e:	689b      	ldr	r3, [r3, #8]
 801d990:	2240      	movs	r2, #64	@ 0x40
 801d992:	4013      	ands	r3, r2
 801d994:	2b40      	cmp	r3, #64	@ 0x40
 801d996:	d004      	beq.n	801d9a2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801d998:	187b      	adds	r3, r7, r1
 801d99a:	681b      	ldr	r3, [r3, #0]
 801d99c:	2228      	movs	r2, #40	@ 0x28
 801d99e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d9a0:	d04b      	beq.n	801da3a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	0018      	movs	r0, r3
 801d9a6:	f001 f861 	bl	801ea6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	681b      	ldr	r3, [r3, #0]
 801d9ae:	689b      	ldr	r3, [r3, #8]
 801d9b0:	2240      	movs	r2, #64	@ 0x40
 801d9b2:	4013      	ands	r3, r2
 801d9b4:	2b40      	cmp	r3, #64	@ 0x40
 801d9b6:	d139      	bne.n	801da2c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d9b8:	f3ef 8310 	mrs	r3, PRIMASK
 801d9bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801d9be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d9c0:	2090      	movs	r0, #144	@ 0x90
 801d9c2:	183a      	adds	r2, r7, r0
 801d9c4:	6013      	str	r3, [r2, #0]
 801d9c6:	2301      	movs	r3, #1
 801d9c8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d9cc:	f383 8810 	msr	PRIMASK, r3
}
 801d9d0:	46c0      	nop			@ (mov r8, r8)
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	681b      	ldr	r3, [r3, #0]
 801d9d6:	689a      	ldr	r2, [r3, #8]
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	2140      	movs	r1, #64	@ 0x40
 801d9de:	438a      	bics	r2, r1
 801d9e0:	609a      	str	r2, [r3, #8]
 801d9e2:	183b      	adds	r3, r7, r0
 801d9e4:	681b      	ldr	r3, [r3, #0]
 801d9e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d9ea:	f383 8810 	msr	PRIMASK, r3
}
 801d9ee:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d012      	beq.n	801da1e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801d9f8:	687b      	ldr	r3, [r7, #4]
 801d9fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d9fc:	4a17      	ldr	r2, [pc, #92]	@ (801da5c <HAL_UART_IRQHandler+0x2ac>)
 801d9fe:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da04:	0018      	movs	r0, r3
 801da06:	f7f7 fd0f 	bl	8015428 <HAL_DMA_Abort_IT>
 801da0a:	1e03      	subs	r3, r0, #0
 801da0c:	d020      	beq.n	801da50 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801da0e:	687b      	ldr	r3, [r7, #4]
 801da10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da18:	0018      	movs	r0, r3
 801da1a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da1c:	e018      	b.n	801da50 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	2298      	movs	r2, #152	@ 0x98
 801da22:	589b      	ldr	r3, [r3, r2]
 801da24:	687a      	ldr	r2, [r7, #4]
 801da26:	0010      	movs	r0, r2
 801da28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da2a:	e011      	b.n	801da50 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	2298      	movs	r2, #152	@ 0x98
 801da30:	589b      	ldr	r3, [r3, r2]
 801da32:	687a      	ldr	r2, [r7, #4]
 801da34:	0010      	movs	r0, r2
 801da36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da38:	e00a      	b.n	801da50 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801da3a:	687b      	ldr	r3, [r7, #4]
 801da3c:	2298      	movs	r2, #152	@ 0x98
 801da3e:	589b      	ldr	r3, [r3, r2]
 801da40:	687a      	ldr	r2, [r7, #4]
 801da42:	0010      	movs	r0, r2
 801da44:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	2284      	movs	r2, #132	@ 0x84
 801da4a:	2100      	movs	r1, #0
 801da4c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801da4e:	e18d      	b.n	801dd6c <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da50:	46c0      	nop			@ (mov r8, r8)
    return;
 801da52:	e18b      	b.n	801dd6c <HAL_UART_IRQHandler+0x5bc>
 801da54:	0000080f 	.word	0x0000080f
 801da58:	04000120 	.word	0x04000120
 801da5c:	0801edf9 	.word	0x0801edf9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801da64:	2b01      	cmp	r3, #1
 801da66:	d000      	beq.n	801da6a <HAL_UART_IRQHandler+0x2ba>
 801da68:	e13d      	b.n	801dce6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801da6a:	23a4      	movs	r3, #164	@ 0xa4
 801da6c:	18fb      	adds	r3, r7, r3
 801da6e:	681b      	ldr	r3, [r3, #0]
 801da70:	2210      	movs	r2, #16
 801da72:	4013      	ands	r3, r2
 801da74:	d100      	bne.n	801da78 <HAL_UART_IRQHandler+0x2c8>
 801da76:	e136      	b.n	801dce6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801da78:	23a0      	movs	r3, #160	@ 0xa0
 801da7a:	18fb      	adds	r3, r7, r3
 801da7c:	681b      	ldr	r3, [r3, #0]
 801da7e:	2210      	movs	r2, #16
 801da80:	4013      	ands	r3, r2
 801da82:	d100      	bne.n	801da86 <HAL_UART_IRQHandler+0x2d6>
 801da84:	e12f      	b.n	801dce6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	2210      	movs	r2, #16
 801da8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	681b      	ldr	r3, [r3, #0]
 801da92:	689b      	ldr	r3, [r3, #8]
 801da94:	2240      	movs	r2, #64	@ 0x40
 801da96:	4013      	ands	r3, r2
 801da98:	2b40      	cmp	r3, #64	@ 0x40
 801da9a:	d000      	beq.n	801da9e <HAL_UART_IRQHandler+0x2ee>
 801da9c:	e0a2      	b.n	801dbe4 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801daa2:	681b      	ldr	r3, [r3, #0]
 801daa4:	685a      	ldr	r2, [r3, #4]
 801daa6:	217e      	movs	r1, #126	@ 0x7e
 801daa8:	187b      	adds	r3, r7, r1
 801daaa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801daac:	187b      	adds	r3, r7, r1
 801daae:	881b      	ldrh	r3, [r3, #0]
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	d100      	bne.n	801dab6 <HAL_UART_IRQHandler+0x306>
 801dab4:	e15c      	b.n	801dd70 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	2258      	movs	r2, #88	@ 0x58
 801daba:	5a9b      	ldrh	r3, [r3, r2]
 801dabc:	187a      	adds	r2, r7, r1
 801dabe:	8812      	ldrh	r2, [r2, #0]
 801dac0:	429a      	cmp	r2, r3
 801dac2:	d300      	bcc.n	801dac6 <HAL_UART_IRQHandler+0x316>
 801dac4:	e154      	b.n	801dd70 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801dac6:	687b      	ldr	r3, [r7, #4]
 801dac8:	187a      	adds	r2, r7, r1
 801daca:	215a      	movs	r1, #90	@ 0x5a
 801dacc:	8812      	ldrh	r2, [r2, #0]
 801dace:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dad4:	681b      	ldr	r3, [r3, #0]
 801dad6:	681b      	ldr	r3, [r3, #0]
 801dad8:	2220      	movs	r2, #32
 801dada:	4013      	ands	r3, r2
 801dadc:	d16f      	bne.n	801dbbe <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dade:	f3ef 8310 	mrs	r3, PRIMASK
 801dae2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801dae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801dae6:	67bb      	str	r3, [r7, #120]	@ 0x78
 801dae8:	2301      	movs	r3, #1
 801daea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801daec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801daee:	f383 8810 	msr	PRIMASK, r3
}
 801daf2:	46c0      	nop			@ (mov r8, r8)
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	681b      	ldr	r3, [r3, #0]
 801daf8:	681a      	ldr	r2, [r3, #0]
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	49a0      	ldr	r1, [pc, #640]	@ (801dd80 <HAL_UART_IRQHandler+0x5d0>)
 801db00:	400a      	ands	r2, r1
 801db02:	601a      	str	r2, [r3, #0]
 801db04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801db06:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801db0a:	f383 8810 	msr	PRIMASK, r3
}
 801db0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db10:	f3ef 8310 	mrs	r3, PRIMASK
 801db14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801db16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801db18:	677b      	str	r3, [r7, #116]	@ 0x74
 801db1a:	2301      	movs	r3, #1
 801db1c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801db20:	f383 8810 	msr	PRIMASK, r3
}
 801db24:	46c0      	nop			@ (mov r8, r8)
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	681b      	ldr	r3, [r3, #0]
 801db2a:	689a      	ldr	r2, [r3, #8]
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	681b      	ldr	r3, [r3, #0]
 801db30:	2101      	movs	r1, #1
 801db32:	438a      	bics	r2, r1
 801db34:	609a      	str	r2, [r3, #8]
 801db36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801db38:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801db3c:	f383 8810 	msr	PRIMASK, r3
}
 801db40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db42:	f3ef 8310 	mrs	r3, PRIMASK
 801db46:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801db48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801db4a:	673b      	str	r3, [r7, #112]	@ 0x70
 801db4c:	2301      	movs	r3, #1
 801db4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801db52:	f383 8810 	msr	PRIMASK, r3
}
 801db56:	46c0      	nop			@ (mov r8, r8)
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	681b      	ldr	r3, [r3, #0]
 801db5c:	689a      	ldr	r2, [r3, #8]
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	2140      	movs	r1, #64	@ 0x40
 801db64:	438a      	bics	r2, r1
 801db66:	609a      	str	r2, [r3, #8]
 801db68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801db6a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801db6e:	f383 8810 	msr	PRIMASK, r3
}
 801db72:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	2280      	movs	r2, #128	@ 0x80
 801db78:	2120      	movs	r1, #32
 801db7a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801db7c:	687b      	ldr	r3, [r7, #4]
 801db7e:	2200      	movs	r2, #0
 801db80:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db82:	f3ef 8310 	mrs	r3, PRIMASK
 801db86:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801db88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801db8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801db8c:	2301      	movs	r3, #1
 801db8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801db92:	f383 8810 	msr	PRIMASK, r3
}
 801db96:	46c0      	nop			@ (mov r8, r8)
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	681b      	ldr	r3, [r3, #0]
 801db9c:	681a      	ldr	r2, [r3, #0]
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	2110      	movs	r1, #16
 801dba4:	438a      	bics	r2, r1
 801dba6:	601a      	str	r2, [r3, #0]
 801dba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801dbaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801dbae:	f383 8810 	msr	PRIMASK, r3
}
 801dbb2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dbb8:	0018      	movs	r0, r3
 801dbba:	f7f7 fbf5 	bl	80153a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801dbbe:	687b      	ldr	r3, [r7, #4]
 801dbc0:	2202      	movs	r2, #2
 801dbc2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801dbc4:	687b      	ldr	r3, [r7, #4]
 801dbc6:	22ac      	movs	r2, #172	@ 0xac
 801dbc8:	589b      	ldr	r3, [r3, r2]
 801dbca:	687a      	ldr	r2, [r7, #4]
 801dbcc:	2158      	movs	r1, #88	@ 0x58
 801dbce:	5a51      	ldrh	r1, [r2, r1]
 801dbd0:	687a      	ldr	r2, [r7, #4]
 801dbd2:	205a      	movs	r0, #90	@ 0x5a
 801dbd4:	5a12      	ldrh	r2, [r2, r0]
 801dbd6:	b292      	uxth	r2, r2
 801dbd8:	1a8a      	subs	r2, r1, r2
 801dbda:	b291      	uxth	r1, r2
 801dbdc:	687a      	ldr	r2, [r7, #4]
 801dbde:	0010      	movs	r0, r2
 801dbe0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801dbe2:	e0c5      	b.n	801dd70 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	2258      	movs	r2, #88	@ 0x58
 801dbe8:	5a99      	ldrh	r1, [r3, r2]
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	225a      	movs	r2, #90	@ 0x5a
 801dbee:	5a9b      	ldrh	r3, [r3, r2]
 801dbf0:	b29a      	uxth	r2, r3
 801dbf2:	208e      	movs	r0, #142	@ 0x8e
 801dbf4:	183b      	adds	r3, r7, r0
 801dbf6:	1a8a      	subs	r2, r1, r2
 801dbf8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	225a      	movs	r2, #90	@ 0x5a
 801dbfe:	5a9b      	ldrh	r3, [r3, r2]
 801dc00:	b29b      	uxth	r3, r3
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d100      	bne.n	801dc08 <HAL_UART_IRQHandler+0x458>
 801dc06:	e0b5      	b.n	801dd74 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801dc08:	183b      	adds	r3, r7, r0
 801dc0a:	881b      	ldrh	r3, [r3, #0]
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	d100      	bne.n	801dc12 <HAL_UART_IRQHandler+0x462>
 801dc10:	e0b0      	b.n	801dd74 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc12:	f3ef 8310 	mrs	r3, PRIMASK
 801dc16:	60fb      	str	r3, [r7, #12]
  return(result);
 801dc18:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dc1a:	2488      	movs	r4, #136	@ 0x88
 801dc1c:	193a      	adds	r2, r7, r4
 801dc1e:	6013      	str	r3, [r2, #0]
 801dc20:	2301      	movs	r3, #1
 801dc22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc24:	693b      	ldr	r3, [r7, #16]
 801dc26:	f383 8810 	msr	PRIMASK, r3
}
 801dc2a:	46c0      	nop			@ (mov r8, r8)
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	681b      	ldr	r3, [r3, #0]
 801dc30:	681a      	ldr	r2, [r3, #0]
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	681b      	ldr	r3, [r3, #0]
 801dc36:	4953      	ldr	r1, [pc, #332]	@ (801dd84 <HAL_UART_IRQHandler+0x5d4>)
 801dc38:	400a      	ands	r2, r1
 801dc3a:	601a      	str	r2, [r3, #0]
 801dc3c:	193b      	adds	r3, r7, r4
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc42:	697b      	ldr	r3, [r7, #20]
 801dc44:	f383 8810 	msr	PRIMASK, r3
}
 801dc48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc4a:	f3ef 8310 	mrs	r3, PRIMASK
 801dc4e:	61bb      	str	r3, [r7, #24]
  return(result);
 801dc50:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dc52:	2484      	movs	r4, #132	@ 0x84
 801dc54:	193a      	adds	r2, r7, r4
 801dc56:	6013      	str	r3, [r2, #0]
 801dc58:	2301      	movs	r3, #1
 801dc5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc5c:	69fb      	ldr	r3, [r7, #28]
 801dc5e:	f383 8810 	msr	PRIMASK, r3
}
 801dc62:	46c0      	nop			@ (mov r8, r8)
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	681b      	ldr	r3, [r3, #0]
 801dc68:	689a      	ldr	r2, [r3, #8]
 801dc6a:	687b      	ldr	r3, [r7, #4]
 801dc6c:	681b      	ldr	r3, [r3, #0]
 801dc6e:	2101      	movs	r1, #1
 801dc70:	438a      	bics	r2, r1
 801dc72:	609a      	str	r2, [r3, #8]
 801dc74:	193b      	adds	r3, r7, r4
 801dc76:	681b      	ldr	r3, [r3, #0]
 801dc78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc7a:	6a3b      	ldr	r3, [r7, #32]
 801dc7c:	f383 8810 	msr	PRIMASK, r3
}
 801dc80:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801dc82:	687b      	ldr	r3, [r7, #4]
 801dc84:	2280      	movs	r2, #128	@ 0x80
 801dc86:	2120      	movs	r1, #32
 801dc88:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	2200      	movs	r2, #0
 801dc8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	2200      	movs	r2, #0
 801dc94:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc96:	f3ef 8310 	mrs	r3, PRIMASK
 801dc9a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801dc9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dc9e:	2480      	movs	r4, #128	@ 0x80
 801dca0:	193a      	adds	r2, r7, r4
 801dca2:	6013      	str	r3, [r2, #0]
 801dca4:	2301      	movs	r3, #1
 801dca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dcaa:	f383 8810 	msr	PRIMASK, r3
}
 801dcae:	46c0      	nop			@ (mov r8, r8)
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	681a      	ldr	r2, [r3, #0]
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	681b      	ldr	r3, [r3, #0]
 801dcba:	2110      	movs	r1, #16
 801dcbc:	438a      	bics	r2, r1
 801dcbe:	601a      	str	r2, [r3, #0]
 801dcc0:	193b      	adds	r3, r7, r4
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dcc8:	f383 8810 	msr	PRIMASK, r3
}
 801dccc:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	2202      	movs	r2, #2
 801dcd2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	22ac      	movs	r2, #172	@ 0xac
 801dcd8:	589b      	ldr	r3, [r3, r2]
 801dcda:	183a      	adds	r2, r7, r0
 801dcdc:	8811      	ldrh	r1, [r2, #0]
 801dcde:	687a      	ldr	r2, [r7, #4]
 801dce0:	0010      	movs	r0, r2
 801dce2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801dce4:	e046      	b.n	801dd74 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801dce6:	23a4      	movs	r3, #164	@ 0xa4
 801dce8:	18fb      	adds	r3, r7, r3
 801dcea:	681a      	ldr	r2, [r3, #0]
 801dcec:	2380      	movs	r3, #128	@ 0x80
 801dcee:	035b      	lsls	r3, r3, #13
 801dcf0:	4013      	ands	r3, r2
 801dcf2:	d012      	beq.n	801dd1a <HAL_UART_IRQHandler+0x56a>
 801dcf4:	239c      	movs	r3, #156	@ 0x9c
 801dcf6:	18fb      	adds	r3, r7, r3
 801dcf8:	681a      	ldr	r2, [r3, #0]
 801dcfa:	2380      	movs	r3, #128	@ 0x80
 801dcfc:	03db      	lsls	r3, r3, #15
 801dcfe:	4013      	ands	r3, r2
 801dd00:	d00b      	beq.n	801dd1a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	2280      	movs	r2, #128	@ 0x80
 801dd08:	0352      	lsls	r2, r2, #13
 801dd0a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	22a8      	movs	r2, #168	@ 0xa8
 801dd10:	589b      	ldr	r3, [r3, r2]
 801dd12:	687a      	ldr	r2, [r7, #4]
 801dd14:	0010      	movs	r0, r2
 801dd16:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801dd18:	e02f      	b.n	801dd7a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801dd1a:	23a4      	movs	r3, #164	@ 0xa4
 801dd1c:	18fb      	adds	r3, r7, r3
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	2280      	movs	r2, #128	@ 0x80
 801dd22:	4013      	ands	r3, r2
 801dd24:	d00f      	beq.n	801dd46 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801dd26:	23a0      	movs	r3, #160	@ 0xa0
 801dd28:	18fb      	adds	r3, r7, r3
 801dd2a:	681b      	ldr	r3, [r3, #0]
 801dd2c:	2280      	movs	r2, #128	@ 0x80
 801dd2e:	4013      	ands	r3, r2
 801dd30:	d009      	beq.n	801dd46 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dd36:	2b00      	cmp	r3, #0
 801dd38:	d01e      	beq.n	801dd78 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dd3e:	687a      	ldr	r2, [r7, #4]
 801dd40:	0010      	movs	r0, r2
 801dd42:	4798      	blx	r3
    }
    return;
 801dd44:	e018      	b.n	801dd78 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801dd46:	23a4      	movs	r3, #164	@ 0xa4
 801dd48:	18fb      	adds	r3, r7, r3
 801dd4a:	681b      	ldr	r3, [r3, #0]
 801dd4c:	2240      	movs	r2, #64	@ 0x40
 801dd4e:	4013      	ands	r3, r2
 801dd50:	d013      	beq.n	801dd7a <HAL_UART_IRQHandler+0x5ca>
 801dd52:	23a0      	movs	r3, #160	@ 0xa0
 801dd54:	18fb      	adds	r3, r7, r3
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	2240      	movs	r2, #64	@ 0x40
 801dd5a:	4013      	ands	r3, r2
 801dd5c:	d00d      	beq.n	801dd7a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801dd5e:	687b      	ldr	r3, [r7, #4]
 801dd60:	0018      	movs	r0, r3
 801dd62:	f001 f862 	bl	801ee2a <UART_EndTransmit_IT>
    return;
 801dd66:	e008      	b.n	801dd7a <HAL_UART_IRQHandler+0x5ca>
      return;
 801dd68:	46c0      	nop			@ (mov r8, r8)
 801dd6a:	e006      	b.n	801dd7a <HAL_UART_IRQHandler+0x5ca>
    return;
 801dd6c:	46c0      	nop			@ (mov r8, r8)
 801dd6e:	e004      	b.n	801dd7a <HAL_UART_IRQHandler+0x5ca>
      return;
 801dd70:	46c0      	nop			@ (mov r8, r8)
 801dd72:	e002      	b.n	801dd7a <HAL_UART_IRQHandler+0x5ca>
      return;
 801dd74:	46c0      	nop			@ (mov r8, r8)
 801dd76:	e000      	b.n	801dd7a <HAL_UART_IRQHandler+0x5ca>
    return;
 801dd78:	46c0      	nop			@ (mov r8, r8)
  }

}
 801dd7a:	46bd      	mov	sp, r7
 801dd7c:	b02b      	add	sp, #172	@ 0xac
 801dd7e:	bd90      	pop	{r4, r7, pc}
 801dd80:	fffffeff 	.word	0xfffffeff
 801dd84:	fffffedf 	.word	0xfffffedf

0801dd88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801dd88:	b580      	push	{r7, lr}
 801dd8a:	b082      	sub	sp, #8
 801dd8c:	af00      	add	r7, sp, #0
 801dd8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801dd90:	46c0      	nop			@ (mov r8, r8)
 801dd92:	46bd      	mov	sp, r7
 801dd94:	b002      	add	sp, #8
 801dd96:	bd80      	pop	{r7, pc}

0801dd98 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801dd98:	b580      	push	{r7, lr}
 801dd9a:	b082      	sub	sp, #8
 801dd9c:	af00      	add	r7, sp, #0
 801dd9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801dda0:	46c0      	nop			@ (mov r8, r8)
 801dda2:	46bd      	mov	sp, r7
 801dda4:	b002      	add	sp, #8
 801dda6:	bd80      	pop	{r7, pc}

0801dda8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801dda8:	b580      	push	{r7, lr}
 801ddaa:	b082      	sub	sp, #8
 801ddac:	af00      	add	r7, sp, #0
 801ddae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801ddb0:	46c0      	nop			@ (mov r8, r8)
 801ddb2:	46bd      	mov	sp, r7
 801ddb4:	b002      	add	sp, #8
 801ddb6:	bd80      	pop	{r7, pc}

0801ddb8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801ddb8:	b580      	push	{r7, lr}
 801ddba:	b082      	sub	sp, #8
 801ddbc:	af00      	add	r7, sp, #0
 801ddbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801ddc0:	46c0      	nop			@ (mov r8, r8)
 801ddc2:	46bd      	mov	sp, r7
 801ddc4:	b002      	add	sp, #8
 801ddc6:	bd80      	pop	{r7, pc}

0801ddc8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801ddc8:	b580      	push	{r7, lr}
 801ddca:	b082      	sub	sp, #8
 801ddcc:	af00      	add	r7, sp, #0
 801ddce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801ddd0:	46c0      	nop			@ (mov r8, r8)
 801ddd2:	46bd      	mov	sp, r7
 801ddd4:	b002      	add	sp, #8
 801ddd6:	bd80      	pop	{r7, pc}

0801ddd8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801ddd8:	b580      	push	{r7, lr}
 801ddda:	b082      	sub	sp, #8
 801dddc:	af00      	add	r7, sp, #0
 801ddde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801dde0:	46c0      	nop			@ (mov r8, r8)
 801dde2:	46bd      	mov	sp, r7
 801dde4:	b002      	add	sp, #8
 801dde6:	bd80      	pop	{r7, pc}

0801dde8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801dde8:	b580      	push	{r7, lr}
 801ddea:	b082      	sub	sp, #8
 801ddec:	af00      	add	r7, sp, #0
 801ddee:	6078      	str	r0, [r7, #4]
 801ddf0:	000a      	movs	r2, r1
 801ddf2:	1cbb      	adds	r3, r7, #2
 801ddf4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801ddf6:	46c0      	nop			@ (mov r8, r8)
 801ddf8:	46bd      	mov	sp, r7
 801ddfa:	b002      	add	sp, #8
 801ddfc:	bd80      	pop	{r7, pc}
	...

0801de00 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801de00:	b580      	push	{r7, lr}
 801de02:	b082      	sub	sp, #8
 801de04:	af00      	add	r7, sp, #0
 801de06:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	2188      	movs	r1, #136	@ 0x88
 801de0c:	4a14      	ldr	r2, [pc, #80]	@ (801de60 <UART_InitCallbacksToDefault+0x60>)
 801de0e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	218c      	movs	r1, #140	@ 0x8c
 801de14:	4a13      	ldr	r2, [pc, #76]	@ (801de64 <UART_InitCallbacksToDefault+0x64>)
 801de16:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	2190      	movs	r1, #144	@ 0x90
 801de1c:	4a12      	ldr	r2, [pc, #72]	@ (801de68 <UART_InitCallbacksToDefault+0x68>)
 801de1e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	2194      	movs	r1, #148	@ 0x94
 801de24:	4a11      	ldr	r2, [pc, #68]	@ (801de6c <UART_InitCallbacksToDefault+0x6c>)
 801de26:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	2198      	movs	r1, #152	@ 0x98
 801de2c:	4a10      	ldr	r2, [pc, #64]	@ (801de70 <UART_InitCallbacksToDefault+0x70>)
 801de2e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	219c      	movs	r1, #156	@ 0x9c
 801de34:	4a0f      	ldr	r2, [pc, #60]	@ (801de74 <UART_InitCallbacksToDefault+0x74>)
 801de36:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	21a0      	movs	r1, #160	@ 0xa0
 801de3c:	4a0e      	ldr	r2, [pc, #56]	@ (801de78 <UART_InitCallbacksToDefault+0x78>)
 801de3e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	21a4      	movs	r1, #164	@ 0xa4
 801de44:	4a0d      	ldr	r2, [pc, #52]	@ (801de7c <UART_InitCallbacksToDefault+0x7c>)
 801de46:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	21a8      	movs	r1, #168	@ 0xa8
 801de4c:	4a0c      	ldr	r2, [pc, #48]	@ (801de80 <UART_InitCallbacksToDefault+0x80>)
 801de4e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801de50:	687b      	ldr	r3, [r7, #4]
 801de52:	21ac      	movs	r1, #172	@ 0xac
 801de54:	4a0b      	ldr	r2, [pc, #44]	@ (801de84 <UART_InitCallbacksToDefault+0x84>)
 801de56:	505a      	str	r2, [r3, r1]

}
 801de58:	46c0      	nop			@ (mov r8, r8)
 801de5a:	46bd      	mov	sp, r7
 801de5c:	b002      	add	sp, #8
 801de5e:	bd80      	pop	{r7, pc}
 801de60:	0801dd99 	.word	0x0801dd99
 801de64:	0801dd89 	.word	0x0801dd89
 801de68:	0801dda9 	.word	0x0801dda9
 801de6c:	0800d33d 	.word	0x0800d33d
 801de70:	0800511d 	.word	0x0800511d
 801de74:	0801ddb9 	.word	0x0801ddb9
 801de78:	0801ddc9 	.word	0x0801ddc9
 801de7c:	0801ddd9 	.word	0x0801ddd9
 801de80:	0801f21d 	.word	0x0801f21d
 801de84:	0801dde9 	.word	0x0801dde9

0801de88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801de88:	b5b0      	push	{r4, r5, r7, lr}
 801de8a:	b08e      	sub	sp, #56	@ 0x38
 801de8c:	af00      	add	r7, sp, #0
 801de8e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801de90:	231a      	movs	r3, #26
 801de92:	2218      	movs	r2, #24
 801de94:	189b      	adds	r3, r3, r2
 801de96:	19db      	adds	r3, r3, r7
 801de98:	2200      	movs	r2, #0
 801de9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801de9c:	69fb      	ldr	r3, [r7, #28]
 801de9e:	689a      	ldr	r2, [r3, #8]
 801dea0:	69fb      	ldr	r3, [r7, #28]
 801dea2:	691b      	ldr	r3, [r3, #16]
 801dea4:	431a      	orrs	r2, r3
 801dea6:	69fb      	ldr	r3, [r7, #28]
 801dea8:	695b      	ldr	r3, [r3, #20]
 801deaa:	431a      	orrs	r2, r3
 801deac:	69fb      	ldr	r3, [r7, #28]
 801deae:	69db      	ldr	r3, [r3, #28]
 801deb0:	4313      	orrs	r3, r2
 801deb2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801deb4:	69fb      	ldr	r3, [r7, #28]
 801deb6:	681b      	ldr	r3, [r3, #0]
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	4ac3      	ldr	r2, [pc, #780]	@ (801e1c8 <UART_SetConfig+0x340>)
 801debc:	4013      	ands	r3, r2
 801debe:	0019      	movs	r1, r3
 801dec0:	69fb      	ldr	r3, [r7, #28]
 801dec2:	681b      	ldr	r3, [r3, #0]
 801dec4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801dec6:	430a      	orrs	r2, r1
 801dec8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801deca:	69fb      	ldr	r3, [r7, #28]
 801decc:	681b      	ldr	r3, [r3, #0]
 801dece:	685b      	ldr	r3, [r3, #4]
 801ded0:	4abe      	ldr	r2, [pc, #760]	@ (801e1cc <UART_SetConfig+0x344>)
 801ded2:	4013      	ands	r3, r2
 801ded4:	0019      	movs	r1, r3
 801ded6:	69fb      	ldr	r3, [r7, #28]
 801ded8:	68da      	ldr	r2, [r3, #12]
 801deda:	69fb      	ldr	r3, [r7, #28]
 801dedc:	681b      	ldr	r3, [r3, #0]
 801dede:	430a      	orrs	r2, r1
 801dee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801dee2:	69fb      	ldr	r3, [r7, #28]
 801dee4:	699b      	ldr	r3, [r3, #24]
 801dee6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801dee8:	69fb      	ldr	r3, [r7, #28]
 801deea:	681b      	ldr	r3, [r3, #0]
 801deec:	4ab8      	ldr	r2, [pc, #736]	@ (801e1d0 <UART_SetConfig+0x348>)
 801deee:	4293      	cmp	r3, r2
 801def0:	d004      	beq.n	801defc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801def2:	69fb      	ldr	r3, [r7, #28]
 801def4:	6a1b      	ldr	r3, [r3, #32]
 801def6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801def8:	4313      	orrs	r3, r2
 801defa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801defc:	69fb      	ldr	r3, [r7, #28]
 801defe:	681b      	ldr	r3, [r3, #0]
 801df00:	689b      	ldr	r3, [r3, #8]
 801df02:	4ab4      	ldr	r2, [pc, #720]	@ (801e1d4 <UART_SetConfig+0x34c>)
 801df04:	4013      	ands	r3, r2
 801df06:	0019      	movs	r1, r3
 801df08:	69fb      	ldr	r3, [r7, #28]
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801df0e:	430a      	orrs	r2, r1
 801df10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801df12:	69fb      	ldr	r3, [r7, #28]
 801df14:	681b      	ldr	r3, [r3, #0]
 801df16:	4ab0      	ldr	r2, [pc, #704]	@ (801e1d8 <UART_SetConfig+0x350>)
 801df18:	4293      	cmp	r3, r2
 801df1a:	d131      	bne.n	801df80 <UART_SetConfig+0xf8>
 801df1c:	4baf      	ldr	r3, [pc, #700]	@ (801e1dc <UART_SetConfig+0x354>)
 801df1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801df20:	2203      	movs	r2, #3
 801df22:	4013      	ands	r3, r2
 801df24:	2b03      	cmp	r3, #3
 801df26:	d01d      	beq.n	801df64 <UART_SetConfig+0xdc>
 801df28:	d823      	bhi.n	801df72 <UART_SetConfig+0xea>
 801df2a:	2b02      	cmp	r3, #2
 801df2c:	d00c      	beq.n	801df48 <UART_SetConfig+0xc0>
 801df2e:	d820      	bhi.n	801df72 <UART_SetConfig+0xea>
 801df30:	2b00      	cmp	r3, #0
 801df32:	d002      	beq.n	801df3a <UART_SetConfig+0xb2>
 801df34:	2b01      	cmp	r3, #1
 801df36:	d00e      	beq.n	801df56 <UART_SetConfig+0xce>
 801df38:	e01b      	b.n	801df72 <UART_SetConfig+0xea>
 801df3a:	231b      	movs	r3, #27
 801df3c:	2218      	movs	r2, #24
 801df3e:	189b      	adds	r3, r3, r2
 801df40:	19db      	adds	r3, r3, r7
 801df42:	2201      	movs	r2, #1
 801df44:	701a      	strb	r2, [r3, #0]
 801df46:	e0b4      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801df48:	231b      	movs	r3, #27
 801df4a:	2218      	movs	r2, #24
 801df4c:	189b      	adds	r3, r3, r2
 801df4e:	19db      	adds	r3, r3, r7
 801df50:	2202      	movs	r2, #2
 801df52:	701a      	strb	r2, [r3, #0]
 801df54:	e0ad      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801df56:	231b      	movs	r3, #27
 801df58:	2218      	movs	r2, #24
 801df5a:	189b      	adds	r3, r3, r2
 801df5c:	19db      	adds	r3, r3, r7
 801df5e:	2204      	movs	r2, #4
 801df60:	701a      	strb	r2, [r3, #0]
 801df62:	e0a6      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801df64:	231b      	movs	r3, #27
 801df66:	2218      	movs	r2, #24
 801df68:	189b      	adds	r3, r3, r2
 801df6a:	19db      	adds	r3, r3, r7
 801df6c:	2208      	movs	r2, #8
 801df6e:	701a      	strb	r2, [r3, #0]
 801df70:	e09f      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801df72:	231b      	movs	r3, #27
 801df74:	2218      	movs	r2, #24
 801df76:	189b      	adds	r3, r3, r2
 801df78:	19db      	adds	r3, r3, r7
 801df7a:	2210      	movs	r2, #16
 801df7c:	701a      	strb	r2, [r3, #0]
 801df7e:	e098      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801df80:	69fb      	ldr	r3, [r7, #28]
 801df82:	681b      	ldr	r3, [r3, #0]
 801df84:	4a96      	ldr	r2, [pc, #600]	@ (801e1e0 <UART_SetConfig+0x358>)
 801df86:	4293      	cmp	r3, r2
 801df88:	d131      	bne.n	801dfee <UART_SetConfig+0x166>
 801df8a:	4b94      	ldr	r3, [pc, #592]	@ (801e1dc <UART_SetConfig+0x354>)
 801df8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801df8e:	220c      	movs	r2, #12
 801df90:	4013      	ands	r3, r2
 801df92:	2b0c      	cmp	r3, #12
 801df94:	d01d      	beq.n	801dfd2 <UART_SetConfig+0x14a>
 801df96:	d823      	bhi.n	801dfe0 <UART_SetConfig+0x158>
 801df98:	2b08      	cmp	r3, #8
 801df9a:	d00c      	beq.n	801dfb6 <UART_SetConfig+0x12e>
 801df9c:	d820      	bhi.n	801dfe0 <UART_SetConfig+0x158>
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d002      	beq.n	801dfa8 <UART_SetConfig+0x120>
 801dfa2:	2b04      	cmp	r3, #4
 801dfa4:	d00e      	beq.n	801dfc4 <UART_SetConfig+0x13c>
 801dfa6:	e01b      	b.n	801dfe0 <UART_SetConfig+0x158>
 801dfa8:	231b      	movs	r3, #27
 801dfaa:	2218      	movs	r2, #24
 801dfac:	189b      	adds	r3, r3, r2
 801dfae:	19db      	adds	r3, r3, r7
 801dfb0:	2200      	movs	r2, #0
 801dfb2:	701a      	strb	r2, [r3, #0]
 801dfb4:	e07d      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801dfb6:	231b      	movs	r3, #27
 801dfb8:	2218      	movs	r2, #24
 801dfba:	189b      	adds	r3, r3, r2
 801dfbc:	19db      	adds	r3, r3, r7
 801dfbe:	2202      	movs	r2, #2
 801dfc0:	701a      	strb	r2, [r3, #0]
 801dfc2:	e076      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801dfc4:	231b      	movs	r3, #27
 801dfc6:	2218      	movs	r2, #24
 801dfc8:	189b      	adds	r3, r3, r2
 801dfca:	19db      	adds	r3, r3, r7
 801dfcc:	2204      	movs	r2, #4
 801dfce:	701a      	strb	r2, [r3, #0]
 801dfd0:	e06f      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801dfd2:	231b      	movs	r3, #27
 801dfd4:	2218      	movs	r2, #24
 801dfd6:	189b      	adds	r3, r3, r2
 801dfd8:	19db      	adds	r3, r3, r7
 801dfda:	2208      	movs	r2, #8
 801dfdc:	701a      	strb	r2, [r3, #0]
 801dfde:	e068      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801dfe0:	231b      	movs	r3, #27
 801dfe2:	2218      	movs	r2, #24
 801dfe4:	189b      	adds	r3, r3, r2
 801dfe6:	19db      	adds	r3, r3, r7
 801dfe8:	2210      	movs	r2, #16
 801dfea:	701a      	strb	r2, [r3, #0]
 801dfec:	e061      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801dfee:	69fb      	ldr	r3, [r7, #28]
 801dff0:	681b      	ldr	r3, [r3, #0]
 801dff2:	4a7c      	ldr	r2, [pc, #496]	@ (801e1e4 <UART_SetConfig+0x35c>)
 801dff4:	4293      	cmp	r3, r2
 801dff6:	d106      	bne.n	801e006 <UART_SetConfig+0x17e>
 801dff8:	231b      	movs	r3, #27
 801dffa:	2218      	movs	r2, #24
 801dffc:	189b      	adds	r3, r3, r2
 801dffe:	19db      	adds	r3, r3, r7
 801e000:	2200      	movs	r2, #0
 801e002:	701a      	strb	r2, [r3, #0]
 801e004:	e055      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801e006:	69fb      	ldr	r3, [r7, #28]
 801e008:	681b      	ldr	r3, [r3, #0]
 801e00a:	4a77      	ldr	r2, [pc, #476]	@ (801e1e8 <UART_SetConfig+0x360>)
 801e00c:	4293      	cmp	r3, r2
 801e00e:	d106      	bne.n	801e01e <UART_SetConfig+0x196>
 801e010:	231b      	movs	r3, #27
 801e012:	2218      	movs	r2, #24
 801e014:	189b      	adds	r3, r3, r2
 801e016:	19db      	adds	r3, r3, r7
 801e018:	2200      	movs	r2, #0
 801e01a:	701a      	strb	r2, [r3, #0]
 801e01c:	e049      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801e01e:	69fb      	ldr	r3, [r7, #28]
 801e020:	681b      	ldr	r3, [r3, #0]
 801e022:	4a6b      	ldr	r2, [pc, #428]	@ (801e1d0 <UART_SetConfig+0x348>)
 801e024:	4293      	cmp	r3, r2
 801e026:	d13e      	bne.n	801e0a6 <UART_SetConfig+0x21e>
 801e028:	4b6c      	ldr	r3, [pc, #432]	@ (801e1dc <UART_SetConfig+0x354>)
 801e02a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e02c:	23c0      	movs	r3, #192	@ 0xc0
 801e02e:	011b      	lsls	r3, r3, #4
 801e030:	4013      	ands	r3, r2
 801e032:	22c0      	movs	r2, #192	@ 0xc0
 801e034:	0112      	lsls	r2, r2, #4
 801e036:	4293      	cmp	r3, r2
 801e038:	d027      	beq.n	801e08a <UART_SetConfig+0x202>
 801e03a:	22c0      	movs	r2, #192	@ 0xc0
 801e03c:	0112      	lsls	r2, r2, #4
 801e03e:	4293      	cmp	r3, r2
 801e040:	d82a      	bhi.n	801e098 <UART_SetConfig+0x210>
 801e042:	2280      	movs	r2, #128	@ 0x80
 801e044:	0112      	lsls	r2, r2, #4
 801e046:	4293      	cmp	r3, r2
 801e048:	d011      	beq.n	801e06e <UART_SetConfig+0x1e6>
 801e04a:	2280      	movs	r2, #128	@ 0x80
 801e04c:	0112      	lsls	r2, r2, #4
 801e04e:	4293      	cmp	r3, r2
 801e050:	d822      	bhi.n	801e098 <UART_SetConfig+0x210>
 801e052:	2b00      	cmp	r3, #0
 801e054:	d004      	beq.n	801e060 <UART_SetConfig+0x1d8>
 801e056:	2280      	movs	r2, #128	@ 0x80
 801e058:	00d2      	lsls	r2, r2, #3
 801e05a:	4293      	cmp	r3, r2
 801e05c:	d00e      	beq.n	801e07c <UART_SetConfig+0x1f4>
 801e05e:	e01b      	b.n	801e098 <UART_SetConfig+0x210>
 801e060:	231b      	movs	r3, #27
 801e062:	2218      	movs	r2, #24
 801e064:	189b      	adds	r3, r3, r2
 801e066:	19db      	adds	r3, r3, r7
 801e068:	2200      	movs	r2, #0
 801e06a:	701a      	strb	r2, [r3, #0]
 801e06c:	e021      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801e06e:	231b      	movs	r3, #27
 801e070:	2218      	movs	r2, #24
 801e072:	189b      	adds	r3, r3, r2
 801e074:	19db      	adds	r3, r3, r7
 801e076:	2202      	movs	r2, #2
 801e078:	701a      	strb	r2, [r3, #0]
 801e07a:	e01a      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801e07c:	231b      	movs	r3, #27
 801e07e:	2218      	movs	r2, #24
 801e080:	189b      	adds	r3, r3, r2
 801e082:	19db      	adds	r3, r3, r7
 801e084:	2204      	movs	r2, #4
 801e086:	701a      	strb	r2, [r3, #0]
 801e088:	e013      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801e08a:	231b      	movs	r3, #27
 801e08c:	2218      	movs	r2, #24
 801e08e:	189b      	adds	r3, r3, r2
 801e090:	19db      	adds	r3, r3, r7
 801e092:	2208      	movs	r2, #8
 801e094:	701a      	strb	r2, [r3, #0]
 801e096:	e00c      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801e098:	231b      	movs	r3, #27
 801e09a:	2218      	movs	r2, #24
 801e09c:	189b      	adds	r3, r3, r2
 801e09e:	19db      	adds	r3, r3, r7
 801e0a0:	2210      	movs	r2, #16
 801e0a2:	701a      	strb	r2, [r3, #0]
 801e0a4:	e005      	b.n	801e0b2 <UART_SetConfig+0x22a>
 801e0a6:	231b      	movs	r3, #27
 801e0a8:	2218      	movs	r2, #24
 801e0aa:	189b      	adds	r3, r3, r2
 801e0ac:	19db      	adds	r3, r3, r7
 801e0ae:	2210      	movs	r2, #16
 801e0b0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e0b2:	69fb      	ldr	r3, [r7, #28]
 801e0b4:	681b      	ldr	r3, [r3, #0]
 801e0b6:	4a46      	ldr	r2, [pc, #280]	@ (801e1d0 <UART_SetConfig+0x348>)
 801e0b8:	4293      	cmp	r3, r2
 801e0ba:	d000      	beq.n	801e0be <UART_SetConfig+0x236>
 801e0bc:	e09a      	b.n	801e1f4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e0be:	231b      	movs	r3, #27
 801e0c0:	2218      	movs	r2, #24
 801e0c2:	189b      	adds	r3, r3, r2
 801e0c4:	19db      	adds	r3, r3, r7
 801e0c6:	781b      	ldrb	r3, [r3, #0]
 801e0c8:	2b08      	cmp	r3, #8
 801e0ca:	d01d      	beq.n	801e108 <UART_SetConfig+0x280>
 801e0cc:	dc20      	bgt.n	801e110 <UART_SetConfig+0x288>
 801e0ce:	2b04      	cmp	r3, #4
 801e0d0:	d015      	beq.n	801e0fe <UART_SetConfig+0x276>
 801e0d2:	dc1d      	bgt.n	801e110 <UART_SetConfig+0x288>
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d002      	beq.n	801e0de <UART_SetConfig+0x256>
 801e0d8:	2b02      	cmp	r3, #2
 801e0da:	d005      	beq.n	801e0e8 <UART_SetConfig+0x260>
 801e0dc:	e018      	b.n	801e110 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e0de:	f7fd fe2d 	bl	801bd3c <HAL_RCC_GetPCLK1Freq>
 801e0e2:	0003      	movs	r3, r0
 801e0e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e0e6:	e01c      	b.n	801e122 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e0e8:	4b3c      	ldr	r3, [pc, #240]	@ (801e1dc <UART_SetConfig+0x354>)
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	2210      	movs	r2, #16
 801e0ee:	4013      	ands	r3, r2
 801e0f0:	d002      	beq.n	801e0f8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e0f2:	4b3e      	ldr	r3, [pc, #248]	@ (801e1ec <UART_SetConfig+0x364>)
 801e0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e0f6:	e014      	b.n	801e122 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801e0f8:	4b3d      	ldr	r3, [pc, #244]	@ (801e1f0 <UART_SetConfig+0x368>)
 801e0fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e0fc:	e011      	b.n	801e122 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e0fe:	f7fd fd6d 	bl	801bbdc <HAL_RCC_GetSysClockFreq>
 801e102:	0003      	movs	r3, r0
 801e104:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e106:	e00c      	b.n	801e122 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e108:	2380      	movs	r3, #128	@ 0x80
 801e10a:	021b      	lsls	r3, r3, #8
 801e10c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e10e:	e008      	b.n	801e122 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801e110:	2300      	movs	r3, #0
 801e112:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e114:	231a      	movs	r3, #26
 801e116:	2218      	movs	r2, #24
 801e118:	189b      	adds	r3, r3, r2
 801e11a:	19db      	adds	r3, r3, r7
 801e11c:	2201      	movs	r2, #1
 801e11e:	701a      	strb	r2, [r3, #0]
        break;
 801e120:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e124:	2b00      	cmp	r3, #0
 801e126:	d100      	bne.n	801e12a <UART_SetConfig+0x2a2>
 801e128:	e133      	b.n	801e392 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e12a:	69fb      	ldr	r3, [r7, #28]
 801e12c:	685a      	ldr	r2, [r3, #4]
 801e12e:	0013      	movs	r3, r2
 801e130:	005b      	lsls	r3, r3, #1
 801e132:	189b      	adds	r3, r3, r2
 801e134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e136:	429a      	cmp	r2, r3
 801e138:	d305      	bcc.n	801e146 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801e13a:	69fb      	ldr	r3, [r7, #28]
 801e13c:	685b      	ldr	r3, [r3, #4]
 801e13e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e140:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e142:	429a      	cmp	r2, r3
 801e144:	d906      	bls.n	801e154 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801e146:	231a      	movs	r3, #26
 801e148:	2218      	movs	r2, #24
 801e14a:	189b      	adds	r3, r3, r2
 801e14c:	19db      	adds	r3, r3, r7
 801e14e:	2201      	movs	r2, #1
 801e150:	701a      	strb	r2, [r3, #0]
 801e152:	e11e      	b.n	801e392 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801e154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e156:	613b      	str	r3, [r7, #16]
 801e158:	2300      	movs	r3, #0
 801e15a:	617b      	str	r3, [r7, #20]
 801e15c:	6939      	ldr	r1, [r7, #16]
 801e15e:	697a      	ldr	r2, [r7, #20]
 801e160:	000b      	movs	r3, r1
 801e162:	0e1b      	lsrs	r3, r3, #24
 801e164:	0010      	movs	r0, r2
 801e166:	0205      	lsls	r5, r0, #8
 801e168:	431d      	orrs	r5, r3
 801e16a:	000b      	movs	r3, r1
 801e16c:	021c      	lsls	r4, r3, #8
 801e16e:	69fb      	ldr	r3, [r7, #28]
 801e170:	685b      	ldr	r3, [r3, #4]
 801e172:	085b      	lsrs	r3, r3, #1
 801e174:	60bb      	str	r3, [r7, #8]
 801e176:	2300      	movs	r3, #0
 801e178:	60fb      	str	r3, [r7, #12]
 801e17a:	68b8      	ldr	r0, [r7, #8]
 801e17c:	68f9      	ldr	r1, [r7, #12]
 801e17e:	1900      	adds	r0, r0, r4
 801e180:	4169      	adcs	r1, r5
 801e182:	69fb      	ldr	r3, [r7, #28]
 801e184:	685b      	ldr	r3, [r3, #4]
 801e186:	603b      	str	r3, [r7, #0]
 801e188:	2300      	movs	r3, #0
 801e18a:	607b      	str	r3, [r7, #4]
 801e18c:	683a      	ldr	r2, [r7, #0]
 801e18e:	687b      	ldr	r3, [r7, #4]
 801e190:	f7e2 f9f6 	bl	8000580 <__aeabi_uldivmod>
 801e194:	0002      	movs	r2, r0
 801e196:	000b      	movs	r3, r1
 801e198:	0013      	movs	r3, r2
 801e19a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e19c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e19e:	23c0      	movs	r3, #192	@ 0xc0
 801e1a0:	009b      	lsls	r3, r3, #2
 801e1a2:	429a      	cmp	r2, r3
 801e1a4:	d309      	bcc.n	801e1ba <UART_SetConfig+0x332>
 801e1a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e1a8:	2380      	movs	r3, #128	@ 0x80
 801e1aa:	035b      	lsls	r3, r3, #13
 801e1ac:	429a      	cmp	r2, r3
 801e1ae:	d204      	bcs.n	801e1ba <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801e1b0:	69fb      	ldr	r3, [r7, #28]
 801e1b2:	681b      	ldr	r3, [r3, #0]
 801e1b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e1b6:	60da      	str	r2, [r3, #12]
 801e1b8:	e0eb      	b.n	801e392 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801e1ba:	231a      	movs	r3, #26
 801e1bc:	2218      	movs	r2, #24
 801e1be:	189b      	adds	r3, r3, r2
 801e1c0:	19db      	adds	r3, r3, r7
 801e1c2:	2201      	movs	r2, #1
 801e1c4:	701a      	strb	r2, [r3, #0]
 801e1c6:	e0e4      	b.n	801e392 <UART_SetConfig+0x50a>
 801e1c8:	efff69f3 	.word	0xefff69f3
 801e1cc:	ffffcfff 	.word	0xffffcfff
 801e1d0:	40004800 	.word	0x40004800
 801e1d4:	fffff4ff 	.word	0xfffff4ff
 801e1d8:	40013800 	.word	0x40013800
 801e1dc:	40021000 	.word	0x40021000
 801e1e0:	40004400 	.word	0x40004400
 801e1e4:	40004c00 	.word	0x40004c00
 801e1e8:	40005000 	.word	0x40005000
 801e1ec:	003d0900 	.word	0x003d0900
 801e1f0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e1f4:	69fb      	ldr	r3, [r7, #28]
 801e1f6:	69da      	ldr	r2, [r3, #28]
 801e1f8:	2380      	movs	r3, #128	@ 0x80
 801e1fa:	021b      	lsls	r3, r3, #8
 801e1fc:	429a      	cmp	r2, r3
 801e1fe:	d000      	beq.n	801e202 <UART_SetConfig+0x37a>
 801e200:	e070      	b.n	801e2e4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801e202:	231b      	movs	r3, #27
 801e204:	2218      	movs	r2, #24
 801e206:	189b      	adds	r3, r3, r2
 801e208:	19db      	adds	r3, r3, r7
 801e20a:	781b      	ldrb	r3, [r3, #0]
 801e20c:	2b08      	cmp	r3, #8
 801e20e:	d822      	bhi.n	801e256 <UART_SetConfig+0x3ce>
 801e210:	009a      	lsls	r2, r3, #2
 801e212:	4b67      	ldr	r3, [pc, #412]	@ (801e3b0 <UART_SetConfig+0x528>)
 801e214:	18d3      	adds	r3, r2, r3
 801e216:	681b      	ldr	r3, [r3, #0]
 801e218:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e21a:	f7fd fd8f 	bl	801bd3c <HAL_RCC_GetPCLK1Freq>
 801e21e:	0003      	movs	r3, r0
 801e220:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e222:	e021      	b.n	801e268 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e224:	f7fd fda0 	bl	801bd68 <HAL_RCC_GetPCLK2Freq>
 801e228:	0003      	movs	r3, r0
 801e22a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e22c:	e01c      	b.n	801e268 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e22e:	4b61      	ldr	r3, [pc, #388]	@ (801e3b4 <UART_SetConfig+0x52c>)
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	2210      	movs	r2, #16
 801e234:	4013      	ands	r3, r2
 801e236:	d002      	beq.n	801e23e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e238:	4b5f      	ldr	r3, [pc, #380]	@ (801e3b8 <UART_SetConfig+0x530>)
 801e23a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e23c:	e014      	b.n	801e268 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801e23e:	4b5f      	ldr	r3, [pc, #380]	@ (801e3bc <UART_SetConfig+0x534>)
 801e240:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e242:	e011      	b.n	801e268 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e244:	f7fd fcca 	bl	801bbdc <HAL_RCC_GetSysClockFreq>
 801e248:	0003      	movs	r3, r0
 801e24a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e24c:	e00c      	b.n	801e268 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e24e:	2380      	movs	r3, #128	@ 0x80
 801e250:	021b      	lsls	r3, r3, #8
 801e252:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e254:	e008      	b.n	801e268 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801e256:	2300      	movs	r3, #0
 801e258:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e25a:	231a      	movs	r3, #26
 801e25c:	2218      	movs	r2, #24
 801e25e:	189b      	adds	r3, r3, r2
 801e260:	19db      	adds	r3, r3, r7
 801e262:	2201      	movs	r2, #1
 801e264:	701a      	strb	r2, [r3, #0]
        break;
 801e266:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	d100      	bne.n	801e270 <UART_SetConfig+0x3e8>
 801e26e:	e090      	b.n	801e392 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801e270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e272:	005a      	lsls	r2, r3, #1
 801e274:	69fb      	ldr	r3, [r7, #28]
 801e276:	685b      	ldr	r3, [r3, #4]
 801e278:	085b      	lsrs	r3, r3, #1
 801e27a:	18d2      	adds	r2, r2, r3
 801e27c:	69fb      	ldr	r3, [r7, #28]
 801e27e:	685b      	ldr	r3, [r3, #4]
 801e280:	0019      	movs	r1, r3
 801e282:	0010      	movs	r0, r2
 801e284:	f7e1 ff8e 	bl	80001a4 <__udivsi3>
 801e288:	0003      	movs	r3, r0
 801e28a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e28e:	2b0f      	cmp	r3, #15
 801e290:	d921      	bls.n	801e2d6 <UART_SetConfig+0x44e>
 801e292:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e294:	2380      	movs	r3, #128	@ 0x80
 801e296:	025b      	lsls	r3, r3, #9
 801e298:	429a      	cmp	r2, r3
 801e29a:	d21c      	bcs.n	801e2d6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e29e:	b29a      	uxth	r2, r3
 801e2a0:	200e      	movs	r0, #14
 801e2a2:	2418      	movs	r4, #24
 801e2a4:	1903      	adds	r3, r0, r4
 801e2a6:	19db      	adds	r3, r3, r7
 801e2a8:	210f      	movs	r1, #15
 801e2aa:	438a      	bics	r2, r1
 801e2ac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2b0:	085b      	lsrs	r3, r3, #1
 801e2b2:	b29b      	uxth	r3, r3
 801e2b4:	2207      	movs	r2, #7
 801e2b6:	4013      	ands	r3, r2
 801e2b8:	b299      	uxth	r1, r3
 801e2ba:	1903      	adds	r3, r0, r4
 801e2bc:	19db      	adds	r3, r3, r7
 801e2be:	1902      	adds	r2, r0, r4
 801e2c0:	19d2      	adds	r2, r2, r7
 801e2c2:	8812      	ldrh	r2, [r2, #0]
 801e2c4:	430a      	orrs	r2, r1
 801e2c6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801e2c8:	69fb      	ldr	r3, [r7, #28]
 801e2ca:	681b      	ldr	r3, [r3, #0]
 801e2cc:	1902      	adds	r2, r0, r4
 801e2ce:	19d2      	adds	r2, r2, r7
 801e2d0:	8812      	ldrh	r2, [r2, #0]
 801e2d2:	60da      	str	r2, [r3, #12]
 801e2d4:	e05d      	b.n	801e392 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e2d6:	231a      	movs	r3, #26
 801e2d8:	2218      	movs	r2, #24
 801e2da:	189b      	adds	r3, r3, r2
 801e2dc:	19db      	adds	r3, r3, r7
 801e2de:	2201      	movs	r2, #1
 801e2e0:	701a      	strb	r2, [r3, #0]
 801e2e2:	e056      	b.n	801e392 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e2e4:	231b      	movs	r3, #27
 801e2e6:	2218      	movs	r2, #24
 801e2e8:	189b      	adds	r3, r3, r2
 801e2ea:	19db      	adds	r3, r3, r7
 801e2ec:	781b      	ldrb	r3, [r3, #0]
 801e2ee:	2b08      	cmp	r3, #8
 801e2f0:	d822      	bhi.n	801e338 <UART_SetConfig+0x4b0>
 801e2f2:	009a      	lsls	r2, r3, #2
 801e2f4:	4b32      	ldr	r3, [pc, #200]	@ (801e3c0 <UART_SetConfig+0x538>)
 801e2f6:	18d3      	adds	r3, r2, r3
 801e2f8:	681b      	ldr	r3, [r3, #0]
 801e2fa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e2fc:	f7fd fd1e 	bl	801bd3c <HAL_RCC_GetPCLK1Freq>
 801e300:	0003      	movs	r3, r0
 801e302:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e304:	e021      	b.n	801e34a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e306:	f7fd fd2f 	bl	801bd68 <HAL_RCC_GetPCLK2Freq>
 801e30a:	0003      	movs	r3, r0
 801e30c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e30e:	e01c      	b.n	801e34a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e310:	4b28      	ldr	r3, [pc, #160]	@ (801e3b4 <UART_SetConfig+0x52c>)
 801e312:	681b      	ldr	r3, [r3, #0]
 801e314:	2210      	movs	r2, #16
 801e316:	4013      	ands	r3, r2
 801e318:	d002      	beq.n	801e320 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e31a:	4b27      	ldr	r3, [pc, #156]	@ (801e3b8 <UART_SetConfig+0x530>)
 801e31c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e31e:	e014      	b.n	801e34a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801e320:	4b26      	ldr	r3, [pc, #152]	@ (801e3bc <UART_SetConfig+0x534>)
 801e322:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e324:	e011      	b.n	801e34a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e326:	f7fd fc59 	bl	801bbdc <HAL_RCC_GetSysClockFreq>
 801e32a:	0003      	movs	r3, r0
 801e32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e32e:	e00c      	b.n	801e34a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e330:	2380      	movs	r3, #128	@ 0x80
 801e332:	021b      	lsls	r3, r3, #8
 801e334:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e336:	e008      	b.n	801e34a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801e338:	2300      	movs	r3, #0
 801e33a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e33c:	231a      	movs	r3, #26
 801e33e:	2218      	movs	r2, #24
 801e340:	189b      	adds	r3, r3, r2
 801e342:	19db      	adds	r3, r3, r7
 801e344:	2201      	movs	r2, #1
 801e346:	701a      	strb	r2, [r3, #0]
        break;
 801e348:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801e34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e34c:	2b00      	cmp	r3, #0
 801e34e:	d020      	beq.n	801e392 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801e350:	69fb      	ldr	r3, [r7, #28]
 801e352:	685b      	ldr	r3, [r3, #4]
 801e354:	085a      	lsrs	r2, r3, #1
 801e356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e358:	18d2      	adds	r2, r2, r3
 801e35a:	69fb      	ldr	r3, [r7, #28]
 801e35c:	685b      	ldr	r3, [r3, #4]
 801e35e:	0019      	movs	r1, r3
 801e360:	0010      	movs	r0, r2
 801e362:	f7e1 ff1f 	bl	80001a4 <__udivsi3>
 801e366:	0003      	movs	r3, r0
 801e368:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e36c:	2b0f      	cmp	r3, #15
 801e36e:	d90a      	bls.n	801e386 <UART_SetConfig+0x4fe>
 801e370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e372:	2380      	movs	r3, #128	@ 0x80
 801e374:	025b      	lsls	r3, r3, #9
 801e376:	429a      	cmp	r2, r3
 801e378:	d205      	bcs.n	801e386 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e37c:	b29a      	uxth	r2, r3
 801e37e:	69fb      	ldr	r3, [r7, #28]
 801e380:	681b      	ldr	r3, [r3, #0]
 801e382:	60da      	str	r2, [r3, #12]
 801e384:	e005      	b.n	801e392 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e386:	231a      	movs	r3, #26
 801e388:	2218      	movs	r2, #24
 801e38a:	189b      	adds	r3, r3, r2
 801e38c:	19db      	adds	r3, r3, r7
 801e38e:	2201      	movs	r2, #1
 801e390:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e392:	69fb      	ldr	r3, [r7, #28]
 801e394:	2200      	movs	r2, #0
 801e396:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801e398:	69fb      	ldr	r3, [r7, #28]
 801e39a:	2200      	movs	r2, #0
 801e39c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801e39e:	231a      	movs	r3, #26
 801e3a0:	2218      	movs	r2, #24
 801e3a2:	189b      	adds	r3, r3, r2
 801e3a4:	19db      	adds	r3, r3, r7
 801e3a6:	781b      	ldrb	r3, [r3, #0]
}
 801e3a8:	0018      	movs	r0, r3
 801e3aa:	46bd      	mov	sp, r7
 801e3ac:	b00e      	add	sp, #56	@ 0x38
 801e3ae:	bdb0      	pop	{r4, r5, r7, pc}
 801e3b0:	0802e43c 	.word	0x0802e43c
 801e3b4:	40021000 	.word	0x40021000
 801e3b8:	003d0900 	.word	0x003d0900
 801e3bc:	00f42400 	.word	0x00f42400
 801e3c0:	0802e460 	.word	0x0802e460

0801e3c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e3c4:	b580      	push	{r7, lr}
 801e3c6:	b082      	sub	sp, #8
 801e3c8:	af00      	add	r7, sp, #0
 801e3ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e3d0:	2201      	movs	r2, #1
 801e3d2:	4013      	ands	r3, r2
 801e3d4:	d00b      	beq.n	801e3ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e3d6:	687b      	ldr	r3, [r7, #4]
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	685b      	ldr	r3, [r3, #4]
 801e3dc:	4a4a      	ldr	r2, [pc, #296]	@ (801e508 <UART_AdvFeatureConfig+0x144>)
 801e3de:	4013      	ands	r3, r2
 801e3e0:	0019      	movs	r1, r3
 801e3e2:	687b      	ldr	r3, [r7, #4]
 801e3e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e3e6:	687b      	ldr	r3, [r7, #4]
 801e3e8:	681b      	ldr	r3, [r3, #0]
 801e3ea:	430a      	orrs	r2, r1
 801e3ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e3ee:	687b      	ldr	r3, [r7, #4]
 801e3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e3f2:	2202      	movs	r2, #2
 801e3f4:	4013      	ands	r3, r2
 801e3f6:	d00b      	beq.n	801e410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	681b      	ldr	r3, [r3, #0]
 801e3fc:	685b      	ldr	r3, [r3, #4]
 801e3fe:	4a43      	ldr	r2, [pc, #268]	@ (801e50c <UART_AdvFeatureConfig+0x148>)
 801e400:	4013      	ands	r3, r2
 801e402:	0019      	movs	r1, r3
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	430a      	orrs	r2, r1
 801e40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e414:	2204      	movs	r2, #4
 801e416:	4013      	ands	r3, r2
 801e418:	d00b      	beq.n	801e432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	681b      	ldr	r3, [r3, #0]
 801e41e:	685b      	ldr	r3, [r3, #4]
 801e420:	4a3b      	ldr	r2, [pc, #236]	@ (801e510 <UART_AdvFeatureConfig+0x14c>)
 801e422:	4013      	ands	r3, r2
 801e424:	0019      	movs	r1, r3
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	430a      	orrs	r2, r1
 801e430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e436:	2208      	movs	r2, #8
 801e438:	4013      	ands	r3, r2
 801e43a:	d00b      	beq.n	801e454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	685b      	ldr	r3, [r3, #4]
 801e442:	4a34      	ldr	r2, [pc, #208]	@ (801e514 <UART_AdvFeatureConfig+0x150>)
 801e444:	4013      	ands	r3, r2
 801e446:	0019      	movs	r1, r3
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e44c:	687b      	ldr	r3, [r7, #4]
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	430a      	orrs	r2, r1
 801e452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e454:	687b      	ldr	r3, [r7, #4]
 801e456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e458:	2210      	movs	r2, #16
 801e45a:	4013      	ands	r3, r2
 801e45c:	d00b      	beq.n	801e476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e45e:	687b      	ldr	r3, [r7, #4]
 801e460:	681b      	ldr	r3, [r3, #0]
 801e462:	689b      	ldr	r3, [r3, #8]
 801e464:	4a2c      	ldr	r2, [pc, #176]	@ (801e518 <UART_AdvFeatureConfig+0x154>)
 801e466:	4013      	ands	r3, r2
 801e468:	0019      	movs	r1, r3
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	430a      	orrs	r2, r1
 801e474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e47a:	2220      	movs	r2, #32
 801e47c:	4013      	ands	r3, r2
 801e47e:	d00b      	beq.n	801e498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	689b      	ldr	r3, [r3, #8]
 801e486:	4a25      	ldr	r2, [pc, #148]	@ (801e51c <UART_AdvFeatureConfig+0x158>)
 801e488:	4013      	ands	r3, r2
 801e48a:	0019      	movs	r1, r3
 801e48c:	687b      	ldr	r3, [r7, #4]
 801e48e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	430a      	orrs	r2, r1
 801e496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e49c:	2240      	movs	r2, #64	@ 0x40
 801e49e:	4013      	ands	r3, r2
 801e4a0:	d01d      	beq.n	801e4de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e4a2:	687b      	ldr	r3, [r7, #4]
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	685b      	ldr	r3, [r3, #4]
 801e4a8:	4a1d      	ldr	r2, [pc, #116]	@ (801e520 <UART_AdvFeatureConfig+0x15c>)
 801e4aa:	4013      	ands	r3, r2
 801e4ac:	0019      	movs	r1, r3
 801e4ae:	687b      	ldr	r3, [r7, #4]
 801e4b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	430a      	orrs	r2, r1
 801e4b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e4be:	2380      	movs	r3, #128	@ 0x80
 801e4c0:	035b      	lsls	r3, r3, #13
 801e4c2:	429a      	cmp	r2, r3
 801e4c4:	d10b      	bne.n	801e4de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e4c6:	687b      	ldr	r3, [r7, #4]
 801e4c8:	681b      	ldr	r3, [r3, #0]
 801e4ca:	685b      	ldr	r3, [r3, #4]
 801e4cc:	4a15      	ldr	r2, [pc, #84]	@ (801e524 <UART_AdvFeatureConfig+0x160>)
 801e4ce:	4013      	ands	r3, r2
 801e4d0:	0019      	movs	r1, r3
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	430a      	orrs	r2, r1
 801e4dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e4e2:	2280      	movs	r2, #128	@ 0x80
 801e4e4:	4013      	ands	r3, r2
 801e4e6:	d00b      	beq.n	801e500 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e4e8:	687b      	ldr	r3, [r7, #4]
 801e4ea:	681b      	ldr	r3, [r3, #0]
 801e4ec:	685b      	ldr	r3, [r3, #4]
 801e4ee:	4a0e      	ldr	r2, [pc, #56]	@ (801e528 <UART_AdvFeatureConfig+0x164>)
 801e4f0:	4013      	ands	r3, r2
 801e4f2:	0019      	movs	r1, r3
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	681b      	ldr	r3, [r3, #0]
 801e4fc:	430a      	orrs	r2, r1
 801e4fe:	605a      	str	r2, [r3, #4]
  }
}
 801e500:	46c0      	nop			@ (mov r8, r8)
 801e502:	46bd      	mov	sp, r7
 801e504:	b002      	add	sp, #8
 801e506:	bd80      	pop	{r7, pc}
 801e508:	fffdffff 	.word	0xfffdffff
 801e50c:	fffeffff 	.word	0xfffeffff
 801e510:	fffbffff 	.word	0xfffbffff
 801e514:	ffff7fff 	.word	0xffff7fff
 801e518:	ffffefff 	.word	0xffffefff
 801e51c:	ffffdfff 	.word	0xffffdfff
 801e520:	ffefffff 	.word	0xffefffff
 801e524:	ff9fffff 	.word	0xff9fffff
 801e528:	fff7ffff 	.word	0xfff7ffff

0801e52c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e52c:	b580      	push	{r7, lr}
 801e52e:	b092      	sub	sp, #72	@ 0x48
 801e530:	af02      	add	r7, sp, #8
 801e532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	2284      	movs	r2, #132	@ 0x84
 801e538:	2100      	movs	r1, #0
 801e53a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e53c:	f7f6 f99a 	bl	8014874 <HAL_GetTick>
 801e540:	0003      	movs	r3, r0
 801e542:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	681b      	ldr	r3, [r3, #0]
 801e548:	681b      	ldr	r3, [r3, #0]
 801e54a:	2208      	movs	r2, #8
 801e54c:	4013      	ands	r3, r2
 801e54e:	2b08      	cmp	r3, #8
 801e550:	d12c      	bne.n	801e5ac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e554:	2280      	movs	r2, #128	@ 0x80
 801e556:	0391      	lsls	r1, r2, #14
 801e558:	6878      	ldr	r0, [r7, #4]
 801e55a:	4a46      	ldr	r2, [pc, #280]	@ (801e674 <UART_CheckIdleState+0x148>)
 801e55c:	9200      	str	r2, [sp, #0]
 801e55e:	2200      	movs	r2, #0
 801e560:	f000 f88c 	bl	801e67c <UART_WaitOnFlagUntilTimeout>
 801e564:	1e03      	subs	r3, r0, #0
 801e566:	d021      	beq.n	801e5ac <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e568:	f3ef 8310 	mrs	r3, PRIMASK
 801e56c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801e570:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e572:	2301      	movs	r3, #1
 801e574:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e578:	f383 8810 	msr	PRIMASK, r3
}
 801e57c:	46c0      	nop			@ (mov r8, r8)
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	681b      	ldr	r3, [r3, #0]
 801e582:	681a      	ldr	r2, [r3, #0]
 801e584:	687b      	ldr	r3, [r7, #4]
 801e586:	681b      	ldr	r3, [r3, #0]
 801e588:	2180      	movs	r1, #128	@ 0x80
 801e58a:	438a      	bics	r2, r1
 801e58c:	601a      	str	r2, [r3, #0]
 801e58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e594:	f383 8810 	msr	PRIMASK, r3
}
 801e598:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	2220      	movs	r2, #32
 801e59e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	2278      	movs	r2, #120	@ 0x78
 801e5a4:	2100      	movs	r1, #0
 801e5a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e5a8:	2303      	movs	r3, #3
 801e5aa:	e05f      	b.n	801e66c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	681b      	ldr	r3, [r3, #0]
 801e5b0:	681b      	ldr	r3, [r3, #0]
 801e5b2:	2204      	movs	r2, #4
 801e5b4:	4013      	ands	r3, r2
 801e5b6:	2b04      	cmp	r3, #4
 801e5b8:	d146      	bne.n	801e648 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e5ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e5bc:	2280      	movs	r2, #128	@ 0x80
 801e5be:	03d1      	lsls	r1, r2, #15
 801e5c0:	6878      	ldr	r0, [r7, #4]
 801e5c2:	4a2c      	ldr	r2, [pc, #176]	@ (801e674 <UART_CheckIdleState+0x148>)
 801e5c4:	9200      	str	r2, [sp, #0]
 801e5c6:	2200      	movs	r2, #0
 801e5c8:	f000 f858 	bl	801e67c <UART_WaitOnFlagUntilTimeout>
 801e5cc:	1e03      	subs	r3, r0, #0
 801e5ce:	d03b      	beq.n	801e648 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e5d0:	f3ef 8310 	mrs	r3, PRIMASK
 801e5d4:	60fb      	str	r3, [r7, #12]
  return(result);
 801e5d6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e5d8:	637b      	str	r3, [r7, #52]	@ 0x34
 801e5da:	2301      	movs	r3, #1
 801e5dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5de:	693b      	ldr	r3, [r7, #16]
 801e5e0:	f383 8810 	msr	PRIMASK, r3
}
 801e5e4:	46c0      	nop			@ (mov r8, r8)
 801e5e6:	687b      	ldr	r3, [r7, #4]
 801e5e8:	681b      	ldr	r3, [r3, #0]
 801e5ea:	681a      	ldr	r2, [r3, #0]
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	4921      	ldr	r1, [pc, #132]	@ (801e678 <UART_CheckIdleState+0x14c>)
 801e5f2:	400a      	ands	r2, r1
 801e5f4:	601a      	str	r2, [r3, #0]
 801e5f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e5f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5fa:	697b      	ldr	r3, [r7, #20]
 801e5fc:	f383 8810 	msr	PRIMASK, r3
}
 801e600:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e602:	f3ef 8310 	mrs	r3, PRIMASK
 801e606:	61bb      	str	r3, [r7, #24]
  return(result);
 801e608:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e60a:	633b      	str	r3, [r7, #48]	@ 0x30
 801e60c:	2301      	movs	r3, #1
 801e60e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e610:	69fb      	ldr	r3, [r7, #28]
 801e612:	f383 8810 	msr	PRIMASK, r3
}
 801e616:	46c0      	nop			@ (mov r8, r8)
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	681b      	ldr	r3, [r3, #0]
 801e61c:	689a      	ldr	r2, [r3, #8]
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	681b      	ldr	r3, [r3, #0]
 801e622:	2101      	movs	r1, #1
 801e624:	438a      	bics	r2, r1
 801e626:	609a      	str	r2, [r3, #8]
 801e628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e62a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e62c:	6a3b      	ldr	r3, [r7, #32]
 801e62e:	f383 8810 	msr	PRIMASK, r3
}
 801e632:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801e634:	687b      	ldr	r3, [r7, #4]
 801e636:	2280      	movs	r2, #128	@ 0x80
 801e638:	2120      	movs	r1, #32
 801e63a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	2278      	movs	r2, #120	@ 0x78
 801e640:	2100      	movs	r1, #0
 801e642:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e644:	2303      	movs	r3, #3
 801e646:	e011      	b.n	801e66c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	2220      	movs	r2, #32
 801e64c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801e64e:	687b      	ldr	r3, [r7, #4]
 801e650:	2280      	movs	r2, #128	@ 0x80
 801e652:	2120      	movs	r1, #32
 801e654:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	2200      	movs	r2, #0
 801e65a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	2200      	movs	r2, #0
 801e660:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	2278      	movs	r2, #120	@ 0x78
 801e666:	2100      	movs	r1, #0
 801e668:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801e66a:	2300      	movs	r3, #0
}
 801e66c:	0018      	movs	r0, r3
 801e66e:	46bd      	mov	sp, r7
 801e670:	b010      	add	sp, #64	@ 0x40
 801e672:	bd80      	pop	{r7, pc}
 801e674:	01ffffff 	.word	0x01ffffff
 801e678:	fffffedf 	.word	0xfffffedf

0801e67c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801e67c:	b580      	push	{r7, lr}
 801e67e:	b084      	sub	sp, #16
 801e680:	af00      	add	r7, sp, #0
 801e682:	60f8      	str	r0, [r7, #12]
 801e684:	60b9      	str	r1, [r7, #8]
 801e686:	603b      	str	r3, [r7, #0]
 801e688:	1dfb      	adds	r3, r7, #7
 801e68a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e68c:	e04b      	b.n	801e726 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801e68e:	69bb      	ldr	r3, [r7, #24]
 801e690:	3301      	adds	r3, #1
 801e692:	d048      	beq.n	801e726 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801e694:	f7f6 f8ee 	bl	8014874 <HAL_GetTick>
 801e698:	0002      	movs	r2, r0
 801e69a:	683b      	ldr	r3, [r7, #0]
 801e69c:	1ad3      	subs	r3, r2, r3
 801e69e:	69ba      	ldr	r2, [r7, #24]
 801e6a0:	429a      	cmp	r2, r3
 801e6a2:	d302      	bcc.n	801e6aa <UART_WaitOnFlagUntilTimeout+0x2e>
 801e6a4:	69bb      	ldr	r3, [r7, #24]
 801e6a6:	2b00      	cmp	r3, #0
 801e6a8:	d101      	bne.n	801e6ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801e6aa:	2303      	movs	r3, #3
 801e6ac:	e04b      	b.n	801e746 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801e6ae:	68fb      	ldr	r3, [r7, #12]
 801e6b0:	681b      	ldr	r3, [r3, #0]
 801e6b2:	681b      	ldr	r3, [r3, #0]
 801e6b4:	2204      	movs	r2, #4
 801e6b6:	4013      	ands	r3, r2
 801e6b8:	d035      	beq.n	801e726 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801e6ba:	68fb      	ldr	r3, [r7, #12]
 801e6bc:	681b      	ldr	r3, [r3, #0]
 801e6be:	69db      	ldr	r3, [r3, #28]
 801e6c0:	2208      	movs	r2, #8
 801e6c2:	4013      	ands	r3, r2
 801e6c4:	2b08      	cmp	r3, #8
 801e6c6:	d111      	bne.n	801e6ec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801e6c8:	68fb      	ldr	r3, [r7, #12]
 801e6ca:	681b      	ldr	r3, [r3, #0]
 801e6cc:	2208      	movs	r2, #8
 801e6ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801e6d0:	68fb      	ldr	r3, [r7, #12]
 801e6d2:	0018      	movs	r0, r3
 801e6d4:	f000 f9ca 	bl	801ea6c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801e6d8:	68fb      	ldr	r3, [r7, #12]
 801e6da:	2284      	movs	r2, #132	@ 0x84
 801e6dc:	2108      	movs	r1, #8
 801e6de:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801e6e0:	68fb      	ldr	r3, [r7, #12]
 801e6e2:	2278      	movs	r2, #120	@ 0x78
 801e6e4:	2100      	movs	r1, #0
 801e6e6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801e6e8:	2301      	movs	r3, #1
 801e6ea:	e02c      	b.n	801e746 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801e6ec:	68fb      	ldr	r3, [r7, #12]
 801e6ee:	681b      	ldr	r3, [r3, #0]
 801e6f0:	69da      	ldr	r2, [r3, #28]
 801e6f2:	2380      	movs	r3, #128	@ 0x80
 801e6f4:	011b      	lsls	r3, r3, #4
 801e6f6:	401a      	ands	r2, r3
 801e6f8:	2380      	movs	r3, #128	@ 0x80
 801e6fa:	011b      	lsls	r3, r3, #4
 801e6fc:	429a      	cmp	r2, r3
 801e6fe:	d112      	bne.n	801e726 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e700:	68fb      	ldr	r3, [r7, #12]
 801e702:	681b      	ldr	r3, [r3, #0]
 801e704:	2280      	movs	r2, #128	@ 0x80
 801e706:	0112      	lsls	r2, r2, #4
 801e708:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801e70a:	68fb      	ldr	r3, [r7, #12]
 801e70c:	0018      	movs	r0, r3
 801e70e:	f000 f9ad 	bl	801ea6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801e712:	68fb      	ldr	r3, [r7, #12]
 801e714:	2284      	movs	r2, #132	@ 0x84
 801e716:	2120      	movs	r1, #32
 801e718:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801e71a:	68fb      	ldr	r3, [r7, #12]
 801e71c:	2278      	movs	r2, #120	@ 0x78
 801e71e:	2100      	movs	r1, #0
 801e720:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801e722:	2303      	movs	r3, #3
 801e724:	e00f      	b.n	801e746 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e726:	68fb      	ldr	r3, [r7, #12]
 801e728:	681b      	ldr	r3, [r3, #0]
 801e72a:	69db      	ldr	r3, [r3, #28]
 801e72c:	68ba      	ldr	r2, [r7, #8]
 801e72e:	4013      	ands	r3, r2
 801e730:	68ba      	ldr	r2, [r7, #8]
 801e732:	1ad3      	subs	r3, r2, r3
 801e734:	425a      	negs	r2, r3
 801e736:	4153      	adcs	r3, r2
 801e738:	b2db      	uxtb	r3, r3
 801e73a:	001a      	movs	r2, r3
 801e73c:	1dfb      	adds	r3, r7, #7
 801e73e:	781b      	ldrb	r3, [r3, #0]
 801e740:	429a      	cmp	r2, r3
 801e742:	d0a4      	beq.n	801e68e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801e744:	2300      	movs	r3, #0
}
 801e746:	0018      	movs	r0, r3
 801e748:	46bd      	mov	sp, r7
 801e74a:	b004      	add	sp, #16
 801e74c:	bd80      	pop	{r7, pc}
	...

0801e750 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e750:	b580      	push	{r7, lr}
 801e752:	b090      	sub	sp, #64	@ 0x40
 801e754:	af00      	add	r7, sp, #0
 801e756:	60f8      	str	r0, [r7, #12]
 801e758:	60b9      	str	r1, [r7, #8]
 801e75a:	1dbb      	adds	r3, r7, #6
 801e75c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801e75e:	68fb      	ldr	r3, [r7, #12]
 801e760:	68ba      	ldr	r2, [r7, #8]
 801e762:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801e764:	68fb      	ldr	r3, [r7, #12]
 801e766:	1dba      	adds	r2, r7, #6
 801e768:	2158      	movs	r1, #88	@ 0x58
 801e76a:	8812      	ldrh	r2, [r2, #0]
 801e76c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801e76e:	68fb      	ldr	r3, [r7, #12]
 801e770:	1dba      	adds	r2, r7, #6
 801e772:	215a      	movs	r1, #90	@ 0x5a
 801e774:	8812      	ldrh	r2, [r2, #0]
 801e776:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	2200      	movs	r2, #0
 801e77c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801e77e:	68fb      	ldr	r3, [r7, #12]
 801e780:	689a      	ldr	r2, [r3, #8]
 801e782:	2380      	movs	r3, #128	@ 0x80
 801e784:	015b      	lsls	r3, r3, #5
 801e786:	429a      	cmp	r2, r3
 801e788:	d10d      	bne.n	801e7a6 <UART_Start_Receive_IT+0x56>
 801e78a:	68fb      	ldr	r3, [r7, #12]
 801e78c:	691b      	ldr	r3, [r3, #16]
 801e78e:	2b00      	cmp	r3, #0
 801e790:	d104      	bne.n	801e79c <UART_Start_Receive_IT+0x4c>
 801e792:	68fb      	ldr	r3, [r7, #12]
 801e794:	225c      	movs	r2, #92	@ 0x5c
 801e796:	4950      	ldr	r1, [pc, #320]	@ (801e8d8 <UART_Start_Receive_IT+0x188>)
 801e798:	5299      	strh	r1, [r3, r2]
 801e79a:	e02e      	b.n	801e7fa <UART_Start_Receive_IT+0xaa>
 801e79c:	68fb      	ldr	r3, [r7, #12]
 801e79e:	225c      	movs	r2, #92	@ 0x5c
 801e7a0:	21ff      	movs	r1, #255	@ 0xff
 801e7a2:	5299      	strh	r1, [r3, r2]
 801e7a4:	e029      	b.n	801e7fa <UART_Start_Receive_IT+0xaa>
 801e7a6:	68fb      	ldr	r3, [r7, #12]
 801e7a8:	689b      	ldr	r3, [r3, #8]
 801e7aa:	2b00      	cmp	r3, #0
 801e7ac:	d10d      	bne.n	801e7ca <UART_Start_Receive_IT+0x7a>
 801e7ae:	68fb      	ldr	r3, [r7, #12]
 801e7b0:	691b      	ldr	r3, [r3, #16]
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	d104      	bne.n	801e7c0 <UART_Start_Receive_IT+0x70>
 801e7b6:	68fb      	ldr	r3, [r7, #12]
 801e7b8:	225c      	movs	r2, #92	@ 0x5c
 801e7ba:	21ff      	movs	r1, #255	@ 0xff
 801e7bc:	5299      	strh	r1, [r3, r2]
 801e7be:	e01c      	b.n	801e7fa <UART_Start_Receive_IT+0xaa>
 801e7c0:	68fb      	ldr	r3, [r7, #12]
 801e7c2:	225c      	movs	r2, #92	@ 0x5c
 801e7c4:	217f      	movs	r1, #127	@ 0x7f
 801e7c6:	5299      	strh	r1, [r3, r2]
 801e7c8:	e017      	b.n	801e7fa <UART_Start_Receive_IT+0xaa>
 801e7ca:	68fb      	ldr	r3, [r7, #12]
 801e7cc:	689a      	ldr	r2, [r3, #8]
 801e7ce:	2380      	movs	r3, #128	@ 0x80
 801e7d0:	055b      	lsls	r3, r3, #21
 801e7d2:	429a      	cmp	r2, r3
 801e7d4:	d10d      	bne.n	801e7f2 <UART_Start_Receive_IT+0xa2>
 801e7d6:	68fb      	ldr	r3, [r7, #12]
 801e7d8:	691b      	ldr	r3, [r3, #16]
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	d104      	bne.n	801e7e8 <UART_Start_Receive_IT+0x98>
 801e7de:	68fb      	ldr	r3, [r7, #12]
 801e7e0:	225c      	movs	r2, #92	@ 0x5c
 801e7e2:	217f      	movs	r1, #127	@ 0x7f
 801e7e4:	5299      	strh	r1, [r3, r2]
 801e7e6:	e008      	b.n	801e7fa <UART_Start_Receive_IT+0xaa>
 801e7e8:	68fb      	ldr	r3, [r7, #12]
 801e7ea:	225c      	movs	r2, #92	@ 0x5c
 801e7ec:	213f      	movs	r1, #63	@ 0x3f
 801e7ee:	5299      	strh	r1, [r3, r2]
 801e7f0:	e003      	b.n	801e7fa <UART_Start_Receive_IT+0xaa>
 801e7f2:	68fb      	ldr	r3, [r7, #12]
 801e7f4:	225c      	movs	r2, #92	@ 0x5c
 801e7f6:	2100      	movs	r1, #0
 801e7f8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e7fa:	68fb      	ldr	r3, [r7, #12]
 801e7fc:	2284      	movs	r2, #132	@ 0x84
 801e7fe:	2100      	movs	r1, #0
 801e800:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801e802:	68fb      	ldr	r3, [r7, #12]
 801e804:	2280      	movs	r2, #128	@ 0x80
 801e806:	2122      	movs	r1, #34	@ 0x22
 801e808:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e80a:	f3ef 8310 	mrs	r3, PRIMASK
 801e80e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801e810:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e814:	2301      	movs	r3, #1
 801e816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e81a:	f383 8810 	msr	PRIMASK, r3
}
 801e81e:	46c0      	nop			@ (mov r8, r8)
 801e820:	68fb      	ldr	r3, [r7, #12]
 801e822:	681b      	ldr	r3, [r3, #0]
 801e824:	689a      	ldr	r2, [r3, #8]
 801e826:	68fb      	ldr	r3, [r7, #12]
 801e828:	681b      	ldr	r3, [r3, #0]
 801e82a:	2101      	movs	r1, #1
 801e82c:	430a      	orrs	r2, r1
 801e82e:	609a      	str	r2, [r3, #8]
 801e830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e832:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e836:	f383 8810 	msr	PRIMASK, r3
}
 801e83a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e83c:	68fb      	ldr	r3, [r7, #12]
 801e83e:	689a      	ldr	r2, [r3, #8]
 801e840:	2380      	movs	r3, #128	@ 0x80
 801e842:	015b      	lsls	r3, r3, #5
 801e844:	429a      	cmp	r2, r3
 801e846:	d107      	bne.n	801e858 <UART_Start_Receive_IT+0x108>
 801e848:	68fb      	ldr	r3, [r7, #12]
 801e84a:	691b      	ldr	r3, [r3, #16]
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	d103      	bne.n	801e858 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801e850:	68fb      	ldr	r3, [r7, #12]
 801e852:	4a22      	ldr	r2, [pc, #136]	@ (801e8dc <UART_Start_Receive_IT+0x18c>)
 801e854:	669a      	str	r2, [r3, #104]	@ 0x68
 801e856:	e002      	b.n	801e85e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801e858:	68fb      	ldr	r3, [r7, #12]
 801e85a:	4a21      	ldr	r2, [pc, #132]	@ (801e8e0 <UART_Start_Receive_IT+0x190>)
 801e85c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801e85e:	68fb      	ldr	r3, [r7, #12]
 801e860:	691b      	ldr	r3, [r3, #16]
 801e862:	2b00      	cmp	r3, #0
 801e864:	d019      	beq.n	801e89a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e866:	f3ef 8310 	mrs	r3, PRIMASK
 801e86a:	61fb      	str	r3, [r7, #28]
  return(result);
 801e86c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801e86e:	637b      	str	r3, [r7, #52]	@ 0x34
 801e870:	2301      	movs	r3, #1
 801e872:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e874:	6a3b      	ldr	r3, [r7, #32]
 801e876:	f383 8810 	msr	PRIMASK, r3
}
 801e87a:	46c0      	nop			@ (mov r8, r8)
 801e87c:	68fb      	ldr	r3, [r7, #12]
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	681a      	ldr	r2, [r3, #0]
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	681b      	ldr	r3, [r3, #0]
 801e886:	2190      	movs	r1, #144	@ 0x90
 801e888:	0049      	lsls	r1, r1, #1
 801e88a:	430a      	orrs	r2, r1
 801e88c:	601a      	str	r2, [r3, #0]
 801e88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e890:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e894:	f383 8810 	msr	PRIMASK, r3
}
 801e898:	e018      	b.n	801e8cc <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e89a:	f3ef 8310 	mrs	r3, PRIMASK
 801e89e:	613b      	str	r3, [r7, #16]
  return(result);
 801e8a0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801e8a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e8a4:	2301      	movs	r3, #1
 801e8a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8a8:	697b      	ldr	r3, [r7, #20]
 801e8aa:	f383 8810 	msr	PRIMASK, r3
}
 801e8ae:	46c0      	nop			@ (mov r8, r8)
 801e8b0:	68fb      	ldr	r3, [r7, #12]
 801e8b2:	681b      	ldr	r3, [r3, #0]
 801e8b4:	681a      	ldr	r2, [r3, #0]
 801e8b6:	68fb      	ldr	r3, [r7, #12]
 801e8b8:	681b      	ldr	r3, [r3, #0]
 801e8ba:	2120      	movs	r1, #32
 801e8bc:	430a      	orrs	r2, r1
 801e8be:	601a      	str	r2, [r3, #0]
 801e8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e8c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8c4:	69bb      	ldr	r3, [r7, #24]
 801e8c6:	f383 8810 	msr	PRIMASK, r3
}
 801e8ca:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801e8cc:	2300      	movs	r3, #0
}
 801e8ce:	0018      	movs	r0, r3
 801e8d0:	46bd      	mov	sp, r7
 801e8d2:	b010      	add	sp, #64	@ 0x40
 801e8d4:	bd80      	pop	{r7, pc}
 801e8d6:	46c0      	nop			@ (mov r8, r8)
 801e8d8:	000001ff 	.word	0x000001ff
 801e8dc:	0801f051 	.word	0x0801f051
 801e8e0:	0801ee85 	.word	0x0801ee85

0801e8e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e8e4:	b580      	push	{r7, lr}
 801e8e6:	b090      	sub	sp, #64	@ 0x40
 801e8e8:	af00      	add	r7, sp, #0
 801e8ea:	60f8      	str	r0, [r7, #12]
 801e8ec:	60b9      	str	r1, [r7, #8]
 801e8ee:	1dbb      	adds	r3, r7, #6
 801e8f0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801e8f2:	68fb      	ldr	r3, [r7, #12]
 801e8f4:	68ba      	ldr	r2, [r7, #8]
 801e8f6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801e8f8:	68fb      	ldr	r3, [r7, #12]
 801e8fa:	1dba      	adds	r2, r7, #6
 801e8fc:	2158      	movs	r1, #88	@ 0x58
 801e8fe:	8812      	ldrh	r2, [r2, #0]
 801e900:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e902:	68fb      	ldr	r3, [r7, #12]
 801e904:	2284      	movs	r2, #132	@ 0x84
 801e906:	2100      	movs	r1, #0
 801e908:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801e90a:	68fb      	ldr	r3, [r7, #12]
 801e90c:	2280      	movs	r2, #128	@ 0x80
 801e90e:	2122      	movs	r1, #34	@ 0x22
 801e910:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801e912:	68fb      	ldr	r3, [r7, #12]
 801e914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e916:	2b00      	cmp	r3, #0
 801e918:	d028      	beq.n	801e96c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801e91a:	68fb      	ldr	r3, [r7, #12]
 801e91c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e91e:	4a3e      	ldr	r2, [pc, #248]	@ (801ea18 <UART_Start_Receive_DMA+0x134>)
 801e920:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801e922:	68fb      	ldr	r3, [r7, #12]
 801e924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e926:	4a3d      	ldr	r2, [pc, #244]	@ (801ea1c <UART_Start_Receive_DMA+0x138>)
 801e928:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801e92a:	68fb      	ldr	r3, [r7, #12]
 801e92c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e92e:	4a3c      	ldr	r2, [pc, #240]	@ (801ea20 <UART_Start_Receive_DMA+0x13c>)
 801e930:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801e932:	68fb      	ldr	r3, [r7, #12]
 801e934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e936:	2200      	movs	r2, #0
 801e938:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801e93a:	68fb      	ldr	r3, [r7, #12]
 801e93c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801e93e:	68fb      	ldr	r3, [r7, #12]
 801e940:	681b      	ldr	r3, [r3, #0]
 801e942:	3324      	adds	r3, #36	@ 0x24
 801e944:	0019      	movs	r1, r3
 801e946:	68fb      	ldr	r3, [r7, #12]
 801e948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e94a:	001a      	movs	r2, r3
 801e94c:	1dbb      	adds	r3, r7, #6
 801e94e:	881b      	ldrh	r3, [r3, #0]
 801e950:	f7f6 fcc4 	bl	80152dc <HAL_DMA_Start_IT>
 801e954:	1e03      	subs	r3, r0, #0
 801e956:	d009      	beq.n	801e96c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801e958:	68fb      	ldr	r3, [r7, #12]
 801e95a:	2284      	movs	r2, #132	@ 0x84
 801e95c:	2110      	movs	r1, #16
 801e95e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e960:	68fb      	ldr	r3, [r7, #12]
 801e962:	2280      	movs	r2, #128	@ 0x80
 801e964:	2120      	movs	r1, #32
 801e966:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801e968:	2301      	movs	r3, #1
 801e96a:	e050      	b.n	801ea0e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801e96c:	68fb      	ldr	r3, [r7, #12]
 801e96e:	691b      	ldr	r3, [r3, #16]
 801e970:	2b00      	cmp	r3, #0
 801e972:	d019      	beq.n	801e9a8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e974:	f3ef 8310 	mrs	r3, PRIMASK
 801e978:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801e97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801e97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e97e:	2301      	movs	r3, #1
 801e980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e984:	f383 8810 	msr	PRIMASK, r3
}
 801e988:	46c0      	nop			@ (mov r8, r8)
 801e98a:	68fb      	ldr	r3, [r7, #12]
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	681a      	ldr	r2, [r3, #0]
 801e990:	68fb      	ldr	r3, [r7, #12]
 801e992:	681b      	ldr	r3, [r3, #0]
 801e994:	2180      	movs	r1, #128	@ 0x80
 801e996:	0049      	lsls	r1, r1, #1
 801e998:	430a      	orrs	r2, r1
 801e99a:	601a      	str	r2, [r3, #0]
 801e99c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e99e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e9a2:	f383 8810 	msr	PRIMASK, r3
}
 801e9a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9a8:	f3ef 8310 	mrs	r3, PRIMASK
 801e9ac:	613b      	str	r3, [r7, #16]
  return(result);
 801e9ae:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e9b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e9b2:	2301      	movs	r3, #1
 801e9b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9b6:	697b      	ldr	r3, [r7, #20]
 801e9b8:	f383 8810 	msr	PRIMASK, r3
}
 801e9bc:	46c0      	nop			@ (mov r8, r8)
 801e9be:	68fb      	ldr	r3, [r7, #12]
 801e9c0:	681b      	ldr	r3, [r3, #0]
 801e9c2:	689a      	ldr	r2, [r3, #8]
 801e9c4:	68fb      	ldr	r3, [r7, #12]
 801e9c6:	681b      	ldr	r3, [r3, #0]
 801e9c8:	2101      	movs	r1, #1
 801e9ca:	430a      	orrs	r2, r1
 801e9cc:	609a      	str	r2, [r3, #8]
 801e9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9d2:	69bb      	ldr	r3, [r7, #24]
 801e9d4:	f383 8810 	msr	PRIMASK, r3
}
 801e9d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9da:	f3ef 8310 	mrs	r3, PRIMASK
 801e9de:	61fb      	str	r3, [r7, #28]
  return(result);
 801e9e0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e9e2:	637b      	str	r3, [r7, #52]	@ 0x34
 801e9e4:	2301      	movs	r3, #1
 801e9e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9e8:	6a3b      	ldr	r3, [r7, #32]
 801e9ea:	f383 8810 	msr	PRIMASK, r3
}
 801e9ee:	46c0      	nop			@ (mov r8, r8)
 801e9f0:	68fb      	ldr	r3, [r7, #12]
 801e9f2:	681b      	ldr	r3, [r3, #0]
 801e9f4:	689a      	ldr	r2, [r3, #8]
 801e9f6:	68fb      	ldr	r3, [r7, #12]
 801e9f8:	681b      	ldr	r3, [r3, #0]
 801e9fa:	2140      	movs	r1, #64	@ 0x40
 801e9fc:	430a      	orrs	r2, r1
 801e9fe:	609a      	str	r2, [r3, #8]
 801ea00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea02:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea06:	f383 8810 	msr	PRIMASK, r3
}
 801ea0a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801ea0c:	2300      	movs	r3, #0
}
 801ea0e:	0018      	movs	r0, r3
 801ea10:	46bd      	mov	sp, r7
 801ea12:	b010      	add	sp, #64	@ 0x40
 801ea14:	bd80      	pop	{r7, pc}
 801ea16:	46c0      	nop			@ (mov r8, r8)
 801ea18:	0801ebf5 	.word	0x0801ebf5
 801ea1c:	0801ed29 	.word	0x0801ed29
 801ea20:	0801ed71 	.word	0x0801ed71

0801ea24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801ea24:	b580      	push	{r7, lr}
 801ea26:	b086      	sub	sp, #24
 801ea28:	af00      	add	r7, sp, #0
 801ea2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea2c:	f3ef 8310 	mrs	r3, PRIMASK
 801ea30:	60bb      	str	r3, [r7, #8]
  return(result);
 801ea32:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801ea34:	617b      	str	r3, [r7, #20]
 801ea36:	2301      	movs	r3, #1
 801ea38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea3a:	68fb      	ldr	r3, [r7, #12]
 801ea3c:	f383 8810 	msr	PRIMASK, r3
}
 801ea40:	46c0      	nop			@ (mov r8, r8)
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	681b      	ldr	r3, [r3, #0]
 801ea46:	681a      	ldr	r2, [r3, #0]
 801ea48:	687b      	ldr	r3, [r7, #4]
 801ea4a:	681b      	ldr	r3, [r3, #0]
 801ea4c:	21c0      	movs	r1, #192	@ 0xc0
 801ea4e:	438a      	bics	r2, r1
 801ea50:	601a      	str	r2, [r3, #0]
 801ea52:	697b      	ldr	r3, [r7, #20]
 801ea54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea56:	693b      	ldr	r3, [r7, #16]
 801ea58:	f383 8810 	msr	PRIMASK, r3
}
 801ea5c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ea5e:	687b      	ldr	r3, [r7, #4]
 801ea60:	2220      	movs	r2, #32
 801ea62:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801ea64:	46c0      	nop			@ (mov r8, r8)
 801ea66:	46bd      	mov	sp, r7
 801ea68:	b006      	add	sp, #24
 801ea6a:	bd80      	pop	{r7, pc}

0801ea6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801ea6c:	b580      	push	{r7, lr}
 801ea6e:	b08e      	sub	sp, #56	@ 0x38
 801ea70:	af00      	add	r7, sp, #0
 801ea72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea74:	f3ef 8310 	mrs	r3, PRIMASK
 801ea78:	617b      	str	r3, [r7, #20]
  return(result);
 801ea7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ea7c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ea7e:	2301      	movs	r3, #1
 801ea80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea82:	69bb      	ldr	r3, [r7, #24]
 801ea84:	f383 8810 	msr	PRIMASK, r3
}
 801ea88:	46c0      	nop			@ (mov r8, r8)
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	681a      	ldr	r2, [r3, #0]
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	4926      	ldr	r1, [pc, #152]	@ (801eb30 <UART_EndRxTransfer+0xc4>)
 801ea96:	400a      	ands	r2, r1
 801ea98:	601a      	str	r2, [r3, #0]
 801ea9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea9e:	69fb      	ldr	r3, [r7, #28]
 801eaa0:	f383 8810 	msr	PRIMASK, r3
}
 801eaa4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eaa6:	f3ef 8310 	mrs	r3, PRIMASK
 801eaaa:	623b      	str	r3, [r7, #32]
  return(result);
 801eaac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eaae:	633b      	str	r3, [r7, #48]	@ 0x30
 801eab0:	2301      	movs	r3, #1
 801eab2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eab6:	f383 8810 	msr	PRIMASK, r3
}
 801eaba:	46c0      	nop			@ (mov r8, r8)
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	681b      	ldr	r3, [r3, #0]
 801eac0:	689a      	ldr	r2, [r3, #8]
 801eac2:	687b      	ldr	r3, [r7, #4]
 801eac4:	681b      	ldr	r3, [r3, #0]
 801eac6:	2101      	movs	r1, #1
 801eac8:	438a      	bics	r2, r1
 801eaca:	609a      	str	r2, [r3, #8]
 801eacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eace:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ead0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ead2:	f383 8810 	msr	PRIMASK, r3
}
 801ead6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801eadc:	2b01      	cmp	r3, #1
 801eade:	d118      	bne.n	801eb12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eae0:	f3ef 8310 	mrs	r3, PRIMASK
 801eae4:	60bb      	str	r3, [r7, #8]
  return(result);
 801eae6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801eae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801eaea:	2301      	movs	r3, #1
 801eaec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eaee:	68fb      	ldr	r3, [r7, #12]
 801eaf0:	f383 8810 	msr	PRIMASK, r3
}
 801eaf4:	46c0      	nop			@ (mov r8, r8)
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	681b      	ldr	r3, [r3, #0]
 801eafa:	681a      	ldr	r2, [r3, #0]
 801eafc:	687b      	ldr	r3, [r7, #4]
 801eafe:	681b      	ldr	r3, [r3, #0]
 801eb00:	2110      	movs	r1, #16
 801eb02:	438a      	bics	r2, r1
 801eb04:	601a      	str	r2, [r3, #0]
 801eb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb0a:	693b      	ldr	r3, [r7, #16]
 801eb0c:	f383 8810 	msr	PRIMASK, r3
}
 801eb10:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801eb12:	687b      	ldr	r3, [r7, #4]
 801eb14:	2280      	movs	r2, #128	@ 0x80
 801eb16:	2120      	movs	r1, #32
 801eb18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801eb1a:	687b      	ldr	r3, [r7, #4]
 801eb1c:	2200      	movs	r2, #0
 801eb1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	2200      	movs	r2, #0
 801eb24:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801eb26:	46c0      	nop			@ (mov r8, r8)
 801eb28:	46bd      	mov	sp, r7
 801eb2a:	b00e      	add	sp, #56	@ 0x38
 801eb2c:	bd80      	pop	{r7, pc}
 801eb2e:	46c0      	nop			@ (mov r8, r8)
 801eb30:	fffffedf 	.word	0xfffffedf

0801eb34 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801eb34:	b580      	push	{r7, lr}
 801eb36:	b08c      	sub	sp, #48	@ 0x30
 801eb38:	af00      	add	r7, sp, #0
 801eb3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb40:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	681b      	ldr	r3, [r3, #0]
 801eb46:	681b      	ldr	r3, [r3, #0]
 801eb48:	2220      	movs	r2, #32
 801eb4a:	4013      	ands	r3, r2
 801eb4c:	d135      	bne.n	801ebba <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801eb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb50:	2252      	movs	r2, #82	@ 0x52
 801eb52:	2100      	movs	r1, #0
 801eb54:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb56:	f3ef 8310 	mrs	r3, PRIMASK
 801eb5a:	60fb      	str	r3, [r7, #12]
  return(result);
 801eb5c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801eb5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801eb60:	2301      	movs	r3, #1
 801eb62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb64:	693b      	ldr	r3, [r7, #16]
 801eb66:	f383 8810 	msr	PRIMASK, r3
}
 801eb6a:	46c0      	nop			@ (mov r8, r8)
 801eb6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb6e:	681b      	ldr	r3, [r3, #0]
 801eb70:	689a      	ldr	r2, [r3, #8]
 801eb72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb74:	681b      	ldr	r3, [r3, #0]
 801eb76:	2180      	movs	r1, #128	@ 0x80
 801eb78:	438a      	bics	r2, r1
 801eb7a:	609a      	str	r2, [r3, #8]
 801eb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb80:	697b      	ldr	r3, [r7, #20]
 801eb82:	f383 8810 	msr	PRIMASK, r3
}
 801eb86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb88:	f3ef 8310 	mrs	r3, PRIMASK
 801eb8c:	61bb      	str	r3, [r7, #24]
  return(result);
 801eb8e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801eb90:	627b      	str	r3, [r7, #36]	@ 0x24
 801eb92:	2301      	movs	r3, #1
 801eb94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb96:	69fb      	ldr	r3, [r7, #28]
 801eb98:	f383 8810 	msr	PRIMASK, r3
}
 801eb9c:	46c0      	nop			@ (mov r8, r8)
 801eb9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eba0:	681b      	ldr	r3, [r3, #0]
 801eba2:	681a      	ldr	r2, [r3, #0]
 801eba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eba6:	681b      	ldr	r3, [r3, #0]
 801eba8:	2140      	movs	r1, #64	@ 0x40
 801ebaa:	430a      	orrs	r2, r1
 801ebac:	601a      	str	r2, [r3, #0]
 801ebae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebb2:	6a3b      	ldr	r3, [r7, #32]
 801ebb4:	f383 8810 	msr	PRIMASK, r3
}
 801ebb8:	e006      	b.n	801ebc8 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801ebba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebbc:	228c      	movs	r2, #140	@ 0x8c
 801ebbe:	589b      	ldr	r3, [r3, r2]
 801ebc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ebc2:	0010      	movs	r0, r2
 801ebc4:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ebc6:	46c0      	nop			@ (mov r8, r8)
 801ebc8:	46c0      	nop			@ (mov r8, r8)
 801ebca:	46bd      	mov	sp, r7
 801ebcc:	b00c      	add	sp, #48	@ 0x30
 801ebce:	bd80      	pop	{r7, pc}

0801ebd0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ebd0:	b580      	push	{r7, lr}
 801ebd2:	b084      	sub	sp, #16
 801ebd4:	af00      	add	r7, sp, #0
 801ebd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ebdc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801ebde:	68fb      	ldr	r3, [r7, #12]
 801ebe0:	2288      	movs	r2, #136	@ 0x88
 801ebe2:	589b      	ldr	r3, [r3, r2]
 801ebe4:	68fa      	ldr	r2, [r7, #12]
 801ebe6:	0010      	movs	r0, r2
 801ebe8:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ebea:	46c0      	nop			@ (mov r8, r8)
 801ebec:	46bd      	mov	sp, r7
 801ebee:	b004      	add	sp, #16
 801ebf0:	bd80      	pop	{r7, pc}
	...

0801ebf4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801ebf4:	b580      	push	{r7, lr}
 801ebf6:	b094      	sub	sp, #80	@ 0x50
 801ebf8:	af00      	add	r7, sp, #0
 801ebfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec00:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	681b      	ldr	r3, [r3, #0]
 801ec06:	681b      	ldr	r3, [r3, #0]
 801ec08:	2220      	movs	r2, #32
 801ec0a:	4013      	ands	r3, r2
 801ec0c:	d16f      	bne.n	801ecee <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801ec0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ec10:	225a      	movs	r2, #90	@ 0x5a
 801ec12:	2100      	movs	r1, #0
 801ec14:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec16:	f3ef 8310 	mrs	r3, PRIMASK
 801ec1a:	61bb      	str	r3, [r7, #24]
  return(result);
 801ec1c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ec1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ec20:	2301      	movs	r3, #1
 801ec22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec24:	69fb      	ldr	r3, [r7, #28]
 801ec26:	f383 8810 	msr	PRIMASK, r3
}
 801ec2a:	46c0      	nop			@ (mov r8, r8)
 801ec2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ec2e:	681b      	ldr	r3, [r3, #0]
 801ec30:	681a      	ldr	r2, [r3, #0]
 801ec32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ec34:	681b      	ldr	r3, [r3, #0]
 801ec36:	493b      	ldr	r1, [pc, #236]	@ (801ed24 <UART_DMAReceiveCplt+0x130>)
 801ec38:	400a      	ands	r2, r1
 801ec3a:	601a      	str	r2, [r3, #0]
 801ec3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ec3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec40:	6a3b      	ldr	r3, [r7, #32]
 801ec42:	f383 8810 	msr	PRIMASK, r3
}
 801ec46:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec48:	f3ef 8310 	mrs	r3, PRIMASK
 801ec4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801ec4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ec50:	647b      	str	r3, [r7, #68]	@ 0x44
 801ec52:	2301      	movs	r3, #1
 801ec54:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ec58:	f383 8810 	msr	PRIMASK, r3
}
 801ec5c:	46c0      	nop			@ (mov r8, r8)
 801ec5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ec60:	681b      	ldr	r3, [r3, #0]
 801ec62:	689a      	ldr	r2, [r3, #8]
 801ec64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ec66:	681b      	ldr	r3, [r3, #0]
 801ec68:	2101      	movs	r1, #1
 801ec6a:	438a      	bics	r2, r1
 801ec6c:	609a      	str	r2, [r3, #8]
 801ec6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ec70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec74:	f383 8810 	msr	PRIMASK, r3
}
 801ec78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec7a:	f3ef 8310 	mrs	r3, PRIMASK
 801ec7e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801ec80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ec82:	643b      	str	r3, [r7, #64]	@ 0x40
 801ec84:	2301      	movs	r3, #1
 801ec86:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ec8a:	f383 8810 	msr	PRIMASK, r3
}
 801ec8e:	46c0      	nop			@ (mov r8, r8)
 801ec90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	689a      	ldr	r2, [r3, #8]
 801ec96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ec98:	681b      	ldr	r3, [r3, #0]
 801ec9a:	2140      	movs	r1, #64	@ 0x40
 801ec9c:	438a      	bics	r2, r1
 801ec9e:	609a      	str	r2, [r3, #8]
 801eca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eca2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eca6:	f383 8810 	msr	PRIMASK, r3
}
 801ecaa:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801ecac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecae:	2280      	movs	r2, #128	@ 0x80
 801ecb0:	2120      	movs	r1, #32
 801ecb2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ecb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ecb8:	2b01      	cmp	r3, #1
 801ecba:	d118      	bne.n	801ecee <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecbc:	f3ef 8310 	mrs	r3, PRIMASK
 801ecc0:	60fb      	str	r3, [r7, #12]
  return(result);
 801ecc2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ecc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ecc6:	2301      	movs	r3, #1
 801ecc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecca:	693b      	ldr	r3, [r7, #16]
 801eccc:	f383 8810 	msr	PRIMASK, r3
}
 801ecd0:	46c0      	nop			@ (mov r8, r8)
 801ecd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecd4:	681b      	ldr	r3, [r3, #0]
 801ecd6:	681a      	ldr	r2, [r3, #0]
 801ecd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecda:	681b      	ldr	r3, [r3, #0]
 801ecdc:	2110      	movs	r1, #16
 801ecde:	438a      	bics	r2, r1
 801ece0:	601a      	str	r2, [r3, #0]
 801ece2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ece4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ece6:	697b      	ldr	r3, [r7, #20]
 801ece8:	f383 8810 	msr	PRIMASK, r3
}
 801ecec:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ecee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecf0:	2200      	movs	r2, #0
 801ecf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ecf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ecf8:	2b01      	cmp	r3, #1
 801ecfa:	d109      	bne.n	801ed10 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801ecfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecfe:	22ac      	movs	r2, #172	@ 0xac
 801ed00:	589b      	ldr	r3, [r3, r2]
 801ed02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ed04:	2158      	movs	r1, #88	@ 0x58
 801ed06:	5a51      	ldrh	r1, [r2, r1]
 801ed08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ed0a:	0010      	movs	r0, r2
 801ed0c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ed0e:	e005      	b.n	801ed1c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801ed10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed12:	2294      	movs	r2, #148	@ 0x94
 801ed14:	589b      	ldr	r3, [r3, r2]
 801ed16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ed18:	0010      	movs	r0, r2
 801ed1a:	4798      	blx	r3
}
 801ed1c:	46c0      	nop			@ (mov r8, r8)
 801ed1e:	46bd      	mov	sp, r7
 801ed20:	b014      	add	sp, #80	@ 0x50
 801ed22:	bd80      	pop	{r7, pc}
 801ed24:	fffffeff 	.word	0xfffffeff

0801ed28 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ed28:	b580      	push	{r7, lr}
 801ed2a:	b084      	sub	sp, #16
 801ed2c:	af00      	add	r7, sp, #0
 801ed2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ed30:	687b      	ldr	r3, [r7, #4]
 801ed32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed34:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801ed36:	68fb      	ldr	r3, [r7, #12]
 801ed38:	2201      	movs	r2, #1
 801ed3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ed3c:	68fb      	ldr	r3, [r7, #12]
 801ed3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ed40:	2b01      	cmp	r3, #1
 801ed42:	d10b      	bne.n	801ed5c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801ed44:	68fb      	ldr	r3, [r7, #12]
 801ed46:	22ac      	movs	r2, #172	@ 0xac
 801ed48:	589b      	ldr	r3, [r3, r2]
 801ed4a:	68fa      	ldr	r2, [r7, #12]
 801ed4c:	2158      	movs	r1, #88	@ 0x58
 801ed4e:	5a52      	ldrh	r2, [r2, r1]
 801ed50:	0852      	lsrs	r2, r2, #1
 801ed52:	b291      	uxth	r1, r2
 801ed54:	68fa      	ldr	r2, [r7, #12]
 801ed56:	0010      	movs	r0, r2
 801ed58:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ed5a:	e005      	b.n	801ed68 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801ed5c:	68fb      	ldr	r3, [r7, #12]
 801ed5e:	2290      	movs	r2, #144	@ 0x90
 801ed60:	589b      	ldr	r3, [r3, r2]
 801ed62:	68fa      	ldr	r2, [r7, #12]
 801ed64:	0010      	movs	r0, r2
 801ed66:	4798      	blx	r3
}
 801ed68:	46c0      	nop			@ (mov r8, r8)
 801ed6a:	46bd      	mov	sp, r7
 801ed6c:	b004      	add	sp, #16
 801ed6e:	bd80      	pop	{r7, pc}

0801ed70 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801ed70:	b580      	push	{r7, lr}
 801ed72:	b086      	sub	sp, #24
 801ed74:	af00      	add	r7, sp, #0
 801ed76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed7c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801ed7e:	697b      	ldr	r3, [r7, #20]
 801ed80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ed82:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801ed84:	697b      	ldr	r3, [r7, #20]
 801ed86:	2280      	movs	r2, #128	@ 0x80
 801ed88:	589b      	ldr	r3, [r3, r2]
 801ed8a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801ed8c:	697b      	ldr	r3, [r7, #20]
 801ed8e:	681b      	ldr	r3, [r3, #0]
 801ed90:	689b      	ldr	r3, [r3, #8]
 801ed92:	2280      	movs	r2, #128	@ 0x80
 801ed94:	4013      	ands	r3, r2
 801ed96:	2b80      	cmp	r3, #128	@ 0x80
 801ed98:	d10a      	bne.n	801edb0 <UART_DMAError+0x40>
 801ed9a:	693b      	ldr	r3, [r7, #16]
 801ed9c:	2b21      	cmp	r3, #33	@ 0x21
 801ed9e:	d107      	bne.n	801edb0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801eda0:	697b      	ldr	r3, [r7, #20]
 801eda2:	2252      	movs	r2, #82	@ 0x52
 801eda4:	2100      	movs	r1, #0
 801eda6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801eda8:	697b      	ldr	r3, [r7, #20]
 801edaa:	0018      	movs	r0, r3
 801edac:	f7ff fe3a 	bl	801ea24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801edb0:	697b      	ldr	r3, [r7, #20]
 801edb2:	681b      	ldr	r3, [r3, #0]
 801edb4:	689b      	ldr	r3, [r3, #8]
 801edb6:	2240      	movs	r2, #64	@ 0x40
 801edb8:	4013      	ands	r3, r2
 801edba:	2b40      	cmp	r3, #64	@ 0x40
 801edbc:	d10a      	bne.n	801edd4 <UART_DMAError+0x64>
 801edbe:	68fb      	ldr	r3, [r7, #12]
 801edc0:	2b22      	cmp	r3, #34	@ 0x22
 801edc2:	d107      	bne.n	801edd4 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801edc4:	697b      	ldr	r3, [r7, #20]
 801edc6:	225a      	movs	r2, #90	@ 0x5a
 801edc8:	2100      	movs	r1, #0
 801edca:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801edcc:	697b      	ldr	r3, [r7, #20]
 801edce:	0018      	movs	r0, r3
 801edd0:	f7ff fe4c 	bl	801ea6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801edd4:	697b      	ldr	r3, [r7, #20]
 801edd6:	2284      	movs	r2, #132	@ 0x84
 801edd8:	589b      	ldr	r3, [r3, r2]
 801edda:	2210      	movs	r2, #16
 801eddc:	431a      	orrs	r2, r3
 801edde:	697b      	ldr	r3, [r7, #20]
 801ede0:	2184      	movs	r1, #132	@ 0x84
 801ede2:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801ede4:	697b      	ldr	r3, [r7, #20]
 801ede6:	2298      	movs	r2, #152	@ 0x98
 801ede8:	589b      	ldr	r3, [r3, r2]
 801edea:	697a      	ldr	r2, [r7, #20]
 801edec:	0010      	movs	r0, r2
 801edee:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801edf0:	46c0      	nop			@ (mov r8, r8)
 801edf2:	46bd      	mov	sp, r7
 801edf4:	b006      	add	sp, #24
 801edf6:	bd80      	pop	{r7, pc}

0801edf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801edf8:	b580      	push	{r7, lr}
 801edfa:	b084      	sub	sp, #16
 801edfc:	af00      	add	r7, sp, #0
 801edfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801ee06:	68fb      	ldr	r3, [r7, #12]
 801ee08:	225a      	movs	r2, #90	@ 0x5a
 801ee0a:	2100      	movs	r1, #0
 801ee0c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801ee0e:	68fb      	ldr	r3, [r7, #12]
 801ee10:	2252      	movs	r2, #82	@ 0x52
 801ee12:	2100      	movs	r1, #0
 801ee14:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801ee16:	68fb      	ldr	r3, [r7, #12]
 801ee18:	2298      	movs	r2, #152	@ 0x98
 801ee1a:	589b      	ldr	r3, [r3, r2]
 801ee1c:	68fa      	ldr	r2, [r7, #12]
 801ee1e:	0010      	movs	r0, r2
 801ee20:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ee22:	46c0      	nop			@ (mov r8, r8)
 801ee24:	46bd      	mov	sp, r7
 801ee26:	b004      	add	sp, #16
 801ee28:	bd80      	pop	{r7, pc}

0801ee2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801ee2a:	b580      	push	{r7, lr}
 801ee2c:	b086      	sub	sp, #24
 801ee2e:	af00      	add	r7, sp, #0
 801ee30:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee32:	f3ef 8310 	mrs	r3, PRIMASK
 801ee36:	60bb      	str	r3, [r7, #8]
  return(result);
 801ee38:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ee3a:	617b      	str	r3, [r7, #20]
 801ee3c:	2301      	movs	r3, #1
 801ee3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee40:	68fb      	ldr	r3, [r7, #12]
 801ee42:	f383 8810 	msr	PRIMASK, r3
}
 801ee46:	46c0      	nop			@ (mov r8, r8)
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	681b      	ldr	r3, [r3, #0]
 801ee4c:	681a      	ldr	r2, [r3, #0]
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	681b      	ldr	r3, [r3, #0]
 801ee52:	2140      	movs	r1, #64	@ 0x40
 801ee54:	438a      	bics	r2, r1
 801ee56:	601a      	str	r2, [r3, #0]
 801ee58:	697b      	ldr	r3, [r7, #20]
 801ee5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee5c:	693b      	ldr	r3, [r7, #16]
 801ee5e:	f383 8810 	msr	PRIMASK, r3
}
 801ee62:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ee64:	687b      	ldr	r3, [r7, #4]
 801ee66:	2220      	movs	r2, #32
 801ee68:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	2200      	movs	r2, #0
 801ee6e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	228c      	movs	r2, #140	@ 0x8c
 801ee74:	589b      	ldr	r3, [r3, r2]
 801ee76:	687a      	ldr	r2, [r7, #4]
 801ee78:	0010      	movs	r0, r2
 801ee7a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ee7c:	46c0      	nop			@ (mov r8, r8)
 801ee7e:	46bd      	mov	sp, r7
 801ee80:	b006      	add	sp, #24
 801ee82:	bd80      	pop	{r7, pc}

0801ee84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801ee84:	b580      	push	{r7, lr}
 801ee86:	b094      	sub	sp, #80	@ 0x50
 801ee88:	af00      	add	r7, sp, #0
 801ee8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801ee8c:	204e      	movs	r0, #78	@ 0x4e
 801ee8e:	183b      	adds	r3, r7, r0
 801ee90:	687a      	ldr	r2, [r7, #4]
 801ee92:	215c      	movs	r1, #92	@ 0x5c
 801ee94:	5a52      	ldrh	r2, [r2, r1]
 801ee96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801ee98:	687b      	ldr	r3, [r7, #4]
 801ee9a:	2280      	movs	r2, #128	@ 0x80
 801ee9c:	589b      	ldr	r3, [r3, r2]
 801ee9e:	2b22      	cmp	r3, #34	@ 0x22
 801eea0:	d000      	beq.n	801eea4 <UART_RxISR_8BIT+0x20>
 801eea2:	e0c2      	b.n	801f02a <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	681b      	ldr	r3, [r3, #0]
 801eea8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801eeaa:	214c      	movs	r1, #76	@ 0x4c
 801eeac:	187b      	adds	r3, r7, r1
 801eeae:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801eeb0:	187b      	adds	r3, r7, r1
 801eeb2:	881b      	ldrh	r3, [r3, #0]
 801eeb4:	b2da      	uxtb	r2, r3
 801eeb6:	183b      	adds	r3, r7, r0
 801eeb8:	881b      	ldrh	r3, [r3, #0]
 801eeba:	b2d9      	uxtb	r1, r3
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801eec0:	400a      	ands	r2, r1
 801eec2:	b2d2      	uxtb	r2, r2
 801eec4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801eeca:	1c5a      	adds	r2, r3, #1
 801eecc:	687b      	ldr	r3, [r7, #4]
 801eece:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	225a      	movs	r2, #90	@ 0x5a
 801eed4:	5a9b      	ldrh	r3, [r3, r2]
 801eed6:	b29b      	uxth	r3, r3
 801eed8:	3b01      	subs	r3, #1
 801eeda:	b299      	uxth	r1, r3
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	225a      	movs	r2, #90	@ 0x5a
 801eee0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	225a      	movs	r2, #90	@ 0x5a
 801eee6:	5a9b      	ldrh	r3, [r3, r2]
 801eee8:	b29b      	uxth	r3, r3
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d000      	beq.n	801eef0 <UART_RxISR_8BIT+0x6c>
 801eeee:	e0a4      	b.n	801f03a <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eef0:	f3ef 8310 	mrs	r3, PRIMASK
 801eef4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801eef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801eef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 801eefa:	2301      	movs	r3, #1
 801eefc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef00:	f383 8810 	msr	PRIMASK, r3
}
 801ef04:	46c0      	nop			@ (mov r8, r8)
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	681b      	ldr	r3, [r3, #0]
 801ef0a:	681a      	ldr	r2, [r3, #0]
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	681b      	ldr	r3, [r3, #0]
 801ef10:	494c      	ldr	r1, [pc, #304]	@ (801f044 <UART_RxISR_8BIT+0x1c0>)
 801ef12:	400a      	ands	r2, r1
 801ef14:	601a      	str	r2, [r3, #0]
 801ef16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ef18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef1c:	f383 8810 	msr	PRIMASK, r3
}
 801ef20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef22:	f3ef 8310 	mrs	r3, PRIMASK
 801ef26:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801ef28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ef2a:	647b      	str	r3, [r7, #68]	@ 0x44
 801ef2c:	2301      	movs	r3, #1
 801ef2e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ef32:	f383 8810 	msr	PRIMASK, r3
}
 801ef36:	46c0      	nop			@ (mov r8, r8)
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	681b      	ldr	r3, [r3, #0]
 801ef3c:	689a      	ldr	r2, [r3, #8]
 801ef3e:	687b      	ldr	r3, [r7, #4]
 801ef40:	681b      	ldr	r3, [r3, #0]
 801ef42:	2101      	movs	r1, #1
 801ef44:	438a      	bics	r2, r1
 801ef46:	609a      	str	r2, [r3, #8]
 801ef48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ef4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ef4e:	f383 8810 	msr	PRIMASK, r3
}
 801ef52:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	2280      	movs	r2, #128	@ 0x80
 801ef58:	2120      	movs	r1, #32
 801ef5a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	2200      	movs	r2, #0
 801ef60:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ef62:	687b      	ldr	r3, [r7, #4]
 801ef64:	2200      	movs	r2, #0
 801ef66:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ef68:	687b      	ldr	r3, [r7, #4]
 801ef6a:	681b      	ldr	r3, [r3, #0]
 801ef6c:	4a36      	ldr	r2, [pc, #216]	@ (801f048 <UART_RxISR_8BIT+0x1c4>)
 801ef6e:	4293      	cmp	r3, r2
 801ef70:	d01f      	beq.n	801efb2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	681b      	ldr	r3, [r3, #0]
 801ef76:	685a      	ldr	r2, [r3, #4]
 801ef78:	2380      	movs	r3, #128	@ 0x80
 801ef7a:	041b      	lsls	r3, r3, #16
 801ef7c:	4013      	ands	r3, r2
 801ef7e:	d018      	beq.n	801efb2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef80:	f3ef 8310 	mrs	r3, PRIMASK
 801ef84:	61bb      	str	r3, [r7, #24]
  return(result);
 801ef86:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ef88:	643b      	str	r3, [r7, #64]	@ 0x40
 801ef8a:	2301      	movs	r3, #1
 801ef8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef8e:	69fb      	ldr	r3, [r7, #28]
 801ef90:	f383 8810 	msr	PRIMASK, r3
}
 801ef94:	46c0      	nop			@ (mov r8, r8)
 801ef96:	687b      	ldr	r3, [r7, #4]
 801ef98:	681b      	ldr	r3, [r3, #0]
 801ef9a:	681a      	ldr	r2, [r3, #0]
 801ef9c:	687b      	ldr	r3, [r7, #4]
 801ef9e:	681b      	ldr	r3, [r3, #0]
 801efa0:	492a      	ldr	r1, [pc, #168]	@ (801f04c <UART_RxISR_8BIT+0x1c8>)
 801efa2:	400a      	ands	r2, r1
 801efa4:	601a      	str	r2, [r3, #0]
 801efa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801efa8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efaa:	6a3b      	ldr	r3, [r7, #32]
 801efac:	f383 8810 	msr	PRIMASK, r3
}
 801efb0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801efb6:	2b01      	cmp	r3, #1
 801efb8:	d130      	bne.n	801f01c <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	2200      	movs	r2, #0
 801efbe:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801efc0:	f3ef 8310 	mrs	r3, PRIMASK
 801efc4:	60fb      	str	r3, [r7, #12]
  return(result);
 801efc6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801efc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801efca:	2301      	movs	r3, #1
 801efcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efce:	693b      	ldr	r3, [r7, #16]
 801efd0:	f383 8810 	msr	PRIMASK, r3
}
 801efd4:	46c0      	nop			@ (mov r8, r8)
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	681b      	ldr	r3, [r3, #0]
 801efda:	681a      	ldr	r2, [r3, #0]
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	681b      	ldr	r3, [r3, #0]
 801efe0:	2110      	movs	r1, #16
 801efe2:	438a      	bics	r2, r1
 801efe4:	601a      	str	r2, [r3, #0]
 801efe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801efe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efea:	697b      	ldr	r3, [r7, #20]
 801efec:	f383 8810 	msr	PRIMASK, r3
}
 801eff0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801eff2:	687b      	ldr	r3, [r7, #4]
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	69db      	ldr	r3, [r3, #28]
 801eff8:	2210      	movs	r2, #16
 801effa:	4013      	ands	r3, r2
 801effc:	2b10      	cmp	r3, #16
 801effe:	d103      	bne.n	801f008 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f000:	687b      	ldr	r3, [r7, #4]
 801f002:	681b      	ldr	r3, [r3, #0]
 801f004:	2210      	movs	r2, #16
 801f006:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f008:	687b      	ldr	r3, [r7, #4]
 801f00a:	22ac      	movs	r2, #172	@ 0xac
 801f00c:	589b      	ldr	r3, [r3, r2]
 801f00e:	687a      	ldr	r2, [r7, #4]
 801f010:	2158      	movs	r1, #88	@ 0x58
 801f012:	5a51      	ldrh	r1, [r2, r1]
 801f014:	687a      	ldr	r2, [r7, #4]
 801f016:	0010      	movs	r0, r2
 801f018:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f01a:	e00e      	b.n	801f03a <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	2294      	movs	r2, #148	@ 0x94
 801f020:	589b      	ldr	r3, [r3, r2]
 801f022:	687a      	ldr	r2, [r7, #4]
 801f024:	0010      	movs	r0, r2
 801f026:	4798      	blx	r3
}
 801f028:	e007      	b.n	801f03a <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	681b      	ldr	r3, [r3, #0]
 801f02e:	699a      	ldr	r2, [r3, #24]
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	681b      	ldr	r3, [r3, #0]
 801f034:	2108      	movs	r1, #8
 801f036:	430a      	orrs	r2, r1
 801f038:	619a      	str	r2, [r3, #24]
}
 801f03a:	46c0      	nop			@ (mov r8, r8)
 801f03c:	46bd      	mov	sp, r7
 801f03e:	b014      	add	sp, #80	@ 0x50
 801f040:	bd80      	pop	{r7, pc}
 801f042:	46c0      	nop			@ (mov r8, r8)
 801f044:	fffffedf 	.word	0xfffffedf
 801f048:	40004800 	.word	0x40004800
 801f04c:	fbffffff 	.word	0xfbffffff

0801f050 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801f050:	b580      	push	{r7, lr}
 801f052:	b094      	sub	sp, #80	@ 0x50
 801f054:	af00      	add	r7, sp, #0
 801f056:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801f058:	204e      	movs	r0, #78	@ 0x4e
 801f05a:	183b      	adds	r3, r7, r0
 801f05c:	687a      	ldr	r2, [r7, #4]
 801f05e:	215c      	movs	r1, #92	@ 0x5c
 801f060:	5a52      	ldrh	r2, [r2, r1]
 801f062:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	2280      	movs	r2, #128	@ 0x80
 801f068:	589b      	ldr	r3, [r3, r2]
 801f06a:	2b22      	cmp	r3, #34	@ 0x22
 801f06c:	d000      	beq.n	801f070 <UART_RxISR_16BIT+0x20>
 801f06e:	e0c2      	b.n	801f1f6 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	681b      	ldr	r3, [r3, #0]
 801f074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f076:	214c      	movs	r1, #76	@ 0x4c
 801f078:	187b      	adds	r3, r7, r1
 801f07a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f080:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801f082:	187b      	adds	r3, r7, r1
 801f084:	183a      	adds	r2, r7, r0
 801f086:	881b      	ldrh	r3, [r3, #0]
 801f088:	8812      	ldrh	r2, [r2, #0]
 801f08a:	4013      	ands	r3, r2
 801f08c:	b29a      	uxth	r2, r3
 801f08e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f090:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f096:	1c9a      	adds	r2, r3, #2
 801f098:	687b      	ldr	r3, [r7, #4]
 801f09a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	225a      	movs	r2, #90	@ 0x5a
 801f0a0:	5a9b      	ldrh	r3, [r3, r2]
 801f0a2:	b29b      	uxth	r3, r3
 801f0a4:	3b01      	subs	r3, #1
 801f0a6:	b299      	uxth	r1, r3
 801f0a8:	687b      	ldr	r3, [r7, #4]
 801f0aa:	225a      	movs	r2, #90	@ 0x5a
 801f0ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f0ae:	687b      	ldr	r3, [r7, #4]
 801f0b0:	225a      	movs	r2, #90	@ 0x5a
 801f0b2:	5a9b      	ldrh	r3, [r3, r2]
 801f0b4:	b29b      	uxth	r3, r3
 801f0b6:	2b00      	cmp	r3, #0
 801f0b8:	d000      	beq.n	801f0bc <UART_RxISR_16BIT+0x6c>
 801f0ba:	e0a4      	b.n	801f206 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f0bc:	f3ef 8310 	mrs	r3, PRIMASK
 801f0c0:	623b      	str	r3, [r7, #32]
  return(result);
 801f0c2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f0c4:	647b      	str	r3, [r7, #68]	@ 0x44
 801f0c6:	2301      	movs	r3, #1
 801f0c8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f0cc:	f383 8810 	msr	PRIMASK, r3
}
 801f0d0:	46c0      	nop			@ (mov r8, r8)
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	681b      	ldr	r3, [r3, #0]
 801f0d6:	681a      	ldr	r2, [r3, #0]
 801f0d8:	687b      	ldr	r3, [r7, #4]
 801f0da:	681b      	ldr	r3, [r3, #0]
 801f0dc:	494c      	ldr	r1, [pc, #304]	@ (801f210 <UART_RxISR_16BIT+0x1c0>)
 801f0de:	400a      	ands	r2, r1
 801f0e0:	601a      	str	r2, [r3, #0]
 801f0e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f0e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f0e8:	f383 8810 	msr	PRIMASK, r3
}
 801f0ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f0ee:	f3ef 8310 	mrs	r3, PRIMASK
 801f0f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801f0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f0f6:	643b      	str	r3, [r7, #64]	@ 0x40
 801f0f8:	2301      	movs	r3, #1
 801f0fa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f0fe:	f383 8810 	msr	PRIMASK, r3
}
 801f102:	46c0      	nop			@ (mov r8, r8)
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	681b      	ldr	r3, [r3, #0]
 801f108:	689a      	ldr	r2, [r3, #8]
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	681b      	ldr	r3, [r3, #0]
 801f10e:	2101      	movs	r1, #1
 801f110:	438a      	bics	r2, r1
 801f112:	609a      	str	r2, [r3, #8]
 801f114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f116:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f11a:	f383 8810 	msr	PRIMASK, r3
}
 801f11e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	2280      	movs	r2, #128	@ 0x80
 801f124:	2120      	movs	r1, #32
 801f126:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	2200      	movs	r2, #0
 801f12c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	2200      	movs	r2, #0
 801f132:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f134:	687b      	ldr	r3, [r7, #4]
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	4a36      	ldr	r2, [pc, #216]	@ (801f214 <UART_RxISR_16BIT+0x1c4>)
 801f13a:	4293      	cmp	r3, r2
 801f13c:	d01f      	beq.n	801f17e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f13e:	687b      	ldr	r3, [r7, #4]
 801f140:	681b      	ldr	r3, [r3, #0]
 801f142:	685a      	ldr	r2, [r3, #4]
 801f144:	2380      	movs	r3, #128	@ 0x80
 801f146:	041b      	lsls	r3, r3, #16
 801f148:	4013      	ands	r3, r2
 801f14a:	d018      	beq.n	801f17e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f14c:	f3ef 8310 	mrs	r3, PRIMASK
 801f150:	617b      	str	r3, [r7, #20]
  return(result);
 801f152:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f156:	2301      	movs	r3, #1
 801f158:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f15a:	69bb      	ldr	r3, [r7, #24]
 801f15c:	f383 8810 	msr	PRIMASK, r3
}
 801f160:	46c0      	nop			@ (mov r8, r8)
 801f162:	687b      	ldr	r3, [r7, #4]
 801f164:	681b      	ldr	r3, [r3, #0]
 801f166:	681a      	ldr	r2, [r3, #0]
 801f168:	687b      	ldr	r3, [r7, #4]
 801f16a:	681b      	ldr	r3, [r3, #0]
 801f16c:	492a      	ldr	r1, [pc, #168]	@ (801f218 <UART_RxISR_16BIT+0x1c8>)
 801f16e:	400a      	ands	r2, r1
 801f170:	601a      	str	r2, [r3, #0]
 801f172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f176:	69fb      	ldr	r3, [r7, #28]
 801f178:	f383 8810 	msr	PRIMASK, r3
}
 801f17c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f17e:	687b      	ldr	r3, [r7, #4]
 801f180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f182:	2b01      	cmp	r3, #1
 801f184:	d130      	bne.n	801f1e8 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	2200      	movs	r2, #0
 801f18a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f18c:	f3ef 8310 	mrs	r3, PRIMASK
 801f190:	60bb      	str	r3, [r7, #8]
  return(result);
 801f192:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f194:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f196:	2301      	movs	r3, #1
 801f198:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f19a:	68fb      	ldr	r3, [r7, #12]
 801f19c:	f383 8810 	msr	PRIMASK, r3
}
 801f1a0:	46c0      	nop			@ (mov r8, r8)
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	681b      	ldr	r3, [r3, #0]
 801f1a6:	681a      	ldr	r2, [r3, #0]
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	2110      	movs	r1, #16
 801f1ae:	438a      	bics	r2, r1
 801f1b0:	601a      	str	r2, [r3, #0]
 801f1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1b6:	693b      	ldr	r3, [r7, #16]
 801f1b8:	f383 8810 	msr	PRIMASK, r3
}
 801f1bc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f1be:	687b      	ldr	r3, [r7, #4]
 801f1c0:	681b      	ldr	r3, [r3, #0]
 801f1c2:	69db      	ldr	r3, [r3, #28]
 801f1c4:	2210      	movs	r2, #16
 801f1c6:	4013      	ands	r3, r2
 801f1c8:	2b10      	cmp	r3, #16
 801f1ca:	d103      	bne.n	801f1d4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	2210      	movs	r2, #16
 801f1d2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	22ac      	movs	r2, #172	@ 0xac
 801f1d8:	589b      	ldr	r3, [r3, r2]
 801f1da:	687a      	ldr	r2, [r7, #4]
 801f1dc:	2158      	movs	r1, #88	@ 0x58
 801f1de:	5a51      	ldrh	r1, [r2, r1]
 801f1e0:	687a      	ldr	r2, [r7, #4]
 801f1e2:	0010      	movs	r0, r2
 801f1e4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f1e6:	e00e      	b.n	801f206 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	2294      	movs	r2, #148	@ 0x94
 801f1ec:	589b      	ldr	r3, [r3, r2]
 801f1ee:	687a      	ldr	r2, [r7, #4]
 801f1f0:	0010      	movs	r0, r2
 801f1f2:	4798      	blx	r3
}
 801f1f4:	e007      	b.n	801f206 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	699a      	ldr	r2, [r3, #24]
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	681b      	ldr	r3, [r3, #0]
 801f200:	2108      	movs	r1, #8
 801f202:	430a      	orrs	r2, r1
 801f204:	619a      	str	r2, [r3, #24]
}
 801f206:	46c0      	nop			@ (mov r8, r8)
 801f208:	46bd      	mov	sp, r7
 801f20a:	b014      	add	sp, #80	@ 0x50
 801f20c:	bd80      	pop	{r7, pc}
 801f20e:	46c0      	nop			@ (mov r8, r8)
 801f210:	fffffedf 	.word	0xfffffedf
 801f214:	40004800 	.word	0x40004800
 801f218:	fbffffff 	.word	0xfbffffff

0801f21c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801f21c:	b580      	push	{r7, lr}
 801f21e:	b082      	sub	sp, #8
 801f220:	af00      	add	r7, sp, #0
 801f222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801f224:	46c0      	nop			@ (mov r8, r8)
 801f226:	46bd      	mov	sp, r7
 801f228:	b002      	add	sp, #8
 801f22a:	bd80      	pop	{r7, pc}

0801f22c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801f22c:	b580      	push	{r7, lr}
 801f22e:	b084      	sub	sp, #16
 801f230:	af00      	add	r7, sp, #0
 801f232:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	2244      	movs	r2, #68	@ 0x44
 801f238:	2100      	movs	r1, #0
 801f23a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f23c:	4b05      	ldr	r3, [pc, #20]	@ (801f254 <USB_EnableGlobalInt+0x28>)
 801f23e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801f240:	68fb      	ldr	r3, [r7, #12]
 801f242:	b299      	uxth	r1, r3
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	2240      	movs	r2, #64	@ 0x40
 801f248:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f24a:	2300      	movs	r3, #0
}
 801f24c:	0018      	movs	r0, r3
 801f24e:	46bd      	mov	sp, r7
 801f250:	b004      	add	sp, #16
 801f252:	bd80      	pop	{r7, pc}
 801f254:	0000bf80 	.word	0x0000bf80

0801f258 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801f258:	b580      	push	{r7, lr}
 801f25a:	b084      	sub	sp, #16
 801f25c:	af00      	add	r7, sp, #0
 801f25e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f260:	4b09      	ldr	r3, [pc, #36]	@ (801f288 <USB_DisableGlobalInt+0x30>)
 801f262:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	2240      	movs	r2, #64	@ 0x40
 801f268:	5a9b      	ldrh	r3, [r3, r2]
 801f26a:	b29b      	uxth	r3, r3
 801f26c:	68fa      	ldr	r2, [r7, #12]
 801f26e:	b292      	uxth	r2, r2
 801f270:	43d2      	mvns	r2, r2
 801f272:	b292      	uxth	r2, r2
 801f274:	4013      	ands	r3, r2
 801f276:	b299      	uxth	r1, r3
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	2240      	movs	r2, #64	@ 0x40
 801f27c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f27e:	2300      	movs	r3, #0
}
 801f280:	0018      	movs	r0, r3
 801f282:	46bd      	mov	sp, r7
 801f284:	b004      	add	sp, #16
 801f286:	bd80      	pop	{r7, pc}
 801f288:	0000bf80 	.word	0x0000bf80

0801f28c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801f28c:	b084      	sub	sp, #16
 801f28e:	b590      	push	{r4, r7, lr}
 801f290:	b083      	sub	sp, #12
 801f292:	af00      	add	r7, sp, #0
 801f294:	6078      	str	r0, [r7, #4]
 801f296:	2004      	movs	r0, #4
 801f298:	2410      	movs	r4, #16
 801f29a:	1900      	adds	r0, r0, r4
 801f29c:	2408      	movs	r4, #8
 801f29e:	46a4      	mov	ip, r4
 801f2a0:	44bc      	add	ip, r7
 801f2a2:	4460      	add	r0, ip
 801f2a4:	6001      	str	r1, [r0, #0]
 801f2a6:	6042      	str	r2, [r0, #4]
 801f2a8:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	2240      	movs	r2, #64	@ 0x40
 801f2ae:	2101      	movs	r1, #1
 801f2b0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	2240      	movs	r2, #64	@ 0x40
 801f2b6:	2100      	movs	r1, #0
 801f2b8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f2ba:	687b      	ldr	r3, [r7, #4]
 801f2bc:	2244      	movs	r2, #68	@ 0x44
 801f2be:	2100      	movs	r1, #0
 801f2c0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801f2c2:	687b      	ldr	r3, [r7, #4]
 801f2c4:	2250      	movs	r2, #80	@ 0x50
 801f2c6:	2100      	movs	r1, #0
 801f2c8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f2ca:	2300      	movs	r3, #0
}
 801f2cc:	0018      	movs	r0, r3
 801f2ce:	46bd      	mov	sp, r7
 801f2d0:	b003      	add	sp, #12
 801f2d2:	bc90      	pop	{r4, r7}
 801f2d4:	bc08      	pop	{r3}
 801f2d6:	b004      	add	sp, #16
 801f2d8:	4718      	bx	r3
	...

0801f2dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f2dc:	b580      	push	{r7, lr}
 801f2de:	b09c      	sub	sp, #112	@ 0x70
 801f2e0:	af00      	add	r7, sp, #0
 801f2e2:	6078      	str	r0, [r7, #4]
 801f2e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801f2e6:	236f      	movs	r3, #111	@ 0x6f
 801f2e8:	18fb      	adds	r3, r7, r3
 801f2ea:	2200      	movs	r2, #0
 801f2ec:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801f2ee:	687a      	ldr	r2, [r7, #4]
 801f2f0:	683b      	ldr	r3, [r7, #0]
 801f2f2:	781b      	ldrb	r3, [r3, #0]
 801f2f4:	009b      	lsls	r3, r3, #2
 801f2f6:	18d3      	adds	r3, r2, r3
 801f2f8:	881b      	ldrh	r3, [r3, #0]
 801f2fa:	b29a      	uxth	r2, r3
 801f2fc:	236c      	movs	r3, #108	@ 0x6c
 801f2fe:	18fb      	adds	r3, r7, r3
 801f300:	49a3      	ldr	r1, [pc, #652]	@ (801f590 <USB_ActivateEndpoint+0x2b4>)
 801f302:	400a      	ands	r2, r1
 801f304:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801f306:	683b      	ldr	r3, [r7, #0]
 801f308:	78db      	ldrb	r3, [r3, #3]
 801f30a:	2b03      	cmp	r3, #3
 801f30c:	d017      	beq.n	801f33e <USB_ActivateEndpoint+0x62>
 801f30e:	dc28      	bgt.n	801f362 <USB_ActivateEndpoint+0x86>
 801f310:	2b02      	cmp	r3, #2
 801f312:	d00e      	beq.n	801f332 <USB_ActivateEndpoint+0x56>
 801f314:	dc25      	bgt.n	801f362 <USB_ActivateEndpoint+0x86>
 801f316:	2b00      	cmp	r3, #0
 801f318:	d002      	beq.n	801f320 <USB_ActivateEndpoint+0x44>
 801f31a:	2b01      	cmp	r3, #1
 801f31c:	d018      	beq.n	801f350 <USB_ActivateEndpoint+0x74>
 801f31e:	e020      	b.n	801f362 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801f320:	226c      	movs	r2, #108	@ 0x6c
 801f322:	18bb      	adds	r3, r7, r2
 801f324:	18ba      	adds	r2, r7, r2
 801f326:	8812      	ldrh	r2, [r2, #0]
 801f328:	2180      	movs	r1, #128	@ 0x80
 801f32a:	0089      	lsls	r1, r1, #2
 801f32c:	430a      	orrs	r2, r1
 801f32e:	801a      	strh	r2, [r3, #0]
      break;
 801f330:	e01c      	b.n	801f36c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801f332:	226c      	movs	r2, #108	@ 0x6c
 801f334:	18bb      	adds	r3, r7, r2
 801f336:	18ba      	adds	r2, r7, r2
 801f338:	8812      	ldrh	r2, [r2, #0]
 801f33a:	801a      	strh	r2, [r3, #0]
      break;
 801f33c:	e016      	b.n	801f36c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801f33e:	226c      	movs	r2, #108	@ 0x6c
 801f340:	18bb      	adds	r3, r7, r2
 801f342:	18ba      	adds	r2, r7, r2
 801f344:	8812      	ldrh	r2, [r2, #0]
 801f346:	21c0      	movs	r1, #192	@ 0xc0
 801f348:	00c9      	lsls	r1, r1, #3
 801f34a:	430a      	orrs	r2, r1
 801f34c:	801a      	strh	r2, [r3, #0]
      break;
 801f34e:	e00d      	b.n	801f36c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801f350:	226c      	movs	r2, #108	@ 0x6c
 801f352:	18bb      	adds	r3, r7, r2
 801f354:	18ba      	adds	r2, r7, r2
 801f356:	8812      	ldrh	r2, [r2, #0]
 801f358:	2180      	movs	r1, #128	@ 0x80
 801f35a:	00c9      	lsls	r1, r1, #3
 801f35c:	430a      	orrs	r2, r1
 801f35e:	801a      	strh	r2, [r3, #0]
      break;
 801f360:	e004      	b.n	801f36c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801f362:	236f      	movs	r3, #111	@ 0x6f
 801f364:	18fb      	adds	r3, r7, r3
 801f366:	2201      	movs	r2, #1
 801f368:	701a      	strb	r2, [r3, #0]
      break;
 801f36a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801f36c:	687a      	ldr	r2, [r7, #4]
 801f36e:	683b      	ldr	r3, [r7, #0]
 801f370:	781b      	ldrb	r3, [r3, #0]
 801f372:	009b      	lsls	r3, r3, #2
 801f374:	18d3      	adds	r3, r2, r3
 801f376:	226c      	movs	r2, #108	@ 0x6c
 801f378:	18ba      	adds	r2, r7, r2
 801f37a:	8812      	ldrh	r2, [r2, #0]
 801f37c:	4985      	ldr	r1, [pc, #532]	@ (801f594 <USB_ActivateEndpoint+0x2b8>)
 801f37e:	430a      	orrs	r2, r1
 801f380:	b292      	uxth	r2, r2
 801f382:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801f384:	687a      	ldr	r2, [r7, #4]
 801f386:	683b      	ldr	r3, [r7, #0]
 801f388:	781b      	ldrb	r3, [r3, #0]
 801f38a:	009b      	lsls	r3, r3, #2
 801f38c:	18d3      	adds	r3, r2, r3
 801f38e:	881b      	ldrh	r3, [r3, #0]
 801f390:	b29b      	uxth	r3, r3
 801f392:	b21b      	sxth	r3, r3
 801f394:	4a80      	ldr	r2, [pc, #512]	@ (801f598 <USB_ActivateEndpoint+0x2bc>)
 801f396:	4013      	ands	r3, r2
 801f398:	b21a      	sxth	r2, r3
 801f39a:	683b      	ldr	r3, [r7, #0]
 801f39c:	781b      	ldrb	r3, [r3, #0]
 801f39e:	b21b      	sxth	r3, r3
 801f3a0:	4313      	orrs	r3, r2
 801f3a2:	b21a      	sxth	r2, r3
 801f3a4:	2166      	movs	r1, #102	@ 0x66
 801f3a6:	187b      	adds	r3, r7, r1
 801f3a8:	801a      	strh	r2, [r3, #0]
 801f3aa:	687a      	ldr	r2, [r7, #4]
 801f3ac:	683b      	ldr	r3, [r7, #0]
 801f3ae:	781b      	ldrb	r3, [r3, #0]
 801f3b0:	009b      	lsls	r3, r3, #2
 801f3b2:	18d3      	adds	r3, r2, r3
 801f3b4:	187a      	adds	r2, r7, r1
 801f3b6:	8812      	ldrh	r2, [r2, #0]
 801f3b8:	4976      	ldr	r1, [pc, #472]	@ (801f594 <USB_ActivateEndpoint+0x2b8>)
 801f3ba:	430a      	orrs	r2, r1
 801f3bc:	b292      	uxth	r2, r2
 801f3be:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801f3c0:	683b      	ldr	r3, [r7, #0]
 801f3c2:	7b1b      	ldrb	r3, [r3, #12]
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	d000      	beq.n	801f3ca <USB_ActivateEndpoint+0xee>
 801f3c8:	e178      	b.n	801f6bc <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801f3ca:	683b      	ldr	r3, [r7, #0]
 801f3cc:	785b      	ldrb	r3, [r3, #1]
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d100      	bne.n	801f3d4 <USB_ActivateEndpoint+0xf8>
 801f3d2:	e07a      	b.n	801f4ca <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f3d4:	687b      	ldr	r3, [r7, #4]
 801f3d6:	61bb      	str	r3, [r7, #24]
 801f3d8:	687b      	ldr	r3, [r7, #4]
 801f3da:	2250      	movs	r2, #80	@ 0x50
 801f3dc:	5a9b      	ldrh	r3, [r3, r2]
 801f3de:	b29b      	uxth	r3, r3
 801f3e0:	001a      	movs	r2, r3
 801f3e2:	69bb      	ldr	r3, [r7, #24]
 801f3e4:	189b      	adds	r3, r3, r2
 801f3e6:	61bb      	str	r3, [r7, #24]
 801f3e8:	683b      	ldr	r3, [r7, #0]
 801f3ea:	781b      	ldrb	r3, [r3, #0]
 801f3ec:	00da      	lsls	r2, r3, #3
 801f3ee:	69bb      	ldr	r3, [r7, #24]
 801f3f0:	18d3      	adds	r3, r2, r3
 801f3f2:	2280      	movs	r2, #128	@ 0x80
 801f3f4:	00d2      	lsls	r2, r2, #3
 801f3f6:	4694      	mov	ip, r2
 801f3f8:	4463      	add	r3, ip
 801f3fa:	617b      	str	r3, [r7, #20]
 801f3fc:	683b      	ldr	r3, [r7, #0]
 801f3fe:	88db      	ldrh	r3, [r3, #6]
 801f400:	085b      	lsrs	r3, r3, #1
 801f402:	b29b      	uxth	r3, r3
 801f404:	18db      	adds	r3, r3, r3
 801f406:	b29a      	uxth	r2, r3
 801f408:	697b      	ldr	r3, [r7, #20]
 801f40a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f40c:	687a      	ldr	r2, [r7, #4]
 801f40e:	683b      	ldr	r3, [r7, #0]
 801f410:	781b      	ldrb	r3, [r3, #0]
 801f412:	009b      	lsls	r3, r3, #2
 801f414:	18d2      	adds	r2, r2, r3
 801f416:	2112      	movs	r1, #18
 801f418:	187b      	adds	r3, r7, r1
 801f41a:	8812      	ldrh	r2, [r2, #0]
 801f41c:	801a      	strh	r2, [r3, #0]
 801f41e:	187b      	adds	r3, r7, r1
 801f420:	881b      	ldrh	r3, [r3, #0]
 801f422:	2240      	movs	r2, #64	@ 0x40
 801f424:	4013      	ands	r3, r2
 801f426:	d016      	beq.n	801f456 <USB_ActivateEndpoint+0x17a>
 801f428:	687a      	ldr	r2, [r7, #4]
 801f42a:	683b      	ldr	r3, [r7, #0]
 801f42c:	781b      	ldrb	r3, [r3, #0]
 801f42e:	009b      	lsls	r3, r3, #2
 801f430:	18d3      	adds	r3, r2, r3
 801f432:	881b      	ldrh	r3, [r3, #0]
 801f434:	b29a      	uxth	r2, r3
 801f436:	2010      	movs	r0, #16
 801f438:	183b      	adds	r3, r7, r0
 801f43a:	4957      	ldr	r1, [pc, #348]	@ (801f598 <USB_ActivateEndpoint+0x2bc>)
 801f43c:	400a      	ands	r2, r1
 801f43e:	801a      	strh	r2, [r3, #0]
 801f440:	687a      	ldr	r2, [r7, #4]
 801f442:	683b      	ldr	r3, [r7, #0]
 801f444:	781b      	ldrb	r3, [r3, #0]
 801f446:	009b      	lsls	r3, r3, #2
 801f448:	18d3      	adds	r3, r2, r3
 801f44a:	183a      	adds	r2, r7, r0
 801f44c:	8812      	ldrh	r2, [r2, #0]
 801f44e:	4953      	ldr	r1, [pc, #332]	@ (801f59c <USB_ActivateEndpoint+0x2c0>)
 801f450:	430a      	orrs	r2, r1
 801f452:	b292      	uxth	r2, r2
 801f454:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f456:	683b      	ldr	r3, [r7, #0]
 801f458:	78db      	ldrb	r3, [r3, #3]
 801f45a:	2b01      	cmp	r3, #1
 801f45c:	d01d      	beq.n	801f49a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f45e:	687a      	ldr	r2, [r7, #4]
 801f460:	683b      	ldr	r3, [r7, #0]
 801f462:	781b      	ldrb	r3, [r3, #0]
 801f464:	009b      	lsls	r3, r3, #2
 801f466:	18d3      	adds	r3, r2, r3
 801f468:	881b      	ldrh	r3, [r3, #0]
 801f46a:	b29a      	uxth	r2, r3
 801f46c:	200c      	movs	r0, #12
 801f46e:	183b      	adds	r3, r7, r0
 801f470:	494b      	ldr	r1, [pc, #300]	@ (801f5a0 <USB_ActivateEndpoint+0x2c4>)
 801f472:	400a      	ands	r2, r1
 801f474:	801a      	strh	r2, [r3, #0]
 801f476:	183b      	adds	r3, r7, r0
 801f478:	183a      	adds	r2, r7, r0
 801f47a:	8812      	ldrh	r2, [r2, #0]
 801f47c:	2120      	movs	r1, #32
 801f47e:	404a      	eors	r2, r1
 801f480:	801a      	strh	r2, [r3, #0]
 801f482:	687a      	ldr	r2, [r7, #4]
 801f484:	683b      	ldr	r3, [r7, #0]
 801f486:	781b      	ldrb	r3, [r3, #0]
 801f488:	009b      	lsls	r3, r3, #2
 801f48a:	18d3      	adds	r3, r2, r3
 801f48c:	183a      	adds	r2, r7, r0
 801f48e:	8812      	ldrh	r2, [r2, #0]
 801f490:	4940      	ldr	r1, [pc, #256]	@ (801f594 <USB_ActivateEndpoint+0x2b8>)
 801f492:	430a      	orrs	r2, r1
 801f494:	b292      	uxth	r2, r2
 801f496:	801a      	strh	r2, [r3, #0]
 801f498:	e2b4      	b.n	801fa04 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f49a:	687a      	ldr	r2, [r7, #4]
 801f49c:	683b      	ldr	r3, [r7, #0]
 801f49e:	781b      	ldrb	r3, [r3, #0]
 801f4a0:	009b      	lsls	r3, r3, #2
 801f4a2:	18d3      	adds	r3, r2, r3
 801f4a4:	881b      	ldrh	r3, [r3, #0]
 801f4a6:	b29a      	uxth	r2, r3
 801f4a8:	200e      	movs	r0, #14
 801f4aa:	183b      	adds	r3, r7, r0
 801f4ac:	493c      	ldr	r1, [pc, #240]	@ (801f5a0 <USB_ActivateEndpoint+0x2c4>)
 801f4ae:	400a      	ands	r2, r1
 801f4b0:	801a      	strh	r2, [r3, #0]
 801f4b2:	687a      	ldr	r2, [r7, #4]
 801f4b4:	683b      	ldr	r3, [r7, #0]
 801f4b6:	781b      	ldrb	r3, [r3, #0]
 801f4b8:	009b      	lsls	r3, r3, #2
 801f4ba:	18d3      	adds	r3, r2, r3
 801f4bc:	183a      	adds	r2, r7, r0
 801f4be:	8812      	ldrh	r2, [r2, #0]
 801f4c0:	4934      	ldr	r1, [pc, #208]	@ (801f594 <USB_ActivateEndpoint+0x2b8>)
 801f4c2:	430a      	orrs	r2, r1
 801f4c4:	b292      	uxth	r2, r2
 801f4c6:	801a      	strh	r2, [r3, #0]
 801f4c8:	e29c      	b.n	801fa04 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	633b      	str	r3, [r7, #48]	@ 0x30
 801f4ce:	687b      	ldr	r3, [r7, #4]
 801f4d0:	2250      	movs	r2, #80	@ 0x50
 801f4d2:	5a9b      	ldrh	r3, [r3, r2]
 801f4d4:	b29b      	uxth	r3, r3
 801f4d6:	001a      	movs	r2, r3
 801f4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f4da:	189b      	adds	r3, r3, r2
 801f4dc:	633b      	str	r3, [r7, #48]	@ 0x30
 801f4de:	683b      	ldr	r3, [r7, #0]
 801f4e0:	781b      	ldrb	r3, [r3, #0]
 801f4e2:	00da      	lsls	r2, r3, #3
 801f4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f4e6:	18d3      	adds	r3, r2, r3
 801f4e8:	4a2e      	ldr	r2, [pc, #184]	@ (801f5a4 <USB_ActivateEndpoint+0x2c8>)
 801f4ea:	4694      	mov	ip, r2
 801f4ec:	4463      	add	r3, ip
 801f4ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f4f0:	683b      	ldr	r3, [r7, #0]
 801f4f2:	88db      	ldrh	r3, [r3, #6]
 801f4f4:	085b      	lsrs	r3, r3, #1
 801f4f6:	b29b      	uxth	r3, r3
 801f4f8:	18db      	adds	r3, r3, r3
 801f4fa:	b29a      	uxth	r2, r3
 801f4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801f500:	687b      	ldr	r3, [r7, #4]
 801f502:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f504:	687b      	ldr	r3, [r7, #4]
 801f506:	2250      	movs	r2, #80	@ 0x50
 801f508:	5a9b      	ldrh	r3, [r3, r2]
 801f50a:	b29b      	uxth	r3, r3
 801f50c:	001a      	movs	r2, r3
 801f50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f510:	189b      	adds	r3, r3, r2
 801f512:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f514:	683b      	ldr	r3, [r7, #0]
 801f516:	781b      	ldrb	r3, [r3, #0]
 801f518:	00da      	lsls	r2, r3, #3
 801f51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f51c:	18d3      	adds	r3, r2, r3
 801f51e:	4a22      	ldr	r2, [pc, #136]	@ (801f5a8 <USB_ActivateEndpoint+0x2cc>)
 801f520:	4694      	mov	ip, r2
 801f522:	4463      	add	r3, ip
 801f524:	627b      	str	r3, [r7, #36]	@ 0x24
 801f526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f528:	881b      	ldrh	r3, [r3, #0]
 801f52a:	b29b      	uxth	r3, r3
 801f52c:	059b      	lsls	r3, r3, #22
 801f52e:	0d9b      	lsrs	r3, r3, #22
 801f530:	b29a      	uxth	r2, r3
 801f532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f534:	801a      	strh	r2, [r3, #0]
 801f536:	683b      	ldr	r3, [r7, #0]
 801f538:	691b      	ldr	r3, [r3, #16]
 801f53a:	2b3e      	cmp	r3, #62	@ 0x3e
 801f53c:	d91a      	bls.n	801f574 <USB_ActivateEndpoint+0x298>
 801f53e:	683b      	ldr	r3, [r7, #0]
 801f540:	691b      	ldr	r3, [r3, #16]
 801f542:	095b      	lsrs	r3, r3, #5
 801f544:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f546:	683b      	ldr	r3, [r7, #0]
 801f548:	691b      	ldr	r3, [r3, #16]
 801f54a:	221f      	movs	r2, #31
 801f54c:	4013      	ands	r3, r2
 801f54e:	d102      	bne.n	801f556 <USB_ActivateEndpoint+0x27a>
 801f550:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f552:	3b01      	subs	r3, #1
 801f554:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f558:	881b      	ldrh	r3, [r3, #0]
 801f55a:	b29a      	uxth	r2, r3
 801f55c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f55e:	b29b      	uxth	r3, r3
 801f560:	029b      	lsls	r3, r3, #10
 801f562:	b29b      	uxth	r3, r3
 801f564:	4313      	orrs	r3, r2
 801f566:	b29b      	uxth	r3, r3
 801f568:	4a10      	ldr	r2, [pc, #64]	@ (801f5ac <USB_ActivateEndpoint+0x2d0>)
 801f56a:	4313      	orrs	r3, r2
 801f56c:	b29a      	uxth	r2, r3
 801f56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f570:	801a      	strh	r2, [r3, #0]
 801f572:	e034      	b.n	801f5de <USB_ActivateEndpoint+0x302>
 801f574:	683b      	ldr	r3, [r7, #0]
 801f576:	691b      	ldr	r3, [r3, #16]
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d119      	bne.n	801f5b0 <USB_ActivateEndpoint+0x2d4>
 801f57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f57e:	881b      	ldrh	r3, [r3, #0]
 801f580:	b29b      	uxth	r3, r3
 801f582:	4a0a      	ldr	r2, [pc, #40]	@ (801f5ac <USB_ActivateEndpoint+0x2d0>)
 801f584:	4313      	orrs	r3, r2
 801f586:	b29a      	uxth	r2, r3
 801f588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f58a:	801a      	strh	r2, [r3, #0]
 801f58c:	e027      	b.n	801f5de <USB_ActivateEndpoint+0x302>
 801f58e:	46c0      	nop			@ (mov r8, r8)
 801f590:	ffff898f 	.word	0xffff898f
 801f594:	ffff8080 	.word	0xffff8080
 801f598:	ffff8f8f 	.word	0xffff8f8f
 801f59c:	ffff80c0 	.word	0xffff80c0
 801f5a0:	ffff8fbf 	.word	0xffff8fbf
 801f5a4:	00000404 	.word	0x00000404
 801f5a8:	00000406 	.word	0x00000406
 801f5ac:	ffff8000 	.word	0xffff8000
 801f5b0:	683b      	ldr	r3, [r7, #0]
 801f5b2:	691b      	ldr	r3, [r3, #16]
 801f5b4:	085b      	lsrs	r3, r3, #1
 801f5b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f5b8:	683b      	ldr	r3, [r7, #0]
 801f5ba:	691b      	ldr	r3, [r3, #16]
 801f5bc:	2201      	movs	r2, #1
 801f5be:	4013      	ands	r3, r2
 801f5c0:	d002      	beq.n	801f5c8 <USB_ActivateEndpoint+0x2ec>
 801f5c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f5c4:	3301      	adds	r3, #1
 801f5c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5ca:	881b      	ldrh	r3, [r3, #0]
 801f5cc:	b29a      	uxth	r2, r3
 801f5ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f5d0:	b29b      	uxth	r3, r3
 801f5d2:	029b      	lsls	r3, r3, #10
 801f5d4:	b29b      	uxth	r3, r3
 801f5d6:	4313      	orrs	r3, r2
 801f5d8:	b29a      	uxth	r2, r3
 801f5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f5de:	687a      	ldr	r2, [r7, #4]
 801f5e0:	683b      	ldr	r3, [r7, #0]
 801f5e2:	781b      	ldrb	r3, [r3, #0]
 801f5e4:	009b      	lsls	r3, r3, #2
 801f5e6:	18d2      	adds	r2, r2, r3
 801f5e8:	2122      	movs	r1, #34	@ 0x22
 801f5ea:	187b      	adds	r3, r7, r1
 801f5ec:	8812      	ldrh	r2, [r2, #0]
 801f5ee:	801a      	strh	r2, [r3, #0]
 801f5f0:	187b      	adds	r3, r7, r1
 801f5f2:	881a      	ldrh	r2, [r3, #0]
 801f5f4:	2380      	movs	r3, #128	@ 0x80
 801f5f6:	01db      	lsls	r3, r3, #7
 801f5f8:	4013      	ands	r3, r2
 801f5fa:	d016      	beq.n	801f62a <USB_ActivateEndpoint+0x34e>
 801f5fc:	687a      	ldr	r2, [r7, #4]
 801f5fe:	683b      	ldr	r3, [r7, #0]
 801f600:	781b      	ldrb	r3, [r3, #0]
 801f602:	009b      	lsls	r3, r3, #2
 801f604:	18d3      	adds	r3, r2, r3
 801f606:	881b      	ldrh	r3, [r3, #0]
 801f608:	b29a      	uxth	r2, r3
 801f60a:	2020      	movs	r0, #32
 801f60c:	183b      	adds	r3, r7, r0
 801f60e:	49dd      	ldr	r1, [pc, #884]	@ (801f984 <USB_ActivateEndpoint+0x6a8>)
 801f610:	400a      	ands	r2, r1
 801f612:	801a      	strh	r2, [r3, #0]
 801f614:	687a      	ldr	r2, [r7, #4]
 801f616:	683b      	ldr	r3, [r7, #0]
 801f618:	781b      	ldrb	r3, [r3, #0]
 801f61a:	009b      	lsls	r3, r3, #2
 801f61c:	18d3      	adds	r3, r2, r3
 801f61e:	183a      	adds	r2, r7, r0
 801f620:	8812      	ldrh	r2, [r2, #0]
 801f622:	49d9      	ldr	r1, [pc, #868]	@ (801f988 <USB_ActivateEndpoint+0x6ac>)
 801f624:	430a      	orrs	r2, r1
 801f626:	b292      	uxth	r2, r2
 801f628:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801f62a:	683b      	ldr	r3, [r7, #0]
 801f62c:	781b      	ldrb	r3, [r3, #0]
 801f62e:	2b00      	cmp	r3, #0
 801f630:	d125      	bne.n	801f67e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f632:	687a      	ldr	r2, [r7, #4]
 801f634:	683b      	ldr	r3, [r7, #0]
 801f636:	781b      	ldrb	r3, [r3, #0]
 801f638:	009b      	lsls	r3, r3, #2
 801f63a:	18d3      	adds	r3, r2, r3
 801f63c:	881b      	ldrh	r3, [r3, #0]
 801f63e:	b29a      	uxth	r2, r3
 801f640:	201c      	movs	r0, #28
 801f642:	183b      	adds	r3, r7, r0
 801f644:	49d1      	ldr	r1, [pc, #836]	@ (801f98c <USB_ActivateEndpoint+0x6b0>)
 801f646:	400a      	ands	r2, r1
 801f648:	801a      	strh	r2, [r3, #0]
 801f64a:	183b      	adds	r3, r7, r0
 801f64c:	183a      	adds	r2, r7, r0
 801f64e:	8812      	ldrh	r2, [r2, #0]
 801f650:	2180      	movs	r1, #128	@ 0x80
 801f652:	0149      	lsls	r1, r1, #5
 801f654:	404a      	eors	r2, r1
 801f656:	801a      	strh	r2, [r3, #0]
 801f658:	183b      	adds	r3, r7, r0
 801f65a:	183a      	adds	r2, r7, r0
 801f65c:	8812      	ldrh	r2, [r2, #0]
 801f65e:	2180      	movs	r1, #128	@ 0x80
 801f660:	0189      	lsls	r1, r1, #6
 801f662:	404a      	eors	r2, r1
 801f664:	801a      	strh	r2, [r3, #0]
 801f666:	687a      	ldr	r2, [r7, #4]
 801f668:	683b      	ldr	r3, [r7, #0]
 801f66a:	781b      	ldrb	r3, [r3, #0]
 801f66c:	009b      	lsls	r3, r3, #2
 801f66e:	18d3      	adds	r3, r2, r3
 801f670:	183a      	adds	r2, r7, r0
 801f672:	8812      	ldrh	r2, [r2, #0]
 801f674:	49c6      	ldr	r1, [pc, #792]	@ (801f990 <USB_ActivateEndpoint+0x6b4>)
 801f676:	430a      	orrs	r2, r1
 801f678:	b292      	uxth	r2, r2
 801f67a:	801a      	strh	r2, [r3, #0]
 801f67c:	e1c2      	b.n	801fa04 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801f67e:	687a      	ldr	r2, [r7, #4]
 801f680:	683b      	ldr	r3, [r7, #0]
 801f682:	781b      	ldrb	r3, [r3, #0]
 801f684:	009b      	lsls	r3, r3, #2
 801f686:	18d3      	adds	r3, r2, r3
 801f688:	881b      	ldrh	r3, [r3, #0]
 801f68a:	b29a      	uxth	r2, r3
 801f68c:	201e      	movs	r0, #30
 801f68e:	183b      	adds	r3, r7, r0
 801f690:	49be      	ldr	r1, [pc, #760]	@ (801f98c <USB_ActivateEndpoint+0x6b0>)
 801f692:	400a      	ands	r2, r1
 801f694:	801a      	strh	r2, [r3, #0]
 801f696:	183b      	adds	r3, r7, r0
 801f698:	183a      	adds	r2, r7, r0
 801f69a:	8812      	ldrh	r2, [r2, #0]
 801f69c:	2180      	movs	r1, #128	@ 0x80
 801f69e:	0189      	lsls	r1, r1, #6
 801f6a0:	404a      	eors	r2, r1
 801f6a2:	801a      	strh	r2, [r3, #0]
 801f6a4:	687a      	ldr	r2, [r7, #4]
 801f6a6:	683b      	ldr	r3, [r7, #0]
 801f6a8:	781b      	ldrb	r3, [r3, #0]
 801f6aa:	009b      	lsls	r3, r3, #2
 801f6ac:	18d3      	adds	r3, r2, r3
 801f6ae:	183a      	adds	r2, r7, r0
 801f6b0:	8812      	ldrh	r2, [r2, #0]
 801f6b2:	49b7      	ldr	r1, [pc, #732]	@ (801f990 <USB_ActivateEndpoint+0x6b4>)
 801f6b4:	430a      	orrs	r2, r1
 801f6b6:	b292      	uxth	r2, r2
 801f6b8:	801a      	strh	r2, [r3, #0]
 801f6ba:	e1a3      	b.n	801fa04 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801f6bc:	683b      	ldr	r3, [r7, #0]
 801f6be:	78db      	ldrb	r3, [r3, #3]
 801f6c0:	2b02      	cmp	r3, #2
 801f6c2:	d117      	bne.n	801f6f4 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f6c4:	687a      	ldr	r2, [r7, #4]
 801f6c6:	683b      	ldr	r3, [r7, #0]
 801f6c8:	781b      	ldrb	r3, [r3, #0]
 801f6ca:	009b      	lsls	r3, r3, #2
 801f6cc:	18d3      	adds	r3, r2, r3
 801f6ce:	881b      	ldrh	r3, [r3, #0]
 801f6d0:	b29a      	uxth	r2, r3
 801f6d2:	2062      	movs	r0, #98	@ 0x62
 801f6d4:	183b      	adds	r3, r7, r0
 801f6d6:	49ab      	ldr	r1, [pc, #684]	@ (801f984 <USB_ActivateEndpoint+0x6a8>)
 801f6d8:	400a      	ands	r2, r1
 801f6da:	801a      	strh	r2, [r3, #0]
 801f6dc:	687a      	ldr	r2, [r7, #4]
 801f6de:	683b      	ldr	r3, [r7, #0]
 801f6e0:	781b      	ldrb	r3, [r3, #0]
 801f6e2:	009b      	lsls	r3, r3, #2
 801f6e4:	18d3      	adds	r3, r2, r3
 801f6e6:	183a      	adds	r2, r7, r0
 801f6e8:	8812      	ldrh	r2, [r2, #0]
 801f6ea:	49aa      	ldr	r1, [pc, #680]	@ (801f994 <USB_ActivateEndpoint+0x6b8>)
 801f6ec:	430a      	orrs	r2, r1
 801f6ee:	b292      	uxth	r2, r2
 801f6f0:	801a      	strh	r2, [r3, #0]
 801f6f2:	e016      	b.n	801f722 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801f6f4:	687a      	ldr	r2, [r7, #4]
 801f6f6:	683b      	ldr	r3, [r7, #0]
 801f6f8:	781b      	ldrb	r3, [r3, #0]
 801f6fa:	009b      	lsls	r3, r3, #2
 801f6fc:	18d3      	adds	r3, r2, r3
 801f6fe:	881b      	ldrh	r3, [r3, #0]
 801f700:	b29a      	uxth	r2, r3
 801f702:	2064      	movs	r0, #100	@ 0x64
 801f704:	183b      	adds	r3, r7, r0
 801f706:	49a4      	ldr	r1, [pc, #656]	@ (801f998 <USB_ActivateEndpoint+0x6bc>)
 801f708:	400a      	ands	r2, r1
 801f70a:	801a      	strh	r2, [r3, #0]
 801f70c:	687a      	ldr	r2, [r7, #4]
 801f70e:	683b      	ldr	r3, [r7, #0]
 801f710:	781b      	ldrb	r3, [r3, #0]
 801f712:	009b      	lsls	r3, r3, #2
 801f714:	18d3      	adds	r3, r2, r3
 801f716:	183a      	adds	r2, r7, r0
 801f718:	8812      	ldrh	r2, [r2, #0]
 801f71a:	499d      	ldr	r1, [pc, #628]	@ (801f990 <USB_ActivateEndpoint+0x6b4>)
 801f71c:	430a      	orrs	r2, r1
 801f71e:	b292      	uxth	r2, r2
 801f720:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801f722:	687b      	ldr	r3, [r7, #4]
 801f724:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f726:	687b      	ldr	r3, [r7, #4]
 801f728:	2250      	movs	r2, #80	@ 0x50
 801f72a:	5a9b      	ldrh	r3, [r3, r2]
 801f72c:	b29b      	uxth	r3, r3
 801f72e:	001a      	movs	r2, r3
 801f730:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f732:	189b      	adds	r3, r3, r2
 801f734:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f736:	683b      	ldr	r3, [r7, #0]
 801f738:	781b      	ldrb	r3, [r3, #0]
 801f73a:	00da      	lsls	r2, r3, #3
 801f73c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f73e:	18d3      	adds	r3, r2, r3
 801f740:	2280      	movs	r2, #128	@ 0x80
 801f742:	00d2      	lsls	r2, r2, #3
 801f744:	4694      	mov	ip, r2
 801f746:	4463      	add	r3, ip
 801f748:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f74a:	683b      	ldr	r3, [r7, #0]
 801f74c:	891b      	ldrh	r3, [r3, #8]
 801f74e:	085b      	lsrs	r3, r3, #1
 801f750:	b29b      	uxth	r3, r3
 801f752:	18db      	adds	r3, r3, r3
 801f754:	b29a      	uxth	r2, r3
 801f756:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f758:	801a      	strh	r2, [r3, #0]
 801f75a:	687b      	ldr	r3, [r7, #4]
 801f75c:	657b      	str	r3, [r7, #84]	@ 0x54
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	2250      	movs	r2, #80	@ 0x50
 801f762:	5a9b      	ldrh	r3, [r3, r2]
 801f764:	b29b      	uxth	r3, r3
 801f766:	001a      	movs	r2, r3
 801f768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f76a:	189b      	adds	r3, r3, r2
 801f76c:	657b      	str	r3, [r7, #84]	@ 0x54
 801f76e:	683b      	ldr	r3, [r7, #0]
 801f770:	781b      	ldrb	r3, [r3, #0]
 801f772:	00da      	lsls	r2, r3, #3
 801f774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f776:	18d3      	adds	r3, r2, r3
 801f778:	4a88      	ldr	r2, [pc, #544]	@ (801f99c <USB_ActivateEndpoint+0x6c0>)
 801f77a:	4694      	mov	ip, r2
 801f77c:	4463      	add	r3, ip
 801f77e:	653b      	str	r3, [r7, #80]	@ 0x50
 801f780:	683b      	ldr	r3, [r7, #0]
 801f782:	895b      	ldrh	r3, [r3, #10]
 801f784:	085b      	lsrs	r3, r3, #1
 801f786:	b29b      	uxth	r3, r3
 801f788:	18db      	adds	r3, r3, r3
 801f78a:	b29a      	uxth	r2, r3
 801f78c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f78e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801f790:	683b      	ldr	r3, [r7, #0]
 801f792:	785b      	ldrb	r3, [r3, #1]
 801f794:	2b00      	cmp	r3, #0
 801f796:	d000      	beq.n	801f79a <USB_ActivateEndpoint+0x4be>
 801f798:	e087      	b.n	801f8aa <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f79a:	687a      	ldr	r2, [r7, #4]
 801f79c:	683b      	ldr	r3, [r7, #0]
 801f79e:	781b      	ldrb	r3, [r3, #0]
 801f7a0:	009b      	lsls	r3, r3, #2
 801f7a2:	18d2      	adds	r2, r2, r3
 801f7a4:	2140      	movs	r1, #64	@ 0x40
 801f7a6:	187b      	adds	r3, r7, r1
 801f7a8:	8812      	ldrh	r2, [r2, #0]
 801f7aa:	801a      	strh	r2, [r3, #0]
 801f7ac:	187b      	adds	r3, r7, r1
 801f7ae:	881a      	ldrh	r2, [r3, #0]
 801f7b0:	2380      	movs	r3, #128	@ 0x80
 801f7b2:	01db      	lsls	r3, r3, #7
 801f7b4:	4013      	ands	r3, r2
 801f7b6:	d016      	beq.n	801f7e6 <USB_ActivateEndpoint+0x50a>
 801f7b8:	687a      	ldr	r2, [r7, #4]
 801f7ba:	683b      	ldr	r3, [r7, #0]
 801f7bc:	781b      	ldrb	r3, [r3, #0]
 801f7be:	009b      	lsls	r3, r3, #2
 801f7c0:	18d3      	adds	r3, r2, r3
 801f7c2:	881b      	ldrh	r3, [r3, #0]
 801f7c4:	b29a      	uxth	r2, r3
 801f7c6:	203e      	movs	r0, #62	@ 0x3e
 801f7c8:	183b      	adds	r3, r7, r0
 801f7ca:	496e      	ldr	r1, [pc, #440]	@ (801f984 <USB_ActivateEndpoint+0x6a8>)
 801f7cc:	400a      	ands	r2, r1
 801f7ce:	801a      	strh	r2, [r3, #0]
 801f7d0:	687a      	ldr	r2, [r7, #4]
 801f7d2:	683b      	ldr	r3, [r7, #0]
 801f7d4:	781b      	ldrb	r3, [r3, #0]
 801f7d6:	009b      	lsls	r3, r3, #2
 801f7d8:	18d3      	adds	r3, r2, r3
 801f7da:	183a      	adds	r2, r7, r0
 801f7dc:	8812      	ldrh	r2, [r2, #0]
 801f7de:	496a      	ldr	r1, [pc, #424]	@ (801f988 <USB_ActivateEndpoint+0x6ac>)
 801f7e0:	430a      	orrs	r2, r1
 801f7e2:	b292      	uxth	r2, r2
 801f7e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f7e6:	687a      	ldr	r2, [r7, #4]
 801f7e8:	683b      	ldr	r3, [r7, #0]
 801f7ea:	781b      	ldrb	r3, [r3, #0]
 801f7ec:	009b      	lsls	r3, r3, #2
 801f7ee:	18d2      	adds	r2, r2, r3
 801f7f0:	213c      	movs	r1, #60	@ 0x3c
 801f7f2:	187b      	adds	r3, r7, r1
 801f7f4:	8812      	ldrh	r2, [r2, #0]
 801f7f6:	801a      	strh	r2, [r3, #0]
 801f7f8:	187b      	adds	r3, r7, r1
 801f7fa:	881b      	ldrh	r3, [r3, #0]
 801f7fc:	2240      	movs	r2, #64	@ 0x40
 801f7fe:	4013      	ands	r3, r2
 801f800:	d016      	beq.n	801f830 <USB_ActivateEndpoint+0x554>
 801f802:	687a      	ldr	r2, [r7, #4]
 801f804:	683b      	ldr	r3, [r7, #0]
 801f806:	781b      	ldrb	r3, [r3, #0]
 801f808:	009b      	lsls	r3, r3, #2
 801f80a:	18d3      	adds	r3, r2, r3
 801f80c:	881b      	ldrh	r3, [r3, #0]
 801f80e:	b29a      	uxth	r2, r3
 801f810:	203a      	movs	r0, #58	@ 0x3a
 801f812:	183b      	adds	r3, r7, r0
 801f814:	495b      	ldr	r1, [pc, #364]	@ (801f984 <USB_ActivateEndpoint+0x6a8>)
 801f816:	400a      	ands	r2, r1
 801f818:	801a      	strh	r2, [r3, #0]
 801f81a:	687a      	ldr	r2, [r7, #4]
 801f81c:	683b      	ldr	r3, [r7, #0]
 801f81e:	781b      	ldrb	r3, [r3, #0]
 801f820:	009b      	lsls	r3, r3, #2
 801f822:	18d3      	adds	r3, r2, r3
 801f824:	183a      	adds	r2, r7, r0
 801f826:	8812      	ldrh	r2, [r2, #0]
 801f828:	495d      	ldr	r1, [pc, #372]	@ (801f9a0 <USB_ActivateEndpoint+0x6c4>)
 801f82a:	430a      	orrs	r2, r1
 801f82c:	b292      	uxth	r2, r2
 801f82e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f830:	687a      	ldr	r2, [r7, #4]
 801f832:	683b      	ldr	r3, [r7, #0]
 801f834:	781b      	ldrb	r3, [r3, #0]
 801f836:	009b      	lsls	r3, r3, #2
 801f838:	18d3      	adds	r3, r2, r3
 801f83a:	881b      	ldrh	r3, [r3, #0]
 801f83c:	b29a      	uxth	r2, r3
 801f83e:	2038      	movs	r0, #56	@ 0x38
 801f840:	183b      	adds	r3, r7, r0
 801f842:	4952      	ldr	r1, [pc, #328]	@ (801f98c <USB_ActivateEndpoint+0x6b0>)
 801f844:	400a      	ands	r2, r1
 801f846:	801a      	strh	r2, [r3, #0]
 801f848:	183b      	adds	r3, r7, r0
 801f84a:	183a      	adds	r2, r7, r0
 801f84c:	8812      	ldrh	r2, [r2, #0]
 801f84e:	2180      	movs	r1, #128	@ 0x80
 801f850:	0149      	lsls	r1, r1, #5
 801f852:	404a      	eors	r2, r1
 801f854:	801a      	strh	r2, [r3, #0]
 801f856:	183b      	adds	r3, r7, r0
 801f858:	183a      	adds	r2, r7, r0
 801f85a:	8812      	ldrh	r2, [r2, #0]
 801f85c:	2180      	movs	r1, #128	@ 0x80
 801f85e:	0189      	lsls	r1, r1, #6
 801f860:	404a      	eors	r2, r1
 801f862:	801a      	strh	r2, [r3, #0]
 801f864:	687a      	ldr	r2, [r7, #4]
 801f866:	683b      	ldr	r3, [r7, #0]
 801f868:	781b      	ldrb	r3, [r3, #0]
 801f86a:	009b      	lsls	r3, r3, #2
 801f86c:	18d3      	adds	r3, r2, r3
 801f86e:	183a      	adds	r2, r7, r0
 801f870:	8812      	ldrh	r2, [r2, #0]
 801f872:	4947      	ldr	r1, [pc, #284]	@ (801f990 <USB_ActivateEndpoint+0x6b4>)
 801f874:	430a      	orrs	r2, r1
 801f876:	b292      	uxth	r2, r2
 801f878:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f87a:	687a      	ldr	r2, [r7, #4]
 801f87c:	683b      	ldr	r3, [r7, #0]
 801f87e:	781b      	ldrb	r3, [r3, #0]
 801f880:	009b      	lsls	r3, r3, #2
 801f882:	18d3      	adds	r3, r2, r3
 801f884:	881b      	ldrh	r3, [r3, #0]
 801f886:	b29a      	uxth	r2, r3
 801f888:	2036      	movs	r0, #54	@ 0x36
 801f88a:	183b      	adds	r3, r7, r0
 801f88c:	4945      	ldr	r1, [pc, #276]	@ (801f9a4 <USB_ActivateEndpoint+0x6c8>)
 801f88e:	400a      	ands	r2, r1
 801f890:	801a      	strh	r2, [r3, #0]
 801f892:	687a      	ldr	r2, [r7, #4]
 801f894:	683b      	ldr	r3, [r7, #0]
 801f896:	781b      	ldrb	r3, [r3, #0]
 801f898:	009b      	lsls	r3, r3, #2
 801f89a:	18d3      	adds	r3, r2, r3
 801f89c:	183a      	adds	r2, r7, r0
 801f89e:	8812      	ldrh	r2, [r2, #0]
 801f8a0:	493b      	ldr	r1, [pc, #236]	@ (801f990 <USB_ActivateEndpoint+0x6b4>)
 801f8a2:	430a      	orrs	r2, r1
 801f8a4:	b292      	uxth	r2, r2
 801f8a6:	801a      	strh	r2, [r3, #0]
 801f8a8:	e0ac      	b.n	801fa04 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f8aa:	687a      	ldr	r2, [r7, #4]
 801f8ac:	683b      	ldr	r3, [r7, #0]
 801f8ae:	781b      	ldrb	r3, [r3, #0]
 801f8b0:	009b      	lsls	r3, r3, #2
 801f8b2:	18d2      	adds	r2, r2, r3
 801f8b4:	214e      	movs	r1, #78	@ 0x4e
 801f8b6:	187b      	adds	r3, r7, r1
 801f8b8:	8812      	ldrh	r2, [r2, #0]
 801f8ba:	801a      	strh	r2, [r3, #0]
 801f8bc:	187b      	adds	r3, r7, r1
 801f8be:	881a      	ldrh	r2, [r3, #0]
 801f8c0:	2380      	movs	r3, #128	@ 0x80
 801f8c2:	01db      	lsls	r3, r3, #7
 801f8c4:	4013      	ands	r3, r2
 801f8c6:	d016      	beq.n	801f8f6 <USB_ActivateEndpoint+0x61a>
 801f8c8:	687a      	ldr	r2, [r7, #4]
 801f8ca:	683b      	ldr	r3, [r7, #0]
 801f8cc:	781b      	ldrb	r3, [r3, #0]
 801f8ce:	009b      	lsls	r3, r3, #2
 801f8d0:	18d3      	adds	r3, r2, r3
 801f8d2:	881b      	ldrh	r3, [r3, #0]
 801f8d4:	b29a      	uxth	r2, r3
 801f8d6:	204c      	movs	r0, #76	@ 0x4c
 801f8d8:	183b      	adds	r3, r7, r0
 801f8da:	492a      	ldr	r1, [pc, #168]	@ (801f984 <USB_ActivateEndpoint+0x6a8>)
 801f8dc:	400a      	ands	r2, r1
 801f8de:	801a      	strh	r2, [r3, #0]
 801f8e0:	687a      	ldr	r2, [r7, #4]
 801f8e2:	683b      	ldr	r3, [r7, #0]
 801f8e4:	781b      	ldrb	r3, [r3, #0]
 801f8e6:	009b      	lsls	r3, r3, #2
 801f8e8:	18d3      	adds	r3, r2, r3
 801f8ea:	183a      	adds	r2, r7, r0
 801f8ec:	8812      	ldrh	r2, [r2, #0]
 801f8ee:	4926      	ldr	r1, [pc, #152]	@ (801f988 <USB_ActivateEndpoint+0x6ac>)
 801f8f0:	430a      	orrs	r2, r1
 801f8f2:	b292      	uxth	r2, r2
 801f8f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f8f6:	687a      	ldr	r2, [r7, #4]
 801f8f8:	683b      	ldr	r3, [r7, #0]
 801f8fa:	781b      	ldrb	r3, [r3, #0]
 801f8fc:	009b      	lsls	r3, r3, #2
 801f8fe:	18d2      	adds	r2, r2, r3
 801f900:	214a      	movs	r1, #74	@ 0x4a
 801f902:	187b      	adds	r3, r7, r1
 801f904:	8812      	ldrh	r2, [r2, #0]
 801f906:	801a      	strh	r2, [r3, #0]
 801f908:	187b      	adds	r3, r7, r1
 801f90a:	881b      	ldrh	r3, [r3, #0]
 801f90c:	2240      	movs	r2, #64	@ 0x40
 801f90e:	4013      	ands	r3, r2
 801f910:	d016      	beq.n	801f940 <USB_ActivateEndpoint+0x664>
 801f912:	687a      	ldr	r2, [r7, #4]
 801f914:	683b      	ldr	r3, [r7, #0]
 801f916:	781b      	ldrb	r3, [r3, #0]
 801f918:	009b      	lsls	r3, r3, #2
 801f91a:	18d3      	adds	r3, r2, r3
 801f91c:	881b      	ldrh	r3, [r3, #0]
 801f91e:	b29a      	uxth	r2, r3
 801f920:	2048      	movs	r0, #72	@ 0x48
 801f922:	183b      	adds	r3, r7, r0
 801f924:	4917      	ldr	r1, [pc, #92]	@ (801f984 <USB_ActivateEndpoint+0x6a8>)
 801f926:	400a      	ands	r2, r1
 801f928:	801a      	strh	r2, [r3, #0]
 801f92a:	687a      	ldr	r2, [r7, #4]
 801f92c:	683b      	ldr	r3, [r7, #0]
 801f92e:	781b      	ldrb	r3, [r3, #0]
 801f930:	009b      	lsls	r3, r3, #2
 801f932:	18d3      	adds	r3, r2, r3
 801f934:	183a      	adds	r2, r7, r0
 801f936:	8812      	ldrh	r2, [r2, #0]
 801f938:	4919      	ldr	r1, [pc, #100]	@ (801f9a0 <USB_ActivateEndpoint+0x6c4>)
 801f93a:	430a      	orrs	r2, r1
 801f93c:	b292      	uxth	r2, r2
 801f93e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f940:	683b      	ldr	r3, [r7, #0]
 801f942:	78db      	ldrb	r3, [r3, #3]
 801f944:	2b01      	cmp	r3, #1
 801f946:	d02f      	beq.n	801f9a8 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f948:	687a      	ldr	r2, [r7, #4]
 801f94a:	683b      	ldr	r3, [r7, #0]
 801f94c:	781b      	ldrb	r3, [r3, #0]
 801f94e:	009b      	lsls	r3, r3, #2
 801f950:	18d3      	adds	r3, r2, r3
 801f952:	881b      	ldrh	r3, [r3, #0]
 801f954:	b29a      	uxth	r2, r3
 801f956:	2044      	movs	r0, #68	@ 0x44
 801f958:	183b      	adds	r3, r7, r0
 801f95a:	4912      	ldr	r1, [pc, #72]	@ (801f9a4 <USB_ActivateEndpoint+0x6c8>)
 801f95c:	400a      	ands	r2, r1
 801f95e:	801a      	strh	r2, [r3, #0]
 801f960:	183b      	adds	r3, r7, r0
 801f962:	183a      	adds	r2, r7, r0
 801f964:	8812      	ldrh	r2, [r2, #0]
 801f966:	2120      	movs	r1, #32
 801f968:	404a      	eors	r2, r1
 801f96a:	801a      	strh	r2, [r3, #0]
 801f96c:	687a      	ldr	r2, [r7, #4]
 801f96e:	683b      	ldr	r3, [r7, #0]
 801f970:	781b      	ldrb	r3, [r3, #0]
 801f972:	009b      	lsls	r3, r3, #2
 801f974:	18d3      	adds	r3, r2, r3
 801f976:	183a      	adds	r2, r7, r0
 801f978:	8812      	ldrh	r2, [r2, #0]
 801f97a:	4905      	ldr	r1, [pc, #20]	@ (801f990 <USB_ActivateEndpoint+0x6b4>)
 801f97c:	430a      	orrs	r2, r1
 801f97e:	b292      	uxth	r2, r2
 801f980:	801a      	strh	r2, [r3, #0]
 801f982:	e028      	b.n	801f9d6 <USB_ActivateEndpoint+0x6fa>
 801f984:	ffff8f8f 	.word	0xffff8f8f
 801f988:	ffffc080 	.word	0xffffc080
 801f98c:	ffffbf8f 	.word	0xffffbf8f
 801f990:	ffff8080 	.word	0xffff8080
 801f994:	ffff8180 	.word	0xffff8180
 801f998:	ffff8e8f 	.word	0xffff8e8f
 801f99c:	00000404 	.word	0x00000404
 801f9a0:	ffff80c0 	.word	0xffff80c0
 801f9a4:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f9a8:	687a      	ldr	r2, [r7, #4]
 801f9aa:	683b      	ldr	r3, [r7, #0]
 801f9ac:	781b      	ldrb	r3, [r3, #0]
 801f9ae:	009b      	lsls	r3, r3, #2
 801f9b0:	18d3      	adds	r3, r2, r3
 801f9b2:	881b      	ldrh	r3, [r3, #0]
 801f9b4:	b29a      	uxth	r2, r3
 801f9b6:	2046      	movs	r0, #70	@ 0x46
 801f9b8:	183b      	adds	r3, r7, r0
 801f9ba:	4916      	ldr	r1, [pc, #88]	@ (801fa14 <USB_ActivateEndpoint+0x738>)
 801f9bc:	400a      	ands	r2, r1
 801f9be:	801a      	strh	r2, [r3, #0]
 801f9c0:	687a      	ldr	r2, [r7, #4]
 801f9c2:	683b      	ldr	r3, [r7, #0]
 801f9c4:	781b      	ldrb	r3, [r3, #0]
 801f9c6:	009b      	lsls	r3, r3, #2
 801f9c8:	18d3      	adds	r3, r2, r3
 801f9ca:	183a      	adds	r2, r7, r0
 801f9cc:	8812      	ldrh	r2, [r2, #0]
 801f9ce:	4912      	ldr	r1, [pc, #72]	@ (801fa18 <USB_ActivateEndpoint+0x73c>)
 801f9d0:	430a      	orrs	r2, r1
 801f9d2:	b292      	uxth	r2, r2
 801f9d4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801f9d6:	687a      	ldr	r2, [r7, #4]
 801f9d8:	683b      	ldr	r3, [r7, #0]
 801f9da:	781b      	ldrb	r3, [r3, #0]
 801f9dc:	009b      	lsls	r3, r3, #2
 801f9de:	18d3      	adds	r3, r2, r3
 801f9e0:	881b      	ldrh	r3, [r3, #0]
 801f9e2:	b29a      	uxth	r2, r3
 801f9e4:	2042      	movs	r0, #66	@ 0x42
 801f9e6:	183b      	adds	r3, r7, r0
 801f9e8:	490c      	ldr	r1, [pc, #48]	@ (801fa1c <USB_ActivateEndpoint+0x740>)
 801f9ea:	400a      	ands	r2, r1
 801f9ec:	801a      	strh	r2, [r3, #0]
 801f9ee:	687a      	ldr	r2, [r7, #4]
 801f9f0:	683b      	ldr	r3, [r7, #0]
 801f9f2:	781b      	ldrb	r3, [r3, #0]
 801f9f4:	009b      	lsls	r3, r3, #2
 801f9f6:	18d3      	adds	r3, r2, r3
 801f9f8:	183a      	adds	r2, r7, r0
 801f9fa:	8812      	ldrh	r2, [r2, #0]
 801f9fc:	4906      	ldr	r1, [pc, #24]	@ (801fa18 <USB_ActivateEndpoint+0x73c>)
 801f9fe:	430a      	orrs	r2, r1
 801fa00:	b292      	uxth	r2, r2
 801fa02:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801fa04:	236f      	movs	r3, #111	@ 0x6f
 801fa06:	18fb      	adds	r3, r7, r3
 801fa08:	781b      	ldrb	r3, [r3, #0]
}
 801fa0a:	0018      	movs	r0, r3
 801fa0c:	46bd      	mov	sp, r7
 801fa0e:	b01c      	add	sp, #112	@ 0x70
 801fa10:	bd80      	pop	{r7, pc}
 801fa12:	46c0      	nop			@ (mov r8, r8)
 801fa14:	ffff8fbf 	.word	0xffff8fbf
 801fa18:	ffff8080 	.word	0xffff8080
 801fa1c:	ffffbf8f 	.word	0xffffbf8f

0801fa20 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fa20:	b580      	push	{r7, lr}
 801fa22:	b08c      	sub	sp, #48	@ 0x30
 801fa24:	af00      	add	r7, sp, #0
 801fa26:	6078      	str	r0, [r7, #4]
 801fa28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801fa2a:	683b      	ldr	r3, [r7, #0]
 801fa2c:	7b1b      	ldrb	r3, [r3, #12]
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	d000      	beq.n	801fa34 <USB_DeactivateEndpoint+0x14>
 801fa32:	e07e      	b.n	801fb32 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801fa34:	683b      	ldr	r3, [r7, #0]
 801fa36:	785b      	ldrb	r3, [r3, #1]
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	d03c      	beq.n	801fab6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fa3c:	687a      	ldr	r2, [r7, #4]
 801fa3e:	683b      	ldr	r3, [r7, #0]
 801fa40:	781b      	ldrb	r3, [r3, #0]
 801fa42:	009b      	lsls	r3, r3, #2
 801fa44:	18d2      	adds	r2, r2, r3
 801fa46:	210c      	movs	r1, #12
 801fa48:	187b      	adds	r3, r7, r1
 801fa4a:	8812      	ldrh	r2, [r2, #0]
 801fa4c:	801a      	strh	r2, [r3, #0]
 801fa4e:	187b      	adds	r3, r7, r1
 801fa50:	881b      	ldrh	r3, [r3, #0]
 801fa52:	2240      	movs	r2, #64	@ 0x40
 801fa54:	4013      	ands	r3, r2
 801fa56:	d016      	beq.n	801fa86 <USB_DeactivateEndpoint+0x66>
 801fa58:	687a      	ldr	r2, [r7, #4]
 801fa5a:	683b      	ldr	r3, [r7, #0]
 801fa5c:	781b      	ldrb	r3, [r3, #0]
 801fa5e:	009b      	lsls	r3, r3, #2
 801fa60:	18d3      	adds	r3, r2, r3
 801fa62:	881b      	ldrh	r3, [r3, #0]
 801fa64:	b29a      	uxth	r2, r3
 801fa66:	200a      	movs	r0, #10
 801fa68:	183b      	adds	r3, r7, r0
 801fa6a:	49c7      	ldr	r1, [pc, #796]	@ (801fd88 <USB_DeactivateEndpoint+0x368>)
 801fa6c:	400a      	ands	r2, r1
 801fa6e:	801a      	strh	r2, [r3, #0]
 801fa70:	687a      	ldr	r2, [r7, #4]
 801fa72:	683b      	ldr	r3, [r7, #0]
 801fa74:	781b      	ldrb	r3, [r3, #0]
 801fa76:	009b      	lsls	r3, r3, #2
 801fa78:	18d3      	adds	r3, r2, r3
 801fa7a:	183a      	adds	r2, r7, r0
 801fa7c:	8812      	ldrh	r2, [r2, #0]
 801fa7e:	49c3      	ldr	r1, [pc, #780]	@ (801fd8c <USB_DeactivateEndpoint+0x36c>)
 801fa80:	430a      	orrs	r2, r1
 801fa82:	b292      	uxth	r2, r2
 801fa84:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fa86:	687a      	ldr	r2, [r7, #4]
 801fa88:	683b      	ldr	r3, [r7, #0]
 801fa8a:	781b      	ldrb	r3, [r3, #0]
 801fa8c:	009b      	lsls	r3, r3, #2
 801fa8e:	18d3      	adds	r3, r2, r3
 801fa90:	881b      	ldrh	r3, [r3, #0]
 801fa92:	b29a      	uxth	r2, r3
 801fa94:	2008      	movs	r0, #8
 801fa96:	183b      	adds	r3, r7, r0
 801fa98:	49bd      	ldr	r1, [pc, #756]	@ (801fd90 <USB_DeactivateEndpoint+0x370>)
 801fa9a:	400a      	ands	r2, r1
 801fa9c:	801a      	strh	r2, [r3, #0]
 801fa9e:	687a      	ldr	r2, [r7, #4]
 801faa0:	683b      	ldr	r3, [r7, #0]
 801faa2:	781b      	ldrb	r3, [r3, #0]
 801faa4:	009b      	lsls	r3, r3, #2
 801faa6:	18d3      	adds	r3, r2, r3
 801faa8:	183a      	adds	r2, r7, r0
 801faaa:	8812      	ldrh	r2, [r2, #0]
 801faac:	49b9      	ldr	r1, [pc, #740]	@ (801fd94 <USB_DeactivateEndpoint+0x374>)
 801faae:	430a      	orrs	r2, r1
 801fab0:	b292      	uxth	r2, r2
 801fab2:	801a      	strh	r2, [r3, #0]
 801fab4:	e163      	b.n	801fd7e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fab6:	687a      	ldr	r2, [r7, #4]
 801fab8:	683b      	ldr	r3, [r7, #0]
 801faba:	781b      	ldrb	r3, [r3, #0]
 801fabc:	009b      	lsls	r3, r3, #2
 801fabe:	18d2      	adds	r2, r2, r3
 801fac0:	2112      	movs	r1, #18
 801fac2:	187b      	adds	r3, r7, r1
 801fac4:	8812      	ldrh	r2, [r2, #0]
 801fac6:	801a      	strh	r2, [r3, #0]
 801fac8:	187b      	adds	r3, r7, r1
 801faca:	881a      	ldrh	r2, [r3, #0]
 801facc:	2380      	movs	r3, #128	@ 0x80
 801face:	01db      	lsls	r3, r3, #7
 801fad0:	4013      	ands	r3, r2
 801fad2:	d016      	beq.n	801fb02 <USB_DeactivateEndpoint+0xe2>
 801fad4:	687a      	ldr	r2, [r7, #4]
 801fad6:	683b      	ldr	r3, [r7, #0]
 801fad8:	781b      	ldrb	r3, [r3, #0]
 801fada:	009b      	lsls	r3, r3, #2
 801fadc:	18d3      	adds	r3, r2, r3
 801fade:	881b      	ldrh	r3, [r3, #0]
 801fae0:	b29a      	uxth	r2, r3
 801fae2:	2010      	movs	r0, #16
 801fae4:	183b      	adds	r3, r7, r0
 801fae6:	49a8      	ldr	r1, [pc, #672]	@ (801fd88 <USB_DeactivateEndpoint+0x368>)
 801fae8:	400a      	ands	r2, r1
 801faea:	801a      	strh	r2, [r3, #0]
 801faec:	687a      	ldr	r2, [r7, #4]
 801faee:	683b      	ldr	r3, [r7, #0]
 801faf0:	781b      	ldrb	r3, [r3, #0]
 801faf2:	009b      	lsls	r3, r3, #2
 801faf4:	18d3      	adds	r3, r2, r3
 801faf6:	183a      	adds	r2, r7, r0
 801faf8:	8812      	ldrh	r2, [r2, #0]
 801fafa:	49a7      	ldr	r1, [pc, #668]	@ (801fd98 <USB_DeactivateEndpoint+0x378>)
 801fafc:	430a      	orrs	r2, r1
 801fafe:	b292      	uxth	r2, r2
 801fb00:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fb02:	687a      	ldr	r2, [r7, #4]
 801fb04:	683b      	ldr	r3, [r7, #0]
 801fb06:	781b      	ldrb	r3, [r3, #0]
 801fb08:	009b      	lsls	r3, r3, #2
 801fb0a:	18d3      	adds	r3, r2, r3
 801fb0c:	881b      	ldrh	r3, [r3, #0]
 801fb0e:	b29a      	uxth	r2, r3
 801fb10:	200e      	movs	r0, #14
 801fb12:	183b      	adds	r3, r7, r0
 801fb14:	49a1      	ldr	r1, [pc, #644]	@ (801fd9c <USB_DeactivateEndpoint+0x37c>)
 801fb16:	400a      	ands	r2, r1
 801fb18:	801a      	strh	r2, [r3, #0]
 801fb1a:	687a      	ldr	r2, [r7, #4]
 801fb1c:	683b      	ldr	r3, [r7, #0]
 801fb1e:	781b      	ldrb	r3, [r3, #0]
 801fb20:	009b      	lsls	r3, r3, #2
 801fb22:	18d3      	adds	r3, r2, r3
 801fb24:	183a      	adds	r2, r7, r0
 801fb26:	8812      	ldrh	r2, [r2, #0]
 801fb28:	499a      	ldr	r1, [pc, #616]	@ (801fd94 <USB_DeactivateEndpoint+0x374>)
 801fb2a:	430a      	orrs	r2, r1
 801fb2c:	b292      	uxth	r2, r2
 801fb2e:	801a      	strh	r2, [r3, #0]
 801fb30:	e125      	b.n	801fd7e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801fb32:	683b      	ldr	r3, [r7, #0]
 801fb34:	785b      	ldrb	r3, [r3, #1]
 801fb36:	2b00      	cmp	r3, #0
 801fb38:	d000      	beq.n	801fb3c <USB_DeactivateEndpoint+0x11c>
 801fb3a:	e090      	b.n	801fc5e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fb3c:	687a      	ldr	r2, [r7, #4]
 801fb3e:	683b      	ldr	r3, [r7, #0]
 801fb40:	781b      	ldrb	r3, [r3, #0]
 801fb42:	009b      	lsls	r3, r3, #2
 801fb44:	18d2      	adds	r2, r2, r3
 801fb46:	2120      	movs	r1, #32
 801fb48:	187b      	adds	r3, r7, r1
 801fb4a:	8812      	ldrh	r2, [r2, #0]
 801fb4c:	801a      	strh	r2, [r3, #0]
 801fb4e:	187b      	adds	r3, r7, r1
 801fb50:	881a      	ldrh	r2, [r3, #0]
 801fb52:	2380      	movs	r3, #128	@ 0x80
 801fb54:	01db      	lsls	r3, r3, #7
 801fb56:	4013      	ands	r3, r2
 801fb58:	d016      	beq.n	801fb88 <USB_DeactivateEndpoint+0x168>
 801fb5a:	687a      	ldr	r2, [r7, #4]
 801fb5c:	683b      	ldr	r3, [r7, #0]
 801fb5e:	781b      	ldrb	r3, [r3, #0]
 801fb60:	009b      	lsls	r3, r3, #2
 801fb62:	18d3      	adds	r3, r2, r3
 801fb64:	881b      	ldrh	r3, [r3, #0]
 801fb66:	b29a      	uxth	r2, r3
 801fb68:	201e      	movs	r0, #30
 801fb6a:	183b      	adds	r3, r7, r0
 801fb6c:	4986      	ldr	r1, [pc, #536]	@ (801fd88 <USB_DeactivateEndpoint+0x368>)
 801fb6e:	400a      	ands	r2, r1
 801fb70:	801a      	strh	r2, [r3, #0]
 801fb72:	687a      	ldr	r2, [r7, #4]
 801fb74:	683b      	ldr	r3, [r7, #0]
 801fb76:	781b      	ldrb	r3, [r3, #0]
 801fb78:	009b      	lsls	r3, r3, #2
 801fb7a:	18d3      	adds	r3, r2, r3
 801fb7c:	183a      	adds	r2, r7, r0
 801fb7e:	8812      	ldrh	r2, [r2, #0]
 801fb80:	4985      	ldr	r1, [pc, #532]	@ (801fd98 <USB_DeactivateEndpoint+0x378>)
 801fb82:	430a      	orrs	r2, r1
 801fb84:	b292      	uxth	r2, r2
 801fb86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fb88:	687a      	ldr	r2, [r7, #4]
 801fb8a:	683b      	ldr	r3, [r7, #0]
 801fb8c:	781b      	ldrb	r3, [r3, #0]
 801fb8e:	009b      	lsls	r3, r3, #2
 801fb90:	18d2      	adds	r2, r2, r3
 801fb92:	211c      	movs	r1, #28
 801fb94:	187b      	adds	r3, r7, r1
 801fb96:	8812      	ldrh	r2, [r2, #0]
 801fb98:	801a      	strh	r2, [r3, #0]
 801fb9a:	187b      	adds	r3, r7, r1
 801fb9c:	881b      	ldrh	r3, [r3, #0]
 801fb9e:	2240      	movs	r2, #64	@ 0x40
 801fba0:	4013      	ands	r3, r2
 801fba2:	d016      	beq.n	801fbd2 <USB_DeactivateEndpoint+0x1b2>
 801fba4:	687a      	ldr	r2, [r7, #4]
 801fba6:	683b      	ldr	r3, [r7, #0]
 801fba8:	781b      	ldrb	r3, [r3, #0]
 801fbaa:	009b      	lsls	r3, r3, #2
 801fbac:	18d3      	adds	r3, r2, r3
 801fbae:	881b      	ldrh	r3, [r3, #0]
 801fbb0:	b29a      	uxth	r2, r3
 801fbb2:	201a      	movs	r0, #26
 801fbb4:	183b      	adds	r3, r7, r0
 801fbb6:	4974      	ldr	r1, [pc, #464]	@ (801fd88 <USB_DeactivateEndpoint+0x368>)
 801fbb8:	400a      	ands	r2, r1
 801fbba:	801a      	strh	r2, [r3, #0]
 801fbbc:	687a      	ldr	r2, [r7, #4]
 801fbbe:	683b      	ldr	r3, [r7, #0]
 801fbc0:	781b      	ldrb	r3, [r3, #0]
 801fbc2:	009b      	lsls	r3, r3, #2
 801fbc4:	18d3      	adds	r3, r2, r3
 801fbc6:	183a      	adds	r2, r7, r0
 801fbc8:	8812      	ldrh	r2, [r2, #0]
 801fbca:	4970      	ldr	r1, [pc, #448]	@ (801fd8c <USB_DeactivateEndpoint+0x36c>)
 801fbcc:	430a      	orrs	r2, r1
 801fbce:	b292      	uxth	r2, r2
 801fbd0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801fbd2:	687a      	ldr	r2, [r7, #4]
 801fbd4:	683b      	ldr	r3, [r7, #0]
 801fbd6:	781b      	ldrb	r3, [r3, #0]
 801fbd8:	009b      	lsls	r3, r3, #2
 801fbda:	18d3      	adds	r3, r2, r3
 801fbdc:	881b      	ldrh	r3, [r3, #0]
 801fbde:	b29a      	uxth	r2, r3
 801fbe0:	2018      	movs	r0, #24
 801fbe2:	183b      	adds	r3, r7, r0
 801fbe4:	4968      	ldr	r1, [pc, #416]	@ (801fd88 <USB_DeactivateEndpoint+0x368>)
 801fbe6:	400a      	ands	r2, r1
 801fbe8:	801a      	strh	r2, [r3, #0]
 801fbea:	687a      	ldr	r2, [r7, #4]
 801fbec:	683b      	ldr	r3, [r7, #0]
 801fbee:	781b      	ldrb	r3, [r3, #0]
 801fbf0:	009b      	lsls	r3, r3, #2
 801fbf2:	18d3      	adds	r3, r2, r3
 801fbf4:	183a      	adds	r2, r7, r0
 801fbf6:	8812      	ldrh	r2, [r2, #0]
 801fbf8:	4964      	ldr	r1, [pc, #400]	@ (801fd8c <USB_DeactivateEndpoint+0x36c>)
 801fbfa:	430a      	orrs	r2, r1
 801fbfc:	b292      	uxth	r2, r2
 801fbfe:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fc00:	687a      	ldr	r2, [r7, #4]
 801fc02:	683b      	ldr	r3, [r7, #0]
 801fc04:	781b      	ldrb	r3, [r3, #0]
 801fc06:	009b      	lsls	r3, r3, #2
 801fc08:	18d3      	adds	r3, r2, r3
 801fc0a:	881b      	ldrh	r3, [r3, #0]
 801fc0c:	b29a      	uxth	r2, r3
 801fc0e:	2016      	movs	r0, #22
 801fc10:	183b      	adds	r3, r7, r0
 801fc12:	4962      	ldr	r1, [pc, #392]	@ (801fd9c <USB_DeactivateEndpoint+0x37c>)
 801fc14:	400a      	ands	r2, r1
 801fc16:	801a      	strh	r2, [r3, #0]
 801fc18:	687a      	ldr	r2, [r7, #4]
 801fc1a:	683b      	ldr	r3, [r7, #0]
 801fc1c:	781b      	ldrb	r3, [r3, #0]
 801fc1e:	009b      	lsls	r3, r3, #2
 801fc20:	18d3      	adds	r3, r2, r3
 801fc22:	183a      	adds	r2, r7, r0
 801fc24:	8812      	ldrh	r2, [r2, #0]
 801fc26:	495b      	ldr	r1, [pc, #364]	@ (801fd94 <USB_DeactivateEndpoint+0x374>)
 801fc28:	430a      	orrs	r2, r1
 801fc2a:	b292      	uxth	r2, r2
 801fc2c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fc2e:	687a      	ldr	r2, [r7, #4]
 801fc30:	683b      	ldr	r3, [r7, #0]
 801fc32:	781b      	ldrb	r3, [r3, #0]
 801fc34:	009b      	lsls	r3, r3, #2
 801fc36:	18d3      	adds	r3, r2, r3
 801fc38:	881b      	ldrh	r3, [r3, #0]
 801fc3a:	b29a      	uxth	r2, r3
 801fc3c:	2014      	movs	r0, #20
 801fc3e:	183b      	adds	r3, r7, r0
 801fc40:	4953      	ldr	r1, [pc, #332]	@ (801fd90 <USB_DeactivateEndpoint+0x370>)
 801fc42:	400a      	ands	r2, r1
 801fc44:	801a      	strh	r2, [r3, #0]
 801fc46:	687a      	ldr	r2, [r7, #4]
 801fc48:	683b      	ldr	r3, [r7, #0]
 801fc4a:	781b      	ldrb	r3, [r3, #0]
 801fc4c:	009b      	lsls	r3, r3, #2
 801fc4e:	18d3      	adds	r3, r2, r3
 801fc50:	183a      	adds	r2, r7, r0
 801fc52:	8812      	ldrh	r2, [r2, #0]
 801fc54:	494f      	ldr	r1, [pc, #316]	@ (801fd94 <USB_DeactivateEndpoint+0x374>)
 801fc56:	430a      	orrs	r2, r1
 801fc58:	b292      	uxth	r2, r2
 801fc5a:	801a      	strh	r2, [r3, #0]
 801fc5c:	e08f      	b.n	801fd7e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fc5e:	687a      	ldr	r2, [r7, #4]
 801fc60:	683b      	ldr	r3, [r7, #0]
 801fc62:	781b      	ldrb	r3, [r3, #0]
 801fc64:	009b      	lsls	r3, r3, #2
 801fc66:	18d2      	adds	r2, r2, r3
 801fc68:	212e      	movs	r1, #46	@ 0x2e
 801fc6a:	187b      	adds	r3, r7, r1
 801fc6c:	8812      	ldrh	r2, [r2, #0]
 801fc6e:	801a      	strh	r2, [r3, #0]
 801fc70:	187b      	adds	r3, r7, r1
 801fc72:	881a      	ldrh	r2, [r3, #0]
 801fc74:	2380      	movs	r3, #128	@ 0x80
 801fc76:	01db      	lsls	r3, r3, #7
 801fc78:	4013      	ands	r3, r2
 801fc7a:	d016      	beq.n	801fcaa <USB_DeactivateEndpoint+0x28a>
 801fc7c:	687a      	ldr	r2, [r7, #4]
 801fc7e:	683b      	ldr	r3, [r7, #0]
 801fc80:	781b      	ldrb	r3, [r3, #0]
 801fc82:	009b      	lsls	r3, r3, #2
 801fc84:	18d3      	adds	r3, r2, r3
 801fc86:	881b      	ldrh	r3, [r3, #0]
 801fc88:	b29a      	uxth	r2, r3
 801fc8a:	202c      	movs	r0, #44	@ 0x2c
 801fc8c:	183b      	adds	r3, r7, r0
 801fc8e:	493e      	ldr	r1, [pc, #248]	@ (801fd88 <USB_DeactivateEndpoint+0x368>)
 801fc90:	400a      	ands	r2, r1
 801fc92:	801a      	strh	r2, [r3, #0]
 801fc94:	687a      	ldr	r2, [r7, #4]
 801fc96:	683b      	ldr	r3, [r7, #0]
 801fc98:	781b      	ldrb	r3, [r3, #0]
 801fc9a:	009b      	lsls	r3, r3, #2
 801fc9c:	18d3      	adds	r3, r2, r3
 801fc9e:	183a      	adds	r2, r7, r0
 801fca0:	8812      	ldrh	r2, [r2, #0]
 801fca2:	493d      	ldr	r1, [pc, #244]	@ (801fd98 <USB_DeactivateEndpoint+0x378>)
 801fca4:	430a      	orrs	r2, r1
 801fca6:	b292      	uxth	r2, r2
 801fca8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fcaa:	687a      	ldr	r2, [r7, #4]
 801fcac:	683b      	ldr	r3, [r7, #0]
 801fcae:	781b      	ldrb	r3, [r3, #0]
 801fcb0:	009b      	lsls	r3, r3, #2
 801fcb2:	18d2      	adds	r2, r2, r3
 801fcb4:	212a      	movs	r1, #42	@ 0x2a
 801fcb6:	187b      	adds	r3, r7, r1
 801fcb8:	8812      	ldrh	r2, [r2, #0]
 801fcba:	801a      	strh	r2, [r3, #0]
 801fcbc:	187b      	adds	r3, r7, r1
 801fcbe:	881b      	ldrh	r3, [r3, #0]
 801fcc0:	2240      	movs	r2, #64	@ 0x40
 801fcc2:	4013      	ands	r3, r2
 801fcc4:	d016      	beq.n	801fcf4 <USB_DeactivateEndpoint+0x2d4>
 801fcc6:	687a      	ldr	r2, [r7, #4]
 801fcc8:	683b      	ldr	r3, [r7, #0]
 801fcca:	781b      	ldrb	r3, [r3, #0]
 801fccc:	009b      	lsls	r3, r3, #2
 801fcce:	18d3      	adds	r3, r2, r3
 801fcd0:	881b      	ldrh	r3, [r3, #0]
 801fcd2:	b29a      	uxth	r2, r3
 801fcd4:	2028      	movs	r0, #40	@ 0x28
 801fcd6:	183b      	adds	r3, r7, r0
 801fcd8:	492b      	ldr	r1, [pc, #172]	@ (801fd88 <USB_DeactivateEndpoint+0x368>)
 801fcda:	400a      	ands	r2, r1
 801fcdc:	801a      	strh	r2, [r3, #0]
 801fcde:	687a      	ldr	r2, [r7, #4]
 801fce0:	683b      	ldr	r3, [r7, #0]
 801fce2:	781b      	ldrb	r3, [r3, #0]
 801fce4:	009b      	lsls	r3, r3, #2
 801fce6:	18d3      	adds	r3, r2, r3
 801fce8:	183a      	adds	r2, r7, r0
 801fcea:	8812      	ldrh	r2, [r2, #0]
 801fcec:	4927      	ldr	r1, [pc, #156]	@ (801fd8c <USB_DeactivateEndpoint+0x36c>)
 801fcee:	430a      	orrs	r2, r1
 801fcf0:	b292      	uxth	r2, r2
 801fcf2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801fcf4:	687a      	ldr	r2, [r7, #4]
 801fcf6:	683b      	ldr	r3, [r7, #0]
 801fcf8:	781b      	ldrb	r3, [r3, #0]
 801fcfa:	009b      	lsls	r3, r3, #2
 801fcfc:	18d3      	adds	r3, r2, r3
 801fcfe:	881b      	ldrh	r3, [r3, #0]
 801fd00:	b29a      	uxth	r2, r3
 801fd02:	2026      	movs	r0, #38	@ 0x26
 801fd04:	183b      	adds	r3, r7, r0
 801fd06:	4920      	ldr	r1, [pc, #128]	@ (801fd88 <USB_DeactivateEndpoint+0x368>)
 801fd08:	400a      	ands	r2, r1
 801fd0a:	801a      	strh	r2, [r3, #0]
 801fd0c:	687a      	ldr	r2, [r7, #4]
 801fd0e:	683b      	ldr	r3, [r7, #0]
 801fd10:	781b      	ldrb	r3, [r3, #0]
 801fd12:	009b      	lsls	r3, r3, #2
 801fd14:	18d3      	adds	r3, r2, r3
 801fd16:	183a      	adds	r2, r7, r0
 801fd18:	8812      	ldrh	r2, [r2, #0]
 801fd1a:	491f      	ldr	r1, [pc, #124]	@ (801fd98 <USB_DeactivateEndpoint+0x378>)
 801fd1c:	430a      	orrs	r2, r1
 801fd1e:	b292      	uxth	r2, r2
 801fd20:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fd22:	687a      	ldr	r2, [r7, #4]
 801fd24:	683b      	ldr	r3, [r7, #0]
 801fd26:	781b      	ldrb	r3, [r3, #0]
 801fd28:	009b      	lsls	r3, r3, #2
 801fd2a:	18d3      	adds	r3, r2, r3
 801fd2c:	881b      	ldrh	r3, [r3, #0]
 801fd2e:	b29a      	uxth	r2, r3
 801fd30:	2024      	movs	r0, #36	@ 0x24
 801fd32:	183b      	adds	r3, r7, r0
 801fd34:	4916      	ldr	r1, [pc, #88]	@ (801fd90 <USB_DeactivateEndpoint+0x370>)
 801fd36:	400a      	ands	r2, r1
 801fd38:	801a      	strh	r2, [r3, #0]
 801fd3a:	687a      	ldr	r2, [r7, #4]
 801fd3c:	683b      	ldr	r3, [r7, #0]
 801fd3e:	781b      	ldrb	r3, [r3, #0]
 801fd40:	009b      	lsls	r3, r3, #2
 801fd42:	18d3      	adds	r3, r2, r3
 801fd44:	183a      	adds	r2, r7, r0
 801fd46:	8812      	ldrh	r2, [r2, #0]
 801fd48:	4912      	ldr	r1, [pc, #72]	@ (801fd94 <USB_DeactivateEndpoint+0x374>)
 801fd4a:	430a      	orrs	r2, r1
 801fd4c:	b292      	uxth	r2, r2
 801fd4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fd50:	687a      	ldr	r2, [r7, #4]
 801fd52:	683b      	ldr	r3, [r7, #0]
 801fd54:	781b      	ldrb	r3, [r3, #0]
 801fd56:	009b      	lsls	r3, r3, #2
 801fd58:	18d3      	adds	r3, r2, r3
 801fd5a:	881b      	ldrh	r3, [r3, #0]
 801fd5c:	b29a      	uxth	r2, r3
 801fd5e:	2022      	movs	r0, #34	@ 0x22
 801fd60:	183b      	adds	r3, r7, r0
 801fd62:	490e      	ldr	r1, [pc, #56]	@ (801fd9c <USB_DeactivateEndpoint+0x37c>)
 801fd64:	400a      	ands	r2, r1
 801fd66:	801a      	strh	r2, [r3, #0]
 801fd68:	687a      	ldr	r2, [r7, #4]
 801fd6a:	683b      	ldr	r3, [r7, #0]
 801fd6c:	781b      	ldrb	r3, [r3, #0]
 801fd6e:	009b      	lsls	r3, r3, #2
 801fd70:	18d3      	adds	r3, r2, r3
 801fd72:	183a      	adds	r2, r7, r0
 801fd74:	8812      	ldrh	r2, [r2, #0]
 801fd76:	4907      	ldr	r1, [pc, #28]	@ (801fd94 <USB_DeactivateEndpoint+0x374>)
 801fd78:	430a      	orrs	r2, r1
 801fd7a:	b292      	uxth	r2, r2
 801fd7c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801fd7e:	2300      	movs	r3, #0
}
 801fd80:	0018      	movs	r0, r3
 801fd82:	46bd      	mov	sp, r7
 801fd84:	b00c      	add	sp, #48	@ 0x30
 801fd86:	bd80      	pop	{r7, pc}
 801fd88:	ffff8f8f 	.word	0xffff8f8f
 801fd8c:	ffff80c0 	.word	0xffff80c0
 801fd90:	ffff8fbf 	.word	0xffff8fbf
 801fd94:	ffff8080 	.word	0xffff8080
 801fd98:	ffffc080 	.word	0xffffc080
 801fd9c:	ffffbf8f 	.word	0xffffbf8f

0801fda0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fda0:	b590      	push	{r4, r7, lr}
 801fda2:	b0c3      	sub	sp, #268	@ 0x10c
 801fda4:	af00      	add	r7, sp, #0
 801fda6:	6078      	str	r0, [r7, #4]
 801fda8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801fdaa:	683b      	ldr	r3, [r7, #0]
 801fdac:	785b      	ldrb	r3, [r3, #1]
 801fdae:	2b01      	cmp	r3, #1
 801fdb0:	d001      	beq.n	801fdb6 <USB_EPStartXfer+0x16>
 801fdb2:	f000 fd2d 	bl	8020810 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801fdb6:	683b      	ldr	r3, [r7, #0]
 801fdb8:	699a      	ldr	r2, [r3, #24]
 801fdba:	683b      	ldr	r3, [r7, #0]
 801fdbc:	691b      	ldr	r3, [r3, #16]
 801fdbe:	429a      	cmp	r2, r3
 801fdc0:	d905      	bls.n	801fdce <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801fdc2:	683b      	ldr	r3, [r7, #0]
 801fdc4:	691b      	ldr	r3, [r3, #16]
 801fdc6:	1d7a      	adds	r2, r7, #5
 801fdc8:	32ff      	adds	r2, #255	@ 0xff
 801fdca:	6013      	str	r3, [r2, #0]
 801fdcc:	e004      	b.n	801fdd8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801fdce:	683b      	ldr	r3, [r7, #0]
 801fdd0:	699b      	ldr	r3, [r3, #24]
 801fdd2:	1d7a      	adds	r2, r7, #5
 801fdd4:	32ff      	adds	r2, #255	@ 0xff
 801fdd6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801fdd8:	683b      	ldr	r3, [r7, #0]
 801fdda:	7b1b      	ldrb	r3, [r3, #12]
 801fddc:	2b00      	cmp	r3, #0
 801fdde:	d125      	bne.n	801fe2c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801fde0:	683b      	ldr	r3, [r7, #0]
 801fde2:	6959      	ldr	r1, [r3, #20]
 801fde4:	683b      	ldr	r3, [r7, #0]
 801fde6:	88da      	ldrh	r2, [r3, #6]
 801fde8:	1d7b      	adds	r3, r7, #5
 801fdea:	33ff      	adds	r3, #255	@ 0xff
 801fdec:	681b      	ldr	r3, [r3, #0]
 801fdee:	b29b      	uxth	r3, r3
 801fdf0:	6878      	ldr	r0, [r7, #4]
 801fdf2:	f001 fa47 	bl	8021284 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801fdf6:	687b      	ldr	r3, [r7, #4]
 801fdf8:	613b      	str	r3, [r7, #16]
 801fdfa:	687b      	ldr	r3, [r7, #4]
 801fdfc:	2250      	movs	r2, #80	@ 0x50
 801fdfe:	5a9b      	ldrh	r3, [r3, r2]
 801fe00:	b29b      	uxth	r3, r3
 801fe02:	001a      	movs	r2, r3
 801fe04:	693b      	ldr	r3, [r7, #16]
 801fe06:	189b      	adds	r3, r3, r2
 801fe08:	613b      	str	r3, [r7, #16]
 801fe0a:	683b      	ldr	r3, [r7, #0]
 801fe0c:	781b      	ldrb	r3, [r3, #0]
 801fe0e:	00da      	lsls	r2, r3, #3
 801fe10:	693b      	ldr	r3, [r7, #16]
 801fe12:	18d3      	adds	r3, r2, r3
 801fe14:	4ad7      	ldr	r2, [pc, #860]	@ (8020174 <USB_EPStartXfer+0x3d4>)
 801fe16:	4694      	mov	ip, r2
 801fe18:	4463      	add	r3, ip
 801fe1a:	60fb      	str	r3, [r7, #12]
 801fe1c:	1d7b      	adds	r3, r7, #5
 801fe1e:	33ff      	adds	r3, #255	@ 0xff
 801fe20:	681b      	ldr	r3, [r3, #0]
 801fe22:	b29a      	uxth	r2, r3
 801fe24:	68fb      	ldr	r3, [r7, #12]
 801fe26:	801a      	strh	r2, [r3, #0]
 801fe28:	f000 fccd 	bl	80207c6 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801fe2c:	683b      	ldr	r3, [r7, #0]
 801fe2e:	78db      	ldrb	r3, [r3, #3]
 801fe30:	2b02      	cmp	r3, #2
 801fe32:	d000      	beq.n	801fe36 <USB_EPStartXfer+0x96>
 801fe34:	e362      	b.n	80204fc <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801fe36:	683b      	ldr	r3, [r7, #0]
 801fe38:	6a1a      	ldr	r2, [r3, #32]
 801fe3a:	683b      	ldr	r3, [r7, #0]
 801fe3c:	691b      	ldr	r3, [r3, #16]
 801fe3e:	429a      	cmp	r2, r3
 801fe40:	d800      	bhi.n	801fe44 <USB_EPStartXfer+0xa4>
 801fe42:	e309      	b.n	8020458 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801fe44:	687a      	ldr	r2, [r7, #4]
 801fe46:	683b      	ldr	r3, [r7, #0]
 801fe48:	781b      	ldrb	r3, [r3, #0]
 801fe4a:	009b      	lsls	r3, r3, #2
 801fe4c:	18d3      	adds	r3, r2, r3
 801fe4e:	881b      	ldrh	r3, [r3, #0]
 801fe50:	b29a      	uxth	r2, r3
 801fe52:	2056      	movs	r0, #86	@ 0x56
 801fe54:	183b      	adds	r3, r7, r0
 801fe56:	49c8      	ldr	r1, [pc, #800]	@ (8020178 <USB_EPStartXfer+0x3d8>)
 801fe58:	400a      	ands	r2, r1
 801fe5a:	801a      	strh	r2, [r3, #0]
 801fe5c:	687a      	ldr	r2, [r7, #4]
 801fe5e:	683b      	ldr	r3, [r7, #0]
 801fe60:	781b      	ldrb	r3, [r3, #0]
 801fe62:	009b      	lsls	r3, r3, #2
 801fe64:	18d3      	adds	r3, r2, r3
 801fe66:	183a      	adds	r2, r7, r0
 801fe68:	8812      	ldrh	r2, [r2, #0]
 801fe6a:	49c4      	ldr	r1, [pc, #784]	@ (802017c <USB_EPStartXfer+0x3dc>)
 801fe6c:	430a      	orrs	r2, r1
 801fe6e:	b292      	uxth	r2, r2
 801fe70:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801fe72:	683b      	ldr	r3, [r7, #0]
 801fe74:	6a1a      	ldr	r2, [r3, #32]
 801fe76:	1d7b      	adds	r3, r7, #5
 801fe78:	33ff      	adds	r3, #255	@ 0xff
 801fe7a:	681b      	ldr	r3, [r3, #0]
 801fe7c:	1ad2      	subs	r2, r2, r3
 801fe7e:	683b      	ldr	r3, [r7, #0]
 801fe80:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801fe82:	687a      	ldr	r2, [r7, #4]
 801fe84:	683b      	ldr	r3, [r7, #0]
 801fe86:	781b      	ldrb	r3, [r3, #0]
 801fe88:	009b      	lsls	r3, r3, #2
 801fe8a:	18d3      	adds	r3, r2, r3
 801fe8c:	881b      	ldrh	r3, [r3, #0]
 801fe8e:	b29b      	uxth	r3, r3
 801fe90:	001a      	movs	r2, r3
 801fe92:	2340      	movs	r3, #64	@ 0x40
 801fe94:	4013      	ands	r3, r2
 801fe96:	d100      	bne.n	801fe9a <USB_EPStartXfer+0xfa>
 801fe98:	e176      	b.n	8020188 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801fe9a:	687b      	ldr	r3, [r7, #4]
 801fe9c:	633b      	str	r3, [r7, #48]	@ 0x30
 801fe9e:	683b      	ldr	r3, [r7, #0]
 801fea0:	785b      	ldrb	r3, [r3, #1]
 801fea2:	2b00      	cmp	r3, #0
 801fea4:	d000      	beq.n	801fea8 <USB_EPStartXfer+0x108>
 801fea6:	e074      	b.n	801ff92 <USB_EPStartXfer+0x1f2>
 801fea8:	687b      	ldr	r3, [r7, #4]
 801feaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 801feac:	687b      	ldr	r3, [r7, #4]
 801feae:	2250      	movs	r2, #80	@ 0x50
 801feb0:	5a9b      	ldrh	r3, [r3, r2]
 801feb2:	b29b      	uxth	r3, r3
 801feb4:	001a      	movs	r2, r3
 801feb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801feb8:	189b      	adds	r3, r3, r2
 801feba:	62bb      	str	r3, [r7, #40]	@ 0x28
 801febc:	683b      	ldr	r3, [r7, #0]
 801febe:	781b      	ldrb	r3, [r3, #0]
 801fec0:	00da      	lsls	r2, r3, #3
 801fec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fec4:	18d3      	adds	r3, r2, r3
 801fec6:	4aae      	ldr	r2, [pc, #696]	@ (8020180 <USB_EPStartXfer+0x3e0>)
 801fec8:	4694      	mov	ip, r2
 801feca:	4463      	add	r3, ip
 801fecc:	627b      	str	r3, [r7, #36]	@ 0x24
 801fece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fed0:	881b      	ldrh	r3, [r3, #0]
 801fed2:	b29b      	uxth	r3, r3
 801fed4:	059b      	lsls	r3, r3, #22
 801fed6:	0d9b      	lsrs	r3, r3, #22
 801fed8:	b29a      	uxth	r2, r3
 801feda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fedc:	801a      	strh	r2, [r3, #0]
 801fede:	1d7b      	adds	r3, r7, #5
 801fee0:	33ff      	adds	r3, #255	@ 0xff
 801fee2:	681b      	ldr	r3, [r3, #0]
 801fee4:	2b3e      	cmp	r3, #62	@ 0x3e
 801fee6:	d924      	bls.n	801ff32 <USB_EPStartXfer+0x192>
 801fee8:	1d7b      	adds	r3, r7, #5
 801feea:	33ff      	adds	r3, #255	@ 0xff
 801feec:	681b      	ldr	r3, [r3, #0]
 801feee:	095b      	lsrs	r3, r3, #5
 801fef0:	1c7a      	adds	r2, r7, #1
 801fef2:	32ff      	adds	r2, #255	@ 0xff
 801fef4:	6013      	str	r3, [r2, #0]
 801fef6:	1d7b      	adds	r3, r7, #5
 801fef8:	33ff      	adds	r3, #255	@ 0xff
 801fefa:	681b      	ldr	r3, [r3, #0]
 801fefc:	221f      	movs	r2, #31
 801fefe:	4013      	ands	r3, r2
 801ff00:	d106      	bne.n	801ff10 <USB_EPStartXfer+0x170>
 801ff02:	1c7b      	adds	r3, r7, #1
 801ff04:	33ff      	adds	r3, #255	@ 0xff
 801ff06:	681b      	ldr	r3, [r3, #0]
 801ff08:	3b01      	subs	r3, #1
 801ff0a:	1c7a      	adds	r2, r7, #1
 801ff0c:	32ff      	adds	r2, #255	@ 0xff
 801ff0e:	6013      	str	r3, [r2, #0]
 801ff10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff12:	881b      	ldrh	r3, [r3, #0]
 801ff14:	b29a      	uxth	r2, r3
 801ff16:	1c7b      	adds	r3, r7, #1
 801ff18:	33ff      	adds	r3, #255	@ 0xff
 801ff1a:	681b      	ldr	r3, [r3, #0]
 801ff1c:	b29b      	uxth	r3, r3
 801ff1e:	029b      	lsls	r3, r3, #10
 801ff20:	b29b      	uxth	r3, r3
 801ff22:	4313      	orrs	r3, r2
 801ff24:	b29b      	uxth	r3, r3
 801ff26:	4a97      	ldr	r2, [pc, #604]	@ (8020184 <USB_EPStartXfer+0x3e4>)
 801ff28:	4313      	orrs	r3, r2
 801ff2a:	b29a      	uxth	r2, r3
 801ff2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff2e:	801a      	strh	r2, [r3, #0]
 801ff30:	e04a      	b.n	801ffc8 <USB_EPStartXfer+0x228>
 801ff32:	1d7b      	adds	r3, r7, #5
 801ff34:	33ff      	adds	r3, #255	@ 0xff
 801ff36:	681b      	ldr	r3, [r3, #0]
 801ff38:	2b00      	cmp	r3, #0
 801ff3a:	d108      	bne.n	801ff4e <USB_EPStartXfer+0x1ae>
 801ff3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff3e:	881b      	ldrh	r3, [r3, #0]
 801ff40:	b29b      	uxth	r3, r3
 801ff42:	4a90      	ldr	r2, [pc, #576]	@ (8020184 <USB_EPStartXfer+0x3e4>)
 801ff44:	4313      	orrs	r3, r2
 801ff46:	b29a      	uxth	r2, r3
 801ff48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff4a:	801a      	strh	r2, [r3, #0]
 801ff4c:	e03c      	b.n	801ffc8 <USB_EPStartXfer+0x228>
 801ff4e:	1d7b      	adds	r3, r7, #5
 801ff50:	33ff      	adds	r3, #255	@ 0xff
 801ff52:	681b      	ldr	r3, [r3, #0]
 801ff54:	085b      	lsrs	r3, r3, #1
 801ff56:	1c7a      	adds	r2, r7, #1
 801ff58:	32ff      	adds	r2, #255	@ 0xff
 801ff5a:	6013      	str	r3, [r2, #0]
 801ff5c:	1d7b      	adds	r3, r7, #5
 801ff5e:	33ff      	adds	r3, #255	@ 0xff
 801ff60:	681b      	ldr	r3, [r3, #0]
 801ff62:	2201      	movs	r2, #1
 801ff64:	4013      	ands	r3, r2
 801ff66:	d006      	beq.n	801ff76 <USB_EPStartXfer+0x1d6>
 801ff68:	1c7b      	adds	r3, r7, #1
 801ff6a:	33ff      	adds	r3, #255	@ 0xff
 801ff6c:	681b      	ldr	r3, [r3, #0]
 801ff6e:	3301      	adds	r3, #1
 801ff70:	1c7a      	adds	r2, r7, #1
 801ff72:	32ff      	adds	r2, #255	@ 0xff
 801ff74:	6013      	str	r3, [r2, #0]
 801ff76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff78:	881b      	ldrh	r3, [r3, #0]
 801ff7a:	b29a      	uxth	r2, r3
 801ff7c:	1c7b      	adds	r3, r7, #1
 801ff7e:	33ff      	adds	r3, #255	@ 0xff
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	b29b      	uxth	r3, r3
 801ff84:	029b      	lsls	r3, r3, #10
 801ff86:	b29b      	uxth	r3, r3
 801ff88:	4313      	orrs	r3, r2
 801ff8a:	b29a      	uxth	r2, r3
 801ff8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff8e:	801a      	strh	r2, [r3, #0]
 801ff90:	e01a      	b.n	801ffc8 <USB_EPStartXfer+0x228>
 801ff92:	683b      	ldr	r3, [r7, #0]
 801ff94:	785b      	ldrb	r3, [r3, #1]
 801ff96:	2b01      	cmp	r3, #1
 801ff98:	d116      	bne.n	801ffc8 <USB_EPStartXfer+0x228>
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	2250      	movs	r2, #80	@ 0x50
 801ff9e:	5a9b      	ldrh	r3, [r3, r2]
 801ffa0:	b29b      	uxth	r3, r3
 801ffa2:	001a      	movs	r2, r3
 801ffa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ffa6:	189b      	adds	r3, r3, r2
 801ffa8:	633b      	str	r3, [r7, #48]	@ 0x30
 801ffaa:	683b      	ldr	r3, [r7, #0]
 801ffac:	781b      	ldrb	r3, [r3, #0]
 801ffae:	00da      	lsls	r2, r3, #3
 801ffb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ffb2:	18d3      	adds	r3, r2, r3
 801ffb4:	4a72      	ldr	r2, [pc, #456]	@ (8020180 <USB_EPStartXfer+0x3e0>)
 801ffb6:	4694      	mov	ip, r2
 801ffb8:	4463      	add	r3, ip
 801ffba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ffbc:	1d7b      	adds	r3, r7, #5
 801ffbe:	33ff      	adds	r3, #255	@ 0xff
 801ffc0:	681b      	ldr	r3, [r3, #0]
 801ffc2:	b29a      	uxth	r2, r3
 801ffc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ffc6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801ffc8:	2076      	movs	r0, #118	@ 0x76
 801ffca:	183b      	adds	r3, r7, r0
 801ffcc:	683a      	ldr	r2, [r7, #0]
 801ffce:	8952      	ldrh	r2, [r2, #10]
 801ffd0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ffd2:	683b      	ldr	r3, [r7, #0]
 801ffd4:	6959      	ldr	r1, [r3, #20]
 801ffd6:	1d7b      	adds	r3, r7, #5
 801ffd8:	33ff      	adds	r3, #255	@ 0xff
 801ffda:	681b      	ldr	r3, [r3, #0]
 801ffdc:	b29c      	uxth	r4, r3
 801ffde:	183b      	adds	r3, r7, r0
 801ffe0:	881a      	ldrh	r2, [r3, #0]
 801ffe2:	6878      	ldr	r0, [r7, #4]
 801ffe4:	0023      	movs	r3, r4
 801ffe6:	f001 f94d 	bl	8021284 <USB_WritePMA>
            ep->xfer_buff += len;
 801ffea:	683b      	ldr	r3, [r7, #0]
 801ffec:	695a      	ldr	r2, [r3, #20]
 801ffee:	1d7b      	adds	r3, r7, #5
 801fff0:	33ff      	adds	r3, #255	@ 0xff
 801fff2:	681b      	ldr	r3, [r3, #0]
 801fff4:	18d2      	adds	r2, r2, r3
 801fff6:	683b      	ldr	r3, [r7, #0]
 801fff8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801fffa:	683b      	ldr	r3, [r7, #0]
 801fffc:	6a1a      	ldr	r2, [r3, #32]
 801fffe:	683b      	ldr	r3, [r7, #0]
 8020000:	691b      	ldr	r3, [r3, #16]
 8020002:	429a      	cmp	r2, r3
 8020004:	d908      	bls.n	8020018 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8020006:	683b      	ldr	r3, [r7, #0]
 8020008:	6a1a      	ldr	r2, [r3, #32]
 802000a:	1d7b      	adds	r3, r7, #5
 802000c:	33ff      	adds	r3, #255	@ 0xff
 802000e:	681b      	ldr	r3, [r3, #0]
 8020010:	1ad2      	subs	r2, r2, r3
 8020012:	683b      	ldr	r3, [r7, #0]
 8020014:	621a      	str	r2, [r3, #32]
 8020016:	e007      	b.n	8020028 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8020018:	683b      	ldr	r3, [r7, #0]
 802001a:	6a1b      	ldr	r3, [r3, #32]
 802001c:	1d7a      	adds	r2, r7, #5
 802001e:	32ff      	adds	r2, #255	@ 0xff
 8020020:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8020022:	683b      	ldr	r3, [r7, #0]
 8020024:	2200      	movs	r2, #0
 8020026:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020028:	683b      	ldr	r3, [r7, #0]
 802002a:	785b      	ldrb	r3, [r3, #1]
 802002c:	2b00      	cmp	r3, #0
 802002e:	d000      	beq.n	8020032 <USB_EPStartXfer+0x292>
 8020030:	e070      	b.n	8020114 <USB_EPStartXfer+0x374>
 8020032:	687b      	ldr	r3, [r7, #4]
 8020034:	61bb      	str	r3, [r7, #24]
 8020036:	687b      	ldr	r3, [r7, #4]
 8020038:	2250      	movs	r2, #80	@ 0x50
 802003a:	5a9b      	ldrh	r3, [r3, r2]
 802003c:	b29b      	uxth	r3, r3
 802003e:	001a      	movs	r2, r3
 8020040:	69bb      	ldr	r3, [r7, #24]
 8020042:	189b      	adds	r3, r3, r2
 8020044:	61bb      	str	r3, [r7, #24]
 8020046:	683b      	ldr	r3, [r7, #0]
 8020048:	781b      	ldrb	r3, [r3, #0]
 802004a:	00da      	lsls	r2, r3, #3
 802004c:	69bb      	ldr	r3, [r7, #24]
 802004e:	18d3      	adds	r3, r2, r3
 8020050:	4a48      	ldr	r2, [pc, #288]	@ (8020174 <USB_EPStartXfer+0x3d4>)
 8020052:	4694      	mov	ip, r2
 8020054:	4463      	add	r3, ip
 8020056:	617b      	str	r3, [r7, #20]
 8020058:	697b      	ldr	r3, [r7, #20]
 802005a:	881b      	ldrh	r3, [r3, #0]
 802005c:	b29b      	uxth	r3, r3
 802005e:	059b      	lsls	r3, r3, #22
 8020060:	0d9b      	lsrs	r3, r3, #22
 8020062:	b29a      	uxth	r2, r3
 8020064:	697b      	ldr	r3, [r7, #20]
 8020066:	801a      	strh	r2, [r3, #0]
 8020068:	1d7b      	adds	r3, r7, #5
 802006a:	33ff      	adds	r3, #255	@ 0xff
 802006c:	681b      	ldr	r3, [r3, #0]
 802006e:	2b3e      	cmp	r3, #62	@ 0x3e
 8020070:	d922      	bls.n	80200b8 <USB_EPStartXfer+0x318>
 8020072:	1d7b      	adds	r3, r7, #5
 8020074:	33ff      	adds	r3, #255	@ 0xff
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	095b      	lsrs	r3, r3, #5
 802007a:	21fc      	movs	r1, #252	@ 0xfc
 802007c:	187a      	adds	r2, r7, r1
 802007e:	6013      	str	r3, [r2, #0]
 8020080:	1d7b      	adds	r3, r7, #5
 8020082:	33ff      	adds	r3, #255	@ 0xff
 8020084:	681b      	ldr	r3, [r3, #0]
 8020086:	221f      	movs	r2, #31
 8020088:	4013      	ands	r3, r2
 802008a:	d104      	bne.n	8020096 <USB_EPStartXfer+0x2f6>
 802008c:	187b      	adds	r3, r7, r1
 802008e:	681b      	ldr	r3, [r3, #0]
 8020090:	3b01      	subs	r3, #1
 8020092:	187a      	adds	r2, r7, r1
 8020094:	6013      	str	r3, [r2, #0]
 8020096:	697b      	ldr	r3, [r7, #20]
 8020098:	881b      	ldrh	r3, [r3, #0]
 802009a:	b29a      	uxth	r2, r3
 802009c:	23fc      	movs	r3, #252	@ 0xfc
 802009e:	18fb      	adds	r3, r7, r3
 80200a0:	681b      	ldr	r3, [r3, #0]
 80200a2:	b29b      	uxth	r3, r3
 80200a4:	029b      	lsls	r3, r3, #10
 80200a6:	b29b      	uxth	r3, r3
 80200a8:	4313      	orrs	r3, r2
 80200aa:	b29b      	uxth	r3, r3
 80200ac:	4a35      	ldr	r2, [pc, #212]	@ (8020184 <USB_EPStartXfer+0x3e4>)
 80200ae:	4313      	orrs	r3, r2
 80200b0:	b29a      	uxth	r2, r3
 80200b2:	697b      	ldr	r3, [r7, #20]
 80200b4:	801a      	strh	r2, [r3, #0]
 80200b6:	e04a      	b.n	802014e <USB_EPStartXfer+0x3ae>
 80200b8:	1d7b      	adds	r3, r7, #5
 80200ba:	33ff      	adds	r3, #255	@ 0xff
 80200bc:	681b      	ldr	r3, [r3, #0]
 80200be:	2b00      	cmp	r3, #0
 80200c0:	d108      	bne.n	80200d4 <USB_EPStartXfer+0x334>
 80200c2:	697b      	ldr	r3, [r7, #20]
 80200c4:	881b      	ldrh	r3, [r3, #0]
 80200c6:	b29b      	uxth	r3, r3
 80200c8:	4a2e      	ldr	r2, [pc, #184]	@ (8020184 <USB_EPStartXfer+0x3e4>)
 80200ca:	4313      	orrs	r3, r2
 80200cc:	b29a      	uxth	r2, r3
 80200ce:	697b      	ldr	r3, [r7, #20]
 80200d0:	801a      	strh	r2, [r3, #0]
 80200d2:	e03c      	b.n	802014e <USB_EPStartXfer+0x3ae>
 80200d4:	1d7b      	adds	r3, r7, #5
 80200d6:	33ff      	adds	r3, #255	@ 0xff
 80200d8:	681b      	ldr	r3, [r3, #0]
 80200da:	085b      	lsrs	r3, r3, #1
 80200dc:	21fc      	movs	r1, #252	@ 0xfc
 80200de:	187a      	adds	r2, r7, r1
 80200e0:	6013      	str	r3, [r2, #0]
 80200e2:	1d7b      	adds	r3, r7, #5
 80200e4:	33ff      	adds	r3, #255	@ 0xff
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	2201      	movs	r2, #1
 80200ea:	4013      	ands	r3, r2
 80200ec:	d004      	beq.n	80200f8 <USB_EPStartXfer+0x358>
 80200ee:	187b      	adds	r3, r7, r1
 80200f0:	681b      	ldr	r3, [r3, #0]
 80200f2:	3301      	adds	r3, #1
 80200f4:	187a      	adds	r2, r7, r1
 80200f6:	6013      	str	r3, [r2, #0]
 80200f8:	697b      	ldr	r3, [r7, #20]
 80200fa:	881b      	ldrh	r3, [r3, #0]
 80200fc:	b29a      	uxth	r2, r3
 80200fe:	23fc      	movs	r3, #252	@ 0xfc
 8020100:	18fb      	adds	r3, r7, r3
 8020102:	681b      	ldr	r3, [r3, #0]
 8020104:	b29b      	uxth	r3, r3
 8020106:	029b      	lsls	r3, r3, #10
 8020108:	b29b      	uxth	r3, r3
 802010a:	4313      	orrs	r3, r2
 802010c:	b29a      	uxth	r2, r3
 802010e:	697b      	ldr	r3, [r7, #20]
 8020110:	801a      	strh	r2, [r3, #0]
 8020112:	e01c      	b.n	802014e <USB_EPStartXfer+0x3ae>
 8020114:	683b      	ldr	r3, [r7, #0]
 8020116:	785b      	ldrb	r3, [r3, #1]
 8020118:	2b01      	cmp	r3, #1
 802011a:	d118      	bne.n	802014e <USB_EPStartXfer+0x3ae>
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	623b      	str	r3, [r7, #32]
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	2250      	movs	r2, #80	@ 0x50
 8020124:	5a9b      	ldrh	r3, [r3, r2]
 8020126:	b29b      	uxth	r3, r3
 8020128:	001a      	movs	r2, r3
 802012a:	6a3b      	ldr	r3, [r7, #32]
 802012c:	189b      	adds	r3, r3, r2
 802012e:	623b      	str	r3, [r7, #32]
 8020130:	683b      	ldr	r3, [r7, #0]
 8020132:	781b      	ldrb	r3, [r3, #0]
 8020134:	00da      	lsls	r2, r3, #3
 8020136:	6a3b      	ldr	r3, [r7, #32]
 8020138:	18d3      	adds	r3, r2, r3
 802013a:	4a0e      	ldr	r2, [pc, #56]	@ (8020174 <USB_EPStartXfer+0x3d4>)
 802013c:	4694      	mov	ip, r2
 802013e:	4463      	add	r3, ip
 8020140:	61fb      	str	r3, [r7, #28]
 8020142:	1d7b      	adds	r3, r7, #5
 8020144:	33ff      	adds	r3, #255	@ 0xff
 8020146:	681b      	ldr	r3, [r3, #0]
 8020148:	b29a      	uxth	r2, r3
 802014a:	69fb      	ldr	r3, [r7, #28]
 802014c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 802014e:	2076      	movs	r0, #118	@ 0x76
 8020150:	183b      	adds	r3, r7, r0
 8020152:	683a      	ldr	r2, [r7, #0]
 8020154:	8912      	ldrh	r2, [r2, #8]
 8020156:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020158:	683b      	ldr	r3, [r7, #0]
 802015a:	6959      	ldr	r1, [r3, #20]
 802015c:	1d7b      	adds	r3, r7, #5
 802015e:	33ff      	adds	r3, #255	@ 0xff
 8020160:	681b      	ldr	r3, [r3, #0]
 8020162:	b29c      	uxth	r4, r3
 8020164:	183b      	adds	r3, r7, r0
 8020166:	881a      	ldrh	r2, [r3, #0]
 8020168:	6878      	ldr	r0, [r7, #4]
 802016a:	0023      	movs	r3, r4
 802016c:	f001 f88a 	bl	8021284 <USB_WritePMA>
 8020170:	e329      	b.n	80207c6 <USB_EPStartXfer+0xa26>
 8020172:	46c0      	nop			@ (mov r8, r8)
 8020174:	00000402 	.word	0x00000402
 8020178:	ffff8f8f 	.word	0xffff8f8f
 802017c:	ffff8180 	.word	0xffff8180
 8020180:	00000406 	.word	0x00000406
 8020184:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020188:	683b      	ldr	r3, [r7, #0]
 802018a:	785b      	ldrb	r3, [r3, #1]
 802018c:	2b00      	cmp	r3, #0
 802018e:	d000      	beq.n	8020192 <USB_EPStartXfer+0x3f2>
 8020190:	e070      	b.n	8020274 <USB_EPStartXfer+0x4d4>
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020196:	687b      	ldr	r3, [r7, #4]
 8020198:	2250      	movs	r2, #80	@ 0x50
 802019a:	5a9b      	ldrh	r3, [r3, r2]
 802019c:	b29b      	uxth	r3, r3
 802019e:	001a      	movs	r2, r3
 80201a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80201a2:	189b      	adds	r3, r3, r2
 80201a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80201a6:	683b      	ldr	r3, [r7, #0]
 80201a8:	781b      	ldrb	r3, [r3, #0]
 80201aa:	00da      	lsls	r2, r3, #3
 80201ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80201ae:	18d3      	adds	r3, r2, r3
 80201b0:	4acd      	ldr	r2, [pc, #820]	@ (80204e8 <USB_EPStartXfer+0x748>)
 80201b2:	4694      	mov	ip, r2
 80201b4:	4463      	add	r3, ip
 80201b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80201b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80201ba:	881b      	ldrh	r3, [r3, #0]
 80201bc:	b29b      	uxth	r3, r3
 80201be:	059b      	lsls	r3, r3, #22
 80201c0:	0d9b      	lsrs	r3, r3, #22
 80201c2:	b29a      	uxth	r2, r3
 80201c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80201c6:	801a      	strh	r2, [r3, #0]
 80201c8:	1d7b      	adds	r3, r7, #5
 80201ca:	33ff      	adds	r3, #255	@ 0xff
 80201cc:	681b      	ldr	r3, [r3, #0]
 80201ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80201d0:	d922      	bls.n	8020218 <USB_EPStartXfer+0x478>
 80201d2:	1d7b      	adds	r3, r7, #5
 80201d4:	33ff      	adds	r3, #255	@ 0xff
 80201d6:	681b      	ldr	r3, [r3, #0]
 80201d8:	095b      	lsrs	r3, r3, #5
 80201da:	21f8      	movs	r1, #248	@ 0xf8
 80201dc:	187a      	adds	r2, r7, r1
 80201de:	6013      	str	r3, [r2, #0]
 80201e0:	1d7b      	adds	r3, r7, #5
 80201e2:	33ff      	adds	r3, #255	@ 0xff
 80201e4:	681b      	ldr	r3, [r3, #0]
 80201e6:	221f      	movs	r2, #31
 80201e8:	4013      	ands	r3, r2
 80201ea:	d104      	bne.n	80201f6 <USB_EPStartXfer+0x456>
 80201ec:	187b      	adds	r3, r7, r1
 80201ee:	681b      	ldr	r3, [r3, #0]
 80201f0:	3b01      	subs	r3, #1
 80201f2:	187a      	adds	r2, r7, r1
 80201f4:	6013      	str	r3, [r2, #0]
 80201f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80201f8:	881b      	ldrh	r3, [r3, #0]
 80201fa:	b29a      	uxth	r2, r3
 80201fc:	23f8      	movs	r3, #248	@ 0xf8
 80201fe:	18fb      	adds	r3, r7, r3
 8020200:	681b      	ldr	r3, [r3, #0]
 8020202:	b29b      	uxth	r3, r3
 8020204:	029b      	lsls	r3, r3, #10
 8020206:	b29b      	uxth	r3, r3
 8020208:	4313      	orrs	r3, r2
 802020a:	b29b      	uxth	r3, r3
 802020c:	4ab7      	ldr	r2, [pc, #732]	@ (80204ec <USB_EPStartXfer+0x74c>)
 802020e:	4313      	orrs	r3, r2
 8020210:	b29a      	uxth	r2, r3
 8020212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020214:	801a      	strh	r2, [r3, #0]
 8020216:	e04a      	b.n	80202ae <USB_EPStartXfer+0x50e>
 8020218:	1d7b      	adds	r3, r7, #5
 802021a:	33ff      	adds	r3, #255	@ 0xff
 802021c:	681b      	ldr	r3, [r3, #0]
 802021e:	2b00      	cmp	r3, #0
 8020220:	d108      	bne.n	8020234 <USB_EPStartXfer+0x494>
 8020222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020224:	881b      	ldrh	r3, [r3, #0]
 8020226:	b29b      	uxth	r3, r3
 8020228:	4ab0      	ldr	r2, [pc, #704]	@ (80204ec <USB_EPStartXfer+0x74c>)
 802022a:	4313      	orrs	r3, r2
 802022c:	b29a      	uxth	r2, r3
 802022e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020230:	801a      	strh	r2, [r3, #0]
 8020232:	e03c      	b.n	80202ae <USB_EPStartXfer+0x50e>
 8020234:	1d7b      	adds	r3, r7, #5
 8020236:	33ff      	adds	r3, #255	@ 0xff
 8020238:	681b      	ldr	r3, [r3, #0]
 802023a:	085b      	lsrs	r3, r3, #1
 802023c:	21f8      	movs	r1, #248	@ 0xf8
 802023e:	187a      	adds	r2, r7, r1
 8020240:	6013      	str	r3, [r2, #0]
 8020242:	1d7b      	adds	r3, r7, #5
 8020244:	33ff      	adds	r3, #255	@ 0xff
 8020246:	681b      	ldr	r3, [r3, #0]
 8020248:	2201      	movs	r2, #1
 802024a:	4013      	ands	r3, r2
 802024c:	d004      	beq.n	8020258 <USB_EPStartXfer+0x4b8>
 802024e:	187b      	adds	r3, r7, r1
 8020250:	681b      	ldr	r3, [r3, #0]
 8020252:	3301      	adds	r3, #1
 8020254:	187a      	adds	r2, r7, r1
 8020256:	6013      	str	r3, [r2, #0]
 8020258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802025a:	881b      	ldrh	r3, [r3, #0]
 802025c:	b29a      	uxth	r2, r3
 802025e:	23f8      	movs	r3, #248	@ 0xf8
 8020260:	18fb      	adds	r3, r7, r3
 8020262:	681b      	ldr	r3, [r3, #0]
 8020264:	b29b      	uxth	r3, r3
 8020266:	029b      	lsls	r3, r3, #10
 8020268:	b29b      	uxth	r3, r3
 802026a:	4313      	orrs	r3, r2
 802026c:	b29a      	uxth	r2, r3
 802026e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020270:	801a      	strh	r2, [r3, #0]
 8020272:	e01c      	b.n	80202ae <USB_EPStartXfer+0x50e>
 8020274:	683b      	ldr	r3, [r7, #0]
 8020276:	785b      	ldrb	r3, [r3, #1]
 8020278:	2b01      	cmp	r3, #1
 802027a:	d118      	bne.n	80202ae <USB_EPStartXfer+0x50e>
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	653b      	str	r3, [r7, #80]	@ 0x50
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	2250      	movs	r2, #80	@ 0x50
 8020284:	5a9b      	ldrh	r3, [r3, r2]
 8020286:	b29b      	uxth	r3, r3
 8020288:	001a      	movs	r2, r3
 802028a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802028c:	189b      	adds	r3, r3, r2
 802028e:	653b      	str	r3, [r7, #80]	@ 0x50
 8020290:	683b      	ldr	r3, [r7, #0]
 8020292:	781b      	ldrb	r3, [r3, #0]
 8020294:	00da      	lsls	r2, r3, #3
 8020296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020298:	18d3      	adds	r3, r2, r3
 802029a:	4a93      	ldr	r2, [pc, #588]	@ (80204e8 <USB_EPStartXfer+0x748>)
 802029c:	4694      	mov	ip, r2
 802029e:	4463      	add	r3, ip
 80202a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80202a2:	1d7b      	adds	r3, r7, #5
 80202a4:	33ff      	adds	r3, #255	@ 0xff
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	b29a      	uxth	r2, r3
 80202aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80202ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80202ae:	2076      	movs	r0, #118	@ 0x76
 80202b0:	183b      	adds	r3, r7, r0
 80202b2:	683a      	ldr	r2, [r7, #0]
 80202b4:	8912      	ldrh	r2, [r2, #8]
 80202b6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80202b8:	683b      	ldr	r3, [r7, #0]
 80202ba:	6959      	ldr	r1, [r3, #20]
 80202bc:	1d7b      	adds	r3, r7, #5
 80202be:	33ff      	adds	r3, #255	@ 0xff
 80202c0:	681b      	ldr	r3, [r3, #0]
 80202c2:	b29c      	uxth	r4, r3
 80202c4:	183b      	adds	r3, r7, r0
 80202c6:	881a      	ldrh	r2, [r3, #0]
 80202c8:	6878      	ldr	r0, [r7, #4]
 80202ca:	0023      	movs	r3, r4
 80202cc:	f000 ffda 	bl	8021284 <USB_WritePMA>
            ep->xfer_buff += len;
 80202d0:	683b      	ldr	r3, [r7, #0]
 80202d2:	695a      	ldr	r2, [r3, #20]
 80202d4:	1d7b      	adds	r3, r7, #5
 80202d6:	33ff      	adds	r3, #255	@ 0xff
 80202d8:	681b      	ldr	r3, [r3, #0]
 80202da:	18d2      	adds	r2, r2, r3
 80202dc:	683b      	ldr	r3, [r7, #0]
 80202de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80202e0:	683b      	ldr	r3, [r7, #0]
 80202e2:	6a1a      	ldr	r2, [r3, #32]
 80202e4:	683b      	ldr	r3, [r7, #0]
 80202e6:	691b      	ldr	r3, [r3, #16]
 80202e8:	429a      	cmp	r2, r3
 80202ea:	d908      	bls.n	80202fe <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80202ec:	683b      	ldr	r3, [r7, #0]
 80202ee:	6a1a      	ldr	r2, [r3, #32]
 80202f0:	1d7b      	adds	r3, r7, #5
 80202f2:	33ff      	adds	r3, #255	@ 0xff
 80202f4:	681b      	ldr	r3, [r3, #0]
 80202f6:	1ad2      	subs	r2, r2, r3
 80202f8:	683b      	ldr	r3, [r7, #0]
 80202fa:	621a      	str	r2, [r3, #32]
 80202fc:	e007      	b.n	802030e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80202fe:	683b      	ldr	r3, [r7, #0]
 8020300:	6a1b      	ldr	r3, [r3, #32]
 8020302:	1d7a      	adds	r2, r7, #5
 8020304:	32ff      	adds	r2, #255	@ 0xff
 8020306:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8020308:	683b      	ldr	r3, [r7, #0]
 802030a:	2200      	movs	r2, #0
 802030c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 802030e:	687b      	ldr	r3, [r7, #4]
 8020310:	643b      	str	r3, [r7, #64]	@ 0x40
 8020312:	683b      	ldr	r3, [r7, #0]
 8020314:	785b      	ldrb	r3, [r3, #1]
 8020316:	2b00      	cmp	r3, #0
 8020318:	d000      	beq.n	802031c <USB_EPStartXfer+0x57c>
 802031a:	e070      	b.n	80203fe <USB_EPStartXfer+0x65e>
 802031c:	687b      	ldr	r3, [r7, #4]
 802031e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	2250      	movs	r2, #80	@ 0x50
 8020324:	5a9b      	ldrh	r3, [r3, r2]
 8020326:	b29b      	uxth	r3, r3
 8020328:	001a      	movs	r2, r3
 802032a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802032c:	189b      	adds	r3, r3, r2
 802032e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020330:	683b      	ldr	r3, [r7, #0]
 8020332:	781b      	ldrb	r3, [r3, #0]
 8020334:	00da      	lsls	r2, r3, #3
 8020336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020338:	18d3      	adds	r3, r2, r3
 802033a:	4a6d      	ldr	r2, [pc, #436]	@ (80204f0 <USB_EPStartXfer+0x750>)
 802033c:	4694      	mov	ip, r2
 802033e:	4463      	add	r3, ip
 8020340:	637b      	str	r3, [r7, #52]	@ 0x34
 8020342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020344:	881b      	ldrh	r3, [r3, #0]
 8020346:	b29b      	uxth	r3, r3
 8020348:	059b      	lsls	r3, r3, #22
 802034a:	0d9b      	lsrs	r3, r3, #22
 802034c:	b29a      	uxth	r2, r3
 802034e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020350:	801a      	strh	r2, [r3, #0]
 8020352:	1d7b      	adds	r3, r7, #5
 8020354:	33ff      	adds	r3, #255	@ 0xff
 8020356:	681b      	ldr	r3, [r3, #0]
 8020358:	2b3e      	cmp	r3, #62	@ 0x3e
 802035a:	d922      	bls.n	80203a2 <USB_EPStartXfer+0x602>
 802035c:	1d7b      	adds	r3, r7, #5
 802035e:	33ff      	adds	r3, #255	@ 0xff
 8020360:	681b      	ldr	r3, [r3, #0]
 8020362:	095b      	lsrs	r3, r3, #5
 8020364:	21f4      	movs	r1, #244	@ 0xf4
 8020366:	187a      	adds	r2, r7, r1
 8020368:	6013      	str	r3, [r2, #0]
 802036a:	1d7b      	adds	r3, r7, #5
 802036c:	33ff      	adds	r3, #255	@ 0xff
 802036e:	681b      	ldr	r3, [r3, #0]
 8020370:	221f      	movs	r2, #31
 8020372:	4013      	ands	r3, r2
 8020374:	d104      	bne.n	8020380 <USB_EPStartXfer+0x5e0>
 8020376:	187b      	adds	r3, r7, r1
 8020378:	681b      	ldr	r3, [r3, #0]
 802037a:	3b01      	subs	r3, #1
 802037c:	187a      	adds	r2, r7, r1
 802037e:	6013      	str	r3, [r2, #0]
 8020380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020382:	881b      	ldrh	r3, [r3, #0]
 8020384:	b29a      	uxth	r2, r3
 8020386:	23f4      	movs	r3, #244	@ 0xf4
 8020388:	18fb      	adds	r3, r7, r3
 802038a:	681b      	ldr	r3, [r3, #0]
 802038c:	b29b      	uxth	r3, r3
 802038e:	029b      	lsls	r3, r3, #10
 8020390:	b29b      	uxth	r3, r3
 8020392:	4313      	orrs	r3, r2
 8020394:	b29b      	uxth	r3, r3
 8020396:	4a55      	ldr	r2, [pc, #340]	@ (80204ec <USB_EPStartXfer+0x74c>)
 8020398:	4313      	orrs	r3, r2
 802039a:	b29a      	uxth	r2, r3
 802039c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802039e:	801a      	strh	r2, [r3, #0]
 80203a0:	e048      	b.n	8020434 <USB_EPStartXfer+0x694>
 80203a2:	1d7b      	adds	r3, r7, #5
 80203a4:	33ff      	adds	r3, #255	@ 0xff
 80203a6:	681b      	ldr	r3, [r3, #0]
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	d108      	bne.n	80203be <USB_EPStartXfer+0x61e>
 80203ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80203ae:	881b      	ldrh	r3, [r3, #0]
 80203b0:	b29b      	uxth	r3, r3
 80203b2:	4a4e      	ldr	r2, [pc, #312]	@ (80204ec <USB_EPStartXfer+0x74c>)
 80203b4:	4313      	orrs	r3, r2
 80203b6:	b29a      	uxth	r2, r3
 80203b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80203ba:	801a      	strh	r2, [r3, #0]
 80203bc:	e03a      	b.n	8020434 <USB_EPStartXfer+0x694>
 80203be:	1d7b      	adds	r3, r7, #5
 80203c0:	33ff      	adds	r3, #255	@ 0xff
 80203c2:	681b      	ldr	r3, [r3, #0]
 80203c4:	085b      	lsrs	r3, r3, #1
 80203c6:	21f4      	movs	r1, #244	@ 0xf4
 80203c8:	187a      	adds	r2, r7, r1
 80203ca:	6013      	str	r3, [r2, #0]
 80203cc:	1d7b      	adds	r3, r7, #5
 80203ce:	33ff      	adds	r3, #255	@ 0xff
 80203d0:	681b      	ldr	r3, [r3, #0]
 80203d2:	2201      	movs	r2, #1
 80203d4:	4013      	ands	r3, r2
 80203d6:	d004      	beq.n	80203e2 <USB_EPStartXfer+0x642>
 80203d8:	187b      	adds	r3, r7, r1
 80203da:	681b      	ldr	r3, [r3, #0]
 80203dc:	3301      	adds	r3, #1
 80203de:	187a      	adds	r2, r7, r1
 80203e0:	6013      	str	r3, [r2, #0]
 80203e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80203e4:	881b      	ldrh	r3, [r3, #0]
 80203e6:	b29a      	uxth	r2, r3
 80203e8:	23f4      	movs	r3, #244	@ 0xf4
 80203ea:	18fb      	adds	r3, r7, r3
 80203ec:	681b      	ldr	r3, [r3, #0]
 80203ee:	b29b      	uxth	r3, r3
 80203f0:	029b      	lsls	r3, r3, #10
 80203f2:	b29b      	uxth	r3, r3
 80203f4:	4313      	orrs	r3, r2
 80203f6:	b29a      	uxth	r2, r3
 80203f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80203fa:	801a      	strh	r2, [r3, #0]
 80203fc:	e01a      	b.n	8020434 <USB_EPStartXfer+0x694>
 80203fe:	683b      	ldr	r3, [r7, #0]
 8020400:	785b      	ldrb	r3, [r3, #1]
 8020402:	2b01      	cmp	r3, #1
 8020404:	d116      	bne.n	8020434 <USB_EPStartXfer+0x694>
 8020406:	687b      	ldr	r3, [r7, #4]
 8020408:	2250      	movs	r2, #80	@ 0x50
 802040a:	5a9b      	ldrh	r3, [r3, r2]
 802040c:	b29b      	uxth	r3, r3
 802040e:	001a      	movs	r2, r3
 8020410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020412:	189b      	adds	r3, r3, r2
 8020414:	643b      	str	r3, [r7, #64]	@ 0x40
 8020416:	683b      	ldr	r3, [r7, #0]
 8020418:	781b      	ldrb	r3, [r3, #0]
 802041a:	00da      	lsls	r2, r3, #3
 802041c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802041e:	18d3      	adds	r3, r2, r3
 8020420:	4a33      	ldr	r2, [pc, #204]	@ (80204f0 <USB_EPStartXfer+0x750>)
 8020422:	4694      	mov	ip, r2
 8020424:	4463      	add	r3, ip
 8020426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020428:	1d7b      	adds	r3, r7, #5
 802042a:	33ff      	adds	r3, #255	@ 0xff
 802042c:	681b      	ldr	r3, [r3, #0]
 802042e:	b29a      	uxth	r2, r3
 8020430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020432:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8020434:	2076      	movs	r0, #118	@ 0x76
 8020436:	183b      	adds	r3, r7, r0
 8020438:	683a      	ldr	r2, [r7, #0]
 802043a:	8952      	ldrh	r2, [r2, #10]
 802043c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802043e:	683b      	ldr	r3, [r7, #0]
 8020440:	6959      	ldr	r1, [r3, #20]
 8020442:	1d7b      	adds	r3, r7, #5
 8020444:	33ff      	adds	r3, #255	@ 0xff
 8020446:	681b      	ldr	r3, [r3, #0]
 8020448:	b29c      	uxth	r4, r3
 802044a:	183b      	adds	r3, r7, r0
 802044c:	881a      	ldrh	r2, [r3, #0]
 802044e:	6878      	ldr	r0, [r7, #4]
 8020450:	0023      	movs	r3, r4
 8020452:	f000 ff17 	bl	8021284 <USB_WritePMA>
 8020456:	e1b6      	b.n	80207c6 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8020458:	683b      	ldr	r3, [r7, #0]
 802045a:	6a1b      	ldr	r3, [r3, #32]
 802045c:	1d7a      	adds	r2, r7, #5
 802045e:	32ff      	adds	r2, #255	@ 0xff
 8020460:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8020462:	687a      	ldr	r2, [r7, #4]
 8020464:	683b      	ldr	r3, [r7, #0]
 8020466:	781b      	ldrb	r3, [r3, #0]
 8020468:	009b      	lsls	r3, r3, #2
 802046a:	18d3      	adds	r3, r2, r3
 802046c:	881b      	ldrh	r3, [r3, #0]
 802046e:	b29a      	uxth	r2, r3
 8020470:	2062      	movs	r0, #98	@ 0x62
 8020472:	183b      	adds	r3, r7, r0
 8020474:	491f      	ldr	r1, [pc, #124]	@ (80204f4 <USB_EPStartXfer+0x754>)
 8020476:	400a      	ands	r2, r1
 8020478:	801a      	strh	r2, [r3, #0]
 802047a:	687a      	ldr	r2, [r7, #4]
 802047c:	683b      	ldr	r3, [r7, #0]
 802047e:	781b      	ldrb	r3, [r3, #0]
 8020480:	009b      	lsls	r3, r3, #2
 8020482:	18d3      	adds	r3, r2, r3
 8020484:	183a      	adds	r2, r7, r0
 8020486:	8812      	ldrh	r2, [r2, #0]
 8020488:	491b      	ldr	r1, [pc, #108]	@ (80204f8 <USB_EPStartXfer+0x758>)
 802048a:	430a      	orrs	r2, r1
 802048c:	b292      	uxth	r2, r2
 802048e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020494:	687b      	ldr	r3, [r7, #4]
 8020496:	2250      	movs	r2, #80	@ 0x50
 8020498:	5a9b      	ldrh	r3, [r3, r2]
 802049a:	b29b      	uxth	r3, r3
 802049c:	001a      	movs	r2, r3
 802049e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80204a0:	189b      	adds	r3, r3, r2
 80204a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80204a4:	683b      	ldr	r3, [r7, #0]
 80204a6:	781b      	ldrb	r3, [r3, #0]
 80204a8:	00da      	lsls	r2, r3, #3
 80204aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80204ac:	18d3      	adds	r3, r2, r3
 80204ae:	4a0e      	ldr	r2, [pc, #56]	@ (80204e8 <USB_EPStartXfer+0x748>)
 80204b0:	4694      	mov	ip, r2
 80204b2:	4463      	add	r3, ip
 80204b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80204b6:	1d7b      	adds	r3, r7, #5
 80204b8:	33ff      	adds	r3, #255	@ 0xff
 80204ba:	681b      	ldr	r3, [r3, #0]
 80204bc:	b29a      	uxth	r2, r3
 80204be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80204c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80204c2:	2076      	movs	r0, #118	@ 0x76
 80204c4:	183b      	adds	r3, r7, r0
 80204c6:	683a      	ldr	r2, [r7, #0]
 80204c8:	8912      	ldrh	r2, [r2, #8]
 80204ca:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80204cc:	683b      	ldr	r3, [r7, #0]
 80204ce:	6959      	ldr	r1, [r3, #20]
 80204d0:	1d7b      	adds	r3, r7, #5
 80204d2:	33ff      	adds	r3, #255	@ 0xff
 80204d4:	681b      	ldr	r3, [r3, #0]
 80204d6:	b29c      	uxth	r4, r3
 80204d8:	183b      	adds	r3, r7, r0
 80204da:	881a      	ldrh	r2, [r3, #0]
 80204dc:	6878      	ldr	r0, [r7, #4]
 80204de:	0023      	movs	r3, r4
 80204e0:	f000 fed0 	bl	8021284 <USB_WritePMA>
 80204e4:	e16f      	b.n	80207c6 <USB_EPStartXfer+0xa26>
 80204e6:	46c0      	nop			@ (mov r8, r8)
 80204e8:	00000402 	.word	0x00000402
 80204ec:	ffff8000 	.word	0xffff8000
 80204f0:	00000406 	.word	0x00000406
 80204f4:	ffff8e8f 	.word	0xffff8e8f
 80204f8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80204fc:	683b      	ldr	r3, [r7, #0]
 80204fe:	6a1a      	ldr	r2, [r3, #32]
 8020500:	1d7b      	adds	r3, r7, #5
 8020502:	33ff      	adds	r3, #255	@ 0xff
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	1ad2      	subs	r2, r2, r3
 8020508:	683b      	ldr	r3, [r7, #0]
 802050a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 802050c:	687a      	ldr	r2, [r7, #4]
 802050e:	683b      	ldr	r3, [r7, #0]
 8020510:	781b      	ldrb	r3, [r3, #0]
 8020512:	009b      	lsls	r3, r3, #2
 8020514:	18d3      	adds	r3, r2, r3
 8020516:	881b      	ldrh	r3, [r3, #0]
 8020518:	b29b      	uxth	r3, r3
 802051a:	001a      	movs	r2, r3
 802051c:	2340      	movs	r3, #64	@ 0x40
 802051e:	4013      	ands	r3, r2
 8020520:	d100      	bne.n	8020524 <USB_EPStartXfer+0x784>
 8020522:	e0a4      	b.n	802066e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	673b      	str	r3, [r7, #112]	@ 0x70
 8020528:	683b      	ldr	r3, [r7, #0]
 802052a:	785b      	ldrb	r3, [r3, #1]
 802052c:	2b00      	cmp	r3, #0
 802052e:	d000      	beq.n	8020532 <USB_EPStartXfer+0x792>
 8020530:	e070      	b.n	8020614 <USB_EPStartXfer+0x874>
 8020532:	687b      	ldr	r3, [r7, #4]
 8020534:	66bb      	str	r3, [r7, #104]	@ 0x68
 8020536:	687b      	ldr	r3, [r7, #4]
 8020538:	2250      	movs	r2, #80	@ 0x50
 802053a:	5a9b      	ldrh	r3, [r3, r2]
 802053c:	b29b      	uxth	r3, r3
 802053e:	001a      	movs	r2, r3
 8020540:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8020542:	189b      	adds	r3, r3, r2
 8020544:	66bb      	str	r3, [r7, #104]	@ 0x68
 8020546:	683b      	ldr	r3, [r7, #0]
 8020548:	781b      	ldrb	r3, [r3, #0]
 802054a:	00da      	lsls	r2, r3, #3
 802054c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802054e:	18d3      	adds	r3, r2, r3
 8020550:	4abc      	ldr	r2, [pc, #752]	@ (8020844 <USB_EPStartXfer+0xaa4>)
 8020552:	4694      	mov	ip, r2
 8020554:	4463      	add	r3, ip
 8020556:	667b      	str	r3, [r7, #100]	@ 0x64
 8020558:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802055a:	881b      	ldrh	r3, [r3, #0]
 802055c:	b29b      	uxth	r3, r3
 802055e:	059b      	lsls	r3, r3, #22
 8020560:	0d9b      	lsrs	r3, r3, #22
 8020562:	b29a      	uxth	r2, r3
 8020564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020566:	801a      	strh	r2, [r3, #0]
 8020568:	1d7b      	adds	r3, r7, #5
 802056a:	33ff      	adds	r3, #255	@ 0xff
 802056c:	681b      	ldr	r3, [r3, #0]
 802056e:	2b3e      	cmp	r3, #62	@ 0x3e
 8020570:	d922      	bls.n	80205b8 <USB_EPStartXfer+0x818>
 8020572:	1d7b      	adds	r3, r7, #5
 8020574:	33ff      	adds	r3, #255	@ 0xff
 8020576:	681b      	ldr	r3, [r3, #0]
 8020578:	095b      	lsrs	r3, r3, #5
 802057a:	21f0      	movs	r1, #240	@ 0xf0
 802057c:	187a      	adds	r2, r7, r1
 802057e:	6013      	str	r3, [r2, #0]
 8020580:	1d7b      	adds	r3, r7, #5
 8020582:	33ff      	adds	r3, #255	@ 0xff
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	221f      	movs	r2, #31
 8020588:	4013      	ands	r3, r2
 802058a:	d104      	bne.n	8020596 <USB_EPStartXfer+0x7f6>
 802058c:	187b      	adds	r3, r7, r1
 802058e:	681b      	ldr	r3, [r3, #0]
 8020590:	3b01      	subs	r3, #1
 8020592:	187a      	adds	r2, r7, r1
 8020594:	6013      	str	r3, [r2, #0]
 8020596:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020598:	881b      	ldrh	r3, [r3, #0]
 802059a:	b29a      	uxth	r2, r3
 802059c:	23f0      	movs	r3, #240	@ 0xf0
 802059e:	18fb      	adds	r3, r7, r3
 80205a0:	681b      	ldr	r3, [r3, #0]
 80205a2:	b29b      	uxth	r3, r3
 80205a4:	029b      	lsls	r3, r3, #10
 80205a6:	b29b      	uxth	r3, r3
 80205a8:	4313      	orrs	r3, r2
 80205aa:	b29b      	uxth	r3, r3
 80205ac:	4aa6      	ldr	r2, [pc, #664]	@ (8020848 <USB_EPStartXfer+0xaa8>)
 80205ae:	4313      	orrs	r3, r2
 80205b0:	b29a      	uxth	r2, r3
 80205b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80205b4:	801a      	strh	r2, [r3, #0]
 80205b6:	e048      	b.n	802064a <USB_EPStartXfer+0x8aa>
 80205b8:	1d7b      	adds	r3, r7, #5
 80205ba:	33ff      	adds	r3, #255	@ 0xff
 80205bc:	681b      	ldr	r3, [r3, #0]
 80205be:	2b00      	cmp	r3, #0
 80205c0:	d108      	bne.n	80205d4 <USB_EPStartXfer+0x834>
 80205c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80205c4:	881b      	ldrh	r3, [r3, #0]
 80205c6:	b29b      	uxth	r3, r3
 80205c8:	4a9f      	ldr	r2, [pc, #636]	@ (8020848 <USB_EPStartXfer+0xaa8>)
 80205ca:	4313      	orrs	r3, r2
 80205cc:	b29a      	uxth	r2, r3
 80205ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80205d0:	801a      	strh	r2, [r3, #0]
 80205d2:	e03a      	b.n	802064a <USB_EPStartXfer+0x8aa>
 80205d4:	1d7b      	adds	r3, r7, #5
 80205d6:	33ff      	adds	r3, #255	@ 0xff
 80205d8:	681b      	ldr	r3, [r3, #0]
 80205da:	085b      	lsrs	r3, r3, #1
 80205dc:	21f0      	movs	r1, #240	@ 0xf0
 80205de:	187a      	adds	r2, r7, r1
 80205e0:	6013      	str	r3, [r2, #0]
 80205e2:	1d7b      	adds	r3, r7, #5
 80205e4:	33ff      	adds	r3, #255	@ 0xff
 80205e6:	681b      	ldr	r3, [r3, #0]
 80205e8:	2201      	movs	r2, #1
 80205ea:	4013      	ands	r3, r2
 80205ec:	d004      	beq.n	80205f8 <USB_EPStartXfer+0x858>
 80205ee:	187b      	adds	r3, r7, r1
 80205f0:	681b      	ldr	r3, [r3, #0]
 80205f2:	3301      	adds	r3, #1
 80205f4:	187a      	adds	r2, r7, r1
 80205f6:	6013      	str	r3, [r2, #0]
 80205f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80205fa:	881b      	ldrh	r3, [r3, #0]
 80205fc:	b29a      	uxth	r2, r3
 80205fe:	23f0      	movs	r3, #240	@ 0xf0
 8020600:	18fb      	adds	r3, r7, r3
 8020602:	681b      	ldr	r3, [r3, #0]
 8020604:	b29b      	uxth	r3, r3
 8020606:	029b      	lsls	r3, r3, #10
 8020608:	b29b      	uxth	r3, r3
 802060a:	4313      	orrs	r3, r2
 802060c:	b29a      	uxth	r2, r3
 802060e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020610:	801a      	strh	r2, [r3, #0]
 8020612:	e01a      	b.n	802064a <USB_EPStartXfer+0x8aa>
 8020614:	683b      	ldr	r3, [r7, #0]
 8020616:	785b      	ldrb	r3, [r3, #1]
 8020618:	2b01      	cmp	r3, #1
 802061a:	d116      	bne.n	802064a <USB_EPStartXfer+0x8aa>
 802061c:	687b      	ldr	r3, [r7, #4]
 802061e:	2250      	movs	r2, #80	@ 0x50
 8020620:	5a9b      	ldrh	r3, [r3, r2]
 8020622:	b29b      	uxth	r3, r3
 8020624:	001a      	movs	r2, r3
 8020626:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020628:	189b      	adds	r3, r3, r2
 802062a:	673b      	str	r3, [r7, #112]	@ 0x70
 802062c:	683b      	ldr	r3, [r7, #0]
 802062e:	781b      	ldrb	r3, [r3, #0]
 8020630:	00da      	lsls	r2, r3, #3
 8020632:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020634:	18d3      	adds	r3, r2, r3
 8020636:	4a83      	ldr	r2, [pc, #524]	@ (8020844 <USB_EPStartXfer+0xaa4>)
 8020638:	4694      	mov	ip, r2
 802063a:	4463      	add	r3, ip
 802063c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 802063e:	1d7b      	adds	r3, r7, #5
 8020640:	33ff      	adds	r3, #255	@ 0xff
 8020642:	681b      	ldr	r3, [r3, #0]
 8020644:	b29a      	uxth	r2, r3
 8020646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8020648:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 802064a:	2076      	movs	r0, #118	@ 0x76
 802064c:	183b      	adds	r3, r7, r0
 802064e:	683a      	ldr	r2, [r7, #0]
 8020650:	8952      	ldrh	r2, [r2, #10]
 8020652:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020654:	683b      	ldr	r3, [r7, #0]
 8020656:	6959      	ldr	r1, [r3, #20]
 8020658:	1d7b      	adds	r3, r7, #5
 802065a:	33ff      	adds	r3, #255	@ 0xff
 802065c:	681b      	ldr	r3, [r3, #0]
 802065e:	b29c      	uxth	r4, r3
 8020660:	183b      	adds	r3, r7, r0
 8020662:	881a      	ldrh	r2, [r3, #0]
 8020664:	6878      	ldr	r0, [r7, #4]
 8020666:	0023      	movs	r3, r4
 8020668:	f000 fe0c 	bl	8021284 <USB_WritePMA>
 802066c:	e0ab      	b.n	80207c6 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 802066e:	683b      	ldr	r3, [r7, #0]
 8020670:	785b      	ldrb	r3, [r3, #1]
 8020672:	2b00      	cmp	r3, #0
 8020674:	d000      	beq.n	8020678 <USB_EPStartXfer+0x8d8>
 8020676:	e070      	b.n	802075a <USB_EPStartXfer+0x9ba>
 8020678:	687b      	ldr	r3, [r7, #4]
 802067a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 802067c:	687b      	ldr	r3, [r7, #4]
 802067e:	2250      	movs	r2, #80	@ 0x50
 8020680:	5a9b      	ldrh	r3, [r3, r2]
 8020682:	b29b      	uxth	r3, r3
 8020684:	001a      	movs	r2, r3
 8020686:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8020688:	189b      	adds	r3, r3, r2
 802068a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 802068c:	683b      	ldr	r3, [r7, #0]
 802068e:	781b      	ldrb	r3, [r3, #0]
 8020690:	00da      	lsls	r2, r3, #3
 8020692:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8020694:	18d3      	adds	r3, r2, r3
 8020696:	4a6d      	ldr	r2, [pc, #436]	@ (802084c <USB_EPStartXfer+0xaac>)
 8020698:	4694      	mov	ip, r2
 802069a:	4463      	add	r3, ip
 802069c:	67bb      	str	r3, [r7, #120]	@ 0x78
 802069e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80206a0:	881b      	ldrh	r3, [r3, #0]
 80206a2:	b29b      	uxth	r3, r3
 80206a4:	059b      	lsls	r3, r3, #22
 80206a6:	0d9b      	lsrs	r3, r3, #22
 80206a8:	b29a      	uxth	r2, r3
 80206aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80206ac:	801a      	strh	r2, [r3, #0]
 80206ae:	1d7b      	adds	r3, r7, #5
 80206b0:	33ff      	adds	r3, #255	@ 0xff
 80206b2:	681b      	ldr	r3, [r3, #0]
 80206b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80206b6:	d922      	bls.n	80206fe <USB_EPStartXfer+0x95e>
 80206b8:	1d7b      	adds	r3, r7, #5
 80206ba:	33ff      	adds	r3, #255	@ 0xff
 80206bc:	681b      	ldr	r3, [r3, #0]
 80206be:	095b      	lsrs	r3, r3, #5
 80206c0:	21ec      	movs	r1, #236	@ 0xec
 80206c2:	187a      	adds	r2, r7, r1
 80206c4:	6013      	str	r3, [r2, #0]
 80206c6:	1d7b      	adds	r3, r7, #5
 80206c8:	33ff      	adds	r3, #255	@ 0xff
 80206ca:	681b      	ldr	r3, [r3, #0]
 80206cc:	221f      	movs	r2, #31
 80206ce:	4013      	ands	r3, r2
 80206d0:	d104      	bne.n	80206dc <USB_EPStartXfer+0x93c>
 80206d2:	187b      	adds	r3, r7, r1
 80206d4:	681b      	ldr	r3, [r3, #0]
 80206d6:	3b01      	subs	r3, #1
 80206d8:	187a      	adds	r2, r7, r1
 80206da:	6013      	str	r3, [r2, #0]
 80206dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80206de:	881b      	ldrh	r3, [r3, #0]
 80206e0:	b29a      	uxth	r2, r3
 80206e2:	23ec      	movs	r3, #236	@ 0xec
 80206e4:	18fb      	adds	r3, r7, r3
 80206e6:	681b      	ldr	r3, [r3, #0]
 80206e8:	b29b      	uxth	r3, r3
 80206ea:	029b      	lsls	r3, r3, #10
 80206ec:	b29b      	uxth	r3, r3
 80206ee:	4313      	orrs	r3, r2
 80206f0:	b29b      	uxth	r3, r3
 80206f2:	4a55      	ldr	r2, [pc, #340]	@ (8020848 <USB_EPStartXfer+0xaa8>)
 80206f4:	4313      	orrs	r3, r2
 80206f6:	b29a      	uxth	r2, r3
 80206f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80206fa:	801a      	strh	r2, [r3, #0]
 80206fc:	e052      	b.n	80207a4 <USB_EPStartXfer+0xa04>
 80206fe:	1d7b      	adds	r3, r7, #5
 8020700:	33ff      	adds	r3, #255	@ 0xff
 8020702:	681b      	ldr	r3, [r3, #0]
 8020704:	2b00      	cmp	r3, #0
 8020706:	d108      	bne.n	802071a <USB_EPStartXfer+0x97a>
 8020708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802070a:	881b      	ldrh	r3, [r3, #0]
 802070c:	b29b      	uxth	r3, r3
 802070e:	4a4e      	ldr	r2, [pc, #312]	@ (8020848 <USB_EPStartXfer+0xaa8>)
 8020710:	4313      	orrs	r3, r2
 8020712:	b29a      	uxth	r2, r3
 8020714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020716:	801a      	strh	r2, [r3, #0]
 8020718:	e044      	b.n	80207a4 <USB_EPStartXfer+0xa04>
 802071a:	1d7b      	adds	r3, r7, #5
 802071c:	33ff      	adds	r3, #255	@ 0xff
 802071e:	681b      	ldr	r3, [r3, #0]
 8020720:	085b      	lsrs	r3, r3, #1
 8020722:	21ec      	movs	r1, #236	@ 0xec
 8020724:	187a      	adds	r2, r7, r1
 8020726:	6013      	str	r3, [r2, #0]
 8020728:	1d7b      	adds	r3, r7, #5
 802072a:	33ff      	adds	r3, #255	@ 0xff
 802072c:	681b      	ldr	r3, [r3, #0]
 802072e:	2201      	movs	r2, #1
 8020730:	4013      	ands	r3, r2
 8020732:	d004      	beq.n	802073e <USB_EPStartXfer+0x99e>
 8020734:	187b      	adds	r3, r7, r1
 8020736:	681b      	ldr	r3, [r3, #0]
 8020738:	3301      	adds	r3, #1
 802073a:	187a      	adds	r2, r7, r1
 802073c:	6013      	str	r3, [r2, #0]
 802073e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020740:	881b      	ldrh	r3, [r3, #0]
 8020742:	b29a      	uxth	r2, r3
 8020744:	23ec      	movs	r3, #236	@ 0xec
 8020746:	18fb      	adds	r3, r7, r3
 8020748:	681b      	ldr	r3, [r3, #0]
 802074a:	b29b      	uxth	r3, r3
 802074c:	029b      	lsls	r3, r3, #10
 802074e:	b29b      	uxth	r3, r3
 8020750:	4313      	orrs	r3, r2
 8020752:	b29a      	uxth	r2, r3
 8020754:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020756:	801a      	strh	r2, [r3, #0]
 8020758:	e024      	b.n	80207a4 <USB_EPStartXfer+0xa04>
 802075a:	683b      	ldr	r3, [r7, #0]
 802075c:	785b      	ldrb	r3, [r3, #1]
 802075e:	2b01      	cmp	r3, #1
 8020760:	d120      	bne.n	80207a4 <USB_EPStartXfer+0xa04>
 8020762:	687b      	ldr	r3, [r7, #4]
 8020764:	2184      	movs	r1, #132	@ 0x84
 8020766:	187a      	adds	r2, r7, r1
 8020768:	6013      	str	r3, [r2, #0]
 802076a:	687b      	ldr	r3, [r7, #4]
 802076c:	2250      	movs	r2, #80	@ 0x50
 802076e:	5a9b      	ldrh	r3, [r3, r2]
 8020770:	b29b      	uxth	r3, r3
 8020772:	001a      	movs	r2, r3
 8020774:	187b      	adds	r3, r7, r1
 8020776:	681b      	ldr	r3, [r3, #0]
 8020778:	189b      	adds	r3, r3, r2
 802077a:	187a      	adds	r2, r7, r1
 802077c:	6013      	str	r3, [r2, #0]
 802077e:	683b      	ldr	r3, [r7, #0]
 8020780:	781b      	ldrb	r3, [r3, #0]
 8020782:	00da      	lsls	r2, r3, #3
 8020784:	187b      	adds	r3, r7, r1
 8020786:	681b      	ldr	r3, [r3, #0]
 8020788:	18d3      	adds	r3, r2, r3
 802078a:	4a30      	ldr	r2, [pc, #192]	@ (802084c <USB_EPStartXfer+0xaac>)
 802078c:	4694      	mov	ip, r2
 802078e:	4463      	add	r3, ip
 8020790:	2180      	movs	r1, #128	@ 0x80
 8020792:	187a      	adds	r2, r7, r1
 8020794:	6013      	str	r3, [r2, #0]
 8020796:	1d7b      	adds	r3, r7, #5
 8020798:	33ff      	adds	r3, #255	@ 0xff
 802079a:	681b      	ldr	r3, [r3, #0]
 802079c:	b29a      	uxth	r2, r3
 802079e:	187b      	adds	r3, r7, r1
 80207a0:	681b      	ldr	r3, [r3, #0]
 80207a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80207a4:	2076      	movs	r0, #118	@ 0x76
 80207a6:	183b      	adds	r3, r7, r0
 80207a8:	683a      	ldr	r2, [r7, #0]
 80207aa:	8912      	ldrh	r2, [r2, #8]
 80207ac:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80207ae:	683b      	ldr	r3, [r7, #0]
 80207b0:	6959      	ldr	r1, [r3, #20]
 80207b2:	1d7b      	adds	r3, r7, #5
 80207b4:	33ff      	adds	r3, #255	@ 0xff
 80207b6:	681b      	ldr	r3, [r3, #0]
 80207b8:	b29c      	uxth	r4, r3
 80207ba:	183b      	adds	r3, r7, r0
 80207bc:	881a      	ldrh	r2, [r3, #0]
 80207be:	6878      	ldr	r0, [r7, #4]
 80207c0:	0023      	movs	r3, r4
 80207c2:	f000 fd5f 	bl	8021284 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80207c6:	687a      	ldr	r2, [r7, #4]
 80207c8:	683b      	ldr	r3, [r7, #0]
 80207ca:	781b      	ldrb	r3, [r3, #0]
 80207cc:	009b      	lsls	r3, r3, #2
 80207ce:	18d3      	adds	r3, r2, r3
 80207d0:	881b      	ldrh	r3, [r3, #0]
 80207d2:	b29a      	uxth	r2, r3
 80207d4:	200a      	movs	r0, #10
 80207d6:	183b      	adds	r3, r7, r0
 80207d8:	491d      	ldr	r1, [pc, #116]	@ (8020850 <USB_EPStartXfer+0xab0>)
 80207da:	400a      	ands	r2, r1
 80207dc:	801a      	strh	r2, [r3, #0]
 80207de:	183b      	adds	r3, r7, r0
 80207e0:	183a      	adds	r2, r7, r0
 80207e2:	8812      	ldrh	r2, [r2, #0]
 80207e4:	2110      	movs	r1, #16
 80207e6:	404a      	eors	r2, r1
 80207e8:	801a      	strh	r2, [r3, #0]
 80207ea:	183b      	adds	r3, r7, r0
 80207ec:	183a      	adds	r2, r7, r0
 80207ee:	8812      	ldrh	r2, [r2, #0]
 80207f0:	2120      	movs	r1, #32
 80207f2:	404a      	eors	r2, r1
 80207f4:	801a      	strh	r2, [r3, #0]
 80207f6:	687a      	ldr	r2, [r7, #4]
 80207f8:	683b      	ldr	r3, [r7, #0]
 80207fa:	781b      	ldrb	r3, [r3, #0]
 80207fc:	009b      	lsls	r3, r3, #2
 80207fe:	18d3      	adds	r3, r2, r3
 8020800:	183a      	adds	r2, r7, r0
 8020802:	8812      	ldrh	r2, [r2, #0]
 8020804:	4913      	ldr	r1, [pc, #76]	@ (8020854 <USB_EPStartXfer+0xab4>)
 8020806:	430a      	orrs	r2, r1
 8020808:	b292      	uxth	r2, r2
 802080a:	801a      	strh	r2, [r3, #0]
 802080c:	f000 fbf4 	bl	8020ff8 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8020810:	683b      	ldr	r3, [r7, #0]
 8020812:	7b1b      	ldrb	r3, [r3, #12]
 8020814:	2b00      	cmp	r3, #0
 8020816:	d000      	beq.n	802081a <USB_EPStartXfer+0xa7a>
 8020818:	e0a9      	b.n	802096e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 802081a:	683b      	ldr	r3, [r7, #0]
 802081c:	699a      	ldr	r2, [r3, #24]
 802081e:	683b      	ldr	r3, [r7, #0]
 8020820:	691b      	ldr	r3, [r3, #16]
 8020822:	429a      	cmp	r2, r3
 8020824:	d918      	bls.n	8020858 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8020826:	683b      	ldr	r3, [r7, #0]
 8020828:	691b      	ldr	r3, [r3, #16]
 802082a:	1d7a      	adds	r2, r7, #5
 802082c:	32ff      	adds	r2, #255	@ 0xff
 802082e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8020830:	683b      	ldr	r3, [r7, #0]
 8020832:	699a      	ldr	r2, [r3, #24]
 8020834:	1d7b      	adds	r3, r7, #5
 8020836:	33ff      	adds	r3, #255	@ 0xff
 8020838:	681b      	ldr	r3, [r3, #0]
 802083a:	1ad2      	subs	r2, r2, r3
 802083c:	683b      	ldr	r3, [r7, #0]
 802083e:	619a      	str	r2, [r3, #24]
 8020840:	e012      	b.n	8020868 <USB_EPStartXfer+0xac8>
 8020842:	46c0      	nop			@ (mov r8, r8)
 8020844:	00000406 	.word	0x00000406
 8020848:	ffff8000 	.word	0xffff8000
 802084c:	00000402 	.word	0x00000402
 8020850:	ffff8fbf 	.word	0xffff8fbf
 8020854:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8020858:	683b      	ldr	r3, [r7, #0]
 802085a:	699b      	ldr	r3, [r3, #24]
 802085c:	1d7a      	adds	r2, r7, #5
 802085e:	32ff      	adds	r2, #255	@ 0xff
 8020860:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8020862:	683b      	ldr	r3, [r7, #0]
 8020864:	2200      	movs	r2, #0
 8020866:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	2190      	movs	r1, #144	@ 0x90
 802086c:	187a      	adds	r2, r7, r1
 802086e:	6013      	str	r3, [r2, #0]
 8020870:	687b      	ldr	r3, [r7, #4]
 8020872:	2250      	movs	r2, #80	@ 0x50
 8020874:	5a9b      	ldrh	r3, [r3, r2]
 8020876:	b29b      	uxth	r3, r3
 8020878:	001a      	movs	r2, r3
 802087a:	187b      	adds	r3, r7, r1
 802087c:	681b      	ldr	r3, [r3, #0]
 802087e:	189b      	adds	r3, r3, r2
 8020880:	187a      	adds	r2, r7, r1
 8020882:	6013      	str	r3, [r2, #0]
 8020884:	683b      	ldr	r3, [r7, #0]
 8020886:	781b      	ldrb	r3, [r3, #0]
 8020888:	00da      	lsls	r2, r3, #3
 802088a:	187b      	adds	r3, r7, r1
 802088c:	681b      	ldr	r3, [r3, #0]
 802088e:	18d3      	adds	r3, r2, r3
 8020890:	4acf      	ldr	r2, [pc, #828]	@ (8020bd0 <USB_EPStartXfer+0xe30>)
 8020892:	4694      	mov	ip, r2
 8020894:	4463      	add	r3, ip
 8020896:	218c      	movs	r1, #140	@ 0x8c
 8020898:	187a      	adds	r2, r7, r1
 802089a:	6013      	str	r3, [r2, #0]
 802089c:	187b      	adds	r3, r7, r1
 802089e:	681b      	ldr	r3, [r3, #0]
 80208a0:	881b      	ldrh	r3, [r3, #0]
 80208a2:	b29b      	uxth	r3, r3
 80208a4:	059b      	lsls	r3, r3, #22
 80208a6:	0d9b      	lsrs	r3, r3, #22
 80208a8:	b29a      	uxth	r2, r3
 80208aa:	187b      	adds	r3, r7, r1
 80208ac:	681b      	ldr	r3, [r3, #0]
 80208ae:	801a      	strh	r2, [r3, #0]
 80208b0:	1d7b      	adds	r3, r7, #5
 80208b2:	33ff      	adds	r3, #255	@ 0xff
 80208b4:	681b      	ldr	r3, [r3, #0]
 80208b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80208b8:	d925      	bls.n	8020906 <USB_EPStartXfer+0xb66>
 80208ba:	1d7b      	adds	r3, r7, #5
 80208bc:	33ff      	adds	r3, #255	@ 0xff
 80208be:	681b      	ldr	r3, [r3, #0]
 80208c0:	095b      	lsrs	r3, r3, #5
 80208c2:	21e8      	movs	r1, #232	@ 0xe8
 80208c4:	187a      	adds	r2, r7, r1
 80208c6:	6013      	str	r3, [r2, #0]
 80208c8:	1d7b      	adds	r3, r7, #5
 80208ca:	33ff      	adds	r3, #255	@ 0xff
 80208cc:	681b      	ldr	r3, [r3, #0]
 80208ce:	221f      	movs	r2, #31
 80208d0:	4013      	ands	r3, r2
 80208d2:	d104      	bne.n	80208de <USB_EPStartXfer+0xb3e>
 80208d4:	187b      	adds	r3, r7, r1
 80208d6:	681b      	ldr	r3, [r3, #0]
 80208d8:	3b01      	subs	r3, #1
 80208da:	187a      	adds	r2, r7, r1
 80208dc:	6013      	str	r3, [r2, #0]
 80208de:	218c      	movs	r1, #140	@ 0x8c
 80208e0:	187b      	adds	r3, r7, r1
 80208e2:	681b      	ldr	r3, [r3, #0]
 80208e4:	881b      	ldrh	r3, [r3, #0]
 80208e6:	b29a      	uxth	r2, r3
 80208e8:	23e8      	movs	r3, #232	@ 0xe8
 80208ea:	18fb      	adds	r3, r7, r3
 80208ec:	681b      	ldr	r3, [r3, #0]
 80208ee:	b29b      	uxth	r3, r3
 80208f0:	029b      	lsls	r3, r3, #10
 80208f2:	b29b      	uxth	r3, r3
 80208f4:	4313      	orrs	r3, r2
 80208f6:	b29b      	uxth	r3, r3
 80208f8:	4ab6      	ldr	r2, [pc, #728]	@ (8020bd4 <USB_EPStartXfer+0xe34>)
 80208fa:	4313      	orrs	r3, r2
 80208fc:	b29a      	uxth	r2, r3
 80208fe:	187b      	adds	r3, r7, r1
 8020900:	681b      	ldr	r3, [r3, #0]
 8020902:	801a      	strh	r2, [r3, #0]
 8020904:	e353      	b.n	8020fae <USB_EPStartXfer+0x120e>
 8020906:	1d7b      	adds	r3, r7, #5
 8020908:	33ff      	adds	r3, #255	@ 0xff
 802090a:	681b      	ldr	r3, [r3, #0]
 802090c:	2b00      	cmp	r3, #0
 802090e:	d10b      	bne.n	8020928 <USB_EPStartXfer+0xb88>
 8020910:	218c      	movs	r1, #140	@ 0x8c
 8020912:	187b      	adds	r3, r7, r1
 8020914:	681b      	ldr	r3, [r3, #0]
 8020916:	881b      	ldrh	r3, [r3, #0]
 8020918:	b29b      	uxth	r3, r3
 802091a:	4aae      	ldr	r2, [pc, #696]	@ (8020bd4 <USB_EPStartXfer+0xe34>)
 802091c:	4313      	orrs	r3, r2
 802091e:	b29a      	uxth	r2, r3
 8020920:	187b      	adds	r3, r7, r1
 8020922:	681b      	ldr	r3, [r3, #0]
 8020924:	801a      	strh	r2, [r3, #0]
 8020926:	e342      	b.n	8020fae <USB_EPStartXfer+0x120e>
 8020928:	1d7b      	adds	r3, r7, #5
 802092a:	33ff      	adds	r3, #255	@ 0xff
 802092c:	681b      	ldr	r3, [r3, #0]
 802092e:	085b      	lsrs	r3, r3, #1
 8020930:	21e8      	movs	r1, #232	@ 0xe8
 8020932:	187a      	adds	r2, r7, r1
 8020934:	6013      	str	r3, [r2, #0]
 8020936:	1d7b      	adds	r3, r7, #5
 8020938:	33ff      	adds	r3, #255	@ 0xff
 802093a:	681b      	ldr	r3, [r3, #0]
 802093c:	2201      	movs	r2, #1
 802093e:	4013      	ands	r3, r2
 8020940:	d004      	beq.n	802094c <USB_EPStartXfer+0xbac>
 8020942:	187b      	adds	r3, r7, r1
 8020944:	681b      	ldr	r3, [r3, #0]
 8020946:	3301      	adds	r3, #1
 8020948:	187a      	adds	r2, r7, r1
 802094a:	6013      	str	r3, [r2, #0]
 802094c:	218c      	movs	r1, #140	@ 0x8c
 802094e:	187b      	adds	r3, r7, r1
 8020950:	681b      	ldr	r3, [r3, #0]
 8020952:	881b      	ldrh	r3, [r3, #0]
 8020954:	b29a      	uxth	r2, r3
 8020956:	23e8      	movs	r3, #232	@ 0xe8
 8020958:	18fb      	adds	r3, r7, r3
 802095a:	681b      	ldr	r3, [r3, #0]
 802095c:	b29b      	uxth	r3, r3
 802095e:	029b      	lsls	r3, r3, #10
 8020960:	b29b      	uxth	r3, r3
 8020962:	4313      	orrs	r3, r2
 8020964:	b29a      	uxth	r2, r3
 8020966:	187b      	adds	r3, r7, r1
 8020968:	681b      	ldr	r3, [r3, #0]
 802096a:	801a      	strh	r2, [r3, #0]
 802096c:	e31f      	b.n	8020fae <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 802096e:	683b      	ldr	r3, [r7, #0]
 8020970:	78db      	ldrb	r3, [r3, #3]
 8020972:	2b02      	cmp	r3, #2
 8020974:	d000      	beq.n	8020978 <USB_EPStartXfer+0xbd8>
 8020976:	e191      	b.n	8020c9c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8020978:	683b      	ldr	r3, [r7, #0]
 802097a:	785b      	ldrb	r3, [r3, #1]
 802097c:	2b00      	cmp	r3, #0
 802097e:	d000      	beq.n	8020982 <USB_EPStartXfer+0xbe2>
 8020980:	e07c      	b.n	8020a7c <USB_EPStartXfer+0xcdc>
 8020982:	687b      	ldr	r3, [r7, #4]
 8020984:	21ac      	movs	r1, #172	@ 0xac
 8020986:	187a      	adds	r2, r7, r1
 8020988:	6013      	str	r3, [r2, #0]
 802098a:	687b      	ldr	r3, [r7, #4]
 802098c:	2250      	movs	r2, #80	@ 0x50
 802098e:	5a9b      	ldrh	r3, [r3, r2]
 8020990:	b29b      	uxth	r3, r3
 8020992:	001a      	movs	r2, r3
 8020994:	187b      	adds	r3, r7, r1
 8020996:	681b      	ldr	r3, [r3, #0]
 8020998:	189b      	adds	r3, r3, r2
 802099a:	187a      	adds	r2, r7, r1
 802099c:	6013      	str	r3, [r2, #0]
 802099e:	683b      	ldr	r3, [r7, #0]
 80209a0:	781b      	ldrb	r3, [r3, #0]
 80209a2:	00da      	lsls	r2, r3, #3
 80209a4:	187b      	adds	r3, r7, r1
 80209a6:	681b      	ldr	r3, [r3, #0]
 80209a8:	18d3      	adds	r3, r2, r3
 80209aa:	4a8b      	ldr	r2, [pc, #556]	@ (8020bd8 <USB_EPStartXfer+0xe38>)
 80209ac:	4694      	mov	ip, r2
 80209ae:	4463      	add	r3, ip
 80209b0:	21a8      	movs	r1, #168	@ 0xa8
 80209b2:	187a      	adds	r2, r7, r1
 80209b4:	6013      	str	r3, [r2, #0]
 80209b6:	187b      	adds	r3, r7, r1
 80209b8:	681b      	ldr	r3, [r3, #0]
 80209ba:	881b      	ldrh	r3, [r3, #0]
 80209bc:	b29b      	uxth	r3, r3
 80209be:	059b      	lsls	r3, r3, #22
 80209c0:	0d9b      	lsrs	r3, r3, #22
 80209c2:	b29a      	uxth	r2, r3
 80209c4:	187b      	adds	r3, r7, r1
 80209c6:	681b      	ldr	r3, [r3, #0]
 80209c8:	801a      	strh	r2, [r3, #0]
 80209ca:	683b      	ldr	r3, [r7, #0]
 80209cc:	691b      	ldr	r3, [r3, #16]
 80209ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80209d0:	d923      	bls.n	8020a1a <USB_EPStartXfer+0xc7a>
 80209d2:	683b      	ldr	r3, [r7, #0]
 80209d4:	691b      	ldr	r3, [r3, #16]
 80209d6:	095b      	lsrs	r3, r3, #5
 80209d8:	21e4      	movs	r1, #228	@ 0xe4
 80209da:	187a      	adds	r2, r7, r1
 80209dc:	6013      	str	r3, [r2, #0]
 80209de:	683b      	ldr	r3, [r7, #0]
 80209e0:	691b      	ldr	r3, [r3, #16]
 80209e2:	221f      	movs	r2, #31
 80209e4:	4013      	ands	r3, r2
 80209e6:	d104      	bne.n	80209f2 <USB_EPStartXfer+0xc52>
 80209e8:	187b      	adds	r3, r7, r1
 80209ea:	681b      	ldr	r3, [r3, #0]
 80209ec:	3b01      	subs	r3, #1
 80209ee:	187a      	adds	r2, r7, r1
 80209f0:	6013      	str	r3, [r2, #0]
 80209f2:	21a8      	movs	r1, #168	@ 0xa8
 80209f4:	187b      	adds	r3, r7, r1
 80209f6:	681b      	ldr	r3, [r3, #0]
 80209f8:	881b      	ldrh	r3, [r3, #0]
 80209fa:	b29a      	uxth	r2, r3
 80209fc:	23e4      	movs	r3, #228	@ 0xe4
 80209fe:	18fb      	adds	r3, r7, r3
 8020a00:	681b      	ldr	r3, [r3, #0]
 8020a02:	b29b      	uxth	r3, r3
 8020a04:	029b      	lsls	r3, r3, #10
 8020a06:	b29b      	uxth	r3, r3
 8020a08:	4313      	orrs	r3, r2
 8020a0a:	b29b      	uxth	r3, r3
 8020a0c:	4a71      	ldr	r2, [pc, #452]	@ (8020bd4 <USB_EPStartXfer+0xe34>)
 8020a0e:	4313      	orrs	r3, r2
 8020a10:	b29a      	uxth	r2, r3
 8020a12:	187b      	adds	r3, r7, r1
 8020a14:	681b      	ldr	r3, [r3, #0]
 8020a16:	801a      	strh	r2, [r3, #0]
 8020a18:	e054      	b.n	8020ac4 <USB_EPStartXfer+0xd24>
 8020a1a:	683b      	ldr	r3, [r7, #0]
 8020a1c:	691b      	ldr	r3, [r3, #16]
 8020a1e:	2b00      	cmp	r3, #0
 8020a20:	d10b      	bne.n	8020a3a <USB_EPStartXfer+0xc9a>
 8020a22:	21a8      	movs	r1, #168	@ 0xa8
 8020a24:	187b      	adds	r3, r7, r1
 8020a26:	681b      	ldr	r3, [r3, #0]
 8020a28:	881b      	ldrh	r3, [r3, #0]
 8020a2a:	b29b      	uxth	r3, r3
 8020a2c:	4a69      	ldr	r2, [pc, #420]	@ (8020bd4 <USB_EPStartXfer+0xe34>)
 8020a2e:	4313      	orrs	r3, r2
 8020a30:	b29a      	uxth	r2, r3
 8020a32:	187b      	adds	r3, r7, r1
 8020a34:	681b      	ldr	r3, [r3, #0]
 8020a36:	801a      	strh	r2, [r3, #0]
 8020a38:	e044      	b.n	8020ac4 <USB_EPStartXfer+0xd24>
 8020a3a:	683b      	ldr	r3, [r7, #0]
 8020a3c:	691b      	ldr	r3, [r3, #16]
 8020a3e:	085b      	lsrs	r3, r3, #1
 8020a40:	21e4      	movs	r1, #228	@ 0xe4
 8020a42:	187a      	adds	r2, r7, r1
 8020a44:	6013      	str	r3, [r2, #0]
 8020a46:	683b      	ldr	r3, [r7, #0]
 8020a48:	691b      	ldr	r3, [r3, #16]
 8020a4a:	2201      	movs	r2, #1
 8020a4c:	4013      	ands	r3, r2
 8020a4e:	d004      	beq.n	8020a5a <USB_EPStartXfer+0xcba>
 8020a50:	187b      	adds	r3, r7, r1
 8020a52:	681b      	ldr	r3, [r3, #0]
 8020a54:	3301      	adds	r3, #1
 8020a56:	187a      	adds	r2, r7, r1
 8020a58:	6013      	str	r3, [r2, #0]
 8020a5a:	21a8      	movs	r1, #168	@ 0xa8
 8020a5c:	187b      	adds	r3, r7, r1
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	881b      	ldrh	r3, [r3, #0]
 8020a62:	b29a      	uxth	r2, r3
 8020a64:	23e4      	movs	r3, #228	@ 0xe4
 8020a66:	18fb      	adds	r3, r7, r3
 8020a68:	681b      	ldr	r3, [r3, #0]
 8020a6a:	b29b      	uxth	r3, r3
 8020a6c:	029b      	lsls	r3, r3, #10
 8020a6e:	b29b      	uxth	r3, r3
 8020a70:	4313      	orrs	r3, r2
 8020a72:	b29a      	uxth	r2, r3
 8020a74:	187b      	adds	r3, r7, r1
 8020a76:	681b      	ldr	r3, [r3, #0]
 8020a78:	801a      	strh	r2, [r3, #0]
 8020a7a:	e023      	b.n	8020ac4 <USB_EPStartXfer+0xd24>
 8020a7c:	683b      	ldr	r3, [r7, #0]
 8020a7e:	785b      	ldrb	r3, [r3, #1]
 8020a80:	2b01      	cmp	r3, #1
 8020a82:	d11f      	bne.n	8020ac4 <USB_EPStartXfer+0xd24>
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	21b4      	movs	r1, #180	@ 0xb4
 8020a88:	187a      	adds	r2, r7, r1
 8020a8a:	6013      	str	r3, [r2, #0]
 8020a8c:	687b      	ldr	r3, [r7, #4]
 8020a8e:	2250      	movs	r2, #80	@ 0x50
 8020a90:	5a9b      	ldrh	r3, [r3, r2]
 8020a92:	b29b      	uxth	r3, r3
 8020a94:	001a      	movs	r2, r3
 8020a96:	187b      	adds	r3, r7, r1
 8020a98:	681b      	ldr	r3, [r3, #0]
 8020a9a:	189b      	adds	r3, r3, r2
 8020a9c:	187a      	adds	r2, r7, r1
 8020a9e:	6013      	str	r3, [r2, #0]
 8020aa0:	683b      	ldr	r3, [r7, #0]
 8020aa2:	781b      	ldrb	r3, [r3, #0]
 8020aa4:	00da      	lsls	r2, r3, #3
 8020aa6:	187b      	adds	r3, r7, r1
 8020aa8:	681b      	ldr	r3, [r3, #0]
 8020aaa:	18d3      	adds	r3, r2, r3
 8020aac:	4a4a      	ldr	r2, [pc, #296]	@ (8020bd8 <USB_EPStartXfer+0xe38>)
 8020aae:	4694      	mov	ip, r2
 8020ab0:	4463      	add	r3, ip
 8020ab2:	21b0      	movs	r1, #176	@ 0xb0
 8020ab4:	187a      	adds	r2, r7, r1
 8020ab6:	6013      	str	r3, [r2, #0]
 8020ab8:	683b      	ldr	r3, [r7, #0]
 8020aba:	691b      	ldr	r3, [r3, #16]
 8020abc:	b29a      	uxth	r2, r3
 8020abe:	187b      	adds	r3, r7, r1
 8020ac0:	681b      	ldr	r3, [r3, #0]
 8020ac2:	801a      	strh	r2, [r3, #0]
 8020ac4:	687b      	ldr	r3, [r7, #4]
 8020ac6:	22a4      	movs	r2, #164	@ 0xa4
 8020ac8:	18ba      	adds	r2, r7, r2
 8020aca:	6013      	str	r3, [r2, #0]
 8020acc:	683b      	ldr	r3, [r7, #0]
 8020ace:	785b      	ldrb	r3, [r3, #1]
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	d000      	beq.n	8020ad6 <USB_EPStartXfer+0xd36>
 8020ad4:	e082      	b.n	8020bdc <USB_EPStartXfer+0xe3c>
 8020ad6:	687b      	ldr	r3, [r7, #4]
 8020ad8:	219c      	movs	r1, #156	@ 0x9c
 8020ada:	187a      	adds	r2, r7, r1
 8020adc:	6013      	str	r3, [r2, #0]
 8020ade:	687b      	ldr	r3, [r7, #4]
 8020ae0:	2250      	movs	r2, #80	@ 0x50
 8020ae2:	5a9b      	ldrh	r3, [r3, r2]
 8020ae4:	b29b      	uxth	r3, r3
 8020ae6:	001a      	movs	r2, r3
 8020ae8:	187b      	adds	r3, r7, r1
 8020aea:	681b      	ldr	r3, [r3, #0]
 8020aec:	189b      	adds	r3, r3, r2
 8020aee:	187a      	adds	r2, r7, r1
 8020af0:	6013      	str	r3, [r2, #0]
 8020af2:	683b      	ldr	r3, [r7, #0]
 8020af4:	781b      	ldrb	r3, [r3, #0]
 8020af6:	00da      	lsls	r2, r3, #3
 8020af8:	187b      	adds	r3, r7, r1
 8020afa:	681b      	ldr	r3, [r3, #0]
 8020afc:	18d3      	adds	r3, r2, r3
 8020afe:	4a34      	ldr	r2, [pc, #208]	@ (8020bd0 <USB_EPStartXfer+0xe30>)
 8020b00:	4694      	mov	ip, r2
 8020b02:	4463      	add	r3, ip
 8020b04:	2198      	movs	r1, #152	@ 0x98
 8020b06:	187a      	adds	r2, r7, r1
 8020b08:	6013      	str	r3, [r2, #0]
 8020b0a:	187b      	adds	r3, r7, r1
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	881b      	ldrh	r3, [r3, #0]
 8020b10:	b29b      	uxth	r3, r3
 8020b12:	059b      	lsls	r3, r3, #22
 8020b14:	0d9b      	lsrs	r3, r3, #22
 8020b16:	b29a      	uxth	r2, r3
 8020b18:	187b      	adds	r3, r7, r1
 8020b1a:	681b      	ldr	r3, [r3, #0]
 8020b1c:	801a      	strh	r2, [r3, #0]
 8020b1e:	683b      	ldr	r3, [r7, #0]
 8020b20:	691b      	ldr	r3, [r3, #16]
 8020b22:	2b3e      	cmp	r3, #62	@ 0x3e
 8020b24:	d923      	bls.n	8020b6e <USB_EPStartXfer+0xdce>
 8020b26:	683b      	ldr	r3, [r7, #0]
 8020b28:	691b      	ldr	r3, [r3, #16]
 8020b2a:	095b      	lsrs	r3, r3, #5
 8020b2c:	21e0      	movs	r1, #224	@ 0xe0
 8020b2e:	187a      	adds	r2, r7, r1
 8020b30:	6013      	str	r3, [r2, #0]
 8020b32:	683b      	ldr	r3, [r7, #0]
 8020b34:	691b      	ldr	r3, [r3, #16]
 8020b36:	221f      	movs	r2, #31
 8020b38:	4013      	ands	r3, r2
 8020b3a:	d104      	bne.n	8020b46 <USB_EPStartXfer+0xda6>
 8020b3c:	187b      	adds	r3, r7, r1
 8020b3e:	681b      	ldr	r3, [r3, #0]
 8020b40:	3b01      	subs	r3, #1
 8020b42:	187a      	adds	r2, r7, r1
 8020b44:	6013      	str	r3, [r2, #0]
 8020b46:	2198      	movs	r1, #152	@ 0x98
 8020b48:	187b      	adds	r3, r7, r1
 8020b4a:	681b      	ldr	r3, [r3, #0]
 8020b4c:	881b      	ldrh	r3, [r3, #0]
 8020b4e:	b29a      	uxth	r2, r3
 8020b50:	23e0      	movs	r3, #224	@ 0xe0
 8020b52:	18fb      	adds	r3, r7, r3
 8020b54:	681b      	ldr	r3, [r3, #0]
 8020b56:	b29b      	uxth	r3, r3
 8020b58:	029b      	lsls	r3, r3, #10
 8020b5a:	b29b      	uxth	r3, r3
 8020b5c:	4313      	orrs	r3, r2
 8020b5e:	b29b      	uxth	r3, r3
 8020b60:	4a1c      	ldr	r2, [pc, #112]	@ (8020bd4 <USB_EPStartXfer+0xe34>)
 8020b62:	4313      	orrs	r3, r2
 8020b64:	b29a      	uxth	r2, r3
 8020b66:	187b      	adds	r3, r7, r1
 8020b68:	681b      	ldr	r3, [r3, #0]
 8020b6a:	801a      	strh	r2, [r3, #0]
 8020b6c:	e057      	b.n	8020c1e <USB_EPStartXfer+0xe7e>
 8020b6e:	683b      	ldr	r3, [r7, #0]
 8020b70:	691b      	ldr	r3, [r3, #16]
 8020b72:	2b00      	cmp	r3, #0
 8020b74:	d10b      	bne.n	8020b8e <USB_EPStartXfer+0xdee>
 8020b76:	2198      	movs	r1, #152	@ 0x98
 8020b78:	187b      	adds	r3, r7, r1
 8020b7a:	681b      	ldr	r3, [r3, #0]
 8020b7c:	881b      	ldrh	r3, [r3, #0]
 8020b7e:	b29b      	uxth	r3, r3
 8020b80:	4a14      	ldr	r2, [pc, #80]	@ (8020bd4 <USB_EPStartXfer+0xe34>)
 8020b82:	4313      	orrs	r3, r2
 8020b84:	b29a      	uxth	r2, r3
 8020b86:	187b      	adds	r3, r7, r1
 8020b88:	681b      	ldr	r3, [r3, #0]
 8020b8a:	801a      	strh	r2, [r3, #0]
 8020b8c:	e047      	b.n	8020c1e <USB_EPStartXfer+0xe7e>
 8020b8e:	683b      	ldr	r3, [r7, #0]
 8020b90:	691b      	ldr	r3, [r3, #16]
 8020b92:	085b      	lsrs	r3, r3, #1
 8020b94:	21e0      	movs	r1, #224	@ 0xe0
 8020b96:	187a      	adds	r2, r7, r1
 8020b98:	6013      	str	r3, [r2, #0]
 8020b9a:	683b      	ldr	r3, [r7, #0]
 8020b9c:	691b      	ldr	r3, [r3, #16]
 8020b9e:	2201      	movs	r2, #1
 8020ba0:	4013      	ands	r3, r2
 8020ba2:	d004      	beq.n	8020bae <USB_EPStartXfer+0xe0e>
 8020ba4:	187b      	adds	r3, r7, r1
 8020ba6:	681b      	ldr	r3, [r3, #0]
 8020ba8:	3301      	adds	r3, #1
 8020baa:	187a      	adds	r2, r7, r1
 8020bac:	6013      	str	r3, [r2, #0]
 8020bae:	2198      	movs	r1, #152	@ 0x98
 8020bb0:	187b      	adds	r3, r7, r1
 8020bb2:	681b      	ldr	r3, [r3, #0]
 8020bb4:	881b      	ldrh	r3, [r3, #0]
 8020bb6:	b29a      	uxth	r2, r3
 8020bb8:	23e0      	movs	r3, #224	@ 0xe0
 8020bba:	18fb      	adds	r3, r7, r3
 8020bbc:	681b      	ldr	r3, [r3, #0]
 8020bbe:	b29b      	uxth	r3, r3
 8020bc0:	029b      	lsls	r3, r3, #10
 8020bc2:	b29b      	uxth	r3, r3
 8020bc4:	4313      	orrs	r3, r2
 8020bc6:	b29a      	uxth	r2, r3
 8020bc8:	187b      	adds	r3, r7, r1
 8020bca:	681b      	ldr	r3, [r3, #0]
 8020bcc:	801a      	strh	r2, [r3, #0]
 8020bce:	e026      	b.n	8020c1e <USB_EPStartXfer+0xe7e>
 8020bd0:	00000406 	.word	0x00000406
 8020bd4:	ffff8000 	.word	0xffff8000
 8020bd8:	00000402 	.word	0x00000402
 8020bdc:	683b      	ldr	r3, [r7, #0]
 8020bde:	785b      	ldrb	r3, [r3, #1]
 8020be0:	2b01      	cmp	r3, #1
 8020be2:	d11c      	bne.n	8020c1e <USB_EPStartXfer+0xe7e>
 8020be4:	687b      	ldr	r3, [r7, #4]
 8020be6:	2250      	movs	r2, #80	@ 0x50
 8020be8:	5a9b      	ldrh	r3, [r3, r2]
 8020bea:	b29b      	uxth	r3, r3
 8020bec:	001a      	movs	r2, r3
 8020bee:	21a4      	movs	r1, #164	@ 0xa4
 8020bf0:	187b      	adds	r3, r7, r1
 8020bf2:	681b      	ldr	r3, [r3, #0]
 8020bf4:	189b      	adds	r3, r3, r2
 8020bf6:	187a      	adds	r2, r7, r1
 8020bf8:	6013      	str	r3, [r2, #0]
 8020bfa:	683b      	ldr	r3, [r7, #0]
 8020bfc:	781b      	ldrb	r3, [r3, #0]
 8020bfe:	00da      	lsls	r2, r3, #3
 8020c00:	187b      	adds	r3, r7, r1
 8020c02:	681b      	ldr	r3, [r3, #0]
 8020c04:	18d3      	adds	r3, r2, r3
 8020c06:	4ad2      	ldr	r2, [pc, #840]	@ (8020f50 <USB_EPStartXfer+0x11b0>)
 8020c08:	4694      	mov	ip, r2
 8020c0a:	4463      	add	r3, ip
 8020c0c:	21a0      	movs	r1, #160	@ 0xa0
 8020c0e:	187a      	adds	r2, r7, r1
 8020c10:	6013      	str	r3, [r2, #0]
 8020c12:	683b      	ldr	r3, [r7, #0]
 8020c14:	691b      	ldr	r3, [r3, #16]
 8020c16:	b29a      	uxth	r2, r3
 8020c18:	187b      	adds	r3, r7, r1
 8020c1a:	681b      	ldr	r3, [r3, #0]
 8020c1c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8020c1e:	683b      	ldr	r3, [r7, #0]
 8020c20:	69db      	ldr	r3, [r3, #28]
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	d100      	bne.n	8020c28 <USB_EPStartXfer+0xe88>
 8020c26:	e1c2      	b.n	8020fae <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8020c28:	687a      	ldr	r2, [r7, #4]
 8020c2a:	683b      	ldr	r3, [r7, #0]
 8020c2c:	781b      	ldrb	r3, [r3, #0]
 8020c2e:	009b      	lsls	r3, r3, #2
 8020c30:	18d2      	adds	r2, r2, r3
 8020c32:	2196      	movs	r1, #150	@ 0x96
 8020c34:	187b      	adds	r3, r7, r1
 8020c36:	8812      	ldrh	r2, [r2, #0]
 8020c38:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020c3a:	187b      	adds	r3, r7, r1
 8020c3c:	881a      	ldrh	r2, [r3, #0]
 8020c3e:	2380      	movs	r3, #128	@ 0x80
 8020c40:	01db      	lsls	r3, r3, #7
 8020c42:	4013      	ands	r3, r2
 8020c44:	d004      	beq.n	8020c50 <USB_EPStartXfer+0xeb0>
 8020c46:	187b      	adds	r3, r7, r1
 8020c48:	881b      	ldrh	r3, [r3, #0]
 8020c4a:	2240      	movs	r2, #64	@ 0x40
 8020c4c:	4013      	ands	r3, r2
 8020c4e:	d10d      	bne.n	8020c6c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020c50:	2196      	movs	r1, #150	@ 0x96
 8020c52:	187b      	adds	r3, r7, r1
 8020c54:	881a      	ldrh	r2, [r3, #0]
 8020c56:	2380      	movs	r3, #128	@ 0x80
 8020c58:	01db      	lsls	r3, r3, #7
 8020c5a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020c5c:	d000      	beq.n	8020c60 <USB_EPStartXfer+0xec0>
 8020c5e:	e1a6      	b.n	8020fae <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020c60:	187b      	adds	r3, r7, r1
 8020c62:	881b      	ldrh	r3, [r3, #0]
 8020c64:	2240      	movs	r2, #64	@ 0x40
 8020c66:	4013      	ands	r3, r2
 8020c68:	d000      	beq.n	8020c6c <USB_EPStartXfer+0xecc>
 8020c6a:	e1a0      	b.n	8020fae <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8020c6c:	687a      	ldr	r2, [r7, #4]
 8020c6e:	683b      	ldr	r3, [r7, #0]
 8020c70:	781b      	ldrb	r3, [r3, #0]
 8020c72:	009b      	lsls	r3, r3, #2
 8020c74:	18d3      	adds	r3, r2, r3
 8020c76:	881b      	ldrh	r3, [r3, #0]
 8020c78:	b29a      	uxth	r2, r3
 8020c7a:	2094      	movs	r0, #148	@ 0x94
 8020c7c:	183b      	adds	r3, r7, r0
 8020c7e:	49b5      	ldr	r1, [pc, #724]	@ (8020f54 <USB_EPStartXfer+0x11b4>)
 8020c80:	400a      	ands	r2, r1
 8020c82:	801a      	strh	r2, [r3, #0]
 8020c84:	687a      	ldr	r2, [r7, #4]
 8020c86:	683b      	ldr	r3, [r7, #0]
 8020c88:	781b      	ldrb	r3, [r3, #0]
 8020c8a:	009b      	lsls	r3, r3, #2
 8020c8c:	18d3      	adds	r3, r2, r3
 8020c8e:	183a      	adds	r2, r7, r0
 8020c90:	8812      	ldrh	r2, [r2, #0]
 8020c92:	49b1      	ldr	r1, [pc, #708]	@ (8020f58 <USB_EPStartXfer+0x11b8>)
 8020c94:	430a      	orrs	r2, r1
 8020c96:	b292      	uxth	r2, r2
 8020c98:	801a      	strh	r2, [r3, #0]
 8020c9a:	e188      	b.n	8020fae <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8020c9c:	683b      	ldr	r3, [r7, #0]
 8020c9e:	78db      	ldrb	r3, [r3, #3]
 8020ca0:	2b01      	cmp	r3, #1
 8020ca2:	d000      	beq.n	8020ca6 <USB_EPStartXfer+0xf06>
 8020ca4:	e181      	b.n	8020faa <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8020ca6:	683b      	ldr	r3, [r7, #0]
 8020ca8:	699a      	ldr	r2, [r3, #24]
 8020caa:	683b      	ldr	r3, [r7, #0]
 8020cac:	691b      	ldr	r3, [r3, #16]
 8020cae:	429a      	cmp	r2, r3
 8020cb0:	d90d      	bls.n	8020cce <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8020cb2:	683b      	ldr	r3, [r7, #0]
 8020cb4:	691b      	ldr	r3, [r3, #16]
 8020cb6:	1d7a      	adds	r2, r7, #5
 8020cb8:	32ff      	adds	r2, #255	@ 0xff
 8020cba:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8020cbc:	683b      	ldr	r3, [r7, #0]
 8020cbe:	699a      	ldr	r2, [r3, #24]
 8020cc0:	1d7b      	adds	r3, r7, #5
 8020cc2:	33ff      	adds	r3, #255	@ 0xff
 8020cc4:	681b      	ldr	r3, [r3, #0]
 8020cc6:	1ad2      	subs	r2, r2, r3
 8020cc8:	683b      	ldr	r3, [r7, #0]
 8020cca:	619a      	str	r2, [r3, #24]
 8020ccc:	e007      	b.n	8020cde <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8020cce:	683b      	ldr	r3, [r7, #0]
 8020cd0:	699b      	ldr	r3, [r3, #24]
 8020cd2:	1d7a      	adds	r2, r7, #5
 8020cd4:	32ff      	adds	r2, #255	@ 0xff
 8020cd6:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8020cd8:	683b      	ldr	r3, [r7, #0]
 8020cda:	2200      	movs	r2, #0
 8020cdc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8020cde:	683b      	ldr	r3, [r7, #0]
 8020ce0:	785b      	ldrb	r3, [r3, #1]
 8020ce2:	2b00      	cmp	r3, #0
 8020ce4:	d000      	beq.n	8020ce8 <USB_EPStartXfer+0xf48>
 8020ce6:	e082      	b.n	8020dee <USB_EPStartXfer+0x104e>
 8020ce8:	687b      	ldr	r3, [r7, #4]
 8020cea:	21cc      	movs	r1, #204	@ 0xcc
 8020cec:	187a      	adds	r2, r7, r1
 8020cee:	6013      	str	r3, [r2, #0]
 8020cf0:	687b      	ldr	r3, [r7, #4]
 8020cf2:	2250      	movs	r2, #80	@ 0x50
 8020cf4:	5a9b      	ldrh	r3, [r3, r2]
 8020cf6:	b29b      	uxth	r3, r3
 8020cf8:	001a      	movs	r2, r3
 8020cfa:	187b      	adds	r3, r7, r1
 8020cfc:	681b      	ldr	r3, [r3, #0]
 8020cfe:	189b      	adds	r3, r3, r2
 8020d00:	187a      	adds	r2, r7, r1
 8020d02:	6013      	str	r3, [r2, #0]
 8020d04:	683b      	ldr	r3, [r7, #0]
 8020d06:	781b      	ldrb	r3, [r3, #0]
 8020d08:	00da      	lsls	r2, r3, #3
 8020d0a:	187b      	adds	r3, r7, r1
 8020d0c:	681b      	ldr	r3, [r3, #0]
 8020d0e:	18d3      	adds	r3, r2, r3
 8020d10:	4a92      	ldr	r2, [pc, #584]	@ (8020f5c <USB_EPStartXfer+0x11bc>)
 8020d12:	4694      	mov	ip, r2
 8020d14:	4463      	add	r3, ip
 8020d16:	21c8      	movs	r1, #200	@ 0xc8
 8020d18:	187a      	adds	r2, r7, r1
 8020d1a:	6013      	str	r3, [r2, #0]
 8020d1c:	187b      	adds	r3, r7, r1
 8020d1e:	681b      	ldr	r3, [r3, #0]
 8020d20:	881b      	ldrh	r3, [r3, #0]
 8020d22:	b29b      	uxth	r3, r3
 8020d24:	059b      	lsls	r3, r3, #22
 8020d26:	0d9b      	lsrs	r3, r3, #22
 8020d28:	b29a      	uxth	r2, r3
 8020d2a:	187b      	adds	r3, r7, r1
 8020d2c:	681b      	ldr	r3, [r3, #0]
 8020d2e:	801a      	strh	r2, [r3, #0]
 8020d30:	1d7b      	adds	r3, r7, #5
 8020d32:	33ff      	adds	r3, #255	@ 0xff
 8020d34:	681b      	ldr	r3, [r3, #0]
 8020d36:	2b3e      	cmp	r3, #62	@ 0x3e
 8020d38:	d925      	bls.n	8020d86 <USB_EPStartXfer+0xfe6>
 8020d3a:	1d7b      	adds	r3, r7, #5
 8020d3c:	33ff      	adds	r3, #255	@ 0xff
 8020d3e:	681b      	ldr	r3, [r3, #0]
 8020d40:	095b      	lsrs	r3, r3, #5
 8020d42:	21dc      	movs	r1, #220	@ 0xdc
 8020d44:	187a      	adds	r2, r7, r1
 8020d46:	6013      	str	r3, [r2, #0]
 8020d48:	1d7b      	adds	r3, r7, #5
 8020d4a:	33ff      	adds	r3, #255	@ 0xff
 8020d4c:	681b      	ldr	r3, [r3, #0]
 8020d4e:	221f      	movs	r2, #31
 8020d50:	4013      	ands	r3, r2
 8020d52:	d104      	bne.n	8020d5e <USB_EPStartXfer+0xfbe>
 8020d54:	187b      	adds	r3, r7, r1
 8020d56:	681b      	ldr	r3, [r3, #0]
 8020d58:	3b01      	subs	r3, #1
 8020d5a:	187a      	adds	r2, r7, r1
 8020d5c:	6013      	str	r3, [r2, #0]
 8020d5e:	21c8      	movs	r1, #200	@ 0xc8
 8020d60:	187b      	adds	r3, r7, r1
 8020d62:	681b      	ldr	r3, [r3, #0]
 8020d64:	881b      	ldrh	r3, [r3, #0]
 8020d66:	b29a      	uxth	r2, r3
 8020d68:	23dc      	movs	r3, #220	@ 0xdc
 8020d6a:	18fb      	adds	r3, r7, r3
 8020d6c:	681b      	ldr	r3, [r3, #0]
 8020d6e:	b29b      	uxth	r3, r3
 8020d70:	029b      	lsls	r3, r3, #10
 8020d72:	b29b      	uxth	r3, r3
 8020d74:	4313      	orrs	r3, r2
 8020d76:	b29b      	uxth	r3, r3
 8020d78:	4a79      	ldr	r2, [pc, #484]	@ (8020f60 <USB_EPStartXfer+0x11c0>)
 8020d7a:	4313      	orrs	r3, r2
 8020d7c:	b29a      	uxth	r2, r3
 8020d7e:	187b      	adds	r3, r7, r1
 8020d80:	681b      	ldr	r3, [r3, #0]
 8020d82:	801a      	strh	r2, [r3, #0]
 8020d84:	e058      	b.n	8020e38 <USB_EPStartXfer+0x1098>
 8020d86:	1d7b      	adds	r3, r7, #5
 8020d88:	33ff      	adds	r3, #255	@ 0xff
 8020d8a:	681b      	ldr	r3, [r3, #0]
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d10b      	bne.n	8020da8 <USB_EPStartXfer+0x1008>
 8020d90:	21c8      	movs	r1, #200	@ 0xc8
 8020d92:	187b      	adds	r3, r7, r1
 8020d94:	681b      	ldr	r3, [r3, #0]
 8020d96:	881b      	ldrh	r3, [r3, #0]
 8020d98:	b29b      	uxth	r3, r3
 8020d9a:	4a71      	ldr	r2, [pc, #452]	@ (8020f60 <USB_EPStartXfer+0x11c0>)
 8020d9c:	4313      	orrs	r3, r2
 8020d9e:	b29a      	uxth	r2, r3
 8020da0:	187b      	adds	r3, r7, r1
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	801a      	strh	r2, [r3, #0]
 8020da6:	e047      	b.n	8020e38 <USB_EPStartXfer+0x1098>
 8020da8:	1d7b      	adds	r3, r7, #5
 8020daa:	33ff      	adds	r3, #255	@ 0xff
 8020dac:	681b      	ldr	r3, [r3, #0]
 8020dae:	085b      	lsrs	r3, r3, #1
 8020db0:	21dc      	movs	r1, #220	@ 0xdc
 8020db2:	187a      	adds	r2, r7, r1
 8020db4:	6013      	str	r3, [r2, #0]
 8020db6:	1d7b      	adds	r3, r7, #5
 8020db8:	33ff      	adds	r3, #255	@ 0xff
 8020dba:	681b      	ldr	r3, [r3, #0]
 8020dbc:	2201      	movs	r2, #1
 8020dbe:	4013      	ands	r3, r2
 8020dc0:	d004      	beq.n	8020dcc <USB_EPStartXfer+0x102c>
 8020dc2:	187b      	adds	r3, r7, r1
 8020dc4:	681b      	ldr	r3, [r3, #0]
 8020dc6:	3301      	adds	r3, #1
 8020dc8:	187a      	adds	r2, r7, r1
 8020dca:	6013      	str	r3, [r2, #0]
 8020dcc:	21c8      	movs	r1, #200	@ 0xc8
 8020dce:	187b      	adds	r3, r7, r1
 8020dd0:	681b      	ldr	r3, [r3, #0]
 8020dd2:	881b      	ldrh	r3, [r3, #0]
 8020dd4:	b29a      	uxth	r2, r3
 8020dd6:	23dc      	movs	r3, #220	@ 0xdc
 8020dd8:	18fb      	adds	r3, r7, r3
 8020dda:	681b      	ldr	r3, [r3, #0]
 8020ddc:	b29b      	uxth	r3, r3
 8020dde:	029b      	lsls	r3, r3, #10
 8020de0:	b29b      	uxth	r3, r3
 8020de2:	4313      	orrs	r3, r2
 8020de4:	b29a      	uxth	r2, r3
 8020de6:	187b      	adds	r3, r7, r1
 8020de8:	681b      	ldr	r3, [r3, #0]
 8020dea:	801a      	strh	r2, [r3, #0]
 8020dec:	e024      	b.n	8020e38 <USB_EPStartXfer+0x1098>
 8020dee:	683b      	ldr	r3, [r7, #0]
 8020df0:	785b      	ldrb	r3, [r3, #1]
 8020df2:	2b01      	cmp	r3, #1
 8020df4:	d120      	bne.n	8020e38 <USB_EPStartXfer+0x1098>
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	21d4      	movs	r1, #212	@ 0xd4
 8020dfa:	187a      	adds	r2, r7, r1
 8020dfc:	6013      	str	r3, [r2, #0]
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	2250      	movs	r2, #80	@ 0x50
 8020e02:	5a9b      	ldrh	r3, [r3, r2]
 8020e04:	b29b      	uxth	r3, r3
 8020e06:	001a      	movs	r2, r3
 8020e08:	187b      	adds	r3, r7, r1
 8020e0a:	681b      	ldr	r3, [r3, #0]
 8020e0c:	189b      	adds	r3, r3, r2
 8020e0e:	187a      	adds	r2, r7, r1
 8020e10:	6013      	str	r3, [r2, #0]
 8020e12:	683b      	ldr	r3, [r7, #0]
 8020e14:	781b      	ldrb	r3, [r3, #0]
 8020e16:	00da      	lsls	r2, r3, #3
 8020e18:	187b      	adds	r3, r7, r1
 8020e1a:	681b      	ldr	r3, [r3, #0]
 8020e1c:	18d3      	adds	r3, r2, r3
 8020e1e:	4a4f      	ldr	r2, [pc, #316]	@ (8020f5c <USB_EPStartXfer+0x11bc>)
 8020e20:	4694      	mov	ip, r2
 8020e22:	4463      	add	r3, ip
 8020e24:	21d0      	movs	r1, #208	@ 0xd0
 8020e26:	187a      	adds	r2, r7, r1
 8020e28:	6013      	str	r3, [r2, #0]
 8020e2a:	1d7b      	adds	r3, r7, #5
 8020e2c:	33ff      	adds	r3, #255	@ 0xff
 8020e2e:	681b      	ldr	r3, [r3, #0]
 8020e30:	b29a      	uxth	r2, r3
 8020e32:	187b      	adds	r3, r7, r1
 8020e34:	681b      	ldr	r3, [r3, #0]
 8020e36:	801a      	strh	r2, [r3, #0]
 8020e38:	687b      	ldr	r3, [r7, #4]
 8020e3a:	22c4      	movs	r2, #196	@ 0xc4
 8020e3c:	18ba      	adds	r2, r7, r2
 8020e3e:	6013      	str	r3, [r2, #0]
 8020e40:	683b      	ldr	r3, [r7, #0]
 8020e42:	785b      	ldrb	r3, [r3, #1]
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	d000      	beq.n	8020e4a <USB_EPStartXfer+0x10aa>
 8020e48:	e08c      	b.n	8020f64 <USB_EPStartXfer+0x11c4>
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	21bc      	movs	r1, #188	@ 0xbc
 8020e4e:	187a      	adds	r2, r7, r1
 8020e50:	6013      	str	r3, [r2, #0]
 8020e52:	687b      	ldr	r3, [r7, #4]
 8020e54:	2250      	movs	r2, #80	@ 0x50
 8020e56:	5a9b      	ldrh	r3, [r3, r2]
 8020e58:	b29b      	uxth	r3, r3
 8020e5a:	001a      	movs	r2, r3
 8020e5c:	187b      	adds	r3, r7, r1
 8020e5e:	681b      	ldr	r3, [r3, #0]
 8020e60:	189b      	adds	r3, r3, r2
 8020e62:	187a      	adds	r2, r7, r1
 8020e64:	6013      	str	r3, [r2, #0]
 8020e66:	683b      	ldr	r3, [r7, #0]
 8020e68:	781b      	ldrb	r3, [r3, #0]
 8020e6a:	00da      	lsls	r2, r3, #3
 8020e6c:	187b      	adds	r3, r7, r1
 8020e6e:	681b      	ldr	r3, [r3, #0]
 8020e70:	18d3      	adds	r3, r2, r3
 8020e72:	4a37      	ldr	r2, [pc, #220]	@ (8020f50 <USB_EPStartXfer+0x11b0>)
 8020e74:	4694      	mov	ip, r2
 8020e76:	4463      	add	r3, ip
 8020e78:	21b8      	movs	r1, #184	@ 0xb8
 8020e7a:	187a      	adds	r2, r7, r1
 8020e7c:	6013      	str	r3, [r2, #0]
 8020e7e:	187b      	adds	r3, r7, r1
 8020e80:	681b      	ldr	r3, [r3, #0]
 8020e82:	881b      	ldrh	r3, [r3, #0]
 8020e84:	b29b      	uxth	r3, r3
 8020e86:	059b      	lsls	r3, r3, #22
 8020e88:	0d9b      	lsrs	r3, r3, #22
 8020e8a:	b29a      	uxth	r2, r3
 8020e8c:	187b      	adds	r3, r7, r1
 8020e8e:	681b      	ldr	r3, [r3, #0]
 8020e90:	801a      	strh	r2, [r3, #0]
 8020e92:	1d7b      	adds	r3, r7, #5
 8020e94:	33ff      	adds	r3, #255	@ 0xff
 8020e96:	681b      	ldr	r3, [r3, #0]
 8020e98:	2b3e      	cmp	r3, #62	@ 0x3e
 8020e9a:	d925      	bls.n	8020ee8 <USB_EPStartXfer+0x1148>
 8020e9c:	1d7b      	adds	r3, r7, #5
 8020e9e:	33ff      	adds	r3, #255	@ 0xff
 8020ea0:	681b      	ldr	r3, [r3, #0]
 8020ea2:	095b      	lsrs	r3, r3, #5
 8020ea4:	21d8      	movs	r1, #216	@ 0xd8
 8020ea6:	187a      	adds	r2, r7, r1
 8020ea8:	6013      	str	r3, [r2, #0]
 8020eaa:	1d7b      	adds	r3, r7, #5
 8020eac:	33ff      	adds	r3, #255	@ 0xff
 8020eae:	681b      	ldr	r3, [r3, #0]
 8020eb0:	221f      	movs	r2, #31
 8020eb2:	4013      	ands	r3, r2
 8020eb4:	d104      	bne.n	8020ec0 <USB_EPStartXfer+0x1120>
 8020eb6:	187b      	adds	r3, r7, r1
 8020eb8:	681b      	ldr	r3, [r3, #0]
 8020eba:	3b01      	subs	r3, #1
 8020ebc:	187a      	adds	r2, r7, r1
 8020ebe:	6013      	str	r3, [r2, #0]
 8020ec0:	21b8      	movs	r1, #184	@ 0xb8
 8020ec2:	187b      	adds	r3, r7, r1
 8020ec4:	681b      	ldr	r3, [r3, #0]
 8020ec6:	881b      	ldrh	r3, [r3, #0]
 8020ec8:	b29a      	uxth	r2, r3
 8020eca:	23d8      	movs	r3, #216	@ 0xd8
 8020ecc:	18fb      	adds	r3, r7, r3
 8020ece:	681b      	ldr	r3, [r3, #0]
 8020ed0:	b29b      	uxth	r3, r3
 8020ed2:	029b      	lsls	r3, r3, #10
 8020ed4:	b29b      	uxth	r3, r3
 8020ed6:	4313      	orrs	r3, r2
 8020ed8:	b29b      	uxth	r3, r3
 8020eda:	4a21      	ldr	r2, [pc, #132]	@ (8020f60 <USB_EPStartXfer+0x11c0>)
 8020edc:	4313      	orrs	r3, r2
 8020ede:	b29a      	uxth	r2, r3
 8020ee0:	187b      	adds	r3, r7, r1
 8020ee2:	681b      	ldr	r3, [r3, #0]
 8020ee4:	801a      	strh	r2, [r3, #0]
 8020ee6:	e062      	b.n	8020fae <USB_EPStartXfer+0x120e>
 8020ee8:	1d7b      	adds	r3, r7, #5
 8020eea:	33ff      	adds	r3, #255	@ 0xff
 8020eec:	681b      	ldr	r3, [r3, #0]
 8020eee:	2b00      	cmp	r3, #0
 8020ef0:	d10b      	bne.n	8020f0a <USB_EPStartXfer+0x116a>
 8020ef2:	21b8      	movs	r1, #184	@ 0xb8
 8020ef4:	187b      	adds	r3, r7, r1
 8020ef6:	681b      	ldr	r3, [r3, #0]
 8020ef8:	881b      	ldrh	r3, [r3, #0]
 8020efa:	b29b      	uxth	r3, r3
 8020efc:	4a18      	ldr	r2, [pc, #96]	@ (8020f60 <USB_EPStartXfer+0x11c0>)
 8020efe:	4313      	orrs	r3, r2
 8020f00:	b29a      	uxth	r2, r3
 8020f02:	187b      	adds	r3, r7, r1
 8020f04:	681b      	ldr	r3, [r3, #0]
 8020f06:	801a      	strh	r2, [r3, #0]
 8020f08:	e051      	b.n	8020fae <USB_EPStartXfer+0x120e>
 8020f0a:	1d7b      	adds	r3, r7, #5
 8020f0c:	33ff      	adds	r3, #255	@ 0xff
 8020f0e:	681b      	ldr	r3, [r3, #0]
 8020f10:	085b      	lsrs	r3, r3, #1
 8020f12:	21d8      	movs	r1, #216	@ 0xd8
 8020f14:	187a      	adds	r2, r7, r1
 8020f16:	6013      	str	r3, [r2, #0]
 8020f18:	1d7b      	adds	r3, r7, #5
 8020f1a:	33ff      	adds	r3, #255	@ 0xff
 8020f1c:	681b      	ldr	r3, [r3, #0]
 8020f1e:	2201      	movs	r2, #1
 8020f20:	4013      	ands	r3, r2
 8020f22:	d004      	beq.n	8020f2e <USB_EPStartXfer+0x118e>
 8020f24:	187b      	adds	r3, r7, r1
 8020f26:	681b      	ldr	r3, [r3, #0]
 8020f28:	3301      	adds	r3, #1
 8020f2a:	187a      	adds	r2, r7, r1
 8020f2c:	6013      	str	r3, [r2, #0]
 8020f2e:	21b8      	movs	r1, #184	@ 0xb8
 8020f30:	187b      	adds	r3, r7, r1
 8020f32:	681b      	ldr	r3, [r3, #0]
 8020f34:	881b      	ldrh	r3, [r3, #0]
 8020f36:	b29a      	uxth	r2, r3
 8020f38:	23d8      	movs	r3, #216	@ 0xd8
 8020f3a:	18fb      	adds	r3, r7, r3
 8020f3c:	681b      	ldr	r3, [r3, #0]
 8020f3e:	b29b      	uxth	r3, r3
 8020f40:	029b      	lsls	r3, r3, #10
 8020f42:	b29b      	uxth	r3, r3
 8020f44:	4313      	orrs	r3, r2
 8020f46:	b29a      	uxth	r2, r3
 8020f48:	187b      	adds	r3, r7, r1
 8020f4a:	681b      	ldr	r3, [r3, #0]
 8020f4c:	801a      	strh	r2, [r3, #0]
 8020f4e:	e02e      	b.n	8020fae <USB_EPStartXfer+0x120e>
 8020f50:	00000406 	.word	0x00000406
 8020f54:	ffff8f8f 	.word	0xffff8f8f
 8020f58:	ffff80c0 	.word	0xffff80c0
 8020f5c:	00000402 	.word	0x00000402
 8020f60:	ffff8000 	.word	0xffff8000
 8020f64:	683b      	ldr	r3, [r7, #0]
 8020f66:	785b      	ldrb	r3, [r3, #1]
 8020f68:	2b01      	cmp	r3, #1
 8020f6a:	d120      	bne.n	8020fae <USB_EPStartXfer+0x120e>
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	2250      	movs	r2, #80	@ 0x50
 8020f70:	5a9b      	ldrh	r3, [r3, r2]
 8020f72:	b29b      	uxth	r3, r3
 8020f74:	001a      	movs	r2, r3
 8020f76:	21c4      	movs	r1, #196	@ 0xc4
 8020f78:	187b      	adds	r3, r7, r1
 8020f7a:	681b      	ldr	r3, [r3, #0]
 8020f7c:	189b      	adds	r3, r3, r2
 8020f7e:	187a      	adds	r2, r7, r1
 8020f80:	6013      	str	r3, [r2, #0]
 8020f82:	683b      	ldr	r3, [r7, #0]
 8020f84:	781b      	ldrb	r3, [r3, #0]
 8020f86:	00da      	lsls	r2, r3, #3
 8020f88:	187b      	adds	r3, r7, r1
 8020f8a:	681b      	ldr	r3, [r3, #0]
 8020f8c:	18d3      	adds	r3, r2, r3
 8020f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8021004 <USB_EPStartXfer+0x1264>)
 8020f90:	4694      	mov	ip, r2
 8020f92:	4463      	add	r3, ip
 8020f94:	21c0      	movs	r1, #192	@ 0xc0
 8020f96:	187a      	adds	r2, r7, r1
 8020f98:	6013      	str	r3, [r2, #0]
 8020f9a:	1d7b      	adds	r3, r7, #5
 8020f9c:	33ff      	adds	r3, #255	@ 0xff
 8020f9e:	681b      	ldr	r3, [r3, #0]
 8020fa0:	b29a      	uxth	r2, r3
 8020fa2:	187b      	adds	r3, r7, r1
 8020fa4:	681b      	ldr	r3, [r3, #0]
 8020fa6:	801a      	strh	r2, [r3, #0]
 8020fa8:	e001      	b.n	8020fae <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8020faa:	2301      	movs	r3, #1
 8020fac:	e025      	b.n	8020ffa <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8020fae:	687a      	ldr	r2, [r7, #4]
 8020fb0:	683b      	ldr	r3, [r7, #0]
 8020fb2:	781b      	ldrb	r3, [r3, #0]
 8020fb4:	009b      	lsls	r3, r3, #2
 8020fb6:	18d3      	adds	r3, r2, r3
 8020fb8:	881b      	ldrh	r3, [r3, #0]
 8020fba:	b29a      	uxth	r2, r3
 8020fbc:	208a      	movs	r0, #138	@ 0x8a
 8020fbe:	183b      	adds	r3, r7, r0
 8020fc0:	4911      	ldr	r1, [pc, #68]	@ (8021008 <USB_EPStartXfer+0x1268>)
 8020fc2:	400a      	ands	r2, r1
 8020fc4:	801a      	strh	r2, [r3, #0]
 8020fc6:	183b      	adds	r3, r7, r0
 8020fc8:	183a      	adds	r2, r7, r0
 8020fca:	8812      	ldrh	r2, [r2, #0]
 8020fcc:	2180      	movs	r1, #128	@ 0x80
 8020fce:	0149      	lsls	r1, r1, #5
 8020fd0:	404a      	eors	r2, r1
 8020fd2:	801a      	strh	r2, [r3, #0]
 8020fd4:	183b      	adds	r3, r7, r0
 8020fd6:	183a      	adds	r2, r7, r0
 8020fd8:	8812      	ldrh	r2, [r2, #0]
 8020fda:	2180      	movs	r1, #128	@ 0x80
 8020fdc:	0189      	lsls	r1, r1, #6
 8020fde:	404a      	eors	r2, r1
 8020fe0:	801a      	strh	r2, [r3, #0]
 8020fe2:	687a      	ldr	r2, [r7, #4]
 8020fe4:	683b      	ldr	r3, [r7, #0]
 8020fe6:	781b      	ldrb	r3, [r3, #0]
 8020fe8:	009b      	lsls	r3, r3, #2
 8020fea:	18d3      	adds	r3, r2, r3
 8020fec:	183a      	adds	r2, r7, r0
 8020fee:	8812      	ldrh	r2, [r2, #0]
 8020ff0:	4906      	ldr	r1, [pc, #24]	@ (802100c <USB_EPStartXfer+0x126c>)
 8020ff2:	430a      	orrs	r2, r1
 8020ff4:	b292      	uxth	r2, r2
 8020ff6:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8020ff8:	2300      	movs	r3, #0
}
 8020ffa:	0018      	movs	r0, r3
 8020ffc:	46bd      	mov	sp, r7
 8020ffe:	b043      	add	sp, #268	@ 0x10c
 8021000:	bd90      	pop	{r4, r7, pc}
 8021002:	46c0      	nop			@ (mov r8, r8)
 8021004:	00000406 	.word	0x00000406
 8021008:	ffffbf8f 	.word	0xffffbf8f
 802100c:	ffff8080 	.word	0xffff8080

08021010 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8021010:	b580      	push	{r7, lr}
 8021012:	b084      	sub	sp, #16
 8021014:	af00      	add	r7, sp, #0
 8021016:	6078      	str	r0, [r7, #4]
 8021018:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 802101a:	683b      	ldr	r3, [r7, #0]
 802101c:	785b      	ldrb	r3, [r3, #1]
 802101e:	2b00      	cmp	r3, #0
 8021020:	d01d      	beq.n	802105e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8021022:	687a      	ldr	r2, [r7, #4]
 8021024:	683b      	ldr	r3, [r7, #0]
 8021026:	781b      	ldrb	r3, [r3, #0]
 8021028:	009b      	lsls	r3, r3, #2
 802102a:	18d3      	adds	r3, r2, r3
 802102c:	881b      	ldrh	r3, [r3, #0]
 802102e:	b29a      	uxth	r2, r3
 8021030:	200c      	movs	r0, #12
 8021032:	183b      	adds	r3, r7, r0
 8021034:	491b      	ldr	r1, [pc, #108]	@ (80210a4 <USB_EPSetStall+0x94>)
 8021036:	400a      	ands	r2, r1
 8021038:	801a      	strh	r2, [r3, #0]
 802103a:	183b      	adds	r3, r7, r0
 802103c:	183a      	adds	r2, r7, r0
 802103e:	8812      	ldrh	r2, [r2, #0]
 8021040:	2110      	movs	r1, #16
 8021042:	404a      	eors	r2, r1
 8021044:	801a      	strh	r2, [r3, #0]
 8021046:	687a      	ldr	r2, [r7, #4]
 8021048:	683b      	ldr	r3, [r7, #0]
 802104a:	781b      	ldrb	r3, [r3, #0]
 802104c:	009b      	lsls	r3, r3, #2
 802104e:	18d3      	adds	r3, r2, r3
 8021050:	183a      	adds	r2, r7, r0
 8021052:	8812      	ldrh	r2, [r2, #0]
 8021054:	4914      	ldr	r1, [pc, #80]	@ (80210a8 <USB_EPSetStall+0x98>)
 8021056:	430a      	orrs	r2, r1
 8021058:	b292      	uxth	r2, r2
 802105a:	801a      	strh	r2, [r3, #0]
 802105c:	e01d      	b.n	802109a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 802105e:	687a      	ldr	r2, [r7, #4]
 8021060:	683b      	ldr	r3, [r7, #0]
 8021062:	781b      	ldrb	r3, [r3, #0]
 8021064:	009b      	lsls	r3, r3, #2
 8021066:	18d3      	adds	r3, r2, r3
 8021068:	881b      	ldrh	r3, [r3, #0]
 802106a:	b29a      	uxth	r2, r3
 802106c:	200e      	movs	r0, #14
 802106e:	183b      	adds	r3, r7, r0
 8021070:	490e      	ldr	r1, [pc, #56]	@ (80210ac <USB_EPSetStall+0x9c>)
 8021072:	400a      	ands	r2, r1
 8021074:	801a      	strh	r2, [r3, #0]
 8021076:	183b      	adds	r3, r7, r0
 8021078:	183a      	adds	r2, r7, r0
 802107a:	8812      	ldrh	r2, [r2, #0]
 802107c:	2180      	movs	r1, #128	@ 0x80
 802107e:	0149      	lsls	r1, r1, #5
 8021080:	404a      	eors	r2, r1
 8021082:	801a      	strh	r2, [r3, #0]
 8021084:	687a      	ldr	r2, [r7, #4]
 8021086:	683b      	ldr	r3, [r7, #0]
 8021088:	781b      	ldrb	r3, [r3, #0]
 802108a:	009b      	lsls	r3, r3, #2
 802108c:	18d3      	adds	r3, r2, r3
 802108e:	183a      	adds	r2, r7, r0
 8021090:	8812      	ldrh	r2, [r2, #0]
 8021092:	4905      	ldr	r1, [pc, #20]	@ (80210a8 <USB_EPSetStall+0x98>)
 8021094:	430a      	orrs	r2, r1
 8021096:	b292      	uxth	r2, r2
 8021098:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 802109a:	2300      	movs	r3, #0
}
 802109c:	0018      	movs	r0, r3
 802109e:	46bd      	mov	sp, r7
 80210a0:	b004      	add	sp, #16
 80210a2:	bd80      	pop	{r7, pc}
 80210a4:	ffff8fbf 	.word	0xffff8fbf
 80210a8:	ffff8080 	.word	0xffff8080
 80210ac:	ffffbf8f 	.word	0xffffbf8f

080210b0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80210b0:	b580      	push	{r7, lr}
 80210b2:	b086      	sub	sp, #24
 80210b4:	af00      	add	r7, sp, #0
 80210b6:	6078      	str	r0, [r7, #4]
 80210b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80210ba:	683b      	ldr	r3, [r7, #0]
 80210bc:	7b1b      	ldrb	r3, [r3, #12]
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d000      	beq.n	80210c4 <USB_EPClearStall+0x14>
 80210c2:	e095      	b.n	80211f0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80210c4:	683b      	ldr	r3, [r7, #0]
 80210c6:	785b      	ldrb	r3, [r3, #1]
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	d046      	beq.n	802115a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80210cc:	687a      	ldr	r2, [r7, #4]
 80210ce:	683b      	ldr	r3, [r7, #0]
 80210d0:	781b      	ldrb	r3, [r3, #0]
 80210d2:	009b      	lsls	r3, r3, #2
 80210d4:	18d2      	adds	r2, r2, r3
 80210d6:	2110      	movs	r1, #16
 80210d8:	187b      	adds	r3, r7, r1
 80210da:	8812      	ldrh	r2, [r2, #0]
 80210dc:	801a      	strh	r2, [r3, #0]
 80210de:	187b      	adds	r3, r7, r1
 80210e0:	881b      	ldrh	r3, [r3, #0]
 80210e2:	2240      	movs	r2, #64	@ 0x40
 80210e4:	4013      	ands	r3, r2
 80210e6:	d016      	beq.n	8021116 <USB_EPClearStall+0x66>
 80210e8:	687a      	ldr	r2, [r7, #4]
 80210ea:	683b      	ldr	r3, [r7, #0]
 80210ec:	781b      	ldrb	r3, [r3, #0]
 80210ee:	009b      	lsls	r3, r3, #2
 80210f0:	18d3      	adds	r3, r2, r3
 80210f2:	881b      	ldrh	r3, [r3, #0]
 80210f4:	b29a      	uxth	r2, r3
 80210f6:	200e      	movs	r0, #14
 80210f8:	183b      	adds	r3, r7, r0
 80210fa:	4940      	ldr	r1, [pc, #256]	@ (80211fc <USB_EPClearStall+0x14c>)
 80210fc:	400a      	ands	r2, r1
 80210fe:	801a      	strh	r2, [r3, #0]
 8021100:	687a      	ldr	r2, [r7, #4]
 8021102:	683b      	ldr	r3, [r7, #0]
 8021104:	781b      	ldrb	r3, [r3, #0]
 8021106:	009b      	lsls	r3, r3, #2
 8021108:	18d3      	adds	r3, r2, r3
 802110a:	183a      	adds	r2, r7, r0
 802110c:	8812      	ldrh	r2, [r2, #0]
 802110e:	493c      	ldr	r1, [pc, #240]	@ (8021200 <USB_EPClearStall+0x150>)
 8021110:	430a      	orrs	r2, r1
 8021112:	b292      	uxth	r2, r2
 8021114:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8021116:	683b      	ldr	r3, [r7, #0]
 8021118:	78db      	ldrb	r3, [r3, #3]
 802111a:	2b01      	cmp	r3, #1
 802111c:	d068      	beq.n	80211f0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 802111e:	687a      	ldr	r2, [r7, #4]
 8021120:	683b      	ldr	r3, [r7, #0]
 8021122:	781b      	ldrb	r3, [r3, #0]
 8021124:	009b      	lsls	r3, r3, #2
 8021126:	18d3      	adds	r3, r2, r3
 8021128:	881b      	ldrh	r3, [r3, #0]
 802112a:	b29a      	uxth	r2, r3
 802112c:	200c      	movs	r0, #12
 802112e:	183b      	adds	r3, r7, r0
 8021130:	4934      	ldr	r1, [pc, #208]	@ (8021204 <USB_EPClearStall+0x154>)
 8021132:	400a      	ands	r2, r1
 8021134:	801a      	strh	r2, [r3, #0]
 8021136:	183b      	adds	r3, r7, r0
 8021138:	183a      	adds	r2, r7, r0
 802113a:	8812      	ldrh	r2, [r2, #0]
 802113c:	2120      	movs	r1, #32
 802113e:	404a      	eors	r2, r1
 8021140:	801a      	strh	r2, [r3, #0]
 8021142:	687a      	ldr	r2, [r7, #4]
 8021144:	683b      	ldr	r3, [r7, #0]
 8021146:	781b      	ldrb	r3, [r3, #0]
 8021148:	009b      	lsls	r3, r3, #2
 802114a:	18d3      	adds	r3, r2, r3
 802114c:	183a      	adds	r2, r7, r0
 802114e:	8812      	ldrh	r2, [r2, #0]
 8021150:	492d      	ldr	r1, [pc, #180]	@ (8021208 <USB_EPClearStall+0x158>)
 8021152:	430a      	orrs	r2, r1
 8021154:	b292      	uxth	r2, r2
 8021156:	801a      	strh	r2, [r3, #0]
 8021158:	e04a      	b.n	80211f0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 802115a:	687a      	ldr	r2, [r7, #4]
 802115c:	683b      	ldr	r3, [r7, #0]
 802115e:	781b      	ldrb	r3, [r3, #0]
 8021160:	009b      	lsls	r3, r3, #2
 8021162:	18d2      	adds	r2, r2, r3
 8021164:	2116      	movs	r1, #22
 8021166:	187b      	adds	r3, r7, r1
 8021168:	8812      	ldrh	r2, [r2, #0]
 802116a:	801a      	strh	r2, [r3, #0]
 802116c:	187b      	adds	r3, r7, r1
 802116e:	881a      	ldrh	r2, [r3, #0]
 8021170:	2380      	movs	r3, #128	@ 0x80
 8021172:	01db      	lsls	r3, r3, #7
 8021174:	4013      	ands	r3, r2
 8021176:	d016      	beq.n	80211a6 <USB_EPClearStall+0xf6>
 8021178:	687a      	ldr	r2, [r7, #4]
 802117a:	683b      	ldr	r3, [r7, #0]
 802117c:	781b      	ldrb	r3, [r3, #0]
 802117e:	009b      	lsls	r3, r3, #2
 8021180:	18d3      	adds	r3, r2, r3
 8021182:	881b      	ldrh	r3, [r3, #0]
 8021184:	b29a      	uxth	r2, r3
 8021186:	2014      	movs	r0, #20
 8021188:	183b      	adds	r3, r7, r0
 802118a:	491c      	ldr	r1, [pc, #112]	@ (80211fc <USB_EPClearStall+0x14c>)
 802118c:	400a      	ands	r2, r1
 802118e:	801a      	strh	r2, [r3, #0]
 8021190:	687a      	ldr	r2, [r7, #4]
 8021192:	683b      	ldr	r3, [r7, #0]
 8021194:	781b      	ldrb	r3, [r3, #0]
 8021196:	009b      	lsls	r3, r3, #2
 8021198:	18d3      	adds	r3, r2, r3
 802119a:	183a      	adds	r2, r7, r0
 802119c:	8812      	ldrh	r2, [r2, #0]
 802119e:	491b      	ldr	r1, [pc, #108]	@ (802120c <USB_EPClearStall+0x15c>)
 80211a0:	430a      	orrs	r2, r1
 80211a2:	b292      	uxth	r2, r2
 80211a4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80211a6:	687a      	ldr	r2, [r7, #4]
 80211a8:	683b      	ldr	r3, [r7, #0]
 80211aa:	781b      	ldrb	r3, [r3, #0]
 80211ac:	009b      	lsls	r3, r3, #2
 80211ae:	18d3      	adds	r3, r2, r3
 80211b0:	881b      	ldrh	r3, [r3, #0]
 80211b2:	b29a      	uxth	r2, r3
 80211b4:	2012      	movs	r0, #18
 80211b6:	183b      	adds	r3, r7, r0
 80211b8:	4915      	ldr	r1, [pc, #84]	@ (8021210 <USB_EPClearStall+0x160>)
 80211ba:	400a      	ands	r2, r1
 80211bc:	801a      	strh	r2, [r3, #0]
 80211be:	183b      	adds	r3, r7, r0
 80211c0:	183a      	adds	r2, r7, r0
 80211c2:	8812      	ldrh	r2, [r2, #0]
 80211c4:	2180      	movs	r1, #128	@ 0x80
 80211c6:	0149      	lsls	r1, r1, #5
 80211c8:	404a      	eors	r2, r1
 80211ca:	801a      	strh	r2, [r3, #0]
 80211cc:	183b      	adds	r3, r7, r0
 80211ce:	183a      	adds	r2, r7, r0
 80211d0:	8812      	ldrh	r2, [r2, #0]
 80211d2:	2180      	movs	r1, #128	@ 0x80
 80211d4:	0189      	lsls	r1, r1, #6
 80211d6:	404a      	eors	r2, r1
 80211d8:	801a      	strh	r2, [r3, #0]
 80211da:	687a      	ldr	r2, [r7, #4]
 80211dc:	683b      	ldr	r3, [r7, #0]
 80211de:	781b      	ldrb	r3, [r3, #0]
 80211e0:	009b      	lsls	r3, r3, #2
 80211e2:	18d3      	adds	r3, r2, r3
 80211e4:	183a      	adds	r2, r7, r0
 80211e6:	8812      	ldrh	r2, [r2, #0]
 80211e8:	4907      	ldr	r1, [pc, #28]	@ (8021208 <USB_EPClearStall+0x158>)
 80211ea:	430a      	orrs	r2, r1
 80211ec:	b292      	uxth	r2, r2
 80211ee:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80211f0:	2300      	movs	r3, #0
}
 80211f2:	0018      	movs	r0, r3
 80211f4:	46bd      	mov	sp, r7
 80211f6:	b006      	add	sp, #24
 80211f8:	bd80      	pop	{r7, pc}
 80211fa:	46c0      	nop			@ (mov r8, r8)
 80211fc:	ffff8f8f 	.word	0xffff8f8f
 8021200:	ffff80c0 	.word	0xffff80c0
 8021204:	ffff8fbf 	.word	0xffff8fbf
 8021208:	ffff8080 	.word	0xffff8080
 802120c:	ffffc080 	.word	0xffffc080
 8021210:	ffffbf8f 	.word	0xffffbf8f

08021214 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8021214:	b580      	push	{r7, lr}
 8021216:	b082      	sub	sp, #8
 8021218:	af00      	add	r7, sp, #0
 802121a:	6078      	str	r0, [r7, #4]
 802121c:	000a      	movs	r2, r1
 802121e:	1cfb      	adds	r3, r7, #3
 8021220:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8021222:	1cfb      	adds	r3, r7, #3
 8021224:	781b      	ldrb	r3, [r3, #0]
 8021226:	2b00      	cmp	r3, #0
 8021228:	d103      	bne.n	8021232 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 802122a:	687b      	ldr	r3, [r7, #4]
 802122c:	224c      	movs	r2, #76	@ 0x4c
 802122e:	2180      	movs	r1, #128	@ 0x80
 8021230:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8021232:	2300      	movs	r3, #0
}
 8021234:	0018      	movs	r0, r3
 8021236:	46bd      	mov	sp, r7
 8021238:	b002      	add	sp, #8
 802123a:	bd80      	pop	{r7, pc}

0802123c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 802123c:	b580      	push	{r7, lr}
 802123e:	b082      	sub	sp, #8
 8021240:	af00      	add	r7, sp, #0
 8021242:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	2258      	movs	r2, #88	@ 0x58
 8021248:	5a9b      	ldrh	r3, [r3, r2]
 802124a:	b29b      	uxth	r3, r3
 802124c:	4a05      	ldr	r2, [pc, #20]	@ (8021264 <USB_DevConnect+0x28>)
 802124e:	4313      	orrs	r3, r2
 8021250:	b299      	uxth	r1, r3
 8021252:	687b      	ldr	r3, [r7, #4]
 8021254:	2258      	movs	r2, #88	@ 0x58
 8021256:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8021258:	2300      	movs	r3, #0
}
 802125a:	0018      	movs	r0, r3
 802125c:	46bd      	mov	sp, r7
 802125e:	b002      	add	sp, #8
 8021260:	bd80      	pop	{r7, pc}
 8021262:	46c0      	nop			@ (mov r8, r8)
 8021264:	ffff8000 	.word	0xffff8000

08021268 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8021268:	b580      	push	{r7, lr}
 802126a:	b084      	sub	sp, #16
 802126c:	af00      	add	r7, sp, #0
 802126e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8021270:	687b      	ldr	r3, [r7, #4]
 8021272:	2244      	movs	r2, #68	@ 0x44
 8021274:	5a9b      	ldrh	r3, [r3, r2]
 8021276:	b29b      	uxth	r3, r3
 8021278:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 802127a:	68fb      	ldr	r3, [r7, #12]
}
 802127c:	0018      	movs	r0, r3
 802127e:	46bd      	mov	sp, r7
 8021280:	b004      	add	sp, #16
 8021282:	bd80      	pop	{r7, pc}

08021284 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8021284:	b580      	push	{r7, lr}
 8021286:	b08a      	sub	sp, #40	@ 0x28
 8021288:	af00      	add	r7, sp, #0
 802128a:	60f8      	str	r0, [r7, #12]
 802128c:	60b9      	str	r1, [r7, #8]
 802128e:	0019      	movs	r1, r3
 8021290:	1dbb      	adds	r3, r7, #6
 8021292:	801a      	strh	r2, [r3, #0]
 8021294:	1d3b      	adds	r3, r7, #4
 8021296:	1c0a      	adds	r2, r1, #0
 8021298:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 802129a:	1d3b      	adds	r3, r7, #4
 802129c:	881b      	ldrh	r3, [r3, #0]
 802129e:	3301      	adds	r3, #1
 80212a0:	085b      	lsrs	r3, r3, #1
 80212a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80212a4:	68fb      	ldr	r3, [r7, #12]
 80212a6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80212a8:	68bb      	ldr	r3, [r7, #8]
 80212aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80212ac:	1dbb      	adds	r3, r7, #6
 80212ae:	881a      	ldrh	r2, [r3, #0]
 80212b0:	697b      	ldr	r3, [r7, #20]
 80212b2:	18d3      	adds	r3, r2, r3
 80212b4:	2280      	movs	r2, #128	@ 0x80
 80212b6:	00d2      	lsls	r2, r2, #3
 80212b8:	4694      	mov	ip, r2
 80212ba:	4463      	add	r3, ip
 80212bc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80212be:	69bb      	ldr	r3, [r7, #24]
 80212c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80212c2:	e021      	b.n	8021308 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 80212c4:	69fb      	ldr	r3, [r7, #28]
 80212c6:	781a      	ldrb	r2, [r3, #0]
 80212c8:	2112      	movs	r1, #18
 80212ca:	187b      	adds	r3, r7, r1
 80212cc:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80212ce:	69fb      	ldr	r3, [r7, #28]
 80212d0:	3301      	adds	r3, #1
 80212d2:	781b      	ldrb	r3, [r3, #0]
 80212d4:	b21b      	sxth	r3, r3
 80212d6:	021b      	lsls	r3, r3, #8
 80212d8:	b21a      	sxth	r2, r3
 80212da:	187b      	adds	r3, r7, r1
 80212dc:	2000      	movs	r0, #0
 80212de:	5e1b      	ldrsh	r3, [r3, r0]
 80212e0:	4313      	orrs	r3, r2
 80212e2:	b21a      	sxth	r2, r3
 80212e4:	187b      	adds	r3, r7, r1
 80212e6:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80212e8:	6a3b      	ldr	r3, [r7, #32]
 80212ea:	187a      	adds	r2, r7, r1
 80212ec:	8812      	ldrh	r2, [r2, #0]
 80212ee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80212f0:	6a3b      	ldr	r3, [r7, #32]
 80212f2:	3302      	adds	r3, #2
 80212f4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80212f6:	69fb      	ldr	r3, [r7, #28]
 80212f8:	3301      	adds	r3, #1
 80212fa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80212fc:	69fb      	ldr	r3, [r7, #28]
 80212fe:	3301      	adds	r3, #1
 8021300:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8021302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021304:	3b01      	subs	r3, #1
 8021306:	627b      	str	r3, [r7, #36]	@ 0x24
 8021308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802130a:	2b00      	cmp	r3, #0
 802130c:	d1da      	bne.n	80212c4 <USB_WritePMA+0x40>
  }
}
 802130e:	46c0      	nop			@ (mov r8, r8)
 8021310:	46c0      	nop			@ (mov r8, r8)
 8021312:	46bd      	mov	sp, r7
 8021314:	b00a      	add	sp, #40	@ 0x28
 8021316:	bd80      	pop	{r7, pc}

08021318 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8021318:	b580      	push	{r7, lr}
 802131a:	b08a      	sub	sp, #40	@ 0x28
 802131c:	af00      	add	r7, sp, #0
 802131e:	60f8      	str	r0, [r7, #12]
 8021320:	60b9      	str	r1, [r7, #8]
 8021322:	0019      	movs	r1, r3
 8021324:	1dbb      	adds	r3, r7, #6
 8021326:	801a      	strh	r2, [r3, #0]
 8021328:	1d3b      	adds	r3, r7, #4
 802132a:	1c0a      	adds	r2, r1, #0
 802132c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 802132e:	1d3b      	adds	r3, r7, #4
 8021330:	881b      	ldrh	r3, [r3, #0]
 8021332:	085b      	lsrs	r3, r3, #1
 8021334:	b29b      	uxth	r3, r3
 8021336:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8021338:	68fb      	ldr	r3, [r7, #12]
 802133a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 802133c:	68bb      	ldr	r3, [r7, #8]
 802133e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8021340:	1dbb      	adds	r3, r7, #6
 8021342:	881a      	ldrh	r2, [r3, #0]
 8021344:	697b      	ldr	r3, [r7, #20]
 8021346:	18d3      	adds	r3, r2, r3
 8021348:	2280      	movs	r2, #128	@ 0x80
 802134a:	00d2      	lsls	r2, r2, #3
 802134c:	4694      	mov	ip, r2
 802134e:	4463      	add	r3, ip
 8021350:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8021352:	69bb      	ldr	r3, [r7, #24]
 8021354:	627b      	str	r3, [r7, #36]	@ 0x24
 8021356:	e018      	b.n	802138a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8021358:	6a3b      	ldr	r3, [r7, #32]
 802135a:	881b      	ldrh	r3, [r3, #0]
 802135c:	b29b      	uxth	r3, r3
 802135e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8021360:	6a3b      	ldr	r3, [r7, #32]
 8021362:	3302      	adds	r3, #2
 8021364:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8021366:	693b      	ldr	r3, [r7, #16]
 8021368:	b2da      	uxtb	r2, r3
 802136a:	69fb      	ldr	r3, [r7, #28]
 802136c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 802136e:	69fb      	ldr	r3, [r7, #28]
 8021370:	3301      	adds	r3, #1
 8021372:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8021374:	693b      	ldr	r3, [r7, #16]
 8021376:	0a1b      	lsrs	r3, r3, #8
 8021378:	b2da      	uxtb	r2, r3
 802137a:	69fb      	ldr	r3, [r7, #28]
 802137c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 802137e:	69fb      	ldr	r3, [r7, #28]
 8021380:	3301      	adds	r3, #1
 8021382:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8021384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021386:	3b01      	subs	r3, #1
 8021388:	627b      	str	r3, [r7, #36]	@ 0x24
 802138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802138c:	2b00      	cmp	r3, #0
 802138e:	d1e3      	bne.n	8021358 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8021390:	1d3b      	adds	r3, r7, #4
 8021392:	881b      	ldrh	r3, [r3, #0]
 8021394:	2201      	movs	r2, #1
 8021396:	4013      	ands	r3, r2
 8021398:	b29b      	uxth	r3, r3
 802139a:	2b00      	cmp	r3, #0
 802139c:	d007      	beq.n	80213ae <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 802139e:	6a3b      	ldr	r3, [r7, #32]
 80213a0:	881b      	ldrh	r3, [r3, #0]
 80213a2:	b29b      	uxth	r3, r3
 80213a4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80213a6:	693b      	ldr	r3, [r7, #16]
 80213a8:	b2da      	uxtb	r2, r3
 80213aa:	69fb      	ldr	r3, [r7, #28]
 80213ac:	701a      	strb	r2, [r3, #0]
  }
}
 80213ae:	46c0      	nop			@ (mov r8, r8)
 80213b0:	46bd      	mov	sp, r7
 80213b2:	b00a      	add	sp, #40	@ 0x28
 80213b4:	bd80      	pop	{r7, pc}

080213b6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80213b6:	b580      	push	{r7, lr}
 80213b8:	b084      	sub	sp, #16
 80213ba:	af00      	add	r7, sp, #0
 80213bc:	6078      	str	r0, [r7, #4]
 80213be:	000a      	movs	r2, r1
 80213c0:	1cfb      	adds	r3, r7, #3
 80213c2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80213c4:	230f      	movs	r3, #15
 80213c6:	18fb      	adds	r3, r7, r3
 80213c8:	2200      	movs	r2, #0
 80213ca:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80213cc:	687b      	ldr	r3, [r7, #4]
 80213ce:	7c1b      	ldrb	r3, [r3, #16]
 80213d0:	2b00      	cmp	r3, #0
 80213d2:	d116      	bne.n	8021402 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80213d4:	2380      	movs	r3, #128	@ 0x80
 80213d6:	009b      	lsls	r3, r3, #2
 80213d8:	6878      	ldr	r0, [r7, #4]
 80213da:	2202      	movs	r2, #2
 80213dc:	2181      	movs	r1, #129	@ 0x81
 80213de:	f002 f8f8 	bl	80235d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80213e2:	687b      	ldr	r3, [r7, #4]
 80213e4:	2201      	movs	r2, #1
 80213e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80213e8:	2380      	movs	r3, #128	@ 0x80
 80213ea:	009b      	lsls	r3, r3, #2
 80213ec:	6878      	ldr	r0, [r7, #4]
 80213ee:	2202      	movs	r2, #2
 80213f0:	2101      	movs	r1, #1
 80213f2:	f002 f8ee 	bl	80235d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80213f6:	687a      	ldr	r2, [r7, #4]
 80213f8:	23b6      	movs	r3, #182	@ 0xb6
 80213fa:	005b      	lsls	r3, r3, #1
 80213fc:	2101      	movs	r1, #1
 80213fe:	50d1      	str	r1, [r2, r3]
 8021400:	e013      	b.n	802142a <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8021402:	6878      	ldr	r0, [r7, #4]
 8021404:	2340      	movs	r3, #64	@ 0x40
 8021406:	2202      	movs	r2, #2
 8021408:	2181      	movs	r1, #129	@ 0x81
 802140a:	f002 f8e2 	bl	80235d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802140e:	687b      	ldr	r3, [r7, #4]
 8021410:	2201      	movs	r2, #1
 8021412:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8021414:	6878      	ldr	r0, [r7, #4]
 8021416:	2340      	movs	r3, #64	@ 0x40
 8021418:	2202      	movs	r2, #2
 802141a:	2101      	movs	r1, #1
 802141c:	f002 f8d9 	bl	80235d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8021420:	687a      	ldr	r2, [r7, #4]
 8021422:	23b6      	movs	r3, #182	@ 0xb6
 8021424:	005b      	lsls	r3, r3, #1
 8021426:	2101      	movs	r1, #1
 8021428:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 802142a:	6878      	ldr	r0, [r7, #4]
 802142c:	2308      	movs	r3, #8
 802142e:	2203      	movs	r2, #3
 8021430:	2182      	movs	r1, #130	@ 0x82
 8021432:	f002 f8ce 	bl	80235d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8021436:	687b      	ldr	r3, [r7, #4]
 8021438:	2201      	movs	r2, #1
 802143a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 802143c:	2387      	movs	r3, #135	@ 0x87
 802143e:	009b      	lsls	r3, r3, #2
 8021440:	0018      	movs	r0, r3
 8021442:	f002 fa5f 	bl	8023904 <USBD_static_malloc>
 8021446:	0001      	movs	r1, r0
 8021448:	687a      	ldr	r2, [r7, #4]
 802144a:	23ae      	movs	r3, #174	@ 0xae
 802144c:	009b      	lsls	r3, r3, #2
 802144e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8021450:	687a      	ldr	r2, [r7, #4]
 8021452:	23ae      	movs	r3, #174	@ 0xae
 8021454:	009b      	lsls	r3, r3, #2
 8021456:	58d3      	ldr	r3, [r2, r3]
 8021458:	2b00      	cmp	r3, #0
 802145a:	d104      	bne.n	8021466 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 802145c:	230f      	movs	r3, #15
 802145e:	18fb      	adds	r3, r7, r3
 8021460:	2201      	movs	r2, #1
 8021462:	701a      	strb	r2, [r3, #0]
 8021464:	e02c      	b.n	80214c0 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021466:	687a      	ldr	r2, [r7, #4]
 8021468:	23ae      	movs	r3, #174	@ 0xae
 802146a:	009b      	lsls	r3, r3, #2
 802146c:	58d3      	ldr	r3, [r2, r3]
 802146e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8021470:	687a      	ldr	r2, [r7, #4]
 8021472:	23af      	movs	r3, #175	@ 0xaf
 8021474:	009b      	lsls	r3, r3, #2
 8021476:	58d3      	ldr	r3, [r2, r3]
 8021478:	681b      	ldr	r3, [r3, #0]
 802147a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 802147c:	68ba      	ldr	r2, [r7, #8]
 802147e:	2385      	movs	r3, #133	@ 0x85
 8021480:	009b      	lsls	r3, r3, #2
 8021482:	2100      	movs	r1, #0
 8021484:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8021486:	68ba      	ldr	r2, [r7, #8]
 8021488:	2386      	movs	r3, #134	@ 0x86
 802148a:	009b      	lsls	r3, r3, #2
 802148c:	2100      	movs	r1, #0
 802148e:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021490:	687b      	ldr	r3, [r7, #4]
 8021492:	7c1b      	ldrb	r3, [r3, #16]
 8021494:	2b00      	cmp	r3, #0
 8021496:	d10a      	bne.n	80214ae <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8021498:	68ba      	ldr	r2, [r7, #8]
 802149a:	2381      	movs	r3, #129	@ 0x81
 802149c:	009b      	lsls	r3, r3, #2
 802149e:	58d2      	ldr	r2, [r2, r3]
 80214a0:	2380      	movs	r3, #128	@ 0x80
 80214a2:	009b      	lsls	r3, r3, #2
 80214a4:	6878      	ldr	r0, [r7, #4]
 80214a6:	2101      	movs	r1, #1
 80214a8:	f002 f9de 	bl	8023868 <USBD_LL_PrepareReceive>
 80214ac:	e008      	b.n	80214c0 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80214ae:	68ba      	ldr	r2, [r7, #8]
 80214b0:	2381      	movs	r3, #129	@ 0x81
 80214b2:	009b      	lsls	r3, r3, #2
 80214b4:	58d2      	ldr	r2, [r2, r3]
 80214b6:	6878      	ldr	r0, [r7, #4]
 80214b8:	2340      	movs	r3, #64	@ 0x40
 80214ba:	2101      	movs	r1, #1
 80214bc:	f002 f9d4 	bl	8023868 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80214c0:	230f      	movs	r3, #15
 80214c2:	18fb      	adds	r3, r7, r3
 80214c4:	781b      	ldrb	r3, [r3, #0]
}
 80214c6:	0018      	movs	r0, r3
 80214c8:	46bd      	mov	sp, r7
 80214ca:	b004      	add	sp, #16
 80214cc:	bd80      	pop	{r7, pc}

080214ce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80214ce:	b580      	push	{r7, lr}
 80214d0:	b084      	sub	sp, #16
 80214d2:	af00      	add	r7, sp, #0
 80214d4:	6078      	str	r0, [r7, #4]
 80214d6:	000a      	movs	r2, r1
 80214d8:	1cfb      	adds	r3, r7, #3
 80214da:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80214dc:	230f      	movs	r3, #15
 80214de:	18fb      	adds	r3, r7, r3
 80214e0:	2200      	movs	r2, #0
 80214e2:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80214e4:	687b      	ldr	r3, [r7, #4]
 80214e6:	2181      	movs	r1, #129	@ 0x81
 80214e8:	0018      	movs	r0, r3
 80214ea:	f002 f8a9 	bl	8023640 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80214ee:	687b      	ldr	r3, [r7, #4]
 80214f0:	2200      	movs	r2, #0
 80214f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80214f4:	687b      	ldr	r3, [r7, #4]
 80214f6:	2101      	movs	r1, #1
 80214f8:	0018      	movs	r0, r3
 80214fa:	f002 f8a1 	bl	8023640 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80214fe:	687a      	ldr	r2, [r7, #4]
 8021500:	23b6      	movs	r3, #182	@ 0xb6
 8021502:	005b      	lsls	r3, r3, #1
 8021504:	2100      	movs	r1, #0
 8021506:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8021508:	687b      	ldr	r3, [r7, #4]
 802150a:	2182      	movs	r1, #130	@ 0x82
 802150c:	0018      	movs	r0, r3
 802150e:	f002 f897 	bl	8023640 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8021512:	687b      	ldr	r3, [r7, #4]
 8021514:	2200      	movs	r2, #0
 8021516:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8021518:	687a      	ldr	r2, [r7, #4]
 802151a:	23ae      	movs	r3, #174	@ 0xae
 802151c:	009b      	lsls	r3, r3, #2
 802151e:	58d3      	ldr	r3, [r2, r3]
 8021520:	2b00      	cmp	r3, #0
 8021522:	d011      	beq.n	8021548 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8021524:	687a      	ldr	r2, [r7, #4]
 8021526:	23af      	movs	r3, #175	@ 0xaf
 8021528:	009b      	lsls	r3, r3, #2
 802152a:	58d3      	ldr	r3, [r2, r3]
 802152c:	685b      	ldr	r3, [r3, #4]
 802152e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8021530:	687a      	ldr	r2, [r7, #4]
 8021532:	23ae      	movs	r3, #174	@ 0xae
 8021534:	009b      	lsls	r3, r3, #2
 8021536:	58d3      	ldr	r3, [r2, r3]
 8021538:	0018      	movs	r0, r3
 802153a:	f002 f9ef 	bl	802391c <USBD_static_free>
    pdev->pClassData = NULL;
 802153e:	687a      	ldr	r2, [r7, #4]
 8021540:	23ae      	movs	r3, #174	@ 0xae
 8021542:	009b      	lsls	r3, r3, #2
 8021544:	2100      	movs	r1, #0
 8021546:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8021548:	230f      	movs	r3, #15
 802154a:	18fb      	adds	r3, r7, r3
 802154c:	781b      	ldrb	r3, [r3, #0]
}
 802154e:	0018      	movs	r0, r3
 8021550:	46bd      	mov	sp, r7
 8021552:	b004      	add	sp, #16
 8021554:	bd80      	pop	{r7, pc}
	...

08021558 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8021558:	b580      	push	{r7, lr}
 802155a:	b086      	sub	sp, #24
 802155c:	af00      	add	r7, sp, #0
 802155e:	6078      	str	r0, [r7, #4]
 8021560:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021562:	687a      	ldr	r2, [r7, #4]
 8021564:	23ae      	movs	r3, #174	@ 0xae
 8021566:	009b      	lsls	r3, r3, #2
 8021568:	58d3      	ldr	r3, [r2, r3]
 802156a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 802156c:	230f      	movs	r3, #15
 802156e:	18fb      	adds	r3, r7, r3
 8021570:	2200      	movs	r2, #0
 8021572:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8021574:	230c      	movs	r3, #12
 8021576:	18fb      	adds	r3, r7, r3
 8021578:	2200      	movs	r2, #0
 802157a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 802157c:	2317      	movs	r3, #23
 802157e:	18fb      	adds	r3, r7, r3
 8021580:	2200      	movs	r2, #0
 8021582:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021584:	683b      	ldr	r3, [r7, #0]
 8021586:	781b      	ldrb	r3, [r3, #0]
 8021588:	001a      	movs	r2, r3
 802158a:	2360      	movs	r3, #96	@ 0x60
 802158c:	4013      	ands	r3, r2
 802158e:	d03d      	beq.n	802160c <USBD_CDC_Setup+0xb4>
 8021590:	2b20      	cmp	r3, #32
 8021592:	d000      	beq.n	8021596 <USBD_CDC_Setup+0x3e>
 8021594:	e094      	b.n	80216c0 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8021596:	683b      	ldr	r3, [r7, #0]
 8021598:	88db      	ldrh	r3, [r3, #6]
 802159a:	2b00      	cmp	r3, #0
 802159c:	d02b      	beq.n	80215f6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 802159e:	683b      	ldr	r3, [r7, #0]
 80215a0:	781b      	ldrb	r3, [r3, #0]
 80215a2:	b25b      	sxtb	r3, r3
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	da12      	bge.n	80215ce <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80215a8:	687a      	ldr	r2, [r7, #4]
 80215aa:	23af      	movs	r3, #175	@ 0xaf
 80215ac:	009b      	lsls	r3, r3, #2
 80215ae:	58d3      	ldr	r3, [r2, r3]
 80215b0:	689b      	ldr	r3, [r3, #8]
 80215b2:	683a      	ldr	r2, [r7, #0]
 80215b4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80215b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80215b8:	683a      	ldr	r2, [r7, #0]
 80215ba:	88d2      	ldrh	r2, [r2, #6]
 80215bc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80215be:	6939      	ldr	r1, [r7, #16]
 80215c0:	683b      	ldr	r3, [r7, #0]
 80215c2:	88da      	ldrh	r2, [r3, #6]
 80215c4:	687b      	ldr	r3, [r7, #4]
 80215c6:	0018      	movs	r0, r3
 80215c8:	f001 fbaf 	bl	8022d2a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80215cc:	e083      	b.n	80216d6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80215ce:	683b      	ldr	r3, [r7, #0]
 80215d0:	7859      	ldrb	r1, [r3, #1]
 80215d2:	693a      	ldr	r2, [r7, #16]
 80215d4:	2380      	movs	r3, #128	@ 0x80
 80215d6:	009b      	lsls	r3, r3, #2
 80215d8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80215da:	683b      	ldr	r3, [r7, #0]
 80215dc:	88db      	ldrh	r3, [r3, #6]
 80215de:	b2d9      	uxtb	r1, r3
 80215e0:	693b      	ldr	r3, [r7, #16]
 80215e2:	4a40      	ldr	r2, [pc, #256]	@ (80216e4 <USBD_CDC_Setup+0x18c>)
 80215e4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80215e6:	6939      	ldr	r1, [r7, #16]
 80215e8:	683b      	ldr	r3, [r7, #0]
 80215ea:	88da      	ldrh	r2, [r3, #6]
 80215ec:	687b      	ldr	r3, [r7, #4]
 80215ee:	0018      	movs	r0, r3
 80215f0:	f001 fbce 	bl	8022d90 <USBD_CtlPrepareRx>
      break;
 80215f4:	e06f      	b.n	80216d6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80215f6:	687a      	ldr	r2, [r7, #4]
 80215f8:	23af      	movs	r3, #175	@ 0xaf
 80215fa:	009b      	lsls	r3, r3, #2
 80215fc:	58d3      	ldr	r3, [r2, r3]
 80215fe:	689b      	ldr	r3, [r3, #8]
 8021600:	683a      	ldr	r2, [r7, #0]
 8021602:	7850      	ldrb	r0, [r2, #1]
 8021604:	6839      	ldr	r1, [r7, #0]
 8021606:	2200      	movs	r2, #0
 8021608:	4798      	blx	r3
      break;
 802160a:	e064      	b.n	80216d6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802160c:	683b      	ldr	r3, [r7, #0]
 802160e:	785b      	ldrb	r3, [r3, #1]
 8021610:	2b0b      	cmp	r3, #11
 8021612:	d037      	beq.n	8021684 <USBD_CDC_Setup+0x12c>
 8021614:	dc47      	bgt.n	80216a6 <USBD_CDC_Setup+0x14e>
 8021616:	2b00      	cmp	r3, #0
 8021618:	d002      	beq.n	8021620 <USBD_CDC_Setup+0xc8>
 802161a:	2b0a      	cmp	r3, #10
 802161c:	d019      	beq.n	8021652 <USBD_CDC_Setup+0xfa>
 802161e:	e042      	b.n	80216a6 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021620:	687a      	ldr	r2, [r7, #4]
 8021622:	23a7      	movs	r3, #167	@ 0xa7
 8021624:	009b      	lsls	r3, r3, #2
 8021626:	5cd3      	ldrb	r3, [r2, r3]
 8021628:	2b03      	cmp	r3, #3
 802162a:	d107      	bne.n	802163c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 802162c:	230c      	movs	r3, #12
 802162e:	18f9      	adds	r1, r7, r3
 8021630:	687b      	ldr	r3, [r7, #4]
 8021632:	2202      	movs	r2, #2
 8021634:	0018      	movs	r0, r3
 8021636:	f001 fb78 	bl	8022d2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802163a:	e040      	b.n	80216be <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 802163c:	683a      	ldr	r2, [r7, #0]
 802163e:	687b      	ldr	r3, [r7, #4]
 8021640:	0011      	movs	r1, r2
 8021642:	0018      	movs	r0, r3
 8021644:	f001 faf3 	bl	8022c2e <USBD_CtlError>
            ret = USBD_FAIL;
 8021648:	2317      	movs	r3, #23
 802164a:	18fb      	adds	r3, r7, r3
 802164c:	2202      	movs	r2, #2
 802164e:	701a      	strb	r2, [r3, #0]
          break;
 8021650:	e035      	b.n	80216be <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021652:	687a      	ldr	r2, [r7, #4]
 8021654:	23a7      	movs	r3, #167	@ 0xa7
 8021656:	009b      	lsls	r3, r3, #2
 8021658:	5cd3      	ldrb	r3, [r2, r3]
 802165a:	2b03      	cmp	r3, #3
 802165c:	d107      	bne.n	802166e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 802165e:	230f      	movs	r3, #15
 8021660:	18f9      	adds	r1, r7, r3
 8021662:	687b      	ldr	r3, [r7, #4]
 8021664:	2201      	movs	r2, #1
 8021666:	0018      	movs	r0, r3
 8021668:	f001 fb5f 	bl	8022d2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802166c:	e027      	b.n	80216be <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 802166e:	683a      	ldr	r2, [r7, #0]
 8021670:	687b      	ldr	r3, [r7, #4]
 8021672:	0011      	movs	r1, r2
 8021674:	0018      	movs	r0, r3
 8021676:	f001 fada 	bl	8022c2e <USBD_CtlError>
            ret = USBD_FAIL;
 802167a:	2317      	movs	r3, #23
 802167c:	18fb      	adds	r3, r7, r3
 802167e:	2202      	movs	r2, #2
 8021680:	701a      	strb	r2, [r3, #0]
          break;
 8021682:	e01c      	b.n	80216be <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8021684:	687a      	ldr	r2, [r7, #4]
 8021686:	23a7      	movs	r3, #167	@ 0xa7
 8021688:	009b      	lsls	r3, r3, #2
 802168a:	5cd3      	ldrb	r3, [r2, r3]
 802168c:	2b03      	cmp	r3, #3
 802168e:	d015      	beq.n	80216bc <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8021690:	683a      	ldr	r2, [r7, #0]
 8021692:	687b      	ldr	r3, [r7, #4]
 8021694:	0011      	movs	r1, r2
 8021696:	0018      	movs	r0, r3
 8021698:	f001 fac9 	bl	8022c2e <USBD_CtlError>
            ret = USBD_FAIL;
 802169c:	2317      	movs	r3, #23
 802169e:	18fb      	adds	r3, r7, r3
 80216a0:	2202      	movs	r2, #2
 80216a2:	701a      	strb	r2, [r3, #0]
          }
          break;
 80216a4:	e00a      	b.n	80216bc <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80216a6:	683a      	ldr	r2, [r7, #0]
 80216a8:	687b      	ldr	r3, [r7, #4]
 80216aa:	0011      	movs	r1, r2
 80216ac:	0018      	movs	r0, r3
 80216ae:	f001 fabe 	bl	8022c2e <USBD_CtlError>
          ret = USBD_FAIL;
 80216b2:	2317      	movs	r3, #23
 80216b4:	18fb      	adds	r3, r7, r3
 80216b6:	2202      	movs	r2, #2
 80216b8:	701a      	strb	r2, [r3, #0]
          break;
 80216ba:	e000      	b.n	80216be <USBD_CDC_Setup+0x166>
          break;
 80216bc:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80216be:	e00a      	b.n	80216d6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80216c0:	683a      	ldr	r2, [r7, #0]
 80216c2:	687b      	ldr	r3, [r7, #4]
 80216c4:	0011      	movs	r1, r2
 80216c6:	0018      	movs	r0, r3
 80216c8:	f001 fab1 	bl	8022c2e <USBD_CtlError>
      ret = USBD_FAIL;
 80216cc:	2317      	movs	r3, #23
 80216ce:	18fb      	adds	r3, r7, r3
 80216d0:	2202      	movs	r2, #2
 80216d2:	701a      	strb	r2, [r3, #0]
      break;
 80216d4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80216d6:	2317      	movs	r3, #23
 80216d8:	18fb      	adds	r3, r7, r3
 80216da:	781b      	ldrb	r3, [r3, #0]
}
 80216dc:	0018      	movs	r0, r3
 80216de:	46bd      	mov	sp, r7
 80216e0:	b006      	add	sp, #24
 80216e2:	bd80      	pop	{r7, pc}
 80216e4:	00000201 	.word	0x00000201

080216e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80216e8:	b580      	push	{r7, lr}
 80216ea:	b084      	sub	sp, #16
 80216ec:	af00      	add	r7, sp, #0
 80216ee:	6078      	str	r0, [r7, #4]
 80216f0:	000a      	movs	r2, r1
 80216f2:	1cfb      	adds	r3, r7, #3
 80216f4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80216f6:	687a      	ldr	r2, [r7, #4]
 80216f8:	23ae      	movs	r3, #174	@ 0xae
 80216fa:	009b      	lsls	r3, r3, #2
 80216fc:	58d3      	ldr	r3, [r2, r3]
 80216fe:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8021700:	687a      	ldr	r2, [r7, #4]
 8021702:	23b0      	movs	r3, #176	@ 0xb0
 8021704:	009b      	lsls	r3, r3, #2
 8021706:	58d3      	ldr	r3, [r2, r3]
 8021708:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 802170a:	687a      	ldr	r2, [r7, #4]
 802170c:	23ae      	movs	r3, #174	@ 0xae
 802170e:	009b      	lsls	r3, r3, #2
 8021710:	58d3      	ldr	r3, [r2, r3]
 8021712:	2b00      	cmp	r3, #0
 8021714:	d03e      	beq.n	8021794 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8021716:	1cfb      	adds	r3, r7, #3
 8021718:	781a      	ldrb	r2, [r3, #0]
 802171a:	6879      	ldr	r1, [r7, #4]
 802171c:	0013      	movs	r3, r2
 802171e:	009b      	lsls	r3, r3, #2
 8021720:	189b      	adds	r3, r3, r2
 8021722:	009b      	lsls	r3, r3, #2
 8021724:	18cb      	adds	r3, r1, r3
 8021726:	331c      	adds	r3, #28
 8021728:	681b      	ldr	r3, [r3, #0]
 802172a:	2b00      	cmp	r3, #0
 802172c:	d02b      	beq.n	8021786 <USBD_CDC_DataIn+0x9e>
 802172e:	1cfb      	adds	r3, r7, #3
 8021730:	781a      	ldrb	r2, [r3, #0]
 8021732:	6879      	ldr	r1, [r7, #4]
 8021734:	0013      	movs	r3, r2
 8021736:	009b      	lsls	r3, r3, #2
 8021738:	189b      	adds	r3, r3, r2
 802173a:	009b      	lsls	r3, r3, #2
 802173c:	18cb      	adds	r3, r1, r3
 802173e:	331c      	adds	r3, #28
 8021740:	6818      	ldr	r0, [r3, #0]
 8021742:	1cfb      	adds	r3, r7, #3
 8021744:	781a      	ldrb	r2, [r3, #0]
 8021746:	68b9      	ldr	r1, [r7, #8]
 8021748:	0013      	movs	r3, r2
 802174a:	009b      	lsls	r3, r3, #2
 802174c:	189b      	adds	r3, r3, r2
 802174e:	00db      	lsls	r3, r3, #3
 8021750:	18cb      	adds	r3, r1, r3
 8021752:	3338      	adds	r3, #56	@ 0x38
 8021754:	681b      	ldr	r3, [r3, #0]
 8021756:	0019      	movs	r1, r3
 8021758:	f7de fdaa 	bl	80002b0 <__aeabi_uidivmod>
 802175c:	1e0b      	subs	r3, r1, #0
 802175e:	d112      	bne.n	8021786 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8021760:	1cfb      	adds	r3, r7, #3
 8021762:	781a      	ldrb	r2, [r3, #0]
 8021764:	6879      	ldr	r1, [r7, #4]
 8021766:	0013      	movs	r3, r2
 8021768:	009b      	lsls	r3, r3, #2
 802176a:	189b      	adds	r3, r3, r2
 802176c:	009b      	lsls	r3, r3, #2
 802176e:	18cb      	adds	r3, r1, r3
 8021770:	331c      	adds	r3, #28
 8021772:	2200      	movs	r2, #0
 8021774:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8021776:	1cfb      	adds	r3, r7, #3
 8021778:	7819      	ldrb	r1, [r3, #0]
 802177a:	6878      	ldr	r0, [r7, #4]
 802177c:	2300      	movs	r3, #0
 802177e:	2200      	movs	r2, #0
 8021780:	f002 f83b 	bl	80237fa <USBD_LL_Transmit>
 8021784:	e004      	b.n	8021790 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8021786:	68fa      	ldr	r2, [r7, #12]
 8021788:	2385      	movs	r3, #133	@ 0x85
 802178a:	009b      	lsls	r3, r3, #2
 802178c:	2100      	movs	r1, #0
 802178e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8021790:	2300      	movs	r3, #0
 8021792:	e000      	b.n	8021796 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8021794:	2302      	movs	r3, #2
  }
}
 8021796:	0018      	movs	r0, r3
 8021798:	46bd      	mov	sp, r7
 802179a:	b004      	add	sp, #16
 802179c:	bd80      	pop	{r7, pc}

0802179e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802179e:	b580      	push	{r7, lr}
 80217a0:	b084      	sub	sp, #16
 80217a2:	af00      	add	r7, sp, #0
 80217a4:	6078      	str	r0, [r7, #4]
 80217a6:	000a      	movs	r2, r1
 80217a8:	1cfb      	adds	r3, r7, #3
 80217aa:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80217ac:	687a      	ldr	r2, [r7, #4]
 80217ae:	23ae      	movs	r3, #174	@ 0xae
 80217b0:	009b      	lsls	r3, r3, #2
 80217b2:	58d3      	ldr	r3, [r2, r3]
 80217b4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80217b6:	1cfb      	adds	r3, r7, #3
 80217b8:	781a      	ldrb	r2, [r3, #0]
 80217ba:	687b      	ldr	r3, [r7, #4]
 80217bc:	0011      	movs	r1, r2
 80217be:	0018      	movs	r0, r3
 80217c0:	f002 f889 	bl	80238d6 <USBD_LL_GetRxDataSize>
 80217c4:	0001      	movs	r1, r0
 80217c6:	68fa      	ldr	r2, [r7, #12]
 80217c8:	2383      	movs	r3, #131	@ 0x83
 80217ca:	009b      	lsls	r3, r3, #2
 80217cc:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80217ce:	687a      	ldr	r2, [r7, #4]
 80217d0:	23ae      	movs	r3, #174	@ 0xae
 80217d2:	009b      	lsls	r3, r3, #2
 80217d4:	58d3      	ldr	r3, [r2, r3]
 80217d6:	2b00      	cmp	r3, #0
 80217d8:	d011      	beq.n	80217fe <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80217da:	687a      	ldr	r2, [r7, #4]
 80217dc:	23af      	movs	r3, #175	@ 0xaf
 80217de:	009b      	lsls	r3, r3, #2
 80217e0:	58d3      	ldr	r3, [r2, r3]
 80217e2:	68da      	ldr	r2, [r3, #12]
 80217e4:	68f9      	ldr	r1, [r7, #12]
 80217e6:	2381      	movs	r3, #129	@ 0x81
 80217e8:	009b      	lsls	r3, r3, #2
 80217ea:	58c8      	ldr	r0, [r1, r3]
 80217ec:	68fb      	ldr	r3, [r7, #12]
 80217ee:	2183      	movs	r1, #131	@ 0x83
 80217f0:	0089      	lsls	r1, r1, #2
 80217f2:	468c      	mov	ip, r1
 80217f4:	4463      	add	r3, ip
 80217f6:	0019      	movs	r1, r3
 80217f8:	4790      	blx	r2

    return USBD_OK;
 80217fa:	2300      	movs	r3, #0
 80217fc:	e000      	b.n	8021800 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80217fe:	2302      	movs	r3, #2
  }
}
 8021800:	0018      	movs	r0, r3
 8021802:	46bd      	mov	sp, r7
 8021804:	b004      	add	sp, #16
 8021806:	bd80      	pop	{r7, pc}

08021808 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8021808:	b590      	push	{r4, r7, lr}
 802180a:	b085      	sub	sp, #20
 802180c:	af00      	add	r7, sp, #0
 802180e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021810:	687a      	ldr	r2, [r7, #4]
 8021812:	23ae      	movs	r3, #174	@ 0xae
 8021814:	009b      	lsls	r3, r3, #2
 8021816:	58d3      	ldr	r3, [r2, r3]
 8021818:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 802181a:	687a      	ldr	r2, [r7, #4]
 802181c:	23af      	movs	r3, #175	@ 0xaf
 802181e:	009b      	lsls	r3, r3, #2
 8021820:	58d3      	ldr	r3, [r2, r3]
 8021822:	2b00      	cmp	r3, #0
 8021824:	d018      	beq.n	8021858 <USBD_CDC_EP0_RxReady+0x50>
 8021826:	68fa      	ldr	r2, [r7, #12]
 8021828:	2380      	movs	r3, #128	@ 0x80
 802182a:	009b      	lsls	r3, r3, #2
 802182c:	5cd3      	ldrb	r3, [r2, r3]
 802182e:	2bff      	cmp	r3, #255	@ 0xff
 8021830:	d012      	beq.n	8021858 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021832:	687a      	ldr	r2, [r7, #4]
 8021834:	23af      	movs	r3, #175	@ 0xaf
 8021836:	009b      	lsls	r3, r3, #2
 8021838:	58d3      	ldr	r3, [r2, r3]
 802183a:	689b      	ldr	r3, [r3, #8]
 802183c:	68f9      	ldr	r1, [r7, #12]
 802183e:	2280      	movs	r2, #128	@ 0x80
 8021840:	0092      	lsls	r2, r2, #2
 8021842:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8021844:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8021846:	68fa      	ldr	r2, [r7, #12]
 8021848:	4c06      	ldr	r4, [pc, #24]	@ (8021864 <USBD_CDC_EP0_RxReady+0x5c>)
 802184a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 802184c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 802184e:	68fa      	ldr	r2, [r7, #12]
 8021850:	2380      	movs	r3, #128	@ 0x80
 8021852:	009b      	lsls	r3, r3, #2
 8021854:	21ff      	movs	r1, #255	@ 0xff
 8021856:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8021858:	2300      	movs	r3, #0
}
 802185a:	0018      	movs	r0, r3
 802185c:	46bd      	mov	sp, r7
 802185e:	b005      	add	sp, #20
 8021860:	bd90      	pop	{r4, r7, pc}
 8021862:	46c0      	nop			@ (mov r8, r8)
 8021864:	00000201 	.word	0x00000201

08021868 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8021868:	b580      	push	{r7, lr}
 802186a:	b082      	sub	sp, #8
 802186c:	af00      	add	r7, sp, #0
 802186e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8021870:	687b      	ldr	r3, [r7, #4]
 8021872:	2243      	movs	r2, #67	@ 0x43
 8021874:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8021876:	4b02      	ldr	r3, [pc, #8]	@ (8021880 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8021878:	0018      	movs	r0, r3
 802187a:	46bd      	mov	sp, r7
 802187c:	b002      	add	sp, #8
 802187e:	bd80      	pop	{r7, pc}
 8021880:	2000018c 	.word	0x2000018c

08021884 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8021884:	b580      	push	{r7, lr}
 8021886:	b082      	sub	sp, #8
 8021888:	af00      	add	r7, sp, #0
 802188a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 802188c:	687b      	ldr	r3, [r7, #4]
 802188e:	2243      	movs	r2, #67	@ 0x43
 8021890:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8021892:	4b02      	ldr	r3, [pc, #8]	@ (802189c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8021894:	0018      	movs	r0, r3
 8021896:	46bd      	mov	sp, r7
 8021898:	b002      	add	sp, #8
 802189a:	bd80      	pop	{r7, pc}
 802189c:	20000148 	.word	0x20000148

080218a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80218a0:	b580      	push	{r7, lr}
 80218a2:	b082      	sub	sp, #8
 80218a4:	af00      	add	r7, sp, #0
 80218a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80218a8:	687b      	ldr	r3, [r7, #4]
 80218aa:	2243      	movs	r2, #67	@ 0x43
 80218ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80218ae:	4b02      	ldr	r3, [pc, #8]	@ (80218b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80218b0:	0018      	movs	r0, r3
 80218b2:	46bd      	mov	sp, r7
 80218b4:	b002      	add	sp, #8
 80218b6:	bd80      	pop	{r7, pc}
 80218b8:	200001d0 	.word	0x200001d0

080218bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80218bc:	b580      	push	{r7, lr}
 80218be:	b082      	sub	sp, #8
 80218c0:	af00      	add	r7, sp, #0
 80218c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80218c4:	687b      	ldr	r3, [r7, #4]
 80218c6:	220a      	movs	r2, #10
 80218c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80218ca:	4b02      	ldr	r3, [pc, #8]	@ (80218d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80218cc:	0018      	movs	r0, r3
 80218ce:	46bd      	mov	sp, r7
 80218d0:	b002      	add	sp, #8
 80218d2:	bd80      	pop	{r7, pc}
 80218d4:	20000104 	.word	0x20000104

080218d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80218d8:	b580      	push	{r7, lr}
 80218da:	b084      	sub	sp, #16
 80218dc:	af00      	add	r7, sp, #0
 80218de:	6078      	str	r0, [r7, #4]
 80218e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80218e2:	200f      	movs	r0, #15
 80218e4:	183b      	adds	r3, r7, r0
 80218e6:	2202      	movs	r2, #2
 80218e8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80218ea:	683b      	ldr	r3, [r7, #0]
 80218ec:	2b00      	cmp	r3, #0
 80218ee:	d007      	beq.n	8021900 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80218f0:	687a      	ldr	r2, [r7, #4]
 80218f2:	23af      	movs	r3, #175	@ 0xaf
 80218f4:	009b      	lsls	r3, r3, #2
 80218f6:	6839      	ldr	r1, [r7, #0]
 80218f8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80218fa:	183b      	adds	r3, r7, r0
 80218fc:	2200      	movs	r2, #0
 80218fe:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8021900:	230f      	movs	r3, #15
 8021902:	18fb      	adds	r3, r7, r3
 8021904:	781b      	ldrb	r3, [r3, #0]
}
 8021906:	0018      	movs	r0, r3
 8021908:	46bd      	mov	sp, r7
 802190a:	b004      	add	sp, #16
 802190c:	bd80      	pop	{r7, pc}

0802190e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 802190e:	b580      	push	{r7, lr}
 8021910:	b086      	sub	sp, #24
 8021912:	af00      	add	r7, sp, #0
 8021914:	60f8      	str	r0, [r7, #12]
 8021916:	60b9      	str	r1, [r7, #8]
 8021918:	1dbb      	adds	r3, r7, #6
 802191a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802191c:	68fa      	ldr	r2, [r7, #12]
 802191e:	23ae      	movs	r3, #174	@ 0xae
 8021920:	009b      	lsls	r3, r3, #2
 8021922:	58d3      	ldr	r3, [r2, r3]
 8021924:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8021926:	697a      	ldr	r2, [r7, #20]
 8021928:	2382      	movs	r3, #130	@ 0x82
 802192a:	009b      	lsls	r3, r3, #2
 802192c:	68b9      	ldr	r1, [r7, #8]
 802192e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8021930:	1dbb      	adds	r3, r7, #6
 8021932:	8819      	ldrh	r1, [r3, #0]
 8021934:	697a      	ldr	r2, [r7, #20]
 8021936:	2384      	movs	r3, #132	@ 0x84
 8021938:	009b      	lsls	r3, r3, #2
 802193a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 802193c:	2300      	movs	r3, #0
}
 802193e:	0018      	movs	r0, r3
 8021940:	46bd      	mov	sp, r7
 8021942:	b006      	add	sp, #24
 8021944:	bd80      	pop	{r7, pc}

08021946 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8021946:	b580      	push	{r7, lr}
 8021948:	b084      	sub	sp, #16
 802194a:	af00      	add	r7, sp, #0
 802194c:	6078      	str	r0, [r7, #4]
 802194e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021950:	687a      	ldr	r2, [r7, #4]
 8021952:	23ae      	movs	r3, #174	@ 0xae
 8021954:	009b      	lsls	r3, r3, #2
 8021956:	58d3      	ldr	r3, [r2, r3]
 8021958:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 802195a:	68fa      	ldr	r2, [r7, #12]
 802195c:	2381      	movs	r3, #129	@ 0x81
 802195e:	009b      	lsls	r3, r3, #2
 8021960:	6839      	ldr	r1, [r7, #0]
 8021962:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021964:	2300      	movs	r3, #0
}
 8021966:	0018      	movs	r0, r3
 8021968:	46bd      	mov	sp, r7
 802196a:	b004      	add	sp, #16
 802196c:	bd80      	pop	{r7, pc}

0802196e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 802196e:	b580      	push	{r7, lr}
 8021970:	b084      	sub	sp, #16
 8021972:	af00      	add	r7, sp, #0
 8021974:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021976:	687a      	ldr	r2, [r7, #4]
 8021978:	23ae      	movs	r3, #174	@ 0xae
 802197a:	009b      	lsls	r3, r3, #2
 802197c:	58d3      	ldr	r3, [r2, r3]
 802197e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8021980:	687a      	ldr	r2, [r7, #4]
 8021982:	23ae      	movs	r3, #174	@ 0xae
 8021984:	009b      	lsls	r3, r3, #2
 8021986:	58d3      	ldr	r3, [r2, r3]
 8021988:	2b00      	cmp	r3, #0
 802198a:	d022      	beq.n	80219d2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 802198c:	68fa      	ldr	r2, [r7, #12]
 802198e:	2385      	movs	r3, #133	@ 0x85
 8021990:	009b      	lsls	r3, r3, #2
 8021992:	58d3      	ldr	r3, [r2, r3]
 8021994:	2b00      	cmp	r3, #0
 8021996:	d11a      	bne.n	80219ce <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8021998:	68fa      	ldr	r2, [r7, #12]
 802199a:	2385      	movs	r3, #133	@ 0x85
 802199c:	009b      	lsls	r3, r3, #2
 802199e:	2101      	movs	r1, #1
 80219a0:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80219a2:	68fa      	ldr	r2, [r7, #12]
 80219a4:	2384      	movs	r3, #132	@ 0x84
 80219a6:	009b      	lsls	r3, r3, #2
 80219a8:	58d2      	ldr	r2, [r2, r3]
 80219aa:	687b      	ldr	r3, [r7, #4]
 80219ac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80219ae:	68fa      	ldr	r2, [r7, #12]
 80219b0:	2382      	movs	r3, #130	@ 0x82
 80219b2:	009b      	lsls	r3, r3, #2
 80219b4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80219b6:	68fa      	ldr	r2, [r7, #12]
 80219b8:	2384      	movs	r3, #132	@ 0x84
 80219ba:	009b      	lsls	r3, r3, #2
 80219bc:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80219be:	b29b      	uxth	r3, r3
 80219c0:	6878      	ldr	r0, [r7, #4]
 80219c2:	000a      	movs	r2, r1
 80219c4:	2181      	movs	r1, #129	@ 0x81
 80219c6:	f001 ff18 	bl	80237fa <USBD_LL_Transmit>

      return USBD_OK;
 80219ca:	2300      	movs	r3, #0
 80219cc:	e002      	b.n	80219d4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80219ce:	2301      	movs	r3, #1
 80219d0:	e000      	b.n	80219d4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80219d2:	2302      	movs	r3, #2
  }
}
 80219d4:	0018      	movs	r0, r3
 80219d6:	46bd      	mov	sp, r7
 80219d8:	b004      	add	sp, #16
 80219da:	bd80      	pop	{r7, pc}

080219dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80219dc:	b580      	push	{r7, lr}
 80219de:	b084      	sub	sp, #16
 80219e0:	af00      	add	r7, sp, #0
 80219e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80219e4:	687a      	ldr	r2, [r7, #4]
 80219e6:	23ae      	movs	r3, #174	@ 0xae
 80219e8:	009b      	lsls	r3, r3, #2
 80219ea:	58d3      	ldr	r3, [r2, r3]
 80219ec:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80219ee:	687a      	ldr	r2, [r7, #4]
 80219f0:	23ae      	movs	r3, #174	@ 0xae
 80219f2:	009b      	lsls	r3, r3, #2
 80219f4:	58d3      	ldr	r3, [r2, r3]
 80219f6:	2b00      	cmp	r3, #0
 80219f8:	d019      	beq.n	8021a2e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80219fa:	687b      	ldr	r3, [r7, #4]
 80219fc:	7c1b      	ldrb	r3, [r3, #16]
 80219fe:	2b00      	cmp	r3, #0
 8021a00:	d10a      	bne.n	8021a18 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021a02:	68fa      	ldr	r2, [r7, #12]
 8021a04:	2381      	movs	r3, #129	@ 0x81
 8021a06:	009b      	lsls	r3, r3, #2
 8021a08:	58d2      	ldr	r2, [r2, r3]
 8021a0a:	2380      	movs	r3, #128	@ 0x80
 8021a0c:	009b      	lsls	r3, r3, #2
 8021a0e:	6878      	ldr	r0, [r7, #4]
 8021a10:	2101      	movs	r1, #1
 8021a12:	f001 ff29 	bl	8023868 <USBD_LL_PrepareReceive>
 8021a16:	e008      	b.n	8021a2a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021a18:	68fa      	ldr	r2, [r7, #12]
 8021a1a:	2381      	movs	r3, #129	@ 0x81
 8021a1c:	009b      	lsls	r3, r3, #2
 8021a1e:	58d2      	ldr	r2, [r2, r3]
 8021a20:	6878      	ldr	r0, [r7, #4]
 8021a22:	2340      	movs	r3, #64	@ 0x40
 8021a24:	2101      	movs	r1, #1
 8021a26:	f001 ff1f 	bl	8023868 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8021a2a:	2300      	movs	r3, #0
 8021a2c:	e000      	b.n	8021a30 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8021a2e:	2302      	movs	r3, #2
  }
}
 8021a30:	0018      	movs	r0, r3
 8021a32:	46bd      	mov	sp, r7
 8021a34:	b004      	add	sp, #16
 8021a36:	bd80      	pop	{r7, pc}

08021a38 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8021a38:	b580      	push	{r7, lr}
 8021a3a:	b084      	sub	sp, #16
 8021a3c:	af00      	add	r7, sp, #0
 8021a3e:	60f8      	str	r0, [r7, #12]
 8021a40:	60b9      	str	r1, [r7, #8]
 8021a42:	1dfb      	adds	r3, r7, #7
 8021a44:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8021a46:	68fb      	ldr	r3, [r7, #12]
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	d101      	bne.n	8021a50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8021a4c:	2302      	movs	r3, #2
 8021a4e:	e020      	b.n	8021a92 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8021a50:	68fa      	ldr	r2, [r7, #12]
 8021a52:	23ad      	movs	r3, #173	@ 0xad
 8021a54:	009b      	lsls	r3, r3, #2
 8021a56:	58d3      	ldr	r3, [r2, r3]
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d004      	beq.n	8021a66 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8021a5c:	68fa      	ldr	r2, [r7, #12]
 8021a5e:	23ad      	movs	r3, #173	@ 0xad
 8021a60:	009b      	lsls	r3, r3, #2
 8021a62:	2100      	movs	r1, #0
 8021a64:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8021a66:	68bb      	ldr	r3, [r7, #8]
 8021a68:	2b00      	cmp	r3, #0
 8021a6a:	d004      	beq.n	8021a76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8021a6c:	68fa      	ldr	r2, [r7, #12]
 8021a6e:	23ac      	movs	r3, #172	@ 0xac
 8021a70:	009b      	lsls	r3, r3, #2
 8021a72:	68b9      	ldr	r1, [r7, #8]
 8021a74:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021a76:	68fa      	ldr	r2, [r7, #12]
 8021a78:	23a7      	movs	r3, #167	@ 0xa7
 8021a7a:	009b      	lsls	r3, r3, #2
 8021a7c:	2101      	movs	r1, #1
 8021a7e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8021a80:	68fb      	ldr	r3, [r7, #12]
 8021a82:	1dfa      	adds	r2, r7, #7
 8021a84:	7812      	ldrb	r2, [r2, #0]
 8021a86:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8021a88:	68fb      	ldr	r3, [r7, #12]
 8021a8a:	0018      	movs	r0, r3
 8021a8c:	f001 fd18 	bl	80234c0 <USBD_LL_Init>

  return USBD_OK;
 8021a90:	2300      	movs	r3, #0
}
 8021a92:	0018      	movs	r0, r3
 8021a94:	46bd      	mov	sp, r7
 8021a96:	b004      	add	sp, #16
 8021a98:	bd80      	pop	{r7, pc}

08021a9a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8021a9a:	b580      	push	{r7, lr}
 8021a9c:	b084      	sub	sp, #16
 8021a9e:	af00      	add	r7, sp, #0
 8021aa0:	6078      	str	r0, [r7, #4]
 8021aa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8021aa4:	200f      	movs	r0, #15
 8021aa6:	183b      	adds	r3, r7, r0
 8021aa8:	2200      	movs	r2, #0
 8021aaa:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8021aac:	683b      	ldr	r3, [r7, #0]
 8021aae:	2b00      	cmp	r3, #0
 8021ab0:	d008      	beq.n	8021ac4 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8021ab2:	687a      	ldr	r2, [r7, #4]
 8021ab4:	23ad      	movs	r3, #173	@ 0xad
 8021ab6:	009b      	lsls	r3, r3, #2
 8021ab8:	6839      	ldr	r1, [r7, #0]
 8021aba:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8021abc:	183b      	adds	r3, r7, r0
 8021abe:	2200      	movs	r2, #0
 8021ac0:	701a      	strb	r2, [r3, #0]
 8021ac2:	e003      	b.n	8021acc <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8021ac4:	230f      	movs	r3, #15
 8021ac6:	18fb      	adds	r3, r7, r3
 8021ac8:	2202      	movs	r2, #2
 8021aca:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8021acc:	230f      	movs	r3, #15
 8021ace:	18fb      	adds	r3, r7, r3
 8021ad0:	781b      	ldrb	r3, [r3, #0]
}
 8021ad2:	0018      	movs	r0, r3
 8021ad4:	46bd      	mov	sp, r7
 8021ad6:	b004      	add	sp, #16
 8021ad8:	bd80      	pop	{r7, pc}

08021ada <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8021ada:	b580      	push	{r7, lr}
 8021adc:	b082      	sub	sp, #8
 8021ade:	af00      	add	r7, sp, #0
 8021ae0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8021ae2:	687b      	ldr	r3, [r7, #4]
 8021ae4:	0018      	movs	r0, r3
 8021ae6:	f001 fd4f 	bl	8023588 <USBD_LL_Start>

  return USBD_OK;
 8021aea:	2300      	movs	r3, #0
}
 8021aec:	0018      	movs	r0, r3
 8021aee:	46bd      	mov	sp, r7
 8021af0:	b002      	add	sp, #8
 8021af2:	bd80      	pop	{r7, pc}

08021af4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8021af4:	b580      	push	{r7, lr}
 8021af6:	b082      	sub	sp, #8
 8021af8:	af00      	add	r7, sp, #0
 8021afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021afc:	2300      	movs	r3, #0
}
 8021afe:	0018      	movs	r0, r3
 8021b00:	46bd      	mov	sp, r7
 8021b02:	b002      	add	sp, #8
 8021b04:	bd80      	pop	{r7, pc}

08021b06 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021b06:	b590      	push	{r4, r7, lr}
 8021b08:	b085      	sub	sp, #20
 8021b0a:	af00      	add	r7, sp, #0
 8021b0c:	6078      	str	r0, [r7, #4]
 8021b0e:	000a      	movs	r2, r1
 8021b10:	1cfb      	adds	r3, r7, #3
 8021b12:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8021b14:	240f      	movs	r4, #15
 8021b16:	193b      	adds	r3, r7, r4
 8021b18:	2202      	movs	r2, #2
 8021b1a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8021b1c:	687a      	ldr	r2, [r7, #4]
 8021b1e:	23ad      	movs	r3, #173	@ 0xad
 8021b20:	009b      	lsls	r3, r3, #2
 8021b22:	58d3      	ldr	r3, [r2, r3]
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	d00e      	beq.n	8021b46 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8021b28:	687a      	ldr	r2, [r7, #4]
 8021b2a:	23ad      	movs	r3, #173	@ 0xad
 8021b2c:	009b      	lsls	r3, r3, #2
 8021b2e:	58d3      	ldr	r3, [r2, r3]
 8021b30:	681b      	ldr	r3, [r3, #0]
 8021b32:	1cfa      	adds	r2, r7, #3
 8021b34:	7811      	ldrb	r1, [r2, #0]
 8021b36:	687a      	ldr	r2, [r7, #4]
 8021b38:	0010      	movs	r0, r2
 8021b3a:	4798      	blx	r3
 8021b3c:	1e03      	subs	r3, r0, #0
 8021b3e:	d102      	bne.n	8021b46 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8021b40:	193b      	adds	r3, r7, r4
 8021b42:	2200      	movs	r2, #0
 8021b44:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8021b46:	230f      	movs	r3, #15
 8021b48:	18fb      	adds	r3, r7, r3
 8021b4a:	781b      	ldrb	r3, [r3, #0]
}
 8021b4c:	0018      	movs	r0, r3
 8021b4e:	46bd      	mov	sp, r7
 8021b50:	b005      	add	sp, #20
 8021b52:	bd90      	pop	{r4, r7, pc}

08021b54 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021b54:	b580      	push	{r7, lr}
 8021b56:	b082      	sub	sp, #8
 8021b58:	af00      	add	r7, sp, #0
 8021b5a:	6078      	str	r0, [r7, #4]
 8021b5c:	000a      	movs	r2, r1
 8021b5e:	1cfb      	adds	r3, r7, #3
 8021b60:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8021b62:	687a      	ldr	r2, [r7, #4]
 8021b64:	23ad      	movs	r3, #173	@ 0xad
 8021b66:	009b      	lsls	r3, r3, #2
 8021b68:	58d3      	ldr	r3, [r2, r3]
 8021b6a:	685b      	ldr	r3, [r3, #4]
 8021b6c:	1cfa      	adds	r2, r7, #3
 8021b6e:	7811      	ldrb	r1, [r2, #0]
 8021b70:	687a      	ldr	r2, [r7, #4]
 8021b72:	0010      	movs	r0, r2
 8021b74:	4798      	blx	r3

  return USBD_OK;
 8021b76:	2300      	movs	r3, #0
}
 8021b78:	0018      	movs	r0, r3
 8021b7a:	46bd      	mov	sp, r7
 8021b7c:	b002      	add	sp, #8
 8021b7e:	bd80      	pop	{r7, pc}

08021b80 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8021b80:	b580      	push	{r7, lr}
 8021b82:	b082      	sub	sp, #8
 8021b84:	af00      	add	r7, sp, #0
 8021b86:	6078      	str	r0, [r7, #4]
 8021b88:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8021b8a:	687b      	ldr	r3, [r7, #4]
 8021b8c:	22aa      	movs	r2, #170	@ 0xaa
 8021b8e:	0092      	lsls	r2, r2, #2
 8021b90:	4694      	mov	ip, r2
 8021b92:	4463      	add	r3, ip
 8021b94:	683a      	ldr	r2, [r7, #0]
 8021b96:	0011      	movs	r1, r2
 8021b98:	0018      	movs	r0, r3
 8021b9a:	f001 f810 	bl	8022bbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8021b9e:	687a      	ldr	r2, [r7, #4]
 8021ba0:	23a5      	movs	r3, #165	@ 0xa5
 8021ba2:	009b      	lsls	r3, r3, #2
 8021ba4:	2101      	movs	r1, #1
 8021ba6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8021ba8:	687b      	ldr	r3, [r7, #4]
 8021baa:	4a23      	ldr	r2, [pc, #140]	@ (8021c38 <USBD_LL_SetupStage+0xb8>)
 8021bac:	5a9b      	ldrh	r3, [r3, r2]
 8021bae:	0019      	movs	r1, r3
 8021bb0:	687a      	ldr	r2, [r7, #4]
 8021bb2:	23a6      	movs	r3, #166	@ 0xa6
 8021bb4:	009b      	lsls	r3, r3, #2
 8021bb6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8021bb8:	687a      	ldr	r2, [r7, #4]
 8021bba:	23aa      	movs	r3, #170	@ 0xaa
 8021bbc:	009b      	lsls	r3, r3, #2
 8021bbe:	5cd3      	ldrb	r3, [r2, r3]
 8021bc0:	001a      	movs	r2, r3
 8021bc2:	231f      	movs	r3, #31
 8021bc4:	4013      	ands	r3, r2
 8021bc6:	2b02      	cmp	r3, #2
 8021bc8:	d019      	beq.n	8021bfe <USBD_LL_SetupStage+0x7e>
 8021bca:	d822      	bhi.n	8021c12 <USBD_LL_SetupStage+0x92>
 8021bcc:	2b00      	cmp	r3, #0
 8021bce:	d002      	beq.n	8021bd6 <USBD_LL_SetupStage+0x56>
 8021bd0:	2b01      	cmp	r3, #1
 8021bd2:	d00a      	beq.n	8021bea <USBD_LL_SetupStage+0x6a>
 8021bd4:	e01d      	b.n	8021c12 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	22aa      	movs	r2, #170	@ 0xaa
 8021bda:	0092      	lsls	r2, r2, #2
 8021bdc:	189a      	adds	r2, r3, r2
 8021bde:	687b      	ldr	r3, [r7, #4]
 8021be0:	0011      	movs	r1, r2
 8021be2:	0018      	movs	r0, r3
 8021be4:	f000 fa10 	bl	8022008 <USBD_StdDevReq>
      break;
 8021be8:	e020      	b.n	8021c2c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8021bea:	687b      	ldr	r3, [r7, #4]
 8021bec:	22aa      	movs	r2, #170	@ 0xaa
 8021bee:	0092      	lsls	r2, r2, #2
 8021bf0:	189a      	adds	r2, r3, r2
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	0011      	movs	r1, r2
 8021bf6:	0018      	movs	r0, r3
 8021bf8:	f000 fa78 	bl	80220ec <USBD_StdItfReq>
      break;
 8021bfc:	e016      	b.n	8021c2c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8021bfe:	687b      	ldr	r3, [r7, #4]
 8021c00:	22aa      	movs	r2, #170	@ 0xaa
 8021c02:	0092      	lsls	r2, r2, #2
 8021c04:	189a      	adds	r2, r3, r2
 8021c06:	687b      	ldr	r3, [r7, #4]
 8021c08:	0011      	movs	r1, r2
 8021c0a:	0018      	movs	r0, r3
 8021c0c:	f000 fac5 	bl	802219a <USBD_StdEPReq>
      break;
 8021c10:	e00c      	b.n	8021c2c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8021c12:	687a      	ldr	r2, [r7, #4]
 8021c14:	23aa      	movs	r3, #170	@ 0xaa
 8021c16:	009b      	lsls	r3, r3, #2
 8021c18:	5cd3      	ldrb	r3, [r2, r3]
 8021c1a:	227f      	movs	r2, #127	@ 0x7f
 8021c1c:	4393      	bics	r3, r2
 8021c1e:	b2da      	uxtb	r2, r3
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	0011      	movs	r1, r2
 8021c24:	0018      	movs	r0, r3
 8021c26:	f001 fd36 	bl	8023696 <USBD_LL_StallEP>
      break;
 8021c2a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021c2c:	2300      	movs	r3, #0
}
 8021c2e:	0018      	movs	r0, r3
 8021c30:	46bd      	mov	sp, r7
 8021c32:	b002      	add	sp, #8
 8021c34:	bd80      	pop	{r7, pc}
 8021c36:	46c0      	nop			@ (mov r8, r8)
 8021c38:	000002ae 	.word	0x000002ae

08021c3c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021c3c:	b580      	push	{r7, lr}
 8021c3e:	b086      	sub	sp, #24
 8021c40:	af00      	add	r7, sp, #0
 8021c42:	60f8      	str	r0, [r7, #12]
 8021c44:	607a      	str	r2, [r7, #4]
 8021c46:	200b      	movs	r0, #11
 8021c48:	183b      	adds	r3, r7, r0
 8021c4a:	1c0a      	adds	r2, r1, #0
 8021c4c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021c4e:	183b      	adds	r3, r7, r0
 8021c50:	781b      	ldrb	r3, [r3, #0]
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	d154      	bne.n	8021d00 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8021c56:	68fb      	ldr	r3, [r7, #12]
 8021c58:	3355      	adds	r3, #85	@ 0x55
 8021c5a:	33ff      	adds	r3, #255	@ 0xff
 8021c5c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021c5e:	68fa      	ldr	r2, [r7, #12]
 8021c60:	23a5      	movs	r3, #165	@ 0xa5
 8021c62:	009b      	lsls	r3, r3, #2
 8021c64:	58d3      	ldr	r3, [r2, r3]
 8021c66:	2b03      	cmp	r3, #3
 8021c68:	d139      	bne.n	8021cde <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8021c6a:	697b      	ldr	r3, [r7, #20]
 8021c6c:	68da      	ldr	r2, [r3, #12]
 8021c6e:	697b      	ldr	r3, [r7, #20]
 8021c70:	691b      	ldr	r3, [r3, #16]
 8021c72:	429a      	cmp	r2, r3
 8021c74:	d919      	bls.n	8021caa <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8021c76:	697b      	ldr	r3, [r7, #20]
 8021c78:	68da      	ldr	r2, [r3, #12]
 8021c7a:	697b      	ldr	r3, [r7, #20]
 8021c7c:	691b      	ldr	r3, [r3, #16]
 8021c7e:	1ad2      	subs	r2, r2, r3
 8021c80:	697b      	ldr	r3, [r7, #20]
 8021c82:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021c84:	697b      	ldr	r3, [r7, #20]
 8021c86:	68da      	ldr	r2, [r3, #12]
 8021c88:	697b      	ldr	r3, [r7, #20]
 8021c8a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021c8c:	429a      	cmp	r2, r3
 8021c8e:	d203      	bcs.n	8021c98 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021c90:	697b      	ldr	r3, [r7, #20]
 8021c92:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8021c94:	b29b      	uxth	r3, r3
 8021c96:	e002      	b.n	8021c9e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021c98:	697b      	ldr	r3, [r7, #20]
 8021c9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021c9c:	b29b      	uxth	r3, r3
 8021c9e:	6879      	ldr	r1, [r7, #4]
 8021ca0:	68f8      	ldr	r0, [r7, #12]
 8021ca2:	001a      	movs	r2, r3
 8021ca4:	f001 f898 	bl	8022dd8 <USBD_CtlContinueRx>
 8021ca8:	e045      	b.n	8021d36 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021caa:	68fa      	ldr	r2, [r7, #12]
 8021cac:	23ad      	movs	r3, #173	@ 0xad
 8021cae:	009b      	lsls	r3, r3, #2
 8021cb0:	58d3      	ldr	r3, [r2, r3]
 8021cb2:	691b      	ldr	r3, [r3, #16]
 8021cb4:	2b00      	cmp	r3, #0
 8021cb6:	d00d      	beq.n	8021cd4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021cb8:	68fa      	ldr	r2, [r7, #12]
 8021cba:	23a7      	movs	r3, #167	@ 0xa7
 8021cbc:	009b      	lsls	r3, r3, #2
 8021cbe:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021cc0:	2b03      	cmp	r3, #3
 8021cc2:	d107      	bne.n	8021cd4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8021cc4:	68fa      	ldr	r2, [r7, #12]
 8021cc6:	23ad      	movs	r3, #173	@ 0xad
 8021cc8:	009b      	lsls	r3, r3, #2
 8021cca:	58d3      	ldr	r3, [r2, r3]
 8021ccc:	691b      	ldr	r3, [r3, #16]
 8021cce:	68fa      	ldr	r2, [r7, #12]
 8021cd0:	0010      	movs	r0, r2
 8021cd2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8021cd4:	68fb      	ldr	r3, [r7, #12]
 8021cd6:	0018      	movs	r0, r3
 8021cd8:	f001 f891 	bl	8022dfe <USBD_CtlSendStatus>
 8021cdc:	e02b      	b.n	8021d36 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8021cde:	68fa      	ldr	r2, [r7, #12]
 8021ce0:	23a5      	movs	r3, #165	@ 0xa5
 8021ce2:	009b      	lsls	r3, r3, #2
 8021ce4:	58d3      	ldr	r3, [r2, r3]
 8021ce6:	2b05      	cmp	r3, #5
 8021ce8:	d125      	bne.n	8021d36 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8021cea:	68fa      	ldr	r2, [r7, #12]
 8021cec:	23a5      	movs	r3, #165	@ 0xa5
 8021cee:	009b      	lsls	r3, r3, #2
 8021cf0:	2100      	movs	r1, #0
 8021cf2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8021cf4:	68fb      	ldr	r3, [r7, #12]
 8021cf6:	2100      	movs	r1, #0
 8021cf8:	0018      	movs	r0, r3
 8021cfa:	f001 fccc 	bl	8023696 <USBD_LL_StallEP>
 8021cfe:	e01a      	b.n	8021d36 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8021d00:	68fa      	ldr	r2, [r7, #12]
 8021d02:	23ad      	movs	r3, #173	@ 0xad
 8021d04:	009b      	lsls	r3, r3, #2
 8021d06:	58d3      	ldr	r3, [r2, r3]
 8021d08:	699b      	ldr	r3, [r3, #24]
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	d011      	beq.n	8021d32 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021d0e:	68fa      	ldr	r2, [r7, #12]
 8021d10:	23a7      	movs	r3, #167	@ 0xa7
 8021d12:	009b      	lsls	r3, r3, #2
 8021d14:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8021d16:	2b03      	cmp	r3, #3
 8021d18:	d10b      	bne.n	8021d32 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8021d1a:	68fa      	ldr	r2, [r7, #12]
 8021d1c:	23ad      	movs	r3, #173	@ 0xad
 8021d1e:	009b      	lsls	r3, r3, #2
 8021d20:	58d3      	ldr	r3, [r2, r3]
 8021d22:	699b      	ldr	r3, [r3, #24]
 8021d24:	220b      	movs	r2, #11
 8021d26:	18ba      	adds	r2, r7, r2
 8021d28:	7811      	ldrb	r1, [r2, #0]
 8021d2a:	68fa      	ldr	r2, [r7, #12]
 8021d2c:	0010      	movs	r0, r2
 8021d2e:	4798      	blx	r3
 8021d30:	e001      	b.n	8021d36 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8021d32:	2302      	movs	r3, #2
 8021d34:	e000      	b.n	8021d38 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8021d36:	2300      	movs	r3, #0
}
 8021d38:	0018      	movs	r0, r3
 8021d3a:	46bd      	mov	sp, r7
 8021d3c:	b006      	add	sp, #24
 8021d3e:	bd80      	pop	{r7, pc}

08021d40 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021d40:	b580      	push	{r7, lr}
 8021d42:	b086      	sub	sp, #24
 8021d44:	af00      	add	r7, sp, #0
 8021d46:	60f8      	str	r0, [r7, #12]
 8021d48:	607a      	str	r2, [r7, #4]
 8021d4a:	200b      	movs	r0, #11
 8021d4c:	183b      	adds	r3, r7, r0
 8021d4e:	1c0a      	adds	r2, r1, #0
 8021d50:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021d52:	183b      	adds	r3, r7, r0
 8021d54:	781b      	ldrb	r3, [r3, #0]
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d000      	beq.n	8021d5c <USBD_LL_DataInStage+0x1c>
 8021d5a:	e08e      	b.n	8021e7a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8021d5c:	68fb      	ldr	r3, [r7, #12]
 8021d5e:	3314      	adds	r3, #20
 8021d60:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021d62:	68fa      	ldr	r2, [r7, #12]
 8021d64:	23a5      	movs	r3, #165	@ 0xa5
 8021d66:	009b      	lsls	r3, r3, #2
 8021d68:	58d3      	ldr	r3, [r2, r3]
 8021d6a:	2b02      	cmp	r3, #2
 8021d6c:	d164      	bne.n	8021e38 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8021d6e:	697b      	ldr	r3, [r7, #20]
 8021d70:	68da      	ldr	r2, [r3, #12]
 8021d72:	697b      	ldr	r3, [r7, #20]
 8021d74:	691b      	ldr	r3, [r3, #16]
 8021d76:	429a      	cmp	r2, r3
 8021d78:	d915      	bls.n	8021da6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8021d7a:	697b      	ldr	r3, [r7, #20]
 8021d7c:	68da      	ldr	r2, [r3, #12]
 8021d7e:	697b      	ldr	r3, [r7, #20]
 8021d80:	691b      	ldr	r3, [r3, #16]
 8021d82:	1ad2      	subs	r2, r2, r3
 8021d84:	697b      	ldr	r3, [r7, #20]
 8021d86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8021d88:	697b      	ldr	r3, [r7, #20]
 8021d8a:	68db      	ldr	r3, [r3, #12]
 8021d8c:	b29a      	uxth	r2, r3
 8021d8e:	6879      	ldr	r1, [r7, #4]
 8021d90:	68fb      	ldr	r3, [r7, #12]
 8021d92:	0018      	movs	r0, r3
 8021d94:	f000 ffe9 	bl	8022d6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021d98:	68f8      	ldr	r0, [r7, #12]
 8021d9a:	2300      	movs	r3, #0
 8021d9c:	2200      	movs	r2, #0
 8021d9e:	2100      	movs	r1, #0
 8021da0:	f001 fd62 	bl	8023868 <USBD_LL_PrepareReceive>
 8021da4:	e059      	b.n	8021e5a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021da6:	697b      	ldr	r3, [r7, #20]
 8021da8:	689a      	ldr	r2, [r3, #8]
 8021daa:	697b      	ldr	r3, [r7, #20]
 8021dac:	691b      	ldr	r3, [r3, #16]
 8021dae:	0019      	movs	r1, r3
 8021db0:	0010      	movs	r0, r2
 8021db2:	f7de fa7d 	bl	80002b0 <__aeabi_uidivmod>
 8021db6:	1e0b      	subs	r3, r1, #0
 8021db8:	d11f      	bne.n	8021dfa <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8021dba:	697b      	ldr	r3, [r7, #20]
 8021dbc:	689a      	ldr	r2, [r3, #8]
 8021dbe:	697b      	ldr	r3, [r7, #20]
 8021dc0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021dc2:	429a      	cmp	r2, r3
 8021dc4:	d319      	bcc.n	8021dfa <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8021dc6:	697b      	ldr	r3, [r7, #20]
 8021dc8:	689a      	ldr	r2, [r3, #8]
 8021dca:	68f9      	ldr	r1, [r7, #12]
 8021dcc:	23a6      	movs	r3, #166	@ 0xa6
 8021dce:	009b      	lsls	r3, r3, #2
 8021dd0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8021dd2:	429a      	cmp	r2, r3
 8021dd4:	d211      	bcs.n	8021dfa <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021dd6:	68fb      	ldr	r3, [r7, #12]
 8021dd8:	2200      	movs	r2, #0
 8021dda:	2100      	movs	r1, #0
 8021ddc:	0018      	movs	r0, r3
 8021dde:	f000 ffc4 	bl	8022d6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8021de2:	68fa      	ldr	r2, [r7, #12]
 8021de4:	23a6      	movs	r3, #166	@ 0xa6
 8021de6:	009b      	lsls	r3, r3, #2
 8021de8:	2100      	movs	r1, #0
 8021dea:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021dec:	68f8      	ldr	r0, [r7, #12]
 8021dee:	2300      	movs	r3, #0
 8021df0:	2200      	movs	r2, #0
 8021df2:	2100      	movs	r1, #0
 8021df4:	f001 fd38 	bl	8023868 <USBD_LL_PrepareReceive>
 8021df8:	e02f      	b.n	8021e5a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8021dfa:	68fa      	ldr	r2, [r7, #12]
 8021dfc:	23ad      	movs	r3, #173	@ 0xad
 8021dfe:	009b      	lsls	r3, r3, #2
 8021e00:	58d3      	ldr	r3, [r2, r3]
 8021e02:	68db      	ldr	r3, [r3, #12]
 8021e04:	2b00      	cmp	r3, #0
 8021e06:	d00d      	beq.n	8021e24 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021e08:	68fa      	ldr	r2, [r7, #12]
 8021e0a:	23a7      	movs	r3, #167	@ 0xa7
 8021e0c:	009b      	lsls	r3, r3, #2
 8021e0e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8021e10:	2b03      	cmp	r3, #3
 8021e12:	d107      	bne.n	8021e24 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8021e14:	68fa      	ldr	r2, [r7, #12]
 8021e16:	23ad      	movs	r3, #173	@ 0xad
 8021e18:	009b      	lsls	r3, r3, #2
 8021e1a:	58d3      	ldr	r3, [r2, r3]
 8021e1c:	68db      	ldr	r3, [r3, #12]
 8021e1e:	68fa      	ldr	r2, [r7, #12]
 8021e20:	0010      	movs	r0, r2
 8021e22:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8021e24:	68fb      	ldr	r3, [r7, #12]
 8021e26:	2180      	movs	r1, #128	@ 0x80
 8021e28:	0018      	movs	r0, r3
 8021e2a:	f001 fc34 	bl	8023696 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8021e2e:	68fb      	ldr	r3, [r7, #12]
 8021e30:	0018      	movs	r0, r3
 8021e32:	f000 fff8 	bl	8022e26 <USBD_CtlReceiveStatus>
 8021e36:	e010      	b.n	8021e5a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021e38:	68fa      	ldr	r2, [r7, #12]
 8021e3a:	23a5      	movs	r3, #165	@ 0xa5
 8021e3c:	009b      	lsls	r3, r3, #2
 8021e3e:	58d3      	ldr	r3, [r2, r3]
 8021e40:	2b04      	cmp	r3, #4
 8021e42:	d005      	beq.n	8021e50 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8021e44:	68fa      	ldr	r2, [r7, #12]
 8021e46:	23a5      	movs	r3, #165	@ 0xa5
 8021e48:	009b      	lsls	r3, r3, #2
 8021e4a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021e4c:	2b00      	cmp	r3, #0
 8021e4e:	d104      	bne.n	8021e5a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8021e50:	68fb      	ldr	r3, [r7, #12]
 8021e52:	2180      	movs	r1, #128	@ 0x80
 8021e54:	0018      	movs	r0, r3
 8021e56:	f001 fc1e 	bl	8023696 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8021e5a:	68fa      	ldr	r2, [r7, #12]
 8021e5c:	23a8      	movs	r3, #168	@ 0xa8
 8021e5e:	009b      	lsls	r3, r3, #2
 8021e60:	5cd3      	ldrb	r3, [r2, r3]
 8021e62:	2b01      	cmp	r3, #1
 8021e64:	d124      	bne.n	8021eb0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8021e66:	68fb      	ldr	r3, [r7, #12]
 8021e68:	0018      	movs	r0, r3
 8021e6a:	f7ff fe43 	bl	8021af4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8021e6e:	68fa      	ldr	r2, [r7, #12]
 8021e70:	23a8      	movs	r3, #168	@ 0xa8
 8021e72:	009b      	lsls	r3, r3, #2
 8021e74:	2100      	movs	r1, #0
 8021e76:	54d1      	strb	r1, [r2, r3]
 8021e78:	e01a      	b.n	8021eb0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8021e7a:	68fa      	ldr	r2, [r7, #12]
 8021e7c:	23ad      	movs	r3, #173	@ 0xad
 8021e7e:	009b      	lsls	r3, r3, #2
 8021e80:	58d3      	ldr	r3, [r2, r3]
 8021e82:	695b      	ldr	r3, [r3, #20]
 8021e84:	2b00      	cmp	r3, #0
 8021e86:	d011      	beq.n	8021eac <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021e88:	68fa      	ldr	r2, [r7, #12]
 8021e8a:	23a7      	movs	r3, #167	@ 0xa7
 8021e8c:	009b      	lsls	r3, r3, #2
 8021e8e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8021e90:	2b03      	cmp	r3, #3
 8021e92:	d10b      	bne.n	8021eac <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8021e94:	68fa      	ldr	r2, [r7, #12]
 8021e96:	23ad      	movs	r3, #173	@ 0xad
 8021e98:	009b      	lsls	r3, r3, #2
 8021e9a:	58d3      	ldr	r3, [r2, r3]
 8021e9c:	695b      	ldr	r3, [r3, #20]
 8021e9e:	220b      	movs	r2, #11
 8021ea0:	18ba      	adds	r2, r7, r2
 8021ea2:	7811      	ldrb	r1, [r2, #0]
 8021ea4:	68fa      	ldr	r2, [r7, #12]
 8021ea6:	0010      	movs	r0, r2
 8021ea8:	4798      	blx	r3
 8021eaa:	e001      	b.n	8021eb0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8021eac:	2302      	movs	r3, #2
 8021eae:	e000      	b.n	8021eb2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8021eb0:	2300      	movs	r3, #0
}
 8021eb2:	0018      	movs	r0, r3
 8021eb4:	46bd      	mov	sp, r7
 8021eb6:	b006      	add	sp, #24
 8021eb8:	bd80      	pop	{r7, pc}

08021eba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8021eba:	b580      	push	{r7, lr}
 8021ebc:	b082      	sub	sp, #8
 8021ebe:	af00      	add	r7, sp, #0
 8021ec0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021ec2:	6878      	ldr	r0, [r7, #4]
 8021ec4:	2340      	movs	r3, #64	@ 0x40
 8021ec6:	2200      	movs	r2, #0
 8021ec8:	2100      	movs	r1, #0
 8021eca:	f001 fb82 	bl	80235d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8021ece:	687a      	ldr	r2, [r7, #4]
 8021ed0:	23ac      	movs	r3, #172	@ 0xac
 8021ed2:	005b      	lsls	r3, r3, #1
 8021ed4:	2101      	movs	r1, #1
 8021ed6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021ed8:	687a      	ldr	r2, [r7, #4]
 8021eda:	23b2      	movs	r3, #178	@ 0xb2
 8021edc:	005b      	lsls	r3, r3, #1
 8021ede:	2140      	movs	r1, #64	@ 0x40
 8021ee0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021ee2:	6878      	ldr	r0, [r7, #4]
 8021ee4:	2340      	movs	r3, #64	@ 0x40
 8021ee6:	2200      	movs	r2, #0
 8021ee8:	2180      	movs	r1, #128	@ 0x80
 8021eea:	f001 fb72 	bl	80235d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8021eee:	687b      	ldr	r3, [r7, #4]
 8021ef0:	2201      	movs	r2, #1
 8021ef2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8021ef4:	687b      	ldr	r3, [r7, #4]
 8021ef6:	2240      	movs	r2, #64	@ 0x40
 8021ef8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021efa:	687a      	ldr	r2, [r7, #4]
 8021efc:	23a7      	movs	r3, #167	@ 0xa7
 8021efe:	009b      	lsls	r3, r3, #2
 8021f00:	2101      	movs	r1, #1
 8021f02:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8021f04:	687a      	ldr	r2, [r7, #4]
 8021f06:	23a5      	movs	r3, #165	@ 0xa5
 8021f08:	009b      	lsls	r3, r3, #2
 8021f0a:	2100      	movs	r1, #0
 8021f0c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8021f0e:	687b      	ldr	r3, [r7, #4]
 8021f10:	2200      	movs	r2, #0
 8021f12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8021f14:	687a      	ldr	r2, [r7, #4]
 8021f16:	23a9      	movs	r3, #169	@ 0xa9
 8021f18:	009b      	lsls	r3, r3, #2
 8021f1a:	2100      	movs	r1, #0
 8021f1c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8021f1e:	687a      	ldr	r2, [r7, #4]
 8021f20:	23ae      	movs	r3, #174	@ 0xae
 8021f22:	009b      	lsls	r3, r3, #2
 8021f24:	58d3      	ldr	r3, [r2, r3]
 8021f26:	2b00      	cmp	r3, #0
 8021f28:	d00a      	beq.n	8021f40 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021f2a:	687a      	ldr	r2, [r7, #4]
 8021f2c:	23ad      	movs	r3, #173	@ 0xad
 8021f2e:	009b      	lsls	r3, r3, #2
 8021f30:	58d3      	ldr	r3, [r2, r3]
 8021f32:	685a      	ldr	r2, [r3, #4]
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	685b      	ldr	r3, [r3, #4]
 8021f38:	b2d9      	uxtb	r1, r3
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	0018      	movs	r0, r3
 8021f3e:	4790      	blx	r2
  }

  return USBD_OK;
 8021f40:	2300      	movs	r3, #0
}
 8021f42:	0018      	movs	r0, r3
 8021f44:	46bd      	mov	sp, r7
 8021f46:	b002      	add	sp, #8
 8021f48:	bd80      	pop	{r7, pc}

08021f4a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8021f4a:	b580      	push	{r7, lr}
 8021f4c:	b082      	sub	sp, #8
 8021f4e:	af00      	add	r7, sp, #0
 8021f50:	6078      	str	r0, [r7, #4]
 8021f52:	000a      	movs	r2, r1
 8021f54:	1cfb      	adds	r3, r7, #3
 8021f56:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8021f58:	687b      	ldr	r3, [r7, #4]
 8021f5a:	1cfa      	adds	r2, r7, #3
 8021f5c:	7812      	ldrb	r2, [r2, #0]
 8021f5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8021f60:	2300      	movs	r3, #0
}
 8021f62:	0018      	movs	r0, r3
 8021f64:	46bd      	mov	sp, r7
 8021f66:	b002      	add	sp, #8
 8021f68:	bd80      	pop	{r7, pc}
	...

08021f6c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8021f6c:	b580      	push	{r7, lr}
 8021f6e:	b082      	sub	sp, #8
 8021f70:	af00      	add	r7, sp, #0
 8021f72:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8021f74:	687a      	ldr	r2, [r7, #4]
 8021f76:	23a7      	movs	r3, #167	@ 0xa7
 8021f78:	009b      	lsls	r3, r3, #2
 8021f7a:	5cd1      	ldrb	r1, [r2, r3]
 8021f7c:	687b      	ldr	r3, [r7, #4]
 8021f7e:	4a06      	ldr	r2, [pc, #24]	@ (8021f98 <USBD_LL_Suspend+0x2c>)
 8021f80:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8021f82:	687a      	ldr	r2, [r7, #4]
 8021f84:	23a7      	movs	r3, #167	@ 0xa7
 8021f86:	009b      	lsls	r3, r3, #2
 8021f88:	2104      	movs	r1, #4
 8021f8a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8021f8c:	2300      	movs	r3, #0
}
 8021f8e:	0018      	movs	r0, r3
 8021f90:	46bd      	mov	sp, r7
 8021f92:	b002      	add	sp, #8
 8021f94:	bd80      	pop	{r7, pc}
 8021f96:	46c0      	nop			@ (mov r8, r8)
 8021f98:	0000029d 	.word	0x0000029d

08021f9c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8021f9c:	b580      	push	{r7, lr}
 8021f9e:	b082      	sub	sp, #8
 8021fa0:	af00      	add	r7, sp, #0
 8021fa2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8021fa4:	687a      	ldr	r2, [r7, #4]
 8021fa6:	23a7      	movs	r3, #167	@ 0xa7
 8021fa8:	009b      	lsls	r3, r3, #2
 8021faa:	5cd3      	ldrb	r3, [r2, r3]
 8021fac:	2b04      	cmp	r3, #4
 8021fae:	d106      	bne.n	8021fbe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8021fb0:	687b      	ldr	r3, [r7, #4]
 8021fb2:	4a05      	ldr	r2, [pc, #20]	@ (8021fc8 <USBD_LL_Resume+0x2c>)
 8021fb4:	5c99      	ldrb	r1, [r3, r2]
 8021fb6:	687a      	ldr	r2, [r7, #4]
 8021fb8:	23a7      	movs	r3, #167	@ 0xa7
 8021fba:	009b      	lsls	r3, r3, #2
 8021fbc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8021fbe:	2300      	movs	r3, #0
}
 8021fc0:	0018      	movs	r0, r3
 8021fc2:	46bd      	mov	sp, r7
 8021fc4:	b002      	add	sp, #8
 8021fc6:	bd80      	pop	{r7, pc}
 8021fc8:	0000029d 	.word	0x0000029d

08021fcc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8021fcc:	b580      	push	{r7, lr}
 8021fce:	b082      	sub	sp, #8
 8021fd0:	af00      	add	r7, sp, #0
 8021fd2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021fd4:	687a      	ldr	r2, [r7, #4]
 8021fd6:	23a7      	movs	r3, #167	@ 0xa7
 8021fd8:	009b      	lsls	r3, r3, #2
 8021fda:	5cd3      	ldrb	r3, [r2, r3]
 8021fdc:	2b03      	cmp	r3, #3
 8021fde:	d10e      	bne.n	8021ffe <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8021fe0:	687a      	ldr	r2, [r7, #4]
 8021fe2:	23ad      	movs	r3, #173	@ 0xad
 8021fe4:	009b      	lsls	r3, r3, #2
 8021fe6:	58d3      	ldr	r3, [r2, r3]
 8021fe8:	69db      	ldr	r3, [r3, #28]
 8021fea:	2b00      	cmp	r3, #0
 8021fec:	d007      	beq.n	8021ffe <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8021fee:	687a      	ldr	r2, [r7, #4]
 8021ff0:	23ad      	movs	r3, #173	@ 0xad
 8021ff2:	009b      	lsls	r3, r3, #2
 8021ff4:	58d3      	ldr	r3, [r2, r3]
 8021ff6:	69db      	ldr	r3, [r3, #28]
 8021ff8:	687a      	ldr	r2, [r7, #4]
 8021ffa:	0010      	movs	r0, r2
 8021ffc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021ffe:	2300      	movs	r3, #0
}
 8022000:	0018      	movs	r0, r3
 8022002:	46bd      	mov	sp, r7
 8022004:	b002      	add	sp, #8
 8022006:	bd80      	pop	{r7, pc}

08022008 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8022008:	b580      	push	{r7, lr}
 802200a:	b084      	sub	sp, #16
 802200c:	af00      	add	r7, sp, #0
 802200e:	6078      	str	r0, [r7, #4]
 8022010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8022012:	230f      	movs	r3, #15
 8022014:	18fb      	adds	r3, r7, r3
 8022016:	2200      	movs	r2, #0
 8022018:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802201a:	683b      	ldr	r3, [r7, #0]
 802201c:	781b      	ldrb	r3, [r3, #0]
 802201e:	001a      	movs	r2, r3
 8022020:	2360      	movs	r3, #96	@ 0x60
 8022022:	4013      	ands	r3, r2
 8022024:	2b40      	cmp	r3, #64	@ 0x40
 8022026:	d004      	beq.n	8022032 <USBD_StdDevReq+0x2a>
 8022028:	d84f      	bhi.n	80220ca <USBD_StdDevReq+0xc2>
 802202a:	2b00      	cmp	r3, #0
 802202c:	d00b      	beq.n	8022046 <USBD_StdDevReq+0x3e>
 802202e:	2b20      	cmp	r3, #32
 8022030:	d14b      	bne.n	80220ca <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8022032:	687a      	ldr	r2, [r7, #4]
 8022034:	23ad      	movs	r3, #173	@ 0xad
 8022036:	009b      	lsls	r3, r3, #2
 8022038:	58d3      	ldr	r3, [r2, r3]
 802203a:	689b      	ldr	r3, [r3, #8]
 802203c:	6839      	ldr	r1, [r7, #0]
 802203e:	687a      	ldr	r2, [r7, #4]
 8022040:	0010      	movs	r0, r2
 8022042:	4798      	blx	r3
      break;
 8022044:	e048      	b.n	80220d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8022046:	683b      	ldr	r3, [r7, #0]
 8022048:	785b      	ldrb	r3, [r3, #1]
 802204a:	2b09      	cmp	r3, #9
 802204c:	d835      	bhi.n	80220ba <USBD_StdDevReq+0xb2>
 802204e:	009a      	lsls	r2, r3, #2
 8022050:	4b25      	ldr	r3, [pc, #148]	@ (80220e8 <USBD_StdDevReq+0xe0>)
 8022052:	18d3      	adds	r3, r2, r3
 8022054:	681b      	ldr	r3, [r3, #0]
 8022056:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8022058:	683a      	ldr	r2, [r7, #0]
 802205a:	687b      	ldr	r3, [r7, #4]
 802205c:	0011      	movs	r1, r2
 802205e:	0018      	movs	r0, r3
 8022060:	f000 fa52 	bl	8022508 <USBD_GetDescriptor>
          break;
 8022064:	e030      	b.n	80220c8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8022066:	683a      	ldr	r2, [r7, #0]
 8022068:	687b      	ldr	r3, [r7, #4]
 802206a:	0011      	movs	r1, r2
 802206c:	0018      	movs	r0, r3
 802206e:	f000 fbfd 	bl	802286c <USBD_SetAddress>
          break;
 8022072:	e029      	b.n	80220c8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8022074:	683a      	ldr	r2, [r7, #0]
 8022076:	687b      	ldr	r3, [r7, #4]
 8022078:	0011      	movs	r1, r2
 802207a:	0018      	movs	r0, r3
 802207c:	f000 fc4a 	bl	8022914 <USBD_SetConfig>
          break;
 8022080:	e022      	b.n	80220c8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8022082:	683a      	ldr	r2, [r7, #0]
 8022084:	687b      	ldr	r3, [r7, #4]
 8022086:	0011      	movs	r1, r2
 8022088:	0018      	movs	r0, r3
 802208a:	f000 fce7 	bl	8022a5c <USBD_GetConfig>
          break;
 802208e:	e01b      	b.n	80220c8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8022090:	683a      	ldr	r2, [r7, #0]
 8022092:	687b      	ldr	r3, [r7, #4]
 8022094:	0011      	movs	r1, r2
 8022096:	0018      	movs	r0, r3
 8022098:	f000 fd1b 	bl	8022ad2 <USBD_GetStatus>
          break;
 802209c:	e014      	b.n	80220c8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 802209e:	683a      	ldr	r2, [r7, #0]
 80220a0:	687b      	ldr	r3, [r7, #4]
 80220a2:	0011      	movs	r1, r2
 80220a4:	0018      	movs	r0, r3
 80220a6:	f000 fd4e 	bl	8022b46 <USBD_SetFeature>
          break;
 80220aa:	e00d      	b.n	80220c8 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80220ac:	683a      	ldr	r2, [r7, #0]
 80220ae:	687b      	ldr	r3, [r7, #4]
 80220b0:	0011      	movs	r1, r2
 80220b2:	0018      	movs	r0, r3
 80220b4:	f000 fd5d 	bl	8022b72 <USBD_ClrFeature>
          break;
 80220b8:	e006      	b.n	80220c8 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80220ba:	683a      	ldr	r2, [r7, #0]
 80220bc:	687b      	ldr	r3, [r7, #4]
 80220be:	0011      	movs	r1, r2
 80220c0:	0018      	movs	r0, r3
 80220c2:	f000 fdb4 	bl	8022c2e <USBD_CtlError>
          break;
 80220c6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80220c8:	e006      	b.n	80220d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80220ca:	683a      	ldr	r2, [r7, #0]
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	0011      	movs	r1, r2
 80220d0:	0018      	movs	r0, r3
 80220d2:	f000 fdac 	bl	8022c2e <USBD_CtlError>
      break;
 80220d6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80220d8:	230f      	movs	r3, #15
 80220da:	18fb      	adds	r3, r7, r3
 80220dc:	781b      	ldrb	r3, [r3, #0]
}
 80220de:	0018      	movs	r0, r3
 80220e0:	46bd      	mov	sp, r7
 80220e2:	b004      	add	sp, #16
 80220e4:	bd80      	pop	{r7, pc}
 80220e6:	46c0      	nop			@ (mov r8, r8)
 80220e8:	0802e484 	.word	0x0802e484

080220ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80220ec:	b5b0      	push	{r4, r5, r7, lr}
 80220ee:	b084      	sub	sp, #16
 80220f0:	af00      	add	r7, sp, #0
 80220f2:	6078      	str	r0, [r7, #4]
 80220f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80220f6:	230f      	movs	r3, #15
 80220f8:	18fb      	adds	r3, r7, r3
 80220fa:	2200      	movs	r2, #0
 80220fc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80220fe:	683b      	ldr	r3, [r7, #0]
 8022100:	781b      	ldrb	r3, [r3, #0]
 8022102:	001a      	movs	r2, r3
 8022104:	2360      	movs	r3, #96	@ 0x60
 8022106:	4013      	ands	r3, r2
 8022108:	2b40      	cmp	r3, #64	@ 0x40
 802210a:	d004      	beq.n	8022116 <USBD_StdItfReq+0x2a>
 802210c:	d839      	bhi.n	8022182 <USBD_StdItfReq+0x96>
 802210e:	2b00      	cmp	r3, #0
 8022110:	d001      	beq.n	8022116 <USBD_StdItfReq+0x2a>
 8022112:	2b20      	cmp	r3, #32
 8022114:	d135      	bne.n	8022182 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8022116:	687a      	ldr	r2, [r7, #4]
 8022118:	23a7      	movs	r3, #167	@ 0xa7
 802211a:	009b      	lsls	r3, r3, #2
 802211c:	5cd3      	ldrb	r3, [r2, r3]
 802211e:	3b01      	subs	r3, #1
 8022120:	2b02      	cmp	r3, #2
 8022122:	d825      	bhi.n	8022170 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8022124:	683b      	ldr	r3, [r7, #0]
 8022126:	889b      	ldrh	r3, [r3, #4]
 8022128:	b2db      	uxtb	r3, r3
 802212a:	2b01      	cmp	r3, #1
 802212c:	d819      	bhi.n	8022162 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802212e:	687a      	ldr	r2, [r7, #4]
 8022130:	23ad      	movs	r3, #173	@ 0xad
 8022132:	009b      	lsls	r3, r3, #2
 8022134:	58d3      	ldr	r3, [r2, r3]
 8022136:	689b      	ldr	r3, [r3, #8]
 8022138:	250f      	movs	r5, #15
 802213a:	197c      	adds	r4, r7, r5
 802213c:	6839      	ldr	r1, [r7, #0]
 802213e:	687a      	ldr	r2, [r7, #4]
 8022140:	0010      	movs	r0, r2
 8022142:	4798      	blx	r3
 8022144:	0003      	movs	r3, r0
 8022146:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8022148:	683b      	ldr	r3, [r7, #0]
 802214a:	88db      	ldrh	r3, [r3, #6]
 802214c:	2b00      	cmp	r3, #0
 802214e:	d116      	bne.n	802217e <USBD_StdItfReq+0x92>
 8022150:	197b      	adds	r3, r7, r5
 8022152:	781b      	ldrb	r3, [r3, #0]
 8022154:	2b00      	cmp	r3, #0
 8022156:	d112      	bne.n	802217e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8022158:	687b      	ldr	r3, [r7, #4]
 802215a:	0018      	movs	r0, r3
 802215c:	f000 fe4f 	bl	8022dfe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8022160:	e00d      	b.n	802217e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8022162:	683a      	ldr	r2, [r7, #0]
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	0011      	movs	r1, r2
 8022168:	0018      	movs	r0, r3
 802216a:	f000 fd60 	bl	8022c2e <USBD_CtlError>
          break;
 802216e:	e006      	b.n	802217e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8022170:	683a      	ldr	r2, [r7, #0]
 8022172:	687b      	ldr	r3, [r7, #4]
 8022174:	0011      	movs	r1, r2
 8022176:	0018      	movs	r0, r3
 8022178:	f000 fd59 	bl	8022c2e <USBD_CtlError>
          break;
 802217c:	e000      	b.n	8022180 <USBD_StdItfReq+0x94>
          break;
 802217e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022180:	e006      	b.n	8022190 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8022182:	683a      	ldr	r2, [r7, #0]
 8022184:	687b      	ldr	r3, [r7, #4]
 8022186:	0011      	movs	r1, r2
 8022188:	0018      	movs	r0, r3
 802218a:	f000 fd50 	bl	8022c2e <USBD_CtlError>
      break;
 802218e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8022190:	2300      	movs	r3, #0
}
 8022192:	0018      	movs	r0, r3
 8022194:	46bd      	mov	sp, r7
 8022196:	b004      	add	sp, #16
 8022198:	bdb0      	pop	{r4, r5, r7, pc}

0802219a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 802219a:	b5b0      	push	{r4, r5, r7, lr}
 802219c:	b084      	sub	sp, #16
 802219e:	af00      	add	r7, sp, #0
 80221a0:	6078      	str	r0, [r7, #4]
 80221a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80221a4:	230f      	movs	r3, #15
 80221a6:	18fb      	adds	r3, r7, r3
 80221a8:	2200      	movs	r2, #0
 80221aa:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80221ac:	683b      	ldr	r3, [r7, #0]
 80221ae:	889a      	ldrh	r2, [r3, #4]
 80221b0:	230e      	movs	r3, #14
 80221b2:	18fb      	adds	r3, r7, r3
 80221b4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80221b6:	683b      	ldr	r3, [r7, #0]
 80221b8:	781b      	ldrb	r3, [r3, #0]
 80221ba:	001a      	movs	r2, r3
 80221bc:	2360      	movs	r3, #96	@ 0x60
 80221be:	4013      	ands	r3, r2
 80221c0:	2b40      	cmp	r3, #64	@ 0x40
 80221c2:	d006      	beq.n	80221d2 <USBD_StdEPReq+0x38>
 80221c4:	d900      	bls.n	80221c8 <USBD_StdEPReq+0x2e>
 80221c6:	e190      	b.n	80224ea <USBD_StdEPReq+0x350>
 80221c8:	2b00      	cmp	r3, #0
 80221ca:	d00c      	beq.n	80221e6 <USBD_StdEPReq+0x4c>
 80221cc:	2b20      	cmp	r3, #32
 80221ce:	d000      	beq.n	80221d2 <USBD_StdEPReq+0x38>
 80221d0:	e18b      	b.n	80224ea <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80221d2:	687a      	ldr	r2, [r7, #4]
 80221d4:	23ad      	movs	r3, #173	@ 0xad
 80221d6:	009b      	lsls	r3, r3, #2
 80221d8:	58d3      	ldr	r3, [r2, r3]
 80221da:	689b      	ldr	r3, [r3, #8]
 80221dc:	6839      	ldr	r1, [r7, #0]
 80221de:	687a      	ldr	r2, [r7, #4]
 80221e0:	0010      	movs	r0, r2
 80221e2:	4798      	blx	r3
      break;
 80221e4:	e188      	b.n	80224f8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80221e6:	683b      	ldr	r3, [r7, #0]
 80221e8:	781b      	ldrb	r3, [r3, #0]
 80221ea:	001a      	movs	r2, r3
 80221ec:	2360      	movs	r3, #96	@ 0x60
 80221ee:	4013      	ands	r3, r2
 80221f0:	2b20      	cmp	r3, #32
 80221f2:	d10f      	bne.n	8022214 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80221f4:	687a      	ldr	r2, [r7, #4]
 80221f6:	23ad      	movs	r3, #173	@ 0xad
 80221f8:	009b      	lsls	r3, r3, #2
 80221fa:	58d3      	ldr	r3, [r2, r3]
 80221fc:	689b      	ldr	r3, [r3, #8]
 80221fe:	250f      	movs	r5, #15
 8022200:	197c      	adds	r4, r7, r5
 8022202:	6839      	ldr	r1, [r7, #0]
 8022204:	687a      	ldr	r2, [r7, #4]
 8022206:	0010      	movs	r0, r2
 8022208:	4798      	blx	r3
 802220a:	0003      	movs	r3, r0
 802220c:	7023      	strb	r3, [r4, #0]

        return ret;
 802220e:	197b      	adds	r3, r7, r5
 8022210:	781b      	ldrb	r3, [r3, #0]
 8022212:	e174      	b.n	80224fe <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8022214:	683b      	ldr	r3, [r7, #0]
 8022216:	785b      	ldrb	r3, [r3, #1]
 8022218:	2b03      	cmp	r3, #3
 802221a:	d007      	beq.n	802222c <USBD_StdEPReq+0x92>
 802221c:	dd00      	ble.n	8022220 <USBD_StdEPReq+0x86>
 802221e:	e15c      	b.n	80224da <USBD_StdEPReq+0x340>
 8022220:	2b00      	cmp	r3, #0
 8022222:	d100      	bne.n	8022226 <USBD_StdEPReq+0x8c>
 8022224:	e092      	b.n	802234c <USBD_StdEPReq+0x1b2>
 8022226:	2b01      	cmp	r3, #1
 8022228:	d04b      	beq.n	80222c2 <USBD_StdEPReq+0x128>
 802222a:	e156      	b.n	80224da <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 802222c:	687a      	ldr	r2, [r7, #4]
 802222e:	23a7      	movs	r3, #167	@ 0xa7
 8022230:	009b      	lsls	r3, r3, #2
 8022232:	5cd3      	ldrb	r3, [r2, r3]
 8022234:	2b02      	cmp	r3, #2
 8022236:	d002      	beq.n	802223e <USBD_StdEPReq+0xa4>
 8022238:	2b03      	cmp	r3, #3
 802223a:	d01d      	beq.n	8022278 <USBD_StdEPReq+0xde>
 802223c:	e039      	b.n	80222b2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802223e:	220e      	movs	r2, #14
 8022240:	18bb      	adds	r3, r7, r2
 8022242:	781b      	ldrb	r3, [r3, #0]
 8022244:	2b00      	cmp	r3, #0
 8022246:	d010      	beq.n	802226a <USBD_StdEPReq+0xd0>
 8022248:	18bb      	adds	r3, r7, r2
 802224a:	781b      	ldrb	r3, [r3, #0]
 802224c:	2b80      	cmp	r3, #128	@ 0x80
 802224e:	d00c      	beq.n	802226a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8022250:	18bb      	adds	r3, r7, r2
 8022252:	781a      	ldrb	r2, [r3, #0]
 8022254:	687b      	ldr	r3, [r7, #4]
 8022256:	0011      	movs	r1, r2
 8022258:	0018      	movs	r0, r3
 802225a:	f001 fa1c 	bl	8023696 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 802225e:	687b      	ldr	r3, [r7, #4]
 8022260:	2180      	movs	r1, #128	@ 0x80
 8022262:	0018      	movs	r0, r3
 8022264:	f001 fa17 	bl	8023696 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8022268:	e02a      	b.n	80222c0 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 802226a:	683a      	ldr	r2, [r7, #0]
 802226c:	687b      	ldr	r3, [r7, #4]
 802226e:	0011      	movs	r1, r2
 8022270:	0018      	movs	r0, r3
 8022272:	f000 fcdc 	bl	8022c2e <USBD_CtlError>
              break;
 8022276:	e023      	b.n	80222c0 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8022278:	683b      	ldr	r3, [r7, #0]
 802227a:	885b      	ldrh	r3, [r3, #2]
 802227c:	2b00      	cmp	r3, #0
 802227e:	d113      	bne.n	80222a8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8022280:	220e      	movs	r2, #14
 8022282:	18bb      	adds	r3, r7, r2
 8022284:	781b      	ldrb	r3, [r3, #0]
 8022286:	2b00      	cmp	r3, #0
 8022288:	d00e      	beq.n	80222a8 <USBD_StdEPReq+0x10e>
 802228a:	18bb      	adds	r3, r7, r2
 802228c:	781b      	ldrb	r3, [r3, #0]
 802228e:	2b80      	cmp	r3, #128	@ 0x80
 8022290:	d00a      	beq.n	80222a8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8022292:	683b      	ldr	r3, [r7, #0]
 8022294:	88db      	ldrh	r3, [r3, #6]
 8022296:	2b00      	cmp	r3, #0
 8022298:	d106      	bne.n	80222a8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 802229a:	18bb      	adds	r3, r7, r2
 802229c:	781a      	ldrb	r2, [r3, #0]
 802229e:	687b      	ldr	r3, [r7, #4]
 80222a0:	0011      	movs	r1, r2
 80222a2:	0018      	movs	r0, r3
 80222a4:	f001 f9f7 	bl	8023696 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80222a8:	687b      	ldr	r3, [r7, #4]
 80222aa:	0018      	movs	r0, r3
 80222ac:	f000 fda7 	bl	8022dfe <USBD_CtlSendStatus>

              break;
 80222b0:	e006      	b.n	80222c0 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80222b2:	683a      	ldr	r2, [r7, #0]
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	0011      	movs	r1, r2
 80222b8:	0018      	movs	r0, r3
 80222ba:	f000 fcb8 	bl	8022c2e <USBD_CtlError>
              break;
 80222be:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80222c0:	e112      	b.n	80224e8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80222c2:	687a      	ldr	r2, [r7, #4]
 80222c4:	23a7      	movs	r3, #167	@ 0xa7
 80222c6:	009b      	lsls	r3, r3, #2
 80222c8:	5cd3      	ldrb	r3, [r2, r3]
 80222ca:	2b02      	cmp	r3, #2
 80222cc:	d002      	beq.n	80222d4 <USBD_StdEPReq+0x13a>
 80222ce:	2b03      	cmp	r3, #3
 80222d0:	d01d      	beq.n	802230e <USBD_StdEPReq+0x174>
 80222d2:	e032      	b.n	802233a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80222d4:	220e      	movs	r2, #14
 80222d6:	18bb      	adds	r3, r7, r2
 80222d8:	781b      	ldrb	r3, [r3, #0]
 80222da:	2b00      	cmp	r3, #0
 80222dc:	d010      	beq.n	8022300 <USBD_StdEPReq+0x166>
 80222de:	18bb      	adds	r3, r7, r2
 80222e0:	781b      	ldrb	r3, [r3, #0]
 80222e2:	2b80      	cmp	r3, #128	@ 0x80
 80222e4:	d00c      	beq.n	8022300 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80222e6:	18bb      	adds	r3, r7, r2
 80222e8:	781a      	ldrb	r2, [r3, #0]
 80222ea:	687b      	ldr	r3, [r7, #4]
 80222ec:	0011      	movs	r1, r2
 80222ee:	0018      	movs	r0, r3
 80222f0:	f001 f9d1 	bl	8023696 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80222f4:	687b      	ldr	r3, [r7, #4]
 80222f6:	2180      	movs	r1, #128	@ 0x80
 80222f8:	0018      	movs	r0, r3
 80222fa:	f001 f9cc 	bl	8023696 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80222fe:	e024      	b.n	802234a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8022300:	683a      	ldr	r2, [r7, #0]
 8022302:	687b      	ldr	r3, [r7, #4]
 8022304:	0011      	movs	r1, r2
 8022306:	0018      	movs	r0, r3
 8022308:	f000 fc91 	bl	8022c2e <USBD_CtlError>
              break;
 802230c:	e01d      	b.n	802234a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802230e:	683b      	ldr	r3, [r7, #0]
 8022310:	885b      	ldrh	r3, [r3, #2]
 8022312:	2b00      	cmp	r3, #0
 8022314:	d118      	bne.n	8022348 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8022316:	210e      	movs	r1, #14
 8022318:	187b      	adds	r3, r7, r1
 802231a:	781b      	ldrb	r3, [r3, #0]
 802231c:	227f      	movs	r2, #127	@ 0x7f
 802231e:	4013      	ands	r3, r2
 8022320:	d006      	beq.n	8022330 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8022322:	187b      	adds	r3, r7, r1
 8022324:	781a      	ldrb	r2, [r3, #0]
 8022326:	687b      	ldr	r3, [r7, #4]
 8022328:	0011      	movs	r1, r2
 802232a:	0018      	movs	r0, r3
 802232c:	f001 f9de 	bl	80236ec <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8022330:	687b      	ldr	r3, [r7, #4]
 8022332:	0018      	movs	r0, r3
 8022334:	f000 fd63 	bl	8022dfe <USBD_CtlSendStatus>
              }
              break;
 8022338:	e006      	b.n	8022348 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 802233a:	683a      	ldr	r2, [r7, #0]
 802233c:	687b      	ldr	r3, [r7, #4]
 802233e:	0011      	movs	r1, r2
 8022340:	0018      	movs	r0, r3
 8022342:	f000 fc74 	bl	8022c2e <USBD_CtlError>
              break;
 8022346:	e000      	b.n	802234a <USBD_StdEPReq+0x1b0>
              break;
 8022348:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 802234a:	e0cd      	b.n	80224e8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 802234c:	687a      	ldr	r2, [r7, #4]
 802234e:	23a7      	movs	r3, #167	@ 0xa7
 8022350:	009b      	lsls	r3, r3, #2
 8022352:	5cd3      	ldrb	r3, [r2, r3]
 8022354:	2b02      	cmp	r3, #2
 8022356:	d002      	beq.n	802235e <USBD_StdEPReq+0x1c4>
 8022358:	2b03      	cmp	r3, #3
 802235a:	d03c      	beq.n	80223d6 <USBD_StdEPReq+0x23c>
 802235c:	e0b5      	b.n	80224ca <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802235e:	220e      	movs	r2, #14
 8022360:	18bb      	adds	r3, r7, r2
 8022362:	781b      	ldrb	r3, [r3, #0]
 8022364:	2b00      	cmp	r3, #0
 8022366:	d00a      	beq.n	802237e <USBD_StdEPReq+0x1e4>
 8022368:	18bb      	adds	r3, r7, r2
 802236a:	781b      	ldrb	r3, [r3, #0]
 802236c:	2b80      	cmp	r3, #128	@ 0x80
 802236e:	d006      	beq.n	802237e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8022370:	683a      	ldr	r2, [r7, #0]
 8022372:	687b      	ldr	r3, [r7, #4]
 8022374:	0011      	movs	r1, r2
 8022376:	0018      	movs	r0, r3
 8022378:	f000 fc59 	bl	8022c2e <USBD_CtlError>
                break;
 802237c:	e0ac      	b.n	80224d8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802237e:	220e      	movs	r2, #14
 8022380:	18bb      	adds	r3, r7, r2
 8022382:	781b      	ldrb	r3, [r3, #0]
 8022384:	b25b      	sxtb	r3, r3
 8022386:	2b00      	cmp	r3, #0
 8022388:	da0c      	bge.n	80223a4 <USBD_StdEPReq+0x20a>
 802238a:	18bb      	adds	r3, r7, r2
 802238c:	781b      	ldrb	r3, [r3, #0]
 802238e:	227f      	movs	r2, #127	@ 0x7f
 8022390:	401a      	ands	r2, r3
 8022392:	0013      	movs	r3, r2
 8022394:	009b      	lsls	r3, r3, #2
 8022396:	189b      	adds	r3, r3, r2
 8022398:	009b      	lsls	r3, r3, #2
 802239a:	3310      	adds	r3, #16
 802239c:	687a      	ldr	r2, [r7, #4]
 802239e:	18d3      	adds	r3, r2, r3
 80223a0:	3304      	adds	r3, #4
 80223a2:	e00d      	b.n	80223c0 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80223a4:	230e      	movs	r3, #14
 80223a6:	18fb      	adds	r3, r7, r3
 80223a8:	781b      	ldrb	r3, [r3, #0]
 80223aa:	227f      	movs	r2, #127	@ 0x7f
 80223ac:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80223ae:	0013      	movs	r3, r2
 80223b0:	009b      	lsls	r3, r3, #2
 80223b2:	189b      	adds	r3, r3, r2
 80223b4:	009b      	lsls	r3, r3, #2
 80223b6:	3351      	adds	r3, #81	@ 0x51
 80223b8:	33ff      	adds	r3, #255	@ 0xff
 80223ba:	687a      	ldr	r2, [r7, #4]
 80223bc:	18d3      	adds	r3, r2, r3
 80223be:	3304      	adds	r3, #4
 80223c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80223c2:	68bb      	ldr	r3, [r7, #8]
 80223c4:	2200      	movs	r2, #0
 80223c6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80223c8:	68b9      	ldr	r1, [r7, #8]
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	2202      	movs	r2, #2
 80223ce:	0018      	movs	r0, r3
 80223d0:	f000 fcab 	bl	8022d2a <USBD_CtlSendData>
              break;
 80223d4:	e080      	b.n	80224d8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80223d6:	220e      	movs	r2, #14
 80223d8:	18bb      	adds	r3, r7, r2
 80223da:	781b      	ldrb	r3, [r3, #0]
 80223dc:	b25b      	sxtb	r3, r3
 80223de:	2b00      	cmp	r3, #0
 80223e0:	da14      	bge.n	802240c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80223e2:	18bb      	adds	r3, r7, r2
 80223e4:	781b      	ldrb	r3, [r3, #0]
 80223e6:	220f      	movs	r2, #15
 80223e8:	401a      	ands	r2, r3
 80223ea:	6879      	ldr	r1, [r7, #4]
 80223ec:	0013      	movs	r3, r2
 80223ee:	009b      	lsls	r3, r3, #2
 80223f0:	189b      	adds	r3, r3, r2
 80223f2:	009b      	lsls	r3, r3, #2
 80223f4:	18cb      	adds	r3, r1, r3
 80223f6:	3318      	adds	r3, #24
 80223f8:	681b      	ldr	r3, [r3, #0]
 80223fa:	2b00      	cmp	r3, #0
 80223fc:	d11e      	bne.n	802243c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80223fe:	683a      	ldr	r2, [r7, #0]
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	0011      	movs	r1, r2
 8022404:	0018      	movs	r0, r3
 8022406:	f000 fc12 	bl	8022c2e <USBD_CtlError>
                  break;
 802240a:	e065      	b.n	80224d8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802240c:	230e      	movs	r3, #14
 802240e:	18fb      	adds	r3, r7, r3
 8022410:	781b      	ldrb	r3, [r3, #0]
 8022412:	220f      	movs	r2, #15
 8022414:	401a      	ands	r2, r3
 8022416:	6878      	ldr	r0, [r7, #4]
 8022418:	23ac      	movs	r3, #172	@ 0xac
 802241a:	0059      	lsls	r1, r3, #1
 802241c:	0013      	movs	r3, r2
 802241e:	009b      	lsls	r3, r3, #2
 8022420:	189b      	adds	r3, r3, r2
 8022422:	009b      	lsls	r3, r3, #2
 8022424:	18c3      	adds	r3, r0, r3
 8022426:	185b      	adds	r3, r3, r1
 8022428:	681b      	ldr	r3, [r3, #0]
 802242a:	2b00      	cmp	r3, #0
 802242c:	d106      	bne.n	802243c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 802242e:	683a      	ldr	r2, [r7, #0]
 8022430:	687b      	ldr	r3, [r7, #4]
 8022432:	0011      	movs	r1, r2
 8022434:	0018      	movs	r0, r3
 8022436:	f000 fbfa 	bl	8022c2e <USBD_CtlError>
                  break;
 802243a:	e04d      	b.n	80224d8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802243c:	220e      	movs	r2, #14
 802243e:	18bb      	adds	r3, r7, r2
 8022440:	781b      	ldrb	r3, [r3, #0]
 8022442:	b25b      	sxtb	r3, r3
 8022444:	2b00      	cmp	r3, #0
 8022446:	da0c      	bge.n	8022462 <USBD_StdEPReq+0x2c8>
 8022448:	18bb      	adds	r3, r7, r2
 802244a:	781b      	ldrb	r3, [r3, #0]
 802244c:	227f      	movs	r2, #127	@ 0x7f
 802244e:	401a      	ands	r2, r3
 8022450:	0013      	movs	r3, r2
 8022452:	009b      	lsls	r3, r3, #2
 8022454:	189b      	adds	r3, r3, r2
 8022456:	009b      	lsls	r3, r3, #2
 8022458:	3310      	adds	r3, #16
 802245a:	687a      	ldr	r2, [r7, #4]
 802245c:	18d3      	adds	r3, r2, r3
 802245e:	3304      	adds	r3, #4
 8022460:	e00d      	b.n	802247e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8022462:	230e      	movs	r3, #14
 8022464:	18fb      	adds	r3, r7, r3
 8022466:	781b      	ldrb	r3, [r3, #0]
 8022468:	227f      	movs	r2, #127	@ 0x7f
 802246a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802246c:	0013      	movs	r3, r2
 802246e:	009b      	lsls	r3, r3, #2
 8022470:	189b      	adds	r3, r3, r2
 8022472:	009b      	lsls	r3, r3, #2
 8022474:	3351      	adds	r3, #81	@ 0x51
 8022476:	33ff      	adds	r3, #255	@ 0xff
 8022478:	687a      	ldr	r2, [r7, #4]
 802247a:	18d3      	adds	r3, r2, r3
 802247c:	3304      	adds	r3, #4
 802247e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8022480:	220e      	movs	r2, #14
 8022482:	18bb      	adds	r3, r7, r2
 8022484:	781b      	ldrb	r3, [r3, #0]
 8022486:	2b00      	cmp	r3, #0
 8022488:	d003      	beq.n	8022492 <USBD_StdEPReq+0x2f8>
 802248a:	18bb      	adds	r3, r7, r2
 802248c:	781b      	ldrb	r3, [r3, #0]
 802248e:	2b80      	cmp	r3, #128	@ 0x80
 8022490:	d103      	bne.n	802249a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8022492:	68bb      	ldr	r3, [r7, #8]
 8022494:	2200      	movs	r2, #0
 8022496:	601a      	str	r2, [r3, #0]
 8022498:	e010      	b.n	80224bc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 802249a:	230e      	movs	r3, #14
 802249c:	18fb      	adds	r3, r7, r3
 802249e:	781a      	ldrb	r2, [r3, #0]
 80224a0:	687b      	ldr	r3, [r7, #4]
 80224a2:	0011      	movs	r1, r2
 80224a4:	0018      	movs	r0, r3
 80224a6:	f001 f94c 	bl	8023742 <USBD_LL_IsStallEP>
 80224aa:	1e03      	subs	r3, r0, #0
 80224ac:	d003      	beq.n	80224b6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80224ae:	68bb      	ldr	r3, [r7, #8]
 80224b0:	2201      	movs	r2, #1
 80224b2:	601a      	str	r2, [r3, #0]
 80224b4:	e002      	b.n	80224bc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80224b6:	68bb      	ldr	r3, [r7, #8]
 80224b8:	2200      	movs	r2, #0
 80224ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80224bc:	68b9      	ldr	r1, [r7, #8]
 80224be:	687b      	ldr	r3, [r7, #4]
 80224c0:	2202      	movs	r2, #2
 80224c2:	0018      	movs	r0, r3
 80224c4:	f000 fc31 	bl	8022d2a <USBD_CtlSendData>
              break;
 80224c8:	e006      	b.n	80224d8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80224ca:	683a      	ldr	r2, [r7, #0]
 80224cc:	687b      	ldr	r3, [r7, #4]
 80224ce:	0011      	movs	r1, r2
 80224d0:	0018      	movs	r0, r3
 80224d2:	f000 fbac 	bl	8022c2e <USBD_CtlError>
              break;
 80224d6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80224d8:	e006      	b.n	80224e8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80224da:	683a      	ldr	r2, [r7, #0]
 80224dc:	687b      	ldr	r3, [r7, #4]
 80224de:	0011      	movs	r1, r2
 80224e0:	0018      	movs	r0, r3
 80224e2:	f000 fba4 	bl	8022c2e <USBD_CtlError>
          break;
 80224e6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80224e8:	e006      	b.n	80224f8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80224ea:	683a      	ldr	r2, [r7, #0]
 80224ec:	687b      	ldr	r3, [r7, #4]
 80224ee:	0011      	movs	r1, r2
 80224f0:	0018      	movs	r0, r3
 80224f2:	f000 fb9c 	bl	8022c2e <USBD_CtlError>
      break;
 80224f6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80224f8:	230f      	movs	r3, #15
 80224fa:	18fb      	adds	r3, r7, r3
 80224fc:	781b      	ldrb	r3, [r3, #0]
}
 80224fe:	0018      	movs	r0, r3
 8022500:	46bd      	mov	sp, r7
 8022502:	b004      	add	sp, #16
 8022504:	bdb0      	pop	{r4, r5, r7, pc}
	...

08022508 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8022508:	b580      	push	{r7, lr}
 802250a:	b084      	sub	sp, #16
 802250c:	af00      	add	r7, sp, #0
 802250e:	6078      	str	r0, [r7, #4]
 8022510:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8022512:	2308      	movs	r3, #8
 8022514:	18fb      	adds	r3, r7, r3
 8022516:	2200      	movs	r2, #0
 8022518:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 802251a:	2300      	movs	r3, #0
 802251c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802251e:	230b      	movs	r3, #11
 8022520:	18fb      	adds	r3, r7, r3
 8022522:	2200      	movs	r2, #0
 8022524:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8022526:	683b      	ldr	r3, [r7, #0]
 8022528:	885b      	ldrh	r3, [r3, #2]
 802252a:	0a1b      	lsrs	r3, r3, #8
 802252c:	b29b      	uxth	r3, r3
 802252e:	2b07      	cmp	r3, #7
 8022530:	d900      	bls.n	8022534 <USBD_GetDescriptor+0x2c>
 8022532:	e159      	b.n	80227e8 <USBD_GetDescriptor+0x2e0>
 8022534:	009a      	lsls	r2, r3, #2
 8022536:	4bcb      	ldr	r3, [pc, #812]	@ (8022864 <USBD_GetDescriptor+0x35c>)
 8022538:	18d3      	adds	r3, r2, r3
 802253a:	681b      	ldr	r3, [r3, #0]
 802253c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 802253e:	687a      	ldr	r2, [r7, #4]
 8022540:	23ac      	movs	r3, #172	@ 0xac
 8022542:	009b      	lsls	r3, r3, #2
 8022544:	58d3      	ldr	r3, [r2, r3]
 8022546:	681b      	ldr	r3, [r3, #0]
 8022548:	687a      	ldr	r2, [r7, #4]
 802254a:	7c12      	ldrb	r2, [r2, #16]
 802254c:	2108      	movs	r1, #8
 802254e:	1879      	adds	r1, r7, r1
 8022550:	0010      	movs	r0, r2
 8022552:	4798      	blx	r3
 8022554:	0003      	movs	r3, r0
 8022556:	60fb      	str	r3, [r7, #12]
      break;
 8022558:	e153      	b.n	8022802 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802255a:	687b      	ldr	r3, [r7, #4]
 802255c:	7c1b      	ldrb	r3, [r3, #16]
 802255e:	2b00      	cmp	r3, #0
 8022560:	d10f      	bne.n	8022582 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8022562:	687a      	ldr	r2, [r7, #4]
 8022564:	23ad      	movs	r3, #173	@ 0xad
 8022566:	009b      	lsls	r3, r3, #2
 8022568:	58d3      	ldr	r3, [r2, r3]
 802256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802256c:	2208      	movs	r2, #8
 802256e:	18ba      	adds	r2, r7, r2
 8022570:	0010      	movs	r0, r2
 8022572:	4798      	blx	r3
 8022574:	0003      	movs	r3, r0
 8022576:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8022578:	68fb      	ldr	r3, [r7, #12]
 802257a:	3301      	adds	r3, #1
 802257c:	2202      	movs	r2, #2
 802257e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8022580:	e13f      	b.n	8022802 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8022582:	687a      	ldr	r2, [r7, #4]
 8022584:	23ad      	movs	r3, #173	@ 0xad
 8022586:	009b      	lsls	r3, r3, #2
 8022588:	58d3      	ldr	r3, [r2, r3]
 802258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802258c:	2208      	movs	r2, #8
 802258e:	18ba      	adds	r2, r7, r2
 8022590:	0010      	movs	r0, r2
 8022592:	4798      	blx	r3
 8022594:	0003      	movs	r3, r0
 8022596:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8022598:	68fb      	ldr	r3, [r7, #12]
 802259a:	3301      	adds	r3, #1
 802259c:	2202      	movs	r2, #2
 802259e:	701a      	strb	r2, [r3, #0]
      break;
 80225a0:	e12f      	b.n	8022802 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80225a2:	683b      	ldr	r3, [r7, #0]
 80225a4:	885b      	ldrh	r3, [r3, #2]
 80225a6:	b2db      	uxtb	r3, r3
 80225a8:	2b05      	cmp	r3, #5
 80225aa:	d900      	bls.n	80225ae <USBD_GetDescriptor+0xa6>
 80225ac:	e0d0      	b.n	8022750 <USBD_GetDescriptor+0x248>
 80225ae:	009a      	lsls	r2, r3, #2
 80225b0:	4bad      	ldr	r3, [pc, #692]	@ (8022868 <USBD_GetDescriptor+0x360>)
 80225b2:	18d3      	adds	r3, r2, r3
 80225b4:	681b      	ldr	r3, [r3, #0]
 80225b6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80225b8:	687a      	ldr	r2, [r7, #4]
 80225ba:	23ac      	movs	r3, #172	@ 0xac
 80225bc:	009b      	lsls	r3, r3, #2
 80225be:	58d3      	ldr	r3, [r2, r3]
 80225c0:	685b      	ldr	r3, [r3, #4]
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	d00d      	beq.n	80225e2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80225c6:	687a      	ldr	r2, [r7, #4]
 80225c8:	23ac      	movs	r3, #172	@ 0xac
 80225ca:	009b      	lsls	r3, r3, #2
 80225cc:	58d3      	ldr	r3, [r2, r3]
 80225ce:	685b      	ldr	r3, [r3, #4]
 80225d0:	687a      	ldr	r2, [r7, #4]
 80225d2:	7c12      	ldrb	r2, [r2, #16]
 80225d4:	2108      	movs	r1, #8
 80225d6:	1879      	adds	r1, r7, r1
 80225d8:	0010      	movs	r0, r2
 80225da:	4798      	blx	r3
 80225dc:	0003      	movs	r3, r0
 80225de:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80225e0:	e0c3      	b.n	802276a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80225e2:	683a      	ldr	r2, [r7, #0]
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	0011      	movs	r1, r2
 80225e8:	0018      	movs	r0, r3
 80225ea:	f000 fb20 	bl	8022c2e <USBD_CtlError>
            err++;
 80225ee:	210b      	movs	r1, #11
 80225f0:	187b      	adds	r3, r7, r1
 80225f2:	781a      	ldrb	r2, [r3, #0]
 80225f4:	187b      	adds	r3, r7, r1
 80225f6:	3201      	adds	r2, #1
 80225f8:	701a      	strb	r2, [r3, #0]
          break;
 80225fa:	e0b6      	b.n	802276a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80225fc:	687a      	ldr	r2, [r7, #4]
 80225fe:	23ac      	movs	r3, #172	@ 0xac
 8022600:	009b      	lsls	r3, r3, #2
 8022602:	58d3      	ldr	r3, [r2, r3]
 8022604:	689b      	ldr	r3, [r3, #8]
 8022606:	2b00      	cmp	r3, #0
 8022608:	d00d      	beq.n	8022626 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 802260a:	687a      	ldr	r2, [r7, #4]
 802260c:	23ac      	movs	r3, #172	@ 0xac
 802260e:	009b      	lsls	r3, r3, #2
 8022610:	58d3      	ldr	r3, [r2, r3]
 8022612:	689b      	ldr	r3, [r3, #8]
 8022614:	687a      	ldr	r2, [r7, #4]
 8022616:	7c12      	ldrb	r2, [r2, #16]
 8022618:	2108      	movs	r1, #8
 802261a:	1879      	adds	r1, r7, r1
 802261c:	0010      	movs	r0, r2
 802261e:	4798      	blx	r3
 8022620:	0003      	movs	r3, r0
 8022622:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022624:	e0a1      	b.n	802276a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022626:	683a      	ldr	r2, [r7, #0]
 8022628:	687b      	ldr	r3, [r7, #4]
 802262a:	0011      	movs	r1, r2
 802262c:	0018      	movs	r0, r3
 802262e:	f000 fafe 	bl	8022c2e <USBD_CtlError>
            err++;
 8022632:	210b      	movs	r1, #11
 8022634:	187b      	adds	r3, r7, r1
 8022636:	781a      	ldrb	r2, [r3, #0]
 8022638:	187b      	adds	r3, r7, r1
 802263a:	3201      	adds	r2, #1
 802263c:	701a      	strb	r2, [r3, #0]
          break;
 802263e:	e094      	b.n	802276a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8022640:	687a      	ldr	r2, [r7, #4]
 8022642:	23ac      	movs	r3, #172	@ 0xac
 8022644:	009b      	lsls	r3, r3, #2
 8022646:	58d3      	ldr	r3, [r2, r3]
 8022648:	68db      	ldr	r3, [r3, #12]
 802264a:	2b00      	cmp	r3, #0
 802264c:	d00d      	beq.n	802266a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 802264e:	687a      	ldr	r2, [r7, #4]
 8022650:	23ac      	movs	r3, #172	@ 0xac
 8022652:	009b      	lsls	r3, r3, #2
 8022654:	58d3      	ldr	r3, [r2, r3]
 8022656:	68db      	ldr	r3, [r3, #12]
 8022658:	687a      	ldr	r2, [r7, #4]
 802265a:	7c12      	ldrb	r2, [r2, #16]
 802265c:	2108      	movs	r1, #8
 802265e:	1879      	adds	r1, r7, r1
 8022660:	0010      	movs	r0, r2
 8022662:	4798      	blx	r3
 8022664:	0003      	movs	r3, r0
 8022666:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022668:	e07f      	b.n	802276a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802266a:	683a      	ldr	r2, [r7, #0]
 802266c:	687b      	ldr	r3, [r7, #4]
 802266e:	0011      	movs	r1, r2
 8022670:	0018      	movs	r0, r3
 8022672:	f000 fadc 	bl	8022c2e <USBD_CtlError>
            err++;
 8022676:	210b      	movs	r1, #11
 8022678:	187b      	adds	r3, r7, r1
 802267a:	781a      	ldrb	r2, [r3, #0]
 802267c:	187b      	adds	r3, r7, r1
 802267e:	3201      	adds	r2, #1
 8022680:	701a      	strb	r2, [r3, #0]
          break;
 8022682:	e072      	b.n	802276a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8022684:	687a      	ldr	r2, [r7, #4]
 8022686:	23ac      	movs	r3, #172	@ 0xac
 8022688:	009b      	lsls	r3, r3, #2
 802268a:	58d3      	ldr	r3, [r2, r3]
 802268c:	691b      	ldr	r3, [r3, #16]
 802268e:	2b00      	cmp	r3, #0
 8022690:	d00d      	beq.n	80226ae <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8022692:	687a      	ldr	r2, [r7, #4]
 8022694:	23ac      	movs	r3, #172	@ 0xac
 8022696:	009b      	lsls	r3, r3, #2
 8022698:	58d3      	ldr	r3, [r2, r3]
 802269a:	691b      	ldr	r3, [r3, #16]
 802269c:	687a      	ldr	r2, [r7, #4]
 802269e:	7c12      	ldrb	r2, [r2, #16]
 80226a0:	2108      	movs	r1, #8
 80226a2:	1879      	adds	r1, r7, r1
 80226a4:	0010      	movs	r0, r2
 80226a6:	4798      	blx	r3
 80226a8:	0003      	movs	r3, r0
 80226aa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80226ac:	e05d      	b.n	802276a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80226ae:	683a      	ldr	r2, [r7, #0]
 80226b0:	687b      	ldr	r3, [r7, #4]
 80226b2:	0011      	movs	r1, r2
 80226b4:	0018      	movs	r0, r3
 80226b6:	f000 faba 	bl	8022c2e <USBD_CtlError>
            err++;
 80226ba:	210b      	movs	r1, #11
 80226bc:	187b      	adds	r3, r7, r1
 80226be:	781a      	ldrb	r2, [r3, #0]
 80226c0:	187b      	adds	r3, r7, r1
 80226c2:	3201      	adds	r2, #1
 80226c4:	701a      	strb	r2, [r3, #0]
          break;
 80226c6:	e050      	b.n	802276a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80226c8:	687a      	ldr	r2, [r7, #4]
 80226ca:	23ac      	movs	r3, #172	@ 0xac
 80226cc:	009b      	lsls	r3, r3, #2
 80226ce:	58d3      	ldr	r3, [r2, r3]
 80226d0:	695b      	ldr	r3, [r3, #20]
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	d00d      	beq.n	80226f2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80226d6:	687a      	ldr	r2, [r7, #4]
 80226d8:	23ac      	movs	r3, #172	@ 0xac
 80226da:	009b      	lsls	r3, r3, #2
 80226dc:	58d3      	ldr	r3, [r2, r3]
 80226de:	695b      	ldr	r3, [r3, #20]
 80226e0:	687a      	ldr	r2, [r7, #4]
 80226e2:	7c12      	ldrb	r2, [r2, #16]
 80226e4:	2108      	movs	r1, #8
 80226e6:	1879      	adds	r1, r7, r1
 80226e8:	0010      	movs	r0, r2
 80226ea:	4798      	blx	r3
 80226ec:	0003      	movs	r3, r0
 80226ee:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80226f0:	e03b      	b.n	802276a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80226f2:	683a      	ldr	r2, [r7, #0]
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	0011      	movs	r1, r2
 80226f8:	0018      	movs	r0, r3
 80226fa:	f000 fa98 	bl	8022c2e <USBD_CtlError>
            err++;
 80226fe:	210b      	movs	r1, #11
 8022700:	187b      	adds	r3, r7, r1
 8022702:	781a      	ldrb	r2, [r3, #0]
 8022704:	187b      	adds	r3, r7, r1
 8022706:	3201      	adds	r2, #1
 8022708:	701a      	strb	r2, [r3, #0]
          break;
 802270a:	e02e      	b.n	802276a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 802270c:	687a      	ldr	r2, [r7, #4]
 802270e:	23ac      	movs	r3, #172	@ 0xac
 8022710:	009b      	lsls	r3, r3, #2
 8022712:	58d3      	ldr	r3, [r2, r3]
 8022714:	699b      	ldr	r3, [r3, #24]
 8022716:	2b00      	cmp	r3, #0
 8022718:	d00d      	beq.n	8022736 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 802271a:	687a      	ldr	r2, [r7, #4]
 802271c:	23ac      	movs	r3, #172	@ 0xac
 802271e:	009b      	lsls	r3, r3, #2
 8022720:	58d3      	ldr	r3, [r2, r3]
 8022722:	699b      	ldr	r3, [r3, #24]
 8022724:	687a      	ldr	r2, [r7, #4]
 8022726:	7c12      	ldrb	r2, [r2, #16]
 8022728:	2108      	movs	r1, #8
 802272a:	1879      	adds	r1, r7, r1
 802272c:	0010      	movs	r0, r2
 802272e:	4798      	blx	r3
 8022730:	0003      	movs	r3, r0
 8022732:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022734:	e019      	b.n	802276a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022736:	683a      	ldr	r2, [r7, #0]
 8022738:	687b      	ldr	r3, [r7, #4]
 802273a:	0011      	movs	r1, r2
 802273c:	0018      	movs	r0, r3
 802273e:	f000 fa76 	bl	8022c2e <USBD_CtlError>
            err++;
 8022742:	210b      	movs	r1, #11
 8022744:	187b      	adds	r3, r7, r1
 8022746:	781a      	ldrb	r2, [r3, #0]
 8022748:	187b      	adds	r3, r7, r1
 802274a:	3201      	adds	r2, #1
 802274c:	701a      	strb	r2, [r3, #0]
          break;
 802274e:	e00c      	b.n	802276a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8022750:	683a      	ldr	r2, [r7, #0]
 8022752:	687b      	ldr	r3, [r7, #4]
 8022754:	0011      	movs	r1, r2
 8022756:	0018      	movs	r0, r3
 8022758:	f000 fa69 	bl	8022c2e <USBD_CtlError>
          err++;
 802275c:	210b      	movs	r1, #11
 802275e:	187b      	adds	r3, r7, r1
 8022760:	781a      	ldrb	r2, [r3, #0]
 8022762:	187b      	adds	r3, r7, r1
 8022764:	3201      	adds	r2, #1
 8022766:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8022768:	e04b      	b.n	8022802 <USBD_GetDescriptor+0x2fa>
 802276a:	e04a      	b.n	8022802 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802276c:	687b      	ldr	r3, [r7, #4]
 802276e:	7c1b      	ldrb	r3, [r3, #16]
 8022770:	2b00      	cmp	r3, #0
 8022772:	d10b      	bne.n	802278c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8022774:	687a      	ldr	r2, [r7, #4]
 8022776:	23ad      	movs	r3, #173	@ 0xad
 8022778:	009b      	lsls	r3, r3, #2
 802277a:	58d3      	ldr	r3, [r2, r3]
 802277c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802277e:	2208      	movs	r2, #8
 8022780:	18ba      	adds	r2, r7, r2
 8022782:	0010      	movs	r0, r2
 8022784:	4798      	blx	r3
 8022786:	0003      	movs	r3, r0
 8022788:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802278a:	e03a      	b.n	8022802 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 802278c:	683a      	ldr	r2, [r7, #0]
 802278e:	687b      	ldr	r3, [r7, #4]
 8022790:	0011      	movs	r1, r2
 8022792:	0018      	movs	r0, r3
 8022794:	f000 fa4b 	bl	8022c2e <USBD_CtlError>
        err++;
 8022798:	210b      	movs	r1, #11
 802279a:	187b      	adds	r3, r7, r1
 802279c:	781a      	ldrb	r2, [r3, #0]
 802279e:	187b      	adds	r3, r7, r1
 80227a0:	3201      	adds	r2, #1
 80227a2:	701a      	strb	r2, [r3, #0]
      break;
 80227a4:	e02d      	b.n	8022802 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80227a6:	687b      	ldr	r3, [r7, #4]
 80227a8:	7c1b      	ldrb	r3, [r3, #16]
 80227aa:	2b00      	cmp	r3, #0
 80227ac:	d10f      	bne.n	80227ce <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80227ae:	687a      	ldr	r2, [r7, #4]
 80227b0:	23ad      	movs	r3, #173	@ 0xad
 80227b2:	009b      	lsls	r3, r3, #2
 80227b4:	58d3      	ldr	r3, [r2, r3]
 80227b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80227b8:	2208      	movs	r2, #8
 80227ba:	18ba      	adds	r2, r7, r2
 80227bc:	0010      	movs	r0, r2
 80227be:	4798      	blx	r3
 80227c0:	0003      	movs	r3, r0
 80227c2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80227c4:	68fb      	ldr	r3, [r7, #12]
 80227c6:	3301      	adds	r3, #1
 80227c8:	2207      	movs	r2, #7
 80227ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80227cc:	e019      	b.n	8022802 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80227ce:	683a      	ldr	r2, [r7, #0]
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	0011      	movs	r1, r2
 80227d4:	0018      	movs	r0, r3
 80227d6:	f000 fa2a 	bl	8022c2e <USBD_CtlError>
        err++;
 80227da:	210b      	movs	r1, #11
 80227dc:	187b      	adds	r3, r7, r1
 80227de:	781a      	ldrb	r2, [r3, #0]
 80227e0:	187b      	adds	r3, r7, r1
 80227e2:	3201      	adds	r2, #1
 80227e4:	701a      	strb	r2, [r3, #0]
      break;
 80227e6:	e00c      	b.n	8022802 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80227e8:	683a      	ldr	r2, [r7, #0]
 80227ea:	687b      	ldr	r3, [r7, #4]
 80227ec:	0011      	movs	r1, r2
 80227ee:	0018      	movs	r0, r3
 80227f0:	f000 fa1d 	bl	8022c2e <USBD_CtlError>
      err++;
 80227f4:	210b      	movs	r1, #11
 80227f6:	187b      	adds	r3, r7, r1
 80227f8:	781a      	ldrb	r2, [r3, #0]
 80227fa:	187b      	adds	r3, r7, r1
 80227fc:	3201      	adds	r2, #1
 80227fe:	701a      	strb	r2, [r3, #0]
      break;
 8022800:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8022802:	230b      	movs	r3, #11
 8022804:	18fb      	adds	r3, r7, r3
 8022806:	781b      	ldrb	r3, [r3, #0]
 8022808:	2b00      	cmp	r3, #0
 802280a:	d127      	bne.n	802285c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 802280c:	2108      	movs	r1, #8
 802280e:	187b      	adds	r3, r7, r1
 8022810:	881b      	ldrh	r3, [r3, #0]
 8022812:	2b00      	cmp	r3, #0
 8022814:	d019      	beq.n	802284a <USBD_GetDescriptor+0x342>
 8022816:	683b      	ldr	r3, [r7, #0]
 8022818:	88db      	ldrh	r3, [r3, #6]
 802281a:	2b00      	cmp	r3, #0
 802281c:	d015      	beq.n	802284a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 802281e:	683b      	ldr	r3, [r7, #0]
 8022820:	88da      	ldrh	r2, [r3, #6]
 8022822:	187b      	adds	r3, r7, r1
 8022824:	881b      	ldrh	r3, [r3, #0]
 8022826:	1c18      	adds	r0, r3, #0
 8022828:	1c11      	adds	r1, r2, #0
 802282a:	b28a      	uxth	r2, r1
 802282c:	b283      	uxth	r3, r0
 802282e:	429a      	cmp	r2, r3
 8022830:	d900      	bls.n	8022834 <USBD_GetDescriptor+0x32c>
 8022832:	1c01      	adds	r1, r0, #0
 8022834:	b28a      	uxth	r2, r1
 8022836:	2108      	movs	r1, #8
 8022838:	187b      	adds	r3, r7, r1
 802283a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 802283c:	187b      	adds	r3, r7, r1
 802283e:	881a      	ldrh	r2, [r3, #0]
 8022840:	68f9      	ldr	r1, [r7, #12]
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	0018      	movs	r0, r3
 8022846:	f000 fa70 	bl	8022d2a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 802284a:	683b      	ldr	r3, [r7, #0]
 802284c:	88db      	ldrh	r3, [r3, #6]
 802284e:	2b00      	cmp	r3, #0
 8022850:	d105      	bne.n	802285e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	0018      	movs	r0, r3
 8022856:	f000 fad2 	bl	8022dfe <USBD_CtlSendStatus>
 802285a:	e000      	b.n	802285e <USBD_GetDescriptor+0x356>
    return;
 802285c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 802285e:	46bd      	mov	sp, r7
 8022860:	b004      	add	sp, #16
 8022862:	bd80      	pop	{r7, pc}
 8022864:	0802e4ac 	.word	0x0802e4ac
 8022868:	0802e4cc 	.word	0x0802e4cc

0802286c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 802286c:	b590      	push	{r4, r7, lr}
 802286e:	b085      	sub	sp, #20
 8022870:	af00      	add	r7, sp, #0
 8022872:	6078      	str	r0, [r7, #4]
 8022874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8022876:	683b      	ldr	r3, [r7, #0]
 8022878:	889b      	ldrh	r3, [r3, #4]
 802287a:	2b00      	cmp	r3, #0
 802287c:	d13d      	bne.n	80228fa <USBD_SetAddress+0x8e>
 802287e:	683b      	ldr	r3, [r7, #0]
 8022880:	88db      	ldrh	r3, [r3, #6]
 8022882:	2b00      	cmp	r3, #0
 8022884:	d139      	bne.n	80228fa <USBD_SetAddress+0x8e>
 8022886:	683b      	ldr	r3, [r7, #0]
 8022888:	885b      	ldrh	r3, [r3, #2]
 802288a:	2b7f      	cmp	r3, #127	@ 0x7f
 802288c:	d835      	bhi.n	80228fa <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 802288e:	683b      	ldr	r3, [r7, #0]
 8022890:	885b      	ldrh	r3, [r3, #2]
 8022892:	b2da      	uxtb	r2, r3
 8022894:	230f      	movs	r3, #15
 8022896:	18fb      	adds	r3, r7, r3
 8022898:	217f      	movs	r1, #127	@ 0x7f
 802289a:	400a      	ands	r2, r1
 802289c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802289e:	687a      	ldr	r2, [r7, #4]
 80228a0:	23a7      	movs	r3, #167	@ 0xa7
 80228a2:	009b      	lsls	r3, r3, #2
 80228a4:	5cd3      	ldrb	r3, [r2, r3]
 80228a6:	2b03      	cmp	r3, #3
 80228a8:	d106      	bne.n	80228b8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80228aa:	683a      	ldr	r2, [r7, #0]
 80228ac:	687b      	ldr	r3, [r7, #4]
 80228ae:	0011      	movs	r1, r2
 80228b0:	0018      	movs	r0, r3
 80228b2:	f000 f9bc 	bl	8022c2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80228b6:	e027      	b.n	8022908 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	240f      	movs	r4, #15
 80228bc:	193a      	adds	r2, r7, r4
 80228be:	4914      	ldr	r1, [pc, #80]	@ (8022910 <USBD_SetAddress+0xa4>)
 80228c0:	7812      	ldrb	r2, [r2, #0]
 80228c2:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80228c4:	193b      	adds	r3, r7, r4
 80228c6:	781a      	ldrb	r2, [r3, #0]
 80228c8:	687b      	ldr	r3, [r7, #4]
 80228ca:	0011      	movs	r1, r2
 80228cc:	0018      	movs	r0, r3
 80228ce:	f000 ff69 	bl	80237a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80228d2:	687b      	ldr	r3, [r7, #4]
 80228d4:	0018      	movs	r0, r3
 80228d6:	f000 fa92 	bl	8022dfe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80228da:	193b      	adds	r3, r7, r4
 80228dc:	781b      	ldrb	r3, [r3, #0]
 80228de:	2b00      	cmp	r3, #0
 80228e0:	d005      	beq.n	80228ee <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80228e2:	687a      	ldr	r2, [r7, #4]
 80228e4:	23a7      	movs	r3, #167	@ 0xa7
 80228e6:	009b      	lsls	r3, r3, #2
 80228e8:	2102      	movs	r1, #2
 80228ea:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80228ec:	e00c      	b.n	8022908 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80228ee:	687a      	ldr	r2, [r7, #4]
 80228f0:	23a7      	movs	r3, #167	@ 0xa7
 80228f2:	009b      	lsls	r3, r3, #2
 80228f4:	2101      	movs	r1, #1
 80228f6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80228f8:	e006      	b.n	8022908 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80228fa:	683a      	ldr	r2, [r7, #0]
 80228fc:	687b      	ldr	r3, [r7, #4]
 80228fe:	0011      	movs	r1, r2
 8022900:	0018      	movs	r0, r3
 8022902:	f000 f994 	bl	8022c2e <USBD_CtlError>
  }
}
 8022906:	46c0      	nop			@ (mov r8, r8)
 8022908:	46c0      	nop			@ (mov r8, r8)
 802290a:	46bd      	mov	sp, r7
 802290c:	b005      	add	sp, #20
 802290e:	bd90      	pop	{r4, r7, pc}
 8022910:	0000029e 	.word	0x0000029e

08022914 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022914:	b580      	push	{r7, lr}
 8022916:	b082      	sub	sp, #8
 8022918:	af00      	add	r7, sp, #0
 802291a:	6078      	str	r0, [r7, #4]
 802291c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 802291e:	683b      	ldr	r3, [r7, #0]
 8022920:	885b      	ldrh	r3, [r3, #2]
 8022922:	b2da      	uxtb	r2, r3
 8022924:	4b4c      	ldr	r3, [pc, #304]	@ (8022a58 <USBD_SetConfig+0x144>)
 8022926:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8022928:	4b4b      	ldr	r3, [pc, #300]	@ (8022a58 <USBD_SetConfig+0x144>)
 802292a:	781b      	ldrb	r3, [r3, #0]
 802292c:	2b01      	cmp	r3, #1
 802292e:	d906      	bls.n	802293e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8022930:	683a      	ldr	r2, [r7, #0]
 8022932:	687b      	ldr	r3, [r7, #4]
 8022934:	0011      	movs	r1, r2
 8022936:	0018      	movs	r0, r3
 8022938:	f000 f979 	bl	8022c2e <USBD_CtlError>
 802293c:	e088      	b.n	8022a50 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 802293e:	687a      	ldr	r2, [r7, #4]
 8022940:	23a7      	movs	r3, #167	@ 0xa7
 8022942:	009b      	lsls	r3, r3, #2
 8022944:	5cd3      	ldrb	r3, [r2, r3]
 8022946:	2b02      	cmp	r3, #2
 8022948:	d002      	beq.n	8022950 <USBD_SetConfig+0x3c>
 802294a:	2b03      	cmp	r3, #3
 802294c:	d029      	beq.n	80229a2 <USBD_SetConfig+0x8e>
 802294e:	e071      	b.n	8022a34 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8022950:	4b41      	ldr	r3, [pc, #260]	@ (8022a58 <USBD_SetConfig+0x144>)
 8022952:	781b      	ldrb	r3, [r3, #0]
 8022954:	2b00      	cmp	r3, #0
 8022956:	d01f      	beq.n	8022998 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8022958:	4b3f      	ldr	r3, [pc, #252]	@ (8022a58 <USBD_SetConfig+0x144>)
 802295a:	781b      	ldrb	r3, [r3, #0]
 802295c:	001a      	movs	r2, r3
 802295e:	687b      	ldr	r3, [r7, #4]
 8022960:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8022962:	687a      	ldr	r2, [r7, #4]
 8022964:	23a7      	movs	r3, #167	@ 0xa7
 8022966:	009b      	lsls	r3, r3, #2
 8022968:	2103      	movs	r1, #3
 802296a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 802296c:	4b3a      	ldr	r3, [pc, #232]	@ (8022a58 <USBD_SetConfig+0x144>)
 802296e:	781a      	ldrb	r2, [r3, #0]
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	0011      	movs	r1, r2
 8022974:	0018      	movs	r0, r3
 8022976:	f7ff f8c6 	bl	8021b06 <USBD_SetClassConfig>
 802297a:	0003      	movs	r3, r0
 802297c:	2b02      	cmp	r3, #2
 802297e:	d106      	bne.n	802298e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8022980:	683a      	ldr	r2, [r7, #0]
 8022982:	687b      	ldr	r3, [r7, #4]
 8022984:	0011      	movs	r1, r2
 8022986:	0018      	movs	r0, r3
 8022988:	f000 f951 	bl	8022c2e <USBD_CtlError>
            return;
 802298c:	e060      	b.n	8022a50 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 802298e:	687b      	ldr	r3, [r7, #4]
 8022990:	0018      	movs	r0, r3
 8022992:	f000 fa34 	bl	8022dfe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022996:	e05b      	b.n	8022a50 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	0018      	movs	r0, r3
 802299c:	f000 fa2f 	bl	8022dfe <USBD_CtlSendStatus>
        break;
 80229a0:	e056      	b.n	8022a50 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80229a2:	4b2d      	ldr	r3, [pc, #180]	@ (8022a58 <USBD_SetConfig+0x144>)
 80229a4:	781b      	ldrb	r3, [r3, #0]
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d115      	bne.n	80229d6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80229aa:	687a      	ldr	r2, [r7, #4]
 80229ac:	23a7      	movs	r3, #167	@ 0xa7
 80229ae:	009b      	lsls	r3, r3, #2
 80229b0:	2102      	movs	r1, #2
 80229b2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80229b4:	4b28      	ldr	r3, [pc, #160]	@ (8022a58 <USBD_SetConfig+0x144>)
 80229b6:	781b      	ldrb	r3, [r3, #0]
 80229b8:	001a      	movs	r2, r3
 80229ba:	687b      	ldr	r3, [r7, #4]
 80229bc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80229be:	4b26      	ldr	r3, [pc, #152]	@ (8022a58 <USBD_SetConfig+0x144>)
 80229c0:	781a      	ldrb	r2, [r3, #0]
 80229c2:	687b      	ldr	r3, [r7, #4]
 80229c4:	0011      	movs	r1, r2
 80229c6:	0018      	movs	r0, r3
 80229c8:	f7ff f8c4 	bl	8021b54 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80229cc:	687b      	ldr	r3, [r7, #4]
 80229ce:	0018      	movs	r0, r3
 80229d0:	f000 fa15 	bl	8022dfe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80229d4:	e03c      	b.n	8022a50 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80229d6:	4b20      	ldr	r3, [pc, #128]	@ (8022a58 <USBD_SetConfig+0x144>)
 80229d8:	781b      	ldrb	r3, [r3, #0]
 80229da:	001a      	movs	r2, r3
 80229dc:	687b      	ldr	r3, [r7, #4]
 80229de:	685b      	ldr	r3, [r3, #4]
 80229e0:	429a      	cmp	r2, r3
 80229e2:	d022      	beq.n	8022a2a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80229e4:	687b      	ldr	r3, [r7, #4]
 80229e6:	685b      	ldr	r3, [r3, #4]
 80229e8:	b2da      	uxtb	r2, r3
 80229ea:	687b      	ldr	r3, [r7, #4]
 80229ec:	0011      	movs	r1, r2
 80229ee:	0018      	movs	r0, r3
 80229f0:	f7ff f8b0 	bl	8021b54 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80229f4:	4b18      	ldr	r3, [pc, #96]	@ (8022a58 <USBD_SetConfig+0x144>)
 80229f6:	781b      	ldrb	r3, [r3, #0]
 80229f8:	001a      	movs	r2, r3
 80229fa:	687b      	ldr	r3, [r7, #4]
 80229fc:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80229fe:	4b16      	ldr	r3, [pc, #88]	@ (8022a58 <USBD_SetConfig+0x144>)
 8022a00:	781a      	ldrb	r2, [r3, #0]
 8022a02:	687b      	ldr	r3, [r7, #4]
 8022a04:	0011      	movs	r1, r2
 8022a06:	0018      	movs	r0, r3
 8022a08:	f7ff f87d 	bl	8021b06 <USBD_SetClassConfig>
 8022a0c:	0003      	movs	r3, r0
 8022a0e:	2b02      	cmp	r3, #2
 8022a10:	d106      	bne.n	8022a20 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8022a12:	683a      	ldr	r2, [r7, #0]
 8022a14:	687b      	ldr	r3, [r7, #4]
 8022a16:	0011      	movs	r1, r2
 8022a18:	0018      	movs	r0, r3
 8022a1a:	f000 f908 	bl	8022c2e <USBD_CtlError>
            return;
 8022a1e:	e017      	b.n	8022a50 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022a20:	687b      	ldr	r3, [r7, #4]
 8022a22:	0018      	movs	r0, r3
 8022a24:	f000 f9eb 	bl	8022dfe <USBD_CtlSendStatus>
        break;
 8022a28:	e012      	b.n	8022a50 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022a2a:	687b      	ldr	r3, [r7, #4]
 8022a2c:	0018      	movs	r0, r3
 8022a2e:	f000 f9e6 	bl	8022dfe <USBD_CtlSendStatus>
        break;
 8022a32:	e00d      	b.n	8022a50 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8022a34:	683a      	ldr	r2, [r7, #0]
 8022a36:	687b      	ldr	r3, [r7, #4]
 8022a38:	0011      	movs	r1, r2
 8022a3a:	0018      	movs	r0, r3
 8022a3c:	f000 f8f7 	bl	8022c2e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8022a40:	4b05      	ldr	r3, [pc, #20]	@ (8022a58 <USBD_SetConfig+0x144>)
 8022a42:	781a      	ldrb	r2, [r3, #0]
 8022a44:	687b      	ldr	r3, [r7, #4]
 8022a46:	0011      	movs	r1, r2
 8022a48:	0018      	movs	r0, r3
 8022a4a:	f7ff f883 	bl	8021b54 <USBD_ClrClassConfig>
        break;
 8022a4e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022a50:	46bd      	mov	sp, r7
 8022a52:	b002      	add	sp, #8
 8022a54:	bd80      	pop	{r7, pc}
 8022a56:	46c0      	nop			@ (mov r8, r8)
 8022a58:	20002530 	.word	0x20002530

08022a5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022a5c:	b580      	push	{r7, lr}
 8022a5e:	b082      	sub	sp, #8
 8022a60:	af00      	add	r7, sp, #0
 8022a62:	6078      	str	r0, [r7, #4]
 8022a64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8022a66:	683b      	ldr	r3, [r7, #0]
 8022a68:	88db      	ldrh	r3, [r3, #6]
 8022a6a:	2b01      	cmp	r3, #1
 8022a6c:	d006      	beq.n	8022a7c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8022a6e:	683a      	ldr	r2, [r7, #0]
 8022a70:	687b      	ldr	r3, [r7, #4]
 8022a72:	0011      	movs	r1, r2
 8022a74:	0018      	movs	r0, r3
 8022a76:	f000 f8da 	bl	8022c2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8022a7a:	e026      	b.n	8022aca <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8022a7c:	687a      	ldr	r2, [r7, #4]
 8022a7e:	23a7      	movs	r3, #167	@ 0xa7
 8022a80:	009b      	lsls	r3, r3, #2
 8022a82:	5cd3      	ldrb	r3, [r2, r3]
 8022a84:	2b02      	cmp	r3, #2
 8022a86:	dc02      	bgt.n	8022a8e <USBD_GetConfig+0x32>
 8022a88:	2b00      	cmp	r3, #0
 8022a8a:	dc03      	bgt.n	8022a94 <USBD_GetConfig+0x38>
 8022a8c:	e016      	b.n	8022abc <USBD_GetConfig+0x60>
 8022a8e:	2b03      	cmp	r3, #3
 8022a90:	d00c      	beq.n	8022aac <USBD_GetConfig+0x50>
 8022a92:	e013      	b.n	8022abc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8022a94:	687b      	ldr	r3, [r7, #4]
 8022a96:	2200      	movs	r2, #0
 8022a98:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8022a9a:	687b      	ldr	r3, [r7, #4]
 8022a9c:	3308      	adds	r3, #8
 8022a9e:	0019      	movs	r1, r3
 8022aa0:	687b      	ldr	r3, [r7, #4]
 8022aa2:	2201      	movs	r2, #1
 8022aa4:	0018      	movs	r0, r3
 8022aa6:	f000 f940 	bl	8022d2a <USBD_CtlSendData>
        break;
 8022aaa:	e00e      	b.n	8022aca <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8022aac:	687b      	ldr	r3, [r7, #4]
 8022aae:	1d19      	adds	r1, r3, #4
 8022ab0:	687b      	ldr	r3, [r7, #4]
 8022ab2:	2201      	movs	r2, #1
 8022ab4:	0018      	movs	r0, r3
 8022ab6:	f000 f938 	bl	8022d2a <USBD_CtlSendData>
        break;
 8022aba:	e006      	b.n	8022aca <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8022abc:	683a      	ldr	r2, [r7, #0]
 8022abe:	687b      	ldr	r3, [r7, #4]
 8022ac0:	0011      	movs	r1, r2
 8022ac2:	0018      	movs	r0, r3
 8022ac4:	f000 f8b3 	bl	8022c2e <USBD_CtlError>
        break;
 8022ac8:	46c0      	nop			@ (mov r8, r8)
}
 8022aca:	46c0      	nop			@ (mov r8, r8)
 8022acc:	46bd      	mov	sp, r7
 8022ace:	b002      	add	sp, #8
 8022ad0:	bd80      	pop	{r7, pc}

08022ad2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022ad2:	b580      	push	{r7, lr}
 8022ad4:	b082      	sub	sp, #8
 8022ad6:	af00      	add	r7, sp, #0
 8022ad8:	6078      	str	r0, [r7, #4]
 8022ada:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022adc:	687a      	ldr	r2, [r7, #4]
 8022ade:	23a7      	movs	r3, #167	@ 0xa7
 8022ae0:	009b      	lsls	r3, r3, #2
 8022ae2:	5cd3      	ldrb	r3, [r2, r3]
 8022ae4:	3b01      	subs	r3, #1
 8022ae6:	2b02      	cmp	r3, #2
 8022ae8:	d822      	bhi.n	8022b30 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8022aea:	683b      	ldr	r3, [r7, #0]
 8022aec:	88db      	ldrh	r3, [r3, #6]
 8022aee:	2b02      	cmp	r3, #2
 8022af0:	d006      	beq.n	8022b00 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8022af2:	683a      	ldr	r2, [r7, #0]
 8022af4:	687b      	ldr	r3, [r7, #4]
 8022af6:	0011      	movs	r1, r2
 8022af8:	0018      	movs	r0, r3
 8022afa:	f000 f898 	bl	8022c2e <USBD_CtlError>
        break;
 8022afe:	e01e      	b.n	8022b3e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8022b00:	687b      	ldr	r3, [r7, #4]
 8022b02:	2201      	movs	r2, #1
 8022b04:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8022b06:	687a      	ldr	r2, [r7, #4]
 8022b08:	23a9      	movs	r3, #169	@ 0xa9
 8022b0a:	009b      	lsls	r3, r3, #2
 8022b0c:	58d3      	ldr	r3, [r2, r3]
 8022b0e:	2b00      	cmp	r3, #0
 8022b10:	d005      	beq.n	8022b1e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8022b12:	687b      	ldr	r3, [r7, #4]
 8022b14:	68db      	ldr	r3, [r3, #12]
 8022b16:	2202      	movs	r2, #2
 8022b18:	431a      	orrs	r2, r3
 8022b1a:	687b      	ldr	r3, [r7, #4]
 8022b1c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8022b1e:	687b      	ldr	r3, [r7, #4]
 8022b20:	330c      	adds	r3, #12
 8022b22:	0019      	movs	r1, r3
 8022b24:	687b      	ldr	r3, [r7, #4]
 8022b26:	2202      	movs	r2, #2
 8022b28:	0018      	movs	r0, r3
 8022b2a:	f000 f8fe 	bl	8022d2a <USBD_CtlSendData>
      break;
 8022b2e:	e006      	b.n	8022b3e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8022b30:	683a      	ldr	r2, [r7, #0]
 8022b32:	687b      	ldr	r3, [r7, #4]
 8022b34:	0011      	movs	r1, r2
 8022b36:	0018      	movs	r0, r3
 8022b38:	f000 f879 	bl	8022c2e <USBD_CtlError>
      break;
 8022b3c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022b3e:	46c0      	nop			@ (mov r8, r8)
 8022b40:	46bd      	mov	sp, r7
 8022b42:	b002      	add	sp, #8
 8022b44:	bd80      	pop	{r7, pc}

08022b46 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022b46:	b580      	push	{r7, lr}
 8022b48:	b082      	sub	sp, #8
 8022b4a:	af00      	add	r7, sp, #0
 8022b4c:	6078      	str	r0, [r7, #4]
 8022b4e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022b50:	683b      	ldr	r3, [r7, #0]
 8022b52:	885b      	ldrh	r3, [r3, #2]
 8022b54:	2b01      	cmp	r3, #1
 8022b56:	d108      	bne.n	8022b6a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8022b58:	687a      	ldr	r2, [r7, #4]
 8022b5a:	23a9      	movs	r3, #169	@ 0xa9
 8022b5c:	009b      	lsls	r3, r3, #2
 8022b5e:	2101      	movs	r1, #1
 8022b60:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8022b62:	687b      	ldr	r3, [r7, #4]
 8022b64:	0018      	movs	r0, r3
 8022b66:	f000 f94a 	bl	8022dfe <USBD_CtlSendStatus>
  }
}
 8022b6a:	46c0      	nop			@ (mov r8, r8)
 8022b6c:	46bd      	mov	sp, r7
 8022b6e:	b002      	add	sp, #8
 8022b70:	bd80      	pop	{r7, pc}

08022b72 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022b72:	b580      	push	{r7, lr}
 8022b74:	b082      	sub	sp, #8
 8022b76:	af00      	add	r7, sp, #0
 8022b78:	6078      	str	r0, [r7, #4]
 8022b7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022b7c:	687a      	ldr	r2, [r7, #4]
 8022b7e:	23a7      	movs	r3, #167	@ 0xa7
 8022b80:	009b      	lsls	r3, r3, #2
 8022b82:	5cd3      	ldrb	r3, [r2, r3]
 8022b84:	3b01      	subs	r3, #1
 8022b86:	2b02      	cmp	r3, #2
 8022b88:	d80d      	bhi.n	8022ba6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022b8a:	683b      	ldr	r3, [r7, #0]
 8022b8c:	885b      	ldrh	r3, [r3, #2]
 8022b8e:	2b01      	cmp	r3, #1
 8022b90:	d110      	bne.n	8022bb4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8022b92:	687a      	ldr	r2, [r7, #4]
 8022b94:	23a9      	movs	r3, #169	@ 0xa9
 8022b96:	009b      	lsls	r3, r3, #2
 8022b98:	2100      	movs	r1, #0
 8022b9a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8022b9c:	687b      	ldr	r3, [r7, #4]
 8022b9e:	0018      	movs	r0, r3
 8022ba0:	f000 f92d 	bl	8022dfe <USBD_CtlSendStatus>
      }
      break;
 8022ba4:	e006      	b.n	8022bb4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8022ba6:	683a      	ldr	r2, [r7, #0]
 8022ba8:	687b      	ldr	r3, [r7, #4]
 8022baa:	0011      	movs	r1, r2
 8022bac:	0018      	movs	r0, r3
 8022bae:	f000 f83e 	bl	8022c2e <USBD_CtlError>
      break;
 8022bb2:	e000      	b.n	8022bb6 <USBD_ClrFeature+0x44>
      break;
 8022bb4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022bb6:	46c0      	nop			@ (mov r8, r8)
 8022bb8:	46bd      	mov	sp, r7
 8022bba:	b002      	add	sp, #8
 8022bbc:	bd80      	pop	{r7, pc}

08022bbe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022bbe:	b580      	push	{r7, lr}
 8022bc0:	b082      	sub	sp, #8
 8022bc2:	af00      	add	r7, sp, #0
 8022bc4:	6078      	str	r0, [r7, #4]
 8022bc6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8022bc8:	683b      	ldr	r3, [r7, #0]
 8022bca:	781a      	ldrb	r2, [r3, #0]
 8022bcc:	687b      	ldr	r3, [r7, #4]
 8022bce:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8022bd0:	683b      	ldr	r3, [r7, #0]
 8022bd2:	785a      	ldrb	r2, [r3, #1]
 8022bd4:	687b      	ldr	r3, [r7, #4]
 8022bd6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8022bd8:	683b      	ldr	r3, [r7, #0]
 8022bda:	3302      	adds	r3, #2
 8022bdc:	781b      	ldrb	r3, [r3, #0]
 8022bde:	001a      	movs	r2, r3
 8022be0:	683b      	ldr	r3, [r7, #0]
 8022be2:	3303      	adds	r3, #3
 8022be4:	781b      	ldrb	r3, [r3, #0]
 8022be6:	021b      	lsls	r3, r3, #8
 8022be8:	b29b      	uxth	r3, r3
 8022bea:	18d3      	adds	r3, r2, r3
 8022bec:	b29a      	uxth	r2, r3
 8022bee:	687b      	ldr	r3, [r7, #4]
 8022bf0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8022bf2:	683b      	ldr	r3, [r7, #0]
 8022bf4:	3304      	adds	r3, #4
 8022bf6:	781b      	ldrb	r3, [r3, #0]
 8022bf8:	001a      	movs	r2, r3
 8022bfa:	683b      	ldr	r3, [r7, #0]
 8022bfc:	3305      	adds	r3, #5
 8022bfe:	781b      	ldrb	r3, [r3, #0]
 8022c00:	021b      	lsls	r3, r3, #8
 8022c02:	b29b      	uxth	r3, r3
 8022c04:	18d3      	adds	r3, r2, r3
 8022c06:	b29a      	uxth	r2, r3
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8022c0c:	683b      	ldr	r3, [r7, #0]
 8022c0e:	3306      	adds	r3, #6
 8022c10:	781b      	ldrb	r3, [r3, #0]
 8022c12:	001a      	movs	r2, r3
 8022c14:	683b      	ldr	r3, [r7, #0]
 8022c16:	3307      	adds	r3, #7
 8022c18:	781b      	ldrb	r3, [r3, #0]
 8022c1a:	021b      	lsls	r3, r3, #8
 8022c1c:	b29b      	uxth	r3, r3
 8022c1e:	18d3      	adds	r3, r2, r3
 8022c20:	b29a      	uxth	r2, r3
 8022c22:	687b      	ldr	r3, [r7, #4]
 8022c24:	80da      	strh	r2, [r3, #6]

}
 8022c26:	46c0      	nop			@ (mov r8, r8)
 8022c28:	46bd      	mov	sp, r7
 8022c2a:	b002      	add	sp, #8
 8022c2c:	bd80      	pop	{r7, pc}

08022c2e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8022c2e:	b580      	push	{r7, lr}
 8022c30:	b082      	sub	sp, #8
 8022c32:	af00      	add	r7, sp, #0
 8022c34:	6078      	str	r0, [r7, #4]
 8022c36:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8022c38:	687b      	ldr	r3, [r7, #4]
 8022c3a:	2180      	movs	r1, #128	@ 0x80
 8022c3c:	0018      	movs	r0, r3
 8022c3e:	f000 fd2a 	bl	8023696 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8022c42:	687b      	ldr	r3, [r7, #4]
 8022c44:	2100      	movs	r1, #0
 8022c46:	0018      	movs	r0, r3
 8022c48:	f000 fd25 	bl	8023696 <USBD_LL_StallEP>
}
 8022c4c:	46c0      	nop			@ (mov r8, r8)
 8022c4e:	46bd      	mov	sp, r7
 8022c50:	b002      	add	sp, #8
 8022c52:	bd80      	pop	{r7, pc}

08022c54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8022c54:	b590      	push	{r4, r7, lr}
 8022c56:	b087      	sub	sp, #28
 8022c58:	af00      	add	r7, sp, #0
 8022c5a:	60f8      	str	r0, [r7, #12]
 8022c5c:	60b9      	str	r1, [r7, #8]
 8022c5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8022c60:	2417      	movs	r4, #23
 8022c62:	193b      	adds	r3, r7, r4
 8022c64:	2200      	movs	r2, #0
 8022c66:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8022c68:	68fb      	ldr	r3, [r7, #12]
 8022c6a:	2b00      	cmp	r3, #0
 8022c6c:	d03c      	beq.n	8022ce8 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8022c6e:	68fb      	ldr	r3, [r7, #12]
 8022c70:	0018      	movs	r0, r3
 8022c72:	f000 f83d 	bl	8022cf0 <USBD_GetLen>
 8022c76:	0003      	movs	r3, r0
 8022c78:	3301      	adds	r3, #1
 8022c7a:	b29b      	uxth	r3, r3
 8022c7c:	18db      	adds	r3, r3, r3
 8022c7e:	b29a      	uxth	r2, r3
 8022c80:	687b      	ldr	r3, [r7, #4]
 8022c82:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8022c84:	193b      	adds	r3, r7, r4
 8022c86:	781b      	ldrb	r3, [r3, #0]
 8022c88:	193a      	adds	r2, r7, r4
 8022c8a:	1c59      	adds	r1, r3, #1
 8022c8c:	7011      	strb	r1, [r2, #0]
 8022c8e:	001a      	movs	r2, r3
 8022c90:	68bb      	ldr	r3, [r7, #8]
 8022c92:	189b      	adds	r3, r3, r2
 8022c94:	687a      	ldr	r2, [r7, #4]
 8022c96:	7812      	ldrb	r2, [r2, #0]
 8022c98:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8022c9a:	193b      	adds	r3, r7, r4
 8022c9c:	781b      	ldrb	r3, [r3, #0]
 8022c9e:	193a      	adds	r2, r7, r4
 8022ca0:	1c59      	adds	r1, r3, #1
 8022ca2:	7011      	strb	r1, [r2, #0]
 8022ca4:	001a      	movs	r2, r3
 8022ca6:	68bb      	ldr	r3, [r7, #8]
 8022ca8:	189b      	adds	r3, r3, r2
 8022caa:	2203      	movs	r2, #3
 8022cac:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8022cae:	e017      	b.n	8022ce0 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8022cb0:	68fb      	ldr	r3, [r7, #12]
 8022cb2:	1c5a      	adds	r2, r3, #1
 8022cb4:	60fa      	str	r2, [r7, #12]
 8022cb6:	2417      	movs	r4, #23
 8022cb8:	193a      	adds	r2, r7, r4
 8022cba:	7812      	ldrb	r2, [r2, #0]
 8022cbc:	1939      	adds	r1, r7, r4
 8022cbe:	1c50      	adds	r0, r2, #1
 8022cc0:	7008      	strb	r0, [r1, #0]
 8022cc2:	0011      	movs	r1, r2
 8022cc4:	68ba      	ldr	r2, [r7, #8]
 8022cc6:	1852      	adds	r2, r2, r1
 8022cc8:	781b      	ldrb	r3, [r3, #0]
 8022cca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8022ccc:	193b      	adds	r3, r7, r4
 8022cce:	781b      	ldrb	r3, [r3, #0]
 8022cd0:	193a      	adds	r2, r7, r4
 8022cd2:	1c59      	adds	r1, r3, #1
 8022cd4:	7011      	strb	r1, [r2, #0]
 8022cd6:	001a      	movs	r2, r3
 8022cd8:	68bb      	ldr	r3, [r7, #8]
 8022cda:	189b      	adds	r3, r3, r2
 8022cdc:	2200      	movs	r2, #0
 8022cde:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8022ce0:	68fb      	ldr	r3, [r7, #12]
 8022ce2:	781b      	ldrb	r3, [r3, #0]
 8022ce4:	2b00      	cmp	r3, #0
 8022ce6:	d1e3      	bne.n	8022cb0 <USBD_GetString+0x5c>
    }
  }
}
 8022ce8:	46c0      	nop			@ (mov r8, r8)
 8022cea:	46bd      	mov	sp, r7
 8022cec:	b007      	add	sp, #28
 8022cee:	bd90      	pop	{r4, r7, pc}

08022cf0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022cf0:	b580      	push	{r7, lr}
 8022cf2:	b084      	sub	sp, #16
 8022cf4:	af00      	add	r7, sp, #0
 8022cf6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022cf8:	230f      	movs	r3, #15
 8022cfa:	18fb      	adds	r3, r7, r3
 8022cfc:	2200      	movs	r2, #0
 8022cfe:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8022d00:	e008      	b.n	8022d14 <USBD_GetLen+0x24>
  {
    len++;
 8022d02:	210f      	movs	r1, #15
 8022d04:	187b      	adds	r3, r7, r1
 8022d06:	781a      	ldrb	r2, [r3, #0]
 8022d08:	187b      	adds	r3, r7, r1
 8022d0a:	3201      	adds	r2, #1
 8022d0c:	701a      	strb	r2, [r3, #0]
    buf++;
 8022d0e:	687b      	ldr	r3, [r7, #4]
 8022d10:	3301      	adds	r3, #1
 8022d12:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8022d14:	687b      	ldr	r3, [r7, #4]
 8022d16:	781b      	ldrb	r3, [r3, #0]
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	d1f2      	bne.n	8022d02 <USBD_GetLen+0x12>
  }

  return len;
 8022d1c:	230f      	movs	r3, #15
 8022d1e:	18fb      	adds	r3, r7, r3
 8022d20:	781b      	ldrb	r3, [r3, #0]
}
 8022d22:	0018      	movs	r0, r3
 8022d24:	46bd      	mov	sp, r7
 8022d26:	b004      	add	sp, #16
 8022d28:	bd80      	pop	{r7, pc}

08022d2a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8022d2a:	b580      	push	{r7, lr}
 8022d2c:	b084      	sub	sp, #16
 8022d2e:	af00      	add	r7, sp, #0
 8022d30:	60f8      	str	r0, [r7, #12]
 8022d32:	60b9      	str	r1, [r7, #8]
 8022d34:	1dbb      	adds	r3, r7, #6
 8022d36:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022d38:	68fa      	ldr	r2, [r7, #12]
 8022d3a:	23a5      	movs	r3, #165	@ 0xa5
 8022d3c:	009b      	lsls	r3, r3, #2
 8022d3e:	2102      	movs	r1, #2
 8022d40:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8022d42:	1dbb      	adds	r3, r7, #6
 8022d44:	881a      	ldrh	r2, [r3, #0]
 8022d46:	68fb      	ldr	r3, [r7, #12]
 8022d48:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8022d4a:	1dbb      	adds	r3, r7, #6
 8022d4c:	881a      	ldrh	r2, [r3, #0]
 8022d4e:	68fb      	ldr	r3, [r7, #12]
 8022d50:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022d52:	1dbb      	adds	r3, r7, #6
 8022d54:	881b      	ldrh	r3, [r3, #0]
 8022d56:	68ba      	ldr	r2, [r7, #8]
 8022d58:	68f8      	ldr	r0, [r7, #12]
 8022d5a:	2100      	movs	r1, #0
 8022d5c:	f000 fd4d 	bl	80237fa <USBD_LL_Transmit>

  return USBD_OK;
 8022d60:	2300      	movs	r3, #0
}
 8022d62:	0018      	movs	r0, r3
 8022d64:	46bd      	mov	sp, r7
 8022d66:	b004      	add	sp, #16
 8022d68:	bd80      	pop	{r7, pc}

08022d6a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8022d6a:	b580      	push	{r7, lr}
 8022d6c:	b084      	sub	sp, #16
 8022d6e:	af00      	add	r7, sp, #0
 8022d70:	60f8      	str	r0, [r7, #12]
 8022d72:	60b9      	str	r1, [r7, #8]
 8022d74:	1dbb      	adds	r3, r7, #6
 8022d76:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022d78:	1dbb      	adds	r3, r7, #6
 8022d7a:	881b      	ldrh	r3, [r3, #0]
 8022d7c:	68ba      	ldr	r2, [r7, #8]
 8022d7e:	68f8      	ldr	r0, [r7, #12]
 8022d80:	2100      	movs	r1, #0
 8022d82:	f000 fd3a 	bl	80237fa <USBD_LL_Transmit>

  return USBD_OK;
 8022d86:	2300      	movs	r3, #0
}
 8022d88:	0018      	movs	r0, r3
 8022d8a:	46bd      	mov	sp, r7
 8022d8c:	b004      	add	sp, #16
 8022d8e:	bd80      	pop	{r7, pc}

08022d90 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8022d90:	b580      	push	{r7, lr}
 8022d92:	b084      	sub	sp, #16
 8022d94:	af00      	add	r7, sp, #0
 8022d96:	60f8      	str	r0, [r7, #12]
 8022d98:	60b9      	str	r1, [r7, #8]
 8022d9a:	1dbb      	adds	r3, r7, #6
 8022d9c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8022d9e:	68fa      	ldr	r2, [r7, #12]
 8022da0:	23a5      	movs	r3, #165	@ 0xa5
 8022da2:	009b      	lsls	r3, r3, #2
 8022da4:	2103      	movs	r1, #3
 8022da6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8022da8:	1dbb      	adds	r3, r7, #6
 8022daa:	8819      	ldrh	r1, [r3, #0]
 8022dac:	68fa      	ldr	r2, [r7, #12]
 8022dae:	23ae      	movs	r3, #174	@ 0xae
 8022db0:	005b      	lsls	r3, r3, #1
 8022db2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8022db4:	1dbb      	adds	r3, r7, #6
 8022db6:	8819      	ldrh	r1, [r3, #0]
 8022db8:	68fa      	ldr	r2, [r7, #12]
 8022dba:	23b0      	movs	r3, #176	@ 0xb0
 8022dbc:	005b      	lsls	r3, r3, #1
 8022dbe:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022dc0:	1dbb      	adds	r3, r7, #6
 8022dc2:	881b      	ldrh	r3, [r3, #0]
 8022dc4:	68ba      	ldr	r2, [r7, #8]
 8022dc6:	68f8      	ldr	r0, [r7, #12]
 8022dc8:	2100      	movs	r1, #0
 8022dca:	f000 fd4d 	bl	8023868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022dce:	2300      	movs	r3, #0
}
 8022dd0:	0018      	movs	r0, r3
 8022dd2:	46bd      	mov	sp, r7
 8022dd4:	b004      	add	sp, #16
 8022dd6:	bd80      	pop	{r7, pc}

08022dd8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8022dd8:	b580      	push	{r7, lr}
 8022dda:	b084      	sub	sp, #16
 8022ddc:	af00      	add	r7, sp, #0
 8022dde:	60f8      	str	r0, [r7, #12]
 8022de0:	60b9      	str	r1, [r7, #8]
 8022de2:	1dbb      	adds	r3, r7, #6
 8022de4:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022de6:	1dbb      	adds	r3, r7, #6
 8022de8:	881b      	ldrh	r3, [r3, #0]
 8022dea:	68ba      	ldr	r2, [r7, #8]
 8022dec:	68f8      	ldr	r0, [r7, #12]
 8022dee:	2100      	movs	r1, #0
 8022df0:	f000 fd3a 	bl	8023868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022df4:	2300      	movs	r3, #0
}
 8022df6:	0018      	movs	r0, r3
 8022df8:	46bd      	mov	sp, r7
 8022dfa:	b004      	add	sp, #16
 8022dfc:	bd80      	pop	{r7, pc}

08022dfe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8022dfe:	b580      	push	{r7, lr}
 8022e00:	b082      	sub	sp, #8
 8022e02:	af00      	add	r7, sp, #0
 8022e04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8022e06:	687a      	ldr	r2, [r7, #4]
 8022e08:	23a5      	movs	r3, #165	@ 0xa5
 8022e0a:	009b      	lsls	r3, r3, #2
 8022e0c:	2104      	movs	r1, #4
 8022e0e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8022e10:	6878      	ldr	r0, [r7, #4]
 8022e12:	2300      	movs	r3, #0
 8022e14:	2200      	movs	r2, #0
 8022e16:	2100      	movs	r1, #0
 8022e18:	f000 fcef 	bl	80237fa <USBD_LL_Transmit>

  return USBD_OK;
 8022e1c:	2300      	movs	r3, #0
}
 8022e1e:	0018      	movs	r0, r3
 8022e20:	46bd      	mov	sp, r7
 8022e22:	b002      	add	sp, #8
 8022e24:	bd80      	pop	{r7, pc}

08022e26 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022e26:	b580      	push	{r7, lr}
 8022e28:	b082      	sub	sp, #8
 8022e2a:	af00      	add	r7, sp, #0
 8022e2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8022e2e:	687a      	ldr	r2, [r7, #4]
 8022e30:	23a5      	movs	r3, #165	@ 0xa5
 8022e32:	009b      	lsls	r3, r3, #2
 8022e34:	2105      	movs	r1, #5
 8022e36:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022e38:	6878      	ldr	r0, [r7, #4]
 8022e3a:	2300      	movs	r3, #0
 8022e3c:	2200      	movs	r2, #0
 8022e3e:	2100      	movs	r1, #0
 8022e40:	f000 fd12 	bl	8023868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022e44:	2300      	movs	r3, #0
}
 8022e46:	0018      	movs	r0, r3
 8022e48:	46bd      	mov	sp, r7
 8022e4a:	b002      	add	sp, #8
 8022e4c:	bd80      	pop	{r7, pc}
	...

08022e50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022e50:	b580      	push	{r7, lr}
 8022e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022e54:	4914      	ldr	r1, [pc, #80]	@ (8022ea8 <MX_USB_DEVICE_Init+0x58>)
 8022e56:	4b15      	ldr	r3, [pc, #84]	@ (8022eac <MX_USB_DEVICE_Init+0x5c>)
 8022e58:	2200      	movs	r2, #0
 8022e5a:	0018      	movs	r0, r3
 8022e5c:	f7fe fdec 	bl	8021a38 <USBD_Init>
 8022e60:	1e03      	subs	r3, r0, #0
 8022e62:	d001      	beq.n	8022e68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8022e64:	f7ea faa0 	bl	800d3a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8022e68:	4a11      	ldr	r2, [pc, #68]	@ (8022eb0 <MX_USB_DEVICE_Init+0x60>)
 8022e6a:	4b10      	ldr	r3, [pc, #64]	@ (8022eac <MX_USB_DEVICE_Init+0x5c>)
 8022e6c:	0011      	movs	r1, r2
 8022e6e:	0018      	movs	r0, r3
 8022e70:	f7fe fe13 	bl	8021a9a <USBD_RegisterClass>
 8022e74:	1e03      	subs	r3, r0, #0
 8022e76:	d001      	beq.n	8022e7c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8022e78:	f7ea fa96 	bl	800d3a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8022e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8022eb4 <MX_USB_DEVICE_Init+0x64>)
 8022e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8022eac <MX_USB_DEVICE_Init+0x5c>)
 8022e80:	0011      	movs	r1, r2
 8022e82:	0018      	movs	r0, r3
 8022e84:	f7fe fd28 	bl	80218d8 <USBD_CDC_RegisterInterface>
 8022e88:	1e03      	subs	r3, r0, #0
 8022e8a:	d001      	beq.n	8022e90 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8022e8c:	f7ea fa8c 	bl	800d3a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022e90:	4b06      	ldr	r3, [pc, #24]	@ (8022eac <MX_USB_DEVICE_Init+0x5c>)
 8022e92:	0018      	movs	r0, r3
 8022e94:	f7fe fe21 	bl	8021ada <USBD_Start>
 8022e98:	1e03      	subs	r3, r0, #0
 8022e9a:	d001      	beq.n	8022ea0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8022e9c:	f7ea fa84 	bl	800d3a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022ea0:	46c0      	nop			@ (mov r8, r8)
 8022ea2:	46bd      	mov	sp, r7
 8022ea4:	bd80      	pop	{r7, pc}
 8022ea6:	46c0      	nop			@ (mov r8, r8)
 8022ea8:	20000224 	.word	0x20000224
 8022eac:	20002534 	.word	0x20002534
 8022eb0:	20000110 	.word	0x20000110
 8022eb4:	20000214 	.word	0x20000214

08022eb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8022eb8:	b580      	push	{r7, lr}
 8022eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8022ebc:	4907      	ldr	r1, [pc, #28]	@ (8022edc <CDC_Init_FS+0x24>)
 8022ebe:	4b08      	ldr	r3, [pc, #32]	@ (8022ee0 <CDC_Init_FS+0x28>)
 8022ec0:	2200      	movs	r2, #0
 8022ec2:	0018      	movs	r0, r3
 8022ec4:	f7fe fd23 	bl	802190e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8022ec8:	4a06      	ldr	r2, [pc, #24]	@ (8022ee4 <CDC_Init_FS+0x2c>)
 8022eca:	4b05      	ldr	r3, [pc, #20]	@ (8022ee0 <CDC_Init_FS+0x28>)
 8022ecc:	0011      	movs	r1, r2
 8022ece:	0018      	movs	r0, r3
 8022ed0:	f7fe fd39 	bl	8021946 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8022ed4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022ed6:	0018      	movs	r0, r3
 8022ed8:	46bd      	mov	sp, r7
 8022eda:	bd80      	pop	{r7, pc}
 8022edc:	20002cb8 	.word	0x20002cb8
 8022ee0:	20002534 	.word	0x20002534
 8022ee4:	200028b8 	.word	0x200028b8

08022ee8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8022ee8:	b580      	push	{r7, lr}
 8022eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8022eec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8022eee:	0018      	movs	r0, r3
 8022ef0:	46bd      	mov	sp, r7
 8022ef2:	bd80      	pop	{r7, pc}

08022ef4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8022ef4:	b580      	push	{r7, lr}
 8022ef6:	b084      	sub	sp, #16
 8022ef8:	af00      	add	r7, sp, #0
 8022efa:	6039      	str	r1, [r7, #0]
 8022efc:	0011      	movs	r1, r2
 8022efe:	1dfb      	adds	r3, r7, #7
 8022f00:	1c02      	adds	r2, r0, #0
 8022f02:	701a      	strb	r2, [r3, #0]
 8022f04:	1d3b      	adds	r3, r7, #4
 8022f06:	1c0a      	adds	r2, r1, #0
 8022f08:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8022f0a:	1dfb      	adds	r3, r7, #7
 8022f0c:	781b      	ldrb	r3, [r3, #0]
 8022f0e:	2b23      	cmp	r3, #35	@ 0x23
 8022f10:	d810      	bhi.n	8022f34 <CDC_Control_FS+0x40>
 8022f12:	009a      	lsls	r2, r3, #2
 8022f14:	4b0a      	ldr	r3, [pc, #40]	@ (8022f40 <CDC_Control_FS+0x4c>)
 8022f16:	18d3      	adds	r3, r2, r3
 8022f18:	681b      	ldr	r3, [r3, #0]
 8022f1a:	469f      	mov	pc, r3

    break;

    case CDC_SET_CONTROL_LINE_STATE:
      // === inserted for detecting USB is ready for dumping USB_LOGGING 28-jul-2025
            USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 8022f1c:	683b      	ldr	r3, [r7, #0]
 8022f1e:	60fb      	str	r3, [r7, #12]

            if((req->wValue &0x0001) != 0)
 8022f20:	68fb      	ldr	r3, [r7, #12]
 8022f22:	885b      	ldrh	r3, [r3, #2]
 8022f24:	001a      	movs	r2, r3
 8022f26:	2301      	movs	r3, #1
 8022f28:	4013      	ands	r3, r2
 8022f2a:	d001      	beq.n	8022f30 <CDC_Control_FS+0x3c>
              return (USBD_FAIL);
 8022f2c:	2302      	movs	r3, #2
 8022f2e:	e003      	b.n	8022f38 <CDC_Control_FS+0x44>
              //host_com_port_open = 1;
            else
              return (USBD_OK);
 8022f30:	2300      	movs	r3, #0
 8022f32:	e001      	b.n	8022f38 <CDC_Control_FS+0x44>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8022f34:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8022f36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8022f38:	0018      	movs	r0, r3
 8022f3a:	46bd      	mov	sp, r7
 8022f3c:	b004      	add	sp, #16
 8022f3e:	bd80      	pop	{r7, pc}
 8022f40:	0802e4e4 	.word	0x0802e4e4

08022f44 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8022f44:	b580      	push	{r7, lr}
 8022f46:	b082      	sub	sp, #8
 8022f48:	af00      	add	r7, sp, #0
 8022f4a:	6078      	str	r0, [r7, #4]
 8022f4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8022f4e:	4b12      	ldr	r3, [pc, #72]	@ (8022f98 <CDC_Receive_FS+0x54>)
 8022f50:	781b      	ldrb	r3, [r3, #0]
 8022f52:	2b00      	cmp	r3, #0
 8022f54:	d013      	beq.n	8022f7e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8022f56:	683b      	ldr	r3, [r7, #0]
 8022f58:	681b      	ldr	r3, [r3, #0]
 8022f5a:	b29a      	uxth	r2, r3
 8022f5c:	2301      	movs	r3, #1
 8022f5e:	425b      	negs	r3, r3
 8022f60:	6879      	ldr	r1, [r7, #4]
 8022f62:	480e      	ldr	r0, [pc, #56]	@ (8022f9c <CDC_Receive_FS+0x58>)
 8022f64:	f7fa fa38 	bl	801d3d8 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8022f68:	687a      	ldr	r2, [r7, #4]
 8022f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8022fa0 <CDC_Receive_FS+0x5c>)
 8022f6c:	0011      	movs	r1, r2
 8022f6e:	0018      	movs	r0, r3
 8022f70:	f7fe fce9 	bl	8021946 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022f74:	4b0a      	ldr	r3, [pc, #40]	@ (8022fa0 <CDC_Receive_FS+0x5c>)
 8022f76:	0018      	movs	r0, r3
 8022f78:	f7fe fd30 	bl	80219dc <USBD_CDC_ReceivePacket>
 8022f7c:	e006      	b.n	8022f8c <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8022f7e:	683b      	ldr	r3, [r7, #0]
 8022f80:	681a      	ldr	r2, [r3, #0]
 8022f82:	4b08      	ldr	r3, [pc, #32]	@ (8022fa4 <CDC_Receive_FS+0x60>)
 8022f84:	681b      	ldr	r3, [r3, #0]
 8022f86:	18d2      	adds	r2, r2, r3
 8022f88:	4b06      	ldr	r3, [pc, #24]	@ (8022fa4 <CDC_Receive_FS+0x60>)
 8022f8a:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8022f8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8022f8e:	0018      	movs	r0, r3
 8022f90:	46bd      	mov	sp, r7
 8022f92:	b002      	add	sp, #8
 8022f94:	bd80      	pop	{r7, pc}
 8022f96:	46c0      	nop			@ (mov r8, r8)
 8022f98:	200027f8 	.word	0x200027f8
 8022f9c:	200027fc 	.word	0x200027fc
 8022fa0:	20002534 	.word	0x20002534
 8022fa4:	200028b4 	.word	0x200028b4

08022fa8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8022fa8:	b5b0      	push	{r4, r5, r7, lr}
 8022faa:	b084      	sub	sp, #16
 8022fac:	af00      	add	r7, sp, #0
 8022fae:	6078      	str	r0, [r7, #4]
 8022fb0:	000a      	movs	r2, r1
 8022fb2:	1cbb      	adds	r3, r7, #2
 8022fb4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8022fb6:	230f      	movs	r3, #15
 8022fb8:	18fb      	adds	r3, r7, r3
 8022fba:	2200      	movs	r2, #0
 8022fbc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8022fbe:	4a11      	ldr	r2, [pc, #68]	@ (8023004 <CDC_Transmit_FS+0x5c>)
 8022fc0:	23ae      	movs	r3, #174	@ 0xae
 8022fc2:	009b      	lsls	r3, r3, #2
 8022fc4:	58d3      	ldr	r3, [r2, r3]
 8022fc6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8022fc8:	68ba      	ldr	r2, [r7, #8]
 8022fca:	2385      	movs	r3, #133	@ 0x85
 8022fcc:	009b      	lsls	r3, r3, #2
 8022fce:	58d3      	ldr	r3, [r2, r3]
 8022fd0:	2b00      	cmp	r3, #0
 8022fd2:	d001      	beq.n	8022fd8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8022fd4:	2301      	movs	r3, #1
 8022fd6:	e010      	b.n	8022ffa <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8022fd8:	1cbb      	adds	r3, r7, #2
 8022fda:	881a      	ldrh	r2, [r3, #0]
 8022fdc:	6879      	ldr	r1, [r7, #4]
 8022fde:	4b09      	ldr	r3, [pc, #36]	@ (8023004 <CDC_Transmit_FS+0x5c>)
 8022fe0:	0018      	movs	r0, r3
 8022fe2:	f7fe fc94 	bl	802190e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8022fe6:	250f      	movs	r5, #15
 8022fe8:	197c      	adds	r4, r7, r5
 8022fea:	4b06      	ldr	r3, [pc, #24]	@ (8023004 <CDC_Transmit_FS+0x5c>)
 8022fec:	0018      	movs	r0, r3
 8022fee:	f7fe fcbe 	bl	802196e <USBD_CDC_TransmitPacket>
 8022ff2:	0003      	movs	r3, r0
 8022ff4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8022ff6:	197b      	adds	r3, r7, r5
 8022ff8:	781b      	ldrb	r3, [r3, #0]
}
 8022ffa:	0018      	movs	r0, r3
 8022ffc:	46bd      	mov	sp, r7
 8022ffe:	b004      	add	sp, #16
 8023000:	bdb0      	pop	{r4, r5, r7, pc}
 8023002:	46c0      	nop			@ (mov r8, r8)
 8023004:	20002534 	.word	0x20002534

08023008 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8023008:	b580      	push	{r7, lr}
 802300a:	af00      	add	r7, sp, #0
  ESPProg = true;
 802300c:	4b02      	ldr	r3, [pc, #8]	@ (8023018 <EnableESPProg+0x10>)
 802300e:	2201      	movs	r2, #1
 8023010:	701a      	strb	r2, [r3, #0]
}
 8023012:	46c0      	nop			@ (mov r8, r8)
 8023014:	46bd      	mov	sp, r7
 8023016:	bd80      	pop	{r7, pc}
 8023018:	200027f8 	.word	0x200027f8

0802301c <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 802301c:	b580      	push	{r7, lr}
 802301e:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8023020:	4b01      	ldr	r3, [pc, #4]	@ (8023028 <GetUsbRxPointer+0xc>)
}
 8023022:	0018      	movs	r0, r3
 8023024:	46bd      	mov	sp, r7
 8023026:	bd80      	pop	{r7, pc}
 8023028:	200028b8 	.word	0x200028b8

0802302c <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 802302c:	b580      	push	{r7, lr}
 802302e:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8023030:	4b07      	ldr	r3, [pc, #28]	@ (8023050 <ResetUsbRxDataSize+0x24>)
 8023032:	2200      	movs	r2, #0
 8023034:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8023036:	4a07      	ldr	r2, [pc, #28]	@ (8023054 <ResetUsbRxDataSize+0x28>)
 8023038:	4b07      	ldr	r3, [pc, #28]	@ (8023058 <ResetUsbRxDataSize+0x2c>)
 802303a:	0011      	movs	r1, r2
 802303c:	0018      	movs	r0, r3
 802303e:	f7fe fc82 	bl	8021946 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8023042:	4b05      	ldr	r3, [pc, #20]	@ (8023058 <ResetUsbRxDataSize+0x2c>)
 8023044:	0018      	movs	r0, r3
 8023046:	f7fe fcc9 	bl	80219dc <USBD_CDC_ReceivePacket>
}
 802304a:	46c0      	nop			@ (mov r8, r8)
 802304c:	46bd      	mov	sp, r7
 802304e:	bd80      	pop	{r7, pc}
 8023050:	200028b4 	.word	0x200028b4
 8023054:	200028b8 	.word	0x200028b8
 8023058:	20002534 	.word	0x20002534

0802305c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 802305c:	b580      	push	{r7, lr}
 802305e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8023060:	4b02      	ldr	r3, [pc, #8]	@ (802306c <GetUsbRxDataSize+0x10>)
 8023062:	681b      	ldr	r3, [r3, #0]
}
 8023064:	0018      	movs	r0, r3
 8023066:	46bd      	mov	sp, r7
 8023068:	bd80      	pop	{r7, pc}
 802306a:	46c0      	nop			@ (mov r8, r8)
 802306c:	200028b4 	.word	0x200028b4

08023070 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8023070:	b580      	push	{r7, lr}
 8023072:	b082      	sub	sp, #8
 8023074:	af00      	add	r7, sp, #0
 8023076:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8023078:	687a      	ldr	r2, [r7, #4]
 802307a:	4b07      	ldr	r3, [pc, #28]	@ (8023098 <GetUsbRxNextChunk+0x28>)
 802307c:	18d2      	adds	r2, r2, r3
 802307e:	4b07      	ldr	r3, [pc, #28]	@ (802309c <GetUsbRxNextChunk+0x2c>)
 8023080:	0011      	movs	r1, r2
 8023082:	0018      	movs	r0, r3
 8023084:	f7fe fc5f 	bl	8021946 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8023088:	4b04      	ldr	r3, [pc, #16]	@ (802309c <GetUsbRxNextChunk+0x2c>)
 802308a:	0018      	movs	r0, r3
 802308c:	f7fe fca6 	bl	80219dc <USBD_CDC_ReceivePacket>
}
 8023090:	46c0      	nop			@ (mov r8, r8)
 8023092:	46bd      	mov	sp, r7
 8023094:	b002      	add	sp, #8
 8023096:	bd80      	pop	{r7, pc}
 8023098:	200028b8 	.word	0x200028b8
 802309c:	20002534 	.word	0x20002534

080230a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80230a0:	b580      	push	{r7, lr}
 80230a2:	b082      	sub	sp, #8
 80230a4:	af00      	add	r7, sp, #0
 80230a6:	0002      	movs	r2, r0
 80230a8:	6039      	str	r1, [r7, #0]
 80230aa:	1dfb      	adds	r3, r7, #7
 80230ac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80230ae:	683b      	ldr	r3, [r7, #0]
 80230b0:	2212      	movs	r2, #18
 80230b2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80230b4:	4b02      	ldr	r3, [pc, #8]	@ (80230c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80230b6:	0018      	movs	r0, r3
 80230b8:	46bd      	mov	sp, r7
 80230ba:	b002      	add	sp, #8
 80230bc:	bd80      	pop	{r7, pc}
 80230be:	46c0      	nop			@ (mov r8, r8)
 80230c0:	20000240 	.word	0x20000240

080230c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80230c4:	b580      	push	{r7, lr}
 80230c6:	b082      	sub	sp, #8
 80230c8:	af00      	add	r7, sp, #0
 80230ca:	0002      	movs	r2, r0
 80230cc:	6039      	str	r1, [r7, #0]
 80230ce:	1dfb      	adds	r3, r7, #7
 80230d0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80230d2:	683b      	ldr	r3, [r7, #0]
 80230d4:	2204      	movs	r2, #4
 80230d6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80230d8:	4b02      	ldr	r3, [pc, #8]	@ (80230e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80230da:	0018      	movs	r0, r3
 80230dc:	46bd      	mov	sp, r7
 80230de:	b002      	add	sp, #8
 80230e0:	bd80      	pop	{r7, pc}
 80230e2:	46c0      	nop			@ (mov r8, r8)
 80230e4:	20000254 	.word	0x20000254

080230e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80230e8:	b580      	push	{r7, lr}
 80230ea:	b082      	sub	sp, #8
 80230ec:	af00      	add	r7, sp, #0
 80230ee:	0002      	movs	r2, r0
 80230f0:	6039      	str	r1, [r7, #0]
 80230f2:	1dfb      	adds	r3, r7, #7
 80230f4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80230f6:	1dfb      	adds	r3, r7, #7
 80230f8:	781b      	ldrb	r3, [r3, #0]
 80230fa:	2b00      	cmp	r3, #0
 80230fc:	d106      	bne.n	802310c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80230fe:	683a      	ldr	r2, [r7, #0]
 8023100:	4908      	ldr	r1, [pc, #32]	@ (8023124 <USBD_FS_ProductStrDescriptor+0x3c>)
 8023102:	4b09      	ldr	r3, [pc, #36]	@ (8023128 <USBD_FS_ProductStrDescriptor+0x40>)
 8023104:	0018      	movs	r0, r3
 8023106:	f7ff fda5 	bl	8022c54 <USBD_GetString>
 802310a:	e005      	b.n	8023118 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802310c:	683a      	ldr	r2, [r7, #0]
 802310e:	4905      	ldr	r1, [pc, #20]	@ (8023124 <USBD_FS_ProductStrDescriptor+0x3c>)
 8023110:	4b05      	ldr	r3, [pc, #20]	@ (8023128 <USBD_FS_ProductStrDescriptor+0x40>)
 8023112:	0018      	movs	r0, r3
 8023114:	f7ff fd9e 	bl	8022c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8023118:	4b02      	ldr	r3, [pc, #8]	@ (8023124 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 802311a:	0018      	movs	r0, r3
 802311c:	46bd      	mov	sp, r7
 802311e:	b002      	add	sp, #8
 8023120:	bd80      	pop	{r7, pc}
 8023122:	46c0      	nop			@ (mov r8, r8)
 8023124:	200030b8 	.word	0x200030b8
 8023128:	0802db84 	.word	0x0802db84

0802312c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802312c:	b580      	push	{r7, lr}
 802312e:	b082      	sub	sp, #8
 8023130:	af00      	add	r7, sp, #0
 8023132:	0002      	movs	r2, r0
 8023134:	6039      	str	r1, [r7, #0]
 8023136:	1dfb      	adds	r3, r7, #7
 8023138:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802313a:	683a      	ldr	r2, [r7, #0]
 802313c:	4904      	ldr	r1, [pc, #16]	@ (8023150 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802313e:	4b05      	ldr	r3, [pc, #20]	@ (8023154 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8023140:	0018      	movs	r0, r3
 8023142:	f7ff fd87 	bl	8022c54 <USBD_GetString>
  return USBD_StrDesc;
 8023146:	4b02      	ldr	r3, [pc, #8]	@ (8023150 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8023148:	0018      	movs	r0, r3
 802314a:	46bd      	mov	sp, r7
 802314c:	b002      	add	sp, #8
 802314e:	bd80      	pop	{r7, pc}
 8023150:	200030b8 	.word	0x200030b8
 8023154:	0802db9c 	.word	0x0802db9c

08023158 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023158:	b580      	push	{r7, lr}
 802315a:	b082      	sub	sp, #8
 802315c:	af00      	add	r7, sp, #0
 802315e:	0002      	movs	r2, r0
 8023160:	6039      	str	r1, [r7, #0]
 8023162:	1dfb      	adds	r3, r7, #7
 8023164:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8023166:	683b      	ldr	r3, [r7, #0]
 8023168:	221a      	movs	r2, #26
 802316a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802316c:	f000 f84c 	bl	8023208 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8023170:	4b02      	ldr	r3, [pc, #8]	@ (802317c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8023172:	0018      	movs	r0, r3
 8023174:	46bd      	mov	sp, r7
 8023176:	b002      	add	sp, #8
 8023178:	bd80      	pop	{r7, pc}
 802317a:	46c0      	nop			@ (mov r8, r8)
 802317c:	20000258 	.word	0x20000258

08023180 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023180:	b580      	push	{r7, lr}
 8023182:	b082      	sub	sp, #8
 8023184:	af00      	add	r7, sp, #0
 8023186:	0002      	movs	r2, r0
 8023188:	6039      	str	r1, [r7, #0]
 802318a:	1dfb      	adds	r3, r7, #7
 802318c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 802318e:	1dfb      	adds	r3, r7, #7
 8023190:	781b      	ldrb	r3, [r3, #0]
 8023192:	2b00      	cmp	r3, #0
 8023194:	d106      	bne.n	80231a4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8023196:	683a      	ldr	r2, [r7, #0]
 8023198:	4908      	ldr	r1, [pc, #32]	@ (80231bc <USBD_FS_ConfigStrDescriptor+0x3c>)
 802319a:	4b09      	ldr	r3, [pc, #36]	@ (80231c0 <USBD_FS_ConfigStrDescriptor+0x40>)
 802319c:	0018      	movs	r0, r3
 802319e:	f7ff fd59 	bl	8022c54 <USBD_GetString>
 80231a2:	e005      	b.n	80231b0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80231a4:	683a      	ldr	r2, [r7, #0]
 80231a6:	4905      	ldr	r1, [pc, #20]	@ (80231bc <USBD_FS_ConfigStrDescriptor+0x3c>)
 80231a8:	4b05      	ldr	r3, [pc, #20]	@ (80231c0 <USBD_FS_ConfigStrDescriptor+0x40>)
 80231aa:	0018      	movs	r0, r3
 80231ac:	f7ff fd52 	bl	8022c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 80231b0:	4b02      	ldr	r3, [pc, #8]	@ (80231bc <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80231b2:	0018      	movs	r0, r3
 80231b4:	46bd      	mov	sp, r7
 80231b6:	b002      	add	sp, #8
 80231b8:	bd80      	pop	{r7, pc}
 80231ba:	46c0      	nop			@ (mov r8, r8)
 80231bc:	200030b8 	.word	0x200030b8
 80231c0:	0802dbb0 	.word	0x0802dbb0

080231c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80231c4:	b580      	push	{r7, lr}
 80231c6:	b082      	sub	sp, #8
 80231c8:	af00      	add	r7, sp, #0
 80231ca:	0002      	movs	r2, r0
 80231cc:	6039      	str	r1, [r7, #0]
 80231ce:	1dfb      	adds	r3, r7, #7
 80231d0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80231d2:	1dfb      	adds	r3, r7, #7
 80231d4:	781b      	ldrb	r3, [r3, #0]
 80231d6:	2b00      	cmp	r3, #0
 80231d8:	d106      	bne.n	80231e8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80231da:	683a      	ldr	r2, [r7, #0]
 80231dc:	4908      	ldr	r1, [pc, #32]	@ (8023200 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80231de:	4b09      	ldr	r3, [pc, #36]	@ (8023204 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80231e0:	0018      	movs	r0, r3
 80231e2:	f7ff fd37 	bl	8022c54 <USBD_GetString>
 80231e6:	e005      	b.n	80231f4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80231e8:	683a      	ldr	r2, [r7, #0]
 80231ea:	4905      	ldr	r1, [pc, #20]	@ (8023200 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80231ec:	4b05      	ldr	r3, [pc, #20]	@ (8023204 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80231ee:	0018      	movs	r0, r3
 80231f0:	f7ff fd30 	bl	8022c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 80231f4:	4b02      	ldr	r3, [pc, #8]	@ (8023200 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80231f6:	0018      	movs	r0, r3
 80231f8:	46bd      	mov	sp, r7
 80231fa:	b002      	add	sp, #8
 80231fc:	bd80      	pop	{r7, pc}
 80231fe:	46c0      	nop			@ (mov r8, r8)
 8023200:	200030b8 	.word	0x200030b8
 8023204:	0802dbbc 	.word	0x0802dbbc

08023208 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8023208:	b580      	push	{r7, lr}
 802320a:	b084      	sub	sp, #16
 802320c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802320e:	4b10      	ldr	r3, [pc, #64]	@ (8023250 <Get_SerialNum+0x48>)
 8023210:	681b      	ldr	r3, [r3, #0]
 8023212:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8023214:	4b0f      	ldr	r3, [pc, #60]	@ (8023254 <Get_SerialNum+0x4c>)
 8023216:	681b      	ldr	r3, [r3, #0]
 8023218:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802321a:	4b0f      	ldr	r3, [pc, #60]	@ (8023258 <Get_SerialNum+0x50>)
 802321c:	681b      	ldr	r3, [r3, #0]
 802321e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8023220:	68fa      	ldr	r2, [r7, #12]
 8023222:	687b      	ldr	r3, [r7, #4]
 8023224:	18d3      	adds	r3, r2, r3
 8023226:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8023228:	68fb      	ldr	r3, [r7, #12]
 802322a:	2b00      	cmp	r3, #0
 802322c:	d00b      	beq.n	8023246 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802322e:	490b      	ldr	r1, [pc, #44]	@ (802325c <Get_SerialNum+0x54>)
 8023230:	68fb      	ldr	r3, [r7, #12]
 8023232:	2208      	movs	r2, #8
 8023234:	0018      	movs	r0, r3
 8023236:	f000 f815 	bl	8023264 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 802323a:	4909      	ldr	r1, [pc, #36]	@ (8023260 <Get_SerialNum+0x58>)
 802323c:	68bb      	ldr	r3, [r7, #8]
 802323e:	2204      	movs	r2, #4
 8023240:	0018      	movs	r0, r3
 8023242:	f000 f80f 	bl	8023264 <IntToUnicode>
  }
}
 8023246:	46c0      	nop			@ (mov r8, r8)
 8023248:	46bd      	mov	sp, r7
 802324a:	b004      	add	sp, #16
 802324c:	bd80      	pop	{r7, pc}
 802324e:	46c0      	nop			@ (mov r8, r8)
 8023250:	1ff80050 	.word	0x1ff80050
 8023254:	1ff80054 	.word	0x1ff80054
 8023258:	1ff80058 	.word	0x1ff80058
 802325c:	2000025a 	.word	0x2000025a
 8023260:	2000026a 	.word	0x2000026a

08023264 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8023264:	b580      	push	{r7, lr}
 8023266:	b086      	sub	sp, #24
 8023268:	af00      	add	r7, sp, #0
 802326a:	60f8      	str	r0, [r7, #12]
 802326c:	60b9      	str	r1, [r7, #8]
 802326e:	1dfb      	adds	r3, r7, #7
 8023270:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8023272:	2117      	movs	r1, #23
 8023274:	187b      	adds	r3, r7, r1
 8023276:	2200      	movs	r2, #0
 8023278:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 802327a:	187b      	adds	r3, r7, r1
 802327c:	2200      	movs	r2, #0
 802327e:	701a      	strb	r2, [r3, #0]
 8023280:	e02f      	b.n	80232e2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8023282:	68fb      	ldr	r3, [r7, #12]
 8023284:	0f1b      	lsrs	r3, r3, #28
 8023286:	2b09      	cmp	r3, #9
 8023288:	d80d      	bhi.n	80232a6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802328a:	68fb      	ldr	r3, [r7, #12]
 802328c:	0f1b      	lsrs	r3, r3, #28
 802328e:	b2da      	uxtb	r2, r3
 8023290:	2317      	movs	r3, #23
 8023292:	18fb      	adds	r3, r7, r3
 8023294:	781b      	ldrb	r3, [r3, #0]
 8023296:	005b      	lsls	r3, r3, #1
 8023298:	0019      	movs	r1, r3
 802329a:	68bb      	ldr	r3, [r7, #8]
 802329c:	185b      	adds	r3, r3, r1
 802329e:	3230      	adds	r2, #48	@ 0x30
 80232a0:	b2d2      	uxtb	r2, r2
 80232a2:	701a      	strb	r2, [r3, #0]
 80232a4:	e00c      	b.n	80232c0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80232a6:	68fb      	ldr	r3, [r7, #12]
 80232a8:	0f1b      	lsrs	r3, r3, #28
 80232aa:	b2da      	uxtb	r2, r3
 80232ac:	2317      	movs	r3, #23
 80232ae:	18fb      	adds	r3, r7, r3
 80232b0:	781b      	ldrb	r3, [r3, #0]
 80232b2:	005b      	lsls	r3, r3, #1
 80232b4:	0019      	movs	r1, r3
 80232b6:	68bb      	ldr	r3, [r7, #8]
 80232b8:	185b      	adds	r3, r3, r1
 80232ba:	3237      	adds	r2, #55	@ 0x37
 80232bc:	b2d2      	uxtb	r2, r2
 80232be:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80232c0:	68fb      	ldr	r3, [r7, #12]
 80232c2:	011b      	lsls	r3, r3, #4
 80232c4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80232c6:	2117      	movs	r1, #23
 80232c8:	187b      	adds	r3, r7, r1
 80232ca:	781b      	ldrb	r3, [r3, #0]
 80232cc:	005b      	lsls	r3, r3, #1
 80232ce:	3301      	adds	r3, #1
 80232d0:	68ba      	ldr	r2, [r7, #8]
 80232d2:	18d3      	adds	r3, r2, r3
 80232d4:	2200      	movs	r2, #0
 80232d6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80232d8:	187b      	adds	r3, r7, r1
 80232da:	781a      	ldrb	r2, [r3, #0]
 80232dc:	187b      	adds	r3, r7, r1
 80232de:	3201      	adds	r2, #1
 80232e0:	701a      	strb	r2, [r3, #0]
 80232e2:	2317      	movs	r3, #23
 80232e4:	18fa      	adds	r2, r7, r3
 80232e6:	1dfb      	adds	r3, r7, #7
 80232e8:	7812      	ldrb	r2, [r2, #0]
 80232ea:	781b      	ldrb	r3, [r3, #0]
 80232ec:	429a      	cmp	r2, r3
 80232ee:	d3c8      	bcc.n	8023282 <IntToUnicode+0x1e>
  }
}
 80232f0:	46c0      	nop			@ (mov r8, r8)
 80232f2:	46c0      	nop			@ (mov r8, r8)
 80232f4:	46bd      	mov	sp, r7
 80232f6:	b006      	add	sp, #24
 80232f8:	bd80      	pop	{r7, pc}
	...

080232fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80232fc:	b580      	push	{r7, lr}
 80232fe:	b082      	sub	sp, #8
 8023300:	af00      	add	r7, sp, #0
 8023302:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8023304:	687b      	ldr	r3, [r7, #4]
 8023306:	681b      	ldr	r3, [r3, #0]
 8023308:	4a0a      	ldr	r2, [pc, #40]	@ (8023334 <HAL_PCD_MspInit+0x38>)
 802330a:	4293      	cmp	r3, r2
 802330c:	d10e      	bne.n	802332c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 802330e:	4b0a      	ldr	r3, [pc, #40]	@ (8023338 <HAL_PCD_MspInit+0x3c>)
 8023310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8023312:	4b09      	ldr	r3, [pc, #36]	@ (8023338 <HAL_PCD_MspInit+0x3c>)
 8023314:	2180      	movs	r1, #128	@ 0x80
 8023316:	0409      	lsls	r1, r1, #16
 8023318:	430a      	orrs	r2, r1
 802331a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 802331c:	2200      	movs	r2, #0
 802331e:	2100      	movs	r1, #0
 8023320:	201f      	movs	r0, #31
 8023322:	f7f1 ff2d 	bl	8015180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8023326:	201f      	movs	r0, #31
 8023328:	f7f1 ff3f 	bl	80151aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 802332c:	46c0      	nop			@ (mov r8, r8)
 802332e:	46bd      	mov	sp, r7
 8023330:	b002      	add	sp, #8
 8023332:	bd80      	pop	{r7, pc}
 8023334:	40005c00 	.word	0x40005c00
 8023338:	40021000 	.word	0x40021000

0802333c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802333c:	b580      	push	{r7, lr}
 802333e:	b082      	sub	sp, #8
 8023340:	af00      	add	r7, sp, #0
 8023342:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8023344:	687a      	ldr	r2, [r7, #4]
 8023346:	23bc      	movs	r3, #188	@ 0xbc
 8023348:	009b      	lsls	r3, r3, #2
 802334a:	58d2      	ldr	r2, [r2, r3]
 802334c:	687b      	ldr	r3, [r7, #4]
 802334e:	21ac      	movs	r1, #172	@ 0xac
 8023350:	0089      	lsls	r1, r1, #2
 8023352:	468c      	mov	ip, r1
 8023354:	4463      	add	r3, ip
 8023356:	0019      	movs	r1, r3
 8023358:	0010      	movs	r0, r2
 802335a:	f7fe fc11 	bl	8021b80 <USBD_LL_SetupStage>
}
 802335e:	46c0      	nop			@ (mov r8, r8)
 8023360:	46bd      	mov	sp, r7
 8023362:	b002      	add	sp, #8
 8023364:	bd80      	pop	{r7, pc}

08023366 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023366:	b590      	push	{r4, r7, lr}
 8023368:	b083      	sub	sp, #12
 802336a:	af00      	add	r7, sp, #0
 802336c:	6078      	str	r0, [r7, #4]
 802336e:	000a      	movs	r2, r1
 8023370:	1cfb      	adds	r3, r7, #3
 8023372:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8023374:	687a      	ldr	r2, [r7, #4]
 8023376:	23bc      	movs	r3, #188	@ 0xbc
 8023378:	009b      	lsls	r3, r3, #2
 802337a:	58d4      	ldr	r4, [r2, r3]
 802337c:	1cfb      	adds	r3, r7, #3
 802337e:	781a      	ldrb	r2, [r3, #0]
 8023380:	6878      	ldr	r0, [r7, #4]
 8023382:	23be      	movs	r3, #190	@ 0xbe
 8023384:	0059      	lsls	r1, r3, #1
 8023386:	0013      	movs	r3, r2
 8023388:	009b      	lsls	r3, r3, #2
 802338a:	189b      	adds	r3, r3, r2
 802338c:	00db      	lsls	r3, r3, #3
 802338e:	18c3      	adds	r3, r0, r3
 8023390:	185b      	adds	r3, r3, r1
 8023392:	681a      	ldr	r2, [r3, #0]
 8023394:	1cfb      	adds	r3, r7, #3
 8023396:	781b      	ldrb	r3, [r3, #0]
 8023398:	0019      	movs	r1, r3
 802339a:	0020      	movs	r0, r4
 802339c:	f7fe fc4e 	bl	8021c3c <USBD_LL_DataOutStage>
}
 80233a0:	46c0      	nop			@ (mov r8, r8)
 80233a2:	46bd      	mov	sp, r7
 80233a4:	b003      	add	sp, #12
 80233a6:	bd90      	pop	{r4, r7, pc}

080233a8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80233a8:	b580      	push	{r7, lr}
 80233aa:	b082      	sub	sp, #8
 80233ac:	af00      	add	r7, sp, #0
 80233ae:	6078      	str	r0, [r7, #4]
 80233b0:	000a      	movs	r2, r1
 80233b2:	1cfb      	adds	r3, r7, #3
 80233b4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80233b6:	687a      	ldr	r2, [r7, #4]
 80233b8:	23bc      	movs	r3, #188	@ 0xbc
 80233ba:	009b      	lsls	r3, r3, #2
 80233bc:	58d0      	ldr	r0, [r2, r3]
 80233be:	1cfb      	adds	r3, r7, #3
 80233c0:	781a      	ldrb	r2, [r3, #0]
 80233c2:	6879      	ldr	r1, [r7, #4]
 80233c4:	0013      	movs	r3, r2
 80233c6:	009b      	lsls	r3, r3, #2
 80233c8:	189b      	adds	r3, r3, r2
 80233ca:	00db      	lsls	r3, r3, #3
 80233cc:	18cb      	adds	r3, r1, r3
 80233ce:	333c      	adds	r3, #60	@ 0x3c
 80233d0:	681a      	ldr	r2, [r3, #0]
 80233d2:	1cfb      	adds	r3, r7, #3
 80233d4:	781b      	ldrb	r3, [r3, #0]
 80233d6:	0019      	movs	r1, r3
 80233d8:	f7fe fcb2 	bl	8021d40 <USBD_LL_DataInStage>
}
 80233dc:	46c0      	nop			@ (mov r8, r8)
 80233de:	46bd      	mov	sp, r7
 80233e0:	b002      	add	sp, #8
 80233e2:	bd80      	pop	{r7, pc}

080233e4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80233e4:	b580      	push	{r7, lr}
 80233e6:	b082      	sub	sp, #8
 80233e8:	af00      	add	r7, sp, #0
 80233ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80233ec:	687a      	ldr	r2, [r7, #4]
 80233ee:	23bc      	movs	r3, #188	@ 0xbc
 80233f0:	009b      	lsls	r3, r3, #2
 80233f2:	58d3      	ldr	r3, [r2, r3]
 80233f4:	0018      	movs	r0, r3
 80233f6:	f7fe fde9 	bl	8021fcc <USBD_LL_SOF>
}
 80233fa:	46c0      	nop			@ (mov r8, r8)
 80233fc:	46bd      	mov	sp, r7
 80233fe:	b002      	add	sp, #8
 8023400:	bd80      	pop	{r7, pc}

08023402 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023402:	b580      	push	{r7, lr}
 8023404:	b084      	sub	sp, #16
 8023406:	af00      	add	r7, sp, #0
 8023408:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802340a:	230f      	movs	r3, #15
 802340c:	18fb      	adds	r3, r7, r3
 802340e:	2201      	movs	r2, #1
 8023410:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8023412:	687b      	ldr	r3, [r7, #4]
 8023414:	689b      	ldr	r3, [r3, #8]
 8023416:	2b02      	cmp	r3, #2
 8023418:	d001      	beq.n	802341e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 802341a:	f7e9 ffc5 	bl	800d3a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802341e:	687a      	ldr	r2, [r7, #4]
 8023420:	23bc      	movs	r3, #188	@ 0xbc
 8023422:	009b      	lsls	r3, r3, #2
 8023424:	58d2      	ldr	r2, [r2, r3]
 8023426:	230f      	movs	r3, #15
 8023428:	18fb      	adds	r3, r7, r3
 802342a:	781b      	ldrb	r3, [r3, #0]
 802342c:	0019      	movs	r1, r3
 802342e:	0010      	movs	r0, r2
 8023430:	f7fe fd8b 	bl	8021f4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8023434:	687a      	ldr	r2, [r7, #4]
 8023436:	23bc      	movs	r3, #188	@ 0xbc
 8023438:	009b      	lsls	r3, r3, #2
 802343a:	58d3      	ldr	r3, [r2, r3]
 802343c:	0018      	movs	r0, r3
 802343e:	f7fe fd3c 	bl	8021eba <USBD_LL_Reset>
}
 8023442:	46c0      	nop			@ (mov r8, r8)
 8023444:	46bd      	mov	sp, r7
 8023446:	b004      	add	sp, #16
 8023448:	bd80      	pop	{r7, pc}
	...

0802344c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802344c:	b580      	push	{r7, lr}
 802344e:	b082      	sub	sp, #8
 8023450:	af00      	add	r7, sp, #0
 8023452:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8023454:	687a      	ldr	r2, [r7, #4]
 8023456:	23bc      	movs	r3, #188	@ 0xbc
 8023458:	009b      	lsls	r3, r3, #2
 802345a:	58d3      	ldr	r3, [r2, r3]
 802345c:	0018      	movs	r0, r3
 802345e:	f7fe fd85 	bl	8021f6c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8023462:	687b      	ldr	r3, [r7, #4]
 8023464:	699b      	ldr	r3, [r3, #24]
 8023466:	2b00      	cmp	r3, #0
 8023468:	d005      	beq.n	8023476 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802346a:	4b05      	ldr	r3, [pc, #20]	@ (8023480 <HAL_PCD_SuspendCallback+0x34>)
 802346c:	691a      	ldr	r2, [r3, #16]
 802346e:	4b04      	ldr	r3, [pc, #16]	@ (8023480 <HAL_PCD_SuspendCallback+0x34>)
 8023470:	2106      	movs	r1, #6
 8023472:	430a      	orrs	r2, r1
 8023474:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8023476:	46c0      	nop			@ (mov r8, r8)
 8023478:	46bd      	mov	sp, r7
 802347a:	b002      	add	sp, #8
 802347c:	bd80      	pop	{r7, pc}
 802347e:	46c0      	nop			@ (mov r8, r8)
 8023480:	e000ed00 	.word	0xe000ed00

08023484 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023484:	b580      	push	{r7, lr}
 8023486:	b082      	sub	sp, #8
 8023488:	af00      	add	r7, sp, #0
 802348a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 802348c:	687b      	ldr	r3, [r7, #4]
 802348e:	699b      	ldr	r3, [r3, #24]
 8023490:	2b00      	cmp	r3, #0
 8023492:	d007      	beq.n	80234a4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023494:	4b09      	ldr	r3, [pc, #36]	@ (80234bc <HAL_PCD_ResumeCallback+0x38>)
 8023496:	691a      	ldr	r2, [r3, #16]
 8023498:	4b08      	ldr	r3, [pc, #32]	@ (80234bc <HAL_PCD_ResumeCallback+0x38>)
 802349a:	2106      	movs	r1, #6
 802349c:	438a      	bics	r2, r1
 802349e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80234a0:	f000 fa44 	bl	802392c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80234a4:	687a      	ldr	r2, [r7, #4]
 80234a6:	23bc      	movs	r3, #188	@ 0xbc
 80234a8:	009b      	lsls	r3, r3, #2
 80234aa:	58d3      	ldr	r3, [r2, r3]
 80234ac:	0018      	movs	r0, r3
 80234ae:	f7fe fd75 	bl	8021f9c <USBD_LL_Resume>
}
 80234b2:	46c0      	nop			@ (mov r8, r8)
 80234b4:	46bd      	mov	sp, r7
 80234b6:	b002      	add	sp, #8
 80234b8:	bd80      	pop	{r7, pc}
 80234ba:	46c0      	nop			@ (mov r8, r8)
 80234bc:	e000ed00 	.word	0xe000ed00

080234c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80234c0:	b580      	push	{r7, lr}
 80234c2:	b082      	sub	sp, #8
 80234c4:	af00      	add	r7, sp, #0
 80234c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80234c8:	4a2d      	ldr	r2, [pc, #180]	@ (8023580 <USBD_LL_Init+0xc0>)
 80234ca:	23bc      	movs	r3, #188	@ 0xbc
 80234cc:	009b      	lsls	r3, r3, #2
 80234ce:	6879      	ldr	r1, [r7, #4]
 80234d0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80234d2:	687a      	ldr	r2, [r7, #4]
 80234d4:	23b0      	movs	r3, #176	@ 0xb0
 80234d6:	009b      	lsls	r3, r3, #2
 80234d8:	4929      	ldr	r1, [pc, #164]	@ (8023580 <USBD_LL_Init+0xc0>)
 80234da:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80234dc:	4b28      	ldr	r3, [pc, #160]	@ (8023580 <USBD_LL_Init+0xc0>)
 80234de:	4a29      	ldr	r2, [pc, #164]	@ (8023584 <USBD_LL_Init+0xc4>)
 80234e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80234e2:	4b27      	ldr	r3, [pc, #156]	@ (8023580 <USBD_LL_Init+0xc0>)
 80234e4:	2208      	movs	r2, #8
 80234e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80234e8:	4b25      	ldr	r3, [pc, #148]	@ (8023580 <USBD_LL_Init+0xc0>)
 80234ea:	2202      	movs	r2, #2
 80234ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80234ee:	4b24      	ldr	r3, [pc, #144]	@ (8023580 <USBD_LL_Init+0xc0>)
 80234f0:	2202      	movs	r2, #2
 80234f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80234f4:	4b22      	ldr	r3, [pc, #136]	@ (8023580 <USBD_LL_Init+0xc0>)
 80234f6:	2200      	movs	r2, #0
 80234f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80234fa:	4b21      	ldr	r3, [pc, #132]	@ (8023580 <USBD_LL_Init+0xc0>)
 80234fc:	2200      	movs	r2, #0
 80234fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8023500:	4b1f      	ldr	r3, [pc, #124]	@ (8023580 <USBD_LL_Init+0xc0>)
 8023502:	2200      	movs	r2, #0
 8023504:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8023506:	4b1e      	ldr	r3, [pc, #120]	@ (8023580 <USBD_LL_Init+0xc0>)
 8023508:	0018      	movs	r0, r3
 802350a:	f7f5 ff7f 	bl	801940c <HAL_PCD_Init>
 802350e:	1e03      	subs	r3, r0, #0
 8023510:	d001      	beq.n	8023516 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8023512:	f7e9 ff49 	bl	800d3a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8023516:	687a      	ldr	r2, [r7, #4]
 8023518:	23b0      	movs	r3, #176	@ 0xb0
 802351a:	009b      	lsls	r3, r3, #2
 802351c:	58d0      	ldr	r0, [r2, r3]
 802351e:	2318      	movs	r3, #24
 8023520:	2200      	movs	r2, #0
 8023522:	2100      	movs	r1, #0
 8023524:	f7f7 fd40 	bl	801afa8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8023528:	687a      	ldr	r2, [r7, #4]
 802352a:	23b0      	movs	r3, #176	@ 0xb0
 802352c:	009b      	lsls	r3, r3, #2
 802352e:	58d0      	ldr	r0, [r2, r3]
 8023530:	2358      	movs	r3, #88	@ 0x58
 8023532:	2200      	movs	r2, #0
 8023534:	2180      	movs	r1, #128	@ 0x80
 8023536:	f7f7 fd37 	bl	801afa8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 802353a:	687a      	ldr	r2, [r7, #4]
 802353c:	23b0      	movs	r3, #176	@ 0xb0
 802353e:	009b      	lsls	r3, r3, #2
 8023540:	58d0      	ldr	r0, [r2, r3]
 8023542:	23c0      	movs	r3, #192	@ 0xc0
 8023544:	2200      	movs	r2, #0
 8023546:	2181      	movs	r1, #129	@ 0x81
 8023548:	f7f7 fd2e 	bl	801afa8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 802354c:	687a      	ldr	r2, [r7, #4]
 802354e:	23b0      	movs	r3, #176	@ 0xb0
 8023550:	009b      	lsls	r3, r3, #2
 8023552:	58d0      	ldr	r0, [r2, r3]
 8023554:	2388      	movs	r3, #136	@ 0x88
 8023556:	005b      	lsls	r3, r3, #1
 8023558:	2200      	movs	r2, #0
 802355a:	2101      	movs	r1, #1
 802355c:	f7f7 fd24 	bl	801afa8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8023560:	687a      	ldr	r2, [r7, #4]
 8023562:	23b0      	movs	r3, #176	@ 0xb0
 8023564:	009b      	lsls	r3, r3, #2
 8023566:	58d0      	ldr	r0, [r2, r3]
 8023568:	2380      	movs	r3, #128	@ 0x80
 802356a:	005b      	lsls	r3, r3, #1
 802356c:	2200      	movs	r2, #0
 802356e:	2182      	movs	r1, #130	@ 0x82
 8023570:	f7f7 fd1a 	bl	801afa8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8023574:	2300      	movs	r3, #0
}
 8023576:	0018      	movs	r0, r3
 8023578:	46bd      	mov	sp, r7
 802357a:	b002      	add	sp, #8
 802357c:	bd80      	pop	{r7, pc}
 802357e:	46c0      	nop			@ (mov r8, r8)
 8023580:	200032b8 	.word	0x200032b8
 8023584:	40005c00 	.word	0x40005c00

08023588 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8023588:	b5f0      	push	{r4, r5, r6, r7, lr}
 802358a:	b085      	sub	sp, #20
 802358c:	af00      	add	r7, sp, #0
 802358e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023590:	210f      	movs	r1, #15
 8023592:	187b      	adds	r3, r7, r1
 8023594:	2200      	movs	r2, #0
 8023596:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023598:	260e      	movs	r6, #14
 802359a:	19bb      	adds	r3, r7, r6
 802359c:	2200      	movs	r2, #0
 802359e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80235a0:	687a      	ldr	r2, [r7, #4]
 80235a2:	23b0      	movs	r3, #176	@ 0xb0
 80235a4:	009b      	lsls	r3, r3, #2
 80235a6:	58d3      	ldr	r3, [r2, r3]
 80235a8:	000d      	movs	r5, r1
 80235aa:	187c      	adds	r4, r7, r1
 80235ac:	0018      	movs	r0, r3
 80235ae:	f7f6 f82d 	bl	801960c <HAL_PCD_Start>
 80235b2:	0003      	movs	r3, r0
 80235b4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80235b6:	19bc      	adds	r4, r7, r6
 80235b8:	197b      	adds	r3, r7, r5
 80235ba:	781b      	ldrb	r3, [r3, #0]
 80235bc:	0018      	movs	r0, r3
 80235be:	f000 f9bc 	bl	802393a <USBD_Get_USB_Status>
 80235c2:	0003      	movs	r3, r0
 80235c4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80235c6:	19bb      	adds	r3, r7, r6
 80235c8:	781b      	ldrb	r3, [r3, #0]
}
 80235ca:	0018      	movs	r0, r3
 80235cc:	46bd      	mov	sp, r7
 80235ce:	b005      	add	sp, #20
 80235d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080235d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80235d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80235d4:	b085      	sub	sp, #20
 80235d6:	af00      	add	r7, sp, #0
 80235d8:	6078      	str	r0, [r7, #4]
 80235da:	000c      	movs	r4, r1
 80235dc:	0010      	movs	r0, r2
 80235de:	0019      	movs	r1, r3
 80235e0:	1cfb      	adds	r3, r7, #3
 80235e2:	1c22      	adds	r2, r4, #0
 80235e4:	701a      	strb	r2, [r3, #0]
 80235e6:	1cbb      	adds	r3, r7, #2
 80235e8:	1c02      	adds	r2, r0, #0
 80235ea:	701a      	strb	r2, [r3, #0]
 80235ec:	003b      	movs	r3, r7
 80235ee:	1c0a      	adds	r2, r1, #0
 80235f0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80235f2:	260f      	movs	r6, #15
 80235f4:	19bb      	adds	r3, r7, r6
 80235f6:	2200      	movs	r2, #0
 80235f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80235fa:	250e      	movs	r5, #14
 80235fc:	197b      	adds	r3, r7, r5
 80235fe:	2200      	movs	r2, #0
 8023600:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023602:	687a      	ldr	r2, [r7, #4]
 8023604:	23b0      	movs	r3, #176	@ 0xb0
 8023606:	009b      	lsls	r3, r3, #2
 8023608:	58d0      	ldr	r0, [r2, r3]
 802360a:	19bc      	adds	r4, r7, r6
 802360c:	1cbb      	adds	r3, r7, #2
 802360e:	781d      	ldrb	r5, [r3, #0]
 8023610:	003b      	movs	r3, r7
 8023612:	881a      	ldrh	r2, [r3, #0]
 8023614:	1cfb      	adds	r3, r7, #3
 8023616:	7819      	ldrb	r1, [r3, #0]
 8023618:	002b      	movs	r3, r5
 802361a:	f7f6 f98c 	bl	8019936 <HAL_PCD_EP_Open>
 802361e:	0003      	movs	r3, r0
 8023620:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023622:	250e      	movs	r5, #14
 8023624:	197c      	adds	r4, r7, r5
 8023626:	19bb      	adds	r3, r7, r6
 8023628:	781b      	ldrb	r3, [r3, #0]
 802362a:	0018      	movs	r0, r3
 802362c:	f000 f985 	bl	802393a <USBD_Get_USB_Status>
 8023630:	0003      	movs	r3, r0
 8023632:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023634:	197b      	adds	r3, r7, r5
 8023636:	781b      	ldrb	r3, [r3, #0]
}
 8023638:	0018      	movs	r0, r3
 802363a:	46bd      	mov	sp, r7
 802363c:	b005      	add	sp, #20
 802363e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023640 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023642:	b085      	sub	sp, #20
 8023644:	af00      	add	r7, sp, #0
 8023646:	6078      	str	r0, [r7, #4]
 8023648:	000a      	movs	r2, r1
 802364a:	1cfb      	adds	r3, r7, #3
 802364c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802364e:	210f      	movs	r1, #15
 8023650:	187b      	adds	r3, r7, r1
 8023652:	2200      	movs	r2, #0
 8023654:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023656:	260e      	movs	r6, #14
 8023658:	19bb      	adds	r3, r7, r6
 802365a:	2200      	movs	r2, #0
 802365c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802365e:	687a      	ldr	r2, [r7, #4]
 8023660:	23b0      	movs	r3, #176	@ 0xb0
 8023662:	009b      	lsls	r3, r3, #2
 8023664:	58d2      	ldr	r2, [r2, r3]
 8023666:	000d      	movs	r5, r1
 8023668:	187c      	adds	r4, r7, r1
 802366a:	1cfb      	adds	r3, r7, #3
 802366c:	781b      	ldrb	r3, [r3, #0]
 802366e:	0019      	movs	r1, r3
 8023670:	0010      	movs	r0, r2
 8023672:	f7f6 f9cf 	bl	8019a14 <HAL_PCD_EP_Close>
 8023676:	0003      	movs	r3, r0
 8023678:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802367a:	19bc      	adds	r4, r7, r6
 802367c:	197b      	adds	r3, r7, r5
 802367e:	781b      	ldrb	r3, [r3, #0]
 8023680:	0018      	movs	r0, r3
 8023682:	f000 f95a 	bl	802393a <USBD_Get_USB_Status>
 8023686:	0003      	movs	r3, r0
 8023688:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802368a:	19bb      	adds	r3, r7, r6
 802368c:	781b      	ldrb	r3, [r3, #0]
}
 802368e:	0018      	movs	r0, r3
 8023690:	46bd      	mov	sp, r7
 8023692:	b005      	add	sp, #20
 8023694:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023696 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023696:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023698:	b085      	sub	sp, #20
 802369a:	af00      	add	r7, sp, #0
 802369c:	6078      	str	r0, [r7, #4]
 802369e:	000a      	movs	r2, r1
 80236a0:	1cfb      	adds	r3, r7, #3
 80236a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80236a4:	210f      	movs	r1, #15
 80236a6:	187b      	adds	r3, r7, r1
 80236a8:	2200      	movs	r2, #0
 80236aa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80236ac:	260e      	movs	r6, #14
 80236ae:	19bb      	adds	r3, r7, r6
 80236b0:	2200      	movs	r2, #0
 80236b2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80236b4:	687a      	ldr	r2, [r7, #4]
 80236b6:	23b0      	movs	r3, #176	@ 0xb0
 80236b8:	009b      	lsls	r3, r3, #2
 80236ba:	58d2      	ldr	r2, [r2, r3]
 80236bc:	000d      	movs	r5, r1
 80236be:	187c      	adds	r4, r7, r1
 80236c0:	1cfb      	adds	r3, r7, #3
 80236c2:	781b      	ldrb	r3, [r3, #0]
 80236c4:	0019      	movs	r1, r3
 80236c6:	0010      	movs	r0, r2
 80236c8:	f7f6 fa81 	bl	8019bce <HAL_PCD_EP_SetStall>
 80236cc:	0003      	movs	r3, r0
 80236ce:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80236d0:	19bc      	adds	r4, r7, r6
 80236d2:	197b      	adds	r3, r7, r5
 80236d4:	781b      	ldrb	r3, [r3, #0]
 80236d6:	0018      	movs	r0, r3
 80236d8:	f000 f92f 	bl	802393a <USBD_Get_USB_Status>
 80236dc:	0003      	movs	r3, r0
 80236de:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80236e0:	19bb      	adds	r3, r7, r6
 80236e2:	781b      	ldrb	r3, [r3, #0]
}
 80236e4:	0018      	movs	r0, r3
 80236e6:	46bd      	mov	sp, r7
 80236e8:	b005      	add	sp, #20
 80236ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080236ec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80236ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80236ee:	b085      	sub	sp, #20
 80236f0:	af00      	add	r7, sp, #0
 80236f2:	6078      	str	r0, [r7, #4]
 80236f4:	000a      	movs	r2, r1
 80236f6:	1cfb      	adds	r3, r7, #3
 80236f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80236fa:	210f      	movs	r1, #15
 80236fc:	187b      	adds	r3, r7, r1
 80236fe:	2200      	movs	r2, #0
 8023700:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023702:	260e      	movs	r6, #14
 8023704:	19bb      	adds	r3, r7, r6
 8023706:	2200      	movs	r2, #0
 8023708:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802370a:	687a      	ldr	r2, [r7, #4]
 802370c:	23b0      	movs	r3, #176	@ 0xb0
 802370e:	009b      	lsls	r3, r3, #2
 8023710:	58d2      	ldr	r2, [r2, r3]
 8023712:	000d      	movs	r5, r1
 8023714:	187c      	adds	r4, r7, r1
 8023716:	1cfb      	adds	r3, r7, #3
 8023718:	781b      	ldrb	r3, [r3, #0]
 802371a:	0019      	movs	r1, r3
 802371c:	0010      	movs	r0, r2
 802371e:	f7f6 fab2 	bl	8019c86 <HAL_PCD_EP_ClrStall>
 8023722:	0003      	movs	r3, r0
 8023724:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023726:	19bc      	adds	r4, r7, r6
 8023728:	197b      	adds	r3, r7, r5
 802372a:	781b      	ldrb	r3, [r3, #0]
 802372c:	0018      	movs	r0, r3
 802372e:	f000 f904 	bl	802393a <USBD_Get_USB_Status>
 8023732:	0003      	movs	r3, r0
 8023734:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023736:	19bb      	adds	r3, r7, r6
 8023738:	781b      	ldrb	r3, [r3, #0]
}
 802373a:	0018      	movs	r0, r3
 802373c:	46bd      	mov	sp, r7
 802373e:	b005      	add	sp, #20
 8023740:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023742 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023742:	b580      	push	{r7, lr}
 8023744:	b084      	sub	sp, #16
 8023746:	af00      	add	r7, sp, #0
 8023748:	6078      	str	r0, [r7, #4]
 802374a:	000a      	movs	r2, r1
 802374c:	1cfb      	adds	r3, r7, #3
 802374e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023750:	687a      	ldr	r2, [r7, #4]
 8023752:	23b0      	movs	r3, #176	@ 0xb0
 8023754:	009b      	lsls	r3, r3, #2
 8023756:	58d3      	ldr	r3, [r2, r3]
 8023758:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 802375a:	1cfb      	adds	r3, r7, #3
 802375c:	781b      	ldrb	r3, [r3, #0]
 802375e:	b25b      	sxtb	r3, r3
 8023760:	2b00      	cmp	r3, #0
 8023762:	da0d      	bge.n	8023780 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8023764:	1cfb      	adds	r3, r7, #3
 8023766:	781b      	ldrb	r3, [r3, #0]
 8023768:	227f      	movs	r2, #127	@ 0x7f
 802376a:	4013      	ands	r3, r2
 802376c:	68f9      	ldr	r1, [r7, #12]
 802376e:	1c5a      	adds	r2, r3, #1
 8023770:	0013      	movs	r3, r2
 8023772:	009b      	lsls	r3, r3, #2
 8023774:	189b      	adds	r3, r3, r2
 8023776:	00db      	lsls	r3, r3, #3
 8023778:	18cb      	adds	r3, r1, r3
 802377a:	3302      	adds	r3, #2
 802377c:	781b      	ldrb	r3, [r3, #0]
 802377e:	e00d      	b.n	802379c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8023780:	1cfb      	adds	r3, r7, #3
 8023782:	781b      	ldrb	r3, [r3, #0]
 8023784:	227f      	movs	r2, #127	@ 0x7f
 8023786:	401a      	ands	r2, r3
 8023788:	68f8      	ldr	r0, [r7, #12]
 802378a:	23b5      	movs	r3, #181	@ 0xb5
 802378c:	0059      	lsls	r1, r3, #1
 802378e:	0013      	movs	r3, r2
 8023790:	009b      	lsls	r3, r3, #2
 8023792:	189b      	adds	r3, r3, r2
 8023794:	00db      	lsls	r3, r3, #3
 8023796:	18c3      	adds	r3, r0, r3
 8023798:	185b      	adds	r3, r3, r1
 802379a:	781b      	ldrb	r3, [r3, #0]
  }
}
 802379c:	0018      	movs	r0, r3
 802379e:	46bd      	mov	sp, r7
 80237a0:	b004      	add	sp, #16
 80237a2:	bd80      	pop	{r7, pc}

080237a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80237a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80237a6:	b085      	sub	sp, #20
 80237a8:	af00      	add	r7, sp, #0
 80237aa:	6078      	str	r0, [r7, #4]
 80237ac:	000a      	movs	r2, r1
 80237ae:	1cfb      	adds	r3, r7, #3
 80237b0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80237b2:	210f      	movs	r1, #15
 80237b4:	187b      	adds	r3, r7, r1
 80237b6:	2200      	movs	r2, #0
 80237b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80237ba:	260e      	movs	r6, #14
 80237bc:	19bb      	adds	r3, r7, r6
 80237be:	2200      	movs	r2, #0
 80237c0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80237c2:	687a      	ldr	r2, [r7, #4]
 80237c4:	23b0      	movs	r3, #176	@ 0xb0
 80237c6:	009b      	lsls	r3, r3, #2
 80237c8:	58d2      	ldr	r2, [r2, r3]
 80237ca:	000d      	movs	r5, r1
 80237cc:	187c      	adds	r4, r7, r1
 80237ce:	1cfb      	adds	r3, r7, #3
 80237d0:	781b      	ldrb	r3, [r3, #0]
 80237d2:	0019      	movs	r1, r3
 80237d4:	0010      	movs	r0, r2
 80237d6:	f7f6 f883 	bl	80198e0 <HAL_PCD_SetAddress>
 80237da:	0003      	movs	r3, r0
 80237dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80237de:	19bc      	adds	r4, r7, r6
 80237e0:	197b      	adds	r3, r7, r5
 80237e2:	781b      	ldrb	r3, [r3, #0]
 80237e4:	0018      	movs	r0, r3
 80237e6:	f000 f8a8 	bl	802393a <USBD_Get_USB_Status>
 80237ea:	0003      	movs	r3, r0
 80237ec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80237ee:	19bb      	adds	r3, r7, r6
 80237f0:	781b      	ldrb	r3, [r3, #0]
}
 80237f2:	0018      	movs	r0, r3
 80237f4:	46bd      	mov	sp, r7
 80237f6:	b005      	add	sp, #20
 80237f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080237fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80237fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80237fc:	b087      	sub	sp, #28
 80237fe:	af00      	add	r7, sp, #0
 8023800:	60f8      	str	r0, [r7, #12]
 8023802:	0008      	movs	r0, r1
 8023804:	607a      	str	r2, [r7, #4]
 8023806:	0019      	movs	r1, r3
 8023808:	230b      	movs	r3, #11
 802380a:	18fb      	adds	r3, r7, r3
 802380c:	1c02      	adds	r2, r0, #0
 802380e:	701a      	strb	r2, [r3, #0]
 8023810:	2408      	movs	r4, #8
 8023812:	193b      	adds	r3, r7, r4
 8023814:	1c0a      	adds	r2, r1, #0
 8023816:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023818:	2117      	movs	r1, #23
 802381a:	187b      	adds	r3, r7, r1
 802381c:	2200      	movs	r2, #0
 802381e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023820:	2516      	movs	r5, #22
 8023822:	197b      	adds	r3, r7, r5
 8023824:	2200      	movs	r2, #0
 8023826:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023828:	68fa      	ldr	r2, [r7, #12]
 802382a:	23b0      	movs	r3, #176	@ 0xb0
 802382c:	009b      	lsls	r3, r3, #2
 802382e:	58d0      	ldr	r0, [r2, r3]
 8023830:	193b      	adds	r3, r7, r4
 8023832:	881d      	ldrh	r5, [r3, #0]
 8023834:	000e      	movs	r6, r1
 8023836:	187c      	adds	r4, r7, r1
 8023838:	687a      	ldr	r2, [r7, #4]
 802383a:	230b      	movs	r3, #11
 802383c:	18fb      	adds	r3, r7, r3
 802383e:	7819      	ldrb	r1, [r3, #0]
 8023840:	002b      	movs	r3, r5
 8023842:	f7f6 f988 	bl	8019b56 <HAL_PCD_EP_Transmit>
 8023846:	0003      	movs	r3, r0
 8023848:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802384a:	2516      	movs	r5, #22
 802384c:	197c      	adds	r4, r7, r5
 802384e:	19bb      	adds	r3, r7, r6
 8023850:	781b      	ldrb	r3, [r3, #0]
 8023852:	0018      	movs	r0, r3
 8023854:	f000 f871 	bl	802393a <USBD_Get_USB_Status>
 8023858:	0003      	movs	r3, r0
 802385a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802385c:	197b      	adds	r3, r7, r5
 802385e:	781b      	ldrb	r3, [r3, #0]
}
 8023860:	0018      	movs	r0, r3
 8023862:	46bd      	mov	sp, r7
 8023864:	b007      	add	sp, #28
 8023866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023868 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023868:	b5f0      	push	{r4, r5, r6, r7, lr}
 802386a:	b087      	sub	sp, #28
 802386c:	af00      	add	r7, sp, #0
 802386e:	60f8      	str	r0, [r7, #12]
 8023870:	0008      	movs	r0, r1
 8023872:	607a      	str	r2, [r7, #4]
 8023874:	0019      	movs	r1, r3
 8023876:	230b      	movs	r3, #11
 8023878:	18fb      	adds	r3, r7, r3
 802387a:	1c02      	adds	r2, r0, #0
 802387c:	701a      	strb	r2, [r3, #0]
 802387e:	2408      	movs	r4, #8
 8023880:	193b      	adds	r3, r7, r4
 8023882:	1c0a      	adds	r2, r1, #0
 8023884:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023886:	2117      	movs	r1, #23
 8023888:	187b      	adds	r3, r7, r1
 802388a:	2200      	movs	r2, #0
 802388c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802388e:	2516      	movs	r5, #22
 8023890:	197b      	adds	r3, r7, r5
 8023892:	2200      	movs	r2, #0
 8023894:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023896:	68fa      	ldr	r2, [r7, #12]
 8023898:	23b0      	movs	r3, #176	@ 0xb0
 802389a:	009b      	lsls	r3, r3, #2
 802389c:	58d0      	ldr	r0, [r2, r3]
 802389e:	193b      	adds	r3, r7, r4
 80238a0:	881d      	ldrh	r5, [r3, #0]
 80238a2:	000e      	movs	r6, r1
 80238a4:	187c      	adds	r4, r7, r1
 80238a6:	687a      	ldr	r2, [r7, #4]
 80238a8:	230b      	movs	r3, #11
 80238aa:	18fb      	adds	r3, r7, r3
 80238ac:	7819      	ldrb	r1, [r3, #0]
 80238ae:	002b      	movs	r3, r5
 80238b0:	f7f6 f901 	bl	8019ab6 <HAL_PCD_EP_Receive>
 80238b4:	0003      	movs	r3, r0
 80238b6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80238b8:	2516      	movs	r5, #22
 80238ba:	197c      	adds	r4, r7, r5
 80238bc:	19bb      	adds	r3, r7, r6
 80238be:	781b      	ldrb	r3, [r3, #0]
 80238c0:	0018      	movs	r0, r3
 80238c2:	f000 f83a 	bl	802393a <USBD_Get_USB_Status>
 80238c6:	0003      	movs	r3, r0
 80238c8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80238ca:	197b      	adds	r3, r7, r5
 80238cc:	781b      	ldrb	r3, [r3, #0]
}
 80238ce:	0018      	movs	r0, r3
 80238d0:	46bd      	mov	sp, r7
 80238d2:	b007      	add	sp, #28
 80238d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080238d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80238d6:	b580      	push	{r7, lr}
 80238d8:	b082      	sub	sp, #8
 80238da:	af00      	add	r7, sp, #0
 80238dc:	6078      	str	r0, [r7, #4]
 80238de:	000a      	movs	r2, r1
 80238e0:	1cfb      	adds	r3, r7, #3
 80238e2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80238e4:	687a      	ldr	r2, [r7, #4]
 80238e6:	23b0      	movs	r3, #176	@ 0xb0
 80238e8:	009b      	lsls	r3, r3, #2
 80238ea:	58d2      	ldr	r2, [r2, r3]
 80238ec:	1cfb      	adds	r3, r7, #3
 80238ee:	781b      	ldrb	r3, [r3, #0]
 80238f0:	0019      	movs	r1, r3
 80238f2:	0010      	movs	r0, r2
 80238f4:	f7f6 f916 	bl	8019b24 <HAL_PCD_EP_GetRxCount>
 80238f8:	0003      	movs	r3, r0
}
 80238fa:	0018      	movs	r0, r3
 80238fc:	46bd      	mov	sp, r7
 80238fe:	b002      	add	sp, #8
 8023900:	bd80      	pop	{r7, pc}
	...

08023904 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8023904:	b580      	push	{r7, lr}
 8023906:	b082      	sub	sp, #8
 8023908:	af00      	add	r7, sp, #0
 802390a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 802390c:	4b02      	ldr	r3, [pc, #8]	@ (8023918 <USBD_static_malloc+0x14>)
}
 802390e:	0018      	movs	r0, r3
 8023910:	46bd      	mov	sp, r7
 8023912:	b002      	add	sp, #8
 8023914:	bd80      	pop	{r7, pc}
 8023916:	46c0      	nop			@ (mov r8, r8)
 8023918:	200035ac 	.word	0x200035ac

0802391c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 802391c:	b580      	push	{r7, lr}
 802391e:	b082      	sub	sp, #8
 8023920:	af00      	add	r7, sp, #0
 8023922:	6078      	str	r0, [r7, #4]

}
 8023924:	46c0      	nop			@ (mov r8, r8)
 8023926:	46bd      	mov	sp, r7
 8023928:	b002      	add	sp, #8
 802392a:	bd80      	pop	{r7, pc}

0802392c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 802392c:	b580      	push	{r7, lr}
 802392e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8023930:	f7e9 fbce 	bl	800d0d0 <SystemClock_Config>
}
 8023934:	46c0      	nop			@ (mov r8, r8)
 8023936:	46bd      	mov	sp, r7
 8023938:	bd80      	pop	{r7, pc}

0802393a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802393a:	b580      	push	{r7, lr}
 802393c:	b084      	sub	sp, #16
 802393e:	af00      	add	r7, sp, #0
 8023940:	0002      	movs	r2, r0
 8023942:	1dfb      	adds	r3, r7, #7
 8023944:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023946:	230f      	movs	r3, #15
 8023948:	18fb      	adds	r3, r7, r3
 802394a:	2200      	movs	r2, #0
 802394c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 802394e:	1dfb      	adds	r3, r7, #7
 8023950:	781b      	ldrb	r3, [r3, #0]
 8023952:	2b03      	cmp	r3, #3
 8023954:	d017      	beq.n	8023986 <USBD_Get_USB_Status+0x4c>
 8023956:	dc1b      	bgt.n	8023990 <USBD_Get_USB_Status+0x56>
 8023958:	2b02      	cmp	r3, #2
 802395a:	d00f      	beq.n	802397c <USBD_Get_USB_Status+0x42>
 802395c:	dc18      	bgt.n	8023990 <USBD_Get_USB_Status+0x56>
 802395e:	2b00      	cmp	r3, #0
 8023960:	d002      	beq.n	8023968 <USBD_Get_USB_Status+0x2e>
 8023962:	2b01      	cmp	r3, #1
 8023964:	d005      	beq.n	8023972 <USBD_Get_USB_Status+0x38>
 8023966:	e013      	b.n	8023990 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8023968:	230f      	movs	r3, #15
 802396a:	18fb      	adds	r3, r7, r3
 802396c:	2200      	movs	r2, #0
 802396e:	701a      	strb	r2, [r3, #0]
    break;
 8023970:	e013      	b.n	802399a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8023972:	230f      	movs	r3, #15
 8023974:	18fb      	adds	r3, r7, r3
 8023976:	2202      	movs	r2, #2
 8023978:	701a      	strb	r2, [r3, #0]
    break;
 802397a:	e00e      	b.n	802399a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 802397c:	230f      	movs	r3, #15
 802397e:	18fb      	adds	r3, r7, r3
 8023980:	2201      	movs	r2, #1
 8023982:	701a      	strb	r2, [r3, #0]
    break;
 8023984:	e009      	b.n	802399a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8023986:	230f      	movs	r3, #15
 8023988:	18fb      	adds	r3, r7, r3
 802398a:	2202      	movs	r2, #2
 802398c:	701a      	strb	r2, [r3, #0]
    break;
 802398e:	e004      	b.n	802399a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8023990:	230f      	movs	r3, #15
 8023992:	18fb      	adds	r3, r7, r3
 8023994:	2202      	movs	r2, #2
 8023996:	701a      	strb	r2, [r3, #0]
    break;
 8023998:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 802399a:	230f      	movs	r3, #15
 802399c:	18fb      	adds	r3, r7, r3
 802399e:	781b      	ldrb	r3, [r3, #0]
}
 80239a0:	0018      	movs	r0, r3
 80239a2:	46bd      	mov	sp, r7
 80239a4:	b004      	add	sp, #16
 80239a6:	bd80      	pop	{r7, pc}

080239a8 <arm_cfft_radix4by2_q31>:
 80239a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239aa:	465f      	mov	r7, fp
 80239ac:	4656      	mov	r6, sl
 80239ae:	464d      	mov	r5, r9
 80239b0:	4644      	mov	r4, r8
 80239b2:	000b      	movs	r3, r1
 80239b4:	b4f0      	push	{r4, r5, r6, r7}
 80239b6:	085b      	lsrs	r3, r3, #1
 80239b8:	b08f      	sub	sp, #60	@ 0x3c
 80239ba:	910a      	str	r1, [sp, #40]	@ 0x28
 80239bc:	0007      	movs	r7, r0
 80239be:	9009      	str	r0, [sp, #36]	@ 0x24
 80239c0:	0011      	movs	r1, r2
 80239c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80239c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80239c6:	2b00      	cmp	r3, #0
 80239c8:	d100      	bne.n	80239cc <arm_cfft_radix4by2_q31+0x24>
 80239ca:	e0a0      	b.n	8023b0e <arm_cfft_radix4by2_q31+0x166>
 80239cc:	0002      	movs	r2, r0
 80239ce:	00db      	lsls	r3, r3, #3
 80239d0:	3204      	adds	r2, #4
 80239d2:	4691      	mov	r9, r2
 80239d4:	4698      	mov	r8, r3
 80239d6:	000a      	movs	r2, r1
 80239d8:	464e      	mov	r6, r9
 80239da:	4442      	add	r2, r8
 80239dc:	4699      	mov	r9, r3
 80239de:	4688      	mov	r8, r1
 80239e0:	9208      	str	r2, [sp, #32]
 80239e2:	900d      	str	r0, [sp, #52]	@ 0x34
 80239e4:	4643      	mov	r3, r8
 80239e6:	681b      	ldr	r3, [r3, #0]
 80239e8:	469b      	mov	fp, r3
 80239ea:	4643      	mov	r3, r8
 80239ec:	685b      	ldr	r3, [r3, #4]
 80239ee:	469a      	mov	sl, r3
 80239f0:	683b      	ldr	r3, [r7, #0]
 80239f2:	109c      	asrs	r4, r3, #2
 80239f4:	464b      	mov	r3, r9
 80239f6:	58fb      	ldr	r3, [r7, r3]
 80239f8:	109a      	asrs	r2, r3, #2
 80239fa:	18a3      	adds	r3, r4, r2
 80239fc:	603b      	str	r3, [r7, #0]
 80239fe:	6833      	ldr	r3, [r6, #0]
 8023a00:	1aa4      	subs	r4, r4, r2
 8023a02:	109d      	asrs	r5, r3, #2
 8023a04:	464b      	mov	r3, r9
 8023a06:	58f3      	ldr	r3, [r6, r3]
 8023a08:	17e2      	asrs	r2, r4, #31
 8023a0a:	109b      	asrs	r3, r3, #2
 8023a0c:	18e9      	adds	r1, r5, r3
 8023a0e:	6031      	str	r1, [r6, #0]
 8023a10:	0011      	movs	r1, r2
 8023a12:	465a      	mov	r2, fp
 8023a14:	17d2      	asrs	r2, r2, #31
 8023a16:	0010      	movs	r0, r2
 8023a18:	4652      	mov	r2, sl
 8023a1a:	1aed      	subs	r5, r5, r3
 8023a1c:	17eb      	asrs	r3, r5, #31
 8023a1e:	17d2      	asrs	r2, r2, #31
 8023a20:	9307      	str	r3, [sp, #28]
 8023a22:	9204      	str	r2, [sp, #16]
 8023a24:	0003      	movs	r3, r0
 8023a26:	465a      	mov	r2, fp
 8023a28:	9006      	str	r0, [sp, #24]
 8023a2a:	0020      	movs	r0, r4
 8023a2c:	9105      	str	r1, [sp, #20]
 8023a2e:	f7dc fdc7 	bl	80005c0 <__aeabi_lmul>
 8023a32:	2280      	movs	r2, #128	@ 0x80
 8023a34:	2300      	movs	r3, #0
 8023a36:	0612      	lsls	r2, r2, #24
 8023a38:	1880      	adds	r0, r0, r2
 8023a3a:	4159      	adcs	r1, r3
 8023a3c:	2300      	movs	r3, #0
 8023a3e:	9101      	str	r1, [sp, #4]
 8023a40:	9300      	str	r3, [sp, #0]
 8023a42:	4652      	mov	r2, sl
 8023a44:	9b04      	ldr	r3, [sp, #16]
 8023a46:	0028      	movs	r0, r5
 8023a48:	17e9      	asrs	r1, r5, #31
 8023a4a:	f7dc fdb9 	bl	80005c0 <__aeabi_lmul>
 8023a4e:	9a00      	ldr	r2, [sp, #0]
 8023a50:	9b01      	ldr	r3, [sp, #4]
 8023a52:	1880      	adds	r0, r0, r2
 8023a54:	4159      	adcs	r1, r3
 8023a56:	2280      	movs	r2, #128	@ 0x80
 8023a58:	2300      	movs	r3, #0
 8023a5a:	0612      	lsls	r2, r2, #24
 8023a5c:	1880      	adds	r0, r0, r2
 8023a5e:	4159      	adcs	r1, r3
 8023a60:	464a      	mov	r2, r9
 8023a62:	004b      	lsls	r3, r1, #1
 8023a64:	50bb      	str	r3, [r7, r2]
 8023a66:	4658      	mov	r0, fp
 8023a68:	002a      	movs	r2, r5
 8023a6a:	9b07      	ldr	r3, [sp, #28]
 8023a6c:	9906      	ldr	r1, [sp, #24]
 8023a6e:	f7dc fda7 	bl	80005c0 <__aeabi_lmul>
 8023a72:	2280      	movs	r2, #128	@ 0x80
 8023a74:	2300      	movs	r3, #0
 8023a76:	0612      	lsls	r2, r2, #24
 8023a78:	1880      	adds	r0, r0, r2
 8023a7a:	4159      	adcs	r1, r3
 8023a7c:	2000      	movs	r0, #0
 8023a7e:	9103      	str	r1, [sp, #12]
 8023a80:	9002      	str	r0, [sp, #8]
 8023a82:	4652      	mov	r2, sl
 8023a84:	9b04      	ldr	r3, [sp, #16]
 8023a86:	0020      	movs	r0, r4
 8023a88:	9905      	ldr	r1, [sp, #20]
 8023a8a:	f7dc fd99 	bl	80005c0 <__aeabi_lmul>
 8023a8e:	9a02      	ldr	r2, [sp, #8]
 8023a90:	9b03      	ldr	r3, [sp, #12]
 8023a92:	1a12      	subs	r2, r2, r0
 8023a94:	418b      	sbcs	r3, r1
 8023a96:	2080      	movs	r0, #128	@ 0x80
 8023a98:	2100      	movs	r1, #0
 8023a9a:	0600      	lsls	r0, r0, #24
 8023a9c:	1812      	adds	r2, r2, r0
 8023a9e:	414b      	adcs	r3, r1
 8023aa0:	464a      	mov	r2, r9
 8023aa2:	005b      	lsls	r3, r3, #1
 8023aa4:	50b3      	str	r3, [r6, r2]
 8023aa6:	2308      	movs	r3, #8
 8023aa8:	469c      	mov	ip, r3
 8023aaa:	9b08      	ldr	r3, [sp, #32]
 8023aac:	44e0      	add	r8, ip
 8023aae:	3708      	adds	r7, #8
 8023ab0:	3608      	adds	r6, #8
 8023ab2:	4598      	cmp	r8, r3
 8023ab4:	d196      	bne.n	80239e4 <arm_cfft_radix4by2_q31+0x3c>
 8023ab6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023ab8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023aba:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023abc:	2302      	movs	r3, #2
 8023abe:	003a      	movs	r2, r7
 8023ac0:	0029      	movs	r1, r5
 8023ac2:	0020      	movs	r0, r4
 8023ac4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023ac6:	f000 f957 	bl	8023d78 <arm_radix4_butterfly_q31>
 8023aca:	46a4      	mov	ip, r4
 8023acc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023ace:	2302      	movs	r3, #2
 8023ad0:	0088      	lsls	r0, r1, #2
 8023ad2:	4460      	add	r0, ip
 8023ad4:	003a      	movs	r2, r7
 8023ad6:	0029      	movs	r1, r5
 8023ad8:	f000 f94e 	bl	8023d78 <arm_radix4_butterfly_q31>
 8023adc:	46a4      	mov	ip, r4
 8023ade:	0128      	lsls	r0, r5, #4
 8023ae0:	4460      	add	r0, ip
 8023ae2:	6833      	ldr	r3, [r6, #0]
 8023ae4:	005b      	lsls	r3, r3, #1
 8023ae6:	6033      	str	r3, [r6, #0]
 8023ae8:	6873      	ldr	r3, [r6, #4]
 8023aea:	005b      	lsls	r3, r3, #1
 8023aec:	6073      	str	r3, [r6, #4]
 8023aee:	68b3      	ldr	r3, [r6, #8]
 8023af0:	005b      	lsls	r3, r3, #1
 8023af2:	60b3      	str	r3, [r6, #8]
 8023af4:	68f3      	ldr	r3, [r6, #12]
 8023af6:	005b      	lsls	r3, r3, #1
 8023af8:	60f3      	str	r3, [r6, #12]
 8023afa:	3610      	adds	r6, #16
 8023afc:	42b0      	cmp	r0, r6
 8023afe:	d1f0      	bne.n	8023ae2 <arm_cfft_radix4by2_q31+0x13a>
 8023b00:	b00f      	add	sp, #60	@ 0x3c
 8023b02:	bc3c      	pop	{r2, r3, r4, r5}
 8023b04:	4690      	mov	r8, r2
 8023b06:	4699      	mov	r9, r3
 8023b08:	46a2      	mov	sl, r4
 8023b0a:	46ab      	mov	fp, r5
 8023b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b0e:	2302      	movs	r3, #2
 8023b10:	2100      	movs	r1, #0
 8023b12:	0015      	movs	r5, r2
 8023b14:	f000 f930 	bl	8023d78 <arm_radix4_butterfly_q31>
 8023b18:	46bc      	mov	ip, r7
 8023b1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023b1c:	002a      	movs	r2, r5
 8023b1e:	0098      	lsls	r0, r3, #2
 8023b20:	4460      	add	r0, ip
 8023b22:	2302      	movs	r3, #2
 8023b24:	2100      	movs	r1, #0
 8023b26:	f000 f927 	bl	8023d78 <arm_radix4_butterfly_q31>
 8023b2a:	e7e9      	b.n	8023b00 <arm_cfft_radix4by2_q31+0x158>

08023b2c <arm_cfft_radix4by2_inverse_q31>:
 8023b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b2e:	465f      	mov	r7, fp
 8023b30:	4656      	mov	r6, sl
 8023b32:	464d      	mov	r5, r9
 8023b34:	4644      	mov	r4, r8
 8023b36:	000b      	movs	r3, r1
 8023b38:	b4f0      	push	{r4, r5, r6, r7}
 8023b3a:	085b      	lsrs	r3, r3, #1
 8023b3c:	b08f      	sub	sp, #60	@ 0x3c
 8023b3e:	910a      	str	r1, [sp, #40]	@ 0x28
 8023b40:	0007      	movs	r7, r0
 8023b42:	9009      	str	r0, [sp, #36]	@ 0x24
 8023b44:	0011      	movs	r1, r2
 8023b46:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023b48:	930c      	str	r3, [sp, #48]	@ 0x30
 8023b4a:	2b00      	cmp	r3, #0
 8023b4c:	d100      	bne.n	8023b50 <arm_cfft_radix4by2_inverse_q31+0x24>
 8023b4e:	e0a0      	b.n	8023c92 <arm_cfft_radix4by2_inverse_q31+0x166>
 8023b50:	0002      	movs	r2, r0
 8023b52:	00db      	lsls	r3, r3, #3
 8023b54:	3204      	adds	r2, #4
 8023b56:	4691      	mov	r9, r2
 8023b58:	4698      	mov	r8, r3
 8023b5a:	000a      	movs	r2, r1
 8023b5c:	464e      	mov	r6, r9
 8023b5e:	4442      	add	r2, r8
 8023b60:	4699      	mov	r9, r3
 8023b62:	4688      	mov	r8, r1
 8023b64:	9208      	str	r2, [sp, #32]
 8023b66:	900d      	str	r0, [sp, #52]	@ 0x34
 8023b68:	4643      	mov	r3, r8
 8023b6a:	681b      	ldr	r3, [r3, #0]
 8023b6c:	469b      	mov	fp, r3
 8023b6e:	4643      	mov	r3, r8
 8023b70:	685b      	ldr	r3, [r3, #4]
 8023b72:	469a      	mov	sl, r3
 8023b74:	683b      	ldr	r3, [r7, #0]
 8023b76:	109c      	asrs	r4, r3, #2
 8023b78:	464b      	mov	r3, r9
 8023b7a:	58fb      	ldr	r3, [r7, r3]
 8023b7c:	109a      	asrs	r2, r3, #2
 8023b7e:	18a3      	adds	r3, r4, r2
 8023b80:	603b      	str	r3, [r7, #0]
 8023b82:	6833      	ldr	r3, [r6, #0]
 8023b84:	1aa4      	subs	r4, r4, r2
 8023b86:	109d      	asrs	r5, r3, #2
 8023b88:	464b      	mov	r3, r9
 8023b8a:	58f3      	ldr	r3, [r6, r3]
 8023b8c:	17e2      	asrs	r2, r4, #31
 8023b8e:	109b      	asrs	r3, r3, #2
 8023b90:	18e9      	adds	r1, r5, r3
 8023b92:	6031      	str	r1, [r6, #0]
 8023b94:	0011      	movs	r1, r2
 8023b96:	465a      	mov	r2, fp
 8023b98:	17d2      	asrs	r2, r2, #31
 8023b9a:	0010      	movs	r0, r2
 8023b9c:	4652      	mov	r2, sl
 8023b9e:	1aed      	subs	r5, r5, r3
 8023ba0:	17eb      	asrs	r3, r5, #31
 8023ba2:	17d2      	asrs	r2, r2, #31
 8023ba4:	9307      	str	r3, [sp, #28]
 8023ba6:	9204      	str	r2, [sp, #16]
 8023ba8:	0003      	movs	r3, r0
 8023baa:	465a      	mov	r2, fp
 8023bac:	9006      	str	r0, [sp, #24]
 8023bae:	0020      	movs	r0, r4
 8023bb0:	9105      	str	r1, [sp, #20]
 8023bb2:	f7dc fd05 	bl	80005c0 <__aeabi_lmul>
 8023bb6:	2280      	movs	r2, #128	@ 0x80
 8023bb8:	2300      	movs	r3, #0
 8023bba:	0612      	lsls	r2, r2, #24
 8023bbc:	1880      	adds	r0, r0, r2
 8023bbe:	4159      	adcs	r1, r3
 8023bc0:	2300      	movs	r3, #0
 8023bc2:	9101      	str	r1, [sp, #4]
 8023bc4:	9300      	str	r3, [sp, #0]
 8023bc6:	4652      	mov	r2, sl
 8023bc8:	9b04      	ldr	r3, [sp, #16]
 8023bca:	0028      	movs	r0, r5
 8023bcc:	17e9      	asrs	r1, r5, #31
 8023bce:	f7dc fcf7 	bl	80005c0 <__aeabi_lmul>
 8023bd2:	9a00      	ldr	r2, [sp, #0]
 8023bd4:	9b01      	ldr	r3, [sp, #4]
 8023bd6:	1a12      	subs	r2, r2, r0
 8023bd8:	418b      	sbcs	r3, r1
 8023bda:	2080      	movs	r0, #128	@ 0x80
 8023bdc:	2100      	movs	r1, #0
 8023bde:	0600      	lsls	r0, r0, #24
 8023be0:	1812      	adds	r2, r2, r0
 8023be2:	414b      	adcs	r3, r1
 8023be4:	464a      	mov	r2, r9
 8023be6:	005b      	lsls	r3, r3, #1
 8023be8:	50bb      	str	r3, [r7, r2]
 8023bea:	4658      	mov	r0, fp
 8023bec:	002a      	movs	r2, r5
 8023bee:	9b07      	ldr	r3, [sp, #28]
 8023bf0:	9906      	ldr	r1, [sp, #24]
 8023bf2:	f7dc fce5 	bl	80005c0 <__aeabi_lmul>
 8023bf6:	2280      	movs	r2, #128	@ 0x80
 8023bf8:	2300      	movs	r3, #0
 8023bfa:	0612      	lsls	r2, r2, #24
 8023bfc:	1880      	adds	r0, r0, r2
 8023bfe:	4159      	adcs	r1, r3
 8023c00:	2000      	movs	r0, #0
 8023c02:	9103      	str	r1, [sp, #12]
 8023c04:	9002      	str	r0, [sp, #8]
 8023c06:	4652      	mov	r2, sl
 8023c08:	9b04      	ldr	r3, [sp, #16]
 8023c0a:	0020      	movs	r0, r4
 8023c0c:	9905      	ldr	r1, [sp, #20]
 8023c0e:	f7dc fcd7 	bl	80005c0 <__aeabi_lmul>
 8023c12:	9b02      	ldr	r3, [sp, #8]
 8023c14:	9c03      	ldr	r4, [sp, #12]
 8023c16:	18c0      	adds	r0, r0, r3
 8023c18:	4161      	adcs	r1, r4
 8023c1a:	2380      	movs	r3, #128	@ 0x80
 8023c1c:	2400      	movs	r4, #0
 8023c1e:	061b      	lsls	r3, r3, #24
 8023c20:	18c0      	adds	r0, r0, r3
 8023c22:	4161      	adcs	r1, r4
 8023c24:	464a      	mov	r2, r9
 8023c26:	004b      	lsls	r3, r1, #1
 8023c28:	50b3      	str	r3, [r6, r2]
 8023c2a:	2308      	movs	r3, #8
 8023c2c:	469c      	mov	ip, r3
 8023c2e:	9b08      	ldr	r3, [sp, #32]
 8023c30:	44e0      	add	r8, ip
 8023c32:	3708      	adds	r7, #8
 8023c34:	3608      	adds	r6, #8
 8023c36:	4598      	cmp	r8, r3
 8023c38:	d196      	bne.n	8023b68 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8023c3a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023c3c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023c3e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023c40:	2302      	movs	r3, #2
 8023c42:	003a      	movs	r2, r7
 8023c44:	0029      	movs	r1, r5
 8023c46:	0020      	movs	r0, r4
 8023c48:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023c4a:	f000 fb3b 	bl	80242c4 <arm_radix4_butterfly_inverse_q31>
 8023c4e:	46a4      	mov	ip, r4
 8023c50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023c52:	2302      	movs	r3, #2
 8023c54:	0088      	lsls	r0, r1, #2
 8023c56:	4460      	add	r0, ip
 8023c58:	003a      	movs	r2, r7
 8023c5a:	0029      	movs	r1, r5
 8023c5c:	f000 fb32 	bl	80242c4 <arm_radix4_butterfly_inverse_q31>
 8023c60:	46a4      	mov	ip, r4
 8023c62:	0128      	lsls	r0, r5, #4
 8023c64:	4460      	add	r0, ip
 8023c66:	6833      	ldr	r3, [r6, #0]
 8023c68:	005b      	lsls	r3, r3, #1
 8023c6a:	6033      	str	r3, [r6, #0]
 8023c6c:	6873      	ldr	r3, [r6, #4]
 8023c6e:	005b      	lsls	r3, r3, #1
 8023c70:	6073      	str	r3, [r6, #4]
 8023c72:	68b3      	ldr	r3, [r6, #8]
 8023c74:	005b      	lsls	r3, r3, #1
 8023c76:	60b3      	str	r3, [r6, #8]
 8023c78:	68f3      	ldr	r3, [r6, #12]
 8023c7a:	005b      	lsls	r3, r3, #1
 8023c7c:	60f3      	str	r3, [r6, #12]
 8023c7e:	3610      	adds	r6, #16
 8023c80:	42b0      	cmp	r0, r6
 8023c82:	d1f0      	bne.n	8023c66 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8023c84:	b00f      	add	sp, #60	@ 0x3c
 8023c86:	bc3c      	pop	{r2, r3, r4, r5}
 8023c88:	4690      	mov	r8, r2
 8023c8a:	4699      	mov	r9, r3
 8023c8c:	46a2      	mov	sl, r4
 8023c8e:	46ab      	mov	fp, r5
 8023c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023c92:	2302      	movs	r3, #2
 8023c94:	2100      	movs	r1, #0
 8023c96:	0015      	movs	r5, r2
 8023c98:	f000 fb14 	bl	80242c4 <arm_radix4_butterfly_inverse_q31>
 8023c9c:	46bc      	mov	ip, r7
 8023c9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023ca0:	002a      	movs	r2, r5
 8023ca2:	0098      	lsls	r0, r3, #2
 8023ca4:	4460      	add	r0, ip
 8023ca6:	2302      	movs	r3, #2
 8023ca8:	2100      	movs	r1, #0
 8023caa:	f000 fb0b 	bl	80242c4 <arm_radix4_butterfly_inverse_q31>
 8023cae:	e7e9      	b.n	8023c84 <arm_cfft_radix4by2_inverse_q31+0x158>

08023cb0 <arm_cfft_q31>:
 8023cb0:	b570      	push	{r4, r5, r6, lr}
 8023cb2:	001e      	movs	r6, r3
 8023cb4:	2380      	movs	r3, #128	@ 0x80
 8023cb6:	000d      	movs	r5, r1
 8023cb8:	0004      	movs	r4, r0
 8023cba:	8801      	ldrh	r1, [r0, #0]
 8023cbc:	005b      	lsls	r3, r3, #1
 8023cbe:	2a01      	cmp	r2, #1
 8023cc0:	d028      	beq.n	8023d14 <arm_cfft_q31+0x64>
 8023cc2:	4299      	cmp	r1, r3
 8023cc4:	d020      	beq.n	8023d08 <arm_cfft_q31+0x58>
 8023cc6:	d812      	bhi.n	8023cee <arm_cfft_q31+0x3e>
 8023cc8:	2920      	cmp	r1, #32
 8023cca:	d004      	beq.n	8023cd6 <arm_cfft_q31+0x26>
 8023ccc:	d949      	bls.n	8023d62 <arm_cfft_q31+0xb2>
 8023cce:	2940      	cmp	r1, #64	@ 0x40
 8023cd0:	d01a      	beq.n	8023d08 <arm_cfft_q31+0x58>
 8023cd2:	2980      	cmp	r1, #128	@ 0x80
 8023cd4:	d103      	bne.n	8023cde <arm_cfft_q31+0x2e>
 8023cd6:	6862      	ldr	r2, [r4, #4]
 8023cd8:	0028      	movs	r0, r5
 8023cda:	f7ff fe65 	bl	80239a8 <arm_cfft_radix4by2_q31>
 8023cde:	2e00      	cmp	r6, #0
 8023ce0:	d004      	beq.n	8023cec <arm_cfft_q31+0x3c>
 8023ce2:	68a2      	ldr	r2, [r4, #8]
 8023ce4:	89a1      	ldrh	r1, [r4, #12]
 8023ce6:	0028      	movs	r0, r5
 8023ce8:	f7dc fa0e 	bl	8000108 <arm_bitreversal_32>
 8023cec:	bd70      	pop	{r4, r5, r6, pc}
 8023cee:	2380      	movs	r3, #128	@ 0x80
 8023cf0:	00db      	lsls	r3, r3, #3
 8023cf2:	4299      	cmp	r1, r3
 8023cf4:	d008      	beq.n	8023d08 <arm_cfft_q31+0x58>
 8023cf6:	d92f      	bls.n	8023d58 <arm_cfft_q31+0xa8>
 8023cf8:	2380      	movs	r3, #128	@ 0x80
 8023cfa:	011b      	lsls	r3, r3, #4
 8023cfc:	4299      	cmp	r1, r3
 8023cfe:	d0ea      	beq.n	8023cd6 <arm_cfft_q31+0x26>
 8023d00:	2380      	movs	r3, #128	@ 0x80
 8023d02:	015b      	lsls	r3, r3, #5
 8023d04:	4299      	cmp	r1, r3
 8023d06:	d1ea      	bne.n	8023cde <arm_cfft_q31+0x2e>
 8023d08:	2301      	movs	r3, #1
 8023d0a:	6862      	ldr	r2, [r4, #4]
 8023d0c:	0028      	movs	r0, r5
 8023d0e:	f000 f833 	bl	8023d78 <arm_radix4_butterfly_q31>
 8023d12:	e7e4      	b.n	8023cde <arm_cfft_q31+0x2e>
 8023d14:	4299      	cmp	r1, r3
 8023d16:	d019      	beq.n	8023d4c <arm_cfft_q31+0x9c>
 8023d18:	d80b      	bhi.n	8023d32 <arm_cfft_q31+0x82>
 8023d1a:	2920      	cmp	r1, #32
 8023d1c:	d004      	beq.n	8023d28 <arm_cfft_q31+0x78>
 8023d1e:	d928      	bls.n	8023d72 <arm_cfft_q31+0xc2>
 8023d20:	2940      	cmp	r1, #64	@ 0x40
 8023d22:	d013      	beq.n	8023d4c <arm_cfft_q31+0x9c>
 8023d24:	2980      	cmp	r1, #128	@ 0x80
 8023d26:	d1da      	bne.n	8023cde <arm_cfft_q31+0x2e>
 8023d28:	6862      	ldr	r2, [r4, #4]
 8023d2a:	0028      	movs	r0, r5
 8023d2c:	f7ff fefe 	bl	8023b2c <arm_cfft_radix4by2_inverse_q31>
 8023d30:	e7d5      	b.n	8023cde <arm_cfft_q31+0x2e>
 8023d32:	2380      	movs	r3, #128	@ 0x80
 8023d34:	00db      	lsls	r3, r3, #3
 8023d36:	4299      	cmp	r1, r3
 8023d38:	d008      	beq.n	8023d4c <arm_cfft_q31+0x9c>
 8023d3a:	d915      	bls.n	8023d68 <arm_cfft_q31+0xb8>
 8023d3c:	2380      	movs	r3, #128	@ 0x80
 8023d3e:	011b      	lsls	r3, r3, #4
 8023d40:	4299      	cmp	r1, r3
 8023d42:	d0f1      	beq.n	8023d28 <arm_cfft_q31+0x78>
 8023d44:	2380      	movs	r3, #128	@ 0x80
 8023d46:	015b      	lsls	r3, r3, #5
 8023d48:	4299      	cmp	r1, r3
 8023d4a:	d1c8      	bne.n	8023cde <arm_cfft_q31+0x2e>
 8023d4c:	2301      	movs	r3, #1
 8023d4e:	6862      	ldr	r2, [r4, #4]
 8023d50:	0028      	movs	r0, r5
 8023d52:	f000 fab7 	bl	80242c4 <arm_radix4_butterfly_inverse_q31>
 8023d56:	e7c2      	b.n	8023cde <arm_cfft_q31+0x2e>
 8023d58:	2380      	movs	r3, #128	@ 0x80
 8023d5a:	009b      	lsls	r3, r3, #2
 8023d5c:	4299      	cmp	r1, r3
 8023d5e:	d0ba      	beq.n	8023cd6 <arm_cfft_q31+0x26>
 8023d60:	e7bd      	b.n	8023cde <arm_cfft_q31+0x2e>
 8023d62:	2910      	cmp	r1, #16
 8023d64:	d1bb      	bne.n	8023cde <arm_cfft_q31+0x2e>
 8023d66:	e7cf      	b.n	8023d08 <arm_cfft_q31+0x58>
 8023d68:	2380      	movs	r3, #128	@ 0x80
 8023d6a:	009b      	lsls	r3, r3, #2
 8023d6c:	4299      	cmp	r1, r3
 8023d6e:	d0db      	beq.n	8023d28 <arm_cfft_q31+0x78>
 8023d70:	e7b5      	b.n	8023cde <arm_cfft_q31+0x2e>
 8023d72:	2910      	cmp	r1, #16
 8023d74:	d1b3      	bne.n	8023cde <arm_cfft_q31+0x2e>
 8023d76:	e7e9      	b.n	8023d4c <arm_cfft_q31+0x9c>

08023d78 <arm_radix4_butterfly_q31>:
 8023d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023d7a:	464d      	mov	r5, r9
 8023d7c:	4644      	mov	r4, r8
 8023d7e:	465f      	mov	r7, fp
 8023d80:	4656      	mov	r6, sl
 8023d82:	469c      	mov	ip, r3
 8023d84:	b4f0      	push	{r4, r5, r6, r7}
 8023d86:	b0a7      	sub	sp, #156	@ 0x9c
 8023d88:	9114      	str	r1, [sp, #80]	@ 0x50
 8023d8a:	0889      	lsrs	r1, r1, #2
 8023d8c:	9310      	str	r3, [sp, #64]	@ 0x40
 8023d8e:	00cb      	lsls	r3, r1, #3
 8023d90:	0015      	movs	r5, r2
 8023d92:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023d94:	18c2      	adds	r2, r0, r3
 8023d96:	000c      	movs	r4, r1
 8023d98:	469a      	mov	sl, r3
 8023d9a:	9124      	str	r1, [sp, #144]	@ 0x90
 8023d9c:	18d1      	adds	r1, r2, r3
 8023d9e:	4663      	mov	r3, ip
 8023da0:	468b      	mov	fp, r1
 8023da2:	0119      	lsls	r1, r3, #4
 8023da4:	910d      	str	r1, [sp, #52]	@ 0x34
 8023da6:	00d9      	lsls	r1, r3, #3
 8023da8:	005b      	lsls	r3, r3, #1
 8023daa:	4463      	add	r3, ip
 8023dac:	910e      	str	r1, [sp, #56]	@ 0x38
 8023dae:	00d9      	lsls	r1, r3, #3
 8023db0:	465b      	mov	r3, fp
 8023db2:	44da      	add	sl, fp
 8023db4:	4690      	mov	r8, r2
 8023db6:	4683      	mov	fp, r0
 8023db8:	4699      	mov	r9, r3
 8023dba:	9022      	str	r0, [sp, #136]	@ 0x88
 8023dbc:	9025      	str	r0, [sp, #148]	@ 0x94
 8023dbe:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023dc0:	9502      	str	r5, [sp, #8]
 8023dc2:	9500      	str	r5, [sp, #0]
 8023dc4:	9501      	str	r5, [sp, #4]
 8023dc6:	9407      	str	r4, [sp, #28]
 8023dc8:	465b      	mov	r3, fp
 8023dca:	681b      	ldr	r3, [r3, #0]
 8023dcc:	4642      	mov	r2, r8
 8023dce:	111c      	asrs	r4, r3, #4
 8023dd0:	464b      	mov	r3, r9
 8023dd2:	4658      	mov	r0, fp
 8023dd4:	681b      	ldr	r3, [r3, #0]
 8023dd6:	6812      	ldr	r2, [r2, #0]
 8023dd8:	111b      	asrs	r3, r3, #4
 8023dda:	18e7      	adds	r7, r4, r3
 8023ddc:	1ae3      	subs	r3, r4, r3
 8023dde:	1114      	asrs	r4, r2, #4
 8023de0:	4652      	mov	r2, sl
 8023de2:	6840      	ldr	r0, [r0, #4]
 8023de4:	6812      	ldr	r2, [r2, #0]
 8023de6:	1105      	asrs	r5, r0, #4
 8023de8:	4648      	mov	r0, r9
 8023dea:	9303      	str	r3, [sp, #12]
 8023dec:	1113      	asrs	r3, r2, #4
 8023dee:	18e2      	adds	r2, r4, r3
 8023df0:	465c      	mov	r4, fp
 8023df2:	6840      	ldr	r0, [r0, #4]
 8023df4:	1103      	asrs	r3, r0, #4
 8023df6:	18ee      	adds	r6, r5, r3
 8023df8:	1ae8      	subs	r0, r5, r3
 8023dfa:	18bb      	adds	r3, r7, r2
 8023dfc:	6023      	str	r3, [r4, #0]
 8023dfe:	4644      	mov	r4, r8
 8023e00:	6864      	ldr	r4, [r4, #4]
 8023e02:	9004      	str	r0, [sp, #16]
 8023e04:	1125      	asrs	r5, r4, #4
 8023e06:	4654      	mov	r4, sl
 8023e08:	6864      	ldr	r4, [r4, #4]
 8023e0a:	1123      	asrs	r3, r4, #4
 8023e0c:	465c      	mov	r4, fp
 8023e0e:	18eb      	adds	r3, r5, r3
 8023e10:	18f1      	adds	r1, r6, r3
 8023e12:	6061      	str	r1, [r4, #4]
 8023e14:	4655      	mov	r5, sl
 8023e16:	4644      	mov	r4, r8
 8023e18:	686d      	ldr	r5, [r5, #4]
 8023e1a:	6864      	ldr	r4, [r4, #4]
 8023e1c:	1129      	asrs	r1, r5, #4
 8023e1e:	1124      	asrs	r4, r4, #4
 8023e20:	1a64      	subs	r4, r4, r1
 8023e22:	4641      	mov	r1, r8
 8023e24:	6809      	ldr	r1, [r1, #0]
 8023e26:	9405      	str	r4, [sp, #20]
 8023e28:	1108      	asrs	r0, r1, #4
 8023e2a:	4651      	mov	r1, sl
 8023e2c:	6809      	ldr	r1, [r1, #0]
 8023e2e:	1abc      	subs	r4, r7, r2
 8023e30:	1109      	asrs	r1, r1, #4
 8023e32:	1a41      	subs	r1, r0, r1
 8023e34:	17e2      	asrs	r2, r4, #31
 8023e36:	9106      	str	r1, [sp, #24]
 8023e38:	0011      	movs	r1, r2
 8023e3a:	9a01      	ldr	r2, [sp, #4]
 8023e3c:	9108      	str	r1, [sp, #32]
 8023e3e:	6817      	ldr	r7, [r2, #0]
 8023e40:	17fd      	asrs	r5, r7, #31
 8023e42:	0028      	movs	r0, r5
 8023e44:	1af5      	subs	r5, r6, r3
 8023e46:	17ee      	asrs	r6, r5, #31
 8023e48:	960a      	str	r6, [sp, #40]	@ 0x28
 8023e4a:	6856      	ldr	r6, [r2, #4]
 8023e4c:	9009      	str	r0, [sp, #36]	@ 0x24
 8023e4e:	17f3      	asrs	r3, r6, #31
 8023e50:	003a      	movs	r2, r7
 8023e52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023e54:	0003      	movs	r3, r0
 8023e56:	0020      	movs	r0, r4
 8023e58:	f7dc fbb2 	bl	80005c0 <__aeabi_lmul>
 8023e5c:	0032      	movs	r2, r6
 8023e5e:	17f3      	asrs	r3, r6, #31
 8023e60:	910c      	str	r1, [sp, #48]	@ 0x30
 8023e62:	0028      	movs	r0, r5
 8023e64:	17e9      	asrs	r1, r5, #31
 8023e66:	f7dc fbab 	bl	80005c0 <__aeabi_lmul>
 8023e6a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023e6c:	002a      	movs	r2, r5
 8023e6e:	4684      	mov	ip, r0
 8023e70:	4640      	mov	r0, r8
 8023e72:	4461      	add	r1, ip
 8023e74:	0049      	lsls	r1, r1, #1
 8023e76:	6001      	str	r1, [r0, #0]
 8023e78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023e7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023e7c:	0038      	movs	r0, r7
 8023e7e:	f7dc fb9f 	bl	80005c0 <__aeabi_lmul>
 8023e82:	0032      	movs	r2, r6
 8023e84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023e86:	000d      	movs	r5, r1
 8023e88:	0020      	movs	r0, r4
 8023e8a:	9908      	ldr	r1, [sp, #32]
 8023e8c:	f7dc fb98 	bl	80005c0 <__aeabi_lmul>
 8023e90:	4646      	mov	r6, r8
 8023e92:	1a6d      	subs	r5, r5, r1
 8023e94:	006d      	lsls	r5, r5, #1
 8023e96:	6075      	str	r5, [r6, #4]
 8023e98:	9903      	ldr	r1, [sp, #12]
 8023e9a:	9d05      	ldr	r5, [sp, #20]
 8023e9c:	000c      	movs	r4, r1
 8023e9e:	46ac      	mov	ip, r5
 8023ea0:	4464      	add	r4, ip
 8023ea2:	17e6      	asrs	r6, r4, #31
 8023ea4:	0031      	movs	r1, r6
 8023ea6:	9b00      	ldr	r3, [sp, #0]
 8023ea8:	9804      	ldr	r0, [sp, #16]
 8023eaa:	681e      	ldr	r6, [r3, #0]
 8023eac:	17f7      	asrs	r7, r6, #31
 8023eae:	9709      	str	r7, [sp, #36]	@ 0x24
 8023eb0:	9f06      	ldr	r7, [sp, #24]
 8023eb2:	0032      	movs	r2, r6
 8023eb4:	1bc7      	subs	r7, r0, r7
 8023eb6:	17fd      	asrs	r5, r7, #31
 8023eb8:	950a      	str	r5, [sp, #40]	@ 0x28
 8023eba:	685d      	ldr	r5, [r3, #4]
 8023ebc:	17f3      	asrs	r3, r6, #31
 8023ebe:	17e8      	asrs	r0, r5, #31
 8023ec0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8023ec2:	0020      	movs	r0, r4
 8023ec4:	9108      	str	r1, [sp, #32]
 8023ec6:	f7dc fb7b 	bl	80005c0 <__aeabi_lmul>
 8023eca:	002a      	movs	r2, r5
 8023ecc:	17eb      	asrs	r3, r5, #31
 8023ece:	910c      	str	r1, [sp, #48]	@ 0x30
 8023ed0:	0038      	movs	r0, r7
 8023ed2:	17f9      	asrs	r1, r7, #31
 8023ed4:	f7dc fb74 	bl	80005c0 <__aeabi_lmul>
 8023ed8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023eda:	003a      	movs	r2, r7
 8023edc:	4684      	mov	ip, r0
 8023ede:	4648      	mov	r0, r9
 8023ee0:	4461      	add	r1, ip
 8023ee2:	0049      	lsls	r1, r1, #1
 8023ee4:	6001      	str	r1, [r0, #0]
 8023ee6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023ee8:	0030      	movs	r0, r6
 8023eea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023eec:	f7dc fb68 	bl	80005c0 <__aeabi_lmul>
 8023ef0:	002a      	movs	r2, r5
 8023ef2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023ef4:	000e      	movs	r6, r1
 8023ef6:	0020      	movs	r0, r4
 8023ef8:	9908      	ldr	r1, [sp, #32]
 8023efa:	f7dc fb61 	bl	80005c0 <__aeabi_lmul>
 8023efe:	464c      	mov	r4, r9
 8023f00:	9d05      	ldr	r5, [sp, #20]
 8023f02:	1a76      	subs	r6, r6, r1
 8023f04:	9903      	ldr	r1, [sp, #12]
 8023f06:	0076      	lsls	r6, r6, #1
 8023f08:	6066      	str	r6, [r4, #4]
 8023f0a:	1b4c      	subs	r4, r1, r5
 8023f0c:	9e06      	ldr	r6, [sp, #24]
 8023f0e:	17e1      	asrs	r1, r4, #31
 8023f10:	9103      	str	r1, [sp, #12]
 8023f12:	9902      	ldr	r1, [sp, #8]
 8023f14:	46b4      	mov	ip, r6
 8023f16:	680f      	ldr	r7, [r1, #0]
 8023f18:	9804      	ldr	r0, [sp, #16]
 8023f1a:	17fd      	asrs	r5, r7, #31
 8023f1c:	002b      	movs	r3, r5
 8023f1e:	684e      	ldr	r6, [r1, #4]
 8023f20:	4460      	add	r0, ip
 8023f22:	0005      	movs	r5, r0
 8023f24:	17c0      	asrs	r0, r0, #31
 8023f26:	9005      	str	r0, [sp, #20]
 8023f28:	17f0      	asrs	r0, r6, #31
 8023f2a:	9006      	str	r0, [sp, #24]
 8023f2c:	003a      	movs	r2, r7
 8023f2e:	0020      	movs	r0, r4
 8023f30:	17e1      	asrs	r1, r4, #31
 8023f32:	9304      	str	r3, [sp, #16]
 8023f34:	f7dc fb44 	bl	80005c0 <__aeabi_lmul>
 8023f38:	0032      	movs	r2, r6
 8023f3a:	9108      	str	r1, [sp, #32]
 8023f3c:	17f3      	asrs	r3, r6, #31
 8023f3e:	0028      	movs	r0, r5
 8023f40:	17e9      	asrs	r1, r5, #31
 8023f42:	f7dc fb3d 	bl	80005c0 <__aeabi_lmul>
 8023f46:	9808      	ldr	r0, [sp, #32]
 8023f48:	002a      	movs	r2, r5
 8023f4a:	4684      	mov	ip, r0
 8023f4c:	4650      	mov	r0, sl
 8023f4e:	4461      	add	r1, ip
 8023f50:	0049      	lsls	r1, r1, #1
 8023f52:	6001      	str	r1, [r0, #0]
 8023f54:	9b05      	ldr	r3, [sp, #20]
 8023f56:	9904      	ldr	r1, [sp, #16]
 8023f58:	0038      	movs	r0, r7
 8023f5a:	f7dc fb31 	bl	80005c0 <__aeabi_lmul>
 8023f5e:	0020      	movs	r0, r4
 8023f60:	2408      	movs	r4, #8
 8023f62:	000d      	movs	r5, r1
 8023f64:	0032      	movs	r2, r6
 8023f66:	9b06      	ldr	r3, [sp, #24]
 8023f68:	9903      	ldr	r1, [sp, #12]
 8023f6a:	f7dc fb29 	bl	80005c0 <__aeabi_lmul>
 8023f6e:	46a4      	mov	ip, r4
 8023f70:	4650      	mov	r0, sl
 8023f72:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023f74:	44e3      	add	fp, ip
 8023f76:	44e0      	add	r8, ip
 8023f78:	44e1      	add	r9, ip
 8023f7a:	44e2      	add	sl, ip
 8023f7c:	46a4      	mov	ip, r4
 8023f7e:	1a6d      	subs	r5, r5, r1
 8023f80:	006d      	lsls	r5, r5, #1
 8023f82:	9a01      	ldr	r2, [sp, #4]
 8023f84:	6045      	str	r5, [r0, #4]
 8023f86:	9807      	ldr	r0, [sp, #28]
 8023f88:	4462      	add	r2, ip
 8023f8a:	3801      	subs	r0, #1
 8023f8c:	9201      	str	r2, [sp, #4]
 8023f8e:	9007      	str	r0, [sp, #28]
 8023f90:	9b00      	ldr	r3, [sp, #0]
 8023f92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023f94:	9902      	ldr	r1, [sp, #8]
 8023f96:	4694      	mov	ip, r2
 8023f98:	4463      	add	r3, ip
 8023f9a:	9300      	str	r3, [sp, #0]
 8023f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023f9e:	469c      	mov	ip, r3
 8023fa0:	4461      	add	r1, ip
 8023fa2:	9102      	str	r1, [sp, #8]
 8023fa4:	2800      	cmp	r0, #0
 8023fa6:	d000      	beq.n	8023faa <arm_radix4_butterfly_q31+0x232>
 8023fa8:	e70e      	b.n	8023dc8 <arm_radix4_butterfly_q31+0x50>
 8023faa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023fac:	009b      	lsls	r3, r3, #2
 8023fae:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023fb0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023fb2:	9320      	str	r3, [sp, #128]	@ 0x80
 8023fb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023fb6:	2b04      	cmp	r3, #4
 8023fb8:	d800      	bhi.n	8023fbc <arm_radix4_butterfly_q31+0x244>
 8023fba:	e180      	b.n	80242be <arm_radix4_butterfly_q31+0x546>
 8023fbc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023fbe:	0893      	lsrs	r3, r2, #2
 8023fc0:	1e59      	subs	r1, r3, #1
 8023fc2:	9321      	str	r3, [sp, #132]	@ 0x84
 8023fc4:	00db      	lsls	r3, r3, #3
 8023fc6:	931b      	str	r3, [sp, #108]	@ 0x6c
 8023fc8:	00d3      	lsls	r3, r2, #3
 8023fca:	9300      	str	r3, [sp, #0]
 8023fcc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023fce:	911a      	str	r1, [sp, #104]	@ 0x68
 8023fd0:	00da      	lsls	r2, r3, #3
 8023fd2:	921e      	str	r2, [sp, #120]	@ 0x78
 8023fd4:	011a      	lsls	r2, r3, #4
 8023fd6:	921d      	str	r2, [sp, #116]	@ 0x74
 8023fd8:	001a      	movs	r2, r3
 8023fda:	4694      	mov	ip, r2
 8023fdc:	005b      	lsls	r3, r3, #1
 8023fde:	4463      	add	r3, ip
 8023fe0:	00db      	lsls	r3, r3, #3
 8023fe2:	931c      	str	r3, [sp, #112]	@ 0x70
 8023fe4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023fe6:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023fe8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023fea:	9318      	str	r3, [sp, #96]	@ 0x60
 8023fec:	9319      	str	r3, [sp, #100]	@ 0x64
 8023fee:	9316      	str	r3, [sp, #88]	@ 0x58
 8023ff0:	2300      	movs	r3, #0
 8023ff2:	9315      	str	r3, [sp, #84]	@ 0x54
 8023ff4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023ff6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023ff8:	681a      	ldr	r2, [r3, #0]
 8023ffa:	685b      	ldr	r3, [r3, #4]
 8023ffc:	9205      	str	r2, [sp, #20]
 8023ffe:	9306      	str	r3, [sp, #24]
 8024000:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024002:	468c      	mov	ip, r1
 8024004:	681a      	ldr	r2, [r3, #0]
 8024006:	685b      	ldr	r3, [r3, #4]
 8024008:	9207      	str	r2, [sp, #28]
 802400a:	9308      	str	r3, [sp, #32]
 802400c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802400e:	681a      	ldr	r2, [r3, #0]
 8024010:	685b      	ldr	r3, [r3, #4]
 8024012:	9209      	str	r2, [sp, #36]	@ 0x24
 8024014:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024016:	930a      	str	r3, [sp, #40]	@ 0x28
 8024018:	0013      	movs	r3, r2
 802401a:	4463      	add	r3, ip
 802401c:	4698      	mov	r8, r3
 802401e:	0013      	movs	r3, r2
 8024020:	4442      	add	r2, r8
 8024022:	4691      	mov	r9, r2
 8024024:	001a      	movs	r2, r3
 8024026:	444a      	add	r2, r9
 8024028:	4692      	mov	sl, r2
 802402a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802402c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802402e:	4293      	cmp	r3, r2
 8024030:	d800      	bhi.n	8024034 <arm_radix4_butterfly_q31+0x2bc>
 8024032:	e0dd      	b.n	80241f0 <arm_radix4_butterfly_q31+0x478>
 8024034:	4694      	mov	ip, r2
 8024036:	468b      	mov	fp, r1
 8024038:	4644      	mov	r4, r8
 802403a:	4655      	mov	r5, sl
 802403c:	9b07      	ldr	r3, [sp, #28]
 802403e:	17db      	asrs	r3, r3, #31
 8024040:	930c      	str	r3, [sp, #48]	@ 0x30
 8024042:	9b08      	ldr	r3, [sp, #32]
 8024044:	17db      	asrs	r3, r3, #31
 8024046:	930d      	str	r3, [sp, #52]	@ 0x34
 8024048:	9b05      	ldr	r3, [sp, #20]
 802404a:	17db      	asrs	r3, r3, #31
 802404c:	930e      	str	r3, [sp, #56]	@ 0x38
 802404e:	9b06      	ldr	r3, [sp, #24]
 8024050:	17db      	asrs	r3, r3, #31
 8024052:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024056:	17db      	asrs	r3, r3, #31
 8024058:	9310      	str	r3, [sp, #64]	@ 0x40
 802405a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802405c:	17db      	asrs	r3, r3, #31
 802405e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024060:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024062:	4463      	add	r3, ip
 8024064:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024066:	465b      	mov	r3, fp
 8024068:	4659      	mov	r1, fp
 802406a:	681a      	ldr	r2, [r3, #0]
 802406c:	464b      	mov	r3, r9
 802406e:	684f      	ldr	r7, [r1, #4]
 8024070:	4649      	mov	r1, r9
 8024072:	681b      	ldr	r3, [r3, #0]
 8024074:	18d6      	adds	r6, r2, r3
 8024076:	1ad3      	subs	r3, r2, r3
 8024078:	9301      	str	r3, [sp, #4]
 802407a:	684b      	ldr	r3, [r1, #4]
 802407c:	18f8      	adds	r0, r7, r3
 802407e:	1af9      	subs	r1, r7, r3
 8024080:	6827      	ldr	r7, [r4, #0]
 8024082:	9102      	str	r1, [sp, #8]
 8024084:	003a      	movs	r2, r7
 8024086:	682f      	ldr	r7, [r5, #0]
 8024088:	46bc      	mov	ip, r7
 802408a:	465f      	mov	r7, fp
 802408c:	4462      	add	r2, ip
 802408e:	18b3      	adds	r3, r6, r2
 8024090:	109b      	asrs	r3, r3, #2
 8024092:	603b      	str	r3, [r7, #0]
 8024094:	6867      	ldr	r7, [r4, #4]
 8024096:	1ab6      	subs	r6, r6, r2
 8024098:	46b8      	mov	r8, r7
 802409a:	686f      	ldr	r7, [r5, #4]
 802409c:	17f2      	asrs	r2, r6, #31
 802409e:	46bc      	mov	ip, r7
 80240a0:	44e0      	add	r8, ip
 80240a2:	4643      	mov	r3, r8
 80240a4:	465f      	mov	r7, fp
 80240a6:	18c1      	adds	r1, r0, r3
 80240a8:	1089      	asrs	r1, r1, #2
 80240aa:	6079      	str	r1, [r7, #4]
 80240ac:	9900      	ldr	r1, [sp, #0]
 80240ae:	4690      	mov	r8, r2
 80240b0:	468c      	mov	ip, r1
 80240b2:	6867      	ldr	r7, [r4, #4]
 80240b4:	6869      	ldr	r1, [r5, #4]
 80240b6:	44e3      	add	fp, ip
 80240b8:	1a7f      	subs	r7, r7, r1
 80240ba:	9703      	str	r7, [sp, #12]
 80240bc:	6829      	ldr	r1, [r5, #0]
 80240be:	6827      	ldr	r7, [r4, #0]
 80240c0:	1a7f      	subs	r7, r7, r1
 80240c2:	9704      	str	r7, [sp, #16]
 80240c4:	1ac7      	subs	r7, r0, r3
 80240c6:	17fa      	asrs	r2, r7, #31
 80240c8:	4692      	mov	sl, r2
 80240ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80240cc:	9a07      	ldr	r2, [sp, #28]
 80240ce:	0030      	movs	r0, r6
 80240d0:	4641      	mov	r1, r8
 80240d2:	f7dc fa75 	bl	80005c0 <__aeabi_lmul>
 80240d6:	9a08      	ldr	r2, [sp, #32]
 80240d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80240da:	9112      	str	r1, [sp, #72]	@ 0x48
 80240dc:	0038      	movs	r0, r7
 80240de:	4651      	mov	r1, sl
 80240e0:	f7dc fa6e 	bl	80005c0 <__aeabi_lmul>
 80240e4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80240e6:	9a07      	ldr	r2, [sp, #28]
 80240e8:	4684      	mov	ip, r0
 80240ea:	4461      	add	r1, ip
 80240ec:	1049      	asrs	r1, r1, #1
 80240ee:	6021      	str	r1, [r4, #0]
 80240f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80240f2:	0038      	movs	r0, r7
 80240f4:	4651      	mov	r1, sl
 80240f6:	f7dc fa63 	bl	80005c0 <__aeabi_lmul>
 80240fa:	9a08      	ldr	r2, [sp, #32]
 80240fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80240fe:	000f      	movs	r7, r1
 8024100:	0030      	movs	r0, r6
 8024102:	4641      	mov	r1, r8
 8024104:	f7dc fa5c 	bl	80005c0 <__aeabi_lmul>
 8024108:	9b00      	ldr	r3, [sp, #0]
 802410a:	9a01      	ldr	r2, [sp, #4]
 802410c:	469c      	mov	ip, r3
 802410e:	9803      	ldr	r0, [sp, #12]
 8024110:	1a7f      	subs	r7, r7, r1
 8024112:	107f      	asrs	r7, r7, #1
 8024114:	6067      	str	r7, [r4, #4]
 8024116:	0016      	movs	r6, r2
 8024118:	4464      	add	r4, ip
 802411a:	4684      	mov	ip, r0
 802411c:	4466      	add	r6, ip
 802411e:	17f2      	asrs	r2, r6, #31
 8024120:	4690      	mov	r8, r2
 8024122:	9902      	ldr	r1, [sp, #8]
 8024124:	9f04      	ldr	r7, [sp, #16]
 8024126:	0030      	movs	r0, r6
 8024128:	1bcf      	subs	r7, r1, r7
 802412a:	17fa      	asrs	r2, r7, #31
 802412c:	4692      	mov	sl, r2
 802412e:	4641      	mov	r1, r8
 8024130:	9a05      	ldr	r2, [sp, #20]
 8024132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024134:	f7dc fa44 	bl	80005c0 <__aeabi_lmul>
 8024138:	9a06      	ldr	r2, [sp, #24]
 802413a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802413c:	9112      	str	r1, [sp, #72]	@ 0x48
 802413e:	0038      	movs	r0, r7
 8024140:	4651      	mov	r1, sl
 8024142:	f7dc fa3d 	bl	80005c0 <__aeabi_lmul>
 8024146:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024148:	9a05      	ldr	r2, [sp, #20]
 802414a:	4684      	mov	ip, r0
 802414c:	4648      	mov	r0, r9
 802414e:	4461      	add	r1, ip
 8024150:	1049      	asrs	r1, r1, #1
 8024152:	6001      	str	r1, [r0, #0]
 8024154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024156:	0038      	movs	r0, r7
 8024158:	4651      	mov	r1, sl
 802415a:	f7dc fa31 	bl	80005c0 <__aeabi_lmul>
 802415e:	9a06      	ldr	r2, [sp, #24]
 8024160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024162:	000f      	movs	r7, r1
 8024164:	0030      	movs	r0, r6
 8024166:	4641      	mov	r1, r8
 8024168:	f7dc fa2a 	bl	80005c0 <__aeabi_lmul>
 802416c:	464e      	mov	r6, r9
 802416e:	9a00      	ldr	r2, [sp, #0]
 8024170:	9b01      	ldr	r3, [sp, #4]
 8024172:	4694      	mov	ip, r2
 8024174:	9803      	ldr	r0, [sp, #12]
 8024176:	1a7f      	subs	r7, r7, r1
 8024178:	107f      	asrs	r7, r7, #1
 802417a:	6077      	str	r7, [r6, #4]
 802417c:	1a1e      	subs	r6, r3, r0
 802417e:	9b04      	ldr	r3, [sp, #16]
 8024180:	44e1      	add	r9, ip
 8024182:	469c      	mov	ip, r3
 8024184:	17f0      	asrs	r0, r6, #31
 8024186:	4680      	mov	r8, r0
 8024188:	9902      	ldr	r1, [sp, #8]
 802418a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802418c:	4461      	add	r1, ip
 802418e:	17cb      	asrs	r3, r1, #31
 8024190:	000f      	movs	r7, r1
 8024192:	469a      	mov	sl, r3
 8024194:	0030      	movs	r0, r6
 8024196:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024198:	4641      	mov	r1, r8
 802419a:	f7dc fa11 	bl	80005c0 <__aeabi_lmul>
 802419e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80241a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80241a2:	9101      	str	r1, [sp, #4]
 80241a4:	0038      	movs	r0, r7
 80241a6:	4651      	mov	r1, sl
 80241a8:	f7dc fa0a 	bl	80005c0 <__aeabi_lmul>
 80241ac:	9801      	ldr	r0, [sp, #4]
 80241ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80241b0:	4684      	mov	ip, r0
 80241b2:	4461      	add	r1, ip
 80241b4:	1049      	asrs	r1, r1, #1
 80241b6:	6029      	str	r1, [r5, #0]
 80241b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80241ba:	0038      	movs	r0, r7
 80241bc:	4651      	mov	r1, sl
 80241be:	f7dc f9ff 	bl	80005c0 <__aeabi_lmul>
 80241c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80241c4:	000f      	movs	r7, r1
 80241c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80241c8:	0030      	movs	r0, r6
 80241ca:	4641      	mov	r1, r8
 80241cc:	f7dc f9f8 	bl	80005c0 <__aeabi_lmul>
 80241d0:	1a7f      	subs	r7, r7, r1
 80241d2:	107f      	asrs	r7, r7, #1
 80241d4:	606f      	str	r7, [r5, #4]
 80241d6:	9a00      	ldr	r2, [sp, #0]
 80241d8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80241da:	4694      	mov	ip, r2
 80241dc:	4465      	add	r5, ip
 80241de:	468c      	mov	ip, r1
 80241e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80241e2:	0013      	movs	r3, r2
 80241e4:	4462      	add	r2, ip
 80241e6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80241e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80241ea:	429a      	cmp	r2, r3
 80241ec:	d900      	bls.n	80241f0 <arm_radix4_butterfly_q31+0x478>
 80241ee:	e73a      	b.n	8024066 <arm_radix4_butterfly_q31+0x2ee>
 80241f0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80241f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80241f4:	468c      	mov	ip, r1
 80241f6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80241f8:	4462      	add	r2, ip
 80241fa:	468c      	mov	ip, r1
 80241fc:	9216      	str	r2, [sp, #88]	@ 0x58
 80241fe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024200:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024202:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024204:	4462      	add	r2, ip
 8024206:	468c      	mov	ip, r1
 8024208:	9219      	str	r2, [sp, #100]	@ 0x64
 802420a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802420c:	3301      	adds	r3, #1
 802420e:	4462      	add	r2, ip
 8024210:	9218      	str	r2, [sp, #96]	@ 0x60
 8024212:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8024214:	9315      	str	r3, [sp, #84]	@ 0x54
 8024216:	3208      	adds	r2, #8
 8024218:	9217      	str	r2, [sp, #92]	@ 0x5c
 802421a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802421c:	4293      	cmp	r3, r2
 802421e:	d800      	bhi.n	8024222 <arm_radix4_butterfly_q31+0x4aa>
 8024220:	e6e8      	b.n	8023ff4 <arm_radix4_butterfly_q31+0x27c>
 8024222:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024224:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024226:	009b      	lsls	r3, r3, #2
 8024228:	931f      	str	r3, [sp, #124]	@ 0x7c
 802422a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802422c:	9213      	str	r2, [sp, #76]	@ 0x4c
 802422e:	089b      	lsrs	r3, r3, #2
 8024230:	9320      	str	r3, [sp, #128]	@ 0x80
 8024232:	2b04      	cmp	r3, #4
 8024234:	d900      	bls.n	8024238 <arm_radix4_butterfly_q31+0x4c0>
 8024236:	e6c1      	b.n	8023fbc <arm_radix4_butterfly_q31+0x244>
 8024238:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802423a:	469a      	mov	sl, r3
 802423c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802423e:	691c      	ldr	r4, [r3, #16]
 8024240:	685a      	ldr	r2, [r3, #4]
 8024242:	46a1      	mov	r9, r4
 8024244:	4690      	mov	r8, r2
 8024246:	6819      	ldr	r1, [r3, #0]
 8024248:	689a      	ldr	r2, [r3, #8]
 802424a:	699f      	ldr	r7, [r3, #24]
 802424c:	188d      	adds	r5, r1, r2
 802424e:	444d      	add	r5, r9
 8024250:	19ed      	adds	r5, r5, r7
 8024252:	69de      	ldr	r6, [r3, #28]
 8024254:	601d      	str	r5, [r3, #0]
 8024256:	4645      	mov	r5, r8
 8024258:	46b4      	mov	ip, r6
 802425a:	68d8      	ldr	r0, [r3, #12]
 802425c:	695c      	ldr	r4, [r3, #20]
 802425e:	182d      	adds	r5, r5, r0
 8024260:	192d      	adds	r5, r5, r4
 8024262:	4465      	add	r5, ip
 8024264:	605d      	str	r5, [r3, #4]
 8024266:	1a8d      	subs	r5, r1, r2
 8024268:	444d      	add	r5, r9
 802426a:	1bed      	subs	r5, r5, r7
 802426c:	609d      	str	r5, [r3, #8]
 802426e:	4645      	mov	r5, r8
 8024270:	1a2d      	subs	r5, r5, r0
 8024272:	192d      	adds	r5, r5, r4
 8024274:	1bad      	subs	r5, r5, r6
 8024276:	464e      	mov	r6, r9
 8024278:	60dd      	str	r5, [r3, #12]
 802427a:	180d      	adds	r5, r1, r0
 802427c:	1bad      	subs	r5, r5, r6
 802427e:	4666      	mov	r6, ip
 8024280:	1bad      	subs	r5, r5, r6
 8024282:	611d      	str	r5, [r3, #16]
 8024284:	4645      	mov	r5, r8
 8024286:	1aad      	subs	r5, r5, r2
 8024288:	4442      	add	r2, r8
 802428a:	1b12      	subs	r2, r2, r4
 802428c:	1bd2      	subs	r2, r2, r7
 802428e:	1a08      	subs	r0, r1, r0
 8024290:	61da      	str	r2, [r3, #28]
 8024292:	4649      	mov	r1, r9
 8024294:	2201      	movs	r2, #1
 8024296:	1a41      	subs	r1, r0, r1
 8024298:	4252      	negs	r2, r2
 802429a:	4461      	add	r1, ip
 802429c:	4694      	mov	ip, r2
 802429e:	44e2      	add	sl, ip
 80242a0:	4652      	mov	r2, sl
 80242a2:	1b2d      	subs	r5, r5, r4
 80242a4:	19ed      	adds	r5, r5, r7
 80242a6:	615d      	str	r5, [r3, #20]
 80242a8:	6199      	str	r1, [r3, #24]
 80242aa:	3320      	adds	r3, #32
 80242ac:	2a00      	cmp	r2, #0
 80242ae:	d1c6      	bne.n	802423e <arm_radix4_butterfly_q31+0x4c6>
 80242b0:	b027      	add	sp, #156	@ 0x9c
 80242b2:	bc3c      	pop	{r2, r3, r4, r5}
 80242b4:	4690      	mov	r8, r2
 80242b6:	4699      	mov	r9, r3
 80242b8:	46a2      	mov	sl, r4
 80242ba:	46ab      	mov	fp, r5
 80242bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80242be:	469a      	mov	sl, r3
 80242c0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80242c2:	e7bc      	b.n	802423e <arm_radix4_butterfly_q31+0x4c6>

080242c4 <arm_radix4_butterfly_inverse_q31>:
 80242c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80242c6:	464d      	mov	r5, r9
 80242c8:	4644      	mov	r4, r8
 80242ca:	465f      	mov	r7, fp
 80242cc:	4656      	mov	r6, sl
 80242ce:	b4f0      	push	{r4, r5, r6, r7}
 80242d0:	b0a7      	sub	sp, #156	@ 0x9c
 80242d2:	469c      	mov	ip, r3
 80242d4:	9114      	str	r1, [sp, #80]	@ 0x50
 80242d6:	0889      	lsrs	r1, r1, #2
 80242d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80242da:	00cb      	lsls	r3, r1, #3
 80242dc:	0015      	movs	r5, r2
 80242de:	9223      	str	r2, [sp, #140]	@ 0x8c
 80242e0:	18c2      	adds	r2, r0, r3
 80242e2:	000c      	movs	r4, r1
 80242e4:	9124      	str	r1, [sp, #144]	@ 0x90
 80242e6:	18d1      	adds	r1, r2, r3
 80242e8:	468b      	mov	fp, r1
 80242ea:	469a      	mov	sl, r3
 80242ec:	4663      	mov	r3, ip
 80242ee:	44da      	add	sl, fp
 80242f0:	46d0      	mov	r8, sl
 80242f2:	4681      	mov	r9, r0
 80242f4:	4692      	mov	sl, r2
 80242f6:	0119      	lsls	r1, r3, #4
 80242f8:	910d      	str	r1, [sp, #52]	@ 0x34
 80242fa:	00d9      	lsls	r1, r3, #3
 80242fc:	005b      	lsls	r3, r3, #1
 80242fe:	4463      	add	r3, ip
 8024300:	910e      	str	r1, [sp, #56]	@ 0x38
 8024302:	00d9      	lsls	r1, r3, #3
 8024304:	9022      	str	r0, [sp, #136]	@ 0x88
 8024306:	9025      	str	r0, [sp, #148]	@ 0x94
 8024308:	910f      	str	r1, [sp, #60]	@ 0x3c
 802430a:	9502      	str	r5, [sp, #8]
 802430c:	9500      	str	r5, [sp, #0]
 802430e:	9501      	str	r5, [sp, #4]
 8024310:	9409      	str	r4, [sp, #36]	@ 0x24
 8024312:	464b      	mov	r3, r9
 8024314:	681b      	ldr	r3, [r3, #0]
 8024316:	4652      	mov	r2, sl
 8024318:	111c      	asrs	r4, r3, #4
 802431a:	465b      	mov	r3, fp
 802431c:	4648      	mov	r0, r9
 802431e:	681b      	ldr	r3, [r3, #0]
 8024320:	6812      	ldr	r2, [r2, #0]
 8024322:	6840      	ldr	r0, [r0, #4]
 8024324:	111b      	asrs	r3, r3, #4
 8024326:	18e7      	adds	r7, r4, r3
 8024328:	1ae3      	subs	r3, r4, r3
 802432a:	1114      	asrs	r4, r2, #4
 802432c:	4642      	mov	r2, r8
 802432e:	1105      	asrs	r5, r0, #4
 8024330:	4658      	mov	r0, fp
 8024332:	6812      	ldr	r2, [r2, #0]
 8024334:	6840      	ldr	r0, [r0, #4]
 8024336:	9303      	str	r3, [sp, #12]
 8024338:	1113      	asrs	r3, r2, #4
 802433a:	18e2      	adds	r2, r4, r3
 802433c:	1103      	asrs	r3, r0, #4
 802433e:	18ee      	adds	r6, r5, r3
 8024340:	1ae8      	subs	r0, r5, r3
 8024342:	464d      	mov	r5, r9
 8024344:	18bb      	adds	r3, r7, r2
 8024346:	602b      	str	r3, [r5, #0]
 8024348:	4641      	mov	r1, r8
 802434a:	4655      	mov	r5, sl
 802434c:	6849      	ldr	r1, [r1, #4]
 802434e:	686d      	ldr	r5, [r5, #4]
 8024350:	110b      	asrs	r3, r1, #4
 8024352:	112d      	asrs	r5, r5, #4
 8024354:	18eb      	adds	r3, r5, r3
 8024356:	464d      	mov	r5, r9
 8024358:	18f1      	adds	r1, r6, r3
 802435a:	6069      	str	r1, [r5, #4]
 802435c:	4655      	mov	r5, sl
 802435e:	686d      	ldr	r5, [r5, #4]
 8024360:	9004      	str	r0, [sp, #16]
 8024362:	112c      	asrs	r4, r5, #4
 8024364:	4645      	mov	r5, r8
 8024366:	686d      	ldr	r5, [r5, #4]
 8024368:	1129      	asrs	r1, r5, #4
 802436a:	1a65      	subs	r5, r4, r1
 802436c:	4651      	mov	r1, sl
 802436e:	6809      	ldr	r1, [r1, #0]
 8024370:	1abc      	subs	r4, r7, r2
 8024372:	1108      	asrs	r0, r1, #4
 8024374:	4641      	mov	r1, r8
 8024376:	17e2      	asrs	r2, r4, #31
 8024378:	6809      	ldr	r1, [r1, #0]
 802437a:	9207      	str	r2, [sp, #28]
 802437c:	9a01      	ldr	r2, [sp, #4]
 802437e:	1109      	asrs	r1, r1, #4
 8024380:	6817      	ldr	r7, [r2, #0]
 8024382:	1a41      	subs	r1, r0, r1
 8024384:	9106      	str	r1, [sp, #24]
 8024386:	0039      	movs	r1, r7
 8024388:	17ff      	asrs	r7, r7, #31
 802438a:	0038      	movs	r0, r7
 802438c:	9505      	str	r5, [sp, #20]
 802438e:	1af5      	subs	r5, r6, r3
 8024390:	17ef      	asrs	r7, r5, #31
 8024392:	970b      	str	r7, [sp, #44]	@ 0x2c
 8024394:	6857      	ldr	r7, [r2, #4]
 8024396:	0003      	movs	r3, r0
 8024398:	17fe      	asrs	r6, r7, #31
 802439a:	000a      	movs	r2, r1
 802439c:	9108      	str	r1, [sp, #32]
 802439e:	900a      	str	r0, [sp, #40]	@ 0x28
 80243a0:	17e1      	asrs	r1, r4, #31
 80243a2:	0020      	movs	r0, r4
 80243a4:	960c      	str	r6, [sp, #48]	@ 0x30
 80243a6:	f7dc f90b 	bl	80005c0 <__aeabi_lmul>
 80243aa:	003a      	movs	r2, r7
 80243ac:	17fb      	asrs	r3, r7, #31
 80243ae:	000e      	movs	r6, r1
 80243b0:	0028      	movs	r0, r5
 80243b2:	17e9      	asrs	r1, r5, #31
 80243b4:	f7dc f904 	bl	80005c0 <__aeabi_lmul>
 80243b8:	4653      	mov	r3, sl
 80243ba:	1a76      	subs	r6, r6, r1
 80243bc:	0076      	lsls	r6, r6, #1
 80243be:	601e      	str	r6, [r3, #0]
 80243c0:	002a      	movs	r2, r5
 80243c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80243c4:	9808      	ldr	r0, [sp, #32]
 80243c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80243c8:	f7dc f8fa 	bl	80005c0 <__aeabi_lmul>
 80243cc:	003a      	movs	r2, r7
 80243ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80243d0:	000d      	movs	r5, r1
 80243d2:	0020      	movs	r0, r4
 80243d4:	9907      	ldr	r1, [sp, #28]
 80243d6:	f7dc f8f3 	bl	80005c0 <__aeabi_lmul>
 80243da:	4657      	mov	r7, sl
 80243dc:	186d      	adds	r5, r5, r1
 80243de:	006d      	lsls	r5, r5, #1
 80243e0:	607d      	str	r5, [r7, #4]
 80243e2:	9b03      	ldr	r3, [sp, #12]
 80243e4:	9e06      	ldr	r6, [sp, #24]
 80243e6:	9d05      	ldr	r5, [sp, #20]
 80243e8:	46b4      	mov	ip, r6
 80243ea:	1b5d      	subs	r5, r3, r5
 80243ec:	9b00      	ldr	r3, [sp, #0]
 80243ee:	17ef      	asrs	r7, r5, #31
 80243f0:	0039      	movs	r1, r7
 80243f2:	681f      	ldr	r7, [r3, #0]
 80243f4:	17fc      	asrs	r4, r7, #31
 80243f6:	0020      	movs	r0, r4
 80243f8:	9c04      	ldr	r4, [sp, #16]
 80243fa:	4464      	add	r4, ip
 80243fc:	17e6      	asrs	r6, r4, #31
 80243fe:	9407      	str	r4, [sp, #28]
 8024400:	9608      	str	r6, [sp, #32]
 8024402:	685e      	ldr	r6, [r3, #4]
 8024404:	900b      	str	r0, [sp, #44]	@ 0x2c
 8024406:	17f2      	asrs	r2, r6, #31
 8024408:	0003      	movs	r3, r0
 802440a:	920c      	str	r2, [sp, #48]	@ 0x30
 802440c:	0028      	movs	r0, r5
 802440e:	003a      	movs	r2, r7
 8024410:	910a      	str	r1, [sp, #40]	@ 0x28
 8024412:	f7dc f8d5 	bl	80005c0 <__aeabi_lmul>
 8024416:	0032      	movs	r2, r6
 8024418:	17f3      	asrs	r3, r6, #31
 802441a:	9807      	ldr	r0, [sp, #28]
 802441c:	000c      	movs	r4, r1
 802441e:	9908      	ldr	r1, [sp, #32]
 8024420:	f7dc f8ce 	bl	80005c0 <__aeabi_lmul>
 8024424:	4658      	mov	r0, fp
 8024426:	1a64      	subs	r4, r4, r1
 8024428:	0064      	lsls	r4, r4, #1
 802442a:	9a07      	ldr	r2, [sp, #28]
 802442c:	6004      	str	r4, [r0, #0]
 802442e:	9b08      	ldr	r3, [sp, #32]
 8024430:	0038      	movs	r0, r7
 8024432:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024434:	f7dc f8c4 	bl	80005c0 <__aeabi_lmul>
 8024438:	0032      	movs	r2, r6
 802443a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802443c:	000c      	movs	r4, r1
 802443e:	0028      	movs	r0, r5
 8024440:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024442:	f7dc f8bd 	bl	80005c0 <__aeabi_lmul>
 8024446:	9d05      	ldr	r5, [sp, #20]
 8024448:	465f      	mov	r7, fp
 802444a:	46ac      	mov	ip, r5
 802444c:	1864      	adds	r4, r4, r1
 802444e:	9903      	ldr	r1, [sp, #12]
 8024450:	0064      	lsls	r4, r4, #1
 8024452:	4461      	add	r1, ip
 8024454:	607c      	str	r4, [r7, #4]
 8024456:	000c      	movs	r4, r1
 8024458:	17c9      	asrs	r1, r1, #31
 802445a:	9105      	str	r1, [sp, #20]
 802445c:	9902      	ldr	r1, [sp, #8]
 802445e:	9804      	ldr	r0, [sp, #16]
 8024460:	680d      	ldr	r5, [r1, #0]
 8024462:	9e06      	ldr	r6, [sp, #24]
 8024464:	002b      	movs	r3, r5
 8024466:	17ed      	asrs	r5, r5, #31
 8024468:	684f      	ldr	r7, [r1, #4]
 802446a:	9503      	str	r5, [sp, #12]
 802446c:	1b85      	subs	r5, r0, r6
 802446e:	17e8      	asrs	r0, r5, #31
 8024470:	001a      	movs	r2, r3
 8024472:	9006      	str	r0, [sp, #24]
 8024474:	17fe      	asrs	r6, r7, #31
 8024476:	9304      	str	r3, [sp, #16]
 8024478:	0020      	movs	r0, r4
 802447a:	9b03      	ldr	r3, [sp, #12]
 802447c:	17e1      	asrs	r1, r4, #31
 802447e:	9607      	str	r6, [sp, #28]
 8024480:	f7dc f89e 	bl	80005c0 <__aeabi_lmul>
 8024484:	003a      	movs	r2, r7
 8024486:	000e      	movs	r6, r1
 8024488:	17fb      	asrs	r3, r7, #31
 802448a:	0028      	movs	r0, r5
 802448c:	17e9      	asrs	r1, r5, #31
 802448e:	f7dc f897 	bl	80005c0 <__aeabi_lmul>
 8024492:	4640      	mov	r0, r8
 8024494:	1a76      	subs	r6, r6, r1
 8024496:	0076      	lsls	r6, r6, #1
 8024498:	002a      	movs	r2, r5
 802449a:	9b06      	ldr	r3, [sp, #24]
 802449c:	6006      	str	r6, [r0, #0]
 802449e:	9903      	ldr	r1, [sp, #12]
 80244a0:	9804      	ldr	r0, [sp, #16]
 80244a2:	f7dc f88d 	bl	80005c0 <__aeabi_lmul>
 80244a6:	0020      	movs	r0, r4
 80244a8:	2408      	movs	r4, #8
 80244aa:	9b07      	ldr	r3, [sp, #28]
 80244ac:	000d      	movs	r5, r1
 80244ae:	003a      	movs	r2, r7
 80244b0:	9905      	ldr	r1, [sp, #20]
 80244b2:	f7dc f885 	bl	80005c0 <__aeabi_lmul>
 80244b6:	4640      	mov	r0, r8
 80244b8:	46a4      	mov	ip, r4
 80244ba:	186d      	adds	r5, r5, r1
 80244bc:	006d      	lsls	r5, r5, #1
 80244be:	6045      	str	r5, [r0, #4]
 80244c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80244c2:	44e1      	add	r9, ip
 80244c4:	3801      	subs	r0, #1
 80244c6:	9009      	str	r0, [sp, #36]	@ 0x24
 80244c8:	9a01      	ldr	r2, [sp, #4]
 80244ca:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80244cc:	44e2      	add	sl, ip
 80244ce:	44e3      	add	fp, ip
 80244d0:	44e0      	add	r8, ip
 80244d2:	46a4      	mov	ip, r4
 80244d4:	4462      	add	r2, ip
 80244d6:	9201      	str	r2, [sp, #4]
 80244d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80244da:	9b00      	ldr	r3, [sp, #0]
 80244dc:	4694      	mov	ip, r2
 80244de:	4463      	add	r3, ip
 80244e0:	9300      	str	r3, [sp, #0]
 80244e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80244e4:	9902      	ldr	r1, [sp, #8]
 80244e6:	469c      	mov	ip, r3
 80244e8:	4461      	add	r1, ip
 80244ea:	9102      	str	r1, [sp, #8]
 80244ec:	2800      	cmp	r0, #0
 80244ee:	d000      	beq.n	80244f2 <arm_radix4_butterfly_inverse_q31+0x22e>
 80244f0:	e70f      	b.n	8024312 <arm_radix4_butterfly_inverse_q31+0x4e>
 80244f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80244f4:	009b      	lsls	r3, r3, #2
 80244f6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80244f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80244fa:	9320      	str	r3, [sp, #128]	@ 0x80
 80244fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80244fe:	2b04      	cmp	r3, #4
 8024500:	d800      	bhi.n	8024504 <arm_radix4_butterfly_inverse_q31+0x240>
 8024502:	e17c      	b.n	80247fe <arm_radix4_butterfly_inverse_q31+0x53a>
 8024504:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024506:	0893      	lsrs	r3, r2, #2
 8024508:	1e59      	subs	r1, r3, #1
 802450a:	9321      	str	r3, [sp, #132]	@ 0x84
 802450c:	00db      	lsls	r3, r3, #3
 802450e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8024510:	00d3      	lsls	r3, r2, #3
 8024512:	9300      	str	r3, [sp, #0]
 8024514:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024516:	911a      	str	r1, [sp, #104]	@ 0x68
 8024518:	00da      	lsls	r2, r3, #3
 802451a:	921e      	str	r2, [sp, #120]	@ 0x78
 802451c:	011a      	lsls	r2, r3, #4
 802451e:	921d      	str	r2, [sp, #116]	@ 0x74
 8024520:	001a      	movs	r2, r3
 8024522:	4694      	mov	ip, r2
 8024524:	005b      	lsls	r3, r3, #1
 8024526:	4463      	add	r3, ip
 8024528:	00db      	lsls	r3, r3, #3
 802452a:	931c      	str	r3, [sp, #112]	@ 0x70
 802452c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802452e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024530:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024532:	9318      	str	r3, [sp, #96]	@ 0x60
 8024534:	9319      	str	r3, [sp, #100]	@ 0x64
 8024536:	9316      	str	r3, [sp, #88]	@ 0x58
 8024538:	2300      	movs	r3, #0
 802453a:	9315      	str	r3, [sp, #84]	@ 0x54
 802453c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802453e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024540:	681a      	ldr	r2, [r3, #0]
 8024542:	685b      	ldr	r3, [r3, #4]
 8024544:	9205      	str	r2, [sp, #20]
 8024546:	9306      	str	r3, [sp, #24]
 8024548:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802454a:	468c      	mov	ip, r1
 802454c:	681a      	ldr	r2, [r3, #0]
 802454e:	685b      	ldr	r3, [r3, #4]
 8024550:	9207      	str	r2, [sp, #28]
 8024552:	9308      	str	r3, [sp, #32]
 8024554:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024556:	681a      	ldr	r2, [r3, #0]
 8024558:	685b      	ldr	r3, [r3, #4]
 802455a:	9209      	str	r2, [sp, #36]	@ 0x24
 802455c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802455e:	930a      	str	r3, [sp, #40]	@ 0x28
 8024560:	0013      	movs	r3, r2
 8024562:	4463      	add	r3, ip
 8024564:	4698      	mov	r8, r3
 8024566:	0013      	movs	r3, r2
 8024568:	4442      	add	r2, r8
 802456a:	4691      	mov	r9, r2
 802456c:	001a      	movs	r2, r3
 802456e:	444a      	add	r2, r9
 8024570:	4692      	mov	sl, r2
 8024572:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024574:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024576:	4293      	cmp	r3, r2
 8024578:	d800      	bhi.n	802457c <arm_radix4_butterfly_inverse_q31+0x2b8>
 802457a:	e0d9      	b.n	8024730 <arm_radix4_butterfly_inverse_q31+0x46c>
 802457c:	4694      	mov	ip, r2
 802457e:	4644      	mov	r4, r8
 8024580:	4655      	mov	r5, sl
 8024582:	4688      	mov	r8, r1
 8024584:	9b07      	ldr	r3, [sp, #28]
 8024586:	17db      	asrs	r3, r3, #31
 8024588:	930c      	str	r3, [sp, #48]	@ 0x30
 802458a:	9b08      	ldr	r3, [sp, #32]
 802458c:	17db      	asrs	r3, r3, #31
 802458e:	930d      	str	r3, [sp, #52]	@ 0x34
 8024590:	9b05      	ldr	r3, [sp, #20]
 8024592:	17db      	asrs	r3, r3, #31
 8024594:	930e      	str	r3, [sp, #56]	@ 0x38
 8024596:	9b06      	ldr	r3, [sp, #24]
 8024598:	17db      	asrs	r3, r3, #31
 802459a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802459c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802459e:	17db      	asrs	r3, r3, #31
 80245a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80245a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80245a4:	17db      	asrs	r3, r3, #31
 80245a6:	9311      	str	r3, [sp, #68]	@ 0x44
 80245a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80245aa:	4463      	add	r3, ip
 80245ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80245ae:	4643      	mov	r3, r8
 80245b0:	4641      	mov	r1, r8
 80245b2:	681a      	ldr	r2, [r3, #0]
 80245b4:	464b      	mov	r3, r9
 80245b6:	684f      	ldr	r7, [r1, #4]
 80245b8:	4649      	mov	r1, r9
 80245ba:	681b      	ldr	r3, [r3, #0]
 80245bc:	18d6      	adds	r6, r2, r3
 80245be:	1ad3      	subs	r3, r2, r3
 80245c0:	9301      	str	r3, [sp, #4]
 80245c2:	684b      	ldr	r3, [r1, #4]
 80245c4:	1af9      	subs	r1, r7, r3
 80245c6:	9102      	str	r1, [sp, #8]
 80245c8:	6829      	ldr	r1, [r5, #0]
 80245ca:	18f8      	adds	r0, r7, r3
 80245cc:	468c      	mov	ip, r1
 80245ce:	6827      	ldr	r7, [r4, #0]
 80245d0:	4467      	add	r7, ip
 80245d2:	003a      	movs	r2, r7
 80245d4:	19f3      	adds	r3, r6, r7
 80245d6:	4647      	mov	r7, r8
 80245d8:	109b      	asrs	r3, r3, #2
 80245da:	603b      	str	r3, [r7, #0]
 80245dc:	6869      	ldr	r1, [r5, #4]
 80245de:	6867      	ldr	r7, [r4, #4]
 80245e0:	468c      	mov	ip, r1
 80245e2:	4467      	add	r7, ip
 80245e4:	003b      	movs	r3, r7
 80245e6:	19c1      	adds	r1, r0, r7
 80245e8:	4647      	mov	r7, r8
 80245ea:	1ab6      	subs	r6, r6, r2
 80245ec:	1089      	asrs	r1, r1, #2
 80245ee:	6079      	str	r1, [r7, #4]
 80245f0:	17f2      	asrs	r2, r6, #31
 80245f2:	9900      	ldr	r1, [sp, #0]
 80245f4:	4692      	mov	sl, r2
 80245f6:	468c      	mov	ip, r1
 80245f8:	6867      	ldr	r7, [r4, #4]
 80245fa:	6869      	ldr	r1, [r5, #4]
 80245fc:	44e0      	add	r8, ip
 80245fe:	1a7f      	subs	r7, r7, r1
 8024600:	9703      	str	r7, [sp, #12]
 8024602:	6821      	ldr	r1, [r4, #0]
 8024604:	682f      	ldr	r7, [r5, #0]
 8024606:	1bc9      	subs	r1, r1, r7
 8024608:	1ac7      	subs	r7, r0, r3
 802460a:	17fa      	asrs	r2, r7, #31
 802460c:	4693      	mov	fp, r2
 802460e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024610:	9a07      	ldr	r2, [sp, #28]
 8024612:	9104      	str	r1, [sp, #16]
 8024614:	0030      	movs	r0, r6
 8024616:	4651      	mov	r1, sl
 8024618:	f7db ffd2 	bl	80005c0 <__aeabi_lmul>
 802461c:	9a08      	ldr	r2, [sp, #32]
 802461e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024620:	9112      	str	r1, [sp, #72]	@ 0x48
 8024622:	0038      	movs	r0, r7
 8024624:	4659      	mov	r1, fp
 8024626:	f7db ffcb 	bl	80005c0 <__aeabi_lmul>
 802462a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802462c:	9a07      	ldr	r2, [sp, #28]
 802462e:	1a41      	subs	r1, r0, r1
 8024630:	1049      	asrs	r1, r1, #1
 8024632:	6021      	str	r1, [r4, #0]
 8024634:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024636:	0038      	movs	r0, r7
 8024638:	4659      	mov	r1, fp
 802463a:	f7db ffc1 	bl	80005c0 <__aeabi_lmul>
 802463e:	9a08      	ldr	r2, [sp, #32]
 8024640:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024642:	000f      	movs	r7, r1
 8024644:	0030      	movs	r0, r6
 8024646:	4651      	mov	r1, sl
 8024648:	f7db ffba 	bl	80005c0 <__aeabi_lmul>
 802464c:	9b00      	ldr	r3, [sp, #0]
 802464e:	187f      	adds	r7, r7, r1
 8024650:	469c      	mov	ip, r3
 8024652:	107f      	asrs	r7, r7, #1
 8024654:	6067      	str	r7, [r4, #4]
 8024656:	9a01      	ldr	r2, [sp, #4]
 8024658:	9f03      	ldr	r7, [sp, #12]
 802465a:	9802      	ldr	r0, [sp, #8]
 802465c:	1bd7      	subs	r7, r2, r7
 802465e:	17fe      	asrs	r6, r7, #31
 8024660:	0031      	movs	r1, r6
 8024662:	9e04      	ldr	r6, [sp, #16]
 8024664:	4682      	mov	sl, r0
 8024666:	4464      	add	r4, ip
 8024668:	46b4      	mov	ip, r6
 802466a:	44e2      	add	sl, ip
 802466c:	4652      	mov	r2, sl
 802466e:	17d2      	asrs	r2, r2, #31
 8024670:	4693      	mov	fp, r2
 8024672:	0038      	movs	r0, r7
 8024674:	9a05      	ldr	r2, [sp, #20]
 8024676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024678:	9112      	str	r1, [sp, #72]	@ 0x48
 802467a:	f7db ffa1 	bl	80005c0 <__aeabi_lmul>
 802467e:	9a06      	ldr	r2, [sp, #24]
 8024680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024682:	000e      	movs	r6, r1
 8024684:	4650      	mov	r0, sl
 8024686:	4659      	mov	r1, fp
 8024688:	f7db ff9a 	bl	80005c0 <__aeabi_lmul>
 802468c:	4648      	mov	r0, r9
 802468e:	1a76      	subs	r6, r6, r1
 8024690:	1076      	asrs	r6, r6, #1
 8024692:	6006      	str	r6, [r0, #0]
 8024694:	9a05      	ldr	r2, [sp, #20]
 8024696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024698:	4650      	mov	r0, sl
 802469a:	4659      	mov	r1, fp
 802469c:	f7db ff90 	bl	80005c0 <__aeabi_lmul>
 80246a0:	9a06      	ldr	r2, [sp, #24]
 80246a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80246a4:	000e      	movs	r6, r1
 80246a6:	0038      	movs	r0, r7
 80246a8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80246aa:	f7db ff89 	bl	80005c0 <__aeabi_lmul>
 80246ae:	9a00      	ldr	r2, [sp, #0]
 80246b0:	9f03      	ldr	r7, [sp, #12]
 80246b2:	4694      	mov	ip, r2
 80246b4:	1876      	adds	r6, r6, r1
 80246b6:	4649      	mov	r1, r9
 80246b8:	44e1      	add	r9, ip
 80246ba:	46bc      	mov	ip, r7
 80246bc:	9b01      	ldr	r3, [sp, #4]
 80246be:	1076      	asrs	r6, r6, #1
 80246c0:	4463      	add	r3, ip
 80246c2:	17df      	asrs	r7, r3, #31
 80246c4:	604e      	str	r6, [r1, #4]
 80246c6:	46ba      	mov	sl, r7
 80246c8:	001e      	movs	r6, r3
 80246ca:	9802      	ldr	r0, [sp, #8]
 80246cc:	9b04      	ldr	r3, [sp, #16]
 80246ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80246d0:	1ac7      	subs	r7, r0, r3
 80246d2:	17fb      	asrs	r3, r7, #31
 80246d4:	469b      	mov	fp, r3
 80246d6:	0030      	movs	r0, r6
 80246d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80246da:	4651      	mov	r1, sl
 80246dc:	f7db ff70 	bl	80005c0 <__aeabi_lmul>
 80246e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80246e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80246e4:	9101      	str	r1, [sp, #4]
 80246e6:	0038      	movs	r0, r7
 80246e8:	4659      	mov	r1, fp
 80246ea:	f7db ff69 	bl	80005c0 <__aeabi_lmul>
 80246ee:	9801      	ldr	r0, [sp, #4]
 80246f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80246f2:	1a41      	subs	r1, r0, r1
 80246f4:	1049      	asrs	r1, r1, #1
 80246f6:	6029      	str	r1, [r5, #0]
 80246f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80246fa:	0038      	movs	r0, r7
 80246fc:	4659      	mov	r1, fp
 80246fe:	f7db ff5f 	bl	80005c0 <__aeabi_lmul>
 8024702:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024704:	000f      	movs	r7, r1
 8024706:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024708:	0030      	movs	r0, r6
 802470a:	4651      	mov	r1, sl
 802470c:	f7db ff58 	bl	80005c0 <__aeabi_lmul>
 8024710:	187f      	adds	r7, r7, r1
 8024712:	107f      	asrs	r7, r7, #1
 8024714:	606f      	str	r7, [r5, #4]
 8024716:	9a00      	ldr	r2, [sp, #0]
 8024718:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802471a:	4694      	mov	ip, r2
 802471c:	4465      	add	r5, ip
 802471e:	468c      	mov	ip, r1
 8024720:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024722:	0013      	movs	r3, r2
 8024724:	4462      	add	r2, ip
 8024726:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024728:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802472a:	429a      	cmp	r2, r3
 802472c:	d900      	bls.n	8024730 <arm_radix4_butterfly_inverse_q31+0x46c>
 802472e:	e73e      	b.n	80245ae <arm_radix4_butterfly_inverse_q31+0x2ea>
 8024730:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024732:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024734:	468c      	mov	ip, r1
 8024736:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024738:	4462      	add	r2, ip
 802473a:	468c      	mov	ip, r1
 802473c:	9216      	str	r2, [sp, #88]	@ 0x58
 802473e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024740:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024742:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024744:	4462      	add	r2, ip
 8024746:	468c      	mov	ip, r1
 8024748:	9219      	str	r2, [sp, #100]	@ 0x64
 802474a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802474c:	3301      	adds	r3, #1
 802474e:	4462      	add	r2, ip
 8024750:	9218      	str	r2, [sp, #96]	@ 0x60
 8024752:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8024754:	9315      	str	r3, [sp, #84]	@ 0x54
 8024756:	3208      	adds	r2, #8
 8024758:	9217      	str	r2, [sp, #92]	@ 0x5c
 802475a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802475c:	4293      	cmp	r3, r2
 802475e:	d800      	bhi.n	8024762 <arm_radix4_butterfly_inverse_q31+0x49e>
 8024760:	e6ec      	b.n	802453c <arm_radix4_butterfly_inverse_q31+0x278>
 8024762:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024764:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024766:	009b      	lsls	r3, r3, #2
 8024768:	931f      	str	r3, [sp, #124]	@ 0x7c
 802476a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802476c:	9213      	str	r2, [sp, #76]	@ 0x4c
 802476e:	089b      	lsrs	r3, r3, #2
 8024770:	9320      	str	r3, [sp, #128]	@ 0x80
 8024772:	2b04      	cmp	r3, #4
 8024774:	d900      	bls.n	8024778 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8024776:	e6c5      	b.n	8024504 <arm_radix4_butterfly_inverse_q31+0x240>
 8024778:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802477a:	469a      	mov	sl, r3
 802477c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802477e:	681a      	ldr	r2, [r3, #0]
 8024780:	6918      	ldr	r0, [r3, #16]
 8024782:	4691      	mov	r9, r2
 8024784:	464c      	mov	r4, r9
 8024786:	4680      	mov	r8, r0
 8024788:	69de      	ldr	r6, [r3, #28]
 802478a:	689d      	ldr	r5, [r3, #8]
 802478c:	46b4      	mov	ip, r6
 802478e:	6998      	ldr	r0, [r3, #24]
 8024790:	1964      	adds	r4, r4, r5
 8024792:	6859      	ldr	r1, [r3, #4]
 8024794:	68da      	ldr	r2, [r3, #12]
 8024796:	4444      	add	r4, r8
 8024798:	695f      	ldr	r7, [r3, #20]
 802479a:	1824      	adds	r4, r4, r0
 802479c:	601c      	str	r4, [r3, #0]
 802479e:	188c      	adds	r4, r1, r2
 80247a0:	19e4      	adds	r4, r4, r7
 80247a2:	4464      	add	r4, ip
 80247a4:	605c      	str	r4, [r3, #4]
 80247a6:	464c      	mov	r4, r9
 80247a8:	1b64      	subs	r4, r4, r5
 80247aa:	4444      	add	r4, r8
 80247ac:	1a24      	subs	r4, r4, r0
 80247ae:	609c      	str	r4, [r3, #8]
 80247b0:	1a8c      	subs	r4, r1, r2
 80247b2:	19e4      	adds	r4, r4, r7
 80247b4:	1ba4      	subs	r4, r4, r6
 80247b6:	60dc      	str	r4, [r3, #12]
 80247b8:	464c      	mov	r4, r9
 80247ba:	4646      	mov	r6, r8
 80247bc:	1aa4      	subs	r4, r4, r2
 80247be:	1ba4      	subs	r4, r4, r6
 80247c0:	4464      	add	r4, ip
 80247c2:	611c      	str	r4, [r3, #16]
 80247c4:	194c      	adds	r4, r1, r5
 80247c6:	1be4      	subs	r4, r4, r7
 80247c8:	1a24      	subs	r4, r4, r0
 80247ca:	615c      	str	r4, [r3, #20]
 80247cc:	4644      	mov	r4, r8
 80247ce:	4666      	mov	r6, ip
 80247d0:	444a      	add	r2, r9
 80247d2:	1b12      	subs	r2, r2, r4
 80247d4:	1b92      	subs	r2, r2, r6
 80247d6:	619a      	str	r2, [r3, #24]
 80247d8:	1b4a      	subs	r2, r1, r5
 80247da:	1bd1      	subs	r1, r2, r7
 80247dc:	2201      	movs	r2, #1
 80247de:	4252      	negs	r2, r2
 80247e0:	4694      	mov	ip, r2
 80247e2:	44e2      	add	sl, ip
 80247e4:	4652      	mov	r2, sl
 80247e6:	1809      	adds	r1, r1, r0
 80247e8:	61d9      	str	r1, [r3, #28]
 80247ea:	3320      	adds	r3, #32
 80247ec:	2a00      	cmp	r2, #0
 80247ee:	d1c6      	bne.n	802477e <arm_radix4_butterfly_inverse_q31+0x4ba>
 80247f0:	b027      	add	sp, #156	@ 0x9c
 80247f2:	bc3c      	pop	{r2, r3, r4, r5}
 80247f4:	4690      	mov	r8, r2
 80247f6:	4699      	mov	r9, r3
 80247f8:	46a2      	mov	sl, r4
 80247fa:	46ab      	mov	fp, r5
 80247fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80247fe:	469a      	mov	sl, r3
 8024800:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024802:	e7bc      	b.n	802477e <arm_radix4_butterfly_inverse_q31+0x4ba>

08024804 <arm_cmplx_mag_squared_q31>:
 8024804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024806:	464f      	mov	r7, r9
 8024808:	4646      	mov	r6, r8
 802480a:	0004      	movs	r4, r0
 802480c:	b4c0      	push	{r6, r7}
 802480e:	0016      	movs	r6, r2
 8024810:	000f      	movs	r7, r1
 8024812:	2a00      	cmp	r2, #0
 8024814:	d018      	beq.n	8024848 <arm_cmplx_mag_squared_q31+0x44>
 8024816:	6823      	ldr	r3, [r4, #0]
 8024818:	6822      	ldr	r2, [r4, #0]
 802481a:	17d9      	asrs	r1, r3, #31
 802481c:	6863      	ldr	r3, [r4, #4]
 802481e:	0010      	movs	r0, r2
 8024820:	4698      	mov	r8, r3
 8024822:	17db      	asrs	r3, r3, #31
 8024824:	4699      	mov	r9, r3
 8024826:	000b      	movs	r3, r1
 8024828:	f7db feca 	bl	80005c0 <__aeabi_lmul>
 802482c:	4642      	mov	r2, r8
 802482e:	104d      	asrs	r5, r1, #1
 8024830:	464b      	mov	r3, r9
 8024832:	4640      	mov	r0, r8
 8024834:	4649      	mov	r1, r9
 8024836:	f7db fec3 	bl	80005c0 <__aeabi_lmul>
 802483a:	1049      	asrs	r1, r1, #1
 802483c:	1869      	adds	r1, r5, r1
 802483e:	3e01      	subs	r6, #1
 8024840:	c702      	stmia	r7!, {r1}
 8024842:	3408      	adds	r4, #8
 8024844:	2e00      	cmp	r6, #0
 8024846:	d1e6      	bne.n	8024816 <arm_cmplx_mag_squared_q31+0x12>
 8024848:	bc0c      	pop	{r2, r3}
 802484a:	4690      	mov	r8, r2
 802484c:	4699      	mov	r9, r3
 802484e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024850 <arm_mult_q31>:
 8024850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024852:	4646      	mov	r6, r8
 8024854:	464f      	mov	r7, r9
 8024856:	4690      	mov	r8, r2
 8024858:	b4c0      	push	{r6, r7}
 802485a:	001d      	movs	r5, r3
 802485c:	0006      	movs	r6, r0
 802485e:	000f      	movs	r7, r1
 8024860:	2400      	movs	r4, #0
 8024862:	2b00      	cmp	r3, #0
 8024864:	d020      	beq.n	80248a8 <arm_mult_q31+0x58>
 8024866:	4b12      	ldr	r3, [pc, #72]	@ (80248b0 <arm_mult_q31+0x60>)
 8024868:	4699      	mov	r9, r3
 802486a:	e007      	b.n	802487c <arm_mult_q31+0x2c>
 802486c:	464b      	mov	r3, r9
 802486e:	4059      	eors	r1, r3
 8024870:	4643      	mov	r3, r8
 8024872:	3d01      	subs	r5, #1
 8024874:	5119      	str	r1, [r3, r4]
 8024876:	3404      	adds	r4, #4
 8024878:	2d00      	cmp	r5, #0
 802487a:	d015      	beq.n	80248a8 <arm_mult_q31+0x58>
 802487c:	5933      	ldr	r3, [r6, r4]
 802487e:	593a      	ldr	r2, [r7, r4]
 8024880:	17d9      	asrs	r1, r3, #31
 8024882:	593b      	ldr	r3, [r7, r4]
 8024884:	5930      	ldr	r0, [r6, r4]
 8024886:	17db      	asrs	r3, r3, #31
 8024888:	f7db fe9a 	bl	80005c0 <__aeabi_lmul>
 802488c:	004b      	lsls	r3, r1, #1
 802488e:	0fc0      	lsrs	r0, r0, #31
 8024890:	4318      	orrs	r0, r3
 8024892:	17c9      	asrs	r1, r1, #31
 8024894:	17c3      	asrs	r3, r0, #31
 8024896:	428b      	cmp	r3, r1
 8024898:	d1e8      	bne.n	802486c <arm_mult_q31+0x1c>
 802489a:	0001      	movs	r1, r0
 802489c:	4643      	mov	r3, r8
 802489e:	3d01      	subs	r5, #1
 80248a0:	5119      	str	r1, [r3, r4]
 80248a2:	3404      	adds	r4, #4
 80248a4:	2d00      	cmp	r5, #0
 80248a6:	d1e9      	bne.n	802487c <arm_mult_q31+0x2c>
 80248a8:	bc0c      	pop	{r2, r3}
 80248aa:	4690      	mov	r8, r2
 80248ac:	4699      	mov	r9, r3
 80248ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80248b0:	7fffffff 	.word	0x7fffffff

080248b4 <arm_add_q31>:
 80248b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80248b6:	465f      	mov	r7, fp
 80248b8:	4656      	mov	r6, sl
 80248ba:	464d      	mov	r5, r9
 80248bc:	4644      	mov	r4, r8
 80248be:	b4f0      	push	{r4, r5, r6, r7}
 80248c0:	4693      	mov	fp, r2
 80248c2:	b083      	sub	sp, #12
 80248c4:	4681      	mov	r9, r0
 80248c6:	468a      	mov	sl, r1
 80248c8:	4698      	mov	r8, r3
 80248ca:	2200      	movs	r2, #0
 80248cc:	2b00      	cmp	r3, #0
 80248ce:	d020      	beq.n	8024912 <arm_add_q31+0x5e>
 80248d0:	4649      	mov	r1, r9
 80248d2:	4653      	mov	r3, sl
 80248d4:	588e      	ldr	r6, [r1, r2]
 80248d6:	589b      	ldr	r3, [r3, r2]
 80248d8:	17f7      	asrs	r7, r6, #31
 80248da:	001c      	movs	r4, r3
 80248dc:	0030      	movs	r0, r6
 80248de:	0039      	movs	r1, r7
 80248e0:	17dd      	asrs	r5, r3, #31
 80248e2:	46b4      	mov	ip, r6
 80248e4:	1900      	adds	r0, r0, r4
 80248e6:	4169      	adcs	r1, r5
 80248e8:	4463      	add	r3, ip
 80248ea:	9000      	str	r0, [sp, #0]
 80248ec:	9101      	str	r1, [sp, #4]
 80248ee:	17d9      	asrs	r1, r3, #31
 80248f0:	468c      	mov	ip, r1
 80248f2:	9901      	ldr	r1, [sp, #4]
 80248f4:	458c      	cmp	ip, r1
 80248f6:	d002      	beq.n	80248fe <arm_add_q31+0x4a>
 80248f8:	17cb      	asrs	r3, r1, #31
 80248fa:	4909      	ldr	r1, [pc, #36]	@ (8024920 <arm_add_q31+0x6c>)
 80248fc:	404b      	eors	r3, r1
 80248fe:	4659      	mov	r1, fp
 8024900:	508b      	str	r3, [r1, r2]
 8024902:	2301      	movs	r3, #1
 8024904:	425b      	negs	r3, r3
 8024906:	469c      	mov	ip, r3
 8024908:	44e0      	add	r8, ip
 802490a:	4643      	mov	r3, r8
 802490c:	3204      	adds	r2, #4
 802490e:	2b00      	cmp	r3, #0
 8024910:	d1de      	bne.n	80248d0 <arm_add_q31+0x1c>
 8024912:	b003      	add	sp, #12
 8024914:	bc3c      	pop	{r2, r3, r4, r5}
 8024916:	4690      	mov	r8, r2
 8024918:	4699      	mov	r9, r3
 802491a:	46a2      	mov	sl, r4
 802491c:	46ab      	mov	fp, r5
 802491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024920:	7fffffff 	.word	0x7fffffff

08024924 <atof>:
 8024924:	b510      	push	{r4, lr}
 8024926:	2100      	movs	r1, #0
 8024928:	f000 fe1e 	bl	8025568 <strtod>
 802492c:	bd10      	pop	{r4, pc}

0802492e <atoi>:
 802492e:	b510      	push	{r4, lr}
 8024930:	220a      	movs	r2, #10
 8024932:	2100      	movs	r1, #0
 8024934:	f000 feb0 	bl	8025698 <strtol>
 8024938:	bd10      	pop	{r4, pc}
	...

0802493c <sulp>:
 802493c:	b570      	push	{r4, r5, r6, lr}
 802493e:	0016      	movs	r6, r2
 8024940:	000d      	movs	r5, r1
 8024942:	f003 fced 	bl	8028320 <__ulp>
 8024946:	2e00      	cmp	r6, #0
 8024948:	d00d      	beq.n	8024966 <sulp+0x2a>
 802494a:	236b      	movs	r3, #107	@ 0x6b
 802494c:	006a      	lsls	r2, r5, #1
 802494e:	0d52      	lsrs	r2, r2, #21
 8024950:	1a9b      	subs	r3, r3, r2
 8024952:	2b00      	cmp	r3, #0
 8024954:	dd07      	ble.n	8024966 <sulp+0x2a>
 8024956:	2400      	movs	r4, #0
 8024958:	4a03      	ldr	r2, [pc, #12]	@ (8024968 <sulp+0x2c>)
 802495a:	051b      	lsls	r3, r3, #20
 802495c:	189d      	adds	r5, r3, r2
 802495e:	002b      	movs	r3, r5
 8024960:	0022      	movs	r2, r4
 8024962:	f7dd fff7 	bl	8002954 <__aeabi_dmul>
 8024966:	bd70      	pop	{r4, r5, r6, pc}
 8024968:	3ff00000 	.word	0x3ff00000

0802496c <_strtod_l>:
 802496c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802496e:	b0a3      	sub	sp, #140	@ 0x8c
 8024970:	921b      	str	r2, [sp, #108]	@ 0x6c
 8024972:	2200      	movs	r2, #0
 8024974:	2600      	movs	r6, #0
 8024976:	2700      	movs	r7, #0
 8024978:	9005      	str	r0, [sp, #20]
 802497a:	9109      	str	r1, [sp, #36]	@ 0x24
 802497c:	921e      	str	r2, [sp, #120]	@ 0x78
 802497e:	911d      	str	r1, [sp, #116]	@ 0x74
 8024980:	780a      	ldrb	r2, [r1, #0]
 8024982:	2a2b      	cmp	r2, #43	@ 0x2b
 8024984:	d053      	beq.n	8024a2e <_strtod_l+0xc2>
 8024986:	d83f      	bhi.n	8024a08 <_strtod_l+0x9c>
 8024988:	2a0d      	cmp	r2, #13
 802498a:	d839      	bhi.n	8024a00 <_strtod_l+0x94>
 802498c:	2a08      	cmp	r2, #8
 802498e:	d839      	bhi.n	8024a04 <_strtod_l+0x98>
 8024990:	2a00      	cmp	r2, #0
 8024992:	d042      	beq.n	8024a1a <_strtod_l+0xae>
 8024994:	2200      	movs	r2, #0
 8024996:	9212      	str	r2, [sp, #72]	@ 0x48
 8024998:	2100      	movs	r1, #0
 802499a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802499c:	910c      	str	r1, [sp, #48]	@ 0x30
 802499e:	782a      	ldrb	r2, [r5, #0]
 80249a0:	2a30      	cmp	r2, #48	@ 0x30
 80249a2:	d000      	beq.n	80249a6 <_strtod_l+0x3a>
 80249a4:	e083      	b.n	8024aae <_strtod_l+0x142>
 80249a6:	786a      	ldrb	r2, [r5, #1]
 80249a8:	3120      	adds	r1, #32
 80249aa:	438a      	bics	r2, r1
 80249ac:	2a58      	cmp	r2, #88	@ 0x58
 80249ae:	d000      	beq.n	80249b2 <_strtod_l+0x46>
 80249b0:	e073      	b.n	8024a9a <_strtod_l+0x12e>
 80249b2:	9302      	str	r3, [sp, #8]
 80249b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80249b6:	4a9b      	ldr	r2, [pc, #620]	@ (8024c24 <_strtod_l+0x2b8>)
 80249b8:	9301      	str	r3, [sp, #4]
 80249ba:	ab1e      	add	r3, sp, #120	@ 0x78
 80249bc:	9300      	str	r3, [sp, #0]
 80249be:	9805      	ldr	r0, [sp, #20]
 80249c0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80249c2:	a91d      	add	r1, sp, #116	@ 0x74
 80249c4:	f002 fd64 	bl	8027490 <__gethex>
 80249c8:	230f      	movs	r3, #15
 80249ca:	0002      	movs	r2, r0
 80249cc:	401a      	ands	r2, r3
 80249ce:	0004      	movs	r4, r0
 80249d0:	9206      	str	r2, [sp, #24]
 80249d2:	4218      	tst	r0, r3
 80249d4:	d005      	beq.n	80249e2 <_strtod_l+0x76>
 80249d6:	2a06      	cmp	r2, #6
 80249d8:	d12b      	bne.n	8024a32 <_strtod_l+0xc6>
 80249da:	2300      	movs	r3, #0
 80249dc:	3501      	adds	r5, #1
 80249de:	951d      	str	r5, [sp, #116]	@ 0x74
 80249e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80249e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80249e4:	2b00      	cmp	r3, #0
 80249e6:	d002      	beq.n	80249ee <_strtod_l+0x82>
 80249e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80249ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80249ec:	6013      	str	r3, [r2, #0]
 80249ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80249f0:	2b00      	cmp	r3, #0
 80249f2:	d019      	beq.n	8024a28 <_strtod_l+0xbc>
 80249f4:	2380      	movs	r3, #128	@ 0x80
 80249f6:	0030      	movs	r0, r6
 80249f8:	061b      	lsls	r3, r3, #24
 80249fa:	18f9      	adds	r1, r7, r3
 80249fc:	b023      	add	sp, #140	@ 0x8c
 80249fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a00:	2a20      	cmp	r2, #32
 8024a02:	d1c7      	bne.n	8024994 <_strtod_l+0x28>
 8024a04:	3101      	adds	r1, #1
 8024a06:	e7ba      	b.n	802497e <_strtod_l+0x12>
 8024a08:	2a2d      	cmp	r2, #45	@ 0x2d
 8024a0a:	d1c3      	bne.n	8024994 <_strtod_l+0x28>
 8024a0c:	3a2c      	subs	r2, #44	@ 0x2c
 8024a0e:	9212      	str	r2, [sp, #72]	@ 0x48
 8024a10:	1c4a      	adds	r2, r1, #1
 8024a12:	921d      	str	r2, [sp, #116]	@ 0x74
 8024a14:	784a      	ldrb	r2, [r1, #1]
 8024a16:	2a00      	cmp	r2, #0
 8024a18:	d1be      	bne.n	8024998 <_strtod_l+0x2c>
 8024a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a1c:	931d      	str	r3, [sp, #116]	@ 0x74
 8024a1e:	2300      	movs	r3, #0
 8024a20:	9312      	str	r3, [sp, #72]	@ 0x48
 8024a22:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024a24:	2b00      	cmp	r3, #0
 8024a26:	d1df      	bne.n	80249e8 <_strtod_l+0x7c>
 8024a28:	0030      	movs	r0, r6
 8024a2a:	0039      	movs	r1, r7
 8024a2c:	e7e6      	b.n	80249fc <_strtod_l+0x90>
 8024a2e:	2200      	movs	r2, #0
 8024a30:	e7ed      	b.n	8024a0e <_strtod_l+0xa2>
 8024a32:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024a34:	2a00      	cmp	r2, #0
 8024a36:	d007      	beq.n	8024a48 <_strtod_l+0xdc>
 8024a38:	2135      	movs	r1, #53	@ 0x35
 8024a3a:	a820      	add	r0, sp, #128	@ 0x80
 8024a3c:	f003 fd66 	bl	802850c <__copybits>
 8024a40:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024a42:	9805      	ldr	r0, [sp, #20]
 8024a44:	f003 f928 	bl	8027c98 <_Bfree>
 8024a48:	9806      	ldr	r0, [sp, #24]
 8024a4a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024a4c:	3801      	subs	r0, #1
 8024a4e:	2804      	cmp	r0, #4
 8024a50:	d806      	bhi.n	8024a60 <_strtod_l+0xf4>
 8024a52:	f7db fb93 	bl	800017c <__gnu_thumb1_case_uqi>
 8024a56:	0312      	.short	0x0312
 8024a58:	1e1c      	.short	0x1e1c
 8024a5a:	12          	.byte	0x12
 8024a5b:	00          	.byte	0x00
 8024a5c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024a5e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8024a60:	05e4      	lsls	r4, r4, #23
 8024a62:	d502      	bpl.n	8024a6a <_strtod_l+0xfe>
 8024a64:	2380      	movs	r3, #128	@ 0x80
 8024a66:	061b      	lsls	r3, r3, #24
 8024a68:	431f      	orrs	r7, r3
 8024a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8024c28 <_strtod_l+0x2bc>)
 8024a6c:	423b      	tst	r3, r7
 8024a6e:	d1b8      	bne.n	80249e2 <_strtod_l+0x76>
 8024a70:	f001 fd9e 	bl	80265b0 <__errno>
 8024a74:	2322      	movs	r3, #34	@ 0x22
 8024a76:	6003      	str	r3, [r0, #0]
 8024a78:	e7b3      	b.n	80249e2 <_strtod_l+0x76>
 8024a7a:	496c      	ldr	r1, [pc, #432]	@ (8024c2c <_strtod_l+0x2c0>)
 8024a7c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024a7e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024a80:	400a      	ands	r2, r1
 8024a82:	496b      	ldr	r1, [pc, #428]	@ (8024c30 <_strtod_l+0x2c4>)
 8024a84:	185b      	adds	r3, r3, r1
 8024a86:	051b      	lsls	r3, r3, #20
 8024a88:	431a      	orrs	r2, r3
 8024a8a:	0017      	movs	r7, r2
 8024a8c:	e7e8      	b.n	8024a60 <_strtod_l+0xf4>
 8024a8e:	4f66      	ldr	r7, [pc, #408]	@ (8024c28 <_strtod_l+0x2bc>)
 8024a90:	e7e6      	b.n	8024a60 <_strtod_l+0xf4>
 8024a92:	2601      	movs	r6, #1
 8024a94:	4f67      	ldr	r7, [pc, #412]	@ (8024c34 <_strtod_l+0x2c8>)
 8024a96:	4276      	negs	r6, r6
 8024a98:	e7e2      	b.n	8024a60 <_strtod_l+0xf4>
 8024a9a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024a9c:	1c5a      	adds	r2, r3, #1
 8024a9e:	921d      	str	r2, [sp, #116]	@ 0x74
 8024aa0:	785b      	ldrb	r3, [r3, #1]
 8024aa2:	2b30      	cmp	r3, #48	@ 0x30
 8024aa4:	d0f9      	beq.n	8024a9a <_strtod_l+0x12e>
 8024aa6:	2b00      	cmp	r3, #0
 8024aa8:	d09b      	beq.n	80249e2 <_strtod_l+0x76>
 8024aaa:	2301      	movs	r3, #1
 8024aac:	930c      	str	r3, [sp, #48]	@ 0x30
 8024aae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024ab0:	220a      	movs	r2, #10
 8024ab2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024ab4:	2300      	movs	r3, #0
 8024ab6:	9310      	str	r3, [sp, #64]	@ 0x40
 8024ab8:	930d      	str	r3, [sp, #52]	@ 0x34
 8024aba:	9308      	str	r3, [sp, #32]
 8024abc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8024abe:	7804      	ldrb	r4, [r0, #0]
 8024ac0:	0023      	movs	r3, r4
 8024ac2:	3b30      	subs	r3, #48	@ 0x30
 8024ac4:	b2d9      	uxtb	r1, r3
 8024ac6:	2909      	cmp	r1, #9
 8024ac8:	d927      	bls.n	8024b1a <_strtod_l+0x1ae>
 8024aca:	2201      	movs	r2, #1
 8024acc:	495a      	ldr	r1, [pc, #360]	@ (8024c38 <_strtod_l+0x2cc>)
 8024ace:	f001 fce1 	bl	8026494 <strncmp>
 8024ad2:	2800      	cmp	r0, #0
 8024ad4:	d033      	beq.n	8024b3e <_strtod_l+0x1d2>
 8024ad6:	2000      	movs	r0, #0
 8024ad8:	0023      	movs	r3, r4
 8024ada:	4684      	mov	ip, r0
 8024adc:	9a08      	ldr	r2, [sp, #32]
 8024ade:	900e      	str	r0, [sp, #56]	@ 0x38
 8024ae0:	9206      	str	r2, [sp, #24]
 8024ae2:	2220      	movs	r2, #32
 8024ae4:	0019      	movs	r1, r3
 8024ae6:	4391      	bics	r1, r2
 8024ae8:	000a      	movs	r2, r1
 8024aea:	2100      	movs	r1, #0
 8024aec:	9107      	str	r1, [sp, #28]
 8024aee:	2a45      	cmp	r2, #69	@ 0x45
 8024af0:	d000      	beq.n	8024af4 <_strtod_l+0x188>
 8024af2:	e0cb      	b.n	8024c8c <_strtod_l+0x320>
 8024af4:	9b06      	ldr	r3, [sp, #24]
 8024af6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024af8:	4303      	orrs	r3, r0
 8024afa:	4313      	orrs	r3, r2
 8024afc:	428b      	cmp	r3, r1
 8024afe:	d08c      	beq.n	8024a1a <_strtod_l+0xae>
 8024b00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024b02:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b04:	3301      	adds	r3, #1
 8024b06:	931d      	str	r3, [sp, #116]	@ 0x74
 8024b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b0a:	785b      	ldrb	r3, [r3, #1]
 8024b0c:	2b2b      	cmp	r3, #43	@ 0x2b
 8024b0e:	d07b      	beq.n	8024c08 <_strtod_l+0x29c>
 8024b10:	000c      	movs	r4, r1
 8024b12:	2b2d      	cmp	r3, #45	@ 0x2d
 8024b14:	d17e      	bne.n	8024c14 <_strtod_l+0x2a8>
 8024b16:	2401      	movs	r4, #1
 8024b18:	e077      	b.n	8024c0a <_strtod_l+0x29e>
 8024b1a:	9908      	ldr	r1, [sp, #32]
 8024b1c:	2908      	cmp	r1, #8
 8024b1e:	dc09      	bgt.n	8024b34 <_strtod_l+0x1c8>
 8024b20:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024b22:	4351      	muls	r1, r2
 8024b24:	185b      	adds	r3, r3, r1
 8024b26:	930d      	str	r3, [sp, #52]	@ 0x34
 8024b28:	9b08      	ldr	r3, [sp, #32]
 8024b2a:	3001      	adds	r0, #1
 8024b2c:	3301      	adds	r3, #1
 8024b2e:	9308      	str	r3, [sp, #32]
 8024b30:	901d      	str	r0, [sp, #116]	@ 0x74
 8024b32:	e7c3      	b.n	8024abc <_strtod_l+0x150>
 8024b34:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024b36:	4355      	muls	r5, r2
 8024b38:	195b      	adds	r3, r3, r5
 8024b3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8024b3c:	e7f4      	b.n	8024b28 <_strtod_l+0x1bc>
 8024b3e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024b40:	1c5a      	adds	r2, r3, #1
 8024b42:	921d      	str	r2, [sp, #116]	@ 0x74
 8024b44:	9a08      	ldr	r2, [sp, #32]
 8024b46:	785b      	ldrb	r3, [r3, #1]
 8024b48:	2a00      	cmp	r2, #0
 8024b4a:	d03e      	beq.n	8024bca <_strtod_l+0x25e>
 8024b4c:	900e      	str	r0, [sp, #56]	@ 0x38
 8024b4e:	9206      	str	r2, [sp, #24]
 8024b50:	001a      	movs	r2, r3
 8024b52:	3a30      	subs	r2, #48	@ 0x30
 8024b54:	2a09      	cmp	r2, #9
 8024b56:	d912      	bls.n	8024b7e <_strtod_l+0x212>
 8024b58:	2201      	movs	r2, #1
 8024b5a:	4694      	mov	ip, r2
 8024b5c:	e7c1      	b.n	8024ae2 <_strtod_l+0x176>
 8024b5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024b60:	3001      	adds	r0, #1
 8024b62:	1c5a      	adds	r2, r3, #1
 8024b64:	921d      	str	r2, [sp, #116]	@ 0x74
 8024b66:	785b      	ldrb	r3, [r3, #1]
 8024b68:	2b30      	cmp	r3, #48	@ 0x30
 8024b6a:	d0f8      	beq.n	8024b5e <_strtod_l+0x1f2>
 8024b6c:	001a      	movs	r2, r3
 8024b6e:	3a31      	subs	r2, #49	@ 0x31
 8024b70:	2a08      	cmp	r2, #8
 8024b72:	d844      	bhi.n	8024bfe <_strtod_l+0x292>
 8024b74:	900e      	str	r0, [sp, #56]	@ 0x38
 8024b76:	2000      	movs	r0, #0
 8024b78:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024b7a:	9006      	str	r0, [sp, #24]
 8024b7c:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024b7e:	001c      	movs	r4, r3
 8024b80:	1c42      	adds	r2, r0, #1
 8024b82:	3c30      	subs	r4, #48	@ 0x30
 8024b84:	2b30      	cmp	r3, #48	@ 0x30
 8024b86:	d01a      	beq.n	8024bbe <_strtod_l+0x252>
 8024b88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024b8a:	9906      	ldr	r1, [sp, #24]
 8024b8c:	189b      	adds	r3, r3, r2
 8024b8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8024b90:	230a      	movs	r3, #10
 8024b92:	469c      	mov	ip, r3
 8024b94:	9d06      	ldr	r5, [sp, #24]
 8024b96:	1c4b      	adds	r3, r1, #1
 8024b98:	1b5d      	subs	r5, r3, r5
 8024b9a:	42aa      	cmp	r2, r5
 8024b9c:	dc17      	bgt.n	8024bce <_strtod_l+0x262>
 8024b9e:	43c3      	mvns	r3, r0
 8024ba0:	9a06      	ldr	r2, [sp, #24]
 8024ba2:	17db      	asrs	r3, r3, #31
 8024ba4:	4003      	ands	r3, r0
 8024ba6:	18d1      	adds	r1, r2, r3
 8024ba8:	3201      	adds	r2, #1
 8024baa:	18d3      	adds	r3, r2, r3
 8024bac:	9306      	str	r3, [sp, #24]
 8024bae:	2908      	cmp	r1, #8
 8024bb0:	dc1c      	bgt.n	8024bec <_strtod_l+0x280>
 8024bb2:	230a      	movs	r3, #10
 8024bb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024bb6:	4353      	muls	r3, r2
 8024bb8:	2200      	movs	r2, #0
 8024bba:	18e3      	adds	r3, r4, r3
 8024bbc:	930d      	str	r3, [sp, #52]	@ 0x34
 8024bbe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024bc0:	0010      	movs	r0, r2
 8024bc2:	1c59      	adds	r1, r3, #1
 8024bc4:	911d      	str	r1, [sp, #116]	@ 0x74
 8024bc6:	785b      	ldrb	r3, [r3, #1]
 8024bc8:	e7c2      	b.n	8024b50 <_strtod_l+0x1e4>
 8024bca:	9808      	ldr	r0, [sp, #32]
 8024bcc:	e7cc      	b.n	8024b68 <_strtod_l+0x1fc>
 8024bce:	2908      	cmp	r1, #8
 8024bd0:	dc05      	bgt.n	8024bde <_strtod_l+0x272>
 8024bd2:	4665      	mov	r5, ip
 8024bd4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024bd6:	4369      	muls	r1, r5
 8024bd8:	910d      	str	r1, [sp, #52]	@ 0x34
 8024bda:	0019      	movs	r1, r3
 8024bdc:	e7da      	b.n	8024b94 <_strtod_l+0x228>
 8024bde:	2b10      	cmp	r3, #16
 8024be0:	dcfb      	bgt.n	8024bda <_strtod_l+0x26e>
 8024be2:	4661      	mov	r1, ip
 8024be4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024be6:	434d      	muls	r5, r1
 8024be8:	9510      	str	r5, [sp, #64]	@ 0x40
 8024bea:	e7f6      	b.n	8024bda <_strtod_l+0x26e>
 8024bec:	2200      	movs	r2, #0
 8024bee:	290f      	cmp	r1, #15
 8024bf0:	dce5      	bgt.n	8024bbe <_strtod_l+0x252>
 8024bf2:	230a      	movs	r3, #10
 8024bf4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024bf6:	435d      	muls	r5, r3
 8024bf8:	1963      	adds	r3, r4, r5
 8024bfa:	9310      	str	r3, [sp, #64]	@ 0x40
 8024bfc:	e7df      	b.n	8024bbe <_strtod_l+0x252>
 8024bfe:	2200      	movs	r2, #0
 8024c00:	920e      	str	r2, [sp, #56]	@ 0x38
 8024c02:	9206      	str	r2, [sp, #24]
 8024c04:	3201      	adds	r2, #1
 8024c06:	e7a8      	b.n	8024b5a <_strtod_l+0x1ee>
 8024c08:	2400      	movs	r4, #0
 8024c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c0c:	3302      	adds	r3, #2
 8024c0e:	931d      	str	r3, [sp, #116]	@ 0x74
 8024c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c12:	789b      	ldrb	r3, [r3, #2]
 8024c14:	001a      	movs	r2, r3
 8024c16:	3a30      	subs	r2, #48	@ 0x30
 8024c18:	2a09      	cmp	r2, #9
 8024c1a:	d913      	bls.n	8024c44 <_strtod_l+0x2d8>
 8024c1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024c1e:	921d      	str	r2, [sp, #116]	@ 0x74
 8024c20:	2200      	movs	r2, #0
 8024c22:	e032      	b.n	8024c8a <_strtod_l+0x31e>
 8024c24:	0802eb4c 	.word	0x0802eb4c
 8024c28:	7ff00000 	.word	0x7ff00000
 8024c2c:	ffefffff 	.word	0xffefffff
 8024c30:	00000433 	.word	0x00000433
 8024c34:	7fffffff 	.word	0x7fffffff
 8024c38:	0802e964 	.word	0x0802e964
 8024c3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024c3e:	1c5a      	adds	r2, r3, #1
 8024c40:	921d      	str	r2, [sp, #116]	@ 0x74
 8024c42:	785b      	ldrb	r3, [r3, #1]
 8024c44:	2b30      	cmp	r3, #48	@ 0x30
 8024c46:	d0f9      	beq.n	8024c3c <_strtod_l+0x2d0>
 8024c48:	2200      	movs	r2, #0
 8024c4a:	9207      	str	r2, [sp, #28]
 8024c4c:	001a      	movs	r2, r3
 8024c4e:	3a31      	subs	r2, #49	@ 0x31
 8024c50:	2a08      	cmp	r2, #8
 8024c52:	d81b      	bhi.n	8024c8c <_strtod_l+0x320>
 8024c54:	3b30      	subs	r3, #48	@ 0x30
 8024c56:	001a      	movs	r2, r3
 8024c58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024c5a:	9307      	str	r3, [sp, #28]
 8024c5c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024c5e:	1c59      	adds	r1, r3, #1
 8024c60:	911d      	str	r1, [sp, #116]	@ 0x74
 8024c62:	785b      	ldrb	r3, [r3, #1]
 8024c64:	001d      	movs	r5, r3
 8024c66:	3d30      	subs	r5, #48	@ 0x30
 8024c68:	2d09      	cmp	r5, #9
 8024c6a:	d93a      	bls.n	8024ce2 <_strtod_l+0x376>
 8024c6c:	9d07      	ldr	r5, [sp, #28]
 8024c6e:	1b49      	subs	r1, r1, r5
 8024c70:	000d      	movs	r5, r1
 8024c72:	49b3      	ldr	r1, [pc, #716]	@ (8024f40 <_strtod_l+0x5d4>)
 8024c74:	9107      	str	r1, [sp, #28]
 8024c76:	2d08      	cmp	r5, #8
 8024c78:	dc03      	bgt.n	8024c82 <_strtod_l+0x316>
 8024c7a:	9207      	str	r2, [sp, #28]
 8024c7c:	428a      	cmp	r2, r1
 8024c7e:	dd00      	ble.n	8024c82 <_strtod_l+0x316>
 8024c80:	9107      	str	r1, [sp, #28]
 8024c82:	2c00      	cmp	r4, #0
 8024c84:	d002      	beq.n	8024c8c <_strtod_l+0x320>
 8024c86:	9a07      	ldr	r2, [sp, #28]
 8024c88:	4252      	negs	r2, r2
 8024c8a:	9207      	str	r2, [sp, #28]
 8024c8c:	9a06      	ldr	r2, [sp, #24]
 8024c8e:	2a00      	cmp	r2, #0
 8024c90:	d14b      	bne.n	8024d2a <_strtod_l+0x3be>
 8024c92:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024c94:	4310      	orrs	r0, r2
 8024c96:	d000      	beq.n	8024c9a <_strtod_l+0x32e>
 8024c98:	e6a3      	b.n	80249e2 <_strtod_l+0x76>
 8024c9a:	4662      	mov	r2, ip
 8024c9c:	2a00      	cmp	r2, #0
 8024c9e:	d000      	beq.n	8024ca2 <_strtod_l+0x336>
 8024ca0:	e6bb      	b.n	8024a1a <_strtod_l+0xae>
 8024ca2:	2b69      	cmp	r3, #105	@ 0x69
 8024ca4:	d025      	beq.n	8024cf2 <_strtod_l+0x386>
 8024ca6:	dc21      	bgt.n	8024cec <_strtod_l+0x380>
 8024ca8:	2b49      	cmp	r3, #73	@ 0x49
 8024caa:	d022      	beq.n	8024cf2 <_strtod_l+0x386>
 8024cac:	2b4e      	cmp	r3, #78	@ 0x4e
 8024cae:	d000      	beq.n	8024cb2 <_strtod_l+0x346>
 8024cb0:	e6b3      	b.n	8024a1a <_strtod_l+0xae>
 8024cb2:	49a4      	ldr	r1, [pc, #656]	@ (8024f44 <_strtod_l+0x5d8>)
 8024cb4:	a81d      	add	r0, sp, #116	@ 0x74
 8024cb6:	f002 fe21 	bl	80278fc <__match>
 8024cba:	2800      	cmp	r0, #0
 8024cbc:	d100      	bne.n	8024cc0 <_strtod_l+0x354>
 8024cbe:	e6ac      	b.n	8024a1a <_strtod_l+0xae>
 8024cc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024cc2:	781b      	ldrb	r3, [r3, #0]
 8024cc4:	2b28      	cmp	r3, #40	@ 0x28
 8024cc6:	d12a      	bne.n	8024d1e <_strtod_l+0x3b2>
 8024cc8:	499f      	ldr	r1, [pc, #636]	@ (8024f48 <_strtod_l+0x5dc>)
 8024cca:	aa20      	add	r2, sp, #128	@ 0x80
 8024ccc:	a81d      	add	r0, sp, #116	@ 0x74
 8024cce:	f002 fe29 	bl	8027924 <__hexnan>
 8024cd2:	2805      	cmp	r0, #5
 8024cd4:	d123      	bne.n	8024d1e <_strtod_l+0x3b2>
 8024cd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024cd8:	4a9c      	ldr	r2, [pc, #624]	@ (8024f4c <_strtod_l+0x5e0>)
 8024cda:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024cdc:	431a      	orrs	r2, r3
 8024cde:	0017      	movs	r7, r2
 8024ce0:	e67f      	b.n	80249e2 <_strtod_l+0x76>
 8024ce2:	210a      	movs	r1, #10
 8024ce4:	434a      	muls	r2, r1
 8024ce6:	18d2      	adds	r2, r2, r3
 8024ce8:	3a30      	subs	r2, #48	@ 0x30
 8024cea:	e7b7      	b.n	8024c5c <_strtod_l+0x2f0>
 8024cec:	2b6e      	cmp	r3, #110	@ 0x6e
 8024cee:	d0e0      	beq.n	8024cb2 <_strtod_l+0x346>
 8024cf0:	e693      	b.n	8024a1a <_strtod_l+0xae>
 8024cf2:	4997      	ldr	r1, [pc, #604]	@ (8024f50 <_strtod_l+0x5e4>)
 8024cf4:	a81d      	add	r0, sp, #116	@ 0x74
 8024cf6:	f002 fe01 	bl	80278fc <__match>
 8024cfa:	2800      	cmp	r0, #0
 8024cfc:	d100      	bne.n	8024d00 <_strtod_l+0x394>
 8024cfe:	e68c      	b.n	8024a1a <_strtod_l+0xae>
 8024d00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d02:	4994      	ldr	r1, [pc, #592]	@ (8024f54 <_strtod_l+0x5e8>)
 8024d04:	3b01      	subs	r3, #1
 8024d06:	a81d      	add	r0, sp, #116	@ 0x74
 8024d08:	931d      	str	r3, [sp, #116]	@ 0x74
 8024d0a:	f002 fdf7 	bl	80278fc <__match>
 8024d0e:	2800      	cmp	r0, #0
 8024d10:	d102      	bne.n	8024d18 <_strtod_l+0x3ac>
 8024d12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d14:	3301      	adds	r3, #1
 8024d16:	931d      	str	r3, [sp, #116]	@ 0x74
 8024d18:	2600      	movs	r6, #0
 8024d1a:	4f8c      	ldr	r7, [pc, #560]	@ (8024f4c <_strtod_l+0x5e0>)
 8024d1c:	e661      	b.n	80249e2 <_strtod_l+0x76>
 8024d1e:	488e      	ldr	r0, [pc, #568]	@ (8024f58 <_strtod_l+0x5ec>)
 8024d20:	f001 fc88 	bl	8026634 <nan>
 8024d24:	0006      	movs	r6, r0
 8024d26:	000f      	movs	r7, r1
 8024d28:	e65b      	b.n	80249e2 <_strtod_l+0x76>
 8024d2a:	9b07      	ldr	r3, [sp, #28]
 8024d2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024d2e:	1a9b      	subs	r3, r3, r2
 8024d30:	930c      	str	r3, [sp, #48]	@ 0x30
 8024d32:	9b08      	ldr	r3, [sp, #32]
 8024d34:	2b00      	cmp	r3, #0
 8024d36:	d101      	bne.n	8024d3c <_strtod_l+0x3d0>
 8024d38:	9b06      	ldr	r3, [sp, #24]
 8024d3a:	9308      	str	r3, [sp, #32]
 8024d3c:	9c06      	ldr	r4, [sp, #24]
 8024d3e:	2c10      	cmp	r4, #16
 8024d40:	dd00      	ble.n	8024d44 <_strtod_l+0x3d8>
 8024d42:	2410      	movs	r4, #16
 8024d44:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024d46:	f7de fd81 	bl	800384c <__aeabi_ui2d>
 8024d4a:	9b06      	ldr	r3, [sp, #24]
 8024d4c:	0006      	movs	r6, r0
 8024d4e:	000f      	movs	r7, r1
 8024d50:	2b09      	cmp	r3, #9
 8024d52:	dc13      	bgt.n	8024d7c <_strtod_l+0x410>
 8024d54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024d56:	2b00      	cmp	r3, #0
 8024d58:	d100      	bne.n	8024d5c <_strtod_l+0x3f0>
 8024d5a:	e642      	b.n	80249e2 <_strtod_l+0x76>
 8024d5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024d5e:	2b00      	cmp	r3, #0
 8024d60:	dc00      	bgt.n	8024d64 <_strtod_l+0x3f8>
 8024d62:	e07e      	b.n	8024e62 <_strtod_l+0x4f6>
 8024d64:	2b16      	cmp	r3, #22
 8024d66:	dc63      	bgt.n	8024e30 <_strtod_l+0x4c4>
 8024d68:	497c      	ldr	r1, [pc, #496]	@ (8024f5c <_strtod_l+0x5f0>)
 8024d6a:	00db      	lsls	r3, r3, #3
 8024d6c:	18c9      	adds	r1, r1, r3
 8024d6e:	0032      	movs	r2, r6
 8024d70:	6808      	ldr	r0, [r1, #0]
 8024d72:	6849      	ldr	r1, [r1, #4]
 8024d74:	003b      	movs	r3, r7
 8024d76:	f7dd fded 	bl	8002954 <__aeabi_dmul>
 8024d7a:	e7d3      	b.n	8024d24 <_strtod_l+0x3b8>
 8024d7c:	0022      	movs	r2, r4
 8024d7e:	4b77      	ldr	r3, [pc, #476]	@ (8024f5c <_strtod_l+0x5f0>)
 8024d80:	3a09      	subs	r2, #9
 8024d82:	00d2      	lsls	r2, r2, #3
 8024d84:	189b      	adds	r3, r3, r2
 8024d86:	681a      	ldr	r2, [r3, #0]
 8024d88:	685b      	ldr	r3, [r3, #4]
 8024d8a:	f7dd fde3 	bl	8002954 <__aeabi_dmul>
 8024d8e:	0006      	movs	r6, r0
 8024d90:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024d92:	000f      	movs	r7, r1
 8024d94:	f7de fd5a 	bl	800384c <__aeabi_ui2d>
 8024d98:	000b      	movs	r3, r1
 8024d9a:	0002      	movs	r2, r0
 8024d9c:	0039      	movs	r1, r7
 8024d9e:	0030      	movs	r0, r6
 8024da0:	f7dc fdd8 	bl	8001954 <__aeabi_dadd>
 8024da4:	9b06      	ldr	r3, [sp, #24]
 8024da6:	0006      	movs	r6, r0
 8024da8:	000f      	movs	r7, r1
 8024daa:	2b0f      	cmp	r3, #15
 8024dac:	ddd2      	ble.n	8024d54 <_strtod_l+0x3e8>
 8024dae:	9b06      	ldr	r3, [sp, #24]
 8024db0:	1b1c      	subs	r4, r3, r4
 8024db2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024db4:	18e4      	adds	r4, r4, r3
 8024db6:	2c00      	cmp	r4, #0
 8024db8:	dc00      	bgt.n	8024dbc <_strtod_l+0x450>
 8024dba:	e09b      	b.n	8024ef4 <_strtod_l+0x588>
 8024dbc:	220f      	movs	r2, #15
 8024dbe:	0023      	movs	r3, r4
 8024dc0:	4013      	ands	r3, r2
 8024dc2:	4214      	tst	r4, r2
 8024dc4:	d00a      	beq.n	8024ddc <_strtod_l+0x470>
 8024dc6:	4965      	ldr	r1, [pc, #404]	@ (8024f5c <_strtod_l+0x5f0>)
 8024dc8:	00db      	lsls	r3, r3, #3
 8024dca:	18c9      	adds	r1, r1, r3
 8024dcc:	0032      	movs	r2, r6
 8024dce:	6808      	ldr	r0, [r1, #0]
 8024dd0:	6849      	ldr	r1, [r1, #4]
 8024dd2:	003b      	movs	r3, r7
 8024dd4:	f7dd fdbe 	bl	8002954 <__aeabi_dmul>
 8024dd8:	0006      	movs	r6, r0
 8024dda:	000f      	movs	r7, r1
 8024ddc:	230f      	movs	r3, #15
 8024dde:	439c      	bics	r4, r3
 8024de0:	d073      	beq.n	8024eca <_strtod_l+0x55e>
 8024de2:	3326      	adds	r3, #38	@ 0x26
 8024de4:	33ff      	adds	r3, #255	@ 0xff
 8024de6:	429c      	cmp	r4, r3
 8024de8:	dd4b      	ble.n	8024e82 <_strtod_l+0x516>
 8024dea:	2300      	movs	r3, #0
 8024dec:	9306      	str	r3, [sp, #24]
 8024dee:	9307      	str	r3, [sp, #28]
 8024df0:	930d      	str	r3, [sp, #52]	@ 0x34
 8024df2:	9308      	str	r3, [sp, #32]
 8024df4:	2322      	movs	r3, #34	@ 0x22
 8024df6:	2600      	movs	r6, #0
 8024df8:	9a05      	ldr	r2, [sp, #20]
 8024dfa:	4f54      	ldr	r7, [pc, #336]	@ (8024f4c <_strtod_l+0x5e0>)
 8024dfc:	6013      	str	r3, [r2, #0]
 8024dfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024e00:	42b3      	cmp	r3, r6
 8024e02:	d100      	bne.n	8024e06 <_strtod_l+0x49a>
 8024e04:	e5ed      	b.n	80249e2 <_strtod_l+0x76>
 8024e06:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024e08:	9805      	ldr	r0, [sp, #20]
 8024e0a:	f002 ff45 	bl	8027c98 <_Bfree>
 8024e0e:	9908      	ldr	r1, [sp, #32]
 8024e10:	9805      	ldr	r0, [sp, #20]
 8024e12:	f002 ff41 	bl	8027c98 <_Bfree>
 8024e16:	9907      	ldr	r1, [sp, #28]
 8024e18:	9805      	ldr	r0, [sp, #20]
 8024e1a:	f002 ff3d 	bl	8027c98 <_Bfree>
 8024e1e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024e20:	9805      	ldr	r0, [sp, #20]
 8024e22:	f002 ff39 	bl	8027c98 <_Bfree>
 8024e26:	9906      	ldr	r1, [sp, #24]
 8024e28:	9805      	ldr	r0, [sp, #20]
 8024e2a:	f002 ff35 	bl	8027c98 <_Bfree>
 8024e2e:	e5d8      	b.n	80249e2 <_strtod_l+0x76>
 8024e30:	2325      	movs	r3, #37	@ 0x25
 8024e32:	9a06      	ldr	r2, [sp, #24]
 8024e34:	1a9b      	subs	r3, r3, r2
 8024e36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024e38:	4293      	cmp	r3, r2
 8024e3a:	dbb8      	blt.n	8024dae <_strtod_l+0x442>
 8024e3c:	240f      	movs	r4, #15
 8024e3e:	9b06      	ldr	r3, [sp, #24]
 8024e40:	4d46      	ldr	r5, [pc, #280]	@ (8024f5c <_strtod_l+0x5f0>)
 8024e42:	1ae4      	subs	r4, r4, r3
 8024e44:	00e1      	lsls	r1, r4, #3
 8024e46:	1869      	adds	r1, r5, r1
 8024e48:	0032      	movs	r2, r6
 8024e4a:	6808      	ldr	r0, [r1, #0]
 8024e4c:	6849      	ldr	r1, [r1, #4]
 8024e4e:	003b      	movs	r3, r7
 8024e50:	f7dd fd80 	bl	8002954 <__aeabi_dmul>
 8024e54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e56:	1b1c      	subs	r4, r3, r4
 8024e58:	00e4      	lsls	r4, r4, #3
 8024e5a:	192d      	adds	r5, r5, r4
 8024e5c:	682a      	ldr	r2, [r5, #0]
 8024e5e:	686b      	ldr	r3, [r5, #4]
 8024e60:	e789      	b.n	8024d76 <_strtod_l+0x40a>
 8024e62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e64:	3316      	adds	r3, #22
 8024e66:	dba2      	blt.n	8024dae <_strtod_l+0x442>
 8024e68:	9907      	ldr	r1, [sp, #28]
 8024e6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8024f5c <_strtod_l+0x5f0>)
 8024e6e:	1a52      	subs	r2, r2, r1
 8024e70:	00d2      	lsls	r2, r2, #3
 8024e72:	189b      	adds	r3, r3, r2
 8024e74:	0030      	movs	r0, r6
 8024e76:	681a      	ldr	r2, [r3, #0]
 8024e78:	685b      	ldr	r3, [r3, #4]
 8024e7a:	0039      	movs	r1, r7
 8024e7c:	f7dd f930 	bl	80020e0 <__aeabi_ddiv>
 8024e80:	e750      	b.n	8024d24 <_strtod_l+0x3b8>
 8024e82:	2300      	movs	r3, #0
 8024e84:	0030      	movs	r0, r6
 8024e86:	0039      	movs	r1, r7
 8024e88:	4d35      	ldr	r5, [pc, #212]	@ (8024f60 <_strtod_l+0x5f4>)
 8024e8a:	1124      	asrs	r4, r4, #4
 8024e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8024e8e:	2c01      	cmp	r4, #1
 8024e90:	dc1e      	bgt.n	8024ed0 <_strtod_l+0x564>
 8024e92:	2b00      	cmp	r3, #0
 8024e94:	d001      	beq.n	8024e9a <_strtod_l+0x52e>
 8024e96:	0006      	movs	r6, r0
 8024e98:	000f      	movs	r7, r1
 8024e9a:	4b32      	ldr	r3, [pc, #200]	@ (8024f64 <_strtod_l+0x5f8>)
 8024e9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024e9e:	18ff      	adds	r7, r7, r3
 8024ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8024f60 <_strtod_l+0x5f4>)
 8024ea2:	00d5      	lsls	r5, r2, #3
 8024ea4:	195d      	adds	r5, r3, r5
 8024ea6:	0032      	movs	r2, r6
 8024ea8:	6828      	ldr	r0, [r5, #0]
 8024eaa:	6869      	ldr	r1, [r5, #4]
 8024eac:	003b      	movs	r3, r7
 8024eae:	f7dd fd51 	bl	8002954 <__aeabi_dmul>
 8024eb2:	4b26      	ldr	r3, [pc, #152]	@ (8024f4c <_strtod_l+0x5e0>)
 8024eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8024f68 <_strtod_l+0x5fc>)
 8024eb6:	0006      	movs	r6, r0
 8024eb8:	400b      	ands	r3, r1
 8024eba:	4293      	cmp	r3, r2
 8024ebc:	d895      	bhi.n	8024dea <_strtod_l+0x47e>
 8024ebe:	4a2b      	ldr	r2, [pc, #172]	@ (8024f6c <_strtod_l+0x600>)
 8024ec0:	4293      	cmp	r3, r2
 8024ec2:	d913      	bls.n	8024eec <_strtod_l+0x580>
 8024ec4:	2601      	movs	r6, #1
 8024ec6:	4f2a      	ldr	r7, [pc, #168]	@ (8024f70 <_strtod_l+0x604>)
 8024ec8:	4276      	negs	r6, r6
 8024eca:	2300      	movs	r3, #0
 8024ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ece:	e086      	b.n	8024fde <_strtod_l+0x672>
 8024ed0:	2201      	movs	r2, #1
 8024ed2:	4214      	tst	r4, r2
 8024ed4:	d004      	beq.n	8024ee0 <_strtod_l+0x574>
 8024ed6:	682a      	ldr	r2, [r5, #0]
 8024ed8:	686b      	ldr	r3, [r5, #4]
 8024eda:	f7dd fd3b 	bl	8002954 <__aeabi_dmul>
 8024ede:	2301      	movs	r3, #1
 8024ee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024ee2:	1064      	asrs	r4, r4, #1
 8024ee4:	3201      	adds	r2, #1
 8024ee6:	9209      	str	r2, [sp, #36]	@ 0x24
 8024ee8:	3508      	adds	r5, #8
 8024eea:	e7d0      	b.n	8024e8e <_strtod_l+0x522>
 8024eec:	23d4      	movs	r3, #212	@ 0xd4
 8024eee:	049b      	lsls	r3, r3, #18
 8024ef0:	18cf      	adds	r7, r1, r3
 8024ef2:	e7ea      	b.n	8024eca <_strtod_l+0x55e>
 8024ef4:	2c00      	cmp	r4, #0
 8024ef6:	d0e8      	beq.n	8024eca <_strtod_l+0x55e>
 8024ef8:	4264      	negs	r4, r4
 8024efa:	230f      	movs	r3, #15
 8024efc:	0022      	movs	r2, r4
 8024efe:	401a      	ands	r2, r3
 8024f00:	421c      	tst	r4, r3
 8024f02:	d00a      	beq.n	8024f1a <_strtod_l+0x5ae>
 8024f04:	4b15      	ldr	r3, [pc, #84]	@ (8024f5c <_strtod_l+0x5f0>)
 8024f06:	00d2      	lsls	r2, r2, #3
 8024f08:	189b      	adds	r3, r3, r2
 8024f0a:	0030      	movs	r0, r6
 8024f0c:	681a      	ldr	r2, [r3, #0]
 8024f0e:	685b      	ldr	r3, [r3, #4]
 8024f10:	0039      	movs	r1, r7
 8024f12:	f7dd f8e5 	bl	80020e0 <__aeabi_ddiv>
 8024f16:	0006      	movs	r6, r0
 8024f18:	000f      	movs	r7, r1
 8024f1a:	1124      	asrs	r4, r4, #4
 8024f1c:	d0d5      	beq.n	8024eca <_strtod_l+0x55e>
 8024f1e:	2c1f      	cmp	r4, #31
 8024f20:	dd28      	ble.n	8024f74 <_strtod_l+0x608>
 8024f22:	2300      	movs	r3, #0
 8024f24:	9306      	str	r3, [sp, #24]
 8024f26:	9307      	str	r3, [sp, #28]
 8024f28:	930d      	str	r3, [sp, #52]	@ 0x34
 8024f2a:	9308      	str	r3, [sp, #32]
 8024f2c:	2322      	movs	r3, #34	@ 0x22
 8024f2e:	9a05      	ldr	r2, [sp, #20]
 8024f30:	2600      	movs	r6, #0
 8024f32:	6013      	str	r3, [r2, #0]
 8024f34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024f36:	2700      	movs	r7, #0
 8024f38:	2b00      	cmp	r3, #0
 8024f3a:	d000      	beq.n	8024f3e <_strtod_l+0x5d2>
 8024f3c:	e763      	b.n	8024e06 <_strtod_l+0x49a>
 8024f3e:	e550      	b.n	80249e2 <_strtod_l+0x76>
 8024f40:	00004e1f 	.word	0x00004e1f
 8024f44:	0802e973 	.word	0x0802e973
 8024f48:	0802eb38 	.word	0x0802eb38
 8024f4c:	7ff00000 	.word	0x7ff00000
 8024f50:	0802e96b 	.word	0x0802e96b
 8024f54:	0802e9a5 	.word	0x0802e9a5
 8024f58:	0802eb34 	.word	0x0802eb34
 8024f5c:	0802ecc0 	.word	0x0802ecc0
 8024f60:	0802ec98 	.word	0x0802ec98
 8024f64:	fcb00000 	.word	0xfcb00000
 8024f68:	7ca00000 	.word	0x7ca00000
 8024f6c:	7c900000 	.word	0x7c900000
 8024f70:	7fefffff 	.word	0x7fefffff
 8024f74:	2310      	movs	r3, #16
 8024f76:	0022      	movs	r2, r4
 8024f78:	401a      	ands	r2, r3
 8024f7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8024f7c:	421c      	tst	r4, r3
 8024f7e:	d001      	beq.n	8024f84 <_strtod_l+0x618>
 8024f80:	335a      	adds	r3, #90	@ 0x5a
 8024f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8024f84:	0030      	movs	r0, r6
 8024f86:	0039      	movs	r1, r7
 8024f88:	2300      	movs	r3, #0
 8024f8a:	4dc0      	ldr	r5, [pc, #768]	@ (802528c <_strtod_l+0x920>)
 8024f8c:	2201      	movs	r2, #1
 8024f8e:	4214      	tst	r4, r2
 8024f90:	d004      	beq.n	8024f9c <_strtod_l+0x630>
 8024f92:	682a      	ldr	r2, [r5, #0]
 8024f94:	686b      	ldr	r3, [r5, #4]
 8024f96:	f7dd fcdd 	bl	8002954 <__aeabi_dmul>
 8024f9a:	2301      	movs	r3, #1
 8024f9c:	1064      	asrs	r4, r4, #1
 8024f9e:	3508      	adds	r5, #8
 8024fa0:	2c00      	cmp	r4, #0
 8024fa2:	d1f3      	bne.n	8024f8c <_strtod_l+0x620>
 8024fa4:	2b00      	cmp	r3, #0
 8024fa6:	d001      	beq.n	8024fac <_strtod_l+0x640>
 8024fa8:	0006      	movs	r6, r0
 8024faa:	000f      	movs	r7, r1
 8024fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024fae:	2b00      	cmp	r3, #0
 8024fb0:	d00d      	beq.n	8024fce <_strtod_l+0x662>
 8024fb2:	236b      	movs	r3, #107	@ 0x6b
 8024fb4:	007a      	lsls	r2, r7, #1
 8024fb6:	0d52      	lsrs	r2, r2, #21
 8024fb8:	0039      	movs	r1, r7
 8024fba:	1a9b      	subs	r3, r3, r2
 8024fbc:	2b00      	cmp	r3, #0
 8024fbe:	dd06      	ble.n	8024fce <_strtod_l+0x662>
 8024fc0:	2b1f      	cmp	r3, #31
 8024fc2:	dd5c      	ble.n	802507e <_strtod_l+0x712>
 8024fc4:	2600      	movs	r6, #0
 8024fc6:	2b34      	cmp	r3, #52	@ 0x34
 8024fc8:	dd52      	ble.n	8025070 <_strtod_l+0x704>
 8024fca:	27dc      	movs	r7, #220	@ 0xdc
 8024fcc:	04bf      	lsls	r7, r7, #18
 8024fce:	2200      	movs	r2, #0
 8024fd0:	2300      	movs	r3, #0
 8024fd2:	0030      	movs	r0, r6
 8024fd4:	0039      	movs	r1, r7
 8024fd6:	f7db fa6b 	bl	80004b0 <__aeabi_dcmpeq>
 8024fda:	2800      	cmp	r0, #0
 8024fdc:	d1a1      	bne.n	8024f22 <_strtod_l+0x5b6>
 8024fde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024fe0:	9a08      	ldr	r2, [sp, #32]
 8024fe2:	9300      	str	r3, [sp, #0]
 8024fe4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024fe6:	9b06      	ldr	r3, [sp, #24]
 8024fe8:	9805      	ldr	r0, [sp, #20]
 8024fea:	f002 febd 	bl	8027d68 <__s2b>
 8024fee:	900d      	str	r0, [sp, #52]	@ 0x34
 8024ff0:	2800      	cmp	r0, #0
 8024ff2:	d100      	bne.n	8024ff6 <_strtod_l+0x68a>
 8024ff4:	e6f9      	b.n	8024dea <_strtod_l+0x47e>
 8024ff6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ff8:	9907      	ldr	r1, [sp, #28]
 8024ffa:	43db      	mvns	r3, r3
 8024ffc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024ffe:	17db      	asrs	r3, r3, #31
 8025000:	1a52      	subs	r2, r2, r1
 8025002:	9214      	str	r2, [sp, #80]	@ 0x50
 8025004:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025006:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8025008:	17d2      	asrs	r2, r2, #31
 802500a:	4011      	ands	r1, r2
 802500c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802500e:	9114      	str	r1, [sp, #80]	@ 0x50
 8025010:	401a      	ands	r2, r3
 8025012:	2300      	movs	r3, #0
 8025014:	921a      	str	r2, [sp, #104]	@ 0x68
 8025016:	9306      	str	r3, [sp, #24]
 8025018:	9307      	str	r3, [sp, #28]
 802501a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802501c:	9805      	ldr	r0, [sp, #20]
 802501e:	6859      	ldr	r1, [r3, #4]
 8025020:	f002 fdf6 	bl	8027c10 <_Balloc>
 8025024:	9008      	str	r0, [sp, #32]
 8025026:	2800      	cmp	r0, #0
 8025028:	d100      	bne.n	802502c <_strtod_l+0x6c0>
 802502a:	e6e3      	b.n	8024df4 <_strtod_l+0x488>
 802502c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802502e:	300c      	adds	r0, #12
 8025030:	0019      	movs	r1, r3
 8025032:	691a      	ldr	r2, [r3, #16]
 8025034:	310c      	adds	r1, #12
 8025036:	3202      	adds	r2, #2
 8025038:	0092      	lsls	r2, r2, #2
 802503a:	f001 faf1 	bl	8026620 <memcpy>
 802503e:	ab20      	add	r3, sp, #128	@ 0x80
 8025040:	9301      	str	r3, [sp, #4]
 8025042:	ab1f      	add	r3, sp, #124	@ 0x7c
 8025044:	9300      	str	r3, [sp, #0]
 8025046:	0032      	movs	r2, r6
 8025048:	003b      	movs	r3, r7
 802504a:	9805      	ldr	r0, [sp, #20]
 802504c:	9610      	str	r6, [sp, #64]	@ 0x40
 802504e:	9711      	str	r7, [sp, #68]	@ 0x44
 8025050:	f003 f9d2 	bl	80283f8 <__d2b>
 8025054:	901e      	str	r0, [sp, #120]	@ 0x78
 8025056:	2800      	cmp	r0, #0
 8025058:	d100      	bne.n	802505c <_strtod_l+0x6f0>
 802505a:	e6cb      	b.n	8024df4 <_strtod_l+0x488>
 802505c:	2101      	movs	r1, #1
 802505e:	9805      	ldr	r0, [sp, #20]
 8025060:	f002 ff1e 	bl	8027ea0 <__i2b>
 8025064:	9007      	str	r0, [sp, #28]
 8025066:	2800      	cmp	r0, #0
 8025068:	d10e      	bne.n	8025088 <_strtod_l+0x71c>
 802506a:	2300      	movs	r3, #0
 802506c:	9307      	str	r3, [sp, #28]
 802506e:	e6c1      	b.n	8024df4 <_strtod_l+0x488>
 8025070:	234b      	movs	r3, #75	@ 0x4b
 8025072:	1a9a      	subs	r2, r3, r2
 8025074:	3b4c      	subs	r3, #76	@ 0x4c
 8025076:	4093      	lsls	r3, r2
 8025078:	4019      	ands	r1, r3
 802507a:	000f      	movs	r7, r1
 802507c:	e7a7      	b.n	8024fce <_strtod_l+0x662>
 802507e:	2201      	movs	r2, #1
 8025080:	4252      	negs	r2, r2
 8025082:	409a      	lsls	r2, r3
 8025084:	4016      	ands	r6, r2
 8025086:	e7a2      	b.n	8024fce <_strtod_l+0x662>
 8025088:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802508a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802508c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802508e:	1ad4      	subs	r4, r2, r3
 8025090:	2b00      	cmp	r3, #0
 8025092:	db01      	blt.n	8025098 <_strtod_l+0x72c>
 8025094:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8025096:	195d      	adds	r5, r3, r5
 8025098:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802509a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802509c:	1a5b      	subs	r3, r3, r1
 802509e:	2136      	movs	r1, #54	@ 0x36
 80250a0:	189b      	adds	r3, r3, r2
 80250a2:	1a8a      	subs	r2, r1, r2
 80250a4:	497a      	ldr	r1, [pc, #488]	@ (8025290 <_strtod_l+0x924>)
 80250a6:	2001      	movs	r0, #1
 80250a8:	468c      	mov	ip, r1
 80250aa:	2100      	movs	r1, #0
 80250ac:	3b01      	subs	r3, #1
 80250ae:	9115      	str	r1, [sp, #84]	@ 0x54
 80250b0:	9016      	str	r0, [sp, #88]	@ 0x58
 80250b2:	4563      	cmp	r3, ip
 80250b4:	da06      	bge.n	80250c4 <_strtod_l+0x758>
 80250b6:	4661      	mov	r1, ip
 80250b8:	1ac9      	subs	r1, r1, r3
 80250ba:	1a52      	subs	r2, r2, r1
 80250bc:	291f      	cmp	r1, #31
 80250be:	dc3f      	bgt.n	8025140 <_strtod_l+0x7d4>
 80250c0:	4088      	lsls	r0, r1
 80250c2:	9016      	str	r0, [sp, #88]	@ 0x58
 80250c4:	18ab      	adds	r3, r5, r2
 80250c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80250c8:	18a4      	adds	r4, r4, r2
 80250ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80250cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80250ce:	191c      	adds	r4, r3, r4
 80250d0:	002b      	movs	r3, r5
 80250d2:	4295      	cmp	r5, r2
 80250d4:	dd00      	ble.n	80250d8 <_strtod_l+0x76c>
 80250d6:	0013      	movs	r3, r2
 80250d8:	42a3      	cmp	r3, r4
 80250da:	dd00      	ble.n	80250de <_strtod_l+0x772>
 80250dc:	0023      	movs	r3, r4
 80250de:	2b00      	cmp	r3, #0
 80250e0:	dd04      	ble.n	80250ec <_strtod_l+0x780>
 80250e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80250e4:	1ae4      	subs	r4, r4, r3
 80250e6:	1ad2      	subs	r2, r2, r3
 80250e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80250ea:	1aed      	subs	r5, r5, r3
 80250ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80250ee:	2b00      	cmp	r3, #0
 80250f0:	dd16      	ble.n	8025120 <_strtod_l+0x7b4>
 80250f2:	001a      	movs	r2, r3
 80250f4:	9907      	ldr	r1, [sp, #28]
 80250f6:	9805      	ldr	r0, [sp, #20]
 80250f8:	f002 ff94 	bl	8028024 <__pow5mult>
 80250fc:	9007      	str	r0, [sp, #28]
 80250fe:	2800      	cmp	r0, #0
 8025100:	d0b3      	beq.n	802506a <_strtod_l+0x6fe>
 8025102:	0001      	movs	r1, r0
 8025104:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8025106:	9805      	ldr	r0, [sp, #20]
 8025108:	f002 fee2 	bl	8027ed0 <__multiply>
 802510c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802510e:	2800      	cmp	r0, #0
 8025110:	d100      	bne.n	8025114 <_strtod_l+0x7a8>
 8025112:	e66f      	b.n	8024df4 <_strtod_l+0x488>
 8025114:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025116:	9805      	ldr	r0, [sp, #20]
 8025118:	f002 fdbe 	bl	8027c98 <_Bfree>
 802511c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802511e:	931e      	str	r3, [sp, #120]	@ 0x78
 8025120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025122:	2b00      	cmp	r3, #0
 8025124:	dc12      	bgt.n	802514c <_strtod_l+0x7e0>
 8025126:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025128:	2b00      	cmp	r3, #0
 802512a:	dd18      	ble.n	802515e <_strtod_l+0x7f2>
 802512c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802512e:	9908      	ldr	r1, [sp, #32]
 8025130:	9805      	ldr	r0, [sp, #20]
 8025132:	f002 ff77 	bl	8028024 <__pow5mult>
 8025136:	9008      	str	r0, [sp, #32]
 8025138:	2800      	cmp	r0, #0
 802513a:	d110      	bne.n	802515e <_strtod_l+0x7f2>
 802513c:	2300      	movs	r3, #0
 802513e:	e658      	b.n	8024df2 <_strtod_l+0x486>
 8025140:	4954      	ldr	r1, [pc, #336]	@ (8025294 <_strtod_l+0x928>)
 8025142:	1acb      	subs	r3, r1, r3
 8025144:	0001      	movs	r1, r0
 8025146:	4099      	lsls	r1, r3
 8025148:	9115      	str	r1, [sp, #84]	@ 0x54
 802514a:	e7ba      	b.n	80250c2 <_strtod_l+0x756>
 802514c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802514e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025150:	9805      	ldr	r0, [sp, #20]
 8025152:	f002 ffc3 	bl	80280dc <__lshift>
 8025156:	901e      	str	r0, [sp, #120]	@ 0x78
 8025158:	2800      	cmp	r0, #0
 802515a:	d1e4      	bne.n	8025126 <_strtod_l+0x7ba>
 802515c:	e64a      	b.n	8024df4 <_strtod_l+0x488>
 802515e:	2c00      	cmp	r4, #0
 8025160:	dd07      	ble.n	8025172 <_strtod_l+0x806>
 8025162:	0022      	movs	r2, r4
 8025164:	9908      	ldr	r1, [sp, #32]
 8025166:	9805      	ldr	r0, [sp, #20]
 8025168:	f002 ffb8 	bl	80280dc <__lshift>
 802516c:	9008      	str	r0, [sp, #32]
 802516e:	2800      	cmp	r0, #0
 8025170:	d0e4      	beq.n	802513c <_strtod_l+0x7d0>
 8025172:	2d00      	cmp	r5, #0
 8025174:	dd08      	ble.n	8025188 <_strtod_l+0x81c>
 8025176:	002a      	movs	r2, r5
 8025178:	9907      	ldr	r1, [sp, #28]
 802517a:	9805      	ldr	r0, [sp, #20]
 802517c:	f002 ffae 	bl	80280dc <__lshift>
 8025180:	9007      	str	r0, [sp, #28]
 8025182:	2800      	cmp	r0, #0
 8025184:	d100      	bne.n	8025188 <_strtod_l+0x81c>
 8025186:	e635      	b.n	8024df4 <_strtod_l+0x488>
 8025188:	9a08      	ldr	r2, [sp, #32]
 802518a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802518c:	9805      	ldr	r0, [sp, #20]
 802518e:	f003 f82d 	bl	80281ec <__mdiff>
 8025192:	9006      	str	r0, [sp, #24]
 8025194:	2800      	cmp	r0, #0
 8025196:	d100      	bne.n	802519a <_strtod_l+0x82e>
 8025198:	e62c      	b.n	8024df4 <_strtod_l+0x488>
 802519a:	68c3      	ldr	r3, [r0, #12]
 802519c:	9907      	ldr	r1, [sp, #28]
 802519e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80251a0:	2300      	movs	r3, #0
 80251a2:	60c3      	str	r3, [r0, #12]
 80251a4:	f003 f806 	bl	80281b4 <__mcmp>
 80251a8:	2800      	cmp	r0, #0
 80251aa:	da3b      	bge.n	8025224 <_strtod_l+0x8b8>
 80251ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80251ae:	4333      	orrs	r3, r6
 80251b0:	d167      	bne.n	8025282 <_strtod_l+0x916>
 80251b2:	033b      	lsls	r3, r7, #12
 80251b4:	d165      	bne.n	8025282 <_strtod_l+0x916>
 80251b6:	22d6      	movs	r2, #214	@ 0xd6
 80251b8:	4b37      	ldr	r3, [pc, #220]	@ (8025298 <_strtod_l+0x92c>)
 80251ba:	04d2      	lsls	r2, r2, #19
 80251bc:	403b      	ands	r3, r7
 80251be:	4293      	cmp	r3, r2
 80251c0:	d95f      	bls.n	8025282 <_strtod_l+0x916>
 80251c2:	9b06      	ldr	r3, [sp, #24]
 80251c4:	695b      	ldr	r3, [r3, #20]
 80251c6:	2b00      	cmp	r3, #0
 80251c8:	d103      	bne.n	80251d2 <_strtod_l+0x866>
 80251ca:	9b06      	ldr	r3, [sp, #24]
 80251cc:	691b      	ldr	r3, [r3, #16]
 80251ce:	2b01      	cmp	r3, #1
 80251d0:	dd57      	ble.n	8025282 <_strtod_l+0x916>
 80251d2:	9906      	ldr	r1, [sp, #24]
 80251d4:	2201      	movs	r2, #1
 80251d6:	9805      	ldr	r0, [sp, #20]
 80251d8:	f002 ff80 	bl	80280dc <__lshift>
 80251dc:	9907      	ldr	r1, [sp, #28]
 80251de:	9006      	str	r0, [sp, #24]
 80251e0:	f002 ffe8 	bl	80281b4 <__mcmp>
 80251e4:	2800      	cmp	r0, #0
 80251e6:	dd4c      	ble.n	8025282 <_strtod_l+0x916>
 80251e8:	4b2b      	ldr	r3, [pc, #172]	@ (8025298 <_strtod_l+0x92c>)
 80251ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80251ec:	403b      	ands	r3, r7
 80251ee:	2a00      	cmp	r2, #0
 80251f0:	d074      	beq.n	80252dc <_strtod_l+0x970>
 80251f2:	22d6      	movs	r2, #214	@ 0xd6
 80251f4:	04d2      	lsls	r2, r2, #19
 80251f6:	4293      	cmp	r3, r2
 80251f8:	d870      	bhi.n	80252dc <_strtod_l+0x970>
 80251fa:	22dc      	movs	r2, #220	@ 0xdc
 80251fc:	0492      	lsls	r2, r2, #18
 80251fe:	4293      	cmp	r3, r2
 8025200:	d800      	bhi.n	8025204 <_strtod_l+0x898>
 8025202:	e693      	b.n	8024f2c <_strtod_l+0x5c0>
 8025204:	0030      	movs	r0, r6
 8025206:	0039      	movs	r1, r7
 8025208:	4b24      	ldr	r3, [pc, #144]	@ (802529c <_strtod_l+0x930>)
 802520a:	2200      	movs	r2, #0
 802520c:	f7dd fba2 	bl	8002954 <__aeabi_dmul>
 8025210:	4b21      	ldr	r3, [pc, #132]	@ (8025298 <_strtod_l+0x92c>)
 8025212:	0006      	movs	r6, r0
 8025214:	000f      	movs	r7, r1
 8025216:	420b      	tst	r3, r1
 8025218:	d000      	beq.n	802521c <_strtod_l+0x8b0>
 802521a:	e5f4      	b.n	8024e06 <_strtod_l+0x49a>
 802521c:	2322      	movs	r3, #34	@ 0x22
 802521e:	9a05      	ldr	r2, [sp, #20]
 8025220:	6013      	str	r3, [r2, #0]
 8025222:	e5f0      	b.n	8024e06 <_strtod_l+0x49a>
 8025224:	970e      	str	r7, [sp, #56]	@ 0x38
 8025226:	2800      	cmp	r0, #0
 8025228:	d175      	bne.n	8025316 <_strtod_l+0x9aa>
 802522a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802522c:	033b      	lsls	r3, r7, #12
 802522e:	0b1b      	lsrs	r3, r3, #12
 8025230:	2a00      	cmp	r2, #0
 8025232:	d039      	beq.n	80252a8 <_strtod_l+0x93c>
 8025234:	4a1a      	ldr	r2, [pc, #104]	@ (80252a0 <_strtod_l+0x934>)
 8025236:	4293      	cmp	r3, r2
 8025238:	d138      	bne.n	80252ac <_strtod_l+0x940>
 802523a:	2101      	movs	r1, #1
 802523c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802523e:	4249      	negs	r1, r1
 8025240:	0032      	movs	r2, r6
 8025242:	0008      	movs	r0, r1
 8025244:	2b00      	cmp	r3, #0
 8025246:	d00b      	beq.n	8025260 <_strtod_l+0x8f4>
 8025248:	24d4      	movs	r4, #212	@ 0xd4
 802524a:	4b13      	ldr	r3, [pc, #76]	@ (8025298 <_strtod_l+0x92c>)
 802524c:	0008      	movs	r0, r1
 802524e:	403b      	ands	r3, r7
 8025250:	04e4      	lsls	r4, r4, #19
 8025252:	42a3      	cmp	r3, r4
 8025254:	d804      	bhi.n	8025260 <_strtod_l+0x8f4>
 8025256:	306c      	adds	r0, #108	@ 0x6c
 8025258:	0d1b      	lsrs	r3, r3, #20
 802525a:	1ac3      	subs	r3, r0, r3
 802525c:	4099      	lsls	r1, r3
 802525e:	0008      	movs	r0, r1
 8025260:	4282      	cmp	r2, r0
 8025262:	d123      	bne.n	80252ac <_strtod_l+0x940>
 8025264:	4b0f      	ldr	r3, [pc, #60]	@ (80252a4 <_strtod_l+0x938>)
 8025266:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025268:	4299      	cmp	r1, r3
 802526a:	d102      	bne.n	8025272 <_strtod_l+0x906>
 802526c:	3201      	adds	r2, #1
 802526e:	d100      	bne.n	8025272 <_strtod_l+0x906>
 8025270:	e5c0      	b.n	8024df4 <_strtod_l+0x488>
 8025272:	4b09      	ldr	r3, [pc, #36]	@ (8025298 <_strtod_l+0x92c>)
 8025274:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025276:	2600      	movs	r6, #0
 8025278:	401a      	ands	r2, r3
 802527a:	0013      	movs	r3, r2
 802527c:	2280      	movs	r2, #128	@ 0x80
 802527e:	0352      	lsls	r2, r2, #13
 8025280:	189f      	adds	r7, r3, r2
 8025282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025284:	2b00      	cmp	r3, #0
 8025286:	d1bd      	bne.n	8025204 <_strtod_l+0x898>
 8025288:	e5bd      	b.n	8024e06 <_strtod_l+0x49a>
 802528a:	46c0      	nop			@ (mov r8, r8)
 802528c:	0802eb60 	.word	0x0802eb60
 8025290:	fffffc02 	.word	0xfffffc02
 8025294:	fffffbe2 	.word	0xfffffbe2
 8025298:	7ff00000 	.word	0x7ff00000
 802529c:	39500000 	.word	0x39500000
 80252a0:	000fffff 	.word	0x000fffff
 80252a4:	7fefffff 	.word	0x7fefffff
 80252a8:	4333      	orrs	r3, r6
 80252aa:	d09d      	beq.n	80251e8 <_strtod_l+0x87c>
 80252ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80252ae:	2b00      	cmp	r3, #0
 80252b0:	d01c      	beq.n	80252ec <_strtod_l+0x980>
 80252b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80252b4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80252b6:	4213      	tst	r3, r2
 80252b8:	d0e3      	beq.n	8025282 <_strtod_l+0x916>
 80252ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80252bc:	0030      	movs	r0, r6
 80252be:	0039      	movs	r1, r7
 80252c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80252c2:	2b00      	cmp	r3, #0
 80252c4:	d016      	beq.n	80252f4 <_strtod_l+0x988>
 80252c6:	f7ff fb39 	bl	802493c <sulp>
 80252ca:	0002      	movs	r2, r0
 80252cc:	000b      	movs	r3, r1
 80252ce:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80252d0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80252d2:	f7dc fb3f 	bl	8001954 <__aeabi_dadd>
 80252d6:	0006      	movs	r6, r0
 80252d8:	000f      	movs	r7, r1
 80252da:	e7d2      	b.n	8025282 <_strtod_l+0x916>
 80252dc:	2601      	movs	r6, #1
 80252de:	4a92      	ldr	r2, [pc, #584]	@ (8025528 <_strtod_l+0xbbc>)
 80252e0:	4276      	negs	r6, r6
 80252e2:	189b      	adds	r3, r3, r2
 80252e4:	4a91      	ldr	r2, [pc, #580]	@ (802552c <_strtod_l+0xbc0>)
 80252e6:	431a      	orrs	r2, r3
 80252e8:	0017      	movs	r7, r2
 80252ea:	e7ca      	b.n	8025282 <_strtod_l+0x916>
 80252ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80252ee:	4233      	tst	r3, r6
 80252f0:	d0c7      	beq.n	8025282 <_strtod_l+0x916>
 80252f2:	e7e2      	b.n	80252ba <_strtod_l+0x94e>
 80252f4:	f7ff fb22 	bl	802493c <sulp>
 80252f8:	0002      	movs	r2, r0
 80252fa:	000b      	movs	r3, r1
 80252fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80252fe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025300:	f7dd fe0e 	bl	8002f20 <__aeabi_dsub>
 8025304:	2200      	movs	r2, #0
 8025306:	2300      	movs	r3, #0
 8025308:	0006      	movs	r6, r0
 802530a:	000f      	movs	r7, r1
 802530c:	f7db f8d0 	bl	80004b0 <__aeabi_dcmpeq>
 8025310:	2800      	cmp	r0, #0
 8025312:	d0b6      	beq.n	8025282 <_strtod_l+0x916>
 8025314:	e60a      	b.n	8024f2c <_strtod_l+0x5c0>
 8025316:	9907      	ldr	r1, [sp, #28]
 8025318:	9806      	ldr	r0, [sp, #24]
 802531a:	f003 f8cd 	bl	80284b8 <__ratio>
 802531e:	2380      	movs	r3, #128	@ 0x80
 8025320:	2200      	movs	r2, #0
 8025322:	05db      	lsls	r3, r3, #23
 8025324:	0004      	movs	r4, r0
 8025326:	000d      	movs	r5, r1
 8025328:	f7db f8d2 	bl	80004d0 <__aeabi_dcmple>
 802532c:	2800      	cmp	r0, #0
 802532e:	d06c      	beq.n	802540a <_strtod_l+0xa9e>
 8025330:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025332:	2b00      	cmp	r3, #0
 8025334:	d177      	bne.n	8025426 <_strtod_l+0xaba>
 8025336:	2e00      	cmp	r6, #0
 8025338:	d157      	bne.n	80253ea <_strtod_l+0xa7e>
 802533a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802533c:	031b      	lsls	r3, r3, #12
 802533e:	d15a      	bne.n	80253f6 <_strtod_l+0xa8a>
 8025340:	2200      	movs	r2, #0
 8025342:	0020      	movs	r0, r4
 8025344:	0029      	movs	r1, r5
 8025346:	4b7a      	ldr	r3, [pc, #488]	@ (8025530 <_strtod_l+0xbc4>)
 8025348:	f7db f8b8 	bl	80004bc <__aeabi_dcmplt>
 802534c:	2800      	cmp	r0, #0
 802534e:	d159      	bne.n	8025404 <_strtod_l+0xa98>
 8025350:	0020      	movs	r0, r4
 8025352:	0029      	movs	r1, r5
 8025354:	2200      	movs	r2, #0
 8025356:	4b77      	ldr	r3, [pc, #476]	@ (8025534 <_strtod_l+0xbc8>)
 8025358:	f7dd fafc 	bl	8002954 <__aeabi_dmul>
 802535c:	0004      	movs	r4, r0
 802535e:	000d      	movs	r5, r1
 8025360:	2380      	movs	r3, #128	@ 0x80
 8025362:	061b      	lsls	r3, r3, #24
 8025364:	18eb      	adds	r3, r5, r3
 8025366:	940a      	str	r4, [sp, #40]	@ 0x28
 8025368:	930b      	str	r3, [sp, #44]	@ 0x2c
 802536a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802536c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802536e:	9216      	str	r2, [sp, #88]	@ 0x58
 8025370:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025372:	4a71      	ldr	r2, [pc, #452]	@ (8025538 <_strtod_l+0xbcc>)
 8025374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025376:	4013      	ands	r3, r2
 8025378:	9315      	str	r3, [sp, #84]	@ 0x54
 802537a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802537c:	4b6f      	ldr	r3, [pc, #444]	@ (802553c <_strtod_l+0xbd0>)
 802537e:	429a      	cmp	r2, r3
 8025380:	d000      	beq.n	8025384 <_strtod_l+0xa18>
 8025382:	e087      	b.n	8025494 <_strtod_l+0xb28>
 8025384:	4a6e      	ldr	r2, [pc, #440]	@ (8025540 <_strtod_l+0xbd4>)
 8025386:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025388:	4694      	mov	ip, r2
 802538a:	4463      	add	r3, ip
 802538c:	001f      	movs	r7, r3
 802538e:	0030      	movs	r0, r6
 8025390:	0019      	movs	r1, r3
 8025392:	f002 ffc5 	bl	8028320 <__ulp>
 8025396:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025398:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802539a:	f7dd fadb 	bl	8002954 <__aeabi_dmul>
 802539e:	0032      	movs	r2, r6
 80253a0:	003b      	movs	r3, r7
 80253a2:	f7dc fad7 	bl	8001954 <__aeabi_dadd>
 80253a6:	4a64      	ldr	r2, [pc, #400]	@ (8025538 <_strtod_l+0xbcc>)
 80253a8:	4b66      	ldr	r3, [pc, #408]	@ (8025544 <_strtod_l+0xbd8>)
 80253aa:	0006      	movs	r6, r0
 80253ac:	400a      	ands	r2, r1
 80253ae:	429a      	cmp	r2, r3
 80253b0:	d940      	bls.n	8025434 <_strtod_l+0xac8>
 80253b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80253b4:	4a64      	ldr	r2, [pc, #400]	@ (8025548 <_strtod_l+0xbdc>)
 80253b6:	4293      	cmp	r3, r2
 80253b8:	d103      	bne.n	80253c2 <_strtod_l+0xa56>
 80253ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80253bc:	3301      	adds	r3, #1
 80253be:	d100      	bne.n	80253c2 <_strtod_l+0xa56>
 80253c0:	e518      	b.n	8024df4 <_strtod_l+0x488>
 80253c2:	2601      	movs	r6, #1
 80253c4:	4f60      	ldr	r7, [pc, #384]	@ (8025548 <_strtod_l+0xbdc>)
 80253c6:	4276      	negs	r6, r6
 80253c8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80253ca:	9805      	ldr	r0, [sp, #20]
 80253cc:	f002 fc64 	bl	8027c98 <_Bfree>
 80253d0:	9908      	ldr	r1, [sp, #32]
 80253d2:	9805      	ldr	r0, [sp, #20]
 80253d4:	f002 fc60 	bl	8027c98 <_Bfree>
 80253d8:	9907      	ldr	r1, [sp, #28]
 80253da:	9805      	ldr	r0, [sp, #20]
 80253dc:	f002 fc5c 	bl	8027c98 <_Bfree>
 80253e0:	9906      	ldr	r1, [sp, #24]
 80253e2:	9805      	ldr	r0, [sp, #20]
 80253e4:	f002 fc58 	bl	8027c98 <_Bfree>
 80253e8:	e617      	b.n	802501a <_strtod_l+0x6ae>
 80253ea:	2e01      	cmp	r6, #1
 80253ec:	d103      	bne.n	80253f6 <_strtod_l+0xa8a>
 80253ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80253f0:	2b00      	cmp	r3, #0
 80253f2:	d100      	bne.n	80253f6 <_strtod_l+0xa8a>
 80253f4:	e59a      	b.n	8024f2c <_strtod_l+0x5c0>
 80253f6:	2300      	movs	r3, #0
 80253f8:	4c54      	ldr	r4, [pc, #336]	@ (802554c <_strtod_l+0xbe0>)
 80253fa:	4d4d      	ldr	r5, [pc, #308]	@ (8025530 <_strtod_l+0xbc4>)
 80253fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80253fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025400:	2400      	movs	r4, #0
 8025402:	e7b2      	b.n	802536a <_strtod_l+0x9fe>
 8025404:	2400      	movs	r4, #0
 8025406:	4d4b      	ldr	r5, [pc, #300]	@ (8025534 <_strtod_l+0xbc8>)
 8025408:	e7aa      	b.n	8025360 <_strtod_l+0x9f4>
 802540a:	0020      	movs	r0, r4
 802540c:	0029      	movs	r1, r5
 802540e:	4b49      	ldr	r3, [pc, #292]	@ (8025534 <_strtod_l+0xbc8>)
 8025410:	2200      	movs	r2, #0
 8025412:	f7dd fa9f 	bl	8002954 <__aeabi_dmul>
 8025416:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025418:	0004      	movs	r4, r0
 802541a:	000d      	movs	r5, r1
 802541c:	2b00      	cmp	r3, #0
 802541e:	d09f      	beq.n	8025360 <_strtod_l+0x9f4>
 8025420:	940a      	str	r4, [sp, #40]	@ 0x28
 8025422:	950b      	str	r5, [sp, #44]	@ 0x2c
 8025424:	e7a1      	b.n	802536a <_strtod_l+0x9fe>
 8025426:	2300      	movs	r3, #0
 8025428:	4c41      	ldr	r4, [pc, #260]	@ (8025530 <_strtod_l+0xbc4>)
 802542a:	0025      	movs	r5, r4
 802542c:	930a      	str	r3, [sp, #40]	@ 0x28
 802542e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025430:	001c      	movs	r4, r3
 8025432:	e79a      	b.n	802536a <_strtod_l+0x9fe>
 8025434:	23d4      	movs	r3, #212	@ 0xd4
 8025436:	049b      	lsls	r3, r3, #18
 8025438:	18cf      	adds	r7, r1, r3
 802543a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802543c:	9710      	str	r7, [sp, #64]	@ 0x40
 802543e:	2b00      	cmp	r3, #0
 8025440:	d1c2      	bne.n	80253c8 <_strtod_l+0xa5c>
 8025442:	4b3d      	ldr	r3, [pc, #244]	@ (8025538 <_strtod_l+0xbcc>)
 8025444:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025446:	403b      	ands	r3, r7
 8025448:	429a      	cmp	r2, r3
 802544a:	d1bd      	bne.n	80253c8 <_strtod_l+0xa5c>
 802544c:	0020      	movs	r0, r4
 802544e:	0029      	movs	r1, r5
 8025450:	f7db f91a 	bl	8000688 <__aeabi_d2lz>
 8025454:	f7db f952 	bl	80006fc <__aeabi_l2d>
 8025458:	0002      	movs	r2, r0
 802545a:	000b      	movs	r3, r1
 802545c:	0020      	movs	r0, r4
 802545e:	0029      	movs	r1, r5
 8025460:	f7dd fd5e 	bl	8002f20 <__aeabi_dsub>
 8025464:	033c      	lsls	r4, r7, #12
 8025466:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025468:	0b24      	lsrs	r4, r4, #12
 802546a:	4334      	orrs	r4, r6
 802546c:	900e      	str	r0, [sp, #56]	@ 0x38
 802546e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8025470:	4a37      	ldr	r2, [pc, #220]	@ (8025550 <_strtod_l+0xbe4>)
 8025472:	431c      	orrs	r4, r3
 8025474:	d052      	beq.n	802551c <_strtod_l+0xbb0>
 8025476:	4b37      	ldr	r3, [pc, #220]	@ (8025554 <_strtod_l+0xbe8>)
 8025478:	f7db f820 	bl	80004bc <__aeabi_dcmplt>
 802547c:	2800      	cmp	r0, #0
 802547e:	d000      	beq.n	8025482 <_strtod_l+0xb16>
 8025480:	e4c1      	b.n	8024e06 <_strtod_l+0x49a>
 8025482:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025484:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8025486:	4a34      	ldr	r2, [pc, #208]	@ (8025558 <_strtod_l+0xbec>)
 8025488:	4b2a      	ldr	r3, [pc, #168]	@ (8025534 <_strtod_l+0xbc8>)
 802548a:	f7db f82b 	bl	80004e4 <__aeabi_dcmpgt>
 802548e:	2800      	cmp	r0, #0
 8025490:	d09a      	beq.n	80253c8 <_strtod_l+0xa5c>
 8025492:	e4b8      	b.n	8024e06 <_strtod_l+0x49a>
 8025494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025496:	2b00      	cmp	r3, #0
 8025498:	d02a      	beq.n	80254f0 <_strtod_l+0xb84>
 802549a:	23d4      	movs	r3, #212	@ 0xd4
 802549c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802549e:	04db      	lsls	r3, r3, #19
 80254a0:	429a      	cmp	r2, r3
 80254a2:	d825      	bhi.n	80254f0 <_strtod_l+0xb84>
 80254a4:	0020      	movs	r0, r4
 80254a6:	0029      	movs	r1, r5
 80254a8:	4a2c      	ldr	r2, [pc, #176]	@ (802555c <_strtod_l+0xbf0>)
 80254aa:	4b2d      	ldr	r3, [pc, #180]	@ (8025560 <_strtod_l+0xbf4>)
 80254ac:	f7db f810 	bl	80004d0 <__aeabi_dcmple>
 80254b0:	2800      	cmp	r0, #0
 80254b2:	d016      	beq.n	80254e2 <_strtod_l+0xb76>
 80254b4:	0020      	movs	r0, r4
 80254b6:	0029      	movs	r1, r5
 80254b8:	f7db f8c8 	bl	800064c <__aeabi_d2uiz>
 80254bc:	2800      	cmp	r0, #0
 80254be:	d100      	bne.n	80254c2 <_strtod_l+0xb56>
 80254c0:	3001      	adds	r0, #1
 80254c2:	f7de f9c3 	bl	800384c <__aeabi_ui2d>
 80254c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80254c8:	0004      	movs	r4, r0
 80254ca:	000d      	movs	r5, r1
 80254cc:	2b00      	cmp	r3, #0
 80254ce:	d122      	bne.n	8025516 <_strtod_l+0xbaa>
 80254d0:	2380      	movs	r3, #128	@ 0x80
 80254d2:	061b      	lsls	r3, r3, #24
 80254d4:	18cb      	adds	r3, r1, r3
 80254d6:	9018      	str	r0, [sp, #96]	@ 0x60
 80254d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80254da:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80254dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80254de:	9216      	str	r2, [sp, #88]	@ 0x58
 80254e0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80254e2:	22d6      	movs	r2, #214	@ 0xd6
 80254e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80254e6:	04d2      	lsls	r2, r2, #19
 80254e8:	189b      	adds	r3, r3, r2
 80254ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80254ec:	1a9b      	subs	r3, r3, r2
 80254ee:	9317      	str	r3, [sp, #92]	@ 0x5c
 80254f0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80254f2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80254f4:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80254f6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80254f8:	f002 ff12 	bl	8028320 <__ulp>
 80254fc:	0002      	movs	r2, r0
 80254fe:	000b      	movs	r3, r1
 8025500:	0030      	movs	r0, r6
 8025502:	0039      	movs	r1, r7
 8025504:	f7dd fa26 	bl	8002954 <__aeabi_dmul>
 8025508:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802550a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802550c:	f7dc fa22 	bl	8001954 <__aeabi_dadd>
 8025510:	0006      	movs	r6, r0
 8025512:	000f      	movs	r7, r1
 8025514:	e791      	b.n	802543a <_strtod_l+0xace>
 8025516:	9418      	str	r4, [sp, #96]	@ 0x60
 8025518:	9519      	str	r5, [sp, #100]	@ 0x64
 802551a:	e7de      	b.n	80254da <_strtod_l+0xb6e>
 802551c:	4b11      	ldr	r3, [pc, #68]	@ (8025564 <_strtod_l+0xbf8>)
 802551e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025520:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8025522:	f7da ffcb 	bl	80004bc <__aeabi_dcmplt>
 8025526:	e7b2      	b.n	802548e <_strtod_l+0xb22>
 8025528:	fff00000 	.word	0xfff00000
 802552c:	000fffff 	.word	0x000fffff
 8025530:	3ff00000 	.word	0x3ff00000
 8025534:	3fe00000 	.word	0x3fe00000
 8025538:	7ff00000 	.word	0x7ff00000
 802553c:	7fe00000 	.word	0x7fe00000
 8025540:	fcb00000 	.word	0xfcb00000
 8025544:	7c9fffff 	.word	0x7c9fffff
 8025548:	7fefffff 	.word	0x7fefffff
 802554c:	bff00000 	.word	0xbff00000
 8025550:	94a03595 	.word	0x94a03595
 8025554:	3fdfffff 	.word	0x3fdfffff
 8025558:	35afe535 	.word	0x35afe535
 802555c:	ffc00000 	.word	0xffc00000
 8025560:	41dfffff 	.word	0x41dfffff
 8025564:	3fcfffff 	.word	0x3fcfffff

08025568 <strtod>:
 8025568:	b510      	push	{r4, lr}
 802556a:	4c04      	ldr	r4, [pc, #16]	@ (802557c <strtod+0x14>)
 802556c:	000a      	movs	r2, r1
 802556e:	0001      	movs	r1, r0
 8025570:	4b03      	ldr	r3, [pc, #12]	@ (8025580 <strtod+0x18>)
 8025572:	6820      	ldr	r0, [r4, #0]
 8025574:	f7ff f9fa 	bl	802496c <_strtod_l>
 8025578:	bd10      	pop	{r4, pc}
 802557a:	46c0      	nop			@ (mov r8, r8)
 802557c:	200003ec 	.word	0x200003ec
 8025580:	20000280 	.word	0x20000280

08025584 <_strtol_l.isra.0>:
 8025584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025586:	b085      	sub	sp, #20
 8025588:	0017      	movs	r7, r2
 802558a:	001e      	movs	r6, r3
 802558c:	9003      	str	r0, [sp, #12]
 802558e:	9101      	str	r1, [sp, #4]
 8025590:	2b24      	cmp	r3, #36	@ 0x24
 8025592:	d823      	bhi.n	80255dc <_strtol_l.isra.0+0x58>
 8025594:	000c      	movs	r4, r1
 8025596:	2b01      	cmp	r3, #1
 8025598:	d020      	beq.n	80255dc <_strtol_l.isra.0+0x58>
 802559a:	4b3d      	ldr	r3, [pc, #244]	@ (8025690 <_strtol_l.isra.0+0x10c>)
 802559c:	2208      	movs	r2, #8
 802559e:	469c      	mov	ip, r3
 80255a0:	0023      	movs	r3, r4
 80255a2:	4661      	mov	r1, ip
 80255a4:	781d      	ldrb	r5, [r3, #0]
 80255a6:	3401      	adds	r4, #1
 80255a8:	5d48      	ldrb	r0, [r1, r5]
 80255aa:	0001      	movs	r1, r0
 80255ac:	4011      	ands	r1, r2
 80255ae:	4210      	tst	r0, r2
 80255b0:	d1f6      	bne.n	80255a0 <_strtol_l.isra.0+0x1c>
 80255b2:	2d2d      	cmp	r5, #45	@ 0x2d
 80255b4:	d119      	bne.n	80255ea <_strtol_l.isra.0+0x66>
 80255b6:	7825      	ldrb	r5, [r4, #0]
 80255b8:	1c9c      	adds	r4, r3, #2
 80255ba:	2301      	movs	r3, #1
 80255bc:	9300      	str	r3, [sp, #0]
 80255be:	2210      	movs	r2, #16
 80255c0:	0033      	movs	r3, r6
 80255c2:	4393      	bics	r3, r2
 80255c4:	d11d      	bne.n	8025602 <_strtol_l.isra.0+0x7e>
 80255c6:	2d30      	cmp	r5, #48	@ 0x30
 80255c8:	d115      	bne.n	80255f6 <_strtol_l.isra.0+0x72>
 80255ca:	2120      	movs	r1, #32
 80255cc:	7823      	ldrb	r3, [r4, #0]
 80255ce:	438b      	bics	r3, r1
 80255d0:	2b58      	cmp	r3, #88	@ 0x58
 80255d2:	d110      	bne.n	80255f6 <_strtol_l.isra.0+0x72>
 80255d4:	7865      	ldrb	r5, [r4, #1]
 80255d6:	3402      	adds	r4, #2
 80255d8:	2610      	movs	r6, #16
 80255da:	e012      	b.n	8025602 <_strtol_l.isra.0+0x7e>
 80255dc:	f000 ffe8 	bl	80265b0 <__errno>
 80255e0:	2316      	movs	r3, #22
 80255e2:	6003      	str	r3, [r0, #0]
 80255e4:	2000      	movs	r0, #0
 80255e6:	b005      	add	sp, #20
 80255e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80255ea:	9100      	str	r1, [sp, #0]
 80255ec:	2d2b      	cmp	r5, #43	@ 0x2b
 80255ee:	d1e6      	bne.n	80255be <_strtol_l.isra.0+0x3a>
 80255f0:	7825      	ldrb	r5, [r4, #0]
 80255f2:	1c9c      	adds	r4, r3, #2
 80255f4:	e7e3      	b.n	80255be <_strtol_l.isra.0+0x3a>
 80255f6:	2e00      	cmp	r6, #0
 80255f8:	d1ee      	bne.n	80255d8 <_strtol_l.isra.0+0x54>
 80255fa:	360a      	adds	r6, #10
 80255fc:	2d30      	cmp	r5, #48	@ 0x30
 80255fe:	d100      	bne.n	8025602 <_strtol_l.isra.0+0x7e>
 8025600:	3e02      	subs	r6, #2
 8025602:	4a24      	ldr	r2, [pc, #144]	@ (8025694 <_strtol_l.isra.0+0x110>)
 8025604:	9b00      	ldr	r3, [sp, #0]
 8025606:	4694      	mov	ip, r2
 8025608:	4463      	add	r3, ip
 802560a:	0031      	movs	r1, r6
 802560c:	0018      	movs	r0, r3
 802560e:	9302      	str	r3, [sp, #8]
 8025610:	f7da fe4e 	bl	80002b0 <__aeabi_uidivmod>
 8025614:	2200      	movs	r2, #0
 8025616:	4684      	mov	ip, r0
 8025618:	0010      	movs	r0, r2
 802561a:	002b      	movs	r3, r5
 802561c:	3b30      	subs	r3, #48	@ 0x30
 802561e:	2b09      	cmp	r3, #9
 8025620:	d811      	bhi.n	8025646 <_strtol_l.isra.0+0xc2>
 8025622:	001d      	movs	r5, r3
 8025624:	42ae      	cmp	r6, r5
 8025626:	dd1d      	ble.n	8025664 <_strtol_l.isra.0+0xe0>
 8025628:	1c53      	adds	r3, r2, #1
 802562a:	d009      	beq.n	8025640 <_strtol_l.isra.0+0xbc>
 802562c:	2201      	movs	r2, #1
 802562e:	4252      	negs	r2, r2
 8025630:	4584      	cmp	ip, r0
 8025632:	d305      	bcc.n	8025640 <_strtol_l.isra.0+0xbc>
 8025634:	d101      	bne.n	802563a <_strtol_l.isra.0+0xb6>
 8025636:	42a9      	cmp	r1, r5
 8025638:	db11      	blt.n	802565e <_strtol_l.isra.0+0xda>
 802563a:	2201      	movs	r2, #1
 802563c:	4370      	muls	r0, r6
 802563e:	1828      	adds	r0, r5, r0
 8025640:	7825      	ldrb	r5, [r4, #0]
 8025642:	3401      	adds	r4, #1
 8025644:	e7e9      	b.n	802561a <_strtol_l.isra.0+0x96>
 8025646:	002b      	movs	r3, r5
 8025648:	3b41      	subs	r3, #65	@ 0x41
 802564a:	2b19      	cmp	r3, #25
 802564c:	d801      	bhi.n	8025652 <_strtol_l.isra.0+0xce>
 802564e:	3d37      	subs	r5, #55	@ 0x37
 8025650:	e7e8      	b.n	8025624 <_strtol_l.isra.0+0xa0>
 8025652:	002b      	movs	r3, r5
 8025654:	3b61      	subs	r3, #97	@ 0x61
 8025656:	2b19      	cmp	r3, #25
 8025658:	d804      	bhi.n	8025664 <_strtol_l.isra.0+0xe0>
 802565a:	3d57      	subs	r5, #87	@ 0x57
 802565c:	e7e2      	b.n	8025624 <_strtol_l.isra.0+0xa0>
 802565e:	2201      	movs	r2, #1
 8025660:	4252      	negs	r2, r2
 8025662:	e7ed      	b.n	8025640 <_strtol_l.isra.0+0xbc>
 8025664:	1c53      	adds	r3, r2, #1
 8025666:	d108      	bne.n	802567a <_strtol_l.isra.0+0xf6>
 8025668:	2322      	movs	r3, #34	@ 0x22
 802566a:	9a03      	ldr	r2, [sp, #12]
 802566c:	9802      	ldr	r0, [sp, #8]
 802566e:	6013      	str	r3, [r2, #0]
 8025670:	2f00      	cmp	r7, #0
 8025672:	d0b8      	beq.n	80255e6 <_strtol_l.isra.0+0x62>
 8025674:	1e63      	subs	r3, r4, #1
 8025676:	9301      	str	r3, [sp, #4]
 8025678:	e007      	b.n	802568a <_strtol_l.isra.0+0x106>
 802567a:	9b00      	ldr	r3, [sp, #0]
 802567c:	2b00      	cmp	r3, #0
 802567e:	d000      	beq.n	8025682 <_strtol_l.isra.0+0xfe>
 8025680:	4240      	negs	r0, r0
 8025682:	2f00      	cmp	r7, #0
 8025684:	d0af      	beq.n	80255e6 <_strtol_l.isra.0+0x62>
 8025686:	2a00      	cmp	r2, #0
 8025688:	d1f4      	bne.n	8025674 <_strtol_l.isra.0+0xf0>
 802568a:	9b01      	ldr	r3, [sp, #4]
 802568c:	603b      	str	r3, [r7, #0]
 802568e:	e7aa      	b.n	80255e6 <_strtol_l.isra.0+0x62>
 8025690:	0802eb89 	.word	0x0802eb89
 8025694:	7fffffff 	.word	0x7fffffff

08025698 <strtol>:
 8025698:	b510      	push	{r4, lr}
 802569a:	4c04      	ldr	r4, [pc, #16]	@ (80256ac <strtol+0x14>)
 802569c:	0013      	movs	r3, r2
 802569e:	000a      	movs	r2, r1
 80256a0:	0001      	movs	r1, r0
 80256a2:	6820      	ldr	r0, [r4, #0]
 80256a4:	f7ff ff6e 	bl	8025584 <_strtol_l.isra.0>
 80256a8:	bd10      	pop	{r4, pc}
 80256aa:	46c0      	nop			@ (mov r8, r8)
 80256ac:	200003ec 	.word	0x200003ec

080256b0 <__cvt>:
 80256b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80256b2:	001f      	movs	r7, r3
 80256b4:	2300      	movs	r3, #0
 80256b6:	0016      	movs	r6, r2
 80256b8:	b08b      	sub	sp, #44	@ 0x2c
 80256ba:	429f      	cmp	r7, r3
 80256bc:	da04      	bge.n	80256c8 <__cvt+0x18>
 80256be:	2180      	movs	r1, #128	@ 0x80
 80256c0:	0609      	lsls	r1, r1, #24
 80256c2:	187b      	adds	r3, r7, r1
 80256c4:	001f      	movs	r7, r3
 80256c6:	232d      	movs	r3, #45	@ 0x2d
 80256c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80256ca:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80256cc:	7013      	strb	r3, [r2, #0]
 80256ce:	2320      	movs	r3, #32
 80256d0:	2203      	movs	r2, #3
 80256d2:	439d      	bics	r5, r3
 80256d4:	2d46      	cmp	r5, #70	@ 0x46
 80256d6:	d007      	beq.n	80256e8 <__cvt+0x38>
 80256d8:	002b      	movs	r3, r5
 80256da:	3b45      	subs	r3, #69	@ 0x45
 80256dc:	4259      	negs	r1, r3
 80256de:	414b      	adcs	r3, r1
 80256e0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80256e2:	3a01      	subs	r2, #1
 80256e4:	18cb      	adds	r3, r1, r3
 80256e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80256e8:	ab09      	add	r3, sp, #36	@ 0x24
 80256ea:	9304      	str	r3, [sp, #16]
 80256ec:	ab08      	add	r3, sp, #32
 80256ee:	9303      	str	r3, [sp, #12]
 80256f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80256f2:	9200      	str	r2, [sp, #0]
 80256f4:	9302      	str	r3, [sp, #8]
 80256f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80256f8:	0032      	movs	r2, r6
 80256fa:	9301      	str	r3, [sp, #4]
 80256fc:	003b      	movs	r3, r7
 80256fe:	f001 f825 	bl	802674c <_dtoa_r>
 8025702:	0004      	movs	r4, r0
 8025704:	2d47      	cmp	r5, #71	@ 0x47
 8025706:	d11b      	bne.n	8025740 <__cvt+0x90>
 8025708:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802570a:	07db      	lsls	r3, r3, #31
 802570c:	d511      	bpl.n	8025732 <__cvt+0x82>
 802570e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025710:	18c3      	adds	r3, r0, r3
 8025712:	9307      	str	r3, [sp, #28]
 8025714:	2200      	movs	r2, #0
 8025716:	2300      	movs	r3, #0
 8025718:	0030      	movs	r0, r6
 802571a:	0039      	movs	r1, r7
 802571c:	f7da fec8 	bl	80004b0 <__aeabi_dcmpeq>
 8025720:	2800      	cmp	r0, #0
 8025722:	d001      	beq.n	8025728 <__cvt+0x78>
 8025724:	9b07      	ldr	r3, [sp, #28]
 8025726:	9309      	str	r3, [sp, #36]	@ 0x24
 8025728:	2230      	movs	r2, #48	@ 0x30
 802572a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802572c:	9907      	ldr	r1, [sp, #28]
 802572e:	428b      	cmp	r3, r1
 8025730:	d320      	bcc.n	8025774 <__cvt+0xc4>
 8025732:	0020      	movs	r0, r4
 8025734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025736:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025738:	1b1b      	subs	r3, r3, r4
 802573a:	6013      	str	r3, [r2, #0]
 802573c:	b00b      	add	sp, #44	@ 0x2c
 802573e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025740:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025742:	18c3      	adds	r3, r0, r3
 8025744:	9307      	str	r3, [sp, #28]
 8025746:	2d46      	cmp	r5, #70	@ 0x46
 8025748:	d1e4      	bne.n	8025714 <__cvt+0x64>
 802574a:	7803      	ldrb	r3, [r0, #0]
 802574c:	2b30      	cmp	r3, #48	@ 0x30
 802574e:	d10c      	bne.n	802576a <__cvt+0xba>
 8025750:	2200      	movs	r2, #0
 8025752:	2300      	movs	r3, #0
 8025754:	0030      	movs	r0, r6
 8025756:	0039      	movs	r1, r7
 8025758:	f7da feaa 	bl	80004b0 <__aeabi_dcmpeq>
 802575c:	2800      	cmp	r0, #0
 802575e:	d104      	bne.n	802576a <__cvt+0xba>
 8025760:	2301      	movs	r3, #1
 8025762:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025764:	1a9b      	subs	r3, r3, r2
 8025766:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025768:	6013      	str	r3, [r2, #0]
 802576a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802576c:	9a07      	ldr	r2, [sp, #28]
 802576e:	681b      	ldr	r3, [r3, #0]
 8025770:	18d3      	adds	r3, r2, r3
 8025772:	e7ce      	b.n	8025712 <__cvt+0x62>
 8025774:	1c59      	adds	r1, r3, #1
 8025776:	9109      	str	r1, [sp, #36]	@ 0x24
 8025778:	701a      	strb	r2, [r3, #0]
 802577a:	e7d6      	b.n	802572a <__cvt+0x7a>

0802577c <__exponent>:
 802577c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802577e:	232b      	movs	r3, #43	@ 0x2b
 8025780:	b085      	sub	sp, #20
 8025782:	0005      	movs	r5, r0
 8025784:	1e0c      	subs	r4, r1, #0
 8025786:	7002      	strb	r2, [r0, #0]
 8025788:	da01      	bge.n	802578e <__exponent+0x12>
 802578a:	424c      	negs	r4, r1
 802578c:	3302      	adds	r3, #2
 802578e:	706b      	strb	r3, [r5, #1]
 8025790:	2c09      	cmp	r4, #9
 8025792:	dd2c      	ble.n	80257ee <__exponent+0x72>
 8025794:	ab02      	add	r3, sp, #8
 8025796:	1dde      	adds	r6, r3, #7
 8025798:	0020      	movs	r0, r4
 802579a:	210a      	movs	r1, #10
 802579c:	f7da fe72 	bl	8000484 <__aeabi_idivmod>
 80257a0:	0037      	movs	r7, r6
 80257a2:	3130      	adds	r1, #48	@ 0x30
 80257a4:	3e01      	subs	r6, #1
 80257a6:	0020      	movs	r0, r4
 80257a8:	7031      	strb	r1, [r6, #0]
 80257aa:	210a      	movs	r1, #10
 80257ac:	9401      	str	r4, [sp, #4]
 80257ae:	f7da fd83 	bl	80002b8 <__divsi3>
 80257b2:	9b01      	ldr	r3, [sp, #4]
 80257b4:	0004      	movs	r4, r0
 80257b6:	2b63      	cmp	r3, #99	@ 0x63
 80257b8:	dcee      	bgt.n	8025798 <__exponent+0x1c>
 80257ba:	1eba      	subs	r2, r7, #2
 80257bc:	1ca8      	adds	r0, r5, #2
 80257be:	0001      	movs	r1, r0
 80257c0:	0013      	movs	r3, r2
 80257c2:	3430      	adds	r4, #48	@ 0x30
 80257c4:	7014      	strb	r4, [r2, #0]
 80257c6:	ac02      	add	r4, sp, #8
 80257c8:	3407      	adds	r4, #7
 80257ca:	429c      	cmp	r4, r3
 80257cc:	d80a      	bhi.n	80257e4 <__exponent+0x68>
 80257ce:	2300      	movs	r3, #0
 80257d0:	4294      	cmp	r4, r2
 80257d2:	d303      	bcc.n	80257dc <__exponent+0x60>
 80257d4:	3309      	adds	r3, #9
 80257d6:	aa02      	add	r2, sp, #8
 80257d8:	189b      	adds	r3, r3, r2
 80257da:	1bdb      	subs	r3, r3, r7
 80257dc:	18c0      	adds	r0, r0, r3
 80257de:	1b40      	subs	r0, r0, r5
 80257e0:	b005      	add	sp, #20
 80257e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80257e4:	781c      	ldrb	r4, [r3, #0]
 80257e6:	3301      	adds	r3, #1
 80257e8:	700c      	strb	r4, [r1, #0]
 80257ea:	3101      	adds	r1, #1
 80257ec:	e7eb      	b.n	80257c6 <__exponent+0x4a>
 80257ee:	2330      	movs	r3, #48	@ 0x30
 80257f0:	18e4      	adds	r4, r4, r3
 80257f2:	70ab      	strb	r3, [r5, #2]
 80257f4:	1d28      	adds	r0, r5, #4
 80257f6:	70ec      	strb	r4, [r5, #3]
 80257f8:	e7f1      	b.n	80257de <__exponent+0x62>
	...

080257fc <_printf_float>:
 80257fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80257fe:	b097      	sub	sp, #92	@ 0x5c
 8025800:	000d      	movs	r5, r1
 8025802:	920a      	str	r2, [sp, #40]	@ 0x28
 8025804:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025806:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025808:	9009      	str	r0, [sp, #36]	@ 0x24
 802580a:	f000 fe7f 	bl	802650c <_localeconv_r>
 802580e:	6803      	ldr	r3, [r0, #0]
 8025810:	0018      	movs	r0, r3
 8025812:	930d      	str	r3, [sp, #52]	@ 0x34
 8025814:	f7da fcaa 	bl	800016c <strlen>
 8025818:	2300      	movs	r3, #0
 802581a:	900f      	str	r0, [sp, #60]	@ 0x3c
 802581c:	9314      	str	r3, [sp, #80]	@ 0x50
 802581e:	7e2b      	ldrb	r3, [r5, #24]
 8025820:	2207      	movs	r2, #7
 8025822:	930c      	str	r3, [sp, #48]	@ 0x30
 8025824:	682b      	ldr	r3, [r5, #0]
 8025826:	930e      	str	r3, [sp, #56]	@ 0x38
 8025828:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802582a:	6823      	ldr	r3, [r4, #0]
 802582c:	05c9      	lsls	r1, r1, #23
 802582e:	d545      	bpl.n	80258bc <_printf_float+0xc0>
 8025830:	189b      	adds	r3, r3, r2
 8025832:	4393      	bics	r3, r2
 8025834:	001a      	movs	r2, r3
 8025836:	3208      	adds	r2, #8
 8025838:	6022      	str	r2, [r4, #0]
 802583a:	2201      	movs	r2, #1
 802583c:	681e      	ldr	r6, [r3, #0]
 802583e:	685f      	ldr	r7, [r3, #4]
 8025840:	007b      	lsls	r3, r7, #1
 8025842:	085b      	lsrs	r3, r3, #1
 8025844:	9311      	str	r3, [sp, #68]	@ 0x44
 8025846:	9610      	str	r6, [sp, #64]	@ 0x40
 8025848:	64ae      	str	r6, [r5, #72]	@ 0x48
 802584a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 802584c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802584e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025850:	4ba7      	ldr	r3, [pc, #668]	@ (8025af0 <_printf_float+0x2f4>)
 8025852:	4252      	negs	r2, r2
 8025854:	f7dd ff6e 	bl	8003734 <__aeabi_dcmpun>
 8025858:	2800      	cmp	r0, #0
 802585a:	d131      	bne.n	80258c0 <_printf_float+0xc4>
 802585c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802585e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025860:	2201      	movs	r2, #1
 8025862:	4ba3      	ldr	r3, [pc, #652]	@ (8025af0 <_printf_float+0x2f4>)
 8025864:	4252      	negs	r2, r2
 8025866:	f7da fe33 	bl	80004d0 <__aeabi_dcmple>
 802586a:	2800      	cmp	r0, #0
 802586c:	d128      	bne.n	80258c0 <_printf_float+0xc4>
 802586e:	2200      	movs	r2, #0
 8025870:	2300      	movs	r3, #0
 8025872:	0030      	movs	r0, r6
 8025874:	0039      	movs	r1, r7
 8025876:	f7da fe21 	bl	80004bc <__aeabi_dcmplt>
 802587a:	2800      	cmp	r0, #0
 802587c:	d003      	beq.n	8025886 <_printf_float+0x8a>
 802587e:	002b      	movs	r3, r5
 8025880:	222d      	movs	r2, #45	@ 0x2d
 8025882:	3343      	adds	r3, #67	@ 0x43
 8025884:	701a      	strb	r2, [r3, #0]
 8025886:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025888:	4f9a      	ldr	r7, [pc, #616]	@ (8025af4 <_printf_float+0x2f8>)
 802588a:	2b47      	cmp	r3, #71	@ 0x47
 802588c:	d800      	bhi.n	8025890 <_printf_float+0x94>
 802588e:	4f9a      	ldr	r7, [pc, #616]	@ (8025af8 <_printf_float+0x2fc>)
 8025890:	2303      	movs	r3, #3
 8025892:	2400      	movs	r4, #0
 8025894:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025896:	612b      	str	r3, [r5, #16]
 8025898:	3301      	adds	r3, #1
 802589a:	439a      	bics	r2, r3
 802589c:	602a      	str	r2, [r5, #0]
 802589e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80258a0:	0029      	movs	r1, r5
 80258a2:	9300      	str	r3, [sp, #0]
 80258a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80258a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80258a8:	aa15      	add	r2, sp, #84	@ 0x54
 80258aa:	f000 f9e5 	bl	8025c78 <_printf_common>
 80258ae:	3001      	adds	r0, #1
 80258b0:	d000      	beq.n	80258b4 <_printf_float+0xb8>
 80258b2:	e09e      	b.n	80259f2 <_printf_float+0x1f6>
 80258b4:	2001      	movs	r0, #1
 80258b6:	4240      	negs	r0, r0
 80258b8:	b017      	add	sp, #92	@ 0x5c
 80258ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80258bc:	3307      	adds	r3, #7
 80258be:	e7b8      	b.n	8025832 <_printf_float+0x36>
 80258c0:	0032      	movs	r2, r6
 80258c2:	003b      	movs	r3, r7
 80258c4:	0030      	movs	r0, r6
 80258c6:	0039      	movs	r1, r7
 80258c8:	f7dd ff34 	bl	8003734 <__aeabi_dcmpun>
 80258cc:	2800      	cmp	r0, #0
 80258ce:	d00b      	beq.n	80258e8 <_printf_float+0xec>
 80258d0:	2f00      	cmp	r7, #0
 80258d2:	da03      	bge.n	80258dc <_printf_float+0xe0>
 80258d4:	002b      	movs	r3, r5
 80258d6:	222d      	movs	r2, #45	@ 0x2d
 80258d8:	3343      	adds	r3, #67	@ 0x43
 80258da:	701a      	strb	r2, [r3, #0]
 80258dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80258de:	4f87      	ldr	r7, [pc, #540]	@ (8025afc <_printf_float+0x300>)
 80258e0:	2b47      	cmp	r3, #71	@ 0x47
 80258e2:	d8d5      	bhi.n	8025890 <_printf_float+0x94>
 80258e4:	4f86      	ldr	r7, [pc, #536]	@ (8025b00 <_printf_float+0x304>)
 80258e6:	e7d3      	b.n	8025890 <_printf_float+0x94>
 80258e8:	2220      	movs	r2, #32
 80258ea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80258ec:	686b      	ldr	r3, [r5, #4]
 80258ee:	4394      	bics	r4, r2
 80258f0:	1c5a      	adds	r2, r3, #1
 80258f2:	d146      	bne.n	8025982 <_printf_float+0x186>
 80258f4:	3307      	adds	r3, #7
 80258f6:	606b      	str	r3, [r5, #4]
 80258f8:	2380      	movs	r3, #128	@ 0x80
 80258fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80258fc:	00db      	lsls	r3, r3, #3
 80258fe:	4313      	orrs	r3, r2
 8025900:	2200      	movs	r2, #0
 8025902:	602b      	str	r3, [r5, #0]
 8025904:	9206      	str	r2, [sp, #24]
 8025906:	aa14      	add	r2, sp, #80	@ 0x50
 8025908:	9205      	str	r2, [sp, #20]
 802590a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802590c:	a90a      	add	r1, sp, #40	@ 0x28
 802590e:	9204      	str	r2, [sp, #16]
 8025910:	aa13      	add	r2, sp, #76	@ 0x4c
 8025912:	9203      	str	r2, [sp, #12]
 8025914:	2223      	movs	r2, #35	@ 0x23
 8025916:	1852      	adds	r2, r2, r1
 8025918:	9202      	str	r2, [sp, #8]
 802591a:	9301      	str	r3, [sp, #4]
 802591c:	686b      	ldr	r3, [r5, #4]
 802591e:	0032      	movs	r2, r6
 8025920:	9300      	str	r3, [sp, #0]
 8025922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025924:	003b      	movs	r3, r7
 8025926:	f7ff fec3 	bl	80256b0 <__cvt>
 802592a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802592c:	0007      	movs	r7, r0
 802592e:	2c47      	cmp	r4, #71	@ 0x47
 8025930:	d12d      	bne.n	802598e <_printf_float+0x192>
 8025932:	1cd3      	adds	r3, r2, #3
 8025934:	db02      	blt.n	802593c <_printf_float+0x140>
 8025936:	686b      	ldr	r3, [r5, #4]
 8025938:	429a      	cmp	r2, r3
 802593a:	dd47      	ble.n	80259cc <_printf_float+0x1d0>
 802593c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802593e:	3b02      	subs	r3, #2
 8025940:	b2db      	uxtb	r3, r3
 8025942:	930c      	str	r3, [sp, #48]	@ 0x30
 8025944:	0028      	movs	r0, r5
 8025946:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025948:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802594a:	3901      	subs	r1, #1
 802594c:	3050      	adds	r0, #80	@ 0x50
 802594e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025950:	f7ff ff14 	bl	802577c <__exponent>
 8025954:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025956:	0004      	movs	r4, r0
 8025958:	1813      	adds	r3, r2, r0
 802595a:	612b      	str	r3, [r5, #16]
 802595c:	2a01      	cmp	r2, #1
 802595e:	dc02      	bgt.n	8025966 <_printf_float+0x16a>
 8025960:	682a      	ldr	r2, [r5, #0]
 8025962:	07d2      	lsls	r2, r2, #31
 8025964:	d501      	bpl.n	802596a <_printf_float+0x16e>
 8025966:	3301      	adds	r3, #1
 8025968:	612b      	str	r3, [r5, #16]
 802596a:	2323      	movs	r3, #35	@ 0x23
 802596c:	aa0a      	add	r2, sp, #40	@ 0x28
 802596e:	189b      	adds	r3, r3, r2
 8025970:	781b      	ldrb	r3, [r3, #0]
 8025972:	2b00      	cmp	r3, #0
 8025974:	d100      	bne.n	8025978 <_printf_float+0x17c>
 8025976:	e792      	b.n	802589e <_printf_float+0xa2>
 8025978:	002b      	movs	r3, r5
 802597a:	222d      	movs	r2, #45	@ 0x2d
 802597c:	3343      	adds	r3, #67	@ 0x43
 802597e:	701a      	strb	r2, [r3, #0]
 8025980:	e78d      	b.n	802589e <_printf_float+0xa2>
 8025982:	2c47      	cmp	r4, #71	@ 0x47
 8025984:	d1b8      	bne.n	80258f8 <_printf_float+0xfc>
 8025986:	2b00      	cmp	r3, #0
 8025988:	d1b6      	bne.n	80258f8 <_printf_float+0xfc>
 802598a:	3301      	adds	r3, #1
 802598c:	e7b3      	b.n	80258f6 <_printf_float+0xfa>
 802598e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025990:	2b65      	cmp	r3, #101	@ 0x65
 8025992:	d9d7      	bls.n	8025944 <_printf_float+0x148>
 8025994:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025996:	2b66      	cmp	r3, #102	@ 0x66
 8025998:	d11a      	bne.n	80259d0 <_printf_float+0x1d4>
 802599a:	686b      	ldr	r3, [r5, #4]
 802599c:	2a00      	cmp	r2, #0
 802599e:	dd09      	ble.n	80259b4 <_printf_float+0x1b8>
 80259a0:	612a      	str	r2, [r5, #16]
 80259a2:	2b00      	cmp	r3, #0
 80259a4:	d102      	bne.n	80259ac <_printf_float+0x1b0>
 80259a6:	6829      	ldr	r1, [r5, #0]
 80259a8:	07c9      	lsls	r1, r1, #31
 80259aa:	d50b      	bpl.n	80259c4 <_printf_float+0x1c8>
 80259ac:	3301      	adds	r3, #1
 80259ae:	189b      	adds	r3, r3, r2
 80259b0:	612b      	str	r3, [r5, #16]
 80259b2:	e007      	b.n	80259c4 <_printf_float+0x1c8>
 80259b4:	2b00      	cmp	r3, #0
 80259b6:	d103      	bne.n	80259c0 <_printf_float+0x1c4>
 80259b8:	2201      	movs	r2, #1
 80259ba:	6829      	ldr	r1, [r5, #0]
 80259bc:	4211      	tst	r1, r2
 80259be:	d000      	beq.n	80259c2 <_printf_float+0x1c6>
 80259c0:	1c9a      	adds	r2, r3, #2
 80259c2:	612a      	str	r2, [r5, #16]
 80259c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80259c6:	2400      	movs	r4, #0
 80259c8:	65ab      	str	r3, [r5, #88]	@ 0x58
 80259ca:	e7ce      	b.n	802596a <_printf_float+0x16e>
 80259cc:	2367      	movs	r3, #103	@ 0x67
 80259ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80259d0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80259d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80259d4:	4299      	cmp	r1, r3
 80259d6:	db06      	blt.n	80259e6 <_printf_float+0x1ea>
 80259d8:	682b      	ldr	r3, [r5, #0]
 80259da:	6129      	str	r1, [r5, #16]
 80259dc:	07db      	lsls	r3, r3, #31
 80259de:	d5f1      	bpl.n	80259c4 <_printf_float+0x1c8>
 80259e0:	3101      	adds	r1, #1
 80259e2:	6129      	str	r1, [r5, #16]
 80259e4:	e7ee      	b.n	80259c4 <_printf_float+0x1c8>
 80259e6:	2201      	movs	r2, #1
 80259e8:	2900      	cmp	r1, #0
 80259ea:	dce0      	bgt.n	80259ae <_printf_float+0x1b2>
 80259ec:	1892      	adds	r2, r2, r2
 80259ee:	1a52      	subs	r2, r2, r1
 80259f0:	e7dd      	b.n	80259ae <_printf_float+0x1b2>
 80259f2:	682a      	ldr	r2, [r5, #0]
 80259f4:	0553      	lsls	r3, r2, #21
 80259f6:	d408      	bmi.n	8025a0a <_printf_float+0x20e>
 80259f8:	692b      	ldr	r3, [r5, #16]
 80259fa:	003a      	movs	r2, r7
 80259fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80259fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025a00:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025a02:	47a0      	blx	r4
 8025a04:	3001      	adds	r0, #1
 8025a06:	d129      	bne.n	8025a5c <_printf_float+0x260>
 8025a08:	e754      	b.n	80258b4 <_printf_float+0xb8>
 8025a0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025a0c:	2b65      	cmp	r3, #101	@ 0x65
 8025a0e:	d800      	bhi.n	8025a12 <_printf_float+0x216>
 8025a10:	e0db      	b.n	8025bca <_printf_float+0x3ce>
 8025a12:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025a14:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025a16:	2200      	movs	r2, #0
 8025a18:	2300      	movs	r3, #0
 8025a1a:	f7da fd49 	bl	80004b0 <__aeabi_dcmpeq>
 8025a1e:	2800      	cmp	r0, #0
 8025a20:	d033      	beq.n	8025a8a <_printf_float+0x28e>
 8025a22:	2301      	movs	r3, #1
 8025a24:	4a37      	ldr	r2, [pc, #220]	@ (8025b04 <_printf_float+0x308>)
 8025a26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025a28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025a2a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025a2c:	47a0      	blx	r4
 8025a2e:	3001      	adds	r0, #1
 8025a30:	d100      	bne.n	8025a34 <_printf_float+0x238>
 8025a32:	e73f      	b.n	80258b4 <_printf_float+0xb8>
 8025a34:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025a36:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a38:	42b3      	cmp	r3, r6
 8025a3a:	db02      	blt.n	8025a42 <_printf_float+0x246>
 8025a3c:	682b      	ldr	r3, [r5, #0]
 8025a3e:	07db      	lsls	r3, r3, #31
 8025a40:	d50c      	bpl.n	8025a5c <_printf_float+0x260>
 8025a42:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025a46:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025a48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025a4c:	47a0      	blx	r4
 8025a4e:	2400      	movs	r4, #0
 8025a50:	3001      	adds	r0, #1
 8025a52:	d100      	bne.n	8025a56 <_printf_float+0x25a>
 8025a54:	e72e      	b.n	80258b4 <_printf_float+0xb8>
 8025a56:	1e73      	subs	r3, r6, #1
 8025a58:	42a3      	cmp	r3, r4
 8025a5a:	dc0a      	bgt.n	8025a72 <_printf_float+0x276>
 8025a5c:	682b      	ldr	r3, [r5, #0]
 8025a5e:	079b      	lsls	r3, r3, #30
 8025a60:	d500      	bpl.n	8025a64 <_printf_float+0x268>
 8025a62:	e106      	b.n	8025c72 <_printf_float+0x476>
 8025a64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025a66:	68e8      	ldr	r0, [r5, #12]
 8025a68:	4298      	cmp	r0, r3
 8025a6a:	db00      	blt.n	8025a6e <_printf_float+0x272>
 8025a6c:	e724      	b.n	80258b8 <_printf_float+0xbc>
 8025a6e:	0018      	movs	r0, r3
 8025a70:	e722      	b.n	80258b8 <_printf_float+0xbc>
 8025a72:	002a      	movs	r2, r5
 8025a74:	2301      	movs	r3, #1
 8025a76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025a78:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025a7a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025a7c:	321a      	adds	r2, #26
 8025a7e:	47b8      	blx	r7
 8025a80:	3001      	adds	r0, #1
 8025a82:	d100      	bne.n	8025a86 <_printf_float+0x28a>
 8025a84:	e716      	b.n	80258b4 <_printf_float+0xb8>
 8025a86:	3401      	adds	r4, #1
 8025a88:	e7e5      	b.n	8025a56 <_printf_float+0x25a>
 8025a8a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a8c:	2b00      	cmp	r3, #0
 8025a8e:	dc3b      	bgt.n	8025b08 <_printf_float+0x30c>
 8025a90:	2301      	movs	r3, #1
 8025a92:	4a1c      	ldr	r2, [pc, #112]	@ (8025b04 <_printf_float+0x308>)
 8025a94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025a96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025a98:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025a9a:	47a0      	blx	r4
 8025a9c:	3001      	adds	r0, #1
 8025a9e:	d100      	bne.n	8025aa2 <_printf_float+0x2a6>
 8025aa0:	e708      	b.n	80258b4 <_printf_float+0xb8>
 8025aa2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025aa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025aa6:	4333      	orrs	r3, r6
 8025aa8:	d102      	bne.n	8025ab0 <_printf_float+0x2b4>
 8025aaa:	682b      	ldr	r3, [r5, #0]
 8025aac:	07db      	lsls	r3, r3, #31
 8025aae:	d5d5      	bpl.n	8025a5c <_printf_float+0x260>
 8025ab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025ab2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025ab4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ab8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025aba:	47a0      	blx	r4
 8025abc:	2300      	movs	r3, #0
 8025abe:	3001      	adds	r0, #1
 8025ac0:	d100      	bne.n	8025ac4 <_printf_float+0x2c8>
 8025ac2:	e6f7      	b.n	80258b4 <_printf_float+0xb8>
 8025ac4:	930c      	str	r3, [sp, #48]	@ 0x30
 8025ac6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025ac8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025aca:	425b      	negs	r3, r3
 8025acc:	4293      	cmp	r3, r2
 8025ace:	dc01      	bgt.n	8025ad4 <_printf_float+0x2d8>
 8025ad0:	0033      	movs	r3, r6
 8025ad2:	e792      	b.n	80259fa <_printf_float+0x1fe>
 8025ad4:	002a      	movs	r2, r5
 8025ad6:	2301      	movs	r3, #1
 8025ad8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025adc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025ade:	321a      	adds	r2, #26
 8025ae0:	47a0      	blx	r4
 8025ae2:	3001      	adds	r0, #1
 8025ae4:	d100      	bne.n	8025ae8 <_printf_float+0x2ec>
 8025ae6:	e6e5      	b.n	80258b4 <_printf_float+0xb8>
 8025ae8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025aea:	3301      	adds	r3, #1
 8025aec:	e7ea      	b.n	8025ac4 <_printf_float+0x2c8>
 8025aee:	46c0      	nop			@ (mov r8, r8)
 8025af0:	7fefffff 	.word	0x7fefffff
 8025af4:	0802e96a 	.word	0x0802e96a
 8025af8:	0802e966 	.word	0x0802e966
 8025afc:	0802e972 	.word	0x0802e972
 8025b00:	0802e96e 	.word	0x0802e96e
 8025b04:	0802e976 	.word	0x0802e976
 8025b08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025b0a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025b0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b0e:	429e      	cmp	r6, r3
 8025b10:	dd00      	ble.n	8025b14 <_printf_float+0x318>
 8025b12:	001e      	movs	r6, r3
 8025b14:	2e00      	cmp	r6, #0
 8025b16:	dc31      	bgt.n	8025b7c <_printf_float+0x380>
 8025b18:	43f3      	mvns	r3, r6
 8025b1a:	2400      	movs	r4, #0
 8025b1c:	17db      	asrs	r3, r3, #31
 8025b1e:	4033      	ands	r3, r6
 8025b20:	930e      	str	r3, [sp, #56]	@ 0x38
 8025b22:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025b24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025b26:	1af3      	subs	r3, r6, r3
 8025b28:	42a3      	cmp	r3, r4
 8025b2a:	dc30      	bgt.n	8025b8e <_printf_float+0x392>
 8025b2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025b2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025b30:	429a      	cmp	r2, r3
 8025b32:	dc38      	bgt.n	8025ba6 <_printf_float+0x3aa>
 8025b34:	682b      	ldr	r3, [r5, #0]
 8025b36:	07db      	lsls	r3, r3, #31
 8025b38:	d435      	bmi.n	8025ba6 <_printf_float+0x3aa>
 8025b3a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025b3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025b3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025b40:	1b9b      	subs	r3, r3, r6
 8025b42:	1b14      	subs	r4, r2, r4
 8025b44:	429c      	cmp	r4, r3
 8025b46:	dd00      	ble.n	8025b4a <_printf_float+0x34e>
 8025b48:	001c      	movs	r4, r3
 8025b4a:	2c00      	cmp	r4, #0
 8025b4c:	dc34      	bgt.n	8025bb8 <_printf_float+0x3bc>
 8025b4e:	43e3      	mvns	r3, r4
 8025b50:	2600      	movs	r6, #0
 8025b52:	17db      	asrs	r3, r3, #31
 8025b54:	401c      	ands	r4, r3
 8025b56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025b58:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025b5a:	1ad3      	subs	r3, r2, r3
 8025b5c:	1b1b      	subs	r3, r3, r4
 8025b5e:	42b3      	cmp	r3, r6
 8025b60:	dc00      	bgt.n	8025b64 <_printf_float+0x368>
 8025b62:	e77b      	b.n	8025a5c <_printf_float+0x260>
 8025b64:	002a      	movs	r2, r5
 8025b66:	2301      	movs	r3, #1
 8025b68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b6c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025b6e:	321a      	adds	r2, #26
 8025b70:	47b8      	blx	r7
 8025b72:	3001      	adds	r0, #1
 8025b74:	d100      	bne.n	8025b78 <_printf_float+0x37c>
 8025b76:	e69d      	b.n	80258b4 <_printf_float+0xb8>
 8025b78:	3601      	adds	r6, #1
 8025b7a:	e7ec      	b.n	8025b56 <_printf_float+0x35a>
 8025b7c:	0033      	movs	r3, r6
 8025b7e:	003a      	movs	r2, r7
 8025b80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b84:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b86:	47a0      	blx	r4
 8025b88:	3001      	adds	r0, #1
 8025b8a:	d1c5      	bne.n	8025b18 <_printf_float+0x31c>
 8025b8c:	e692      	b.n	80258b4 <_printf_float+0xb8>
 8025b8e:	002a      	movs	r2, r5
 8025b90:	2301      	movs	r3, #1
 8025b92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b96:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025b98:	321a      	adds	r2, #26
 8025b9a:	47b0      	blx	r6
 8025b9c:	3001      	adds	r0, #1
 8025b9e:	d100      	bne.n	8025ba2 <_printf_float+0x3a6>
 8025ba0:	e688      	b.n	80258b4 <_printf_float+0xb8>
 8025ba2:	3401      	adds	r4, #1
 8025ba4:	e7bd      	b.n	8025b22 <_printf_float+0x326>
 8025ba6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025ba8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025baa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025bac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025bae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025bb0:	47a0      	blx	r4
 8025bb2:	3001      	adds	r0, #1
 8025bb4:	d1c1      	bne.n	8025b3a <_printf_float+0x33e>
 8025bb6:	e67d      	b.n	80258b4 <_printf_float+0xb8>
 8025bb8:	19ba      	adds	r2, r7, r6
 8025bba:	0023      	movs	r3, r4
 8025bbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025bbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025bc0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025bc2:	47b0      	blx	r6
 8025bc4:	3001      	adds	r0, #1
 8025bc6:	d1c2      	bne.n	8025b4e <_printf_float+0x352>
 8025bc8:	e674      	b.n	80258b4 <_printf_float+0xb8>
 8025bca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025bcc:	930c      	str	r3, [sp, #48]	@ 0x30
 8025bce:	2b01      	cmp	r3, #1
 8025bd0:	dc02      	bgt.n	8025bd8 <_printf_float+0x3dc>
 8025bd2:	2301      	movs	r3, #1
 8025bd4:	421a      	tst	r2, r3
 8025bd6:	d039      	beq.n	8025c4c <_printf_float+0x450>
 8025bd8:	2301      	movs	r3, #1
 8025bda:	003a      	movs	r2, r7
 8025bdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025bde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025be0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025be2:	47b0      	blx	r6
 8025be4:	3001      	adds	r0, #1
 8025be6:	d100      	bne.n	8025bea <_printf_float+0x3ee>
 8025be8:	e664      	b.n	80258b4 <_printf_float+0xb8>
 8025bea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025bec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025bee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025bf0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025bf2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025bf4:	47b0      	blx	r6
 8025bf6:	3001      	adds	r0, #1
 8025bf8:	d100      	bne.n	8025bfc <_printf_float+0x400>
 8025bfa:	e65b      	b.n	80258b4 <_printf_float+0xb8>
 8025bfc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025bfe:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025c00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c02:	2200      	movs	r2, #0
 8025c04:	3b01      	subs	r3, #1
 8025c06:	930c      	str	r3, [sp, #48]	@ 0x30
 8025c08:	2300      	movs	r3, #0
 8025c0a:	f7da fc51 	bl	80004b0 <__aeabi_dcmpeq>
 8025c0e:	2800      	cmp	r0, #0
 8025c10:	d11a      	bne.n	8025c48 <_printf_float+0x44c>
 8025c12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c14:	1c7a      	adds	r2, r7, #1
 8025c16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c18:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c1a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025c1c:	47b0      	blx	r6
 8025c1e:	3001      	adds	r0, #1
 8025c20:	d10e      	bne.n	8025c40 <_printf_float+0x444>
 8025c22:	e647      	b.n	80258b4 <_printf_float+0xb8>
 8025c24:	002a      	movs	r2, r5
 8025c26:	2301      	movs	r3, #1
 8025c28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c2c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025c2e:	321a      	adds	r2, #26
 8025c30:	47b8      	blx	r7
 8025c32:	3001      	adds	r0, #1
 8025c34:	d100      	bne.n	8025c38 <_printf_float+0x43c>
 8025c36:	e63d      	b.n	80258b4 <_printf_float+0xb8>
 8025c38:	3601      	adds	r6, #1
 8025c3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c3c:	429e      	cmp	r6, r3
 8025c3e:	dbf1      	blt.n	8025c24 <_printf_float+0x428>
 8025c40:	002a      	movs	r2, r5
 8025c42:	0023      	movs	r3, r4
 8025c44:	3250      	adds	r2, #80	@ 0x50
 8025c46:	e6d9      	b.n	80259fc <_printf_float+0x200>
 8025c48:	2600      	movs	r6, #0
 8025c4a:	e7f6      	b.n	8025c3a <_printf_float+0x43e>
 8025c4c:	003a      	movs	r2, r7
 8025c4e:	e7e2      	b.n	8025c16 <_printf_float+0x41a>
 8025c50:	002a      	movs	r2, r5
 8025c52:	2301      	movs	r3, #1
 8025c54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c58:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025c5a:	3219      	adds	r2, #25
 8025c5c:	47b0      	blx	r6
 8025c5e:	3001      	adds	r0, #1
 8025c60:	d100      	bne.n	8025c64 <_printf_float+0x468>
 8025c62:	e627      	b.n	80258b4 <_printf_float+0xb8>
 8025c64:	3401      	adds	r4, #1
 8025c66:	68eb      	ldr	r3, [r5, #12]
 8025c68:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025c6a:	1a9b      	subs	r3, r3, r2
 8025c6c:	42a3      	cmp	r3, r4
 8025c6e:	dcef      	bgt.n	8025c50 <_printf_float+0x454>
 8025c70:	e6f8      	b.n	8025a64 <_printf_float+0x268>
 8025c72:	2400      	movs	r4, #0
 8025c74:	e7f7      	b.n	8025c66 <_printf_float+0x46a>
 8025c76:	46c0      	nop			@ (mov r8, r8)

08025c78 <_printf_common>:
 8025c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025c7a:	0016      	movs	r6, r2
 8025c7c:	9301      	str	r3, [sp, #4]
 8025c7e:	688a      	ldr	r2, [r1, #8]
 8025c80:	690b      	ldr	r3, [r1, #16]
 8025c82:	000c      	movs	r4, r1
 8025c84:	9000      	str	r0, [sp, #0]
 8025c86:	4293      	cmp	r3, r2
 8025c88:	da00      	bge.n	8025c8c <_printf_common+0x14>
 8025c8a:	0013      	movs	r3, r2
 8025c8c:	0022      	movs	r2, r4
 8025c8e:	6033      	str	r3, [r6, #0]
 8025c90:	3243      	adds	r2, #67	@ 0x43
 8025c92:	7812      	ldrb	r2, [r2, #0]
 8025c94:	2a00      	cmp	r2, #0
 8025c96:	d001      	beq.n	8025c9c <_printf_common+0x24>
 8025c98:	3301      	adds	r3, #1
 8025c9a:	6033      	str	r3, [r6, #0]
 8025c9c:	6823      	ldr	r3, [r4, #0]
 8025c9e:	069b      	lsls	r3, r3, #26
 8025ca0:	d502      	bpl.n	8025ca8 <_printf_common+0x30>
 8025ca2:	6833      	ldr	r3, [r6, #0]
 8025ca4:	3302      	adds	r3, #2
 8025ca6:	6033      	str	r3, [r6, #0]
 8025ca8:	6822      	ldr	r2, [r4, #0]
 8025caa:	2306      	movs	r3, #6
 8025cac:	0015      	movs	r5, r2
 8025cae:	401d      	ands	r5, r3
 8025cb0:	421a      	tst	r2, r3
 8025cb2:	d027      	beq.n	8025d04 <_printf_common+0x8c>
 8025cb4:	0023      	movs	r3, r4
 8025cb6:	3343      	adds	r3, #67	@ 0x43
 8025cb8:	781b      	ldrb	r3, [r3, #0]
 8025cba:	1e5a      	subs	r2, r3, #1
 8025cbc:	4193      	sbcs	r3, r2
 8025cbe:	6822      	ldr	r2, [r4, #0]
 8025cc0:	0692      	lsls	r2, r2, #26
 8025cc2:	d430      	bmi.n	8025d26 <_printf_common+0xae>
 8025cc4:	0022      	movs	r2, r4
 8025cc6:	9901      	ldr	r1, [sp, #4]
 8025cc8:	9800      	ldr	r0, [sp, #0]
 8025cca:	9d08      	ldr	r5, [sp, #32]
 8025ccc:	3243      	adds	r2, #67	@ 0x43
 8025cce:	47a8      	blx	r5
 8025cd0:	3001      	adds	r0, #1
 8025cd2:	d025      	beq.n	8025d20 <_printf_common+0xa8>
 8025cd4:	2206      	movs	r2, #6
 8025cd6:	6823      	ldr	r3, [r4, #0]
 8025cd8:	2500      	movs	r5, #0
 8025cda:	4013      	ands	r3, r2
 8025cdc:	2b04      	cmp	r3, #4
 8025cde:	d105      	bne.n	8025cec <_printf_common+0x74>
 8025ce0:	6833      	ldr	r3, [r6, #0]
 8025ce2:	68e5      	ldr	r5, [r4, #12]
 8025ce4:	1aed      	subs	r5, r5, r3
 8025ce6:	43eb      	mvns	r3, r5
 8025ce8:	17db      	asrs	r3, r3, #31
 8025cea:	401d      	ands	r5, r3
 8025cec:	68a3      	ldr	r3, [r4, #8]
 8025cee:	6922      	ldr	r2, [r4, #16]
 8025cf0:	4293      	cmp	r3, r2
 8025cf2:	dd01      	ble.n	8025cf8 <_printf_common+0x80>
 8025cf4:	1a9b      	subs	r3, r3, r2
 8025cf6:	18ed      	adds	r5, r5, r3
 8025cf8:	2600      	movs	r6, #0
 8025cfa:	42b5      	cmp	r5, r6
 8025cfc:	d120      	bne.n	8025d40 <_printf_common+0xc8>
 8025cfe:	2000      	movs	r0, #0
 8025d00:	e010      	b.n	8025d24 <_printf_common+0xac>
 8025d02:	3501      	adds	r5, #1
 8025d04:	68e3      	ldr	r3, [r4, #12]
 8025d06:	6832      	ldr	r2, [r6, #0]
 8025d08:	1a9b      	subs	r3, r3, r2
 8025d0a:	42ab      	cmp	r3, r5
 8025d0c:	ddd2      	ble.n	8025cb4 <_printf_common+0x3c>
 8025d0e:	0022      	movs	r2, r4
 8025d10:	2301      	movs	r3, #1
 8025d12:	9901      	ldr	r1, [sp, #4]
 8025d14:	9800      	ldr	r0, [sp, #0]
 8025d16:	9f08      	ldr	r7, [sp, #32]
 8025d18:	3219      	adds	r2, #25
 8025d1a:	47b8      	blx	r7
 8025d1c:	3001      	adds	r0, #1
 8025d1e:	d1f0      	bne.n	8025d02 <_printf_common+0x8a>
 8025d20:	2001      	movs	r0, #1
 8025d22:	4240      	negs	r0, r0
 8025d24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025d26:	2030      	movs	r0, #48	@ 0x30
 8025d28:	18e1      	adds	r1, r4, r3
 8025d2a:	3143      	adds	r1, #67	@ 0x43
 8025d2c:	7008      	strb	r0, [r1, #0]
 8025d2e:	0021      	movs	r1, r4
 8025d30:	1c5a      	adds	r2, r3, #1
 8025d32:	3145      	adds	r1, #69	@ 0x45
 8025d34:	7809      	ldrb	r1, [r1, #0]
 8025d36:	18a2      	adds	r2, r4, r2
 8025d38:	3243      	adds	r2, #67	@ 0x43
 8025d3a:	3302      	adds	r3, #2
 8025d3c:	7011      	strb	r1, [r2, #0]
 8025d3e:	e7c1      	b.n	8025cc4 <_printf_common+0x4c>
 8025d40:	0022      	movs	r2, r4
 8025d42:	2301      	movs	r3, #1
 8025d44:	9901      	ldr	r1, [sp, #4]
 8025d46:	9800      	ldr	r0, [sp, #0]
 8025d48:	9f08      	ldr	r7, [sp, #32]
 8025d4a:	321a      	adds	r2, #26
 8025d4c:	47b8      	blx	r7
 8025d4e:	3001      	adds	r0, #1
 8025d50:	d0e6      	beq.n	8025d20 <_printf_common+0xa8>
 8025d52:	3601      	adds	r6, #1
 8025d54:	e7d1      	b.n	8025cfa <_printf_common+0x82>
	...

08025d58 <_printf_i>:
 8025d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025d5a:	b08b      	sub	sp, #44	@ 0x2c
 8025d5c:	9206      	str	r2, [sp, #24]
 8025d5e:	000a      	movs	r2, r1
 8025d60:	3243      	adds	r2, #67	@ 0x43
 8025d62:	9307      	str	r3, [sp, #28]
 8025d64:	9005      	str	r0, [sp, #20]
 8025d66:	9203      	str	r2, [sp, #12]
 8025d68:	7e0a      	ldrb	r2, [r1, #24]
 8025d6a:	000c      	movs	r4, r1
 8025d6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025d6e:	2a78      	cmp	r2, #120	@ 0x78
 8025d70:	d809      	bhi.n	8025d86 <_printf_i+0x2e>
 8025d72:	2a62      	cmp	r2, #98	@ 0x62
 8025d74:	d80b      	bhi.n	8025d8e <_printf_i+0x36>
 8025d76:	2a00      	cmp	r2, #0
 8025d78:	d100      	bne.n	8025d7c <_printf_i+0x24>
 8025d7a:	e0ba      	b.n	8025ef2 <_printf_i+0x19a>
 8025d7c:	497a      	ldr	r1, [pc, #488]	@ (8025f68 <_printf_i+0x210>)
 8025d7e:	9104      	str	r1, [sp, #16]
 8025d80:	2a58      	cmp	r2, #88	@ 0x58
 8025d82:	d100      	bne.n	8025d86 <_printf_i+0x2e>
 8025d84:	e08e      	b.n	8025ea4 <_printf_i+0x14c>
 8025d86:	0025      	movs	r5, r4
 8025d88:	3542      	adds	r5, #66	@ 0x42
 8025d8a:	702a      	strb	r2, [r5, #0]
 8025d8c:	e022      	b.n	8025dd4 <_printf_i+0x7c>
 8025d8e:	0010      	movs	r0, r2
 8025d90:	3863      	subs	r0, #99	@ 0x63
 8025d92:	2815      	cmp	r0, #21
 8025d94:	d8f7      	bhi.n	8025d86 <_printf_i+0x2e>
 8025d96:	f7da f9fb 	bl	8000190 <__gnu_thumb1_case_shi>
 8025d9a:	0016      	.short	0x0016
 8025d9c:	fff6001f 	.word	0xfff6001f
 8025da0:	fff6fff6 	.word	0xfff6fff6
 8025da4:	001ffff6 	.word	0x001ffff6
 8025da8:	fff6fff6 	.word	0xfff6fff6
 8025dac:	fff6fff6 	.word	0xfff6fff6
 8025db0:	0036009f 	.word	0x0036009f
 8025db4:	fff6007e 	.word	0xfff6007e
 8025db8:	00b0fff6 	.word	0x00b0fff6
 8025dbc:	0036fff6 	.word	0x0036fff6
 8025dc0:	fff6fff6 	.word	0xfff6fff6
 8025dc4:	0082      	.short	0x0082
 8025dc6:	0025      	movs	r5, r4
 8025dc8:	681a      	ldr	r2, [r3, #0]
 8025dca:	3542      	adds	r5, #66	@ 0x42
 8025dcc:	1d11      	adds	r1, r2, #4
 8025dce:	6019      	str	r1, [r3, #0]
 8025dd0:	6813      	ldr	r3, [r2, #0]
 8025dd2:	702b      	strb	r3, [r5, #0]
 8025dd4:	2301      	movs	r3, #1
 8025dd6:	e09e      	b.n	8025f16 <_printf_i+0x1be>
 8025dd8:	6818      	ldr	r0, [r3, #0]
 8025dda:	6809      	ldr	r1, [r1, #0]
 8025ddc:	1d02      	adds	r2, r0, #4
 8025dde:	060d      	lsls	r5, r1, #24
 8025de0:	d50b      	bpl.n	8025dfa <_printf_i+0xa2>
 8025de2:	6806      	ldr	r6, [r0, #0]
 8025de4:	601a      	str	r2, [r3, #0]
 8025de6:	2e00      	cmp	r6, #0
 8025de8:	da03      	bge.n	8025df2 <_printf_i+0x9a>
 8025dea:	232d      	movs	r3, #45	@ 0x2d
 8025dec:	9a03      	ldr	r2, [sp, #12]
 8025dee:	4276      	negs	r6, r6
 8025df0:	7013      	strb	r3, [r2, #0]
 8025df2:	4b5d      	ldr	r3, [pc, #372]	@ (8025f68 <_printf_i+0x210>)
 8025df4:	270a      	movs	r7, #10
 8025df6:	9304      	str	r3, [sp, #16]
 8025df8:	e018      	b.n	8025e2c <_printf_i+0xd4>
 8025dfa:	6806      	ldr	r6, [r0, #0]
 8025dfc:	601a      	str	r2, [r3, #0]
 8025dfe:	0649      	lsls	r1, r1, #25
 8025e00:	d5f1      	bpl.n	8025de6 <_printf_i+0x8e>
 8025e02:	b236      	sxth	r6, r6
 8025e04:	e7ef      	b.n	8025de6 <_printf_i+0x8e>
 8025e06:	6808      	ldr	r0, [r1, #0]
 8025e08:	6819      	ldr	r1, [r3, #0]
 8025e0a:	c940      	ldmia	r1!, {r6}
 8025e0c:	0605      	lsls	r5, r0, #24
 8025e0e:	d402      	bmi.n	8025e16 <_printf_i+0xbe>
 8025e10:	0640      	lsls	r0, r0, #25
 8025e12:	d500      	bpl.n	8025e16 <_printf_i+0xbe>
 8025e14:	b2b6      	uxth	r6, r6
 8025e16:	6019      	str	r1, [r3, #0]
 8025e18:	4b53      	ldr	r3, [pc, #332]	@ (8025f68 <_printf_i+0x210>)
 8025e1a:	270a      	movs	r7, #10
 8025e1c:	9304      	str	r3, [sp, #16]
 8025e1e:	2a6f      	cmp	r2, #111	@ 0x6f
 8025e20:	d100      	bne.n	8025e24 <_printf_i+0xcc>
 8025e22:	3f02      	subs	r7, #2
 8025e24:	0023      	movs	r3, r4
 8025e26:	2200      	movs	r2, #0
 8025e28:	3343      	adds	r3, #67	@ 0x43
 8025e2a:	701a      	strb	r2, [r3, #0]
 8025e2c:	6863      	ldr	r3, [r4, #4]
 8025e2e:	60a3      	str	r3, [r4, #8]
 8025e30:	2b00      	cmp	r3, #0
 8025e32:	db06      	blt.n	8025e42 <_printf_i+0xea>
 8025e34:	2104      	movs	r1, #4
 8025e36:	6822      	ldr	r2, [r4, #0]
 8025e38:	9d03      	ldr	r5, [sp, #12]
 8025e3a:	438a      	bics	r2, r1
 8025e3c:	6022      	str	r2, [r4, #0]
 8025e3e:	4333      	orrs	r3, r6
 8025e40:	d00c      	beq.n	8025e5c <_printf_i+0x104>
 8025e42:	9d03      	ldr	r5, [sp, #12]
 8025e44:	0030      	movs	r0, r6
 8025e46:	0039      	movs	r1, r7
 8025e48:	f7da fa32 	bl	80002b0 <__aeabi_uidivmod>
 8025e4c:	9b04      	ldr	r3, [sp, #16]
 8025e4e:	3d01      	subs	r5, #1
 8025e50:	5c5b      	ldrb	r3, [r3, r1]
 8025e52:	702b      	strb	r3, [r5, #0]
 8025e54:	0033      	movs	r3, r6
 8025e56:	0006      	movs	r6, r0
 8025e58:	429f      	cmp	r7, r3
 8025e5a:	d9f3      	bls.n	8025e44 <_printf_i+0xec>
 8025e5c:	2f08      	cmp	r7, #8
 8025e5e:	d109      	bne.n	8025e74 <_printf_i+0x11c>
 8025e60:	6823      	ldr	r3, [r4, #0]
 8025e62:	07db      	lsls	r3, r3, #31
 8025e64:	d506      	bpl.n	8025e74 <_printf_i+0x11c>
 8025e66:	6862      	ldr	r2, [r4, #4]
 8025e68:	6923      	ldr	r3, [r4, #16]
 8025e6a:	429a      	cmp	r2, r3
 8025e6c:	dc02      	bgt.n	8025e74 <_printf_i+0x11c>
 8025e6e:	2330      	movs	r3, #48	@ 0x30
 8025e70:	3d01      	subs	r5, #1
 8025e72:	702b      	strb	r3, [r5, #0]
 8025e74:	9b03      	ldr	r3, [sp, #12]
 8025e76:	1b5b      	subs	r3, r3, r5
 8025e78:	6123      	str	r3, [r4, #16]
 8025e7a:	9b07      	ldr	r3, [sp, #28]
 8025e7c:	0021      	movs	r1, r4
 8025e7e:	9300      	str	r3, [sp, #0]
 8025e80:	9805      	ldr	r0, [sp, #20]
 8025e82:	9b06      	ldr	r3, [sp, #24]
 8025e84:	aa09      	add	r2, sp, #36	@ 0x24
 8025e86:	f7ff fef7 	bl	8025c78 <_printf_common>
 8025e8a:	3001      	adds	r0, #1
 8025e8c:	d148      	bne.n	8025f20 <_printf_i+0x1c8>
 8025e8e:	2001      	movs	r0, #1
 8025e90:	4240      	negs	r0, r0
 8025e92:	b00b      	add	sp, #44	@ 0x2c
 8025e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025e96:	2220      	movs	r2, #32
 8025e98:	6809      	ldr	r1, [r1, #0]
 8025e9a:	430a      	orrs	r2, r1
 8025e9c:	6022      	str	r2, [r4, #0]
 8025e9e:	2278      	movs	r2, #120	@ 0x78
 8025ea0:	4932      	ldr	r1, [pc, #200]	@ (8025f6c <_printf_i+0x214>)
 8025ea2:	9104      	str	r1, [sp, #16]
 8025ea4:	0021      	movs	r1, r4
 8025ea6:	3145      	adds	r1, #69	@ 0x45
 8025ea8:	700a      	strb	r2, [r1, #0]
 8025eaa:	6819      	ldr	r1, [r3, #0]
 8025eac:	6822      	ldr	r2, [r4, #0]
 8025eae:	c940      	ldmia	r1!, {r6}
 8025eb0:	0610      	lsls	r0, r2, #24
 8025eb2:	d402      	bmi.n	8025eba <_printf_i+0x162>
 8025eb4:	0650      	lsls	r0, r2, #25
 8025eb6:	d500      	bpl.n	8025eba <_printf_i+0x162>
 8025eb8:	b2b6      	uxth	r6, r6
 8025eba:	6019      	str	r1, [r3, #0]
 8025ebc:	07d3      	lsls	r3, r2, #31
 8025ebe:	d502      	bpl.n	8025ec6 <_printf_i+0x16e>
 8025ec0:	2320      	movs	r3, #32
 8025ec2:	4313      	orrs	r3, r2
 8025ec4:	6023      	str	r3, [r4, #0]
 8025ec6:	2e00      	cmp	r6, #0
 8025ec8:	d001      	beq.n	8025ece <_printf_i+0x176>
 8025eca:	2710      	movs	r7, #16
 8025ecc:	e7aa      	b.n	8025e24 <_printf_i+0xcc>
 8025ece:	2220      	movs	r2, #32
 8025ed0:	6823      	ldr	r3, [r4, #0]
 8025ed2:	4393      	bics	r3, r2
 8025ed4:	6023      	str	r3, [r4, #0]
 8025ed6:	e7f8      	b.n	8025eca <_printf_i+0x172>
 8025ed8:	681a      	ldr	r2, [r3, #0]
 8025eda:	680d      	ldr	r5, [r1, #0]
 8025edc:	1d10      	adds	r0, r2, #4
 8025ede:	6949      	ldr	r1, [r1, #20]
 8025ee0:	6018      	str	r0, [r3, #0]
 8025ee2:	6813      	ldr	r3, [r2, #0]
 8025ee4:	062e      	lsls	r6, r5, #24
 8025ee6:	d501      	bpl.n	8025eec <_printf_i+0x194>
 8025ee8:	6019      	str	r1, [r3, #0]
 8025eea:	e002      	b.n	8025ef2 <_printf_i+0x19a>
 8025eec:	066d      	lsls	r5, r5, #25
 8025eee:	d5fb      	bpl.n	8025ee8 <_printf_i+0x190>
 8025ef0:	8019      	strh	r1, [r3, #0]
 8025ef2:	2300      	movs	r3, #0
 8025ef4:	9d03      	ldr	r5, [sp, #12]
 8025ef6:	6123      	str	r3, [r4, #16]
 8025ef8:	e7bf      	b.n	8025e7a <_printf_i+0x122>
 8025efa:	681a      	ldr	r2, [r3, #0]
 8025efc:	1d11      	adds	r1, r2, #4
 8025efe:	6019      	str	r1, [r3, #0]
 8025f00:	6815      	ldr	r5, [r2, #0]
 8025f02:	2100      	movs	r1, #0
 8025f04:	0028      	movs	r0, r5
 8025f06:	6862      	ldr	r2, [r4, #4]
 8025f08:	f000 fb7f 	bl	802660a <memchr>
 8025f0c:	2800      	cmp	r0, #0
 8025f0e:	d001      	beq.n	8025f14 <_printf_i+0x1bc>
 8025f10:	1b40      	subs	r0, r0, r5
 8025f12:	6060      	str	r0, [r4, #4]
 8025f14:	6863      	ldr	r3, [r4, #4]
 8025f16:	6123      	str	r3, [r4, #16]
 8025f18:	2300      	movs	r3, #0
 8025f1a:	9a03      	ldr	r2, [sp, #12]
 8025f1c:	7013      	strb	r3, [r2, #0]
 8025f1e:	e7ac      	b.n	8025e7a <_printf_i+0x122>
 8025f20:	002a      	movs	r2, r5
 8025f22:	6923      	ldr	r3, [r4, #16]
 8025f24:	9906      	ldr	r1, [sp, #24]
 8025f26:	9805      	ldr	r0, [sp, #20]
 8025f28:	9d07      	ldr	r5, [sp, #28]
 8025f2a:	47a8      	blx	r5
 8025f2c:	3001      	adds	r0, #1
 8025f2e:	d0ae      	beq.n	8025e8e <_printf_i+0x136>
 8025f30:	6823      	ldr	r3, [r4, #0]
 8025f32:	079b      	lsls	r3, r3, #30
 8025f34:	d415      	bmi.n	8025f62 <_printf_i+0x20a>
 8025f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025f38:	68e0      	ldr	r0, [r4, #12]
 8025f3a:	4298      	cmp	r0, r3
 8025f3c:	daa9      	bge.n	8025e92 <_printf_i+0x13a>
 8025f3e:	0018      	movs	r0, r3
 8025f40:	e7a7      	b.n	8025e92 <_printf_i+0x13a>
 8025f42:	0022      	movs	r2, r4
 8025f44:	2301      	movs	r3, #1
 8025f46:	9906      	ldr	r1, [sp, #24]
 8025f48:	9805      	ldr	r0, [sp, #20]
 8025f4a:	9e07      	ldr	r6, [sp, #28]
 8025f4c:	3219      	adds	r2, #25
 8025f4e:	47b0      	blx	r6
 8025f50:	3001      	adds	r0, #1
 8025f52:	d09c      	beq.n	8025e8e <_printf_i+0x136>
 8025f54:	3501      	adds	r5, #1
 8025f56:	68e3      	ldr	r3, [r4, #12]
 8025f58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025f5a:	1a9b      	subs	r3, r3, r2
 8025f5c:	42ab      	cmp	r3, r5
 8025f5e:	dcf0      	bgt.n	8025f42 <_printf_i+0x1ea>
 8025f60:	e7e9      	b.n	8025f36 <_printf_i+0x1de>
 8025f62:	2500      	movs	r5, #0
 8025f64:	e7f7      	b.n	8025f56 <_printf_i+0x1fe>
 8025f66:	46c0      	nop			@ (mov r8, r8)
 8025f68:	0802e978 	.word	0x0802e978
 8025f6c:	0802e989 	.word	0x0802e989

08025f70 <std>:
 8025f70:	2300      	movs	r3, #0
 8025f72:	b510      	push	{r4, lr}
 8025f74:	0004      	movs	r4, r0
 8025f76:	6003      	str	r3, [r0, #0]
 8025f78:	6043      	str	r3, [r0, #4]
 8025f7a:	6083      	str	r3, [r0, #8]
 8025f7c:	8181      	strh	r1, [r0, #12]
 8025f7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8025f80:	81c2      	strh	r2, [r0, #14]
 8025f82:	6103      	str	r3, [r0, #16]
 8025f84:	6143      	str	r3, [r0, #20]
 8025f86:	6183      	str	r3, [r0, #24]
 8025f88:	0019      	movs	r1, r3
 8025f8a:	2208      	movs	r2, #8
 8025f8c:	305c      	adds	r0, #92	@ 0x5c
 8025f8e:	f000 fa6b 	bl	8026468 <memset>
 8025f92:	4b0b      	ldr	r3, [pc, #44]	@ (8025fc0 <std+0x50>)
 8025f94:	6224      	str	r4, [r4, #32]
 8025f96:	6263      	str	r3, [r4, #36]	@ 0x24
 8025f98:	4b0a      	ldr	r3, [pc, #40]	@ (8025fc4 <std+0x54>)
 8025f9a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8025f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8025fc8 <std+0x58>)
 8025f9e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8025fcc <std+0x5c>)
 8025fa2:	6323      	str	r3, [r4, #48]	@ 0x30
 8025fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8025fd0 <std+0x60>)
 8025fa6:	429c      	cmp	r4, r3
 8025fa8:	d005      	beq.n	8025fb6 <std+0x46>
 8025faa:	4b0a      	ldr	r3, [pc, #40]	@ (8025fd4 <std+0x64>)
 8025fac:	429c      	cmp	r4, r3
 8025fae:	d002      	beq.n	8025fb6 <std+0x46>
 8025fb0:	4b09      	ldr	r3, [pc, #36]	@ (8025fd8 <std+0x68>)
 8025fb2:	429c      	cmp	r4, r3
 8025fb4:	d103      	bne.n	8025fbe <std+0x4e>
 8025fb6:	0020      	movs	r0, r4
 8025fb8:	3058      	adds	r0, #88	@ 0x58
 8025fba:	f000 fb23 	bl	8026604 <__retarget_lock_init_recursive>
 8025fbe:	bd10      	pop	{r4, pc}
 8025fc0:	0802621d 	.word	0x0802621d
 8025fc4:	08026245 	.word	0x08026245
 8025fc8:	0802627d 	.word	0x0802627d
 8025fcc:	080262a9 	.word	0x080262a9
 8025fd0:	200037cc 	.word	0x200037cc
 8025fd4:	20003834 	.word	0x20003834
 8025fd8:	2000389c 	.word	0x2000389c

08025fdc <stdio_exit_handler>:
 8025fdc:	b510      	push	{r4, lr}
 8025fde:	4a03      	ldr	r2, [pc, #12]	@ (8025fec <stdio_exit_handler+0x10>)
 8025fe0:	4903      	ldr	r1, [pc, #12]	@ (8025ff0 <stdio_exit_handler+0x14>)
 8025fe2:	4804      	ldr	r0, [pc, #16]	@ (8025ff4 <stdio_exit_handler+0x18>)
 8025fe4:	f000 f86c 	bl	80260c0 <_fwalk_sglue>
 8025fe8:	bd10      	pop	{r4, pc}
 8025fea:	46c0      	nop			@ (mov r8, r8)
 8025fec:	20000274 	.word	0x20000274
 8025ff0:	08028c01 	.word	0x08028c01
 8025ff4:	200003f0 	.word	0x200003f0

08025ff8 <cleanup_stdio>:
 8025ff8:	6841      	ldr	r1, [r0, #4]
 8025ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8026028 <cleanup_stdio+0x30>)
 8025ffc:	b510      	push	{r4, lr}
 8025ffe:	0004      	movs	r4, r0
 8026000:	4299      	cmp	r1, r3
 8026002:	d001      	beq.n	8026008 <cleanup_stdio+0x10>
 8026004:	f002 fdfc 	bl	8028c00 <_fflush_r>
 8026008:	68a1      	ldr	r1, [r4, #8]
 802600a:	4b08      	ldr	r3, [pc, #32]	@ (802602c <cleanup_stdio+0x34>)
 802600c:	4299      	cmp	r1, r3
 802600e:	d002      	beq.n	8026016 <cleanup_stdio+0x1e>
 8026010:	0020      	movs	r0, r4
 8026012:	f002 fdf5 	bl	8028c00 <_fflush_r>
 8026016:	68e1      	ldr	r1, [r4, #12]
 8026018:	4b05      	ldr	r3, [pc, #20]	@ (8026030 <cleanup_stdio+0x38>)
 802601a:	4299      	cmp	r1, r3
 802601c:	d002      	beq.n	8026024 <cleanup_stdio+0x2c>
 802601e:	0020      	movs	r0, r4
 8026020:	f002 fdee 	bl	8028c00 <_fflush_r>
 8026024:	bd10      	pop	{r4, pc}
 8026026:	46c0      	nop			@ (mov r8, r8)
 8026028:	200037cc 	.word	0x200037cc
 802602c:	20003834 	.word	0x20003834
 8026030:	2000389c 	.word	0x2000389c

08026034 <global_stdio_init.part.0>:
 8026034:	b510      	push	{r4, lr}
 8026036:	4b09      	ldr	r3, [pc, #36]	@ (802605c <global_stdio_init.part.0+0x28>)
 8026038:	4a09      	ldr	r2, [pc, #36]	@ (8026060 <global_stdio_init.part.0+0x2c>)
 802603a:	2104      	movs	r1, #4
 802603c:	601a      	str	r2, [r3, #0]
 802603e:	4809      	ldr	r0, [pc, #36]	@ (8026064 <global_stdio_init.part.0+0x30>)
 8026040:	2200      	movs	r2, #0
 8026042:	f7ff ff95 	bl	8025f70 <std>
 8026046:	2201      	movs	r2, #1
 8026048:	2109      	movs	r1, #9
 802604a:	4807      	ldr	r0, [pc, #28]	@ (8026068 <global_stdio_init.part.0+0x34>)
 802604c:	f7ff ff90 	bl	8025f70 <std>
 8026050:	2202      	movs	r2, #2
 8026052:	2112      	movs	r1, #18
 8026054:	4805      	ldr	r0, [pc, #20]	@ (802606c <global_stdio_init.part.0+0x38>)
 8026056:	f7ff ff8b 	bl	8025f70 <std>
 802605a:	bd10      	pop	{r4, pc}
 802605c:	20003904 	.word	0x20003904
 8026060:	08025fdd 	.word	0x08025fdd
 8026064:	200037cc 	.word	0x200037cc
 8026068:	20003834 	.word	0x20003834
 802606c:	2000389c 	.word	0x2000389c

08026070 <__sfp_lock_acquire>:
 8026070:	b510      	push	{r4, lr}
 8026072:	4802      	ldr	r0, [pc, #8]	@ (802607c <__sfp_lock_acquire+0xc>)
 8026074:	f000 fac7 	bl	8026606 <__retarget_lock_acquire_recursive>
 8026078:	bd10      	pop	{r4, pc}
 802607a:	46c0      	nop			@ (mov r8, r8)
 802607c:	2000390d 	.word	0x2000390d

08026080 <__sfp_lock_release>:
 8026080:	b510      	push	{r4, lr}
 8026082:	4802      	ldr	r0, [pc, #8]	@ (802608c <__sfp_lock_release+0xc>)
 8026084:	f000 fac0 	bl	8026608 <__retarget_lock_release_recursive>
 8026088:	bd10      	pop	{r4, pc}
 802608a:	46c0      	nop			@ (mov r8, r8)
 802608c:	2000390d 	.word	0x2000390d

08026090 <__sinit>:
 8026090:	b510      	push	{r4, lr}
 8026092:	0004      	movs	r4, r0
 8026094:	f7ff ffec 	bl	8026070 <__sfp_lock_acquire>
 8026098:	6a23      	ldr	r3, [r4, #32]
 802609a:	2b00      	cmp	r3, #0
 802609c:	d002      	beq.n	80260a4 <__sinit+0x14>
 802609e:	f7ff ffef 	bl	8026080 <__sfp_lock_release>
 80260a2:	bd10      	pop	{r4, pc}
 80260a4:	4b04      	ldr	r3, [pc, #16]	@ (80260b8 <__sinit+0x28>)
 80260a6:	6223      	str	r3, [r4, #32]
 80260a8:	4b04      	ldr	r3, [pc, #16]	@ (80260bc <__sinit+0x2c>)
 80260aa:	681b      	ldr	r3, [r3, #0]
 80260ac:	2b00      	cmp	r3, #0
 80260ae:	d1f6      	bne.n	802609e <__sinit+0xe>
 80260b0:	f7ff ffc0 	bl	8026034 <global_stdio_init.part.0>
 80260b4:	e7f3      	b.n	802609e <__sinit+0xe>
 80260b6:	46c0      	nop			@ (mov r8, r8)
 80260b8:	08025ff9 	.word	0x08025ff9
 80260bc:	20003904 	.word	0x20003904

080260c0 <_fwalk_sglue>:
 80260c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80260c2:	0014      	movs	r4, r2
 80260c4:	2600      	movs	r6, #0
 80260c6:	9000      	str	r0, [sp, #0]
 80260c8:	9101      	str	r1, [sp, #4]
 80260ca:	68a5      	ldr	r5, [r4, #8]
 80260cc:	6867      	ldr	r7, [r4, #4]
 80260ce:	3f01      	subs	r7, #1
 80260d0:	d504      	bpl.n	80260dc <_fwalk_sglue+0x1c>
 80260d2:	6824      	ldr	r4, [r4, #0]
 80260d4:	2c00      	cmp	r4, #0
 80260d6:	d1f8      	bne.n	80260ca <_fwalk_sglue+0xa>
 80260d8:	0030      	movs	r0, r6
 80260da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80260dc:	89ab      	ldrh	r3, [r5, #12]
 80260de:	2b01      	cmp	r3, #1
 80260e0:	d908      	bls.n	80260f4 <_fwalk_sglue+0x34>
 80260e2:	220e      	movs	r2, #14
 80260e4:	5eab      	ldrsh	r3, [r5, r2]
 80260e6:	3301      	adds	r3, #1
 80260e8:	d004      	beq.n	80260f4 <_fwalk_sglue+0x34>
 80260ea:	0029      	movs	r1, r5
 80260ec:	9800      	ldr	r0, [sp, #0]
 80260ee:	9b01      	ldr	r3, [sp, #4]
 80260f0:	4798      	blx	r3
 80260f2:	4306      	orrs	r6, r0
 80260f4:	3568      	adds	r5, #104	@ 0x68
 80260f6:	e7ea      	b.n	80260ce <_fwalk_sglue+0xe>

080260f8 <iprintf>:
 80260f8:	b40f      	push	{r0, r1, r2, r3}
 80260fa:	b507      	push	{r0, r1, r2, lr}
 80260fc:	4905      	ldr	r1, [pc, #20]	@ (8026114 <iprintf+0x1c>)
 80260fe:	ab04      	add	r3, sp, #16
 8026100:	6808      	ldr	r0, [r1, #0]
 8026102:	cb04      	ldmia	r3!, {r2}
 8026104:	6881      	ldr	r1, [r0, #8]
 8026106:	9301      	str	r3, [sp, #4]
 8026108:	f002 fbd8 	bl	80288bc <_vfiprintf_r>
 802610c:	b003      	add	sp, #12
 802610e:	bc08      	pop	{r3}
 8026110:	b004      	add	sp, #16
 8026112:	4718      	bx	r3
 8026114:	200003ec 	.word	0x200003ec

08026118 <_puts_r>:
 8026118:	6a03      	ldr	r3, [r0, #32]
 802611a:	b570      	push	{r4, r5, r6, lr}
 802611c:	0005      	movs	r5, r0
 802611e:	000e      	movs	r6, r1
 8026120:	6884      	ldr	r4, [r0, #8]
 8026122:	2b00      	cmp	r3, #0
 8026124:	d101      	bne.n	802612a <_puts_r+0x12>
 8026126:	f7ff ffb3 	bl	8026090 <__sinit>
 802612a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802612c:	07db      	lsls	r3, r3, #31
 802612e:	d405      	bmi.n	802613c <_puts_r+0x24>
 8026130:	89a3      	ldrh	r3, [r4, #12]
 8026132:	059b      	lsls	r3, r3, #22
 8026134:	d402      	bmi.n	802613c <_puts_r+0x24>
 8026136:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026138:	f000 fa65 	bl	8026606 <__retarget_lock_acquire_recursive>
 802613c:	89a3      	ldrh	r3, [r4, #12]
 802613e:	071b      	lsls	r3, r3, #28
 8026140:	d502      	bpl.n	8026148 <_puts_r+0x30>
 8026142:	6923      	ldr	r3, [r4, #16]
 8026144:	2b00      	cmp	r3, #0
 8026146:	d11f      	bne.n	8026188 <_puts_r+0x70>
 8026148:	0021      	movs	r1, r4
 802614a:	0028      	movs	r0, r5
 802614c:	f000 f92e 	bl	80263ac <__swsetup_r>
 8026150:	2800      	cmp	r0, #0
 8026152:	d019      	beq.n	8026188 <_puts_r+0x70>
 8026154:	2501      	movs	r5, #1
 8026156:	426d      	negs	r5, r5
 8026158:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802615a:	07db      	lsls	r3, r3, #31
 802615c:	d405      	bmi.n	802616a <_puts_r+0x52>
 802615e:	89a3      	ldrh	r3, [r4, #12]
 8026160:	059b      	lsls	r3, r3, #22
 8026162:	d402      	bmi.n	802616a <_puts_r+0x52>
 8026164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026166:	f000 fa4f 	bl	8026608 <__retarget_lock_release_recursive>
 802616a:	0028      	movs	r0, r5
 802616c:	bd70      	pop	{r4, r5, r6, pc}
 802616e:	3601      	adds	r6, #1
 8026170:	60a3      	str	r3, [r4, #8]
 8026172:	2b00      	cmp	r3, #0
 8026174:	da04      	bge.n	8026180 <_puts_r+0x68>
 8026176:	69a2      	ldr	r2, [r4, #24]
 8026178:	429a      	cmp	r2, r3
 802617a:	dc16      	bgt.n	80261aa <_puts_r+0x92>
 802617c:	290a      	cmp	r1, #10
 802617e:	d014      	beq.n	80261aa <_puts_r+0x92>
 8026180:	6823      	ldr	r3, [r4, #0]
 8026182:	1c5a      	adds	r2, r3, #1
 8026184:	6022      	str	r2, [r4, #0]
 8026186:	7019      	strb	r1, [r3, #0]
 8026188:	68a3      	ldr	r3, [r4, #8]
 802618a:	7831      	ldrb	r1, [r6, #0]
 802618c:	3b01      	subs	r3, #1
 802618e:	2900      	cmp	r1, #0
 8026190:	d1ed      	bne.n	802616e <_puts_r+0x56>
 8026192:	60a3      	str	r3, [r4, #8]
 8026194:	2b00      	cmp	r3, #0
 8026196:	da0f      	bge.n	80261b8 <_puts_r+0xa0>
 8026198:	0022      	movs	r2, r4
 802619a:	0028      	movs	r0, r5
 802619c:	310a      	adds	r1, #10
 802619e:	f000 f8c3 	bl	8026328 <__swbuf_r>
 80261a2:	3001      	adds	r0, #1
 80261a4:	d0d6      	beq.n	8026154 <_puts_r+0x3c>
 80261a6:	250a      	movs	r5, #10
 80261a8:	e7d6      	b.n	8026158 <_puts_r+0x40>
 80261aa:	0022      	movs	r2, r4
 80261ac:	0028      	movs	r0, r5
 80261ae:	f000 f8bb 	bl	8026328 <__swbuf_r>
 80261b2:	3001      	adds	r0, #1
 80261b4:	d1e8      	bne.n	8026188 <_puts_r+0x70>
 80261b6:	e7cd      	b.n	8026154 <_puts_r+0x3c>
 80261b8:	6823      	ldr	r3, [r4, #0]
 80261ba:	1c5a      	adds	r2, r3, #1
 80261bc:	6022      	str	r2, [r4, #0]
 80261be:	220a      	movs	r2, #10
 80261c0:	701a      	strb	r2, [r3, #0]
 80261c2:	e7f0      	b.n	80261a6 <_puts_r+0x8e>

080261c4 <puts>:
 80261c4:	b510      	push	{r4, lr}
 80261c6:	4b03      	ldr	r3, [pc, #12]	@ (80261d4 <puts+0x10>)
 80261c8:	0001      	movs	r1, r0
 80261ca:	6818      	ldr	r0, [r3, #0]
 80261cc:	f7ff ffa4 	bl	8026118 <_puts_r>
 80261d0:	bd10      	pop	{r4, pc}
 80261d2:	46c0      	nop			@ (mov r8, r8)
 80261d4:	200003ec 	.word	0x200003ec

080261d8 <siprintf>:
 80261d8:	b40e      	push	{r1, r2, r3}
 80261da:	b510      	push	{r4, lr}
 80261dc:	2400      	movs	r4, #0
 80261de:	490c      	ldr	r1, [pc, #48]	@ (8026210 <siprintf+0x38>)
 80261e0:	b09d      	sub	sp, #116	@ 0x74
 80261e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80261e4:	9002      	str	r0, [sp, #8]
 80261e6:	9006      	str	r0, [sp, #24]
 80261e8:	9107      	str	r1, [sp, #28]
 80261ea:	9104      	str	r1, [sp, #16]
 80261ec:	4809      	ldr	r0, [pc, #36]	@ (8026214 <siprintf+0x3c>)
 80261ee:	490a      	ldr	r1, [pc, #40]	@ (8026218 <siprintf+0x40>)
 80261f0:	cb04      	ldmia	r3!, {r2}
 80261f2:	9105      	str	r1, [sp, #20]
 80261f4:	6800      	ldr	r0, [r0, #0]
 80261f6:	a902      	add	r1, sp, #8
 80261f8:	9301      	str	r3, [sp, #4]
 80261fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80261fc:	f002 fa38 	bl	8028670 <_svfiprintf_r>
 8026200:	9b02      	ldr	r3, [sp, #8]
 8026202:	701c      	strb	r4, [r3, #0]
 8026204:	b01d      	add	sp, #116	@ 0x74
 8026206:	bc10      	pop	{r4}
 8026208:	bc08      	pop	{r3}
 802620a:	b003      	add	sp, #12
 802620c:	4718      	bx	r3
 802620e:	46c0      	nop			@ (mov r8, r8)
 8026210:	7fffffff 	.word	0x7fffffff
 8026214:	200003ec 	.word	0x200003ec
 8026218:	ffff0208 	.word	0xffff0208

0802621c <__sread>:
 802621c:	b570      	push	{r4, r5, r6, lr}
 802621e:	000c      	movs	r4, r1
 8026220:	250e      	movs	r5, #14
 8026222:	5f49      	ldrsh	r1, [r1, r5]
 8026224:	f000 f99c 	bl	8026560 <_read_r>
 8026228:	2800      	cmp	r0, #0
 802622a:	db03      	blt.n	8026234 <__sread+0x18>
 802622c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802622e:	181b      	adds	r3, r3, r0
 8026230:	6563      	str	r3, [r4, #84]	@ 0x54
 8026232:	bd70      	pop	{r4, r5, r6, pc}
 8026234:	89a3      	ldrh	r3, [r4, #12]
 8026236:	4a02      	ldr	r2, [pc, #8]	@ (8026240 <__sread+0x24>)
 8026238:	4013      	ands	r3, r2
 802623a:	81a3      	strh	r3, [r4, #12]
 802623c:	e7f9      	b.n	8026232 <__sread+0x16>
 802623e:	46c0      	nop			@ (mov r8, r8)
 8026240:	ffffefff 	.word	0xffffefff

08026244 <__swrite>:
 8026244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026246:	001f      	movs	r7, r3
 8026248:	898b      	ldrh	r3, [r1, #12]
 802624a:	0005      	movs	r5, r0
 802624c:	000c      	movs	r4, r1
 802624e:	0016      	movs	r6, r2
 8026250:	05db      	lsls	r3, r3, #23
 8026252:	d505      	bpl.n	8026260 <__swrite+0x1c>
 8026254:	230e      	movs	r3, #14
 8026256:	5ec9      	ldrsh	r1, [r1, r3]
 8026258:	2200      	movs	r2, #0
 802625a:	2302      	movs	r3, #2
 802625c:	f000 f96c 	bl	8026538 <_lseek_r>
 8026260:	89a3      	ldrh	r3, [r4, #12]
 8026262:	4a05      	ldr	r2, [pc, #20]	@ (8026278 <__swrite+0x34>)
 8026264:	0028      	movs	r0, r5
 8026266:	4013      	ands	r3, r2
 8026268:	81a3      	strh	r3, [r4, #12]
 802626a:	0032      	movs	r2, r6
 802626c:	230e      	movs	r3, #14
 802626e:	5ee1      	ldrsh	r1, [r4, r3]
 8026270:	003b      	movs	r3, r7
 8026272:	f000 f989 	bl	8026588 <_write_r>
 8026276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026278:	ffffefff 	.word	0xffffefff

0802627c <__sseek>:
 802627c:	b570      	push	{r4, r5, r6, lr}
 802627e:	000c      	movs	r4, r1
 8026280:	250e      	movs	r5, #14
 8026282:	5f49      	ldrsh	r1, [r1, r5]
 8026284:	f000 f958 	bl	8026538 <_lseek_r>
 8026288:	89a3      	ldrh	r3, [r4, #12]
 802628a:	1c42      	adds	r2, r0, #1
 802628c:	d103      	bne.n	8026296 <__sseek+0x1a>
 802628e:	4a05      	ldr	r2, [pc, #20]	@ (80262a4 <__sseek+0x28>)
 8026290:	4013      	ands	r3, r2
 8026292:	81a3      	strh	r3, [r4, #12]
 8026294:	bd70      	pop	{r4, r5, r6, pc}
 8026296:	2280      	movs	r2, #128	@ 0x80
 8026298:	0152      	lsls	r2, r2, #5
 802629a:	4313      	orrs	r3, r2
 802629c:	81a3      	strh	r3, [r4, #12]
 802629e:	6560      	str	r0, [r4, #84]	@ 0x54
 80262a0:	e7f8      	b.n	8026294 <__sseek+0x18>
 80262a2:	46c0      	nop			@ (mov r8, r8)
 80262a4:	ffffefff 	.word	0xffffefff

080262a8 <__sclose>:
 80262a8:	b510      	push	{r4, lr}
 80262aa:	230e      	movs	r3, #14
 80262ac:	5ec9      	ldrsh	r1, [r1, r3]
 80262ae:	f000 f931 	bl	8026514 <_close_r>
 80262b2:	bd10      	pop	{r4, pc}

080262b4 <_vsniprintf_r>:
 80262b4:	b530      	push	{r4, r5, lr}
 80262b6:	0005      	movs	r5, r0
 80262b8:	0014      	movs	r4, r2
 80262ba:	0008      	movs	r0, r1
 80262bc:	001a      	movs	r2, r3
 80262be:	b09b      	sub	sp, #108	@ 0x6c
 80262c0:	2c00      	cmp	r4, #0
 80262c2:	da05      	bge.n	80262d0 <_vsniprintf_r+0x1c>
 80262c4:	238b      	movs	r3, #139	@ 0x8b
 80262c6:	2001      	movs	r0, #1
 80262c8:	602b      	str	r3, [r5, #0]
 80262ca:	4240      	negs	r0, r0
 80262cc:	b01b      	add	sp, #108	@ 0x6c
 80262ce:	bd30      	pop	{r4, r5, pc}
 80262d0:	2382      	movs	r3, #130	@ 0x82
 80262d2:	4669      	mov	r1, sp
 80262d4:	009b      	lsls	r3, r3, #2
 80262d6:	818b      	strh	r3, [r1, #12]
 80262d8:	2100      	movs	r1, #0
 80262da:	9000      	str	r0, [sp, #0]
 80262dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80262de:	9004      	str	r0, [sp, #16]
 80262e0:	428c      	cmp	r4, r1
 80262e2:	d000      	beq.n	80262e6 <_vsniprintf_r+0x32>
 80262e4:	1e61      	subs	r1, r4, #1
 80262e6:	2301      	movs	r3, #1
 80262e8:	9102      	str	r1, [sp, #8]
 80262ea:	9105      	str	r1, [sp, #20]
 80262ec:	4669      	mov	r1, sp
 80262ee:	425b      	negs	r3, r3
 80262f0:	81cb      	strh	r3, [r1, #14]
 80262f2:	0028      	movs	r0, r5
 80262f4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80262f6:	f002 f9bb 	bl	8028670 <_svfiprintf_r>
 80262fa:	1c43      	adds	r3, r0, #1
 80262fc:	da01      	bge.n	8026302 <_vsniprintf_r+0x4e>
 80262fe:	238b      	movs	r3, #139	@ 0x8b
 8026300:	602b      	str	r3, [r5, #0]
 8026302:	2c00      	cmp	r4, #0
 8026304:	d0e2      	beq.n	80262cc <_vsniprintf_r+0x18>
 8026306:	2200      	movs	r2, #0
 8026308:	9b00      	ldr	r3, [sp, #0]
 802630a:	701a      	strb	r2, [r3, #0]
 802630c:	e7de      	b.n	80262cc <_vsniprintf_r+0x18>
	...

08026310 <vsniprintf>:
 8026310:	b513      	push	{r0, r1, r4, lr}
 8026312:	4c04      	ldr	r4, [pc, #16]	@ (8026324 <vsniprintf+0x14>)
 8026314:	9300      	str	r3, [sp, #0]
 8026316:	0013      	movs	r3, r2
 8026318:	000a      	movs	r2, r1
 802631a:	0001      	movs	r1, r0
 802631c:	6820      	ldr	r0, [r4, #0]
 802631e:	f7ff ffc9 	bl	80262b4 <_vsniprintf_r>
 8026322:	bd16      	pop	{r1, r2, r4, pc}
 8026324:	200003ec 	.word	0x200003ec

08026328 <__swbuf_r>:
 8026328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802632a:	0006      	movs	r6, r0
 802632c:	000d      	movs	r5, r1
 802632e:	0014      	movs	r4, r2
 8026330:	2800      	cmp	r0, #0
 8026332:	d004      	beq.n	802633e <__swbuf_r+0x16>
 8026334:	6a03      	ldr	r3, [r0, #32]
 8026336:	2b00      	cmp	r3, #0
 8026338:	d101      	bne.n	802633e <__swbuf_r+0x16>
 802633a:	f7ff fea9 	bl	8026090 <__sinit>
 802633e:	69a3      	ldr	r3, [r4, #24]
 8026340:	60a3      	str	r3, [r4, #8]
 8026342:	89a3      	ldrh	r3, [r4, #12]
 8026344:	071b      	lsls	r3, r3, #28
 8026346:	d502      	bpl.n	802634e <__swbuf_r+0x26>
 8026348:	6923      	ldr	r3, [r4, #16]
 802634a:	2b00      	cmp	r3, #0
 802634c:	d109      	bne.n	8026362 <__swbuf_r+0x3a>
 802634e:	0021      	movs	r1, r4
 8026350:	0030      	movs	r0, r6
 8026352:	f000 f82b 	bl	80263ac <__swsetup_r>
 8026356:	2800      	cmp	r0, #0
 8026358:	d003      	beq.n	8026362 <__swbuf_r+0x3a>
 802635a:	2501      	movs	r5, #1
 802635c:	426d      	negs	r5, r5
 802635e:	0028      	movs	r0, r5
 8026360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026362:	6923      	ldr	r3, [r4, #16]
 8026364:	6820      	ldr	r0, [r4, #0]
 8026366:	b2ef      	uxtb	r7, r5
 8026368:	1ac0      	subs	r0, r0, r3
 802636a:	6963      	ldr	r3, [r4, #20]
 802636c:	b2ed      	uxtb	r5, r5
 802636e:	4283      	cmp	r3, r0
 8026370:	dc05      	bgt.n	802637e <__swbuf_r+0x56>
 8026372:	0021      	movs	r1, r4
 8026374:	0030      	movs	r0, r6
 8026376:	f002 fc43 	bl	8028c00 <_fflush_r>
 802637a:	2800      	cmp	r0, #0
 802637c:	d1ed      	bne.n	802635a <__swbuf_r+0x32>
 802637e:	68a3      	ldr	r3, [r4, #8]
 8026380:	3001      	adds	r0, #1
 8026382:	3b01      	subs	r3, #1
 8026384:	60a3      	str	r3, [r4, #8]
 8026386:	6823      	ldr	r3, [r4, #0]
 8026388:	1c5a      	adds	r2, r3, #1
 802638a:	6022      	str	r2, [r4, #0]
 802638c:	701f      	strb	r7, [r3, #0]
 802638e:	6963      	ldr	r3, [r4, #20]
 8026390:	4283      	cmp	r3, r0
 8026392:	d004      	beq.n	802639e <__swbuf_r+0x76>
 8026394:	89a3      	ldrh	r3, [r4, #12]
 8026396:	07db      	lsls	r3, r3, #31
 8026398:	d5e1      	bpl.n	802635e <__swbuf_r+0x36>
 802639a:	2d0a      	cmp	r5, #10
 802639c:	d1df      	bne.n	802635e <__swbuf_r+0x36>
 802639e:	0021      	movs	r1, r4
 80263a0:	0030      	movs	r0, r6
 80263a2:	f002 fc2d 	bl	8028c00 <_fflush_r>
 80263a6:	2800      	cmp	r0, #0
 80263a8:	d0d9      	beq.n	802635e <__swbuf_r+0x36>
 80263aa:	e7d6      	b.n	802635a <__swbuf_r+0x32>

080263ac <__swsetup_r>:
 80263ac:	4b2d      	ldr	r3, [pc, #180]	@ (8026464 <__swsetup_r+0xb8>)
 80263ae:	b570      	push	{r4, r5, r6, lr}
 80263b0:	0005      	movs	r5, r0
 80263b2:	6818      	ldr	r0, [r3, #0]
 80263b4:	000c      	movs	r4, r1
 80263b6:	2800      	cmp	r0, #0
 80263b8:	d004      	beq.n	80263c4 <__swsetup_r+0x18>
 80263ba:	6a03      	ldr	r3, [r0, #32]
 80263bc:	2b00      	cmp	r3, #0
 80263be:	d101      	bne.n	80263c4 <__swsetup_r+0x18>
 80263c0:	f7ff fe66 	bl	8026090 <__sinit>
 80263c4:	220c      	movs	r2, #12
 80263c6:	5ea3      	ldrsh	r3, [r4, r2]
 80263c8:	071a      	lsls	r2, r3, #28
 80263ca:	d423      	bmi.n	8026414 <__swsetup_r+0x68>
 80263cc:	06da      	lsls	r2, r3, #27
 80263ce:	d407      	bmi.n	80263e0 <__swsetup_r+0x34>
 80263d0:	2209      	movs	r2, #9
 80263d2:	602a      	str	r2, [r5, #0]
 80263d4:	2240      	movs	r2, #64	@ 0x40
 80263d6:	2001      	movs	r0, #1
 80263d8:	4313      	orrs	r3, r2
 80263da:	81a3      	strh	r3, [r4, #12]
 80263dc:	4240      	negs	r0, r0
 80263de:	e03a      	b.n	8026456 <__swsetup_r+0xaa>
 80263e0:	075b      	lsls	r3, r3, #29
 80263e2:	d513      	bpl.n	802640c <__swsetup_r+0x60>
 80263e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80263e6:	2900      	cmp	r1, #0
 80263e8:	d008      	beq.n	80263fc <__swsetup_r+0x50>
 80263ea:	0023      	movs	r3, r4
 80263ec:	3344      	adds	r3, #68	@ 0x44
 80263ee:	4299      	cmp	r1, r3
 80263f0:	d002      	beq.n	80263f8 <__swsetup_r+0x4c>
 80263f2:	0028      	movs	r0, r5
 80263f4:	f000 ff9a 	bl	802732c <_free_r>
 80263f8:	2300      	movs	r3, #0
 80263fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80263fc:	2224      	movs	r2, #36	@ 0x24
 80263fe:	89a3      	ldrh	r3, [r4, #12]
 8026400:	4393      	bics	r3, r2
 8026402:	81a3      	strh	r3, [r4, #12]
 8026404:	2300      	movs	r3, #0
 8026406:	6063      	str	r3, [r4, #4]
 8026408:	6923      	ldr	r3, [r4, #16]
 802640a:	6023      	str	r3, [r4, #0]
 802640c:	2308      	movs	r3, #8
 802640e:	89a2      	ldrh	r2, [r4, #12]
 8026410:	4313      	orrs	r3, r2
 8026412:	81a3      	strh	r3, [r4, #12]
 8026414:	6923      	ldr	r3, [r4, #16]
 8026416:	2b00      	cmp	r3, #0
 8026418:	d10b      	bne.n	8026432 <__swsetup_r+0x86>
 802641a:	21a0      	movs	r1, #160	@ 0xa0
 802641c:	2280      	movs	r2, #128	@ 0x80
 802641e:	89a3      	ldrh	r3, [r4, #12]
 8026420:	0089      	lsls	r1, r1, #2
 8026422:	0092      	lsls	r2, r2, #2
 8026424:	400b      	ands	r3, r1
 8026426:	4293      	cmp	r3, r2
 8026428:	d003      	beq.n	8026432 <__swsetup_r+0x86>
 802642a:	0021      	movs	r1, r4
 802642c:	0028      	movs	r0, r5
 802642e:	f002 fc3d 	bl	8028cac <__smakebuf_r>
 8026432:	220c      	movs	r2, #12
 8026434:	5ea3      	ldrsh	r3, [r4, r2]
 8026436:	2101      	movs	r1, #1
 8026438:	001a      	movs	r2, r3
 802643a:	400a      	ands	r2, r1
 802643c:	420b      	tst	r3, r1
 802643e:	d00b      	beq.n	8026458 <__swsetup_r+0xac>
 8026440:	2200      	movs	r2, #0
 8026442:	60a2      	str	r2, [r4, #8]
 8026444:	6962      	ldr	r2, [r4, #20]
 8026446:	4252      	negs	r2, r2
 8026448:	61a2      	str	r2, [r4, #24]
 802644a:	2000      	movs	r0, #0
 802644c:	6922      	ldr	r2, [r4, #16]
 802644e:	4282      	cmp	r2, r0
 8026450:	d101      	bne.n	8026456 <__swsetup_r+0xaa>
 8026452:	061a      	lsls	r2, r3, #24
 8026454:	d4be      	bmi.n	80263d4 <__swsetup_r+0x28>
 8026456:	bd70      	pop	{r4, r5, r6, pc}
 8026458:	0799      	lsls	r1, r3, #30
 802645a:	d400      	bmi.n	802645e <__swsetup_r+0xb2>
 802645c:	6962      	ldr	r2, [r4, #20]
 802645e:	60a2      	str	r2, [r4, #8]
 8026460:	e7f3      	b.n	802644a <__swsetup_r+0x9e>
 8026462:	46c0      	nop			@ (mov r8, r8)
 8026464:	200003ec 	.word	0x200003ec

08026468 <memset>:
 8026468:	0003      	movs	r3, r0
 802646a:	1882      	adds	r2, r0, r2
 802646c:	4293      	cmp	r3, r2
 802646e:	d100      	bne.n	8026472 <memset+0xa>
 8026470:	4770      	bx	lr
 8026472:	7019      	strb	r1, [r3, #0]
 8026474:	3301      	adds	r3, #1
 8026476:	e7f9      	b.n	802646c <memset+0x4>

08026478 <strchr>:
 8026478:	b2c9      	uxtb	r1, r1
 802647a:	7803      	ldrb	r3, [r0, #0]
 802647c:	2b00      	cmp	r3, #0
 802647e:	d004      	beq.n	802648a <strchr+0x12>
 8026480:	428b      	cmp	r3, r1
 8026482:	d100      	bne.n	8026486 <strchr+0xe>
 8026484:	4770      	bx	lr
 8026486:	3001      	adds	r0, #1
 8026488:	e7f7      	b.n	802647a <strchr+0x2>
 802648a:	424b      	negs	r3, r1
 802648c:	4159      	adcs	r1, r3
 802648e:	4249      	negs	r1, r1
 8026490:	4008      	ands	r0, r1
 8026492:	e7f7      	b.n	8026484 <strchr+0xc>

08026494 <strncmp>:
 8026494:	b530      	push	{r4, r5, lr}
 8026496:	0005      	movs	r5, r0
 8026498:	1e10      	subs	r0, r2, #0
 802649a:	d00b      	beq.n	80264b4 <strncmp+0x20>
 802649c:	2400      	movs	r4, #0
 802649e:	3a01      	subs	r2, #1
 80264a0:	5d2b      	ldrb	r3, [r5, r4]
 80264a2:	5d08      	ldrb	r0, [r1, r4]
 80264a4:	4283      	cmp	r3, r0
 80264a6:	d104      	bne.n	80264b2 <strncmp+0x1e>
 80264a8:	4294      	cmp	r4, r2
 80264aa:	d002      	beq.n	80264b2 <strncmp+0x1e>
 80264ac:	3401      	adds	r4, #1
 80264ae:	2b00      	cmp	r3, #0
 80264b0:	d1f6      	bne.n	80264a0 <strncmp+0xc>
 80264b2:	1a18      	subs	r0, r3, r0
 80264b4:	bd30      	pop	{r4, r5, pc}

080264b6 <strncpy>:
 80264b6:	0003      	movs	r3, r0
 80264b8:	b530      	push	{r4, r5, lr}
 80264ba:	001d      	movs	r5, r3
 80264bc:	2a00      	cmp	r2, #0
 80264be:	d006      	beq.n	80264ce <strncpy+0x18>
 80264c0:	780c      	ldrb	r4, [r1, #0]
 80264c2:	3a01      	subs	r2, #1
 80264c4:	3301      	adds	r3, #1
 80264c6:	702c      	strb	r4, [r5, #0]
 80264c8:	3101      	adds	r1, #1
 80264ca:	2c00      	cmp	r4, #0
 80264cc:	d1f5      	bne.n	80264ba <strncpy+0x4>
 80264ce:	2100      	movs	r1, #0
 80264d0:	189a      	adds	r2, r3, r2
 80264d2:	4293      	cmp	r3, r2
 80264d4:	d100      	bne.n	80264d8 <strncpy+0x22>
 80264d6:	bd30      	pop	{r4, r5, pc}
 80264d8:	7019      	strb	r1, [r3, #0]
 80264da:	3301      	adds	r3, #1
 80264dc:	e7f9      	b.n	80264d2 <strncpy+0x1c>

080264de <strstr>:
 80264de:	780a      	ldrb	r2, [r1, #0]
 80264e0:	b530      	push	{r4, r5, lr}
 80264e2:	2a00      	cmp	r2, #0
 80264e4:	d10c      	bne.n	8026500 <strstr+0x22>
 80264e6:	bd30      	pop	{r4, r5, pc}
 80264e8:	429a      	cmp	r2, r3
 80264ea:	d108      	bne.n	80264fe <strstr+0x20>
 80264ec:	2301      	movs	r3, #1
 80264ee:	5ccc      	ldrb	r4, [r1, r3]
 80264f0:	2c00      	cmp	r4, #0
 80264f2:	d0f8      	beq.n	80264e6 <strstr+0x8>
 80264f4:	5cc5      	ldrb	r5, [r0, r3]
 80264f6:	42a5      	cmp	r5, r4
 80264f8:	d101      	bne.n	80264fe <strstr+0x20>
 80264fa:	3301      	adds	r3, #1
 80264fc:	e7f7      	b.n	80264ee <strstr+0x10>
 80264fe:	3001      	adds	r0, #1
 8026500:	7803      	ldrb	r3, [r0, #0]
 8026502:	2b00      	cmp	r3, #0
 8026504:	d1f0      	bne.n	80264e8 <strstr+0xa>
 8026506:	0018      	movs	r0, r3
 8026508:	e7ed      	b.n	80264e6 <strstr+0x8>
	...

0802650c <_localeconv_r>:
 802650c:	4800      	ldr	r0, [pc, #0]	@ (8026510 <_localeconv_r+0x4>)
 802650e:	4770      	bx	lr
 8026510:	20000370 	.word	0x20000370

08026514 <_close_r>:
 8026514:	2300      	movs	r3, #0
 8026516:	b570      	push	{r4, r5, r6, lr}
 8026518:	4d06      	ldr	r5, [pc, #24]	@ (8026534 <_close_r+0x20>)
 802651a:	0004      	movs	r4, r0
 802651c:	0008      	movs	r0, r1
 802651e:	602b      	str	r3, [r5, #0]
 8026520:	f7ec ffd2 	bl	80134c8 <_close>
 8026524:	1c43      	adds	r3, r0, #1
 8026526:	d103      	bne.n	8026530 <_close_r+0x1c>
 8026528:	682b      	ldr	r3, [r5, #0]
 802652a:	2b00      	cmp	r3, #0
 802652c:	d000      	beq.n	8026530 <_close_r+0x1c>
 802652e:	6023      	str	r3, [r4, #0]
 8026530:	bd70      	pop	{r4, r5, r6, pc}
 8026532:	46c0      	nop			@ (mov r8, r8)
 8026534:	20003908 	.word	0x20003908

08026538 <_lseek_r>:
 8026538:	b570      	push	{r4, r5, r6, lr}
 802653a:	0004      	movs	r4, r0
 802653c:	0008      	movs	r0, r1
 802653e:	0011      	movs	r1, r2
 8026540:	001a      	movs	r2, r3
 8026542:	2300      	movs	r3, #0
 8026544:	4d05      	ldr	r5, [pc, #20]	@ (802655c <_lseek_r+0x24>)
 8026546:	602b      	str	r3, [r5, #0]
 8026548:	f7ec ffdf 	bl	801350a <_lseek>
 802654c:	1c43      	adds	r3, r0, #1
 802654e:	d103      	bne.n	8026558 <_lseek_r+0x20>
 8026550:	682b      	ldr	r3, [r5, #0]
 8026552:	2b00      	cmp	r3, #0
 8026554:	d000      	beq.n	8026558 <_lseek_r+0x20>
 8026556:	6023      	str	r3, [r4, #0]
 8026558:	bd70      	pop	{r4, r5, r6, pc}
 802655a:	46c0      	nop			@ (mov r8, r8)
 802655c:	20003908 	.word	0x20003908

08026560 <_read_r>:
 8026560:	b570      	push	{r4, r5, r6, lr}
 8026562:	0004      	movs	r4, r0
 8026564:	0008      	movs	r0, r1
 8026566:	0011      	movs	r1, r2
 8026568:	001a      	movs	r2, r3
 802656a:	2300      	movs	r3, #0
 802656c:	4d05      	ldr	r5, [pc, #20]	@ (8026584 <_read_r+0x24>)
 802656e:	602b      	str	r3, [r5, #0]
 8026570:	f7ec ff8d 	bl	801348e <_read>
 8026574:	1c43      	adds	r3, r0, #1
 8026576:	d103      	bne.n	8026580 <_read_r+0x20>
 8026578:	682b      	ldr	r3, [r5, #0]
 802657a:	2b00      	cmp	r3, #0
 802657c:	d000      	beq.n	8026580 <_read_r+0x20>
 802657e:	6023      	str	r3, [r4, #0]
 8026580:	bd70      	pop	{r4, r5, r6, pc}
 8026582:	46c0      	nop			@ (mov r8, r8)
 8026584:	20003908 	.word	0x20003908

08026588 <_write_r>:
 8026588:	b570      	push	{r4, r5, r6, lr}
 802658a:	0004      	movs	r4, r0
 802658c:	0008      	movs	r0, r1
 802658e:	0011      	movs	r1, r2
 8026590:	001a      	movs	r2, r3
 8026592:	2300      	movs	r3, #0
 8026594:	4d05      	ldr	r5, [pc, #20]	@ (80265ac <_write_r+0x24>)
 8026596:	602b      	str	r3, [r5, #0]
 8026598:	f7ed fc5a 	bl	8013e50 <_write>
 802659c:	1c43      	adds	r3, r0, #1
 802659e:	d103      	bne.n	80265a8 <_write_r+0x20>
 80265a0:	682b      	ldr	r3, [r5, #0]
 80265a2:	2b00      	cmp	r3, #0
 80265a4:	d000      	beq.n	80265a8 <_write_r+0x20>
 80265a6:	6023      	str	r3, [r4, #0]
 80265a8:	bd70      	pop	{r4, r5, r6, pc}
 80265aa:	46c0      	nop			@ (mov r8, r8)
 80265ac:	20003908 	.word	0x20003908

080265b0 <__errno>:
 80265b0:	4b01      	ldr	r3, [pc, #4]	@ (80265b8 <__errno+0x8>)
 80265b2:	6818      	ldr	r0, [r3, #0]
 80265b4:	4770      	bx	lr
 80265b6:	46c0      	nop			@ (mov r8, r8)
 80265b8:	200003ec 	.word	0x200003ec

080265bc <__libc_init_array>:
 80265bc:	b570      	push	{r4, r5, r6, lr}
 80265be:	2600      	movs	r6, #0
 80265c0:	4c0c      	ldr	r4, [pc, #48]	@ (80265f4 <__libc_init_array+0x38>)
 80265c2:	4d0d      	ldr	r5, [pc, #52]	@ (80265f8 <__libc_init_array+0x3c>)
 80265c4:	1b64      	subs	r4, r4, r5
 80265c6:	10a4      	asrs	r4, r4, #2
 80265c8:	42a6      	cmp	r6, r4
 80265ca:	d109      	bne.n	80265e0 <__libc_init_array+0x24>
 80265cc:	2600      	movs	r6, #0
 80265ce:	f003 ffcb 	bl	802a568 <_init>
 80265d2:	4c0a      	ldr	r4, [pc, #40]	@ (80265fc <__libc_init_array+0x40>)
 80265d4:	4d0a      	ldr	r5, [pc, #40]	@ (8026600 <__libc_init_array+0x44>)
 80265d6:	1b64      	subs	r4, r4, r5
 80265d8:	10a4      	asrs	r4, r4, #2
 80265da:	42a6      	cmp	r6, r4
 80265dc:	d105      	bne.n	80265ea <__libc_init_array+0x2e>
 80265de:	bd70      	pop	{r4, r5, r6, pc}
 80265e0:	00b3      	lsls	r3, r6, #2
 80265e2:	58eb      	ldr	r3, [r5, r3]
 80265e4:	4798      	blx	r3
 80265e6:	3601      	adds	r6, #1
 80265e8:	e7ee      	b.n	80265c8 <__libc_init_array+0xc>
 80265ea:	00b3      	lsls	r3, r6, #2
 80265ec:	58eb      	ldr	r3, [r5, r3]
 80265ee:	4798      	blx	r3
 80265f0:	3601      	adds	r6, #1
 80265f2:	e7f2      	b.n	80265da <__libc_init_array+0x1e>
 80265f4:	0802edf0 	.word	0x0802edf0
 80265f8:	0802edf0 	.word	0x0802edf0
 80265fc:	0802edf4 	.word	0x0802edf4
 8026600:	0802edf0 	.word	0x0802edf0

08026604 <__retarget_lock_init_recursive>:
 8026604:	4770      	bx	lr

08026606 <__retarget_lock_acquire_recursive>:
 8026606:	4770      	bx	lr

08026608 <__retarget_lock_release_recursive>:
 8026608:	4770      	bx	lr

0802660a <memchr>:
 802660a:	b2c9      	uxtb	r1, r1
 802660c:	1882      	adds	r2, r0, r2
 802660e:	4290      	cmp	r0, r2
 8026610:	d101      	bne.n	8026616 <memchr+0xc>
 8026612:	2000      	movs	r0, #0
 8026614:	4770      	bx	lr
 8026616:	7803      	ldrb	r3, [r0, #0]
 8026618:	428b      	cmp	r3, r1
 802661a:	d0fb      	beq.n	8026614 <memchr+0xa>
 802661c:	3001      	adds	r0, #1
 802661e:	e7f6      	b.n	802660e <memchr+0x4>

08026620 <memcpy>:
 8026620:	2300      	movs	r3, #0
 8026622:	b510      	push	{r4, lr}
 8026624:	429a      	cmp	r2, r3
 8026626:	d100      	bne.n	802662a <memcpy+0xa>
 8026628:	bd10      	pop	{r4, pc}
 802662a:	5ccc      	ldrb	r4, [r1, r3]
 802662c:	54c4      	strb	r4, [r0, r3]
 802662e:	3301      	adds	r3, #1
 8026630:	e7f8      	b.n	8026624 <memcpy+0x4>
	...

08026634 <nan>:
 8026634:	2000      	movs	r0, #0
 8026636:	4901      	ldr	r1, [pc, #4]	@ (802663c <nan+0x8>)
 8026638:	4770      	bx	lr
 802663a:	46c0      	nop			@ (mov r8, r8)
 802663c:	7ff80000 	.word	0x7ff80000

08026640 <quorem>:
 8026640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026642:	6903      	ldr	r3, [r0, #16]
 8026644:	690c      	ldr	r4, [r1, #16]
 8026646:	b089      	sub	sp, #36	@ 0x24
 8026648:	9003      	str	r0, [sp, #12]
 802664a:	9106      	str	r1, [sp, #24]
 802664c:	2000      	movs	r0, #0
 802664e:	42a3      	cmp	r3, r4
 8026650:	db63      	blt.n	802671a <quorem+0xda>
 8026652:	000b      	movs	r3, r1
 8026654:	3c01      	subs	r4, #1
 8026656:	3314      	adds	r3, #20
 8026658:	00a5      	lsls	r5, r4, #2
 802665a:	9304      	str	r3, [sp, #16]
 802665c:	195b      	adds	r3, r3, r5
 802665e:	9305      	str	r3, [sp, #20]
 8026660:	9b03      	ldr	r3, [sp, #12]
 8026662:	3314      	adds	r3, #20
 8026664:	9301      	str	r3, [sp, #4]
 8026666:	195d      	adds	r5, r3, r5
 8026668:	9b05      	ldr	r3, [sp, #20]
 802666a:	682f      	ldr	r7, [r5, #0]
 802666c:	681e      	ldr	r6, [r3, #0]
 802666e:	0038      	movs	r0, r7
 8026670:	3601      	adds	r6, #1
 8026672:	0031      	movs	r1, r6
 8026674:	f7d9 fd96 	bl	80001a4 <__udivsi3>
 8026678:	9002      	str	r0, [sp, #8]
 802667a:	42b7      	cmp	r7, r6
 802667c:	d327      	bcc.n	80266ce <quorem+0x8e>
 802667e:	9b04      	ldr	r3, [sp, #16]
 8026680:	2700      	movs	r7, #0
 8026682:	469c      	mov	ip, r3
 8026684:	9e01      	ldr	r6, [sp, #4]
 8026686:	9707      	str	r7, [sp, #28]
 8026688:	4662      	mov	r2, ip
 802668a:	ca08      	ldmia	r2!, {r3}
 802668c:	6830      	ldr	r0, [r6, #0]
 802668e:	4694      	mov	ip, r2
 8026690:	9a02      	ldr	r2, [sp, #8]
 8026692:	b299      	uxth	r1, r3
 8026694:	4351      	muls	r1, r2
 8026696:	0c1b      	lsrs	r3, r3, #16
 8026698:	4353      	muls	r3, r2
 802669a:	19c9      	adds	r1, r1, r7
 802669c:	0c0a      	lsrs	r2, r1, #16
 802669e:	189b      	adds	r3, r3, r2
 80266a0:	b289      	uxth	r1, r1
 80266a2:	b282      	uxth	r2, r0
 80266a4:	1a52      	subs	r2, r2, r1
 80266a6:	9907      	ldr	r1, [sp, #28]
 80266a8:	0c1f      	lsrs	r7, r3, #16
 80266aa:	1852      	adds	r2, r2, r1
 80266ac:	0c00      	lsrs	r0, r0, #16
 80266ae:	b29b      	uxth	r3, r3
 80266b0:	1411      	asrs	r1, r2, #16
 80266b2:	1ac3      	subs	r3, r0, r3
 80266b4:	185b      	adds	r3, r3, r1
 80266b6:	1419      	asrs	r1, r3, #16
 80266b8:	b292      	uxth	r2, r2
 80266ba:	041b      	lsls	r3, r3, #16
 80266bc:	431a      	orrs	r2, r3
 80266be:	9b05      	ldr	r3, [sp, #20]
 80266c0:	9107      	str	r1, [sp, #28]
 80266c2:	c604      	stmia	r6!, {r2}
 80266c4:	4563      	cmp	r3, ip
 80266c6:	d2df      	bcs.n	8026688 <quorem+0x48>
 80266c8:	682b      	ldr	r3, [r5, #0]
 80266ca:	2b00      	cmp	r3, #0
 80266cc:	d02b      	beq.n	8026726 <quorem+0xe6>
 80266ce:	9906      	ldr	r1, [sp, #24]
 80266d0:	9803      	ldr	r0, [sp, #12]
 80266d2:	f001 fd6f 	bl	80281b4 <__mcmp>
 80266d6:	2800      	cmp	r0, #0
 80266d8:	db1e      	blt.n	8026718 <quorem+0xd8>
 80266da:	2600      	movs	r6, #0
 80266dc:	9d01      	ldr	r5, [sp, #4]
 80266de:	9904      	ldr	r1, [sp, #16]
 80266e0:	c901      	ldmia	r1!, {r0}
 80266e2:	682b      	ldr	r3, [r5, #0]
 80266e4:	b287      	uxth	r7, r0
 80266e6:	b29a      	uxth	r2, r3
 80266e8:	1bd2      	subs	r2, r2, r7
 80266ea:	1992      	adds	r2, r2, r6
 80266ec:	0c00      	lsrs	r0, r0, #16
 80266ee:	0c1b      	lsrs	r3, r3, #16
 80266f0:	1a1b      	subs	r3, r3, r0
 80266f2:	1410      	asrs	r0, r2, #16
 80266f4:	181b      	adds	r3, r3, r0
 80266f6:	141e      	asrs	r6, r3, #16
 80266f8:	b292      	uxth	r2, r2
 80266fa:	041b      	lsls	r3, r3, #16
 80266fc:	431a      	orrs	r2, r3
 80266fe:	9b05      	ldr	r3, [sp, #20]
 8026700:	c504      	stmia	r5!, {r2}
 8026702:	428b      	cmp	r3, r1
 8026704:	d2ec      	bcs.n	80266e0 <quorem+0xa0>
 8026706:	9a01      	ldr	r2, [sp, #4]
 8026708:	00a3      	lsls	r3, r4, #2
 802670a:	18d3      	adds	r3, r2, r3
 802670c:	681a      	ldr	r2, [r3, #0]
 802670e:	2a00      	cmp	r2, #0
 8026710:	d014      	beq.n	802673c <quorem+0xfc>
 8026712:	9b02      	ldr	r3, [sp, #8]
 8026714:	3301      	adds	r3, #1
 8026716:	9302      	str	r3, [sp, #8]
 8026718:	9802      	ldr	r0, [sp, #8]
 802671a:	b009      	add	sp, #36	@ 0x24
 802671c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802671e:	682b      	ldr	r3, [r5, #0]
 8026720:	2b00      	cmp	r3, #0
 8026722:	d104      	bne.n	802672e <quorem+0xee>
 8026724:	3c01      	subs	r4, #1
 8026726:	9b01      	ldr	r3, [sp, #4]
 8026728:	3d04      	subs	r5, #4
 802672a:	42ab      	cmp	r3, r5
 802672c:	d3f7      	bcc.n	802671e <quorem+0xde>
 802672e:	9b03      	ldr	r3, [sp, #12]
 8026730:	611c      	str	r4, [r3, #16]
 8026732:	e7cc      	b.n	80266ce <quorem+0x8e>
 8026734:	681a      	ldr	r2, [r3, #0]
 8026736:	2a00      	cmp	r2, #0
 8026738:	d104      	bne.n	8026744 <quorem+0x104>
 802673a:	3c01      	subs	r4, #1
 802673c:	9a01      	ldr	r2, [sp, #4]
 802673e:	3b04      	subs	r3, #4
 8026740:	429a      	cmp	r2, r3
 8026742:	d3f7      	bcc.n	8026734 <quorem+0xf4>
 8026744:	9b03      	ldr	r3, [sp, #12]
 8026746:	611c      	str	r4, [r3, #16]
 8026748:	e7e3      	b.n	8026712 <quorem+0xd2>
	...

0802674c <_dtoa_r>:
 802674c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802674e:	0014      	movs	r4, r2
 8026750:	001d      	movs	r5, r3
 8026752:	69c6      	ldr	r6, [r0, #28]
 8026754:	b09d      	sub	sp, #116	@ 0x74
 8026756:	940a      	str	r4, [sp, #40]	@ 0x28
 8026758:	950b      	str	r5, [sp, #44]	@ 0x2c
 802675a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 802675c:	9003      	str	r0, [sp, #12]
 802675e:	2e00      	cmp	r6, #0
 8026760:	d10f      	bne.n	8026782 <_dtoa_r+0x36>
 8026762:	2010      	movs	r0, #16
 8026764:	f001 f986 	bl	8027a74 <malloc>
 8026768:	9b03      	ldr	r3, [sp, #12]
 802676a:	1e02      	subs	r2, r0, #0
 802676c:	61d8      	str	r0, [r3, #28]
 802676e:	d104      	bne.n	802677a <_dtoa_r+0x2e>
 8026770:	21ef      	movs	r1, #239	@ 0xef
 8026772:	4bc7      	ldr	r3, [pc, #796]	@ (8026a90 <_dtoa_r+0x344>)
 8026774:	48c7      	ldr	r0, [pc, #796]	@ (8026a94 <_dtoa_r+0x348>)
 8026776:	f002 fb23 	bl	8028dc0 <__assert_func>
 802677a:	6046      	str	r6, [r0, #4]
 802677c:	6086      	str	r6, [r0, #8]
 802677e:	6006      	str	r6, [r0, #0]
 8026780:	60c6      	str	r6, [r0, #12]
 8026782:	9b03      	ldr	r3, [sp, #12]
 8026784:	69db      	ldr	r3, [r3, #28]
 8026786:	6819      	ldr	r1, [r3, #0]
 8026788:	2900      	cmp	r1, #0
 802678a:	d00b      	beq.n	80267a4 <_dtoa_r+0x58>
 802678c:	685a      	ldr	r2, [r3, #4]
 802678e:	2301      	movs	r3, #1
 8026790:	4093      	lsls	r3, r2
 8026792:	604a      	str	r2, [r1, #4]
 8026794:	608b      	str	r3, [r1, #8]
 8026796:	9803      	ldr	r0, [sp, #12]
 8026798:	f001 fa7e 	bl	8027c98 <_Bfree>
 802679c:	2200      	movs	r2, #0
 802679e:	9b03      	ldr	r3, [sp, #12]
 80267a0:	69db      	ldr	r3, [r3, #28]
 80267a2:	601a      	str	r2, [r3, #0]
 80267a4:	2d00      	cmp	r5, #0
 80267a6:	da1e      	bge.n	80267e6 <_dtoa_r+0x9a>
 80267a8:	2301      	movs	r3, #1
 80267aa:	603b      	str	r3, [r7, #0]
 80267ac:	006b      	lsls	r3, r5, #1
 80267ae:	085b      	lsrs	r3, r3, #1
 80267b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80267b2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80267b4:	4bb8      	ldr	r3, [pc, #736]	@ (8026a98 <_dtoa_r+0x34c>)
 80267b6:	4ab8      	ldr	r2, [pc, #736]	@ (8026a98 <_dtoa_r+0x34c>)
 80267b8:	403b      	ands	r3, r7
 80267ba:	4293      	cmp	r3, r2
 80267bc:	d116      	bne.n	80267ec <_dtoa_r+0xa0>
 80267be:	4bb7      	ldr	r3, [pc, #732]	@ (8026a9c <_dtoa_r+0x350>)
 80267c0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80267c2:	6013      	str	r3, [r2, #0]
 80267c4:	033b      	lsls	r3, r7, #12
 80267c6:	0b1b      	lsrs	r3, r3, #12
 80267c8:	4323      	orrs	r3, r4
 80267ca:	d101      	bne.n	80267d0 <_dtoa_r+0x84>
 80267cc:	f000 fd80 	bl	80272d0 <_dtoa_r+0xb84>
 80267d0:	4bb3      	ldr	r3, [pc, #716]	@ (8026aa0 <_dtoa_r+0x354>)
 80267d2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80267d4:	9308      	str	r3, [sp, #32]
 80267d6:	2a00      	cmp	r2, #0
 80267d8:	d002      	beq.n	80267e0 <_dtoa_r+0x94>
 80267da:	4bb2      	ldr	r3, [pc, #712]	@ (8026aa4 <_dtoa_r+0x358>)
 80267dc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80267de:	6013      	str	r3, [r2, #0]
 80267e0:	9808      	ldr	r0, [sp, #32]
 80267e2:	b01d      	add	sp, #116	@ 0x74
 80267e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80267e6:	2300      	movs	r3, #0
 80267e8:	603b      	str	r3, [r7, #0]
 80267ea:	e7e2      	b.n	80267b2 <_dtoa_r+0x66>
 80267ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80267ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80267f0:	9212      	str	r2, [sp, #72]	@ 0x48
 80267f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80267f4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80267f6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80267f8:	2200      	movs	r2, #0
 80267fa:	2300      	movs	r3, #0
 80267fc:	f7d9 fe58 	bl	80004b0 <__aeabi_dcmpeq>
 8026800:	1e06      	subs	r6, r0, #0
 8026802:	d00b      	beq.n	802681c <_dtoa_r+0xd0>
 8026804:	2301      	movs	r3, #1
 8026806:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026808:	6013      	str	r3, [r2, #0]
 802680a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802680c:	2b00      	cmp	r3, #0
 802680e:	d002      	beq.n	8026816 <_dtoa_r+0xca>
 8026810:	4ba5      	ldr	r3, [pc, #660]	@ (8026aa8 <_dtoa_r+0x35c>)
 8026812:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026814:	6013      	str	r3, [r2, #0]
 8026816:	4ba5      	ldr	r3, [pc, #660]	@ (8026aac <_dtoa_r+0x360>)
 8026818:	9308      	str	r3, [sp, #32]
 802681a:	e7e1      	b.n	80267e0 <_dtoa_r+0x94>
 802681c:	ab1a      	add	r3, sp, #104	@ 0x68
 802681e:	9301      	str	r3, [sp, #4]
 8026820:	ab1b      	add	r3, sp, #108	@ 0x6c
 8026822:	9300      	str	r3, [sp, #0]
 8026824:	9803      	ldr	r0, [sp, #12]
 8026826:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026828:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802682a:	f001 fde5 	bl	80283f8 <__d2b>
 802682e:	007a      	lsls	r2, r7, #1
 8026830:	9005      	str	r0, [sp, #20]
 8026832:	0d52      	lsrs	r2, r2, #21
 8026834:	d100      	bne.n	8026838 <_dtoa_r+0xec>
 8026836:	e07b      	b.n	8026930 <_dtoa_r+0x1e4>
 8026838:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802683a:	9618      	str	r6, [sp, #96]	@ 0x60
 802683c:	0319      	lsls	r1, r3, #12
 802683e:	4b9c      	ldr	r3, [pc, #624]	@ (8026ab0 <_dtoa_r+0x364>)
 8026840:	0b09      	lsrs	r1, r1, #12
 8026842:	430b      	orrs	r3, r1
 8026844:	499b      	ldr	r1, [pc, #620]	@ (8026ab4 <_dtoa_r+0x368>)
 8026846:	1857      	adds	r7, r2, r1
 8026848:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802684a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802684c:	0019      	movs	r1, r3
 802684e:	2200      	movs	r2, #0
 8026850:	4b99      	ldr	r3, [pc, #612]	@ (8026ab8 <_dtoa_r+0x36c>)
 8026852:	f7dc fb65 	bl	8002f20 <__aeabi_dsub>
 8026856:	4a99      	ldr	r2, [pc, #612]	@ (8026abc <_dtoa_r+0x370>)
 8026858:	4b99      	ldr	r3, [pc, #612]	@ (8026ac0 <_dtoa_r+0x374>)
 802685a:	f7dc f87b 	bl	8002954 <__aeabi_dmul>
 802685e:	4a99      	ldr	r2, [pc, #612]	@ (8026ac4 <_dtoa_r+0x378>)
 8026860:	4b99      	ldr	r3, [pc, #612]	@ (8026ac8 <_dtoa_r+0x37c>)
 8026862:	f7db f877 	bl	8001954 <__aeabi_dadd>
 8026866:	0004      	movs	r4, r0
 8026868:	0038      	movs	r0, r7
 802686a:	000d      	movs	r5, r1
 802686c:	f7dc ffc0 	bl	80037f0 <__aeabi_i2d>
 8026870:	4a96      	ldr	r2, [pc, #600]	@ (8026acc <_dtoa_r+0x380>)
 8026872:	4b97      	ldr	r3, [pc, #604]	@ (8026ad0 <_dtoa_r+0x384>)
 8026874:	f7dc f86e 	bl	8002954 <__aeabi_dmul>
 8026878:	0002      	movs	r2, r0
 802687a:	000b      	movs	r3, r1
 802687c:	0020      	movs	r0, r4
 802687e:	0029      	movs	r1, r5
 8026880:	f7db f868 	bl	8001954 <__aeabi_dadd>
 8026884:	0004      	movs	r4, r0
 8026886:	000d      	movs	r5, r1
 8026888:	f7dc ff76 	bl	8003778 <__aeabi_d2iz>
 802688c:	2200      	movs	r2, #0
 802688e:	9004      	str	r0, [sp, #16]
 8026890:	2300      	movs	r3, #0
 8026892:	0020      	movs	r0, r4
 8026894:	0029      	movs	r1, r5
 8026896:	f7d9 fe11 	bl	80004bc <__aeabi_dcmplt>
 802689a:	2800      	cmp	r0, #0
 802689c:	d00b      	beq.n	80268b6 <_dtoa_r+0x16a>
 802689e:	9804      	ldr	r0, [sp, #16]
 80268a0:	f7dc ffa6 	bl	80037f0 <__aeabi_i2d>
 80268a4:	002b      	movs	r3, r5
 80268a6:	0022      	movs	r2, r4
 80268a8:	f7d9 fe02 	bl	80004b0 <__aeabi_dcmpeq>
 80268ac:	4243      	negs	r3, r0
 80268ae:	4158      	adcs	r0, r3
 80268b0:	9b04      	ldr	r3, [sp, #16]
 80268b2:	1a1b      	subs	r3, r3, r0
 80268b4:	9304      	str	r3, [sp, #16]
 80268b6:	2301      	movs	r3, #1
 80268b8:	9315      	str	r3, [sp, #84]	@ 0x54
 80268ba:	9b04      	ldr	r3, [sp, #16]
 80268bc:	2b16      	cmp	r3, #22
 80268be:	d810      	bhi.n	80268e2 <_dtoa_r+0x196>
 80268c0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80268c2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80268c4:	9a04      	ldr	r2, [sp, #16]
 80268c6:	4b83      	ldr	r3, [pc, #524]	@ (8026ad4 <_dtoa_r+0x388>)
 80268c8:	00d2      	lsls	r2, r2, #3
 80268ca:	189b      	adds	r3, r3, r2
 80268cc:	681a      	ldr	r2, [r3, #0]
 80268ce:	685b      	ldr	r3, [r3, #4]
 80268d0:	f7d9 fdf4 	bl	80004bc <__aeabi_dcmplt>
 80268d4:	2800      	cmp	r0, #0
 80268d6:	d047      	beq.n	8026968 <_dtoa_r+0x21c>
 80268d8:	9b04      	ldr	r3, [sp, #16]
 80268da:	3b01      	subs	r3, #1
 80268dc:	9304      	str	r3, [sp, #16]
 80268de:	2300      	movs	r3, #0
 80268e0:	9315      	str	r3, [sp, #84]	@ 0x54
 80268e2:	2200      	movs	r2, #0
 80268e4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80268e6:	9206      	str	r2, [sp, #24]
 80268e8:	1bdb      	subs	r3, r3, r7
 80268ea:	1e5a      	subs	r2, r3, #1
 80268ec:	d53e      	bpl.n	802696c <_dtoa_r+0x220>
 80268ee:	2201      	movs	r2, #1
 80268f0:	1ad3      	subs	r3, r2, r3
 80268f2:	9306      	str	r3, [sp, #24]
 80268f4:	2300      	movs	r3, #0
 80268f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80268f8:	9b04      	ldr	r3, [sp, #16]
 80268fa:	2b00      	cmp	r3, #0
 80268fc:	db38      	blt.n	8026970 <_dtoa_r+0x224>
 80268fe:	9a04      	ldr	r2, [sp, #16]
 8026900:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026902:	4694      	mov	ip, r2
 8026904:	4463      	add	r3, ip
 8026906:	930d      	str	r3, [sp, #52]	@ 0x34
 8026908:	2300      	movs	r3, #0
 802690a:	9214      	str	r2, [sp, #80]	@ 0x50
 802690c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802690e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026910:	2401      	movs	r4, #1
 8026912:	2b09      	cmp	r3, #9
 8026914:	d862      	bhi.n	80269dc <_dtoa_r+0x290>
 8026916:	2b05      	cmp	r3, #5
 8026918:	dd02      	ble.n	8026920 <_dtoa_r+0x1d4>
 802691a:	2400      	movs	r4, #0
 802691c:	3b04      	subs	r3, #4
 802691e:	9322      	str	r3, [sp, #136]	@ 0x88
 8026920:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026922:	1e98      	subs	r0, r3, #2
 8026924:	2803      	cmp	r0, #3
 8026926:	d863      	bhi.n	80269f0 <_dtoa_r+0x2a4>
 8026928:	f7d9 fc28 	bl	800017c <__gnu_thumb1_case_uqi>
 802692c:	2b385654 	.word	0x2b385654
 8026930:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026932:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8026934:	18f6      	adds	r6, r6, r3
 8026936:	4b68      	ldr	r3, [pc, #416]	@ (8026ad8 <_dtoa_r+0x38c>)
 8026938:	18f2      	adds	r2, r6, r3
 802693a:	2a20      	cmp	r2, #32
 802693c:	dd0f      	ble.n	802695e <_dtoa_r+0x212>
 802693e:	2340      	movs	r3, #64	@ 0x40
 8026940:	1a9b      	subs	r3, r3, r2
 8026942:	409f      	lsls	r7, r3
 8026944:	4b65      	ldr	r3, [pc, #404]	@ (8026adc <_dtoa_r+0x390>)
 8026946:	0038      	movs	r0, r7
 8026948:	18f3      	adds	r3, r6, r3
 802694a:	40dc      	lsrs	r4, r3
 802694c:	4320      	orrs	r0, r4
 802694e:	f7dc ff7d 	bl	800384c <__aeabi_ui2d>
 8026952:	2201      	movs	r2, #1
 8026954:	4b62      	ldr	r3, [pc, #392]	@ (8026ae0 <_dtoa_r+0x394>)
 8026956:	1e77      	subs	r7, r6, #1
 8026958:	18cb      	adds	r3, r1, r3
 802695a:	9218      	str	r2, [sp, #96]	@ 0x60
 802695c:	e776      	b.n	802684c <_dtoa_r+0x100>
 802695e:	2320      	movs	r3, #32
 8026960:	0020      	movs	r0, r4
 8026962:	1a9b      	subs	r3, r3, r2
 8026964:	4098      	lsls	r0, r3
 8026966:	e7f2      	b.n	802694e <_dtoa_r+0x202>
 8026968:	9015      	str	r0, [sp, #84]	@ 0x54
 802696a:	e7ba      	b.n	80268e2 <_dtoa_r+0x196>
 802696c:	920d      	str	r2, [sp, #52]	@ 0x34
 802696e:	e7c3      	b.n	80268f8 <_dtoa_r+0x1ac>
 8026970:	9b06      	ldr	r3, [sp, #24]
 8026972:	9a04      	ldr	r2, [sp, #16]
 8026974:	1a9b      	subs	r3, r3, r2
 8026976:	9306      	str	r3, [sp, #24]
 8026978:	4253      	negs	r3, r2
 802697a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802697c:	2300      	movs	r3, #0
 802697e:	9314      	str	r3, [sp, #80]	@ 0x50
 8026980:	e7c5      	b.n	802690e <_dtoa_r+0x1c2>
 8026982:	2301      	movs	r3, #1
 8026984:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026986:	9310      	str	r3, [sp, #64]	@ 0x40
 8026988:	4694      	mov	ip, r2
 802698a:	9b04      	ldr	r3, [sp, #16]
 802698c:	4463      	add	r3, ip
 802698e:	930e      	str	r3, [sp, #56]	@ 0x38
 8026990:	3301      	adds	r3, #1
 8026992:	9309      	str	r3, [sp, #36]	@ 0x24
 8026994:	2b00      	cmp	r3, #0
 8026996:	dc08      	bgt.n	80269aa <_dtoa_r+0x25e>
 8026998:	2301      	movs	r3, #1
 802699a:	e006      	b.n	80269aa <_dtoa_r+0x25e>
 802699c:	2301      	movs	r3, #1
 802699e:	9310      	str	r3, [sp, #64]	@ 0x40
 80269a0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80269a2:	2b00      	cmp	r3, #0
 80269a4:	dd28      	ble.n	80269f8 <_dtoa_r+0x2ac>
 80269a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80269a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80269aa:	9a03      	ldr	r2, [sp, #12]
 80269ac:	2100      	movs	r1, #0
 80269ae:	69d0      	ldr	r0, [r2, #28]
 80269b0:	2204      	movs	r2, #4
 80269b2:	0015      	movs	r5, r2
 80269b4:	3514      	adds	r5, #20
 80269b6:	429d      	cmp	r5, r3
 80269b8:	d923      	bls.n	8026a02 <_dtoa_r+0x2b6>
 80269ba:	6041      	str	r1, [r0, #4]
 80269bc:	9803      	ldr	r0, [sp, #12]
 80269be:	f001 f927 	bl	8027c10 <_Balloc>
 80269c2:	9008      	str	r0, [sp, #32]
 80269c4:	2800      	cmp	r0, #0
 80269c6:	d11f      	bne.n	8026a08 <_dtoa_r+0x2bc>
 80269c8:	21b0      	movs	r1, #176	@ 0xb0
 80269ca:	4b46      	ldr	r3, [pc, #280]	@ (8026ae4 <_dtoa_r+0x398>)
 80269cc:	4831      	ldr	r0, [pc, #196]	@ (8026a94 <_dtoa_r+0x348>)
 80269ce:	9a08      	ldr	r2, [sp, #32]
 80269d0:	31ff      	adds	r1, #255	@ 0xff
 80269d2:	e6d0      	b.n	8026776 <_dtoa_r+0x2a>
 80269d4:	2300      	movs	r3, #0
 80269d6:	e7e2      	b.n	802699e <_dtoa_r+0x252>
 80269d8:	2300      	movs	r3, #0
 80269da:	e7d3      	b.n	8026984 <_dtoa_r+0x238>
 80269dc:	2300      	movs	r3, #0
 80269de:	9410      	str	r4, [sp, #64]	@ 0x40
 80269e0:	9322      	str	r3, [sp, #136]	@ 0x88
 80269e2:	3b01      	subs	r3, #1
 80269e4:	2200      	movs	r2, #0
 80269e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80269e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80269ea:	3313      	adds	r3, #19
 80269ec:	9223      	str	r2, [sp, #140]	@ 0x8c
 80269ee:	e7dc      	b.n	80269aa <_dtoa_r+0x25e>
 80269f0:	2301      	movs	r3, #1
 80269f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80269f4:	3b02      	subs	r3, #2
 80269f6:	e7f5      	b.n	80269e4 <_dtoa_r+0x298>
 80269f8:	2301      	movs	r3, #1
 80269fa:	001a      	movs	r2, r3
 80269fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80269fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a00:	e7f4      	b.n	80269ec <_dtoa_r+0x2a0>
 8026a02:	3101      	adds	r1, #1
 8026a04:	0052      	lsls	r2, r2, #1
 8026a06:	e7d4      	b.n	80269b2 <_dtoa_r+0x266>
 8026a08:	9b03      	ldr	r3, [sp, #12]
 8026a0a:	9a08      	ldr	r2, [sp, #32]
 8026a0c:	69db      	ldr	r3, [r3, #28]
 8026a0e:	601a      	str	r2, [r3, #0]
 8026a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026a12:	2b0e      	cmp	r3, #14
 8026a14:	d900      	bls.n	8026a18 <_dtoa_r+0x2cc>
 8026a16:	e0d6      	b.n	8026bc6 <_dtoa_r+0x47a>
 8026a18:	2c00      	cmp	r4, #0
 8026a1a:	d100      	bne.n	8026a1e <_dtoa_r+0x2d2>
 8026a1c:	e0d3      	b.n	8026bc6 <_dtoa_r+0x47a>
 8026a1e:	9b04      	ldr	r3, [sp, #16]
 8026a20:	2b00      	cmp	r3, #0
 8026a22:	dd63      	ble.n	8026aec <_dtoa_r+0x3a0>
 8026a24:	210f      	movs	r1, #15
 8026a26:	9a04      	ldr	r2, [sp, #16]
 8026a28:	4b2a      	ldr	r3, [pc, #168]	@ (8026ad4 <_dtoa_r+0x388>)
 8026a2a:	400a      	ands	r2, r1
 8026a2c:	00d2      	lsls	r2, r2, #3
 8026a2e:	189b      	adds	r3, r3, r2
 8026a30:	681e      	ldr	r6, [r3, #0]
 8026a32:	685f      	ldr	r7, [r3, #4]
 8026a34:	9b04      	ldr	r3, [sp, #16]
 8026a36:	2402      	movs	r4, #2
 8026a38:	111d      	asrs	r5, r3, #4
 8026a3a:	05db      	lsls	r3, r3, #23
 8026a3c:	d50a      	bpl.n	8026a54 <_dtoa_r+0x308>
 8026a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8026ae8 <_dtoa_r+0x39c>)
 8026a40:	400d      	ands	r5, r1
 8026a42:	6a1a      	ldr	r2, [r3, #32]
 8026a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026a46:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026a48:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026a4a:	f7db fb49 	bl	80020e0 <__aeabi_ddiv>
 8026a4e:	900a      	str	r0, [sp, #40]	@ 0x28
 8026a50:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026a52:	3401      	adds	r4, #1
 8026a54:	4b24      	ldr	r3, [pc, #144]	@ (8026ae8 <_dtoa_r+0x39c>)
 8026a56:	930c      	str	r3, [sp, #48]	@ 0x30
 8026a58:	2d00      	cmp	r5, #0
 8026a5a:	d108      	bne.n	8026a6e <_dtoa_r+0x322>
 8026a5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026a5e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026a60:	0032      	movs	r2, r6
 8026a62:	003b      	movs	r3, r7
 8026a64:	f7db fb3c 	bl	80020e0 <__aeabi_ddiv>
 8026a68:	900a      	str	r0, [sp, #40]	@ 0x28
 8026a6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026a6c:	e059      	b.n	8026b22 <_dtoa_r+0x3d6>
 8026a6e:	2301      	movs	r3, #1
 8026a70:	421d      	tst	r5, r3
 8026a72:	d009      	beq.n	8026a88 <_dtoa_r+0x33c>
 8026a74:	18e4      	adds	r4, r4, r3
 8026a76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026a78:	0030      	movs	r0, r6
 8026a7a:	681a      	ldr	r2, [r3, #0]
 8026a7c:	685b      	ldr	r3, [r3, #4]
 8026a7e:	0039      	movs	r1, r7
 8026a80:	f7db ff68 	bl	8002954 <__aeabi_dmul>
 8026a84:	0006      	movs	r6, r0
 8026a86:	000f      	movs	r7, r1
 8026a88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026a8a:	106d      	asrs	r5, r5, #1
 8026a8c:	3308      	adds	r3, #8
 8026a8e:	e7e2      	b.n	8026a56 <_dtoa_r+0x30a>
 8026a90:	0802e9af 	.word	0x0802e9af
 8026a94:	0802e9c6 	.word	0x0802e9c6
 8026a98:	7ff00000 	.word	0x7ff00000
 8026a9c:	0000270f 	.word	0x0000270f
 8026aa0:	0802e9ab 	.word	0x0802e9ab
 8026aa4:	0802e9ae 	.word	0x0802e9ae
 8026aa8:	0802e977 	.word	0x0802e977
 8026aac:	0802e976 	.word	0x0802e976
 8026ab0:	3ff00000 	.word	0x3ff00000
 8026ab4:	fffffc01 	.word	0xfffffc01
 8026ab8:	3ff80000 	.word	0x3ff80000
 8026abc:	636f4361 	.word	0x636f4361
 8026ac0:	3fd287a7 	.word	0x3fd287a7
 8026ac4:	8b60c8b3 	.word	0x8b60c8b3
 8026ac8:	3fc68a28 	.word	0x3fc68a28
 8026acc:	509f79fb 	.word	0x509f79fb
 8026ad0:	3fd34413 	.word	0x3fd34413
 8026ad4:	0802ecc0 	.word	0x0802ecc0
 8026ad8:	00000432 	.word	0x00000432
 8026adc:	00000412 	.word	0x00000412
 8026ae0:	fe100000 	.word	0xfe100000
 8026ae4:	0802ea1e 	.word	0x0802ea1e
 8026ae8:	0802ec98 	.word	0x0802ec98
 8026aec:	9b04      	ldr	r3, [sp, #16]
 8026aee:	2402      	movs	r4, #2
 8026af0:	2b00      	cmp	r3, #0
 8026af2:	d016      	beq.n	8026b22 <_dtoa_r+0x3d6>
 8026af4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026af6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026af8:	220f      	movs	r2, #15
 8026afa:	425d      	negs	r5, r3
 8026afc:	402a      	ands	r2, r5
 8026afe:	4bd5      	ldr	r3, [pc, #852]	@ (8026e54 <_dtoa_r+0x708>)
 8026b00:	00d2      	lsls	r2, r2, #3
 8026b02:	189b      	adds	r3, r3, r2
 8026b04:	681a      	ldr	r2, [r3, #0]
 8026b06:	685b      	ldr	r3, [r3, #4]
 8026b08:	f7db ff24 	bl	8002954 <__aeabi_dmul>
 8026b0c:	2701      	movs	r7, #1
 8026b0e:	2300      	movs	r3, #0
 8026b10:	900a      	str	r0, [sp, #40]	@ 0x28
 8026b12:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026b14:	4ed0      	ldr	r6, [pc, #832]	@ (8026e58 <_dtoa_r+0x70c>)
 8026b16:	112d      	asrs	r5, r5, #4
 8026b18:	2d00      	cmp	r5, #0
 8026b1a:	d000      	beq.n	8026b1e <_dtoa_r+0x3d2>
 8026b1c:	e095      	b.n	8026c4a <_dtoa_r+0x4fe>
 8026b1e:	2b00      	cmp	r3, #0
 8026b20:	d1a2      	bne.n	8026a68 <_dtoa_r+0x31c>
 8026b22:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026b24:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026b26:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026b28:	2b00      	cmp	r3, #0
 8026b2a:	d100      	bne.n	8026b2e <_dtoa_r+0x3e2>
 8026b2c:	e098      	b.n	8026c60 <_dtoa_r+0x514>
 8026b2e:	2200      	movs	r2, #0
 8026b30:	0030      	movs	r0, r6
 8026b32:	0039      	movs	r1, r7
 8026b34:	4bc9      	ldr	r3, [pc, #804]	@ (8026e5c <_dtoa_r+0x710>)
 8026b36:	f7d9 fcc1 	bl	80004bc <__aeabi_dcmplt>
 8026b3a:	2800      	cmp	r0, #0
 8026b3c:	d100      	bne.n	8026b40 <_dtoa_r+0x3f4>
 8026b3e:	e08f      	b.n	8026c60 <_dtoa_r+0x514>
 8026b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026b42:	2b00      	cmp	r3, #0
 8026b44:	d100      	bne.n	8026b48 <_dtoa_r+0x3fc>
 8026b46:	e08b      	b.n	8026c60 <_dtoa_r+0x514>
 8026b48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026b4a:	2b00      	cmp	r3, #0
 8026b4c:	dd37      	ble.n	8026bbe <_dtoa_r+0x472>
 8026b4e:	9b04      	ldr	r3, [sp, #16]
 8026b50:	2200      	movs	r2, #0
 8026b52:	3b01      	subs	r3, #1
 8026b54:	930c      	str	r3, [sp, #48]	@ 0x30
 8026b56:	0030      	movs	r0, r6
 8026b58:	4bc1      	ldr	r3, [pc, #772]	@ (8026e60 <_dtoa_r+0x714>)
 8026b5a:	0039      	movs	r1, r7
 8026b5c:	f7db fefa 	bl	8002954 <__aeabi_dmul>
 8026b60:	900a      	str	r0, [sp, #40]	@ 0x28
 8026b62:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026b64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026b66:	3401      	adds	r4, #1
 8026b68:	0020      	movs	r0, r4
 8026b6a:	9311      	str	r3, [sp, #68]	@ 0x44
 8026b6c:	f7dc fe40 	bl	80037f0 <__aeabi_i2d>
 8026b70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026b72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026b74:	f7db feee 	bl	8002954 <__aeabi_dmul>
 8026b78:	4bba      	ldr	r3, [pc, #744]	@ (8026e64 <_dtoa_r+0x718>)
 8026b7a:	2200      	movs	r2, #0
 8026b7c:	f7da feea 	bl	8001954 <__aeabi_dadd>
 8026b80:	4bb9      	ldr	r3, [pc, #740]	@ (8026e68 <_dtoa_r+0x71c>)
 8026b82:	0006      	movs	r6, r0
 8026b84:	18cf      	adds	r7, r1, r3
 8026b86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026b88:	2b00      	cmp	r3, #0
 8026b8a:	d16d      	bne.n	8026c68 <_dtoa_r+0x51c>
 8026b8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026b8e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026b90:	2200      	movs	r2, #0
 8026b92:	4bb6      	ldr	r3, [pc, #728]	@ (8026e6c <_dtoa_r+0x720>)
 8026b94:	f7dc f9c4 	bl	8002f20 <__aeabi_dsub>
 8026b98:	0032      	movs	r2, r6
 8026b9a:	003b      	movs	r3, r7
 8026b9c:	0004      	movs	r4, r0
 8026b9e:	000d      	movs	r5, r1
 8026ba0:	f7d9 fca0 	bl	80004e4 <__aeabi_dcmpgt>
 8026ba4:	2800      	cmp	r0, #0
 8026ba6:	d000      	beq.n	8026baa <_dtoa_r+0x45e>
 8026ba8:	e2b6      	b.n	8027118 <_dtoa_r+0x9cc>
 8026baa:	2180      	movs	r1, #128	@ 0x80
 8026bac:	0609      	lsls	r1, r1, #24
 8026bae:	187b      	adds	r3, r7, r1
 8026bb0:	0032      	movs	r2, r6
 8026bb2:	0020      	movs	r0, r4
 8026bb4:	0029      	movs	r1, r5
 8026bb6:	f7d9 fc81 	bl	80004bc <__aeabi_dcmplt>
 8026bba:	2800      	cmp	r0, #0
 8026bbc:	d128      	bne.n	8026c10 <_dtoa_r+0x4c4>
 8026bbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026bc0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026bc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8026bc4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026bc6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026bc8:	2b00      	cmp	r3, #0
 8026bca:	da00      	bge.n	8026bce <_dtoa_r+0x482>
 8026bcc:	e174      	b.n	8026eb8 <_dtoa_r+0x76c>
 8026bce:	9a04      	ldr	r2, [sp, #16]
 8026bd0:	2a0e      	cmp	r2, #14
 8026bd2:	dd00      	ble.n	8026bd6 <_dtoa_r+0x48a>
 8026bd4:	e170      	b.n	8026eb8 <_dtoa_r+0x76c>
 8026bd6:	4b9f      	ldr	r3, [pc, #636]	@ (8026e54 <_dtoa_r+0x708>)
 8026bd8:	00d2      	lsls	r2, r2, #3
 8026bda:	189b      	adds	r3, r3, r2
 8026bdc:	685c      	ldr	r4, [r3, #4]
 8026bde:	681b      	ldr	r3, [r3, #0]
 8026be0:	9306      	str	r3, [sp, #24]
 8026be2:	9407      	str	r4, [sp, #28]
 8026be4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026be6:	2b00      	cmp	r3, #0
 8026be8:	db00      	blt.n	8026bec <_dtoa_r+0x4a0>
 8026bea:	e0e7      	b.n	8026dbc <_dtoa_r+0x670>
 8026bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026bee:	2b00      	cmp	r3, #0
 8026bf0:	dd00      	ble.n	8026bf4 <_dtoa_r+0x4a8>
 8026bf2:	e0e3      	b.n	8026dbc <_dtoa_r+0x670>
 8026bf4:	d10c      	bne.n	8026c10 <_dtoa_r+0x4c4>
 8026bf6:	9806      	ldr	r0, [sp, #24]
 8026bf8:	9907      	ldr	r1, [sp, #28]
 8026bfa:	2200      	movs	r2, #0
 8026bfc:	4b9b      	ldr	r3, [pc, #620]	@ (8026e6c <_dtoa_r+0x720>)
 8026bfe:	f7db fea9 	bl	8002954 <__aeabi_dmul>
 8026c02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026c04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026c06:	f7d9 fc77 	bl	80004f8 <__aeabi_dcmpge>
 8026c0a:	2800      	cmp	r0, #0
 8026c0c:	d100      	bne.n	8026c10 <_dtoa_r+0x4c4>
 8026c0e:	e286      	b.n	802711e <_dtoa_r+0x9d2>
 8026c10:	2600      	movs	r6, #0
 8026c12:	0037      	movs	r7, r6
 8026c14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026c16:	9c08      	ldr	r4, [sp, #32]
 8026c18:	43db      	mvns	r3, r3
 8026c1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8026c1c:	9704      	str	r7, [sp, #16]
 8026c1e:	2700      	movs	r7, #0
 8026c20:	0031      	movs	r1, r6
 8026c22:	9803      	ldr	r0, [sp, #12]
 8026c24:	f001 f838 	bl	8027c98 <_Bfree>
 8026c28:	9b04      	ldr	r3, [sp, #16]
 8026c2a:	2b00      	cmp	r3, #0
 8026c2c:	d100      	bne.n	8026c30 <_dtoa_r+0x4e4>
 8026c2e:	e0bb      	b.n	8026da8 <_dtoa_r+0x65c>
 8026c30:	2f00      	cmp	r7, #0
 8026c32:	d005      	beq.n	8026c40 <_dtoa_r+0x4f4>
 8026c34:	429f      	cmp	r7, r3
 8026c36:	d003      	beq.n	8026c40 <_dtoa_r+0x4f4>
 8026c38:	0039      	movs	r1, r7
 8026c3a:	9803      	ldr	r0, [sp, #12]
 8026c3c:	f001 f82c 	bl	8027c98 <_Bfree>
 8026c40:	9904      	ldr	r1, [sp, #16]
 8026c42:	9803      	ldr	r0, [sp, #12]
 8026c44:	f001 f828 	bl	8027c98 <_Bfree>
 8026c48:	e0ae      	b.n	8026da8 <_dtoa_r+0x65c>
 8026c4a:	423d      	tst	r5, r7
 8026c4c:	d005      	beq.n	8026c5a <_dtoa_r+0x50e>
 8026c4e:	6832      	ldr	r2, [r6, #0]
 8026c50:	6873      	ldr	r3, [r6, #4]
 8026c52:	f7db fe7f 	bl	8002954 <__aeabi_dmul>
 8026c56:	003b      	movs	r3, r7
 8026c58:	3401      	adds	r4, #1
 8026c5a:	106d      	asrs	r5, r5, #1
 8026c5c:	3608      	adds	r6, #8
 8026c5e:	e75b      	b.n	8026b18 <_dtoa_r+0x3cc>
 8026c60:	9b04      	ldr	r3, [sp, #16]
 8026c62:	930c      	str	r3, [sp, #48]	@ 0x30
 8026c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c66:	e77f      	b.n	8026b68 <_dtoa_r+0x41c>
 8026c68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8026e54 <_dtoa_r+0x708>)
 8026c6c:	3a01      	subs	r2, #1
 8026c6e:	00d2      	lsls	r2, r2, #3
 8026c70:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8026c72:	189b      	adds	r3, r3, r2
 8026c74:	681a      	ldr	r2, [r3, #0]
 8026c76:	685b      	ldr	r3, [r3, #4]
 8026c78:	2900      	cmp	r1, #0
 8026c7a:	d04c      	beq.n	8026d16 <_dtoa_r+0x5ca>
 8026c7c:	2000      	movs	r0, #0
 8026c7e:	497c      	ldr	r1, [pc, #496]	@ (8026e70 <_dtoa_r+0x724>)
 8026c80:	f7db fa2e 	bl	80020e0 <__aeabi_ddiv>
 8026c84:	0032      	movs	r2, r6
 8026c86:	003b      	movs	r3, r7
 8026c88:	f7dc f94a 	bl	8002f20 <__aeabi_dsub>
 8026c8c:	9a08      	ldr	r2, [sp, #32]
 8026c8e:	0006      	movs	r6, r0
 8026c90:	4694      	mov	ip, r2
 8026c92:	000f      	movs	r7, r1
 8026c94:	9b08      	ldr	r3, [sp, #32]
 8026c96:	9316      	str	r3, [sp, #88]	@ 0x58
 8026c98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026c9a:	4463      	add	r3, ip
 8026c9c:	9311      	str	r3, [sp, #68]	@ 0x44
 8026c9e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026ca0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026ca2:	f7dc fd69 	bl	8003778 <__aeabi_d2iz>
 8026ca6:	0005      	movs	r5, r0
 8026ca8:	f7dc fda2 	bl	80037f0 <__aeabi_i2d>
 8026cac:	0002      	movs	r2, r0
 8026cae:	000b      	movs	r3, r1
 8026cb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026cb2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026cb4:	f7dc f934 	bl	8002f20 <__aeabi_dsub>
 8026cb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026cba:	3530      	adds	r5, #48	@ 0x30
 8026cbc:	1c5c      	adds	r4, r3, #1
 8026cbe:	701d      	strb	r5, [r3, #0]
 8026cc0:	0032      	movs	r2, r6
 8026cc2:	003b      	movs	r3, r7
 8026cc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8026cc6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026cc8:	f7d9 fbf8 	bl	80004bc <__aeabi_dcmplt>
 8026ccc:	2800      	cmp	r0, #0
 8026cce:	d16b      	bne.n	8026da8 <_dtoa_r+0x65c>
 8026cd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026cd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026cd4:	2000      	movs	r0, #0
 8026cd6:	4961      	ldr	r1, [pc, #388]	@ (8026e5c <_dtoa_r+0x710>)
 8026cd8:	f7dc f922 	bl	8002f20 <__aeabi_dsub>
 8026cdc:	0032      	movs	r2, r6
 8026cde:	003b      	movs	r3, r7
 8026ce0:	f7d9 fbec 	bl	80004bc <__aeabi_dcmplt>
 8026ce4:	2800      	cmp	r0, #0
 8026ce6:	d000      	beq.n	8026cea <_dtoa_r+0x59e>
 8026ce8:	e0c6      	b.n	8026e78 <_dtoa_r+0x72c>
 8026cea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026cec:	42a3      	cmp	r3, r4
 8026cee:	d100      	bne.n	8026cf2 <_dtoa_r+0x5a6>
 8026cf0:	e765      	b.n	8026bbe <_dtoa_r+0x472>
 8026cf2:	2200      	movs	r2, #0
 8026cf4:	0030      	movs	r0, r6
 8026cf6:	0039      	movs	r1, r7
 8026cf8:	4b59      	ldr	r3, [pc, #356]	@ (8026e60 <_dtoa_r+0x714>)
 8026cfa:	f7db fe2b 	bl	8002954 <__aeabi_dmul>
 8026cfe:	2200      	movs	r2, #0
 8026d00:	0006      	movs	r6, r0
 8026d02:	000f      	movs	r7, r1
 8026d04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d06:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d08:	4b55      	ldr	r3, [pc, #340]	@ (8026e60 <_dtoa_r+0x714>)
 8026d0a:	f7db fe23 	bl	8002954 <__aeabi_dmul>
 8026d0e:	9416      	str	r4, [sp, #88]	@ 0x58
 8026d10:	900a      	str	r0, [sp, #40]	@ 0x28
 8026d12:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026d14:	e7c3      	b.n	8026c9e <_dtoa_r+0x552>
 8026d16:	0030      	movs	r0, r6
 8026d18:	0039      	movs	r1, r7
 8026d1a:	f7db fe1b 	bl	8002954 <__aeabi_dmul>
 8026d1e:	9d08      	ldr	r5, [sp, #32]
 8026d20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026d22:	002b      	movs	r3, r5
 8026d24:	4694      	mov	ip, r2
 8026d26:	9016      	str	r0, [sp, #88]	@ 0x58
 8026d28:	9117      	str	r1, [sp, #92]	@ 0x5c
 8026d2a:	4463      	add	r3, ip
 8026d2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8026d2e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d32:	f7dc fd21 	bl	8003778 <__aeabi_d2iz>
 8026d36:	0004      	movs	r4, r0
 8026d38:	f7dc fd5a 	bl	80037f0 <__aeabi_i2d>
 8026d3c:	000b      	movs	r3, r1
 8026d3e:	0002      	movs	r2, r0
 8026d40:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d44:	f7dc f8ec 	bl	8002f20 <__aeabi_dsub>
 8026d48:	3430      	adds	r4, #48	@ 0x30
 8026d4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026d4c:	702c      	strb	r4, [r5, #0]
 8026d4e:	3501      	adds	r5, #1
 8026d50:	0006      	movs	r6, r0
 8026d52:	000f      	movs	r7, r1
 8026d54:	42ab      	cmp	r3, r5
 8026d56:	d12a      	bne.n	8026dae <_dtoa_r+0x662>
 8026d58:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8026d5a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8026d5c:	9b08      	ldr	r3, [sp, #32]
 8026d5e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026d60:	469c      	mov	ip, r3
 8026d62:	2200      	movs	r2, #0
 8026d64:	4b42      	ldr	r3, [pc, #264]	@ (8026e70 <_dtoa_r+0x724>)
 8026d66:	4464      	add	r4, ip
 8026d68:	f7da fdf4 	bl	8001954 <__aeabi_dadd>
 8026d6c:	0002      	movs	r2, r0
 8026d6e:	000b      	movs	r3, r1
 8026d70:	0030      	movs	r0, r6
 8026d72:	0039      	movs	r1, r7
 8026d74:	f7d9 fbb6 	bl	80004e4 <__aeabi_dcmpgt>
 8026d78:	2800      	cmp	r0, #0
 8026d7a:	d000      	beq.n	8026d7e <_dtoa_r+0x632>
 8026d7c:	e07c      	b.n	8026e78 <_dtoa_r+0x72c>
 8026d7e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8026d80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026d82:	2000      	movs	r0, #0
 8026d84:	493a      	ldr	r1, [pc, #232]	@ (8026e70 <_dtoa_r+0x724>)
 8026d86:	f7dc f8cb 	bl	8002f20 <__aeabi_dsub>
 8026d8a:	0002      	movs	r2, r0
 8026d8c:	000b      	movs	r3, r1
 8026d8e:	0030      	movs	r0, r6
 8026d90:	0039      	movs	r1, r7
 8026d92:	f7d9 fb93 	bl	80004bc <__aeabi_dcmplt>
 8026d96:	2800      	cmp	r0, #0
 8026d98:	d100      	bne.n	8026d9c <_dtoa_r+0x650>
 8026d9a:	e710      	b.n	8026bbe <_dtoa_r+0x472>
 8026d9c:	0023      	movs	r3, r4
 8026d9e:	3c01      	subs	r4, #1
 8026da0:	7822      	ldrb	r2, [r4, #0]
 8026da2:	2a30      	cmp	r2, #48	@ 0x30
 8026da4:	d0fa      	beq.n	8026d9c <_dtoa_r+0x650>
 8026da6:	001c      	movs	r4, r3
 8026da8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026daa:	9304      	str	r3, [sp, #16]
 8026dac:	e042      	b.n	8026e34 <_dtoa_r+0x6e8>
 8026dae:	2200      	movs	r2, #0
 8026db0:	4b2b      	ldr	r3, [pc, #172]	@ (8026e60 <_dtoa_r+0x714>)
 8026db2:	f7db fdcf 	bl	8002954 <__aeabi_dmul>
 8026db6:	900a      	str	r0, [sp, #40]	@ 0x28
 8026db8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026dba:	e7b8      	b.n	8026d2e <_dtoa_r+0x5e2>
 8026dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026dbe:	9d08      	ldr	r5, [sp, #32]
 8026dc0:	3b01      	subs	r3, #1
 8026dc2:	195b      	adds	r3, r3, r5
 8026dc4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026dc6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026dc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8026dca:	9a06      	ldr	r2, [sp, #24]
 8026dcc:	9b07      	ldr	r3, [sp, #28]
 8026dce:	0030      	movs	r0, r6
 8026dd0:	0039      	movs	r1, r7
 8026dd2:	f7db f985 	bl	80020e0 <__aeabi_ddiv>
 8026dd6:	f7dc fccf 	bl	8003778 <__aeabi_d2iz>
 8026dda:	9009      	str	r0, [sp, #36]	@ 0x24
 8026ddc:	f7dc fd08 	bl	80037f0 <__aeabi_i2d>
 8026de0:	9a06      	ldr	r2, [sp, #24]
 8026de2:	9b07      	ldr	r3, [sp, #28]
 8026de4:	f7db fdb6 	bl	8002954 <__aeabi_dmul>
 8026de8:	0002      	movs	r2, r0
 8026dea:	000b      	movs	r3, r1
 8026dec:	0030      	movs	r0, r6
 8026dee:	0039      	movs	r1, r7
 8026df0:	f7dc f896 	bl	8002f20 <__aeabi_dsub>
 8026df4:	002b      	movs	r3, r5
 8026df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026df8:	3501      	adds	r5, #1
 8026dfa:	3230      	adds	r2, #48	@ 0x30
 8026dfc:	701a      	strb	r2, [r3, #0]
 8026dfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026e00:	002c      	movs	r4, r5
 8026e02:	429a      	cmp	r2, r3
 8026e04:	d14b      	bne.n	8026e9e <_dtoa_r+0x752>
 8026e06:	0002      	movs	r2, r0
 8026e08:	000b      	movs	r3, r1
 8026e0a:	f7da fda3 	bl	8001954 <__aeabi_dadd>
 8026e0e:	9a06      	ldr	r2, [sp, #24]
 8026e10:	9b07      	ldr	r3, [sp, #28]
 8026e12:	0006      	movs	r6, r0
 8026e14:	000f      	movs	r7, r1
 8026e16:	f7d9 fb65 	bl	80004e4 <__aeabi_dcmpgt>
 8026e1a:	2800      	cmp	r0, #0
 8026e1c:	d12a      	bne.n	8026e74 <_dtoa_r+0x728>
 8026e1e:	9a06      	ldr	r2, [sp, #24]
 8026e20:	9b07      	ldr	r3, [sp, #28]
 8026e22:	0030      	movs	r0, r6
 8026e24:	0039      	movs	r1, r7
 8026e26:	f7d9 fb43 	bl	80004b0 <__aeabi_dcmpeq>
 8026e2a:	2800      	cmp	r0, #0
 8026e2c:	d002      	beq.n	8026e34 <_dtoa_r+0x6e8>
 8026e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e30:	07dd      	lsls	r5, r3, #31
 8026e32:	d41f      	bmi.n	8026e74 <_dtoa_r+0x728>
 8026e34:	9905      	ldr	r1, [sp, #20]
 8026e36:	9803      	ldr	r0, [sp, #12]
 8026e38:	f000 ff2e 	bl	8027c98 <_Bfree>
 8026e3c:	2300      	movs	r3, #0
 8026e3e:	7023      	strb	r3, [r4, #0]
 8026e40:	9b04      	ldr	r3, [sp, #16]
 8026e42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026e44:	3301      	adds	r3, #1
 8026e46:	6013      	str	r3, [r2, #0]
 8026e48:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026e4a:	2b00      	cmp	r3, #0
 8026e4c:	d100      	bne.n	8026e50 <_dtoa_r+0x704>
 8026e4e:	e4c7      	b.n	80267e0 <_dtoa_r+0x94>
 8026e50:	601c      	str	r4, [r3, #0]
 8026e52:	e4c5      	b.n	80267e0 <_dtoa_r+0x94>
 8026e54:	0802ecc0 	.word	0x0802ecc0
 8026e58:	0802ec98 	.word	0x0802ec98
 8026e5c:	3ff00000 	.word	0x3ff00000
 8026e60:	40240000 	.word	0x40240000
 8026e64:	401c0000 	.word	0x401c0000
 8026e68:	fcc00000 	.word	0xfcc00000
 8026e6c:	40140000 	.word	0x40140000
 8026e70:	3fe00000 	.word	0x3fe00000
 8026e74:	9b04      	ldr	r3, [sp, #16]
 8026e76:	930c      	str	r3, [sp, #48]	@ 0x30
 8026e78:	0023      	movs	r3, r4
 8026e7a:	001c      	movs	r4, r3
 8026e7c:	3b01      	subs	r3, #1
 8026e7e:	781a      	ldrb	r2, [r3, #0]
 8026e80:	2a39      	cmp	r2, #57	@ 0x39
 8026e82:	d108      	bne.n	8026e96 <_dtoa_r+0x74a>
 8026e84:	9a08      	ldr	r2, [sp, #32]
 8026e86:	429a      	cmp	r2, r3
 8026e88:	d1f7      	bne.n	8026e7a <_dtoa_r+0x72e>
 8026e8a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026e8c:	9908      	ldr	r1, [sp, #32]
 8026e8e:	3201      	adds	r2, #1
 8026e90:	920c      	str	r2, [sp, #48]	@ 0x30
 8026e92:	2230      	movs	r2, #48	@ 0x30
 8026e94:	700a      	strb	r2, [r1, #0]
 8026e96:	781a      	ldrb	r2, [r3, #0]
 8026e98:	3201      	adds	r2, #1
 8026e9a:	701a      	strb	r2, [r3, #0]
 8026e9c:	e784      	b.n	8026da8 <_dtoa_r+0x65c>
 8026e9e:	2200      	movs	r2, #0
 8026ea0:	4bc6      	ldr	r3, [pc, #792]	@ (80271bc <_dtoa_r+0xa70>)
 8026ea2:	f7db fd57 	bl	8002954 <__aeabi_dmul>
 8026ea6:	2200      	movs	r2, #0
 8026ea8:	2300      	movs	r3, #0
 8026eaa:	0006      	movs	r6, r0
 8026eac:	000f      	movs	r7, r1
 8026eae:	f7d9 faff 	bl	80004b0 <__aeabi_dcmpeq>
 8026eb2:	2800      	cmp	r0, #0
 8026eb4:	d089      	beq.n	8026dca <_dtoa_r+0x67e>
 8026eb6:	e7bd      	b.n	8026e34 <_dtoa_r+0x6e8>
 8026eb8:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8026eba:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026ebc:	9c06      	ldr	r4, [sp, #24]
 8026ebe:	2f00      	cmp	r7, #0
 8026ec0:	d014      	beq.n	8026eec <_dtoa_r+0x7a0>
 8026ec2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026ec4:	2a01      	cmp	r2, #1
 8026ec6:	dd00      	ble.n	8026eca <_dtoa_r+0x77e>
 8026ec8:	e0e4      	b.n	8027094 <_dtoa_r+0x948>
 8026eca:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8026ecc:	2a00      	cmp	r2, #0
 8026ece:	d100      	bne.n	8026ed2 <_dtoa_r+0x786>
 8026ed0:	e0da      	b.n	8027088 <_dtoa_r+0x93c>
 8026ed2:	4abb      	ldr	r2, [pc, #748]	@ (80271c0 <_dtoa_r+0xa74>)
 8026ed4:	189b      	adds	r3, r3, r2
 8026ed6:	9a06      	ldr	r2, [sp, #24]
 8026ed8:	2101      	movs	r1, #1
 8026eda:	18d2      	adds	r2, r2, r3
 8026edc:	9206      	str	r2, [sp, #24]
 8026ede:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026ee0:	9803      	ldr	r0, [sp, #12]
 8026ee2:	18d3      	adds	r3, r2, r3
 8026ee4:	930d      	str	r3, [sp, #52]	@ 0x34
 8026ee6:	f000 ffdb 	bl	8027ea0 <__i2b>
 8026eea:	0007      	movs	r7, r0
 8026eec:	2c00      	cmp	r4, #0
 8026eee:	d00e      	beq.n	8026f0e <_dtoa_r+0x7c2>
 8026ef0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026ef2:	2b00      	cmp	r3, #0
 8026ef4:	dd0b      	ble.n	8026f0e <_dtoa_r+0x7c2>
 8026ef6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026ef8:	0023      	movs	r3, r4
 8026efa:	4294      	cmp	r4, r2
 8026efc:	dd00      	ble.n	8026f00 <_dtoa_r+0x7b4>
 8026efe:	0013      	movs	r3, r2
 8026f00:	9a06      	ldr	r2, [sp, #24]
 8026f02:	1ae4      	subs	r4, r4, r3
 8026f04:	1ad2      	subs	r2, r2, r3
 8026f06:	9206      	str	r2, [sp, #24]
 8026f08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026f0a:	1ad3      	subs	r3, r2, r3
 8026f0c:	930d      	str	r3, [sp, #52]	@ 0x34
 8026f0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026f10:	2b00      	cmp	r3, #0
 8026f12:	d021      	beq.n	8026f58 <_dtoa_r+0x80c>
 8026f14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026f16:	2b00      	cmp	r3, #0
 8026f18:	d100      	bne.n	8026f1c <_dtoa_r+0x7d0>
 8026f1a:	e0d3      	b.n	80270c4 <_dtoa_r+0x978>
 8026f1c:	9e05      	ldr	r6, [sp, #20]
 8026f1e:	2d00      	cmp	r5, #0
 8026f20:	d014      	beq.n	8026f4c <_dtoa_r+0x800>
 8026f22:	0039      	movs	r1, r7
 8026f24:	002a      	movs	r2, r5
 8026f26:	9803      	ldr	r0, [sp, #12]
 8026f28:	f001 f87c 	bl	8028024 <__pow5mult>
 8026f2c:	9a05      	ldr	r2, [sp, #20]
 8026f2e:	0001      	movs	r1, r0
 8026f30:	0007      	movs	r7, r0
 8026f32:	9803      	ldr	r0, [sp, #12]
 8026f34:	f000 ffcc 	bl	8027ed0 <__multiply>
 8026f38:	0006      	movs	r6, r0
 8026f3a:	9905      	ldr	r1, [sp, #20]
 8026f3c:	9803      	ldr	r0, [sp, #12]
 8026f3e:	f000 feab 	bl	8027c98 <_Bfree>
 8026f42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026f44:	9605      	str	r6, [sp, #20]
 8026f46:	1b5b      	subs	r3, r3, r5
 8026f48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026f4a:	d005      	beq.n	8026f58 <_dtoa_r+0x80c>
 8026f4c:	0031      	movs	r1, r6
 8026f4e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026f50:	9803      	ldr	r0, [sp, #12]
 8026f52:	f001 f867 	bl	8028024 <__pow5mult>
 8026f56:	9005      	str	r0, [sp, #20]
 8026f58:	2101      	movs	r1, #1
 8026f5a:	9803      	ldr	r0, [sp, #12]
 8026f5c:	f000 ffa0 	bl	8027ea0 <__i2b>
 8026f60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026f62:	0006      	movs	r6, r0
 8026f64:	2b00      	cmp	r3, #0
 8026f66:	d100      	bne.n	8026f6a <_dtoa_r+0x81e>
 8026f68:	e1bc      	b.n	80272e4 <_dtoa_r+0xb98>
 8026f6a:	001a      	movs	r2, r3
 8026f6c:	0001      	movs	r1, r0
 8026f6e:	9803      	ldr	r0, [sp, #12]
 8026f70:	f001 f858 	bl	8028024 <__pow5mult>
 8026f74:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026f76:	0006      	movs	r6, r0
 8026f78:	2500      	movs	r5, #0
 8026f7a:	2b01      	cmp	r3, #1
 8026f7c:	dc16      	bgt.n	8026fac <_dtoa_r+0x860>
 8026f7e:	2500      	movs	r5, #0
 8026f80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026f82:	42ab      	cmp	r3, r5
 8026f84:	d10e      	bne.n	8026fa4 <_dtoa_r+0x858>
 8026f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026f88:	031b      	lsls	r3, r3, #12
 8026f8a:	42ab      	cmp	r3, r5
 8026f8c:	d10a      	bne.n	8026fa4 <_dtoa_r+0x858>
 8026f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80271c4 <_dtoa_r+0xa78>)
 8026f90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026f92:	4213      	tst	r3, r2
 8026f94:	d006      	beq.n	8026fa4 <_dtoa_r+0x858>
 8026f96:	9b06      	ldr	r3, [sp, #24]
 8026f98:	3501      	adds	r5, #1
 8026f9a:	3301      	adds	r3, #1
 8026f9c:	9306      	str	r3, [sp, #24]
 8026f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026fa0:	3301      	adds	r3, #1
 8026fa2:	930d      	str	r3, [sp, #52]	@ 0x34
 8026fa4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026fa6:	2001      	movs	r0, #1
 8026fa8:	2b00      	cmp	r3, #0
 8026faa:	d008      	beq.n	8026fbe <_dtoa_r+0x872>
 8026fac:	6933      	ldr	r3, [r6, #16]
 8026fae:	3303      	adds	r3, #3
 8026fb0:	009b      	lsls	r3, r3, #2
 8026fb2:	18f3      	adds	r3, r6, r3
 8026fb4:	6858      	ldr	r0, [r3, #4]
 8026fb6:	f000 ff23 	bl	8027e00 <__hi0bits>
 8026fba:	2320      	movs	r3, #32
 8026fbc:	1a18      	subs	r0, r3, r0
 8026fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026fc0:	1818      	adds	r0, r3, r0
 8026fc2:	0002      	movs	r2, r0
 8026fc4:	231f      	movs	r3, #31
 8026fc6:	401a      	ands	r2, r3
 8026fc8:	4218      	tst	r0, r3
 8026fca:	d100      	bne.n	8026fce <_dtoa_r+0x882>
 8026fcc:	e081      	b.n	80270d2 <_dtoa_r+0x986>
 8026fce:	3301      	adds	r3, #1
 8026fd0:	1a9b      	subs	r3, r3, r2
 8026fd2:	2b04      	cmp	r3, #4
 8026fd4:	dd79      	ble.n	80270ca <_dtoa_r+0x97e>
 8026fd6:	231c      	movs	r3, #28
 8026fd8:	1a9b      	subs	r3, r3, r2
 8026fda:	9a06      	ldr	r2, [sp, #24]
 8026fdc:	18e4      	adds	r4, r4, r3
 8026fde:	18d2      	adds	r2, r2, r3
 8026fe0:	9206      	str	r2, [sp, #24]
 8026fe2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026fe4:	18d3      	adds	r3, r2, r3
 8026fe6:	930d      	str	r3, [sp, #52]	@ 0x34
 8026fe8:	9b06      	ldr	r3, [sp, #24]
 8026fea:	2b00      	cmp	r3, #0
 8026fec:	dd05      	ble.n	8026ffa <_dtoa_r+0x8ae>
 8026fee:	001a      	movs	r2, r3
 8026ff0:	9905      	ldr	r1, [sp, #20]
 8026ff2:	9803      	ldr	r0, [sp, #12]
 8026ff4:	f001 f872 	bl	80280dc <__lshift>
 8026ff8:	9005      	str	r0, [sp, #20]
 8026ffa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026ffc:	2b00      	cmp	r3, #0
 8026ffe:	dd05      	ble.n	802700c <_dtoa_r+0x8c0>
 8027000:	0031      	movs	r1, r6
 8027002:	001a      	movs	r2, r3
 8027004:	9803      	ldr	r0, [sp, #12]
 8027006:	f001 f869 	bl	80280dc <__lshift>
 802700a:	0006      	movs	r6, r0
 802700c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802700e:	2b00      	cmp	r3, #0
 8027010:	d061      	beq.n	80270d6 <_dtoa_r+0x98a>
 8027012:	0031      	movs	r1, r6
 8027014:	9805      	ldr	r0, [sp, #20]
 8027016:	f001 f8cd 	bl	80281b4 <__mcmp>
 802701a:	2800      	cmp	r0, #0
 802701c:	da5b      	bge.n	80270d6 <_dtoa_r+0x98a>
 802701e:	9b04      	ldr	r3, [sp, #16]
 8027020:	220a      	movs	r2, #10
 8027022:	3b01      	subs	r3, #1
 8027024:	930c      	str	r3, [sp, #48]	@ 0x30
 8027026:	9905      	ldr	r1, [sp, #20]
 8027028:	2300      	movs	r3, #0
 802702a:	9803      	ldr	r0, [sp, #12]
 802702c:	f000 fe58 	bl	8027ce0 <__multadd>
 8027030:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027032:	9005      	str	r0, [sp, #20]
 8027034:	2b00      	cmp	r3, #0
 8027036:	d100      	bne.n	802703a <_dtoa_r+0x8ee>
 8027038:	e15b      	b.n	80272f2 <_dtoa_r+0xba6>
 802703a:	2300      	movs	r3, #0
 802703c:	0039      	movs	r1, r7
 802703e:	220a      	movs	r2, #10
 8027040:	9803      	ldr	r0, [sp, #12]
 8027042:	f000 fe4d 	bl	8027ce0 <__multadd>
 8027046:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027048:	0007      	movs	r7, r0
 802704a:	2b00      	cmp	r3, #0
 802704c:	dc4d      	bgt.n	80270ea <_dtoa_r+0x99e>
 802704e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027050:	2b02      	cmp	r3, #2
 8027052:	dd46      	ble.n	80270e2 <_dtoa_r+0x996>
 8027054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027056:	2b00      	cmp	r3, #0
 8027058:	d000      	beq.n	802705c <_dtoa_r+0x910>
 802705a:	e5db      	b.n	8026c14 <_dtoa_r+0x4c8>
 802705c:	0031      	movs	r1, r6
 802705e:	2205      	movs	r2, #5
 8027060:	9803      	ldr	r0, [sp, #12]
 8027062:	f000 fe3d 	bl	8027ce0 <__multadd>
 8027066:	0006      	movs	r6, r0
 8027068:	0001      	movs	r1, r0
 802706a:	9805      	ldr	r0, [sp, #20]
 802706c:	f001 f8a2 	bl	80281b4 <__mcmp>
 8027070:	2800      	cmp	r0, #0
 8027072:	dc00      	bgt.n	8027076 <_dtoa_r+0x92a>
 8027074:	e5ce      	b.n	8026c14 <_dtoa_r+0x4c8>
 8027076:	9b08      	ldr	r3, [sp, #32]
 8027078:	9a08      	ldr	r2, [sp, #32]
 802707a:	1c5c      	adds	r4, r3, #1
 802707c:	2331      	movs	r3, #49	@ 0x31
 802707e:	7013      	strb	r3, [r2, #0]
 8027080:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027082:	3301      	adds	r3, #1
 8027084:	930c      	str	r3, [sp, #48]	@ 0x30
 8027086:	e5c9      	b.n	8026c1c <_dtoa_r+0x4d0>
 8027088:	2336      	movs	r3, #54	@ 0x36
 802708a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802708c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802708e:	1a9b      	subs	r3, r3, r2
 8027090:	9c06      	ldr	r4, [sp, #24]
 8027092:	e720      	b.n	8026ed6 <_dtoa_r+0x78a>
 8027094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027096:	1e5d      	subs	r5, r3, #1
 8027098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802709a:	42ab      	cmp	r3, r5
 802709c:	db08      	blt.n	80270b0 <_dtoa_r+0x964>
 802709e:	1b5d      	subs	r5, r3, r5
 80270a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80270a2:	2b00      	cmp	r3, #0
 80270a4:	daf4      	bge.n	8027090 <_dtoa_r+0x944>
 80270a6:	9b06      	ldr	r3, [sp, #24]
 80270a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80270aa:	1a9c      	subs	r4, r3, r2
 80270ac:	2300      	movs	r3, #0
 80270ae:	e712      	b.n	8026ed6 <_dtoa_r+0x78a>
 80270b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80270b2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80270b4:	1aeb      	subs	r3, r5, r3
 80270b6:	18d3      	adds	r3, r2, r3
 80270b8:	9314      	str	r3, [sp, #80]	@ 0x50
 80270ba:	950f      	str	r5, [sp, #60]	@ 0x3c
 80270bc:	9c06      	ldr	r4, [sp, #24]
 80270be:	2500      	movs	r5, #0
 80270c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80270c2:	e708      	b.n	8026ed6 <_dtoa_r+0x78a>
 80270c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80270c6:	9905      	ldr	r1, [sp, #20]
 80270c8:	e742      	b.n	8026f50 <_dtoa_r+0x804>
 80270ca:	2b04      	cmp	r3, #4
 80270cc:	d08c      	beq.n	8026fe8 <_dtoa_r+0x89c>
 80270ce:	331c      	adds	r3, #28
 80270d0:	e783      	b.n	8026fda <_dtoa_r+0x88e>
 80270d2:	0013      	movs	r3, r2
 80270d4:	e7fb      	b.n	80270ce <_dtoa_r+0x982>
 80270d6:	9b04      	ldr	r3, [sp, #16]
 80270d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80270da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80270dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80270de:	2b00      	cmp	r3, #0
 80270e0:	ddb5      	ble.n	802704e <_dtoa_r+0x902>
 80270e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80270e4:	2b00      	cmp	r3, #0
 80270e6:	d100      	bne.n	80270ea <_dtoa_r+0x99e>
 80270e8:	e107      	b.n	80272fa <_dtoa_r+0xbae>
 80270ea:	2c00      	cmp	r4, #0
 80270ec:	dd05      	ble.n	80270fa <_dtoa_r+0x9ae>
 80270ee:	0039      	movs	r1, r7
 80270f0:	0022      	movs	r2, r4
 80270f2:	9803      	ldr	r0, [sp, #12]
 80270f4:	f000 fff2 	bl	80280dc <__lshift>
 80270f8:	0007      	movs	r7, r0
 80270fa:	9704      	str	r7, [sp, #16]
 80270fc:	2d00      	cmp	r5, #0
 80270fe:	d020      	beq.n	8027142 <_dtoa_r+0x9f6>
 8027100:	6879      	ldr	r1, [r7, #4]
 8027102:	9803      	ldr	r0, [sp, #12]
 8027104:	f000 fd84 	bl	8027c10 <_Balloc>
 8027108:	1e04      	subs	r4, r0, #0
 802710a:	d10c      	bne.n	8027126 <_dtoa_r+0x9da>
 802710c:	0022      	movs	r2, r4
 802710e:	4b2e      	ldr	r3, [pc, #184]	@ (80271c8 <_dtoa_r+0xa7c>)
 8027110:	482e      	ldr	r0, [pc, #184]	@ (80271cc <_dtoa_r+0xa80>)
 8027112:	492f      	ldr	r1, [pc, #188]	@ (80271d0 <_dtoa_r+0xa84>)
 8027114:	f7ff fb2f 	bl	8026776 <_dtoa_r+0x2a>
 8027118:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802711a:	0037      	movs	r7, r6
 802711c:	e7ab      	b.n	8027076 <_dtoa_r+0x92a>
 802711e:	9b04      	ldr	r3, [sp, #16]
 8027120:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8027122:	930c      	str	r3, [sp, #48]	@ 0x30
 8027124:	e7f9      	b.n	802711a <_dtoa_r+0x9ce>
 8027126:	0039      	movs	r1, r7
 8027128:	693a      	ldr	r2, [r7, #16]
 802712a:	310c      	adds	r1, #12
 802712c:	3202      	adds	r2, #2
 802712e:	0092      	lsls	r2, r2, #2
 8027130:	300c      	adds	r0, #12
 8027132:	f7ff fa75 	bl	8026620 <memcpy>
 8027136:	2201      	movs	r2, #1
 8027138:	0021      	movs	r1, r4
 802713a:	9803      	ldr	r0, [sp, #12]
 802713c:	f000 ffce 	bl	80280dc <__lshift>
 8027140:	9004      	str	r0, [sp, #16]
 8027142:	9b08      	ldr	r3, [sp, #32]
 8027144:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027146:	9306      	str	r3, [sp, #24]
 8027148:	3b01      	subs	r3, #1
 802714a:	189b      	adds	r3, r3, r2
 802714c:	2201      	movs	r2, #1
 802714e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027152:	4013      	ands	r3, r2
 8027154:	930e      	str	r3, [sp, #56]	@ 0x38
 8027156:	0031      	movs	r1, r6
 8027158:	9805      	ldr	r0, [sp, #20]
 802715a:	f7ff fa71 	bl	8026640 <quorem>
 802715e:	0039      	movs	r1, r7
 8027160:	0005      	movs	r5, r0
 8027162:	900a      	str	r0, [sp, #40]	@ 0x28
 8027164:	9805      	ldr	r0, [sp, #20]
 8027166:	f001 f825 	bl	80281b4 <__mcmp>
 802716a:	9a04      	ldr	r2, [sp, #16]
 802716c:	900d      	str	r0, [sp, #52]	@ 0x34
 802716e:	0031      	movs	r1, r6
 8027170:	9803      	ldr	r0, [sp, #12]
 8027172:	f001 f83b 	bl	80281ec <__mdiff>
 8027176:	2201      	movs	r2, #1
 8027178:	68c3      	ldr	r3, [r0, #12]
 802717a:	0004      	movs	r4, r0
 802717c:	3530      	adds	r5, #48	@ 0x30
 802717e:	9209      	str	r2, [sp, #36]	@ 0x24
 8027180:	2b00      	cmp	r3, #0
 8027182:	d104      	bne.n	802718e <_dtoa_r+0xa42>
 8027184:	0001      	movs	r1, r0
 8027186:	9805      	ldr	r0, [sp, #20]
 8027188:	f001 f814 	bl	80281b4 <__mcmp>
 802718c:	9009      	str	r0, [sp, #36]	@ 0x24
 802718e:	0021      	movs	r1, r4
 8027190:	9803      	ldr	r0, [sp, #12]
 8027192:	f000 fd81 	bl	8027c98 <_Bfree>
 8027196:	9b06      	ldr	r3, [sp, #24]
 8027198:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802719a:	1c5c      	adds	r4, r3, #1
 802719c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802719e:	4313      	orrs	r3, r2
 80271a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80271a2:	4313      	orrs	r3, r2
 80271a4:	d116      	bne.n	80271d4 <_dtoa_r+0xa88>
 80271a6:	2d39      	cmp	r5, #57	@ 0x39
 80271a8:	d02f      	beq.n	802720a <_dtoa_r+0xabe>
 80271aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80271ac:	2b00      	cmp	r3, #0
 80271ae:	dd01      	ble.n	80271b4 <_dtoa_r+0xa68>
 80271b0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80271b2:	3531      	adds	r5, #49	@ 0x31
 80271b4:	9b06      	ldr	r3, [sp, #24]
 80271b6:	701d      	strb	r5, [r3, #0]
 80271b8:	e532      	b.n	8026c20 <_dtoa_r+0x4d4>
 80271ba:	46c0      	nop			@ (mov r8, r8)
 80271bc:	40240000 	.word	0x40240000
 80271c0:	00000433 	.word	0x00000433
 80271c4:	7ff00000 	.word	0x7ff00000
 80271c8:	0802ea1e 	.word	0x0802ea1e
 80271cc:	0802e9c6 	.word	0x0802e9c6
 80271d0:	000002ef 	.word	0x000002ef
 80271d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80271d6:	2b00      	cmp	r3, #0
 80271d8:	db04      	blt.n	80271e4 <_dtoa_r+0xa98>
 80271da:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80271dc:	4313      	orrs	r3, r2
 80271de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80271e0:	4313      	orrs	r3, r2
 80271e2:	d11e      	bne.n	8027222 <_dtoa_r+0xad6>
 80271e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80271e6:	2b00      	cmp	r3, #0
 80271e8:	dde4      	ble.n	80271b4 <_dtoa_r+0xa68>
 80271ea:	9905      	ldr	r1, [sp, #20]
 80271ec:	2201      	movs	r2, #1
 80271ee:	9803      	ldr	r0, [sp, #12]
 80271f0:	f000 ff74 	bl	80280dc <__lshift>
 80271f4:	0031      	movs	r1, r6
 80271f6:	9005      	str	r0, [sp, #20]
 80271f8:	f000 ffdc 	bl	80281b4 <__mcmp>
 80271fc:	2800      	cmp	r0, #0
 80271fe:	dc02      	bgt.n	8027206 <_dtoa_r+0xaba>
 8027200:	d1d8      	bne.n	80271b4 <_dtoa_r+0xa68>
 8027202:	07eb      	lsls	r3, r5, #31
 8027204:	d5d6      	bpl.n	80271b4 <_dtoa_r+0xa68>
 8027206:	2d39      	cmp	r5, #57	@ 0x39
 8027208:	d1d2      	bne.n	80271b0 <_dtoa_r+0xa64>
 802720a:	2339      	movs	r3, #57	@ 0x39
 802720c:	9a06      	ldr	r2, [sp, #24]
 802720e:	7013      	strb	r3, [r2, #0]
 8027210:	0023      	movs	r3, r4
 8027212:	001c      	movs	r4, r3
 8027214:	3b01      	subs	r3, #1
 8027216:	781a      	ldrb	r2, [r3, #0]
 8027218:	2a39      	cmp	r2, #57	@ 0x39
 802721a:	d050      	beq.n	80272be <_dtoa_r+0xb72>
 802721c:	3201      	adds	r2, #1
 802721e:	701a      	strb	r2, [r3, #0]
 8027220:	e4fe      	b.n	8026c20 <_dtoa_r+0x4d4>
 8027222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027224:	2b00      	cmp	r3, #0
 8027226:	dd03      	ble.n	8027230 <_dtoa_r+0xae4>
 8027228:	2d39      	cmp	r5, #57	@ 0x39
 802722a:	d0ee      	beq.n	802720a <_dtoa_r+0xabe>
 802722c:	3501      	adds	r5, #1
 802722e:	e7c1      	b.n	80271b4 <_dtoa_r+0xa68>
 8027230:	9b06      	ldr	r3, [sp, #24]
 8027232:	9a06      	ldr	r2, [sp, #24]
 8027234:	701d      	strb	r5, [r3, #0]
 8027236:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027238:	4293      	cmp	r3, r2
 802723a:	d02b      	beq.n	8027294 <_dtoa_r+0xb48>
 802723c:	2300      	movs	r3, #0
 802723e:	220a      	movs	r2, #10
 8027240:	9905      	ldr	r1, [sp, #20]
 8027242:	9803      	ldr	r0, [sp, #12]
 8027244:	f000 fd4c 	bl	8027ce0 <__multadd>
 8027248:	9b04      	ldr	r3, [sp, #16]
 802724a:	9005      	str	r0, [sp, #20]
 802724c:	429f      	cmp	r7, r3
 802724e:	d109      	bne.n	8027264 <_dtoa_r+0xb18>
 8027250:	0039      	movs	r1, r7
 8027252:	2300      	movs	r3, #0
 8027254:	220a      	movs	r2, #10
 8027256:	9803      	ldr	r0, [sp, #12]
 8027258:	f000 fd42 	bl	8027ce0 <__multadd>
 802725c:	0007      	movs	r7, r0
 802725e:	9004      	str	r0, [sp, #16]
 8027260:	9406      	str	r4, [sp, #24]
 8027262:	e778      	b.n	8027156 <_dtoa_r+0xa0a>
 8027264:	0039      	movs	r1, r7
 8027266:	2300      	movs	r3, #0
 8027268:	220a      	movs	r2, #10
 802726a:	9803      	ldr	r0, [sp, #12]
 802726c:	f000 fd38 	bl	8027ce0 <__multadd>
 8027270:	2300      	movs	r3, #0
 8027272:	0007      	movs	r7, r0
 8027274:	220a      	movs	r2, #10
 8027276:	9904      	ldr	r1, [sp, #16]
 8027278:	9803      	ldr	r0, [sp, #12]
 802727a:	f000 fd31 	bl	8027ce0 <__multadd>
 802727e:	9004      	str	r0, [sp, #16]
 8027280:	e7ee      	b.n	8027260 <_dtoa_r+0xb14>
 8027282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027284:	2401      	movs	r4, #1
 8027286:	2b00      	cmp	r3, #0
 8027288:	dd00      	ble.n	802728c <_dtoa_r+0xb40>
 802728a:	001c      	movs	r4, r3
 802728c:	9704      	str	r7, [sp, #16]
 802728e:	2700      	movs	r7, #0
 8027290:	9b08      	ldr	r3, [sp, #32]
 8027292:	191c      	adds	r4, r3, r4
 8027294:	9905      	ldr	r1, [sp, #20]
 8027296:	2201      	movs	r2, #1
 8027298:	9803      	ldr	r0, [sp, #12]
 802729a:	f000 ff1f 	bl	80280dc <__lshift>
 802729e:	0031      	movs	r1, r6
 80272a0:	9005      	str	r0, [sp, #20]
 80272a2:	f000 ff87 	bl	80281b4 <__mcmp>
 80272a6:	2800      	cmp	r0, #0
 80272a8:	dcb2      	bgt.n	8027210 <_dtoa_r+0xac4>
 80272aa:	d101      	bne.n	80272b0 <_dtoa_r+0xb64>
 80272ac:	07ed      	lsls	r5, r5, #31
 80272ae:	d4af      	bmi.n	8027210 <_dtoa_r+0xac4>
 80272b0:	0023      	movs	r3, r4
 80272b2:	001c      	movs	r4, r3
 80272b4:	3b01      	subs	r3, #1
 80272b6:	781a      	ldrb	r2, [r3, #0]
 80272b8:	2a30      	cmp	r2, #48	@ 0x30
 80272ba:	d0fa      	beq.n	80272b2 <_dtoa_r+0xb66>
 80272bc:	e4b0      	b.n	8026c20 <_dtoa_r+0x4d4>
 80272be:	9a08      	ldr	r2, [sp, #32]
 80272c0:	429a      	cmp	r2, r3
 80272c2:	d1a6      	bne.n	8027212 <_dtoa_r+0xac6>
 80272c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80272c6:	3301      	adds	r3, #1
 80272c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80272ca:	2331      	movs	r3, #49	@ 0x31
 80272cc:	7013      	strb	r3, [r2, #0]
 80272ce:	e4a7      	b.n	8026c20 <_dtoa_r+0x4d4>
 80272d0:	4b14      	ldr	r3, [pc, #80]	@ (8027324 <_dtoa_r+0xbd8>)
 80272d2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80272d4:	9308      	str	r3, [sp, #32]
 80272d6:	4b14      	ldr	r3, [pc, #80]	@ (8027328 <_dtoa_r+0xbdc>)
 80272d8:	2a00      	cmp	r2, #0
 80272da:	d001      	beq.n	80272e0 <_dtoa_r+0xb94>
 80272dc:	f7ff fa7e 	bl	80267dc <_dtoa_r+0x90>
 80272e0:	f7ff fa7e 	bl	80267e0 <_dtoa_r+0x94>
 80272e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80272e6:	2b01      	cmp	r3, #1
 80272e8:	dc00      	bgt.n	80272ec <_dtoa_r+0xba0>
 80272ea:	e648      	b.n	8026f7e <_dtoa_r+0x832>
 80272ec:	2001      	movs	r0, #1
 80272ee:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80272f0:	e665      	b.n	8026fbe <_dtoa_r+0x872>
 80272f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80272f4:	2b00      	cmp	r3, #0
 80272f6:	dc00      	bgt.n	80272fa <_dtoa_r+0xbae>
 80272f8:	e6a9      	b.n	802704e <_dtoa_r+0x902>
 80272fa:	2400      	movs	r4, #0
 80272fc:	0031      	movs	r1, r6
 80272fe:	9805      	ldr	r0, [sp, #20]
 8027300:	f7ff f99e 	bl	8026640 <quorem>
 8027304:	9b08      	ldr	r3, [sp, #32]
 8027306:	3030      	adds	r0, #48	@ 0x30
 8027308:	5518      	strb	r0, [r3, r4]
 802730a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802730c:	3401      	adds	r4, #1
 802730e:	0005      	movs	r5, r0
 8027310:	42a3      	cmp	r3, r4
 8027312:	ddb6      	ble.n	8027282 <_dtoa_r+0xb36>
 8027314:	2300      	movs	r3, #0
 8027316:	220a      	movs	r2, #10
 8027318:	9905      	ldr	r1, [sp, #20]
 802731a:	9803      	ldr	r0, [sp, #12]
 802731c:	f000 fce0 	bl	8027ce0 <__multadd>
 8027320:	9005      	str	r0, [sp, #20]
 8027322:	e7eb      	b.n	80272fc <_dtoa_r+0xbb0>
 8027324:	0802e9a2 	.word	0x0802e9a2
 8027328:	0802e9aa 	.word	0x0802e9aa

0802732c <_free_r>:
 802732c:	b570      	push	{r4, r5, r6, lr}
 802732e:	0005      	movs	r5, r0
 8027330:	1e0c      	subs	r4, r1, #0
 8027332:	d010      	beq.n	8027356 <_free_r+0x2a>
 8027334:	3c04      	subs	r4, #4
 8027336:	6823      	ldr	r3, [r4, #0]
 8027338:	2b00      	cmp	r3, #0
 802733a:	da00      	bge.n	802733e <_free_r+0x12>
 802733c:	18e4      	adds	r4, r4, r3
 802733e:	0028      	movs	r0, r5
 8027340:	f000 fc56 	bl	8027bf0 <__malloc_lock>
 8027344:	4a1d      	ldr	r2, [pc, #116]	@ (80273bc <_free_r+0x90>)
 8027346:	6813      	ldr	r3, [r2, #0]
 8027348:	2b00      	cmp	r3, #0
 802734a:	d105      	bne.n	8027358 <_free_r+0x2c>
 802734c:	6063      	str	r3, [r4, #4]
 802734e:	6014      	str	r4, [r2, #0]
 8027350:	0028      	movs	r0, r5
 8027352:	f000 fc55 	bl	8027c00 <__malloc_unlock>
 8027356:	bd70      	pop	{r4, r5, r6, pc}
 8027358:	42a3      	cmp	r3, r4
 802735a:	d908      	bls.n	802736e <_free_r+0x42>
 802735c:	6820      	ldr	r0, [r4, #0]
 802735e:	1821      	adds	r1, r4, r0
 8027360:	428b      	cmp	r3, r1
 8027362:	d1f3      	bne.n	802734c <_free_r+0x20>
 8027364:	6819      	ldr	r1, [r3, #0]
 8027366:	685b      	ldr	r3, [r3, #4]
 8027368:	1809      	adds	r1, r1, r0
 802736a:	6021      	str	r1, [r4, #0]
 802736c:	e7ee      	b.n	802734c <_free_r+0x20>
 802736e:	001a      	movs	r2, r3
 8027370:	685b      	ldr	r3, [r3, #4]
 8027372:	2b00      	cmp	r3, #0
 8027374:	d001      	beq.n	802737a <_free_r+0x4e>
 8027376:	42a3      	cmp	r3, r4
 8027378:	d9f9      	bls.n	802736e <_free_r+0x42>
 802737a:	6811      	ldr	r1, [r2, #0]
 802737c:	1850      	adds	r0, r2, r1
 802737e:	42a0      	cmp	r0, r4
 8027380:	d10b      	bne.n	802739a <_free_r+0x6e>
 8027382:	6820      	ldr	r0, [r4, #0]
 8027384:	1809      	adds	r1, r1, r0
 8027386:	1850      	adds	r0, r2, r1
 8027388:	6011      	str	r1, [r2, #0]
 802738a:	4283      	cmp	r3, r0
 802738c:	d1e0      	bne.n	8027350 <_free_r+0x24>
 802738e:	6818      	ldr	r0, [r3, #0]
 8027390:	685b      	ldr	r3, [r3, #4]
 8027392:	1841      	adds	r1, r0, r1
 8027394:	6011      	str	r1, [r2, #0]
 8027396:	6053      	str	r3, [r2, #4]
 8027398:	e7da      	b.n	8027350 <_free_r+0x24>
 802739a:	42a0      	cmp	r0, r4
 802739c:	d902      	bls.n	80273a4 <_free_r+0x78>
 802739e:	230c      	movs	r3, #12
 80273a0:	602b      	str	r3, [r5, #0]
 80273a2:	e7d5      	b.n	8027350 <_free_r+0x24>
 80273a4:	6820      	ldr	r0, [r4, #0]
 80273a6:	1821      	adds	r1, r4, r0
 80273a8:	428b      	cmp	r3, r1
 80273aa:	d103      	bne.n	80273b4 <_free_r+0x88>
 80273ac:	6819      	ldr	r1, [r3, #0]
 80273ae:	685b      	ldr	r3, [r3, #4]
 80273b0:	1809      	adds	r1, r1, r0
 80273b2:	6021      	str	r1, [r4, #0]
 80273b4:	6063      	str	r3, [r4, #4]
 80273b6:	6054      	str	r4, [r2, #4]
 80273b8:	e7ca      	b.n	8027350 <_free_r+0x24>
 80273ba:	46c0      	nop			@ (mov r8, r8)
 80273bc:	20003914 	.word	0x20003914

080273c0 <rshift>:
 80273c0:	0002      	movs	r2, r0
 80273c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80273c4:	6904      	ldr	r4, [r0, #16]
 80273c6:	b085      	sub	sp, #20
 80273c8:	3214      	adds	r2, #20
 80273ca:	114b      	asrs	r3, r1, #5
 80273cc:	0016      	movs	r6, r2
 80273ce:	9302      	str	r3, [sp, #8]
 80273d0:	429c      	cmp	r4, r3
 80273d2:	dd31      	ble.n	8027438 <rshift+0x78>
 80273d4:	261f      	movs	r6, #31
 80273d6:	000f      	movs	r7, r1
 80273d8:	009b      	lsls	r3, r3, #2
 80273da:	00a5      	lsls	r5, r4, #2
 80273dc:	18d3      	adds	r3, r2, r3
 80273de:	4037      	ands	r7, r6
 80273e0:	1955      	adds	r5, r2, r5
 80273e2:	9300      	str	r3, [sp, #0]
 80273e4:	9701      	str	r7, [sp, #4]
 80273e6:	4231      	tst	r1, r6
 80273e8:	d10d      	bne.n	8027406 <rshift+0x46>
 80273ea:	0016      	movs	r6, r2
 80273ec:	0019      	movs	r1, r3
 80273ee:	428d      	cmp	r5, r1
 80273f0:	d836      	bhi.n	8027460 <rshift+0xa0>
 80273f2:	9b00      	ldr	r3, [sp, #0]
 80273f4:	2600      	movs	r6, #0
 80273f6:	3b03      	subs	r3, #3
 80273f8:	429d      	cmp	r5, r3
 80273fa:	d302      	bcc.n	8027402 <rshift+0x42>
 80273fc:	9b02      	ldr	r3, [sp, #8]
 80273fe:	1ae4      	subs	r4, r4, r3
 8027400:	00a6      	lsls	r6, r4, #2
 8027402:	1996      	adds	r6, r2, r6
 8027404:	e018      	b.n	8027438 <rshift+0x78>
 8027406:	2120      	movs	r1, #32
 8027408:	9e01      	ldr	r6, [sp, #4]
 802740a:	9f01      	ldr	r7, [sp, #4]
 802740c:	1b89      	subs	r1, r1, r6
 802740e:	9e00      	ldr	r6, [sp, #0]
 8027410:	9103      	str	r1, [sp, #12]
 8027412:	ce02      	ldmia	r6!, {r1}
 8027414:	4694      	mov	ip, r2
 8027416:	40f9      	lsrs	r1, r7
 8027418:	42b5      	cmp	r5, r6
 802741a:	d816      	bhi.n	802744a <rshift+0x8a>
 802741c:	9b00      	ldr	r3, [sp, #0]
 802741e:	2600      	movs	r6, #0
 8027420:	3301      	adds	r3, #1
 8027422:	429d      	cmp	r5, r3
 8027424:	d303      	bcc.n	802742e <rshift+0x6e>
 8027426:	9b02      	ldr	r3, [sp, #8]
 8027428:	1ae4      	subs	r4, r4, r3
 802742a:	00a6      	lsls	r6, r4, #2
 802742c:	3e04      	subs	r6, #4
 802742e:	1996      	adds	r6, r2, r6
 8027430:	6031      	str	r1, [r6, #0]
 8027432:	2900      	cmp	r1, #0
 8027434:	d000      	beq.n	8027438 <rshift+0x78>
 8027436:	3604      	adds	r6, #4
 8027438:	1ab1      	subs	r1, r6, r2
 802743a:	1089      	asrs	r1, r1, #2
 802743c:	6101      	str	r1, [r0, #16]
 802743e:	4296      	cmp	r6, r2
 8027440:	d101      	bne.n	8027446 <rshift+0x86>
 8027442:	2300      	movs	r3, #0
 8027444:	6143      	str	r3, [r0, #20]
 8027446:	b005      	add	sp, #20
 8027448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802744a:	6837      	ldr	r7, [r6, #0]
 802744c:	9b03      	ldr	r3, [sp, #12]
 802744e:	409f      	lsls	r7, r3
 8027450:	430f      	orrs	r7, r1
 8027452:	4661      	mov	r1, ip
 8027454:	c180      	stmia	r1!, {r7}
 8027456:	468c      	mov	ip, r1
 8027458:	9b01      	ldr	r3, [sp, #4]
 802745a:	ce02      	ldmia	r6!, {r1}
 802745c:	40d9      	lsrs	r1, r3
 802745e:	e7db      	b.n	8027418 <rshift+0x58>
 8027460:	c980      	ldmia	r1!, {r7}
 8027462:	c680      	stmia	r6!, {r7}
 8027464:	e7c3      	b.n	80273ee <rshift+0x2e>

08027466 <__hexdig_fun>:
 8027466:	0002      	movs	r2, r0
 8027468:	3a30      	subs	r2, #48	@ 0x30
 802746a:	0003      	movs	r3, r0
 802746c:	2a09      	cmp	r2, #9
 802746e:	d802      	bhi.n	8027476 <__hexdig_fun+0x10>
 8027470:	3b20      	subs	r3, #32
 8027472:	b2d8      	uxtb	r0, r3
 8027474:	4770      	bx	lr
 8027476:	0002      	movs	r2, r0
 8027478:	3a61      	subs	r2, #97	@ 0x61
 802747a:	2a05      	cmp	r2, #5
 802747c:	d801      	bhi.n	8027482 <__hexdig_fun+0x1c>
 802747e:	3b47      	subs	r3, #71	@ 0x47
 8027480:	e7f7      	b.n	8027472 <__hexdig_fun+0xc>
 8027482:	001a      	movs	r2, r3
 8027484:	3a41      	subs	r2, #65	@ 0x41
 8027486:	2000      	movs	r0, #0
 8027488:	2a05      	cmp	r2, #5
 802748a:	d8f3      	bhi.n	8027474 <__hexdig_fun+0xe>
 802748c:	3b27      	subs	r3, #39	@ 0x27
 802748e:	e7f0      	b.n	8027472 <__hexdig_fun+0xc>

08027490 <__gethex>:
 8027490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027492:	b089      	sub	sp, #36	@ 0x24
 8027494:	9307      	str	r3, [sp, #28]
 8027496:	680b      	ldr	r3, [r1, #0]
 8027498:	9201      	str	r2, [sp, #4]
 802749a:	9003      	str	r0, [sp, #12]
 802749c:	9106      	str	r1, [sp, #24]
 802749e:	1c9a      	adds	r2, r3, #2
 80274a0:	0011      	movs	r1, r2
 80274a2:	3201      	adds	r2, #1
 80274a4:	1e50      	subs	r0, r2, #1
 80274a6:	7800      	ldrb	r0, [r0, #0]
 80274a8:	2830      	cmp	r0, #48	@ 0x30
 80274aa:	d0f9      	beq.n	80274a0 <__gethex+0x10>
 80274ac:	1acb      	subs	r3, r1, r3
 80274ae:	3b02      	subs	r3, #2
 80274b0:	9305      	str	r3, [sp, #20]
 80274b2:	9100      	str	r1, [sp, #0]
 80274b4:	f7ff ffd7 	bl	8027466 <__hexdig_fun>
 80274b8:	2300      	movs	r3, #0
 80274ba:	001d      	movs	r5, r3
 80274bc:	9302      	str	r3, [sp, #8]
 80274be:	4298      	cmp	r0, r3
 80274c0:	d11e      	bne.n	8027500 <__gethex+0x70>
 80274c2:	2201      	movs	r2, #1
 80274c4:	49a6      	ldr	r1, [pc, #664]	@ (8027760 <__gethex+0x2d0>)
 80274c6:	9800      	ldr	r0, [sp, #0]
 80274c8:	f7fe ffe4 	bl	8026494 <strncmp>
 80274cc:	0007      	movs	r7, r0
 80274ce:	42a8      	cmp	r0, r5
 80274d0:	d000      	beq.n	80274d4 <__gethex+0x44>
 80274d2:	e06a      	b.n	80275aa <__gethex+0x11a>
 80274d4:	9b00      	ldr	r3, [sp, #0]
 80274d6:	7858      	ldrb	r0, [r3, #1]
 80274d8:	1c5c      	adds	r4, r3, #1
 80274da:	f7ff ffc4 	bl	8027466 <__hexdig_fun>
 80274de:	2301      	movs	r3, #1
 80274e0:	9302      	str	r3, [sp, #8]
 80274e2:	42a8      	cmp	r0, r5
 80274e4:	d02f      	beq.n	8027546 <__gethex+0xb6>
 80274e6:	9400      	str	r4, [sp, #0]
 80274e8:	9b00      	ldr	r3, [sp, #0]
 80274ea:	7818      	ldrb	r0, [r3, #0]
 80274ec:	2830      	cmp	r0, #48	@ 0x30
 80274ee:	d009      	beq.n	8027504 <__gethex+0x74>
 80274f0:	f7ff ffb9 	bl	8027466 <__hexdig_fun>
 80274f4:	4242      	negs	r2, r0
 80274f6:	4142      	adcs	r2, r0
 80274f8:	2301      	movs	r3, #1
 80274fa:	0025      	movs	r5, r4
 80274fc:	9202      	str	r2, [sp, #8]
 80274fe:	9305      	str	r3, [sp, #20]
 8027500:	9c00      	ldr	r4, [sp, #0]
 8027502:	e004      	b.n	802750e <__gethex+0x7e>
 8027504:	9b00      	ldr	r3, [sp, #0]
 8027506:	3301      	adds	r3, #1
 8027508:	9300      	str	r3, [sp, #0]
 802750a:	e7ed      	b.n	80274e8 <__gethex+0x58>
 802750c:	3401      	adds	r4, #1
 802750e:	7820      	ldrb	r0, [r4, #0]
 8027510:	f7ff ffa9 	bl	8027466 <__hexdig_fun>
 8027514:	1e07      	subs	r7, r0, #0
 8027516:	d1f9      	bne.n	802750c <__gethex+0x7c>
 8027518:	2201      	movs	r2, #1
 802751a:	0020      	movs	r0, r4
 802751c:	4990      	ldr	r1, [pc, #576]	@ (8027760 <__gethex+0x2d0>)
 802751e:	f7fe ffb9 	bl	8026494 <strncmp>
 8027522:	2800      	cmp	r0, #0
 8027524:	d10d      	bne.n	8027542 <__gethex+0xb2>
 8027526:	2d00      	cmp	r5, #0
 8027528:	d106      	bne.n	8027538 <__gethex+0xa8>
 802752a:	3401      	adds	r4, #1
 802752c:	0025      	movs	r5, r4
 802752e:	7820      	ldrb	r0, [r4, #0]
 8027530:	f7ff ff99 	bl	8027466 <__hexdig_fun>
 8027534:	2800      	cmp	r0, #0
 8027536:	d102      	bne.n	802753e <__gethex+0xae>
 8027538:	1b2d      	subs	r5, r5, r4
 802753a:	00af      	lsls	r7, r5, #2
 802753c:	e003      	b.n	8027546 <__gethex+0xb6>
 802753e:	3401      	adds	r4, #1
 8027540:	e7f5      	b.n	802752e <__gethex+0x9e>
 8027542:	2d00      	cmp	r5, #0
 8027544:	d1f8      	bne.n	8027538 <__gethex+0xa8>
 8027546:	2220      	movs	r2, #32
 8027548:	7823      	ldrb	r3, [r4, #0]
 802754a:	0026      	movs	r6, r4
 802754c:	4393      	bics	r3, r2
 802754e:	2b50      	cmp	r3, #80	@ 0x50
 8027550:	d11d      	bne.n	802758e <__gethex+0xfe>
 8027552:	7863      	ldrb	r3, [r4, #1]
 8027554:	2b2b      	cmp	r3, #43	@ 0x2b
 8027556:	d02d      	beq.n	80275b4 <__gethex+0x124>
 8027558:	2b2d      	cmp	r3, #45	@ 0x2d
 802755a:	d02f      	beq.n	80275bc <__gethex+0x12c>
 802755c:	2300      	movs	r3, #0
 802755e:	1c66      	adds	r6, r4, #1
 8027560:	9304      	str	r3, [sp, #16]
 8027562:	7830      	ldrb	r0, [r6, #0]
 8027564:	f7ff ff7f 	bl	8027466 <__hexdig_fun>
 8027568:	1e43      	subs	r3, r0, #1
 802756a:	b2db      	uxtb	r3, r3
 802756c:	0005      	movs	r5, r0
 802756e:	2b18      	cmp	r3, #24
 8027570:	d82a      	bhi.n	80275c8 <__gethex+0x138>
 8027572:	7870      	ldrb	r0, [r6, #1]
 8027574:	f7ff ff77 	bl	8027466 <__hexdig_fun>
 8027578:	1e43      	subs	r3, r0, #1
 802757a:	b2db      	uxtb	r3, r3
 802757c:	3601      	adds	r6, #1
 802757e:	3d10      	subs	r5, #16
 8027580:	2b18      	cmp	r3, #24
 8027582:	d91d      	bls.n	80275c0 <__gethex+0x130>
 8027584:	9b04      	ldr	r3, [sp, #16]
 8027586:	2b00      	cmp	r3, #0
 8027588:	d000      	beq.n	802758c <__gethex+0xfc>
 802758a:	426d      	negs	r5, r5
 802758c:	197f      	adds	r7, r7, r5
 802758e:	9b06      	ldr	r3, [sp, #24]
 8027590:	601e      	str	r6, [r3, #0]
 8027592:	9b02      	ldr	r3, [sp, #8]
 8027594:	2b00      	cmp	r3, #0
 8027596:	d019      	beq.n	80275cc <__gethex+0x13c>
 8027598:	9b05      	ldr	r3, [sp, #20]
 802759a:	2606      	movs	r6, #6
 802759c:	425a      	negs	r2, r3
 802759e:	4153      	adcs	r3, r2
 80275a0:	425b      	negs	r3, r3
 80275a2:	401e      	ands	r6, r3
 80275a4:	0030      	movs	r0, r6
 80275a6:	b009      	add	sp, #36	@ 0x24
 80275a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80275aa:	2301      	movs	r3, #1
 80275ac:	2700      	movs	r7, #0
 80275ae:	9c00      	ldr	r4, [sp, #0]
 80275b0:	9302      	str	r3, [sp, #8]
 80275b2:	e7c8      	b.n	8027546 <__gethex+0xb6>
 80275b4:	2300      	movs	r3, #0
 80275b6:	9304      	str	r3, [sp, #16]
 80275b8:	1ca6      	adds	r6, r4, #2
 80275ba:	e7d2      	b.n	8027562 <__gethex+0xd2>
 80275bc:	2301      	movs	r3, #1
 80275be:	e7fa      	b.n	80275b6 <__gethex+0x126>
 80275c0:	230a      	movs	r3, #10
 80275c2:	435d      	muls	r5, r3
 80275c4:	182d      	adds	r5, r5, r0
 80275c6:	e7d4      	b.n	8027572 <__gethex+0xe2>
 80275c8:	0026      	movs	r6, r4
 80275ca:	e7e0      	b.n	802758e <__gethex+0xfe>
 80275cc:	9b00      	ldr	r3, [sp, #0]
 80275ce:	9902      	ldr	r1, [sp, #8]
 80275d0:	1ae3      	subs	r3, r4, r3
 80275d2:	3b01      	subs	r3, #1
 80275d4:	2b07      	cmp	r3, #7
 80275d6:	dc0a      	bgt.n	80275ee <__gethex+0x15e>
 80275d8:	9803      	ldr	r0, [sp, #12]
 80275da:	f000 fb19 	bl	8027c10 <_Balloc>
 80275de:	1e05      	subs	r5, r0, #0
 80275e0:	d108      	bne.n	80275f4 <__gethex+0x164>
 80275e2:	002a      	movs	r2, r5
 80275e4:	21e4      	movs	r1, #228	@ 0xe4
 80275e6:	4b5f      	ldr	r3, [pc, #380]	@ (8027764 <__gethex+0x2d4>)
 80275e8:	485f      	ldr	r0, [pc, #380]	@ (8027768 <__gethex+0x2d8>)
 80275ea:	f001 fbe9 	bl	8028dc0 <__assert_func>
 80275ee:	3101      	adds	r1, #1
 80275f0:	105b      	asrs	r3, r3, #1
 80275f2:	e7ef      	b.n	80275d4 <__gethex+0x144>
 80275f4:	0003      	movs	r3, r0
 80275f6:	3314      	adds	r3, #20
 80275f8:	9302      	str	r3, [sp, #8]
 80275fa:	9305      	str	r3, [sp, #20]
 80275fc:	2300      	movs	r3, #0
 80275fe:	001e      	movs	r6, r3
 8027600:	9304      	str	r3, [sp, #16]
 8027602:	9b00      	ldr	r3, [sp, #0]
 8027604:	42a3      	cmp	r3, r4
 8027606:	d338      	bcc.n	802767a <__gethex+0x1ea>
 8027608:	9c05      	ldr	r4, [sp, #20]
 802760a:	9b02      	ldr	r3, [sp, #8]
 802760c:	c440      	stmia	r4!, {r6}
 802760e:	1ae4      	subs	r4, r4, r3
 8027610:	10a4      	asrs	r4, r4, #2
 8027612:	0030      	movs	r0, r6
 8027614:	612c      	str	r4, [r5, #16]
 8027616:	f000 fbf3 	bl	8027e00 <__hi0bits>
 802761a:	9b01      	ldr	r3, [sp, #4]
 802761c:	0164      	lsls	r4, r4, #5
 802761e:	681b      	ldr	r3, [r3, #0]
 8027620:	1a26      	subs	r6, r4, r0
 8027622:	9300      	str	r3, [sp, #0]
 8027624:	429e      	cmp	r6, r3
 8027626:	dd52      	ble.n	80276ce <__gethex+0x23e>
 8027628:	1af6      	subs	r6, r6, r3
 802762a:	0031      	movs	r1, r6
 802762c:	0028      	movs	r0, r5
 802762e:	f000 ff8e 	bl	802854e <__any_on>
 8027632:	1e04      	subs	r4, r0, #0
 8027634:	d00f      	beq.n	8027656 <__gethex+0x1c6>
 8027636:	2401      	movs	r4, #1
 8027638:	211f      	movs	r1, #31
 802763a:	0020      	movs	r0, r4
 802763c:	1e73      	subs	r3, r6, #1
 802763e:	4019      	ands	r1, r3
 8027640:	4088      	lsls	r0, r1
 8027642:	0001      	movs	r1, r0
 8027644:	115a      	asrs	r2, r3, #5
 8027646:	9802      	ldr	r0, [sp, #8]
 8027648:	0092      	lsls	r2, r2, #2
 802764a:	5812      	ldr	r2, [r2, r0]
 802764c:	420a      	tst	r2, r1
 802764e:	d002      	beq.n	8027656 <__gethex+0x1c6>
 8027650:	42a3      	cmp	r3, r4
 8027652:	dc34      	bgt.n	80276be <__gethex+0x22e>
 8027654:	2402      	movs	r4, #2
 8027656:	0031      	movs	r1, r6
 8027658:	0028      	movs	r0, r5
 802765a:	f7ff feb1 	bl	80273c0 <rshift>
 802765e:	19bf      	adds	r7, r7, r6
 8027660:	9b01      	ldr	r3, [sp, #4]
 8027662:	689b      	ldr	r3, [r3, #8]
 8027664:	42bb      	cmp	r3, r7
 8027666:	da42      	bge.n	80276ee <__gethex+0x25e>
 8027668:	0029      	movs	r1, r5
 802766a:	9803      	ldr	r0, [sp, #12]
 802766c:	f000 fb14 	bl	8027c98 <_Bfree>
 8027670:	2300      	movs	r3, #0
 8027672:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027674:	26a3      	movs	r6, #163	@ 0xa3
 8027676:	6013      	str	r3, [r2, #0]
 8027678:	e794      	b.n	80275a4 <__gethex+0x114>
 802767a:	3c01      	subs	r4, #1
 802767c:	7823      	ldrb	r3, [r4, #0]
 802767e:	2b2e      	cmp	r3, #46	@ 0x2e
 8027680:	d012      	beq.n	80276a8 <__gethex+0x218>
 8027682:	9b04      	ldr	r3, [sp, #16]
 8027684:	2b20      	cmp	r3, #32
 8027686:	d104      	bne.n	8027692 <__gethex+0x202>
 8027688:	9b05      	ldr	r3, [sp, #20]
 802768a:	c340      	stmia	r3!, {r6}
 802768c:	2600      	movs	r6, #0
 802768e:	9305      	str	r3, [sp, #20]
 8027690:	9604      	str	r6, [sp, #16]
 8027692:	7820      	ldrb	r0, [r4, #0]
 8027694:	f7ff fee7 	bl	8027466 <__hexdig_fun>
 8027698:	230f      	movs	r3, #15
 802769a:	4018      	ands	r0, r3
 802769c:	9b04      	ldr	r3, [sp, #16]
 802769e:	4098      	lsls	r0, r3
 80276a0:	3304      	adds	r3, #4
 80276a2:	4306      	orrs	r6, r0
 80276a4:	9304      	str	r3, [sp, #16]
 80276a6:	e7ac      	b.n	8027602 <__gethex+0x172>
 80276a8:	9b00      	ldr	r3, [sp, #0]
 80276aa:	42a3      	cmp	r3, r4
 80276ac:	d8e9      	bhi.n	8027682 <__gethex+0x1f2>
 80276ae:	2201      	movs	r2, #1
 80276b0:	0020      	movs	r0, r4
 80276b2:	492b      	ldr	r1, [pc, #172]	@ (8027760 <__gethex+0x2d0>)
 80276b4:	f7fe feee 	bl	8026494 <strncmp>
 80276b8:	2800      	cmp	r0, #0
 80276ba:	d1e2      	bne.n	8027682 <__gethex+0x1f2>
 80276bc:	e7a1      	b.n	8027602 <__gethex+0x172>
 80276be:	0028      	movs	r0, r5
 80276c0:	1eb1      	subs	r1, r6, #2
 80276c2:	f000 ff44 	bl	802854e <__any_on>
 80276c6:	2800      	cmp	r0, #0
 80276c8:	d0c4      	beq.n	8027654 <__gethex+0x1c4>
 80276ca:	2403      	movs	r4, #3
 80276cc:	e7c3      	b.n	8027656 <__gethex+0x1c6>
 80276ce:	9b00      	ldr	r3, [sp, #0]
 80276d0:	2400      	movs	r4, #0
 80276d2:	429e      	cmp	r6, r3
 80276d4:	dac4      	bge.n	8027660 <__gethex+0x1d0>
 80276d6:	1b9e      	subs	r6, r3, r6
 80276d8:	0029      	movs	r1, r5
 80276da:	0032      	movs	r2, r6
 80276dc:	9803      	ldr	r0, [sp, #12]
 80276de:	f000 fcfd 	bl	80280dc <__lshift>
 80276e2:	0003      	movs	r3, r0
 80276e4:	3314      	adds	r3, #20
 80276e6:	0005      	movs	r5, r0
 80276e8:	1bbf      	subs	r7, r7, r6
 80276ea:	9302      	str	r3, [sp, #8]
 80276ec:	e7b8      	b.n	8027660 <__gethex+0x1d0>
 80276ee:	9b01      	ldr	r3, [sp, #4]
 80276f0:	685e      	ldr	r6, [r3, #4]
 80276f2:	42be      	cmp	r6, r7
 80276f4:	dd6f      	ble.n	80277d6 <__gethex+0x346>
 80276f6:	9b00      	ldr	r3, [sp, #0]
 80276f8:	1bf6      	subs	r6, r6, r7
 80276fa:	42b3      	cmp	r3, r6
 80276fc:	dc36      	bgt.n	802776c <__gethex+0x2dc>
 80276fe:	9b01      	ldr	r3, [sp, #4]
 8027700:	68db      	ldr	r3, [r3, #12]
 8027702:	2b02      	cmp	r3, #2
 8027704:	d024      	beq.n	8027750 <__gethex+0x2c0>
 8027706:	2b03      	cmp	r3, #3
 8027708:	d026      	beq.n	8027758 <__gethex+0x2c8>
 802770a:	2b01      	cmp	r3, #1
 802770c:	d117      	bne.n	802773e <__gethex+0x2ae>
 802770e:	9b00      	ldr	r3, [sp, #0]
 8027710:	42b3      	cmp	r3, r6
 8027712:	d114      	bne.n	802773e <__gethex+0x2ae>
 8027714:	2b01      	cmp	r3, #1
 8027716:	d10b      	bne.n	8027730 <__gethex+0x2a0>
 8027718:	9b01      	ldr	r3, [sp, #4]
 802771a:	9a07      	ldr	r2, [sp, #28]
 802771c:	685b      	ldr	r3, [r3, #4]
 802771e:	2662      	movs	r6, #98	@ 0x62
 8027720:	6013      	str	r3, [r2, #0]
 8027722:	2301      	movs	r3, #1
 8027724:	9a02      	ldr	r2, [sp, #8]
 8027726:	612b      	str	r3, [r5, #16]
 8027728:	6013      	str	r3, [r2, #0]
 802772a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802772c:	601d      	str	r5, [r3, #0]
 802772e:	e739      	b.n	80275a4 <__gethex+0x114>
 8027730:	9900      	ldr	r1, [sp, #0]
 8027732:	0028      	movs	r0, r5
 8027734:	3901      	subs	r1, #1
 8027736:	f000 ff0a 	bl	802854e <__any_on>
 802773a:	2800      	cmp	r0, #0
 802773c:	d1ec      	bne.n	8027718 <__gethex+0x288>
 802773e:	0029      	movs	r1, r5
 8027740:	9803      	ldr	r0, [sp, #12]
 8027742:	f000 faa9 	bl	8027c98 <_Bfree>
 8027746:	2300      	movs	r3, #0
 8027748:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802774a:	2650      	movs	r6, #80	@ 0x50
 802774c:	6013      	str	r3, [r2, #0]
 802774e:	e729      	b.n	80275a4 <__gethex+0x114>
 8027750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027752:	2b00      	cmp	r3, #0
 8027754:	d1f3      	bne.n	802773e <__gethex+0x2ae>
 8027756:	e7df      	b.n	8027718 <__gethex+0x288>
 8027758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802775a:	2b00      	cmp	r3, #0
 802775c:	d1dc      	bne.n	8027718 <__gethex+0x288>
 802775e:	e7ee      	b.n	802773e <__gethex+0x2ae>
 8027760:	0802e964 	.word	0x0802e964
 8027764:	0802ea1e 	.word	0x0802ea1e
 8027768:	0802ea2f 	.word	0x0802ea2f
 802776c:	1e77      	subs	r7, r6, #1
 802776e:	2c00      	cmp	r4, #0
 8027770:	d12f      	bne.n	80277d2 <__gethex+0x342>
 8027772:	2f00      	cmp	r7, #0
 8027774:	d004      	beq.n	8027780 <__gethex+0x2f0>
 8027776:	0039      	movs	r1, r7
 8027778:	0028      	movs	r0, r5
 802777a:	f000 fee8 	bl	802854e <__any_on>
 802777e:	0004      	movs	r4, r0
 8027780:	231f      	movs	r3, #31
 8027782:	117a      	asrs	r2, r7, #5
 8027784:	401f      	ands	r7, r3
 8027786:	3b1e      	subs	r3, #30
 8027788:	40bb      	lsls	r3, r7
 802778a:	9902      	ldr	r1, [sp, #8]
 802778c:	0092      	lsls	r2, r2, #2
 802778e:	5852      	ldr	r2, [r2, r1]
 8027790:	421a      	tst	r2, r3
 8027792:	d001      	beq.n	8027798 <__gethex+0x308>
 8027794:	2302      	movs	r3, #2
 8027796:	431c      	orrs	r4, r3
 8027798:	9b00      	ldr	r3, [sp, #0]
 802779a:	0031      	movs	r1, r6
 802779c:	1b9b      	subs	r3, r3, r6
 802779e:	2602      	movs	r6, #2
 80277a0:	0028      	movs	r0, r5
 80277a2:	9300      	str	r3, [sp, #0]
 80277a4:	f7ff fe0c 	bl	80273c0 <rshift>
 80277a8:	9b01      	ldr	r3, [sp, #4]
 80277aa:	685f      	ldr	r7, [r3, #4]
 80277ac:	2c00      	cmp	r4, #0
 80277ae:	d03f      	beq.n	8027830 <__gethex+0x3a0>
 80277b0:	9b01      	ldr	r3, [sp, #4]
 80277b2:	68db      	ldr	r3, [r3, #12]
 80277b4:	2b02      	cmp	r3, #2
 80277b6:	d010      	beq.n	80277da <__gethex+0x34a>
 80277b8:	2b03      	cmp	r3, #3
 80277ba:	d012      	beq.n	80277e2 <__gethex+0x352>
 80277bc:	2b01      	cmp	r3, #1
 80277be:	d106      	bne.n	80277ce <__gethex+0x33e>
 80277c0:	07a2      	lsls	r2, r4, #30
 80277c2:	d504      	bpl.n	80277ce <__gethex+0x33e>
 80277c4:	9a02      	ldr	r2, [sp, #8]
 80277c6:	6812      	ldr	r2, [r2, #0]
 80277c8:	4314      	orrs	r4, r2
 80277ca:	421c      	tst	r4, r3
 80277cc:	d10c      	bne.n	80277e8 <__gethex+0x358>
 80277ce:	2310      	movs	r3, #16
 80277d0:	e02d      	b.n	802782e <__gethex+0x39e>
 80277d2:	2401      	movs	r4, #1
 80277d4:	e7d4      	b.n	8027780 <__gethex+0x2f0>
 80277d6:	2601      	movs	r6, #1
 80277d8:	e7e8      	b.n	80277ac <__gethex+0x31c>
 80277da:	2301      	movs	r3, #1
 80277dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80277de:	1a9b      	subs	r3, r3, r2
 80277e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80277e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80277e4:	2b00      	cmp	r3, #0
 80277e6:	d0f2      	beq.n	80277ce <__gethex+0x33e>
 80277e8:	692b      	ldr	r3, [r5, #16]
 80277ea:	2000      	movs	r0, #0
 80277ec:	9302      	str	r3, [sp, #8]
 80277ee:	009b      	lsls	r3, r3, #2
 80277f0:	9304      	str	r3, [sp, #16]
 80277f2:	002b      	movs	r3, r5
 80277f4:	9a04      	ldr	r2, [sp, #16]
 80277f6:	3314      	adds	r3, #20
 80277f8:	1899      	adds	r1, r3, r2
 80277fa:	681a      	ldr	r2, [r3, #0]
 80277fc:	1c54      	adds	r4, r2, #1
 80277fe:	d01c      	beq.n	802783a <__gethex+0x3aa>
 8027800:	3201      	adds	r2, #1
 8027802:	601a      	str	r2, [r3, #0]
 8027804:	002b      	movs	r3, r5
 8027806:	3314      	adds	r3, #20
 8027808:	2e02      	cmp	r6, #2
 802780a:	d13f      	bne.n	802788c <__gethex+0x3fc>
 802780c:	9a01      	ldr	r2, [sp, #4]
 802780e:	9900      	ldr	r1, [sp, #0]
 8027810:	6812      	ldr	r2, [r2, #0]
 8027812:	3a01      	subs	r2, #1
 8027814:	428a      	cmp	r2, r1
 8027816:	d109      	bne.n	802782c <__gethex+0x39c>
 8027818:	000a      	movs	r2, r1
 802781a:	201f      	movs	r0, #31
 802781c:	4010      	ands	r0, r2
 802781e:	2201      	movs	r2, #1
 8027820:	4082      	lsls	r2, r0
 8027822:	1149      	asrs	r1, r1, #5
 8027824:	0089      	lsls	r1, r1, #2
 8027826:	58cb      	ldr	r3, [r1, r3]
 8027828:	4213      	tst	r3, r2
 802782a:	d13d      	bne.n	80278a8 <__gethex+0x418>
 802782c:	2320      	movs	r3, #32
 802782e:	431e      	orrs	r6, r3
 8027830:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027832:	601d      	str	r5, [r3, #0]
 8027834:	9b07      	ldr	r3, [sp, #28]
 8027836:	601f      	str	r7, [r3, #0]
 8027838:	e6b4      	b.n	80275a4 <__gethex+0x114>
 802783a:	c301      	stmia	r3!, {r0}
 802783c:	4299      	cmp	r1, r3
 802783e:	d8dc      	bhi.n	80277fa <__gethex+0x36a>
 8027840:	68ab      	ldr	r3, [r5, #8]
 8027842:	9a02      	ldr	r2, [sp, #8]
 8027844:	429a      	cmp	r2, r3
 8027846:	db18      	blt.n	802787a <__gethex+0x3ea>
 8027848:	6869      	ldr	r1, [r5, #4]
 802784a:	9803      	ldr	r0, [sp, #12]
 802784c:	3101      	adds	r1, #1
 802784e:	f000 f9df 	bl	8027c10 <_Balloc>
 8027852:	1e04      	subs	r4, r0, #0
 8027854:	d104      	bne.n	8027860 <__gethex+0x3d0>
 8027856:	0022      	movs	r2, r4
 8027858:	2184      	movs	r1, #132	@ 0x84
 802785a:	4b1d      	ldr	r3, [pc, #116]	@ (80278d0 <__gethex+0x440>)
 802785c:	481d      	ldr	r0, [pc, #116]	@ (80278d4 <__gethex+0x444>)
 802785e:	e6c4      	b.n	80275ea <__gethex+0x15a>
 8027860:	0029      	movs	r1, r5
 8027862:	692a      	ldr	r2, [r5, #16]
 8027864:	310c      	adds	r1, #12
 8027866:	3202      	adds	r2, #2
 8027868:	0092      	lsls	r2, r2, #2
 802786a:	300c      	adds	r0, #12
 802786c:	f7fe fed8 	bl	8026620 <memcpy>
 8027870:	0029      	movs	r1, r5
 8027872:	9803      	ldr	r0, [sp, #12]
 8027874:	f000 fa10 	bl	8027c98 <_Bfree>
 8027878:	0025      	movs	r5, r4
 802787a:	692b      	ldr	r3, [r5, #16]
 802787c:	1c5a      	adds	r2, r3, #1
 802787e:	612a      	str	r2, [r5, #16]
 8027880:	2201      	movs	r2, #1
 8027882:	3304      	adds	r3, #4
 8027884:	009b      	lsls	r3, r3, #2
 8027886:	18eb      	adds	r3, r5, r3
 8027888:	605a      	str	r2, [r3, #4]
 802788a:	e7bb      	b.n	8027804 <__gethex+0x374>
 802788c:	692a      	ldr	r2, [r5, #16]
 802788e:	9902      	ldr	r1, [sp, #8]
 8027890:	428a      	cmp	r2, r1
 8027892:	dd0b      	ble.n	80278ac <__gethex+0x41c>
 8027894:	2101      	movs	r1, #1
 8027896:	0028      	movs	r0, r5
 8027898:	f7ff fd92 	bl	80273c0 <rshift>
 802789c:	9b01      	ldr	r3, [sp, #4]
 802789e:	3701      	adds	r7, #1
 80278a0:	689b      	ldr	r3, [r3, #8]
 80278a2:	42bb      	cmp	r3, r7
 80278a4:	da00      	bge.n	80278a8 <__gethex+0x418>
 80278a6:	e6df      	b.n	8027668 <__gethex+0x1d8>
 80278a8:	2601      	movs	r6, #1
 80278aa:	e7bf      	b.n	802782c <__gethex+0x39c>
 80278ac:	221f      	movs	r2, #31
 80278ae:	9c00      	ldr	r4, [sp, #0]
 80278b0:	9900      	ldr	r1, [sp, #0]
 80278b2:	4014      	ands	r4, r2
 80278b4:	4211      	tst	r1, r2
 80278b6:	d0f7      	beq.n	80278a8 <__gethex+0x418>
 80278b8:	9a04      	ldr	r2, [sp, #16]
 80278ba:	189b      	adds	r3, r3, r2
 80278bc:	3b04      	subs	r3, #4
 80278be:	6818      	ldr	r0, [r3, #0]
 80278c0:	f000 fa9e 	bl	8027e00 <__hi0bits>
 80278c4:	2320      	movs	r3, #32
 80278c6:	1b1b      	subs	r3, r3, r4
 80278c8:	4298      	cmp	r0, r3
 80278ca:	dbe3      	blt.n	8027894 <__gethex+0x404>
 80278cc:	e7ec      	b.n	80278a8 <__gethex+0x418>
 80278ce:	46c0      	nop			@ (mov r8, r8)
 80278d0:	0802ea1e 	.word	0x0802ea1e
 80278d4:	0802ea2f 	.word	0x0802ea2f

080278d8 <L_shift>:
 80278d8:	2308      	movs	r3, #8
 80278da:	b570      	push	{r4, r5, r6, lr}
 80278dc:	2520      	movs	r5, #32
 80278de:	1a9a      	subs	r2, r3, r2
 80278e0:	0092      	lsls	r2, r2, #2
 80278e2:	1aad      	subs	r5, r5, r2
 80278e4:	6843      	ldr	r3, [r0, #4]
 80278e6:	6804      	ldr	r4, [r0, #0]
 80278e8:	001e      	movs	r6, r3
 80278ea:	40ae      	lsls	r6, r5
 80278ec:	40d3      	lsrs	r3, r2
 80278ee:	4334      	orrs	r4, r6
 80278f0:	6004      	str	r4, [r0, #0]
 80278f2:	6043      	str	r3, [r0, #4]
 80278f4:	3004      	adds	r0, #4
 80278f6:	4288      	cmp	r0, r1
 80278f8:	d3f4      	bcc.n	80278e4 <L_shift+0xc>
 80278fa:	bd70      	pop	{r4, r5, r6, pc}

080278fc <__match>:
 80278fc:	b530      	push	{r4, r5, lr}
 80278fe:	6803      	ldr	r3, [r0, #0]
 8027900:	780c      	ldrb	r4, [r1, #0]
 8027902:	3301      	adds	r3, #1
 8027904:	2c00      	cmp	r4, #0
 8027906:	d102      	bne.n	802790e <__match+0x12>
 8027908:	6003      	str	r3, [r0, #0]
 802790a:	2001      	movs	r0, #1
 802790c:	bd30      	pop	{r4, r5, pc}
 802790e:	781a      	ldrb	r2, [r3, #0]
 8027910:	0015      	movs	r5, r2
 8027912:	3d41      	subs	r5, #65	@ 0x41
 8027914:	2d19      	cmp	r5, #25
 8027916:	d800      	bhi.n	802791a <__match+0x1e>
 8027918:	3220      	adds	r2, #32
 802791a:	3101      	adds	r1, #1
 802791c:	42a2      	cmp	r2, r4
 802791e:	d0ef      	beq.n	8027900 <__match+0x4>
 8027920:	2000      	movs	r0, #0
 8027922:	e7f3      	b.n	802790c <__match+0x10>

08027924 <__hexnan>:
 8027924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027926:	680b      	ldr	r3, [r1, #0]
 8027928:	b08b      	sub	sp, #44	@ 0x2c
 802792a:	9201      	str	r2, [sp, #4]
 802792c:	9901      	ldr	r1, [sp, #4]
 802792e:	115a      	asrs	r2, r3, #5
 8027930:	0092      	lsls	r2, r2, #2
 8027932:	188a      	adds	r2, r1, r2
 8027934:	9202      	str	r2, [sp, #8]
 8027936:	0019      	movs	r1, r3
 8027938:	221f      	movs	r2, #31
 802793a:	4011      	ands	r1, r2
 802793c:	9008      	str	r0, [sp, #32]
 802793e:	9106      	str	r1, [sp, #24]
 8027940:	4213      	tst	r3, r2
 8027942:	d002      	beq.n	802794a <__hexnan+0x26>
 8027944:	9b02      	ldr	r3, [sp, #8]
 8027946:	3304      	adds	r3, #4
 8027948:	9302      	str	r3, [sp, #8]
 802794a:	9b02      	ldr	r3, [sp, #8]
 802794c:	2500      	movs	r5, #0
 802794e:	1f1f      	subs	r7, r3, #4
 8027950:	003e      	movs	r6, r7
 8027952:	003c      	movs	r4, r7
 8027954:	9b08      	ldr	r3, [sp, #32]
 8027956:	603d      	str	r5, [r7, #0]
 8027958:	681b      	ldr	r3, [r3, #0]
 802795a:	9507      	str	r5, [sp, #28]
 802795c:	9305      	str	r3, [sp, #20]
 802795e:	9503      	str	r5, [sp, #12]
 8027960:	9b05      	ldr	r3, [sp, #20]
 8027962:	3301      	adds	r3, #1
 8027964:	9309      	str	r3, [sp, #36]	@ 0x24
 8027966:	9b05      	ldr	r3, [sp, #20]
 8027968:	785b      	ldrb	r3, [r3, #1]
 802796a:	9304      	str	r3, [sp, #16]
 802796c:	2b00      	cmp	r3, #0
 802796e:	d028      	beq.n	80279c2 <__hexnan+0x9e>
 8027970:	9804      	ldr	r0, [sp, #16]
 8027972:	f7ff fd78 	bl	8027466 <__hexdig_fun>
 8027976:	2800      	cmp	r0, #0
 8027978:	d155      	bne.n	8027a26 <__hexnan+0x102>
 802797a:	9b04      	ldr	r3, [sp, #16]
 802797c:	2b20      	cmp	r3, #32
 802797e:	d819      	bhi.n	80279b4 <__hexnan+0x90>
 8027980:	9b03      	ldr	r3, [sp, #12]
 8027982:	9a07      	ldr	r2, [sp, #28]
 8027984:	4293      	cmp	r3, r2
 8027986:	dd12      	ble.n	80279ae <__hexnan+0x8a>
 8027988:	42b4      	cmp	r4, r6
 802798a:	d206      	bcs.n	802799a <__hexnan+0x76>
 802798c:	2d07      	cmp	r5, #7
 802798e:	dc04      	bgt.n	802799a <__hexnan+0x76>
 8027990:	002a      	movs	r2, r5
 8027992:	0031      	movs	r1, r6
 8027994:	0020      	movs	r0, r4
 8027996:	f7ff ff9f 	bl	80278d8 <L_shift>
 802799a:	9b01      	ldr	r3, [sp, #4]
 802799c:	2508      	movs	r5, #8
 802799e:	429c      	cmp	r4, r3
 80279a0:	d905      	bls.n	80279ae <__hexnan+0x8a>
 80279a2:	1f26      	subs	r6, r4, #4
 80279a4:	2500      	movs	r5, #0
 80279a6:	0034      	movs	r4, r6
 80279a8:	9b03      	ldr	r3, [sp, #12]
 80279aa:	6035      	str	r5, [r6, #0]
 80279ac:	9307      	str	r3, [sp, #28]
 80279ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80279b0:	9305      	str	r3, [sp, #20]
 80279b2:	e7d5      	b.n	8027960 <__hexnan+0x3c>
 80279b4:	9b04      	ldr	r3, [sp, #16]
 80279b6:	2b29      	cmp	r3, #41	@ 0x29
 80279b8:	d15a      	bne.n	8027a70 <__hexnan+0x14c>
 80279ba:	9b05      	ldr	r3, [sp, #20]
 80279bc:	9a08      	ldr	r2, [sp, #32]
 80279be:	3302      	adds	r3, #2
 80279c0:	6013      	str	r3, [r2, #0]
 80279c2:	9b03      	ldr	r3, [sp, #12]
 80279c4:	2b00      	cmp	r3, #0
 80279c6:	d053      	beq.n	8027a70 <__hexnan+0x14c>
 80279c8:	42b4      	cmp	r4, r6
 80279ca:	d206      	bcs.n	80279da <__hexnan+0xb6>
 80279cc:	2d07      	cmp	r5, #7
 80279ce:	dc04      	bgt.n	80279da <__hexnan+0xb6>
 80279d0:	002a      	movs	r2, r5
 80279d2:	0031      	movs	r1, r6
 80279d4:	0020      	movs	r0, r4
 80279d6:	f7ff ff7f 	bl	80278d8 <L_shift>
 80279da:	9b01      	ldr	r3, [sp, #4]
 80279dc:	429c      	cmp	r4, r3
 80279de:	d936      	bls.n	8027a4e <__hexnan+0x12a>
 80279e0:	001a      	movs	r2, r3
 80279e2:	0023      	movs	r3, r4
 80279e4:	cb02      	ldmia	r3!, {r1}
 80279e6:	c202      	stmia	r2!, {r1}
 80279e8:	429f      	cmp	r7, r3
 80279ea:	d2fb      	bcs.n	80279e4 <__hexnan+0xc0>
 80279ec:	9b02      	ldr	r3, [sp, #8]
 80279ee:	1c62      	adds	r2, r4, #1
 80279f0:	1ed9      	subs	r1, r3, #3
 80279f2:	2304      	movs	r3, #4
 80279f4:	4291      	cmp	r1, r2
 80279f6:	d305      	bcc.n	8027a04 <__hexnan+0xe0>
 80279f8:	9b02      	ldr	r3, [sp, #8]
 80279fa:	3b04      	subs	r3, #4
 80279fc:	1b1b      	subs	r3, r3, r4
 80279fe:	089b      	lsrs	r3, r3, #2
 8027a00:	3301      	adds	r3, #1
 8027a02:	009b      	lsls	r3, r3, #2
 8027a04:	9a01      	ldr	r2, [sp, #4]
 8027a06:	18d3      	adds	r3, r2, r3
 8027a08:	2200      	movs	r2, #0
 8027a0a:	c304      	stmia	r3!, {r2}
 8027a0c:	429f      	cmp	r7, r3
 8027a0e:	d2fc      	bcs.n	8027a0a <__hexnan+0xe6>
 8027a10:	683b      	ldr	r3, [r7, #0]
 8027a12:	2b00      	cmp	r3, #0
 8027a14:	d104      	bne.n	8027a20 <__hexnan+0xfc>
 8027a16:	9b01      	ldr	r3, [sp, #4]
 8027a18:	429f      	cmp	r7, r3
 8027a1a:	d127      	bne.n	8027a6c <__hexnan+0x148>
 8027a1c:	2301      	movs	r3, #1
 8027a1e:	603b      	str	r3, [r7, #0]
 8027a20:	2005      	movs	r0, #5
 8027a22:	b00b      	add	sp, #44	@ 0x2c
 8027a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027a26:	9b03      	ldr	r3, [sp, #12]
 8027a28:	3501      	adds	r5, #1
 8027a2a:	3301      	adds	r3, #1
 8027a2c:	9303      	str	r3, [sp, #12]
 8027a2e:	2d08      	cmp	r5, #8
 8027a30:	dd06      	ble.n	8027a40 <__hexnan+0x11c>
 8027a32:	9b01      	ldr	r3, [sp, #4]
 8027a34:	429c      	cmp	r4, r3
 8027a36:	d9ba      	bls.n	80279ae <__hexnan+0x8a>
 8027a38:	2300      	movs	r3, #0
 8027a3a:	2501      	movs	r5, #1
 8027a3c:	3c04      	subs	r4, #4
 8027a3e:	6023      	str	r3, [r4, #0]
 8027a40:	220f      	movs	r2, #15
 8027a42:	6823      	ldr	r3, [r4, #0]
 8027a44:	4010      	ands	r0, r2
 8027a46:	011b      	lsls	r3, r3, #4
 8027a48:	4303      	orrs	r3, r0
 8027a4a:	6023      	str	r3, [r4, #0]
 8027a4c:	e7af      	b.n	80279ae <__hexnan+0x8a>
 8027a4e:	9b06      	ldr	r3, [sp, #24]
 8027a50:	2b00      	cmp	r3, #0
 8027a52:	d0dd      	beq.n	8027a10 <__hexnan+0xec>
 8027a54:	2320      	movs	r3, #32
 8027a56:	9a06      	ldr	r2, [sp, #24]
 8027a58:	9902      	ldr	r1, [sp, #8]
 8027a5a:	1a9b      	subs	r3, r3, r2
 8027a5c:	2201      	movs	r2, #1
 8027a5e:	4252      	negs	r2, r2
 8027a60:	40da      	lsrs	r2, r3
 8027a62:	3904      	subs	r1, #4
 8027a64:	680b      	ldr	r3, [r1, #0]
 8027a66:	4013      	ands	r3, r2
 8027a68:	600b      	str	r3, [r1, #0]
 8027a6a:	e7d1      	b.n	8027a10 <__hexnan+0xec>
 8027a6c:	3f04      	subs	r7, #4
 8027a6e:	e7cf      	b.n	8027a10 <__hexnan+0xec>
 8027a70:	2004      	movs	r0, #4
 8027a72:	e7d6      	b.n	8027a22 <__hexnan+0xfe>

08027a74 <malloc>:
 8027a74:	b510      	push	{r4, lr}
 8027a76:	4b03      	ldr	r3, [pc, #12]	@ (8027a84 <malloc+0x10>)
 8027a78:	0001      	movs	r1, r0
 8027a7a:	6818      	ldr	r0, [r3, #0]
 8027a7c:	f000 f826 	bl	8027acc <_malloc_r>
 8027a80:	bd10      	pop	{r4, pc}
 8027a82:	46c0      	nop			@ (mov r8, r8)
 8027a84:	200003ec 	.word	0x200003ec

08027a88 <sbrk_aligned>:
 8027a88:	b570      	push	{r4, r5, r6, lr}
 8027a8a:	4e0f      	ldr	r6, [pc, #60]	@ (8027ac8 <sbrk_aligned+0x40>)
 8027a8c:	000d      	movs	r5, r1
 8027a8e:	6831      	ldr	r1, [r6, #0]
 8027a90:	0004      	movs	r4, r0
 8027a92:	2900      	cmp	r1, #0
 8027a94:	d102      	bne.n	8027a9c <sbrk_aligned+0x14>
 8027a96:	f001 f981 	bl	8028d9c <_sbrk_r>
 8027a9a:	6030      	str	r0, [r6, #0]
 8027a9c:	0029      	movs	r1, r5
 8027a9e:	0020      	movs	r0, r4
 8027aa0:	f001 f97c 	bl	8028d9c <_sbrk_r>
 8027aa4:	1c43      	adds	r3, r0, #1
 8027aa6:	d103      	bne.n	8027ab0 <sbrk_aligned+0x28>
 8027aa8:	2501      	movs	r5, #1
 8027aaa:	426d      	negs	r5, r5
 8027aac:	0028      	movs	r0, r5
 8027aae:	bd70      	pop	{r4, r5, r6, pc}
 8027ab0:	2303      	movs	r3, #3
 8027ab2:	1cc5      	adds	r5, r0, #3
 8027ab4:	439d      	bics	r5, r3
 8027ab6:	42a8      	cmp	r0, r5
 8027ab8:	d0f8      	beq.n	8027aac <sbrk_aligned+0x24>
 8027aba:	1a29      	subs	r1, r5, r0
 8027abc:	0020      	movs	r0, r4
 8027abe:	f001 f96d 	bl	8028d9c <_sbrk_r>
 8027ac2:	3001      	adds	r0, #1
 8027ac4:	d1f2      	bne.n	8027aac <sbrk_aligned+0x24>
 8027ac6:	e7ef      	b.n	8027aa8 <sbrk_aligned+0x20>
 8027ac8:	20003910 	.word	0x20003910

08027acc <_malloc_r>:
 8027acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027ace:	2203      	movs	r2, #3
 8027ad0:	1ccb      	adds	r3, r1, #3
 8027ad2:	4393      	bics	r3, r2
 8027ad4:	3308      	adds	r3, #8
 8027ad6:	0005      	movs	r5, r0
 8027ad8:	001f      	movs	r7, r3
 8027ada:	2b0c      	cmp	r3, #12
 8027adc:	d234      	bcs.n	8027b48 <_malloc_r+0x7c>
 8027ade:	270c      	movs	r7, #12
 8027ae0:	42b9      	cmp	r1, r7
 8027ae2:	d833      	bhi.n	8027b4c <_malloc_r+0x80>
 8027ae4:	0028      	movs	r0, r5
 8027ae6:	f000 f883 	bl	8027bf0 <__malloc_lock>
 8027aea:	4e37      	ldr	r6, [pc, #220]	@ (8027bc8 <_malloc_r+0xfc>)
 8027aec:	6833      	ldr	r3, [r6, #0]
 8027aee:	001c      	movs	r4, r3
 8027af0:	2c00      	cmp	r4, #0
 8027af2:	d12f      	bne.n	8027b54 <_malloc_r+0x88>
 8027af4:	0039      	movs	r1, r7
 8027af6:	0028      	movs	r0, r5
 8027af8:	f7ff ffc6 	bl	8027a88 <sbrk_aligned>
 8027afc:	0004      	movs	r4, r0
 8027afe:	1c43      	adds	r3, r0, #1
 8027b00:	d15f      	bne.n	8027bc2 <_malloc_r+0xf6>
 8027b02:	6834      	ldr	r4, [r6, #0]
 8027b04:	9400      	str	r4, [sp, #0]
 8027b06:	9b00      	ldr	r3, [sp, #0]
 8027b08:	2b00      	cmp	r3, #0
 8027b0a:	d14a      	bne.n	8027ba2 <_malloc_r+0xd6>
 8027b0c:	2c00      	cmp	r4, #0
 8027b0e:	d052      	beq.n	8027bb6 <_malloc_r+0xea>
 8027b10:	6823      	ldr	r3, [r4, #0]
 8027b12:	0028      	movs	r0, r5
 8027b14:	18e3      	adds	r3, r4, r3
 8027b16:	9900      	ldr	r1, [sp, #0]
 8027b18:	9301      	str	r3, [sp, #4]
 8027b1a:	f001 f93f 	bl	8028d9c <_sbrk_r>
 8027b1e:	9b01      	ldr	r3, [sp, #4]
 8027b20:	4283      	cmp	r3, r0
 8027b22:	d148      	bne.n	8027bb6 <_malloc_r+0xea>
 8027b24:	6823      	ldr	r3, [r4, #0]
 8027b26:	0028      	movs	r0, r5
 8027b28:	1aff      	subs	r7, r7, r3
 8027b2a:	0039      	movs	r1, r7
 8027b2c:	f7ff ffac 	bl	8027a88 <sbrk_aligned>
 8027b30:	3001      	adds	r0, #1
 8027b32:	d040      	beq.n	8027bb6 <_malloc_r+0xea>
 8027b34:	6823      	ldr	r3, [r4, #0]
 8027b36:	19db      	adds	r3, r3, r7
 8027b38:	6023      	str	r3, [r4, #0]
 8027b3a:	6833      	ldr	r3, [r6, #0]
 8027b3c:	685a      	ldr	r2, [r3, #4]
 8027b3e:	2a00      	cmp	r2, #0
 8027b40:	d133      	bne.n	8027baa <_malloc_r+0xde>
 8027b42:	9b00      	ldr	r3, [sp, #0]
 8027b44:	6033      	str	r3, [r6, #0]
 8027b46:	e019      	b.n	8027b7c <_malloc_r+0xb0>
 8027b48:	2b00      	cmp	r3, #0
 8027b4a:	dac9      	bge.n	8027ae0 <_malloc_r+0x14>
 8027b4c:	230c      	movs	r3, #12
 8027b4e:	602b      	str	r3, [r5, #0]
 8027b50:	2000      	movs	r0, #0
 8027b52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027b54:	6821      	ldr	r1, [r4, #0]
 8027b56:	1bc9      	subs	r1, r1, r7
 8027b58:	d420      	bmi.n	8027b9c <_malloc_r+0xd0>
 8027b5a:	290b      	cmp	r1, #11
 8027b5c:	d90a      	bls.n	8027b74 <_malloc_r+0xa8>
 8027b5e:	19e2      	adds	r2, r4, r7
 8027b60:	6027      	str	r7, [r4, #0]
 8027b62:	42a3      	cmp	r3, r4
 8027b64:	d104      	bne.n	8027b70 <_malloc_r+0xa4>
 8027b66:	6032      	str	r2, [r6, #0]
 8027b68:	6863      	ldr	r3, [r4, #4]
 8027b6a:	6011      	str	r1, [r2, #0]
 8027b6c:	6053      	str	r3, [r2, #4]
 8027b6e:	e005      	b.n	8027b7c <_malloc_r+0xb0>
 8027b70:	605a      	str	r2, [r3, #4]
 8027b72:	e7f9      	b.n	8027b68 <_malloc_r+0x9c>
 8027b74:	6862      	ldr	r2, [r4, #4]
 8027b76:	42a3      	cmp	r3, r4
 8027b78:	d10e      	bne.n	8027b98 <_malloc_r+0xcc>
 8027b7a:	6032      	str	r2, [r6, #0]
 8027b7c:	0028      	movs	r0, r5
 8027b7e:	f000 f83f 	bl	8027c00 <__malloc_unlock>
 8027b82:	0020      	movs	r0, r4
 8027b84:	2207      	movs	r2, #7
 8027b86:	300b      	adds	r0, #11
 8027b88:	1d23      	adds	r3, r4, #4
 8027b8a:	4390      	bics	r0, r2
 8027b8c:	1ac2      	subs	r2, r0, r3
 8027b8e:	4298      	cmp	r0, r3
 8027b90:	d0df      	beq.n	8027b52 <_malloc_r+0x86>
 8027b92:	1a1b      	subs	r3, r3, r0
 8027b94:	50a3      	str	r3, [r4, r2]
 8027b96:	e7dc      	b.n	8027b52 <_malloc_r+0x86>
 8027b98:	605a      	str	r2, [r3, #4]
 8027b9a:	e7ef      	b.n	8027b7c <_malloc_r+0xb0>
 8027b9c:	0023      	movs	r3, r4
 8027b9e:	6864      	ldr	r4, [r4, #4]
 8027ba0:	e7a6      	b.n	8027af0 <_malloc_r+0x24>
 8027ba2:	9c00      	ldr	r4, [sp, #0]
 8027ba4:	6863      	ldr	r3, [r4, #4]
 8027ba6:	9300      	str	r3, [sp, #0]
 8027ba8:	e7ad      	b.n	8027b06 <_malloc_r+0x3a>
 8027baa:	001a      	movs	r2, r3
 8027bac:	685b      	ldr	r3, [r3, #4]
 8027bae:	42a3      	cmp	r3, r4
 8027bb0:	d1fb      	bne.n	8027baa <_malloc_r+0xde>
 8027bb2:	2300      	movs	r3, #0
 8027bb4:	e7da      	b.n	8027b6c <_malloc_r+0xa0>
 8027bb6:	230c      	movs	r3, #12
 8027bb8:	0028      	movs	r0, r5
 8027bba:	602b      	str	r3, [r5, #0]
 8027bbc:	f000 f820 	bl	8027c00 <__malloc_unlock>
 8027bc0:	e7c6      	b.n	8027b50 <_malloc_r+0x84>
 8027bc2:	6007      	str	r7, [r0, #0]
 8027bc4:	e7da      	b.n	8027b7c <_malloc_r+0xb0>
 8027bc6:	46c0      	nop			@ (mov r8, r8)
 8027bc8:	20003914 	.word	0x20003914

08027bcc <__ascii_mbtowc>:
 8027bcc:	b082      	sub	sp, #8
 8027bce:	2900      	cmp	r1, #0
 8027bd0:	d100      	bne.n	8027bd4 <__ascii_mbtowc+0x8>
 8027bd2:	a901      	add	r1, sp, #4
 8027bd4:	1e10      	subs	r0, r2, #0
 8027bd6:	d006      	beq.n	8027be6 <__ascii_mbtowc+0x1a>
 8027bd8:	2b00      	cmp	r3, #0
 8027bda:	d006      	beq.n	8027bea <__ascii_mbtowc+0x1e>
 8027bdc:	7813      	ldrb	r3, [r2, #0]
 8027bde:	600b      	str	r3, [r1, #0]
 8027be0:	7810      	ldrb	r0, [r2, #0]
 8027be2:	1e43      	subs	r3, r0, #1
 8027be4:	4198      	sbcs	r0, r3
 8027be6:	b002      	add	sp, #8
 8027be8:	4770      	bx	lr
 8027bea:	2002      	movs	r0, #2
 8027bec:	4240      	negs	r0, r0
 8027bee:	e7fa      	b.n	8027be6 <__ascii_mbtowc+0x1a>

08027bf0 <__malloc_lock>:
 8027bf0:	b510      	push	{r4, lr}
 8027bf2:	4802      	ldr	r0, [pc, #8]	@ (8027bfc <__malloc_lock+0xc>)
 8027bf4:	f7fe fd07 	bl	8026606 <__retarget_lock_acquire_recursive>
 8027bf8:	bd10      	pop	{r4, pc}
 8027bfa:	46c0      	nop			@ (mov r8, r8)
 8027bfc:	2000390c 	.word	0x2000390c

08027c00 <__malloc_unlock>:
 8027c00:	b510      	push	{r4, lr}
 8027c02:	4802      	ldr	r0, [pc, #8]	@ (8027c0c <__malloc_unlock+0xc>)
 8027c04:	f7fe fd00 	bl	8026608 <__retarget_lock_release_recursive>
 8027c08:	bd10      	pop	{r4, pc}
 8027c0a:	46c0      	nop			@ (mov r8, r8)
 8027c0c:	2000390c 	.word	0x2000390c

08027c10 <_Balloc>:
 8027c10:	b570      	push	{r4, r5, r6, lr}
 8027c12:	69c5      	ldr	r5, [r0, #28]
 8027c14:	0006      	movs	r6, r0
 8027c16:	000c      	movs	r4, r1
 8027c18:	2d00      	cmp	r5, #0
 8027c1a:	d10e      	bne.n	8027c3a <_Balloc+0x2a>
 8027c1c:	2010      	movs	r0, #16
 8027c1e:	f7ff ff29 	bl	8027a74 <malloc>
 8027c22:	1e02      	subs	r2, r0, #0
 8027c24:	61f0      	str	r0, [r6, #28]
 8027c26:	d104      	bne.n	8027c32 <_Balloc+0x22>
 8027c28:	216b      	movs	r1, #107	@ 0x6b
 8027c2a:	4b19      	ldr	r3, [pc, #100]	@ (8027c90 <_Balloc+0x80>)
 8027c2c:	4819      	ldr	r0, [pc, #100]	@ (8027c94 <_Balloc+0x84>)
 8027c2e:	f001 f8c7 	bl	8028dc0 <__assert_func>
 8027c32:	6045      	str	r5, [r0, #4]
 8027c34:	6085      	str	r5, [r0, #8]
 8027c36:	6005      	str	r5, [r0, #0]
 8027c38:	60c5      	str	r5, [r0, #12]
 8027c3a:	69f5      	ldr	r5, [r6, #28]
 8027c3c:	68eb      	ldr	r3, [r5, #12]
 8027c3e:	2b00      	cmp	r3, #0
 8027c40:	d013      	beq.n	8027c6a <_Balloc+0x5a>
 8027c42:	69f3      	ldr	r3, [r6, #28]
 8027c44:	00a2      	lsls	r2, r4, #2
 8027c46:	68db      	ldr	r3, [r3, #12]
 8027c48:	189b      	adds	r3, r3, r2
 8027c4a:	6818      	ldr	r0, [r3, #0]
 8027c4c:	2800      	cmp	r0, #0
 8027c4e:	d118      	bne.n	8027c82 <_Balloc+0x72>
 8027c50:	2101      	movs	r1, #1
 8027c52:	000d      	movs	r5, r1
 8027c54:	40a5      	lsls	r5, r4
 8027c56:	1d6a      	adds	r2, r5, #5
 8027c58:	0030      	movs	r0, r6
 8027c5a:	0092      	lsls	r2, r2, #2
 8027c5c:	f001 f8ce 	bl	8028dfc <_calloc_r>
 8027c60:	2800      	cmp	r0, #0
 8027c62:	d00c      	beq.n	8027c7e <_Balloc+0x6e>
 8027c64:	6044      	str	r4, [r0, #4]
 8027c66:	6085      	str	r5, [r0, #8]
 8027c68:	e00d      	b.n	8027c86 <_Balloc+0x76>
 8027c6a:	2221      	movs	r2, #33	@ 0x21
 8027c6c:	2104      	movs	r1, #4
 8027c6e:	0030      	movs	r0, r6
 8027c70:	f001 f8c4 	bl	8028dfc <_calloc_r>
 8027c74:	69f3      	ldr	r3, [r6, #28]
 8027c76:	60e8      	str	r0, [r5, #12]
 8027c78:	68db      	ldr	r3, [r3, #12]
 8027c7a:	2b00      	cmp	r3, #0
 8027c7c:	d1e1      	bne.n	8027c42 <_Balloc+0x32>
 8027c7e:	2000      	movs	r0, #0
 8027c80:	bd70      	pop	{r4, r5, r6, pc}
 8027c82:	6802      	ldr	r2, [r0, #0]
 8027c84:	601a      	str	r2, [r3, #0]
 8027c86:	2300      	movs	r3, #0
 8027c88:	6103      	str	r3, [r0, #16]
 8027c8a:	60c3      	str	r3, [r0, #12]
 8027c8c:	e7f8      	b.n	8027c80 <_Balloc+0x70>
 8027c8e:	46c0      	nop			@ (mov r8, r8)
 8027c90:	0802e9af 	.word	0x0802e9af
 8027c94:	0802ea8f 	.word	0x0802ea8f

08027c98 <_Bfree>:
 8027c98:	b570      	push	{r4, r5, r6, lr}
 8027c9a:	69c6      	ldr	r6, [r0, #28]
 8027c9c:	0005      	movs	r5, r0
 8027c9e:	000c      	movs	r4, r1
 8027ca0:	2e00      	cmp	r6, #0
 8027ca2:	d10e      	bne.n	8027cc2 <_Bfree+0x2a>
 8027ca4:	2010      	movs	r0, #16
 8027ca6:	f7ff fee5 	bl	8027a74 <malloc>
 8027caa:	1e02      	subs	r2, r0, #0
 8027cac:	61e8      	str	r0, [r5, #28]
 8027cae:	d104      	bne.n	8027cba <_Bfree+0x22>
 8027cb0:	218f      	movs	r1, #143	@ 0x8f
 8027cb2:	4b09      	ldr	r3, [pc, #36]	@ (8027cd8 <_Bfree+0x40>)
 8027cb4:	4809      	ldr	r0, [pc, #36]	@ (8027cdc <_Bfree+0x44>)
 8027cb6:	f001 f883 	bl	8028dc0 <__assert_func>
 8027cba:	6046      	str	r6, [r0, #4]
 8027cbc:	6086      	str	r6, [r0, #8]
 8027cbe:	6006      	str	r6, [r0, #0]
 8027cc0:	60c6      	str	r6, [r0, #12]
 8027cc2:	2c00      	cmp	r4, #0
 8027cc4:	d007      	beq.n	8027cd6 <_Bfree+0x3e>
 8027cc6:	69eb      	ldr	r3, [r5, #28]
 8027cc8:	6862      	ldr	r2, [r4, #4]
 8027cca:	68db      	ldr	r3, [r3, #12]
 8027ccc:	0092      	lsls	r2, r2, #2
 8027cce:	189b      	adds	r3, r3, r2
 8027cd0:	681a      	ldr	r2, [r3, #0]
 8027cd2:	6022      	str	r2, [r4, #0]
 8027cd4:	601c      	str	r4, [r3, #0]
 8027cd6:	bd70      	pop	{r4, r5, r6, pc}
 8027cd8:	0802e9af 	.word	0x0802e9af
 8027cdc:	0802ea8f 	.word	0x0802ea8f

08027ce0 <__multadd>:
 8027ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027ce2:	000f      	movs	r7, r1
 8027ce4:	9001      	str	r0, [sp, #4]
 8027ce6:	000c      	movs	r4, r1
 8027ce8:	001e      	movs	r6, r3
 8027cea:	2000      	movs	r0, #0
 8027cec:	690d      	ldr	r5, [r1, #16]
 8027cee:	3714      	adds	r7, #20
 8027cf0:	683b      	ldr	r3, [r7, #0]
 8027cf2:	3001      	adds	r0, #1
 8027cf4:	b299      	uxth	r1, r3
 8027cf6:	4351      	muls	r1, r2
 8027cf8:	0c1b      	lsrs	r3, r3, #16
 8027cfa:	4353      	muls	r3, r2
 8027cfc:	1989      	adds	r1, r1, r6
 8027cfe:	0c0e      	lsrs	r6, r1, #16
 8027d00:	199b      	adds	r3, r3, r6
 8027d02:	0c1e      	lsrs	r6, r3, #16
 8027d04:	b289      	uxth	r1, r1
 8027d06:	041b      	lsls	r3, r3, #16
 8027d08:	185b      	adds	r3, r3, r1
 8027d0a:	c708      	stmia	r7!, {r3}
 8027d0c:	4285      	cmp	r5, r0
 8027d0e:	dcef      	bgt.n	8027cf0 <__multadd+0x10>
 8027d10:	2e00      	cmp	r6, #0
 8027d12:	d022      	beq.n	8027d5a <__multadd+0x7a>
 8027d14:	68a3      	ldr	r3, [r4, #8]
 8027d16:	42ab      	cmp	r3, r5
 8027d18:	dc19      	bgt.n	8027d4e <__multadd+0x6e>
 8027d1a:	6861      	ldr	r1, [r4, #4]
 8027d1c:	9801      	ldr	r0, [sp, #4]
 8027d1e:	3101      	adds	r1, #1
 8027d20:	f7ff ff76 	bl	8027c10 <_Balloc>
 8027d24:	1e07      	subs	r7, r0, #0
 8027d26:	d105      	bne.n	8027d34 <__multadd+0x54>
 8027d28:	003a      	movs	r2, r7
 8027d2a:	21ba      	movs	r1, #186	@ 0xba
 8027d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8027d60 <__multadd+0x80>)
 8027d2e:	480d      	ldr	r0, [pc, #52]	@ (8027d64 <__multadd+0x84>)
 8027d30:	f001 f846 	bl	8028dc0 <__assert_func>
 8027d34:	0021      	movs	r1, r4
 8027d36:	6922      	ldr	r2, [r4, #16]
 8027d38:	310c      	adds	r1, #12
 8027d3a:	3202      	adds	r2, #2
 8027d3c:	0092      	lsls	r2, r2, #2
 8027d3e:	300c      	adds	r0, #12
 8027d40:	f7fe fc6e 	bl	8026620 <memcpy>
 8027d44:	0021      	movs	r1, r4
 8027d46:	9801      	ldr	r0, [sp, #4]
 8027d48:	f7ff ffa6 	bl	8027c98 <_Bfree>
 8027d4c:	003c      	movs	r4, r7
 8027d4e:	1d2b      	adds	r3, r5, #4
 8027d50:	009b      	lsls	r3, r3, #2
 8027d52:	18e3      	adds	r3, r4, r3
 8027d54:	3501      	adds	r5, #1
 8027d56:	605e      	str	r6, [r3, #4]
 8027d58:	6125      	str	r5, [r4, #16]
 8027d5a:	0020      	movs	r0, r4
 8027d5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027d5e:	46c0      	nop			@ (mov r8, r8)
 8027d60:	0802ea1e 	.word	0x0802ea1e
 8027d64:	0802ea8f 	.word	0x0802ea8f

08027d68 <__s2b>:
 8027d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027d6a:	0007      	movs	r7, r0
 8027d6c:	0018      	movs	r0, r3
 8027d6e:	000c      	movs	r4, r1
 8027d70:	3008      	adds	r0, #8
 8027d72:	2109      	movs	r1, #9
 8027d74:	9301      	str	r3, [sp, #4]
 8027d76:	0015      	movs	r5, r2
 8027d78:	f7d8 fa9e 	bl	80002b8 <__divsi3>
 8027d7c:	2301      	movs	r3, #1
 8027d7e:	2100      	movs	r1, #0
 8027d80:	4283      	cmp	r3, r0
 8027d82:	db0a      	blt.n	8027d9a <__s2b+0x32>
 8027d84:	0038      	movs	r0, r7
 8027d86:	f7ff ff43 	bl	8027c10 <_Balloc>
 8027d8a:	1e01      	subs	r1, r0, #0
 8027d8c:	d108      	bne.n	8027da0 <__s2b+0x38>
 8027d8e:	000a      	movs	r2, r1
 8027d90:	4b19      	ldr	r3, [pc, #100]	@ (8027df8 <__s2b+0x90>)
 8027d92:	481a      	ldr	r0, [pc, #104]	@ (8027dfc <__s2b+0x94>)
 8027d94:	31d3      	adds	r1, #211	@ 0xd3
 8027d96:	f001 f813 	bl	8028dc0 <__assert_func>
 8027d9a:	005b      	lsls	r3, r3, #1
 8027d9c:	3101      	adds	r1, #1
 8027d9e:	e7ef      	b.n	8027d80 <__s2b+0x18>
 8027da0:	9b08      	ldr	r3, [sp, #32]
 8027da2:	6143      	str	r3, [r0, #20]
 8027da4:	2301      	movs	r3, #1
 8027da6:	6103      	str	r3, [r0, #16]
 8027da8:	2d09      	cmp	r5, #9
 8027daa:	dd18      	ble.n	8027dde <__s2b+0x76>
 8027dac:	0023      	movs	r3, r4
 8027dae:	3309      	adds	r3, #9
 8027db0:	001e      	movs	r6, r3
 8027db2:	9300      	str	r3, [sp, #0]
 8027db4:	1964      	adds	r4, r4, r5
 8027db6:	7833      	ldrb	r3, [r6, #0]
 8027db8:	220a      	movs	r2, #10
 8027dba:	0038      	movs	r0, r7
 8027dbc:	3b30      	subs	r3, #48	@ 0x30
 8027dbe:	f7ff ff8f 	bl	8027ce0 <__multadd>
 8027dc2:	3601      	adds	r6, #1
 8027dc4:	0001      	movs	r1, r0
 8027dc6:	42a6      	cmp	r6, r4
 8027dc8:	d1f5      	bne.n	8027db6 <__s2b+0x4e>
 8027dca:	002c      	movs	r4, r5
 8027dcc:	9b00      	ldr	r3, [sp, #0]
 8027dce:	3c08      	subs	r4, #8
 8027dd0:	191c      	adds	r4, r3, r4
 8027dd2:	002e      	movs	r6, r5
 8027dd4:	9b01      	ldr	r3, [sp, #4]
 8027dd6:	429e      	cmp	r6, r3
 8027dd8:	db04      	blt.n	8027de4 <__s2b+0x7c>
 8027dda:	0008      	movs	r0, r1
 8027ddc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027dde:	2509      	movs	r5, #9
 8027de0:	340a      	adds	r4, #10
 8027de2:	e7f6      	b.n	8027dd2 <__s2b+0x6a>
 8027de4:	1b63      	subs	r3, r4, r5
 8027de6:	5d9b      	ldrb	r3, [r3, r6]
 8027de8:	220a      	movs	r2, #10
 8027dea:	0038      	movs	r0, r7
 8027dec:	3b30      	subs	r3, #48	@ 0x30
 8027dee:	f7ff ff77 	bl	8027ce0 <__multadd>
 8027df2:	3601      	adds	r6, #1
 8027df4:	0001      	movs	r1, r0
 8027df6:	e7ed      	b.n	8027dd4 <__s2b+0x6c>
 8027df8:	0802ea1e 	.word	0x0802ea1e
 8027dfc:	0802ea8f 	.word	0x0802ea8f

08027e00 <__hi0bits>:
 8027e00:	2280      	movs	r2, #128	@ 0x80
 8027e02:	0003      	movs	r3, r0
 8027e04:	0252      	lsls	r2, r2, #9
 8027e06:	2000      	movs	r0, #0
 8027e08:	4293      	cmp	r3, r2
 8027e0a:	d201      	bcs.n	8027e10 <__hi0bits+0x10>
 8027e0c:	041b      	lsls	r3, r3, #16
 8027e0e:	3010      	adds	r0, #16
 8027e10:	2280      	movs	r2, #128	@ 0x80
 8027e12:	0452      	lsls	r2, r2, #17
 8027e14:	4293      	cmp	r3, r2
 8027e16:	d201      	bcs.n	8027e1c <__hi0bits+0x1c>
 8027e18:	3008      	adds	r0, #8
 8027e1a:	021b      	lsls	r3, r3, #8
 8027e1c:	2280      	movs	r2, #128	@ 0x80
 8027e1e:	0552      	lsls	r2, r2, #21
 8027e20:	4293      	cmp	r3, r2
 8027e22:	d201      	bcs.n	8027e28 <__hi0bits+0x28>
 8027e24:	3004      	adds	r0, #4
 8027e26:	011b      	lsls	r3, r3, #4
 8027e28:	2280      	movs	r2, #128	@ 0x80
 8027e2a:	05d2      	lsls	r2, r2, #23
 8027e2c:	4293      	cmp	r3, r2
 8027e2e:	d201      	bcs.n	8027e34 <__hi0bits+0x34>
 8027e30:	3002      	adds	r0, #2
 8027e32:	009b      	lsls	r3, r3, #2
 8027e34:	2b00      	cmp	r3, #0
 8027e36:	db03      	blt.n	8027e40 <__hi0bits+0x40>
 8027e38:	3001      	adds	r0, #1
 8027e3a:	4213      	tst	r3, r2
 8027e3c:	d100      	bne.n	8027e40 <__hi0bits+0x40>
 8027e3e:	2020      	movs	r0, #32
 8027e40:	4770      	bx	lr

08027e42 <__lo0bits>:
 8027e42:	6803      	ldr	r3, [r0, #0]
 8027e44:	0001      	movs	r1, r0
 8027e46:	2207      	movs	r2, #7
 8027e48:	0018      	movs	r0, r3
 8027e4a:	4010      	ands	r0, r2
 8027e4c:	4213      	tst	r3, r2
 8027e4e:	d00d      	beq.n	8027e6c <__lo0bits+0x2a>
 8027e50:	3a06      	subs	r2, #6
 8027e52:	2000      	movs	r0, #0
 8027e54:	4213      	tst	r3, r2
 8027e56:	d105      	bne.n	8027e64 <__lo0bits+0x22>
 8027e58:	3002      	adds	r0, #2
 8027e5a:	4203      	tst	r3, r0
 8027e5c:	d003      	beq.n	8027e66 <__lo0bits+0x24>
 8027e5e:	40d3      	lsrs	r3, r2
 8027e60:	0010      	movs	r0, r2
 8027e62:	600b      	str	r3, [r1, #0]
 8027e64:	4770      	bx	lr
 8027e66:	089b      	lsrs	r3, r3, #2
 8027e68:	600b      	str	r3, [r1, #0]
 8027e6a:	e7fb      	b.n	8027e64 <__lo0bits+0x22>
 8027e6c:	b29a      	uxth	r2, r3
 8027e6e:	2a00      	cmp	r2, #0
 8027e70:	d101      	bne.n	8027e76 <__lo0bits+0x34>
 8027e72:	2010      	movs	r0, #16
 8027e74:	0c1b      	lsrs	r3, r3, #16
 8027e76:	b2da      	uxtb	r2, r3
 8027e78:	2a00      	cmp	r2, #0
 8027e7a:	d101      	bne.n	8027e80 <__lo0bits+0x3e>
 8027e7c:	3008      	adds	r0, #8
 8027e7e:	0a1b      	lsrs	r3, r3, #8
 8027e80:	071a      	lsls	r2, r3, #28
 8027e82:	d101      	bne.n	8027e88 <__lo0bits+0x46>
 8027e84:	3004      	adds	r0, #4
 8027e86:	091b      	lsrs	r3, r3, #4
 8027e88:	079a      	lsls	r2, r3, #30
 8027e8a:	d101      	bne.n	8027e90 <__lo0bits+0x4e>
 8027e8c:	3002      	adds	r0, #2
 8027e8e:	089b      	lsrs	r3, r3, #2
 8027e90:	07da      	lsls	r2, r3, #31
 8027e92:	d4e9      	bmi.n	8027e68 <__lo0bits+0x26>
 8027e94:	3001      	adds	r0, #1
 8027e96:	085b      	lsrs	r3, r3, #1
 8027e98:	d1e6      	bne.n	8027e68 <__lo0bits+0x26>
 8027e9a:	2020      	movs	r0, #32
 8027e9c:	e7e2      	b.n	8027e64 <__lo0bits+0x22>
	...

08027ea0 <__i2b>:
 8027ea0:	b510      	push	{r4, lr}
 8027ea2:	000c      	movs	r4, r1
 8027ea4:	2101      	movs	r1, #1
 8027ea6:	f7ff feb3 	bl	8027c10 <_Balloc>
 8027eaa:	2800      	cmp	r0, #0
 8027eac:	d107      	bne.n	8027ebe <__i2b+0x1e>
 8027eae:	2146      	movs	r1, #70	@ 0x46
 8027eb0:	4c05      	ldr	r4, [pc, #20]	@ (8027ec8 <__i2b+0x28>)
 8027eb2:	0002      	movs	r2, r0
 8027eb4:	4b05      	ldr	r3, [pc, #20]	@ (8027ecc <__i2b+0x2c>)
 8027eb6:	0020      	movs	r0, r4
 8027eb8:	31ff      	adds	r1, #255	@ 0xff
 8027eba:	f000 ff81 	bl	8028dc0 <__assert_func>
 8027ebe:	2301      	movs	r3, #1
 8027ec0:	6144      	str	r4, [r0, #20]
 8027ec2:	6103      	str	r3, [r0, #16]
 8027ec4:	bd10      	pop	{r4, pc}
 8027ec6:	46c0      	nop			@ (mov r8, r8)
 8027ec8:	0802ea8f 	.word	0x0802ea8f
 8027ecc:	0802ea1e 	.word	0x0802ea1e

08027ed0 <__multiply>:
 8027ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027ed2:	0014      	movs	r4, r2
 8027ed4:	690a      	ldr	r2, [r1, #16]
 8027ed6:	6923      	ldr	r3, [r4, #16]
 8027ed8:	000d      	movs	r5, r1
 8027eda:	b089      	sub	sp, #36	@ 0x24
 8027edc:	429a      	cmp	r2, r3
 8027ede:	db02      	blt.n	8027ee6 <__multiply+0x16>
 8027ee0:	0023      	movs	r3, r4
 8027ee2:	000c      	movs	r4, r1
 8027ee4:	001d      	movs	r5, r3
 8027ee6:	6927      	ldr	r7, [r4, #16]
 8027ee8:	692e      	ldr	r6, [r5, #16]
 8027eea:	6861      	ldr	r1, [r4, #4]
 8027eec:	19bb      	adds	r3, r7, r6
 8027eee:	9300      	str	r3, [sp, #0]
 8027ef0:	68a3      	ldr	r3, [r4, #8]
 8027ef2:	19ba      	adds	r2, r7, r6
 8027ef4:	4293      	cmp	r3, r2
 8027ef6:	da00      	bge.n	8027efa <__multiply+0x2a>
 8027ef8:	3101      	adds	r1, #1
 8027efa:	f7ff fe89 	bl	8027c10 <_Balloc>
 8027efe:	4684      	mov	ip, r0
 8027f00:	2800      	cmp	r0, #0
 8027f02:	d106      	bne.n	8027f12 <__multiply+0x42>
 8027f04:	21b1      	movs	r1, #177	@ 0xb1
 8027f06:	4662      	mov	r2, ip
 8027f08:	4b44      	ldr	r3, [pc, #272]	@ (802801c <__multiply+0x14c>)
 8027f0a:	4845      	ldr	r0, [pc, #276]	@ (8028020 <__multiply+0x150>)
 8027f0c:	0049      	lsls	r1, r1, #1
 8027f0e:	f000 ff57 	bl	8028dc0 <__assert_func>
 8027f12:	0002      	movs	r2, r0
 8027f14:	19bb      	adds	r3, r7, r6
 8027f16:	3214      	adds	r2, #20
 8027f18:	009b      	lsls	r3, r3, #2
 8027f1a:	18d3      	adds	r3, r2, r3
 8027f1c:	9301      	str	r3, [sp, #4]
 8027f1e:	2100      	movs	r1, #0
 8027f20:	0013      	movs	r3, r2
 8027f22:	9801      	ldr	r0, [sp, #4]
 8027f24:	4283      	cmp	r3, r0
 8027f26:	d328      	bcc.n	8027f7a <__multiply+0xaa>
 8027f28:	0023      	movs	r3, r4
 8027f2a:	00bf      	lsls	r7, r7, #2
 8027f2c:	3314      	adds	r3, #20
 8027f2e:	9304      	str	r3, [sp, #16]
 8027f30:	3514      	adds	r5, #20
 8027f32:	19db      	adds	r3, r3, r7
 8027f34:	00b6      	lsls	r6, r6, #2
 8027f36:	9302      	str	r3, [sp, #8]
 8027f38:	19ab      	adds	r3, r5, r6
 8027f3a:	9307      	str	r3, [sp, #28]
 8027f3c:	2304      	movs	r3, #4
 8027f3e:	9305      	str	r3, [sp, #20]
 8027f40:	0023      	movs	r3, r4
 8027f42:	9902      	ldr	r1, [sp, #8]
 8027f44:	3315      	adds	r3, #21
 8027f46:	4299      	cmp	r1, r3
 8027f48:	d305      	bcc.n	8027f56 <__multiply+0x86>
 8027f4a:	1b0c      	subs	r4, r1, r4
 8027f4c:	3c15      	subs	r4, #21
 8027f4e:	08a4      	lsrs	r4, r4, #2
 8027f50:	3401      	adds	r4, #1
 8027f52:	00a3      	lsls	r3, r4, #2
 8027f54:	9305      	str	r3, [sp, #20]
 8027f56:	9b07      	ldr	r3, [sp, #28]
 8027f58:	429d      	cmp	r5, r3
 8027f5a:	d310      	bcc.n	8027f7e <__multiply+0xae>
 8027f5c:	9b00      	ldr	r3, [sp, #0]
 8027f5e:	2b00      	cmp	r3, #0
 8027f60:	dd05      	ble.n	8027f6e <__multiply+0x9e>
 8027f62:	9b01      	ldr	r3, [sp, #4]
 8027f64:	3b04      	subs	r3, #4
 8027f66:	9301      	str	r3, [sp, #4]
 8027f68:	681b      	ldr	r3, [r3, #0]
 8027f6a:	2b00      	cmp	r3, #0
 8027f6c:	d052      	beq.n	8028014 <__multiply+0x144>
 8027f6e:	4663      	mov	r3, ip
 8027f70:	4660      	mov	r0, ip
 8027f72:	9a00      	ldr	r2, [sp, #0]
 8027f74:	611a      	str	r2, [r3, #16]
 8027f76:	b009      	add	sp, #36	@ 0x24
 8027f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027f7a:	c302      	stmia	r3!, {r1}
 8027f7c:	e7d1      	b.n	8027f22 <__multiply+0x52>
 8027f7e:	682c      	ldr	r4, [r5, #0]
 8027f80:	b2a4      	uxth	r4, r4
 8027f82:	2c00      	cmp	r4, #0
 8027f84:	d01f      	beq.n	8027fc6 <__multiply+0xf6>
 8027f86:	2300      	movs	r3, #0
 8027f88:	0017      	movs	r7, r2
 8027f8a:	9e04      	ldr	r6, [sp, #16]
 8027f8c:	9303      	str	r3, [sp, #12]
 8027f8e:	ce08      	ldmia	r6!, {r3}
 8027f90:	6839      	ldr	r1, [r7, #0]
 8027f92:	9306      	str	r3, [sp, #24]
 8027f94:	466b      	mov	r3, sp
 8027f96:	8b1b      	ldrh	r3, [r3, #24]
 8027f98:	b288      	uxth	r0, r1
 8027f9a:	4363      	muls	r3, r4
 8027f9c:	181b      	adds	r3, r3, r0
 8027f9e:	9803      	ldr	r0, [sp, #12]
 8027fa0:	0c09      	lsrs	r1, r1, #16
 8027fa2:	181b      	adds	r3, r3, r0
 8027fa4:	9806      	ldr	r0, [sp, #24]
 8027fa6:	0c00      	lsrs	r0, r0, #16
 8027fa8:	4360      	muls	r0, r4
 8027faa:	1840      	adds	r0, r0, r1
 8027fac:	0c19      	lsrs	r1, r3, #16
 8027fae:	1841      	adds	r1, r0, r1
 8027fb0:	0c08      	lsrs	r0, r1, #16
 8027fb2:	b29b      	uxth	r3, r3
 8027fb4:	0409      	lsls	r1, r1, #16
 8027fb6:	4319      	orrs	r1, r3
 8027fb8:	9b02      	ldr	r3, [sp, #8]
 8027fba:	9003      	str	r0, [sp, #12]
 8027fbc:	c702      	stmia	r7!, {r1}
 8027fbe:	42b3      	cmp	r3, r6
 8027fc0:	d8e5      	bhi.n	8027f8e <__multiply+0xbe>
 8027fc2:	9b05      	ldr	r3, [sp, #20]
 8027fc4:	50d0      	str	r0, [r2, r3]
 8027fc6:	682c      	ldr	r4, [r5, #0]
 8027fc8:	0c24      	lsrs	r4, r4, #16
 8027fca:	d020      	beq.n	802800e <__multiply+0x13e>
 8027fcc:	2100      	movs	r1, #0
 8027fce:	0010      	movs	r0, r2
 8027fd0:	6813      	ldr	r3, [r2, #0]
 8027fd2:	9e04      	ldr	r6, [sp, #16]
 8027fd4:	9103      	str	r1, [sp, #12]
 8027fd6:	6831      	ldr	r1, [r6, #0]
 8027fd8:	6807      	ldr	r7, [r0, #0]
 8027fda:	b289      	uxth	r1, r1
 8027fdc:	4361      	muls	r1, r4
 8027fde:	0c3f      	lsrs	r7, r7, #16
 8027fe0:	19c9      	adds	r1, r1, r7
 8027fe2:	9f03      	ldr	r7, [sp, #12]
 8027fe4:	b29b      	uxth	r3, r3
 8027fe6:	19c9      	adds	r1, r1, r7
 8027fe8:	040f      	lsls	r7, r1, #16
 8027fea:	431f      	orrs	r7, r3
 8027fec:	6007      	str	r7, [r0, #0]
 8027fee:	ce80      	ldmia	r6!, {r7}
 8027ff0:	6843      	ldr	r3, [r0, #4]
 8027ff2:	0c3f      	lsrs	r7, r7, #16
 8027ff4:	4367      	muls	r7, r4
 8027ff6:	b29b      	uxth	r3, r3
 8027ff8:	0c09      	lsrs	r1, r1, #16
 8027ffa:	18fb      	adds	r3, r7, r3
 8027ffc:	185b      	adds	r3, r3, r1
 8027ffe:	0c19      	lsrs	r1, r3, #16
 8028000:	9103      	str	r1, [sp, #12]
 8028002:	9902      	ldr	r1, [sp, #8]
 8028004:	3004      	adds	r0, #4
 8028006:	42b1      	cmp	r1, r6
 8028008:	d8e5      	bhi.n	8027fd6 <__multiply+0x106>
 802800a:	9905      	ldr	r1, [sp, #20]
 802800c:	5053      	str	r3, [r2, r1]
 802800e:	3504      	adds	r5, #4
 8028010:	3204      	adds	r2, #4
 8028012:	e7a0      	b.n	8027f56 <__multiply+0x86>
 8028014:	9b00      	ldr	r3, [sp, #0]
 8028016:	3b01      	subs	r3, #1
 8028018:	9300      	str	r3, [sp, #0]
 802801a:	e79f      	b.n	8027f5c <__multiply+0x8c>
 802801c:	0802ea1e 	.word	0x0802ea1e
 8028020:	0802ea8f 	.word	0x0802ea8f

08028024 <__pow5mult>:
 8028024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028026:	2303      	movs	r3, #3
 8028028:	0015      	movs	r5, r2
 802802a:	0007      	movs	r7, r0
 802802c:	000e      	movs	r6, r1
 802802e:	401a      	ands	r2, r3
 8028030:	421d      	tst	r5, r3
 8028032:	d008      	beq.n	8028046 <__pow5mult+0x22>
 8028034:	4925      	ldr	r1, [pc, #148]	@ (80280cc <__pow5mult+0xa8>)
 8028036:	3a01      	subs	r2, #1
 8028038:	0092      	lsls	r2, r2, #2
 802803a:	5852      	ldr	r2, [r2, r1]
 802803c:	2300      	movs	r3, #0
 802803e:	0031      	movs	r1, r6
 8028040:	f7ff fe4e 	bl	8027ce0 <__multadd>
 8028044:	0006      	movs	r6, r0
 8028046:	10ad      	asrs	r5, r5, #2
 8028048:	d03d      	beq.n	80280c6 <__pow5mult+0xa2>
 802804a:	69fc      	ldr	r4, [r7, #28]
 802804c:	2c00      	cmp	r4, #0
 802804e:	d10f      	bne.n	8028070 <__pow5mult+0x4c>
 8028050:	2010      	movs	r0, #16
 8028052:	f7ff fd0f 	bl	8027a74 <malloc>
 8028056:	1e02      	subs	r2, r0, #0
 8028058:	61f8      	str	r0, [r7, #28]
 802805a:	d105      	bne.n	8028068 <__pow5mult+0x44>
 802805c:	21b4      	movs	r1, #180	@ 0xb4
 802805e:	4b1c      	ldr	r3, [pc, #112]	@ (80280d0 <__pow5mult+0xac>)
 8028060:	481c      	ldr	r0, [pc, #112]	@ (80280d4 <__pow5mult+0xb0>)
 8028062:	31ff      	adds	r1, #255	@ 0xff
 8028064:	f000 feac 	bl	8028dc0 <__assert_func>
 8028068:	6044      	str	r4, [r0, #4]
 802806a:	6084      	str	r4, [r0, #8]
 802806c:	6004      	str	r4, [r0, #0]
 802806e:	60c4      	str	r4, [r0, #12]
 8028070:	69fb      	ldr	r3, [r7, #28]
 8028072:	689c      	ldr	r4, [r3, #8]
 8028074:	9301      	str	r3, [sp, #4]
 8028076:	2c00      	cmp	r4, #0
 8028078:	d108      	bne.n	802808c <__pow5mult+0x68>
 802807a:	0038      	movs	r0, r7
 802807c:	4916      	ldr	r1, [pc, #88]	@ (80280d8 <__pow5mult+0xb4>)
 802807e:	f7ff ff0f 	bl	8027ea0 <__i2b>
 8028082:	9b01      	ldr	r3, [sp, #4]
 8028084:	0004      	movs	r4, r0
 8028086:	6098      	str	r0, [r3, #8]
 8028088:	2300      	movs	r3, #0
 802808a:	6003      	str	r3, [r0, #0]
 802808c:	2301      	movs	r3, #1
 802808e:	421d      	tst	r5, r3
 8028090:	d00a      	beq.n	80280a8 <__pow5mult+0x84>
 8028092:	0031      	movs	r1, r6
 8028094:	0022      	movs	r2, r4
 8028096:	0038      	movs	r0, r7
 8028098:	f7ff ff1a 	bl	8027ed0 <__multiply>
 802809c:	0031      	movs	r1, r6
 802809e:	9001      	str	r0, [sp, #4]
 80280a0:	0038      	movs	r0, r7
 80280a2:	f7ff fdf9 	bl	8027c98 <_Bfree>
 80280a6:	9e01      	ldr	r6, [sp, #4]
 80280a8:	106d      	asrs	r5, r5, #1
 80280aa:	d00c      	beq.n	80280c6 <__pow5mult+0xa2>
 80280ac:	6820      	ldr	r0, [r4, #0]
 80280ae:	2800      	cmp	r0, #0
 80280b0:	d107      	bne.n	80280c2 <__pow5mult+0x9e>
 80280b2:	0022      	movs	r2, r4
 80280b4:	0021      	movs	r1, r4
 80280b6:	0038      	movs	r0, r7
 80280b8:	f7ff ff0a 	bl	8027ed0 <__multiply>
 80280bc:	2300      	movs	r3, #0
 80280be:	6020      	str	r0, [r4, #0]
 80280c0:	6003      	str	r3, [r0, #0]
 80280c2:	0004      	movs	r4, r0
 80280c4:	e7e2      	b.n	802808c <__pow5mult+0x68>
 80280c6:	0030      	movs	r0, r6
 80280c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80280ca:	46c0      	nop			@ (mov r8, r8)
 80280cc:	0802ec8c 	.word	0x0802ec8c
 80280d0:	0802e9af 	.word	0x0802e9af
 80280d4:	0802ea8f 	.word	0x0802ea8f
 80280d8:	00000271 	.word	0x00000271

080280dc <__lshift>:
 80280dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80280de:	000c      	movs	r4, r1
 80280e0:	0016      	movs	r6, r2
 80280e2:	6923      	ldr	r3, [r4, #16]
 80280e4:	1157      	asrs	r7, r2, #5
 80280e6:	b085      	sub	sp, #20
 80280e8:	18fb      	adds	r3, r7, r3
 80280ea:	9301      	str	r3, [sp, #4]
 80280ec:	3301      	adds	r3, #1
 80280ee:	9300      	str	r3, [sp, #0]
 80280f0:	6849      	ldr	r1, [r1, #4]
 80280f2:	68a3      	ldr	r3, [r4, #8]
 80280f4:	9002      	str	r0, [sp, #8]
 80280f6:	9a00      	ldr	r2, [sp, #0]
 80280f8:	4293      	cmp	r3, r2
 80280fa:	db10      	blt.n	802811e <__lshift+0x42>
 80280fc:	9802      	ldr	r0, [sp, #8]
 80280fe:	f7ff fd87 	bl	8027c10 <_Balloc>
 8028102:	2300      	movs	r3, #0
 8028104:	0001      	movs	r1, r0
 8028106:	0005      	movs	r5, r0
 8028108:	001a      	movs	r2, r3
 802810a:	3114      	adds	r1, #20
 802810c:	4298      	cmp	r0, r3
 802810e:	d10c      	bne.n	802812a <__lshift+0x4e>
 8028110:	21ef      	movs	r1, #239	@ 0xef
 8028112:	002a      	movs	r2, r5
 8028114:	4b25      	ldr	r3, [pc, #148]	@ (80281ac <__lshift+0xd0>)
 8028116:	4826      	ldr	r0, [pc, #152]	@ (80281b0 <__lshift+0xd4>)
 8028118:	0049      	lsls	r1, r1, #1
 802811a:	f000 fe51 	bl	8028dc0 <__assert_func>
 802811e:	3101      	adds	r1, #1
 8028120:	005b      	lsls	r3, r3, #1
 8028122:	e7e8      	b.n	80280f6 <__lshift+0x1a>
 8028124:	0098      	lsls	r0, r3, #2
 8028126:	500a      	str	r2, [r1, r0]
 8028128:	3301      	adds	r3, #1
 802812a:	42bb      	cmp	r3, r7
 802812c:	dbfa      	blt.n	8028124 <__lshift+0x48>
 802812e:	43fb      	mvns	r3, r7
 8028130:	17db      	asrs	r3, r3, #31
 8028132:	401f      	ands	r7, r3
 8028134:	00bf      	lsls	r7, r7, #2
 8028136:	0023      	movs	r3, r4
 8028138:	201f      	movs	r0, #31
 802813a:	19c9      	adds	r1, r1, r7
 802813c:	0037      	movs	r7, r6
 802813e:	6922      	ldr	r2, [r4, #16]
 8028140:	3314      	adds	r3, #20
 8028142:	0092      	lsls	r2, r2, #2
 8028144:	189a      	adds	r2, r3, r2
 8028146:	4007      	ands	r7, r0
 8028148:	4206      	tst	r6, r0
 802814a:	d029      	beq.n	80281a0 <__lshift+0xc4>
 802814c:	3001      	adds	r0, #1
 802814e:	1bc0      	subs	r0, r0, r7
 8028150:	9003      	str	r0, [sp, #12]
 8028152:	468c      	mov	ip, r1
 8028154:	2000      	movs	r0, #0
 8028156:	681e      	ldr	r6, [r3, #0]
 8028158:	40be      	lsls	r6, r7
 802815a:	4306      	orrs	r6, r0
 802815c:	4660      	mov	r0, ip
 802815e:	c040      	stmia	r0!, {r6}
 8028160:	4684      	mov	ip, r0
 8028162:	9e03      	ldr	r6, [sp, #12]
 8028164:	cb01      	ldmia	r3!, {r0}
 8028166:	40f0      	lsrs	r0, r6
 8028168:	429a      	cmp	r2, r3
 802816a:	d8f4      	bhi.n	8028156 <__lshift+0x7a>
 802816c:	0026      	movs	r6, r4
 802816e:	3615      	adds	r6, #21
 8028170:	2304      	movs	r3, #4
 8028172:	42b2      	cmp	r2, r6
 8028174:	d304      	bcc.n	8028180 <__lshift+0xa4>
 8028176:	1b13      	subs	r3, r2, r4
 8028178:	3b15      	subs	r3, #21
 802817a:	089b      	lsrs	r3, r3, #2
 802817c:	3301      	adds	r3, #1
 802817e:	009b      	lsls	r3, r3, #2
 8028180:	50c8      	str	r0, [r1, r3]
 8028182:	2800      	cmp	r0, #0
 8028184:	d002      	beq.n	802818c <__lshift+0xb0>
 8028186:	9b01      	ldr	r3, [sp, #4]
 8028188:	3302      	adds	r3, #2
 802818a:	9300      	str	r3, [sp, #0]
 802818c:	9b00      	ldr	r3, [sp, #0]
 802818e:	9802      	ldr	r0, [sp, #8]
 8028190:	3b01      	subs	r3, #1
 8028192:	0021      	movs	r1, r4
 8028194:	612b      	str	r3, [r5, #16]
 8028196:	f7ff fd7f 	bl	8027c98 <_Bfree>
 802819a:	0028      	movs	r0, r5
 802819c:	b005      	add	sp, #20
 802819e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80281a0:	cb01      	ldmia	r3!, {r0}
 80281a2:	c101      	stmia	r1!, {r0}
 80281a4:	429a      	cmp	r2, r3
 80281a6:	d8fb      	bhi.n	80281a0 <__lshift+0xc4>
 80281a8:	e7f0      	b.n	802818c <__lshift+0xb0>
 80281aa:	46c0      	nop			@ (mov r8, r8)
 80281ac:	0802ea1e 	.word	0x0802ea1e
 80281b0:	0802ea8f 	.word	0x0802ea8f

080281b4 <__mcmp>:
 80281b4:	b530      	push	{r4, r5, lr}
 80281b6:	690b      	ldr	r3, [r1, #16]
 80281b8:	6904      	ldr	r4, [r0, #16]
 80281ba:	0002      	movs	r2, r0
 80281bc:	1ae0      	subs	r0, r4, r3
 80281be:	429c      	cmp	r4, r3
 80281c0:	d10f      	bne.n	80281e2 <__mcmp+0x2e>
 80281c2:	3214      	adds	r2, #20
 80281c4:	009b      	lsls	r3, r3, #2
 80281c6:	3114      	adds	r1, #20
 80281c8:	0014      	movs	r4, r2
 80281ca:	18c9      	adds	r1, r1, r3
 80281cc:	18d2      	adds	r2, r2, r3
 80281ce:	3a04      	subs	r2, #4
 80281d0:	3904      	subs	r1, #4
 80281d2:	6815      	ldr	r5, [r2, #0]
 80281d4:	680b      	ldr	r3, [r1, #0]
 80281d6:	429d      	cmp	r5, r3
 80281d8:	d004      	beq.n	80281e4 <__mcmp+0x30>
 80281da:	2001      	movs	r0, #1
 80281dc:	429d      	cmp	r5, r3
 80281de:	d200      	bcs.n	80281e2 <__mcmp+0x2e>
 80281e0:	3802      	subs	r0, #2
 80281e2:	bd30      	pop	{r4, r5, pc}
 80281e4:	4294      	cmp	r4, r2
 80281e6:	d3f2      	bcc.n	80281ce <__mcmp+0x1a>
 80281e8:	e7fb      	b.n	80281e2 <__mcmp+0x2e>
	...

080281ec <__mdiff>:
 80281ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80281ee:	000c      	movs	r4, r1
 80281f0:	b087      	sub	sp, #28
 80281f2:	9000      	str	r0, [sp, #0]
 80281f4:	0011      	movs	r1, r2
 80281f6:	0020      	movs	r0, r4
 80281f8:	0017      	movs	r7, r2
 80281fa:	f7ff ffdb 	bl	80281b4 <__mcmp>
 80281fe:	1e05      	subs	r5, r0, #0
 8028200:	d110      	bne.n	8028224 <__mdiff+0x38>
 8028202:	0001      	movs	r1, r0
 8028204:	9800      	ldr	r0, [sp, #0]
 8028206:	f7ff fd03 	bl	8027c10 <_Balloc>
 802820a:	1e02      	subs	r2, r0, #0
 802820c:	d104      	bne.n	8028218 <__mdiff+0x2c>
 802820e:	4b40      	ldr	r3, [pc, #256]	@ (8028310 <__mdiff+0x124>)
 8028210:	4840      	ldr	r0, [pc, #256]	@ (8028314 <__mdiff+0x128>)
 8028212:	4941      	ldr	r1, [pc, #260]	@ (8028318 <__mdiff+0x12c>)
 8028214:	f000 fdd4 	bl	8028dc0 <__assert_func>
 8028218:	2301      	movs	r3, #1
 802821a:	6145      	str	r5, [r0, #20]
 802821c:	6103      	str	r3, [r0, #16]
 802821e:	0010      	movs	r0, r2
 8028220:	b007      	add	sp, #28
 8028222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028224:	2600      	movs	r6, #0
 8028226:	42b0      	cmp	r0, r6
 8028228:	da03      	bge.n	8028232 <__mdiff+0x46>
 802822a:	0023      	movs	r3, r4
 802822c:	003c      	movs	r4, r7
 802822e:	001f      	movs	r7, r3
 8028230:	3601      	adds	r6, #1
 8028232:	6861      	ldr	r1, [r4, #4]
 8028234:	9800      	ldr	r0, [sp, #0]
 8028236:	f7ff fceb 	bl	8027c10 <_Balloc>
 802823a:	1e02      	subs	r2, r0, #0
 802823c:	d103      	bne.n	8028246 <__mdiff+0x5a>
 802823e:	4b34      	ldr	r3, [pc, #208]	@ (8028310 <__mdiff+0x124>)
 8028240:	4834      	ldr	r0, [pc, #208]	@ (8028314 <__mdiff+0x128>)
 8028242:	4936      	ldr	r1, [pc, #216]	@ (802831c <__mdiff+0x130>)
 8028244:	e7e6      	b.n	8028214 <__mdiff+0x28>
 8028246:	6923      	ldr	r3, [r4, #16]
 8028248:	3414      	adds	r4, #20
 802824a:	9300      	str	r3, [sp, #0]
 802824c:	009b      	lsls	r3, r3, #2
 802824e:	18e3      	adds	r3, r4, r3
 8028250:	0021      	movs	r1, r4
 8028252:	9401      	str	r4, [sp, #4]
 8028254:	003c      	movs	r4, r7
 8028256:	9302      	str	r3, [sp, #8]
 8028258:	693b      	ldr	r3, [r7, #16]
 802825a:	3414      	adds	r4, #20
 802825c:	009b      	lsls	r3, r3, #2
 802825e:	18e3      	adds	r3, r4, r3
 8028260:	9303      	str	r3, [sp, #12]
 8028262:	0003      	movs	r3, r0
 8028264:	60c6      	str	r6, [r0, #12]
 8028266:	468c      	mov	ip, r1
 8028268:	2000      	movs	r0, #0
 802826a:	3314      	adds	r3, #20
 802826c:	9304      	str	r3, [sp, #16]
 802826e:	9305      	str	r3, [sp, #20]
 8028270:	4663      	mov	r3, ip
 8028272:	cb20      	ldmia	r3!, {r5}
 8028274:	b2a9      	uxth	r1, r5
 8028276:	000e      	movs	r6, r1
 8028278:	469c      	mov	ip, r3
 802827a:	cc08      	ldmia	r4!, {r3}
 802827c:	0c2d      	lsrs	r5, r5, #16
 802827e:	b299      	uxth	r1, r3
 8028280:	1a71      	subs	r1, r6, r1
 8028282:	1809      	adds	r1, r1, r0
 8028284:	0c1b      	lsrs	r3, r3, #16
 8028286:	1408      	asrs	r0, r1, #16
 8028288:	1aeb      	subs	r3, r5, r3
 802828a:	181b      	adds	r3, r3, r0
 802828c:	1418      	asrs	r0, r3, #16
 802828e:	b289      	uxth	r1, r1
 8028290:	041b      	lsls	r3, r3, #16
 8028292:	4319      	orrs	r1, r3
 8028294:	9b05      	ldr	r3, [sp, #20]
 8028296:	c302      	stmia	r3!, {r1}
 8028298:	9305      	str	r3, [sp, #20]
 802829a:	9b03      	ldr	r3, [sp, #12]
 802829c:	42a3      	cmp	r3, r4
 802829e:	d8e7      	bhi.n	8028270 <__mdiff+0x84>
 80282a0:	0039      	movs	r1, r7
 80282a2:	9c03      	ldr	r4, [sp, #12]
 80282a4:	3115      	adds	r1, #21
 80282a6:	2304      	movs	r3, #4
 80282a8:	428c      	cmp	r4, r1
 80282aa:	d304      	bcc.n	80282b6 <__mdiff+0xca>
 80282ac:	1be3      	subs	r3, r4, r7
 80282ae:	3b15      	subs	r3, #21
 80282b0:	089b      	lsrs	r3, r3, #2
 80282b2:	3301      	adds	r3, #1
 80282b4:	009b      	lsls	r3, r3, #2
 80282b6:	9901      	ldr	r1, [sp, #4]
 80282b8:	18cd      	adds	r5, r1, r3
 80282ba:	9904      	ldr	r1, [sp, #16]
 80282bc:	002e      	movs	r6, r5
 80282be:	18cb      	adds	r3, r1, r3
 80282c0:	001f      	movs	r7, r3
 80282c2:	9902      	ldr	r1, [sp, #8]
 80282c4:	428e      	cmp	r6, r1
 80282c6:	d311      	bcc.n	80282ec <__mdiff+0x100>
 80282c8:	9c02      	ldr	r4, [sp, #8]
 80282ca:	1ee9      	subs	r1, r5, #3
 80282cc:	2000      	movs	r0, #0
 80282ce:	428c      	cmp	r4, r1
 80282d0:	d304      	bcc.n	80282dc <__mdiff+0xf0>
 80282d2:	0021      	movs	r1, r4
 80282d4:	3103      	adds	r1, #3
 80282d6:	1b49      	subs	r1, r1, r5
 80282d8:	0889      	lsrs	r1, r1, #2
 80282da:	0088      	lsls	r0, r1, #2
 80282dc:	181b      	adds	r3, r3, r0
 80282de:	3b04      	subs	r3, #4
 80282e0:	6819      	ldr	r1, [r3, #0]
 80282e2:	2900      	cmp	r1, #0
 80282e4:	d010      	beq.n	8028308 <__mdiff+0x11c>
 80282e6:	9b00      	ldr	r3, [sp, #0]
 80282e8:	6113      	str	r3, [r2, #16]
 80282ea:	e798      	b.n	802821e <__mdiff+0x32>
 80282ec:	4684      	mov	ip, r0
 80282ee:	ce02      	ldmia	r6!, {r1}
 80282f0:	b288      	uxth	r0, r1
 80282f2:	4460      	add	r0, ip
 80282f4:	1400      	asrs	r0, r0, #16
 80282f6:	0c0c      	lsrs	r4, r1, #16
 80282f8:	1904      	adds	r4, r0, r4
 80282fa:	4461      	add	r1, ip
 80282fc:	1420      	asrs	r0, r4, #16
 80282fe:	b289      	uxth	r1, r1
 8028300:	0424      	lsls	r4, r4, #16
 8028302:	4321      	orrs	r1, r4
 8028304:	c702      	stmia	r7!, {r1}
 8028306:	e7dc      	b.n	80282c2 <__mdiff+0xd6>
 8028308:	9900      	ldr	r1, [sp, #0]
 802830a:	3901      	subs	r1, #1
 802830c:	9100      	str	r1, [sp, #0]
 802830e:	e7e6      	b.n	80282de <__mdiff+0xf2>
 8028310:	0802ea1e 	.word	0x0802ea1e
 8028314:	0802ea8f 	.word	0x0802ea8f
 8028318:	00000237 	.word	0x00000237
 802831c:	00000245 	.word	0x00000245

08028320 <__ulp>:
 8028320:	b510      	push	{r4, lr}
 8028322:	2400      	movs	r4, #0
 8028324:	4b0c      	ldr	r3, [pc, #48]	@ (8028358 <__ulp+0x38>)
 8028326:	4a0d      	ldr	r2, [pc, #52]	@ (802835c <__ulp+0x3c>)
 8028328:	400b      	ands	r3, r1
 802832a:	189b      	adds	r3, r3, r2
 802832c:	42a3      	cmp	r3, r4
 802832e:	dc06      	bgt.n	802833e <__ulp+0x1e>
 8028330:	425b      	negs	r3, r3
 8028332:	151a      	asrs	r2, r3, #20
 8028334:	2a13      	cmp	r2, #19
 8028336:	dc05      	bgt.n	8028344 <__ulp+0x24>
 8028338:	2380      	movs	r3, #128	@ 0x80
 802833a:	031b      	lsls	r3, r3, #12
 802833c:	4113      	asrs	r3, r2
 802833e:	0019      	movs	r1, r3
 8028340:	0020      	movs	r0, r4
 8028342:	bd10      	pop	{r4, pc}
 8028344:	3a14      	subs	r2, #20
 8028346:	2401      	movs	r4, #1
 8028348:	2a1e      	cmp	r2, #30
 802834a:	dc02      	bgt.n	8028352 <__ulp+0x32>
 802834c:	2480      	movs	r4, #128	@ 0x80
 802834e:	0624      	lsls	r4, r4, #24
 8028350:	40d4      	lsrs	r4, r2
 8028352:	2300      	movs	r3, #0
 8028354:	e7f3      	b.n	802833e <__ulp+0x1e>
 8028356:	46c0      	nop			@ (mov r8, r8)
 8028358:	7ff00000 	.word	0x7ff00000
 802835c:	fcc00000 	.word	0xfcc00000

08028360 <__b2d>:
 8028360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028362:	0006      	movs	r6, r0
 8028364:	6903      	ldr	r3, [r0, #16]
 8028366:	3614      	adds	r6, #20
 8028368:	009b      	lsls	r3, r3, #2
 802836a:	18f3      	adds	r3, r6, r3
 802836c:	1f1d      	subs	r5, r3, #4
 802836e:	682c      	ldr	r4, [r5, #0]
 8028370:	000f      	movs	r7, r1
 8028372:	0020      	movs	r0, r4
 8028374:	9301      	str	r3, [sp, #4]
 8028376:	f7ff fd43 	bl	8027e00 <__hi0bits>
 802837a:	2220      	movs	r2, #32
 802837c:	1a12      	subs	r2, r2, r0
 802837e:	603a      	str	r2, [r7, #0]
 8028380:	0003      	movs	r3, r0
 8028382:	4a1c      	ldr	r2, [pc, #112]	@ (80283f4 <__b2d+0x94>)
 8028384:	280a      	cmp	r0, #10
 8028386:	dc15      	bgt.n	80283b4 <__b2d+0x54>
 8028388:	210b      	movs	r1, #11
 802838a:	0027      	movs	r7, r4
 802838c:	1a09      	subs	r1, r1, r0
 802838e:	40cf      	lsrs	r7, r1
 8028390:	433a      	orrs	r2, r7
 8028392:	468c      	mov	ip, r1
 8028394:	0011      	movs	r1, r2
 8028396:	2200      	movs	r2, #0
 8028398:	42ae      	cmp	r6, r5
 802839a:	d202      	bcs.n	80283a2 <__b2d+0x42>
 802839c:	9a01      	ldr	r2, [sp, #4]
 802839e:	3a08      	subs	r2, #8
 80283a0:	6812      	ldr	r2, [r2, #0]
 80283a2:	3315      	adds	r3, #21
 80283a4:	409c      	lsls	r4, r3
 80283a6:	4663      	mov	r3, ip
 80283a8:	0027      	movs	r7, r4
 80283aa:	40da      	lsrs	r2, r3
 80283ac:	4317      	orrs	r7, r2
 80283ae:	0038      	movs	r0, r7
 80283b0:	b003      	add	sp, #12
 80283b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80283b4:	2700      	movs	r7, #0
 80283b6:	42ae      	cmp	r6, r5
 80283b8:	d202      	bcs.n	80283c0 <__b2d+0x60>
 80283ba:	9d01      	ldr	r5, [sp, #4]
 80283bc:	3d08      	subs	r5, #8
 80283be:	682f      	ldr	r7, [r5, #0]
 80283c0:	210b      	movs	r1, #11
 80283c2:	4249      	negs	r1, r1
 80283c4:	468c      	mov	ip, r1
 80283c6:	449c      	add	ip, r3
 80283c8:	2b0b      	cmp	r3, #11
 80283ca:	d010      	beq.n	80283ee <__b2d+0x8e>
 80283cc:	4661      	mov	r1, ip
 80283ce:	2320      	movs	r3, #32
 80283d0:	408c      	lsls	r4, r1
 80283d2:	1a5b      	subs	r3, r3, r1
 80283d4:	0039      	movs	r1, r7
 80283d6:	40d9      	lsrs	r1, r3
 80283d8:	430c      	orrs	r4, r1
 80283da:	4322      	orrs	r2, r4
 80283dc:	0011      	movs	r1, r2
 80283de:	2200      	movs	r2, #0
 80283e0:	42b5      	cmp	r5, r6
 80283e2:	d901      	bls.n	80283e8 <__b2d+0x88>
 80283e4:	3d04      	subs	r5, #4
 80283e6:	682a      	ldr	r2, [r5, #0]
 80283e8:	4664      	mov	r4, ip
 80283ea:	40a7      	lsls	r7, r4
 80283ec:	e7dd      	b.n	80283aa <__b2d+0x4a>
 80283ee:	4322      	orrs	r2, r4
 80283f0:	0011      	movs	r1, r2
 80283f2:	e7dc      	b.n	80283ae <__b2d+0x4e>
 80283f4:	3ff00000 	.word	0x3ff00000

080283f8 <__d2b>:
 80283f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80283fa:	2101      	movs	r1, #1
 80283fc:	0016      	movs	r6, r2
 80283fe:	001f      	movs	r7, r3
 8028400:	f7ff fc06 	bl	8027c10 <_Balloc>
 8028404:	1e04      	subs	r4, r0, #0
 8028406:	d105      	bne.n	8028414 <__d2b+0x1c>
 8028408:	0022      	movs	r2, r4
 802840a:	4b25      	ldr	r3, [pc, #148]	@ (80284a0 <__d2b+0xa8>)
 802840c:	4825      	ldr	r0, [pc, #148]	@ (80284a4 <__d2b+0xac>)
 802840e:	4926      	ldr	r1, [pc, #152]	@ (80284a8 <__d2b+0xb0>)
 8028410:	f000 fcd6 	bl	8028dc0 <__assert_func>
 8028414:	033b      	lsls	r3, r7, #12
 8028416:	007d      	lsls	r5, r7, #1
 8028418:	0b1b      	lsrs	r3, r3, #12
 802841a:	0d6d      	lsrs	r5, r5, #21
 802841c:	d002      	beq.n	8028424 <__d2b+0x2c>
 802841e:	2280      	movs	r2, #128	@ 0x80
 8028420:	0352      	lsls	r2, r2, #13
 8028422:	4313      	orrs	r3, r2
 8028424:	9301      	str	r3, [sp, #4]
 8028426:	2e00      	cmp	r6, #0
 8028428:	d025      	beq.n	8028476 <__d2b+0x7e>
 802842a:	4668      	mov	r0, sp
 802842c:	9600      	str	r6, [sp, #0]
 802842e:	f7ff fd08 	bl	8027e42 <__lo0bits>
 8028432:	9b01      	ldr	r3, [sp, #4]
 8028434:	9900      	ldr	r1, [sp, #0]
 8028436:	2800      	cmp	r0, #0
 8028438:	d01b      	beq.n	8028472 <__d2b+0x7a>
 802843a:	2220      	movs	r2, #32
 802843c:	001e      	movs	r6, r3
 802843e:	1a12      	subs	r2, r2, r0
 8028440:	4096      	lsls	r6, r2
 8028442:	0032      	movs	r2, r6
 8028444:	40c3      	lsrs	r3, r0
 8028446:	430a      	orrs	r2, r1
 8028448:	6162      	str	r2, [r4, #20]
 802844a:	9301      	str	r3, [sp, #4]
 802844c:	9e01      	ldr	r6, [sp, #4]
 802844e:	61a6      	str	r6, [r4, #24]
 8028450:	1e73      	subs	r3, r6, #1
 8028452:	419e      	sbcs	r6, r3
 8028454:	3601      	adds	r6, #1
 8028456:	6126      	str	r6, [r4, #16]
 8028458:	2d00      	cmp	r5, #0
 802845a:	d014      	beq.n	8028486 <__d2b+0x8e>
 802845c:	2635      	movs	r6, #53	@ 0x35
 802845e:	4b13      	ldr	r3, [pc, #76]	@ (80284ac <__d2b+0xb4>)
 8028460:	18ed      	adds	r5, r5, r3
 8028462:	9b08      	ldr	r3, [sp, #32]
 8028464:	182d      	adds	r5, r5, r0
 8028466:	601d      	str	r5, [r3, #0]
 8028468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802846a:	1a36      	subs	r6, r6, r0
 802846c:	601e      	str	r6, [r3, #0]
 802846e:	0020      	movs	r0, r4
 8028470:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028472:	6161      	str	r1, [r4, #20]
 8028474:	e7ea      	b.n	802844c <__d2b+0x54>
 8028476:	a801      	add	r0, sp, #4
 8028478:	f7ff fce3 	bl	8027e42 <__lo0bits>
 802847c:	9b01      	ldr	r3, [sp, #4]
 802847e:	2601      	movs	r6, #1
 8028480:	6163      	str	r3, [r4, #20]
 8028482:	3020      	adds	r0, #32
 8028484:	e7e7      	b.n	8028456 <__d2b+0x5e>
 8028486:	4b0a      	ldr	r3, [pc, #40]	@ (80284b0 <__d2b+0xb8>)
 8028488:	18c0      	adds	r0, r0, r3
 802848a:	9b08      	ldr	r3, [sp, #32]
 802848c:	6018      	str	r0, [r3, #0]
 802848e:	4b09      	ldr	r3, [pc, #36]	@ (80284b4 <__d2b+0xbc>)
 8028490:	18f3      	adds	r3, r6, r3
 8028492:	009b      	lsls	r3, r3, #2
 8028494:	18e3      	adds	r3, r4, r3
 8028496:	6958      	ldr	r0, [r3, #20]
 8028498:	f7ff fcb2 	bl	8027e00 <__hi0bits>
 802849c:	0176      	lsls	r6, r6, #5
 802849e:	e7e3      	b.n	8028468 <__d2b+0x70>
 80284a0:	0802ea1e 	.word	0x0802ea1e
 80284a4:	0802ea8f 	.word	0x0802ea8f
 80284a8:	0000030f 	.word	0x0000030f
 80284ac:	fffffbcd 	.word	0xfffffbcd
 80284b0:	fffffbce 	.word	0xfffffbce
 80284b4:	3fffffff 	.word	0x3fffffff

080284b8 <__ratio>:
 80284b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80284ba:	b087      	sub	sp, #28
 80284bc:	000f      	movs	r7, r1
 80284be:	a904      	add	r1, sp, #16
 80284c0:	0006      	movs	r6, r0
 80284c2:	f7ff ff4d 	bl	8028360 <__b2d>
 80284c6:	9000      	str	r0, [sp, #0]
 80284c8:	9101      	str	r1, [sp, #4]
 80284ca:	9b00      	ldr	r3, [sp, #0]
 80284cc:	9c01      	ldr	r4, [sp, #4]
 80284ce:	0038      	movs	r0, r7
 80284d0:	a905      	add	r1, sp, #20
 80284d2:	9302      	str	r3, [sp, #8]
 80284d4:	9403      	str	r4, [sp, #12]
 80284d6:	f7ff ff43 	bl	8028360 <__b2d>
 80284da:	000d      	movs	r5, r1
 80284dc:	0002      	movs	r2, r0
 80284de:	000b      	movs	r3, r1
 80284e0:	6930      	ldr	r0, [r6, #16]
 80284e2:	6939      	ldr	r1, [r7, #16]
 80284e4:	9e04      	ldr	r6, [sp, #16]
 80284e6:	1a40      	subs	r0, r0, r1
 80284e8:	9905      	ldr	r1, [sp, #20]
 80284ea:	0140      	lsls	r0, r0, #5
 80284ec:	1a71      	subs	r1, r6, r1
 80284ee:	1841      	adds	r1, r0, r1
 80284f0:	0508      	lsls	r0, r1, #20
 80284f2:	2900      	cmp	r1, #0
 80284f4:	dd08      	ble.n	8028508 <__ratio+0x50>
 80284f6:	9901      	ldr	r1, [sp, #4]
 80284f8:	1841      	adds	r1, r0, r1
 80284fa:	9103      	str	r1, [sp, #12]
 80284fc:	9802      	ldr	r0, [sp, #8]
 80284fe:	9903      	ldr	r1, [sp, #12]
 8028500:	f7d9 fdee 	bl	80020e0 <__aeabi_ddiv>
 8028504:	b007      	add	sp, #28
 8028506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028508:	1a2b      	subs	r3, r5, r0
 802850a:	e7f7      	b.n	80284fc <__ratio+0x44>

0802850c <__copybits>:
 802850c:	b570      	push	{r4, r5, r6, lr}
 802850e:	0014      	movs	r4, r2
 8028510:	0005      	movs	r5, r0
 8028512:	3901      	subs	r1, #1
 8028514:	6913      	ldr	r3, [r2, #16]
 8028516:	1149      	asrs	r1, r1, #5
 8028518:	3101      	adds	r1, #1
 802851a:	0089      	lsls	r1, r1, #2
 802851c:	3414      	adds	r4, #20
 802851e:	009b      	lsls	r3, r3, #2
 8028520:	1841      	adds	r1, r0, r1
 8028522:	18e3      	adds	r3, r4, r3
 8028524:	42a3      	cmp	r3, r4
 8028526:	d80d      	bhi.n	8028544 <__copybits+0x38>
 8028528:	0014      	movs	r4, r2
 802852a:	3411      	adds	r4, #17
 802852c:	2500      	movs	r5, #0
 802852e:	42a3      	cmp	r3, r4
 8028530:	d303      	bcc.n	802853a <__copybits+0x2e>
 8028532:	1a9b      	subs	r3, r3, r2
 8028534:	3b11      	subs	r3, #17
 8028536:	089b      	lsrs	r3, r3, #2
 8028538:	009d      	lsls	r5, r3, #2
 802853a:	2300      	movs	r3, #0
 802853c:	1940      	adds	r0, r0, r5
 802853e:	4281      	cmp	r1, r0
 8028540:	d803      	bhi.n	802854a <__copybits+0x3e>
 8028542:	bd70      	pop	{r4, r5, r6, pc}
 8028544:	cc40      	ldmia	r4!, {r6}
 8028546:	c540      	stmia	r5!, {r6}
 8028548:	e7ec      	b.n	8028524 <__copybits+0x18>
 802854a:	c008      	stmia	r0!, {r3}
 802854c:	e7f7      	b.n	802853e <__copybits+0x32>

0802854e <__any_on>:
 802854e:	0002      	movs	r2, r0
 8028550:	6900      	ldr	r0, [r0, #16]
 8028552:	b510      	push	{r4, lr}
 8028554:	3214      	adds	r2, #20
 8028556:	114b      	asrs	r3, r1, #5
 8028558:	4298      	cmp	r0, r3
 802855a:	db13      	blt.n	8028584 <__any_on+0x36>
 802855c:	dd0c      	ble.n	8028578 <__any_on+0x2a>
 802855e:	241f      	movs	r4, #31
 8028560:	0008      	movs	r0, r1
 8028562:	4020      	ands	r0, r4
 8028564:	4221      	tst	r1, r4
 8028566:	d007      	beq.n	8028578 <__any_on+0x2a>
 8028568:	0099      	lsls	r1, r3, #2
 802856a:	588c      	ldr	r4, [r1, r2]
 802856c:	0021      	movs	r1, r4
 802856e:	40c1      	lsrs	r1, r0
 8028570:	4081      	lsls	r1, r0
 8028572:	2001      	movs	r0, #1
 8028574:	428c      	cmp	r4, r1
 8028576:	d104      	bne.n	8028582 <__any_on+0x34>
 8028578:	009b      	lsls	r3, r3, #2
 802857a:	18d3      	adds	r3, r2, r3
 802857c:	4293      	cmp	r3, r2
 802857e:	d803      	bhi.n	8028588 <__any_on+0x3a>
 8028580:	2000      	movs	r0, #0
 8028582:	bd10      	pop	{r4, pc}
 8028584:	0003      	movs	r3, r0
 8028586:	e7f7      	b.n	8028578 <__any_on+0x2a>
 8028588:	3b04      	subs	r3, #4
 802858a:	6819      	ldr	r1, [r3, #0]
 802858c:	2900      	cmp	r1, #0
 802858e:	d0f5      	beq.n	802857c <__any_on+0x2e>
 8028590:	2001      	movs	r0, #1
 8028592:	e7f6      	b.n	8028582 <__any_on+0x34>

08028594 <__ascii_wctomb>:
 8028594:	0003      	movs	r3, r0
 8028596:	1e08      	subs	r0, r1, #0
 8028598:	d005      	beq.n	80285a6 <__ascii_wctomb+0x12>
 802859a:	2aff      	cmp	r2, #255	@ 0xff
 802859c:	d904      	bls.n	80285a8 <__ascii_wctomb+0x14>
 802859e:	228a      	movs	r2, #138	@ 0x8a
 80285a0:	2001      	movs	r0, #1
 80285a2:	601a      	str	r2, [r3, #0]
 80285a4:	4240      	negs	r0, r0
 80285a6:	4770      	bx	lr
 80285a8:	2001      	movs	r0, #1
 80285aa:	700a      	strb	r2, [r1, #0]
 80285ac:	e7fb      	b.n	80285a6 <__ascii_wctomb+0x12>
	...

080285b0 <__ssputs_r>:
 80285b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80285b2:	688e      	ldr	r6, [r1, #8]
 80285b4:	b085      	sub	sp, #20
 80285b6:	001f      	movs	r7, r3
 80285b8:	000c      	movs	r4, r1
 80285ba:	680b      	ldr	r3, [r1, #0]
 80285bc:	9002      	str	r0, [sp, #8]
 80285be:	9203      	str	r2, [sp, #12]
 80285c0:	42be      	cmp	r6, r7
 80285c2:	d830      	bhi.n	8028626 <__ssputs_r+0x76>
 80285c4:	210c      	movs	r1, #12
 80285c6:	5e62      	ldrsh	r2, [r4, r1]
 80285c8:	2190      	movs	r1, #144	@ 0x90
 80285ca:	00c9      	lsls	r1, r1, #3
 80285cc:	420a      	tst	r2, r1
 80285ce:	d028      	beq.n	8028622 <__ssputs_r+0x72>
 80285d0:	2003      	movs	r0, #3
 80285d2:	6921      	ldr	r1, [r4, #16]
 80285d4:	1a5b      	subs	r3, r3, r1
 80285d6:	9301      	str	r3, [sp, #4]
 80285d8:	6963      	ldr	r3, [r4, #20]
 80285da:	4343      	muls	r3, r0
 80285dc:	9801      	ldr	r0, [sp, #4]
 80285de:	0fdd      	lsrs	r5, r3, #31
 80285e0:	18ed      	adds	r5, r5, r3
 80285e2:	1c7b      	adds	r3, r7, #1
 80285e4:	181b      	adds	r3, r3, r0
 80285e6:	106d      	asrs	r5, r5, #1
 80285e8:	42ab      	cmp	r3, r5
 80285ea:	d900      	bls.n	80285ee <__ssputs_r+0x3e>
 80285ec:	001d      	movs	r5, r3
 80285ee:	0552      	lsls	r2, r2, #21
 80285f0:	d528      	bpl.n	8028644 <__ssputs_r+0x94>
 80285f2:	0029      	movs	r1, r5
 80285f4:	9802      	ldr	r0, [sp, #8]
 80285f6:	f7ff fa69 	bl	8027acc <_malloc_r>
 80285fa:	1e06      	subs	r6, r0, #0
 80285fc:	d02c      	beq.n	8028658 <__ssputs_r+0xa8>
 80285fe:	9a01      	ldr	r2, [sp, #4]
 8028600:	6921      	ldr	r1, [r4, #16]
 8028602:	f7fe f80d 	bl	8026620 <memcpy>
 8028606:	89a2      	ldrh	r2, [r4, #12]
 8028608:	4b18      	ldr	r3, [pc, #96]	@ (802866c <__ssputs_r+0xbc>)
 802860a:	401a      	ands	r2, r3
 802860c:	2380      	movs	r3, #128	@ 0x80
 802860e:	4313      	orrs	r3, r2
 8028610:	81a3      	strh	r3, [r4, #12]
 8028612:	9b01      	ldr	r3, [sp, #4]
 8028614:	6126      	str	r6, [r4, #16]
 8028616:	18f6      	adds	r6, r6, r3
 8028618:	6026      	str	r6, [r4, #0]
 802861a:	003e      	movs	r6, r7
 802861c:	6165      	str	r5, [r4, #20]
 802861e:	1aed      	subs	r5, r5, r3
 8028620:	60a5      	str	r5, [r4, #8]
 8028622:	42be      	cmp	r6, r7
 8028624:	d900      	bls.n	8028628 <__ssputs_r+0x78>
 8028626:	003e      	movs	r6, r7
 8028628:	0032      	movs	r2, r6
 802862a:	9903      	ldr	r1, [sp, #12]
 802862c:	6820      	ldr	r0, [r4, #0]
 802862e:	f000 fb7e 	bl	8028d2e <memmove>
 8028632:	2000      	movs	r0, #0
 8028634:	68a3      	ldr	r3, [r4, #8]
 8028636:	1b9b      	subs	r3, r3, r6
 8028638:	60a3      	str	r3, [r4, #8]
 802863a:	6823      	ldr	r3, [r4, #0]
 802863c:	199b      	adds	r3, r3, r6
 802863e:	6023      	str	r3, [r4, #0]
 8028640:	b005      	add	sp, #20
 8028642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028644:	002a      	movs	r2, r5
 8028646:	9802      	ldr	r0, [sp, #8]
 8028648:	f000 fc05 	bl	8028e56 <_realloc_r>
 802864c:	1e06      	subs	r6, r0, #0
 802864e:	d1e0      	bne.n	8028612 <__ssputs_r+0x62>
 8028650:	6921      	ldr	r1, [r4, #16]
 8028652:	9802      	ldr	r0, [sp, #8]
 8028654:	f7fe fe6a 	bl	802732c <_free_r>
 8028658:	230c      	movs	r3, #12
 802865a:	2001      	movs	r0, #1
 802865c:	9a02      	ldr	r2, [sp, #8]
 802865e:	4240      	negs	r0, r0
 8028660:	6013      	str	r3, [r2, #0]
 8028662:	89a2      	ldrh	r2, [r4, #12]
 8028664:	3334      	adds	r3, #52	@ 0x34
 8028666:	4313      	orrs	r3, r2
 8028668:	81a3      	strh	r3, [r4, #12]
 802866a:	e7e9      	b.n	8028640 <__ssputs_r+0x90>
 802866c:	fffffb7f 	.word	0xfffffb7f

08028670 <_svfiprintf_r>:
 8028670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028672:	b0a1      	sub	sp, #132	@ 0x84
 8028674:	9003      	str	r0, [sp, #12]
 8028676:	001d      	movs	r5, r3
 8028678:	898b      	ldrh	r3, [r1, #12]
 802867a:	000f      	movs	r7, r1
 802867c:	0016      	movs	r6, r2
 802867e:	061b      	lsls	r3, r3, #24
 8028680:	d511      	bpl.n	80286a6 <_svfiprintf_r+0x36>
 8028682:	690b      	ldr	r3, [r1, #16]
 8028684:	2b00      	cmp	r3, #0
 8028686:	d10e      	bne.n	80286a6 <_svfiprintf_r+0x36>
 8028688:	2140      	movs	r1, #64	@ 0x40
 802868a:	f7ff fa1f 	bl	8027acc <_malloc_r>
 802868e:	6038      	str	r0, [r7, #0]
 8028690:	6138      	str	r0, [r7, #16]
 8028692:	2800      	cmp	r0, #0
 8028694:	d105      	bne.n	80286a2 <_svfiprintf_r+0x32>
 8028696:	230c      	movs	r3, #12
 8028698:	9a03      	ldr	r2, [sp, #12]
 802869a:	6013      	str	r3, [r2, #0]
 802869c:	2001      	movs	r0, #1
 802869e:	4240      	negs	r0, r0
 80286a0:	e0cf      	b.n	8028842 <_svfiprintf_r+0x1d2>
 80286a2:	2340      	movs	r3, #64	@ 0x40
 80286a4:	617b      	str	r3, [r7, #20]
 80286a6:	2300      	movs	r3, #0
 80286a8:	ac08      	add	r4, sp, #32
 80286aa:	6163      	str	r3, [r4, #20]
 80286ac:	3320      	adds	r3, #32
 80286ae:	7663      	strb	r3, [r4, #25]
 80286b0:	3310      	adds	r3, #16
 80286b2:	76a3      	strb	r3, [r4, #26]
 80286b4:	9507      	str	r5, [sp, #28]
 80286b6:	0035      	movs	r5, r6
 80286b8:	782b      	ldrb	r3, [r5, #0]
 80286ba:	2b00      	cmp	r3, #0
 80286bc:	d001      	beq.n	80286c2 <_svfiprintf_r+0x52>
 80286be:	2b25      	cmp	r3, #37	@ 0x25
 80286c0:	d148      	bne.n	8028754 <_svfiprintf_r+0xe4>
 80286c2:	1bab      	subs	r3, r5, r6
 80286c4:	9305      	str	r3, [sp, #20]
 80286c6:	42b5      	cmp	r5, r6
 80286c8:	d00b      	beq.n	80286e2 <_svfiprintf_r+0x72>
 80286ca:	0032      	movs	r2, r6
 80286cc:	0039      	movs	r1, r7
 80286ce:	9803      	ldr	r0, [sp, #12]
 80286d0:	f7ff ff6e 	bl	80285b0 <__ssputs_r>
 80286d4:	3001      	adds	r0, #1
 80286d6:	d100      	bne.n	80286da <_svfiprintf_r+0x6a>
 80286d8:	e0ae      	b.n	8028838 <_svfiprintf_r+0x1c8>
 80286da:	6963      	ldr	r3, [r4, #20]
 80286dc:	9a05      	ldr	r2, [sp, #20]
 80286de:	189b      	adds	r3, r3, r2
 80286e0:	6163      	str	r3, [r4, #20]
 80286e2:	782b      	ldrb	r3, [r5, #0]
 80286e4:	2b00      	cmp	r3, #0
 80286e6:	d100      	bne.n	80286ea <_svfiprintf_r+0x7a>
 80286e8:	e0a6      	b.n	8028838 <_svfiprintf_r+0x1c8>
 80286ea:	2201      	movs	r2, #1
 80286ec:	2300      	movs	r3, #0
 80286ee:	4252      	negs	r2, r2
 80286f0:	6062      	str	r2, [r4, #4]
 80286f2:	a904      	add	r1, sp, #16
 80286f4:	3254      	adds	r2, #84	@ 0x54
 80286f6:	1852      	adds	r2, r2, r1
 80286f8:	1c6e      	adds	r6, r5, #1
 80286fa:	6023      	str	r3, [r4, #0]
 80286fc:	60e3      	str	r3, [r4, #12]
 80286fe:	60a3      	str	r3, [r4, #8]
 8028700:	7013      	strb	r3, [r2, #0]
 8028702:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028704:	4b54      	ldr	r3, [pc, #336]	@ (8028858 <_svfiprintf_r+0x1e8>)
 8028706:	2205      	movs	r2, #5
 8028708:	0018      	movs	r0, r3
 802870a:	7831      	ldrb	r1, [r6, #0]
 802870c:	9305      	str	r3, [sp, #20]
 802870e:	f7fd ff7c 	bl	802660a <memchr>
 8028712:	1c75      	adds	r5, r6, #1
 8028714:	2800      	cmp	r0, #0
 8028716:	d11f      	bne.n	8028758 <_svfiprintf_r+0xe8>
 8028718:	6822      	ldr	r2, [r4, #0]
 802871a:	06d3      	lsls	r3, r2, #27
 802871c:	d504      	bpl.n	8028728 <_svfiprintf_r+0xb8>
 802871e:	2353      	movs	r3, #83	@ 0x53
 8028720:	a904      	add	r1, sp, #16
 8028722:	185b      	adds	r3, r3, r1
 8028724:	2120      	movs	r1, #32
 8028726:	7019      	strb	r1, [r3, #0]
 8028728:	0713      	lsls	r3, r2, #28
 802872a:	d504      	bpl.n	8028736 <_svfiprintf_r+0xc6>
 802872c:	2353      	movs	r3, #83	@ 0x53
 802872e:	a904      	add	r1, sp, #16
 8028730:	185b      	adds	r3, r3, r1
 8028732:	212b      	movs	r1, #43	@ 0x2b
 8028734:	7019      	strb	r1, [r3, #0]
 8028736:	7833      	ldrb	r3, [r6, #0]
 8028738:	2b2a      	cmp	r3, #42	@ 0x2a
 802873a:	d016      	beq.n	802876a <_svfiprintf_r+0xfa>
 802873c:	0035      	movs	r5, r6
 802873e:	2100      	movs	r1, #0
 8028740:	200a      	movs	r0, #10
 8028742:	68e3      	ldr	r3, [r4, #12]
 8028744:	782a      	ldrb	r2, [r5, #0]
 8028746:	1c6e      	adds	r6, r5, #1
 8028748:	3a30      	subs	r2, #48	@ 0x30
 802874a:	2a09      	cmp	r2, #9
 802874c:	d950      	bls.n	80287f0 <_svfiprintf_r+0x180>
 802874e:	2900      	cmp	r1, #0
 8028750:	d111      	bne.n	8028776 <_svfiprintf_r+0x106>
 8028752:	e017      	b.n	8028784 <_svfiprintf_r+0x114>
 8028754:	3501      	adds	r5, #1
 8028756:	e7af      	b.n	80286b8 <_svfiprintf_r+0x48>
 8028758:	9b05      	ldr	r3, [sp, #20]
 802875a:	6822      	ldr	r2, [r4, #0]
 802875c:	1ac0      	subs	r0, r0, r3
 802875e:	2301      	movs	r3, #1
 8028760:	4083      	lsls	r3, r0
 8028762:	4313      	orrs	r3, r2
 8028764:	002e      	movs	r6, r5
 8028766:	6023      	str	r3, [r4, #0]
 8028768:	e7cc      	b.n	8028704 <_svfiprintf_r+0x94>
 802876a:	9b07      	ldr	r3, [sp, #28]
 802876c:	1d19      	adds	r1, r3, #4
 802876e:	681b      	ldr	r3, [r3, #0]
 8028770:	9107      	str	r1, [sp, #28]
 8028772:	2b00      	cmp	r3, #0
 8028774:	db01      	blt.n	802877a <_svfiprintf_r+0x10a>
 8028776:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028778:	e004      	b.n	8028784 <_svfiprintf_r+0x114>
 802877a:	425b      	negs	r3, r3
 802877c:	60e3      	str	r3, [r4, #12]
 802877e:	2302      	movs	r3, #2
 8028780:	4313      	orrs	r3, r2
 8028782:	6023      	str	r3, [r4, #0]
 8028784:	782b      	ldrb	r3, [r5, #0]
 8028786:	2b2e      	cmp	r3, #46	@ 0x2e
 8028788:	d10c      	bne.n	80287a4 <_svfiprintf_r+0x134>
 802878a:	786b      	ldrb	r3, [r5, #1]
 802878c:	2b2a      	cmp	r3, #42	@ 0x2a
 802878e:	d134      	bne.n	80287fa <_svfiprintf_r+0x18a>
 8028790:	9b07      	ldr	r3, [sp, #28]
 8028792:	3502      	adds	r5, #2
 8028794:	1d1a      	adds	r2, r3, #4
 8028796:	681b      	ldr	r3, [r3, #0]
 8028798:	9207      	str	r2, [sp, #28]
 802879a:	2b00      	cmp	r3, #0
 802879c:	da01      	bge.n	80287a2 <_svfiprintf_r+0x132>
 802879e:	2301      	movs	r3, #1
 80287a0:	425b      	negs	r3, r3
 80287a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80287a4:	4e2d      	ldr	r6, [pc, #180]	@ (802885c <_svfiprintf_r+0x1ec>)
 80287a6:	2203      	movs	r2, #3
 80287a8:	0030      	movs	r0, r6
 80287aa:	7829      	ldrb	r1, [r5, #0]
 80287ac:	f7fd ff2d 	bl	802660a <memchr>
 80287b0:	2800      	cmp	r0, #0
 80287b2:	d006      	beq.n	80287c2 <_svfiprintf_r+0x152>
 80287b4:	2340      	movs	r3, #64	@ 0x40
 80287b6:	1b80      	subs	r0, r0, r6
 80287b8:	4083      	lsls	r3, r0
 80287ba:	6822      	ldr	r2, [r4, #0]
 80287bc:	3501      	adds	r5, #1
 80287be:	4313      	orrs	r3, r2
 80287c0:	6023      	str	r3, [r4, #0]
 80287c2:	7829      	ldrb	r1, [r5, #0]
 80287c4:	2206      	movs	r2, #6
 80287c6:	4826      	ldr	r0, [pc, #152]	@ (8028860 <_svfiprintf_r+0x1f0>)
 80287c8:	1c6e      	adds	r6, r5, #1
 80287ca:	7621      	strb	r1, [r4, #24]
 80287cc:	f7fd ff1d 	bl	802660a <memchr>
 80287d0:	2800      	cmp	r0, #0
 80287d2:	d038      	beq.n	8028846 <_svfiprintf_r+0x1d6>
 80287d4:	4b23      	ldr	r3, [pc, #140]	@ (8028864 <_svfiprintf_r+0x1f4>)
 80287d6:	2b00      	cmp	r3, #0
 80287d8:	d122      	bne.n	8028820 <_svfiprintf_r+0x1b0>
 80287da:	2207      	movs	r2, #7
 80287dc:	9b07      	ldr	r3, [sp, #28]
 80287de:	3307      	adds	r3, #7
 80287e0:	4393      	bics	r3, r2
 80287e2:	3308      	adds	r3, #8
 80287e4:	9307      	str	r3, [sp, #28]
 80287e6:	6963      	ldr	r3, [r4, #20]
 80287e8:	9a04      	ldr	r2, [sp, #16]
 80287ea:	189b      	adds	r3, r3, r2
 80287ec:	6163      	str	r3, [r4, #20]
 80287ee:	e762      	b.n	80286b6 <_svfiprintf_r+0x46>
 80287f0:	4343      	muls	r3, r0
 80287f2:	0035      	movs	r5, r6
 80287f4:	2101      	movs	r1, #1
 80287f6:	189b      	adds	r3, r3, r2
 80287f8:	e7a4      	b.n	8028744 <_svfiprintf_r+0xd4>
 80287fa:	2300      	movs	r3, #0
 80287fc:	200a      	movs	r0, #10
 80287fe:	0019      	movs	r1, r3
 8028800:	3501      	adds	r5, #1
 8028802:	6063      	str	r3, [r4, #4]
 8028804:	782a      	ldrb	r2, [r5, #0]
 8028806:	1c6e      	adds	r6, r5, #1
 8028808:	3a30      	subs	r2, #48	@ 0x30
 802880a:	2a09      	cmp	r2, #9
 802880c:	d903      	bls.n	8028816 <_svfiprintf_r+0x1a6>
 802880e:	2b00      	cmp	r3, #0
 8028810:	d0c8      	beq.n	80287a4 <_svfiprintf_r+0x134>
 8028812:	9109      	str	r1, [sp, #36]	@ 0x24
 8028814:	e7c6      	b.n	80287a4 <_svfiprintf_r+0x134>
 8028816:	4341      	muls	r1, r0
 8028818:	0035      	movs	r5, r6
 802881a:	2301      	movs	r3, #1
 802881c:	1889      	adds	r1, r1, r2
 802881e:	e7f1      	b.n	8028804 <_svfiprintf_r+0x194>
 8028820:	aa07      	add	r2, sp, #28
 8028822:	9200      	str	r2, [sp, #0]
 8028824:	0021      	movs	r1, r4
 8028826:	003a      	movs	r2, r7
 8028828:	4b0f      	ldr	r3, [pc, #60]	@ (8028868 <_svfiprintf_r+0x1f8>)
 802882a:	9803      	ldr	r0, [sp, #12]
 802882c:	f7fc ffe6 	bl	80257fc <_printf_float>
 8028830:	9004      	str	r0, [sp, #16]
 8028832:	9b04      	ldr	r3, [sp, #16]
 8028834:	3301      	adds	r3, #1
 8028836:	d1d6      	bne.n	80287e6 <_svfiprintf_r+0x176>
 8028838:	89bb      	ldrh	r3, [r7, #12]
 802883a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802883c:	065b      	lsls	r3, r3, #25
 802883e:	d500      	bpl.n	8028842 <_svfiprintf_r+0x1d2>
 8028840:	e72c      	b.n	802869c <_svfiprintf_r+0x2c>
 8028842:	b021      	add	sp, #132	@ 0x84
 8028844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028846:	aa07      	add	r2, sp, #28
 8028848:	9200      	str	r2, [sp, #0]
 802884a:	0021      	movs	r1, r4
 802884c:	003a      	movs	r2, r7
 802884e:	4b06      	ldr	r3, [pc, #24]	@ (8028868 <_svfiprintf_r+0x1f8>)
 8028850:	9803      	ldr	r0, [sp, #12]
 8028852:	f7fd fa81 	bl	8025d58 <_printf_i>
 8028856:	e7eb      	b.n	8028830 <_svfiprintf_r+0x1c0>
 8028858:	0802eae8 	.word	0x0802eae8
 802885c:	0802eaee 	.word	0x0802eaee
 8028860:	0802eaf2 	.word	0x0802eaf2
 8028864:	080257fd 	.word	0x080257fd
 8028868:	080285b1 	.word	0x080285b1

0802886c <__sfputc_r>:
 802886c:	6893      	ldr	r3, [r2, #8]
 802886e:	b510      	push	{r4, lr}
 8028870:	3b01      	subs	r3, #1
 8028872:	6093      	str	r3, [r2, #8]
 8028874:	2b00      	cmp	r3, #0
 8028876:	da04      	bge.n	8028882 <__sfputc_r+0x16>
 8028878:	6994      	ldr	r4, [r2, #24]
 802887a:	42a3      	cmp	r3, r4
 802887c:	db07      	blt.n	802888e <__sfputc_r+0x22>
 802887e:	290a      	cmp	r1, #10
 8028880:	d005      	beq.n	802888e <__sfputc_r+0x22>
 8028882:	6813      	ldr	r3, [r2, #0]
 8028884:	1c58      	adds	r0, r3, #1
 8028886:	6010      	str	r0, [r2, #0]
 8028888:	7019      	strb	r1, [r3, #0]
 802888a:	0008      	movs	r0, r1
 802888c:	bd10      	pop	{r4, pc}
 802888e:	f7fd fd4b 	bl	8026328 <__swbuf_r>
 8028892:	0001      	movs	r1, r0
 8028894:	e7f9      	b.n	802888a <__sfputc_r+0x1e>

08028896 <__sfputs_r>:
 8028896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028898:	0006      	movs	r6, r0
 802889a:	000f      	movs	r7, r1
 802889c:	0014      	movs	r4, r2
 802889e:	18d5      	adds	r5, r2, r3
 80288a0:	42ac      	cmp	r4, r5
 80288a2:	d101      	bne.n	80288a8 <__sfputs_r+0x12>
 80288a4:	2000      	movs	r0, #0
 80288a6:	e007      	b.n	80288b8 <__sfputs_r+0x22>
 80288a8:	7821      	ldrb	r1, [r4, #0]
 80288aa:	003a      	movs	r2, r7
 80288ac:	0030      	movs	r0, r6
 80288ae:	f7ff ffdd 	bl	802886c <__sfputc_r>
 80288b2:	3401      	adds	r4, #1
 80288b4:	1c43      	adds	r3, r0, #1
 80288b6:	d1f3      	bne.n	80288a0 <__sfputs_r+0xa>
 80288b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080288bc <_vfiprintf_r>:
 80288bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80288be:	b0a1      	sub	sp, #132	@ 0x84
 80288c0:	000f      	movs	r7, r1
 80288c2:	0015      	movs	r5, r2
 80288c4:	001e      	movs	r6, r3
 80288c6:	9003      	str	r0, [sp, #12]
 80288c8:	2800      	cmp	r0, #0
 80288ca:	d004      	beq.n	80288d6 <_vfiprintf_r+0x1a>
 80288cc:	6a03      	ldr	r3, [r0, #32]
 80288ce:	2b00      	cmp	r3, #0
 80288d0:	d101      	bne.n	80288d6 <_vfiprintf_r+0x1a>
 80288d2:	f7fd fbdd 	bl	8026090 <__sinit>
 80288d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80288d8:	07db      	lsls	r3, r3, #31
 80288da:	d405      	bmi.n	80288e8 <_vfiprintf_r+0x2c>
 80288dc:	89bb      	ldrh	r3, [r7, #12]
 80288de:	059b      	lsls	r3, r3, #22
 80288e0:	d402      	bmi.n	80288e8 <_vfiprintf_r+0x2c>
 80288e2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80288e4:	f7fd fe8f 	bl	8026606 <__retarget_lock_acquire_recursive>
 80288e8:	89bb      	ldrh	r3, [r7, #12]
 80288ea:	071b      	lsls	r3, r3, #28
 80288ec:	d502      	bpl.n	80288f4 <_vfiprintf_r+0x38>
 80288ee:	693b      	ldr	r3, [r7, #16]
 80288f0:	2b00      	cmp	r3, #0
 80288f2:	d113      	bne.n	802891c <_vfiprintf_r+0x60>
 80288f4:	0039      	movs	r1, r7
 80288f6:	9803      	ldr	r0, [sp, #12]
 80288f8:	f7fd fd58 	bl	80263ac <__swsetup_r>
 80288fc:	2800      	cmp	r0, #0
 80288fe:	d00d      	beq.n	802891c <_vfiprintf_r+0x60>
 8028900:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028902:	07db      	lsls	r3, r3, #31
 8028904:	d503      	bpl.n	802890e <_vfiprintf_r+0x52>
 8028906:	2001      	movs	r0, #1
 8028908:	4240      	negs	r0, r0
 802890a:	b021      	add	sp, #132	@ 0x84
 802890c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802890e:	89bb      	ldrh	r3, [r7, #12]
 8028910:	059b      	lsls	r3, r3, #22
 8028912:	d4f8      	bmi.n	8028906 <_vfiprintf_r+0x4a>
 8028914:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028916:	f7fd fe77 	bl	8026608 <__retarget_lock_release_recursive>
 802891a:	e7f4      	b.n	8028906 <_vfiprintf_r+0x4a>
 802891c:	2300      	movs	r3, #0
 802891e:	ac08      	add	r4, sp, #32
 8028920:	6163      	str	r3, [r4, #20]
 8028922:	3320      	adds	r3, #32
 8028924:	7663      	strb	r3, [r4, #25]
 8028926:	3310      	adds	r3, #16
 8028928:	76a3      	strb	r3, [r4, #26]
 802892a:	9607      	str	r6, [sp, #28]
 802892c:	002e      	movs	r6, r5
 802892e:	7833      	ldrb	r3, [r6, #0]
 8028930:	2b00      	cmp	r3, #0
 8028932:	d001      	beq.n	8028938 <_vfiprintf_r+0x7c>
 8028934:	2b25      	cmp	r3, #37	@ 0x25
 8028936:	d148      	bne.n	80289ca <_vfiprintf_r+0x10e>
 8028938:	1b73      	subs	r3, r6, r5
 802893a:	9305      	str	r3, [sp, #20]
 802893c:	42ae      	cmp	r6, r5
 802893e:	d00b      	beq.n	8028958 <_vfiprintf_r+0x9c>
 8028940:	002a      	movs	r2, r5
 8028942:	0039      	movs	r1, r7
 8028944:	9803      	ldr	r0, [sp, #12]
 8028946:	f7ff ffa6 	bl	8028896 <__sfputs_r>
 802894a:	3001      	adds	r0, #1
 802894c:	d100      	bne.n	8028950 <_vfiprintf_r+0x94>
 802894e:	e0ae      	b.n	8028aae <_vfiprintf_r+0x1f2>
 8028950:	6963      	ldr	r3, [r4, #20]
 8028952:	9a05      	ldr	r2, [sp, #20]
 8028954:	189b      	adds	r3, r3, r2
 8028956:	6163      	str	r3, [r4, #20]
 8028958:	7833      	ldrb	r3, [r6, #0]
 802895a:	2b00      	cmp	r3, #0
 802895c:	d100      	bne.n	8028960 <_vfiprintf_r+0xa4>
 802895e:	e0a6      	b.n	8028aae <_vfiprintf_r+0x1f2>
 8028960:	2201      	movs	r2, #1
 8028962:	2300      	movs	r3, #0
 8028964:	4252      	negs	r2, r2
 8028966:	6062      	str	r2, [r4, #4]
 8028968:	a904      	add	r1, sp, #16
 802896a:	3254      	adds	r2, #84	@ 0x54
 802896c:	1852      	adds	r2, r2, r1
 802896e:	1c75      	adds	r5, r6, #1
 8028970:	6023      	str	r3, [r4, #0]
 8028972:	60e3      	str	r3, [r4, #12]
 8028974:	60a3      	str	r3, [r4, #8]
 8028976:	7013      	strb	r3, [r2, #0]
 8028978:	65a3      	str	r3, [r4, #88]	@ 0x58
 802897a:	4b59      	ldr	r3, [pc, #356]	@ (8028ae0 <_vfiprintf_r+0x224>)
 802897c:	2205      	movs	r2, #5
 802897e:	0018      	movs	r0, r3
 8028980:	7829      	ldrb	r1, [r5, #0]
 8028982:	9305      	str	r3, [sp, #20]
 8028984:	f7fd fe41 	bl	802660a <memchr>
 8028988:	1c6e      	adds	r6, r5, #1
 802898a:	2800      	cmp	r0, #0
 802898c:	d11f      	bne.n	80289ce <_vfiprintf_r+0x112>
 802898e:	6822      	ldr	r2, [r4, #0]
 8028990:	06d3      	lsls	r3, r2, #27
 8028992:	d504      	bpl.n	802899e <_vfiprintf_r+0xe2>
 8028994:	2353      	movs	r3, #83	@ 0x53
 8028996:	a904      	add	r1, sp, #16
 8028998:	185b      	adds	r3, r3, r1
 802899a:	2120      	movs	r1, #32
 802899c:	7019      	strb	r1, [r3, #0]
 802899e:	0713      	lsls	r3, r2, #28
 80289a0:	d504      	bpl.n	80289ac <_vfiprintf_r+0xf0>
 80289a2:	2353      	movs	r3, #83	@ 0x53
 80289a4:	a904      	add	r1, sp, #16
 80289a6:	185b      	adds	r3, r3, r1
 80289a8:	212b      	movs	r1, #43	@ 0x2b
 80289aa:	7019      	strb	r1, [r3, #0]
 80289ac:	782b      	ldrb	r3, [r5, #0]
 80289ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80289b0:	d016      	beq.n	80289e0 <_vfiprintf_r+0x124>
 80289b2:	002e      	movs	r6, r5
 80289b4:	2100      	movs	r1, #0
 80289b6:	200a      	movs	r0, #10
 80289b8:	68e3      	ldr	r3, [r4, #12]
 80289ba:	7832      	ldrb	r2, [r6, #0]
 80289bc:	1c75      	adds	r5, r6, #1
 80289be:	3a30      	subs	r2, #48	@ 0x30
 80289c0:	2a09      	cmp	r2, #9
 80289c2:	d950      	bls.n	8028a66 <_vfiprintf_r+0x1aa>
 80289c4:	2900      	cmp	r1, #0
 80289c6:	d111      	bne.n	80289ec <_vfiprintf_r+0x130>
 80289c8:	e017      	b.n	80289fa <_vfiprintf_r+0x13e>
 80289ca:	3601      	adds	r6, #1
 80289cc:	e7af      	b.n	802892e <_vfiprintf_r+0x72>
 80289ce:	9b05      	ldr	r3, [sp, #20]
 80289d0:	6822      	ldr	r2, [r4, #0]
 80289d2:	1ac0      	subs	r0, r0, r3
 80289d4:	2301      	movs	r3, #1
 80289d6:	4083      	lsls	r3, r0
 80289d8:	4313      	orrs	r3, r2
 80289da:	0035      	movs	r5, r6
 80289dc:	6023      	str	r3, [r4, #0]
 80289de:	e7cc      	b.n	802897a <_vfiprintf_r+0xbe>
 80289e0:	9b07      	ldr	r3, [sp, #28]
 80289e2:	1d19      	adds	r1, r3, #4
 80289e4:	681b      	ldr	r3, [r3, #0]
 80289e6:	9107      	str	r1, [sp, #28]
 80289e8:	2b00      	cmp	r3, #0
 80289ea:	db01      	blt.n	80289f0 <_vfiprintf_r+0x134>
 80289ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80289ee:	e004      	b.n	80289fa <_vfiprintf_r+0x13e>
 80289f0:	425b      	negs	r3, r3
 80289f2:	60e3      	str	r3, [r4, #12]
 80289f4:	2302      	movs	r3, #2
 80289f6:	4313      	orrs	r3, r2
 80289f8:	6023      	str	r3, [r4, #0]
 80289fa:	7833      	ldrb	r3, [r6, #0]
 80289fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80289fe:	d10c      	bne.n	8028a1a <_vfiprintf_r+0x15e>
 8028a00:	7873      	ldrb	r3, [r6, #1]
 8028a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8028a04:	d134      	bne.n	8028a70 <_vfiprintf_r+0x1b4>
 8028a06:	9b07      	ldr	r3, [sp, #28]
 8028a08:	3602      	adds	r6, #2
 8028a0a:	1d1a      	adds	r2, r3, #4
 8028a0c:	681b      	ldr	r3, [r3, #0]
 8028a0e:	9207      	str	r2, [sp, #28]
 8028a10:	2b00      	cmp	r3, #0
 8028a12:	da01      	bge.n	8028a18 <_vfiprintf_r+0x15c>
 8028a14:	2301      	movs	r3, #1
 8028a16:	425b      	negs	r3, r3
 8028a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8028a1a:	4d32      	ldr	r5, [pc, #200]	@ (8028ae4 <_vfiprintf_r+0x228>)
 8028a1c:	2203      	movs	r2, #3
 8028a1e:	0028      	movs	r0, r5
 8028a20:	7831      	ldrb	r1, [r6, #0]
 8028a22:	f7fd fdf2 	bl	802660a <memchr>
 8028a26:	2800      	cmp	r0, #0
 8028a28:	d006      	beq.n	8028a38 <_vfiprintf_r+0x17c>
 8028a2a:	2340      	movs	r3, #64	@ 0x40
 8028a2c:	1b40      	subs	r0, r0, r5
 8028a2e:	4083      	lsls	r3, r0
 8028a30:	6822      	ldr	r2, [r4, #0]
 8028a32:	3601      	adds	r6, #1
 8028a34:	4313      	orrs	r3, r2
 8028a36:	6023      	str	r3, [r4, #0]
 8028a38:	7831      	ldrb	r1, [r6, #0]
 8028a3a:	2206      	movs	r2, #6
 8028a3c:	482a      	ldr	r0, [pc, #168]	@ (8028ae8 <_vfiprintf_r+0x22c>)
 8028a3e:	1c75      	adds	r5, r6, #1
 8028a40:	7621      	strb	r1, [r4, #24]
 8028a42:	f7fd fde2 	bl	802660a <memchr>
 8028a46:	2800      	cmp	r0, #0
 8028a48:	d040      	beq.n	8028acc <_vfiprintf_r+0x210>
 8028a4a:	4b28      	ldr	r3, [pc, #160]	@ (8028aec <_vfiprintf_r+0x230>)
 8028a4c:	2b00      	cmp	r3, #0
 8028a4e:	d122      	bne.n	8028a96 <_vfiprintf_r+0x1da>
 8028a50:	2207      	movs	r2, #7
 8028a52:	9b07      	ldr	r3, [sp, #28]
 8028a54:	3307      	adds	r3, #7
 8028a56:	4393      	bics	r3, r2
 8028a58:	3308      	adds	r3, #8
 8028a5a:	9307      	str	r3, [sp, #28]
 8028a5c:	6963      	ldr	r3, [r4, #20]
 8028a5e:	9a04      	ldr	r2, [sp, #16]
 8028a60:	189b      	adds	r3, r3, r2
 8028a62:	6163      	str	r3, [r4, #20]
 8028a64:	e762      	b.n	802892c <_vfiprintf_r+0x70>
 8028a66:	4343      	muls	r3, r0
 8028a68:	002e      	movs	r6, r5
 8028a6a:	2101      	movs	r1, #1
 8028a6c:	189b      	adds	r3, r3, r2
 8028a6e:	e7a4      	b.n	80289ba <_vfiprintf_r+0xfe>
 8028a70:	2300      	movs	r3, #0
 8028a72:	200a      	movs	r0, #10
 8028a74:	0019      	movs	r1, r3
 8028a76:	3601      	adds	r6, #1
 8028a78:	6063      	str	r3, [r4, #4]
 8028a7a:	7832      	ldrb	r2, [r6, #0]
 8028a7c:	1c75      	adds	r5, r6, #1
 8028a7e:	3a30      	subs	r2, #48	@ 0x30
 8028a80:	2a09      	cmp	r2, #9
 8028a82:	d903      	bls.n	8028a8c <_vfiprintf_r+0x1d0>
 8028a84:	2b00      	cmp	r3, #0
 8028a86:	d0c8      	beq.n	8028a1a <_vfiprintf_r+0x15e>
 8028a88:	9109      	str	r1, [sp, #36]	@ 0x24
 8028a8a:	e7c6      	b.n	8028a1a <_vfiprintf_r+0x15e>
 8028a8c:	4341      	muls	r1, r0
 8028a8e:	002e      	movs	r6, r5
 8028a90:	2301      	movs	r3, #1
 8028a92:	1889      	adds	r1, r1, r2
 8028a94:	e7f1      	b.n	8028a7a <_vfiprintf_r+0x1be>
 8028a96:	aa07      	add	r2, sp, #28
 8028a98:	9200      	str	r2, [sp, #0]
 8028a9a:	0021      	movs	r1, r4
 8028a9c:	003a      	movs	r2, r7
 8028a9e:	4b14      	ldr	r3, [pc, #80]	@ (8028af0 <_vfiprintf_r+0x234>)
 8028aa0:	9803      	ldr	r0, [sp, #12]
 8028aa2:	f7fc feab 	bl	80257fc <_printf_float>
 8028aa6:	9004      	str	r0, [sp, #16]
 8028aa8:	9b04      	ldr	r3, [sp, #16]
 8028aaa:	3301      	adds	r3, #1
 8028aac:	d1d6      	bne.n	8028a5c <_vfiprintf_r+0x1a0>
 8028aae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028ab0:	07db      	lsls	r3, r3, #31
 8028ab2:	d405      	bmi.n	8028ac0 <_vfiprintf_r+0x204>
 8028ab4:	89bb      	ldrh	r3, [r7, #12]
 8028ab6:	059b      	lsls	r3, r3, #22
 8028ab8:	d402      	bmi.n	8028ac0 <_vfiprintf_r+0x204>
 8028aba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028abc:	f7fd fda4 	bl	8026608 <__retarget_lock_release_recursive>
 8028ac0:	89bb      	ldrh	r3, [r7, #12]
 8028ac2:	065b      	lsls	r3, r3, #25
 8028ac4:	d500      	bpl.n	8028ac8 <_vfiprintf_r+0x20c>
 8028ac6:	e71e      	b.n	8028906 <_vfiprintf_r+0x4a>
 8028ac8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028aca:	e71e      	b.n	802890a <_vfiprintf_r+0x4e>
 8028acc:	aa07      	add	r2, sp, #28
 8028ace:	9200      	str	r2, [sp, #0]
 8028ad0:	0021      	movs	r1, r4
 8028ad2:	003a      	movs	r2, r7
 8028ad4:	4b06      	ldr	r3, [pc, #24]	@ (8028af0 <_vfiprintf_r+0x234>)
 8028ad6:	9803      	ldr	r0, [sp, #12]
 8028ad8:	f7fd f93e 	bl	8025d58 <_printf_i>
 8028adc:	e7e3      	b.n	8028aa6 <_vfiprintf_r+0x1ea>
 8028ade:	46c0      	nop			@ (mov r8, r8)
 8028ae0:	0802eae8 	.word	0x0802eae8
 8028ae4:	0802eaee 	.word	0x0802eaee
 8028ae8:	0802eaf2 	.word	0x0802eaf2
 8028aec:	080257fd 	.word	0x080257fd
 8028af0:	08028897 	.word	0x08028897

08028af4 <__sflush_r>:
 8028af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028af6:	220c      	movs	r2, #12
 8028af8:	5e8b      	ldrsh	r3, [r1, r2]
 8028afa:	0005      	movs	r5, r0
 8028afc:	000c      	movs	r4, r1
 8028afe:	071a      	lsls	r2, r3, #28
 8028b00:	d456      	bmi.n	8028bb0 <__sflush_r+0xbc>
 8028b02:	684a      	ldr	r2, [r1, #4]
 8028b04:	2a00      	cmp	r2, #0
 8028b06:	dc02      	bgt.n	8028b0e <__sflush_r+0x1a>
 8028b08:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8028b0a:	2a00      	cmp	r2, #0
 8028b0c:	dd4e      	ble.n	8028bac <__sflush_r+0xb8>
 8028b0e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028b10:	2f00      	cmp	r7, #0
 8028b12:	d04b      	beq.n	8028bac <__sflush_r+0xb8>
 8028b14:	2200      	movs	r2, #0
 8028b16:	2080      	movs	r0, #128	@ 0x80
 8028b18:	682e      	ldr	r6, [r5, #0]
 8028b1a:	602a      	str	r2, [r5, #0]
 8028b1c:	001a      	movs	r2, r3
 8028b1e:	0140      	lsls	r0, r0, #5
 8028b20:	6a21      	ldr	r1, [r4, #32]
 8028b22:	4002      	ands	r2, r0
 8028b24:	4203      	tst	r3, r0
 8028b26:	d033      	beq.n	8028b90 <__sflush_r+0x9c>
 8028b28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028b2a:	89a3      	ldrh	r3, [r4, #12]
 8028b2c:	075b      	lsls	r3, r3, #29
 8028b2e:	d506      	bpl.n	8028b3e <__sflush_r+0x4a>
 8028b30:	6863      	ldr	r3, [r4, #4]
 8028b32:	1ad2      	subs	r2, r2, r3
 8028b34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028b36:	2b00      	cmp	r3, #0
 8028b38:	d001      	beq.n	8028b3e <__sflush_r+0x4a>
 8028b3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028b3c:	1ad2      	subs	r2, r2, r3
 8028b3e:	2300      	movs	r3, #0
 8028b40:	0028      	movs	r0, r5
 8028b42:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028b44:	6a21      	ldr	r1, [r4, #32]
 8028b46:	47b8      	blx	r7
 8028b48:	89a2      	ldrh	r2, [r4, #12]
 8028b4a:	1c43      	adds	r3, r0, #1
 8028b4c:	d106      	bne.n	8028b5c <__sflush_r+0x68>
 8028b4e:	6829      	ldr	r1, [r5, #0]
 8028b50:	291d      	cmp	r1, #29
 8028b52:	d846      	bhi.n	8028be2 <__sflush_r+0xee>
 8028b54:	4b29      	ldr	r3, [pc, #164]	@ (8028bfc <__sflush_r+0x108>)
 8028b56:	40cb      	lsrs	r3, r1
 8028b58:	07db      	lsls	r3, r3, #31
 8028b5a:	d542      	bpl.n	8028be2 <__sflush_r+0xee>
 8028b5c:	2300      	movs	r3, #0
 8028b5e:	6063      	str	r3, [r4, #4]
 8028b60:	6923      	ldr	r3, [r4, #16]
 8028b62:	6023      	str	r3, [r4, #0]
 8028b64:	04d2      	lsls	r2, r2, #19
 8028b66:	d505      	bpl.n	8028b74 <__sflush_r+0x80>
 8028b68:	1c43      	adds	r3, r0, #1
 8028b6a:	d102      	bne.n	8028b72 <__sflush_r+0x7e>
 8028b6c:	682b      	ldr	r3, [r5, #0]
 8028b6e:	2b00      	cmp	r3, #0
 8028b70:	d100      	bne.n	8028b74 <__sflush_r+0x80>
 8028b72:	6560      	str	r0, [r4, #84]	@ 0x54
 8028b74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028b76:	602e      	str	r6, [r5, #0]
 8028b78:	2900      	cmp	r1, #0
 8028b7a:	d017      	beq.n	8028bac <__sflush_r+0xb8>
 8028b7c:	0023      	movs	r3, r4
 8028b7e:	3344      	adds	r3, #68	@ 0x44
 8028b80:	4299      	cmp	r1, r3
 8028b82:	d002      	beq.n	8028b8a <__sflush_r+0x96>
 8028b84:	0028      	movs	r0, r5
 8028b86:	f7fe fbd1 	bl	802732c <_free_r>
 8028b8a:	2300      	movs	r3, #0
 8028b8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8028b8e:	e00d      	b.n	8028bac <__sflush_r+0xb8>
 8028b90:	2301      	movs	r3, #1
 8028b92:	0028      	movs	r0, r5
 8028b94:	47b8      	blx	r7
 8028b96:	0002      	movs	r2, r0
 8028b98:	1c43      	adds	r3, r0, #1
 8028b9a:	d1c6      	bne.n	8028b2a <__sflush_r+0x36>
 8028b9c:	682b      	ldr	r3, [r5, #0]
 8028b9e:	2b00      	cmp	r3, #0
 8028ba0:	d0c3      	beq.n	8028b2a <__sflush_r+0x36>
 8028ba2:	2b1d      	cmp	r3, #29
 8028ba4:	d001      	beq.n	8028baa <__sflush_r+0xb6>
 8028ba6:	2b16      	cmp	r3, #22
 8028ba8:	d11a      	bne.n	8028be0 <__sflush_r+0xec>
 8028baa:	602e      	str	r6, [r5, #0]
 8028bac:	2000      	movs	r0, #0
 8028bae:	e01e      	b.n	8028bee <__sflush_r+0xfa>
 8028bb0:	690e      	ldr	r6, [r1, #16]
 8028bb2:	2e00      	cmp	r6, #0
 8028bb4:	d0fa      	beq.n	8028bac <__sflush_r+0xb8>
 8028bb6:	680f      	ldr	r7, [r1, #0]
 8028bb8:	600e      	str	r6, [r1, #0]
 8028bba:	1bba      	subs	r2, r7, r6
 8028bbc:	9201      	str	r2, [sp, #4]
 8028bbe:	2200      	movs	r2, #0
 8028bc0:	079b      	lsls	r3, r3, #30
 8028bc2:	d100      	bne.n	8028bc6 <__sflush_r+0xd2>
 8028bc4:	694a      	ldr	r2, [r1, #20]
 8028bc6:	60a2      	str	r2, [r4, #8]
 8028bc8:	9b01      	ldr	r3, [sp, #4]
 8028bca:	2b00      	cmp	r3, #0
 8028bcc:	ddee      	ble.n	8028bac <__sflush_r+0xb8>
 8028bce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028bd0:	0032      	movs	r2, r6
 8028bd2:	001f      	movs	r7, r3
 8028bd4:	0028      	movs	r0, r5
 8028bd6:	9b01      	ldr	r3, [sp, #4]
 8028bd8:	6a21      	ldr	r1, [r4, #32]
 8028bda:	47b8      	blx	r7
 8028bdc:	2800      	cmp	r0, #0
 8028bde:	dc07      	bgt.n	8028bf0 <__sflush_r+0xfc>
 8028be0:	89a2      	ldrh	r2, [r4, #12]
 8028be2:	2340      	movs	r3, #64	@ 0x40
 8028be4:	2001      	movs	r0, #1
 8028be6:	4313      	orrs	r3, r2
 8028be8:	b21b      	sxth	r3, r3
 8028bea:	81a3      	strh	r3, [r4, #12]
 8028bec:	4240      	negs	r0, r0
 8028bee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028bf0:	9b01      	ldr	r3, [sp, #4]
 8028bf2:	1836      	adds	r6, r6, r0
 8028bf4:	1a1b      	subs	r3, r3, r0
 8028bf6:	9301      	str	r3, [sp, #4]
 8028bf8:	e7e6      	b.n	8028bc8 <__sflush_r+0xd4>
 8028bfa:	46c0      	nop			@ (mov r8, r8)
 8028bfc:	20400001 	.word	0x20400001

08028c00 <_fflush_r>:
 8028c00:	690b      	ldr	r3, [r1, #16]
 8028c02:	b570      	push	{r4, r5, r6, lr}
 8028c04:	0005      	movs	r5, r0
 8028c06:	000c      	movs	r4, r1
 8028c08:	2b00      	cmp	r3, #0
 8028c0a:	d102      	bne.n	8028c12 <_fflush_r+0x12>
 8028c0c:	2500      	movs	r5, #0
 8028c0e:	0028      	movs	r0, r5
 8028c10:	bd70      	pop	{r4, r5, r6, pc}
 8028c12:	2800      	cmp	r0, #0
 8028c14:	d004      	beq.n	8028c20 <_fflush_r+0x20>
 8028c16:	6a03      	ldr	r3, [r0, #32]
 8028c18:	2b00      	cmp	r3, #0
 8028c1a:	d101      	bne.n	8028c20 <_fflush_r+0x20>
 8028c1c:	f7fd fa38 	bl	8026090 <__sinit>
 8028c20:	220c      	movs	r2, #12
 8028c22:	5ea3      	ldrsh	r3, [r4, r2]
 8028c24:	2b00      	cmp	r3, #0
 8028c26:	d0f1      	beq.n	8028c0c <_fflush_r+0xc>
 8028c28:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028c2a:	07d2      	lsls	r2, r2, #31
 8028c2c:	d404      	bmi.n	8028c38 <_fflush_r+0x38>
 8028c2e:	059b      	lsls	r3, r3, #22
 8028c30:	d402      	bmi.n	8028c38 <_fflush_r+0x38>
 8028c32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028c34:	f7fd fce7 	bl	8026606 <__retarget_lock_acquire_recursive>
 8028c38:	0028      	movs	r0, r5
 8028c3a:	0021      	movs	r1, r4
 8028c3c:	f7ff ff5a 	bl	8028af4 <__sflush_r>
 8028c40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028c42:	0005      	movs	r5, r0
 8028c44:	07db      	lsls	r3, r3, #31
 8028c46:	d4e2      	bmi.n	8028c0e <_fflush_r+0xe>
 8028c48:	89a3      	ldrh	r3, [r4, #12]
 8028c4a:	059b      	lsls	r3, r3, #22
 8028c4c:	d4df      	bmi.n	8028c0e <_fflush_r+0xe>
 8028c4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028c50:	f7fd fcda 	bl	8026608 <__retarget_lock_release_recursive>
 8028c54:	e7db      	b.n	8028c0e <_fflush_r+0xe>
	...

08028c58 <__swhatbuf_r>:
 8028c58:	b570      	push	{r4, r5, r6, lr}
 8028c5a:	000e      	movs	r6, r1
 8028c5c:	001d      	movs	r5, r3
 8028c5e:	230e      	movs	r3, #14
 8028c60:	5ec9      	ldrsh	r1, [r1, r3]
 8028c62:	0014      	movs	r4, r2
 8028c64:	b096      	sub	sp, #88	@ 0x58
 8028c66:	2900      	cmp	r1, #0
 8028c68:	da0c      	bge.n	8028c84 <__swhatbuf_r+0x2c>
 8028c6a:	89b2      	ldrh	r2, [r6, #12]
 8028c6c:	2380      	movs	r3, #128	@ 0x80
 8028c6e:	0011      	movs	r1, r2
 8028c70:	4019      	ands	r1, r3
 8028c72:	421a      	tst	r2, r3
 8028c74:	d114      	bne.n	8028ca0 <__swhatbuf_r+0x48>
 8028c76:	2380      	movs	r3, #128	@ 0x80
 8028c78:	00db      	lsls	r3, r3, #3
 8028c7a:	2000      	movs	r0, #0
 8028c7c:	6029      	str	r1, [r5, #0]
 8028c7e:	6023      	str	r3, [r4, #0]
 8028c80:	b016      	add	sp, #88	@ 0x58
 8028c82:	bd70      	pop	{r4, r5, r6, pc}
 8028c84:	466a      	mov	r2, sp
 8028c86:	f000 f865 	bl	8028d54 <_fstat_r>
 8028c8a:	2800      	cmp	r0, #0
 8028c8c:	dbed      	blt.n	8028c6a <__swhatbuf_r+0x12>
 8028c8e:	23f0      	movs	r3, #240	@ 0xf0
 8028c90:	9901      	ldr	r1, [sp, #4]
 8028c92:	021b      	lsls	r3, r3, #8
 8028c94:	4019      	ands	r1, r3
 8028c96:	4b04      	ldr	r3, [pc, #16]	@ (8028ca8 <__swhatbuf_r+0x50>)
 8028c98:	18c9      	adds	r1, r1, r3
 8028c9a:	424b      	negs	r3, r1
 8028c9c:	4159      	adcs	r1, r3
 8028c9e:	e7ea      	b.n	8028c76 <__swhatbuf_r+0x1e>
 8028ca0:	2100      	movs	r1, #0
 8028ca2:	2340      	movs	r3, #64	@ 0x40
 8028ca4:	e7e9      	b.n	8028c7a <__swhatbuf_r+0x22>
 8028ca6:	46c0      	nop			@ (mov r8, r8)
 8028ca8:	ffffe000 	.word	0xffffe000

08028cac <__smakebuf_r>:
 8028cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028cae:	2602      	movs	r6, #2
 8028cb0:	898b      	ldrh	r3, [r1, #12]
 8028cb2:	0005      	movs	r5, r0
 8028cb4:	000c      	movs	r4, r1
 8028cb6:	b085      	sub	sp, #20
 8028cb8:	4233      	tst	r3, r6
 8028cba:	d007      	beq.n	8028ccc <__smakebuf_r+0x20>
 8028cbc:	0023      	movs	r3, r4
 8028cbe:	3347      	adds	r3, #71	@ 0x47
 8028cc0:	6023      	str	r3, [r4, #0]
 8028cc2:	6123      	str	r3, [r4, #16]
 8028cc4:	2301      	movs	r3, #1
 8028cc6:	6163      	str	r3, [r4, #20]
 8028cc8:	b005      	add	sp, #20
 8028cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028ccc:	ab03      	add	r3, sp, #12
 8028cce:	aa02      	add	r2, sp, #8
 8028cd0:	f7ff ffc2 	bl	8028c58 <__swhatbuf_r>
 8028cd4:	9f02      	ldr	r7, [sp, #8]
 8028cd6:	9001      	str	r0, [sp, #4]
 8028cd8:	0039      	movs	r1, r7
 8028cda:	0028      	movs	r0, r5
 8028cdc:	f7fe fef6 	bl	8027acc <_malloc_r>
 8028ce0:	2800      	cmp	r0, #0
 8028ce2:	d108      	bne.n	8028cf6 <__smakebuf_r+0x4a>
 8028ce4:	220c      	movs	r2, #12
 8028ce6:	5ea3      	ldrsh	r3, [r4, r2]
 8028ce8:	059a      	lsls	r2, r3, #22
 8028cea:	d4ed      	bmi.n	8028cc8 <__smakebuf_r+0x1c>
 8028cec:	2203      	movs	r2, #3
 8028cee:	4393      	bics	r3, r2
 8028cf0:	431e      	orrs	r6, r3
 8028cf2:	81a6      	strh	r6, [r4, #12]
 8028cf4:	e7e2      	b.n	8028cbc <__smakebuf_r+0x10>
 8028cf6:	2380      	movs	r3, #128	@ 0x80
 8028cf8:	89a2      	ldrh	r2, [r4, #12]
 8028cfa:	6020      	str	r0, [r4, #0]
 8028cfc:	4313      	orrs	r3, r2
 8028cfe:	81a3      	strh	r3, [r4, #12]
 8028d00:	9b03      	ldr	r3, [sp, #12]
 8028d02:	6120      	str	r0, [r4, #16]
 8028d04:	6167      	str	r7, [r4, #20]
 8028d06:	2b00      	cmp	r3, #0
 8028d08:	d00c      	beq.n	8028d24 <__smakebuf_r+0x78>
 8028d0a:	0028      	movs	r0, r5
 8028d0c:	230e      	movs	r3, #14
 8028d0e:	5ee1      	ldrsh	r1, [r4, r3]
 8028d10:	f000 f832 	bl	8028d78 <_isatty_r>
 8028d14:	2800      	cmp	r0, #0
 8028d16:	d005      	beq.n	8028d24 <__smakebuf_r+0x78>
 8028d18:	2303      	movs	r3, #3
 8028d1a:	89a2      	ldrh	r2, [r4, #12]
 8028d1c:	439a      	bics	r2, r3
 8028d1e:	3b02      	subs	r3, #2
 8028d20:	4313      	orrs	r3, r2
 8028d22:	81a3      	strh	r3, [r4, #12]
 8028d24:	89a3      	ldrh	r3, [r4, #12]
 8028d26:	9a01      	ldr	r2, [sp, #4]
 8028d28:	4313      	orrs	r3, r2
 8028d2a:	81a3      	strh	r3, [r4, #12]
 8028d2c:	e7cc      	b.n	8028cc8 <__smakebuf_r+0x1c>

08028d2e <memmove>:
 8028d2e:	b510      	push	{r4, lr}
 8028d30:	4288      	cmp	r0, r1
 8028d32:	d902      	bls.n	8028d3a <memmove+0xc>
 8028d34:	188b      	adds	r3, r1, r2
 8028d36:	4298      	cmp	r0, r3
 8028d38:	d308      	bcc.n	8028d4c <memmove+0x1e>
 8028d3a:	2300      	movs	r3, #0
 8028d3c:	429a      	cmp	r2, r3
 8028d3e:	d007      	beq.n	8028d50 <memmove+0x22>
 8028d40:	5ccc      	ldrb	r4, [r1, r3]
 8028d42:	54c4      	strb	r4, [r0, r3]
 8028d44:	3301      	adds	r3, #1
 8028d46:	e7f9      	b.n	8028d3c <memmove+0xe>
 8028d48:	5c8b      	ldrb	r3, [r1, r2]
 8028d4a:	5483      	strb	r3, [r0, r2]
 8028d4c:	3a01      	subs	r2, #1
 8028d4e:	d2fb      	bcs.n	8028d48 <memmove+0x1a>
 8028d50:	bd10      	pop	{r4, pc}
	...

08028d54 <_fstat_r>:
 8028d54:	2300      	movs	r3, #0
 8028d56:	b570      	push	{r4, r5, r6, lr}
 8028d58:	4d06      	ldr	r5, [pc, #24]	@ (8028d74 <_fstat_r+0x20>)
 8028d5a:	0004      	movs	r4, r0
 8028d5c:	0008      	movs	r0, r1
 8028d5e:	0011      	movs	r1, r2
 8028d60:	602b      	str	r3, [r5, #0]
 8028d62:	f7ea fbbb 	bl	80134dc <_fstat>
 8028d66:	1c43      	adds	r3, r0, #1
 8028d68:	d103      	bne.n	8028d72 <_fstat_r+0x1e>
 8028d6a:	682b      	ldr	r3, [r5, #0]
 8028d6c:	2b00      	cmp	r3, #0
 8028d6e:	d000      	beq.n	8028d72 <_fstat_r+0x1e>
 8028d70:	6023      	str	r3, [r4, #0]
 8028d72:	bd70      	pop	{r4, r5, r6, pc}
 8028d74:	20003908 	.word	0x20003908

08028d78 <_isatty_r>:
 8028d78:	2300      	movs	r3, #0
 8028d7a:	b570      	push	{r4, r5, r6, lr}
 8028d7c:	4d06      	ldr	r5, [pc, #24]	@ (8028d98 <_isatty_r+0x20>)
 8028d7e:	0004      	movs	r4, r0
 8028d80:	0008      	movs	r0, r1
 8028d82:	602b      	str	r3, [r5, #0]
 8028d84:	f7ea fbb8 	bl	80134f8 <_isatty>
 8028d88:	1c43      	adds	r3, r0, #1
 8028d8a:	d103      	bne.n	8028d94 <_isatty_r+0x1c>
 8028d8c:	682b      	ldr	r3, [r5, #0]
 8028d8e:	2b00      	cmp	r3, #0
 8028d90:	d000      	beq.n	8028d94 <_isatty_r+0x1c>
 8028d92:	6023      	str	r3, [r4, #0]
 8028d94:	bd70      	pop	{r4, r5, r6, pc}
 8028d96:	46c0      	nop			@ (mov r8, r8)
 8028d98:	20003908 	.word	0x20003908

08028d9c <_sbrk_r>:
 8028d9c:	2300      	movs	r3, #0
 8028d9e:	b570      	push	{r4, r5, r6, lr}
 8028da0:	4d06      	ldr	r5, [pc, #24]	@ (8028dbc <_sbrk_r+0x20>)
 8028da2:	0004      	movs	r4, r0
 8028da4:	0008      	movs	r0, r1
 8028da6:	602b      	str	r3, [r5, #0]
 8028da8:	f7ea fbba 	bl	8013520 <_sbrk>
 8028dac:	1c43      	adds	r3, r0, #1
 8028dae:	d103      	bne.n	8028db8 <_sbrk_r+0x1c>
 8028db0:	682b      	ldr	r3, [r5, #0]
 8028db2:	2b00      	cmp	r3, #0
 8028db4:	d000      	beq.n	8028db8 <_sbrk_r+0x1c>
 8028db6:	6023      	str	r3, [r4, #0]
 8028db8:	bd70      	pop	{r4, r5, r6, pc}
 8028dba:	46c0      	nop			@ (mov r8, r8)
 8028dbc:	20003908 	.word	0x20003908

08028dc0 <__assert_func>:
 8028dc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8028dc2:	0014      	movs	r4, r2
 8028dc4:	001a      	movs	r2, r3
 8028dc6:	4b09      	ldr	r3, [pc, #36]	@ (8028dec <__assert_func+0x2c>)
 8028dc8:	0005      	movs	r5, r0
 8028dca:	681b      	ldr	r3, [r3, #0]
 8028dcc:	000e      	movs	r6, r1
 8028dce:	68d8      	ldr	r0, [r3, #12]
 8028dd0:	4b07      	ldr	r3, [pc, #28]	@ (8028df0 <__assert_func+0x30>)
 8028dd2:	2c00      	cmp	r4, #0
 8028dd4:	d101      	bne.n	8028dda <__assert_func+0x1a>
 8028dd6:	4b07      	ldr	r3, [pc, #28]	@ (8028df4 <__assert_func+0x34>)
 8028dd8:	001c      	movs	r4, r3
 8028dda:	4907      	ldr	r1, [pc, #28]	@ (8028df8 <__assert_func+0x38>)
 8028ddc:	9301      	str	r3, [sp, #4]
 8028dde:	9402      	str	r4, [sp, #8]
 8028de0:	002b      	movs	r3, r5
 8028de2:	9600      	str	r6, [sp, #0]
 8028de4:	f000 f868 	bl	8028eb8 <fiprintf>
 8028de8:	f000 f876 	bl	8028ed8 <abort>
 8028dec:	200003ec 	.word	0x200003ec
 8028df0:	0802eaf9 	.word	0x0802eaf9
 8028df4:	0802eb34 	.word	0x0802eb34
 8028df8:	0802eb06 	.word	0x0802eb06

08028dfc <_calloc_r>:
 8028dfc:	b570      	push	{r4, r5, r6, lr}
 8028dfe:	0c0b      	lsrs	r3, r1, #16
 8028e00:	0c15      	lsrs	r5, r2, #16
 8028e02:	2b00      	cmp	r3, #0
 8028e04:	d11e      	bne.n	8028e44 <_calloc_r+0x48>
 8028e06:	2d00      	cmp	r5, #0
 8028e08:	d10c      	bne.n	8028e24 <_calloc_r+0x28>
 8028e0a:	b289      	uxth	r1, r1
 8028e0c:	b294      	uxth	r4, r2
 8028e0e:	434c      	muls	r4, r1
 8028e10:	0021      	movs	r1, r4
 8028e12:	f7fe fe5b 	bl	8027acc <_malloc_r>
 8028e16:	1e05      	subs	r5, r0, #0
 8028e18:	d01b      	beq.n	8028e52 <_calloc_r+0x56>
 8028e1a:	0022      	movs	r2, r4
 8028e1c:	2100      	movs	r1, #0
 8028e1e:	f7fd fb23 	bl	8026468 <memset>
 8028e22:	e016      	b.n	8028e52 <_calloc_r+0x56>
 8028e24:	1c2b      	adds	r3, r5, #0
 8028e26:	1c0c      	adds	r4, r1, #0
 8028e28:	b289      	uxth	r1, r1
 8028e2a:	b292      	uxth	r2, r2
 8028e2c:	434a      	muls	r2, r1
 8028e2e:	b29b      	uxth	r3, r3
 8028e30:	b2a1      	uxth	r1, r4
 8028e32:	4359      	muls	r1, r3
 8028e34:	0c14      	lsrs	r4, r2, #16
 8028e36:	190c      	adds	r4, r1, r4
 8028e38:	0c23      	lsrs	r3, r4, #16
 8028e3a:	d107      	bne.n	8028e4c <_calloc_r+0x50>
 8028e3c:	0424      	lsls	r4, r4, #16
 8028e3e:	b292      	uxth	r2, r2
 8028e40:	4314      	orrs	r4, r2
 8028e42:	e7e5      	b.n	8028e10 <_calloc_r+0x14>
 8028e44:	2d00      	cmp	r5, #0
 8028e46:	d101      	bne.n	8028e4c <_calloc_r+0x50>
 8028e48:	1c14      	adds	r4, r2, #0
 8028e4a:	e7ed      	b.n	8028e28 <_calloc_r+0x2c>
 8028e4c:	230c      	movs	r3, #12
 8028e4e:	2500      	movs	r5, #0
 8028e50:	6003      	str	r3, [r0, #0]
 8028e52:	0028      	movs	r0, r5
 8028e54:	bd70      	pop	{r4, r5, r6, pc}

08028e56 <_realloc_r>:
 8028e56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028e58:	0006      	movs	r6, r0
 8028e5a:	000c      	movs	r4, r1
 8028e5c:	0015      	movs	r5, r2
 8028e5e:	2900      	cmp	r1, #0
 8028e60:	d105      	bne.n	8028e6e <_realloc_r+0x18>
 8028e62:	0011      	movs	r1, r2
 8028e64:	f7fe fe32 	bl	8027acc <_malloc_r>
 8028e68:	0004      	movs	r4, r0
 8028e6a:	0020      	movs	r0, r4
 8028e6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028e6e:	2a00      	cmp	r2, #0
 8028e70:	d103      	bne.n	8028e7a <_realloc_r+0x24>
 8028e72:	f7fe fa5b 	bl	802732c <_free_r>
 8028e76:	002c      	movs	r4, r5
 8028e78:	e7f7      	b.n	8028e6a <_realloc_r+0x14>
 8028e7a:	f000 f834 	bl	8028ee6 <_malloc_usable_size_r>
 8028e7e:	0007      	movs	r7, r0
 8028e80:	4285      	cmp	r5, r0
 8028e82:	d802      	bhi.n	8028e8a <_realloc_r+0x34>
 8028e84:	0843      	lsrs	r3, r0, #1
 8028e86:	42ab      	cmp	r3, r5
 8028e88:	d3ef      	bcc.n	8028e6a <_realloc_r+0x14>
 8028e8a:	0029      	movs	r1, r5
 8028e8c:	0030      	movs	r0, r6
 8028e8e:	f7fe fe1d 	bl	8027acc <_malloc_r>
 8028e92:	9001      	str	r0, [sp, #4]
 8028e94:	2800      	cmp	r0, #0
 8028e96:	d101      	bne.n	8028e9c <_realloc_r+0x46>
 8028e98:	9c01      	ldr	r4, [sp, #4]
 8028e9a:	e7e6      	b.n	8028e6a <_realloc_r+0x14>
 8028e9c:	002a      	movs	r2, r5
 8028e9e:	42bd      	cmp	r5, r7
 8028ea0:	d900      	bls.n	8028ea4 <_realloc_r+0x4e>
 8028ea2:	003a      	movs	r2, r7
 8028ea4:	0021      	movs	r1, r4
 8028ea6:	9801      	ldr	r0, [sp, #4]
 8028ea8:	f7fd fbba 	bl	8026620 <memcpy>
 8028eac:	0021      	movs	r1, r4
 8028eae:	0030      	movs	r0, r6
 8028eb0:	f7fe fa3c 	bl	802732c <_free_r>
 8028eb4:	e7f0      	b.n	8028e98 <_realloc_r+0x42>
	...

08028eb8 <fiprintf>:
 8028eb8:	b40e      	push	{r1, r2, r3}
 8028eba:	b517      	push	{r0, r1, r2, r4, lr}
 8028ebc:	4c05      	ldr	r4, [pc, #20]	@ (8028ed4 <fiprintf+0x1c>)
 8028ebe:	ab05      	add	r3, sp, #20
 8028ec0:	cb04      	ldmia	r3!, {r2}
 8028ec2:	0001      	movs	r1, r0
 8028ec4:	6820      	ldr	r0, [r4, #0]
 8028ec6:	9301      	str	r3, [sp, #4]
 8028ec8:	f7ff fcf8 	bl	80288bc <_vfiprintf_r>
 8028ecc:	bc1e      	pop	{r1, r2, r3, r4}
 8028ece:	bc08      	pop	{r3}
 8028ed0:	b003      	add	sp, #12
 8028ed2:	4718      	bx	r3
 8028ed4:	200003ec 	.word	0x200003ec

08028ed8 <abort>:
 8028ed8:	2006      	movs	r0, #6
 8028eda:	b510      	push	{r4, lr}
 8028edc:	f000 f834 	bl	8028f48 <raise>
 8028ee0:	2001      	movs	r0, #1
 8028ee2:	f7ea fac7 	bl	8013474 <_exit>

08028ee6 <_malloc_usable_size_r>:
 8028ee6:	1f0b      	subs	r3, r1, #4
 8028ee8:	681b      	ldr	r3, [r3, #0]
 8028eea:	1f18      	subs	r0, r3, #4
 8028eec:	2b00      	cmp	r3, #0
 8028eee:	da01      	bge.n	8028ef4 <_malloc_usable_size_r+0xe>
 8028ef0:	580b      	ldr	r3, [r1, r0]
 8028ef2:	18c0      	adds	r0, r0, r3
 8028ef4:	4770      	bx	lr

08028ef6 <_raise_r>:
 8028ef6:	b570      	push	{r4, r5, r6, lr}
 8028ef8:	0004      	movs	r4, r0
 8028efa:	000d      	movs	r5, r1
 8028efc:	291f      	cmp	r1, #31
 8028efe:	d904      	bls.n	8028f0a <_raise_r+0x14>
 8028f00:	2316      	movs	r3, #22
 8028f02:	6003      	str	r3, [r0, #0]
 8028f04:	2001      	movs	r0, #1
 8028f06:	4240      	negs	r0, r0
 8028f08:	bd70      	pop	{r4, r5, r6, pc}
 8028f0a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8028f0c:	2b00      	cmp	r3, #0
 8028f0e:	d004      	beq.n	8028f1a <_raise_r+0x24>
 8028f10:	008a      	lsls	r2, r1, #2
 8028f12:	189b      	adds	r3, r3, r2
 8028f14:	681a      	ldr	r2, [r3, #0]
 8028f16:	2a00      	cmp	r2, #0
 8028f18:	d108      	bne.n	8028f2c <_raise_r+0x36>
 8028f1a:	0020      	movs	r0, r4
 8028f1c:	f000 f830 	bl	8028f80 <_getpid_r>
 8028f20:	002a      	movs	r2, r5
 8028f22:	0001      	movs	r1, r0
 8028f24:	0020      	movs	r0, r4
 8028f26:	f000 f819 	bl	8028f5c <_kill_r>
 8028f2a:	e7ed      	b.n	8028f08 <_raise_r+0x12>
 8028f2c:	2a01      	cmp	r2, #1
 8028f2e:	d009      	beq.n	8028f44 <_raise_r+0x4e>
 8028f30:	1c51      	adds	r1, r2, #1
 8028f32:	d103      	bne.n	8028f3c <_raise_r+0x46>
 8028f34:	2316      	movs	r3, #22
 8028f36:	6003      	str	r3, [r0, #0]
 8028f38:	2001      	movs	r0, #1
 8028f3a:	e7e5      	b.n	8028f08 <_raise_r+0x12>
 8028f3c:	2100      	movs	r1, #0
 8028f3e:	0028      	movs	r0, r5
 8028f40:	6019      	str	r1, [r3, #0]
 8028f42:	4790      	blx	r2
 8028f44:	2000      	movs	r0, #0
 8028f46:	e7df      	b.n	8028f08 <_raise_r+0x12>

08028f48 <raise>:
 8028f48:	b510      	push	{r4, lr}
 8028f4a:	4b03      	ldr	r3, [pc, #12]	@ (8028f58 <raise+0x10>)
 8028f4c:	0001      	movs	r1, r0
 8028f4e:	6818      	ldr	r0, [r3, #0]
 8028f50:	f7ff ffd1 	bl	8028ef6 <_raise_r>
 8028f54:	bd10      	pop	{r4, pc}
 8028f56:	46c0      	nop			@ (mov r8, r8)
 8028f58:	200003ec 	.word	0x200003ec

08028f5c <_kill_r>:
 8028f5c:	2300      	movs	r3, #0
 8028f5e:	b570      	push	{r4, r5, r6, lr}
 8028f60:	4d06      	ldr	r5, [pc, #24]	@ (8028f7c <_kill_r+0x20>)
 8028f62:	0004      	movs	r4, r0
 8028f64:	0008      	movs	r0, r1
 8028f66:	0011      	movs	r1, r2
 8028f68:	602b      	str	r3, [r5, #0]
 8028f6a:	f7ea fa73 	bl	8013454 <_kill>
 8028f6e:	1c43      	adds	r3, r0, #1
 8028f70:	d103      	bne.n	8028f7a <_kill_r+0x1e>
 8028f72:	682b      	ldr	r3, [r5, #0]
 8028f74:	2b00      	cmp	r3, #0
 8028f76:	d000      	beq.n	8028f7a <_kill_r+0x1e>
 8028f78:	6023      	str	r3, [r4, #0]
 8028f7a:	bd70      	pop	{r4, r5, r6, pc}
 8028f7c:	20003908 	.word	0x20003908

08028f80 <_getpid_r>:
 8028f80:	b510      	push	{r4, lr}
 8028f82:	f7ea fa61 	bl	8013448 <_getpid>
 8028f86:	bd10      	pop	{r4, pc}

08028f88 <log>:
 8028f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028f8a:	0004      	movs	r4, r0
 8028f8c:	000d      	movs	r5, r1
 8028f8e:	f000 f98d 	bl	80292ac <__ieee754_log>
 8028f92:	0022      	movs	r2, r4
 8028f94:	0006      	movs	r6, r0
 8028f96:	000f      	movs	r7, r1
 8028f98:	002b      	movs	r3, r5
 8028f9a:	0020      	movs	r0, r4
 8028f9c:	0029      	movs	r1, r5
 8028f9e:	f7da fbc9 	bl	8003734 <__aeabi_dcmpun>
 8028fa2:	2800      	cmp	r0, #0
 8028fa4:	d115      	bne.n	8028fd2 <log+0x4a>
 8028fa6:	2200      	movs	r2, #0
 8028fa8:	2300      	movs	r3, #0
 8028faa:	0020      	movs	r0, r4
 8028fac:	0029      	movs	r1, r5
 8028fae:	f7d7 fa99 	bl	80004e4 <__aeabi_dcmpgt>
 8028fb2:	2800      	cmp	r0, #0
 8028fb4:	d10d      	bne.n	8028fd2 <log+0x4a>
 8028fb6:	2200      	movs	r2, #0
 8028fb8:	2300      	movs	r3, #0
 8028fba:	0020      	movs	r0, r4
 8028fbc:	0029      	movs	r1, r5
 8028fbe:	f7d7 fa77 	bl	80004b0 <__aeabi_dcmpeq>
 8028fc2:	2800      	cmp	r0, #0
 8028fc4:	d008      	beq.n	8028fd8 <log+0x50>
 8028fc6:	f7fd faf3 	bl	80265b0 <__errno>
 8028fca:	2322      	movs	r3, #34	@ 0x22
 8028fcc:	2600      	movs	r6, #0
 8028fce:	4f07      	ldr	r7, [pc, #28]	@ (8028fec <log+0x64>)
 8028fd0:	6003      	str	r3, [r0, #0]
 8028fd2:	0030      	movs	r0, r6
 8028fd4:	0039      	movs	r1, r7
 8028fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028fd8:	f7fd faea 	bl	80265b0 <__errno>
 8028fdc:	2321      	movs	r3, #33	@ 0x21
 8028fde:	6003      	str	r3, [r0, #0]
 8028fe0:	4803      	ldr	r0, [pc, #12]	@ (8028ff0 <log+0x68>)
 8028fe2:	f7fd fb27 	bl	8026634 <nan>
 8028fe6:	0006      	movs	r6, r0
 8028fe8:	000f      	movs	r7, r1
 8028fea:	e7f2      	b.n	8028fd2 <log+0x4a>
 8028fec:	fff00000 	.word	0xfff00000
 8028ff0:	0802eb34 	.word	0x0802eb34

08028ff4 <pow>:
 8028ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028ff6:	0014      	movs	r4, r2
 8028ff8:	001d      	movs	r5, r3
 8028ffa:	9000      	str	r0, [sp, #0]
 8028ffc:	9101      	str	r1, [sp, #4]
 8028ffe:	f000 fb07 	bl	8029610 <__ieee754_pow>
 8029002:	0022      	movs	r2, r4
 8029004:	0006      	movs	r6, r0
 8029006:	000f      	movs	r7, r1
 8029008:	002b      	movs	r3, r5
 802900a:	0020      	movs	r0, r4
 802900c:	0029      	movs	r1, r5
 802900e:	f7da fb91 	bl	8003734 <__aeabi_dcmpun>
 8029012:	2800      	cmp	r0, #0
 8029014:	d13f      	bne.n	8029096 <pow+0xa2>
 8029016:	9800      	ldr	r0, [sp, #0]
 8029018:	9901      	ldr	r1, [sp, #4]
 802901a:	2200      	movs	r2, #0
 802901c:	2300      	movs	r3, #0
 802901e:	f7d7 fa47 	bl	80004b0 <__aeabi_dcmpeq>
 8029022:	2800      	cmp	r0, #0
 8029024:	d019      	beq.n	802905a <pow+0x66>
 8029026:	2200      	movs	r2, #0
 8029028:	2300      	movs	r3, #0
 802902a:	0020      	movs	r0, r4
 802902c:	0029      	movs	r1, r5
 802902e:	f7d7 fa3f 	bl	80004b0 <__aeabi_dcmpeq>
 8029032:	2800      	cmp	r0, #0
 8029034:	d146      	bne.n	80290c4 <pow+0xd0>
 8029036:	0020      	movs	r0, r4
 8029038:	0029      	movs	r1, r5
 802903a:	f000 f88d 	bl	8029158 <finite>
 802903e:	2800      	cmp	r0, #0
 8029040:	d029      	beq.n	8029096 <pow+0xa2>
 8029042:	2200      	movs	r2, #0
 8029044:	2300      	movs	r3, #0
 8029046:	0020      	movs	r0, r4
 8029048:	0029      	movs	r1, r5
 802904a:	f7d7 fa37 	bl	80004bc <__aeabi_dcmplt>
 802904e:	2800      	cmp	r0, #0
 8029050:	d021      	beq.n	8029096 <pow+0xa2>
 8029052:	f7fd faad 	bl	80265b0 <__errno>
 8029056:	2322      	movs	r3, #34	@ 0x22
 8029058:	e01c      	b.n	8029094 <pow+0xa0>
 802905a:	0030      	movs	r0, r6
 802905c:	0039      	movs	r1, r7
 802905e:	f000 f87b 	bl	8029158 <finite>
 8029062:	2800      	cmp	r0, #0
 8029064:	d11b      	bne.n	802909e <pow+0xaa>
 8029066:	9800      	ldr	r0, [sp, #0]
 8029068:	9901      	ldr	r1, [sp, #4]
 802906a:	f000 f875 	bl	8029158 <finite>
 802906e:	2800      	cmp	r0, #0
 8029070:	d015      	beq.n	802909e <pow+0xaa>
 8029072:	0020      	movs	r0, r4
 8029074:	0029      	movs	r1, r5
 8029076:	f000 f86f 	bl	8029158 <finite>
 802907a:	2800      	cmp	r0, #0
 802907c:	d00f      	beq.n	802909e <pow+0xaa>
 802907e:	0032      	movs	r2, r6
 8029080:	003b      	movs	r3, r7
 8029082:	0030      	movs	r0, r6
 8029084:	0039      	movs	r1, r7
 8029086:	f7da fb55 	bl	8003734 <__aeabi_dcmpun>
 802908a:	2800      	cmp	r0, #0
 802908c:	d0e1      	beq.n	8029052 <pow+0x5e>
 802908e:	f7fd fa8f 	bl	80265b0 <__errno>
 8029092:	2321      	movs	r3, #33	@ 0x21
 8029094:	6003      	str	r3, [r0, #0]
 8029096:	0030      	movs	r0, r6
 8029098:	0039      	movs	r1, r7
 802909a:	b003      	add	sp, #12
 802909c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802909e:	2200      	movs	r2, #0
 80290a0:	2300      	movs	r3, #0
 80290a2:	0030      	movs	r0, r6
 80290a4:	0039      	movs	r1, r7
 80290a6:	f7d7 fa03 	bl	80004b0 <__aeabi_dcmpeq>
 80290aa:	2800      	cmp	r0, #0
 80290ac:	d0f3      	beq.n	8029096 <pow+0xa2>
 80290ae:	9800      	ldr	r0, [sp, #0]
 80290b0:	9901      	ldr	r1, [sp, #4]
 80290b2:	f000 f851 	bl	8029158 <finite>
 80290b6:	2800      	cmp	r0, #0
 80290b8:	d0ed      	beq.n	8029096 <pow+0xa2>
 80290ba:	0020      	movs	r0, r4
 80290bc:	0029      	movs	r1, r5
 80290be:	f000 f84b 	bl	8029158 <finite>
 80290c2:	e7c4      	b.n	802904e <pow+0x5a>
 80290c4:	2600      	movs	r6, #0
 80290c6:	4f01      	ldr	r7, [pc, #4]	@ (80290cc <pow+0xd8>)
 80290c8:	e7e5      	b.n	8029096 <pow+0xa2>
 80290ca:	46c0      	nop			@ (mov r8, r8)
 80290cc:	3ff00000 	.word	0x3ff00000

080290d0 <expf>:
 80290d0:	b570      	push	{r4, r5, r6, lr}
 80290d2:	1c04      	adds	r4, r0, #0
 80290d4:	f000 ffb8 	bl	802a048 <__ieee754_expf>
 80290d8:	1c05      	adds	r5, r0, #0
 80290da:	1c20      	adds	r0, r4, #0
 80290dc:	f000 f844 	bl	8029168 <finitef>
 80290e0:	2800      	cmp	r0, #0
 80290e2:	d00b      	beq.n	80290fc <expf+0x2c>
 80290e4:	490c      	ldr	r1, [pc, #48]	@ (8029118 <expf+0x48>)
 80290e6:	1c20      	adds	r0, r4, #0
 80290e8:	f7d7 fa36 	bl	8000558 <__aeabi_fcmpgt>
 80290ec:	2800      	cmp	r0, #0
 80290ee:	d007      	beq.n	8029100 <expf+0x30>
 80290f0:	f7fd fa5e 	bl	80265b0 <__errno>
 80290f4:	25ff      	movs	r5, #255	@ 0xff
 80290f6:	2322      	movs	r3, #34	@ 0x22
 80290f8:	05ed      	lsls	r5, r5, #23
 80290fa:	6003      	str	r3, [r0, #0]
 80290fc:	1c28      	adds	r0, r5, #0
 80290fe:	bd70      	pop	{r4, r5, r6, pc}
 8029100:	4906      	ldr	r1, [pc, #24]	@ (802911c <expf+0x4c>)
 8029102:	1c20      	adds	r0, r4, #0
 8029104:	f7d7 fa14 	bl	8000530 <__aeabi_fcmplt>
 8029108:	2800      	cmp	r0, #0
 802910a:	d0f7      	beq.n	80290fc <expf+0x2c>
 802910c:	f7fd fa50 	bl	80265b0 <__errno>
 8029110:	2322      	movs	r3, #34	@ 0x22
 8029112:	2500      	movs	r5, #0
 8029114:	6003      	str	r3, [r0, #0]
 8029116:	e7f1      	b.n	80290fc <expf+0x2c>
 8029118:	42b17217 	.word	0x42b17217
 802911c:	c2cff1b5 	.word	0xc2cff1b5

08029120 <sqrtf>:
 8029120:	b570      	push	{r4, r5, r6, lr}
 8029122:	1c05      	adds	r5, r0, #0
 8029124:	f000 f82a 	bl	802917c <__ieee754_sqrtf>
 8029128:	1c29      	adds	r1, r5, #0
 802912a:	1c04      	adds	r4, r0, #0
 802912c:	1c28      	adds	r0, r5, #0
 802912e:	f7d8 fb45 	bl	80017bc <__aeabi_fcmpun>
 8029132:	2800      	cmp	r0, #0
 8029134:	d10e      	bne.n	8029154 <sqrtf+0x34>
 8029136:	2100      	movs	r1, #0
 8029138:	1c28      	adds	r0, r5, #0
 802913a:	f7d7 f9f9 	bl	8000530 <__aeabi_fcmplt>
 802913e:	2800      	cmp	r0, #0
 8029140:	d008      	beq.n	8029154 <sqrtf+0x34>
 8029142:	f7fd fa35 	bl	80265b0 <__errno>
 8029146:	2321      	movs	r3, #33	@ 0x21
 8029148:	2100      	movs	r1, #0
 802914a:	6003      	str	r3, [r0, #0]
 802914c:	1c08      	adds	r0, r1, #0
 802914e:	f7d7 fda9 	bl	8000ca4 <__aeabi_fdiv>
 8029152:	1c04      	adds	r4, r0, #0
 8029154:	1c20      	adds	r0, r4, #0
 8029156:	bd70      	pop	{r4, r5, r6, pc}

08029158 <finite>:
 8029158:	4b02      	ldr	r3, [pc, #8]	@ (8029164 <finite+0xc>)
 802915a:	0048      	lsls	r0, r1, #1
 802915c:	0840      	lsrs	r0, r0, #1
 802915e:	18c0      	adds	r0, r0, r3
 8029160:	0fc0      	lsrs	r0, r0, #31
 8029162:	4770      	bx	lr
 8029164:	80100000 	.word	0x80100000

08029168 <finitef>:
 8029168:	22ff      	movs	r2, #255	@ 0xff
 802916a:	0043      	lsls	r3, r0, #1
 802916c:	085b      	lsrs	r3, r3, #1
 802916e:	2001      	movs	r0, #1
 8029170:	05d2      	lsls	r2, r2, #23
 8029172:	4293      	cmp	r3, r2
 8029174:	db00      	blt.n	8029178 <finitef+0x10>
 8029176:	2000      	movs	r0, #0
 8029178:	4770      	bx	lr
	...

0802917c <__ieee754_sqrtf>:
 802917c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802917e:	21ff      	movs	r1, #255	@ 0xff
 8029180:	0042      	lsls	r2, r0, #1
 8029182:	0003      	movs	r3, r0
 8029184:	1c04      	adds	r4, r0, #0
 8029186:	0852      	lsrs	r2, r2, #1
 8029188:	05c9      	lsls	r1, r1, #23
 802918a:	428a      	cmp	r2, r1
 802918c:	d309      	bcc.n	80291a2 <__ieee754_sqrtf+0x26>
 802918e:	1c01      	adds	r1, r0, #0
 8029190:	f7d7 ff56 	bl	8001040 <__aeabi_fmul>
 8029194:	1c01      	adds	r1, r0, #0
 8029196:	1c20      	adds	r0, r4, #0
 8029198:	f7d7 fb92 	bl	80008c0 <__aeabi_fadd>
 802919c:	1c04      	adds	r4, r0, #0
 802919e:	1c20      	adds	r0, r4, #0
 80291a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80291a2:	2a00      	cmp	r2, #0
 80291a4:	d0fb      	beq.n	802919e <__ieee754_sqrtf+0x22>
 80291a6:	2800      	cmp	r0, #0
 80291a8:	da06      	bge.n	80291b8 <__ieee754_sqrtf+0x3c>
 80291aa:	1c01      	adds	r1, r0, #0
 80291ac:	f7d8 f8a2 	bl	80012f4 <__aeabi_fsub>
 80291b0:	1c01      	adds	r1, r0, #0
 80291b2:	f7d7 fd77 	bl	8000ca4 <__aeabi_fdiv>
 80291b6:	e7f1      	b.n	802919c <__ieee754_sqrtf+0x20>
 80291b8:	0002      	movs	r2, r0
 80291ba:	400a      	ands	r2, r1
 80291bc:	4208      	tst	r0, r1
 80291be:	d040      	beq.n	8029242 <__ieee754_sqrtf+0xc6>
 80291c0:	15c1      	asrs	r1, r0, #23
 80291c2:	2280      	movs	r2, #128	@ 0x80
 80291c4:	000f      	movs	r7, r1
 80291c6:	025b      	lsls	r3, r3, #9
 80291c8:	0a5b      	lsrs	r3, r3, #9
 80291ca:	0412      	lsls	r2, r2, #16
 80291cc:	3f7f      	subs	r7, #127	@ 0x7f
 80291ce:	4313      	orrs	r3, r2
 80291d0:	07c9      	lsls	r1, r1, #31
 80291d2:	d400      	bmi.n	80291d6 <__ieee754_sqrtf+0x5a>
 80291d4:	005b      	lsls	r3, r3, #1
 80291d6:	2400      	movs	r4, #0
 80291d8:	2180      	movs	r1, #128	@ 0x80
 80291da:	2019      	movs	r0, #25
 80291dc:	0026      	movs	r6, r4
 80291de:	107f      	asrs	r7, r7, #1
 80291e0:	005b      	lsls	r3, r3, #1
 80291e2:	0449      	lsls	r1, r1, #17
 80291e4:	1875      	adds	r5, r6, r1
 80291e6:	001a      	movs	r2, r3
 80291e8:	429d      	cmp	r5, r3
 80291ea:	dc02      	bgt.n	80291f2 <__ieee754_sqrtf+0x76>
 80291ec:	186e      	adds	r6, r5, r1
 80291ee:	1b5a      	subs	r2, r3, r5
 80291f0:	1864      	adds	r4, r4, r1
 80291f2:	3801      	subs	r0, #1
 80291f4:	0053      	lsls	r3, r2, #1
 80291f6:	0849      	lsrs	r1, r1, #1
 80291f8:	2800      	cmp	r0, #0
 80291fa:	d1f3      	bne.n	80291e4 <__ieee754_sqrtf+0x68>
 80291fc:	2a00      	cmp	r2, #0
 80291fe:	d019      	beq.n	8029234 <__ieee754_sqrtf+0xb8>
 8029200:	4d16      	ldr	r5, [pc, #88]	@ (802925c <__ieee754_sqrtf+0xe0>)
 8029202:	4e17      	ldr	r6, [pc, #92]	@ (8029260 <__ieee754_sqrtf+0xe4>)
 8029204:	6828      	ldr	r0, [r5, #0]
 8029206:	6831      	ldr	r1, [r6, #0]
 8029208:	682b      	ldr	r3, [r5, #0]
 802920a:	9301      	str	r3, [sp, #4]
 802920c:	f7d8 f872 	bl	80012f4 <__aeabi_fsub>
 8029210:	1c01      	adds	r1, r0, #0
 8029212:	9801      	ldr	r0, [sp, #4]
 8029214:	f7d7 f996 	bl	8000544 <__aeabi_fcmple>
 8029218:	2800      	cmp	r0, #0
 802921a:	d00b      	beq.n	8029234 <__ieee754_sqrtf+0xb8>
 802921c:	6828      	ldr	r0, [r5, #0]
 802921e:	6831      	ldr	r1, [r6, #0]
 8029220:	f7d7 fb4e 	bl	80008c0 <__aeabi_fadd>
 8029224:	682d      	ldr	r5, [r5, #0]
 8029226:	1c01      	adds	r1, r0, #0
 8029228:	1c28      	adds	r0, r5, #0
 802922a:	f7d7 f981 	bl	8000530 <__aeabi_fcmplt>
 802922e:	2800      	cmp	r0, #0
 8029230:	d010      	beq.n	8029254 <__ieee754_sqrtf+0xd8>
 8029232:	3402      	adds	r4, #2
 8029234:	23fc      	movs	r3, #252	@ 0xfc
 8029236:	1064      	asrs	r4, r4, #1
 8029238:	059b      	lsls	r3, r3, #22
 802923a:	18e3      	adds	r3, r4, r3
 802923c:	05fc      	lsls	r4, r7, #23
 802923e:	18e4      	adds	r4, r4, r3
 8029240:	e7ad      	b.n	802919e <__ieee754_sqrtf+0x22>
 8029242:	2080      	movs	r0, #128	@ 0x80
 8029244:	0400      	lsls	r0, r0, #16
 8029246:	005b      	lsls	r3, r3, #1
 8029248:	0011      	movs	r1, r2
 802924a:	3201      	adds	r2, #1
 802924c:	4203      	tst	r3, r0
 802924e:	d0fa      	beq.n	8029246 <__ieee754_sqrtf+0xca>
 8029250:	4249      	negs	r1, r1
 8029252:	e7b6      	b.n	80291c2 <__ieee754_sqrtf+0x46>
 8029254:	2301      	movs	r3, #1
 8029256:	3401      	adds	r4, #1
 8029258:	439c      	bics	r4, r3
 802925a:	e7eb      	b.n	8029234 <__ieee754_sqrtf+0xb8>
 802925c:	0802ed8c 	.word	0x0802ed8c
 8029260:	0802ed88 	.word	0x0802ed88

08029264 <roundf>:
 8029264:	0dc3      	lsrs	r3, r0, #23
 8029266:	b2db      	uxtb	r3, r3
 8029268:	3b7f      	subs	r3, #127	@ 0x7f
 802926a:	0002      	movs	r2, r0
 802926c:	b510      	push	{r4, lr}
 802926e:	2b16      	cmp	r3, #22
 8029270:	dc13      	bgt.n	802929a <roundf+0x36>
 8029272:	2b00      	cmp	r3, #0
 8029274:	da07      	bge.n	8029286 <roundf+0x22>
 8029276:	0fc2      	lsrs	r2, r0, #31
 8029278:	07d0      	lsls	r0, r2, #31
 802927a:	3301      	adds	r3, #1
 802927c:	d102      	bne.n	8029284 <roundf+0x20>
 802927e:	23fe      	movs	r3, #254	@ 0xfe
 8029280:	059b      	lsls	r3, r3, #22
 8029282:	4318      	orrs	r0, r3
 8029284:	bd10      	pop	{r4, pc}
 8029286:	4908      	ldr	r1, [pc, #32]	@ (80292a8 <roundf+0x44>)
 8029288:	4119      	asrs	r1, r3
 802928a:	4208      	tst	r0, r1
 802928c:	d0fa      	beq.n	8029284 <roundf+0x20>
 802928e:	2080      	movs	r0, #128	@ 0x80
 8029290:	03c0      	lsls	r0, r0, #15
 8029292:	4118      	asrs	r0, r3
 8029294:	1880      	adds	r0, r0, r2
 8029296:	4388      	bics	r0, r1
 8029298:	e7f4      	b.n	8029284 <roundf+0x20>
 802929a:	2b80      	cmp	r3, #128	@ 0x80
 802929c:	d1f2      	bne.n	8029284 <roundf+0x20>
 802929e:	1c01      	adds	r1, r0, #0
 80292a0:	f7d7 fb0e 	bl	80008c0 <__aeabi_fadd>
 80292a4:	e7ee      	b.n	8029284 <roundf+0x20>
 80292a6:	46c0      	nop			@ (mov r8, r8)
 80292a8:	007fffff 	.word	0x007fffff

080292ac <__ieee754_log>:
 80292ac:	2380      	movs	r3, #128	@ 0x80
 80292ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80292b0:	035b      	lsls	r3, r3, #13
 80292b2:	000e      	movs	r6, r1
 80292b4:	b08d      	sub	sp, #52	@ 0x34
 80292b6:	4299      	cmp	r1, r3
 80292b8:	da23      	bge.n	8029302 <__ieee754_log+0x56>
 80292ba:	004b      	lsls	r3, r1, #1
 80292bc:	085b      	lsrs	r3, r3, #1
 80292be:	4303      	orrs	r3, r0
 80292c0:	d107      	bne.n	80292d2 <__ieee754_log+0x26>
 80292c2:	2200      	movs	r2, #0
 80292c4:	2300      	movs	r3, #0
 80292c6:	2000      	movs	r0, #0
 80292c8:	49b4      	ldr	r1, [pc, #720]	@ (802959c <__ieee754_log+0x2f0>)
 80292ca:	f7d8 ff09 	bl	80020e0 <__aeabi_ddiv>
 80292ce:	b00d      	add	sp, #52	@ 0x34
 80292d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80292d2:	2900      	cmp	r1, #0
 80292d4:	da06      	bge.n	80292e4 <__ieee754_log+0x38>
 80292d6:	0002      	movs	r2, r0
 80292d8:	000b      	movs	r3, r1
 80292da:	f7d9 fe21 	bl	8002f20 <__aeabi_dsub>
 80292de:	2200      	movs	r2, #0
 80292e0:	2300      	movs	r3, #0
 80292e2:	e7f2      	b.n	80292ca <__ieee754_log+0x1e>
 80292e4:	4bae      	ldr	r3, [pc, #696]	@ (80295a0 <__ieee754_log+0x2f4>)
 80292e6:	2200      	movs	r2, #0
 80292e8:	f7d9 fb34 	bl	8002954 <__aeabi_dmul>
 80292ec:	2336      	movs	r3, #54	@ 0x36
 80292ee:	000e      	movs	r6, r1
 80292f0:	425b      	negs	r3, r3
 80292f2:	4aac      	ldr	r2, [pc, #688]	@ (80295a4 <__ieee754_log+0x2f8>)
 80292f4:	4296      	cmp	r6, r2
 80292f6:	dd06      	ble.n	8029306 <__ieee754_log+0x5a>
 80292f8:	0002      	movs	r2, r0
 80292fa:	000b      	movs	r3, r1
 80292fc:	f7d8 fb2a 	bl	8001954 <__aeabi_dadd>
 8029300:	e7e5      	b.n	80292ce <__ieee754_log+0x22>
 8029302:	2300      	movs	r3, #0
 8029304:	e7f5      	b.n	80292f2 <__ieee754_log+0x46>
 8029306:	4ca8      	ldr	r4, [pc, #672]	@ (80295a8 <__ieee754_log+0x2fc>)
 8029308:	1532      	asrs	r2, r6, #20
 802930a:	1912      	adds	r2, r2, r4
 802930c:	0336      	lsls	r6, r6, #12
 802930e:	4ca7      	ldr	r4, [pc, #668]	@ (80295ac <__ieee754_log+0x300>)
 8029310:	18d2      	adds	r2, r2, r3
 8029312:	0b33      	lsrs	r3, r6, #12
 8029314:	9302      	str	r3, [sp, #8]
 8029316:	191b      	adds	r3, r3, r4
 8029318:	2480      	movs	r4, #128	@ 0x80
 802931a:	0364      	lsls	r4, r4, #13
 802931c:	4023      	ands	r3, r4
 802931e:	4ca4      	ldr	r4, [pc, #656]	@ (80295b0 <__ieee754_log+0x304>)
 8029320:	9d02      	ldr	r5, [sp, #8]
 8029322:	405c      	eors	r4, r3
 8029324:	151b      	asrs	r3, r3, #20
 8029326:	189b      	adds	r3, r3, r2
 8029328:	4325      	orrs	r5, r4
 802932a:	2200      	movs	r2, #0
 802932c:	9300      	str	r3, [sp, #0]
 802932e:	0029      	movs	r1, r5
 8029330:	4b9f      	ldr	r3, [pc, #636]	@ (80295b0 <__ieee754_log+0x304>)
 8029332:	f7d9 fdf5 	bl	8002f20 <__aeabi_dsub>
 8029336:	9b02      	ldr	r3, [sp, #8]
 8029338:	0006      	movs	r6, r0
 802933a:	3302      	adds	r3, #2
 802933c:	031b      	lsls	r3, r3, #12
 802933e:	000f      	movs	r7, r1
 8029340:	2200      	movs	r2, #0
 8029342:	0b1b      	lsrs	r3, r3, #12
 8029344:	2b02      	cmp	r3, #2
 8029346:	dc64      	bgt.n	8029412 <__ieee754_log+0x166>
 8029348:	2300      	movs	r3, #0
 802934a:	f7d7 f8b1 	bl	80004b0 <__aeabi_dcmpeq>
 802934e:	2800      	cmp	r0, #0
 8029350:	d019      	beq.n	8029386 <__ieee754_log+0xda>
 8029352:	9b00      	ldr	r3, [sp, #0]
 8029354:	2b00      	cmp	r3, #0
 8029356:	d100      	bne.n	802935a <__ieee754_log+0xae>
 8029358:	e11c      	b.n	8029594 <__ieee754_log+0x2e8>
 802935a:	0018      	movs	r0, r3
 802935c:	f7da fa48 	bl	80037f0 <__aeabi_i2d>
 8029360:	4a94      	ldr	r2, [pc, #592]	@ (80295b4 <__ieee754_log+0x308>)
 8029362:	4b95      	ldr	r3, [pc, #596]	@ (80295b8 <__ieee754_log+0x30c>)
 8029364:	0004      	movs	r4, r0
 8029366:	000d      	movs	r5, r1
 8029368:	f7d9 faf4 	bl	8002954 <__aeabi_dmul>
 802936c:	4a93      	ldr	r2, [pc, #588]	@ (80295bc <__ieee754_log+0x310>)
 802936e:	0006      	movs	r6, r0
 8029370:	000f      	movs	r7, r1
 8029372:	4b93      	ldr	r3, [pc, #588]	@ (80295c0 <__ieee754_log+0x314>)
 8029374:	0020      	movs	r0, r4
 8029376:	0029      	movs	r1, r5
 8029378:	f7d9 faec 	bl	8002954 <__aeabi_dmul>
 802937c:	0002      	movs	r2, r0
 802937e:	000b      	movs	r3, r1
 8029380:	0030      	movs	r0, r6
 8029382:	0039      	movs	r1, r7
 8029384:	e7ba      	b.n	80292fc <__ieee754_log+0x50>
 8029386:	4a8f      	ldr	r2, [pc, #572]	@ (80295c4 <__ieee754_log+0x318>)
 8029388:	4b8f      	ldr	r3, [pc, #572]	@ (80295c8 <__ieee754_log+0x31c>)
 802938a:	0030      	movs	r0, r6
 802938c:	0039      	movs	r1, r7
 802938e:	f7d9 fae1 	bl	8002954 <__aeabi_dmul>
 8029392:	0002      	movs	r2, r0
 8029394:	000b      	movs	r3, r1
 8029396:	2000      	movs	r0, #0
 8029398:	498c      	ldr	r1, [pc, #560]	@ (80295cc <__ieee754_log+0x320>)
 802939a:	f7d9 fdc1 	bl	8002f20 <__aeabi_dsub>
 802939e:	0032      	movs	r2, r6
 80293a0:	0004      	movs	r4, r0
 80293a2:	000d      	movs	r5, r1
 80293a4:	003b      	movs	r3, r7
 80293a6:	0030      	movs	r0, r6
 80293a8:	0039      	movs	r1, r7
 80293aa:	f7d9 fad3 	bl	8002954 <__aeabi_dmul>
 80293ae:	000b      	movs	r3, r1
 80293b0:	0002      	movs	r2, r0
 80293b2:	0029      	movs	r1, r5
 80293b4:	0020      	movs	r0, r4
 80293b6:	f7d9 facd 	bl	8002954 <__aeabi_dmul>
 80293ba:	9b00      	ldr	r3, [sp, #0]
 80293bc:	9002      	str	r0, [sp, #8]
 80293be:	9103      	str	r1, [sp, #12]
 80293c0:	2b00      	cmp	r3, #0
 80293c2:	d106      	bne.n	80293d2 <__ieee754_log+0x126>
 80293c4:	0002      	movs	r2, r0
 80293c6:	000b      	movs	r3, r1
 80293c8:	0030      	movs	r0, r6
 80293ca:	0039      	movs	r1, r7
 80293cc:	f7d9 fda8 	bl	8002f20 <__aeabi_dsub>
 80293d0:	e77d      	b.n	80292ce <__ieee754_log+0x22>
 80293d2:	9800      	ldr	r0, [sp, #0]
 80293d4:	f7da fa0c 	bl	80037f0 <__aeabi_i2d>
 80293d8:	4a76      	ldr	r2, [pc, #472]	@ (80295b4 <__ieee754_log+0x308>)
 80293da:	4b77      	ldr	r3, [pc, #476]	@ (80295b8 <__ieee754_log+0x30c>)
 80293dc:	0004      	movs	r4, r0
 80293de:	000d      	movs	r5, r1
 80293e0:	f7d9 fab8 	bl	8002954 <__aeabi_dmul>
 80293e4:	4a75      	ldr	r2, [pc, #468]	@ (80295bc <__ieee754_log+0x310>)
 80293e6:	9000      	str	r0, [sp, #0]
 80293e8:	9101      	str	r1, [sp, #4]
 80293ea:	4b75      	ldr	r3, [pc, #468]	@ (80295c0 <__ieee754_log+0x314>)
 80293ec:	0020      	movs	r0, r4
 80293ee:	0029      	movs	r1, r5
 80293f0:	f7d9 fab0 	bl	8002954 <__aeabi_dmul>
 80293f4:	0002      	movs	r2, r0
 80293f6:	000b      	movs	r3, r1
 80293f8:	9802      	ldr	r0, [sp, #8]
 80293fa:	9903      	ldr	r1, [sp, #12]
 80293fc:	f7d9 fd90 	bl	8002f20 <__aeabi_dsub>
 8029400:	0032      	movs	r2, r6
 8029402:	003b      	movs	r3, r7
 8029404:	f7d9 fd8c 	bl	8002f20 <__aeabi_dsub>
 8029408:	0002      	movs	r2, r0
 802940a:	000b      	movs	r3, r1
 802940c:	9800      	ldr	r0, [sp, #0]
 802940e:	9901      	ldr	r1, [sp, #4]
 8029410:	e7dc      	b.n	80293cc <__ieee754_log+0x120>
 8029412:	2380      	movs	r3, #128	@ 0x80
 8029414:	05db      	lsls	r3, r3, #23
 8029416:	f7d8 fa9d 	bl	8001954 <__aeabi_dadd>
 802941a:	0002      	movs	r2, r0
 802941c:	000b      	movs	r3, r1
 802941e:	0030      	movs	r0, r6
 8029420:	0039      	movs	r1, r7
 8029422:	f7d8 fe5d 	bl	80020e0 <__aeabi_ddiv>
 8029426:	9004      	str	r0, [sp, #16]
 8029428:	9105      	str	r1, [sp, #20]
 802942a:	9800      	ldr	r0, [sp, #0]
 802942c:	f7da f9e0 	bl	80037f0 <__aeabi_i2d>
 8029430:	9a04      	ldr	r2, [sp, #16]
 8029432:	9b05      	ldr	r3, [sp, #20]
 8029434:	9006      	str	r0, [sp, #24]
 8029436:	9107      	str	r1, [sp, #28]
 8029438:	0010      	movs	r0, r2
 802943a:	0019      	movs	r1, r3
 802943c:	f7d9 fa8a 	bl	8002954 <__aeabi_dmul>
 8029440:	4a63      	ldr	r2, [pc, #396]	@ (80295d0 <__ieee754_log+0x324>)
 8029442:	9b02      	ldr	r3, [sp, #8]
 8029444:	4694      	mov	ip, r2
 8029446:	4463      	add	r3, ip
 8029448:	0002      	movs	r2, r0
 802944a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802944c:	000b      	movs	r3, r1
 802944e:	9008      	str	r0, [sp, #32]
 8029450:	9109      	str	r1, [sp, #36]	@ 0x24
 8029452:	f7d9 fa7f 	bl	8002954 <__aeabi_dmul>
 8029456:	0004      	movs	r4, r0
 8029458:	000d      	movs	r5, r1
 802945a:	4a5e      	ldr	r2, [pc, #376]	@ (80295d4 <__ieee754_log+0x328>)
 802945c:	4b5e      	ldr	r3, [pc, #376]	@ (80295d8 <__ieee754_log+0x32c>)
 802945e:	f7d9 fa79 	bl	8002954 <__aeabi_dmul>
 8029462:	4a5e      	ldr	r2, [pc, #376]	@ (80295dc <__ieee754_log+0x330>)
 8029464:	4b5e      	ldr	r3, [pc, #376]	@ (80295e0 <__ieee754_log+0x334>)
 8029466:	f7d8 fa75 	bl	8001954 <__aeabi_dadd>
 802946a:	0022      	movs	r2, r4
 802946c:	002b      	movs	r3, r5
 802946e:	f7d9 fa71 	bl	8002954 <__aeabi_dmul>
 8029472:	4a5c      	ldr	r2, [pc, #368]	@ (80295e4 <__ieee754_log+0x338>)
 8029474:	4b5c      	ldr	r3, [pc, #368]	@ (80295e8 <__ieee754_log+0x33c>)
 8029476:	f7d8 fa6d 	bl	8001954 <__aeabi_dadd>
 802947a:	0022      	movs	r2, r4
 802947c:	002b      	movs	r3, r5
 802947e:	f7d9 fa69 	bl	8002954 <__aeabi_dmul>
 8029482:	4a5a      	ldr	r2, [pc, #360]	@ (80295ec <__ieee754_log+0x340>)
 8029484:	4b5a      	ldr	r3, [pc, #360]	@ (80295f0 <__ieee754_log+0x344>)
 8029486:	f7d8 fa65 	bl	8001954 <__aeabi_dadd>
 802948a:	9a08      	ldr	r2, [sp, #32]
 802948c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802948e:	f7d9 fa61 	bl	8002954 <__aeabi_dmul>
 8029492:	4a58      	ldr	r2, [pc, #352]	@ (80295f4 <__ieee754_log+0x348>)
 8029494:	9008      	str	r0, [sp, #32]
 8029496:	9109      	str	r1, [sp, #36]	@ 0x24
 8029498:	4b57      	ldr	r3, [pc, #348]	@ (80295f8 <__ieee754_log+0x34c>)
 802949a:	0020      	movs	r0, r4
 802949c:	0029      	movs	r1, r5
 802949e:	f7d9 fa59 	bl	8002954 <__aeabi_dmul>
 80294a2:	4a56      	ldr	r2, [pc, #344]	@ (80295fc <__ieee754_log+0x350>)
 80294a4:	4b56      	ldr	r3, [pc, #344]	@ (8029600 <__ieee754_log+0x354>)
 80294a6:	f7d8 fa55 	bl	8001954 <__aeabi_dadd>
 80294aa:	0022      	movs	r2, r4
 80294ac:	002b      	movs	r3, r5
 80294ae:	f7d9 fa51 	bl	8002954 <__aeabi_dmul>
 80294b2:	4a54      	ldr	r2, [pc, #336]	@ (8029604 <__ieee754_log+0x358>)
 80294b4:	4b54      	ldr	r3, [pc, #336]	@ (8029608 <__ieee754_log+0x35c>)
 80294b6:	f7d8 fa4d 	bl	8001954 <__aeabi_dadd>
 80294ba:	0022      	movs	r2, r4
 80294bc:	002b      	movs	r3, r5
 80294be:	f7d9 fa49 	bl	8002954 <__aeabi_dmul>
 80294c2:	0002      	movs	r2, r0
 80294c4:	000b      	movs	r3, r1
 80294c6:	9808      	ldr	r0, [sp, #32]
 80294c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80294ca:	f7d8 fa43 	bl	8001954 <__aeabi_dadd>
 80294ce:	9a02      	ldr	r2, [sp, #8]
 80294d0:	4b4e      	ldr	r3, [pc, #312]	@ (802960c <__ieee754_log+0x360>)
 80294d2:	0004      	movs	r4, r0
 80294d4:	1a9b      	subs	r3, r3, r2
 80294d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80294d8:	000d      	movs	r5, r1
 80294da:	4313      	orrs	r3, r2
 80294dc:	2b00      	cmp	r3, #0
 80294de:	dd34      	ble.n	802954a <__ieee754_log+0x29e>
 80294e0:	2200      	movs	r2, #0
 80294e2:	4b3a      	ldr	r3, [pc, #232]	@ (80295cc <__ieee754_log+0x320>)
 80294e4:	0030      	movs	r0, r6
 80294e6:	0039      	movs	r1, r7
 80294e8:	f7d9 fa34 	bl	8002954 <__aeabi_dmul>
 80294ec:	0032      	movs	r2, r6
 80294ee:	003b      	movs	r3, r7
 80294f0:	f7d9 fa30 	bl	8002954 <__aeabi_dmul>
 80294f4:	0002      	movs	r2, r0
 80294f6:	000b      	movs	r3, r1
 80294f8:	9002      	str	r0, [sp, #8]
 80294fa:	9103      	str	r1, [sp, #12]
 80294fc:	0020      	movs	r0, r4
 80294fe:	0029      	movs	r1, r5
 8029500:	f7d8 fa28 	bl	8001954 <__aeabi_dadd>
 8029504:	9a04      	ldr	r2, [sp, #16]
 8029506:	9b05      	ldr	r3, [sp, #20]
 8029508:	f7d9 fa24 	bl	8002954 <__aeabi_dmul>
 802950c:	9b00      	ldr	r3, [sp, #0]
 802950e:	0004      	movs	r4, r0
 8029510:	000d      	movs	r5, r1
 8029512:	2b00      	cmp	r3, #0
 8029514:	d106      	bne.n	8029524 <__ieee754_log+0x278>
 8029516:	0002      	movs	r2, r0
 8029518:	000b      	movs	r3, r1
 802951a:	9802      	ldr	r0, [sp, #8]
 802951c:	9903      	ldr	r1, [sp, #12]
 802951e:	f7d9 fcff 	bl	8002f20 <__aeabi_dsub>
 8029522:	e74f      	b.n	80293c4 <__ieee754_log+0x118>
 8029524:	4a23      	ldr	r2, [pc, #140]	@ (80295b4 <__ieee754_log+0x308>)
 8029526:	4b24      	ldr	r3, [pc, #144]	@ (80295b8 <__ieee754_log+0x30c>)
 8029528:	9806      	ldr	r0, [sp, #24]
 802952a:	9907      	ldr	r1, [sp, #28]
 802952c:	f7d9 fa12 	bl	8002954 <__aeabi_dmul>
 8029530:	4a22      	ldr	r2, [pc, #136]	@ (80295bc <__ieee754_log+0x310>)
 8029532:	9000      	str	r0, [sp, #0]
 8029534:	9101      	str	r1, [sp, #4]
 8029536:	9806      	ldr	r0, [sp, #24]
 8029538:	9907      	ldr	r1, [sp, #28]
 802953a:	4b21      	ldr	r3, [pc, #132]	@ (80295c0 <__ieee754_log+0x314>)
 802953c:	f7d9 fa0a 	bl	8002954 <__aeabi_dmul>
 8029540:	0022      	movs	r2, r4
 8029542:	002b      	movs	r3, r5
 8029544:	f7d8 fa06 	bl	8001954 <__aeabi_dadd>
 8029548:	e754      	b.n	80293f4 <__ieee754_log+0x148>
 802954a:	0002      	movs	r2, r0
 802954c:	000b      	movs	r3, r1
 802954e:	0030      	movs	r0, r6
 8029550:	0039      	movs	r1, r7
 8029552:	f7d9 fce5 	bl	8002f20 <__aeabi_dsub>
 8029556:	9a04      	ldr	r2, [sp, #16]
 8029558:	9b05      	ldr	r3, [sp, #20]
 802955a:	f7d9 f9fb 	bl	8002954 <__aeabi_dmul>
 802955e:	9b00      	ldr	r3, [sp, #0]
 8029560:	0004      	movs	r4, r0
 8029562:	000d      	movs	r5, r1
 8029564:	2b00      	cmp	r3, #0
 8029566:	d102      	bne.n	802956e <__ieee754_log+0x2c2>
 8029568:	0002      	movs	r2, r0
 802956a:	000b      	movs	r3, r1
 802956c:	e72c      	b.n	80293c8 <__ieee754_log+0x11c>
 802956e:	4a11      	ldr	r2, [pc, #68]	@ (80295b4 <__ieee754_log+0x308>)
 8029570:	4b11      	ldr	r3, [pc, #68]	@ (80295b8 <__ieee754_log+0x30c>)
 8029572:	9806      	ldr	r0, [sp, #24]
 8029574:	9907      	ldr	r1, [sp, #28]
 8029576:	f7d9 f9ed 	bl	8002954 <__aeabi_dmul>
 802957a:	4a10      	ldr	r2, [pc, #64]	@ (80295bc <__ieee754_log+0x310>)
 802957c:	9000      	str	r0, [sp, #0]
 802957e:	9101      	str	r1, [sp, #4]
 8029580:	9806      	ldr	r0, [sp, #24]
 8029582:	9907      	ldr	r1, [sp, #28]
 8029584:	4b0e      	ldr	r3, [pc, #56]	@ (80295c0 <__ieee754_log+0x314>)
 8029586:	f7d9 f9e5 	bl	8002954 <__aeabi_dmul>
 802958a:	0002      	movs	r2, r0
 802958c:	000b      	movs	r3, r1
 802958e:	0020      	movs	r0, r4
 8029590:	0029      	movs	r1, r5
 8029592:	e733      	b.n	80293fc <__ieee754_log+0x150>
 8029594:	2000      	movs	r0, #0
 8029596:	2100      	movs	r1, #0
 8029598:	e699      	b.n	80292ce <__ieee754_log+0x22>
 802959a:	46c0      	nop			@ (mov r8, r8)
 802959c:	c3500000 	.word	0xc3500000
 80295a0:	43500000 	.word	0x43500000
 80295a4:	7fefffff 	.word	0x7fefffff
 80295a8:	fffffc01 	.word	0xfffffc01
 80295ac:	00095f64 	.word	0x00095f64
 80295b0:	3ff00000 	.word	0x3ff00000
 80295b4:	fee00000 	.word	0xfee00000
 80295b8:	3fe62e42 	.word	0x3fe62e42
 80295bc:	35793c76 	.word	0x35793c76
 80295c0:	3dea39ef 	.word	0x3dea39ef
 80295c4:	55555555 	.word	0x55555555
 80295c8:	3fd55555 	.word	0x3fd55555
 80295cc:	3fe00000 	.word	0x3fe00000
 80295d0:	fff9eb86 	.word	0xfff9eb86
 80295d4:	df3e5244 	.word	0xdf3e5244
 80295d8:	3fc2f112 	.word	0x3fc2f112
 80295dc:	96cb03de 	.word	0x96cb03de
 80295e0:	3fc74664 	.word	0x3fc74664
 80295e4:	94229359 	.word	0x94229359
 80295e8:	3fd24924 	.word	0x3fd24924
 80295ec:	55555593 	.word	0x55555593
 80295f0:	3fe55555 	.word	0x3fe55555
 80295f4:	d078c69f 	.word	0xd078c69f
 80295f8:	3fc39a09 	.word	0x3fc39a09
 80295fc:	1d8e78af 	.word	0x1d8e78af
 8029600:	3fcc71c5 	.word	0x3fcc71c5
 8029604:	9997fa04 	.word	0x9997fa04
 8029608:	3fd99999 	.word	0x3fd99999
 802960c:	0006b851 	.word	0x0006b851

08029610 <__ieee754_pow>:
 8029610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029612:	b095      	sub	sp, #84	@ 0x54
 8029614:	9204      	str	r2, [sp, #16]
 8029616:	9305      	str	r3, [sp, #20]
 8029618:	9b04      	ldr	r3, [sp, #16]
 802961a:	9f05      	ldr	r7, [sp, #20]
 802961c:	001a      	movs	r2, r3
 802961e:	007d      	lsls	r5, r7, #1
 8029620:	086d      	lsrs	r5, r5, #1
 8029622:	9002      	str	r0, [sp, #8]
 8029624:	9103      	str	r1, [sp, #12]
 8029626:	432a      	orrs	r2, r5
 8029628:	d11a      	bne.n	8029660 <__ieee754_pow+0x50>
 802962a:	2180      	movs	r1, #128	@ 0x80
 802962c:	9a02      	ldr	r2, [sp, #8]
 802962e:	9803      	ldr	r0, [sp, #12]
 8029630:	0309      	lsls	r1, r1, #12
 8029632:	4048      	eors	r0, r1
 8029634:	0003      	movs	r3, r0
 8029636:	1892      	adds	r2, r2, r2
 8029638:	415b      	adcs	r3, r3
 802963a:	4996      	ldr	r1, [pc, #600]	@ (8029894 <__ieee754_pow+0x284>)
 802963c:	428b      	cmp	r3, r1
 802963e:	d806      	bhi.n	802964e <__ieee754_pow+0x3e>
 8029640:	d001      	beq.n	8029646 <__ieee754_pow+0x36>
 8029642:	f000 fcce 	bl	8029fe2 <__ieee754_pow+0x9d2>
 8029646:	2a00      	cmp	r2, #0
 8029648:	d101      	bne.n	802964e <__ieee754_pow+0x3e>
 802964a:	f000 fcca 	bl	8029fe2 <__ieee754_pow+0x9d2>
 802964e:	9a04      	ldr	r2, [sp, #16]
 8029650:	9b05      	ldr	r3, [sp, #20]
 8029652:	9802      	ldr	r0, [sp, #8]
 8029654:	9903      	ldr	r1, [sp, #12]
 8029656:	f7d8 f97d 	bl	8001954 <__aeabi_dadd>
 802965a:	9000      	str	r0, [sp, #0]
 802965c:	9101      	str	r1, [sp, #4]
 802965e:	e08e      	b.n	802977e <__ieee754_pow+0x16e>
 8029660:	9a03      	ldr	r2, [sp, #12]
 8029662:	9206      	str	r2, [sp, #24]
 8029664:	9a02      	ldr	r2, [sp, #8]
 8029666:	920a      	str	r2, [sp, #40]	@ 0x28
 8029668:	9a03      	ldr	r2, [sp, #12]
 802966a:	0054      	lsls	r4, r2, #1
 802966c:	4a8a      	ldr	r2, [pc, #552]	@ (8029898 <__ieee754_pow+0x288>)
 802966e:	0864      	lsrs	r4, r4, #1
 8029670:	4294      	cmp	r4, r2
 8029672:	d80e      	bhi.n	8029692 <__ieee754_pow+0x82>
 8029674:	d105      	bne.n	8029682 <__ieee754_pow+0x72>
 8029676:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029678:	2a00      	cmp	r2, #0
 802967a:	d1e8      	bne.n	802964e <__ieee754_pow+0x3e>
 802967c:	42a5      	cmp	r5, r4
 802967e:	d8e6      	bhi.n	802964e <__ieee754_pow+0x3e>
 8029680:	e002      	b.n	8029688 <__ieee754_pow+0x78>
 8029682:	4a85      	ldr	r2, [pc, #532]	@ (8029898 <__ieee754_pow+0x288>)
 8029684:	4295      	cmp	r5, r2
 8029686:	d804      	bhi.n	8029692 <__ieee754_pow+0x82>
 8029688:	4a83      	ldr	r2, [pc, #524]	@ (8029898 <__ieee754_pow+0x288>)
 802968a:	4295      	cmp	r5, r2
 802968c:	d10c      	bne.n	80296a8 <__ieee754_pow+0x98>
 802968e:	2b00      	cmp	r3, #0
 8029690:	d00a      	beq.n	80296a8 <__ieee754_pow+0x98>
 8029692:	4a82      	ldr	r2, [pc, #520]	@ (802989c <__ieee754_pow+0x28c>)
 8029694:	9b03      	ldr	r3, [sp, #12]
 8029696:	189b      	adds	r3, r3, r2
 8029698:	9a02      	ldr	r2, [sp, #8]
 802969a:	4313      	orrs	r3, r2
 802969c:	d1d7      	bne.n	802964e <__ieee754_pow+0x3e>
 802969e:	2180      	movs	r1, #128	@ 0x80
 80296a0:	9a04      	ldr	r2, [sp, #16]
 80296a2:	9805      	ldr	r0, [sp, #20]
 80296a4:	0309      	lsls	r1, r1, #12
 80296a6:	e7c4      	b.n	8029632 <__ieee754_pow+0x22>
 80296a8:	2600      	movs	r6, #0
 80296aa:	9a06      	ldr	r2, [sp, #24]
 80296ac:	9408      	str	r4, [sp, #32]
 80296ae:	42b2      	cmp	r2, r6
 80296b0:	da42      	bge.n	8029738 <__ieee754_pow+0x128>
 80296b2:	4a7b      	ldr	r2, [pc, #492]	@ (80298a0 <__ieee754_pow+0x290>)
 80296b4:	4295      	cmp	r5, r2
 80296b6:	d83e      	bhi.n	8029736 <__ieee754_pow+0x126>
 80296b8:	4a7a      	ldr	r2, [pc, #488]	@ (80298a4 <__ieee754_pow+0x294>)
 80296ba:	4295      	cmp	r5, r2
 80296bc:	d910      	bls.n	80296e0 <__ieee754_pow+0xd0>
 80296be:	497a      	ldr	r1, [pc, #488]	@ (80298a8 <__ieee754_pow+0x298>)
 80296c0:	152a      	asrs	r2, r5, #20
 80296c2:	1852      	adds	r2, r2, r1
 80296c4:	2a14      	cmp	r2, #20
 80296c6:	dd18      	ble.n	80296fa <__ieee754_pow+0xea>
 80296c8:	2134      	movs	r1, #52	@ 0x34
 80296ca:	1a89      	subs	r1, r1, r2
 80296cc:	9a04      	ldr	r2, [sp, #16]
 80296ce:	40ca      	lsrs	r2, r1
 80296d0:	0010      	movs	r0, r2
 80296d2:	4088      	lsls	r0, r1
 80296d4:	4298      	cmp	r0, r3
 80296d6:	d103      	bne.n	80296e0 <__ieee754_pow+0xd0>
 80296d8:	2101      	movs	r1, #1
 80296da:	3602      	adds	r6, #2
 80296dc:	400a      	ands	r2, r1
 80296de:	1ab6      	subs	r6, r6, r2
 80296e0:	2b00      	cmp	r3, #0
 80296e2:	d15b      	bne.n	802979c <__ieee754_pow+0x18c>
 80296e4:	2380      	movs	r3, #128	@ 0x80
 80296e6:	05db      	lsls	r3, r3, #23
 80296e8:	429f      	cmp	r7, r3
 80296ea:	d14c      	bne.n	8029786 <__ieee754_pow+0x176>
 80296ec:	9a02      	ldr	r2, [sp, #8]
 80296ee:	9b03      	ldr	r3, [sp, #12]
 80296f0:	0010      	movs	r0, r2
 80296f2:	0019      	movs	r1, r3
 80296f4:	f7d9 f92e 	bl	8002954 <__aeabi_dmul>
 80296f8:	e7af      	b.n	802965a <__ieee754_pow+0x4a>
 80296fa:	2b00      	cmp	r3, #0
 80296fc:	d14e      	bne.n	802979c <__ieee754_pow+0x18c>
 80296fe:	3314      	adds	r3, #20
 8029700:	1a9a      	subs	r2, r3, r2
 8029702:	002b      	movs	r3, r5
 8029704:	4113      	asrs	r3, r2
 8029706:	0019      	movs	r1, r3
 8029708:	4091      	lsls	r1, r2
 802970a:	42a9      	cmp	r1, r5
 802970c:	d103      	bne.n	8029716 <__ieee754_pow+0x106>
 802970e:	2201      	movs	r2, #1
 8029710:	2602      	movs	r6, #2
 8029712:	4013      	ands	r3, r2
 8029714:	1af6      	subs	r6, r6, r3
 8029716:	4b65      	ldr	r3, [pc, #404]	@ (80298ac <__ieee754_pow+0x29c>)
 8029718:	429d      	cmp	r5, r3
 802971a:	d1e3      	bne.n	80296e4 <__ieee754_pow+0xd4>
 802971c:	9b02      	ldr	r3, [sp, #8]
 802971e:	9c03      	ldr	r4, [sp, #12]
 8029720:	9300      	str	r3, [sp, #0]
 8029722:	9401      	str	r4, [sp, #4]
 8029724:	2f00      	cmp	r7, #0
 8029726:	da2a      	bge.n	802977e <__ieee754_pow+0x16e>
 8029728:	001a      	movs	r2, r3
 802972a:	2000      	movs	r0, #0
 802972c:	0023      	movs	r3, r4
 802972e:	495f      	ldr	r1, [pc, #380]	@ (80298ac <__ieee754_pow+0x29c>)
 8029730:	f7d8 fcd6 	bl	80020e0 <__aeabi_ddiv>
 8029734:	e791      	b.n	802965a <__ieee754_pow+0x4a>
 8029736:	2602      	movs	r6, #2
 8029738:	2b00      	cmp	r3, #0
 802973a:	d12f      	bne.n	802979c <__ieee754_pow+0x18c>
 802973c:	4b56      	ldr	r3, [pc, #344]	@ (8029898 <__ieee754_pow+0x288>)
 802973e:	429d      	cmp	r5, r3
 8029740:	d1e9      	bne.n	8029716 <__ieee754_pow+0x106>
 8029742:	4b56      	ldr	r3, [pc, #344]	@ (802989c <__ieee754_pow+0x28c>)
 8029744:	9a02      	ldr	r2, [sp, #8]
 8029746:	18e3      	adds	r3, r4, r3
 8029748:	4313      	orrs	r3, r2
 802974a:	d101      	bne.n	8029750 <__ieee754_pow+0x140>
 802974c:	f000 fc49 	bl	8029fe2 <__ieee754_pow+0x9d2>
 8029750:	4b54      	ldr	r3, [pc, #336]	@ (80298a4 <__ieee754_pow+0x294>)
 8029752:	429c      	cmp	r4, r3
 8029754:	d909      	bls.n	802976a <__ieee754_pow+0x15a>
 8029756:	9b04      	ldr	r3, [sp, #16]
 8029758:	9c05      	ldr	r4, [sp, #20]
 802975a:	9300      	str	r3, [sp, #0]
 802975c:	9401      	str	r4, [sp, #4]
 802975e:	2f00      	cmp	r7, #0
 8029760:	da0d      	bge.n	802977e <__ieee754_pow+0x16e>
 8029762:	2300      	movs	r3, #0
 8029764:	2400      	movs	r4, #0
 8029766:	f000 fc3e 	bl	8029fe6 <__ieee754_pow+0x9d6>
 802976a:	2f00      	cmp	r7, #0
 802976c:	daf9      	bge.n	8029762 <__ieee754_pow+0x152>
 802976e:	2280      	movs	r2, #128	@ 0x80
 8029770:	0612      	lsls	r2, r2, #24
 8029772:	4694      	mov	ip, r2
 8029774:	9b04      	ldr	r3, [sp, #16]
 8029776:	9300      	str	r3, [sp, #0]
 8029778:	9b05      	ldr	r3, [sp, #20]
 802977a:	4463      	add	r3, ip
 802977c:	9301      	str	r3, [sp, #4]
 802977e:	9800      	ldr	r0, [sp, #0]
 8029780:	9901      	ldr	r1, [sp, #4]
 8029782:	b015      	add	sp, #84	@ 0x54
 8029784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029786:	4b4a      	ldr	r3, [pc, #296]	@ (80298b0 <__ieee754_pow+0x2a0>)
 8029788:	429f      	cmp	r7, r3
 802978a:	d107      	bne.n	802979c <__ieee754_pow+0x18c>
 802978c:	9b06      	ldr	r3, [sp, #24]
 802978e:	2b00      	cmp	r3, #0
 8029790:	db04      	blt.n	802979c <__ieee754_pow+0x18c>
 8029792:	9802      	ldr	r0, [sp, #8]
 8029794:	9903      	ldr	r1, [sp, #12]
 8029796:	f000 fe03 	bl	802a3a0 <__ieee754_sqrt>
 802979a:	e75e      	b.n	802965a <__ieee754_pow+0x4a>
 802979c:	9802      	ldr	r0, [sp, #8]
 802979e:	9903      	ldr	r1, [sp, #12]
 80297a0:	f000 fc4e 	bl	802a040 <fabs>
 80297a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80297a6:	9000      	str	r0, [sp, #0]
 80297a8:	9101      	str	r1, [sp, #4]
 80297aa:	2b00      	cmp	r3, #0
 80297ac:	d12c      	bne.n	8029808 <__ieee754_pow+0x1f8>
 80297ae:	9b03      	ldr	r3, [sp, #12]
 80297b0:	4a3e      	ldr	r2, [pc, #248]	@ (80298ac <__ieee754_pow+0x29c>)
 80297b2:	009b      	lsls	r3, r3, #2
 80297b4:	089b      	lsrs	r3, r3, #2
 80297b6:	4293      	cmp	r3, r2
 80297b8:	d001      	beq.n	80297be <__ieee754_pow+0x1ae>
 80297ba:	2c00      	cmp	r4, #0
 80297bc:	d124      	bne.n	8029808 <__ieee754_pow+0x1f8>
 80297be:	2f00      	cmp	r7, #0
 80297c0:	da07      	bge.n	80297d2 <__ieee754_pow+0x1c2>
 80297c2:	9a00      	ldr	r2, [sp, #0]
 80297c4:	9b01      	ldr	r3, [sp, #4]
 80297c6:	2000      	movs	r0, #0
 80297c8:	4938      	ldr	r1, [pc, #224]	@ (80298ac <__ieee754_pow+0x29c>)
 80297ca:	f7d8 fc89 	bl	80020e0 <__aeabi_ddiv>
 80297ce:	9000      	str	r0, [sp, #0]
 80297d0:	9101      	str	r1, [sp, #4]
 80297d2:	9b06      	ldr	r3, [sp, #24]
 80297d4:	2b00      	cmp	r3, #0
 80297d6:	dad2      	bge.n	802977e <__ieee754_pow+0x16e>
 80297d8:	4b30      	ldr	r3, [pc, #192]	@ (802989c <__ieee754_pow+0x28c>)
 80297da:	18e4      	adds	r4, r4, r3
 80297dc:	4334      	orrs	r4, r6
 80297de:	d108      	bne.n	80297f2 <__ieee754_pow+0x1e2>
 80297e0:	9a00      	ldr	r2, [sp, #0]
 80297e2:	9b01      	ldr	r3, [sp, #4]
 80297e4:	0010      	movs	r0, r2
 80297e6:	0019      	movs	r1, r3
 80297e8:	f7d9 fb9a 	bl	8002f20 <__aeabi_dsub>
 80297ec:	0002      	movs	r2, r0
 80297ee:	000b      	movs	r3, r1
 80297f0:	e79e      	b.n	8029730 <__ieee754_pow+0x120>
 80297f2:	2e01      	cmp	r6, #1
 80297f4:	d1c3      	bne.n	802977e <__ieee754_pow+0x16e>
 80297f6:	9800      	ldr	r0, [sp, #0]
 80297f8:	2180      	movs	r1, #128	@ 0x80
 80297fa:	0002      	movs	r2, r0
 80297fc:	9801      	ldr	r0, [sp, #4]
 80297fe:	0609      	lsls	r1, r1, #24
 8029800:	1843      	adds	r3, r0, r1
 8029802:	9200      	str	r2, [sp, #0]
 8029804:	9301      	str	r3, [sp, #4]
 8029806:	e7ba      	b.n	802977e <__ieee754_pow+0x16e>
 8029808:	9b03      	ldr	r3, [sp, #12]
 802980a:	0fdb      	lsrs	r3, r3, #31
 802980c:	3b01      	subs	r3, #1
 802980e:	001a      	movs	r2, r3
 8029810:	4332      	orrs	r2, r6
 8029812:	d102      	bne.n	802981a <__ieee754_pow+0x20a>
 8029814:	9a02      	ldr	r2, [sp, #8]
 8029816:	9b03      	ldr	r3, [sp, #12]
 8029818:	e7e4      	b.n	80297e4 <__ieee754_pow+0x1d4>
 802981a:	3e01      	subs	r6, #1
 802981c:	2200      	movs	r2, #0
 802981e:	431e      	orrs	r6, r3
 8029820:	d013      	beq.n	802984a <__ieee754_pow+0x23a>
 8029822:	4b22      	ldr	r3, [pc, #136]	@ (80298ac <__ieee754_pow+0x29c>)
 8029824:	9206      	str	r2, [sp, #24]
 8029826:	9307      	str	r3, [sp, #28]
 8029828:	2384      	movs	r3, #132	@ 0x84
 802982a:	05db      	lsls	r3, r3, #23
 802982c:	429d      	cmp	r5, r3
 802982e:	d800      	bhi.n	8029832 <__ieee754_pow+0x222>
 8029830:	e0fa      	b.n	8029a28 <__ieee754_pow+0x418>
 8029832:	4b20      	ldr	r3, [pc, #128]	@ (80298b4 <__ieee754_pow+0x2a4>)
 8029834:	429d      	cmp	r5, r3
 8029836:	d910      	bls.n	802985a <__ieee754_pow+0x24a>
 8029838:	4b1a      	ldr	r3, [pc, #104]	@ (80298a4 <__ieee754_pow+0x294>)
 802983a:	429c      	cmp	r4, r3
 802983c:	d807      	bhi.n	802984e <__ieee754_pow+0x23e>
 802983e:	2f00      	cmp	r7, #0
 8029840:	da07      	bge.n	8029852 <__ieee754_pow+0x242>
 8029842:	2000      	movs	r0, #0
 8029844:	f000 fd82 	bl	802a34c <__math_oflow>
 8029848:	e707      	b.n	802965a <__ieee754_pow+0x4a>
 802984a:	4b1b      	ldr	r3, [pc, #108]	@ (80298b8 <__ieee754_pow+0x2a8>)
 802984c:	e7ea      	b.n	8029824 <__ieee754_pow+0x214>
 802984e:	2f00      	cmp	r7, #0
 8029850:	dcf7      	bgt.n	8029842 <__ieee754_pow+0x232>
 8029852:	2000      	movs	r0, #0
 8029854:	f000 fd73 	bl	802a33e <__math_uflow>
 8029858:	e6ff      	b.n	802965a <__ieee754_pow+0x4a>
 802985a:	4b18      	ldr	r3, [pc, #96]	@ (80298bc <__ieee754_pow+0x2ac>)
 802985c:	429c      	cmp	r4, r3
 802985e:	d80a      	bhi.n	8029876 <__ieee754_pow+0x266>
 8029860:	9806      	ldr	r0, [sp, #24]
 8029862:	9907      	ldr	r1, [sp, #28]
 8029864:	2300      	movs	r3, #0
 8029866:	2200      	movs	r2, #0
 8029868:	f7d6 fe28 	bl	80004bc <__aeabi_dcmplt>
 802986c:	1e43      	subs	r3, r0, #1
 802986e:	4198      	sbcs	r0, r3
 8029870:	2f00      	cmp	r7, #0
 8029872:	daef      	bge.n	8029854 <__ieee754_pow+0x244>
 8029874:	e7e6      	b.n	8029844 <__ieee754_pow+0x234>
 8029876:	4b0d      	ldr	r3, [pc, #52]	@ (80298ac <__ieee754_pow+0x29c>)
 8029878:	2200      	movs	r2, #0
 802987a:	429c      	cmp	r4, r3
 802987c:	d920      	bls.n	80298c0 <__ieee754_pow+0x2b0>
 802987e:	9806      	ldr	r0, [sp, #24]
 8029880:	9907      	ldr	r1, [sp, #28]
 8029882:	2300      	movs	r3, #0
 8029884:	f7d6 fe1a 	bl	80004bc <__aeabi_dcmplt>
 8029888:	1e43      	subs	r3, r0, #1
 802988a:	4198      	sbcs	r0, r3
 802988c:	2f00      	cmp	r7, #0
 802988e:	dcd9      	bgt.n	8029844 <__ieee754_pow+0x234>
 8029890:	e7e0      	b.n	8029854 <__ieee754_pow+0x244>
 8029892:	46c0      	nop			@ (mov r8, r8)
 8029894:	fff00000 	.word	0xfff00000
 8029898:	7ff00000 	.word	0x7ff00000
 802989c:	c0100000 	.word	0xc0100000
 80298a0:	433fffff 	.word	0x433fffff
 80298a4:	3fefffff 	.word	0x3fefffff
 80298a8:	fffffc01 	.word	0xfffffc01
 80298ac:	3ff00000 	.word	0x3ff00000
 80298b0:	3fe00000 	.word	0x3fe00000
 80298b4:	43f00000 	.word	0x43f00000
 80298b8:	bff00000 	.word	0xbff00000
 80298bc:	3feffffe 	.word	0x3feffffe
 80298c0:	9800      	ldr	r0, [sp, #0]
 80298c2:	9901      	ldr	r1, [sp, #4]
 80298c4:	4b4d      	ldr	r3, [pc, #308]	@ (80299fc <__ieee754_pow+0x3ec>)
 80298c6:	f7d9 fb2b 	bl	8002f20 <__aeabi_dsub>
 80298ca:	22c0      	movs	r2, #192	@ 0xc0
 80298cc:	4b4c      	ldr	r3, [pc, #304]	@ (8029a00 <__ieee754_pow+0x3f0>)
 80298ce:	05d2      	lsls	r2, r2, #23
 80298d0:	0006      	movs	r6, r0
 80298d2:	000f      	movs	r7, r1
 80298d4:	f7d9 f83e 	bl	8002954 <__aeabi_dmul>
 80298d8:	4a4a      	ldr	r2, [pc, #296]	@ (8029a04 <__ieee754_pow+0x3f4>)
 80298da:	9002      	str	r0, [sp, #8]
 80298dc:	9103      	str	r1, [sp, #12]
 80298de:	4b4a      	ldr	r3, [pc, #296]	@ (8029a08 <__ieee754_pow+0x3f8>)
 80298e0:	0030      	movs	r0, r6
 80298e2:	0039      	movs	r1, r7
 80298e4:	f7d9 f836 	bl	8002954 <__aeabi_dmul>
 80298e8:	2200      	movs	r2, #0
 80298ea:	9000      	str	r0, [sp, #0]
 80298ec:	9101      	str	r1, [sp, #4]
 80298ee:	4b47      	ldr	r3, [pc, #284]	@ (8029a0c <__ieee754_pow+0x3fc>)
 80298f0:	0030      	movs	r0, r6
 80298f2:	0039      	movs	r1, r7
 80298f4:	f7d9 f82e 	bl	8002954 <__aeabi_dmul>
 80298f8:	0002      	movs	r2, r0
 80298fa:	000b      	movs	r3, r1
 80298fc:	4844      	ldr	r0, [pc, #272]	@ (8029a10 <__ieee754_pow+0x400>)
 80298fe:	4945      	ldr	r1, [pc, #276]	@ (8029a14 <__ieee754_pow+0x404>)
 8029900:	f7d9 fb0e 	bl	8002f20 <__aeabi_dsub>
 8029904:	0032      	movs	r2, r6
 8029906:	003b      	movs	r3, r7
 8029908:	f7d9 f824 	bl	8002954 <__aeabi_dmul>
 802990c:	0002      	movs	r2, r0
 802990e:	000b      	movs	r3, r1
 8029910:	2000      	movs	r0, #0
 8029912:	4941      	ldr	r1, [pc, #260]	@ (8029a18 <__ieee754_pow+0x408>)
 8029914:	f7d9 fb04 	bl	8002f20 <__aeabi_dsub>
 8029918:	0032      	movs	r2, r6
 802991a:	0004      	movs	r4, r0
 802991c:	000d      	movs	r5, r1
 802991e:	003b      	movs	r3, r7
 8029920:	0030      	movs	r0, r6
 8029922:	0039      	movs	r1, r7
 8029924:	f7d9 f816 	bl	8002954 <__aeabi_dmul>
 8029928:	0002      	movs	r2, r0
 802992a:	000b      	movs	r3, r1
 802992c:	0020      	movs	r0, r4
 802992e:	0029      	movs	r1, r5
 8029930:	f7d9 f810 	bl	8002954 <__aeabi_dmul>
 8029934:	4a39      	ldr	r2, [pc, #228]	@ (8029a1c <__ieee754_pow+0x40c>)
 8029936:	4b32      	ldr	r3, [pc, #200]	@ (8029a00 <__ieee754_pow+0x3f0>)
 8029938:	f7d9 f80c 	bl	8002954 <__aeabi_dmul>
 802993c:	0002      	movs	r2, r0
 802993e:	000b      	movs	r3, r1
 8029940:	9800      	ldr	r0, [sp, #0]
 8029942:	9901      	ldr	r1, [sp, #4]
 8029944:	f7d9 faec 	bl	8002f20 <__aeabi_dsub>
 8029948:	0002      	movs	r2, r0
 802994a:	000b      	movs	r3, r1
 802994c:	0004      	movs	r4, r0
 802994e:	000d      	movs	r5, r1
 8029950:	9802      	ldr	r0, [sp, #8]
 8029952:	9903      	ldr	r1, [sp, #12]
 8029954:	f7d7 fffe 	bl	8001954 <__aeabi_dadd>
 8029958:	9a02      	ldr	r2, [sp, #8]
 802995a:	9b03      	ldr	r3, [sp, #12]
 802995c:	2000      	movs	r0, #0
 802995e:	9000      	str	r0, [sp, #0]
 8029960:	9101      	str	r1, [sp, #4]
 8029962:	f7d9 fadd 	bl	8002f20 <__aeabi_dsub>
 8029966:	0002      	movs	r2, r0
 8029968:	000b      	movs	r3, r1
 802996a:	0020      	movs	r0, r4
 802996c:	0029      	movs	r1, r5
 802996e:	f7d9 fad7 	bl	8002f20 <__aeabi_dsub>
 8029972:	9c04      	ldr	r4, [sp, #16]
 8029974:	9d05      	ldr	r5, [sp, #20]
 8029976:	2400      	movs	r4, #0
 8029978:	0006      	movs	r6, r0
 802997a:	000f      	movs	r7, r1
 802997c:	9804      	ldr	r0, [sp, #16]
 802997e:	9905      	ldr	r1, [sp, #20]
 8029980:	0022      	movs	r2, r4
 8029982:	002b      	movs	r3, r5
 8029984:	9402      	str	r4, [sp, #8]
 8029986:	9503      	str	r5, [sp, #12]
 8029988:	f7d9 faca 	bl	8002f20 <__aeabi_dsub>
 802998c:	9a00      	ldr	r2, [sp, #0]
 802998e:	9b01      	ldr	r3, [sp, #4]
 8029990:	f7d8 ffe0 	bl	8002954 <__aeabi_dmul>
 8029994:	9a04      	ldr	r2, [sp, #16]
 8029996:	9b05      	ldr	r3, [sp, #20]
 8029998:	9008      	str	r0, [sp, #32]
 802999a:	9109      	str	r1, [sp, #36]	@ 0x24
 802999c:	0030      	movs	r0, r6
 802999e:	0039      	movs	r1, r7
 80299a0:	f7d8 ffd8 	bl	8002954 <__aeabi_dmul>
 80299a4:	0002      	movs	r2, r0
 80299a6:	000b      	movs	r3, r1
 80299a8:	9808      	ldr	r0, [sp, #32]
 80299aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80299ac:	f7d7 ffd2 	bl	8001954 <__aeabi_dadd>
 80299b0:	0022      	movs	r2, r4
 80299b2:	002b      	movs	r3, r5
 80299b4:	9004      	str	r0, [sp, #16]
 80299b6:	9105      	str	r1, [sp, #20]
 80299b8:	9800      	ldr	r0, [sp, #0]
 80299ba:	9901      	ldr	r1, [sp, #4]
 80299bc:	f7d8 ffca 	bl	8002954 <__aeabi_dmul>
 80299c0:	000b      	movs	r3, r1
 80299c2:	0002      	movs	r2, r0
 80299c4:	9000      	str	r0, [sp, #0]
 80299c6:	9101      	str	r1, [sp, #4]
 80299c8:	9804      	ldr	r0, [sp, #16]
 80299ca:	9905      	ldr	r1, [sp, #20]
 80299cc:	f7d7 ffc2 	bl	8001954 <__aeabi_dadd>
 80299d0:	4b13      	ldr	r3, [pc, #76]	@ (8029a20 <__ieee754_pow+0x410>)
 80299d2:	0006      	movs	r6, r0
 80299d4:	000f      	movs	r7, r1
 80299d6:	9108      	str	r1, [sp, #32]
 80299d8:	4299      	cmp	r1, r3
 80299da:	dc00      	bgt.n	80299de <__ieee754_pow+0x3ce>
 80299dc:	e1c0      	b.n	8029d60 <__ieee754_pow+0x750>
 80299de:	4b11      	ldr	r3, [pc, #68]	@ (8029a24 <__ieee754_pow+0x414>)
 80299e0:	18cb      	adds	r3, r1, r3
 80299e2:	4303      	orrs	r3, r0
 80299e4:	42a3      	cmp	r3, r4
 80299e6:	d100      	bne.n	80299ea <__ieee754_pow+0x3da>
 80299e8:	e1a1      	b.n	8029d2e <__ieee754_pow+0x71e>
 80299ea:	9806      	ldr	r0, [sp, #24]
 80299ec:	9907      	ldr	r1, [sp, #28]
 80299ee:	2300      	movs	r3, #0
 80299f0:	2200      	movs	r2, #0
 80299f2:	f7d6 fd63 	bl	80004bc <__aeabi_dcmplt>
 80299f6:	1e43      	subs	r3, r0, #1
 80299f8:	4198      	sbcs	r0, r3
 80299fa:	e723      	b.n	8029844 <__ieee754_pow+0x234>
 80299fc:	3ff00000 	.word	0x3ff00000
 8029a00:	3ff71547 	.word	0x3ff71547
 8029a04:	f85ddf44 	.word	0xf85ddf44
 8029a08:	3e54ae0b 	.word	0x3e54ae0b
 8029a0c:	3fd00000 	.word	0x3fd00000
 8029a10:	55555555 	.word	0x55555555
 8029a14:	3fd55555 	.word	0x3fd55555
 8029a18:	3fe00000 	.word	0x3fe00000
 8029a1c:	652b82fe 	.word	0x652b82fe
 8029a20:	408fffff 	.word	0x408fffff
 8029a24:	bf700000 	.word	0xbf700000
 8029a28:	4bdc      	ldr	r3, [pc, #880]	@ (8029d9c <__ieee754_pow+0x78c>)
 8029a2a:	9903      	ldr	r1, [sp, #12]
 8029a2c:	2200      	movs	r2, #0
 8029a2e:	420b      	tst	r3, r1
 8029a30:	d10b      	bne.n	8029a4a <__ieee754_pow+0x43a>
 8029a32:	9800      	ldr	r0, [sp, #0]
 8029a34:	9901      	ldr	r1, [sp, #4]
 8029a36:	2200      	movs	r2, #0
 8029a38:	4bd9      	ldr	r3, [pc, #868]	@ (8029da0 <__ieee754_pow+0x790>)
 8029a3a:	f7d8 ff8b 	bl	8002954 <__aeabi_dmul>
 8029a3e:	2235      	movs	r2, #53	@ 0x35
 8029a40:	9000      	str	r0, [sp, #0]
 8029a42:	9101      	str	r1, [sp, #4]
 8029a44:	9b01      	ldr	r3, [sp, #4]
 8029a46:	4252      	negs	r2, r2
 8029a48:	9308      	str	r3, [sp, #32]
 8029a4a:	9b08      	ldr	r3, [sp, #32]
 8029a4c:	49d5      	ldr	r1, [pc, #852]	@ (8029da4 <__ieee754_pow+0x794>)
 8029a4e:	151b      	asrs	r3, r3, #20
 8029a50:	185b      	adds	r3, r3, r1
 8029a52:	189b      	adds	r3, r3, r2
 8029a54:	930e      	str	r3, [sp, #56]	@ 0x38
 8029a56:	9b08      	ldr	r3, [sp, #32]
 8029a58:	4dd3      	ldr	r5, [pc, #844]	@ (8029da8 <__ieee754_pow+0x798>)
 8029a5a:	031b      	lsls	r3, r3, #12
 8029a5c:	4ad3      	ldr	r2, [pc, #844]	@ (8029dac <__ieee754_pow+0x79c>)
 8029a5e:	0b1b      	lsrs	r3, r3, #12
 8029a60:	2600      	movs	r6, #0
 8029a62:	431d      	orrs	r5, r3
 8029a64:	4293      	cmp	r3, r2
 8029a66:	dd09      	ble.n	8029a7c <__ieee754_pow+0x46c>
 8029a68:	4ad1      	ldr	r2, [pc, #836]	@ (8029db0 <__ieee754_pow+0x7a0>)
 8029a6a:	3601      	adds	r6, #1
 8029a6c:	4293      	cmp	r3, r2
 8029a6e:	dd05      	ble.n	8029a7c <__ieee754_pow+0x46c>
 8029a70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029a72:	199b      	adds	r3, r3, r6
 8029a74:	2600      	movs	r6, #0
 8029a76:	930e      	str	r3, [sp, #56]	@ 0x38
 8029a78:	4bce      	ldr	r3, [pc, #824]	@ (8029db4 <__ieee754_pow+0x7a4>)
 8029a7a:	18ed      	adds	r5, r5, r3
 8029a7c:	9800      	ldr	r0, [sp, #0]
 8029a7e:	9901      	ldr	r1, [sp, #4]
 8029a80:	0029      	movs	r1, r5
 8029a82:	4bcd      	ldr	r3, [pc, #820]	@ (8029db8 <__ieee754_pow+0x7a8>)
 8029a84:	00f2      	lsls	r2, r6, #3
 8029a86:	189b      	adds	r3, r3, r2
 8029a88:	685c      	ldr	r4, [r3, #4]
 8029a8a:	681b      	ldr	r3, [r3, #0]
 8029a8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8029a8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8029a90:	940b      	str	r4, [sp, #44]	@ 0x2c
 8029a92:	001a      	movs	r2, r3
 8029a94:	0023      	movs	r3, r4
 8029a96:	900c      	str	r0, [sp, #48]	@ 0x30
 8029a98:	910d      	str	r1, [sp, #52]	@ 0x34
 8029a9a:	f7d9 fa41 	bl	8002f20 <__aeabi_dsub>
 8029a9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029aa0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029aa2:	9010      	str	r0, [sp, #64]	@ 0x40
 8029aa4:	9111      	str	r1, [sp, #68]	@ 0x44
 8029aa6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029aa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029aaa:	f7d7 ff53 	bl	8001954 <__aeabi_dadd>
 8029aae:	0002      	movs	r2, r0
 8029ab0:	000b      	movs	r3, r1
 8029ab2:	2000      	movs	r0, #0
 8029ab4:	49bc      	ldr	r1, [pc, #752]	@ (8029da8 <__ieee754_pow+0x798>)
 8029ab6:	f7d8 fb13 	bl	80020e0 <__aeabi_ddiv>
 8029aba:	0002      	movs	r2, r0
 8029abc:	000b      	movs	r3, r1
 8029abe:	9012      	str	r0, [sp, #72]	@ 0x48
 8029ac0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8029ac2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029ac4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029ac6:	f7d8 ff45 	bl	8002954 <__aeabi_dmul>
 8029aca:	9008      	str	r0, [sp, #32]
 8029acc:	9109      	str	r1, [sp, #36]	@ 0x24
 8029ace:	9b08      	ldr	r3, [sp, #32]
 8029ad0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8029ad2:	2180      	movs	r1, #128	@ 0x80
 8029ad4:	9302      	str	r3, [sp, #8]
 8029ad6:	9403      	str	r4, [sp, #12]
 8029ad8:	2080      	movs	r0, #128	@ 0x80
 8029ada:	2300      	movs	r3, #0
 8029adc:	2200      	movs	r2, #0
 8029ade:	106d      	asrs	r5, r5, #1
 8029ae0:	0589      	lsls	r1, r1, #22
 8029ae2:	9302      	str	r3, [sp, #8]
 8029ae4:	4329      	orrs	r1, r5
 8029ae6:	0300      	lsls	r0, r0, #12
 8029ae8:	9b02      	ldr	r3, [sp, #8]
 8029aea:	9c03      	ldr	r4, [sp, #12]
 8029aec:	1809      	adds	r1, r1, r0
 8029aee:	9300      	str	r3, [sp, #0]
 8029af0:	9401      	str	r4, [sp, #4]
 8029af2:	04b6      	lsls	r6, r6, #18
 8029af4:	198b      	adds	r3, r1, r6
 8029af6:	9800      	ldr	r0, [sp, #0]
 8029af8:	9901      	ldr	r1, [sp, #4]
 8029afa:	0014      	movs	r4, r2
 8029afc:	001d      	movs	r5, r3
 8029afe:	f7d8 ff29 	bl	8002954 <__aeabi_dmul>
 8029b02:	0002      	movs	r2, r0
 8029b04:	000b      	movs	r3, r1
 8029b06:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029b08:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029b0a:	f7d9 fa09 	bl	8002f20 <__aeabi_dsub>
 8029b0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029b10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029b12:	0006      	movs	r6, r0
 8029b14:	000f      	movs	r7, r1
 8029b16:	0020      	movs	r0, r4
 8029b18:	0029      	movs	r1, r5
 8029b1a:	f7d9 fa01 	bl	8002f20 <__aeabi_dsub>
 8029b1e:	0002      	movs	r2, r0
 8029b20:	000b      	movs	r3, r1
 8029b22:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029b24:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029b26:	f7d9 f9fb 	bl	8002f20 <__aeabi_dsub>
 8029b2a:	9a00      	ldr	r2, [sp, #0]
 8029b2c:	9b01      	ldr	r3, [sp, #4]
 8029b2e:	f7d8 ff11 	bl	8002954 <__aeabi_dmul>
 8029b32:	0002      	movs	r2, r0
 8029b34:	000b      	movs	r3, r1
 8029b36:	0030      	movs	r0, r6
 8029b38:	0039      	movs	r1, r7
 8029b3a:	f7d9 f9f1 	bl	8002f20 <__aeabi_dsub>
 8029b3e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029b40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029b42:	f7d8 ff07 	bl	8002954 <__aeabi_dmul>
 8029b46:	9a08      	ldr	r2, [sp, #32]
 8029b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b4a:	900a      	str	r0, [sp, #40]	@ 0x28
 8029b4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029b4e:	0010      	movs	r0, r2
 8029b50:	0019      	movs	r1, r3
 8029b52:	f7d8 feff 	bl	8002954 <__aeabi_dmul>
 8029b56:	0006      	movs	r6, r0
 8029b58:	000f      	movs	r7, r1
 8029b5a:	4a98      	ldr	r2, [pc, #608]	@ (8029dbc <__ieee754_pow+0x7ac>)
 8029b5c:	4b98      	ldr	r3, [pc, #608]	@ (8029dc0 <__ieee754_pow+0x7b0>)
 8029b5e:	f7d8 fef9 	bl	8002954 <__aeabi_dmul>
 8029b62:	4a98      	ldr	r2, [pc, #608]	@ (8029dc4 <__ieee754_pow+0x7b4>)
 8029b64:	4b98      	ldr	r3, [pc, #608]	@ (8029dc8 <__ieee754_pow+0x7b8>)
 8029b66:	f7d7 fef5 	bl	8001954 <__aeabi_dadd>
 8029b6a:	0032      	movs	r2, r6
 8029b6c:	003b      	movs	r3, r7
 8029b6e:	f7d8 fef1 	bl	8002954 <__aeabi_dmul>
 8029b72:	4a96      	ldr	r2, [pc, #600]	@ (8029dcc <__ieee754_pow+0x7bc>)
 8029b74:	4b96      	ldr	r3, [pc, #600]	@ (8029dd0 <__ieee754_pow+0x7c0>)
 8029b76:	f7d7 feed 	bl	8001954 <__aeabi_dadd>
 8029b7a:	0032      	movs	r2, r6
 8029b7c:	003b      	movs	r3, r7
 8029b7e:	f7d8 fee9 	bl	8002954 <__aeabi_dmul>
 8029b82:	4a94      	ldr	r2, [pc, #592]	@ (8029dd4 <__ieee754_pow+0x7c4>)
 8029b84:	4b94      	ldr	r3, [pc, #592]	@ (8029dd8 <__ieee754_pow+0x7c8>)
 8029b86:	f7d7 fee5 	bl	8001954 <__aeabi_dadd>
 8029b8a:	0032      	movs	r2, r6
 8029b8c:	003b      	movs	r3, r7
 8029b8e:	f7d8 fee1 	bl	8002954 <__aeabi_dmul>
 8029b92:	4a92      	ldr	r2, [pc, #584]	@ (8029ddc <__ieee754_pow+0x7cc>)
 8029b94:	4b92      	ldr	r3, [pc, #584]	@ (8029de0 <__ieee754_pow+0x7d0>)
 8029b96:	f7d7 fedd 	bl	8001954 <__aeabi_dadd>
 8029b9a:	0032      	movs	r2, r6
 8029b9c:	003b      	movs	r3, r7
 8029b9e:	f7d8 fed9 	bl	8002954 <__aeabi_dmul>
 8029ba2:	4a90      	ldr	r2, [pc, #576]	@ (8029de4 <__ieee754_pow+0x7d4>)
 8029ba4:	4b90      	ldr	r3, [pc, #576]	@ (8029de8 <__ieee754_pow+0x7d8>)
 8029ba6:	f7d7 fed5 	bl	8001954 <__aeabi_dadd>
 8029baa:	0032      	movs	r2, r6
 8029bac:	0004      	movs	r4, r0
 8029bae:	000d      	movs	r5, r1
 8029bb0:	003b      	movs	r3, r7
 8029bb2:	0030      	movs	r0, r6
 8029bb4:	0039      	movs	r1, r7
 8029bb6:	f7d8 fecd 	bl	8002954 <__aeabi_dmul>
 8029bba:	0002      	movs	r2, r0
 8029bbc:	000b      	movs	r3, r1
 8029bbe:	0020      	movs	r0, r4
 8029bc0:	0029      	movs	r1, r5
 8029bc2:	f7d8 fec7 	bl	8002954 <__aeabi_dmul>
 8029bc6:	9a00      	ldr	r2, [sp, #0]
 8029bc8:	9b01      	ldr	r3, [sp, #4]
 8029bca:	0004      	movs	r4, r0
 8029bcc:	000d      	movs	r5, r1
 8029bce:	9808      	ldr	r0, [sp, #32]
 8029bd0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029bd2:	f7d7 febf 	bl	8001954 <__aeabi_dadd>
 8029bd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029bd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029bda:	f7d8 febb 	bl	8002954 <__aeabi_dmul>
 8029bde:	0022      	movs	r2, r4
 8029be0:	002b      	movs	r3, r5
 8029be2:	f7d7 feb7 	bl	8001954 <__aeabi_dadd>
 8029be6:	9a00      	ldr	r2, [sp, #0]
 8029be8:	9b01      	ldr	r3, [sp, #4]
 8029bea:	900c      	str	r0, [sp, #48]	@ 0x30
 8029bec:	910d      	str	r1, [sp, #52]	@ 0x34
 8029bee:	0010      	movs	r0, r2
 8029bf0:	0019      	movs	r1, r3
 8029bf2:	f7d8 feaf 	bl	8002954 <__aeabi_dmul>
 8029bf6:	2200      	movs	r2, #0
 8029bf8:	4b7c      	ldr	r3, [pc, #496]	@ (8029dec <__ieee754_pow+0x7dc>)
 8029bfa:	0004      	movs	r4, r0
 8029bfc:	000d      	movs	r5, r1
 8029bfe:	f7d7 fea9 	bl	8001954 <__aeabi_dadd>
 8029c02:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029c04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029c06:	f7d7 fea5 	bl	8001954 <__aeabi_dadd>
 8029c0a:	2000      	movs	r0, #0
 8029c0c:	000f      	movs	r7, r1
 8029c0e:	0006      	movs	r6, r0
 8029c10:	0002      	movs	r2, r0
 8029c12:	000b      	movs	r3, r1
 8029c14:	9800      	ldr	r0, [sp, #0]
 8029c16:	9901      	ldr	r1, [sp, #4]
 8029c18:	f7d8 fe9c 	bl	8002954 <__aeabi_dmul>
 8029c1c:	2200      	movs	r2, #0
 8029c1e:	9000      	str	r0, [sp, #0]
 8029c20:	9101      	str	r1, [sp, #4]
 8029c22:	4b72      	ldr	r3, [pc, #456]	@ (8029dec <__ieee754_pow+0x7dc>)
 8029c24:	0030      	movs	r0, r6
 8029c26:	0039      	movs	r1, r7
 8029c28:	f7d9 f97a 	bl	8002f20 <__aeabi_dsub>
 8029c2c:	0022      	movs	r2, r4
 8029c2e:	002b      	movs	r3, r5
 8029c30:	f7d9 f976 	bl	8002f20 <__aeabi_dsub>
 8029c34:	0002      	movs	r2, r0
 8029c36:	000b      	movs	r3, r1
 8029c38:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029c3a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029c3c:	f7d9 f970 	bl	8002f20 <__aeabi_dsub>
 8029c40:	9a08      	ldr	r2, [sp, #32]
 8029c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c44:	f7d8 fe86 	bl	8002954 <__aeabi_dmul>
 8029c48:	0032      	movs	r2, r6
 8029c4a:	0004      	movs	r4, r0
 8029c4c:	000d      	movs	r5, r1
 8029c4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029c50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029c52:	003b      	movs	r3, r7
 8029c54:	f7d8 fe7e 	bl	8002954 <__aeabi_dmul>
 8029c58:	0002      	movs	r2, r0
 8029c5a:	000b      	movs	r3, r1
 8029c5c:	0020      	movs	r0, r4
 8029c5e:	0029      	movs	r1, r5
 8029c60:	f7d7 fe78 	bl	8001954 <__aeabi_dadd>
 8029c64:	0004      	movs	r4, r0
 8029c66:	000d      	movs	r5, r1
 8029c68:	0002      	movs	r2, r0
 8029c6a:	000b      	movs	r3, r1
 8029c6c:	9800      	ldr	r0, [sp, #0]
 8029c6e:	9901      	ldr	r1, [sp, #4]
 8029c70:	f7d7 fe70 	bl	8001954 <__aeabi_dadd>
 8029c74:	22e0      	movs	r2, #224	@ 0xe0
 8029c76:	2000      	movs	r0, #0
 8029c78:	4b5d      	ldr	r3, [pc, #372]	@ (8029df0 <__ieee754_pow+0x7e0>)
 8029c7a:	0612      	lsls	r2, r2, #24
 8029c7c:	0006      	movs	r6, r0
 8029c7e:	000f      	movs	r7, r1
 8029c80:	f7d8 fe68 	bl	8002954 <__aeabi_dmul>
 8029c84:	9008      	str	r0, [sp, #32]
 8029c86:	9109      	str	r1, [sp, #36]	@ 0x24
 8029c88:	9a00      	ldr	r2, [sp, #0]
 8029c8a:	9b01      	ldr	r3, [sp, #4]
 8029c8c:	0030      	movs	r0, r6
 8029c8e:	0039      	movs	r1, r7
 8029c90:	f7d9 f946 	bl	8002f20 <__aeabi_dsub>
 8029c94:	0002      	movs	r2, r0
 8029c96:	000b      	movs	r3, r1
 8029c98:	0020      	movs	r0, r4
 8029c9a:	0029      	movs	r1, r5
 8029c9c:	f7d9 f940 	bl	8002f20 <__aeabi_dsub>
 8029ca0:	4a54      	ldr	r2, [pc, #336]	@ (8029df4 <__ieee754_pow+0x7e4>)
 8029ca2:	4b53      	ldr	r3, [pc, #332]	@ (8029df0 <__ieee754_pow+0x7e0>)
 8029ca4:	f7d8 fe56 	bl	8002954 <__aeabi_dmul>
 8029ca8:	4a53      	ldr	r2, [pc, #332]	@ (8029df8 <__ieee754_pow+0x7e8>)
 8029caa:	0004      	movs	r4, r0
 8029cac:	000d      	movs	r5, r1
 8029cae:	0030      	movs	r0, r6
 8029cb0:	0039      	movs	r1, r7
 8029cb2:	4b52      	ldr	r3, [pc, #328]	@ (8029dfc <__ieee754_pow+0x7ec>)
 8029cb4:	f7d8 fe4e 	bl	8002954 <__aeabi_dmul>
 8029cb8:	0002      	movs	r2, r0
 8029cba:	000b      	movs	r3, r1
 8029cbc:	0020      	movs	r0, r4
 8029cbe:	0029      	movs	r1, r5
 8029cc0:	f7d7 fe48 	bl	8001954 <__aeabi_dadd>
 8029cc4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029cc6:	4b4e      	ldr	r3, [pc, #312]	@ (8029e00 <__ieee754_pow+0x7f0>)
 8029cc8:	189b      	adds	r3, r3, r2
 8029cca:	681a      	ldr	r2, [r3, #0]
 8029ccc:	685b      	ldr	r3, [r3, #4]
 8029cce:	f7d7 fe41 	bl	8001954 <__aeabi_dadd>
 8029cd2:	900a      	str	r0, [sp, #40]	@ 0x28
 8029cd4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029cd6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029cd8:	f7d9 fd8a 	bl	80037f0 <__aeabi_i2d>
 8029cdc:	0004      	movs	r4, r0
 8029cde:	000d      	movs	r5, r1
 8029ce0:	9808      	ldr	r0, [sp, #32]
 8029ce2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029ce4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029ce6:	4b47      	ldr	r3, [pc, #284]	@ (8029e04 <__ieee754_pow+0x7f4>)
 8029ce8:	189b      	adds	r3, r3, r2
 8029cea:	681e      	ldr	r6, [r3, #0]
 8029cec:	685f      	ldr	r7, [r3, #4]
 8029cee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029cf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029cf2:	f7d7 fe2f 	bl	8001954 <__aeabi_dadd>
 8029cf6:	0032      	movs	r2, r6
 8029cf8:	003b      	movs	r3, r7
 8029cfa:	f7d7 fe2b 	bl	8001954 <__aeabi_dadd>
 8029cfe:	0022      	movs	r2, r4
 8029d00:	002b      	movs	r3, r5
 8029d02:	f7d7 fe27 	bl	8001954 <__aeabi_dadd>
 8029d06:	2000      	movs	r0, #0
 8029d08:	0022      	movs	r2, r4
 8029d0a:	002b      	movs	r3, r5
 8029d0c:	9000      	str	r0, [sp, #0]
 8029d0e:	9101      	str	r1, [sp, #4]
 8029d10:	f7d9 f906 	bl	8002f20 <__aeabi_dsub>
 8029d14:	0032      	movs	r2, r6
 8029d16:	003b      	movs	r3, r7
 8029d18:	f7d9 f902 	bl	8002f20 <__aeabi_dsub>
 8029d1c:	9a08      	ldr	r2, [sp, #32]
 8029d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029d20:	f7d9 f8fe 	bl	8002f20 <__aeabi_dsub>
 8029d24:	0002      	movs	r2, r0
 8029d26:	000b      	movs	r3, r1
 8029d28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029d2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029d2c:	e61f      	b.n	802996e <__ieee754_pow+0x35e>
 8029d2e:	4a36      	ldr	r2, [pc, #216]	@ (8029e08 <__ieee754_pow+0x7f8>)
 8029d30:	4b36      	ldr	r3, [pc, #216]	@ (8029e0c <__ieee754_pow+0x7fc>)
 8029d32:	9804      	ldr	r0, [sp, #16]
 8029d34:	9905      	ldr	r1, [sp, #20]
 8029d36:	f7d7 fe0d 	bl	8001954 <__aeabi_dadd>
 8029d3a:	9a00      	ldr	r2, [sp, #0]
 8029d3c:	9b01      	ldr	r3, [sp, #4]
 8029d3e:	0004      	movs	r4, r0
 8029d40:	000d      	movs	r5, r1
 8029d42:	0030      	movs	r0, r6
 8029d44:	0039      	movs	r1, r7
 8029d46:	f7d9 f8eb 	bl	8002f20 <__aeabi_dsub>
 8029d4a:	0002      	movs	r2, r0
 8029d4c:	000b      	movs	r3, r1
 8029d4e:	0020      	movs	r0, r4
 8029d50:	0029      	movs	r1, r5
 8029d52:	f7d6 fbc7 	bl	80004e4 <__aeabi_dcmpgt>
 8029d56:	2800      	cmp	r0, #0
 8029d58:	d000      	beq.n	8029d5c <__ieee754_pow+0x74c>
 8029d5a:	e646      	b.n	80299ea <__ieee754_pow+0x3da>
 8029d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8029e10 <__ieee754_pow+0x800>)
 8029d5e:	e063      	b.n	8029e28 <__ieee754_pow+0x818>
 8029d60:	4a2c      	ldr	r2, [pc, #176]	@ (8029e14 <__ieee754_pow+0x804>)
 8029d62:	004b      	lsls	r3, r1, #1
 8029d64:	085b      	lsrs	r3, r3, #1
 8029d66:	4293      	cmp	r3, r2
 8029d68:	d95a      	bls.n	8029e20 <__ieee754_pow+0x810>
 8029d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8029e18 <__ieee754_pow+0x808>)
 8029d6c:	18cb      	adds	r3, r1, r3
 8029d6e:	4303      	orrs	r3, r0
 8029d70:	d008      	beq.n	8029d84 <__ieee754_pow+0x774>
 8029d72:	9806      	ldr	r0, [sp, #24]
 8029d74:	9907      	ldr	r1, [sp, #28]
 8029d76:	2300      	movs	r3, #0
 8029d78:	2200      	movs	r2, #0
 8029d7a:	f7d6 fb9f 	bl	80004bc <__aeabi_dcmplt>
 8029d7e:	1e43      	subs	r3, r0, #1
 8029d80:	4198      	sbcs	r0, r3
 8029d82:	e567      	b.n	8029854 <__ieee754_pow+0x244>
 8029d84:	9a00      	ldr	r2, [sp, #0]
 8029d86:	9b01      	ldr	r3, [sp, #4]
 8029d88:	f7d9 f8ca 	bl	8002f20 <__aeabi_dsub>
 8029d8c:	9a04      	ldr	r2, [sp, #16]
 8029d8e:	9b05      	ldr	r3, [sp, #20]
 8029d90:	f7d6 fbb2 	bl	80004f8 <__aeabi_dcmpge>
 8029d94:	2800      	cmp	r0, #0
 8029d96:	d1ec      	bne.n	8029d72 <__ieee754_pow+0x762>
 8029d98:	4b20      	ldr	r3, [pc, #128]	@ (8029e1c <__ieee754_pow+0x80c>)
 8029d9a:	e045      	b.n	8029e28 <__ieee754_pow+0x818>
 8029d9c:	7ff00000 	.word	0x7ff00000
 8029da0:	43400000 	.word	0x43400000
 8029da4:	fffffc01 	.word	0xfffffc01
 8029da8:	3ff00000 	.word	0x3ff00000
 8029dac:	0003988e 	.word	0x0003988e
 8029db0:	000bb679 	.word	0x000bb679
 8029db4:	fff00000 	.word	0xfff00000
 8029db8:	0802edb0 	.word	0x0802edb0
 8029dbc:	4a454eef 	.word	0x4a454eef
 8029dc0:	3fca7e28 	.word	0x3fca7e28
 8029dc4:	93c9db65 	.word	0x93c9db65
 8029dc8:	3fcd864a 	.word	0x3fcd864a
 8029dcc:	a91d4101 	.word	0xa91d4101
 8029dd0:	3fd17460 	.word	0x3fd17460
 8029dd4:	518f264d 	.word	0x518f264d
 8029dd8:	3fd55555 	.word	0x3fd55555
 8029ddc:	db6fabff 	.word	0xdb6fabff
 8029de0:	3fdb6db6 	.word	0x3fdb6db6
 8029de4:	33333303 	.word	0x33333303
 8029de8:	3fe33333 	.word	0x3fe33333
 8029dec:	40080000 	.word	0x40080000
 8029df0:	3feec709 	.word	0x3feec709
 8029df4:	dc3a03fd 	.word	0xdc3a03fd
 8029df8:	145b01f5 	.word	0x145b01f5
 8029dfc:	be3e2fe0 	.word	0xbe3e2fe0
 8029e00:	0802ed90 	.word	0x0802ed90
 8029e04:	0802eda0 	.word	0x0802eda0
 8029e08:	652b82fe 	.word	0x652b82fe
 8029e0c:	3c971547 	.word	0x3c971547
 8029e10:	40900000 	.word	0x40900000
 8029e14:	4090cbff 	.word	0x4090cbff
 8029e18:	3f6f3400 	.word	0x3f6f3400
 8029e1c:	4090cc00 	.word	0x4090cc00
 8029e20:	4a73      	ldr	r2, [pc, #460]	@ (8029ff0 <__ieee754_pow+0x9e0>)
 8029e22:	9402      	str	r4, [sp, #8]
 8029e24:	4293      	cmp	r3, r2
 8029e26:	d925      	bls.n	8029e74 <__ieee754_pow+0x864>
 8029e28:	4a72      	ldr	r2, [pc, #456]	@ (8029ff4 <__ieee754_pow+0x9e4>)
 8029e2a:	151b      	asrs	r3, r3, #20
 8029e2c:	189b      	adds	r3, r3, r2
 8029e2e:	2280      	movs	r2, #128	@ 0x80
 8029e30:	0352      	lsls	r2, r2, #13
 8029e32:	0011      	movs	r1, r2
 8029e34:	4119      	asrs	r1, r3
 8029e36:	19cb      	adds	r3, r1, r7
 8029e38:	005c      	lsls	r4, r3, #1
 8029e3a:	496f      	ldr	r1, [pc, #444]	@ (8029ff8 <__ieee754_pow+0x9e8>)
 8029e3c:	4d6f      	ldr	r5, [pc, #444]	@ (8029ffc <__ieee754_pow+0x9ec>)
 8029e3e:	0d64      	lsrs	r4, r4, #21
 8029e40:	1864      	adds	r4, r4, r1
 8029e42:	4125      	asrs	r5, r4
 8029e44:	401d      	ands	r5, r3
 8029e46:	031b      	lsls	r3, r3, #12
 8029e48:	0b1b      	lsrs	r3, r3, #12
 8029e4a:	4313      	orrs	r3, r2
 8029e4c:	2214      	movs	r2, #20
 8029e4e:	1b12      	subs	r2, r2, r4
 8029e50:	4113      	asrs	r3, r2
 8029e52:	9302      	str	r3, [sp, #8]
 8029e54:	9b08      	ldr	r3, [sp, #32]
 8029e56:	2000      	movs	r0, #0
 8029e58:	0029      	movs	r1, r5
 8029e5a:	2b00      	cmp	r3, #0
 8029e5c:	da02      	bge.n	8029e64 <__ieee754_pow+0x854>
 8029e5e:	9b02      	ldr	r3, [sp, #8]
 8029e60:	425b      	negs	r3, r3
 8029e62:	9302      	str	r3, [sp, #8]
 8029e64:	0002      	movs	r2, r0
 8029e66:	000b      	movs	r3, r1
 8029e68:	9800      	ldr	r0, [sp, #0]
 8029e6a:	9901      	ldr	r1, [sp, #4]
 8029e6c:	f7d9 f858 	bl	8002f20 <__aeabi_dsub>
 8029e70:	9000      	str	r0, [sp, #0]
 8029e72:	9101      	str	r1, [sp, #4]
 8029e74:	9a04      	ldr	r2, [sp, #16]
 8029e76:	9b05      	ldr	r3, [sp, #20]
 8029e78:	9800      	ldr	r0, [sp, #0]
 8029e7a:	9901      	ldr	r1, [sp, #4]
 8029e7c:	f7d7 fd6a 	bl	8001954 <__aeabi_dadd>
 8029e80:	2000      	movs	r0, #0
 8029e82:	2200      	movs	r2, #0
 8029e84:	4b5e      	ldr	r3, [pc, #376]	@ (802a000 <__ieee754_pow+0x9f0>)
 8029e86:	0006      	movs	r6, r0
 8029e88:	000f      	movs	r7, r1
 8029e8a:	f7d8 fd63 	bl	8002954 <__aeabi_dmul>
 8029e8e:	9a00      	ldr	r2, [sp, #0]
 8029e90:	9b01      	ldr	r3, [sp, #4]
 8029e92:	9008      	str	r0, [sp, #32]
 8029e94:	9109      	str	r1, [sp, #36]	@ 0x24
 8029e96:	0030      	movs	r0, r6
 8029e98:	0039      	movs	r1, r7
 8029e9a:	f7d9 f841 	bl	8002f20 <__aeabi_dsub>
 8029e9e:	0002      	movs	r2, r0
 8029ea0:	000b      	movs	r3, r1
 8029ea2:	9804      	ldr	r0, [sp, #16]
 8029ea4:	9905      	ldr	r1, [sp, #20]
 8029ea6:	f7d9 f83b 	bl	8002f20 <__aeabi_dsub>
 8029eaa:	4a56      	ldr	r2, [pc, #344]	@ (802a004 <__ieee754_pow+0x9f4>)
 8029eac:	4b56      	ldr	r3, [pc, #344]	@ (802a008 <__ieee754_pow+0x9f8>)
 8029eae:	f7d8 fd51 	bl	8002954 <__aeabi_dmul>
 8029eb2:	4a56      	ldr	r2, [pc, #344]	@ (802a00c <__ieee754_pow+0x9fc>)
 8029eb4:	0004      	movs	r4, r0
 8029eb6:	000d      	movs	r5, r1
 8029eb8:	0030      	movs	r0, r6
 8029eba:	0039      	movs	r1, r7
 8029ebc:	4b54      	ldr	r3, [pc, #336]	@ (802a010 <__ieee754_pow+0xa00>)
 8029ebe:	f7d8 fd49 	bl	8002954 <__aeabi_dmul>
 8029ec2:	0002      	movs	r2, r0
 8029ec4:	000b      	movs	r3, r1
 8029ec6:	0020      	movs	r0, r4
 8029ec8:	0029      	movs	r1, r5
 8029eca:	f7d7 fd43 	bl	8001954 <__aeabi_dadd>
 8029ece:	0004      	movs	r4, r0
 8029ed0:	000d      	movs	r5, r1
 8029ed2:	0002      	movs	r2, r0
 8029ed4:	000b      	movs	r3, r1
 8029ed6:	9808      	ldr	r0, [sp, #32]
 8029ed8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029eda:	f7d7 fd3b 	bl	8001954 <__aeabi_dadd>
 8029ede:	9a08      	ldr	r2, [sp, #32]
 8029ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029ee2:	0006      	movs	r6, r0
 8029ee4:	000f      	movs	r7, r1
 8029ee6:	f7d9 f81b 	bl	8002f20 <__aeabi_dsub>
 8029eea:	0002      	movs	r2, r0
 8029eec:	000b      	movs	r3, r1
 8029eee:	0020      	movs	r0, r4
 8029ef0:	0029      	movs	r1, r5
 8029ef2:	f7d9 f815 	bl	8002f20 <__aeabi_dsub>
 8029ef6:	0032      	movs	r2, r6
 8029ef8:	9000      	str	r0, [sp, #0]
 8029efa:	9101      	str	r1, [sp, #4]
 8029efc:	003b      	movs	r3, r7
 8029efe:	0030      	movs	r0, r6
 8029f00:	0039      	movs	r1, r7
 8029f02:	f7d8 fd27 	bl	8002954 <__aeabi_dmul>
 8029f06:	0004      	movs	r4, r0
 8029f08:	000d      	movs	r5, r1
 8029f0a:	4a42      	ldr	r2, [pc, #264]	@ (802a014 <__ieee754_pow+0xa04>)
 8029f0c:	4b42      	ldr	r3, [pc, #264]	@ (802a018 <__ieee754_pow+0xa08>)
 8029f0e:	f7d8 fd21 	bl	8002954 <__aeabi_dmul>
 8029f12:	4a42      	ldr	r2, [pc, #264]	@ (802a01c <__ieee754_pow+0xa0c>)
 8029f14:	4b42      	ldr	r3, [pc, #264]	@ (802a020 <__ieee754_pow+0xa10>)
 8029f16:	f7d9 f803 	bl	8002f20 <__aeabi_dsub>
 8029f1a:	0022      	movs	r2, r4
 8029f1c:	002b      	movs	r3, r5
 8029f1e:	f7d8 fd19 	bl	8002954 <__aeabi_dmul>
 8029f22:	4a40      	ldr	r2, [pc, #256]	@ (802a024 <__ieee754_pow+0xa14>)
 8029f24:	4b40      	ldr	r3, [pc, #256]	@ (802a028 <__ieee754_pow+0xa18>)
 8029f26:	f7d7 fd15 	bl	8001954 <__aeabi_dadd>
 8029f2a:	0022      	movs	r2, r4
 8029f2c:	002b      	movs	r3, r5
 8029f2e:	f7d8 fd11 	bl	8002954 <__aeabi_dmul>
 8029f32:	4a3e      	ldr	r2, [pc, #248]	@ (802a02c <__ieee754_pow+0xa1c>)
 8029f34:	4b3e      	ldr	r3, [pc, #248]	@ (802a030 <__ieee754_pow+0xa20>)
 8029f36:	f7d8 fff3 	bl	8002f20 <__aeabi_dsub>
 8029f3a:	0022      	movs	r2, r4
 8029f3c:	002b      	movs	r3, r5
 8029f3e:	f7d8 fd09 	bl	8002954 <__aeabi_dmul>
 8029f42:	4a3c      	ldr	r2, [pc, #240]	@ (802a034 <__ieee754_pow+0xa24>)
 8029f44:	4b3c      	ldr	r3, [pc, #240]	@ (802a038 <__ieee754_pow+0xa28>)
 8029f46:	f7d7 fd05 	bl	8001954 <__aeabi_dadd>
 8029f4a:	0022      	movs	r2, r4
 8029f4c:	002b      	movs	r3, r5
 8029f4e:	f7d8 fd01 	bl	8002954 <__aeabi_dmul>
 8029f52:	0002      	movs	r2, r0
 8029f54:	000b      	movs	r3, r1
 8029f56:	0030      	movs	r0, r6
 8029f58:	0039      	movs	r1, r7
 8029f5a:	f7d8 ffe1 	bl	8002f20 <__aeabi_dsub>
 8029f5e:	0004      	movs	r4, r0
 8029f60:	000d      	movs	r5, r1
 8029f62:	0002      	movs	r2, r0
 8029f64:	000b      	movs	r3, r1
 8029f66:	0030      	movs	r0, r6
 8029f68:	0039      	movs	r1, r7
 8029f6a:	f7d8 fcf3 	bl	8002954 <__aeabi_dmul>
 8029f6e:	2380      	movs	r3, #128	@ 0x80
 8029f70:	9004      	str	r0, [sp, #16]
 8029f72:	9105      	str	r1, [sp, #20]
 8029f74:	2200      	movs	r2, #0
 8029f76:	0020      	movs	r0, r4
 8029f78:	0029      	movs	r1, r5
 8029f7a:	05db      	lsls	r3, r3, #23
 8029f7c:	f7d8 ffd0 	bl	8002f20 <__aeabi_dsub>
 8029f80:	0002      	movs	r2, r0
 8029f82:	000b      	movs	r3, r1
 8029f84:	9804      	ldr	r0, [sp, #16]
 8029f86:	9905      	ldr	r1, [sp, #20]
 8029f88:	f7d8 f8aa 	bl	80020e0 <__aeabi_ddiv>
 8029f8c:	9a00      	ldr	r2, [sp, #0]
 8029f8e:	9b01      	ldr	r3, [sp, #4]
 8029f90:	0004      	movs	r4, r0
 8029f92:	000d      	movs	r5, r1
 8029f94:	0030      	movs	r0, r6
 8029f96:	0039      	movs	r1, r7
 8029f98:	f7d8 fcdc 	bl	8002954 <__aeabi_dmul>
 8029f9c:	9a00      	ldr	r2, [sp, #0]
 8029f9e:	9b01      	ldr	r3, [sp, #4]
 8029fa0:	f7d7 fcd8 	bl	8001954 <__aeabi_dadd>
 8029fa4:	0002      	movs	r2, r0
 8029fa6:	000b      	movs	r3, r1
 8029fa8:	0020      	movs	r0, r4
 8029faa:	0029      	movs	r1, r5
 8029fac:	f7d8 ffb8 	bl	8002f20 <__aeabi_dsub>
 8029fb0:	0032      	movs	r2, r6
 8029fb2:	003b      	movs	r3, r7
 8029fb4:	f7d8 ffb4 	bl	8002f20 <__aeabi_dsub>
 8029fb8:	0002      	movs	r2, r0
 8029fba:	000b      	movs	r3, r1
 8029fbc:	2000      	movs	r0, #0
 8029fbe:	491f      	ldr	r1, [pc, #124]	@ (802a03c <__ieee754_pow+0xa2c>)
 8029fc0:	f7d8 ffae 	bl	8002f20 <__aeabi_dsub>
 8029fc4:	9b02      	ldr	r3, [sp, #8]
 8029fc6:	051b      	lsls	r3, r3, #20
 8029fc8:	185b      	adds	r3, r3, r1
 8029fca:	151a      	asrs	r2, r3, #20
 8029fcc:	2a00      	cmp	r2, #0
 8029fce:	dc06      	bgt.n	8029fde <__ieee754_pow+0x9ce>
 8029fd0:	9a02      	ldr	r2, [sp, #8]
 8029fd2:	f000 f929 	bl	802a228 <scalbn>
 8029fd6:	9a06      	ldr	r2, [sp, #24]
 8029fd8:	9b07      	ldr	r3, [sp, #28]
 8029fda:	f7ff fb8b 	bl	80296f4 <__ieee754_pow+0xe4>
 8029fde:	0019      	movs	r1, r3
 8029fe0:	e7f9      	b.n	8029fd6 <__ieee754_pow+0x9c6>
 8029fe2:	2300      	movs	r3, #0
 8029fe4:	4c15      	ldr	r4, [pc, #84]	@ (802a03c <__ieee754_pow+0xa2c>)
 8029fe6:	9300      	str	r3, [sp, #0]
 8029fe8:	9401      	str	r4, [sp, #4]
 8029fea:	f7ff fbc8 	bl	802977e <__ieee754_pow+0x16e>
 8029fee:	46c0      	nop			@ (mov r8, r8)
 8029ff0:	3fe00000 	.word	0x3fe00000
 8029ff4:	fffffc02 	.word	0xfffffc02
 8029ff8:	fffffc01 	.word	0xfffffc01
 8029ffc:	fff00000 	.word	0xfff00000
 802a000:	3fe62e43 	.word	0x3fe62e43
 802a004:	fefa39ef 	.word	0xfefa39ef
 802a008:	3fe62e42 	.word	0x3fe62e42
 802a00c:	0ca86c39 	.word	0x0ca86c39
 802a010:	be205c61 	.word	0xbe205c61
 802a014:	72bea4d0 	.word	0x72bea4d0
 802a018:	3e663769 	.word	0x3e663769
 802a01c:	c5d26bf1 	.word	0xc5d26bf1
 802a020:	3ebbbd41 	.word	0x3ebbbd41
 802a024:	af25de2c 	.word	0xaf25de2c
 802a028:	3f11566a 	.word	0x3f11566a
 802a02c:	16bebd93 	.word	0x16bebd93
 802a030:	3f66c16c 	.word	0x3f66c16c
 802a034:	5555553e 	.word	0x5555553e
 802a038:	3fc55555 	.word	0x3fc55555
 802a03c:	3ff00000 	.word	0x3ff00000

0802a040 <fabs>:
 802a040:	0049      	lsls	r1, r1, #1
 802a042:	084b      	lsrs	r3, r1, #1
 802a044:	0019      	movs	r1, r3
 802a046:	4770      	bx	lr

0802a048 <__ieee754_expf>:
 802a048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a04a:	21ff      	movs	r1, #255	@ 0xff
 802a04c:	0043      	lsls	r3, r0, #1
 802a04e:	1c04      	adds	r4, r0, #0
 802a050:	085b      	lsrs	r3, r3, #1
 802a052:	05c9      	lsls	r1, r1, #23
 802a054:	428b      	cmp	r3, r1
 802a056:	d904      	bls.n	802a062 <__ieee754_expf+0x1a>
 802a058:	1c01      	adds	r1, r0, #0
 802a05a:	1c20      	adds	r0, r4, #0
 802a05c:	f7d6 fc30 	bl	80008c0 <__aeabi_fadd>
 802a060:	e00d      	b.n	802a07e <__ieee754_expf+0x36>
 802a062:	0fc6      	lsrs	r6, r0, #31
 802a064:	428b      	cmp	r3, r1
 802a066:	d104      	bne.n	802a072 <__ieee754_expf+0x2a>
 802a068:	2e00      	cmp	r6, #0
 802a06a:	d000      	beq.n	802a06e <__ieee754_expf+0x26>
 802a06c:	e0ba      	b.n	802a1e4 <__ieee754_expf+0x19c>
 802a06e:	1c20      	adds	r0, r4, #0
 802a070:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802a072:	495d      	ldr	r1, [pc, #372]	@ (802a1e8 <__ieee754_expf+0x1a0>)
 802a074:	4288      	cmp	r0, r1
 802a076:	dd04      	ble.n	802a082 <__ieee754_expf+0x3a>
 802a078:	2000      	movs	r0, #0
 802a07a:	f000 f98a 	bl	802a392 <__math_oflowf>
 802a07e:	1c04      	adds	r4, r0, #0
 802a080:	e7f5      	b.n	802a06e <__ieee754_expf+0x26>
 802a082:	2800      	cmp	r0, #0
 802a084:	da06      	bge.n	802a094 <__ieee754_expf+0x4c>
 802a086:	4a59      	ldr	r2, [pc, #356]	@ (802a1ec <__ieee754_expf+0x1a4>)
 802a088:	4293      	cmp	r3, r2
 802a08a:	d903      	bls.n	802a094 <__ieee754_expf+0x4c>
 802a08c:	2000      	movs	r0, #0
 802a08e:	f000 f97a 	bl	802a386 <__math_uflowf>
 802a092:	e7f4      	b.n	802a07e <__ieee754_expf+0x36>
 802a094:	4a56      	ldr	r2, [pc, #344]	@ (802a1f0 <__ieee754_expf+0x1a8>)
 802a096:	4293      	cmp	r3, r2
 802a098:	d96e      	bls.n	802a178 <__ieee754_expf+0x130>
 802a09a:	4a56      	ldr	r2, [pc, #344]	@ (802a1f4 <__ieee754_expf+0x1ac>)
 802a09c:	00b5      	lsls	r5, r6, #2
 802a09e:	4293      	cmp	r3, r2
 802a0a0:	d84e      	bhi.n	802a140 <__ieee754_expf+0xf8>
 802a0a2:	4b55      	ldr	r3, [pc, #340]	@ (802a1f8 <__ieee754_expf+0x1b0>)
 802a0a4:	1c20      	adds	r0, r4, #0
 802a0a6:	5959      	ldr	r1, [r3, r5]
 802a0a8:	f7d7 f924 	bl	80012f4 <__aeabi_fsub>
 802a0ac:	4b53      	ldr	r3, [pc, #332]	@ (802a1fc <__ieee754_expf+0x1b4>)
 802a0ae:	1c07      	adds	r7, r0, #0
 802a0b0:	595b      	ldr	r3, [r3, r5]
 802a0b2:	2501      	movs	r5, #1
 802a0b4:	4075      	eors	r5, r6
 802a0b6:	9300      	str	r3, [sp, #0]
 802a0b8:	1bad      	subs	r5, r5, r6
 802a0ba:	9900      	ldr	r1, [sp, #0]
 802a0bc:	1c38      	adds	r0, r7, #0
 802a0be:	f7d7 f919 	bl	80012f4 <__aeabi_fsub>
 802a0c2:	1c04      	adds	r4, r0, #0
 802a0c4:	1c21      	adds	r1, r4, #0
 802a0c6:	1c20      	adds	r0, r4, #0
 802a0c8:	f7d6 ffba 	bl	8001040 <__aeabi_fmul>
 802a0cc:	494c      	ldr	r1, [pc, #304]	@ (802a200 <__ieee754_expf+0x1b8>)
 802a0ce:	1c06      	adds	r6, r0, #0
 802a0d0:	f7d6 ffb6 	bl	8001040 <__aeabi_fmul>
 802a0d4:	494b      	ldr	r1, [pc, #300]	@ (802a204 <__ieee754_expf+0x1bc>)
 802a0d6:	f7d7 f90d 	bl	80012f4 <__aeabi_fsub>
 802a0da:	1c31      	adds	r1, r6, #0
 802a0dc:	f7d6 ffb0 	bl	8001040 <__aeabi_fmul>
 802a0e0:	4949      	ldr	r1, [pc, #292]	@ (802a208 <__ieee754_expf+0x1c0>)
 802a0e2:	f7d6 fbed 	bl	80008c0 <__aeabi_fadd>
 802a0e6:	1c31      	adds	r1, r6, #0
 802a0e8:	f7d6 ffaa 	bl	8001040 <__aeabi_fmul>
 802a0ec:	4947      	ldr	r1, [pc, #284]	@ (802a20c <__ieee754_expf+0x1c4>)
 802a0ee:	f7d7 f901 	bl	80012f4 <__aeabi_fsub>
 802a0f2:	1c31      	adds	r1, r6, #0
 802a0f4:	f7d6 ffa4 	bl	8001040 <__aeabi_fmul>
 802a0f8:	4945      	ldr	r1, [pc, #276]	@ (802a210 <__ieee754_expf+0x1c8>)
 802a0fa:	f7d6 fbe1 	bl	80008c0 <__aeabi_fadd>
 802a0fe:	1c31      	adds	r1, r6, #0
 802a100:	f7d6 ff9e 	bl	8001040 <__aeabi_fmul>
 802a104:	1c01      	adds	r1, r0, #0
 802a106:	1c20      	adds	r0, r4, #0
 802a108:	f7d7 f8f4 	bl	80012f4 <__aeabi_fsub>
 802a10c:	1c01      	adds	r1, r0, #0
 802a10e:	1c06      	adds	r6, r0, #0
 802a110:	1c20      	adds	r0, r4, #0
 802a112:	f7d6 ff95 	bl	8001040 <__aeabi_fmul>
 802a116:	9001      	str	r0, [sp, #4]
 802a118:	2d00      	cmp	r5, #0
 802a11a:	d140      	bne.n	802a19e <__ieee754_expf+0x156>
 802a11c:	2180      	movs	r1, #128	@ 0x80
 802a11e:	1c30      	adds	r0, r6, #0
 802a120:	05c9      	lsls	r1, r1, #23
 802a122:	f7d7 f8e7 	bl	80012f4 <__aeabi_fsub>
 802a126:	1c01      	adds	r1, r0, #0
 802a128:	9801      	ldr	r0, [sp, #4]
 802a12a:	f7d6 fdbb 	bl	8000ca4 <__aeabi_fdiv>
 802a12e:	1c21      	adds	r1, r4, #0
 802a130:	f7d7 f8e0 	bl	80012f4 <__aeabi_fsub>
 802a134:	1c01      	adds	r1, r0, #0
 802a136:	20fe      	movs	r0, #254	@ 0xfe
 802a138:	0580      	lsls	r0, r0, #22
 802a13a:	f7d7 f8db 	bl	80012f4 <__aeabi_fsub>
 802a13e:	e79e      	b.n	802a07e <__ieee754_expf+0x36>
 802a140:	4934      	ldr	r1, [pc, #208]	@ (802a214 <__ieee754_expf+0x1cc>)
 802a142:	1c20      	adds	r0, r4, #0
 802a144:	f7d6 ff7c 	bl	8001040 <__aeabi_fmul>
 802a148:	4b33      	ldr	r3, [pc, #204]	@ (802a218 <__ieee754_expf+0x1d0>)
 802a14a:	5959      	ldr	r1, [r3, r5]
 802a14c:	f7d6 fbb8 	bl	80008c0 <__aeabi_fadd>
 802a150:	f7d7 fb4a 	bl	80017e8 <__aeabi_f2iz>
 802a154:	0005      	movs	r5, r0
 802a156:	f7d7 fb67 	bl	8001828 <__aeabi_i2f>
 802a15a:	4930      	ldr	r1, [pc, #192]	@ (802a21c <__ieee754_expf+0x1d4>)
 802a15c:	1c06      	adds	r6, r0, #0
 802a15e:	f7d6 ff6f 	bl	8001040 <__aeabi_fmul>
 802a162:	1c01      	adds	r1, r0, #0
 802a164:	1c20      	adds	r0, r4, #0
 802a166:	f7d7 f8c5 	bl	80012f4 <__aeabi_fsub>
 802a16a:	492d      	ldr	r1, [pc, #180]	@ (802a220 <__ieee754_expf+0x1d8>)
 802a16c:	1c07      	adds	r7, r0, #0
 802a16e:	1c30      	adds	r0, r6, #0
 802a170:	f7d6 ff66 	bl	8001040 <__aeabi_fmul>
 802a174:	9000      	str	r0, [sp, #0]
 802a176:	e7a0      	b.n	802a0ba <__ieee754_expf+0x72>
 802a178:	22d0      	movs	r2, #208	@ 0xd0
 802a17a:	0592      	lsls	r2, r2, #22
 802a17c:	4293      	cmp	r3, r2
 802a17e:	d20c      	bcs.n	802a19a <__ieee754_expf+0x152>
 802a180:	4928      	ldr	r1, [pc, #160]	@ (802a224 <__ieee754_expf+0x1dc>)
 802a182:	1c20      	adds	r0, r4, #0
 802a184:	f7d6 fb9c 	bl	80008c0 <__aeabi_fadd>
 802a188:	21fe      	movs	r1, #254	@ 0xfe
 802a18a:	0589      	lsls	r1, r1, #22
 802a18c:	f7d6 f9e4 	bl	8000558 <__aeabi_fcmpgt>
 802a190:	1e05      	subs	r5, r0, #0
 802a192:	d097      	beq.n	802a0c4 <__ieee754_expf+0x7c>
 802a194:	21fe      	movs	r1, #254	@ 0xfe
 802a196:	0589      	lsls	r1, r1, #22
 802a198:	e75f      	b.n	802a05a <__ieee754_expf+0x12>
 802a19a:	2500      	movs	r5, #0
 802a19c:	e792      	b.n	802a0c4 <__ieee754_expf+0x7c>
 802a19e:	2080      	movs	r0, #128	@ 0x80
 802a1a0:	1c31      	adds	r1, r6, #0
 802a1a2:	05c0      	lsls	r0, r0, #23
 802a1a4:	f7d7 f8a6 	bl	80012f4 <__aeabi_fsub>
 802a1a8:	1c01      	adds	r1, r0, #0
 802a1aa:	9801      	ldr	r0, [sp, #4]
 802a1ac:	f7d6 fd7a 	bl	8000ca4 <__aeabi_fdiv>
 802a1b0:	1c01      	adds	r1, r0, #0
 802a1b2:	9800      	ldr	r0, [sp, #0]
 802a1b4:	f7d7 f89e 	bl	80012f4 <__aeabi_fsub>
 802a1b8:	1c39      	adds	r1, r7, #0
 802a1ba:	f7d7 f89b 	bl	80012f4 <__aeabi_fsub>
 802a1be:	1c01      	adds	r1, r0, #0
 802a1c0:	20fe      	movs	r0, #254	@ 0xfe
 802a1c2:	0580      	lsls	r0, r0, #22
 802a1c4:	f7d7 f896 	bl	80012f4 <__aeabi_fsub>
 802a1c8:	002b      	movs	r3, r5
 802a1ca:	337d      	adds	r3, #125	@ 0x7d
 802a1cc:	db02      	blt.n	802a1d4 <__ieee754_expf+0x18c>
 802a1ce:	05ec      	lsls	r4, r5, #23
 802a1d0:	1824      	adds	r4, r4, r0
 802a1d2:	e74c      	b.n	802a06e <__ieee754_expf+0x26>
 802a1d4:	21d8      	movs	r1, #216	@ 0xd8
 802a1d6:	3564      	adds	r5, #100	@ 0x64
 802a1d8:	05ed      	lsls	r5, r5, #23
 802a1da:	1828      	adds	r0, r5, r0
 802a1dc:	0509      	lsls	r1, r1, #20
 802a1de:	f7d6 ff2f 	bl	8001040 <__aeabi_fmul>
 802a1e2:	e74c      	b.n	802a07e <__ieee754_expf+0x36>
 802a1e4:	2400      	movs	r4, #0
 802a1e6:	e742      	b.n	802a06e <__ieee754_expf+0x26>
 802a1e8:	42b17217 	.word	0x42b17217
 802a1ec:	42cff1b5 	.word	0x42cff1b5
 802a1f0:	3eb17218 	.word	0x3eb17218
 802a1f4:	3f851591 	.word	0x3f851591
 802a1f8:	0802edc8 	.word	0x0802edc8
 802a1fc:	0802edc0 	.word	0x0802edc0
 802a200:	3331bb4c 	.word	0x3331bb4c
 802a204:	35ddea0e 	.word	0x35ddea0e
 802a208:	388ab355 	.word	0x388ab355
 802a20c:	3b360b61 	.word	0x3b360b61
 802a210:	3e2aaaab 	.word	0x3e2aaaab
 802a214:	3fb8aa3b 	.word	0x3fb8aa3b
 802a218:	0802edd0 	.word	0x0802edd0
 802a21c:	3f317180 	.word	0x3f317180
 802a220:	3717f7d1 	.word	0x3717f7d1
 802a224:	7149f2ca 	.word	0x7149f2ca

0802a228 <scalbn>:
 802a228:	004b      	lsls	r3, r1, #1
 802a22a:	b570      	push	{r4, r5, r6, lr}
 802a22c:	0d5b      	lsrs	r3, r3, #21
 802a22e:	0014      	movs	r4, r2
 802a230:	000d      	movs	r5, r1
 802a232:	2b00      	cmp	r3, #0
 802a234:	d10f      	bne.n	802a256 <scalbn+0x2e>
 802a236:	004b      	lsls	r3, r1, #1
 802a238:	085b      	lsrs	r3, r3, #1
 802a23a:	4303      	orrs	r3, r0
 802a23c:	d012      	beq.n	802a264 <scalbn+0x3c>
 802a23e:	4b23      	ldr	r3, [pc, #140]	@ (802a2cc <scalbn+0xa4>)
 802a240:	2200      	movs	r2, #0
 802a242:	f7d8 fb87 	bl	8002954 <__aeabi_dmul>
 802a246:	4b22      	ldr	r3, [pc, #136]	@ (802a2d0 <scalbn+0xa8>)
 802a248:	429c      	cmp	r4, r3
 802a24a:	da0c      	bge.n	802a266 <scalbn+0x3e>
 802a24c:	4a21      	ldr	r2, [pc, #132]	@ (802a2d4 <scalbn+0xac>)
 802a24e:	4b22      	ldr	r3, [pc, #136]	@ (802a2d8 <scalbn+0xb0>)
 802a250:	f7d8 fb80 	bl	8002954 <__aeabi_dmul>
 802a254:	e006      	b.n	802a264 <scalbn+0x3c>
 802a256:	4a21      	ldr	r2, [pc, #132]	@ (802a2dc <scalbn+0xb4>)
 802a258:	4293      	cmp	r3, r2
 802a25a:	d108      	bne.n	802a26e <scalbn+0x46>
 802a25c:	0002      	movs	r2, r0
 802a25e:	000b      	movs	r3, r1
 802a260:	f7d7 fb78 	bl	8001954 <__aeabi_dadd>
 802a264:	bd70      	pop	{r4, r5, r6, pc}
 802a266:	000d      	movs	r5, r1
 802a268:	004b      	lsls	r3, r1, #1
 802a26a:	0d5b      	lsrs	r3, r3, #21
 802a26c:	3b36      	subs	r3, #54	@ 0x36
 802a26e:	4a1c      	ldr	r2, [pc, #112]	@ (802a2e0 <scalbn+0xb8>)
 802a270:	4294      	cmp	r4, r2
 802a272:	dd0a      	ble.n	802a28a <scalbn+0x62>
 802a274:	4c1b      	ldr	r4, [pc, #108]	@ (802a2e4 <scalbn+0xbc>)
 802a276:	4d1c      	ldr	r5, [pc, #112]	@ (802a2e8 <scalbn+0xc0>)
 802a278:	2900      	cmp	r1, #0
 802a27a:	da01      	bge.n	802a280 <scalbn+0x58>
 802a27c:	4c19      	ldr	r4, [pc, #100]	@ (802a2e4 <scalbn+0xbc>)
 802a27e:	4d1b      	ldr	r5, [pc, #108]	@ (802a2ec <scalbn+0xc4>)
 802a280:	4a18      	ldr	r2, [pc, #96]	@ (802a2e4 <scalbn+0xbc>)
 802a282:	4b19      	ldr	r3, [pc, #100]	@ (802a2e8 <scalbn+0xc0>)
 802a284:	0020      	movs	r0, r4
 802a286:	0029      	movs	r1, r5
 802a288:	e7e2      	b.n	802a250 <scalbn+0x28>
 802a28a:	18e2      	adds	r2, r4, r3
 802a28c:	4b18      	ldr	r3, [pc, #96]	@ (802a2f0 <scalbn+0xc8>)
 802a28e:	429a      	cmp	r2, r3
 802a290:	dcf0      	bgt.n	802a274 <scalbn+0x4c>
 802a292:	2a00      	cmp	r2, #0
 802a294:	dd05      	ble.n	802a2a2 <scalbn+0x7a>
 802a296:	4b17      	ldr	r3, [pc, #92]	@ (802a2f4 <scalbn+0xcc>)
 802a298:	0512      	lsls	r2, r2, #20
 802a29a:	402b      	ands	r3, r5
 802a29c:	4313      	orrs	r3, r2
 802a29e:	0019      	movs	r1, r3
 802a2a0:	e7e0      	b.n	802a264 <scalbn+0x3c>
 802a2a2:	0013      	movs	r3, r2
 802a2a4:	3335      	adds	r3, #53	@ 0x35
 802a2a6:	da08      	bge.n	802a2ba <scalbn+0x92>
 802a2a8:	4c0a      	ldr	r4, [pc, #40]	@ (802a2d4 <scalbn+0xac>)
 802a2aa:	4d0b      	ldr	r5, [pc, #44]	@ (802a2d8 <scalbn+0xb0>)
 802a2ac:	2900      	cmp	r1, #0
 802a2ae:	da01      	bge.n	802a2b4 <scalbn+0x8c>
 802a2b0:	4c08      	ldr	r4, [pc, #32]	@ (802a2d4 <scalbn+0xac>)
 802a2b2:	4d11      	ldr	r5, [pc, #68]	@ (802a2f8 <scalbn+0xd0>)
 802a2b4:	4a07      	ldr	r2, [pc, #28]	@ (802a2d4 <scalbn+0xac>)
 802a2b6:	4b08      	ldr	r3, [pc, #32]	@ (802a2d8 <scalbn+0xb0>)
 802a2b8:	e7e4      	b.n	802a284 <scalbn+0x5c>
 802a2ba:	4b0e      	ldr	r3, [pc, #56]	@ (802a2f4 <scalbn+0xcc>)
 802a2bc:	3236      	adds	r2, #54	@ 0x36
 802a2be:	401d      	ands	r5, r3
 802a2c0:	0512      	lsls	r2, r2, #20
 802a2c2:	432a      	orrs	r2, r5
 802a2c4:	0011      	movs	r1, r2
 802a2c6:	4b0d      	ldr	r3, [pc, #52]	@ (802a2fc <scalbn+0xd4>)
 802a2c8:	2200      	movs	r2, #0
 802a2ca:	e7c1      	b.n	802a250 <scalbn+0x28>
 802a2cc:	43500000 	.word	0x43500000
 802a2d0:	ffff3cb0 	.word	0xffff3cb0
 802a2d4:	c2f8f359 	.word	0xc2f8f359
 802a2d8:	01a56e1f 	.word	0x01a56e1f
 802a2dc:	000007ff 	.word	0x000007ff
 802a2e0:	0000c350 	.word	0x0000c350
 802a2e4:	8800759c 	.word	0x8800759c
 802a2e8:	7e37e43c 	.word	0x7e37e43c
 802a2ec:	fe37e43c 	.word	0xfe37e43c
 802a2f0:	000007fe 	.word	0x000007fe
 802a2f4:	800fffff 	.word	0x800fffff
 802a2f8:	81a56e1f 	.word	0x81a56e1f
 802a2fc:	3c900000 	.word	0x3c900000

0802a300 <with_errno>:
 802a300:	b570      	push	{r4, r5, r6, lr}
 802a302:	000d      	movs	r5, r1
 802a304:	0016      	movs	r6, r2
 802a306:	0004      	movs	r4, r0
 802a308:	f7fc f952 	bl	80265b0 <__errno>
 802a30c:	0029      	movs	r1, r5
 802a30e:	6006      	str	r6, [r0, #0]
 802a310:	0020      	movs	r0, r4
 802a312:	bd70      	pop	{r4, r5, r6, pc}

0802a314 <xflow>:
 802a314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a316:	0014      	movs	r4, r2
 802a318:	001d      	movs	r5, r3
 802a31a:	2800      	cmp	r0, #0
 802a31c:	d002      	beq.n	802a324 <xflow+0x10>
 802a31e:	2180      	movs	r1, #128	@ 0x80
 802a320:	0609      	lsls	r1, r1, #24
 802a322:	185b      	adds	r3, r3, r1
 802a324:	9200      	str	r2, [sp, #0]
 802a326:	9301      	str	r3, [sp, #4]
 802a328:	9a00      	ldr	r2, [sp, #0]
 802a32a:	9b01      	ldr	r3, [sp, #4]
 802a32c:	0020      	movs	r0, r4
 802a32e:	0029      	movs	r1, r5
 802a330:	f7d8 fb10 	bl	8002954 <__aeabi_dmul>
 802a334:	2222      	movs	r2, #34	@ 0x22
 802a336:	f7ff ffe3 	bl	802a300 <with_errno>
 802a33a:	b003      	add	sp, #12
 802a33c:	bd30      	pop	{r4, r5, pc}

0802a33e <__math_uflow>:
 802a33e:	2380      	movs	r3, #128	@ 0x80
 802a340:	b510      	push	{r4, lr}
 802a342:	2200      	movs	r2, #0
 802a344:	055b      	lsls	r3, r3, #21
 802a346:	f7ff ffe5 	bl	802a314 <xflow>
 802a34a:	bd10      	pop	{r4, pc}

0802a34c <__math_oflow>:
 802a34c:	23e0      	movs	r3, #224	@ 0xe0
 802a34e:	b510      	push	{r4, lr}
 802a350:	2200      	movs	r2, #0
 802a352:	05db      	lsls	r3, r3, #23
 802a354:	f7ff ffde 	bl	802a314 <xflow>
 802a358:	bd10      	pop	{r4, pc}

0802a35a <with_errnof>:
 802a35a:	b570      	push	{r4, r5, r6, lr}
 802a35c:	000d      	movs	r5, r1
 802a35e:	1c04      	adds	r4, r0, #0
 802a360:	f7fc f926 	bl	80265b0 <__errno>
 802a364:	6005      	str	r5, [r0, #0]
 802a366:	1c20      	adds	r0, r4, #0
 802a368:	bd70      	pop	{r4, r5, r6, pc}

0802a36a <xflowf>:
 802a36a:	b510      	push	{r4, lr}
 802a36c:	1c0b      	adds	r3, r1, #0
 802a36e:	2800      	cmp	r0, #0
 802a370:	d002      	beq.n	802a378 <xflowf+0xe>
 802a372:	2380      	movs	r3, #128	@ 0x80
 802a374:	061b      	lsls	r3, r3, #24
 802a376:	18cb      	adds	r3, r1, r3
 802a378:	1c18      	adds	r0, r3, #0
 802a37a:	f7d6 fe61 	bl	8001040 <__aeabi_fmul>
 802a37e:	2122      	movs	r1, #34	@ 0x22
 802a380:	f7ff ffeb 	bl	802a35a <with_errnof>
 802a384:	bd10      	pop	{r4, pc}

0802a386 <__math_uflowf>:
 802a386:	2180      	movs	r1, #128	@ 0x80
 802a388:	b510      	push	{r4, lr}
 802a38a:	0549      	lsls	r1, r1, #21
 802a38c:	f7ff ffed 	bl	802a36a <xflowf>
 802a390:	bd10      	pop	{r4, pc}

0802a392 <__math_oflowf>:
 802a392:	21e0      	movs	r1, #224	@ 0xe0
 802a394:	b510      	push	{r4, lr}
 802a396:	05c9      	lsls	r1, r1, #23
 802a398:	f7ff ffe7 	bl	802a36a <xflowf>
 802a39c:	bd10      	pop	{r4, pc}
	...

0802a3a0 <__ieee754_sqrt>:
 802a3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a3a2:	000a      	movs	r2, r1
 802a3a4:	000d      	movs	r5, r1
 802a3a6:	496b      	ldr	r1, [pc, #428]	@ (802a554 <__ieee754_sqrt+0x1b4>)
 802a3a8:	0004      	movs	r4, r0
 802a3aa:	0003      	movs	r3, r0
 802a3ac:	0008      	movs	r0, r1
 802a3ae:	b087      	sub	sp, #28
 802a3b0:	4028      	ands	r0, r5
 802a3b2:	4288      	cmp	r0, r1
 802a3b4:	d111      	bne.n	802a3da <__ieee754_sqrt+0x3a>
 802a3b6:	0022      	movs	r2, r4
 802a3b8:	002b      	movs	r3, r5
 802a3ba:	0020      	movs	r0, r4
 802a3bc:	0029      	movs	r1, r5
 802a3be:	f7d8 fac9 	bl	8002954 <__aeabi_dmul>
 802a3c2:	0002      	movs	r2, r0
 802a3c4:	000b      	movs	r3, r1
 802a3c6:	0020      	movs	r0, r4
 802a3c8:	0029      	movs	r1, r5
 802a3ca:	f7d7 fac3 	bl	8001954 <__aeabi_dadd>
 802a3ce:	0004      	movs	r4, r0
 802a3d0:	000d      	movs	r5, r1
 802a3d2:	0020      	movs	r0, r4
 802a3d4:	0029      	movs	r1, r5
 802a3d6:	b007      	add	sp, #28
 802a3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a3da:	2d00      	cmp	r5, #0
 802a3dc:	dc11      	bgt.n	802a402 <__ieee754_sqrt+0x62>
 802a3de:	0069      	lsls	r1, r5, #1
 802a3e0:	0849      	lsrs	r1, r1, #1
 802a3e2:	4321      	orrs	r1, r4
 802a3e4:	d0f5      	beq.n	802a3d2 <__ieee754_sqrt+0x32>
 802a3e6:	2000      	movs	r0, #0
 802a3e8:	4285      	cmp	r5, r0
 802a3ea:	d010      	beq.n	802a40e <__ieee754_sqrt+0x6e>
 802a3ec:	0022      	movs	r2, r4
 802a3ee:	002b      	movs	r3, r5
 802a3f0:	0020      	movs	r0, r4
 802a3f2:	0029      	movs	r1, r5
 802a3f4:	f7d8 fd94 	bl	8002f20 <__aeabi_dsub>
 802a3f8:	0002      	movs	r2, r0
 802a3fa:	000b      	movs	r3, r1
 802a3fc:	f7d7 fe70 	bl	80020e0 <__aeabi_ddiv>
 802a400:	e7e5      	b.n	802a3ce <__ieee754_sqrt+0x2e>
 802a402:	1528      	asrs	r0, r5, #20
 802a404:	d115      	bne.n	802a432 <__ieee754_sqrt+0x92>
 802a406:	2480      	movs	r4, #128	@ 0x80
 802a408:	2100      	movs	r1, #0
 802a40a:	0364      	lsls	r4, r4, #13
 802a40c:	e007      	b.n	802a41e <__ieee754_sqrt+0x7e>
 802a40e:	0ada      	lsrs	r2, r3, #11
 802a410:	3815      	subs	r0, #21
 802a412:	055b      	lsls	r3, r3, #21
 802a414:	2a00      	cmp	r2, #0
 802a416:	d0fa      	beq.n	802a40e <__ieee754_sqrt+0x6e>
 802a418:	e7f5      	b.n	802a406 <__ieee754_sqrt+0x66>
 802a41a:	0052      	lsls	r2, r2, #1
 802a41c:	3101      	adds	r1, #1
 802a41e:	4222      	tst	r2, r4
 802a420:	d0fb      	beq.n	802a41a <__ieee754_sqrt+0x7a>
 802a422:	1e4c      	subs	r4, r1, #1
 802a424:	1b00      	subs	r0, r0, r4
 802a426:	2420      	movs	r4, #32
 802a428:	001d      	movs	r5, r3
 802a42a:	1a64      	subs	r4, r4, r1
 802a42c:	40e5      	lsrs	r5, r4
 802a42e:	408b      	lsls	r3, r1
 802a430:	432a      	orrs	r2, r5
 802a432:	4949      	ldr	r1, [pc, #292]	@ (802a558 <__ieee754_sqrt+0x1b8>)
 802a434:	0312      	lsls	r2, r2, #12
 802a436:	1844      	adds	r4, r0, r1
 802a438:	2180      	movs	r1, #128	@ 0x80
 802a43a:	0b12      	lsrs	r2, r2, #12
 802a43c:	0349      	lsls	r1, r1, #13
 802a43e:	4311      	orrs	r1, r2
 802a440:	07c0      	lsls	r0, r0, #31
 802a442:	d403      	bmi.n	802a44c <__ieee754_sqrt+0xac>
 802a444:	0fda      	lsrs	r2, r3, #31
 802a446:	0049      	lsls	r1, r1, #1
 802a448:	1851      	adds	r1, r2, r1
 802a44a:	005b      	lsls	r3, r3, #1
 802a44c:	2500      	movs	r5, #0
 802a44e:	1062      	asrs	r2, r4, #1
 802a450:	0049      	lsls	r1, r1, #1
 802a452:	2480      	movs	r4, #128	@ 0x80
 802a454:	9205      	str	r2, [sp, #20]
 802a456:	0fda      	lsrs	r2, r3, #31
 802a458:	1852      	adds	r2, r2, r1
 802a45a:	2016      	movs	r0, #22
 802a45c:	0029      	movs	r1, r5
 802a45e:	005b      	lsls	r3, r3, #1
 802a460:	03a4      	lsls	r4, r4, #14
 802a462:	190e      	adds	r6, r1, r4
 802a464:	4296      	cmp	r6, r2
 802a466:	dc02      	bgt.n	802a46e <__ieee754_sqrt+0xce>
 802a468:	1931      	adds	r1, r6, r4
 802a46a:	1b92      	subs	r2, r2, r6
 802a46c:	192d      	adds	r5, r5, r4
 802a46e:	0fde      	lsrs	r6, r3, #31
 802a470:	0052      	lsls	r2, r2, #1
 802a472:	3801      	subs	r0, #1
 802a474:	1992      	adds	r2, r2, r6
 802a476:	005b      	lsls	r3, r3, #1
 802a478:	0864      	lsrs	r4, r4, #1
 802a47a:	2800      	cmp	r0, #0
 802a47c:	d1f1      	bne.n	802a462 <__ieee754_sqrt+0xc2>
 802a47e:	2620      	movs	r6, #32
 802a480:	2780      	movs	r7, #128	@ 0x80
 802a482:	0004      	movs	r4, r0
 802a484:	9604      	str	r6, [sp, #16]
 802a486:	063f      	lsls	r7, r7, #24
 802a488:	183e      	adds	r6, r7, r0
 802a48a:	46b4      	mov	ip, r6
 802a48c:	428a      	cmp	r2, r1
 802a48e:	dc02      	bgt.n	802a496 <__ieee754_sqrt+0xf6>
 802a490:	d114      	bne.n	802a4bc <__ieee754_sqrt+0x11c>
 802a492:	429e      	cmp	r6, r3
 802a494:	d812      	bhi.n	802a4bc <__ieee754_sqrt+0x11c>
 802a496:	4660      	mov	r0, ip
 802a498:	4666      	mov	r6, ip
 802a49a:	19c0      	adds	r0, r0, r7
 802a49c:	9100      	str	r1, [sp, #0]
 802a49e:	2e00      	cmp	r6, #0
 802a4a0:	da03      	bge.n	802a4aa <__ieee754_sqrt+0x10a>
 802a4a2:	43c6      	mvns	r6, r0
 802a4a4:	0ff6      	lsrs	r6, r6, #31
 802a4a6:	198e      	adds	r6, r1, r6
 802a4a8:	9600      	str	r6, [sp, #0]
 802a4aa:	1a52      	subs	r2, r2, r1
 802a4ac:	4563      	cmp	r3, ip
 802a4ae:	4189      	sbcs	r1, r1
 802a4b0:	4249      	negs	r1, r1
 802a4b2:	1a52      	subs	r2, r2, r1
 802a4b4:	4661      	mov	r1, ip
 802a4b6:	1a5b      	subs	r3, r3, r1
 802a4b8:	9900      	ldr	r1, [sp, #0]
 802a4ba:	19e4      	adds	r4, r4, r7
 802a4bc:	0fde      	lsrs	r6, r3, #31
 802a4be:	0052      	lsls	r2, r2, #1
 802a4c0:	1992      	adds	r2, r2, r6
 802a4c2:	9e04      	ldr	r6, [sp, #16]
 802a4c4:	005b      	lsls	r3, r3, #1
 802a4c6:	3e01      	subs	r6, #1
 802a4c8:	087f      	lsrs	r7, r7, #1
 802a4ca:	9604      	str	r6, [sp, #16]
 802a4cc:	2e00      	cmp	r6, #0
 802a4ce:	d1db      	bne.n	802a488 <__ieee754_sqrt+0xe8>
 802a4d0:	431a      	orrs	r2, r3
 802a4d2:	d01f      	beq.n	802a514 <__ieee754_sqrt+0x174>
 802a4d4:	4e21      	ldr	r6, [pc, #132]	@ (802a55c <__ieee754_sqrt+0x1bc>)
 802a4d6:	4f22      	ldr	r7, [pc, #136]	@ (802a560 <__ieee754_sqrt+0x1c0>)
 802a4d8:	6830      	ldr	r0, [r6, #0]
 802a4da:	6871      	ldr	r1, [r6, #4]
 802a4dc:	683a      	ldr	r2, [r7, #0]
 802a4de:	687b      	ldr	r3, [r7, #4]
 802a4e0:	9200      	str	r2, [sp, #0]
 802a4e2:	9301      	str	r3, [sp, #4]
 802a4e4:	6832      	ldr	r2, [r6, #0]
 802a4e6:	6873      	ldr	r3, [r6, #4]
 802a4e8:	9202      	str	r2, [sp, #8]
 802a4ea:	9303      	str	r3, [sp, #12]
 802a4ec:	9a00      	ldr	r2, [sp, #0]
 802a4ee:	9b01      	ldr	r3, [sp, #4]
 802a4f0:	f7d8 fd16 	bl	8002f20 <__aeabi_dsub>
 802a4f4:	0002      	movs	r2, r0
 802a4f6:	000b      	movs	r3, r1
 802a4f8:	9802      	ldr	r0, [sp, #8]
 802a4fa:	9903      	ldr	r1, [sp, #12]
 802a4fc:	f7d5 ffe8 	bl	80004d0 <__aeabi_dcmple>
 802a500:	2800      	cmp	r0, #0
 802a502:	d007      	beq.n	802a514 <__ieee754_sqrt+0x174>
 802a504:	6830      	ldr	r0, [r6, #0]
 802a506:	6871      	ldr	r1, [r6, #4]
 802a508:	683a      	ldr	r2, [r7, #0]
 802a50a:	687b      	ldr	r3, [r7, #4]
 802a50c:	1c67      	adds	r7, r4, #1
 802a50e:	d10c      	bne.n	802a52a <__ieee754_sqrt+0x18a>
 802a510:	9c04      	ldr	r4, [sp, #16]
 802a512:	3501      	adds	r5, #1
 802a514:	4a13      	ldr	r2, [pc, #76]	@ (802a564 <__ieee754_sqrt+0x1c4>)
 802a516:	106b      	asrs	r3, r5, #1
 802a518:	189b      	adds	r3, r3, r2
 802a51a:	9a05      	ldr	r2, [sp, #20]
 802a51c:	07ed      	lsls	r5, r5, #31
 802a51e:	0864      	lsrs	r4, r4, #1
 802a520:	0512      	lsls	r2, r2, #20
 802a522:	4325      	orrs	r5, r4
 802a524:	0028      	movs	r0, r5
 802a526:	18d1      	adds	r1, r2, r3
 802a528:	e751      	b.n	802a3ce <__ieee754_sqrt+0x2e>
 802a52a:	f7d7 fa13 	bl	8001954 <__aeabi_dadd>
 802a52e:	6877      	ldr	r7, [r6, #4]
 802a530:	6836      	ldr	r6, [r6, #0]
 802a532:	0002      	movs	r2, r0
 802a534:	000b      	movs	r3, r1
 802a536:	0030      	movs	r0, r6
 802a538:	0039      	movs	r1, r7
 802a53a:	f7d5 ffbf 	bl	80004bc <__aeabi_dcmplt>
 802a53e:	2800      	cmp	r0, #0
 802a540:	d004      	beq.n	802a54c <__ieee754_sqrt+0x1ac>
 802a542:	3402      	adds	r4, #2
 802a544:	4263      	negs	r3, r4
 802a546:	4163      	adcs	r3, r4
 802a548:	18ed      	adds	r5, r5, r3
 802a54a:	e7e3      	b.n	802a514 <__ieee754_sqrt+0x174>
 802a54c:	2301      	movs	r3, #1
 802a54e:	3401      	adds	r4, #1
 802a550:	439c      	bics	r4, r3
 802a552:	e7df      	b.n	802a514 <__ieee754_sqrt+0x174>
 802a554:	7ff00000 	.word	0x7ff00000
 802a558:	fffffc01 	.word	0xfffffc01
 802a55c:	0802ede0 	.word	0x0802ede0
 802a560:	0802edd8 	.word	0x0802edd8
 802a564:	3fe00000 	.word	0x3fe00000

0802a568 <_init>:
 802a568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a56a:	46c0      	nop			@ (mov r8, r8)
 802a56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a56e:	bc08      	pop	{r3}
 802a570:	469e      	mov	lr, r3
 802a572:	4770      	bx	lr

0802a574 <_fini>:
 802a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a576:	46c0      	nop			@ (mov r8, r8)
 802a578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a57a:	bc08      	pop	{r3}
 802a57c:	469e      	mov	lr, r3
 802a57e:	4770      	bx	lr
